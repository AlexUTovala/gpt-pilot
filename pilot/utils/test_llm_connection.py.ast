Module(body=[Import(names=[alias(name='builtins')]), ImportFrom(module='json', names=[alias(name='JSONDecodeError')], level=0), Import(names=[alias(name='pytest')]), ImportFrom(module='unittest.mock', names=[alias(name='call'), alias(name='patch'), alias(name='Mock')], level=0), ImportFrom(module='dotenv', names=[alias(name='load_dotenv')], level=0), ImportFrom(module='jsonschema', names=[alias(name='ValidationError')], level=0), ImportFrom(module='const.function_calls', names=[alias(name='ARCHITECTURE'), alias(name='DEVELOPMENT_PLAN')], level=0), ImportFrom(module='helpers.AgentConvo', names=[alias(name='AgentConvo')], level=0), ImportFrom(module='helpers.Project', names=[alias(name='Project')], level=0), ImportFrom(module='helpers.agents.Architect', names=[alias(name='Architect')], level=0), ImportFrom(module='helpers.agents.TechLead', names=[alias(name='TechLead')], level=0), ImportFrom(module='utils.function_calling', names=[alias(name='parse_agent_response'), alias(name='FunctionType')], level=0), ImportFrom(module='test.test_utils', names=[alias(name='assert_non_empty_string')], level=0), ImportFrom(module='test.mock_questionary', names=[alias(name='MockQuestionary')], level=0), ImportFrom(module='utils.llm_connection', names=[alias(name='create_gpt_chat_completion'), alias(name='stream_gpt_completion'), alias(name='assert_json_response'), alias(name='assert_json_schema'), alias(name='clean_json_response'), alias(name='retry_on_exception')], level=0), ImportFrom(module='main', names=[alias(name='get_custom_print')], level=0), Expr(value=Call(func=Name(id='load_dotenv', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='project', ctx=Store())], value=Call(func=Name(id='Project', ctx=Load()), args=[Dict(keys=[Constant(value='app_id')], values=[Constant(value='test-app')])], keywords=[keyword(arg='current_step', value=Constant(value='test')), keyword(arg='enable_dot_pilot_gpt', value=Constant(value=False))])), FunctionDef(name='test_clean_json_response_True_False', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='response', ctx=Store())], value=Constant(value='\n```json\n{\n    "steps": [\n        {\n            "type": "command",\n            "command": {\n                "command": "git init",\n                "daemon": False,\n                "timeout": 3000,\n                "boolean": False\n            },\n            "another_True": True,\n            "check_if_fixed": True\n        }\n    ]\n}\n```\n')), Assign(targets=[Name(id='response', ctx=Store())], value=Call(func=Name(id='clean_json_response', ctx=Load()), args=[Name(id='response', ctx=Load())], keywords=[])), Assert(test=Call(func=Attribute(value=Name(id='response', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='{')], keywords=[])), Assert(test=Call(func=Attribute(value=Name(id='response', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='}')], keywords=[])), Assert(test=Compare(left=Constant(value='"daemon":false,'), ops=[In()], comparators=[Name(id='response', ctx=Load())])), Assert(test=Compare(left=Constant(value='"boolean":false'), ops=[In()], comparators=[Name(id='response', ctx=Load())])), Assert(test=Compare(left=Constant(value='"another_True":true,'), ops=[In()], comparators=[Name(id='response', ctx=Load())])), Assert(test=Compare(left=Constant(value='"check_if_fixed":true'), ops=[In()], comparators=[Name(id='response', ctx=Load())]))], decorator_list=[]), FunctionDef(name='test_clean_json_response_boolean_in_python', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='response', ctx=Store())], value=Constant(value='\n{\n    "type": "code_change",\n    "code_change": {\n        "name": "main.py",\n        "path": "./main.py",\n        "content": "json = {\'is_true\': True,\\n \'is_false\': False}"\n    }\n}')), Assign(targets=[Name(id='response', ctx=Store())], value=Call(func=Name(id='clean_json_response', ctx=Load()), args=[Name(id='response', ctx=Load())], keywords=[])), Assert(test=Compare(left=Constant(value='"content": "json = {\'is_true\': True,\\n \'is_false\': False}"'), ops=[In()], comparators=[Name(id='response', ctx=Load())]))], decorator_list=[]), ClassDef(name='TestRetryOnException', bases=[], keywords=[], body=[FunctionDef(name='setup_method', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='function', ctx=Store()), annotation=Name(id='FunctionType', ctx=Load()), value=Dict(keys=[Constant(value='name'), Constant(value='description'), Constant(value='parameters')], values=[Constant(value='test'), Constant(value='test schema'), Dict(keys=[Constant(value='type'), Constant(value='properties'), Constant(value='required')], values=[Constant(value='object'), Dict(keys=[Constant(value='foo'), Constant(value='boolean'), Constant(value='items')], values=[Dict(keys=[Constant(value='type')], values=[Constant(value='string')]), Dict(keys=[Constant(value='type')], values=[Constant(value='boolean')]), Dict(keys=[Constant(value='type')], values=[Constant(value='array')])]), List(elts=[Constant(value='foo')], ctx=Load())])]), simple=0)], decorator_list=[]), FunctionDef(name='_create_wrapped_function', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='json_responses', annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='args', ctx=Store())], value=Tuple(elts=[Dict(keys=[], values=[]), Constant(value='test'), Name(id='project', ctx=Load())], ctx=Load())), FunctionDef(name='retryable_assert_json_schema', args=arguments(posonlyargs=[], args=[arg(arg='data'), arg(arg='_req_type'), arg(arg='_project')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='json_string', ctx=Store())], value=Call(func=Attribute(value=Name(id='json_responses', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value=0)], keywords=[])), If(test=Compare(left=Constant(value='function_buffer'), ops=[In()], comparators=[Name(id='data', ctx=Load())]), body=[Assign(targets=[Name(id='json_string', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='function_buffer'), ctx=Load()), op=Add(), right=Name(id='json_string', ctx=Load())))], orelse=[]), Expr(value=Call(func=Name(id='assert_json_schema', ctx=Load()), args=[Name(id='json_string', ctx=Load()), List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='function', ctx=Load())], ctx=Load())], keywords=[])), Return(value=Name(id='json_string', ctx=Load()))], decorator_list=[]), Return(value=Tuple(elts=[Call(func=Name(id='retry_on_exception', ctx=Load()), args=[Name(id='retryable_assert_json_schema', ctx=Load())], keywords=[]), Name(id='args', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='test_incomplete_value_string', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='mock_styled_text')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='wrapper', ctx=Store()), Name(id='args', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_create_wrapped_function', ctx=Load()), args=[List(elts=[Constant(value='{"foo": "bar'), Constant(value='"}')], ctx=Load())], keywords=[])), Assign(targets=[Name(id='response', ctx=Store())], value=Call(func=Name(id='wrapper', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[])), Assert(test=Compare(left=Name(id='response', ctx=Load()), ops=[Eq()], comparators=[Constant(value='{"foo": "bar"}')])), Assert(test=Compare(left=Constant(value='function_error'), ops=[NotIn()], comparators=[Subscript(value=Name(id='args', ctx=Load()), slice=Constant(value=0), ctx=Load())])), Assert(test=Compare(left=Attribute(value=Name(id='mock_styled_text', ctx=Load()), attr='call_count', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]))], decorator_list=[]), FunctionDef(name='test_incomplete_key', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='mock_styled_text')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='wrapper', ctx=Store()), Name(id='args', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_create_wrapped_function', ctx=Load()), args=[List(elts=[Constant(value='{"foo'), Constant(value='": "bar"}')], ctx=Load())], keywords=[])), Assign(targets=[Name(id='response', ctx=Store())], value=Call(func=Name(id='wrapper', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[])), Assert(test=Compare(left=Name(id='response', ctx=Load()), ops=[Eq()], comparators=[Constant(value='{"foo": "bar"}')])), Assert(test=Compare(left=Constant(value='function_error'), ops=[NotIn()], comparators=[Subscript(value=Name(id='args', ctx=Load()), slice=Constant(value=0), ctx=Load())])), Assert(test=Compare(left=Attribute(value=Name(id='mock_styled_text', ctx=Load()), attr='call_count', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]))], decorator_list=[]), FunctionDef(name='test_incomplete_value_missing', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='mock_styled_text')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='wrapper', ctx=Store()), Name(id='args', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_create_wrapped_function', ctx=Load()), args=[List(elts=[Constant(value='{"foo":'), Constant(value=' "bar"}')], ctx=Load())], keywords=[])), Assign(targets=[Name(id='response', ctx=Store())], value=Call(func=Name(id='wrapper', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[])), Assert(test=Compare(left=Name(id='response', ctx=Load()), ops=[Eq()], comparators=[Constant(value='{"foo": "bar"}')])), Assert(test=Compare(left=Constant(value='function_error'), ops=[NotIn()], comparators=[Subscript(value=Name(id='args', ctx=Load()), slice=Constant(value=0), ctx=Load())])), Assert(test=Compare(left=Attribute(value=Name(id='mock_styled_text', ctx=Load()), attr='call_count', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]))], decorator_list=[]), FunctionDef(name='test_invalid_boolean', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='mock_styled_text')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='wrapper', ctx=Store()), Name(id='args', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_create_wrapped_function', ctx=Load()), args=[List(elts=[Constant(value='{"foo": "bar", "boolean": True}'), Constant(value='{"foo": "bar", "boolean": True}'), Constant(value='{"foo": "bar", "boolean": True}'), Constant(value='{"foo": "bar", "boolean": true}')], ctx=Load())], keywords=[])), Assign(targets=[Name(id='response', ctx=Store())], value=Call(func=Name(id='wrapper', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[])), Assert(test=Compare(left=Name(id='response', ctx=Load()), ops=[Eq()], comparators=[Constant(value='{"foo": "bar", "boolean": true}')])), Assert(test=Compare(left=Subscript(value=Subscript(value=Name(id='args', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='function_error'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='Invalid value: `True`')])), Assert(test=Compare(left=Constant(value='function_buffer'), ops=[NotIn()], comparators=[Subscript(value=Name(id='args', ctx=Load()), slice=Constant(value=0), ctx=Load())])), Assert(test=Compare(left=Attribute(value=Name(id='mock_styled_text', ctx=Load()), attr='call_count', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]))], decorator_list=[]), FunctionDef(name='test_invalid_escape', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='mock_styled_text')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='wrapper', ctx=Store()), Name(id='args', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_create_wrapped_function', ctx=Load()), args=[List(elts=[Constant(value='{"foo": "\\!"}'), Constant(value='{"foo": "\\xBADU"}'), Constant(value='{"foo": "\\xd800"}'), Constant(value='{"foo": "bar"}')], ctx=Load())], keywords=[])), Assign(targets=[Name(id='response', ctx=Store())], value=Call(func=Name(id='wrapper', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[])), Assert(test=Compare(left=Name(id='response', ctx=Load()), ops=[Eq()], comparators=[Constant(value='{"foo": "bar"}')])), Assert(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Subscript(value=Name(id='args', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='function_error'), ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=0)])), Assert(test=Compare(left=Constant(value='function_buffer'), ops=[NotIn()], comparators=[Subscript(value=Name(id='args', ctx=Load()), slice=Constant(value=0), ctx=Load())])), Assert(test=Compare(left=Attribute(value=Name(id='mock_styled_text', ctx=Load()), attr='call_count', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]))], decorator_list=[]), FunctionDef(name='test_incomplete_json_item', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='mock_styled_text')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='wrapper', ctx=Store()), Name(id='args', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_create_wrapped_function', ctx=Load()), args=[List(elts=[Constant(value='{"foo": "bar",'), Constant(value=' "boolean"'), Constant(value=': true}')], ctx=Load())], keywords=[])), Assign(targets=[Name(id='response', ctx=Store())], value=Call(func=Name(id='wrapper', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[])), Assert(test=Compare(left=Name(id='response', ctx=Load()), ops=[Eq()], comparators=[Constant(value='{"foo": "bar", "boolean": true}')])), Assert(test=Compare(left=Constant(value='function_error'), ops=[NotIn()], comparators=[Subscript(value=Name(id='args', ctx=Load()), slice=Constant(value=0), ctx=Load())])), Assert(test=Compare(left=Attribute(value=Name(id='mock_styled_text', ctx=Load()), attr='call_count', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]))], decorator_list=[]), FunctionDef(name='test_incomplete_json_array', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='mock_styled_text')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='wrapper', ctx=Store()), Name(id='args', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_create_wrapped_function', ctx=Load()), args=[List(elts=[Constant(value='{"foo": "bar", "items": [1, 2, 3, "4"'), Constant(value=', 5]}')], ctx=Load())], keywords=[])), Assign(targets=[Name(id='response', ctx=Store())], value=Call(func=Name(id='wrapper', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[])), Assert(test=Compare(left=Name(id='response', ctx=Load()), ops=[Eq()], comparators=[Constant(value='{"foo": "bar", "items": [1, 2, 3, "4", 5]}')])), Assert(test=Compare(left=Constant(value='function_error'), ops=[NotIn()], comparators=[Subscript(value=Name(id='args', ctx=Load()), slice=Constant(value=0), ctx=Load())])), Assert(test=Compare(left=Attribute(value=Name(id='mock_styled_text', ctx=Load()), attr='call_count', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]))], decorator_list=[]), FunctionDef(name='test_incomplete_then_invalid_by_schema', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='mock_styled_text')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='wrapper', ctx=Store()), Name(id='args', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_create_wrapped_function', ctx=Load()), args=[List(elts=[Constant(value='{"items": [1, 2, 3, "4"'), Constant(value=', 5]}'), Constant(value='{"foo": "bar",'), Constant(value=' "items": [1, 2, 3, "4"'), Constant(value=', 5]}')], ctx=Load())], keywords=[])), Assign(targets=[Name(id='response', ctx=Store())], value=Call(func=Name(id='wrapper', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[])), Assert(test=Compare(left=Name(id='response', ctx=Load()), ops=[Eq()], comparators=[Constant(value='{"foo": "bar", "items": [1, 2, 3, "4", 5]}')])), Assert(test=Compare(left=Constant(value='function_error'), ops=[NotIn()], comparators=[Subscript(value=Name(id='args', ctx=Load()), slice=Constant(value=0), ctx=Load())])), Assert(test=Compare(left=Attribute(value=Name(id='mock_styled_text', ctx=Load()), attr='call_count', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]))], decorator_list=[]), FunctionDef(name='test_invalid_boolean_max_retries', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='mock_styled_text')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='wrapper', ctx=Store()), Name(id='args', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_create_wrapped_function', ctx=Load()), args=[List(elts=[Constant(value='{"boolean": True, "foo": "bar"}'), Constant(value='{"boolean": True,\n "foo": "bar"}'), Constant(value='{"boolean": True}'), Constant(value='{"boolean": true, "foo": "bar"}')], ctx=Load())], keywords=[])), Assign(targets=[Name(id='response', ctx=Store())], value=Call(func=Name(id='wrapper', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[])), Assert(test=Compare(left=Name(id='response', ctx=Load()), ops=[Eq()], comparators=[Constant(value='{"boolean": true, "foo": "bar"}')])), Assert(test=Compare(left=Subscript(value=Subscript(value=Name(id='args', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='function_error'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='Invalid value: `True`')])), Assert(test=Compare(left=Attribute(value=Name(id='mock_styled_text', ctx=Load()), attr='call_count', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]))], decorator_list=[]), FunctionDef(name='test_extra_data', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='mock_styled_text')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='wrapper', ctx=Store()), Name(id='args', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_create_wrapped_function', ctx=Load()), args=[List(elts=[Constant(value='{"boolean": true, "foo": "bar"}\n I hope that helps'), Constant(value='{"boolean": true, "foo": "bar"}\n I hope that helps'), Constant(value='{"boolean": true, "foo": "bar"}\n I hope that helps'), Constant(value='{"boolean": true, "foo": "bar"}')], ctx=Load())], keywords=[])), Assign(targets=[Name(id='response', ctx=Store())], value=Call(func=Name(id='wrapper', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[])), Assert(test=Compare(left=Name(id='response', ctx=Load()), ops=[Eq()], comparators=[Constant(value='{"boolean": true, "foo": "bar"}')])), Assert(test=Compare(left=Subscript(value=Subscript(value=Name(id='args', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='function_error'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='Extra data: line 2 column 2 (char 33)')])), Assert(test=Compare(left=Attribute(value=Name(id='mock_styled_text', ctx=Load()), attr='call_count', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]))], decorator_list=[])], decorator_list=[Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='utils.llm_connection.styled_text')], keywords=[keyword(arg='return_value', value=Constant(value=''))])]), ClassDef(name='TestSchemaValidation', bases=[], keywords=[], body=[FunctionDef(name='setup_method', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='function', ctx=Store()), annotation=Name(id='FunctionType', ctx=Load()), value=Dict(keys=[Constant(value='name'), Constant(value='description'), Constant(value='parameters')], values=[Constant(value='test'), Constant(value='test schema'), Dict(keys=[Constant(value='type'), Constant(value='properties'), Constant(value='required')], values=[Constant(value='object'), Dict(keys=[Constant(value='foo')], values=[Dict(keys=[Constant(value='type')], values=[Constant(value='string')])]), List(elts=[Constant(value='foo')], ctx=Load())])]), simple=0)], decorator_list=[]), FunctionDef(name='test_assert_json_response', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Call(func=Name(id='assert_json_response', ctx=Load()), args=[Constant(value='{"foo": "bar"}')], keywords=[])), Assert(test=Call(func=Name(id='assert_json_response', ctx=Load()), args=[Constant(value='{\n"foo": "bar"}')], keywords=[])), Assert(test=Call(func=Name(id='assert_json_response', ctx=Load()), args=[Constant(value='```\n{"foo": "bar"}')], keywords=[])), Assert(test=Call(func=Name(id='assert_json_response', ctx=Load()), args=[Constant(value='```json\n{\n"foo": "bar"}')], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='ValueError', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value='LLM did not respond with JSON'))]))], body=[Assert(test=Call(func=Name(id='assert_json_response', ctx=Load()), args=[Constant(value='# Foo\n bar')], keywords=[]))])], decorator_list=[]), FunctionDef(name='test_assert_json_schema', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Call(func=Name(id='assert_json_schema', ctx=Load()), args=[Constant(value='{"foo": "bar"}'), List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='function', ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_assert_json_schema_incomplete', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='JSONDecodeError', ctx=Load())], keywords=[]))], body=[Expr(value=Call(func=Name(id='assert_json_schema', ctx=Load()), args=[Constant(value='{"foo": "b'), List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='function', ctx=Load())], ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='test_assert_json_schema_invalid', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='ValidationError', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value="1 is not of type 'string'"))]))], body=[Expr(value=Call(func=Name(id='assert_json_schema', ctx=Load()), args=[Constant(value='{"foo": 1}'), List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='function', ctx=Load())], ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='test_assert_json_schema_required', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='function', ctx=Load()), slice=Constant(value='parameters'), ctx=Load()), slice=Constant(value='properties'), ctx=Load()), slice=Constant(value='other'), ctx=Store())], value=Dict(keys=[Constant(value='type')], values=[Constant(value='string')])), Assign(targets=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='function', ctx=Load()), slice=Constant(value='parameters'), ctx=Load()), slice=Constant(value='required'), ctx=Store())], value=List(elts=[Constant(value='foo'), Constant(value='other')], ctx=Load())), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='ValidationError', ctx=Load())], keywords=[keyword(arg='match', value=Constant(value="'other' is a required property"))]))], body=[Expr(value=Call(func=Name(id='assert_json_schema', ctx=Load()), args=[Constant(value='{"foo": "bar"}'), List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='function', ctx=Load())], ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='test_DEVELOPMENT_PLAN', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Call(func=Name(id='assert_json_schema', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='\n{\n  "plan": [\n    {\n      "description": "Set up project structure including creation of necessary directories and files. Initialize Node.js and install necessary libraries such as express and socket.io.",\n      "programmatic_goal": "Project structure should be set up and Node.js initialized. Express and socket.io libraries should be installed and reflected in the package.json file.",\n      "user_review_goal": "Developer should be able to start an empty express server by running `npm start` command without any errors."\n    },\n    {\n      "description": "Create a simple front-end HTML page with CSS and JavaScript that includes input for typing messages and area for displaying messages.",\n      "programmatic_goal": "There should be an HTML file containing an input box for typing messages and an area for displaying the messages. This HTML page should be served when user navigates to the root URL.",\n      "user_review_goal": "Navigating to the root URL (http://localhost:3000) should display the chat front-end with an input box and a message area."\n    },\n    {\n      "description": "Set up socket.io on the back-end to handle websocket connections and broadcasting messages to the clients.",\n      "programmatic_goal": "Server should be able to handle websocket connections using socket.io and broadcast messages to all connected clients.",\n      "user_review_goal": "By using two different browsers or browser tabs, when one user sends a message from one tab, it should appear in the other user\'s browser tab in real-time."\n    },\n    {\n      "description": "Integrate front-end with socket.io client to send messages from the input field to the server and display incoming messages in the message area.",\n      "programmatic_goal": "Front-end should be able to send messages to server and display incoming messages in the message area using socket.io client.",\n      "user_review_goal": "Typing a message in the chat input and sending it should then display the message in the chat area."\n    }\n  ]\n}\n'), attr='strip', ctx=Load()), args=[], keywords=[]), Subscript(value=Name(id='DEVELOPMENT_PLAN', ctx=Load()), slice=Constant(value='definitions'), ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='TestLlmConnection', bases=[], keywords=[], body=[FunctionDef(name='setup_method', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Attribute(value=Name(id='builtins', ctx=Load()), attr='print', ctx=Store()), Name(id='ipc_client_instance', ctx=Store())], ctx=Store())], value=Call(func=Name(id='get_custom_print', ctx=Load()), args=[Dict(keys=[], values=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_rate_limit_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='mock_sleep'), arg(arg='mock_post'), arg(arg='monkeypatch')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='monkeypatch', ctx=Load()), attr='setenv', ctx=Load()), args=[Constant(value='OPENAI_API_KEY'), Constant(value='secret')], keywords=[])), Assign(targets=[Name(id='error_text', ctx=Store())], value=Constant(value='{\n                "error": {\n                    "message": "Rate limit reached for 10KTPM-200RPM in organization org-OASFC7k1Ff5IzueeLArhQtnT on tokens per min. Limit: 10000 / min. Please try again in 6ms. Contact us through our help center at help.openai.com if you continue to have issues.",\n                    "type": "tokens",\n                    "param": null,\n                    "code": "rate_limit_exceeded"\n                }\n            }')), Assign(targets=[Name(id='content', ctx=Store())], value=Constant(value='DONE')), Assign(targets=[Name(id='success_text', ctx=Store())], value=BinOp(left=BinOp(left=Constant(value='{"id": "gen-123", "choices": [{"index": 0, "delta": {"role": "assistant", "content": "'), op=Add(), right=Name(id='content', ctx=Load())), op=Add(), right=Constant(value='"}}]}'))), Assign(targets=[Name(id='error_response', ctx=Store())], value=Call(func=Name(id='Mock', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='error_response', ctx=Load()), attr='status_code', ctx=Store())], value=Constant(value=429)), Assign(targets=[Attribute(value=Name(id='error_response', ctx=Load()), attr='text', ctx=Store())], value=Name(id='error_text', ctx=Load())), Assign(targets=[Name(id='mock_response', ctx=Store())], value=Call(func=Name(id='Mock', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='mock_response', ctx=Load()), attr='status_code', ctx=Store())], value=Constant(value=200)), Assign(targets=[Attribute(value=Attribute(value=Name(id='mock_response', ctx=Load()), attr='iter_lines', ctx=Load()), attr='return_value', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='success_text', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[])], ctx=Load())), Assign(targets=[Attribute(value=Name(id='mock_post', ctx=Load()), attr='side_effect', ctx=Store())], value=List(elts=[Name(id='error_response', ctx=Load()), Name(id='error_response', ctx=Load()), Name(id='error_response', ctx=Load()), Name(id='error_response', ctx=Load()), Name(id='error_response', ctx=Load()), Name(id='error_response', ctx=Load()), Name(id='error_response', ctx=Load()), Name(id='error_response', ctx=Load()), Name(id='error_response', ctx=Load()), Name(id='error_response', ctx=Load()), Name(id='error_response', ctx=Load()), Name(id='error_response', ctx=Load()), Name(id='mock_response', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='wrapper', ctx=Store())], value=Call(func=Name(id='retry_on_exception', ctx=Load()), args=[Name(id='stream_gpt_completion', ctx=Load())], keywords=[])), Assign(targets=[Name(id='data', ctx=Store())], value=Dict(keys=[Constant(value='model'), Constant(value='messages')], values=[Constant(value='gpt-4'), List(elts=[Dict(keys=[Constant(value='role'), Constant(value='content')], values=[Constant(value='user'), Constant(value='testing')])], ctx=Load())])), Assign(targets=[Name(id='response', ctx=Store())], value=Call(func=Name(id='wrapper', ctx=Load()), args=[Name(id='data', ctx=Load()), Constant(value='test'), Name(id='project', ctx=Load())], keywords=[])), Assert(test=Compare(left=Name(id='response', ctx=Load()), ops=[Eq()], comparators=[Dict(keys=[Constant(value='text')], values=[Constant(value='DONE')])])), Assert(test=Compare(left=Attribute(value=Name(id='mock_sleep', ctx=Load()), attr='call_args_list', ctx=Load()), ops=[Eq()], comparators=[List(elts=[Call(func=Name(id='call', ctx=Load()), args=[Constant(value=0.006)], keywords=[]), Call(func=Name(id='call', ctx=Load()), args=[Constant(value=0.012)], keywords=[]), Call(func=Name(id='call', ctx=Load()), args=[Constant(value=0.024)], keywords=[]), Call(func=Name(id='call', ctx=Load()), args=[Constant(value=0.048)], keywords=[]), Call(func=Name(id='call', ctx=Load()), args=[Constant(value=0.096)], keywords=[]), Call(func=Name(id='call', ctx=Load()), args=[Constant(value=0.192)], keywords=[]), Call(func=Name(id='call', ctx=Load()), args=[Constant(value=0.384)], keywords=[]), Call(func=Name(id='call', ctx=Load()), args=[Constant(value=0.768)], keywords=[]), Call(func=Name(id='call', ctx=Load()), args=[Constant(value=1.536)], keywords=[]), Call(func=Name(id='call', ctx=Load()), args=[Constant(value=3.072)], keywords=[]), Call(func=Name(id='call', ctx=Load()), args=[Constant(value=6.144)], keywords=[]), Call(func=Name(id='call', ctx=Load()), args=[Constant(value=6.144)], keywords=[])], ctx=Load())]))], decorator_list=[Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='utils.llm_connection.requests.post')], keywords=[]), Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='utils.llm_connection.time.sleep')], keywords=[])]), FunctionDef(name='test_stream_gpt_completion', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='mock_post'), arg(arg='monkeypatch')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='monkeypatch', ctx=Load()), attr='setenv', ctx=Load()), args=[Constant(value='OPENAI_API_KEY'), Constant(value='secret')], keywords=[])), Assign(targets=[Name(id='deltas', ctx=Store())], value=List(elts=[Constant(value='{'), Constant(value='\\n'), Constant(value='  \\"foo\\": \\"bar\\",'), Constant(value='\\n'), Constant(value='  \\"prompt\\": \\"Hello\\",'), Constant(value='\\n'), Constant(value='  \\"choices\\": []'), Constant(value='\\n'), Constant(value='}')], ctx=Load())), Assign(targets=[Name(id='lines_to_yield', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=BinOp(left=BinOp(left=Constant(value='{"id": "gen-123", "choices": [{"index": 0, "delta": {"role": "assistant", "content": "'), op=Add(), right=Name(id='delta', ctx=Load())), op=Add(), right=Constant(value='"}}]}')), attr='encode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[]), generators=[comprehension(target=Name(id='delta', ctx=Store()), iter=Name(id='deltas', ctx=Load()), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='lines_to_yield', ctx=Load()), attr='insert', ctx=Load()), args=[Constant(value=1), Constant(value=b': OPENROUTER PROCESSING')], keywords=[])), Assign(targets=[Name(id='mock_response', ctx=Store())], value=Call(func=Name(id='Mock', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='mock_response', ctx=Load()), attr='status_code', ctx=Store())], value=Constant(value=200)), Assign(targets=[Attribute(value=Attribute(value=Name(id='mock_response', ctx=Load()), attr='iter_lines', ctx=Load()), attr='return_value', ctx=Store())], value=Name(id='lines_to_yield', ctx=Load())), Assign(targets=[Attribute(value=Name(id='mock_post', ctx=Load()), attr='return_value', ctx=Store())], value=Name(id='mock_response', ctx=Load())), With(items=[withitem(context_expr=Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='utils.llm_connection.requests.post')], keywords=[keyword(arg='return_value', value=Name(id='mock_response', ctx=Load()))]))], body=[Assign(targets=[Name(id='response', ctx=Store())], value=Call(func=Name(id='stream_gpt_completion', ctx=Load()), args=[Dict(keys=[Constant(value='model'), Constant(value='messages')], values=[Constant(value='gpt-4'), List(elts=[], ctx=Load())]), Constant(value=''), Name(id='project', ctx=Load())], keywords=[])), Assert(test=Compare(left=Name(id='response', ctx=Load()), ops=[Eq()], comparators=[Dict(keys=[Constant(value='text')], values=[Constant(value='{\n  "foo": "bar",\n  "prompt": "Hello",\n  "choices": []\n}')])]))])], decorator_list=[Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='utils.llm_connection.requests.post')], keywords=[])]), FunctionDef(name='test_chat_completion_Architect', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='endpoint'), arg(arg='model'), arg(arg='monkeypatch')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='monkeypatch', ctx=Load()), attr='setenv', ctx=Load()), args=[Constant(value='ENDPOINT'), Name(id='endpoint', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='monkeypatch', ctx=Load()), attr='setenv', ctx=Load()), args=[Constant(value='MODEL_NAME'), Name(id='model', ctx=Load())], keywords=[])), Assign(targets=[Name(id='agent', ctx=Store())], value=Call(func=Name(id='Architect', ctx=Load()), args=[Name(id='project', ctx=Load())], keywords=[])), Assign(targets=[Name(id='convo', ctx=Store())], value=Call(func=Name(id='AgentConvo', ctx=Load()), args=[Name(id='agent', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='convo', ctx=Load()), attr='construct_and_add_message_from_prompt', ctx=Load()), args=[Constant(value='architecture/technologies.prompt'), Dict(keys=[Constant(value='name'), Constant(value='app_summary'), Constant(value='app_type'), Constant(value='user_stories')], values=[Constant(value='Test App'), Constant(value='\nThe project involves the development of a web-based chat application named "Test_App". \nIn this application, users can send direct messages to each other. \nHowever, it does not include a group chat functionality. \nMultimedia messaging, such as the exchange of images and videos, is not a requirement for this application. \nNo clear instructions were given for the inclusion of user profile customization features like profile \npicture and status updates, as well as a feature for chat history. The project must be developed strictly \nas a monolithic application, regardless of any other suggested methods. \nThe project\'s specifications are subject to the project manager\'s discretion, implying a need for \nsolution-oriented decision-making in areas where precise instructions were not provided.'), Constant(value='web app'), List(elts=[Constant(value='User will be able to send direct messages to another user.'), Constant(value='User will receive direct messages from other users.'), Constant(value='User will view the sent and received messages in a conversation view.'), Constant(value='User will select a user to send a direct message.'), Constant(value='User will be able to search for users to send direct messages to.'), Constant(value='Users can view the online status of other users.'), Constant(value='User will be able to log into the application using their credentials.'), Constant(value='User will be able to logout from the Test_App.'), Constant(value='User will be able to register a new account on Test_App.')], ctx=Load())])], keywords=[])), Assign(targets=[Name(id='function_calls', ctx=Store())], value=Name(id='ARCHITECTURE', ctx=Load())), Assign(targets=[Name(id='response', ctx=Store())], value=Call(func=Name(id='create_gpt_chat_completion', ctx=Load()), args=[Attribute(value=Name(id='convo', ctx=Load()), attr='messages', ctx=Load()), Constant(value=''), Name(id='project', ctx=Load())], keywords=[keyword(arg='function_calls', value=Name(id='function_calls', ctx=Load()))])), Assert(test=Call(func=Attribute(value=Subscript(value=Subscript(value=Attribute(value=Name(id='convo', ctx=Load()), attr='messages', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='content'), ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='You are an experienced software architect')], keywords=[])), Assert(test=Call(func=Attribute(value=Subscript(value=Subscript(value=Attribute(value=Name(id='convo', ctx=Load()), attr='messages', ctx=Load()), slice=Constant(value=1), ctx=Load()), slice=Constant(value='content'), ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='You are working in a software development agency')], keywords=[])), Assert(test=Compare(left=Name(id='response', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Name(id='response', ctx=Store())], value=Call(func=Name(id='parse_agent_response', ctx=Load()), args=[Name(id='response', ctx=Load()), Name(id='function_calls', ctx=Load())], keywords=[])), Assert(test=Compare(left=Constant(value='Node.js'), ops=[In()], comparators=[Subscript(value=Name(id='response', ctx=Load()), slice=Constant(value='technologies'), ctx=Load())]))], decorator_list=[Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='uses_tokens', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='endpoint, model'), List(elts=[Tuple(elts=[Constant(value='OPENAI'), Constant(value='gpt-4')], ctx=Load()), Tuple(elts=[Constant(value='OPENROUTER'), Constant(value='openai/gpt-3.5-turbo')], ctx=Load()), Tuple(elts=[Constant(value='OPENROUTER'), Constant(value='meta-llama/codellama-34b-instruct')], ctx=Load()), Tuple(elts=[Constant(value='OPENROUTER'), Constant(value='google/palm-2-chat-bison')], ctx=Load()), Tuple(elts=[Constant(value='OPENROUTER'), Constant(value='google/palm-2-codechat-bison')], ctx=Load()), Tuple(elts=[Constant(value='OPENROUTER'), Constant(value='anthropic/claude-2')], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_chat_completion_TechLead', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='endpoint'), arg(arg='model'), arg(arg='monkeypatch')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='monkeypatch', ctx=Load()), attr='setenv', ctx=Load()), args=[Constant(value='ENDPOINT'), Name(id='endpoint', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='monkeypatch', ctx=Load()), attr='setenv', ctx=Load()), args=[Constant(value='MODEL_NAME'), Name(id='model', ctx=Load())], keywords=[])), Assign(targets=[Name(id='agent', ctx=Store())], value=Call(func=Name(id='TechLead', ctx=Load()), args=[Name(id='project', ctx=Load())], keywords=[])), Assign(targets=[Name(id='convo', ctx=Store())], value=Call(func=Name(id='AgentConvo', ctx=Load()), args=[Name(id='agent', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='convo', ctx=Load()), attr='construct_and_add_message_from_prompt', ctx=Load()), args=[Constant(value='development/plan.prompt'), Dict(keys=[Constant(value='name'), Constant(value='app_summary'), Constant(value='app_type'), Constant(value='user_stories')], values=[Constant(value='Test App'), Constant(value='\n    The project entails creating a web-based chat application, tentatively named "chat_app." \nThis application does not require user authentication or chat history storage. \nIt solely supports one-on-one messaging, excluding group chats or multimedia sharing like photos, videos, or files. \nAdditionally, there are no specific requirements for real-time functionality, like live typing indicators or read receipts. \nThe development of this application will strictly follow a monolithic structure, avoiding the use of microservices, as per the client\'s demand. \nThe development process will include the creation of user stories and tasks, based on detailed discussions with the client.'), Constant(value='web app'), List(elts=[Constant(value='User Story 1: As a user, I can access the web-based "chat_app" directly without needing to authenticate or log in. Do you want to add anything else? If not, just press ENTER.'), Constant(value='User Story 2: As a user, I can start one-on-one conversations with another user on the "chat_app". Do you want to add anything else? If not, just press ENTER.'), Constant(value='User Story 3: As a user, I can send and receive messages in real-time within my one-on-one conversation on the "chat_app". Do you want to add anything else? If not, just press ENTER.'), Constant(value='User Story 4: As a user, I do not need to worry about deleting or storing my chats because the "chat_app" does not store chat histories. Do you want to add anything else? If not, just press ENTER.'), Constant(value='User Story 5: As a user, I will only be able to send text messages, as the "chat_app" does not support any kind of multimedia sharing like photos, videos, or files. Do you want to add anything else? If not, just press ENTER.'), Constant(value='User Story 6: As a user, I will not see any live typing indicators or read receipts since the "chat_app" does not provide any additional real-time functionality beyond message exchange. Do you want to add anything else? If not, just press ENTER.')], ctx=Load())])], keywords=[])), Assign(targets=[Name(id='function_calls', ctx=Store())], value=Name(id='DEVELOPMENT_PLAN', ctx=Load())), Assign(targets=[Name(id='response', ctx=Store())], value=Call(func=Name(id='create_gpt_chat_completion', ctx=Load()), args=[Attribute(value=Name(id='convo', ctx=Load()), attr='messages', ctx=Load()), Constant(value=''), Name(id='project', ctx=Load())], keywords=[keyword(arg='function_calls', value=Name(id='function_calls', ctx=Load()))])), Assert(test=Call(func=Attribute(value=Subscript(value=Subscript(value=Attribute(value=Name(id='convo', ctx=Load()), attr='messages', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='content'), ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='You are a tech lead in a software development agency')], keywords=[])), Assert(test=Call(func=Attribute(value=Subscript(value=Subscript(value=Attribute(value=Name(id='convo', ctx=Load()), attr='messages', ctx=Load()), slice=Constant(value=1), ctx=Load()), slice=Constant(value='content'), ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='You are working in a software development agency and a project manager and software architect approach you')], keywords=[])), Assert(test=Compare(left=Name(id='response', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Name(id='response', ctx=Store())], value=Call(func=Name(id='parse_agent_response', ctx=Load()), args=[Name(id='response', ctx=Load()), Name(id='function_calls', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='assert_non_empty_string', ctx=Load()), args=[Subscript(value=Subscript(value=Subscript(value=Name(id='response', ctx=Load()), slice=Constant(value='plan'), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='description'), ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='assert_non_empty_string', ctx=Load()), args=[Subscript(value=Subscript(value=Subscript(value=Name(id='response', ctx=Load()), slice=Constant(value='plan'), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='programmatic_goal'), ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='assert_non_empty_string', ctx=Load()), args=[Subscript(value=Subscript(value=Subscript(value=Name(id='response', ctx=Load()), slice=Constant(value='plan'), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='user_review_goal'), ctx=Load())], keywords=[]))], decorator_list=[Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='uses_tokens', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='endpoint, model'), List(elts=[Tuple(elts=[Constant(value='OPENAI'), Constant(value='gpt-4')], ctx=Load()), Tuple(elts=[Constant(value='OPENROUTER'), Constant(value='openai/gpt-3.5-turbo')], ctx=Load()), Tuple(elts=[Constant(value='OPENROUTER'), Constant(value='meta-llama/codellama-34b-instruct')], ctx=Load()), Tuple(elts=[Constant(value='OPENROUTER'), Constant(value='phind/phind-codellama-34b-v2')], ctx=Load()), Tuple(elts=[Constant(value='OPENROUTER'), Constant(value='google/palm-2-chat-bison')], ctx=Load()), Tuple(elts=[Constant(value='OPENROUTER'), Constant(value='google/palm-2-codechat-bison')], ctx=Load()), Tuple(elts=[Constant(value='OPENROUTER'), Constant(value='anthropic/claude-2')], ctx=Load()), Tuple(elts=[Constant(value='OPENROUTER'), Constant(value='mistralai/mistral-7b-instruct')], ctx=Load())], ctx=Load())], keywords=[])])], decorator_list=[])], type_ignores=[])