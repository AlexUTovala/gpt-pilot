Module(body=[Import(names=[alias(name='platform')]), Import(names=[alias(name='questionary')]), Import(names=[alias(name='re')]), Import(names=[alias(name='sys')]), ImportFrom(module='database.database', names=[alias(name='save_user_input'), alias(name='get_saved_user_input')], level=0), ImportFrom(module='utils.style', names=[alias(name='color_yellow_bold'), alias(name='style_config')], level=0), FunctionDef(name='remove_ansi_codes', args=arguments(posonlyargs=[], args=[arg(arg='s', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ansi_escape', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='\\x1B(?:[@-Z\\\\-_]|\\[[0-?]*[ -/]*[@-~])')], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='ansi_escape', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value=''), Name(id='s', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='styled_select', args=arguments(posonlyargs=[], args=[], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Assign(targets=[Subscript(value=Name(id='kwargs', ctx=Load()), slice=Constant(value='style'), ctx=Store())], value=Call(func=Attribute(value=Name(id='style_config', ctx=Load()), attr='get_style', ctx=Load()), args=[], keywords=[])), Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='questionary', ctx=Load()), attr='select', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]), attr='unsafe_ask', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='styled_text', args=arguments(posonlyargs=[], args=[arg(arg='project'), arg(arg='question'), arg(arg='ignore_user_input_count'), arg(arg='style'), arg(arg='hint')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Constant(value=None), Constant(value=None)]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='ignore_user_input_count', ctx=Load())), body=[AugAssign(target=Attribute(value=Name(id='project', ctx=Load()), attr='user_inputs_count', ctx=Store()), op=Add(), value=Constant(value=1)), Assign(targets=[Name(id='user_input', ctx=Store())], value=Call(func=Name(id='get_saved_user_input', ctx=Load()), args=[Name(id='project', ctx=Load()), Name(id='question', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='user_input', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='user_input', ctx=Load()), attr='user_input', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Attribute(value=Name(id='project', ctx=Load()), attr='skip_steps', ctx=Load())]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='project', ctx=Load()), attr='checkpoints', ctx=Load()), slice=Constant(value='last_user_input'), ctx=Store())], value=Name(id='user_input', ctx=Load())), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Name(id='color_yellow_bold', ctx=Load()), args=[JoinedStr(values=[Constant(value='Restoring user input id '), FormattedValue(value=Attribute(value=Name(id='user_input', ctx=Load()), attr='id', ctx=Load()), conversion=-1), Constant(value=': ')])], keywords=[])], keywords=[keyword(arg='end', value=Constant(value=''))])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Name(id='color_yellow_bold', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='user_input', ctx=Load()), attr='user_input', ctx=Load()), conversion=-1)])], keywords=[])], keywords=[])), Return(value=Attribute(value=Name(id='user_input', ctx=Load()), attr='user_input', ctx=Load()))], orelse=[])], orelse=[]), If(test=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='project', ctx=Load()), attr='ipc_client_instance', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Attribute(value=Name(id='project', ctx=Load()), attr='ipc_client_instance', ctx=Load()), attr='client', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Name(id='used_style', ctx=Store())], value=IfExp(test=Compare(left=Name(id='style', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Name(id='style', ctx=Load()), orelse=Call(func=Attribute(value=Name(id='style_config', ctx=Load()), attr='get_style', ctx=Load()), args=[], keywords=[]))), Assign(targets=[Name(id='question', ctx=Store())], value=Call(func=Name(id='remove_ansi_codes', ctx=Load()), args=[Name(id='question', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='flush_input', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='response', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='questionary', ctx=Load()), attr='text', ctx=Load()), args=[Name(id='question', ctx=Load())], keywords=[keyword(arg='style', value=Name(id='used_style', ctx=Load()))]), attr='unsafe_ask', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Name(id='response', ctx=Store())], value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='question', ctx=Load())], keywords=[keyword(arg='type', value=Constant(value='user_input_request'))])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='response', ctx=Load())], keywords=[]))]), If(test=UnaryOp(op=Not(), operand=Name(id='ignore_user_input_count', ctx=Load())), body=[Expr(value=Call(func=Name(id='save_user_input', ctx=Load()), args=[Name(id='project', ctx=Load()), Name(id='question', ctx=Load()), Name(id='response', ctx=Load()), Name(id='hint', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='\n\n')], keywords=[keyword(arg='end', value=Constant(value=''))])), Return(value=Name(id='response', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_user_feedback', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='questionary', ctx=Load()), attr='text', ctx=Load()), args=[Constant(value='How did GPT Pilot do? Were you able to create any app that works? Please write any feedback you have or just press ENTER to exit: ')], keywords=[keyword(arg='style', value=Call(func=Attribute(value=Name(id='style_config', ctx=Load()), attr='get_style', ctx=Load()), args=[], keywords=[]))]), attr='unsafe_ask', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='ask_user_to_store_init_prompt', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='questionary', ctx=Load()), attr='text', ctx=Load()), args=[Constant(value='We would appreciate if you let us store your initial app prompt. If you are OK with that, please just press ENTER')], keywords=[keyword(arg='style', value=Call(func=Attribute(value=Name(id='style_config', ctx=Load()), attr='get_style', ctx=Load()), args=[], keywords=[]))]), attr='unsafe_ask', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='flush_input', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Flush the input buffer, discarding all that's in the buffer.")), Try(body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='system', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Constant(value='Windows')]), body=[Import(names=[alias(name='msvcrt')]), While(test=Call(func=Attribute(value=Name(id='msvcrt', ctx=Load()), attr='kbhit', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='msvcrt', ctx=Load()), attr='getch', ctx=Load()), args=[], keywords=[]))], orelse=[])], orelse=[Import(names=[alias(name='termios')]), Expr(value=Call(func=Attribute(value=Name(id='termios', ctx=Load()), attr='tcflush', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='stdin', ctx=Load()), Attribute(value=Name(id='termios', ctx=Load()), attr='TCIOFLUSH', ctx=Load())], keywords=[]))])], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='ImportError', ctx=Load()), Name(id='OSError', ctx=Load())], ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], decorator_list=[])], type_ignores=[])