Module(body=[Import(names=[alias(name='json')]), ImportFrom(module='logging', names=[alias(name='getLogger')], level=0), ImportFrom(module='os', names=[alias(name='getenv'), alias(name='makedirs')], level=0), ImportFrom(module='pathlib', names=[alias(name='Path')], level=0), Import(names=[alias(name='sys')]), ImportFrom(module='typing', names=[alias(name='Any'), alias(name='Optional')], level=0), ImportFrom(module='dotenv', names=[alias(name='load_dotenv')], level=0), Expr(value=Call(func=Name(id='load_dotenv', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='log', ctx=Store())], value=Call(func=Name(id='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), Assign(targets=[Name(id='AVAILABLE_SETTINGS', ctx=Store())], value=List(elts=[Constant(value='telemetry'), Constant(value='openai_api_key')], ctx=Load())), ClassDef(name='Settings', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    Application settings\n\n    This object holds all the settings for the application, whether they are\n    loaded from the config file, set via environment variables or the command\n    line arguments.\n\n    Available settings are listed in the `AVAILABLE_SETTINGS` list.\n\n    This is a singleton object, use it by importing the instance\n    directly from the module:\n\n    >>> from utils.settings import settings\n\n    To get a setting:\n\n    >>> settings.openai_api_key\n\n    To get all settings as a dictionary:\n\n    >>> dict(settings)\n\n    To set (update) one setting:\n\n    >>> settings.openai_api_key = "test_key"\n\n    To update multiple settings at once:\n\n    >>> settings.update(openai_api_key="test_key", telemetry=None)\n\n    Note: updating settings will not save them to the config file.\n    To do that, use the `loader.save()` method:\n\n    >>> from utils.settings import loader\n    >>> loader.save("openai_api_key", "telemetry")\n\n    To see all available settings:\n\n    >>> from utils.settings import AVAILABLE_SETTINGS\n    >>> print(AVAILABLE_SETTINGS)\n    ')), Assign(targets=[Name(id='__slots__', ctx=Store())], value=Name(id='AVAILABLE_SETTINGS', ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[For(target=Name(id='key', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='__slots__', ctx=Load()), body=[Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='key', ctx=Load()), Constant(value=None)], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='update', ctx=Load()), args=[], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='__iter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='key', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='__slots__', ctx=Load()), body=[Expr(value=Yield(value=Tuple(elts=[Name(id='key', ctx=Load()), Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='key', ctx=Load())], keywords=[])], ctx=Load())))], orelse=[])], decorator_list=[]), FunctionDef(name='update', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Constant(value='\n        Update settings.\n\n        :param kwargs: settings to update (name=value)\n        ')), For(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='kwargs', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Try(body=[Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='key', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='warning', ctx=Load()), args=[JoinedStr(values=[Constant(value='Ignoring unknown setting: '), FormattedValue(value=Name(id='key', ctx=Load()), conversion=-1)])], keywords=[]))])], orelse=[], finalbody=[])], orelse=[])], decorator_list=[])], decorator_list=[]), ClassDef(name='Loader', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    Loader for application settings.\n\n    The app settings are stored in a JSON file in the config directory.\n\n    The config directory is determined by the following rules:\n    * If the XDG_CONFIG_HOME environment variable is set (desktop Linux), use that.\n    * If the APPDATA environment variable is set (Windows), use that.\n    * Otherwise, use the POSIX default ~/.<app-name> (MacOS, server Linux).\n\n    Settings from the config file can be overriden by environment variables\n    (all caps) or command line arguments.\n\n    This is a singleton object, use it by importing the instance directly\n    from the module:\n\n    >>> from utils.settings import loader\n\n    This will load the settings automatically.\n\n    To get the config file location:\n\n    >>> from utils.settings import config_path\n    >>> print(config_path)\n\n    To get the current version of GPT Pilot:\n\n    >>> from utils.settings import version\n    >>> print(version)\n    ')), Assign(targets=[Name(id='APP_NAME', ctx=Store())], value=Constant(value='GPT Pilot')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='settings', annotation=Name(id='Settings', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='config_dir', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='resolve_config_dir', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='config_path', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='config_dir', ctx=Load()), op=Div(), right=Constant(value='config.json'))), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='settings', ctx=Store())], value=Name(id='settings', ctx=Load()))], decorator_list=[]), FunctionDef(name='load', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Load settings from the config file, environment\n        variables and the command-line arguments.\n        ')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='settings', ctx=Load()), attr='update', ctx=Load()), args=[], keywords=[keyword(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_load_config', ctx=Load()), args=[], keywords=[]))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='update_settings_from_env', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='settings', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='update_settings_from_args', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='settings', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='resolve_config_dir', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Figure out where to store the config file(s).\n\n        :return: path to the desired location config directory\n\n        See the clas docstring for details on how the config directory is\n        determined.\n        ')), Assign(targets=[Name(id='posix_app_name', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='cls', ctx=Load()), attr='APP_NAME', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value=' '), Constant(value='-')], keywords=[]), attr='lower', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='xdg_config_home', ctx=Store())], value=Call(func=Name(id='getenv', ctx=Load()), args=[Constant(value='XDG_CONFIG_HOME')], keywords=[])), If(test=Name(id='xdg_config_home', ctx=Load()), body=[Return(value=BinOp(left=Call(func=Name(id='Path', ctx=Load()), args=[Name(id='xdg_config_home', ctx=Load())], keywords=[]), op=Div(), right=Call(func=Name(id='Path', ctx=Load()), args=[Name(id='posix_app_name', ctx=Load())], keywords=[])))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), ops=[Eq()], comparators=[Constant(value='win32')]), Call(func=Name(id='getenv', ctx=Load()), args=[Constant(value='APPDATA')], keywords=[])]), body=[Return(value=BinOp(left=Call(func=Name(id='Path', ctx=Load()), args=[Call(func=Name(id='getenv', ctx=Load()), args=[Constant(value='APPDATA')], keywords=[])], keywords=[]), op=Div(), right=Call(func=Name(id='Path', ctx=Load()), args=[Attribute(value=Name(id='cls', ctx=Load()), attr='APP_NAME', ctx=Load())], keywords=[])))], orelse=[]), Return(value=BinOp(left=Call(func=Attribute(value=Call(func=Name(id='Path', ctx=Load()), args=[Constant(value='~')], keywords=[]), attr='expanduser', ctx=Load()), args=[], keywords=[]), op=Div(), right=Call(func=Name(id='Path', ctx=Load()), args=[JoinedStr(values=[Constant(value='.'), FormattedValue(value=Name(id='posix_app_name', ctx=Load()), conversion=-1)])], keywords=[])))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Name(id='Path', ctx=Load())), FunctionDef(name='_load_config', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Load settings from the config file.\n\n        :returns: dict of settings loaded from the config file\n\n        If the file doesn't exist or there is an error loading the\n        config file, an empty settings dict will be returned.\n\n        This is a low-level method used automatically by `Loader.load()`.\n        ")), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config_path', ctx=Load()), attr='exists', ctx=Load()), args=[], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='debug', ctx=Load()), args=[JoinedStr(values=[Constant(value='Config file not found: '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='config_path', ctx=Load()), conversion=-1)])], keywords=[])), Return(value=Dict(keys=[], values=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='debug', ctx=Load()), args=[JoinedStr(values=[Constant(value='Loading settings from config file: '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='config_path', ctx=Load()), conversion=-1)])], keywords=[])), Try(body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='config_path', ctx=Load()), Constant(value='r')], keywords=[keyword(arg='encoding', value=Constant(value='utf-8'))]), optional_vars=Name(id='fp', ctx=Store()))], body=[Return(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='fp', ctx=Load())], keywords=[]))])], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='e', body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='error', ctx=Load()), args=[JoinedStr(values=[Constant(value='Error loading config file '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='config_path', ctx=Load()), conversion=-1), Constant(value=': '), FormattedValue(value=Name(id='e', ctx=Load()), conversion=-1)])], keywords=[keyword(arg='exc_info', value=Constant(value=True))])), Return(value=Dict(keys=[], values=[]))])], orelse=[], finalbody=[])], decorator_list=[], returns=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='_save_config', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='config', annotation=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Save provided settings to the config file.\n\n        :param config: dict of settings to save\n\n        This is a low-level method that will overwrite the entire\n        config with what's passed in. You should probably use\n        `update()` instead.\n        ")), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config_dir', ctx=Load()), attr='exists', ctx=Load()), args=[], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='debug', ctx=Load()), args=[JoinedStr(values=[Constant(value='Creating config directory: '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='config_dir', ctx=Load()), conversion=-1)])], keywords=[])), Expr(value=Call(func=Name(id='makedirs', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='config_dir', ctx=Load())], keywords=[keyword(arg='exist_ok', value=Constant(value=True))]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='debug', ctx=Load()), args=[JoinedStr(values=[Constant(value='Saving settings to config file: '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='config_path', ctx=Load()), conversion=-1)])], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='config_path', ctx=Load()), Constant(value='w')], keywords=[keyword(arg='encoding', value=Constant(value='utf-8'))]), optional_vars=Name(id='fp', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[Name(id='config', ctx=Load()), Name(id='fp', ctx=Load())], keywords=[keyword(arg='indent', value=Constant(value=2)), keyword(arg='sort_keys', value=Constant(value=True))]))])], decorator_list=[]), FunctionDef(name='save', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args', annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Save one or more settings to the config file, creating it\n        if neccessary.\n\n        :param args: list of setting names to set\n\n        This method will update the current config file with\n        *ONLY* the settings listed here.\n\n        The reason we don't want to store all settings is that some\n        might have been overridden from environment variables or\n        command line arguments, that might be temporary.\n\n        We don't want to overwrite the config file with those\n        (potentially temporary) values.\n        ")), Assign(targets=[Name(id='settings_from_config', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_load_config', ctx=Load()), args=[], keywords=[])), For(target=Name(id='key', ctx=Store()), iter=Name(id='args', ctx=Load()), body=[Try(body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='settings', ctx=Load()), Name(id='key', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='settings_from_config', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Name(id='value', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_save_config', ctx=Load()), args=[Name(id='settings_from_config', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='update_settings_from_env', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='settings', annotation=Name(id='Settings', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Update settings from environment variables.\n\n        :param settings: Settings object to update in-place\n\n        Note that environment variable names are hardcoded here,\n        because they're not always the same as the setting names.\n        ")), Assign(targets=[Name(id='telemetry_id', ctx=Store())], value=Call(func=Name(id='getenv', ctx=Load()), args=[Constant(value='TELEMETRY_ID')], keywords=[])), Assign(targets=[Name(id='telemetry_endpoint', ctx=Store())], value=Call(func=Name(id='getenv', ctx=Load()), args=[Constant(value='TELEMETRY_ENDPOINT')], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='settings', ctx=Load()), attr='telemetry', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), BoolOp(op=Or(), values=[Name(id='telemetry_id', ctx=Load()), Name(id='telemetry_endpoint', ctx=Load())])]), body=[Assign(targets=[Attribute(value=Name(id='settings', ctx=Load()), attr='telemetry', ctx=Store())], value=Dict(keys=[], values=[]))], orelse=[]), If(test=Name(id='telemetry_id', ctx=Load()), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='settings', ctx=Load()), attr='telemetry', ctx=Load()), slice=Constant(value='id'), ctx=Store())], value=Name(id='telemetry_id', ctx=Load()))], orelse=[]), If(test=Name(id='telemetry_endpoint', ctx=Load()), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='settings', ctx=Load()), attr='telemetry', ctx=Load()), slice=Constant(value='endpoint'), ctx=Store())], value=Name(id='telemetry_endpoint', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='openai_api_key', ctx=Store())], value=Call(func=Name(id='getenv', ctx=Load()), args=[Constant(value='OPENAI_API_KEY')], keywords=[])), Assign(targets=[Attribute(value=Name(id='settings', ctx=Load()), attr='openai_api_key', ctx=Store())], value=Name(id='openai_api_key', ctx=Load()))], decorator_list=[]), FunctionDef(name='update_settings_from_args', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='_settings', annotation=Name(id='Settings', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Update settings from command line arguments.\n\n        :param settings: Settings object to update in-place\n\n        Note: this is not implemented yet, and currently does nothing.\n        ')), Pass()], decorator_list=[])], decorator_list=[]), FunctionDef(name='get_git_commit', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Return the current git commit (if running from a repo).\n\n    :return: commit hash or None if not running from a git repo\n    ')), Assign(targets=[Name(id='git_dir', ctx=Store())], value=BinOp(left=Attribute(value=Attribute(value=Attribute(value=Call(func=Name(id='Path', ctx=Load()), args=[Name(id='__file__', ctx=Load())], keywords=[]), attr='parent', ctx=Load()), attr='parent', ctx=Load()), attr='parent', ctx=Load()), op=Div(), right=Constant(value='.git'))), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='git_dir', ctx=Load()), attr='is_dir', ctx=Load()), args=[], keywords=[])), body=[Return(value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='git_head', ctx=Store())], value=BinOp(left=Name(id='git_dir', ctx=Load()), op=Div(), right=Constant(value='HEAD'))), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='git_head', ctx=Load()), attr='is_file', ctx=Load()), args=[], keywords=[])), body=[Return(value=Constant(value=None))], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='git_head', ctx=Load()), Constant(value='r')], keywords=[keyword(arg='encoding', value=Constant(value='utf-8'))]), optional_vars=Name(id='fp', ctx=Store()))], body=[Assign(targets=[Name(id='ref', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='fp', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]), attr='strip', ctx=Load()), args=[], keywords=[])), If(test=Call(func=Attribute(value=Name(id='ref', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='ref: ')], keywords=[]), body=[Assign(targets=[Name(id='ref', ctx=Store())], value=Subscript(value=Name(id='ref', ctx=Load()), slice=Slice(lower=Constant(value=5)), ctx=Load())), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[BinOp(left=Name(id='git_dir', ctx=Load()), op=Div(), right=Name(id='ref', ctx=Load())), Constant(value='r')], keywords=[keyword(arg='encoding', value=Constant(value='utf-8'))]), optional_vars=Name(id='fp', ctx=Store()))], body=[Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='fp', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]), attr='strip', ctx=Load()), args=[], keywords=[]))])], orelse=[Return(value=Name(id='ref', ctx=Load()))])])], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='get_package_version', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Get package version.\n\n    Note: until we have the packaging set up, this always returns "0.0.0".\n\n    :return: package version as defined in setup.py or pyproject.toml\n    ')), Return(value=Constant(value='0.0.0'))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='get_version', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Find and return the current version of GPT Pilot.\n\n    The version string is built from the package version and the current\n    git commit hash (if running from a git repo).\n\n    Example: 0.0.0-gitbf01c19\n\n    :return: version string\n    ')), Assign(targets=[Name(id='version', ctx=Store())], value=Call(func=Name(id='get_package_version', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='commit', ctx=Store())], value=Call(func=Name(id='get_git_commit', ctx=Load()), args=[], keywords=[])), If(test=Name(id='commit', ctx=Load()), body=[Assign(targets=[Name(id='version', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='version', ctx=Load()), op=Add(), right=Constant(value='-git')), op=Add(), right=Subscript(value=Name(id='commit', ctx=Load()), slice=Slice(upper=Constant(value=7)), ctx=Load())))], orelse=[]), Return(value=Name(id='version', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), Assign(targets=[Name(id='version', ctx=Store())], value=Call(func=Name(id='get_version', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='settings', ctx=Store())], value=Call(func=Name(id='Settings', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='loader', ctx=Store())], value=Call(func=Name(id='Loader', ctx=Load()), args=[Name(id='settings', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='loader', ctx=Load()), attr='load', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='config_path', ctx=Store())], value=Attribute(value=Name(id='loader', ctx=Load()), attr='config_path', ctx=Load())), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='version'), Constant(value='settings'), Constant(value='loader'), Constant(value='config_path')], ctx=Load()))], type_ignores=[])