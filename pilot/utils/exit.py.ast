Module(body=[Import(names=[alias(name='os')]), Import(names=[alias(name='hashlib')]), Import(names=[alias(name='requests')]), ImportFrom(module='helpers.cli', names=[alias(name='terminate_running_processes')], level=0), ImportFrom(module='utils.questionary', names=[alias(name='styled_text')], level=0), ImportFrom(module='utils.telemetry', names=[alias(name='telemetry')], level=0), FunctionDef(name='send_telemetry', args=arguments(posonlyargs=[], args=[arg(arg='path_id')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='telemetry_data', ctx=Store())], value=Dict(keys=[Constant(value='pathId'), Constant(value='event')], values=[Name(id='path_id', ctx=Load()), Constant(value='pilot-exit')])), Try(body=[Assign(targets=[Name(id='response', ctx=Store())], value=Call(func=Attribute(value=Name(id='requests', ctx=Load()), attr='post', ctx=Load()), args=[Constant(value='https://api.pythagora.io/telemetry')], keywords=[keyword(arg='json', value=Name(id='telemetry_data', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='response', ctx=Load()), attr='raise_for_status', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='requests', ctx=Load()), attr='RequestException', ctx=Load()), name='err', body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[JoinedStr(values=[Constant(value='Failed to send telemetry data: '), FormattedValue(value=Name(id='err', ctx=Load()), conversion=-1)])], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='send_feedback', args=arguments(posonlyargs=[], args=[arg(arg='feedback'), arg(arg='path_id')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Send the collected feedback to the endpoint.')), Assign(targets=[Name(id='feedback_data', ctx=Store())], value=Dict(keys=[Constant(value='pathId'), Constant(value='data'), Constant(value='event')], values=[Name(id='path_id', ctx=Load()), Name(id='feedback', ctx=Load()), Constant(value='pilot-feedback')])), Try(body=[Assign(targets=[Name(id='response', ctx=Store())], value=Call(func=Attribute(value=Name(id='requests', ctx=Load()), attr='post', ctx=Load()), args=[Constant(value='https://api.pythagora.io/telemetry')], keywords=[keyword(arg='json', value=Name(id='feedback_data', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='response', ctx=Load()), attr='raise_for_status', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='requests', ctx=Load()), attr='RequestException', ctx=Load()), name='err', body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[JoinedStr(values=[Constant(value='Failed to send feedback data: '), FormattedValue(value=Name(id='err', ctx=Load()), conversion=-1)])], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='get_path_id', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='installation_directory', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getcwd', ctx=Load()), args=[], keywords=[]), Constant(value='..')], keywords=[])], keywords=[])), Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='hashlib', ctx=Load()), attr='sha256', ctx=Load()), args=[Call(func=Attribute(value=Name(id='installation_directory', ctx=Load()), attr='encode', ctx=Load()), args=[], keywords=[])], keywords=[]), attr='hexdigest', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='ask_to_store_prompt', args=arguments(posonlyargs=[], args=[arg(arg='project'), arg(arg='path_id')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='init_prompt', ctx=Store())], value=IfExp(test=BoolOp(op=And(), values=[Compare(left=Name(id='project', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Attribute(value=Name(id='project', ctx=Load()), attr='main_prompt', ctx=Load())]), body=Attribute(value=Name(id='project', ctx=Load()), attr='main_prompt', ctx=Load()), orelse=Constant(value=None))), If(test=Compare(left=Name(id='init_prompt', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return()], orelse=[]), Assign(targets=[Name(id='telemetry_data', ctx=Store())], value=Dict(keys=[Constant(value='pathId'), Constant(value='event'), Constant(value='data')], values=[Name(id='path_id', ctx=Load()), Constant(value='pilot-prompt'), Name(id='init_prompt', ctx=Load())])), Assign(targets=[Name(id='question', ctx=Store())], value=Constant(value='We would appreciate if you let us store your initial app prompt. If you are OK with that, please just press ENTER')), Try(body=[Assign(targets=[Name(id='answer', ctx=Store())], value=Call(func=Name(id='styled_text', ctx=Load()), args=[Name(id='project', ctx=Load()), Name(id='question', ctx=Load())], keywords=[keyword(arg='ignore_user_input_count', value=Constant(value=True))])), If(test=Compare(left=Name(id='answer', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Expr(value=Call(func=Attribute(value=Name(id='telemetry', ctx=Load()), attr='set', ctx=Load()), args=[Constant(value='initial_prompt'), Name(id='init_prompt', ctx=Load())], keywords=[])), Assign(targets=[Name(id='response', ctx=Store())], value=Call(func=Attribute(value=Name(id='requests', ctx=Load()), attr='post', ctx=Load()), args=[Constant(value='https://api.pythagora.io/telemetry')], keywords=[keyword(arg='json', value=Name(id='telemetry_data', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='response', ctx=Load()), attr='raise_for_status', ctx=Load()), args=[], keywords=[]))], orelse=[])], handlers=[ExceptHandler(type=Attribute(value=Name(id='requests', ctx=Load()), attr='RequestException', ctx=Load()), name='err', body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[JoinedStr(values=[Constant(value='Failed to store prompt: '), FormattedValue(value=Name(id='err', ctx=Load()), conversion=-1)])], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='ask_user_feedback', args=arguments(posonlyargs=[], args=[arg(arg='project'), arg(arg='path_id'), arg(arg='ask_feedback')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='question', ctx=Store())], value=Constant(value='Were you able to create any app that works? Please write any feedback you have or just press ENTER to exit:')), Assign(targets=[Name(id='feedback', ctx=Store())], value=Constant(value=None)), If(test=Name(id='ask_feedback', ctx=Load()), body=[Assign(targets=[Name(id='feedback', ctx=Store())], value=Call(func=Name(id='styled_text', ctx=Load()), args=[Name(id='project', ctx=Load()), Name(id='question', ctx=Load())], keywords=[keyword(arg='ignore_user_input_count', value=Constant(value=True))]))], orelse=[]), If(test=Name(id='feedback', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='telemetry', ctx=Load()), attr='set', ctx=Load()), args=[Constant(value='user_feedback'), Name(id='feedback', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='send_feedback', ctx=Load()), args=[Name(id='feedback', ctx=Load()), Name(id='path_id', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='ask_user_email', args=arguments(posonlyargs=[], args=[arg(arg='project'), arg(arg='path_id'), arg(arg='ask_feedback')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='ask_feedback', ctx=Load())), body=[Return(value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='question', ctx=Store())], value=Constant(value="How did GPT Pilot do? We'd love to talk with you and hear your thoughts. If you'd like to be contacted by us, please provide your email address, or just press ENTER to exit:")), Assign(targets=[Name(id='feedback', ctx=Store())], value=Call(func=Name(id='styled_text', ctx=Load()), args=[Name(id='project', ctx=Load()), Name(id='question', ctx=Load())], keywords=[keyword(arg='ignore_user_input_count', value=Constant(value=True))])), If(test=Name(id='feedback', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='telemetry', ctx=Load()), attr='set', ctx=Load()), args=[Constant(value='user_contact'), Name(id='feedback', ctx=Load())], keywords=[])), Return(value=Constant(value=True))], orelse=[]), Return(value=Constant(value=False))], decorator_list=[]), FunctionDef(name='exit_gpt_pilot', args=arguments(posonlyargs=[], args=[arg(arg='project'), arg(arg='ask_feedback')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Expr(value=Call(func=Name(id='terminate_running_processes', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='path_id', ctx=Store())], value=Call(func=Name(id='get_path_id', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Name(id='send_telemetry', ctx=Load()), args=[Name(id='path_id', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='ask_to_store_prompt', ctx=Load()), args=[Name(id='project', ctx=Load()), Name(id='path_id', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='ask_user_email', ctx=Load()), args=[Name(id='project', ctx=Load()), Name(id='path_id', ctx=Load()), Name(id='ask_feedback', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='telemetry', ctx=Load()), attr='set', ctx=Load()), args=[Constant(value='num_commands'), IfExp(test=Compare(left=Name(id='project', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Attribute(value=Name(id='project', ctx=Load()), attr='command_runs_count', ctx=Load()), orelse=Constant(value=0))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='telemetry', ctx=Load()), attr='set', ctx=Load()), args=[Constant(value='num_inputs'), IfExp(test=Compare(left=Name(id='project', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Attribute(value=Name(id='project', ctx=Load()), attr='user_inputs_count', ctx=Load()), orelse=Constant(value=0))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='telemetry', ctx=Load()), attr='send', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='Exit')], keywords=[keyword(arg='type', value=Constant(value='exit'))]))], decorator_list=[])], type_ignores=[])