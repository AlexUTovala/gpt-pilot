Module(body=[ImportFrom(module='colorama', names=[alias(name='Fore'), alias(name='Style', asname='ColoramaStyle'), alias(name='init')], level=0), ImportFrom(module='enum', names=[alias(name='Enum')], level=0), ImportFrom(module='questionary', names=[alias(name='Style')], level=0), Expr(value=Call(func=Name(id='init', ctx=Load()), args=[], keywords=[keyword(arg='autoreset', value=Constant(value=True))])), ClassDef(name='Theme', bases=[Name(id='Enum', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Enum representing themes, which can be either DARK or LIGHT.\n    ')), Assign(targets=[Name(id='DARK', ctx=Store())], value=Constant(value='dark')), Assign(targets=[Name(id='LIGHT', ctx=Store())], value=Constant(value='light')), Assign(targets=[Name(id='YELLOW', ctx=Store())], value=Constant(value='yellow'))], decorator_list=[]), ClassDef(name='ColorName', bases=[Name(id='Enum', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Enum representing color names and their corresponding ANSI color codes.\n    Each color has a normal and a light version, indicated by the two elements in the tuple.\n    ')), Assign(targets=[Name(id='RED', ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='Fore', ctx=Load()), attr='RED', ctx=Load()), Attribute(value=Name(id='Fore', ctx=Load()), attr='LIGHTRED_EX', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='GREEN', ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='Fore', ctx=Load()), attr='GREEN', ctx=Load()), Attribute(value=Name(id='Fore', ctx=Load()), attr='LIGHTGREEN_EX', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='YELLOW', ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='Fore', ctx=Load()), attr='YELLOW', ctx=Load()), Attribute(value=Name(id='Fore', ctx=Load()), attr='LIGHTYELLOW_EX', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='BLUE', ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='Fore', ctx=Load()), attr='BLUE', ctx=Load()), Attribute(value=Name(id='Fore', ctx=Load()), attr='LIGHTBLUE_EX', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='CYAN', ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='Fore', ctx=Load()), attr='CYAN', ctx=Load()), Attribute(value=Name(id='Fore', ctx=Load()), attr='LIGHTCYAN_EX', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='WHITE', ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='Fore', ctx=Load()), attr='WHITE', ctx=Load()), Attribute(value=Name(id='Fore', ctx=Load()), attr='LIGHTWHITE_EX', ctx=Load())], ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='THEME_STYLES', ctx=Store())], value=Dict(keys=[Attribute(value=Name(id='Theme', ctx=Load()), attr='DARK', ctx=Load()), Attribute(value=Name(id='Theme', ctx=Load()), attr='LIGHT', ctx=Load()), Attribute(value=Name(id='Theme', ctx=Load()), attr='YELLOW', ctx=Load())], values=[Call(func=Attribute(value=Name(id='Style', ctx=Load()), attr='from_dict', ctx=Load()), args=[Dict(keys=[Constant(value='question'), Constant(value='answer'), Constant(value='pointer'), Constant(value='highlighted'), Constant(value='instruction')], values=[Constant(value='#FFFFFF bold'), Constant(value='#FF910A bold'), Constant(value='#FF4500 bold'), Constant(value='#63CD91 bold'), Constant(value='#FFFF00 bold')])], keywords=[]), Call(func=Attribute(value=Name(id='Style', ctx=Load()), attr='from_dict', ctx=Load()), args=[Dict(keys=[Constant(value='question'), Constant(value='answer'), Constant(value='pointer'), Constant(value='highlighted'), Constant(value='instruction')], values=[Constant(value='#000000 bold'), Constant(value='#FFB74D bold'), Constant(value='#FF7043 bold'), Constant(value='#AED581 bold'), Constant(value='#757575 bold')])], keywords=[]), Call(func=Attribute(value=Name(id='Style', ctx=Load()), attr='from_dict', ctx=Load()), args=[Dict(keys=[Constant(value='question'), Constant(value='answer'), Constant(value='pointer')], values=[Constant(value='#FFFF00 bold'), Constant(value='#FFB74D bold'), Constant(value='#FF7043 bold')])], keywords=[])])), ClassDef(name='ThemeStyle', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    Class that provides style configurations for DARK and LIGHT themes.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='theme')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Initializes a ThemeStyle instance.\n\n        Args:\n            theme (Theme): An enum member indicating the theme to use.\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='theme', ctx=Store())], value=Name(id='theme', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_style', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Returns the Style configuration for the current theme.\n\n        Returns:\n            questionary.Style: The Style instance for the current theme.\n        ')), Return(value=Subscript(value=Name(id='THEME_STYLES', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='theme', ctx=Load()), ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='StyleConfig', bases=[], keywords=[], body=[Expr(value=Constant(value="\n    Class to manage the application's style and color configurations.\n    ")), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='theme', annotation=Name(id='Theme', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Attribute(value=Name(id='Theme', ctx=Load()), attr='DARK', ctx=Load())]), body=[Expr(value=Constant(value='\n        Initializes a StyleConfig instance.\n\n        Args:\n            theme (Theme, optional): The initial theme to use. Defaults to Theme.DARK.\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='theme_style', ctx=Store())], value=Call(func=Name(id='ThemeStyle', ctx=Load()), args=[Name(id='theme', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='theme', ctx=Store())], value=Name(id='theme', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_style', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Retrieves the Style configuration from the theme_style instance.\n\n        Returns:\n            questionary.Style: The Style configuration.\n        ')), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='theme_style', ctx=Load()), attr='get_style', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='get_color', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='color_name', annotation=Name(id='ColorName', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Retrieves the ANSI color code for the provided color_name, taking into account the current theme.\n\n        Args:\n            color_name (ColorName): Enum member indicating the desired color.\n\n        Returns:\n            str: The ANSI color code.\n        ')), Return(value=Subscript(value=Attribute(value=Name(id='color_name', ctx=Load()), attr='value', ctx=Load()), slice=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='theme', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='Theme', ctx=Load()), attr='LIGHT', ctx=Load())]), ctx=Load()))], decorator_list=[]), FunctionDef(name='set_theme', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='theme', annotation=Name(id='Theme', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Updates the theme of both the StyleConfig and its theme_style instance.\n\n        Args:\n            theme (Theme): Enum member indicating the new theme.\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='theme', ctx=Store())], value=Name(id='theme', ctx=Load())), Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='theme_style', ctx=Load()), attr='theme', ctx=Store())], value=Name(id='theme', ctx=Load()))], decorator_list=[])], decorator_list=[]), FunctionDef(name='get_color_function', args=arguments(posonlyargs=[], args=[arg(arg='color_name', annotation=Name(id='ColorName', ctx=Load())), arg(arg='bold', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value='\n    Returns a function that colorizes text using the provided color_name and optionally makes it bold.\n\n    Args:\n        color_name (ColorName): Enum member indicating the color to use.\n        bold (bool, optional): If True, the returned function will bold text. Defaults to False.\n\n    Returns:\n        Callable[[str], str]: A function that takes a string and returns it colorized.\n    ')), FunctionDef(name='color_func', args=arguments(posonlyargs=[], args=[arg(arg='text', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Colorizes the input text using the color and boldness provided when `get_color_function` was called.\n\n        Args:\n            text (str): The text to colorize.\n\n        Returns:\n            str: The colorized text.\n        ')), Assign(targets=[Name(id='color', ctx=Store())], value=Call(func=Attribute(value=Name(id='style_config', ctx=Load()), attr='get_color', ctx=Load()), args=[Name(id='color_name', ctx=Load())], keywords=[])), Assign(targets=[Name(id='style', ctx=Store())], value=IfExp(test=Name(id='bold', ctx=Load()), body=Attribute(value=Name(id='ColoramaStyle', ctx=Load()), attr='BRIGHT', ctx=Load()), orelse=Constant(value=''))), Assign(targets=[Name(id='reset', ctx=Store())], value=Attribute(value=Name(id='ColoramaStyle', ctx=Load()), attr='RESET_ALL', ctx=Load())), Return(value=JoinedStr(values=[FormattedValue(value=Name(id='color', ctx=Load()), conversion=-1), FormattedValue(value=Name(id='style', ctx=Load()), conversion=-1), FormattedValue(value=Name(id='text', ctx=Load()), conversion=-1), FormattedValue(value=Name(id='reset', ctx=Load()), conversion=-1)]))], decorator_list=[], returns=Name(id='str', ctx=Load())), Return(value=Name(id='color_func', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='style_config', ctx=Store())], value=Call(func=Name(id='StyleConfig', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='color_red', ctx=Store())], value=Call(func=Name(id='get_color_function', ctx=Load()), args=[Attribute(value=Name(id='ColorName', ctx=Load()), attr='RED', ctx=Load())], keywords=[])), Assign(targets=[Name(id='color_red_bold', ctx=Store())], value=Call(func=Name(id='get_color_function', ctx=Load()), args=[Attribute(value=Name(id='ColorName', ctx=Load()), attr='RED', ctx=Load()), Constant(value=True)], keywords=[])), Assign(targets=[Name(id='color_green', ctx=Store())], value=Call(func=Name(id='get_color_function', ctx=Load()), args=[Attribute(value=Name(id='ColorName', ctx=Load()), attr='GREEN', ctx=Load())], keywords=[])), Assign(targets=[Name(id='color_green_bold', ctx=Store())], value=Call(func=Name(id='get_color_function', ctx=Load()), args=[Attribute(value=Name(id='ColorName', ctx=Load()), attr='GREEN', ctx=Load()), Constant(value=True)], keywords=[])), Assign(targets=[Name(id='color_yellow', ctx=Store())], value=Call(func=Name(id='get_color_function', ctx=Load()), args=[Attribute(value=Name(id='ColorName', ctx=Load()), attr='YELLOW', ctx=Load())], keywords=[])), Assign(targets=[Name(id='color_yellow_bold', ctx=Store())], value=Call(func=Name(id='get_color_function', ctx=Load()), args=[Attribute(value=Name(id='ColorName', ctx=Load()), attr='YELLOW', ctx=Load()), Constant(value=True)], keywords=[])), Assign(targets=[Name(id='color_blue', ctx=Store())], value=Call(func=Name(id='get_color_function', ctx=Load()), args=[Attribute(value=Name(id='ColorName', ctx=Load()), attr='BLUE', ctx=Load())], keywords=[])), Assign(targets=[Name(id='color_blue_bold', ctx=Store())], value=Call(func=Name(id='get_color_function', ctx=Load()), args=[Attribute(value=Name(id='ColorName', ctx=Load()), attr='BLUE', ctx=Load()), Constant(value=True)], keywords=[])), Assign(targets=[Name(id='color_cyan', ctx=Store())], value=Call(func=Name(id='get_color_function', ctx=Load()), args=[Attribute(value=Name(id='ColorName', ctx=Load()), attr='CYAN', ctx=Load())], keywords=[])), Assign(targets=[Name(id='color_cyan_bold', ctx=Store())], value=Call(func=Name(id='get_color_function', ctx=Load()), args=[Attribute(value=Name(id='ColorName', ctx=Load()), attr='CYAN', ctx=Load()), Constant(value=True)], keywords=[])), Assign(targets=[Name(id='color_white', ctx=Store())], value=Call(func=Name(id='get_color_function', ctx=Load()), args=[Attribute(value=Name(id='ColorName', ctx=Load()), attr='WHITE', ctx=Load())], keywords=[])), Assign(targets=[Name(id='color_white_bold', ctx=Store())], value=Call(func=Name(id='get_color_function', ctx=Load()), args=[Attribute(value=Name(id='ColorName', ctx=Load()), attr='WHITE', ctx=Load()), Constant(value=True)], keywords=[]))], type_ignores=[])