Module(body=[Import(names=[alias(name='re')]), Import(names=[alias(name='requests')]), Import(names=[alias(name='os')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='time')]), Import(names=[alias(name='json')]), Import(names=[alias(name='tiktoken')]), ImportFrom(module='prompt_toolkit.styles', names=[alias(name='Style')], level=0), ImportFrom(module='jsonschema', names=[alias(name='validate'), alias(name='ValidationError')], level=0), ImportFrom(module='utils.style', names=[alias(name='color_red')], level=0), ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='const.llm', names=[alias(name='MAX_GPT_MODEL_TOKENS')], level=0), ImportFrom(module='const.messages', names=[alias(name='AFFIRMATIVE_ANSWERS')], level=0), ImportFrom(module='logger.logger', names=[alias(name='logger'), alias(name='logging')], level=0), ImportFrom(module='helpers.exceptions', names=[alias(name='TokenLimitError'), alias(name='ApiKeyNotDefinedError')], level=0), ImportFrom(module='utils.utils', names=[alias(name='fix_json'), alias(name='get_prompt')], level=0), ImportFrom(module='utils.function_calling', names=[alias(name='add_function_calls_to_request'), alias(name='FunctionCallSet'), alias(name='FunctionType')], level=0), ImportFrom(module='utils.questionary', names=[alias(name='styled_text')], level=0), ImportFrom(module='telemetry', names=[alias(name='telemetry')], level=1), FunctionDef(name='get_tokens_in_messages', args=arguments(posonlyargs=[], args=[arg(arg='messages', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='tokenizer', ctx=Store())], value=Call(func=Attribute(value=Name(id='tiktoken', ctx=Load()), attr='get_encoding', ctx=Load()), args=[Constant(value='cl100k_base')], keywords=[])), Assign(targets=[Name(id='tokenized_messages', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='tokenizer', ctx=Load()), attr='encode', ctx=Load()), args=[Subscript(value=Name(id='message', ctx=Load()), slice=Constant(value='content'), ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='message', ctx=Store()), iter=Name(id='messages', ctx=Load()), ifs=[], is_async=0)])), Return(value=Call(func=Name(id='sum', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='len', ctx=Load()), args=[Name(id='tokens', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='tokens', ctx=Store()), iter=Name(id='tokenized_messages', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='num_tokens_from_functions', args=arguments(posonlyargs=[], args=[arg(arg='functions')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the number of tokens used by a list of functions.')), Assign(targets=[Name(id='encoding', ctx=Store())], value=Call(func=Attribute(value=Name(id='tiktoken', ctx=Load()), attr='get_encoding', ctx=Load()), args=[Constant(value='cl100k_base')], keywords=[])), Assign(targets=[Name(id='num_tokens', ctx=Store())], value=Constant(value=0)), For(target=Name(id='function', ctx=Store()), iter=Name(id='functions', ctx=Load()), body=[Assign(targets=[Name(id='function_tokens', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Attribute(value=Name(id='encoding', ctx=Load()), attr='encode', ctx=Load()), args=[Subscript(value=Name(id='function', ctx=Load()), slice=Constant(value='name'), ctx=Load())], keywords=[])], keywords=[])), AugAssign(target=Name(id='function_tokens', ctx=Store()), op=Add(), value=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Attribute(value=Name(id='encoding', ctx=Load()), attr='encode', ctx=Load()), args=[Subscript(value=Name(id='function', ctx=Load()), slice=Constant(value='description'), ctx=Load())], keywords=[])], keywords=[])), If(test=Compare(left=Constant(value='parameters'), ops=[In()], comparators=[Name(id='function', ctx=Load())]), body=[Assign(targets=[Name(id='parameters', ctx=Store())], value=Subscript(value=Name(id='function', ctx=Load()), slice=Constant(value='parameters'), ctx=Load())), If(test=Compare(left=Constant(value='properties'), ops=[In()], comparators=[Name(id='parameters', ctx=Load())]), body=[For(target=Name(id='propertiesKey', ctx=Store()), iter=Subscript(value=Name(id='parameters', ctx=Load()), slice=Constant(value='properties'), ctx=Load()), body=[AugAssign(target=Name(id='function_tokens', ctx=Store()), op=Add(), value=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Attribute(value=Name(id='encoding', ctx=Load()), attr='encode', ctx=Load()), args=[Name(id='propertiesKey', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='v', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='parameters', ctx=Load()), slice=Constant(value='properties'), ctx=Load()), slice=Name(id='propertiesKey', ctx=Load()), ctx=Load())), For(target=Name(id='field', ctx=Store()), iter=Name(id='v', ctx=Load()), body=[If(test=Compare(left=Name(id='field', ctx=Load()), ops=[Eq()], comparators=[Constant(value='type')]), body=[AugAssign(target=Name(id='function_tokens', ctx=Store()), op=Add(), value=Constant(value=2)), AugAssign(target=Name(id='function_tokens', ctx=Store()), op=Add(), value=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Attribute(value=Name(id='encoding', ctx=Load()), attr='encode', ctx=Load()), args=[Subscript(value=Name(id='v', ctx=Load()), slice=Constant(value='type'), ctx=Load())], keywords=[])], keywords=[]))], orelse=[If(test=Compare(left=Name(id='field', ctx=Load()), ops=[Eq()], comparators=[Constant(value='description')]), body=[AugAssign(target=Name(id='function_tokens', ctx=Store()), op=Add(), value=Constant(value=2)), AugAssign(target=Name(id='function_tokens', ctx=Store()), op=Add(), value=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Attribute(value=Name(id='encoding', ctx=Load()), attr='encode', ctx=Load()), args=[Subscript(value=Name(id='v', ctx=Load()), slice=Constant(value='description'), ctx=Load())], keywords=[])], keywords=[]))], orelse=[If(test=Compare(left=Name(id='field', ctx=Load()), ops=[Eq()], comparators=[Constant(value='enum')]), body=[AugAssign(target=Name(id='function_tokens', ctx=Store()), op=Sub(), value=Constant(value=3)), For(target=Name(id='o', ctx=Store()), iter=Subscript(value=Name(id='v', ctx=Load()), slice=Constant(value='enum'), ctx=Load()), body=[AugAssign(target=Name(id='function_tokens', ctx=Store()), op=Add(), value=Constant(value=3)), AugAssign(target=Name(id='function_tokens', ctx=Store()), op=Add(), value=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Attribute(value=Name(id='encoding', ctx=Load()), attr='encode', ctx=Load()), args=[Name(id='o', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], orelse=[])])])], orelse=[])], orelse=[]), AugAssign(target=Name(id='function_tokens', ctx=Store()), op=Add(), value=Constant(value=11))], orelse=[])], orelse=[]), AugAssign(target=Name(id='num_tokens', ctx=Store()), op=Add(), value=Name(id='function_tokens', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='num_tokens', ctx=Store()), op=Add(), value=Constant(value=12)), Return(value=Name(id='num_tokens', ctx=Load()))], decorator_list=[]), FunctionDef(name='create_gpt_chat_completion', args=arguments(posonlyargs=[], args=[arg(arg='messages', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='dict', ctx=Load()), ctx=Load())), arg(arg='req_type'), arg(arg='project'), arg(arg='function_calls', annotation=Name(id='FunctionCallSet', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='\n    Called from:\n      - AgentConvo.send_message() - these calls often have `function_calls`, usually from `pilot/const/function_calls.py`\n         - convo.continuous_conversation()\n      - prompts.get_additional_info_from_openai()\n      - prompts.get_additional_info_from_user() after the user responds to each\n            "Please check this message and say what needs to be changed... {message}"\n    :param messages: [{ "role": "system"|"assistant"|"user", "content": string }, ... ]\n    :param req_type: \'project_description\' etc. See common.STEPS\n    :param project: project\n    :param function_calls: (optional) {\'definitions\': [{ \'name\': str }, ...]}\n        see `IMPLEMENT_CHANGES` etc. in `pilot/const/function_calls.py`\n    :return: {\'text\': new_code}\n        or if `function_calls` param provided\n             {\'function_calls\': {\'name\': str, arguments: {...}}}\n    ')), Assign(targets=[Name(id='gpt_data', ctx=Store())], value=Dict(keys=[Constant(value='model'), Constant(value='n'), Constant(value='temperature'), Constant(value='top_p'), Constant(value='presence_penalty'), Constant(value='frequency_penalty'), Constant(value='messages'), Constant(value='stream')], values=[Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getenv', ctx=Load()), args=[Constant(value='MODEL_NAME'), Constant(value='gpt-4')], keywords=[]), Constant(value=1), Constant(value=1), Constant(value=1), Constant(value=0), Constant(value=0), Name(id='messages', ctx=Load()), Constant(value=True)])), If(test=Compare(left=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getenv', ctx=Load()), args=[Constant(value='ENDPOINT')], keywords=[]), ops=[Eq()], comparators=[Constant(value='OPENROUTER')]), body=[Assign(targets=[Name(id='keys_to_delete', ctx=Store())], value=List(elts=[Constant(value='n'), Constant(value='max_tokens'), Constant(value='temperature'), Constant(value='top_p'), Constant(value='presence_penalty'), Constant(value='frequency_penalty')], ctx=Load())), For(target=Name(id='key', ctx=Store()), iter=Name(id='keys_to_delete', ctx=Load()), body=[If(test=Compare(left=Name(id='key', ctx=Load()), ops=[In()], comparators=[Name(id='gpt_data', ctx=Load())]), body=[Delete(targets=[Subscript(value=Name(id='gpt_data', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Del())])], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='messages_length', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='messages', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='add_function_calls_to_request', ctx=Load()), args=[Name(id='gpt_data', ctx=Load()), Name(id='function_calls', ctx=Load())], keywords=[])), Try(body=[Assign(targets=[Name(id='response', ctx=Store())], value=Call(func=Name(id='stream_gpt_completion', ctx=Load()), args=[Name(id='gpt_data', ctx=Load()), Name(id='req_type', ctx=Load()), Name(id='project', ctx=Load())], keywords=[])), While(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='messages', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Name(id='messages_length', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='messages', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Name(id='response', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='TokenLimitError', ctx=Load()), name='e', body=[Raise(exc=Name(id='e', ctx=Load()))]), ExceptHandler(type=Name(id='Exception', ctx=Load()), name='e', body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='error', ctx=Load()), args=[JoinedStr(values=[Constant(value='The request to '), FormattedValue(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getenv', ctx=Load()), args=[Constant(value='ENDPOINT')], keywords=[]), conversion=-1), Constant(value=' API failed: %s')]), Name(id='e', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[JoinedStr(values=[Constant(value='The request to '), FormattedValue(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getenv', ctx=Load()), args=[Constant(value='ENDPOINT')], keywords=[]), conversion=-1), Constant(value=' API failed. Here is the error message:')])], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[])), Return(value=Dict(keys=[], values=[]))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='delete_last_n_lines', args=arguments(posonlyargs=[], args=[arg(arg='n')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='_', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='n', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value='\x1b[F')], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value='\x1b[K')], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='count_lines_based_on_width', args=arguments(posonlyargs=[], args=[arg(arg='content'), arg(arg='width')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='lines_required', ctx=Store())], value=Call(func=Name(id='sum', ctx=Load()), args=[GeneratorExp(elt=BinOp(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[]), op=FloorDiv(), right=Name(id='width', ctx=Load())), op=Add(), right=Constant(value=1)), generators=[comprehension(target=Name(id='line', ctx=Store()), iter=Call(func=Attribute(value=Name(id='content', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='\n')], keywords=[]), ifs=[], is_async=0)])], keywords=[])), Return(value=Name(id='lines_required', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_tokens_in_messages_from_openai_error', args=arguments(posonlyargs=[], args=[arg(arg='error_message')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Extract the token count from a message.\n\n    Args:\n    message (str): The message to extract the token count from.\n\n    Returns:\n    int or None: The token count if found, otherwise None.\n    ')), Assign(targets=[Name(id='match', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='search', ctx=Load()), args=[Constant(value='your messages resulted in (\\d+) tokens'), Name(id='error_message', ctx=Load())], keywords=[])), If(test=Name(id='match', ctx=Load()), body=[Return(value=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value=1)], keywords=[])], keywords=[]))], orelse=[Return(value=Constant(value=None))])], decorator_list=[]), FunctionDef(name='retry_on_exception', args=arguments(posonlyargs=[], args=[arg(arg='func')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='update_error_count', args=arguments(posonlyargs=[], args=[arg(arg='args')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='function_error_count', ctx=Store())], value=IfExp(test=Compare(left=Constant(value='function_error'), ops=[NotIn()], comparators=[Subscript(value=Name(id='args', ctx=Load()), slice=Constant(value=0), ctx=Load())]), body=Constant(value=1), orelse=BinOp(left=Subscript(value=Subscript(value=Name(id='args', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='function_error_count'), ctx=Load()), op=Add(), right=Constant(value=1)))), Assign(targets=[Subscript(value=Subscript(value=Name(id='args', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='function_error_count'), ctx=Store())], value=Name(id='function_error_count', ctx=Load())), Return(value=Name(id='function_error_count', ctx=Load()))], decorator_list=[]), FunctionDef(name='set_function_error', args=arguments(posonlyargs=[], args=[arg(arg='args'), arg(arg='err_str', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Name(id='err_str', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Name(id='args', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='function_error'), ctx=Store())], value=Name(id='err_str', ctx=Load())), If(test=Compare(left=Constant(value='function_buffer'), ops=[In()], comparators=[Subscript(value=Name(id='args', ctx=Load()), slice=Constant(value=0), ctx=Load())]), body=[Delete(targets=[Subscript(value=Subscript(value=Name(id='args', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='function_buffer'), ctx=Del())])], orelse=[])], decorator_list=[]), FunctionDef(name='wrapper', args=arguments(posonlyargs=[], args=[], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Assign(targets=[Name(id='wait_duration_ms', ctx=Store())], value=Constant(value=None)), While(test=Constant(value=True), body=[Try(body=[Return(value=Call(func=Name(id='func', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='e', body=[Assign(targets=[Name(id='err_str', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='e', ctx=Load()), Attribute(value=Name(id='json', ctx=Load()), attr='JSONDecodeError', ctx=Load())], keywords=[]), body=[If(test=BoolOp(op=Or(), values=[Call(func=Attribute(value=Attribute(value=Name(id='e', ctx=Load()), attr='msg', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='Expecting')], keywords=[]), Compare(left=Attribute(value=Name(id='e', ctx=Load()), attr='msg', ctx=Load()), ops=[Eq()], comparators=[Constant(value='Unterminated string starting at')])]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='e', ctx=Load()), attr='msg', ctx=Load()), ops=[Eq()], comparators=[Constant(value='Expecting value')]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='e', ctx=Load()), attr='doc', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Attribute(value=Name(id='e', ctx=Load()), attr='pos', ctx=Load())])]), body=[Assign(targets=[Name(id='err_str', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='[},\\\\n]'), Subscript(value=Attribute(value=Name(id='e', ctx=Load()), attr='doc', ctx=Load()), slice=Slice(lower=Attribute(value=Name(id='e', ctx=Load()), attr='pos', ctx=Load())), ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='err_str', ctx=Store())], value=JoinedStr(values=[Constant(value='Invalid value: `'), FormattedValue(value=Name(id='err_str', ctx=Load()), conversion=-1), Constant(value='`')]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Received incomplete JSON response from LLM. Asking for the rest...')], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Name(id='args', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='function_buffer'), ctx=Store())], value=Attribute(value=Name(id='e', ctx=Load()), attr='doc', ctx=Load())), If(test=Compare(left=Constant(value='function_error'), ops=[In()], comparators=[Subscript(value=Name(id='args', ctx=Load()), slice=Constant(value=0), ctx=Load())]), body=[Delete(targets=[Subscript(value=Subscript(value=Name(id='args', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='function_error'), ctx=Del())])], orelse=[]), Continue()])], orelse=[]), Assign(targets=[Name(id='function_error_count', ctx=Store())], value=Call(func=Name(id='update_error_count', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='Received invalid character in JSON response from LLM. Asking to retry...')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[JoinedStr(values=[Constant(value='  received: '), FormattedValue(value=Attribute(value=Name(id='e', ctx=Load()), attr='doc', ctx=Load()), conversion=-1)])], keywords=[])), Expr(value=Call(func=Name(id='set_function_error', ctx=Load()), args=[Name(id='args', ctx=Load()), Name(id='err_str', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='function_error_count', ctx=Load()), ops=[Lt()], comparators=[Constant(value=3)]), body=[Continue()], orelse=[])], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='e', ctx=Load()), Name(id='ValidationError', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='function_error_count', ctx=Store())], value=Call(func=Name(id='update_error_count', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='Received invalid JSON response from LLM. Asking to retry...')], keywords=[])), Expr(value=Call(func=Name(id='set_function_error', ctx=Load()), args=[Name(id='args', ctx=Load()), JoinedStr(values=[Constant(value='at '), FormattedValue(value=Attribute(value=Name(id='e', ctx=Load()), attr='json_path', ctx=Load()), conversion=-1), Constant(value=' - '), FormattedValue(value=Attribute(value=Name(id='e', ctx=Load()), attr='message', ctx=Load()), conversion=-1)])], keywords=[])), If(test=Compare(left=Name(id='function_error_count', ctx=Load()), ops=[Lt()], comparators=[Constant(value=3)]), body=[Continue()], orelse=[])], orelse=[])]), If(test=Compare(left=Constant(value='context_length_exceeded'), ops=[In()], comparators=[Name(id='err_str', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='TokenLimitError', ctx=Load()), args=[Call(func=Name(id='get_tokens_in_messages_from_openai_error', ctx=Load()), args=[Name(id='err_str', ctx=Load())], keywords=[]), Name(id='MAX_GPT_MODEL_TOKENS', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Constant(value='rate_limit_exceeded'), ops=[In()], comparators=[Name(id='err_str', ctx=Load())]), body=[Assign(targets=[Name(id='match', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='search', ctx=Load()), args=[Constant(value='Please try again in (\\d+)ms.'), Name(id='err_str', ctx=Load())], keywords=[])), If(test=Name(id='match', ctx=Load()), body=[If(test=Compare(left=Name(id='wait_duration_ms', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='wait_duration_ms', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value=1)], keywords=[])], keywords=[]))], orelse=[If(test=Compare(left=Name(id='wait_duration_ms', ctx=Load()), ops=[Lt()], comparators=[Constant(value=6000)]), body=[AugAssign(target=Name(id='wait_duration_ms', ctx=Store()), op=Mult(), value=Constant(value=2))], orelse=[])]), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[JoinedStr(values=[Constant(value='Rate limited. Waiting '), FormattedValue(value=Name(id='wait_duration_ms', ctx=Load()), conversion=-1), Constant(value='ms...')])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='sleep', ctx=Load()), args=[BinOp(left=Name(id='wait_duration_ms', ctx=Load()), op=Div(), right=Constant(value=1000))], keywords=[]))], orelse=[]), Continue()], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Name(id='color_red', ctx=Load()), args=[Constant(value='There was a problem with request to openai API:')], keywords=[])], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='err_str', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='error', ctx=Load()), args=[JoinedStr(values=[Constant(value='There was a problem with request to openai API: '), FormattedValue(value=Name(id='err_str', ctx=Load()), conversion=-1)])], keywords=[])), Assign(targets=[Name(id='project', ctx=Store())], value=Subscript(value=Name(id='args', ctx=Load()), slice=Constant(value=2), ctx=Load())), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='yes/no')], keywords=[keyword(arg='type', value=Constant(value='button'))])), Assign(targets=[Name(id='user_message', ctx=Store())], value=Call(func=Name(id='styled_text', ctx=Load()), args=[Name(id='project', ctx=Load()), Constant(value='Do you want to try make the same request again? If yes, just press ENTER. Otherwise, type "no".')], keywords=[keyword(arg='style', value=Call(func=Attribute(value=Name(id='Style', ctx=Load()), attr='from_dict', ctx=Load()), args=[Dict(keys=[Constant(value='question'), Constant(value='answer')], values=[Constant(value='#FF0000 bold'), Constant(value='#FF910A bold')])], keywords=[]))])), If(test=Compare(left=Call(func=Attribute(value=Name(id='user_message', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), ops=[NotIn()], comparators=[Name(id='AFFIRMATIVE_ANSWERS', ctx=Load())]), body=[Return(value=Dict(keys=[], values=[]))], orelse=[])])], orelse=[], finalbody=[])], orelse=[])], decorator_list=[]), Return(value=Name(id='wrapper', ctx=Load()))], decorator_list=[]), FunctionDef(name='stream_gpt_completion', args=arguments(posonlyargs=[], args=[arg(arg='data'), arg(arg='req_type'), arg(arg='project')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    Called from create_gpt_chat_completion()\n    :param data:\n    :param req_type: 'project_description' etc. See common.STEPS\n    :param project: NEEDED FOR WRAPPER FUNCTION retry_on_exception\n    :return: {'text': str} or {'function_calls': {'name': str, arguments: '{...}'}}\n    ")), Try(body=[Assign(targets=[Name(id='terminal_width', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='get_terminal_size', ctx=Load()), args=[], keywords=[]), attr='columns', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), body=[Assign(targets=[Name(id='terminal_width', ctx=Store())], value=Constant(value=50))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='lines_printed', ctx=Store())], value=Constant(value=2)), Assign(targets=[Name(id='gpt_response', ctx=Store())], value=Constant(value='')), Assign(targets=[Name(id='buffer', ctx=Store())], value=Constant(value='')), Assign(targets=[Name(id='expecting_json', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='received_json', ctx=Store())], value=Constant(value=False)), If(test=Compare(left=Constant(value='functions'), ops=[In()], comparators=[Name(id='data', ctx=Load())]), body=[Assign(targets=[Name(id='expecting_json', ctx=Store())], value=Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='functions'), ctx=Load())), If(test=Compare(left=Constant(value='function_buffer'), ops=[In()], comparators=[Name(id='data', ctx=Load())]), body=[Assign(targets=[Name(id='incomplete_json', ctx=Store())], value=Call(func=Name(id='get_prompt', ctx=Load()), args=[Constant(value='utils/incomplete_json.prompt'), Dict(keys=[Constant(value='received_json')], values=[Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='function_buffer'), ctx=Load())])], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='messages'), ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='role'), Constant(value='content')], values=[Constant(value='user'), Name(id='incomplete_json', ctx=Load())])], keywords=[])), Assign(targets=[Name(id='gpt_response', ctx=Store())], value=Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='function_buffer'), ctx=Load())), Assign(targets=[Name(id='received_json', ctx=Store())], value=Constant(value=True))], orelse=[If(test=Compare(left=Constant(value='function_error'), ops=[In()], comparators=[Name(id='data', ctx=Load())]), body=[Assign(targets=[Name(id='invalid_json', ctx=Store())], value=Call(func=Name(id='get_prompt', ctx=Load()), args=[Constant(value='utils/invalid_json.prompt'), Dict(keys=[Constant(value='invalid_reason')], values=[Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='function_error'), ctx=Load())])], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='messages'), ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='role'), Constant(value='content')], values=[Constant(value='user'), Name(id='invalid_json', ctx=Load())])], keywords=[])), Assign(targets=[Name(id='received_json', ctx=Store())], value=Constant(value=True))], orelse=[])]), Assign(targets=[Name(id='data', ctx=Store())], value=DictComp(key=Name(id='key', ctx=Load()), value=Name(id='value', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='key', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='function')], keywords=[]))], is_async=0)]))], orelse=[]), FunctionDef(name='return_result', args=arguments(posonlyargs=[], args=[arg(arg='result_data'), arg(arg='lines_printed')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Name(id='buffer', ctx=Load()), body=[AugAssign(target=Name(id='lines_printed', ctx=Store()), op=Add(), value=Call(func=Name(id='count_lines_based_on_width', ctx=Load()), args=[Name(id='buffer', ctx=Load()), Name(id='terminal_width', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[JoinedStr(values=[Constant(value='lines printed: '), FormattedValue(value=Name(id='lines_printed', ctx=Load()), conversion=-1), Constant(value=' - '), FormattedValue(value=Name(id='terminal_width', ctx=Load()), conversion=-1)])], keywords=[])), Return(value=Name(id='result_data', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='model', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getenv', ctx=Load()), args=[Constant(value='MODEL_NAME'), Constant(value='gpt-4')], keywords=[])), Assign(targets=[Name(id='endpoint', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getenv', ctx=Load()), args=[Constant(value='ENDPOINT')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='telemetry', ctx=Load()), attr='set', ctx=Load()), args=[Constant(value='model'), Name(id='model', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='telemetry', ctx=Load()), attr='inc', ctx=Load()), args=[Constant(value='num_llm_requests')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[JoinedStr(values=[Constant(value='> Request model: '), FormattedValue(value=Name(id='model', ctx=Load()), conversion=-1)])], keywords=[])), If(test=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='isEnabledFor', ctx=Load()), args=[Attribute(value=Name(id='logging', ctx=Load()), attr='DEBUG', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='\n'), attr='join', ctx=Load()), args=[ListComp(elt=JoinedStr(values=[FormattedValue(value=Subscript(value=Name(id='message', ctx=Load()), slice=Constant(value='role'), ctx=Load()), conversion=-1), Constant(value=': '), FormattedValue(value=Subscript(value=Name(id='message', ctx=Load()), slice=Constant(value='content'), ctx=Load()), conversion=-1)]), generators=[comprehension(target=Name(id='message', ctx=Store()), iter=Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='messages'), ctx=Load()), ifs=[], is_async=0)])], keywords=[])], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='endpoint', ctx=Load()), ops=[Eq()], comparators=[Constant(value='AZURE')]), body=[Assign(targets=[Name(id='endpoint_url', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getenv', ctx=Load()), args=[Constant(value='AZURE_ENDPOINT')], keywords=[]), op=Add(), right=Constant(value='/openai/deployments/')), op=Add(), right=Name(id='model', ctx=Load())), op=Add(), right=Constant(value='/chat/completions?api-version=2023-05-15'))), Assign(targets=[Name(id='headers', ctx=Store())], value=Dict(keys=[Constant(value='Content-Type'), Constant(value='api-key')], values=[Constant(value='application/json'), Call(func=Name(id='get_api_key_or_throw', ctx=Load()), args=[Constant(value='AZURE_API_KEY')], keywords=[])]))], orelse=[If(test=Compare(left=Name(id='endpoint', ctx=Load()), ops=[Eq()], comparators=[Constant(value='OPENROUTER')]), body=[Assign(targets=[Name(id='endpoint_url', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getenv', ctx=Load()), args=[Constant(value='OPENROUTER_ENDPOINT'), Constant(value='https://openrouter.ai/api/v1/chat/completions')], keywords=[])), Assign(targets=[Name(id='headers', ctx=Store())], value=Dict(keys=[Constant(value='Content-Type'), Constant(value='Authorization'), Constant(value='HTTP-Referer'), Constant(value='X-Title')], values=[Constant(value='application/json'), BinOp(left=Constant(value='Bearer '), op=Add(), right=Call(func=Name(id='get_api_key_or_throw', ctx=Load()), args=[Constant(value='OPENROUTER_API_KEY')], keywords=[])), Constant(value='https://github.com/Pythagora-io/gpt-pilot'), Constant(value='GPT Pilot')])), Assign(targets=[Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='max_tokens'), ctx=Store())], value=Name(id='MAX_GPT_MODEL_TOKENS', ctx=Load())), Assign(targets=[Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='model'), ctx=Store())], value=Name(id='model', ctx=Load()))], orelse=[Assign(targets=[Name(id='endpoint_url', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getenv', ctx=Load()), args=[Constant(value='OPENAI_ENDPOINT'), Constant(value='https://api.openai.com/v1/chat/completions')], keywords=[])), Assign(targets=[Name(id='headers', ctx=Store())], value=Dict(keys=[Constant(value='Content-Type'), Constant(value='Authorization')], values=[Constant(value='application/json'), BinOp(left=Constant(value='Bearer '), op=Add(), right=Call(func=Name(id='get_api_key_or_throw', ctx=Load()), args=[Constant(value='OPENAI_API_KEY')], keywords=[]))])), Assign(targets=[Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='model'), ctx=Store())], value=Name(id='model', ctx=Load()))])]), Assign(targets=[Name(id='response', ctx=Store())], value=Call(func=Attribute(value=Name(id='requests', ctx=Load()), attr='post', ctx=Load()), args=[Name(id='endpoint_url', ctx=Load())], keywords=[keyword(arg='headers', value=Name(id='headers', ctx=Load())), keyword(arg='json', value=Name(id='data', ctx=Load())), keyword(arg='stream', value=Constant(value=True))])), If(test=Compare(left=Attribute(value=Name(id='response', ctx=Load()), attr='status_code', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=200)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='project', ctx=Load()), attr='dot_pilot_gpt', ctx=Load()), attr='log_chat_completion', ctx=Load()), args=[Name(id='endpoint', ctx=Load()), Name(id='model', ctx=Load()), Name(id='req_type', ctx=Load()), Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='messages'), ctx=Load()), Attribute(value=Name(id='response', ctx=Load()), attr='text', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[JoinedStr(values=[Constant(value='problem with request (status '), FormattedValue(value=Attribute(value=Name(id='response', ctx=Load()), attr='status_code', ctx=Load()), conversion=-1), Constant(value='): '), FormattedValue(value=Attribute(value=Name(id='response', ctx=Load()), attr='text', ctx=Load()), conversion=-1)])], keywords=[])), Raise(exc=Call(func=Name(id='Exception', ctx=Load()), args=[JoinedStr(values=[Constant(value='API responded with status code: '), FormattedValue(value=Attribute(value=Name(id='response', ctx=Load()), attr='status_code', ctx=Load()), conversion=-1), Constant(value='. Response text: '), FormattedValue(value=Attribute(value=Name(id='response', ctx=Load()), attr='text', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[]), For(target=Name(id='line', ctx=Store()), iter=Call(func=Attribute(value=Name(id='response', ctx=Load()), attr='iter_lines', ctx=Load()), args=[], keywords=[]), body=[If(test=BoolOp(op=And(), values=[Name(id='line', ctx=Load()), Compare(left=Name(id='line', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=b': OPENROUTER PROCESSING')])]), body=[Assign(targets=[Name(id='line', ctx=Store())], value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[])), If(test=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='data: ')], keywords=[]), body=[Assign(targets=[Name(id='line', ctx=Store())], value=Subscript(value=Name(id='line', ctx=Load()), slice=Slice(lower=Constant(value=6)), ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='line', ctx=Load()), ops=[Eq()], comparators=[Constant(value='[DONE]')]), body=[Continue()], orelse=[]), Try(body=[Assign(targets=[Name(id='json_line', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='loads', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[])), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='json_line', ctx=Load()), slice=Constant(value='choices'), ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Continue()], orelse=[]), If(test=Compare(left=Constant(value='error'), ops=[In()], comparators=[Name(id='json_line', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='error', ctx=Load()), args=[JoinedStr(values=[Constant(value='Error in LLM response: '), FormattedValue(value=Name(id='json_line', ctx=Load()), conversion=-1)])], keywords=[])), Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='Error in LLM response: '), FormattedValue(value=Subscript(value=Subscript(value=Name(id='json_line', ctx=Load()), slice=Constant(value='error'), ctx=Load()), slice=Constant(value='message'), ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='choice', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='json_line', ctx=Load()), slice=Constant(value='choices'), ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='json_line', ctx=Store())], value=Subscript(value=Name(id='choice', ctx=Load()), slice=Constant(value='delta'), ctx=Load()))], handlers=[ExceptHandler(type=Attribute(value=Name(id='json', ctx=Load()), attr='JSONDecodeError', ctx=Load()), name='e', body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='error', ctx=Load()), args=[JoinedStr(values=[Constant(value='Unable to decode line: '), FormattedValue(value=Name(id='line', ctx=Load()), conversion=-1), Constant(value=' '), FormattedValue(value=Attribute(value=Name(id='e', ctx=Load()), attr='msg', ctx=Load()), conversion=-1)])], keywords=[])), Continue()])], orelse=[], finalbody=[]), If(test=Compare(left=Constant(value='content'), ops=[In()], comparators=[Name(id='json_line', ctx=Load())]), body=[Assign(targets=[Name(id='content', ctx=Store())], value=Call(func=Attribute(value=Name(id='json_line', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='content')], keywords=[])), If(test=Name(id='content', ctx=Load()), body=[AugAssign(target=Name(id='buffer', ctx=Store()), op=Add(), value=Name(id='content', ctx=Load())), If(test=Call(func=Attribute(value=Name(id='buffer', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='\n')], keywords=[]), body=[If(test=BoolOp(op=And(), values=[Name(id='expecting_json', ctx=Load()), UnaryOp(op=Not(), operand=Name(id='received_json', ctx=Load()))]), body=[Assign(targets=[Name(id='received_json', ctx=Store())], value=Call(func=Name(id='assert_json_response', ctx=Load()), args=[Name(id='buffer', ctx=Load()), Compare(left=Name(id='lines_printed', ctx=Load()), ops=[Gt()], comparators=[Constant(value=2)])], keywords=[]))], orelse=[]), AugAssign(target=Name(id='lines_printed', ctx=Store()), op=Add(), value=Call(func=Name(id='count_lines_based_on_width', ctx=Load()), args=[Name(id='buffer', ctx=Load()), Name(id='terminal_width', ctx=Load())], keywords=[])), Assign(targets=[Name(id='buffer', ctx=Store())], value=Constant(value=''))], orelse=[]), AugAssign(target=Name(id='gpt_response', ctx=Store()), op=Add(), value=Name(id='content', ctx=Load())), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='content', ctx=Load())], keywords=[keyword(arg='type', value=Constant(value='stream')), keyword(arg='end', value=Constant(value='')), keyword(arg='flush', value=Constant(value=True))]))], orelse=[])], orelse=[])], orelse=[])], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='\n')], keywords=[keyword(arg='type', value=Constant(value='stream'))])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='<<<<<<<<<< LLM Response <<<<<<<<<<\n%s\n<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<'), Name(id='gpt_response', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='project', ctx=Load()), attr='dot_pilot_gpt', ctx=Load()), attr='log_chat_completion', ctx=Load()), args=[Name(id='endpoint', ctx=Load()), Name(id='model', ctx=Load()), Name(id='req_type', ctx=Load()), Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='messages'), ctx=Load()), Name(id='gpt_response', ctx=Load())], keywords=[])), If(test=Name(id='expecting_json', ctx=Load()), body=[Assign(targets=[Name(id='gpt_response', ctx=Store())], value=Call(func=Name(id='clean_json_response', ctx=Load()), args=[Name(id='gpt_response', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='assert_json_schema', ctx=Load()), args=[Name(id='gpt_response', ctx=Load()), Name(id='expecting_json', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='project', ctx=Load()), attr='dot_pilot_gpt', ctx=Load()), attr='log_chat_completion_json', ctx=Load()), args=[Name(id='endpoint', ctx=Load()), Name(id='model', ctx=Load()), Name(id='req_type', ctx=Load()), Name(id='expecting_json', ctx=Load()), Name(id='gpt_response', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='new_code', ctx=Store())], value=Call(func=Name(id='postprocessing', ctx=Load()), args=[Name(id='gpt_response', ctx=Load()), Name(id='req_type', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='return_result', ctx=Load()), args=[Dict(keys=[Constant(value='text')], values=[Name(id='new_code', ctx=Load())]), Name(id='lines_printed', ctx=Load())], keywords=[]))], decorator_list=[Name(id='retry_on_exception', ctx=Load())]), FunctionDef(name='get_api_key_or_throw', args=arguments(posonlyargs=[], args=[arg(arg='env_key', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='api_key', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getenv', ctx=Load()), args=[Name(id='env_key', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='api_key', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ApiKeyNotDefinedError', ctx=Load()), args=[Name(id='env_key', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='api_key', ctx=Load()))], decorator_list=[]), FunctionDef(name='assert_json_response', args=arguments(posonlyargs=[], args=[arg(arg='response', annotation=Name(id='str', ctx=Load())), arg(arg='or_fail')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[If(test=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='match', ctx=Load()), args=[Constant(value='.*(```(json)?|{|\\[)'), Name(id='response', ctx=Load())], keywords=[]), body=[Return(value=Constant(value=True))], orelse=[If(test=Name(id='or_fail', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='error', ctx=Load()), args=[JoinedStr(values=[Constant(value='LLM did not respond with JSON: '), FormattedValue(value=Name(id='response', ctx=Load()), conversion=-1)])], keywords=[])), Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='LLM did not respond with JSON')], keywords=[]))], orelse=[Return(value=Constant(value=False))])])], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='clean_json_response', args=arguments(posonlyargs=[], args=[arg(arg='response', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='response', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value='^.*```json\\s*'), Constant(value=''), Name(id='response', ctx=Load())], keywords=[keyword(arg='flags', value=Attribute(value=Name(id='re', ctx=Load()), attr='DOTALL', ctx=Load()))])), Assign(targets=[Name(id='response', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value=': ?True(,)?$'), Constant(value=':true\\1'), Name(id='response', ctx=Load())], keywords=[keyword(arg='flags', value=Attribute(value=Name(id='re', ctx=Load()), attr='MULTILINE', ctx=Load()))])), Assign(targets=[Name(id='response', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value=': ?False(,)?$'), Constant(value=':false\\1'), Name(id='response', ctx=Load())], keywords=[keyword(arg='flags', value=Attribute(value=Name(id='re', ctx=Load()), attr='MULTILINE', ctx=Load()))])), Return(value=Call(func=Attribute(value=Name(id='response', ctx=Load()), attr='strip', ctx=Load()), args=[Constant(value='` \n')], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='assert_json_schema', args=arguments(posonlyargs=[], args=[arg(arg='response', annotation=Name(id='str', ctx=Load())), arg(arg='functions', annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='FunctionType', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='function', ctx=Store()), iter=Name(id='functions', ctx=Load()), body=[Assign(targets=[Name(id='schema', ctx=Store())], value=Subscript(value=Name(id='function', ctx=Load()), slice=Constant(value='parameters'), ctx=Load())), Assign(targets=[Name(id='parsed', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='loads', ctx=Load()), args=[Name(id='response', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='validate', ctx=Load()), args=[Name(id='parsed', ctx=Load()), Name(id='schema', ctx=Load())], keywords=[])), Return(value=Constant(value=True))], orelse=[])], decorator_list=[], returns=Constant(value=True)), FunctionDef(name='postprocessing', args=arguments(posonlyargs=[], args=[arg(arg='gpt_response', annotation=Name(id='str', ctx=Load())), arg(arg='req_type')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Name(id='gpt_response', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='load_data_to_json', args=arguments(posonlyargs=[], args=[arg(arg='string')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='loads', ctx=Load()), args=[Call(func=Name(id='fix_json', ctx=Load()), args=[Name(id='string', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])