Module(body=[Import(names=[alias(name='pytest')]), ImportFrom(module='unittest.mock', names=[alias(name='patch'), alias(name='mock_open')], level=0), Import(names=[alias(name='uuid')]), ImportFrom(module='arguments', names=[alias(name='get_email'), alias(name='username_to_uuid')], level=1), FunctionDef(name='test_email_found_in_gitconfig', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='mock_file_content', ctx=Store())], value=Constant(value='\n    [user]\n        name = test_user\n        email = test@example.com\n    ')), With(items=[withitem(context_expr=Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='os.path.exists')], keywords=[keyword(arg='return_value', value=Constant(value=True))]))], body=[With(items=[withitem(context_expr=Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='builtins.open'), Call(func=Name(id='mock_open', ctx=Load()), args=[], keywords=[keyword(arg='read_data', value=Name(id='mock_file_content', ctx=Load()))])], keywords=[]))], body=[Assert(test=Compare(left=Call(func=Name(id='get_email', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Constant(value='test@example.com')]))])])], decorator_list=[]), FunctionDef(name='test_email_not_found_in_gitconfig', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='mock_file_content', ctx=Store())], value=Constant(value='\n    [user]\n        name = test_user\n    ')), Assign(targets=[Name(id='mock_uuid', ctx=Store())], value=Constant(value='12345678-1234-5678-1234-567812345678')), With(items=[withitem(context_expr=Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='os.path.exists')], keywords=[keyword(arg='return_value', value=Constant(value=True))]))], body=[With(items=[withitem(context_expr=Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='builtins.open'), Call(func=Name(id='mock_open', ctx=Load()), args=[], keywords=[keyword(arg='read_data', value=Name(id='mock_file_content', ctx=Load()))])], keywords=[]))], body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='patch', ctx=Load()), attr='object', ctx=Load()), args=[Name(id='uuid', ctx=Load()), Constant(value='uuid4')], keywords=[keyword(arg='return_value', value=Name(id='mock_uuid', ctx=Load()))]))], body=[Assert(test=Compare(left=Call(func=Name(id='get_email', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Name(id='mock_uuid', ctx=Load())]))])])])], decorator_list=[]), FunctionDef(name='test_gitconfig_not_present', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='mock_uuid', ctx=Store())], value=Constant(value='12345678-1234-5678-1234-567812345678')), With(items=[withitem(context_expr=Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='os.path.exists')], keywords=[keyword(arg='return_value', value=Constant(value=False))]))], body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='patch', ctx=Load()), attr='object', ctx=Load()), args=[Name(id='uuid', ctx=Load()), Constant(value='uuid4')], keywords=[keyword(arg='return_value', value=Name(id='mock_uuid', ctx=Load()))]))], body=[Assert(test=Compare(left=Call(func=Name(id='get_email', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Name(id='mock_uuid', ctx=Load())]))])])], decorator_list=[]), FunctionDef(name='test_username_to_uuid', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Compare(left=Call(func=Name(id='username_to_uuid', ctx=Load()), args=[Constant(value='test_user')], keywords=[]), ops=[Eq()], comparators=[Constant(value='31676025-316f-b555-e0bf-a12f0bcfd0ea')]))], decorator_list=[])], type_ignores=[])