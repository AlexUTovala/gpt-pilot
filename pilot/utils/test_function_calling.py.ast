Module(body=[ImportFrom(module='const.function_calls', names=[alias(name='ARCHITECTURE')], level=0), ImportFrom(module='utils.llm_connection', names=[alias(name='clean_json_response')], level=0), ImportFrom(module='function_calling', names=[alias(name='parse_agent_response'), alias(name='JsonPrompter')], level=1), ClassDef(name='TestFunctionCalling', bases=[], keywords=[], body=[FunctionDef(name='test_parse_agent_response_text', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='response', ctx=Store())], value=Dict(keys=[Constant(value='text')], values=[Constant(value='Hello world!')])), Assign(targets=[Name(id='response', ctx=Store())], value=Call(func=Name(id='parse_agent_response', ctx=Load()), args=[Name(id='response', ctx=Load()), Constant(value=None)], keywords=[])), Assert(test=Compare(left=Name(id='response', ctx=Load()), ops=[Eq()], comparators=[Constant(value='Hello world!')]))], decorator_list=[]), FunctionDef(name='test_parse_agent_response_json', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='response', ctx=Store())], value=Dict(keys=[Constant(value='text')], values=[Constant(value='{"greeting": "Hello world!"}')])), Assign(targets=[Name(id='function_calls', ctx=Store())], value=Dict(keys=[Constant(value='definitions'), Constant(value='functions')], values=[List(elts=[], ctx=Load()), Dict(keys=[], values=[])])), Assign(targets=[Name(id='response', ctx=Store())], value=Call(func=Name(id='parse_agent_response', ctx=Load()), args=[Name(id='response', ctx=Load()), Name(id='function_calls', ctx=Load())], keywords=[])), Assert(test=Compare(left=Name(id='response', ctx=Load()), ops=[Eq()], comparators=[Dict(keys=[Constant(value='greeting')], values=[Constant(value='Hello world!')])]))], decorator_list=[]), FunctionDef(name='test_parse_agent_response_json_markdown', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='response', ctx=Store())], value=Dict(keys=[Constant(value='text')], values=[Constant(value='```json\n{"greeting": "Hello world!"}\n```')])), Assign(targets=[Name(id='function_calls', ctx=Store())], value=Dict(keys=[Constant(value='definitions'), Constant(value='functions')], values=[List(elts=[], ctx=Load()), Dict(keys=[], values=[])])), Assign(targets=[Subscript(value=Name(id='response', ctx=Load()), slice=Constant(value='text'), ctx=Store())], value=Call(func=Name(id='clean_json_response', ctx=Load()), args=[Subscript(value=Name(id='response', ctx=Load()), slice=Constant(value='text'), ctx=Load())], keywords=[])), Assign(targets=[Name(id='response', ctx=Store())], value=Call(func=Name(id='parse_agent_response', ctx=Load()), args=[Name(id='response', ctx=Load()), Name(id='function_calls', ctx=Load())], keywords=[])), Assert(test=Compare(left=Name(id='response', ctx=Load()), ops=[Eq()], comparators=[Dict(keys=[Constant(value='greeting')], values=[Constant(value='Hello world!')])]))], decorator_list=[]), FunctionDef(name='test_parse_agent_response_markdown', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='response', ctx=Store())], value=Dict(keys=[Constant(value='text')], values=[Constant(value='```\n{"greeting": "Hello world!"}\n```')])), Assign(targets=[Name(id='function_calls', ctx=Store())], value=Dict(keys=[Constant(value='definitions'), Constant(value='functions')], values=[List(elts=[], ctx=Load()), Dict(keys=[], values=[])])), Assign(targets=[Subscript(value=Name(id='response', ctx=Load()), slice=Constant(value='text'), ctx=Store())], value=Call(func=Name(id='clean_json_response', ctx=Load()), args=[Subscript(value=Name(id='response', ctx=Load()), slice=Constant(value='text'), ctx=Load())], keywords=[])), Assign(targets=[Name(id='response', ctx=Store())], value=Call(func=Name(id='parse_agent_response', ctx=Load()), args=[Name(id='response', ctx=Load()), Name(id='function_calls', ctx=Load())], keywords=[])), Assert(test=Compare(left=Name(id='response', ctx=Load()), ops=[Eq()], comparators=[Dict(keys=[Constant(value='greeting')], values=[Constant(value='Hello world!')])]))], decorator_list=[]), FunctionDef(name='test_parse_agent_response_multiple_args', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='response', ctx=Store())], value=Dict(keys=[Constant(value='text')], values=[Constant(value='{"greeting": "Hello", "name": "John"}')])), Assign(targets=[Name(id='function_calls', ctx=Store())], value=Dict(keys=[Constant(value='definitions'), Constant(value='functions')], values=[List(elts=[], ctx=Load()), Dict(keys=[], values=[])])), Assign(targets=[Name(id='response', ctx=Store())], value=Call(func=Name(id='parse_agent_response', ctx=Load()), args=[Name(id='response', ctx=Load()), Name(id='function_calls', ctx=Load())], keywords=[])), Assert(test=Compare(left=Subscript(value=Name(id='response', ctx=Load()), slice=Constant(value='greeting'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='Hello')])), Assert(test=Compare(left=Subscript(value=Name(id='response', ctx=Load()), slice=Constant(value='name'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='John')]))], decorator_list=[])], decorator_list=[]), FunctionDef(name='test_json_prompter', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='prompter', ctx=Store())], value=Call(func=Name(id='JsonPrompter', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='prompt', ctx=Store())], value=Call(func=Attribute(value=Name(id='prompter', ctx=Load()), attr='prompt', ctx=Load()), args=[Constant(value='Create a web-based chat app'), Subscript(value=Name(id='ARCHITECTURE', ctx=Load()), slice=Constant(value='definitions'), ctx=Load())], keywords=[])), Assert(test=Compare(left=Name(id='prompt', ctx=Load()), ops=[Eq()], comparators=[Constant(value="Help choose the appropriate function to call to answer the user's question.\nYou must respond with ONLY the JSON object, with NO additional text or explanation.\n\nAvailable functions:\n- process_technologies - Print the list of technologies that are created.\n\nCreate a web-based chat app")]))], decorator_list=[]), FunctionDef(name='test_llama_json_prompter', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='prompter', ctx=Store())], value=Call(func=Name(id='JsonPrompter', ctx=Load()), args=[], keywords=[keyword(arg='is_instruct', value=Constant(value=True))])), Assign(targets=[Name(id='prompt', ctx=Store())], value=Call(func=Attribute(value=Name(id='prompter', ctx=Load()), attr='prompt', ctx=Load()), args=[Constant(value='Create a web-based chat app'), Subscript(value=Name(id='ARCHITECTURE', ctx=Load()), slice=Constant(value='definitions'), ctx=Load())], keywords=[])), Assert(test=Compare(left=Name(id='prompt', ctx=Load()), ops=[Eq()], comparators=[Constant(value="[INST] <<SYS>>\nHelp choose the appropriate function to call to answer the user's question.\nYou must respond with ONLY the JSON object, with NO additional text or explanation.\n\nAvailable functions:\n- process_technologies - Print the list of technologies that are created.\n<</SYS>>\n\nCreate a web-based chat app [/INST]")]))], decorator_list=[]), FunctionDef(name='test_json_prompter_named', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='prompter', ctx=Store())], value=Call(func=Name(id='JsonPrompter', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='prompt', ctx=Store())], value=Call(func=Attribute(value=Name(id='prompter', ctx=Load()), attr='prompt', ctx=Load()), args=[Constant(value='Create a web-based chat app'), Subscript(value=Name(id='ARCHITECTURE', ctx=Load()), slice=Constant(value='definitions'), ctx=Load()), Constant(value='process_technologies')], keywords=[])), Assert(test=Compare(left=Name(id='prompt', ctx=Load()), ops=[Eq()], comparators=[Constant(value='**IMPORTANT**\nYou must respond with ONLY the JSON object, with NO additional text or explanation.\n\nHere is the schema for the expected JSON object:\n```json\n{\n    "technologies": {\n        "type": "array",\n        "description": "List of technologies.",\n        "items": {\n            "type": "string",\n            "description": "technology"\n        }\n    }\n}\n```\n\nCreate a web-based chat app')]))], decorator_list=[]), FunctionDef(name='test_llama_json_prompter_named', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='prompter', ctx=Store())], value=Call(func=Name(id='JsonPrompter', ctx=Load()), args=[], keywords=[keyword(arg='is_instruct', value=Constant(value=True))])), Assign(targets=[Name(id='prompt', ctx=Store())], value=Call(func=Attribute(value=Name(id='prompter', ctx=Load()), attr='prompt', ctx=Load()), args=[Constant(value='Create a web-based chat app'), Subscript(value=Name(id='ARCHITECTURE', ctx=Load()), slice=Constant(value='definitions'), ctx=Load()), Constant(value='process_technologies')], keywords=[])), Assert(test=Compare(left=Name(id='prompt', ctx=Load()), ops=[Eq()], comparators=[Constant(value='[INST] <<SYS>>\n**IMPORTANT**\nYou must respond with ONLY the JSON object, with NO additional text or explanation.\n\nHere is the schema for the expected JSON object:\n```json\n{\n    "technologies": {\n        "type": "array",\n        "description": "List of technologies.",\n        "items": {\n            "type": "string",\n            "description": "technology"\n        }\n    }\n}\n```\n<</SYS>>\n\nCreate a web-based chat app [/INST]')]))], decorator_list=[])], type_ignores=[])