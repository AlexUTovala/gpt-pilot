Module(body=[Import(names=[alias(name='json')]), Import(names=[alias(name='re')]), ImportFrom(module='typing', names=[alias(name='Union'), alias(name='TypeVar'), alias(name='List'), alias(name='Dict'), alias(name='Literal'), alias(name='Optional'), alias(name='TypedDict'), alias(name='Callable')], level=0), Assign(targets=[Name(id='JsonTypeBase', ctx=Store())], value=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='int', ctx=Load()), Name(id='float', ctx=Load()), Name(id='bool', ctx=Load()), Constant(value=None), Subscript(value=Name(id='List', ctx=Load()), slice=Constant(value='JsonType'), ctx=Load()), Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Constant(value='JsonType')], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='JsonType', ctx=Store())], value=Call(func=Name(id='TypeVar', ctx=Load()), args=[Constant(value='JsonType')], keywords=[keyword(arg='bound', value=Name(id='JsonTypeBase', ctx=Load()))])), ClassDef(name='FunctionParameters', bases=[Name(id='TypedDict', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Function parameters')), AnnAssign(target=Name(id='type', ctx=Store()), annotation=Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='object'), ctx=Load()), simple=1), AnnAssign(target=Name(id='properties', ctx=Store()), annotation=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='JsonType', ctx=Load())], ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='required', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load()), simple=1)], decorator_list=[]), ClassDef(name='FunctionType', bases=[Name(id='TypedDict', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Function type')), AnnAssign(target=Name(id='name', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='description', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='parameters', ctx=Store()), annotation=Name(id='FunctionParameters', ctx=Load()), simple=1)], decorator_list=[]), ClassDef(name='FunctionCall', bases=[Name(id='TypedDict', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Function call')), AnnAssign(target=Name(id='name', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='parameters', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1)], decorator_list=[]), ClassDef(name='FunctionCallSet', bases=[Name(id='TypedDict', ctx=Load())], keywords=[], body=[AnnAssign(target=Name(id='definitions', ctx=Store()), annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='FunctionType', ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='functions', ctx=Store()), annotation=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Callable', ctx=Load())], ctx=Load()), ctx=Load()), simple=1)], decorator_list=[]), FunctionDef(name='add_function_calls_to_request', args=arguments(posonlyargs=[], args=[arg(arg='gpt_data'), arg(arg='function_calls', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='FunctionCallSet', ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='function_calls', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return()], orelse=[]), AnnAssign(target=Name(id='model', ctx=Store()), annotation=Name(id='str', ctx=Load()), value=Subscript(value=Name(id='gpt_data', ctx=Load()), slice=Constant(value='model'), ctx=Load()), simple=1), Assign(targets=[Name(id='is_instruct', ctx=Store())], value=BoolOp(op=Or(), values=[Compare(left=Constant(value='llama'), ops=[In()], comparators=[Name(id='model', ctx=Load())]), Compare(left=Constant(value='anthropic'), ops=[In()], comparators=[Name(id='model', ctx=Load())])])), Assign(targets=[Subscript(value=Name(id='gpt_data', ctx=Load()), slice=Constant(value='functions'), ctx=Store())], value=Subscript(value=Name(id='function_calls', ctx=Load()), slice=Constant(value='definitions'), ctx=Load())), Assign(targets=[Name(id='prompter', ctx=Store())], value=Call(func=Name(id='JsonPrompter', ctx=Load()), args=[Name(id='is_instruct', ctx=Load())], keywords=[])), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='function_calls', ctx=Load()), slice=Constant(value='definitions'), ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='function_call', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='function_call', ctx=Store())], value=Subscript(value=Subscript(value=Subscript(value=Name(id='function_calls', ctx=Load()), slice=Constant(value='definitions'), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='name'), ctx=Load()))]), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='gpt_data', ctx=Load()), slice=Constant(value='messages'), ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='role'), Constant(value='content')], values=[Constant(value='user'), Call(func=Attribute(value=Name(id='prompter', ctx=Load()), attr='prompt', ctx=Load()), args=[Constant(value=''), Subscript(value=Name(id='function_calls', ctx=Load()), slice=Constant(value='definitions'), ctx=Load()), Name(id='function_call', ctx=Load())], keywords=[])])], keywords=[]))], decorator_list=[]), FunctionDef(name='parse_agent_response', args=arguments(posonlyargs=[], args=[arg(arg='response'), arg(arg='function_calls', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='FunctionCallSet', ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Post-processes the response from the agent.\n\n    Args:\n        response: The response from the agent.\n        function_calls: Optional function calls associated with the response.\n\n    Returns: The post-processed response.\n    ')), If(test=Name(id='function_calls', ctx=Load()), body=[Assign(targets=[Name(id='text', ctx=Store())], value=Subscript(value=Name(id='response', ctx=Load()), slice=Constant(value='text'), ctx=Load())), Return(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='loads', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Subscript(value=Name(id='response', ctx=Load()), slice=Constant(value='text'), ctx=Load()))], decorator_list=[]), ClassDef(name='JsonPrompter', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    Adapted from local_llm_function_calling\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='is_instruct', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='is_instruct', ctx=Store())], value=Name(id='is_instruct', ctx=Load()))], decorator_list=[]), FunctionDef(name='function_descriptions', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='functions', annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='FunctionType', ctx=Load()), ctx=Load())), arg(arg='function_to_call', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Get the descriptions of the functions\n\n        Args:\n            functions (list[FunctionType]): The functions to get the descriptions of\n            function_to_call (str): The function to call\n\n        Returns:\n            list[str]: The descriptions of the functions\n                (empty if the function doesn't exist or has no description)\n        ")), Return(value=ListComp(elt=JoinedStr(values=[Constant(value='# '), FormattedValue(value=Subscript(value=Name(id='function', ctx=Load()), slice=Constant(value='name'), ctx=Load()), conversion=-1), Constant(value=': '), FormattedValue(value=Subscript(value=Name(id='function', ctx=Load()), slice=Constant(value='description'), ctx=Load()), conversion=-1)]), generators=[comprehension(target=Name(id='function', ctx=Store()), iter=Name(id='functions', ctx=Load()), ifs=[BoolOp(op=And(), values=[Compare(left=Subscript(value=Name(id='function', ctx=Load()), slice=Constant(value='name'), ctx=Load()), ops=[Eq()], comparators=[Name(id='function_to_call', ctx=Load())]), Compare(left=Constant(value='description'), ops=[In()], comparators=[Name(id='function', ctx=Load())])])], is_async=0)]))], decorator_list=[], returns=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='function_parameters', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='functions', annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='FunctionType', ctx=Load()), ctx=Load())), arg(arg='function_to_call', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get the parameters of the function\n\n        Args:\n            functions (list[FunctionType]): The functions to get the parameters of\n            function_to_call (str): The function to call\n\n        Returns:\n            str: The parameters of the function as a JSON schema\n        ')), Return(value=Call(func=Name(id='next', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dumps', ctx=Load()), args=[Subscript(value=Subscript(value=Name(id='function', ctx=Load()), slice=Constant(value='parameters'), ctx=Load()), slice=Constant(value='properties'), ctx=Load())], keywords=[keyword(arg='indent', value=Constant(value=4))]), generators=[comprehension(target=Name(id='function', ctx=Store()), iter=Name(id='functions', ctx=Load()), ifs=[Compare(left=Subscript(value=Name(id='function', ctx=Load()), slice=Constant(value='name'), ctx=Load()), ops=[Eq()], comparators=[Name(id='function_to_call', ctx=Load())])], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='function_data', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='functions', annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='FunctionType', ctx=Load()), ctx=Load())), arg(arg='function_to_call', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get the data for the function\n\n        Args:\n            functions (list[FunctionType]): The functions to get the data for\n            function_to_call (str): The function to call\n\n        Returns:\n            str: The data necessary to generate the arguments for the function\n        ')), Return(value=Call(func=Attribute(value=Constant(value='\n'), attr='join', ctx=Load()), args=[List(elts=[Constant(value='Here is the schema for the expected JSON object:'), Constant(value='```json'), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='function_parameters', ctx=Load()), args=[Name(id='functions', ctx=Load()), Name(id='function_to_call', ctx=Load())], keywords=[]), Constant(value='```')], ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='function_summary', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='function', annotation=Name(id='FunctionType', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get a summary of a function\n\n        Args:\n            function (FunctionType): The function to get the summary of\n\n        Returns:\n            str: The summary of the function, as a bullet point\n        ')), Return(value=BinOp(left=JoinedStr(values=[Constant(value='- '), FormattedValue(value=Subscript(value=Name(id='function', ctx=Load()), slice=Constant(value='name'), ctx=Load()), conversion=-1)]), op=Add(), right=IfExp(test=Compare(left=Constant(value='description'), ops=[In()], comparators=[Name(id='function', ctx=Load())]), body=JoinedStr(values=[Constant(value=' - '), FormattedValue(value=Subscript(value=Name(id='function', ctx=Load()), slice=Constant(value='description'), ctx=Load()), conversion=-1)]), orelse=Constant(value=''))))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='functions_summary', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='functions', annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='FunctionType', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get a summary of the functions\n\n        Args:\n            functions (list[FunctionType]): The functions to get the summary of\n\n        Returns:\n            str: The summary of the functions, as a bulleted list\n        ')), Return(value=BinOp(left=Constant(value='Available functions:\n'), op=Add(), right=Call(func=Attribute(value=Constant(value='\n'), attr='join', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='function_summary', ctx=Load()), args=[Name(id='function', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='function', ctx=Store()), iter=Name(id='functions', ctx=Load()), ifs=[], is_async=0)])], keywords=[])))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='prompt', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='prompt', annotation=Name(id='str', ctx=Load())), arg(arg='functions', annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='FunctionType', ctx=Load()), ctx=Load())), arg(arg='function_to_call', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Generate the llama prompt\n\n        Args:\n            prompt (str): The prompt to generate the response to\n            functions (list[FunctionType]): The functions to generate the response from\n            function_to_call (str | None): The function to call. Defaults to None.\n\n        Returns:\n            list[bytes | int]: The llama prompt, a function selection prompt if no\n                function is specified, or a function argument prompt if a function is\n                specified\n        ')), Assign(targets=[Name(id='system', ctx=Store())], value=BinOp(left=IfExp(test=Compare(left=Name(id='function_to_call', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Constant(value="Help choose the appropriate function to call to answer the user's question."), orelse=Constant(value='**IMPORTANT**')), op=Add(), right=Constant(value='\nYou must respond with ONLY the JSON object, with NO additional text or explanation.'))), Assign(targets=[Name(id='data', ctx=Store())], value=IfExp(test=Name(id='function_to_call', ctx=Load()), body=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='function_data', ctx=Load()), args=[Name(id='functions', ctx=Load()), Name(id='function_to_call', ctx=Load())], keywords=[]), orelse=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='functions_summary', ctx=Load()), args=[Name(id='functions', ctx=Load())], keywords=[]))), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='is_instruct', ctx=Load()), body=[Return(value=JoinedStr(values=[Constant(value='[INST] <<SYS>>\n'), FormattedValue(value=Name(id='system', ctx=Load()), conversion=-1), Constant(value='\n\n'), FormattedValue(value=Name(id='data', ctx=Load()), conversion=-1), Constant(value='\n<</SYS>>\n\n'), FormattedValue(value=Name(id='prompt', ctx=Load()), conversion=-1), Constant(value=' [/INST]')]))], orelse=[Return(value=JoinedStr(values=[FormattedValue(value=Name(id='system', ctx=Load()), conversion=-1), Constant(value='\n\n'), FormattedValue(value=Name(id='data', ctx=Load()), conversion=-1), Constant(value='\n\n'), FormattedValue(value=Name(id='prompt', ctx=Load()), conversion=-1)]))])], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[])], type_ignores=[])