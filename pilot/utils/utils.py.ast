Module(body=[Import(names=[alias(name='datetime')]), Import(names=[alias(name='os')]), Import(names=[alias(name='platform')]), Import(names=[alias(name='uuid')]), Import(names=[alias(name='distro')]), Import(names=[alias(name='json')]), Import(names=[alias(name='hashlib')]), Import(names=[alias(name='re')]), ImportFrom(module='jinja2', names=[alias(name='Environment'), alias(name='FileSystemLoader')], level=0), ImportFrom(module='style', names=[alias(name='color_green')], level=1), ImportFrom(module='const.llm', names=[alias(name='MAX_QUESTIONS'), alias(name='END_RESPONSE')], level=0), ImportFrom(module='const.common', names=[alias(name='ROLES'), alias(name='STEPS')], level=0), ImportFrom(module='logger.logger', names=[alias(name='logger')], level=0), Assign(targets=[Name(id='prompts_path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Name(id='__file__', ctx=Load())], keywords=[]), Constant(value='..'), Constant(value='prompts')], keywords=[])), Assign(targets=[Name(id='file_loader', ctx=Store())], value=Call(func=Name(id='FileSystemLoader', ctx=Load()), args=[Name(id='prompts_path', ctx=Load())], keywords=[])), Assign(targets=[Name(id='env', ctx=Store())], value=Call(func=Name(id='Environment', ctx=Load()), args=[], keywords=[keyword(arg='loader', value=Name(id='file_loader', ctx=Load()))])), FunctionDef(name='capitalize_first_word_with_underscores', args=arguments(posonlyargs=[], args=[arg(arg='s')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='words', ctx=Store())], value=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='_')], keywords=[])), Assign(targets=[Subscript(value=Name(id='words', ctx=Load()), slice=Constant(value=0), ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='words', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='capitalize', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='capitalized_string', ctx=Store())], value=Call(func=Attribute(value=Constant(value='_'), attr='join', ctx=Load()), args=[Name(id='words', ctx=Load())], keywords=[])), Return(value=Name(id='capitalized_string', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_prompt', args=arguments(posonlyargs=[], args=[arg(arg='prompt_name'), arg(arg='data')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='data', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='data', ctx=Store())], value=Dict(keys=[], values=[]))], orelse=[]), Expr(value=Call(func=Name(id='get_prompt_components', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[JoinedStr(values=[Constant(value='Getting prompt for '), FormattedValue(value=Name(id='prompt_name', ctx=Load()), conversion=-1)])], keywords=[])), Assign(targets=[Name(id='template', ctx=Store())], value=Call(func=Attribute(value=Name(id='env', ctx=Load()), attr='get_template', ctx=Load()), args=[Name(id='prompt_name', ctx=Load())], keywords=[])), Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Attribute(value=Name(id='template', ctx=Load()), attr='render', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])), Return(value=Name(id='output', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_prompt_components', args=arguments(posonlyargs=[], args=[arg(arg='data')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='prompts_components', ctx=Store())], value=Dict(keys=[], values=[])), Expr(value=Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='update', ctx=Load()), args=[Dict(keys=[Constant(value='MAX_QUESTIONS'), Constant(value='END_RESPONSE')], values=[Name(id='MAX_QUESTIONS', ctx=Load()), Name(id='END_RESPONSE', ctx=Load())])], keywords=[])), Assign(targets=[Name(id='prompts_path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Name(id='__file__', ctx=Load())], keywords=[]), Constant(value='..'), Constant(value='prompts/components')], keywords=[])), Assign(targets=[Name(id='file_loader', ctx=Store())], value=Call(func=Name(id='FileSystemLoader', ctx=Load()), args=[Name(id='prompts_path', ctx=Load())], keywords=[])), Assign(targets=[Name(id='env', ctx=Store())], value=Call(func=Name(id='Environment', ctx=Load()), args=[], keywords=[keyword(arg='loader', value=Name(id='file_loader', ctx=Load()))])), Assign(targets=[Name(id='template_names', ctx=Store())], value=Call(func=Attribute(value=Name(id='env', ctx=Load()), attr='list_templates', ctx=Load()), args=[], keywords=[])), For(target=Name(id='template_name', ctx=Store()), iter=Name(id='template_names', ctx=Load()), body=[Assign(targets=[Name(id='file_key', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='splitext', ctx=Load()), args=[Name(id='template_name', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='file_content', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='env', ctx=Load()), attr='get_template', ctx=Load()), args=[Name(id='template_name', ctx=Load())], keywords=[]), attr='render', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='prompts_components', ctx=Load()), slice=Name(id='file_key', ctx=Load()), ctx=Store())], value=Name(id='file_content', ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='prompts_components', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='get_sys_message', args=arguments(posonlyargs=[], args=[arg(arg='role'), arg(arg='args')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='\n    :param role: \'product_owner\', \'architect\', \'dev_ops\', \'tech_lead\', \'full_stack_developer\', \'code_monkey\'\n    :return: { "role": "system", "content": "You are a {role}... You do..." }\n    ')), Assign(targets=[Name(id='content', ctx=Store())], value=Call(func=Name(id='get_prompt', ctx=Load()), args=[JoinedStr(values=[Constant(value='system_messages/'), FormattedValue(value=Name(id='role', ctx=Load()), conversion=-1), Constant(value='.prompt')]), Name(id='args', ctx=Load())], keywords=[])), Return(value=Dict(keys=[Constant(value='role'), Constant(value='content')], values=[Constant(value='system'), Name(id='content', ctx=Load())]))], decorator_list=[]), FunctionDef(name='find_role_from_step', args=arguments(posonlyargs=[], args=[arg(arg='target')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Tuple(elts=[Name(id='role', ctx=Store()), Name(id='values', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='ROLES', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Name(id='target', ctx=Load()), ops=[In()], comparators=[Name(id='values', ctx=Load())]), body=[Return(value=Name(id='role', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Constant(value='product_owner'))], decorator_list=[]), FunctionDef(name='get_os_info', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='os_info', ctx=Store())], value=Dict(keys=[Constant(value='OS'), Constant(value='OS Version'), Constant(value='Architecture'), Constant(value='Machine'), Constant(value='Node'), Constant(value='Release')], values=[Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='system', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='version', ctx=Load()), args=[], keywords=[]), Subscript(value=Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='architecture', ctx=Load()), args=[], keywords=[]), slice=Constant(value=0), ctx=Load()), Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='machine', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='node', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='release', ctx=Load()), args=[], keywords=[])])), If(test=Compare(left=Subscript(value=Name(id='os_info', ctx=Load()), slice=Constant(value='OS'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='Linux')]), body=[Assign(targets=[Subscript(value=Name(id='os_info', ctx=Load()), slice=Constant(value='Distribution'), ctx=Store())], value=Call(func=Attribute(value=Name(id='distro', ctx=Load()), attr='name', ctx=Load()), args=[], keywords=[keyword(arg='pretty', value=Constant(value=True))]))], orelse=[If(test=Compare(left=Subscript(value=Name(id='os_info', ctx=Load()), slice=Constant(value='OS'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='Windows')]), body=[Assign(targets=[Subscript(value=Name(id='os_info', ctx=Load()), slice=Constant(value='Win32 Version'), ctx=Store())], value=Call(func=Attribute(value=Constant(value=' '), attr='join', ctx=Load()), args=[Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='win32_ver', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[If(test=Compare(left=Subscript(value=Name(id='os_info', ctx=Load()), slice=Constant(value='OS'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='Mac')]), body=[Assign(targets=[Subscript(value=Name(id='os_info', ctx=Load()), slice=Constant(value='Mac Version'), ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='mac_ver', ctx=Load()), args=[], keywords=[]), slice=Constant(value=0), ctx=Load()))], orelse=[])])]), Return(value=Call(func=Name(id='array_of_objects_to_string', ctx=Load()), args=[Name(id='os_info', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='should_execute_step', args=arguments(posonlyargs=[], args=[arg(arg='arg_step'), arg(arg='current_step')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    :param arg_step: `project.args['step']`, may be None\n    :param current_step:  The step that would be executed next by the calling method.\n    :return: True if `current_step` should be executed.\n    ")), Assign(targets=[Name(id='arg_step_index', ctx=Store())], value=IfExp(test=Compare(left=Name(id='arg_step', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Constant(value=0), orelse=IfExp(test=Compare(left=Name(id='arg_step', ctx=Load()), ops=[In()], comparators=[Name(id='STEPS', ctx=Load())]), body=Call(func=Attribute(value=Name(id='STEPS', ctx=Load()), attr='index', ctx=Load()), args=[Name(id='arg_step', ctx=Load())], keywords=[]), orelse=Constant(value=None)))), Assign(targets=[Name(id='current_step_index', ctx=Store())], value=IfExp(test=Compare(left=Name(id='current_step', ctx=Load()), ops=[In()], comparators=[Name(id='STEPS', ctx=Load())]), body=Call(func=Attribute(value=Name(id='STEPS', ctx=Load()), attr='index', ctx=Load()), args=[Name(id='current_step', ctx=Load())], keywords=[]), orelse=Constant(value=None))), Return(value=BoolOp(op=And(), values=[Compare(left=Name(id='arg_step_index', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='current_step_index', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='current_step_index', ctx=Load()), ops=[GtE()], comparators=[Name(id='arg_step_index', ctx=Load())])]))], decorator_list=[]), FunctionDef(name='step_already_finished', args=arguments(posonlyargs=[], args=[arg(arg='args'), arg(arg='step')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='args', ctx=Load()), attr='update', ctx=Load()), args=[Subscript(value=Name(id='step', ctx=Load()), slice=Constant(value='app_data'), ctx=Load())], keywords=[])), Assign(targets=[Name(id='message', ctx=Store())], value=JoinedStr(values=[Constant(value='✅  '), FormattedValue(value=Call(func=Name(id='capitalize_first_word_with_underscores', ctx=Load()), args=[Subscript(value=Name(id='step', ctx=Load()), slice=Constant(value='step'), ctx=Load())], keywords=[]), conversion=-1)])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Name(id='color_green', ctx=Load()), args=[Name(id='message', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Name(id='message', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='generate_app_data', args=arguments(posonlyargs=[], args=[arg(arg='args')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Dict(keys=[Constant(value='app_id'), Constant(value='app_type')], values=[Subscript(value=Name(id='args', ctx=Load()), slice=Constant(value='app_id'), ctx=Load()), Subscript(value=Name(id='args', ctx=Load()), slice=Constant(value='app_type'), ctx=Load())]))], decorator_list=[]), FunctionDef(name='array_of_objects_to_string', args=arguments(posonlyargs=[], args=[arg(arg='array')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value='\n'), attr='join', ctx=Load()), args=[ListComp(elt=JoinedStr(values=[FormattedValue(value=Name(id='key', ctx=Load()), conversion=-1), Constant(value=': '), FormattedValue(value=Name(id='value', ctx=Load()), conversion=-1)]), generators=[comprehension(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='array', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[]), FunctionDef(name='hash_data', args=arguments(posonlyargs=[], args=[arg(arg='data')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='serialized_data', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dumps', ctx=Load()), args=[Call(func=Name(id='replace_functions', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])], keywords=[keyword(arg='sort_keys', value=Constant(value=True))]), attr='encode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[])), Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='hashlib', ctx=Load()), attr='sha256', ctx=Load()), args=[Name(id='serialized_data', ctx=Load())], keywords=[]), attr='hexdigest', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='replace_functions', args=arguments(posonlyargs=[], args=[arg(arg='obj')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='obj', ctx=Load()), Name(id='dict', ctx=Load())], keywords=[]), body=[Return(value=DictComp(key=Name(id='k', ctx=Load()), value=Call(func=Name(id='replace_functions', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[]), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='obj', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)]))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='obj', ctx=Load()), Name(id='list', ctx=Load())], keywords=[]), body=[Return(value=ListComp(elt=Call(func=Name(id='replace_functions', ctx=Load()), args=[Name(id='item', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='item', ctx=Store()), iter=Name(id='obj', ctx=Load()), ifs=[], is_async=0)]))], orelse=[If(test=Call(func=Name(id='callable', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]), body=[Return(value=Constant(value='function'))], orelse=[Return(value=Name(id='obj', ctx=Load()))])])])], decorator_list=[]), FunctionDef(name='fix_json', args=arguments(posonlyargs=[], args=[arg(arg='s')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='True'), Constant(value='true')], keywords=[])), Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='False'), Constant(value='false')], keywords=[])), Return(value=Call(func=Name(id='fix_json_newlines', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='fix_json_newlines', args=arguments(posonlyargs=[], args=[arg(arg='s')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='pattern', ctx=Store())], value=Constant(value='("(?:\\\\\\\\n|\\\\.|[^"\\\\])*")')), FunctionDef(name='replace_newlines', args=arguments(posonlyargs=[], args=[arg(arg='match')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value=1)], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value='\n'), Constant(value='\\n')], keywords=[]))], decorator_list=[]), Return(value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='sub', ctx=Load()), args=[Name(id='pattern', ctx=Load()), Name(id='replace_newlines', ctx=Load()), Name(id='s', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='clean_filename', args=arguments(posonlyargs=[], args=[arg(arg='filename')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='cleaned_filename', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value='[<>:"/\\\\|?*]'), Constant(value=''), Name(id='filename', ctx=Load())], keywords=[])), Assign(targets=[Name(id='cleaned_filename', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value='\\s'), Constant(value='_'), Name(id='cleaned_filename', ctx=Load())], keywords=[])), Return(value=Name(id='cleaned_filename', ctx=Load()))], decorator_list=[]), FunctionDef(name='json_serial', args=arguments(posonlyargs=[], args=[arg(arg='obj')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='JSON serializer for objects not serializable by default json code')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='obj', ctx=Load()), Tuple(elts=[Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), Attribute(value=Name(id='datetime', ctx=Load()), attr='date', ctx=Load())], ctx=Load())], keywords=[]), body=[Return(value=Call(func=Attribute(value=Name(id='obj', ctx=Load()), attr='isoformat', ctx=Load()), args=[], keywords=[]))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='obj', ctx=Load()), Attribute(value=Name(id='uuid', ctx=Load()), attr='UUID', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]))], orelse=[Return(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]))])])], decorator_list=[])], type_ignores=[])