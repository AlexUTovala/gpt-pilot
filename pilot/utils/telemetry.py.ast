Module(body=[ImportFrom(module='logging', names=[alias(name='getLogger')], level=0), Import(names=[alias(name='sys')]), Import(names=[alias(name='time')]), ImportFrom(module='typing', names=[alias(name='Any')], level=0), ImportFrom(module='uuid', names=[alias(name='uuid4')], level=0), Import(names=[alias(name='requests')]), ImportFrom(module='settings', names=[alias(name='settings'), alias(name='version'), alias(name='config_path')], level=1), Assign(targets=[Name(id='log', ctx=Store())], value=Call(func=Name(id='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), ClassDef(name='Telemetry', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    Anonymous telemetry.\n\n    See ../../docs/TELEMETRY.md for more information on what is collected\n    and how to disable it on a configuration level.\n\n    This class is a singleton, use the `telemetry` global variable to access it:\n\n    >>> from utils.telemetry import telemetry\n\n    To set up telemetry (only once, at GPT-Pilot setup), use the\n    `telemetry.setup()` method:\n\n    >>> telemetry.setup()\n\n    To record start of application creation process:\n\n    >>> telemetry.start()\n\n    To record data or increase counters:\n\n    >>> telemetry.set("model", "gpt-4")\n    >>> telemetry.inc("num_llm_requests", 5)\n\n    To stop recording and send the data:\n\n    >>> telemetry.stop()\n    >>> telemetry.send()\n\n    Note: all methods are no-ops if telemetry is not enabled.\n    ')), Assign(targets=[Name(id='DEFAULT_ENDPOINT', ctx=Store())], value=Constant(value='https://api.pythagora.io/telemetry')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='enabled', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='telemetry_id', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='endpoint', ctx=Store())], value=Constant(value=None)), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='clear_data', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='settings', ctx=Load()), attr='telemetry', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='enabled', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='settings', ctx=Load()), attr='telemetry', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='enabled'), Constant(value=False)], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='telemetry_id', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='settings', ctx=Load()), attr='telemetry', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='id')], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='endpoint', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='settings', ctx=Load()), attr='telemetry', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='endpoint')], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='enabled', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='debug', ctx=Load()), args=[JoinedStr(values=[Constant(value='Anonymous telemetry enabled (id='), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='telemetry_id', ctx=Load()), conversion=-1), Constant(value='), configure or disable it in '), FormattedValue(value=Name(id='config_path', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='clear_data', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Reset all telemetry data to default values.\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='data', ctx=Store())], value=Dict(keys=[Constant(value='platform'), Constant(value='python_version'), Constant(value='pilot_version'), Constant(value='model'), Constant(value='initial_prompt'), Constant(value='num_llm_requests'), Constant(value='num_llm_tokens'), Constant(value='num_steps'), Constant(value='num_commands'), Constant(value='num_inputs'), Constant(value='elapsed_time'), Constant(value='end_result'), Constant(value='is_continuation'), Constant(value='user_feedback'), Constant(value='user_contact')], values=[Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), Attribute(value=Name(id='sys', ctx=Load()), attr='version', ctx=Load()), Name(id='version', ctx=Load()), Constant(value=None), Constant(value=None), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=None), Constant(value=False), Constant(value=None), Constant(value=None)])), If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), ops=[Eq()], comparators=[Constant(value='linux')]), body=[Try(body=[Import(names=[alias(name='distro')]), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='data', ctx=Load()), slice=Constant(value='linux_distro'), ctx=Store())], value=Call(func=Attribute(value=Name(id='distro', ctx=Load()), attr='name', ctx=Load()), args=[], keywords=[keyword(arg='pretty', value=Constant(value=True))]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='err', body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='debug', ctx=Load()), args=[JoinedStr(values=[Constant(value='Error getting Linux distribution info: '), FormattedValue(value=Name(id='err', ctx=Load()), conversion=-1)])], keywords=[keyword(arg='exc_info', value=Constant(value=True))]))])], orelse=[], finalbody=[])], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='start_time', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='end_time', ctx=Store())], value=Constant(value=None))], decorator_list=[]), FunctionDef(name='setup', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Set up a new unique telemetry ID and default phone-home endpoint.\n\n        This should only be called once at initial GPT-Pilot setup.\n        ')), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='enabled', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Telemetry already set up, not doing anything')], keywords=[])), Return()], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='telemetry_id', ctx=Store())], value=JoinedStr(values=[Constant(value='telemetry-'), FormattedValue(value=Call(func=Name(id='uuid4', ctx=Load()), args=[], keywords=[]), conversion=-1)])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='endpoint', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='DEFAULT_ENDPOINT', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='enabled', ctx=Store())], value=Constant(value=True)), Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='debug', ctx=Load()), args=[JoinedStr(values=[Constant(value='Telemetry.setup(): setting up anonymous telemetry (id='), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='telemetry_id', ctx=Load()), conversion=-1), Constant(value=')')])], keywords=[])), Assign(targets=[Attribute(value=Name(id='settings', ctx=Load()), attr='telemetry', ctx=Store())], value=Dict(keys=[Constant(value='id'), Constant(value='endpoint'), Constant(value='enabled')], values=[Attribute(value=Name(id='self', ctx=Load()), attr='telemetry_id', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='endpoint', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='enabled', ctx=Load())]))], decorator_list=[]), FunctionDef(name='set', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='value', annotation=Name(id='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Set a telemetry data field to a value.\n\n        :param name: name of the telemetry data field\n        :param value: value to set the field to\n\n        Note: only known data fields may be set, see `Telemetry.clear_data()` for a list.\n        ')), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='enabled', ctx=Load())), body=[Return()], orelse=[]), If(test=Compare(left=Name(id='name', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='data', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='error', ctx=Load()), args=[JoinedStr(values=[Constant(value='Telemetry.record(): ignoring unknown telemetry data field: '), FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1)])], keywords=[])), Return()], orelse=[]), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='data', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[]), FunctionDef(name='inc', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='value', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1)]), body=[Expr(value=Constant(value='\n        Increase a telemetry data field by a value.\n\n        :param name: name of the telemetry data field\n        :param value: value to increase the field by (default: 1)\n\n        Note: only known data fields may be increased, see `Telemetry.clear_data()` for a list.\n        ')), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='enabled', ctx=Load())), body=[Return()], orelse=[]), If(test=Compare(left=Name(id='name', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='data', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='error', ctx=Load()), args=[JoinedStr(values=[Constant(value='Telemetry.increase(): ignoring unknown telemetry data field: '), FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1)])], keywords=[])), Return()], orelse=[]), AugAssign(target=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='data', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store()), op=Add(), value=Name(id='value', ctx=Load()))], decorator_list=[]), FunctionDef(name='start', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Record start of application creation process.\n        ')), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='enabled', ctx=Load())), body=[Return()], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='start_time', ctx=Store())], value=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='time', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='end_time', ctx=Store())], value=Constant(value=None))], decorator_list=[]), FunctionDef(name='stop', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Record end of application creation process.\n        ')), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='enabled', ctx=Load())), body=[Return()], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='start_time', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='error', ctx=Load()), args=[Constant(value='Telemetry.stop(): cannot stop telemetry, it was never started')], keywords=[])), Return()], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='end_time', ctx=Store())], value=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='time', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='data', ctx=Load()), slice=Constant(value='elapsed_time'), ctx=Store())], value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='end_time', ctx=Load()), op=Sub(), right=Attribute(value=Name(id='self', ctx=Load()), attr='start_time', ctx=Load())))], decorator_list=[]), FunctionDef(name='send', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='event', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='pilot-telemetry')]), body=[Expr(value=Constant(value='\n        Send telemetry data to the phone-home endpoint.\n\n        Note: this method clears all telemetry data after sending it.\n        ')), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='enabled', ctx=Load())), body=[Return()], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='endpoint', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='error', ctx=Load()), args=[Constant(value='Telemetry.send(): cannot send telemetry, no endpoint configured')], keywords=[])), Return()], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='start_time', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='end_time', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='stop', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='payload', ctx=Store())], value=Dict(keys=[Constant(value='pathId'), Constant(value='event'), Constant(value='data')], values=[Attribute(value=Name(id='self', ctx=Load()), attr='telemetry_id', ctx=Load()), Name(id='event', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='data', ctx=Load())])), Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='debug', ctx=Load()), args=[JoinedStr(values=[Constant(value='Telemetry.send(): sending anonymous telemetry data to '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='endpoint', ctx=Load()), conversion=-1)])], keywords=[])), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='requests', ctx=Load()), attr='post', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='endpoint', ctx=Load())], keywords=[keyword(arg='json', value=Name(id='payload', ctx=Load()))]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='e', body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='error', ctx=Load()), args=[JoinedStr(values=[Constant(value='Telemetry.send(): failed to send telemetry data: '), FormattedValue(value=Name(id='e', ctx=Load()), conversion=-1)])], keywords=[keyword(arg='exc_info', value=Constant(value=True))]))])], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='clear_data', ctx=Load()), args=[], keywords=[]))])], decorator_list=[])], decorator_list=[]), Assign(targets=[Name(id='telemetry', ctx=Store())], value=Call(func=Name(id='Telemetry', ctx=Load()), args=[], keywords=[]))], type_ignores=[])