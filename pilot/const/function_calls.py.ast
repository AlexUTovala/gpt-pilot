Module(body=[FunctionDef(name='process_user_stories', args=arguments(posonlyargs=[], args=[arg(arg='stories')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Name(id='stories', ctx=Load()))], decorator_list=[]), FunctionDef(name='process_user_tasks', args=arguments(posonlyargs=[], args=[arg(arg='tasks')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Name(id='tasks', ctx=Load()))], decorator_list=[]), FunctionDef(name='process_os_technologies', args=arguments(posonlyargs=[], args=[arg(arg='technologies')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Name(id='technologies', ctx=Load()))], decorator_list=[]), FunctionDef(name='run_commands', args=arguments(posonlyargs=[], args=[arg(arg='commands')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Name(id='commands', ctx=Load()))], decorator_list=[]), FunctionDef(name='return_files', args=arguments(posonlyargs=[], args=[arg(arg='files')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Name(id='files', ctx=Load()))], decorator_list=[]), FunctionDef(name='return_array_from_prompt', args=arguments(posonlyargs=[], args=[arg(arg='name_plural'), arg(arg='name_singular'), arg(arg='return_var_name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Dict(keys=[Constant(value='name'), Constant(value='description'), Constant(value='parameters')], values=[JoinedStr(values=[Constant(value='process_'), FormattedValue(value=Call(func=Attribute(value=Name(id='name_plural', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value=' '), Constant(value='_')], keywords=[]), conversion=-1)]), JoinedStr(values=[Constant(value='Print the list of '), FormattedValue(value=Name(id='name_plural', ctx=Load()), conversion=-1), Constant(value=' that are created.')]), Dict(keys=[Constant(value='type'), Constant(value='properties'), Constant(value='required')], values=[Constant(value='object'), Dict(keys=[JoinedStr(values=[FormattedValue(value=Name(id='return_var_name', ctx=Load()), conversion=-1)])], values=[Dict(keys=[Constant(value='type'), Constant(value='description'), Constant(value='items')], values=[Constant(value='array'), JoinedStr(values=[Constant(value='List of '), FormattedValue(value=Name(id='name_plural', ctx=Load()), conversion=-1), Constant(value='.')]), Dict(keys=[Constant(value='type'), Constant(value='description')], values=[Constant(value='string'), JoinedStr(values=[FormattedValue(value=Name(id='name_singular', ctx=Load()), conversion=-1)])])])]), List(elts=[Name(id='return_var_name', ctx=Load())], ctx=Load())])]))], decorator_list=[]), FunctionDef(name='command_definition', args=arguments(posonlyargs=[], args=[arg(arg='description_command'), arg(arg='description_timeout')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='A single command that needs to be executed.'), Constant(value="Timeout in milliseconds that represent the approximate time this command takes to finish. If you need to run a command that doesnt't finish by itself (eg. a command to run an app), set the timeout to to a value long enough to determine that it has started successfully and provide a command_id. If you need to create a directory that doesn't exist and is not the root project directory, always create it by running a command `mkdir`")]), body=[Return(value=Dict(keys=[Constant(value='type'), Constant(value='description'), Constant(value='properties'), Constant(value='required')], values=[Constant(value='object'), Constant(value='Command that needs to be run to complete the current task. This should be used only if the task is of a type "command".'), Dict(keys=[Constant(value='command'), Constant(value='timeout'), Constant(value='success_message'), Constant(value='command_id')], values=[Dict(keys=[Constant(value='type'), Constant(value='description')], values=[Constant(value='string'), Name(id='description_command', ctx=Load())]), Dict(keys=[Constant(value='type'), Constant(value='description')], values=[Constant(value='number'), Name(id='description_timeout', ctx=Load())]), Dict(keys=[Constant(value='type'), Constant(value='description')], values=[Constant(value='string'), Constant(value='A message to look for in the output of the command to determine if successful or not.')]), Dict(keys=[Constant(value='type'), Constant(value='description')], values=[Constant(value='string'), Constant(value='If the process needs to continue running after the command is executed provide a unique command identifier which you can use to kill the process later.')])]), List(elts=[Constant(value='command'), Constant(value='timeout')], ctx=Load())]))], decorator_list=[]), Assign(targets=[Name(id='USER_STORIES', ctx=Store())], value=Dict(keys=[Constant(value='definitions'), Constant(value='functions')], values=[List(elts=[Call(func=Name(id='return_array_from_prompt', ctx=Load()), args=[Constant(value='user stories'), Constant(value='user story'), Constant(value='stories')], keywords=[])], ctx=Load()), Dict(keys=[Constant(value='process_user_stories')], values=[Name(id='process_user_stories', ctx=Load())])])), Assign(targets=[Name(id='USER_TASKS', ctx=Store())], value=Dict(keys=[Constant(value='definitions'), Constant(value='functions')], values=[List(elts=[Call(func=Name(id='return_array_from_prompt', ctx=Load()), args=[Constant(value='user tasks'), Constant(value='user task'), Constant(value='tasks')], keywords=[])], ctx=Load()), Dict(keys=[Constant(value='process_user_tasks')], values=[Name(id='process_user_tasks', ctx=Load())])])), Assign(targets=[Name(id='ARCHITECTURE', ctx=Store())], value=Dict(keys=[Constant(value='definitions'), Constant(value='functions')], values=[List(elts=[Call(func=Name(id='return_array_from_prompt', ctx=Load()), args=[Constant(value='technologies'), Constant(value='technology'), Constant(value='technologies')], keywords=[])], ctx=Load()), Dict(keys=[Constant(value='process_technologies')], values=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='technologies')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Name(id='technologies', ctx=Load()))])])), Assign(targets=[Name(id='FILTER_OS_TECHNOLOGIES', ctx=Store())], value=Dict(keys=[Constant(value='definitions'), Constant(value='functions')], values=[List(elts=[Call(func=Name(id='return_array_from_prompt', ctx=Load()), args=[Constant(value='os specific technologies'), Constant(value='os specific technology'), Constant(value='technologies')], keywords=[])], ctx=Load()), Dict(keys=[Constant(value='process_os_specific_technologies')], values=[Name(id='process_os_technologies', ctx=Load())])])), Assign(targets=[Name(id='INSTALL_TECH', ctx=Store())], value=Dict(keys=[Constant(value='definitions'), Constant(value='functions')], values=[List(elts=[Call(func=Name(id='return_array_from_prompt', ctx=Load()), args=[Constant(value='os specific technologies'), Constant(value='os specific technology'), Constant(value='technologies')], keywords=[])], ctx=Load()), Dict(keys=[Constant(value='process_os_specific_technologies')], values=[Name(id='process_os_technologies', ctx=Load())])])), Assign(targets=[Name(id='COMMANDS_TO_RUN', ctx=Store())], value=Dict(keys=[Constant(value='definitions'), Constant(value='functions')], values=[List(elts=[Call(func=Name(id='return_array_from_prompt', ctx=Load()), args=[Constant(value='commands'), Constant(value='command'), Constant(value='commands')], keywords=[])], ctx=Load()), Dict(keys=[Constant(value='process_commands')], values=[Name(id='run_commands', ctx=Load())])])), Assign(targets=[Name(id='COMMAND_TO_RUN', ctx=Store())], value=Dict(keys=[Constant(value='definitions'), Constant(value='functions')], values=[List(elts=[Dict(keys=[Constant(value='name'), Constant(value='description'), Constant(value='parameters')], values=[Constant(value='command_to_run'), Constant(value='Command that starts the app.'), Call(func=Name(id='command_definition', ctx=Load()), args=[Constant(value="Command that starts the app. If app can't be started for some reason, return command as empty string ''.")], keywords=[])])], ctx=Load()), Dict(keys=[Constant(value='process_commands')], values=[Name(id='run_commands', ctx=Load())])])), Assign(targets=[Name(id='DEV_TASKS_BREAKDOWN', ctx=Store())], value=Dict(keys=[Constant(value='definitions'), Constant(value='functions')], values=[List(elts=[Dict(keys=[Constant(value='name'), Constant(value='description'), Constant(value='parameters')], values=[Constant(value='break_down_development_task'), Constant(value='Breaks down the development task into smaller steps that need to be done to implement the entire task.'), Dict(keys=[Constant(value='type'), Constant(value='properties'), Constant(value='required')], values=[Constant(value='object'), Dict(keys=[Constant(value='tasks')], values=[Dict(keys=[Constant(value='type'), Constant(value='description'), Constant(value='items')], values=[Constant(value='array'), Constant(value='List of smaller development steps that need to be done to complete the entire task.'), Dict(keys=[Constant(value='type'), Constant(value='description'), Constant(value='properties'), Constant(value='required')], values=[Constant(value='object'), Constant(value="A smaller development step that needs to be done to complete the entire task.  Remember, if you need to run a command that doesn't finish by itself (eg. a command to run an app), put the timeout to 3000 milliseconds. If you need to create a directory that doesn't exist and is not the root project directory, always create it by running a command `mkdir`"), Dict(keys=[Constant(value='type'), Constant(value='command'), Constant(value='code_change_description'), Constant(value='human_intervention_description')], values=[Dict(keys=[Constant(value='type'), Constant(value='enum'), Constant(value='description')], values=[Constant(value='string'), List(elts=[Constant(value='command'), Constant(value='code_change'), Constant(value='human_intervention')], ctx=Load()), Constant(value='Type of the development step that needs to be done to complete the entire task.')]), Call(func=Name(id='command_definition', ctx=Load()), args=[Constant(value='A single command that needs to be executed.'), Constant(value='Timeout in milliseconds that represent the approximate time the command takes to finish. This should be used only if the task is of a type "command". If you need to run a command that doesn\'t finish by itself (eg. a command to run an app), put the timeout to 3000 milliseconds. Remember, this is not in seconds but in milliseconds so likely it always needs to be greater than 1000.')], keywords=[]), Dict(keys=[Constant(value='type'), Constant(value='description')], values=[Constant(value='string'), Constant(value='Description of a the development step that needs to be done. This should be used only if the task is of a type "code_change" and it should thoroughly describe what needs to be done to implement the code change for a single file - it cannot include changes for multiple files.')]), Dict(keys=[Constant(value='type'), Constant(value='description')], values=[Constant(value='string'), Constant(value='Description of a task that requires a human to do.')])]), List(elts=[Constant(value='type')], ctx=Load())])])]), List(elts=[Constant(value='tasks')], ctx=Load())])])], ctx=Load()), Dict(keys=[Constant(value='break_down_development_task')], values=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='tasks')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Name(id='tasks', ctx=Load()))])])), Assign(targets=[Name(id='IMPLEMENT_TASK', ctx=Store())], value=Dict(keys=[Constant(value='definitions'), Constant(value='functions')], values=[List(elts=[Dict(keys=[Constant(value='name'), Constant(value='description'), Constant(value='parameters')], values=[Constant(value='parse_development_task'), Constant(value='Breaks down the development task into smaller steps that need to be done to implement the entire task.'), Dict(keys=[Constant(value='type'), Constant(value='properties'), Constant(value='required')], values=[Constant(value='object'), Dict(keys=[Constant(value='tasks')], values=[Dict(keys=[Constant(value='type'), Constant(value='description'), Constant(value='items')], values=[Constant(value='array'), Constant(value='List of smaller development steps that need to be done to complete the entire task.'), Dict(keys=[Constant(value='type'), Constant(value='description'), Constant(value='properties'), Constant(value='required')], values=[Constant(value='object'), Constant(value="A smaller development step that needs to be done to complete the entire task.  Remember, if you need to run a command that doesn't finish by itself (eg. a command to run an  If you need to create a directory that doesn't exist and is not the root project directory, always create it by running a command `mkdir`"), Dict(keys=[Constant(value='type'), Constant(value='command'), Constant(value='code_change'), Constant(value='human_intervention_description')], values=[Dict(keys=[Constant(value='type'), Constant(value='enum'), Constant(value='description')], values=[Constant(value='string'), List(elts=[Constant(value='command'), Constant(value='code_change'), Constant(value='human_intervention')], ctx=Load()), Constant(value='Type of the development step that needs to be done to complete the entire task.')]), Call(func=Name(id='command_definition', ctx=Load()), args=[], keywords=[]), Dict(keys=[Constant(value='type'), Constant(value='description'), Constant(value='properties'), Constant(value='required')], values=[Constant(value='object'), Constant(value='A code change that needs to be implemented. This should be used only if the task is of a type "code_change".'), Dict(keys=[Constant(value='name'), Constant(value='path'), Constant(value='content')], values=[Dict(keys=[Constant(value='type'), Constant(value='description')], values=[Constant(value='string'), Constant(value='Name of the file that needs to be implemented.')]), Dict(keys=[Constant(value='type'), Constant(value='description')], values=[Constant(value='string'), Constant(value='Full path of the file with the file name that needs to be implemented.')]), Dict(keys=[Constant(value='type'), Constant(value='description')], values=[Constant(value='string'), Constant(value='Full content of the file that needs to be implemented. **IMPORTANT**When you want to add a comment that tells the user to add the previous implementation at that place, make sure that the comment starts with `[OLD CODE]` and add a description of what old code should be inserted here. For example, `[OLD CODE] Login route`.')])]), List(elts=[Constant(value='name'), Constant(value='path'), Constant(value='content')], ctx=Load())]), Dict(keys=[Constant(value='type'), Constant(value='description')], values=[Constant(value='string'), Constant(value='Description of a step in debugging this issue when there is a human intervention needed. This should be used only if the task is of a type "human_intervention".')])]), List(elts=[Constant(value='type')], ctx=Load())])])]), List(elts=[Constant(value='tasks')], ctx=Load())])])], ctx=Load()), Dict(keys=[Constant(value='parse_development_task')], values=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='tasks')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Name(id='tasks', ctx=Load()))])])), Assign(targets=[Name(id='DEV_STEPS', ctx=Store())], value=Dict(keys=[Constant(value='definitions'), Constant(value='functions')], values=[List(elts=[Dict(keys=[Constant(value='name'), Constant(value='description'), Constant(value='parameters')], values=[Constant(value='break_down_development_task'), Constant(value='Breaks down the development task into smaller steps that need to be done to implement the entire task.'), Dict(keys=[Constant(value='type'), Constant(value='properties'), Constant(value='required')], values=[Constant(value='object'), Dict(keys=[Constant(value='tasks')], values=[Dict(keys=[Constant(value='type'), Constant(value='description'), Constant(value='items')], values=[Constant(value='array'), Constant(value='List of development steps that need to be done to complete the entire task.'), Dict(keys=[Constant(value='type'), Constant(value='description'), Constant(value='properties'), Constant(value='required')], values=[Constant(value='object'), Constant(value='Development step that needs to be done to complete the entire task.'), Dict(keys=[Constant(value='type'), Constant(value='description')], values=[Dict(keys=[Constant(value='type'), Constant(value='description')], values=[Constant(value='string'), Constant(value='Type of the development step that needs to be done to complete the entire task - it can be "command" or "code_change".')]), Dict(keys=[Constant(value='type'), Constant(value='description')], values=[Constant(value='string'), Constant(value='Description of the development step that needs to be done.')])]), List(elts=[Constant(value='type'), Constant(value='description')], ctx=Load())])])]), List(elts=[Constant(value='tasks')], ctx=Load())])]), Dict(keys=[Constant(value='name'), Constant(value='description'), Constant(value='parameters')], values=[Constant(value='run_commands'), Constant(value='Run all commands in the given list. Each command needs to be a single command that can be executed.'), Dict(keys=[Constant(value='type'), Constant(value='properties'), Constant(value='required')], values=[Constant(value='object'), Dict(keys=[Constant(value='commands')], values=[Dict(keys=[Constant(value='type'), Constant(value='description'), Constant(value='items')], values=[Constant(value='array'), Constant(value='List of commands that need to be run to complete the currrent task. Each command cannot be anything other than a single CLI command that can be independetly run.'), Dict(keys=[Constant(value='type'), Constant(value='description')], values=[Constant(value='string'), Constant(value='A single command that needs to be run to complete the current task.')])])]), List(elts=[Constant(value='commands')], ctx=Load())])]), Dict(keys=[Constant(value='name'), Constant(value='description'), Constant(value='parameters')], values=[Constant(value='process_code_changes'), Constant(value='Implements all the code changes outlined in the description.'), Dict(keys=[Constant(value='type'), Constant(value='properties'), Constant(value='required')], values=[Constant(value='object'), Dict(keys=[Constant(value='code_change_description')], values=[Dict(keys=[Constant(value='type'), Constant(value='description')], values=[Constant(value='string'), Constant(value='A detailed description of what needs to be done to implement all the code changes from the task.')])]), List(elts=[Constant(value='code_change_description')], ctx=Load())])]), Dict(keys=[Constant(value='name'), Constant(value='description'), Constant(value='parameters')], values=[Constant(value='get_files'), Constant(value='Returns development files that are currently implemented so that they can be analized and so that changes can be appropriatelly made.'), Dict(keys=[Constant(value='type'), Constant(value='properties'), Constant(value='required')], values=[Constant(value='object'), Dict(keys=[Constant(value='files')], values=[Dict(keys=[Constant(value='type'), Constant(value='description'), Constant(value='items')], values=[Constant(value='array'), Constant(value='List of files that need to be analyzed to implement the required changes.'), Dict(keys=[Constant(value='type'), Constant(value='description')], values=[Constant(value='string'), Constant(value='A single file name that needs to be analized to implement the reqired changes. Remember, this is a file name with path relative to the project root. For example, if a file path is `{{project_root}}/models/model.py`, this value needs to be `models/model.py`.')])])]), List(elts=[Constant(value='files')], ctx=Load())])])], ctx=Load()), Dict(keys=[Constant(value='break_down_development_task'), Constant(value='run_commands'), Constant(value='process_code_changes'), Constant(value='get_files')], values=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='tasks')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Tuple(elts=[Name(id='tasks', ctx=Load()), Constant(value='more_tasks')], ctx=Load())), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='commands')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Tuple(elts=[Name(id='commands', ctx=Load()), Constant(value='run_commands')], ctx=Load())), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='code_change_description')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Tuple(elts=[Name(id='code_change_description', ctx=Load()), Constant(value='code_changes')], ctx=Load())), Name(id='return_files', ctx=Load())])])), Assign(targets=[Name(id='CODE_CHANGES', ctx=Store())], value=Dict(keys=[Constant(value='definitions'), Constant(value='functions')], values=[List(elts=[Dict(keys=[Constant(value='name'), Constant(value='description'), Constant(value='parameters')], values=[Constant(value='break_down_development_task'), Constant(value='Implements all the smaller tasks that need to be done to complete the entire development task.'), Dict(keys=[Constant(value='type'), Constant(value='properties'), Constant(value='required')], values=[Constant(value='object'), Dict(keys=[Constant(value='tasks')], values=[Dict(keys=[Constant(value='type'), Constant(value='description'), Constant(value='items')], values=[Constant(value='array'), Constant(value='List of smaller development steps that need to be done to complete the entire task.'), Dict(keys=[Constant(value='type'), Constant(value='description'), Constant(value='properties'), Constant(value='required')], values=[Constant(value='object'), Constant(value="A smaller development step that needs to be done to complete the entire task.  Remember, if you need to run a command that doesn't finish by itself (eg. a command to run an app), put the timeout to 3000 milliseconds. If you need to create a directory that doesn't exist and is not the root project directory, always create it by running a command `mkdir`"), Dict(keys=[Constant(value='type'), Constant(value='command'), Constant(value='code_change_description')], values=[Dict(keys=[Constant(value='type'), Constant(value='enum'), Constant(value='description')], values=[Constant(value='string'), List(elts=[Constant(value='command'), Constant(value='code_change')], ctx=Load()), Constant(value='Type of the development step that needs to be done to complete the entire task.')]), Call(func=Name(id='command_definition', ctx=Load()), args=[Constant(value='Command that needs to be run to complete the current task. This should be used only if the task is of a type "command".'), Constant(value='Timeout in milliseconds that represent the approximate time the command takes to finish. This should be used only if the task is of a type "command". If you need to run a command that doesn\'t finish by itself (eg. a command to run an app), put the timeout to 3000 milliseconds. Remember, this is not in seconds but in milliseconds so likely it always needs to be greater than 1000.')], keywords=[]), Dict(keys=[Constant(value='type'), Constant(value='description')], values=[Constant(value='string'), Constant(value='Description of a the development step that needs to be done. This should be used only if the task is of a type "code_change" and it should thoroughly describe what needs to be done to implement the code change.')])]), List(elts=[Constant(value='type')], ctx=Load())])])]), List(elts=[Constant(value='tasks')], ctx=Load())])])], ctx=Load()), Dict(keys=[Constant(value='break_down_development_task')], values=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='tasks')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Name(id='tasks', ctx=Load()))])])), Assign(targets=[Name(id='DEVELOPMENT_PLAN', ctx=Store())], value=Dict(keys=[Constant(value='definitions'), Constant(value='functions')], values=[List(elts=[Dict(keys=[Constant(value='name'), Constant(value='description'), Constant(value='parameters')], values=[Constant(value='implement_development_plan'), Constant(value='Implements the development plan.'), Dict(keys=[Constant(value='type'), Constant(value='properties'), Constant(value='required')], values=[Constant(value='object'), Dict(keys=[Constant(value='plan')], values=[Dict(keys=[Constant(value='type'), Constant(value='description'), Constant(value='items')], values=[Constant(value='array'), Constant(value='List of development tasks that need to be done to implement the entire plan.'), Dict(keys=[Constant(value='type'), Constant(value='description'), Constant(value='properties'), Constant(value='required')], values=[Constant(value='object'), Constant(value='Development task that needs to be done to implement the entire plan.'), Dict(keys=[Constant(value='description'), Constant(value='programmatic_goal'), Constant(value='user_review_goal')], values=[Dict(keys=[Constant(value='type'), Constant(value='description')], values=[Constant(value='string'), Constant(value='Description of the development task that needs to be done to implement the entire plan.')]), Dict(keys=[Constant(value='type'), Constant(value='description')], values=[Constant(value='string'), Constant(value='Detailed description of programmatic goal. Programmatic goal that will determine if a task can be marked as done from a programmatic perspective (this will result in an automated test that is run before the task is sent to you for a review). All details previously specified by user that are important for this task must be included in this programmatic goal.')]), Dict(keys=[Constant(value='type'), Constant(value='description')], values=[Constant(value='string'), Constant(value='User review goal that will determine if a task is done or not, but from a user perspective since it will be reviewed by a human.')])]), List(elts=[Constant(value='description'), Constant(value='programmatic_goal'), Constant(value='user_review_goal')], ctx=Load())])])]), List(elts=[Constant(value='plan')], ctx=Load())])])], ctx=Load()), Dict(keys=[Constant(value='implement_development_plan')], values=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='plan')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Name(id='plan', ctx=Load()))])])), Assign(targets=[Name(id='EXECUTE_COMMANDS', ctx=Store())], value=Dict(keys=[Constant(value='definitions'), Constant(value='functions')], values=[List(elts=[Dict(keys=[Constant(value='name'), Constant(value='description'), Constant(value='parameters')], values=[Constant(value='execute_commands'), Constant(value='Executes a list of commands. '), Dict(keys=[Constant(value='type'), Constant(value='properties'), Constant(value='required')], values=[Constant(value='object'), Dict(keys=[Constant(value='commands')], values=[Dict(keys=[Constant(value='type'), Constant(value='description'), Constant(value='items')], values=[Constant(value='array'), Constant(value="List of commands that need to be executed.  Remember, if you need to run a command that doesn't finish by itself (eg. a command to run an app), put the timeout to 3000 milliseconds. If you need to create a directory that doesn't exist and is not the root project directory, always create it by running a command `mkdir`"), Call(func=Name(id='command_definition', ctx=Load()), args=[Constant(value='A single command that needs to be executed.'), Constant(value="Timeout in milliseconds that represent the approximate time this command takes to finish. If you need to run a command that doesn't finish by itself (eg. a command to run an app), put the timeout to 3000 milliseconds.")], keywords=[])])]), List(elts=[Constant(value='commands')], ctx=Load())])])], ctx=Load()), Dict(keys=[Constant(value='execute_commands')], values=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='commands')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Name(id='commands', ctx=Load()))])])), Assign(targets=[Name(id='GET_FILES', ctx=Store())], value=Dict(keys=[Constant(value='definitions'), Constant(value='functions')], values=[List(elts=[Dict(keys=[Constant(value='name'), Constant(value='description'), Constant(value='parameters')], values=[Constant(value='get_files'), Constant(value='Returns development files that are currently implemented so that they can be analized and so that changes can be appropriatelly made.'), Dict(keys=[Constant(value='type'), Constant(value='properties'), Constant(value='required')], values=[Constant(value='object'), Dict(keys=[Constant(value='files')], values=[Dict(keys=[Constant(value='type'), Constant(value='description'), Constant(value='items')], values=[Constant(value='array'), Constant(value='List of files that need to be analized to implement the reqired changes. Any file name in this array MUST be from the directory tree listed in the previous message.'), Dict(keys=[Constant(value='type'), Constant(value='description')], values=[Constant(value='string'), Constant(value='A single file name that needs to be analized to implement the reqired changes. Remember, this is a file name with path relative to the project root. For example, if a file path is `{{project_root}}/models/model.py`, this value needs to be `models/model.py`. This file name MUST be listed in the directory from the previous message.')])])]), List(elts=[Constant(value='files')], ctx=Load())])])], ctx=Load()), Dict(keys=[Constant(value='get_files')], values=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='files')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Name(id='files', ctx=Load()))])])), Assign(targets=[Name(id='IMPLEMENT_CHANGES', ctx=Store())], value=Dict(keys=[Constant(value='definitions'), Constant(value='functions'), Constant(value='to_message')], values=[List(elts=[Dict(keys=[Constant(value='name'), Constant(value='description'), Constant(value='parameters')], values=[Constant(value='save_files'), Constant(value='Iterates over the files passed to this function and saves them on the disk.'), Dict(keys=[Constant(value='type'), Constant(value='properties'), Constant(value='required')], values=[Constant(value='object'), Dict(keys=[Constant(value='files')], values=[Dict(keys=[Constant(value='type'), Constant(value='description'), Constant(value='items')], values=[Constant(value='array'), Constant(value='List of files that need to be saved.'), Dict(keys=[Constant(value='type'), Constant(value='properties'), Constant(value='required')], values=[Constant(value='object'), Dict(keys=[Constant(value='name'), Constant(value='path'), Constant(value='content'), Constant(value='description')], values=[Dict(keys=[Constant(value='type'), Constant(value='description')], values=[Constant(value='string'), Constant(value='Name of the file that needs to be saved on the disk.')]), Dict(keys=[Constant(value='type'), Constant(value='description')], values=[Constant(value='string'), Constant(value='Full path of the file with the file name that needs to be saved.')]), Dict(keys=[Constant(value='type'), Constant(value='description')], values=[Constant(value='string'), Constant(value='Full content of the file that needs to be saved on the disk. **IMPORTANT**When you want to add a comment that tells the user to add the previous implementation at that place, make sure that the comment starts with `[OLD CODE]` and add a description of what old code should be inserted here. For example, `[OLD CODE] Login route`.')]), Dict(keys=[Constant(value='type'), Constant(value='description')], values=[Constant(value='string'), Constant(value="Description of the file that needs to be saved on the disk. This description doesn't need to explain what is being done currently in this task but rather what is the idea behind this file - what do we want to put in this file in the future. Write the description ONLY if this is the first time this file is being saved. If this file already exists on the disk, leave this field empty.")])]), List(elts=[Constant(value='name'), Constant(value='path'), Constant(value='content')], ctx=Load())])])]), List(elts=[Constant(value='files')], ctx=Load())])])], ctx=Load()), Dict(keys=[Constant(value='save_files')], values=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='files')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Name(id='files', ctx=Load()))]), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='files')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=ListComp(elt=JoinedStr(values=[Constant(value='File `'), FormattedValue(value=Subscript(value=Name(id='file', ctx=Load()), slice=Constant(value='name'), ctx=Load()), conversion=-1), Constant(value='` saved to the disk and currently looks like this:\n```\n'), FormattedValue(value=Subscript(value=Name(id='file', ctx=Load()), slice=Constant(value='content'), ctx=Load()), conversion=-1), Constant(value='\n```')]), generators=[comprehension(target=Name(id='file', ctx=Store()), iter=Name(id='files', ctx=Load()), ifs=[], is_async=0)]))])), Assign(targets=[Name(id='GET_TEST_TYPE', ctx=Store())], value=Dict(keys=[Constant(value='definitions'), Constant(value='functions')], values=[List(elts=[Dict(keys=[Constant(value='name'), Constant(value='description'), Constant(value='parameters')], values=[Constant(value='test_changes'), Constant(value='Tests the changes based on the test type.'), Dict(keys=[Constant(value='type'), Constant(value='properties'), Constant(value='required')], values=[Constant(value='object'), Dict(keys=[Constant(value='type'), Constant(value='command'), Constant(value='manual_test_description')], values=[Dict(keys=[Constant(value='type'), Constant(value='description'), Constant(value='enum')], values=[Constant(value='string'), Constant(value="Type of a test that needs to be run. If this is just an intermediate step in getting a task done, put `no_test` as the type and we'll just go onto the next task without testing."), List(elts=[Constant(value='command_test'), Constant(value='manual_test'), Constant(value='no_test')], ctx=Load())]), Call(func=Name(id='command_definition', ctx=Load()), args=[Constant(value='Command that needs to be run to test the changes.'), Constant(value="Timeout in milliseconds that represent the approximate time this command takes to finish. If you need to run a command that doesn't finish by itself (eg. a command to run an app), put the timeout to 3000 milliseconds. If you need to create a directory that doesn't exist and is not the root project directory, always create it by running a command `mkdir`")], keywords=[]), Dict(keys=[Constant(value='type'), Constant(value='description')], values=[Constant(value='string'), Constant(value='Description of a manual test that needs to be run to test the changes. This should be used only if the test type is "manual_test".')])]), List(elts=[Constant(value='type')], ctx=Load())])])], ctx=Load()), Dict(keys=[Constant(value='test_changes')], values=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='type'), arg(arg='command'), arg(arg='automated_test_description'), arg(arg='manual_test_description')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=Tuple(elts=[Name(id='type', ctx=Load()), Name(id='command', ctx=Load()), Name(id='automated_test_description', ctx=Load()), Name(id='manual_test_description', ctx=Load())], ctx=Load()))])])), Assign(targets=[Name(id='DEBUG_STEPS_BREAKDOWN', ctx=Store())], value=Dict(keys=[Constant(value='definitions'), Constant(value='functions')], values=[List(elts=[Dict(keys=[Constant(value='name'), Constant(value='description'), Constant(value='parameters')], values=[Constant(value='start_debugging'), Constant(value='Starts the debugging process based on the list of steps that need to be done to debug the problem.'), Dict(keys=[Constant(value='type'), Constant(value='properties'), Constant(value='required')], values=[Constant(value='object'), Dict(keys=[Constant(value='thoughts'), Constant(value='reasoning'), Constant(value='steps')], values=[Dict(keys=[Constant(value='type'), Constant(value='description')], values=[Constant(value='string'), Constant(value='Thoughts that you have about the problem that you are trying to debug.')]), Dict(keys=[Constant(value='type')], values=[Constant(value='string')]), Dict(keys=[Constant(value='type'), Constant(value='description'), Constant(value='items')], values=[Constant(value='array'), Constant(value='List of steps that need to be done to debug the problem.'), Dict(keys=[Constant(value='type'), Constant(value='description'), Constant(value='properties'), Constant(value='required')], values=[Constant(value='object'), Constant(value="A single step that needs to be done to get closer to debugging this issue.  Remember, if you need to run a command that doesn't finish by itself (eg. a command to run an app), put the timeout to 3000 milliseconds. If you need to create a directory that doesn't exist and is not the root project directory, always create it by running a command `mkdir`"), Dict(keys=[Constant(value='type'), Constant(value='command'), Constant(value='code_change_description'), Constant(value='human_intervention_description'), Constant(value='need_to_see_output'), Constant(value='check_if_fixed')], values=[Dict(keys=[Constant(value='type'), Constant(value='enum'), Constant(value='description')], values=[Constant(value='string'), List(elts=[Constant(value='command'), Constant(value='code_change'), Constant(value='human_intervention')], ctx=Load()), Constant(value='Type of the step that needs to be done to debug this issue.')]), Call(func=Name(id='command_definition', ctx=Load()), args=[Constant(value='Command that needs to be run to debug this issue.'), Constant(value="Timeout in milliseconds that represent the approximate time this command takes to finish. If you need to run a command that doesn't finish by itself (eg. a command to run an app), put the timeout to 3000 milliseconds.")], keywords=[]), Dict(keys=[Constant(value='type'), Constant(value='description')], values=[Constant(value='string'), Constant(value='Description of a step in debugging this issue when there are code changes required. This should be used only if the task is of a type "code_change" and it should thoroughly describe what needs to be done to implement the code change for a single file - it cannot include changes for multiple files.')]), Dict(keys=[Constant(value='type'), Constant(value='description')], values=[Constant(value='string'), Constant(value='Description of a step in debugging this issue when there is a human intervention needed. This should be used only if the task is of a type "human_intervention".')]), Dict(keys=[Constant(value='type'), Constant(value='description')], values=[Constant(value='boolean'), Constant(value='Set to `true` if the definition of subsequent steps may need to change after you see the output of a successful execution of this step. For example, if the purpose of a command is to check the status of a service or contents of a file before deciding how to proceed then this flag should be set to `true`. If subsequent steps can be executed as long as this step is successful, then this flag does not need to be set.')]), Dict(keys=[Constant(value='type'), Constant(value='description')], values=[Constant(value='boolean'), Constant(value="Flag that indicates if the original command that triggered the error that's being debugged should be tried after this step to check if the error is fixed. If you think that the original command `delete node_modules/ && delete package-lock.json` will pass after this step, then this flag should be set to TRUE and if you think that the original command will still fail after this step, then this flag should be set to `false`.")])]), List(elts=[Constant(value='type'), Constant(value='check_if_fixed')], ctx=Load())])])]), List(elts=[Constant(value='thoughts'), Constant(value='reasoning'), Constant(value='steps')], ctx=Load())])])], ctx=Load()), Dict(keys=[Constant(value='start_debugging')], values=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='steps')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Name(id='steps', ctx=Load()))])])), Assign(targets=[Name(id='GET_MISSING_SNIPPETS', ctx=Store())], value=Dict(keys=[Constant(value='definitions')], values=[List(elts=[Dict(keys=[Constant(value='name'), Constant(value='description'), Constant(value='parameters')], values=[Constant(value='get_missing_snippets'), Constant(value='Gets the list of snippets that are missing from the code.'), Dict(keys=[Constant(value='type'), Constant(value='properties'), Constant(value='required')], values=[Constant(value='object'), Dict(keys=[Constant(value='snippets')], values=[Dict(keys=[Constant(value='type'), Constant(value='description'), Constant(value='items')], values=[Constant(value='array'), Constant(value='List of snippets that are missing from the code.'), Dict(keys=[Constant(value='type'), Constant(value='properties'), Constant(value='required')], values=[Constant(value='object'), Dict(keys=[Constant(value='comment_label'), Constant(value='snippet'), Constant(value='file_path')], values=[Dict(keys=[Constant(value='type'), Constant(value='description')], values=[Constant(value='string'), Constant(value='Comment label that identifies the snippet that needs to be inserted.')]), Dict(keys=[Constant(value='type'), Constant(value='description')], values=[Constant(value='string'), Constant(value='The code from earlier in this conversation that needs to be inserted instead of the comment. **IMPORTANT** You always need to write the entire snippet, and under no circumstances should you ever leave any part of the code snippet unwritten. **IMPORTANT** Every single line of code that exists in the place where the comment lives right now should be replaced. **IMPORTANT** Do not include any code that is above or below the comment but only the code that should be in the position of the comment. **IMPORTANT** Make sure that you write the entire snippet that should be inserted in the place of the comment_label, including all control structures, error handling, and any other relevant logic that was in the original code.')]), Dict(keys=[Constant(value='type'), Constant(value='description')], values=[Constant(value='string'), Constant(value='Path to the file where the snippet needs to be inserted.')])]), List(elts=[Constant(value='comment_label'), Constant(value='snippet'), Constant(value='file_path')], ctx=Load())])])]), List(elts=[Constant(value='snippets')], ctx=Load())])])], ctx=Load())])), Assign(targets=[Name(id='GET_FULLY_CODED_FILE', ctx=Store())], value=Dict(keys=[Constant(value='definitions'), Constant(value='functions')], values=[List(elts=[Dict(keys=[Constant(value='name'), Constant(value='description'), Constant(value='parameters')], values=[Constant(value='get_fully_coded_file'), Constant(value='Gets the fully coded file.'), Dict(keys=[Constant(value='type'), Constant(value='properties'), Constant(value='required')], values=[Constant(value='object'), Dict(keys=[Constant(value='file_content')], values=[Dict(keys=[Constant(value='type'), Constant(value='description')], values=[Constant(value='string'), Constant(value='Fully coded file. This contains only the lines of code and no other text.')])]), List(elts=[Constant(value='file_content')], ctx=Load())])])], ctx=Load()), Dict(keys=[Constant(value='get_fully_coded_file')], values=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='file')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Name(id='file', ctx=Load()))])])), Assign(targets=[Name(id='GET_DOCUMENTATION_FILE', ctx=Store())], value=Dict(keys=[Constant(value='definitions')], values=[List(elts=[Dict(keys=[Constant(value='name'), Constant(value='description'), Constant(value='parameters')], values=[Constant(value='get_documentation_file'), Constant(value='Gets the full content of requested documentation file.'), Dict(keys=[Constant(value='type'), Constant(value='properties'), Constant(value='required')], values=[Constant(value='object'), Dict(keys=[Constant(value='name'), Constant(value='path'), Constant(value='content')], values=[Dict(keys=[Constant(value='type'), Constant(value='description')], values=[Constant(value='string'), Constant(value='Name of the documentation file that needs to be saved on the disk.')]), Dict(keys=[Constant(value='type'), Constant(value='description')], values=[Constant(value='string'), Constant(value='Relative path of the documentation file with the file name that needs to be saved.')]), Dict(keys=[Constant(value='type'), Constant(value='description')], values=[Constant(value='string'), Constant(value='Full content of the documentation file that needs to be saved on the disk. **IMPORTANT**When you want to add a comment that tells the user to add the previous implementation at that place, make sure that the comment starts with `[OLD CODE]` and add a description of what old code should be inserted here. For example, `[OLD CODE] Login route`.')])]), List(elts=[Constant(value='name'), Constant(value='path'), Constant(value='content')], ctx=Load())])])], ctx=Load())]))], type_ignores=[])