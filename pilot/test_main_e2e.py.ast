Module(body=[Import(names=[alias(name='builtins')]), Import(names=[alias(name='pytest')]), ImportFrom(module='unittest.mock', names=[alias(name='patch')], level=0), ImportFrom(module='dotenv', names=[alias(name='load_dotenv')], level=0), Expr(value=Call(func=Name(id='load_dotenv', ctx=Load()), args=[], keywords=[])), ImportFrom(module='database.database', names=[alias(name='create_tables')], level=0), ImportFrom(module='helpers.Project', names=[alias(name='Project')], level=0), ImportFrom(module='test.mock_questionary', names=[alias(name='MockQuestionary')], level=0), ImportFrom(module='main', names=[alias(name='init'), alias(name='get_custom_print')], level=1), FunctionDef(name='test_init', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='args', ctx=Store())], value=Call(func=Name(id='init', ctx=Load()), args=[], keywords=[])), For(target=Name(id='field', ctx=Store()), iter=List(elts=[Constant(value='app_id'), Constant(value='user_id'), Constant(value='email')], ctx=Load()), body=[Assert(test=Compare(left=Subscript(value=Name(id='args', ctx=Load()), slice=Name(id='field', ctx=Load()), ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]))], orelse=[]), For(target=Name(id='field', ctx=Store()), iter=List(elts=[Constant(value='workspace'), Constant(value='step')], ctx=Load()), body=[Assert(test=Compare(left=Subscript(value=Name(id='args', ctx=Load()), slice=Name(id='field', ctx=Load()), ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]))], orelse=[])], decorator_list=[]), FunctionDef(name='test_end_to_end', args=arguments(posonlyargs=[], args=[arg(arg='endpoint'), arg(arg='model'), arg(arg='monkeypatch')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='monkeypatch', ctx=Load()), attr='setenv', ctx=Load()), args=[Constant(value='ENDPOINT'), Name(id='endpoint', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='monkeypatch', ctx=Load()), attr='setenv', ctx=Load()), args=[Constant(value='MODEL_NAME'), Name(id='model', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='create_tables', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='args', ctx=Store())], value=Call(func=Name(id='init', ctx=Load()), args=[], keywords=[])), Assign(targets=[Tuple(elts=[Attribute(value=Name(id='builtins', ctx=Load()), attr='print', ctx=Store()), Name(id='ipc_client_instance', ctx=Store())], ctx=Store())], value=Call(func=Name(id='get_custom_print', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[])), Assign(targets=[Name(id='project', ctx=Store())], value=Call(func=Name(id='Project', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[])), Assign(targets=[Name(id='mock_questionary', ctx=Store())], value=Call(func=Name(id='MockQuestionary', ctx=Load()), args=[List(elts=[Constant(value='Test App'), Constant(value='A web-based chat app'), Constant(value='Users can send direct messages to each other but with no group chat functionality'), Constant(value='No authentication is required at this stage'), Constant(value='Use your best judgement'), Constant(value='Use your best judgement'), Constant(value='Use your best judgement')], ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='utils.questionary.questionary'), Name(id='mock_questionary', ctx=Load())], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='project', ctx=Load()), attr='start', ctx=Load()), args=[], keywords=[]))])], decorator_list=[Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='slow', ctx=Load()), Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='uses_tokens', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='skip', ctx=Load()), args=[], keywords=[keyword(arg='reason', value=Constant(value='Uses lots of tokens'))]), Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='endpoint, model'), List(elts=[Tuple(elts=[Constant(value='OPENAI'), Constant(value='gpt-4')], ctx=Load()), Tuple(elts=[Constant(value='OPENROUTER'), Constant(value='openai/gpt-3.5-turbo')], ctx=Load()), Tuple(elts=[Constant(value='OPENROUTER'), Constant(value='meta-llama/codellama-34b-instruct')], ctx=Load()), Tuple(elts=[Constant(value='OPENROUTER'), Constant(value='google/palm-2-chat-bison')], ctx=Load()), Tuple(elts=[Constant(value='OPENROUTER'), Constant(value='google/palm-2-codechat-bison')], ctx=Load()), Tuple(elts=[Constant(value='OPENROUTER'), Constant(value='anthropic/claude-2')], ctx=Load())], ctx=Load())], keywords=[])])], type_ignores=[])