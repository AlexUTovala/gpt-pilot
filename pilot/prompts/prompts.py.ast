Module(body=[ImportFrom(module='utils.style', names=[alias(name='color_white_bold')], level=0), ImportFrom(module='const', names=[alias(name='common')], level=0), ImportFrom(module='const.llm', names=[alias(name='MAX_QUESTIONS'), alias(name='END_RESPONSE')], level=0), ImportFrom(module='utils.llm_connection', names=[alias(name='create_gpt_chat_completion')], level=0), ImportFrom(module='utils.utils', names=[alias(name='get_sys_message'), alias(name='get_prompt')], level=0), ImportFrom(module='utils.questionary', names=[alias(name='styled_select'), alias(name='styled_text')], level=0), ImportFrom(module='logger.logger', names=[alias(name='logger')], level=0), FunctionDef(name='ask_for_app_type', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value='App')), Assign(targets=[Name(id='answer', ctx=Store())], value=Call(func=Name(id='styled_select', ctx=Load()), args=[Constant(value='What type of app do you want to build?')], keywords=[keyword(arg='choices', value=Attribute(value=Name(id='common', ctx=Load()), attr='APP_TYPES', ctx=Load()))])), If(test=Compare(left=Name(id='answer', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='Exiting application.')], keywords=[])), Expr(value=Call(func=Name(id='exit', ctx=Load()), args=[Constant(value=0)], keywords=[]))], orelse=[]), While(test=Compare(left=Constant(value='unavailable'), ops=[In()], comparators=[Name(id='answer', ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='Sorry, that option is not available.')], keywords=[])), Assign(targets=[Name(id='answer', ctx=Store())], value=Call(func=Name(id='styled_select', ctx=Load()), args=[Constant(value='What type of app do you want to build?')], keywords=[keyword(arg='choices', value=Attribute(value=Name(id='common', ctx=Load()), attr='APP_TYPES', ctx=Load()))])), If(test=Compare(left=Name(id='answer', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='Exiting application.')], keywords=[])), Expr(value=Call(func=Name(id='exit', ctx=Load()), args=[Constant(value=0)], keywords=[]))], orelse=[])], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[BinOp(left=Constant(value='You chose: '), op=Add(), right=Name(id='answer', ctx=Load()))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[JoinedStr(values=[Constant(value='You chose: '), FormattedValue(value=Name(id='answer', ctx=Load()), conversion=-1)])], keywords=[])), Return(value=Name(id='answer', ctx=Load()))], decorator_list=[]), FunctionDef(name='ask_for_main_app_definition', args=arguments(posonlyargs=[], args=[arg(arg='project')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='question', ctx=Store())], value=Constant(value='Describe your app in as much detail as possible.')), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='question', ctx=Load())], keywords=[keyword(arg='type', value=Constant(value='ipc'))])), Assign(targets=[Name(id='description', ctx=Store())], value=Call(func=Name(id='styled_text', ctx=Load()), args=[Name(id='project', ctx=Load()), Name(id='question', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='description', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='No input provided!')], keywords=[])), Return()], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[JoinedStr(values=[Constant(value='Initial App description done: '), FormattedValue(value=Name(id='description', ctx=Load()), conversion=-1)])], keywords=[])), Return(value=Name(id='description', ctx=Load()))], decorator_list=[]), FunctionDef(name='ask_user', args=arguments(posonlyargs=[], args=[arg(arg='project'), arg(arg='question', annotation=Name(id='str', ctx=Load())), arg(arg='require_some_input'), arg(arg='hint', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[While(test=Constant(value=True), body=[If(test=Compare(left=Name(id='hint', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[BinOp(left=Call(func=Name(id='color_white_bold', ctx=Load()), args=[Name(id='hint', ctx=Load())], keywords=[]), op=Add(), right=Constant(value='\n'))], keywords=[keyword(arg='type', value=Constant(value='hint'))]))], orelse=[]), Assign(targets=[Name(id='answer', ctx=Store())], value=Call(func=Name(id='styled_text', ctx=Load()), args=[Name(id='project', ctx=Load()), Name(id='question', ctx=Load())], keywords=[keyword(arg='hint', value=Name(id='hint', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Q: %s'), Name(id='question', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='A: %s'), Name(id='answer', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='answer', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='Exiting application.')], keywords=[])), Expr(value=Call(func=Name(id='exit', ctx=Load()), args=[Constant(value=0)], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Attribute(value=Name(id='answer', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Constant(value='')]), Name(id='require_some_input', ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='No input provided! Please try again.')], keywords=[])), Continue()], orelse=[Return(value=Name(id='answer', ctx=Load()))])], orelse=[])], decorator_list=[]), FunctionDef(name='get_additional_info_from_openai', args=arguments(posonlyargs=[], args=[arg(arg='project'), arg(arg='messages')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Runs the conversation between Product Owner and LLM.\n    Provides the user\'s initial description, LLM asks the user clarifying questions and user responds.\n    Limited by `MAX_QUESTIONS`, exits when LLM responds "EVERYTHING_CLEAR".\n\n    :param project: Project\n    :param messages: [\n        { "role": "system", "content": "You are a Product Owner..." },\n        { "role": "user", "content": "I want you to create the app {name} that can be described: ```{description}```..." }\n      ]\n    :return: The updated `messages` list with the entire conversation between user and LLM.\n    ')), Assign(targets=[Name(id='is_complete', ctx=Store())], value=Constant(value=False)), While(test=UnaryOp(op=Not(), operand=Name(id='is_complete', ctx=Load())), body=[Assign(targets=[Name(id='response', ctx=Store())], value=Call(func=Name(id='create_gpt_chat_completion', ctx=Load()), args=[Name(id='messages', ctx=Load()), Constant(value='additional_info'), Name(id='project', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='response', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[If(test=BoolOp(op=And(), values=[Subscript(value=Name(id='response', ctx=Load()), slice=Constant(value='text'), ctx=Load()), Compare(left=Call(func=Attribute(value=Subscript(value=Name(id='response', ctx=Load()), slice=Constant(value='text'), ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Name(id='END_RESPONSE', ctx=Load())])]), body=[Break()], orelse=[]), Assign(targets=[Name(id='answer', ctx=Store())], value=Call(func=Name(id='ask_user', ctx=Load()), args=[Name(id='project', ctx=Load()), Subscript(value=Name(id='response', ctx=Load()), slice=Constant(value='text'), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='messages', ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='role'), Constant(value='content')], values=[Constant(value='assistant'), Subscript(value=Name(id='response', ctx=Load()), slice=Constant(value='text'), ctx=Load())])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='messages', ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='role'), Constant(value='content')], values=[Constant(value='user'), Name(id='answer', ctx=Load())])], keywords=[]))], orelse=[Assign(targets=[Name(id='is_complete', ctx=Store())], value=Constant(value=True))])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Getting additional info from openai done')], keywords=[])), Return(value=ListComp(elt=Name(id='msg', ctx=Load()), generators=[comprehension(target=Name(id='msg', ctx=Store()), iter=Name(id='messages', ctx=Load()), ifs=[Compare(left=Subscript(value=Name(id='msg', ctx=Load()), slice=Constant(value='role'), ctx=Load()), ops=[NotEq()], comparators=[Constant(value='system')])], is_async=0)]))], decorator_list=[]), FunctionDef(name='generate_messages_from_description', args=arguments(posonlyargs=[], args=[arg(arg='description'), arg(arg='app_type'), arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Called by ProductOwner.get_description().\n    :param description: "I want to build a cool app that will make me rich"\n    :param app_type: \'Web App\', \'Script\', \'Mobile App\', \'Chrome Extension\' etc\n    :param name: Project name\n    :return: [\n        { "role": "system", "content": "You are a Product Owner..." },\n        { "role": "user", "content": "I want you to create the app {name} that can be described: ```{description}```..." }\n      ]\n    ')), Assign(targets=[Name(id='prompt', ctx=Store())], value=Call(func=Name(id='get_prompt', ctx=Load()), args=[Constant(value='high_level_questions/specs.prompt'), Dict(keys=[Constant(value='name'), Constant(value='prompt'), Constant(value='app_type')], values=[Name(id='name', ctx=Load()), Name(id='description', ctx=Load()), Name(id='app_type', ctx=Load())])], keywords=[])), Assign(targets=[Name(id='specs_instructions', ctx=Store())], value=Call(func=Name(id='get_prompt', ctx=Load()), args=[Constant(value='high_level_questions/specs_instruction.prompt'), Dict(keys=[Constant(value='name'), Constant(value='app_type'), Constant(value='MAX_QUESTIONS')], values=[Name(id='name', ctx=Load()), Name(id='app_type', ctx=Load()), Name(id='MAX_QUESTIONS', ctx=Load())])], keywords=[])), Return(value=List(elts=[Call(func=Name(id='get_sys_message', ctx=Load()), args=[Constant(value='product_owner')], keywords=[]), Dict(keys=[Constant(value='role'), Constant(value='content')], values=[Constant(value='user'), Name(id='prompt', ctx=Load())]), Dict(keys=[Constant(value='role'), Constant(value='content')], values=[Constant(value='system'), Name(id='specs_instructions', ctx=Load())])], ctx=Load()))], decorator_list=[]), FunctionDef(name='generate_messages_from_custom_conversation', args=arguments(posonlyargs=[], args=[arg(arg='role'), arg(arg='messages'), arg(arg='start_role')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='user')]), body=[Expr(value=Constant(value='\n    :param role: \'product_owner\', \'architect\', \'dev_ops\', \'tech_lead\', \'full_stack_developer\', \'code_monkey\'\n    :param messages: [\n        "I will show you some of your message to which I want you to make some updates. Please just modify your last message per my instructions.",\n        {LLM\'s previous message},\n        {user\'s request for change}\n    ]\n    :param start_role: \'user\'\n    :return: [\n      { "role": "system", "content": "You are a ..., You do ..." },\n      { "role": start_role, "content": messages[i + even] },\n      { "role": "assistant" (or "user" for other start_role), "content": messages[i + odd] },\n      ... ]\n    ')), Assign(targets=[Name(id='system_message', ctx=Store())], value=Call(func=Name(id='get_sys_message', ctx=Load()), args=[Name(id='role', ctx=Load())], keywords=[])), Assign(targets=[Name(id='result', ctx=Store())], value=List(elts=[Name(id='system_message', ctx=Load())], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[JoinedStr(values=[Constant(value='\n>>>>>>>>>> '), FormattedValue(value=Name(id='role', ctx=Load()), conversion=-1), Constant(value=' Prompt >>>>>>>>>>\n%s\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>')]), Subscript(value=Name(id='system_message', ctx=Load()), slice=Constant(value='content'), ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='message', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='messages', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='role'), Constant(value='content')], values=[Name(id='start_role', ctx=Load()), Name(id='message', ctx=Load())])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[JoinedStr(values=[Constant(value='\n>>>>>>>>>> '), FormattedValue(value=Name(id='start_role', ctx=Load()), conversion=-1), Constant(value=' Prompt >>>>>>>>>>\n%s\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>')]), Name(id='message', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='role'), Constant(value='content')], values=[IfExp(test=Compare(left=Name(id='start_role', ctx=Load()), ops=[Eq()], comparators=[Constant(value='user')]), body=Constant(value='assistant'), orelse=Constant(value='user')), Name(id='message', ctx=Load())])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='\n>>>>>>>>>> Assistant Prompt >>>>>>>>>>\n%s\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'), Name(id='message', ctx=Load())], keywords=[]))])], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[])], type_ignores=[])