Module(body=[Import(names=[alias(name='pytest')]), ImportFrom(module='unittest.mock', names=[alias(name='patch')], level=0), ImportFrom(module='helpers.AgentConvo', names=[alias(name='AgentConvo')], level=0), ImportFrom(module='helpers.agents', names=[alias(name='Developer')], level=0), ImportFrom(module='utils', names=[alias(name='create_project')], level=1), ImportFrom(module='helpers.cli', names=[alias(name='terminate_running_processes')], level=0), ImportFrom(module='test.mock_questionary', names=[alias(name='MockQuestionary')], level=0), FunctionDef(name='test_continue_development', args=arguments(posonlyargs=[], args=[arg(arg='mock_4'), arg(arg='mock_3'), arg(arg='mock_2'), arg(arg='mock_1')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='project', ctx=Store())], value=Call(func=Name(id='create_project', ctx=Load()), args=[Constant(value='continue_development'), Constant(value='hello_world_server')], keywords=[])), Assign(targets=[Name(id='developer', ctx=Store())], value=Call(func=Name(id='Developer', ctx=Load()), args=[Name(id='project', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='project', ctx=Load()), attr='developer', ctx=Store())], value=Name(id='developer', ctx=Load())), Assign(targets=[Name(id='convo', ctx=Store())], value=Call(func=Name(id='AgentConvo', ctx=Load()), args=[Name(id='developer', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='convo', ctx=Load()), attr='load_branch', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='last_branch_name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Constant(value=None))), Assign(targets=[Attribute(value=Name(id='developer', ctx=Load()), attr='run_command', ctx=Store())], value=Constant(value='node server.js')), Assign(targets=[Name(id='mock_questionary', ctx=Store())], value=Call(func=Name(id='MockQuestionary', ctx=Load()), args=[List(elts=[Constant(value='r'), Constant(value='continue')], ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='utils.questionary.questionary'), Name(id='mock_questionary', ctx=Load())], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='developer', ctx=Load()), attr='continue_development', ctx=Load()), args=[Name(id='convo', ctx=Load()), Constant(value='branch_name'), Constant(value='The web page should say "Hello, World!"')], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='end of "continue_development" scenario')], keywords=[]))]), Expr(value=Call(func=Name(id='terminate_running_processes', ctx=Load()), args=[], keywords=[]))], decorator_list=[Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='ux_test', ctx=Load()), Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='utils.questionary.get_saved_user_input')], keywords=[]), Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='helpers.cli.get_saved_command_run')], keywords=[]), Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='helpers.AgentConvo.get_saved_development_step')], keywords=[]), Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='helpers.AgentConvo.save_development_step')], keywords=[])])], type_ignores=[])