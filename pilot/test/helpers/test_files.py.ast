Module(body=[Import(names=[alias(name='os')]), ImportFrom(module='pathlib', names=[alias(name='Path')], level=0), ImportFrom(module='tempfile', names=[alias(name='NamedTemporaryFile')], level=0), ImportFrom(module='unittest.mock', names=[alias(name='patch'), alias(name='call')], level=0), Import(names=[alias(name='pytest')]), ImportFrom(module='pilot.helpers.files', names=[alias(name='get_file_contents'), alias(name='get_directory_contents'), alias(name='update_file')], level=0), FunctionDef(name='test_update_file_creates_directories', args=arguments(posonlyargs=[], args=[arg(arg='mock_os'), arg(arg='mock_open')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Test that update_file creates intermediate directories if they don't exist.")), Assign(targets=[Attribute(value=Attribute(value=Name(id='mock_os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load())), Expr(value=Call(func=Name(id='update_file', ctx=Load()), args=[Constant(value='/path/to/file'), Constant(value='content')], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='mock_os', ctx=Load()), attr='makedirs', ctx=Load()), attr='assert_called_once_with', ctx=Load()), args=[Constant(value='/path/to')], keywords=[keyword(arg='exist_ok', value=Constant(value=True))]))], decorator_list=[Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='pilot.helpers.files.open')], keywords=[]), Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='pilot.helpers.files.os')], keywords=[])]), FunctionDef(name='test_update_file_creates_text_file', args=arguments(posonlyargs=[], args=[arg(arg='mock_os'), arg(arg='mock_open')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Test that update_file creates intermediate directories if they don't exist.")), Expr(value=Call(func=Name(id='update_file', ctx=Load()), args=[Constant(value='/path/to/file'), Constant(value='無為')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='mock_open', ctx=Load()), attr='assert_called_once_with', ctx=Load()), args=[Constant(value='/path/to/file'), Constant(value='w')], keywords=[keyword(arg='encoding', value=Constant(value='utf-8'))])), Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Attribute(value=Attribute(value=Name(id='mock_open', ctx=Load()), attr='return_value', ctx=Load()), attr='__enter__', ctx=Load()), attr='return_value', ctx=Load()), attr='write', ctx=Load()), attr='assert_called_once_with', ctx=Load()), args=[Constant(value='無為')], keywords=[]))], decorator_list=[Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='pilot.helpers.files.open')], keywords=[]), Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='pilot.helpers.files.os')], keywords=[])]), FunctionDef(name='test_update_file_creates_binary_file', args=arguments(posonlyargs=[], args=[arg(arg='mock_os'), arg(arg='mock_open')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Test that update_file creates intermediate directories if they don't exist.")), Expr(value=Call(func=Name(id='update_file', ctx=Load()), args=[Constant(value='/path/to/file'), Constant(value=b'\x00\x00\x00')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='mock_open', ctx=Load()), attr='assert_called_once_with', ctx=Load()), args=[Constant(value='/path/to/file'), Constant(value='wb')], keywords=[keyword(arg='encoding', value=Constant(value=None))])), Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Attribute(value=Attribute(value=Name(id='mock_open', ctx=Load()), attr='return_value', ctx=Load()), attr='__enter__', ctx=Load()), attr='return_value', ctx=Load()), attr='write', ctx=Load()), attr='assert_called_once_with', ctx=Load()), args=[Constant(value=b'\x00\x00\x00')], keywords=[]))], decorator_list=[Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='pilot.helpers.files.open')], keywords=[]), Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='pilot.helpers.files.os')], keywords=[])]), FunctionDef(name='test_update_file_with_encoded_content', args=arguments(posonlyargs=[], args=[arg(arg='source'), arg(arg='expected_encoded')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='file', ctx=Store())], value=Call(func=Name(id='NamedTemporaryFile', ctx=Load()), args=[], keywords=[keyword(arg='delete', value=Constant(value=False))])), Expr(value=Call(func=Name(id='update_file', ctx=Load()), args=[Attribute(value=Name(id='file', ctx=Load()), attr='name', ctx=Load()), Name(id='source', ctx=Load())], keywords=[])), Assert(test=Compare(left=Call(func=Attribute(value=Name(id='file', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Name(id='expected_encoded', ctx=Load())])), Expr(value=Call(func=Attribute(value=Name(id='file', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='remove', ctx=Load()), args=[Attribute(value=Name(id='file', ctx=Load()), attr='name', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Tuple(elts=[Constant(value='source'), Constant(value='expected_encoded')], ctx=Load()), List(elts=[Tuple(elts=[Constant(value='file.txt'), Constant(value=b'file.txt')], ctx=Load()), Tuple(elts=[Constant(value='foo.txt - 無為'), Constant(value=b'foo.txt - \xe7\x84\xa1\xe7\x82\xba')], ctx=Load()), Tuple(elts=[Constant(value=b'\xff\xff\xff'), Constant(value=b'\xff\xff\xff')], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_get_file_contents', args=arguments(posonlyargs=[], args=[arg(arg='encoded'), arg(arg='expected')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='file', ctx=Store())], value=Call(func=Name(id='NamedTemporaryFile', ctx=Load()), args=[], keywords=[keyword(arg='delete', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='file', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='encoded', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='file', ctx=Load()), attr='flush', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='file_path', ctx=Store())], value=Call(func=Name(id='Path', ctx=Load()), args=[Attribute(value=Name(id='file', ctx=Load()), attr='name', ctx=Load())], keywords=[])), Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Name(id='get_file_contents', ctx=Load()), args=[Attribute(value=Name(id='file', ctx=Load()), attr='name', ctx=Load()), Attribute(value=Name(id='file_path', ctx=Load()), attr='anchor', ctx=Load())], keywords=[])), Assert(test=Compare(left=Name(id='data', ctx=Load()), ops=[Eq()], comparators=[Dict(keys=[Constant(value='content'), Constant(value='name'), Constant(value='path'), Constant(value='full_path')], values=[Name(id='expected', ctx=Load()), Attribute(value=Name(id='file_path', ctx=Load()), attr='name', ctx=Load()), Call(func=Name(id='str', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='file_path', ctx=Load()), attr='parent', ctx=Load()), attr='relative_to', ctx=Load()), args=[Attribute(value=Name(id='file_path', ctx=Load()), attr='anchor', ctx=Load())], keywords=[])], keywords=[]), Attribute(value=Name(id='file', ctx=Load()), attr='name', ctx=Load())])])), Expr(value=Call(func=Attribute(value=Name(id='file', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='remove', ctx=Load()), args=[Attribute(value=Name(id='file', ctx=Load()), attr='name', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Tuple(elts=[Constant(value='encoded'), Constant(value='expected')], ctx=Load()), List(elts=[Tuple(elts=[Constant(value=b'file.txt'), Constant(value='file.txt')], ctx=Load()), Tuple(elts=[Constant(value=b'foo.txt - \xe7\x84\xa1\xe7\x82\xba'), Constant(value='foo.txt - 無為')], ctx=Load()), Tuple(elts=[Constant(value=b'\xff\xff\xff'), Constant(value=b'\xff\xff\xff')], ctx=Load())], ctx=Load())], keywords=[])]), FunctionDef(name='test_get_directory_contents_mocked', args=arguments(posonlyargs=[], args=[arg(arg='mock_os'), arg(arg='mock_open')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Test that get_directory_contents traverses the directory tree,\n    ignores specified ignore files/folders, and can handle both\n    text and binary files.\n    ')), FunctionDef(name='np', args=arguments(posonlyargs=[], args=[arg(arg='path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='Path', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), Assign(targets=[Attribute(value=Attribute(value=Name(id='mock_os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load())), Assign(targets=[Attribute(value=Attribute(value=Name(id='mock_os', ctx=Load()), attr='path', ctx=Load()), attr='basename', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='basename', ctx=Load())), Assign(targets=[Name(id='mock_walk', ctx=Store())], value=Attribute(value=Name(id='mock_os', ctx=Load()), attr='walk', ctx=Load())), Assign(targets=[Attribute(value=Name(id='mock_walk', ctx=Load()), attr='return_value', ctx=Store())], value=List(elts=[Tuple(elts=[Call(func=Name(id='np', ctx=Load()), args=[Constant(value='/fake/root')], keywords=[]), List(elts=[Constant(value='foo'), Constant(value='to-ignore'), Constant(value='bar')], ctx=Load()), List(elts=[Constant(value='file.txt'), Constant(value='to-ignore.txt')], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='np', ctx=Load()), args=[Constant(value='/fake/root/foo')], keywords=[]), List(elts=[], ctx=Load()), List(elts=[Constant(value='foo.txt')], ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='np', ctx=Load()), args=[Constant(value='/fake/root/bar')], keywords=[]), List(elts=[], ctx=Load()), List(elts=[Constant(value='bar.txt')], ctx=Load())], ctx=Load())], ctx=Load())), Assign(targets=[Attribute(value=Attribute(value=Attribute(value=Name(id='mock_open', ctx=Load()), attr='return_value', ctx=Load()), attr='read', ctx=Load()), attr='side_effect', ctx=Store())], value=List(elts=[Constant(value='file.txt'), Constant(value='foo.txt - 無為'), Call(func=Name(id='UnicodeDecodeError', ctx=Load()), args=[Constant(value='utf-8'), Constant(value=b'\xff\xff\xff'), Constant(value=0), Constant(value=1), Constant(value='invalid start byte')], keywords=[]), Constant(value=b'\xff\xff\xff')], ctx=Load())), Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Name(id='get_directory_contents', ctx=Load()), args=[Call(func=Name(id='np', ctx=Load()), args=[Constant(value='/fake/root')], keywords=[]), List(elts=[Constant(value='to-ignore'), Constant(value='to-ignore.txt')], ctx=Load())], keywords=[])), Assert(test=Compare(left=Name(id='data', ctx=Load()), ops=[Eq()], comparators=[List(elts=[Dict(keys=[Constant(value='content'), Constant(value='full_path'), Constant(value='name'), Constant(value='path')], values=[Constant(value='file.txt'), Call(func=Name(id='np', ctx=Load()), args=[Constant(value='/fake/root/file.txt')], keywords=[]), Constant(value='file.txt'), Constant(value='')]), Dict(keys=[Constant(value='content'), Constant(value='full_path'), Constant(value='name'), Constant(value='path')], values=[Constant(value='foo.txt - 無為'), Call(func=Name(id='np', ctx=Load()), args=[Constant(value='/fake/root/foo/foo.txt')], keywords=[]), Constant(value='foo.txt'), Constant(value='foo')]), Dict(keys=[Constant(value='content'), Constant(value='full_path'), Constant(value='name'), Constant(value='path')], values=[Constant(value=b'\xff\xff\xff'), Call(func=Name(id='np', ctx=Load()), args=[Constant(value='/fake/root/bar/bar.txt')], keywords=[]), Constant(value='bar.txt'), Constant(value='bar')])], ctx=Load())])), Expr(value=Call(func=Attribute(value=Name(id='mock_walk', ctx=Load()), attr='assert_called_once_with', ctx=Load()), args=[Call(func=Name(id='np', ctx=Load()), args=[Constant(value='/fake/root')], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='mock_open', ctx=Load()), attr='assert_has_calls', ctx=Load()), args=[List(elts=[Call(func=Name(id='call', ctx=Load()), args=[Call(func=Name(id='np', ctx=Load()), args=[Constant(value='/fake/root/file.txt')], keywords=[]), Constant(value='r')], keywords=[keyword(arg='encoding', value=Constant(value='utf-8'))]), Call(func=Attribute(value=Call(func=Name(id='call', ctx=Load()), args=[], keywords=[]), attr='read', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='call', ctx=Load()), args=[Call(func=Name(id='np', ctx=Load()), args=[Constant(value='/fake/root/foo/foo.txt')], keywords=[]), Constant(value='r')], keywords=[keyword(arg='encoding', value=Constant(value='utf-8'))]), Call(func=Attribute(value=Call(func=Name(id='call', ctx=Load()), args=[], keywords=[]), attr='read', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='call', ctx=Load()), args=[Call(func=Name(id='np', ctx=Load()), args=[Constant(value='/fake/root/bar/bar.txt')], keywords=[]), Constant(value='r')], keywords=[keyword(arg='encoding', value=Constant(value='utf-8'))]), Call(func=Attribute(value=Call(func=Name(id='call', ctx=Load()), args=[], keywords=[]), attr='read', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='call', ctx=Load()), args=[Call(func=Name(id='np', ctx=Load()), args=[Constant(value='/fake/root/bar/bar.txt')], keywords=[]), Constant(value='rb')], keywords=[]), Call(func=Attribute(value=Call(func=Name(id='call', ctx=Load()), args=[], keywords=[]), attr='read', ctx=Load()), args=[], keywords=[])], ctx=Load())], keywords=[]))], decorator_list=[Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='pilot.helpers.files.open')], keywords=[]), Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='pilot.helpers.files.os')], keywords=[])]), FunctionDef(name='test_get_directory_contents_live', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='files', ctx=Store())], value=Call(func=Name(id='get_directory_contents', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Name(id='__file__', ctx=Load())], keywords=[])], keywords=[]), List(elts=[Constant(value='.pytest_cache'), Constant(value='agents'), Constant(value='__init__.py')], ctx=Load())], keywords=[])), Assign(targets=[Name(id='this_file', ctx=Store())], value=Subscript(value=ListComp(elt=Name(id='f', ctx=Load()), generators=[comprehension(target=Name(id='f', ctx=Store()), iter=Name(id='files', ctx=Load()), ifs=[Compare(left=Subscript(value=Name(id='f', ctx=Load()), slice=Constant(value='name'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='test_files.py')])], is_async=0)]), slice=Constant(value=0), ctx=Load())), Assert(test=Compare(left=Subscript(value=Name(id='this_file', ctx=Load()), slice=Constant(value='path'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='helpers')])), Assert(test=Compare(left=Subscript(value=Name(id='this_file', ctx=Load()), slice=Constant(value='full_path'), ctx=Load()), ops=[Eq()], comparators=[Name(id='__file__', ctx=Load())])), Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Subscript(value=Name(id='this_file', ctx=Load()), slice=Constant(value='content'), ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), Assert(test=Compare(left=Constant(value='test_get_directory_contents_live()'), ops=[In()], comparators=[Subscript(value=Name(id='this_file', ctx=Load()), slice=Constant(value='content'), ctx=Load())])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='FILES'), ListComp(elt=Tuple(elts=[Subscript(value=Name(id='f', ctx=Load()), slice=Constant(value='path'), ctx=Load()), Subscript(value=Name(id='f', ctx=Load()), slice=Constant(value='name'), ctx=Load())], ctx=Load()), generators=[comprehension(target=Name(id='f', ctx=Store()), iter=Name(id='files', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Name(id='pycache_file', ctx=Store())], value=Subscript(value=ListComp(elt=Name(id='f', ctx=Load()), generators=[comprehension(target=Name(id='f', ctx=Store()), iter=Name(id='files', ctx=Load()), ifs=[BoolOp(op=And(), values=[Compare(left=Subscript(value=Name(id='f', ctx=Load()), slice=Constant(value='path'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='helpers')]), Compare(left=Subscript(value=Name(id='f', ctx=Load()), slice=Constant(value='name'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='testlogo.png')])])], is_async=0)]), slice=Constant(value=0), ctx=Load())), Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Subscript(value=Name(id='pycache_file', ctx=Load()), slice=Constant(value='content'), ctx=Load()), Name(id='bytes', ctx=Load())], keywords=[])), Assert(test=Call(func=Name(id='all', ctx=Load()), args=[GeneratorExp(elt=Compare(left=Subscript(value=Name(id='file', ctx=Load()), slice=Constant(value='name'), ctx=Load()), ops=[NotEq()], comparators=[Constant(value='__init__.py')]), generators=[comprehension(target=Name(id='file', ctx=Store()), iter=Name(id='files', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Assert(test=Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=Compare(left=Subscript(value=Name(id='file', ctx=Load()), slice=Constant(value='path'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='database')]), generators=[comprehension(target=Name(id='file', ctx=Store()), iter=Name(id='files', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[])], type_ignores=[])