Module(body=[ImportFrom(module='base64', names=[alias(name='b64decode')], level=0), ImportFrom(module='peewee', names=[alias(name='SqliteDatabase'), alias(name='PostgresqlDatabase')], level=0), Import(names=[alias(name='pytest')]), ImportFrom(module='database.config', names=[alias(name='DATABASE_TYPE'), alias(name='DB_NAME'), alias(name='DB_HOST'), alias(name='DB_PORT'), alias(name='DB_USER'), alias(name='DB_PASSWORD')], level=0), ImportFrom(module='database.database', names=[alias(name='TABLES')], level=0), ImportFrom(module='database.models.user', names=[alias(name='User')], level=0), ImportFrom(module='database.models.app', names=[alias(name='App')], level=0), ImportFrom(module='database.models.file_snapshot', names=[alias(name='FileSnapshot')], level=0), ImportFrom(module='database.models.files', names=[alias(name='File')], level=0), ImportFrom(module='database.models.development_steps', names=[alias(name='DevelopmentSteps')], level=0), Assign(targets=[Name(id='EMPTY_PNG', ctx=Store())], value=Call(func=Name(id='b64decode', ctx=Load()), args=[Constant(value='iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg==')], keywords=[])), FunctionDef(name='database', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Set up a new empty initialized test database.\n\n    In case of SQlite, the database is created in-memory. In case of PostgreSQL,\n    the database should already exist and be empty.\n\n    This fixture will create all the tables and run the test in an isolated transaction.\n    which gets rolled back after the test. The fixture also drops all the tables at the\n    end.\n    ')), If(test=Compare(left=Name(id='DATABASE_TYPE', ctx=Load()), ops=[Eq()], comparators=[Constant(value='postgres')]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='DB_NAME', ctx=Load())), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='PostgreSQL database name (DB_NAME) environment variable not set')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='db', ctx=Store())], value=Call(func=Name(id='PostgresqlDatabase', ctx=Load()), args=[Name(id='DB_NAME', ctx=Load())], keywords=[keyword(arg='host', value=Name(id='DB_HOST', ctx=Load())), keyword(arg='port', value=Name(id='DB_PORT', ctx=Load())), keyword(arg='user', value=Name(id='DB_USER', ctx=Load())), keyword(arg='password', value=Name(id='DB_PASSWORD', ctx=Load()))]))], orelse=[If(test=Compare(left=Name(id='DATABASE_TYPE', ctx=Load()), ops=[Eq()], comparators=[Constant(value='sqlite')]), body=[Assign(targets=[Name(id='db', ctx=Store())], value=Call(func=Name(id='SqliteDatabase', ctx=Load()), args=[Constant(value=':memory:')], keywords=[]))], orelse=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='Unexpected database type: '), FormattedValue(value=Name(id='DATABASE_TYPE', ctx=Load()), conversion=-1)])], keywords=[]))])]), Expr(value=Call(func=Attribute(value=Name(id='db', ctx=Load()), attr='bind', ctx=Load()), args=[Name(id='TABLES', ctx=Load())], keywords=[])), ClassDef(name='PostgresRollback', bases=[Name(id='Exception', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n        Mock exception to ensure rollback after each test.\n\n        Even though we drop the tables at the end of each test, if the test\n        fails due to database integrity error, we have to roll back the\n        transaction otherwise PostgreSQL will refuse any further work.\n\n        The easiest and safest is to always roll back the transaction.\n        ')), Pass()], decorator_list=[]), With(items=[withitem(context_expr=Name(id='db', ctx=Load()))], body=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='db', ctx=Load()), attr='create_tables', ctx=Load()), args=[Name(id='TABLES', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='db', ctx=Load()), attr='atomic', ctx=Load()), args=[], keywords=[]))], body=[Expr(value=Yield(value=Name(id='db', ctx=Load()))), Raise(exc=Call(func=Name(id='PostgresRollback', ctx=Load()), args=[], keywords=[]))])], handlers=[ExceptHandler(type=Name(id='PostgresRollback', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='db', ctx=Load()), attr='drop_tables', ctx=Load()), args=[Name(id='TABLES', ctx=Load())], keywords=[]))])])], decorator_list=[Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load()), args=[], keywords=[keyword(arg='autouse', value=Constant(value=True))])]), FunctionDef(name='test_create_tables', args=arguments(posonlyargs=[], args=[arg(arg='database')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Test that database tables are created for all the models.\n    ')), ImportFrom(module='database.database', names=[alias(name='TABLES')], level=0), With(items=[withitem(context_expr=Name(id='database', ctx=Load()))], body=[Assign(targets=[Name(id='tables', ctx=Store())], value=Call(func=Attribute(value=Name(id='database', ctx=Load()), attr='get_tables', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='expected_tables', ctx=Store())], value=ListComp(elt=Attribute(value=Attribute(value=Name(id='table', ctx=Load()), attr='_meta', ctx=Load()), attr='table_name', ctx=Load()), generators=[comprehension(target=Name(id='table', ctx=Store()), iter=Name(id='TABLES', ctx=Load()), ifs=[], is_async=0)])), Assert(test=Compare(left=Call(func=Name(id='set', ctx=Load()), args=[Name(id='tables', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='set', ctx=Load()), args=[Name(id='expected_tables', ctx=Load())], keywords=[])]))])], decorator_list=[]), FunctionDef(name='test_file_snapshot', args=arguments(posonlyargs=[], args=[arg(arg='content'), arg(arg='expected_content')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='user', ctx=Store())], value=Call(func=Attribute(value=Name(id='User', ctx=Load()), attr='create', ctx=Load()), args=[], keywords=[keyword(arg='email', value=Constant(value='')), keyword(arg='password', value=Constant(value=''))])), Assign(targets=[Name(id='app', ctx=Store())], value=Call(func=Attribute(value=Name(id='App', ctx=Load()), attr='create', ctx=Load()), args=[], keywords=[keyword(arg='user', value=Name(id='user', ctx=Load()))])), Assign(targets=[Name(id='step', ctx=Store())], value=Call(func=Attribute(value=Name(id='DevelopmentSteps', ctx=Load()), attr='create', ctx=Load()), args=[], keywords=[keyword(arg='app', value=Name(id='app', ctx=Load())), keyword(arg='llm_response', value=Dict(keys=[], values=[]))])), Assign(targets=[Name(id='file', ctx=Store())], value=Call(func=Attribute(value=Name(id='File', ctx=Load()), attr='create', ctx=Load()), args=[], keywords=[keyword(arg='app', value=Name(id='app', ctx=Load())), keyword(arg='name', value=Constant(value='test')), keyword(arg='path', value=Constant(value='test')), keyword(arg='full_path', value=Constant(value='test'))])), Assign(targets=[Name(id='fs', ctx=Store())], value=Call(func=Attribute(value=Name(id='FileSnapshot', ctx=Load()), attr='create', ctx=Load()), args=[], keywords=[keyword(arg='app', value=Name(id='app', ctx=Load())), keyword(arg='development_step', value=Name(id='step', ctx=Load())), keyword(arg='file', value=Name(id='file', ctx=Load())), keyword(arg='content', value=Name(id='content', ctx=Load()))])), Assign(targets=[Name(id='from_db', ctx=Store())], value=Call(func=Attribute(value=Name(id='FileSnapshot', ctx=Load()), attr='get', ctx=Load()), args=[], keywords=[keyword(arg='id', value=Attribute(value=Name(id='fs', ctx=Load()), attr='id', ctx=Load()))])), Assert(test=Compare(left=Attribute(value=Name(id='from_db', ctx=Load()), attr='content', ctx=Load()), ops=[Eq()], comparators=[Name(id='expected_content', ctx=Load())]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Tuple(elts=[Constant(value='content'), Constant(value='expected_content')], ctx=Load()), List(elts=[Tuple(elts=[Constant(value='ascii text'), Constant(value='ascii text')], ctx=Load()), Tuple(elts=[Constant(value='non-ascii text: ščćž'), Constant(value='non-ascii text: ščćž')], ctx=Load()), Tuple(elts=[Constant(value='with null byte \x00'), Constant(value='with null byte \x00')], ctx=Load()), Tuple(elts=[Name(id='EMPTY_PNG', ctx=Load()), Name(id='EMPTY_PNG', ctx=Load())], ctx=Load())], ctx=Load())], keywords=[])])], type_ignores=[])