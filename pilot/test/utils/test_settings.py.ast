Module(body=[ImportFrom(module='io', names=[alias(name='StringIO')], level=0), Import(names=[alias(name='json')]), ImportFrom(module='os.path', names=[alias(name='expanduser'), alias(name='expandvars'), alias(name='join')], level=0), ImportFrom(module='os', names=[alias(name='getenv')], level=0), ImportFrom(module='pathlib', names=[alias(name='Path')], level=0), ImportFrom(module='subprocess', names=[alias(name='check_output')], level=0), Import(names=[alias(name='sys')]), ImportFrom(module='unittest.mock', names=[alias(name='patch'), alias(name='MagicMock')], level=0), Import(names=[alias(name='pytest')]), ImportFrom(module='utils.settings', names=[alias(name='Loader'), alias(name='Settings'), alias(name='get_git_commit'), alias(name='get_package_version'), alias(name='get_version')], level=0), FunctionDef(name='expected_config_location', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='xdg_config_home', ctx=Store())], value=Call(func=Name(id='getenv', ctx=Load()), args=[Constant(value='XDG_CONFIG_HOME')], keywords=[])), If(test=Name(id='xdg_config_home', ctx=Load()), body=[Return(value=Call(func=Name(id='join', ctx=Load()), args=[Name(id='xdg_config_home', ctx=Load()), Constant(value='gpt-pilot'), Constant(value='config.json')], keywords=[]))], orelse=[If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), ops=[In()], comparators=[List(elts=[Constant(value='darwin'), Constant(value='linux')], ctx=Load())]), body=[Return(value=Call(func=Name(id='expanduser', ctx=Load()), args=[Constant(value='~/.gpt-pilot/config.json')], keywords=[]))], orelse=[If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), ops=[Eq()], comparators=[Constant(value='win32')]), body=[Return(value=Call(func=Name(id='expandvars', ctx=Load()), args=[Constant(value='%APPDATA%\\GPT Pilot\\config.json')], keywords=[]))], orelse=[Raise(exc=Call(func=Name(id='RuntimeError', ctx=Load()), args=[JoinedStr(values=[Constant(value='Unknown platform: '), FormattedValue(value=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), conversion=-1)])], keywords=[]))])])])], decorator_list=[Attribute(value=Name(id='pytest', ctx=Load()), attr='fixture', ctx=Load())]), FunctionDef(name='test_settings_initializes_known_variables', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='settings', ctx=Store())], value=Call(func=Name(id='Settings', ctx=Load()), args=[], keywords=[])), Assert(test=Compare(left=Attribute(value=Name(id='settings', ctx=Load()), attr='openai_api_key', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])), Assert(test=Compare(left=Attribute(value=Name(id='settings', ctx=Load()), attr='telemetry', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]))], decorator_list=[]), FunctionDef(name='test_settings_init_ignores_unknown_variables', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='settings', ctx=Store())], value=Call(func=Name(id='Settings', ctx=Load()), args=[], keywords=[keyword(arg='unknown', value=Constant(value='value'))])), Assert(test=UnaryOp(op=Not(), operand=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='settings', ctx=Load()), Constant(value='unknown')], keywords=[])))], decorator_list=[]), FunctionDef(name='test_settings_forbids_saving_unknown_variables', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='settings', ctx=Store())], value=Call(func=Name(id='Settings', ctx=Load()), args=[], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='AttributeError', ctx=Load())], keywords=[]))], body=[Assign(targets=[Attribute(value=Name(id='settings', ctx=Load()), attr='unknown', ctx=Store())], value=Constant(value='value'))])], decorator_list=[]), FunctionDef(name='test_settings_update', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='settings', ctx=Store())], value=Call(func=Name(id='Settings', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='settings', ctx=Load()), attr='update', ctx=Load()), args=[], keywords=[keyword(arg='openai_api_key', value=Constant(value='test_key'))])), Assert(test=Compare(left=Attribute(value=Name(id='settings', ctx=Load()), attr='openai_api_key', ctx=Load()), ops=[Eq()], comparators=[Constant(value='test_key')]))], decorator_list=[]), FunctionDef(name='test_settings_to_dict', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='settings', ctx=Store())], value=Call(func=Name(id='Settings', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='settings', ctx=Load()), attr='update', ctx=Load()), args=[], keywords=[keyword(arg='openai_api_key', value=Constant(value='test_key'))])), Assert(test=Compare(left=Call(func=Name(id='dict', ctx=Load()), args=[Name(id='settings', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Dict(keys=[Constant(value='openai_api_key'), Constant(value='telemetry')], values=[Constant(value='test_key'), Constant(value=None)])]))], decorator_list=[]), FunctionDef(name='test_loader_config_file_location', args=arguments(posonlyargs=[], args=[arg(arg='expected_config_location')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='settings', ctx=Store())], value=Call(func=Name(id='Settings', ctx=Load()), args=[], keywords=[])), Expr(value=Compare(left=Attribute(value=Call(func=Name(id='Loader', ctx=Load()), args=[Name(id='settings', ctx=Load())], keywords=[]), attr='config_path', ctx=Load()), ops=[Eq()], comparators=[Name(id='expected_config_location', ctx=Load())]))], decorator_list=[]), FunctionDef(name='test_loader_load_config_file', args=arguments(posonlyargs=[], args=[arg(arg='_mock_from_env'), arg(arg='mock_open'), arg(arg='expected_config_location')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='settings', ctx=Store())], value=Call(func=Name(id='Settings', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='fake_config', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dumps', ctx=Load()), args=[Dict(keys=[Constant(value='openai_api_key'), Constant(value='telemetry')], values=[Constant(value='test_key'), Dict(keys=[Constant(value='id'), Constant(value='endpoint')], values=[Constant(value='fake-id'), Constant(value='https://example.com')])])], keywords=[])), Assign(targets=[Attribute(value=Attribute(value=Attribute(value=Name(id='mock_open', ctx=Load()), attr='return_value', ctx=Load()), attr='__enter__', ctx=Load()), attr='return_value', ctx=Store())], value=Call(func=Name(id='StringIO', ctx=Load()), args=[Name(id='fake_config', ctx=Load())], keywords=[])), Assign(targets=[Name(id='loader', ctx=Store())], value=Call(func=Name(id='Loader', ctx=Load()), args=[Name(id='settings', ctx=Load())], keywords=[])), Assert(test=Compare(left=Attribute(value=Name(id='loader', ctx=Load()), attr='config_path', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='Path', ctx=Load()), args=[Name(id='expected_config_location', ctx=Load())], keywords=[])])), Assign(targets=[Attribute(value=Name(id='loader', ctx=Load()), attr='config_path', ctx=Store())], value=Call(func=Name(id='MagicMock', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='loader', ctx=Load()), attr='load', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='loader', ctx=Load()), attr='config_path', ctx=Load()), attr='exists', ctx=Load()), attr='assert_called_once_with', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='mock_open', ctx=Load()), attr='assert_called_once_with', ctx=Load()), args=[Attribute(value=Name(id='loader', ctx=Load()), attr='config_path', ctx=Load()), Constant(value='r')], keywords=[keyword(arg='encoding', value=Constant(value='utf-8'))])), Assert(test=Compare(left=Attribute(value=Name(id='settings', ctx=Load()), attr='openai_api_key', ctx=Load()), ops=[Eq()], comparators=[Constant(value='test_key')])), Assert(test=Compare(left=Subscript(value=Attribute(value=Name(id='settings', ctx=Load()), attr='telemetry', ctx=Load()), slice=Constant(value='id'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='fake-id')])), Assert(test=Compare(left=Subscript(value=Attribute(value=Name(id='settings', ctx=Load()), attr='telemetry', ctx=Load()), slice=Constant(value='endpoint'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='https://example.com')]))], decorator_list=[Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='utils.settings.open')], keywords=[]), Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='utils.settings.Loader.update_settings_from_env')], keywords=[])]), FunctionDef(name='test_loader_load_no_config_file', args=arguments(posonlyargs=[], args=[arg(arg='_mock_from_env'), arg(arg='mock_open'), arg(arg='expected_config_location')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='settings', ctx=Store())], value=Call(func=Name(id='Settings', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='loader', ctx=Store())], value=Call(func=Name(id='Loader', ctx=Load()), args=[Name(id='settings', ctx=Load())], keywords=[])), Assert(test=Compare(left=Attribute(value=Name(id='loader', ctx=Load()), attr='config_path', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='Path', ctx=Load()), args=[Name(id='expected_config_location', ctx=Load())], keywords=[])])), Assign(targets=[Attribute(value=Name(id='loader', ctx=Load()), attr='config_path', ctx=Store())], value=Call(func=Name(id='MagicMock', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Attribute(value=Attribute(value=Name(id='loader', ctx=Load()), attr='config_path', ctx=Load()), attr='exists', ctx=Load()), attr='return_value', ctx=Store())], value=Constant(value=False)), Expr(value=Call(func=Attribute(value=Name(id='loader', ctx=Load()), attr='load', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='loader', ctx=Load()), attr='config_path', ctx=Load()), attr='exists', ctx=Load()), attr='assert_called_once_with', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='mock_open', ctx=Load()), attr='assert_not_called', ctx=Load()), args=[], keywords=[])), Assert(test=Compare(left=Attribute(value=Name(id='settings', ctx=Load()), attr='openai_api_key', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])), Assert(test=Compare(left=Attribute(value=Name(id='settings', ctx=Load()), attr='telemetry', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]))], decorator_list=[Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='utils.settings.open')], keywords=[]), Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='utils.settings.Loader.update_settings_from_env')], keywords=[])]), FunctionDef(name='test_loader_load_from_env', args=arguments(posonlyargs=[], args=[arg(arg='mock_getenv')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='settings', ctx=Store())], value=Call(func=Name(id='Settings', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='mock_getenv', ctx=Load()), attr='side_effect', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='key')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Dict(keys=[Constant(value='TELEMETRY_ID'), Constant(value='TELEMETRY_ENDPOINT'), Constant(value='OPENAI_API_KEY')], values=[Constant(value='fake-id'), Constant(value='https://example.com'), Constant(value='test_key')]), attr='get', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Call(func=Name(id='Loader', ctx=Load()), args=[Name(id='settings', ctx=Load())], keywords=[]), attr='update_settings_from_env', ctx=Load()), args=[Name(id='settings', ctx=Load())], keywords=[])), Assert(test=Compare(left=Attribute(value=Name(id='settings', ctx=Load()), attr='openai_api_key', ctx=Load()), ops=[Eq()], comparators=[Constant(value='test_key')])), Assert(test=Compare(left=Subscript(value=Attribute(value=Name(id='settings', ctx=Load()), attr='telemetry', ctx=Load()), slice=Constant(value='id'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='fake-id')])), Assert(test=Compare(left=Subscript(value=Attribute(value=Name(id='settings', ctx=Load()), attr='telemetry', ctx=Load()), slice=Constant(value='endpoint'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='https://example.com')]))], decorator_list=[Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='utils.settings.getenv')], keywords=[])]), FunctionDef(name='test_get_git_commit', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Name(id='expected_commit_hash', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='check_output', ctx=Load()), args=[List(elts=[Constant(value='git'), Constant(value='rev-parse'), Constant(value='HEAD')], ctx=Load())], keywords=[keyword(arg='encoding', value=Constant(value='ascii'))]), attr='strip', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Assign(targets=[Name(id='expected_commit_hash', ctx=Store())], value=Constant(value=None))])], orelse=[], finalbody=[]), Assert(test=Compare(left=Call(func=Name(id='get_git_commit', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Name(id='expected_commit_hash', ctx=Load())]))], decorator_list=[]), FunctionDef(name='test_get_package_version', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Compare(left=Call(func=Name(id='get_package_version', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Constant(value='0.0.0')]))], decorator_list=[]), FunctionDef(name='test_get_version', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Name(id='commit_suffix', ctx=Store())], value=BinOp(left=Constant(value='-git'), op=Add(), right=Subscript(value=Call(func=Attribute(value=Call(func=Name(id='check_output', ctx=Load()), args=[List(elts=[Constant(value='git'), Constant(value='rev-parse'), Constant(value='HEAD')], ctx=Load())], keywords=[keyword(arg='encoding', value=Constant(value='ascii'))]), attr='strip', ctx=Load()), args=[], keywords=[]), slice=Slice(upper=Constant(value=7)), ctx=Load())))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Assign(targets=[Name(id='commit_suffix', ctx=Store())], value=Constant(value=''))])], orelse=[], finalbody=[]), Assert(test=Compare(left=Call(func=Name(id='get_version', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[BinOp(left=Constant(value='0.0.0'), op=Add(), right=Name(id='commit_suffix', ctx=Load()))]))], decorator_list=[])], type_ignores=[])