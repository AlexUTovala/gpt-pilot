Module(body=[Import(names=[alias(name='logging')]), ImportFrom(module='peewee', names=[alias(name='ForeignKeyField'), alias(name='BlobField')], level=0), ImportFrom(module='database.models.components.base_models', names=[alias(name='BaseModel')], level=0), ImportFrom(module='database.models.development_steps', names=[alias(name='DevelopmentSteps')], level=0), ImportFrom(module='database.models.app', names=[alias(name='App')], level=0), ImportFrom(module='database.models.files', names=[alias(name='File')], level=0), Assign(targets=[Name(id='log', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), ClassDef(name='SmartBlobField', bases=[Name(id='BlobField', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="\n    A binary blob field that can also accept/return utf-8 strings.\n\n    This is a temporary workaround for the fact that we're passing either binary\n    or string contents to the database. Once this is cleaned up, we should only\n    accept binary content and explcitily convert from/to strings as needed.\n    ")), FunctionDef(name='db_value', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='FileSnapshot content is a string, expected bytes, working around it.')], keywords=[])), Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='db_value', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='python_value', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='val', ctx=Store())], value=Call(func=Name(id='bytes', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='python_value', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])], keywords=[])), Try(body=[Return(value=Call(func=Attribute(value=Name(id='val', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[]))], handlers=[ExceptHandler(type=Name(id='UnicodeDecodeError', ctx=Load()), body=[Return(value=Name(id='val', ctx=Load()))])], orelse=[], finalbody=[])], decorator_list=[])], decorator_list=[]), ClassDef(name='FileSnapshot', bases=[Name(id='BaseModel', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='app', ctx=Store())], value=Call(func=Name(id='ForeignKeyField', ctx=Load()), args=[Name(id='App', ctx=Load())], keywords=[keyword(arg='on_delete', value=Constant(value='CASCADE'))])), Assign(targets=[Name(id='development_step', ctx=Store())], value=Call(func=Name(id='ForeignKeyField', ctx=Load()), args=[Name(id='DevelopmentSteps', ctx=Load())], keywords=[keyword(arg='backref', value=Constant(value='files')), keyword(arg='on_delete', value=Constant(value='CASCADE'))])), Assign(targets=[Name(id='file', ctx=Store())], value=Call(func=Name(id='ForeignKeyField', ctx=Load()), args=[Name(id='File', ctx=Load())], keywords=[keyword(arg='on_delete', value=Constant(value='CASCADE')), keyword(arg='null', value=Constant(value=True))])), Assign(targets=[Name(id='content', ctx=Store())], value=Call(func=Name(id='SmartBlobField', ctx=Load()), args=[], keywords=[])), ClassDef(name='Meta', bases=[], keywords=[], body=[Assign(targets=[Name(id='table_name', ctx=Store())], value=Constant(value='file_snapshot')), Assign(targets=[Name(id='indexes', ctx=Store())], value=Tuple(elts=[Tuple(elts=[Tuple(elts=[Constant(value='development_step'), Constant(value='file')], ctx=Load()), Constant(value=True)], ctx=Load())], ctx=Load()))], decorator_list=[])], decorator_list=[])], type_ignores=[])