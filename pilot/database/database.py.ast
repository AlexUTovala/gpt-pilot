Module(body=[ImportFrom(module='playhouse.shortcuts', names=[alias(name='model_to_dict')], level=0), ImportFrom(module='utils.style', names=[alias(name='color_yellow'), alias(name='color_red')], level=0), ImportFrom(module='peewee', names=[alias(name='DoesNotExist'), alias(name='IntegrityError')], level=0), ImportFrom(module='functools', names=[alias(name='reduce')], level=0), Import(names=[alias(name='operator')]), Import(names=[alias(name='psycopg2')]), ImportFrom(module='psycopg2.extensions', names=[alias(name='quote_ident')], level=0), Import(names=[alias(name='os')]), ImportFrom(module='const.common', names=[alias(name='PROMPT_DATA_TO_IGNORE'), alias(name='STEPS')], level=0), ImportFrom(module='logger.logger', names=[alias(name='logger')], level=0), ImportFrom(module='database.config', names=[alias(name='DB_NAME'), alias(name='DB_HOST'), alias(name='DB_PORT'), alias(name='DB_USER'), alias(name='DB_PASSWORD'), alias(name='DATABASE_TYPE')], level=0), ImportFrom(module='database.models.components.base_models', names=[alias(name='database')], level=0), ImportFrom(module='database.models.user', names=[alias(name='User')], level=0), ImportFrom(module='database.models.app', names=[alias(name='App')], level=0), ImportFrom(module='database.models.project_description', names=[alias(name='ProjectDescription')], level=0), ImportFrom(module='database.models.user_stories', names=[alias(name='UserStories')], level=0), ImportFrom(module='database.models.user_tasks', names=[alias(name='UserTasks')], level=0), ImportFrom(module='database.models.architecture', names=[alias(name='Architecture')], level=0), ImportFrom(module='database.models.development_planning', names=[alias(name='DevelopmentPlanning')], level=0), ImportFrom(module='database.models.development_steps', names=[alias(name='DevelopmentSteps')], level=0), ImportFrom(module='database.models.environment_setup', names=[alias(name='EnvironmentSetup')], level=0), ImportFrom(module='database.models.development', names=[alias(name='Development')], level=0), ImportFrom(module='database.models.file_snapshot', names=[alias(name='FileSnapshot')], level=0), ImportFrom(module='database.models.command_runs', names=[alias(name='CommandRuns')], level=0), ImportFrom(module='database.models.user_apps', names=[alias(name='UserApps')], level=0), ImportFrom(module='database.models.user_inputs', names=[alias(name='UserInputs')], level=0), ImportFrom(module='database.models.files', names=[alias(name='File')], level=0), ImportFrom(module='database.models.feature', names=[alias(name='Feature')], level=0), Assign(targets=[Name(id='TABLES', ctx=Store())], value=List(elts=[Name(id='User', ctx=Load()), Name(id='App', ctx=Load()), Name(id='ProjectDescription', ctx=Load()), Name(id='UserStories', ctx=Load()), Name(id='UserTasks', ctx=Load()), Name(id='Architecture', ctx=Load()), Name(id='DevelopmentPlanning', ctx=Load()), Name(id='DevelopmentSteps', ctx=Load()), Name(id='EnvironmentSetup', ctx=Load()), Name(id='Development', ctx=Load()), Name(id='FileSnapshot', ctx=Load()), Name(id='CommandRuns', ctx=Load()), Name(id='UserApps', ctx=Load()), Name(id='UserInputs', ctx=Load()), Name(id='File', ctx=Load()), Name(id='Feature', ctx=Load())], ctx=Load())), FunctionDef(name='get_created_apps', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=ListComp(elt=Call(func=Name(id='model_to_dict', ctx=Load()), args=[Name(id='app', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='app', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='App', ctx=Load()), attr='select', ctx=Load()), args=[], keywords=[]), attr='where', ctx=Load()), args=[BinOp(left=Call(func=Attribute(value=Attribute(value=Name(id='App', ctx=Load()), attr='name', ctx=Load()), attr='is_null', ctx=Load()), args=[Constant(value=False)], keywords=[]), op=BitAnd(), right=Call(func=Attribute(value=Attribute(value=Name(id='App', ctx=Load()), attr='status', ctx=Load()), attr='is_null', ctx=Load()), args=[Constant(value=False)], keywords=[]))], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[]), FunctionDef(name='get_created_apps_with_steps', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='apps', ctx=Store())], value=Call(func=Name(id='get_created_apps', ctx=Load()), args=[], keywords=[])), For(target=Name(id='app', ctx=Store()), iter=Name(id='apps', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='app', ctx=Load()), slice=Constant(value='id'), ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Subscript(value=Name(id='app', ctx=Load()), slice=Constant(value='id'), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='app', ctx=Load()), slice=Constant(value='steps'), ctx=Store())], value=IfExp(test=Compare(left=Subscript(value=Name(id='app', ctx=Load()), slice=Constant(value='status'), ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=ListComp(elt=Name(id='step', ctx=Load()), generators=[comprehension(target=Name(id='step', ctx=Store()), iter=Subscript(value=Name(id='STEPS', ctx=Load()), slice=Slice(upper=BinOp(left=Call(func=Attribute(value=Name(id='STEPS', ctx=Load()), attr='index', ctx=Load()), args=[Subscript(value=Name(id='app', ctx=Load()), slice=Constant(value='status'), ctx=Load())], keywords=[]), op=Add(), right=Constant(value=1))), ctx=Load()), ifs=[], is_async=0)]), orelse=List(elts=[], ctx=Load()))), Assign(targets=[Subscript(value=Name(id='app', ctx=Load()), slice=Constant(value='development_steps'), ctx=Store())], value=Call(func=Name(id='get_all_app_development_steps', ctx=Load()), args=[Subscript(value=Name(id='app', ctx=Load()), slice=Constant(value='id'), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='app', ctx=Load()), slice=Constant(value='development_steps'), ctx=Store())], value=ListComp(elt=DictComp(key=Name(id='k', ctx=Load()), value=Name(id='v', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='dev_step', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[Compare(left=Name(id='k', ctx=Load()), ops=[In()], comparators=[Set(elts=[Constant(value='id'), Constant(value='created_at')])])], is_async=0)]), generators=[comprehension(target=Name(id='dev_step', ctx=Store()), iter=Subscript(value=Name(id='app', ctx=Load()), slice=Constant(value='development_steps'), ctx=Load()), ifs=[], is_async=0)]))], orelse=[]), Return(value=Name(id='apps', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_all_app_development_steps', args=arguments(posonlyargs=[], args=[arg(arg='app_id')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=ListComp(elt=Call(func=Name(id='model_to_dict', ctx=Load()), args=[Name(id='dev_step', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='dev_step', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='DevelopmentSteps', ctx=Load()), attr='select', ctx=Load()), args=[], keywords=[]), attr='where', ctx=Load()), args=[Compare(left=Attribute(value=Name(id='DevelopmentSteps', ctx=Load()), attr='app', ctx=Load()), ops=[Eq()], comparators=[Name(id='app_id', ctx=Load())])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[]), FunctionDef(name='save_user', args=arguments(posonlyargs=[], args=[arg(arg='user_id'), arg(arg='email'), arg(arg='password')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Name(id='user', ctx=Store())], value=Call(func=Attribute(value=Name(id='User', ctx=Load()), attr='get', ctx=Load()), args=[Compare(left=Attribute(value=Name(id='User', ctx=Load()), attr='id', ctx=Load()), ops=[Eq()], comparators=[Name(id='user_id', ctx=Load())])], keywords=[])), Return(value=Name(id='user', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='DoesNotExist', ctx=Load()), body=[Try(body=[Assign(targets=[Name(id='existing_user', ctx=Store())], value=Call(func=Attribute(value=Name(id='User', ctx=Load()), attr='get', ctx=Load()), args=[Compare(left=Attribute(value=Name(id='User', ctx=Load()), attr='email', ctx=Load()), ops=[Eq()], comparators=[Name(id='email', ctx=Load())])], keywords=[])), Return(value=Name(id='existing_user', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='DoesNotExist', ctx=Load()), body=[Return(value=Call(func=Attribute(value=Name(id='User', ctx=Load()), attr='create', ctx=Load()), args=[], keywords=[keyword(arg='id', value=Name(id='user_id', ctx=Load())), keyword(arg='email', value=Name(id='email', ctx=Load())), keyword(arg='password', value=Name(id='password', ctx=Load()))]))])], orelse=[], finalbody=[])])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='update_app_status', args=arguments(posonlyargs=[], args=[arg(arg='app_id'), arg(arg='new_status')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Name(id='app', ctx=Store())], value=Call(func=Attribute(value=Name(id='App', ctx=Load()), attr='get', ctx=Load()), args=[Compare(left=Attribute(value=Name(id='App', ctx=Load()), attr='id', ctx=Load()), ops=[Eq()], comparators=[Name(id='app_id', ctx=Load())])], keywords=[])), Assign(targets=[Attribute(value=Name(id='app', ctx=Load()), attr='status', ctx=Store())], value=Name(id='new_status', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='app', ctx=Load()), attr='save', ctx=Load()), args=[], keywords=[])), Return(value=Constant(value=True))], handlers=[ExceptHandler(type=Name(id='DoesNotExist', ctx=Load()), body=[Return(value=Constant(value=False))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='get_user', args=arguments(posonlyargs=[], args=[arg(arg='user_id'), arg(arg='email')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Name(id='user_id', ctx=Load())), UnaryOp(op=Not(), operand=Name(id='email', ctx=Load()))]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Either user_id or email must be provided')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='query', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=Name(id='user_id', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='query', ctx=Load()), attr='append', ctx=Load()), args=[Compare(left=Attribute(value=Name(id='User', ctx=Load()), attr='id', ctx=Load()), ops=[Eq()], comparators=[Name(id='user_id', ctx=Load())])], keywords=[]))], orelse=[]), If(test=Name(id='email', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='query', ctx=Load()), attr='append', ctx=Load()), args=[Compare(left=Attribute(value=Name(id='User', ctx=Load()), attr='email', ctx=Load()), ops=[Eq()], comparators=[Name(id='email', ctx=Load())])], keywords=[]))], orelse=[]), Try(body=[Assign(targets=[Name(id='user', ctx=Store())], value=Call(func=Attribute(value=Name(id='User', ctx=Load()), attr='get', ctx=Load()), args=[Call(func=Name(id='reduce', ctx=Load()), args=[Attribute(value=Name(id='operator', ctx=Load()), attr='or_', ctx=Load()), Name(id='query', ctx=Load())], keywords=[])], keywords=[])), Return(value=Name(id='user', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='DoesNotExist', ctx=Load()), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='No user found with provided id or email')], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='save_app', args=arguments(posonlyargs=[], args=[arg(arg='project')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='args', ctx=Store())], value=Attribute(value=Name(id='project', ctx=Load()), attr='args', ctx=Load())), Assign(targets=[Name(id='app_status', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='project', ctx=Load()), Constant(value='current_step'), Constant(value=None)], keywords=[])), Try(body=[Assign(targets=[Name(id='app', ctx=Store())], value=Attribute(value=Name(id='project', ctx=Load()), attr='app', ctx=Load())), If(test=Compare(left=Name(id='app', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='app', ctx=Store())], value=Call(func=Attribute(value=Name(id='App', ctx=Load()), attr='get', ctx=Load()), args=[Compare(left=Attribute(value=Name(id='App', ctx=Load()), attr='id', ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='args', ctx=Load()), slice=Constant(value='app_id'), ctx=Load())])], keywords=[]))], orelse=[]), For(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='args', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='key', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='app_id')]), Compare(left=Name(id='value', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='app', ctx=Load()), Name(id='key', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Attribute(value=Name(id='app', ctx=Load()), attr='status', ctx=Store())], value=Name(id='app_status', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='app', ctx=Load()), attr='save', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Name(id='DoesNotExist', ctx=Load()), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='args', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='user_id')], keywords=[]), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Try(body=[Assign(targets=[Name(id='user', ctx=Store())], value=Call(func=Name(id='get_user', ctx=Load()), args=[], keywords=[keyword(arg='user_id', value=Subscript(value=Name(id='args', ctx=Load()), slice=Constant(value='user_id'), ctx=Load()))]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Assign(targets=[Name(id='user', ctx=Store())], value=Call(func=Name(id='save_user', ctx=Load()), args=[Subscript(value=Name(id='args', ctx=Load()), slice=Constant(value='user_id'), ctx=Load()), Subscript(value=Name(id='args', ctx=Load()), slice=Constant(value='email'), ctx=Load()), Subscript(value=Name(id='args', ctx=Load()), slice=Constant(value='password'), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='args', ctx=Load()), slice=Constant(value='user_id'), ctx=Store())], value=Attribute(value=Name(id='user', ctx=Load()), attr='id', ctx=Load())), Assign(targets=[Subscript(value=Name(id='args', ctx=Load()), slice=Constant(value='email'), ctx=Store())], value=Attribute(value=Name(id='user', ctx=Load()), attr='email', ctx=Load()))])], orelse=[], finalbody=[])], orelse=[Assign(targets=[Name(id='user', ctx=Store())], value=Constant(value=None))]), Assign(targets=[Name(id='app', ctx=Store())], value=Call(func=Attribute(value=Name(id='App', ctx=Load()), attr='create', ctx=Load()), args=[], keywords=[keyword(arg='id', value=Subscript(value=Name(id='args', ctx=Load()), slice=Constant(value='app_id'), ctx=Load())), keyword(arg='user', value=Name(id='user', ctx=Load())), keyword(arg='app_type', value=Call(func=Attribute(value=Name(id='args', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='app_type')], keywords=[])), keyword(arg='name', value=Call(func=Attribute(value=Name(id='args', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='name')], keywords=[])), keyword(arg='status', value=Name(id='app_status', ctx=Load()))]))])], orelse=[], finalbody=[]), Return(value=Name(id='app', ctx=Load()))], decorator_list=[]), FunctionDef(name='save_user_app', args=arguments(posonlyargs=[], args=[arg(arg='user_id'), arg(arg='app_id'), arg(arg='workspace')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Name(id='user_app', ctx=Store())], value=Call(func=Attribute(value=Name(id='UserApps', ctx=Load()), attr='get', ctx=Load()), args=[BinOp(left=Compare(left=Attribute(value=Name(id='UserApps', ctx=Load()), attr='user', ctx=Load()), ops=[Eq()], comparators=[Name(id='user_id', ctx=Load())]), op=BitAnd(), right=Compare(left=Attribute(value=Name(id='UserApps', ctx=Load()), attr='app', ctx=Load()), ops=[Eq()], comparators=[Name(id='app_id', ctx=Load())]))], keywords=[])), Assign(targets=[Attribute(value=Name(id='user_app', ctx=Load()), attr='workspace', ctx=Store())], value=Name(id='workspace', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='user_app', ctx=Load()), attr='save', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Name(id='DoesNotExist', ctx=Load()), body=[Assign(targets=[Name(id='user_app', ctx=Store())], value=Call(func=Attribute(value=Name(id='UserApps', ctx=Load()), attr='create', ctx=Load()), args=[], keywords=[keyword(arg='user', value=Name(id='user_id', ctx=Load())), keyword(arg='app', value=Name(id='app_id', ctx=Load())), keyword(arg='workspace', value=Name(id='workspace', ctx=Load()))]))])], orelse=[], finalbody=[]), Return(value=Name(id='user_app', ctx=Load()))], decorator_list=[]), FunctionDef(name='save_progress', args=arguments(posonlyargs=[], args=[arg(arg='app_id'), arg(arg='step'), arg(arg='data')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='progress_table_map', ctx=Store())], value=Dict(keys=[Constant(value='project_description'), Constant(value='user_stories'), Constant(value='user_tasks'), Constant(value='architecture'), Constant(value='development_planning'), Constant(value='environment_setup'), Constant(value='development')], values=[Name(id='ProjectDescription', ctx=Load()), Name(id='UserStories', ctx=Load()), Name(id='UserTasks', ctx=Load()), Name(id='Architecture', ctx=Load()), Name(id='DevelopmentPlanning', ctx=Load()), Name(id='EnvironmentSetup', ctx=Load()), Name(id='Development', ctx=Load())])), Assign(targets=[Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='step'), ctx=Store())], value=Name(id='step', ctx=Load())), Assign(targets=[Name(id='ProgressTable', ctx=Store())], value=Call(func=Attribute(value=Name(id='progress_table_map', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='step', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='ProgressTable', ctx=Load())), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='Invalid step: '), FormattedValue(value=Name(id='step', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='app', ctx=Store())], value=Call(func=Name(id='get_app', ctx=Load()), args=[Name(id='app_id', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='progress', ctx=Store()), Name(id='created', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='ProgressTable', ctx=Load()), attr='get_or_create', ctx=Load()), args=[], keywords=[keyword(arg='app', value=Name(id='app', ctx=Load())), keyword(arg='defaults', value=Name(id='data', ctx=Load()))])), If(test=UnaryOp(op=Not(), operand=Name(id='created', ctx=Load())), body=[For(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='progress', ctx=Load()), Name(id='key', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='progress', ctx=Load()), attr='save', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Name(id='update_app_status', ctx=Load()), args=[Name(id='app_id', ctx=Load()), Name(id='step', ctx=Load())], keywords=[])), Return(value=Name(id='progress', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_app', args=arguments(posonlyargs=[], args=[arg(arg='app_id'), arg(arg='error_if_not_found')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Try(body=[Assign(targets=[Name(id='app', ctx=Store())], value=Call(func=Attribute(value=Name(id='App', ctx=Load()), attr='get', ctx=Load()), args=[Compare(left=Attribute(value=Name(id='App', ctx=Load()), attr='id', ctx=Load()), ops=[Eq()], comparators=[Name(id='app_id', ctx=Load())])], keywords=[])), Return(value=Name(id='app', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='DoesNotExist', ctx=Load()), body=[If(test=Name(id='error_if_not_found', ctx=Load()), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='No app with id: '), FormattedValue(value=Name(id='app_id', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[]), Return(value=Constant(value=None))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='get_app_by_user_workspace', args=arguments(posonlyargs=[], args=[arg(arg='user_id'), arg(arg='workspace')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Name(id='user_app', ctx=Store())], value=Call(func=Attribute(value=Name(id='UserApps', ctx=Load()), attr='get', ctx=Load()), args=[BinOp(left=Compare(left=Attribute(value=Name(id='UserApps', ctx=Load()), attr='user', ctx=Load()), ops=[Eq()], comparators=[Name(id='user_id', ctx=Load())]), op=BitAnd(), right=Compare(left=Attribute(value=Name(id='UserApps', ctx=Load()), attr='workspace', ctx=Load()), ops=[Eq()], comparators=[Name(id='workspace', ctx=Load())]))], keywords=[])), Return(value=Attribute(value=Name(id='user_app', ctx=Load()), attr='app', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='DoesNotExist', ctx=Load()), body=[Return(value=Constant(value=None))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='get_progress_steps', args=arguments(posonlyargs=[], args=[arg(arg='app_id'), arg(arg='step')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Name(id='progress_table_map', ctx=Store())], value=Dict(keys=[Constant(value='project_description'), Constant(value='user_stories'), Constant(value='user_tasks'), Constant(value='architecture'), Constant(value='development_planning'), Constant(value='environment_setup'), Constant(value='development')], values=[Name(id='ProjectDescription', ctx=Load()), Name(id='UserStories', ctx=Load()), Name(id='UserTasks', ctx=Load()), Name(id='Architecture', ctx=Load()), Name(id='DevelopmentPlanning', ctx=Load()), Name(id='EnvironmentSetup', ctx=Load()), Name(id='Development', ctx=Load())])), If(test=Name(id='step', ctx=Load()), body=[Assign(targets=[Name(id='ProgressTable', ctx=Store())], value=Call(func=Attribute(value=Name(id='progress_table_map', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='step', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='ProgressTable', ctx=Load())), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='Invalid step: '), FormattedValue(value=Name(id='step', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[]), Try(body=[Assign(targets=[Name(id='progress', ctx=Store())], value=Call(func=Attribute(value=Name(id='ProgressTable', ctx=Load()), attr='get', ctx=Load()), args=[Compare(left=Attribute(value=Name(id='ProgressTable', ctx=Load()), attr='app_id', ctx=Load()), ops=[Eq()], comparators=[Name(id='app_id', ctx=Load())])], keywords=[])), Return(value=Call(func=Name(id='model_to_dict', ctx=Load()), args=[Name(id='progress', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='DoesNotExist', ctx=Load()), body=[Return(value=Constant(value=None))])], orelse=[], finalbody=[])], orelse=[Assign(targets=[Name(id='steps', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='step', ctx=Store()), Name(id='ProgressTable', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='progress_table_map', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Try(body=[Assign(targets=[Name(id='progress', ctx=Store())], value=Call(func=Attribute(value=Name(id='ProgressTable', ctx=Load()), attr='get', ctx=Load()), args=[Compare(left=Attribute(value=Name(id='ProgressTable', ctx=Load()), attr='app_id', ctx=Load()), ops=[Eq()], comparators=[Name(id='app_id', ctx=Load())])], keywords=[])), Assign(targets=[Subscript(value=Name(id='steps', ctx=Load()), slice=Name(id='step', ctx=Load()), ctx=Store())], value=Call(func=Name(id='model_to_dict', ctx=Load()), args=[Name(id='progress', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='DoesNotExist', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='steps', ctx=Load()), slice=Name(id='step', ctx=Load()), ctx=Store())], value=Constant(value=None))])], orelse=[], finalbody=[])], orelse=[]), Return(value=Name(id='steps', ctx=Load()))])], decorator_list=[]), FunctionDef(name='get_db_model_from_hash_id', args=arguments(posonlyargs=[], args=[arg(arg='model'), arg(arg='app_id'), arg(arg='previous_step'), arg(arg='high_level_step')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Name(id='db_row', ctx=Store())], value=Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='get', ctx=Load()), args=[BinOp(left=BinOp(left=Compare(left=Attribute(value=Name(id='model', ctx=Load()), attr='app', ctx=Load()), ops=[Eq()], comparators=[Name(id='app_id', ctx=Load())]), op=BitAnd(), right=Compare(left=Attribute(value=Name(id='model', ctx=Load()), attr='previous_step', ctx=Load()), ops=[Eq()], comparators=[Name(id='previous_step', ctx=Load())])), op=BitAnd(), right=Compare(left=Attribute(value=Name(id='model', ctx=Load()), attr='high_level_step', ctx=Load()), ops=[Eq()], comparators=[Name(id='high_level_step', ctx=Load())]))], keywords=[]))], handlers=[ExceptHandler(type=Name(id='DoesNotExist', ctx=Load()), body=[Return(value=Constant(value=None))])], orelse=[], finalbody=[]), Return(value=Name(id='db_row', ctx=Load()))], decorator_list=[]), FunctionDef(name='hash_and_save_step', args=arguments(posonlyargs=[], args=[arg(arg='Model'), arg(arg='app_id'), arg(arg='unique_data_fields'), arg(arg='data_fields'), arg(arg='message')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Tuple(elts=[Name(id='field', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='data_fields', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='unique_data_fields', ctx=Load()), slice=Name(id='field', ctx=Load()), ctx=Store())], value=Name(id='value', ctx=Load()))], orelse=[]), Try(body=[Assign(targets=[Name(id='inserted_id', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='Model', ctx=Load()), attr='insert', ctx=Load()), args=[], keywords=[keyword(value=Name(id='unique_data_fields', ctx=Load()))]), attr='execute', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='record', ctx=Store())], value=Call(func=Attribute(value=Name(id='Model', ctx=Load()), attr='get_by_id', ctx=Load()), args=[Name(id='inserted_id', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Call(func=Name(id='color_yellow', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='message', ctx=Load()), conversion=-1), Constant(value=' with id '), FormattedValue(value=Attribute(value=Name(id='record', ctx=Load()), attr='id', ctx=Load()), conversion=-1)])], keywords=[])], keywords=[]))], handlers=[ExceptHandler(type=Name(id='IntegrityError', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warn', ctx=Load()), args=[JoinedStr(values=[Constant(value='A record with data '), FormattedValue(value=Name(id='unique_data_fields', ctx=Load()), conversion=-1), Constant(value=' already exists for '), FormattedValue(value=Attribute(value=Name(id='Model', ctx=Load()), attr='__name__', ctx=Load()), conversion=-1), Constant(value='.')])], keywords=[])), Return(value=Constant(value=None))])], orelse=[], finalbody=[]), Return(value=Name(id='record', ctx=Load()))], decorator_list=[]), FunctionDef(name='save_development_step', args=arguments(posonlyargs=[], args=[arg(arg='project'), arg(arg='prompt_path'), arg(arg='prompt_data'), arg(arg='messages'), arg(arg='llm_response'), arg(arg='exception')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Name(id='data_fields', ctx=Store())], value=Dict(keys=[Constant(value='messages'), Constant(value='llm_response'), Constant(value='prompt_path'), Constant(value='prompt_data'), Constant(value='llm_req_num'), Constant(value='token_limit_exception_raised')], values=[Name(id='messages', ctx=Load()), Name(id='llm_response', ctx=Load()), Name(id='prompt_path', ctx=Load()), IfExp(test=Compare(left=Name(id='prompt_data', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Dict(keys=[], values=[]), orelse=DictComp(key=Name(id='k', ctx=Load()), value=Name(id='v', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='prompt_data', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[BoolOp(op=And(), values=[Compare(left=Name(id='k', ctx=Load()), ops=[NotIn()], comparators=[Name(id='PROMPT_DATA_TO_IGNORE', ctx=Load())]), UnaryOp(op=Not(), operand=Call(func=Name(id='callable', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[]))])], is_async=0)])), Attribute(value=Name(id='project', ctx=Load()), attr='llm_req_num', ctx=Load()), Name(id='exception', ctx=Load())])), Assign(targets=[Name(id='unique_data', ctx=Store())], value=Dict(keys=[Constant(value='app'), Constant(value='previous_step'), Constant(value='high_level_step')], values=[Subscript(value=Attribute(value=Name(id='project', ctx=Load()), attr='args', ctx=Load()), slice=Constant(value='app_id'), ctx=Load()), Subscript(value=Attribute(value=Name(id='project', ctx=Load()), attr='checkpoints', ctx=Load()), slice=Constant(value='last_development_step'), ctx=Load()), Attribute(value=Name(id='project', ctx=Load()), attr='current_step', ctx=Load())])), Assign(targets=[Name(id='development_step', ctx=Store())], value=Call(func=Name(id='hash_and_save_step', ctx=Load()), args=[Name(id='DevelopmentSteps', ctx=Load()), Subscript(value=Attribute(value=Name(id='project', ctx=Load()), attr='args', ctx=Load()), slice=Constant(value='app_id'), ctx=Load()), Name(id='unique_data', ctx=Load()), Name(id='data_fields', ctx=Load()), Constant(value='Saved Development Step')], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='project', ctx=Load()), attr='checkpoints', ctx=Load()), slice=Constant(value='last_development_step'), ctx=Store())], value=Name(id='development_step', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='project', ctx=Load()), attr='save_files_snapshot', ctx=Load()), args=[Attribute(value=Name(id='development_step', ctx=Load()), attr='id', ctx=Load())], keywords=[])), Return(value=Name(id='development_step', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_saved_development_step', args=arguments(posonlyargs=[], args=[arg(arg='project')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='development_step', ctx=Store())], value=Call(func=Name(id='get_db_model_from_hash_id', ctx=Load()), args=[Name(id='DevelopmentSteps', ctx=Load()), Subscript(value=Attribute(value=Name(id='project', ctx=Load()), attr='args', ctx=Load()), slice=Constant(value='app_id'), ctx=Load()), Subscript(value=Attribute(value=Name(id='project', ctx=Load()), attr='checkpoints', ctx=Load()), slice=Constant(value='last_development_step'), ctx=Load()), Attribute(value=Name(id='project', ctx=Load()), attr='current_step', ctx=Load())], keywords=[])), Return(value=Name(id='development_step', ctx=Load()))], decorator_list=[]), FunctionDef(name='save_command_run', args=arguments(posonlyargs=[], args=[arg(arg='project'), arg(arg='command'), arg(arg='cli_response'), arg(arg='done_or_error_response'), arg(arg='exit_code')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='project', ctx=Load()), attr='current_step', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='coding')]), body=[Return()], orelse=[]), Assign(targets=[Name(id='unique_data', ctx=Store())], value=Dict(keys=[Constant(value='app'), Constant(value='previous_step'), Constant(value='high_level_step')], values=[Subscript(value=Attribute(value=Name(id='project', ctx=Load()), attr='args', ctx=Load()), slice=Constant(value='app_id'), ctx=Load()), Subscript(value=Attribute(value=Name(id='project', ctx=Load()), attr='checkpoints', ctx=Load()), slice=Constant(value='last_command_run'), ctx=Load()), Attribute(value=Name(id='project', ctx=Load()), attr='current_step', ctx=Load())])), Assign(targets=[Name(id='data_fields', ctx=Store())], value=Dict(keys=[Constant(value='command'), Constant(value='cli_response'), Constant(value='done_or_error_response'), Constant(value='exit_code')], values=[Name(id='command', ctx=Load()), Name(id='cli_response', ctx=Load()), Name(id='done_or_error_response', ctx=Load()), Name(id='exit_code', ctx=Load())])), Assign(targets=[Name(id='command_run', ctx=Store())], value=Call(func=Name(id='hash_and_save_step', ctx=Load()), args=[Name(id='CommandRuns', ctx=Load()), Subscript(value=Attribute(value=Name(id='project', ctx=Load()), attr='args', ctx=Load()), slice=Constant(value='app_id'), ctx=Load()), Name(id='unique_data', ctx=Load()), Name(id='data_fields', ctx=Load()), Constant(value='Saved Command Run')], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='project', ctx=Load()), attr='checkpoints', ctx=Load()), slice=Constant(value='last_command_run'), ctx=Store())], value=Name(id='command_run', ctx=Load())), Return(value=Name(id='command_run', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_saved_command_run', args=arguments(posonlyargs=[], args=[arg(arg='project'), arg(arg='command')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='command_run', ctx=Store())], value=Call(func=Name(id='get_db_model_from_hash_id', ctx=Load()), args=[Name(id='CommandRuns', ctx=Load()), Subscript(value=Attribute(value=Name(id='project', ctx=Load()), attr='args', ctx=Load()), slice=Constant(value='app_id'), ctx=Load()), Subscript(value=Attribute(value=Name(id='project', ctx=Load()), attr='checkpoints', ctx=Load()), slice=Constant(value='last_command_run'), ctx=Load()), Attribute(value=Name(id='project', ctx=Load()), attr='current_step', ctx=Load())], keywords=[])), Return(value=Name(id='command_run', ctx=Load()))], decorator_list=[]), FunctionDef(name='save_user_input', args=arguments(posonlyargs=[], args=[arg(arg='project'), arg(arg='query'), arg(arg='user_input'), arg(arg='hint')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='project', ctx=Load()), attr='current_step', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='coding')]), body=[Return()], orelse=[]), Assign(targets=[Name(id='unique_data', ctx=Store())], value=Dict(keys=[Constant(value='app'), Constant(value='previous_step'), Constant(value='high_level_step')], values=[Subscript(value=Attribute(value=Name(id='project', ctx=Load()), attr='args', ctx=Load()), slice=Constant(value='app_id'), ctx=Load()), Subscript(value=Attribute(value=Name(id='project', ctx=Load()), attr='checkpoints', ctx=Load()), slice=Constant(value='last_user_input'), ctx=Load()), Attribute(value=Name(id='project', ctx=Load()), attr='current_step', ctx=Load())])), Assign(targets=[Name(id='data_fields', ctx=Store())], value=Dict(keys=[Constant(value='query'), Constant(value='user_input'), Constant(value='hint')], values=[Name(id='query', ctx=Load()), Name(id='user_input', ctx=Load()), Name(id='hint', ctx=Load())])), Assign(targets=[Name(id='user_input', ctx=Store())], value=Call(func=Name(id='hash_and_save_step', ctx=Load()), args=[Name(id='UserInputs', ctx=Load()), Subscript(value=Attribute(value=Name(id='project', ctx=Load()), attr='args', ctx=Load()), slice=Constant(value='app_id'), ctx=Load()), Name(id='unique_data', ctx=Load()), Name(id='data_fields', ctx=Load()), Constant(value='Saved User Input')], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='project', ctx=Load()), attr='checkpoints', ctx=Load()), slice=Constant(value='last_user_input'), ctx=Store())], value=Name(id='user_input', ctx=Load())), Return(value=Name(id='user_input', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_saved_user_input', args=arguments(posonlyargs=[], args=[arg(arg='project'), arg(arg='query')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='user_input', ctx=Store())], value=Call(func=Name(id='get_db_model_from_hash_id', ctx=Load()), args=[Name(id='UserInputs', ctx=Load()), Subscript(value=Attribute(value=Name(id='project', ctx=Load()), attr='args', ctx=Load()), slice=Constant(value='app_id'), ctx=Load()), Subscript(value=Attribute(value=Name(id='project', ctx=Load()), attr='checkpoints', ctx=Load()), slice=Constant(value='last_user_input'), ctx=Load()), Attribute(value=Name(id='project', ctx=Load()), attr='current_step', ctx=Load())], keywords=[])), Return(value=Name(id='user_input', ctx=Load()))], decorator_list=[]), FunctionDef(name='delete_all_subsequent_steps', args=arguments(posonlyargs=[], args=[arg(arg='project')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='app', ctx=Store())], value=Call(func=Name(id='get_app', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='project', ctx=Load()), attr='args', ctx=Load()), slice=Constant(value='app_id'), ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='delete_subsequent_steps', ctx=Load()), args=[Name(id='DevelopmentSteps', ctx=Load()), Name(id='app', ctx=Load()), Subscript(value=Attribute(value=Name(id='project', ctx=Load()), attr='checkpoints', ctx=Load()), slice=Constant(value='last_development_step'), ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='delete_subsequent_steps', ctx=Load()), args=[Name(id='CommandRuns', ctx=Load()), Name(id='app', ctx=Load()), Subscript(value=Attribute(value=Name(id='project', ctx=Load()), attr='checkpoints', ctx=Load()), slice=Constant(value='last_command_run'), ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='delete_subsequent_steps', ctx=Load()), args=[Name(id='UserInputs', ctx=Load()), Name(id='app', ctx=Load()), Subscript(value=Attribute(value=Name(id='project', ctx=Load()), attr='checkpoints', ctx=Load()), slice=Constant(value='last_user_input'), ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='delete_subsequent_steps', args=arguments(posonlyargs=[], args=[arg(arg='Model'), arg(arg='app'), arg(arg='step')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Call(func=Name(id='color_red', ctx=Load()), args=[JoinedStr(values=[Constant(value='Deleting subsequent '), FormattedValue(value=Attribute(value=Name(id='Model', ctx=Load()), attr='__name__', ctx=Load()), conversion=-1), Constant(value=' steps after '), FormattedValue(value=IfExp(test=Compare(left=Name(id='step', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Attribute(value=Name(id='step', ctx=Load()), attr='id', ctx=Load()), orelse=Constant(value=None)), conversion=-1)])], keywords=[])], keywords=[])), Assign(targets=[Name(id='subsequent_steps', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='Model', ctx=Load()), attr='select', ctx=Load()), args=[], keywords=[]), attr='where', ctx=Load()), args=[BinOp(left=Compare(left=Attribute(value=Name(id='Model', ctx=Load()), attr='app', ctx=Load()), ops=[Eq()], comparators=[Name(id='app', ctx=Load())]), op=BitAnd(), right=Compare(left=Attribute(value=Name(id='Model', ctx=Load()), attr='previous_step', ctx=Load()), ops=[Eq()], comparators=[IfExp(test=Compare(left=Name(id='step', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Attribute(value=Name(id='step', ctx=Load()), attr='id', ctx=Load()), orelse=Constant(value=None))]))], keywords=[])), For(target=Name(id='subsequent_step', ctx=Store()), iter=Name(id='subsequent_steps', ctx=Load()), body=[If(test=Name(id='subsequent_step', ctx=Load()), body=[Expr(value=Call(func=Name(id='delete_subsequent_steps', ctx=Load()), args=[Name(id='Model', ctx=Load()), Name(id='app', ctx=Load()), Name(id='subsequent_step', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='subsequent_step', ctx=Load()), attr='delete_instance', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='Model', ctx=Load()), ops=[Eq()], comparators=[Name(id='DevelopmentSteps', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='FileSnapshot', ctx=Load()), attr='delete', ctx=Load()), args=[], keywords=[]), attr='where', ctx=Load()), args=[Compare(left=Attribute(value=Name(id='FileSnapshot', ctx=Load()), attr='development_step', ctx=Load()), ops=[Eq()], comparators=[Name(id='subsequent_step', ctx=Load())])], keywords=[]), attr='execute', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='Feature', ctx=Load()), attr='delete', ctx=Load()), args=[], keywords=[]), attr='where', ctx=Load()), args=[Compare(left=Attribute(value=Name(id='Feature', ctx=Load()), attr='previous_step', ctx=Load()), ops=[Eq()], comparators=[Name(id='subsequent_step', ctx=Load())])], keywords=[]), attr='execute', ctx=Load()), args=[], keywords=[]))], orelse=[])], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='get_all_connected_steps', args=arguments(posonlyargs=[], args=[arg(arg='step'), arg(arg='previous_step_field_name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Recursively get all steps connected to the given step.')), Assign(targets=[Name(id='connected_steps', ctx=Store())], value=List(elts=[Name(id='step', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='prev_step', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='step', ctx=Load()), Name(id='previous_step_field_name', ctx=Load())], keywords=[])), While(test=Compare(left=Name(id='prev_step', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='connected_steps', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='prev_step', ctx=Load())], keywords=[])), Assign(targets=[Name(id='prev_step', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='prev_step', ctx=Load()), Name(id='previous_step_field_name', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='connected_steps', ctx=Load()))], decorator_list=[]), FunctionDef(name='delete_all_app_development_data', args=arguments(posonlyargs=[], args=[arg(arg='app')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='models', ctx=Store())], value=List(elts=[Name(id='DevelopmentSteps', ctx=Load()), Name(id='CommandRuns', ctx=Load()), Name(id='UserInputs', ctx=Load()), Name(id='UserApps', ctx=Load()), Name(id='File', ctx=Load()), Name(id='FileSnapshot', ctx=Load())], ctx=Load())), For(target=Name(id='model', ctx=Store()), iter=Name(id='models', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='model', ctx=Load()), attr='delete', ctx=Load()), args=[], keywords=[]), attr='where', ctx=Load()), args=[Compare(left=Attribute(value=Name(id='model', ctx=Load()), attr='app', ctx=Load()), ops=[Eq()], comparators=[Name(id='app', ctx=Load())])], keywords=[]), attr='execute', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='delete_unconnected_steps_from', args=arguments(posonlyargs=[], args=[arg(arg='step'), arg(arg='previous_step_field_name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='step', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return()], orelse=[]), Assign(targets=[Name(id='connected_steps', ctx=Store())], value=Call(func=Name(id='get_all_connected_steps', ctx=Load()), args=[Name(id='step', ctx=Load()), Name(id='previous_step_field_name', ctx=Load())], keywords=[])), Assign(targets=[Name(id='connected_step_ids', ctx=Store())], value=ListComp(elt=Attribute(value=Name(id='s', ctx=Load()), attr='id', ctx=Load()), generators=[comprehension(target=Name(id='s', ctx=Store()), iter=Name(id='connected_steps', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='unconnected_steps', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='DevelopmentSteps', ctx=Load()), attr='select', ctx=Load()), args=[], keywords=[]), attr='where', ctx=Load()), args=[BinOp(left=Compare(left=Attribute(value=Name(id='DevelopmentSteps', ctx=Load()), attr='app', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='step', ctx=Load()), attr='app', ctx=Load())]), op=BitAnd(), right=Call(func=Attribute(value=Attribute(value=Name(id='DevelopmentSteps', ctx=Load()), attr='id', ctx=Load()), attr='not_in', ctx=Load()), args=[Name(id='connected_step_ids', ctx=Load())], keywords=[]))], keywords=[]), attr='order_by', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='DevelopmentSteps', ctx=Load()), attr='id', ctx=Load()), attr='desc', ctx=Load()), args=[], keywords=[])], keywords=[])), For(target=Name(id='unconnected_step', ctx=Store()), iter=Name(id='unconnected_steps', ctx=Load()), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Name(id='color_red', ctx=Load()), args=[JoinedStr(values=[Constant(value='Deleting unconnected '), FormattedValue(value=Attribute(value=Attribute(value=Name(id='step', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), conversion=-1), Constant(value=' step '), FormattedValue(value=Attribute(value=Name(id='unconnected_step', ctx=Load()), attr='id', ctx=Load()), conversion=-1)])], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='unconnected_step', ctx=Load()), attr='delete_instance', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='save_file_description', args=arguments(posonlyargs=[], args=[arg(arg='project'), arg(arg='path'), arg(arg='name'), arg(arg='description')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='File', ctx=Load()), attr='insert', ctx=Load()), args=[], keywords=[keyword(arg='app', value=Attribute(value=Name(id='project', ctx=Load()), attr='app', ctx=Load())), keyword(arg='path', value=Name(id='path', ctx=Load())), keyword(arg='name', value=Name(id='name', ctx=Load())), keyword(arg='description', value=Name(id='description', ctx=Load()))]), attr='on_conflict', ctx=Load()), args=[], keywords=[keyword(arg='conflict_target', value=List(elts=[Attribute(value=Name(id='File', ctx=Load()), attr='app', ctx=Load()), Attribute(value=Name(id='File', ctx=Load()), attr='name', ctx=Load()), Attribute(value=Name(id='File', ctx=Load()), attr='path', ctx=Load())], ctx=Load())), keyword(arg='preserve', value=List(elts=[], ctx=Load())), keyword(arg='update', value=Dict(keys=[Constant(value='description')], values=[Name(id='description', ctx=Load())]))]), attr='execute', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='save_feature', args=arguments(posonlyargs=[], args=[arg(arg='app_id'), arg(arg='summary'), arg(arg='messages'), arg(arg='previous_step')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Name(id='app', ctx=Store())], value=Call(func=Name(id='get_app', ctx=Load()), args=[Name(id='app_id', ctx=Load())], keywords=[])), Assign(targets=[Name(id='feature', ctx=Store())], value=Call(func=Attribute(value=Name(id='Feature', ctx=Load()), attr='create', ctx=Load()), args=[], keywords=[keyword(arg='app', value=Name(id='app', ctx=Load())), keyword(arg='summary', value=Name(id='summary', ctx=Load())), keyword(arg='messages', value=Name(id='messages', ctx=Load())), keyword(arg='previous_step', value=Name(id='previous_step', ctx=Load()))])), Return(value=Name(id='feature', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='DoesNotExist', ctx=Load()), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='No app with id: '), FormattedValue(value=Name(id='app_id', ctx=Load()), conversion=-1)])], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='get_features_by_app_id', args=arguments(posonlyargs=[], args=[arg(arg='app_id')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Name(id='app', ctx=Store())], value=Call(func=Name(id='get_app', ctx=Load()), args=[Name(id='app_id', ctx=Load())], keywords=[])), Assign(targets=[Name(id='features', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='Feature', ctx=Load()), attr='select', ctx=Load()), args=[], keywords=[]), attr='where', ctx=Load()), args=[Compare(left=Attribute(value=Name(id='Feature', ctx=Load()), attr='app', ctx=Load()), ops=[Eq()], comparators=[Name(id='app', ctx=Load())])], keywords=[]), attr='order_by', ctx=Load()), args=[Attribute(value=Name(id='Feature', ctx=Load()), attr='created_at', ctx=Load())], keywords=[])), Assign(targets=[Name(id='features_dict', ctx=Store())], value=ListComp(elt=Call(func=Name(id='model_to_dict', ctx=Load()), args=[Name(id='feature', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='feature', ctx=Store()), iter=Name(id='features', ctx=Load()), ifs=[], is_async=0)])), Return(value=ListComp(elt=Dict(keys=[Constant(value='summary')], values=[Subscript(value=Name(id='feature', ctx=Load()), slice=Constant(value='summary'), ctx=Load())]), generators=[comprehension(target=Name(id='feature', ctx=Store()), iter=Name(id='features_dict', ctx=Load()), ifs=[], is_async=0)]))], handlers=[ExceptHandler(type=Name(id='DoesNotExist', ctx=Load()), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='No app with id: '), FormattedValue(value=Name(id='app_id', ctx=Load()), conversion=-1)])], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='create_tables', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Name(id='database', ctx=Load()))], body=[Expr(value=Call(func=Attribute(value=Name(id='database', ctx=Load()), attr='create_tables', ctx=Load()), args=[Name(id='TABLES', ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='drop_tables', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='database', ctx=Load()), attr='atomic', ctx=Load()), args=[], keywords=[]))], body=[For(target=Name(id='table', ctx=Store()), iter=Name(id='TABLES', ctx=Load()), body=[If(test=Compare(left=Name(id='DATABASE_TYPE', ctx=Load()), ops=[Eq()], comparators=[Constant(value='postgres')]), body=[Assign(targets=[Name(id='sql', ctx=Store())], value=JoinedStr(values=[Constant(value='DROP TABLE IF EXISTS "'), FormattedValue(value=Attribute(value=Attribute(value=Name(id='table', ctx=Load()), attr='_meta', ctx=Load()), attr='table_name', ctx=Load()), conversion=-1), Constant(value='" CASCADE')]))], orelse=[If(test=Compare(left=Name(id='DATABASE_TYPE', ctx=Load()), ops=[Eq()], comparators=[Constant(value='sqlite')]), body=[Assign(targets=[Name(id='sql', ctx=Store())], value=JoinedStr(values=[Constant(value='DROP TABLE IF EXISTS "'), FormattedValue(value=Attribute(value=Attribute(value=Name(id='table', ctx=Load()), attr='_meta', ctx=Load()), attr='table_name', ctx=Load()), conversion=-1), Constant(value='"')]))], orelse=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='Unsupported DATABASE_TYPE: '), FormattedValue(value=Name(id='DATABASE_TYPE', ctx=Load()), conversion=-1)])], keywords=[]))])]), Expr(value=Call(func=Attribute(value=Name(id='database', ctx=Load()), attr='execute_sql', ctx=Load()), args=[Name(id='sql', ctx=Load())], keywords=[]))], orelse=[])])], decorator_list=[]), FunctionDef(name='database_exists', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='database', ctx=Load()), attr='connect', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='database', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Return(value=Constant(value=True))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Return(value=Constant(value=False))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='create_database', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='DATABASE_TYPE', ctx=Load()), ops=[Eq()], comparators=[Constant(value='postgres')]), body=[Assign(targets=[Name(id='conn', ctx=Store())], value=Call(func=Attribute(value=Name(id='psycopg2', ctx=Load()), attr='connect', ctx=Load()), args=[], keywords=[keyword(arg='dbname', value=Constant(value='postgres')), keyword(arg='user', value=Name(id='DB_USER', ctx=Load())), keyword(arg='password', value=Name(id='DB_PASSWORD', ctx=Load())), keyword(arg='host', value=Name(id='DB_HOST', ctx=Load())), keyword(arg='port', value=Name(id='DB_PORT', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='conn', ctx=Load()), attr='autocommit', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='cursor', ctx=Store())], value=Call(func=Attribute(value=Name(id='conn', ctx=Load()), attr='cursor', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='safe_db_name', ctx=Store())], value=Call(func=Name(id='quote_ident', ctx=Load()), args=[Name(id='DB_NAME', ctx=Load()), Name(id='conn', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='cursor', ctx=Load()), attr='execute', ctx=Load()), args=[JoinedStr(values=[Constant(value='CREATE DATABASE '), FormattedValue(value=Name(id='safe_db_name', ctx=Load()), conversion=-1)])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='cursor', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='conn', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))], orelse=[Pass()])], decorator_list=[]), FunctionDef(name='tables_exist', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='DATABASE_TYPE', ctx=Load()), ops=[Eq()], comparators=[Constant(value='postgres')]), body=[For(target=Name(id='table', ctx=Store()), iter=Name(id='TABLES', ctx=Load()), body=[Try(body=[Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='database', ctx=Load()), attr='get_tables', ctx=Load()), args=[], keywords=[]), attr='index', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='table', ctx=Load()), attr='_meta', ctx=Load()), attr='table_name', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Return(value=Constant(value=False))])], orelse=[], finalbody=[])], orelse=[])], orelse=[Pass()]), Return(value=Constant(value=True))], decorator_list=[]), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__')]), body=[Expr(value=Call(func=Name(id='drop_tables', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Name(id='create_tables', ctx=Load()), args=[], keywords=[]))], orelse=[])], type_ignores=[])