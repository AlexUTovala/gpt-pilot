Module(body=[ImportFrom(module='pathlib', names=[alias(name='Path')], level=0), Import(names=[alias(name='os')]), ImportFrom(module='typing', names=[alias(name='Optional'), alias(name='Union')], level=0), ImportFrom(module='utils.style', names=[alias(name='color_green')], level=0), FunctionDef(name='update_file', args=arguments(posonlyargs=[], args=[arg(arg='path', annotation=Name(id='str', ctx=Load())), arg(arg='new_content', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='bytes', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    Update file with the new content.\n\n    :param path: Full path to the file\n    :param new_content: New content to write to the file\n\n    Any intermediate directories will be created if they don't exist.\n    If file is text, it will be written using UTF-8 encoding.\n    ")), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='new_content', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='file_mode', ctx=Store())], value=Constant(value='w')), Assign(targets=[Name(id='encoding', ctx=Store())], value=Constant(value='utf-8'))], orelse=[Assign(targets=[Name(id='file_mode', ctx=Store())], value=Constant(value='wb')), Assign(targets=[Name(id='encoding', ctx=Store())], value=Constant(value=None))]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='path', ctx=Load()), Name(id='file_mode', ctx=Load())], keywords=[keyword(arg='encoding', value=Name(id='encoding', ctx=Load()))]), optional_vars=Name(id='file', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='file', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='new_content', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Dict(keys=[Constant(value='path'), Constant(value='line')], values=[Name(id='path', ctx=Load()), Constant(value=None)])], keywords=[keyword(arg='type', value=Constant(value='openFile'))])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Name(id='color_green', ctx=Load()), args=[JoinedStr(values=[Constant(value='Updated file '), FormattedValue(value=Name(id='path', ctx=Load()), conversion=-1)])], keywords=[])], keywords=[]))])], decorator_list=[]), FunctionDef(name='get_file_contents', args=arguments(posonlyargs=[], args=[arg(arg='path', annotation=Name(id='str', ctx=Load())), arg(arg='project_root_path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Get file content and metadata.\n\n    :param path: Full path to the file\n    :param project_root_path: Full path to the project root directory\n    :return: Object with the following keys:\n        - name: File name\n        - path: Relative path to the file\n        - content: File content (str or bytes)\n        - full_path: Full path to the file\n\n    If file is text, it will be read using UTF-8 encoding and `content`\n    will be a Python string. If that fails, it will be treated as a\n    binary file and `content` will be a Python bytes object.\n    ')), Try(body=[Assign(targets=[Name(id='file_content', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='open', ctx=Load()), args=[Name(id='path', ctx=Load()), Constant(value='r')], keywords=[keyword(arg='encoding', value=Constant(value='utf-8'))]), attr='read', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Name(id='UnicodeDecodeError', ctx=Load()), body=[Assign(targets=[Name(id='file_content', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='open', ctx=Load()), args=[Name(id='path', ctx=Load()), Constant(value='rb')], keywords=[]), attr='read', ctx=Load()), args=[], keywords=[]))]), ExceptHandler(type=Name(id='FileNotFoundError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='File not found: '), FormattedValue(value=Name(id='path', ctx=Load()), conversion=-1)])], keywords=[]))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='file_name', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='basename', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), Assign(targets=[Name(id='relative_path', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Call(func=Name(id='Path', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), attr='parent', ctx=Load()), attr='relative_to', ctx=Load()), args=[Name(id='project_root_path', ctx=Load())], keywords=[])], keywords=[])), If(test=Compare(left=Name(id='relative_path', ctx=Load()), ops=[Eq()], comparators=[Constant(value='.')]), body=[Assign(targets=[Name(id='relative_path', ctx=Store())], value=Constant(value=''))], orelse=[]), Return(value=Dict(keys=[Constant(value='name'), Constant(value='path'), Constant(value='content'), Constant(value='full_path')], values=[Name(id='file_name', ctx=Load()), Name(id='relative_path', ctx=Load()), Name(id='file_content', ctx=Load()), Name(id='path', ctx=Load())]))], decorator_list=[], returns=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='bytes', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='get_directory_contents', args=arguments(posonlyargs=[], args=[arg(arg='directory', annotation=Name(id='str', ctx=Load())), arg(arg='ignore', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='\n    Get the content of all files in the given directory.\n\n    :param directory: Full path to the directory to search\n    :param ignore: List of files or folders to ignore (optional)\n    :return: List of file objects as returned by `get_file_contents`\n\n    See `get_file_contents()` for the details on the output structure\n    and how files are read.\n    ')), Assign(targets=[Name(id='return_array', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=Compare(left=Name(id='ignore', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='ignore', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[]), For(target=Tuple(elts=[Name(id='dpath', ctx=Store()), Name(id='dirs', ctx=Store()), Name(id='files', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='walk', ctx=Load()), args=[Name(id='directory', ctx=Load())], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='dirs', ctx=Load()), slice=Slice(), ctx=Store())], value=ListComp(elt=Name(id='d', ctx=Load()), generators=[comprehension(target=Name(id='d', ctx=Store()), iter=Name(id='dirs', ctx=Load()), ifs=[Compare(left=Name(id='d', ctx=Load()), ops=[NotIn()], comparators=[Name(id='ignore', ctx=Load())])], is_async=0)])), For(target=Name(id='file', ctx=Store()), iter=Name(id='files', ctx=Load()), body=[If(test=Compare(left=Name(id='file', ctx=Load()), ops=[In()], comparators=[Name(id='ignore', ctx=Load())]), body=[Continue()], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='return_array', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='get_file_contents', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='dpath', ctx=Load()), Name(id='file', ctx=Load())], keywords=[]), Name(id='directory', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='return_array', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='list', ctx=Load()), slice=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='bytes', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='clear_directory', args=arguments(posonlyargs=[], args=[arg(arg='directory', annotation=Name(id='str', ctx=Load())), arg(arg='ignore', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='\n    Delete all files and directories (except ignored ones) in the given directory.\n\n    :param dir_path: Full path to the directory to clear\n    :param ignore: List of files or folders to ignore (optional)\n    ')), If(test=Compare(left=Name(id='ignore', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='ignore', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[]), For(target=Tuple(elts=[Name(id='dpath', ctx=Store()), Name(id='dirs', ctx=Store()), Name(id='files', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='walk', ctx=Load()), args=[Name(id='directory', ctx=Load())], keywords=[keyword(arg='topdown', value=Constant(value=True))]), body=[Assign(targets=[Subscript(value=Name(id='dirs', ctx=Load()), slice=Slice(), ctx=Store())], value=ListComp(elt=Name(id='d', ctx=Load()), generators=[comprehension(target=Name(id='d', ctx=Store()), iter=Name(id='dirs', ctx=Load()), ifs=[Compare(left=Name(id='d', ctx=Load()), ops=[NotIn()], comparators=[Name(id='ignore', ctx=Load())])], is_async=0)])), For(target=Name(id='file', ctx=Store()), iter=Name(id='files', ctx=Load()), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='file', ctx=Load()), ops=[In()], comparators=[Name(id='ignore', ctx=Load())]), Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='directory', ctx=Load()), Name(id='file', ctx=Load())], keywords=[]), ops=[In()], comparators=[Name(id='ignore', ctx=Load())])]), body=[Continue()], orelse=[]), Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='dpath', ctx=Load()), Name(id='file', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='d', ctx=Store()), iter=Name(id='dirs', ctx=Load()), body=[Assign(targets=[Name(id='subdir_path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='dpath', ctx=Load()), Name(id='d', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='listdir', ctx=Load()), args=[Name(id='subdir_path', ctx=Load())], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='rmdir', ctx=Load()), args=[Name(id='subdir_path', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[])], decorator_list=[])], type_ignores=[])