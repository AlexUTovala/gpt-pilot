Module(body=[Import(names=[alias(name='psutil')]), Import(names=[alias(name='subprocess')]), Import(names=[alias(name='os')]), Import(names=[alias(name='signal')]), Import(names=[alias(name='threading')]), Import(names=[alias(name='queue')]), Import(names=[alias(name='time')]), Import(names=[alias(name='platform')]), ImportFrom(module='typing', names=[alias(name='Dict'), alias(name='Union')], level=0), ImportFrom(module='logger.logger', names=[alias(name='logger')], level=0), ImportFrom(module='utils.style', names=[alias(name='color_yellow'), alias(name='color_green'), alias(name='color_red'), alias(name='color_yellow_bold')], level=0), ImportFrom(module='database.database', names=[alias(name='get_saved_command_run'), alias(name='save_command_run')], level=0), ImportFrom(module='helpers.exceptions.TooDeepRecursionError', names=[alias(name='TooDeepRecursionError')], level=0), ImportFrom(module='helpers.exceptions.TokenLimitError', names=[alias(name='TokenLimitError')], level=0), ImportFrom(module='helpers.exceptions.CommandFinishedEarly', names=[alias(name='CommandFinishedEarly')], level=0), ImportFrom(module='prompts.prompts', names=[alias(name='ask_user')], level=0), ImportFrom(module='const.code_execution', names=[alias(name='MIN_COMMAND_RUN_TIME'), alias(name='MAX_COMMAND_RUN_TIME'), alias(name='MAX_COMMAND_OUTPUT_LENGTH')], level=0), ImportFrom(module='const.messages', names=[alias(name='AFFIRMATIVE_ANSWERS'), alias(name='NEGATIVE_ANSWERS')], level=0), Assign(targets=[Name(id='interrupted', ctx=Store())], value=Constant(value=False)), AnnAssign(target=Name(id='running_processes', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=1), Expr(value=Constant(value='Holds a list of (command, process ID)s, mapped to the `command_id` provided in the call to `execute_command()`.')), FunctionDef(name='enqueue_output', args=arguments(posonlyargs=[], args=[arg(arg='out'), arg(arg='q')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='line', ctx=Store()), iter=Call(func=Name(id='iter', ctx=Load()), args=[Attribute(value=Name(id='out', ctx=Load()), attr='readline', ctx=Load()), Constant(value='')], keywords=[]), body=[If(test=Name(id='interrupted', ctx=Load()), body=[Break()], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='q', ctx=Load()), attr='put', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='out', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='run_command', args=arguments(posonlyargs=[], args=[arg(arg='command'), arg(arg='root_path'), arg(arg='q_stdout'), arg(arg='q_stderr')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Execute a command in a subprocess.\n\n    Args:\n        command (str): The command to run.\n        root_path (str): The directory in which to run the command.\n        q_stdout (Queue): A queue to capture stdout.\n        q_stderr (Queue): A queue to capture stderr.\n\n    Returns:\n        subprocess.Popen: The subprocess object.\n    ')), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[JoinedStr(values=[Constant(value='Running `'), FormattedValue(value=Name(id='command', ctx=Load()), conversion=-1), Constant(value='` on '), FormattedValue(value=Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='system', ctx=Load()), args=[], keywords=[]), conversion=-1)])], keywords=[])), If(test=Compare(left=Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='system', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Constant(value='Windows')]), body=[Assign(targets=[Name(id='process', ctx=Store())], value=Call(func=Attribute(value=Name(id='subprocess', ctx=Load()), attr='Popen', ctx=Load()), args=[Name(id='command', ctx=Load())], keywords=[keyword(arg='shell', value=Constant(value=True)), keyword(arg='stdout', value=Attribute(value=Name(id='subprocess', ctx=Load()), attr='PIPE', ctx=Load())), keyword(arg='stderr', value=Attribute(value=Name(id='subprocess', ctx=Load()), attr='PIPE', ctx=Load())), keyword(arg='text', value=Constant(value=True)), keyword(arg='cwd', value=Name(id='root_path', ctx=Load()))]))], orelse=[Assign(targets=[Name(id='process', ctx=Store())], value=Call(func=Attribute(value=Name(id='subprocess', ctx=Load()), attr='Popen', ctx=Load()), args=[Name(id='command', ctx=Load())], keywords=[keyword(arg='shell', value=Constant(value=True)), keyword(arg='stdout', value=Attribute(value=Name(id='subprocess', ctx=Load()), attr='PIPE', ctx=Load())), keyword(arg='stderr', value=Attribute(value=Name(id='subprocess', ctx=Load()), attr='PIPE', ctx=Load())), keyword(arg='text', value=Constant(value=True)), keyword(arg='preexec_fn', value=Attribute(value=Name(id='os', ctx=Load()), attr='setsid', ctx=Load())), keyword(arg='cwd', value=Name(id='root_path', ctx=Load()))]))]), Assign(targets=[Name(id='t_stdout', ctx=Store())], value=Call(func=Attribute(value=Name(id='threading', ctx=Load()), attr='Thread', ctx=Load()), args=[], keywords=[keyword(arg='target', value=Name(id='enqueue_output', ctx=Load())), keyword(arg='args', value=Tuple(elts=[Attribute(value=Name(id='process', ctx=Load()), attr='stdout', ctx=Load()), Name(id='q_stdout', ctx=Load())], ctx=Load()))])), Assign(targets=[Name(id='t_stderr', ctx=Store())], value=Call(func=Attribute(value=Name(id='threading', ctx=Load()), attr='Thread', ctx=Load()), args=[], keywords=[keyword(arg='target', value=Name(id='enqueue_output', ctx=Load())), keyword(arg='args', value=Tuple(elts=[Attribute(value=Name(id='process', ctx=Load()), attr='stderr', ctx=Load()), Name(id='q_stderr', ctx=Load())], ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='t_stdout', ctx=Load()), attr='daemon', ctx=Store())], value=Constant(value=True)), Assign(targets=[Attribute(value=Name(id='t_stderr', ctx=Load()), attr='daemon', ctx=Store())], value=Constant(value=True)), Expr(value=Call(func=Attribute(value=Name(id='t_stdout', ctx=Load()), attr='start', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='t_stderr', ctx=Load()), attr='start', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='process', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='subprocess', ctx=Load()), attr='Popen', ctx=Load())), FunctionDef(name='terminate_named_process', args=arguments(posonlyargs=[], args=[arg(arg='command_id', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='command_id', ctx=Load()), ops=[In()], comparators=[Name(id='running_processes', ctx=Load())]), body=[Expr(value=Call(func=Name(id='terminate_process', ctx=Load()), args=[Subscript(value=Subscript(value=Name(id='running_processes', ctx=Load()), slice=Name(id='command_id', ctx=Load()), ctx=Load()), slice=Constant(value=1), ctx=Load()), Name(id='command_id', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='terminate_running_processes', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='command_id', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='running_processes', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Name(id='terminate_process', ctx=Load()), args=[Subscript(value=Subscript(value=Name(id='running_processes', ctx=Load()), slice=Name(id='command_id', ctx=Load()), ctx=Load()), slice=Constant(value=1), ctx=Load()), Name(id='command_id', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='term_proc_windows', args=arguments(posonlyargs=[], args=[arg(arg='pid', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='subprocess', ctx=Load()), attr='run', ctx=Load()), args=[List(elts=[Constant(value='taskkill'), Constant(value='/F'), Constant(value='/T'), Constant(value='/PID'), Call(func=Name(id='str', ctx=Load()), args=[Name(id='pid', ctx=Load())], keywords=[])], ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='subprocess', ctx=Load()), attr='CalledProcessError', ctx=Load()), name='e', body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='error', ctx=Load()), args=[JoinedStr(values=[Constant(value='Error while terminating process: '), FormattedValue(value=Name(id='e', ctx=Load()), conversion=-1)])], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='term_proc_unix_like', args=arguments(posonlyargs=[], args=[arg(arg='pid', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='killpg', ctx=Load()), args=[Name(id='pid', ctx=Load()), Attribute(value=Name(id='signal', ctx=Load()), attr='SIGKILL', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), name='e', body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='error', ctx=Load()), args=[JoinedStr(values=[Constant(value='Error while terminating process: '), FormattedValue(value=Name(id='e', ctx=Load()), conversion=-1)])], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='is_process_running', args=arguments(posonlyargs=[], args=[arg(arg='pid', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check if there is a running process with the given PID.')), Try(body=[Assign(targets=[Name(id='process', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Name(id='pid', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='process', ctx=Load()), attr='is_running', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='psutil', ctx=Load()), attr='NoSuchProcess', ctx=Load()), body=[Return(value=Constant(value=False))])], orelse=[], finalbody=[])], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='terminate_process', args=arguments(posonlyargs=[], args=[arg(arg='pid', annotation=Name(id='int', ctx=Load())), arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Constant(value=''))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='is_process_running', ctx=Load()), args=[Name(id='pid', ctx=Load())], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Process "%s" (pid: %s) is not running. Skipping termination.'), Name(id='name', ctx=Load()), Name(id='pid', ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='command_id', ctx=Store()), Name(id='process_info', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='running_processes', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='process_info', ctx=Load()), slice=Constant(value=1), ctx=Load()), ops=[Eq()], comparators=[Name(id='pid', ctx=Load())]), body=[Delete(targets=[Subscript(value=Name(id='running_processes', ctx=Load()), slice=Name(id='command_id', ctx=Load()), ctx=Del())])], orelse=[])], orelse=[]), Return()], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Terminating process "%s" (pid: %s)'), Name(id='name', ctx=Load()), Name(id='pid', ctx=Load())], keywords=[])), If(test=Compare(left=Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='system', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Constant(value='Windows')]), body=[Expr(value=Call(func=Name(id='term_proc_windows', ctx=Load()), args=[Name(id='pid', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='term_proc_unix_like', ctx=Load()), args=[Name(id='pid', ctx=Load())], keywords=[]))]), Try(body=[Assign(targets=[Name(id='process', ctx=Store())], value=Call(func=Attribute(value=Name(id='psutil', ctx=Load()), attr='Process', ctx=Load()), args=[Name(id='pid', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='process', ctx=Load()), attr='wait', ctx=Load()), args=[], keywords=[keyword(arg='timeout', value=Constant(value=10))]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='psutil', ctx=Load()), attr='NoSuchProcess', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Process already terminated.')], keywords=[]))]), ExceptHandler(type=Attribute(value=Name(id='psutil', ctx=Load()), attr='TimeoutExpired', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='Timeout expired while waiting for process to terminate.')], keywords=[]))]), ExceptHandler(type=Name(id='Exception', ctx=Load()), name='e', body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='error', ctx=Load()), args=[JoinedStr(values=[Constant(value='Error waiting for process termination: '), FormattedValue(value=Name(id='e', ctx=Load()), conversion=-1)])], keywords=[]))])], orelse=[], finalbody=[]), For(target=Name(id='command_id', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='running_processes', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Subscript(value=Name(id='running_processes', ctx=Load()), slice=Name(id='command_id', ctx=Load()), ctx=Load()), slice=Constant(value=1), ctx=Load()), ops=[Eq()], comparators=[Name(id='pid', ctx=Load())]), body=[Delete(targets=[Subscript(value=Name(id='running_processes', ctx=Load()), slice=Name(id='command_id', ctx=Load()), ctx=Del())])], orelse=[])], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='read_queue_line', args=arguments(posonlyargs=[], args=[arg(arg='q'), arg(arg='stdout')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Try(body=[Assign(targets=[Name(id='line', ctx=Store())], value=Call(func=Attribute(value=Name(id='q', ctx=Load()), attr='get_nowait', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='queue', ctx=Load()), attr='Empty', ctx=Load()), body=[Return(value=Constant(value=''))])], orelse=[], finalbody=[]), If(test=Name(id='stdout', ctx=Load()), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[BinOp(left=Call(func=Name(id='color_green', ctx=Load()), args=[Constant(value='CLI OUTPUT:')], keywords=[]), op=Add(), right=Name(id='line', ctx=Load()))], keywords=[keyword(arg='end', value=Constant(value=''))])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[BinOp(left=Constant(value='CLI OUTPUT: '), op=Add(), right=Name(id='line', ctx=Load()))], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='stdout', ctx=Load())), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[BinOp(left=Call(func=Name(id='color_red', ctx=Load()), args=[Constant(value='CLI ERROR:')], keywords=[]), op=Add(), right=Name(id='line', ctx=Load()))], keywords=[keyword(arg='end', value=Constant(value=''))])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='error', ctx=Load()), args=[BinOp(left=Constant(value='CLI ERROR: '), op=Add(), right=Name(id='line', ctx=Load()))], keywords=[]))], orelse=[]), Return(value=Name(id='line', ctx=Load()))], decorator_list=[]), FunctionDef(name='read_remaining_queue', args=arguments(posonlyargs=[], args=[arg(arg='q'), arg(arg='stdout')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Assign(targets=[Name(id='output', ctx=Store())], value=Constant(value='')), While(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='q', ctx=Load()), attr='empty', ctx=Load()), args=[], keywords=[])), body=[AugAssign(target=Name(id='output', ctx=Store()), op=Add(), value=Call(func=Name(id='read_queue_line', ctx=Load()), args=[Name(id='q', ctx=Load()), Name(id='stdout', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='output', ctx=Load()))], decorator_list=[]), FunctionDef(name='execute_command', args=arguments(posonlyargs=[], args=[arg(arg='project'), arg(arg='command'), arg(arg='timeout'), arg(arg='success_message'), arg(arg='command_id', annotation=Name(id='str', ctx=Load())), arg(arg='force')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=False)]), body=[Expr(value=Constant(value='\n    Execute a command and capture its output.\n\n    Args:\n        project: The project associated with the command.\n        command (str): The command to run.\n        timeout (int, optional): The maximum execution time in milliseconds. Default is None.\n        success_message: A message to look for in the output of the command to determine if successful or not.\n        command_id (str, optional): A unique identifier assigned by the LLM, can be used to terminate the process.\n        force (bool, optional): Whether to execute the command without confirmation. Default is False.\n    Returns:\n        cli_response (str): The command output\n                            or: `None` if user did not authorise the command to run\n        done_or_error_response (str): \'DONE\' if \'no\', \'skip\' or `success_message` matched.\n                            Otherwise, if `cli_response` is None, user\'s response to "Can I executed".\n                            If `cli_response` not None: \'was interrupted by user\', \'timed out\' or `None` - caller should send `cli_response` to LLM\n        exit_code (int): The exit code of the process.\n    ')), If(test=Compare(left=Name(id='timeout', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='timeout', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='timeout', ctx=Store())], value=Constant(value=None))], orelse=[If(test=Compare(left=Name(id='timeout', ctx=Load()), ops=[Lt()], comparators=[Constant(value=1000)]), body=[AugAssign(target=Name(id='timeout', ctx=Store()), op=Mult(), value=Constant(value=1000))], orelse=[]), Assign(targets=[Name(id='timeout', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[Call(func=Name(id='max', ctx=Load()), args=[Name(id='timeout', ctx=Load()), Name(id='MIN_COMMAND_RUN_TIME', ctx=Load())], keywords=[]), Name(id='MAX_COMMAND_RUN_TIME', ctx=Load())], keywords=[]))])], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='force', ctx=Load())), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Name(id='color_yellow_bold', ctx=Load()), args=[Constant(value='\n--------- EXECUTE COMMAND ----------')], keywords=[])], keywords=[])), Assign(targets=[Name(id='question', ctx=Store())], value=JoinedStr(values=[Constant(value='Can I execute the command: `'), FormattedValue(value=Call(func=Name(id='color_yellow_bold', ctx=Load()), args=[Name(id='command', ctx=Load())], keywords=[]), conversion=-1), Constant(value='`')])), If(test=Compare(left=Name(id='timeout', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[AugAssign(target=Name(id='question', ctx=Store()), op=Add(), value=JoinedStr(values=[Constant(value=' with '), FormattedValue(value=Name(id='timeout', ctx=Load()), conversion=-1), Constant(value='ms timeout?')]))], orelse=[AugAssign(target=Name(id='question', ctx=Store()), op=Add(), value=Constant(value='?'))]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='yes/no')], keywords=[keyword(arg='type', value=Constant(value='button'))])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='--------- EXECUTE COMMAND ---------- : %s'), Name(id='question', ctx=Load())], keywords=[])), Assign(targets=[Name(id='answer', ctx=Store())], value=Call(func=Name(id='ask_user', ctx=Load()), args=[Name(id='project', ctx=Load()), Constant(value='If yes, just press ENTER. Otherwise, type "no" but it will be processed as successfully executed.'), Constant(value=False)], keywords=[keyword(arg='hint', value=Name(id='question', ctx=Load()))])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[BinOp(left=Constant(value='answer: '), op=Add(), right=Name(id='answer', ctx=Load()))], keywords=[])), If(test=Compare(left=Call(func=Attribute(value=Name(id='answer', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), ops=[In()], comparators=[Name(id='NEGATIVE_ANSWERS', ctx=Load())]), body=[Return(value=Tuple(elts=[Constant(value=None), Constant(value='SKIP'), Constant(value=None)], ctx=Load()))], orelse=[If(test=Compare(left=Call(func=Attribute(value=Name(id='answer', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), ops=[NotIn()], comparators=[Name(id='AFFIRMATIVE_ANSWERS', ctx=Load())]), body=[Return(value=Tuple(elts=[Constant(value=None), Name(id='answer', ctx=Load()), Constant(value=None)], ctx=Load()))], orelse=[])])], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='system', ctx=Load()), args=[], keywords=[]), ops=[NotEq()], comparators=[Constant(value='Windows')]), BoolOp(op=Or(), values=[Compare(left=Constant(value='cd '), ops=[In()], comparators=[Name(id='command', ctx=Load())]), Compare(left=Constant(value='source '), ops=[In()], comparators=[Name(id='command', ctx=Load())])])]), body=[Assign(targets=[Name(id='command', ctx=Store())], value=BinOp(left=BinOp(left=Constant(value="bash -c '"), op=Add(), right=Name(id='command', ctx=Load())), op=Add(), right=Constant(value="'")))], orelse=[]), AugAssign(target=Attribute(value=Name(id='project', ctx=Load()), attr='command_runs_count', ctx=Store()), op=Add(), value=Constant(value=1)), Assign(targets=[Name(id='command_run', ctx=Store())], value=Call(func=Name(id='get_saved_command_run', ctx=Load()), args=[Name(id='project', ctx=Load()), Name(id='command', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='command_run', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Attribute(value=Name(id='project', ctx=Load()), attr='skip_steps', ctx=Load())]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='project', ctx=Load()), attr='checkpoints', ctx=Load()), slice=Constant(value='last_command_run'), ctx=Store())], value=Name(id='command_run', ctx=Load())), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Name(id='color_yellow', ctx=Load()), args=[JoinedStr(values=[Constant(value='Restoring command run response id '), FormattedValue(value=Attribute(value=Name(id='command_run', ctx=Load()), attr='id', ctx=Load()), conversion=-1), Constant(value=':\n```\n'), FormattedValue(value=Attribute(value=Name(id='command_run', ctx=Load()), attr='cli_response', ctx=Load()), conversion=-1), Constant(value='```')])], keywords=[])], keywords=[])), Return(value=Tuple(elts=[Attribute(value=Name(id='command_run', ctx=Load()), attr='cli_response', ctx=Load()), Attribute(value=Name(id='command_run', ctx=Load()), attr='done_or_error_response', ctx=Load()), Attribute(value=Name(id='command_run', ctx=Load()), attr='exit_code', ctx=Load())], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='return_value', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='done_or_error_response', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='q_stderr', ctx=Store())], value=Call(func=Attribute(value=Name(id='queue', ctx=Load()), attr='Queue', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='q', ctx=Store())], value=Call(func=Attribute(value=Name(id='queue', ctx=Load()), attr='Queue', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='process', ctx=Store())], value=Call(func=Name(id='run_command', ctx=Load()), args=[Name(id='command', ctx=Load()), Attribute(value=Name(id='project', ctx=Load()), attr='root_path', ctx=Load()), Name(id='q', ctx=Load()), Name(id='q_stderr', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='command_id', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Name(id='terminate_named_process', ctx=Load()), args=[Name(id='command_id', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='running_processes', ctx=Load()), slice=Name(id='command_id', ctx=Load()), ctx=Store())], value=Tuple(elts=[Name(id='command', ctx=Load()), Attribute(value=Name(id='process', ctx=Load()), attr='pid', ctx=Load())], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='output', ctx=Store())], value=Constant(value='')), Assign(targets=[Name(id='stderr_output', ctx=Store())], value=Constant(value='')), Assign(targets=[Name(id='start_time', ctx=Store())], value=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='time', ctx=Load()), args=[], keywords=[])), Try(body=[While(test=Constant(value=True), body=[Assign(targets=[Name(id='elapsed_time', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='time', ctx=Load()), args=[], keywords=[]), op=Sub(), right=Name(id='start_time', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='sleep', ctx=Load()), args=[Constant(value=0.1)], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='timeout', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=BinOp(left=Name(id='elapsed_time', ctx=Load()), op=Mult(), right=Constant(value=1000)), ops=[Gt()], comparators=[Name(id='timeout', ctx=Load())])]), body=[If(test=Compare(left=Name(id='command_id', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[JoinedStr(values=[Constant(value='Process "'), FormattedValue(value=Name(id='command_id', ctx=Load()), conversion=-1), Constant(value='" running after timeout as pid: '), FormattedValue(value=Attribute(value=Name(id='process', ctx=Load()), attr='pid', ctx=Load()), conversion=-1)])], keywords=[])), Break()], orelse=[]), Raise(exc=Call(func=Name(id='TimeoutError', ctx=Load()), args=[Constant(value='Command exceeded the specified timeout.')], keywords=[]))], orelse=[]), AugAssign(target=Name(id='output', ctx=Store()), op=Add(), value=Call(func=Name(id='read_queue_line', ctx=Load()), args=[Name(id='q', ctx=Load())], keywords=[])), AugAssign(target=Name(id='stderr_output', ctx=Store()), op=Add(), value=Call(func=Name(id='read_queue_line', ctx=Load()), args=[Name(id='q_stderr', ctx=Load()), Constant(value=False)], keywords=[])), If(test=Compare(left=Call(func=Attribute(value=Name(id='process', ctx=Load()), attr='poll', ctx=Load()), args=[], keywords=[]), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='process exited with return code: %d'), Attribute(value=Name(id='process', ctx=Load()), attr='returncode', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='command_id', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Delete(targets=[Subscript(value=Name(id='running_processes', ctx=Load()), slice=Name(id='command_id', ctx=Load()), ctx=Del())])], orelse=[]), AugAssign(target=Name(id='output', ctx=Store()), op=Add(), value=Call(func=Name(id='read_remaining_queue', ctx=Load()), args=[Name(id='q', ctx=Load())], keywords=[])), AugAssign(target=Name(id='stderr_output', ctx=Store()), op=Add(), value=Call(func=Name(id='read_remaining_queue', ctx=Load()), args=[Name(id='q_stderr', ctx=Load()), Constant(value=False)], keywords=[])), Break()], orelse=[])], orelse=[])], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='KeyboardInterrupt', ctx=Load()), Name(id='TimeoutError', ctx=Load()), Name(id='CommandFinishedEarly', ctx=Load())], ctx=Load()), name='e', body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='e', ctx=Load()), Name(id='KeyboardInterrupt', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='\nCTRL+C detected. Stopping command execution...')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='CTRL+C detected. Stopping command execution...')], keywords=[])), Assign(targets=[Name(id='done_or_error_response', ctx=Store())], value=Constant(value='was interrupted by user'))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='e', ctx=Load()), Name(id='TimeoutError', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='\nTimeout detected. Stopping command execution...')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='Timeout detected. Stopping command execution...')], keywords=[])), Assign(targets=[Name(id='done_or_error_response', ctx=Store())], value=JoinedStr(values=[Constant(value='took longer than '), FormattedValue(value=Name(id='timeout', ctx=Load()), conversion=-1), Constant(value='ms so I killed it')]))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='e', ctx=Load()), Name(id='CommandFinishedEarly', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='\nCommand finished before timeout. Handling early completion...')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Command finished before timeout. Handling early completion...')], keywords=[])), Assign(targets=[Name(id='done_or_error_response', ctx=Store())], value=Constant(value='DONE'))], orelse=[])])])])], orelse=[], finalbody=[Assign(targets=[Name(id='done_or_error_response', ctx=Store())], value=Constant(value='DONE')), Expr(value=Call(func=Name(id='terminate_process', ctx=Load()), args=[Attribute(value=Name(id='process', ctx=Load()), attr='pid', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='process', ctx=Load()), attr='poll', ctx=Load()), args=[], keywords=[]))]), Assign(targets=[Name(id='elapsed_time', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='time', ctx=Load()), args=[], keywords=[]), op=Sub(), right=Name(id='start_time', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[JoinedStr(values=[Constant(value='`'), FormattedValue(value=Name(id='command', ctx=Load()), conversion=-1), Constant(value='` took '), FormattedValue(value=Call(func=Name(id='round', ctx=Load()), args=[BinOp(left=Name(id='elapsed_time', ctx=Load()), op=Mult(), right=Constant(value=1000))], keywords=[]), conversion=-1), Constant(value='ms to execute.')])], keywords=[])), If(test=Compare(left=Name(id='return_value', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='return_value', ctx=Store())], value=Constant(value='')), If(test=Compare(left=Name(id='stderr_output', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='')]), body=[Assign(targets=[Name(id='return_value', ctx=Store())], value=BinOp(left=BinOp(left=Constant(value='stderr:\n```\n'), op=Add(), right=Subscript(value=Name(id='stderr_output', ctx=Load()), slice=Slice(lower=Constant(value=0), upper=Name(id='MAX_COMMAND_OUTPUT_LENGTH', ctx=Load())), ctx=Load())), op=Add(), right=Constant(value='\n```\n')))], orelse=[]), AugAssign(target=Name(id='return_value', ctx=Store()), op=Add(), value=BinOp(left=BinOp(left=Constant(value='stdout:\n```\n'), op=Add(), right=Subscript(value=Name(id='output', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Name(id='MAX_COMMAND_OUTPUT_LENGTH', ctx=Load()))), ctx=Load())), op=Add(), right=Constant(value='\n```')))], orelse=[]), Expr(value=Call(func=Name(id='save_command_run', ctx=Load()), args=[Name(id='project', ctx=Load()), Name(id='command', ctx=Load()), Name(id='return_value', ctx=Load()), Name(id='done_or_error_response', ctx=Load()), Attribute(value=Name(id='process', ctx=Load()), attr='returncode', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Name(id='return_value', ctx=Load()), Name(id='done_or_error_response', ctx=Load()), Attribute(value=Name(id='process', ctx=Load()), attr='returncode', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load())), FunctionDef(name='check_if_command_successful', args=arguments(posonlyargs=[], args=[arg(arg='convo'), arg(arg='command'), arg(arg='cli_response'), arg(arg='response'), arg(arg='exit_code'), arg(arg='additional_message')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='cli_response', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[JoinedStr(values=[Constant(value='`'), FormattedValue(value=Name(id='command', ctx=Load()), conversion=-1), Constant(value='` ended with exit code: '), FormattedValue(value=Name(id='exit_code', ctx=Load()), conversion=-1)])], keywords=[])), If(test=Compare(left=Name(id='exit_code', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Name(id='color_red', ctx=Load()), args=[JoinedStr(values=[Constant(value='Process for command '), FormattedValue(value=Name(id='command', ctx=Load()), conversion=-1), Constant(value=' still running.')])], keywords=[])], keywords=[])), Assign(targets=[Name(id='response', ctx=Store())], value=Constant(value='DONE'))], orelse=[Assign(targets=[Name(id='response', ctx=Store())], value=Call(func=Attribute(value=Name(id='convo', ctx=Load()), attr='send_message', ctx=Load()), args=[Constant(value='dev_ops/ran_command.prompt'), Dict(keys=[Constant(value='cli_response'), Constant(value='error_response'), Constant(value='command'), Constant(value='additional_message'), Constant(value='exit_code')], values=[Name(id='cli_response', ctx=Load()), Name(id='response', ctx=Load()), Name(id='command', ctx=Load()), Name(id='additional_message', ctx=Load()), Name(id='exit_code', ctx=Load())])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[JoinedStr(values=[Constant(value='LLM response to ran_command.prompt: '), FormattedValue(value=Name(id='response', ctx=Load()), conversion=-1)])], keywords=[]))])], orelse=[]), Return(value=Name(id='response', ctx=Load()))], decorator_list=[]), FunctionDef(name='build_directory_tree', args=arguments(posonlyargs=[], args=[arg(arg='path'), arg(arg='prefix'), arg(arg='is_root'), arg(arg='ignore')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=''), Constant(value=True), Constant(value=None)]), body=[Expr(value=Constant(value='Build the directory tree structure in a simplified format.\n\n    Args:\n    - path: The starting directory path.\n    - prefix: Prefix for the current item, used for recursion.\n    - is_root: Flag to indicate if the current item is the root directory.\n    - ignore: a list of directories to ignore\n\n    Returns:\n    - A string representation of the directory tree.\n    ')), Assign(targets=[Name(id='output', ctx=Store())], value=Constant(value='')), Assign(targets=[Name(id='indent', ctx=Store())], value=Constant(value='  ')), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isdir', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='dir_name', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='basename', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), If(test=Name(id='is_root', ctx=Load()), body=[AugAssign(target=Name(id='output', ctx=Store()), op=Add(), value=Constant(value='/'))], orelse=[AugAssign(target=Name(id='output', ctx=Store()), op=Add(), value=JoinedStr(values=[FormattedValue(value=Name(id='prefix', ctx=Load()), conversion=-1), Constant(value='/'), FormattedValue(value=Name(id='dir_name', ctx=Load()), conversion=-1)]))]), Assign(targets=[Name(id='items', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='listdir', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), Assign(targets=[Name(id='dirs', ctx=Store())], value=ListComp(elt=Name(id='item', ctx=Load()), generators=[comprehension(target=Name(id='item', ctx=Store()), iter=Name(id='items', ctx=Load()), ifs=[BoolOp(op=And(), values=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isdir', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='path', ctx=Load()), Name(id='item', ctx=Load())], keywords=[])], keywords=[]), Compare(left=Name(id='item', ctx=Load()), ops=[NotIn()], comparators=[Name(id='ignore', ctx=Load())])])], is_async=0)])), Assign(targets=[Name(id='files', ctx=Store())], value=ListComp(elt=Name(id='item', ctx=Load()), generators=[comprehension(target=Name(id='item', ctx=Store()), iter=Name(id='items', ctx=Load()), ifs=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isfile', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='path', ctx=Load()), Name(id='item', ctx=Load())], keywords=[])], keywords=[])], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='dirs', ctx=Load()), attr='sort', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='files', ctx=Load()), attr='sort', ctx=Load()), args=[], keywords=[])), If(test=Name(id='dirs', ctx=Load()), body=[AugAssign(target=Name(id='output', ctx=Store()), op=Add(), value=Constant(value='\n')), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='dir_item', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='dirs', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='item_path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='path', ctx=Load()), Name(id='dir_item', ctx=Load())], keywords=[])), AugAssign(target=Name(id='output', ctx=Store()), op=Add(), value=Call(func=Name(id='build_directory_tree', ctx=Load()), args=[Name(id='item_path', ctx=Load()), BinOp(left=Name(id='prefix', ctx=Load()), op=Add(), right=Name(id='indent', ctx=Load()))], keywords=[keyword(arg='is_root', value=Constant(value=False)), keyword(arg='ignore', value=Name(id='ignore', ctx=Load()))]))], orelse=[]), If(test=Name(id='files', ctx=Load()), body=[AugAssign(target=Name(id='output', ctx=Store()), op=Add(), value=JoinedStr(values=[FormattedValue(value=Name(id='prefix', ctx=Load()), conversion=-1), Constant(value='  '), FormattedValue(value=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Name(id='files', ctx=Load())], keywords=[]), conversion=-1), Constant(value='\n')]))], orelse=[])], orelse=[If(test=Name(id='files', ctx=Load()), body=[AugAssign(target=Name(id='output', ctx=Store()), op=Add(), value=JoinedStr(values=[Constant(value=': '), FormattedValue(value=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Name(id='files', ctx=Load())], keywords=[]), conversion=-1), Constant(value='\n')]))], orelse=[AugAssign(target=Name(id='output', ctx=Store()), op=Add(), value=Constant(value='\n'))])])], orelse=[]), Return(value=Name(id='output', ctx=Load()))], decorator_list=[]), FunctionDef(name='res_for_build_directory_tree', args=arguments(posonlyargs=[], args=[arg(arg='path'), arg(arg='files')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Return(value=IfExp(test=BoolOp(op=And(), values=[Name(id='files', ctx=Load()), Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='basename', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), ops=[In()], comparators=[Name(id='files', ctx=Load())])]), body=BinOp(left=BinOp(left=Constant(value=' - '), op=Add(), right=Attribute(value=Subscript(value=Name(id='files', ctx=Load()), slice=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='basename', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), ctx=Load()), attr='description', ctx=Load())), op=Add(), right=Constant(value=' ')), orelse=Constant(value='')))], decorator_list=[]), FunctionDef(name='build_directory_tree_with_descriptions', args=arguments(posonlyargs=[], args=[arg(arg='path'), arg(arg='prefix'), arg(arg='ignore'), arg(arg='is_last'), arg(arg='files')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=''), Constant(value=None), Constant(value=False), Constant(value=None)]), body=[Expr(value=Constant(value='Build the directory tree structure in tree-like format.\n   Args:\n   - path: The starting directory path.\n   - prefix: Prefix for the current item, used for recursion.\n   - ignore: List of directory names to ignore.\n   - is_last: Flag to indicate if the current item is the last in its parent directory.\n   Returns:\n   - A string representation of the directory tree.\n   ')), AugAssign(target=Name(id='ignore', ctx=Store()), op=BitOr(), value=List(elts=[], ctx=Load())), If(test=Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='basename', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), ops=[In()], comparators=[Name(id='ignore', ctx=Load())]), body=[Return(value=Constant(value=''))], orelse=[]), Assign(targets=[Name(id='output', ctx=Store())], value=Constant(value='')), Assign(targets=[Name(id='indent', ctx=Store())], value=IfExp(test=UnaryOp(op=Not(), operand=Name(id='is_last', ctx=Load())), body=Constant(value='|   '), orelse=Constant(value='    '))), AugAssign(target=Name(id='output', ctx=Store()), op=Add(), value=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='prefix', ctx=Load()), op=Add(), right=Constant(value='|-- ')), op=Add(), right=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='basename', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), op=Add(), right=Call(func=Name(id='res_for_build_directory_tree', ctx=Load()), args=[Name(id='path', ctx=Load()), Name(id='files', ctx=Load())], keywords=[])), op=Add(), right=Constant(value='/\n'))), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isdir', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='items', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='listdir', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='item', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='items', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='item_path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='path', ctx=Load()), Name(id='item', ctx=Load())], keywords=[])), AugAssign(target=Name(id='output', ctx=Store()), op=Add(), value=Call(func=Name(id='build_directory_tree', ctx=Load()), args=[Name(id='item_path', ctx=Load()), BinOp(left=Name(id='prefix', ctx=Load()), op=Add(), right=Name(id='indent', ctx=Load())), Name(id='ignore', ctx=Load()), Compare(left=Name(id='index', ctx=Load()), ops=[Eq()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='items', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))]), Name(id='files', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='output', ctx=Load()))], decorator_list=[]), FunctionDef(name='execute_command_and_check_cli_response', args=arguments(posonlyargs=[], args=[arg(arg='convo'), arg(arg='command', annotation=Name(id='dict', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Execute a command and check its CLI response.\n\n    Args:\n        convo (AgentConvo): The conversation object.\n        command (dict):\n          [\'command\'] (str): The command to run.\n          [\'timeout\'] (int): The maximum execution time in milliseconds.\n\n\n    Returns:\n        tuple: A tuple containing the CLI response and the agent\'s response.\n            - cli_response (str): The command output.\n            - response (str): \'DONE\' or \'NEEDS_DEBUGGING\'.\n                If `cli_response` is None, user\'s response to "Can I execute...".\n    ')), Assign(targets=[Name(id='command_id', ctx=Store())], value=IfExp(test=Compare(left=Constant(value='command_id'), ops=[In()], comparators=[Name(id='command', ctx=Load())]), body=Subscript(value=Name(id='command', ctx=Load()), slice=Constant(value='command_id'), ctx=Load()), orelse=Constant(value=None))), Assign(targets=[Tuple(elts=[Name(id='cli_response', ctx=Store()), Name(id='response', ctx=Store()), Name(id='exit_code', ctx=Store())], ctx=Store())], value=Call(func=Name(id='execute_command', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='convo', ctx=Load()), attr='agent', ctx=Load()), attr='project', ctx=Load()), Subscript(value=Name(id='command', ctx=Load()), slice=Constant(value='command'), ctx=Load())], keywords=[keyword(arg='timeout', value=Subscript(value=Name(id='command', ctx=Load()), slice=Constant(value='timeout'), ctx=Load())), keyword(arg='command_id', value=Name(id='command_id', ctx=Load()))])), Assign(targets=[Name(id='response', ctx=Store())], value=Call(func=Name(id='check_if_command_successful', ctx=Load()), args=[Name(id='convo', ctx=Load()), Subscript(value=Name(id='command', ctx=Load()), slice=Constant(value='command'), ctx=Load()), Name(id='cli_response', ctx=Load()), Name(id='response', ctx=Load()), Name(id='exit_code', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Name(id='cli_response', ctx=Load()), Name(id='response', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='run_command_until_success', args=arguments(posonlyargs=[], args=[arg(arg='convo'), arg(arg='command'), arg(arg='timeout', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load())), arg(arg='command_id', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load())), arg(arg='success_message'), arg(arg='additional_message'), arg(arg='force'), arg(arg='return_cli_response'), arg(arg='success_with_cli_response'), arg(arg='is_root_task')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=False), Constant(value=False), Constant(value=False), Constant(value=False)]), body=[Expr(value=Constant(value='\n    Run a command until it succeeds or reaches a timeout.\n\n    Args:\n        convo (AgentConvo): The conversation object.\n        command (str): The command to run.\n        timeout (int): The maximum execution time in milliseconds.\n        command_id: A name for the process.\n                      If `timeout` is not provided, can be used to terminate the process.\n        success_message: A message to look for in the output of the command to determine if successful or not.\n        additional_message (str, optional): Additional message to include in the "I ran the command..." prompt.\n        force (bool, optional): Whether to execute the command without confirmation. Default is False.\n        return_cli_response (bool, optional): If True, may raise TooDeepRecursionError(cli_response)\n        success_with_cli_response (bool, optional): If True, simply send the cli_response back to the caller without checking with LLM.\n                                                    The LLM has asked to see the output and may update the task step list.\n        is_root_task (bool, optional): If True and TokenLimitError is raised, will call `convo.load_branch(reset_branch_id)`\n\n    Returns:\n        - \'success\': bool,\n        - \'cli_response\': ```stdout: <stdout> stderr: <stderr>```\n        - \'user_input\': `None` or user\'s objection to running the command\n    ')), Assign(targets=[Tuple(elts=[Name(id='cli_response', ctx=Store()), Name(id='response', ctx=Store()), Name(id='exit_code', ctx=Store())], ctx=Store())], value=Call(func=Name(id='execute_command', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='convo', ctx=Load()), attr='agent', ctx=Load()), attr='project', ctx=Load()), Name(id='command', ctx=Load())], keywords=[keyword(arg='timeout', value=Name(id='timeout', ctx=Load())), keyword(arg='success_message', value=Name(id='success_message', ctx=Load())), keyword(arg='command_id', value=Name(id='command_id', ctx=Load())), keyword(arg='force', value=Name(id='force', ctx=Load()))])), If(test=BoolOp(op=And(), values=[Name(id='success_with_cli_response', ctx=Load()), Compare(left=Name(id='cli_response', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Return(value=Dict(keys=[Constant(value='success'), Constant(value='cli_response')], values=[Constant(value=True), Name(id='cli_response', ctx=Load())]))], orelse=[]), If(test=Compare(left=Name(id='response', ctx=Load()), ops=[Eq()], comparators=[Constant(value='SKIP')]), body=[Return(value=Dict(keys=[Constant(value='success'), Constant(value='user_input')], values=[Constant(value=True), Name(id='response', ctx=Load())]))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='cli_response', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Name(id='response', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='DONE')])]), body=[Return(value=Dict(keys=[Constant(value='success'), Constant(value='user_input')], values=[Constant(value=False), Name(id='response', ctx=Load())]))], orelse=[]), Assign(targets=[Name(id='response', ctx=Store())], value=Call(func=Name(id='check_if_command_successful', ctx=Load()), args=[Name(id='convo', ctx=Load()), Name(id='command', ctx=Load()), Name(id='cli_response', ctx=Load()), Name(id='response', ctx=Load()), Name(id='exit_code', ctx=Load()), Name(id='additional_message', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='response', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='DONE')]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Name(id='color_red', ctx=Load()), args=[Constant(value='Got incorrect CLI response:')], keywords=[])], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='cli_response', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Name(id='color_red', ctx=Load()), args=[Constant(value='-------------------')], keywords=[])], keywords=[])), Assign(targets=[Name(id='reset_branch_id', ctx=Store())], value=Call(func=Attribute(value=Name(id='convo', ctx=Load()), attr='save_branch', ctx=Load()), args=[], keywords=[])), While(test=Constant(value=True), body=[Try(body=[Assign(targets=[Name(id='success', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='convo', ctx=Load()), attr='agent', ctx=Load()), attr='debugger', ctx=Load()), attr='debug', ctx=Load()), args=[Name(id='convo', ctx=Load()), Dict(keys=[Constant(value='command'), Constant(value='timeout'), Constant(value='command_id'), Constant(value='success_message')], values=[Name(id='command', ctx=Load()), Name(id='timeout', ctx=Load()), Name(id='command_id', ctx=Load()), Name(id='success_message', ctx=Load())])], keywords=[keyword(arg='user_input', value=Name(id='cli_response', ctx=Load())), keyword(arg='is_root_task', value=Name(id='is_root_task', ctx=Load())), keyword(arg='ask_before_debug', value=Constant(value=True))])), Return(value=Dict(keys=[Constant(value='success'), Constant(value='cli_response')], values=[Name(id='success', ctx=Load()), Name(id='cli_response', ctx=Load())]))], handlers=[ExceptHandler(type=Name(id='TooDeepRecursionError', ctx=Load()), name='e', body=[Raise(exc=IfExp(test=Name(id='return_cli_response', ctx=Load()), body=Call(func=Name(id='TooDeepRecursionError', ctx=Load()), args=[Name(id='cli_response', ctx=Load())], keywords=[]), orelse=Name(id='e', ctx=Load())))]), ExceptHandler(type=Name(id='TokenLimitError', ctx=Load()), name='e', body=[If(test=Name(id='is_root_task', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='convo', ctx=Load()), attr='load_branch', ctx=Load()), args=[Name(id='reset_branch_id', ctx=Load())], keywords=[]))], orelse=[Raise(exc=Name(id='e', ctx=Load()))])])], orelse=[], finalbody=[])], orelse=[])], orelse=[Return(value=Dict(keys=[Constant(value='success'), Constant(value='cli_response')], values=[Constant(value=True), Name(id='cli_response', ctx=Load())]))])], decorator_list=[])], type_ignores=[])