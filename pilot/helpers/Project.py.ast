Module(body=[Import(names=[alias(name='json')]), Import(names=[alias(name='os')]), ImportFrom(module='pathlib', names=[alias(name='Path')], level=0), Import(names=[alias(name='re')]), ImportFrom(module='typing', names=[alias(name='Tuple')], level=0), ImportFrom(module='const.messages', names=[alias(name='CHECK_AND_CONTINUE'), alias(name='AFFIRMATIVE_ANSWERS'), alias(name='NEGATIVE_ANSWERS')], level=0), ImportFrom(module='utils.style', names=[alias(name='color_yellow_bold'), alias(name='color_cyan'), alias(name='color_white_bold'), alias(name='color_green')], level=0), ImportFrom(module='const.common', names=[alias(name='IGNORE_FOLDERS'), alias(name='STEPS')], level=0), ImportFrom(module='database.database', names=[alias(name='delete_unconnected_steps_from'), alias(name='delete_all_app_development_data'), alias(name='update_app_status')], level=0), ImportFrom(module='const.ipc', names=[alias(name='MESSAGE_TYPE')], level=0), ImportFrom(module='prompts.prompts', names=[alias(name='ask_user')], level=0), ImportFrom(module='helpers.exceptions.TokenLimitError', names=[alias(name='TokenLimitError')], level=0), ImportFrom(module='utils.questionary', names=[alias(name='styled_text')], level=0), ImportFrom(module='helpers.files', names=[alias(name='get_directory_contents'), alias(name='get_file_contents'), alias(name='clear_directory'), alias(name='update_file')], level=0), ImportFrom(module='helpers.cli', names=[alias(name='build_directory_tree')], level=0), ImportFrom(module='helpers.agents.TechLead', names=[alias(name='TechLead')], level=0), ImportFrom(module='helpers.agents.Developer', names=[alias(name='Developer')], level=0), ImportFrom(module='helpers.agents.Architect', names=[alias(name='Architect')], level=0), ImportFrom(module='helpers.agents.ProductOwner', names=[alias(name='ProductOwner')], level=0), ImportFrom(module='helpers.agents.TechnicalWriter', names=[alias(name='TechnicalWriter')], level=0), ImportFrom(module='database.models.development_steps', names=[alias(name='DevelopmentSteps')], level=0), ImportFrom(module='database.models.file_snapshot', names=[alias(name='FileSnapshot')], level=0), ImportFrom(module='database.models.files', names=[alias(name='File')], level=0), ImportFrom(module='logger.logger', names=[alias(name='logger')], level=0), ImportFrom(module='utils.dot_gpt_pilot', names=[alias(name='DotGptPilot')], level=0), ImportFrom(module='utils.telemetry', names=[alias(name='telemetry')], level=0), ClassDef(name='Project', bases=[], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='args'), arg(arg='name'), arg(arg='project_description'), arg(arg='clarifications'), arg(arg='user_stories'), arg(arg='user_tasks'), arg(arg='architecture'), arg(arg='development_plan'), arg(arg='current_step'), arg(arg='ipc_client_instance'), arg(arg='enable_dot_pilot_gpt')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=True)]), body=[Expr(value=Constant(value='\n        Initialize a project.\n\n        Args:\n            args (dict): Project arguments - app_id, (app_type, name), user_id, email, password, step\n            name (str, optional): Project name. Default is None.\n            description (str, optional): Project description. Default is None.\n            user_stories (list, optional): List of user stories. Default is None.\n            user_tasks (list, optional): List of user tasks. Default is None.\n            architecture (str, optional): Project architecture. Default is None.\n            development_plan (str, optional): Development plan. Default is None.\n            current_step (str, optional): Current step in the project. Default is None.\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='args', ctx=Store())], value=Name(id='args', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='llm_req_num', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='command_runs_count', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='user_inputs_count', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='checkpoints', ctx=Store())], value=Dict(keys=[Constant(value='last_user_input'), Constant(value='last_command_run'), Constant(value='last_development_step')], values=[Constant(value=None), Constant(value=None), Constant(value=None)])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='root_path', ctx=Store())], value=Constant(value='')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='skip_until_dev_step', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='skip_steps', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='main_prompt', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='files', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='continuing_project', ctx=Store())], value=Call(func=Attribute(value=Name(id='args', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='continuing_project'), Constant(value=False)], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='ipc_client_instance', ctx=Store())], value=Name(id='ipc_client_instance', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='finished', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='current_step', ctx=Store())], value=Name(id='current_step', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Store())], value=Name(id='name', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='project_description', ctx=Store())], value=Name(id='project_description', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='clarifications', ctx=Store())], value=Name(id='clarifications', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='user_stories', ctx=Store())], value=Name(id='user_stories', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='user_tasks', ctx=Store())], value=Name(id='user_tasks', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='architecture', ctx=Store())], value=Name(id='architecture', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='development_plan', ctx=Store())], value=Name(id='development_plan', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='dot_pilot_gpt', ctx=Store())], value=Call(func=Name(id='DotGptPilot', ctx=Load()), args=[], keywords=[keyword(arg='log_chat_completions', value=Name(id='enable_dot_pilot_gpt', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='set_root_path', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='root_path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='root_path', ctx=Store())], value=Name(id='root_path', ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='dot_pilot_gpt', ctx=Load()), attr='with_root_path', ctx=Load()), args=[Name(id='root_path', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='start', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Start the project.\n        ')), Expr(value=Call(func=Attribute(value=Name(id='telemetry', ctx=Load()), attr='start', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='project_manager', ctx=Store())], value=Call(func=Name(id='ProductOwner', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project_manager', ctx=Load()), attr='get_project_description', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project_manager', ctx=Load()), attr='get_user_stories', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='architect', ctx=Store())], value=Call(func=Name(id='Architect', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='architect', ctx=Load()), attr='get_architecture', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='developer', ctx=Store())], value=Call(func=Name(id='Developer', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='developer', ctx=Load()), attr='set_up_environment', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='technical_writer', ctx=Store())], value=Call(func=Name(id='TechnicalWriter', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='tech_lead', ctx=Store())], value=Call(func=Name(id='TechLead', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='tech_lead', ctx=Load()), attr='create_development_plan', ctx=Load()), args=[], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='args', ctx=Load()), slice=Constant(value='step'), ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Call(func=Attribute(value=Name(id='STEPS', ctx=Load()), attr='index', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='args', ctx=Load()), slice=Constant(value='step'), ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Call(func=Attribute(value=Name(id='STEPS', ctx=Load()), attr='index', ctx=Load()), args=[Constant(value='coding')], keywords=[])])]), body=[Expr(value=Call(func=Name(id='clear_directory', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='root_path', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='delete_all_app_development_data', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='args', ctx=Load()), slice=Constant(value='app_id'), ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='skip_steps', ctx=Store())], value=Constant(value=False))], orelse=[]), If(test=Compare(left=Constant(value='skip_until_dev_step'), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='args', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='skip_until_dev_step', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='args', ctx=Load()), slice=Constant(value='skip_until_dev_step'), ctx=Load())), If(test=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='args', ctx=Load()), slice=Constant(value='skip_until_dev_step'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='0')]), body=[Expr(value=Call(func=Name(id='clear_directory', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='root_path', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='delete_all_app_development_data', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='args', ctx=Load()), slice=Constant(value='app_id'), ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='skip_steps', ctx=Store())], value=Constant(value=False))], orelse=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='skip_until_dev_step', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='should_overwrite_files', ctx=Store())], value=Constant(value=None)), While(test=BoolOp(op=Or(), values=[Compare(left=Name(id='should_overwrite_files', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Call(func=Attribute(value=Name(id='should_overwrite_files', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), ops=[NotIn()], comparators=[BinOp(left=Name(id='AFFIRMATIVE_ANSWERS', ctx=Load()), op=Add(), right=Name(id='NEGATIVE_ANSWERS', ctx=Load()))])]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='yes/no')], keywords=[keyword(arg='type', value=Constant(value='button'))])), Assign(targets=[Name(id='should_overwrite_files', ctx=Store())], value=Call(func=Name(id='styled_text', ctx=Load()), args=[Name(id='self', ctx=Load()), Constant(value='Can I overwrite any changes that you might have made to the project since last running GPT Pilot (y/n)?')], keywords=[keyword(arg='ignore_user_input_count', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='should_overwrite_files: %s'), Name(id='should_overwrite_files', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='should_overwrite_files', ctx=Load()), ops=[In()], comparators=[Name(id='NEGATIVE_ANSWERS', ctx=Load())]), body=[Break()], orelse=[If(test=Compare(left=Name(id='should_overwrite_files', ctx=Load()), ops=[In()], comparators=[Name(id='AFFIRMATIVE_ANSWERS', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='FileSnapshot', ctx=Load()), attr='delete', ctx=Load()), args=[], keywords=[]), attr='where', ctx=Load()), args=[BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='FileSnapshot', ctx=Load()), attr='app', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='app', ctx=Load())]), Compare(left=Attribute(value=Name(id='FileSnapshot', ctx=Load()), attr='development_step', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='skip_until_dev_step', ctx=Load())])])], keywords=[]), attr='execute', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='save_files_snapshot', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='skip_until_dev_step', ctx=Load())], keywords=[])), Break()], orelse=[])])], orelse=[])], orelse=[])])], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='dot_pilot_gpt', ctx=Load()), attr='write_project', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dumps', ctx=Load()), args=[Dict(keys=[Constant(value='project_stage')], values=[Constant(value='coding')])], keywords=[])], keywords=[keyword(arg='type', value=Constant(value='info'))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='developer', ctx=Load()), attr='start_coding', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='finish', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Finish the project.\n        ')), While(test=Constant(value=True), body=[Assign(targets=[Name(id='feature_description', ctx=Store())], value=Call(func=Name(id='ask_user', ctx=Load()), args=[Name(id='self', ctx=Load()), Constant(value='Project is finished! Do you want to add any features or changes? If yes, describe it here and if no, just press ENTER')], keywords=[keyword(arg='require_some_input', value=Constant(value=False))])), If(test=Compare(left=Name(id='feature_description', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return()], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='tech_lead', ctx=Load()), attr='create_feature_plan', ctx=Load()), args=[Name(id='feature_description', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='developer', ctx=Load()), attr='start_coding', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='tech_lead', ctx=Load()), attr='create_feature_summary', ctx=Load()), args=[Name(id='feature_description', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='get_directory_tree', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='with_descriptions')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value='\n        Get the directory tree of the project.\n\n        Args:\n            with_descriptions (bool, optional): Whether to include descriptions. Default is False.\n\n        Returns:\n            dict: The directory tree.\n        ')), Return(value=Call(func=Name(id='build_directory_tree', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='root_path', ctx=Load())], keywords=[keyword(arg='ignore', value=Name(id='IGNORE_FOLDERS', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='get_test_directory_tree', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Get the directory tree of the tests.\n\n        Returns:\n            dict: The directory tree of tests.\n        ')), Return(value=Call(func=Name(id='build_directory_tree', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='root_path', ctx=Load()), op=Add(), right=Constant(value='/tests'))], keywords=[keyword(arg='ignore', value=Name(id='IGNORE_FOLDERS', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='get_all_coded_files', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Get all coded files in the project.\n\n        Returns:\n            list: A list of coded files.\n        ')), Assign(targets=[Name(id='files', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='File', ctx=Load()), attr='select', ctx=Load()), args=[], keywords=[]), attr='where', ctx=Load()), args=[Compare(left=Attribute(value=Name(id='File', ctx=Load()), attr='app_id', ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='args', ctx=Load()), slice=Constant(value='app_id'), ctx=Load())])], keywords=[])), Assign(targets=[Name(id='files', ctx=Store())], value=ListComp(elt=Name(id='file', ctx=Load()), generators=[comprehension(target=Name(id='file', ctx=Store()), iter=Name(id='files', ctx=Load()), ifs=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='FileSnapshot', ctx=Load()), attr='select', ctx=Load()), args=[], keywords=[]), attr='where', ctx=Load()), args=[Compare(left=Attribute(value=Name(id='FileSnapshot', ctx=Load()), attr='file_id', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='file', ctx=Load()), attr='id', ctx=Load())])], keywords=[])], keywords=[]), ops=[Gt()], comparators=[Constant(value=0)])], is_async=0)])), Assign(targets=[Name(id='files', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_files', ctx=Load()), args=[ListComp(elt=BinOp(left=BinOp(left=Attribute(value=Name(id='file', ctx=Load()), attr='path', ctx=Load()), op=Add(), right=Constant(value='/')), op=Add(), right=Attribute(value=Name(id='file', ctx=Load()), attr='name', ctx=Load())), generators=[comprehension(target=Name(id='file', ctx=Store()), iter=Name(id='files', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), For(target=Name(id='file', ctx=Store()), iter=Name(id='files', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Subscript(value=Name(id='file', ctx=Load()), slice=Constant(value='content'), ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), body=[Assign(targets=[Subscript(value=Name(id='file', ctx=Load()), slice=Constant(value='content'), ctx=Store())], value=JoinedStr(values=[Constant(value='<<binary file, '), FormattedValue(value=Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='file', ctx=Load()), slice=Constant(value='content'), ctx=Load())], keywords=[]), conversion=-1), Constant(value=' bytes>>')]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='files', ctx=Store())], value=ListComp(elt=Name(id='file', ctx=Load()), generators=[comprehension(target=Name(id='file', ctx=Store()), iter=Name(id='files', ctx=Load()), ifs=[Compare(left=Subscript(value=Name(id='file', ctx=Load()), slice=Constant(value='content'), ctx=Load()), ops=[NotEq()], comparators=[Constant(value='')])], is_async=0)])), Return(value=Name(id='files', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_files', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='files')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Get file contents.\n\n        Args:\n            files (list): List of file paths.\n\n        Returns:\n            list: A list of files with content.\n        ')), Assign(targets=[Name(id='files_with_content', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='file_path', ctx=Store()), iter=Name(id='files', ctx=Load()), body=[Try(body=[Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='full_path', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_full_file_path', ctx=Load()), args=[Name(id='file_path', ctx=Load()), Name(id='file_path', ctx=Load())], keywords=[])), Assign(targets=[Name(id='file_data', ctx=Store())], value=Call(func=Name(id='get_file_contents', ctx=Load()), args=[Name(id='full_path', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='root_path', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Assign(targets=[Name(id='file_data', ctx=Store())], value=Dict(keys=[Constant(value='path'), Constant(value='content')], values=[Name(id='file_path', ctx=Load()), Constant(value='')]))])], orelse=[], finalbody=[]), Expr(value=Call(func=Attribute(value=Name(id='files_with_content', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='file_data', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='files_with_content', ctx=Load()))], decorator_list=[]), FunctionDef(name='find_input_required_lines', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='file_content')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Parses the provided string (representing file content) and returns a list of tuples containing\n        the line number and line content for lines that contain the text 'INPUT_REQUIRED'.\n\n        :param file_content: The string content of the file.\n        :return: A list of tuples (line number, line content).\n        ")), Assign(targets=[Name(id='lines_with_input_required', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='lines', ctx=Store())], value=Call(func=Attribute(value=Name(id='file_content', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='\n')], keywords=[])), For(target=Tuple(elts=[Name(id='line_number', ctx=Store()), Name(id='line', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='lines', ctx=Load())], keywords=[keyword(arg='start', value=Constant(value=1))]), body=[If(test=Compare(left=Constant(value='INPUT_REQUIRED'), ops=[In()], comparators=[Name(id='line', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='lines_with_input_required', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='line_number', ctx=Load()), Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[])], ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='lines_with_input_required', ctx=Load()))], decorator_list=[]), FunctionDef(name='save_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Save a file.\n\n        Args:\n            data: { name: \'hello.py\', path: \'path/to/hello.py\', content: \'print("Hello!")\' }\n        ')), Assign(targets=[Name(id='name', ctx=Store())], value=IfExp(test=BoolOp(op=And(), values=[Compare(left=Constant(value='name'), ops=[In()], comparators=[Name(id='data', ctx=Load())]), Compare(left=Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='name'), ctx=Load()), ops=[NotEq()], comparators=[Constant(value='')])]), body=Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='name'), ctx=Load()), orelse=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='basename', ctx=Load()), args=[Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='path'), ctx=Load())], keywords=[]))), Assign(targets=[Name(id='path', ctx=Store())], value=IfExp(test=Compare(left=Constant(value='path'), ops=[In()], comparators=[Name(id='data', ctx=Load())]), body=Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='path'), ctx=Load()), orelse=Name(id='name', ctx=Load()))), Assign(targets=[Tuple(elts=[Name(id='path', ctx=Store()), Name(id='full_path', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_full_file_path', ctx=Load()), args=[Name(id='path', ctx=Load()), Name(id='name', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='update_file', ctx=Load()), args=[Name(id='full_path', ctx=Load()), Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='content'), ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='full_path', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='files', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='files', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='full_path', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='File', ctx=Load()), attr='insert', ctx=Load()), args=[], keywords=[keyword(arg='app', value=Attribute(value=Name(id='self', ctx=Load()), attr='app', ctx=Load())), keyword(arg='path', value=Name(id='path', ctx=Load())), keyword(arg='name', value=Name(id='name', ctx=Load())), keyword(arg='full_path', value=Name(id='full_path', ctx=Load()))]), attr='on_conflict', ctx=Load()), args=[], keywords=[keyword(arg='conflict_target', value=List(elts=[Attribute(value=Name(id='File', ctx=Load()), attr='app', ctx=Load()), Attribute(value=Name(id='File', ctx=Load()), attr='name', ctx=Load()), Attribute(value=Name(id='File', ctx=Load()), attr='path', ctx=Load())], ctx=Load())), keyword(arg='preserve', value=List(elts=[], ctx=Load())), keyword(arg='update', value=Dict(keys=[Constant(value='name'), Constant(value='path'), Constant(value='full_path')], values=[Name(id='name', ctx=Load()), Name(id='path', ctx=Load()), Name(id='full_path', ctx=Load())]))]), attr='execute', ctx=Load()), args=[], keywords=[])), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='skip_steps', ctx=Load())), body=[Assign(targets=[Name(id='inputs_required', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='find_input_required_lines', ctx=Load()), args=[Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='content'), ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='line_number', ctx=Store()), Name(id='line_content', ctx=Store())], ctx=Store()), iter=Name(id='inputs_required', ctx=Load()), body=[Assign(targets=[Name(id='user_input', ctx=Store())], value=Constant(value=None)), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[BinOp(left=Call(func=Name(id='color_yellow_bold', ctx=Load()), args=[JoinedStr(values=[Constant(value='Input required on line '), FormattedValue(value=Name(id='line_number', ctx=Load()), conversion=-1), Constant(value=':\n'), FormattedValue(value=Name(id='line_content', ctx=Load()), conversion=-1)])], keywords=[]), op=Add(), right=Constant(value='\n'))], keywords=[])), While(test=BoolOp(op=Or(), values=[Compare(left=Name(id='user_input', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Call(func=Attribute(value=Name(id='user_input', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), ops=[NotIn()], comparators=[BinOp(left=Name(id='AFFIRMATIVE_ANSWERS', ctx=Load()), op=Add(), right=List(elts=[Constant(value='continue')], ctx=Load()))])]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Dict(keys=[Constant(value='path'), Constant(value='line')], values=[Name(id='full_path', ctx=Load()), Name(id='line_number', ctx=Load())])], keywords=[keyword(arg='type', value=Constant(value='openFile'))])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='continue')], keywords=[keyword(arg='type', value=Constant(value='button'))])), Assign(targets=[Name(id='user_input', ctx=Store())], value=Call(func=Name(id='styled_text', ctx=Load()), args=[Name(id='self', ctx=Load()), JoinedStr(values=[Constant(value='Please open the file '), FormattedValue(value=Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='path'), ctx=Load()), conversion=-1), Constant(value=' on the line '), FormattedValue(value=Name(id='line_number', ctx=Load()), conversion=-1), Constant(value=' and add the required input. Once you\'re done, type "y" to continue.')])], keywords=[keyword(arg='ignore_user_input_count', value=Constant(value=True))]))], orelse=[])], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='get_full_file_path', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='file_path', annotation=Name(id='str', ctx=Load())), arg(arg='file_name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Combine file path and name into a full file path.\n\n        :param file_path: File path.\n        :param file_name: File name.\n        :return: (file_path, absolute_path) pair.\n\n        Tries to combine the two in a way that makes most sense, even if the given path\n        have some shared components.\n        ')), FunctionDef(name='normalize_path', args=arguments(posonlyargs=[], args=[arg(arg='path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n            Normalizes a path (see rules in comments) and returns (directory, basename) pair.\n\n            :param path: Path to normalize.\n            :return: (directory, basename) pair.\n\n            Directory component may be empty if the path is considered to be a\n            file name. Basename component may be empty if the path is considered\n            to be a directory name.\n            ')), Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='Path', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])], keywords=[])), If(test=Compare(left=Constant(value='~'), ops=[In()], comparators=[Name(id='path', ctx=Load())]), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='~')], keywords=[]), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))], orelse=[]), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='path', ctx=Load()), ops=[Eq()], comparators=[Constant(value='.')]), Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='startswith', ctx=Load()), args=[JoinedStr(values=[Constant(value='.'), FormattedValue(value=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='sep', ctx=Load()), conversion=-1)])], keywords=[])]), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Subscript(value=Name(id='path', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='replace', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='root_path', ctx=Load()), Constant(value='')], keywords=[])), Assign(targets=[Name(id='base', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='basename', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Name(id='base', ctx=Load()), Compare(left=Constant(value='.'), ops=[NotIn()], comparators=[Name(id='base', ctx=Load())])]), body=[AugAssign(target=Name(id='path', ctx=Store()), op=Add(), value=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='sep', ctx=Load()))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='path', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='splitdrive', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='startswith', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='sep', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='path', ctx=Store())], value=BinOp(left=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='sep', ctx=Load()), op=Add(), right=Name(id='path', ctx=Load())))], orelse=[]), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='split', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='head_path', ctx=Store()), Name(id='tail_path', ctx=Store())], ctx=Store())], value=Call(func=Name(id='normalize_path', ctx=Load()), args=[Name(id='file_path', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='head_name', ctx=Store()), Name(id='tail_name', ctx=Store())], ctx=Store())], value=Call(func=Name(id='normalize_path', ctx=Load()), args=[Name(id='file_name', ctx=Load())], keywords=[])), Assign(targets=[Name(id='final_file_path', ctx=Store())], value=IfExp(test=Compare(left=Name(id='head_path', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='')]), body=Name(id='head_path', ctx=Load()), orelse=Name(id='head_name', ctx=Load()))), Assign(targets=[Name(id='final_file_name', ctx=Store())], value=IfExp(test=Compare(left=Name(id='tail_name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='')]), body=Name(id='tail_name', ctx=Load()), orelse=Name(id='tail_path', ctx=Load()))), If(test=Compare(left=Name(id='head_path', ctx=Load()), ops=[In()], comparators=[Name(id='head_name', ctx=Load())]), body=[Assign(targets=[Name(id='final_file_path', ctx=Store())], value=Name(id='head_name', ctx=Load()))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='final_file_path', ctx=Load()), ops=[NotEq()], comparators=[Name(id='head_name', ctx=Load())]), Compare(left=Name(id='head_name', ctx=Load()), ops=[NotIn()], comparators=[Name(id='head_path', ctx=Load())])]), body=[If(test=Compare(left=Constant(value='.'), ops=[In()], comparators=[Name(id='tail_path', ctx=Load())]), body=[Assign(targets=[Name(id='final_file_path', ctx=Store())], value=BinOp(left=Name(id='head_name', ctx=Load()), op=Add(), right=Name(id='head_path', ctx=Load())))], orelse=[Assign(targets=[Name(id='final_file_path', ctx=Store())], value=BinOp(left=Name(id='head_path', ctx=Load()), op=Add(), right=Name(id='head_name', ctx=Load())))])], orelse=[]), If(test=Compare(left=Name(id='final_file_path', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Assign(targets=[Name(id='final_file_path', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='sep', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='final_absolute_path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='root_path', ctx=Load()), Subscript(value=Name(id='final_file_path', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='final_file_name', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Name(id='final_file_path', ctx=Load()), Name(id='final_absolute_path', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='save_files_snapshot', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='development_step_id')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='files', ctx=Store())], value=Call(func=Name(id='get_directory_contents', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='root_path', ctx=Load())], keywords=[keyword(arg='ignore', value=Name(id='IGNORE_FOLDERS', ctx=Load()))])), Assign(targets=[Tuple(elts=[Name(id='development_step', ctx=Store()), Name(id='created', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='DevelopmentSteps', ctx=Load()), attr='get_or_create', ctx=Load()), args=[], keywords=[keyword(arg='id', value=Name(id='development_step_id', ctx=Load()))])), For(target=Name(id='file', ctx=Store()), iter=Name(id='files', ctx=Load()), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Name(id='color_cyan', ctx=Load()), args=[JoinedStr(values=[Constant(value='Saving file '), FormattedValue(value=Subscript(value=Name(id='file', ctx=Load()), slice=Constant(value='full_path'), ctx=Load()), conversion=-1)])], keywords=[])], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='file_in_db', ctx=Store()), Name(id='created', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='File', ctx=Load()), attr='get_or_create', ctx=Load()), args=[], keywords=[keyword(arg='app', value=Attribute(value=Name(id='self', ctx=Load()), attr='app', ctx=Load())), keyword(arg='name', value=Subscript(value=Name(id='file', ctx=Load()), slice=Constant(value='name'), ctx=Load())), keyword(arg='path', value=Subscript(value=Name(id='file', ctx=Load()), slice=Constant(value='path'), ctx=Load())), keyword(arg='full_path', value=Subscript(value=Name(id='file', ctx=Load()), slice=Constant(value='full_path'), ctx=Load()))])), Assign(targets=[Tuple(elts=[Name(id='file_snapshot', ctx=Store()), Name(id='created', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='FileSnapshot', ctx=Load()), attr='get_or_create', ctx=Load()), args=[], keywords=[keyword(arg='app', value=Attribute(value=Name(id='self', ctx=Load()), attr='app', ctx=Load())), keyword(arg='development_step', value=Name(id='development_step', ctx=Load())), keyword(arg='file', value=Name(id='file_in_db', ctx=Load())), keyword(arg='defaults', value=Dict(keys=[Constant(value='content')], values=[Call(func=Attribute(value=Name(id='file', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='content'), Constant(value='')], keywords=[])]))])), Assign(targets=[Attribute(value=Name(id='file_snapshot', ctx=Load()), attr='content', ctx=Store())], value=Subscript(value=Name(id='file', ctx=Load()), slice=Constant(value='content'), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='file_snapshot', ctx=Load()), attr='save', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='restore_files', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='development_step_id')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='development_step', ctx=Store())], value=Call(func=Attribute(value=Name(id='DevelopmentSteps', ctx=Load()), attr='get', ctx=Load()), args=[Compare(left=Attribute(value=Name(id='DevelopmentSteps', ctx=Load()), attr='id', ctx=Load()), ops=[Eq()], comparators=[Name(id='development_step_id', ctx=Load())])], keywords=[])), Assign(targets=[Name(id='file_snapshots', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='FileSnapshot', ctx=Load()), attr='select', ctx=Load()), args=[], keywords=[]), attr='where', ctx=Load()), args=[Compare(left=Attribute(value=Name(id='FileSnapshot', ctx=Load()), attr='development_step', ctx=Load()), ops=[Eq()], comparators=[Name(id='development_step', ctx=Load())])], keywords=[])), Expr(value=Call(func=Name(id='clear_directory', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='root_path', ctx=Load()), BinOp(left=Name(id='IGNORE_FOLDERS', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='files', ctx=Load()))], keywords=[])), For(target=Name(id='file_snapshot', ctx=Store()), iter=Name(id='file_snapshots', ctx=Load()), body=[Expr(value=Call(func=Name(id='update_file', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='file_snapshot', ctx=Load()), attr='file', ctx=Load()), attr='full_path', ctx=Load()), Attribute(value=Name(id='file_snapshot', ctx=Load()), attr='content', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Attribute(value=Name(id='file_snapshot', ctx=Load()), attr='file', ctx=Load()), attr='full_path', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='files', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='files', ctx=Load()), attr='append', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='file_snapshot', ctx=Load()), attr='file', ctx=Load()), attr='full_path', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='delete_all_steps_except_current_branch', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='delete_unconnected_steps_from', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='checkpoints', ctx=Load()), slice=Constant(value='last_development_step'), ctx=Load()), Constant(value='previous_step')], keywords=[])), Expr(value=Call(func=Name(id='delete_unconnected_steps_from', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='checkpoints', ctx=Load()), slice=Constant(value='last_command_run'), ctx=Load()), Constant(value='previous_step')], keywords=[])), Expr(value=Call(func=Name(id='delete_unconnected_steps_from', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='checkpoints', ctx=Load()), slice=Constant(value='last_user_input'), ctx=Load()), Constant(value='previous_step')], keywords=[]))], decorator_list=[]), FunctionDef(name='ask_for_human_intervention', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='message'), arg(arg='description'), arg(arg='cbs'), arg(arg='convo'), arg(arg='is_root_task')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Dict(keys=[], values=[]), Constant(value=None), Constant(value=False)]), body=[Assign(targets=[Name(id='answer', ctx=Store())], value=Constant(value='')), Assign(targets=[Name(id='question', ctx=Store())], value=Call(func=Name(id='color_yellow_bold', ctx=Load()), args=[Name(id='message', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='description', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[AugAssign(target=Name(id='question', ctx=Store()), op=Add(), value=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Constant(value='\n'), op=Add(), right=BinOp(left=Constant(value='-'), op=Mult(), right=Constant(value=100))), op=Add(), right=Constant(value='\n')), op=Add(), right=Call(func=Name(id='color_white_bold', ctx=Load()), args=[Name(id='description', ctx=Load())], keywords=[])), op=Add(), right=Constant(value='\n')), op=Add(), right=BinOp(left=Constant(value='-'), op=Mult(), right=Constant(value=100))), op=Add(), right=Constant(value='\n')))], orelse=[]), Assign(targets=[Name(id='reset_branch_id', ctx=Store())], value=IfExp(test=Compare(left=Name(id='convo', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Constant(value=None), orelse=Call(func=Attribute(value=Name(id='convo', ctx=Load()), attr='save_branch', ctx=Load()), args=[], keywords=[]))), While(test=Compare(left=Call(func=Attribute(value=Name(id='answer', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), ops=[NotEq()], comparators=[Constant(value='continue')]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='continue')], keywords=[keyword(arg='type', value=Constant(value='button'))])), Assign(targets=[Name(id='answer', ctx=Store())], value=Call(func=Name(id='ask_user', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='CHECK_AND_CONTINUE', ctx=Load())], keywords=[keyword(arg='require_some_input', value=Constant(value=False)), keyword(arg='hint', value=Name(id='question', ctx=Load()))])), Try(body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='answer', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), ops=[In()], comparators=[Name(id='cbs', ctx=Load())]), body=[Return(value=Call(func=Subscript(value=Name(id='cbs', ctx=Load()), slice=Call(func=Attribute(value=Name(id='answer', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), ctx=Load()), args=[Name(id='convo', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='answer', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='')]), body=[Return(value=Dict(keys=[Constant(value='user_input')], values=[Name(id='answer', ctx=Load())]))], orelse=[])])], handlers=[ExceptHandler(type=Name(id='TokenLimitError', ctx=Load()), name='e', body=[If(test=BoolOp(op=And(), values=[Name(id='is_root_task', ctx=Load()), Compare(left=Call(func=Attribute(value=Name(id='answer', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), ops=[NotIn()], comparators=[Name(id='cbs', ctx=Load())]), Compare(left=Name(id='answer', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='')])]), body=[Expr(value=Call(func=Attribute(value=Name(id='convo', ctx=Load()), attr='load_branch', ctx=Load()), args=[Name(id='reset_branch_id', ctx=Load())], keywords=[])), Return(value=Dict(keys=[Constant(value='user_input')], values=[Name(id='answer', ctx=Load())]))], orelse=[Raise(exc=Name(id='e', ctx=Load()))])])], orelse=[], finalbody=[])], orelse=[])], decorator_list=[]), FunctionDef(name='log', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='text'), arg(arg='message_type')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='ipc_client_instance', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='ipc_client_instance', ctx=Load()), attr='client', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='ipc_client_instance', ctx=Load()), attr='send', ctx=Load()), args=[Dict(keys=[Constant(value='type'), Constant(value='content')], values=[Subscript(value=Name(id='MESSAGE_TYPE', ctx=Load()), slice=Name(id='message_type', ctx=Load()), ctx=Load()), Call(func=Name(id='str', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[])])], keywords=[])), If(test=Compare(left=Name(id='message_type', ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='MESSAGE_TYPE', ctx=Load()), slice=Constant(value='user_input_request'), ctx=Load())]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='ipc_client_instance', ctx=Load()), attr='listen', ctx=Load()), args=[], keywords=[]))], orelse=[])])], decorator_list=[])], decorator_list=[])], type_ignores=[])