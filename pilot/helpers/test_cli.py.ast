Module(body=[Import(names=[alias(name='platform')]), ImportFrom(module='unittest.mock', names=[alias(name='patch'), alias(name='MagicMock'), alias(name='call')], level=0), Import(names=[alias(name='pytest')]), ImportFrom(module='helpers.cli', names=[alias(name='execute_command'), alias(name='terminate_process'), alias(name='run_command_until_success')], level=0), ImportFrom(module='helpers.test_Project', names=[alias(name='create_project')], level=0), FunctionDef(name='test_terminate_process_not_running', args=arguments(posonlyargs=[], args=[arg(arg='mock_subprocess'), arg(arg='mock_os')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='terminate_process', ctx=Load()), args=[Constant(value=1234), Constant(value='not running')], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='mock_subprocess', ctx=Load()), attr='run', ctx=Load()), attr='assert_not_called', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='mock_os', ctx=Load()), attr='killpg', ctx=Load()), attr='assert_not_called', ctx=Load()), args=[], keywords=[]))], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='xfail', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='helpers.cli.os')], keywords=[]), Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='helpers.cli.subprocess')], keywords=[])]), FunctionDef(name='test_execute_command_timeout_exit_code', args=arguments(posonlyargs=[], args=[arg(arg='mock_terminate_process'), arg(arg='mock_run'), arg(arg='mock_get_saved_command')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='project', ctx=Store())], value=Call(func=Name(id='create_project', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='command', ctx=Store())], value=Constant(value='cat')), Assign(targets=[Name(id='timeout', ctx=Store())], value=Constant(value=0.1)), Assign(targets=[Name(id='mock_process', ctx=Store())], value=Call(func=Name(id='MagicMock', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Attribute(value=Name(id='mock_process', ctx=Load()), attr='poll', ctx=Load()), attr='return_value', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='mock_process', ctx=Load()), attr='pid', ctx=Store())], value=Constant(value=1234)), Assign(targets=[Attribute(value=Name(id='mock_run', ctx=Load()), attr='return_value', ctx=Store())], value=Name(id='mock_process', ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='cli_response', ctx=Store()), Name(id='llm_response', ctx=Store()), Name(id='exit_code', ctx=Store())], ctx=Store())], value=Call(func=Name(id='execute_command', ctx=Load()), args=[Name(id='project', ctx=Load()), Name(id='command', ctx=Load()), Name(id='timeout', ctx=Load())], keywords=[keyword(arg='force', value=Constant(value=True))])), Assert(test=Compare(left=Name(id='cli_response', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assert(test=Compare(left=Name(id='llm_response', ctx=Load()), ops=[Eq()], comparators=[Constant(value='DONE')])), Assert(test=Compare(left=Name(id='exit_code', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Expr(value=Call(func=Attribute(value=Name(id='mock_terminate_process', ctx=Load()), attr='assert_called_once_with', ctx=Load()), args=[Constant(value=1234)], keywords=[]))], decorator_list=[Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='helpers.cli.MIN_COMMAND_RUN_TIME')], keywords=[keyword(arg='create', value=Constant(value=True)), keyword(arg='new', value=Constant(value=100))]), Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='helpers.cli.get_saved_command_run')], keywords=[]), Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='helpers.cli.run_command')], keywords=[]), Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='helpers.cli.terminate_process')], keywords=[])]), FunctionDef(name='mock_run_command', args=arguments(posonlyargs=[], args=[arg(arg='command'), arg(arg='path'), arg(arg='q'), arg(arg='q_stderr')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='q', ctx=Load()), attr='put', ctx=Load()), args=[Constant(value='hello')], keywords=[])), Assign(targets=[Name(id='mock_process', ctx=Store())], value=Call(func=Name(id='MagicMock', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='mock_process', ctx=Load()), attr='returncode', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='mock_process', ctx=Load()), attr='pid', ctx=Store())], value=Constant(value=1234)), Return(value=Name(id='mock_process', ctx=Load()))], decorator_list=[]), FunctionDef(name='test_execute_command_enter', args=arguments(posonlyargs=[], args=[arg(arg='mock_terminate_process'), arg(arg='mock_run'), arg(arg='mock_ask'), arg(arg='mock_get_saved_command')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='project', ctx=Store())], value=Call(func=Name(id='create_project', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='command', ctx=Store())], value=Constant(value='echo hello')), Assign(targets=[Name(id='timeout', ctx=Store())], value=Constant(value=1000)), Assign(targets=[Attribute(value=Name(id='mock_run', ctx=Load()), attr='side_effect', ctx=Store())], value=Name(id='mock_run_command', ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='cli_response', ctx=Store()), Name(id='llm_response', ctx=Store()), Name(id='exit_code', ctx=Store())], ctx=Store())], value=Call(func=Name(id='execute_command', ctx=Load()), args=[Name(id='project', ctx=Load()), Name(id='command', ctx=Load()), Name(id='timeout', ctx=Load())], keywords=[])), Assert(test=Compare(left=Constant(value='hello'), ops=[In()], comparators=[Name(id='cli_response', ctx=Load())])), Assert(test=Compare(left=Name(id='llm_response', ctx=Load()), ops=[Eq()], comparators=[Constant(value='DONE')])), Assert(test=Compare(left=Name(id='exit_code', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])), Expr(value=Call(func=Attribute(value=Name(id='mock_terminate_process', ctx=Load()), attr='assert_called_once_with', ctx=Load()), args=[Constant(value=1234)], keywords=[]))], decorator_list=[Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='helpers.cli.get_saved_command_run')], keywords=[]), Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='helpers.cli.ask_user')], keywords=[keyword(arg='return_value', value=Constant(value=''))]), Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='helpers.cli.run_command')], keywords=[]), Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='helpers.cli.terminate_process')], keywords=[])]), FunctionDef(name='test_execute_command_yes', args=arguments(posonlyargs=[], args=[arg(arg='mock_terminate_process'), arg(arg='mock_run'), arg(arg='mock_ask'), arg(arg='mock_get_saved_command')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='project', ctx=Store())], value=Call(func=Name(id='create_project', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='command', ctx=Store())], value=Constant(value='echo hello')), Assign(targets=[Name(id='timeout', ctx=Store())], value=Constant(value=1000)), Assign(targets=[Attribute(value=Name(id='mock_run', ctx=Load()), attr='side_effect', ctx=Store())], value=Name(id='mock_run_command', ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='cli_response', ctx=Store()), Name(id='llm_response', ctx=Store()), Name(id='exit_code', ctx=Store())], ctx=Store())], value=Call(func=Name(id='execute_command', ctx=Load()), args=[Name(id='project', ctx=Load()), Name(id='command', ctx=Load()), Name(id='timeout', ctx=Load())], keywords=[])), Assert(test=Compare(left=Constant(value='hello'), ops=[In()], comparators=[Name(id='cli_response', ctx=Load())])), Assert(test=Compare(left=Name(id='llm_response', ctx=Load()), ops=[Eq()], comparators=[Constant(value='DONE')])), Assert(test=Compare(left=Name(id='exit_code', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])), Expr(value=Call(func=Attribute(value=Name(id='mock_terminate_process', ctx=Load()), attr='assert_called_once_with', ctx=Load()), args=[Constant(value=1234)], keywords=[]))], decorator_list=[Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='helpers.cli.get_saved_command_run')], keywords=[]), Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='helpers.cli.ask_user')], keywords=[keyword(arg='return_value', value=Constant(value='yes'))]), Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='helpers.cli.run_command')], keywords=[]), Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='helpers.cli.terminate_process')], keywords=[])]), FunctionDef(name='test_execute_command_rejected_with_no', args=arguments(posonlyargs=[], args=[arg(arg='mock_ask'), arg(arg='mock_get_saved_command')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='project', ctx=Store())], value=Call(func=Name(id='create_project', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='command', ctx=Store())], value=Constant(value='ping www.google.com')), Assign(targets=[Name(id='timeout', ctx=Store())], value=Constant(value=1)), Assign(targets=[Tuple(elts=[Name(id='cli_response', ctx=Store()), Name(id='llm_response', ctx=Store()), Name(id='exit_code', ctx=Store())], ctx=Store())], value=Call(func=Name(id='execute_command', ctx=Load()), args=[Name(id='project', ctx=Load()), Name(id='command', ctx=Load()), Name(id='timeout', ctx=Load())], keywords=[])), Assert(test=Compare(left=Name(id='cli_response', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])), Assert(test=Compare(left=Name(id='llm_response', ctx=Load()), ops=[Eq()], comparators=[Constant(value='SKIP')])), Assert(test=Compare(left=Name(id='exit_code', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]))], decorator_list=[Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='helpers.cli.get_saved_command_run')], keywords=[]), Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='helpers.cli.ask_user')], keywords=[keyword(arg='return_value', value=Constant(value='no'))])]), FunctionDef(name='test_execute_command_rejected_with_message', args=arguments(posonlyargs=[], args=[arg(arg='mock_ask'), arg(arg='mock_get_saved_command')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='project', ctx=Store())], value=Call(func=Name(id='create_project', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='command', ctx=Store())], value=Constant(value='ping www.google.com')), Assign(targets=[Name(id='timeout', ctx=Store())], value=Constant(value=1)), Assign(targets=[Tuple(elts=[Name(id='cli_response', ctx=Store()), Name(id='llm_response', ctx=Store()), Name(id='exit_code', ctx=Store())], ctx=Store())], value=Call(func=Name(id='execute_command', ctx=Load()), args=[Name(id='project', ctx=Load()), Name(id='command', ctx=Load()), Name(id='timeout', ctx=Load())], keywords=[])), Assert(test=Compare(left=Name(id='cli_response', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])), Assert(test=Compare(left=Name(id='llm_response', ctx=Load()), ops=[Eq()], comparators=[Constant(value='no, my DNS is not working, ping 8.8.8.8 instead')])), Assert(test=Compare(left=Name(id='exit_code', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]))], decorator_list=[Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='helpers.cli.get_saved_command_run')], keywords=[]), Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='helpers.cli.ask_user')], keywords=[keyword(arg='return_value', value=Constant(value='no, my DNS is not working, ping 8.8.8.8 instead'))])]), FunctionDef(name='test_run_command_until_success', args=arguments(posonlyargs=[], args=[arg(arg='mock_execute')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='convo', ctx=Store())], value=Call(func=Name(id='MagicMock', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='command', ctx=Store())], value=Constant(value='ping www.google.com')), Assign(targets=[Name(id='timeout', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='run_command_until_success', ctx=Load()), args=[Name(id='convo', ctx=Load()), Name(id='command', ctx=Load()), Name(id='timeout', ctx=Load())], keywords=[])), Assert(test=Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='success'), ctx=Load())), Assert(test=Compare(left=Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='cli_response'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='hello')])), Assert(test=Compare(left=Attribute(value=Attribute(value=Name(id='convo', ctx=Load()), attr='send_message', ctx=Load()), attr='call_count', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]))], decorator_list=[Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='helpers.cli.execute_command')], keywords=[keyword(arg='return_value', value=Tuple(elts=[Constant(value='hello'), Constant(value=None), Constant(value=0)], ctx=Load()))])]), FunctionDef(name='test_run_command_until_success_app', args=arguments(posonlyargs=[], args=[arg(arg='mock_execute')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='convo', ctx=Store())], value=Call(func=Name(id='MagicMock', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='command', ctx=Store())], value=Constant(value='npm run start')), Assign(targets=[Name(id='command_id', ctx=Store())], value=Constant(value='app')), Assign(targets=[Name(id='timeout', ctx=Store())], value=Constant(value=1000)), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='run_command_until_success', ctx=Load()), args=[Name(id='convo', ctx=Load()), Name(id='command', ctx=Load()), Name(id='timeout', ctx=Load())], keywords=[keyword(arg='command_id', value=Name(id='command_id', ctx=Load()))])), Assert(test=Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='success'), ctx=Load())), Assert(test=Compare(left=Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='cli_response'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='running...')])), Assert(test=Compare(left=Attribute(value=Attribute(value=Name(id='convo', ctx=Load()), attr='send_message', ctx=Load()), attr='call_count', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]))], decorator_list=[Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='helpers.cli.execute_command')], keywords=[keyword(arg='return_value', value=Tuple(elts=[Constant(value='running...'), Constant(value='DONE'), Constant(value=None)], ctx=Load()))])]), FunctionDef(name='test_run_command_until_success_error', args=arguments(posonlyargs=[], args=[arg(arg='mock_execute')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='convo', ctx=Store())], value=Call(func=Name(id='MagicMock', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Attribute(value=Name(id='convo', ctx=Load()), attr='send_message', ctx=Load()), attr='return_value', ctx=Store())], value=Constant(value='NEEDS DEBUGGING')), Assign(targets=[Attribute(value=Attribute(value=Attribute(value=Attribute(value=Name(id='convo', ctx=Load()), attr='agent', ctx=Load()), attr='debugger', ctx=Load()), attr='debug', ctx=Load()), attr='return_value', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='command', ctx=Store())], value=Constant(value='ping www.google.com')), Assign(targets=[Name(id='timeout', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='run_command_until_success', ctx=Load()), args=[Name(id='convo', ctx=Load()), Name(id='command', ctx=Load()), Name(id='timeout', ctx=Load())], keywords=[])), Assert(test=Compare(left=Attribute(value=Attribute(value=Name(id='convo', ctx=Load()), attr='send_message', ctx=Load()), attr='call_count', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])), Assert(test=UnaryOp(op=Not(), operand=Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='success'), ctx=Load()))), Assert(test=Compare(left=Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='cli_response'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='error')]))], decorator_list=[Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='helpers.cli.execute_command')], keywords=[keyword(arg='return_value', value=Tuple(elts=[Constant(value='error'), Constant(value=None), Constant(value=2)], ctx=Load()))])]), FunctionDef(name='test_run_command_until_success_timed_out', args=arguments(posonlyargs=[], args=[arg(arg='mock_execute')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='convo', ctx=Store())], value=Call(func=Name(id='MagicMock', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Attribute(value=Name(id='convo', ctx=Load()), attr='send_message', ctx=Load()), attr='return_value', ctx=Store())], value=Constant(value='NEEDS DEBUGGING')), Assign(targets=[Attribute(value=Attribute(value=Attribute(value=Attribute(value=Name(id='convo', ctx=Load()), attr='agent', ctx=Load()), attr='debugger', ctx=Load()), attr='debug', ctx=Load()), attr='return_value', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='command', ctx=Store())], value=Constant(value='ping www.google.com')), Assign(targets=[Name(id='timeout', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='run_command_until_success', ctx=Load()), args=[Name(id='convo', ctx=Load()), Name(id='command', ctx=Load()), Name(id='timeout', ctx=Load())], keywords=[])), Assert(test=Compare(left=Attribute(value=Attribute(value=Name(id='convo', ctx=Load()), attr='send_message', ctx=Load()), attr='call_count', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])), Assert(test=UnaryOp(op=Not(), operand=Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='success'), ctx=Load()))), Assert(test=Compare(left=Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='cli_response'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='hell')]))], decorator_list=[Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='helpers.cli.execute_command')], keywords=[keyword(arg='return_value', value=Tuple(elts=[Constant(value='hell'), Constant(value='took longer than 2000ms so I killed it'), Constant(value=0)], ctx=Load()))])]), FunctionDef(name='test_run_command_until_success_no', args=arguments(posonlyargs=[], args=[arg(arg='mock_execute')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='convo', ctx=Store())], value=Call(func=Name(id='MagicMock', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='command', ctx=Store())], value=Constant(value='ping www.google.com')), Assign(targets=[Name(id='timeout', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='run_command_until_success', ctx=Load()), args=[Name(id='convo', ctx=Load()), Name(id='command', ctx=Load()), Name(id='timeout', ctx=Load())], keywords=[])), Assert(test=Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='success'), ctx=Load())), Assert(test=Compare(left=Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='cli_response'), ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])), Assert(test=BoolOp(op=Or(), values=[Compare(left=Constant(value='user_input'), ops=[NotIn()], comparators=[Name(id='result', ctx=Load())]), Compare(left=Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='user_input'), ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])])), Assert(test=Compare(left=Attribute(value=Attribute(value=Name(id='convo', ctx=Load()), attr='send_message', ctx=Load()), attr='call_count', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]))], decorator_list=[Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='helpers.cli.execute_command')], keywords=[keyword(arg='return_value', value=Tuple(elts=[Constant(value=None), Constant(value='DONE'), Constant(value=None)], ctx=Load()))])]), FunctionDef(name='test_run_command_until_success_rejected', args=arguments(posonlyargs=[], args=[arg(arg='mock_execute')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='convo', ctx=Store())], value=Call(func=Name(id='MagicMock', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='command', ctx=Store())], value=Constant(value='ping www.google.com')), Assign(targets=[Name(id='timeout', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='run_command_until_success', ctx=Load()), args=[Name(id='convo', ctx=Load()), Name(id='command', ctx=Load()), Name(id='timeout', ctx=Load())], keywords=[])), Assert(test=UnaryOp(op=Not(), operand=Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='success'), ctx=Load()))), Assert(test=BoolOp(op=Or(), values=[Compare(left=Constant(value='cli_response'), ops=[NotIn()], comparators=[Name(id='result', ctx=Load())]), Compare(left=Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='cli_response'), ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])])), Assert(test=Compare(left=Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='user_input'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='no, my DNS is not working, ping 8.8.8.8 instead')])), Assert(test=Compare(left=Attribute(value=Attribute(value=Name(id='convo', ctx=Load()), attr='send_message', ctx=Load()), attr='call_count', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]))], decorator_list=[Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='helpers.cli.execute_command')], keywords=[keyword(arg='return_value', value=Tuple(elts=[Constant(value=None), Constant(value='no, my DNS is not working, ping 8.8.8.8 instead'), Constant(value=None)], ctx=Load()))])])], type_ignores=[])