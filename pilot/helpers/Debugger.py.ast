Module(body=[Import(names=[alias(name='platform')]), Import(names=[alias(name='uuid')]), Import(names=[alias(name='re')]), ImportFrom(module='const.code_execution', names=[alias(name='MAX_COMMAND_DEBUG_TRIES'), alias(name='MAX_RECUSION_LAYER')], level=0), ImportFrom(module='const.function_calls', names=[alias(name='DEBUG_STEPS_BREAKDOWN')], level=0), ImportFrom(module='const.messages', names=[alias(name='AFFIRMATIVE_ANSWERS'), alias(name='NEGATIVE_ANSWERS')], level=0), ImportFrom(module='helpers.exceptions.TokenLimitError', names=[alias(name='TokenLimitError')], level=0), ImportFrom(module='helpers.exceptions.TooDeepRecursionError', names=[alias(name='TooDeepRecursionError')], level=0), ImportFrom(module='logger.logger', names=[alias(name='logger')], level=0), ImportFrom(module='prompts.prompts', names=[alias(name='ask_user')], level=0), ClassDef(name='Debugger', bases=[], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='agent')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='agent', ctx=Store())], value=Name(id='agent', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='recursion_layer', ctx=Store())], value=Constant(value=0))], decorator_list=[]), FunctionDef(name='debug', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='convo'), arg(arg='command'), arg(arg='user_input'), arg(arg='issue_description'), arg(arg='is_root_task'), arg(arg='ask_before_debug')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=False), Constant(value=False)]), body=[Expr(value=Constant(value='\n        Debug a conversation.\n\n        Args:\n            convo (AgentConvo): The conversation object.\n            command (dict, optional): The command to debug. Default is None.\n            user_input (str, optional): User input for debugging. Default is None.\n                Should provide `command` or `user_input`.\n            issue_description (str, optional): Description of the issue to debug. Default is None.\n            ask_before_debug (bool, optional): True if we have to ask user for permission to start debugging.\n\n        Returns:\n            bool: True if debugging was successful, False otherwise.\n        ')), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Debugging %s'), Name(id='command', ctx=Load())], keywords=[])), AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='recursion_layer', ctx=Store()), op=Add(), value=Constant(value=1)), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='recursion_layer', ctx=Load()), ops=[Gt()], comparators=[Name(id='MAX_RECUSION_LAYER', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='recursion_layer', ctx=Store())], value=Constant(value=0)), Raise(exc=Call(func=Name(id='TooDeepRecursionError', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='function_uuid', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Attribute(value=Name(id='uuid', ctx=Load()), attr='uuid4', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='convo', ctx=Load()), attr='save_branch', ctx=Load()), args=[Name(id='function_uuid', ctx=Load())], keywords=[])), Assign(targets=[Name(id='success', ctx=Store())], value=Constant(value=False)), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='MAX_COMMAND_DEBUG_TRIES', ctx=Load())], keywords=[]), body=[If(test=Name(id='success', ctx=Load()), body=[Break()], orelse=[]), If(test=BoolOp(op=Or(), values=[Name(id='ask_before_debug', ctx=Load()), Compare(left=Name(id='i', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)])]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='yes/no')], keywords=[keyword(arg='type', value=Constant(value='button'))])), Assign(targets=[Name(id='answer', ctx=Store())], value=Call(func=Name(id='ask_user', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='agent', ctx=Load()), attr='project', ctx=Load()), Constant(value='Can I start debugging this issue?')], keywords=[keyword(arg='require_some_input', value=Constant(value=False))])), If(test=Compare(left=Call(func=Attribute(value=Name(id='answer', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), ops=[In()], comparators=[Name(id='NEGATIVE_ANSWERS', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[]), If(test=BoolOp(op=And(), values=[Name(id='answer', ctx=Load()), Compare(left=Call(func=Attribute(value=Name(id='answer', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), ops=[NotIn()], comparators=[Name(id='AFFIRMATIVE_ANSWERS', ctx=Load())])]), body=[Assign(targets=[Name(id='user_input', ctx=Store())], value=Name(id='answer', ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Name(id='llm_response', ctx=Store())], value=Call(func=Attribute(value=Name(id='convo', ctx=Load()), attr='send_message', ctx=Load()), args=[Constant(value='dev_ops/debug.prompt'), Dict(keys=[Constant(value='command'), Constant(value='user_input'), Constant(value='issue_description'), Constant(value='os'), Constant(value='context')], values=[IfExp(test=Compare(left=Name(id='command', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Subscript(value=Name(id='command', ctx=Load()), slice=Constant(value='command'), ctx=Load()), orelse=Constant(value=None)), Name(id='user_input', ctx=Load()), Name(id='issue_description', ctx=Load()), Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='system', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='convo', ctx=Load()), attr='to_context_prompt', ctx=Load()), args=[], keywords=[])]), Name(id='DEBUG_STEPS_BREAKDOWN', ctx=Load())], keywords=[])), Assign(targets=[Name(id='completed_steps', ctx=Store())], value=List(elts=[], ctx=Load())), Try(body=[While(test=Constant(value=True), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[BinOp(left=Constant(value='Thoughts: '), op=Add(), right=Subscript(value=Name(id='llm_response', ctx=Load()), slice=Constant(value='thoughts'), ctx=Load()))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[BinOp(left=Constant(value='Reasoning: '), op=Add(), right=Subscript(value=Name(id='llm_response', ctx=Load()), slice=Constant(value='reasoning'), ctx=Load()))], keywords=[])), Assign(targets=[Name(id='steps', ctx=Store())], value=BinOp(left=Name(id='completed_steps', ctx=Load()), op=Add(), right=Subscript(value=Name(id='llm_response', ctx=Load()), slice=Constant(value='steps'), ctx=Load()))), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='agent', ctx=Load()), attr='project', ctx=Load()), attr='developer', ctx=Load()), attr='execute_task', ctx=Load()), args=[Name(id='convo', ctx=Load()), JoinedStr(values=[Constant(value='Thoughts: '), FormattedValue(value=Subscript(value=Name(id='llm_response', ctx=Load()), slice=Constant(value='thoughts'), ctx=Load()), conversion=-1), Constant(value='\n\nReasoning: '), FormattedValue(value=Subscript(value=Name(id='llm_response', ctx=Load()), slice=Constant(value='reasoning'), ctx=Load()), conversion=-1)]), Name(id='steps', ctx=Load())], keywords=[keyword(arg='test_command', value=Name(id='command', ctx=Load())), keyword(arg='test_after_code_changes', value=Constant(value=True)), keyword(arg='continue_development', value=Constant(value=False)), keyword(arg='is_root_task', value=Name(id='is_root_task', ctx=Load())), keyword(arg='continue_from_step', value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='completed_steps', ctx=Load())], keywords=[]))])), If(test=Compare(left=Constant(value='step_index'), ops=[In()], comparators=[Name(id='result', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='os'), ctx=Store())], value=Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='system', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='step_index', ctx=Store())], value=Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='step_index'), ctx=Load())), Assign(targets=[Name(id='completed_steps', ctx=Store())], value=Subscript(value=Name(id='steps', ctx=Load()), slice=Slice(upper=BinOp(left=Name(id='step_index', ctx=Load()), op=Add(), right=Constant(value=1))), ctx=Load())), Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='completed_steps'), ctx=Store())], value=Name(id='completed_steps', ctx=Load())), Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='current_step'), ctx=Store())], value=Subscript(value=Name(id='steps', ctx=Load()), slice=Name(id='step_index', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='next_steps'), ctx=Store())], value=Subscript(value=Name(id='steps', ctx=Load()), slice=Slice(lower=BinOp(left=Name(id='step_index', ctx=Load()), op=Add(), right=Constant(value=1))), ctx=Load())), Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='current_step_index'), ctx=Store())], value=Name(id='step_index', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='convo', ctx=Load()), attr='remove_last_x_messages', ctx=Load()), args=[Constant(value=2)], keywords=[])), Assign(targets=[Name(id='llm_response', ctx=Store())], value=Call(func=Attribute(value=Name(id='convo', ctx=Load()), attr='send_message', ctx=Load()), args=[Constant(value='development/task/update_task.prompt'), Name(id='result', ctx=Load()), Name(id='DEBUG_STEPS_BREAKDOWN', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='success', ctx=Store())], value=Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='success'), ctx=Load())), If(test=UnaryOp(op=Not(), operand=Name(id='success', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='convo', ctx=Load()), attr='load_branch', ctx=Load()), args=[Name(id='function_uuid', ctx=Load())], keywords=[])), If(test=Compare(left=Constant(value='cli_response'), ops=[In()], comparators=[Name(id='result', ctx=Load())]), body=[Assign(targets=[Name(id='user_input', ctx=Store())], value=Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='cli_response'), ctx=Load())), Assign(targets=[Subscript(value=Subscript(value=Attribute(value=Name(id='convo', ctx=Load()), attr='messages', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value='content'), ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value='(?<=The output was:\\n\\n).*?(?=\\n\\nThink about this output)'), Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='cli_response'), ctx=Load()), Subscript(value=Subscript(value=Attribute(value=Name(id='convo', ctx=Load()), attr='messages', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), slice=Constant(value='content'), ctx=Load())], keywords=[keyword(arg='flags', value=Attribute(value=Name(id='re', ctx=Load()), attr='DOTALL', ctx=Load()))]))], orelse=[])], orelse=[]), Break()])], orelse=[])], handlers=[ExceptHandler(type=Name(id='TokenLimitError', ctx=Load()), name='e', body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='recursion_layer', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='recursion_layer', ctx=Store()), op=Sub(), value=Constant(value=1)), Raise(exc=Name(id='e', ctx=Load()))], orelse=[If(test=UnaryOp(op=Not(), operand=Name(id='success', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='convo', ctx=Load()), attr='load_branch', ctx=Load()), args=[Name(id='function_uuid', ctx=Load())], keywords=[]))], orelse=[]), Continue()])])], orelse=[], finalbody=[])], orelse=[]), AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='recursion_layer', ctx=Store()), op=Sub(), value=Constant(value=1)), Return(value=Name(id='success', ctx=Load()))], decorator_list=[])], decorator_list=[])], type_ignores=[])