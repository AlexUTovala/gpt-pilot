Module(body=[Import(names=[alias(name='json')]), Import(names=[alias(name='re')]), Import(names=[alias(name='subprocess')]), Import(names=[alias(name='uuid')]), ImportFrom(module='utils.style', names=[alias(name='color_yellow'), alias(name='color_yellow_bold')], level=0), ImportFrom(module='database.database', names=[alias(name='get_saved_development_step'), alias(name='save_development_step'), alias(name='delete_all_subsequent_steps')], level=0), ImportFrom(module='helpers.exceptions.TokenLimitError', names=[alias(name='TokenLimitError')], level=0), ImportFrom(module='utils.function_calling', names=[alias(name='parse_agent_response'), alias(name='FunctionCallSet')], level=0), ImportFrom(module='utils.llm_connection', names=[alias(name='create_gpt_chat_completion')], level=0), ImportFrom(module='utils.utils', names=[alias(name='get_prompt'), alias(name='get_sys_message'), alias(name='capitalize_first_word_with_underscores')], level=0), ImportFrom(module='logger.logger', names=[alias(name='logger')], level=0), ImportFrom(module='prompts.prompts', names=[alias(name='ask_user')], level=0), ImportFrom(module='const.llm', names=[alias(name='END_RESPONSE')], level=0), ImportFrom(module='helpers.cli', names=[alias(name='running_processes')], level=0), ClassDef(name='AgentConvo', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    Represents a conversation with an agent.\n\n    Args:\n        agent: An instance of the agent participating in the conversation.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='agent')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='messages', ctx=Store()), annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='dict', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='branches', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='log_to_user', ctx=Store())], value=Constant(value=True)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='agent', ctx=Store())], value=Name(id='agent', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='high_level_step', ctx=Store())], value=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='agent', ctx=Load()), attr='project', ctx=Load()), attr='current_step', ctx=Load())), Assign(targets=[Name(id='system_message', ctx=Store())], value=Call(func=Name(id='get_sys_message', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='agent', ctx=Load()), attr='role', ctx=Load()), Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='agent', ctx=Load()), attr='project', ctx=Load()), attr='args', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='\n>>>>>>>>>> System Prompt >>>>>>>>>>\n%s\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'), Subscript(value=Name(id='system_message', ctx=Load()), slice=Constant(value='content'), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='messages', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='system_message', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='send_message', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='prompt_path'), arg(arg='prompt_data'), arg(arg='function_calls', annotation=Name(id='FunctionCallSet', ctx=Load())), arg(arg='should_log_message')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=True)]), body=[Expr(value=Constant(value='\n        Sends a message in the conversation.\n\n        Args:\n            prompt_path: The path to a prompt.\n            prompt_data: Data associated with the prompt.\n            function_calls: Optional function calls to be included in the message.\n            should_log_message: Flag if final response should be logged.\n        Returns:\n            The response from the agent.\n        ')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='construct_and_add_message_from_prompt', ctx=Load()), args=[Name(id='prompt_path', ctx=Load()), Name(id='prompt_data', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='agent', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='Developer')]), body=[AugAssign(target=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='agent', ctx=Load()), attr='project', ctx=Load()), attr='llm_req_num', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='development_step', ctx=Store())], value=Call(func=Name(id='get_saved_development_step', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='agent', ctx=Load()), attr='project', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='development_step', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='agent', ctx=Load()), attr='project', ctx=Load()), attr='skip_steps', ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Name(id='color_yellow', ctx=Load()), args=[JoinedStr(values=[Constant(value='Restoring development step with id '), FormattedValue(value=Attribute(value=Name(id='development_step', ctx=Load()), attr='id', ctx=Load()), conversion=-1)])], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='agent', ctx=Load()), attr='project', ctx=Load()), attr='checkpoints', ctx=Load()), slice=Constant(value='last_development_step'), ctx=Store())], value=Name(id='development_step', ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='agent', ctx=Load()), attr='project', ctx=Load()), attr='restore_files', ctx=Load()), args=[Attribute(value=Name(id='development_step', ctx=Load()), attr='id', ctx=Load())], keywords=[])), Assign(targets=[Name(id='response', ctx=Store())], value=Attribute(value=Name(id='development_step', ctx=Load()), attr='llm_response', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='messages', ctx=Store())], value=Attribute(value=Name(id='development_step', ctx=Load()), attr='messages', ctx=Load())), If(test=BoolOp(op=And(), values=[Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='agent', ctx=Load()), attr='project', ctx=Load()), attr='skip_until_dev_step', ctx=Load()), Compare(left=Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='development_step', ctx=Load()), attr='id', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='agent', ctx=Load()), attr='project', ctx=Load()), attr='skip_until_dev_step', ctx=Load())])]), body=[Assign(targets=[Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='agent', ctx=Load()), attr='project', ctx=Load()), attr='skip_steps', ctx=Store())], value=Constant(value=False)), Expr(value=Call(func=Name(id='delete_all_subsequent_steps', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='agent', ctx=Load()), attr='project', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Constant(value='delete_unrelated_steps'), ops=[In()], comparators=[Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='agent', ctx=Load()), attr='project', ctx=Load()), attr='args', ctx=Load())]), Subscript(value=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='agent', ctx=Load()), attr='project', ctx=Load()), attr='args', ctx=Load()), slice=Constant(value='delete_unrelated_steps'), ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='agent', ctx=Load()), attr='project', ctx=Load()), attr='delete_all_steps_except_current_branch', ctx=Load()), args=[], keywords=[]))], orelse=[])], orelse=[Assign(targets=[Name(id='should_log_message', ctx=Store())], value=Constant(value=True))]), If(test=Attribute(value=Name(id='development_step', ctx=Load()), attr='token_limit_exception_raised', ctx=Load()), body=[Raise(exc=Call(func=Name(id='TokenLimitError', ctx=Load()), args=[Attribute(value=Name(id='development_step', ctx=Load()), attr='token_limit_exception_raised', ctx=Load())], keywords=[]))], orelse=[])], orelse=[Try(body=[Assign(targets=[Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='agent', ctx=Load()), attr='project', ctx=Load()), attr='skip_steps', ctx=Store())], value=Constant(value=False)), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='replace_files', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='response', ctx=Store())], value=Call(func=Name(id='create_gpt_chat_completion', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='messages', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='high_level_step', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='agent', ctx=Load()), attr='project', ctx=Load())], keywords=[keyword(arg='function_calls', value=Name(id='function_calls', ctx=Load()))]))], handlers=[ExceptHandler(type=Name(id='TokenLimitError', ctx=Load()), name='e', body=[Expr(value=Call(func=Name(id='save_development_step', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='agent', ctx=Load()), attr='project', ctx=Load()), Name(id='prompt_path', ctx=Load()), Name(id='prompt_data', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='messages', ctx=Load()), Constant(value=''), Call(func=Name(id='str', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[])], keywords=[])), Raise(exc=Name(id='e', ctx=Load()))])], orelse=[], finalbody=[]), If(test=BoolOp(op=And(), values=[Call(func=Name(id='hasattr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='agent', ctx=Load()), Constant(value='save_dev_steps')], keywords=[]), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='agent', ctx=Load()), attr='save_dev_steps', ctx=Load())]), body=[Expr(value=Call(func=Name(id='save_development_step', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='agent', ctx=Load()), attr='project', ctx=Load()), Name(id='prompt_path', ctx=Load()), Name(id='prompt_data', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='messages', ctx=Load()), Name(id='response', ctx=Load())], keywords=[]))], orelse=[])]), If(test=Compare(left=Name(id='response', ctx=Load()), ops=[Eq()], comparators=[Dict(keys=[], values=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='error', ctx=Load()), args=[Constant(value='Aborting with "OpenAI API error happened"')], keywords=[])), Raise(exc=Call(func=Name(id='Exception', ctx=Load()), args=[Constant(value='OpenAI API error happened.')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='response', ctx=Store())], value=Call(func=Name(id='parse_agent_response', ctx=Load()), args=[Name(id='response', ctx=Load()), Name(id='function_calls', ctx=Load())], keywords=[])), Assign(targets=[Name(id='message_content', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='format_message_content', ctx=Load()), args=[Name(id='response', ctx=Load()), Name(id='function_calls', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='\n>>>>>>>>>> Assistant Prompt >>>>>>>>>>\n%s\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'), Name(id='message_content', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='messages', ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='role'), Constant(value='content')], values=[Constant(value='assistant'), Name(id='message_content', ctx=Load())])], keywords=[])), If(test=Name(id='should_log_message', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='log_message', ctx=Load()), args=[Name(id='message_content', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='response', ctx=Load()))], decorator_list=[]), FunctionDef(name='format_message_content', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='response'), arg(arg='function_calls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='response', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Return(value=Name(id='response', ctx=Load()))], orelse=[Return(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dumps', ctx=Load()), args=[Name(id='response', ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='continuous_conversation', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='prompt_path'), arg(arg='prompt_data'), arg(arg='function_calls')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='\n        Conducts a continuous conversation with the agent.\n\n        Args:\n            prompt_path: The path to a prompt.\n            prompt_data: Data associated with the prompt.\n            function_calls: Optional function calls to be included in the conversation.\n\n        Returns:\n            List of accepted messages in the conversation.\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='log_to_user', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='accepted_messages', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='response', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='send_message', ctx=Load()), args=[Name(id='prompt_path', ctx=Load()), Name(id='prompt_data', ctx=Load()), Name(id='function_calls', ctx=Load())], keywords=[])), While(test=Compare(left=Name(id='response', ctx=Load()), ops=[NotEq()], comparators=[Name(id='END_RESPONSE', ctx=Load())]), body=[Assign(targets=[Name(id='user_message', ctx=Store())], value=Call(func=Name(id='ask_user', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='agent', ctx=Load()), attr='project', ctx=Load()), Constant(value='Do you want to add anything else? If not, just press ENTER.')], keywords=[keyword(arg='hint', value=Name(id='response', ctx=Load())), keyword(arg='require_some_input', value=Constant(value=False))])), If(test=Compare(left=Name(id='user_message', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Expr(value=Call(func=Attribute(value=Name(id='accepted_messages', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='response', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='\n>>>>>>>>>> User Message >>>>>>>>>>\n%s\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'), Name(id='user_message', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='messages', ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='role'), Constant(value='content')], values=[Constant(value='user'), Name(id='user_message', ctx=Load())])], keywords=[])), Assign(targets=[Name(id='response', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='send_message', ctx=Load()), args=[Constant(value=None), Constant(value=None), Name(id='function_calls', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='log_to_user', ctx=Store())], value=Constant(value=True)), Return(value=Name(id='accepted_messages', ctx=Load()))], decorator_list=[]), FunctionDef(name='save_branch', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='branch_name')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='branch_name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='branch_name', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Attribute(value=Name(id='uuid', ctx=Load()), attr='uuid4', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='branches', ctx=Load()), slice=Name(id='branch_name', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='messages', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='branch_name', ctx=Load()))], decorator_list=[]), FunctionDef(name='load_branch', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='branch_name'), arg(arg='reload_files')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='messages', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='branches', ctx=Load()), slice=Name(id='branch_name', ctx=Load()), ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), If(test=Name(id='reload_files', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='replace_files', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='replace_files', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='files', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='agent', ctx=Load()), attr='project', ctx=Load()), attr='get_all_coded_files', ctx=Load()), args=[], keywords=[])), For(target=Name(id='msg', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='messages', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='msg', ctx=Load()), slice=Constant(value='role'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='user')]), body=[For(target=Name(id='file', ctx=Store()), iter=Name(id='files', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='msg', ctx=Load()), slice=Constant(value='content'), ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='replace_file_content', ctx=Load()), args=[Subscript(value=Name(id='msg', ctx=Load()), slice=Constant(value='content'), ctx=Load()), JoinedStr(values=[FormattedValue(value=Subscript(value=Name(id='file', ctx=Load()), slice=Constant(value='path'), ctx=Load()), conversion=-1), Constant(value='/'), FormattedValue(value=Subscript(value=Name(id='file', ctx=Load()), slice=Constant(value='name'), ctx=Load()), conversion=-1)]), Subscript(value=Name(id='file', ctx=Load()), slice=Constant(value='content'), ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='escape_specials', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='s')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='\\'), Constant(value='\\\\')], keywords=[])), Assign(targets=[Name(id='sequences_to_preserve', ctx=Store())], value=List(elts=[Constant(value="\\'"), Constant(value='\\"'), Constant(value='\\n'), Constant(value='\\t')], ctx=Load())), For(target=Name(id='seq', ctx=Store()), iter=Name(id='sequences_to_preserve', ctx=Load()), body=[Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='replace', ctx=Load()), args=[BinOp(left=Constant(value='\\\\'), op=Add(), right=Subscript(value=Name(id='seq', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())), Name(id='seq', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='s', ctx=Load()))], decorator_list=[]), FunctionDef(name='replace_file_content', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='message'), arg(arg='file_path'), arg(arg='new_content')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='pattern', ctx=Store())], value=JoinedStr(values=[Constant(value='\\*\\*'), FormattedValue(value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='escape', ctx=Load()), args=[Name(id='file_path', ctx=Load())], keywords=[]), conversion=-1), Constant(value='\\*\\*:\\n```\\n(.*?)\\n```')])), Assign(targets=[Name(id='new_content_escaped', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='escape_specials', ctx=Load()), args=[Name(id='new_content', ctx=Load())], keywords=[])), Assign(targets=[Name(id='file_path_escaped', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='escape_specials', ctx=Load()), args=[Name(id='file_path', ctx=Load())], keywords=[])), Assign(targets=[Name(id='new_section_content', ctx=Store())], value=JoinedStr(values=[Constant(value='**'), FormattedValue(value=Name(id='file_path_escaped', ctx=Load()), conversion=-1), Constant(value='**\n```\n'), FormattedValue(value=Name(id='new_content_escaped', ctx=Load()), conversion=-1), Constant(value='\n```')])), Assign(targets=[Tuple(elts=[Name(id='updated_message', ctx=Store()), Name(id='num_replacements', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='subn', ctx=Load()), args=[Name(id='pattern', ctx=Load()), Name(id='new_section_content', ctx=Load()), Name(id='message', ctx=Load())], keywords=[keyword(arg='flags', value=Attribute(value=Name(id='re', ctx=Load()), attr='DOTALL', ctx=Load()))])), If(test=Compare(left=Name(id='num_replacements', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Name(id='message', ctx=Load()))], orelse=[]), Return(value=Name(id='updated_message', ctx=Load()))], decorator_list=[]), FunctionDef(name='convo_length', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='len', ctx=Load()), args=[ListComp(elt=Name(id='msg', ctx=Load()), generators=[comprehension(target=Name(id='msg', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='messages', ctx=Load()), ifs=[Compare(left=Subscript(value=Name(id='msg', ctx=Load()), slice=Constant(value='role'), ctx=Load()), ops=[NotEq()], comparators=[Constant(value='system')])], is_async=0)])], keywords=[]))], decorator_list=[]), FunctionDef(name='log_message', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='content')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Logs a message in the conversation.\n\n        Args:\n            content: The content of the message to be logged.\n        ')), Assign(targets=[Name(id='print_msg', ctx=Store())], value=Call(func=Name(id='capitalize_first_word_with_underscores', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='high_level_step', ctx=Load())], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='log_to_user', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='agent', ctx=Load()), attr='project', ctx=Load()), attr='checkpoints', ctx=Load()), slice=Constant(value='last_development_step'), ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='dev_step_msg', ctx=Store())], value=JoinedStr(values=[Constant(value='\nDev step '), FormattedValue(value=Call(func=Name(id='str', ctx=Load()), args=[Subscript(value=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='agent', ctx=Load()), attr='project', ctx=Load()), attr='checkpoints', ctx=Load()), slice=Constant(value='last_development_step'), ctx=Load())], keywords=[]), conversion=-1), Constant(value='\n')])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Name(id='color_yellow_bold', ctx=Load()), args=[Name(id='dev_step_msg', ctx=Load())], keywords=[])], keywords=[keyword(arg='end', value=Constant(value=''))])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Name(id='dev_step_msg', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[JoinedStr(values=[Constant(value='\n'), FormattedValue(value=Name(id='content', ctx=Load()), conversion=-1), Constant(value='\n')])], keywords=[keyword(arg='type', value=Constant(value='local'))]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='print_msg', ctx=Load()), conversion=-1), Constant(value=': '), FormattedValue(value=Name(id='content', ctx=Load()), conversion=-1), Constant(value='\n')])], keywords=[]))], decorator_list=[]), FunctionDef(name='to_context_prompt', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[JoinedStr(values=[Constant(value='to_context_prompt('), FormattedValue(value=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='agent', ctx=Load()), attr='project', ctx=Load()), attr='current_step', ctx=Load()), conversion=-1), Constant(value=')')])], keywords=[])), Return(value=Call(func=Name(id='get_prompt', ctx=Load()), args=[Constant(value='development/context.prompt'), Dict(keys=[Constant(value='directory_tree'), Constant(value='running_processes')], values=[Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='agent', ctx=Load()), attr='project', ctx=Load()), attr='get_directory_tree', ctx=Load()), args=[], keywords=[]), Name(id='running_processes', ctx=Load())])], keywords=[]))], decorator_list=[]), FunctionDef(name='to_playground', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Constant(value='const/convert_to_playground_convo.js'), Constant(value='r')], keywords=[keyword(arg='encoding', value=Constant(value='utf-8'))]), optional_vars=Name(id='file', ctx=Store()))], body=[Assign(targets=[Name(id='content', ctx=Store())], value=Call(func=Attribute(value=Name(id='file', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]))]), Assign(targets=[Name(id='process', ctx=Store())], value=Call(func=Attribute(value=Name(id='subprocess', ctx=Load()), attr='Popen', ctx=Load()), args=[Constant(value='pbcopy')], keywords=[keyword(arg='stdin', value=Attribute(value=Name(id='subprocess', ctx=Load()), attr='PIPE', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='process', ctx=Load()), attr='communicate', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='content', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='{{messages}}'), Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='messages', ctx=Load())], keywords=[])], keywords=[]), attr='encode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='remove_last_x_messages', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='removing last %d messages: %s'), Name(id='x', ctx=Load()), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='messages', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Name(id='x', ctx=Load()))), ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='messages', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='messages', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Name(id='x', ctx=Load()))), ctx=Load()))], decorator_list=[]), FunctionDef(name='construct_and_add_message_from_prompt', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='prompt_path'), arg(arg='prompt_data')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='prompt_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='prompt_data', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Name(id='prompt', ctx=Store())], value=Call(func=Name(id='get_prompt', ctx=Load()), args=[Name(id='prompt_path', ctx=Load()), Name(id='prompt_data', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='\n>>>>>>>>>> User Prompt >>>>>>>>>>\n%s\n>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>'), Name(id='prompt', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='messages', ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='role'), Constant(value='content')], values=[Constant(value='user'), Name(id='prompt', ctx=Load())])], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='get_additional_info_from_user', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='function_calls', annotation=Name(id='FunctionCallSet', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value="\n        Asks user if he wants to make any changes to last message in conversation.\n\n        Args:\n            function_calls: Optional function calls to be included in the message.\n\n        Returns:\n            The response from the agent OR None if user didn't ask for change.\n        ")), Assign(targets=[Name(id='llm_response', ctx=Store())], value=Constant(value=None)), While(test=Constant(value=True), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Name(id='color_yellow', ctx=Load()), args=[Constant(value='Please check this message and say what needs to be changed. If everything is ok just press ENTER')], keywords=[])], keywords=[])), Assign(targets=[Name(id='changes', ctx=Store())], value=Call(func=Name(id='ask_user', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='agent', ctx=Load()), attr='project', ctx=Load()), Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='messages', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value='content'), ctx=Load())], keywords=[keyword(arg='require_some_input', value=Constant(value=False))])), If(test=Compare(left=Call(func=Attribute(value=Name(id='changes', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Constant(value='')]), body=[Break()], orelse=[]), Assign(targets=[Name(id='llm_response', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='send_message', ctx=Load()), args=[Constant(value='utils/update.prompt'), Dict(keys=[Constant(value='changes')], values=[Name(id='changes', ctx=Load())]), Name(id='function_calls', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Getting additional info from user done')], keywords=[])), Return(value=Name(id='llm_response', ctx=Load()))], decorator_list=[])], decorator_list=[])], type_ignores=[])