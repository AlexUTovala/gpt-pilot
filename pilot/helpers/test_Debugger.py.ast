Module(body=[Import(names=[alias(name='builtins')]), Import(names=[alias(name='json')]), Import(names=[alias(name='pytest')]), ImportFrom(module='unittest.mock', names=[alias(name='patch'), alias(name='MagicMock')], level=0), ImportFrom(module='dotenv', names=[alias(name='load_dotenv')], level=0), Expr(value=Call(func=Name(id='load_dotenv', ctx=Load()), args=[], keywords=[])), ImportFrom(module='utils.custom_print', names=[alias(name='get_custom_print')], level=0), ImportFrom(module='helpers.agents.Developer', names=[alias(name='Developer')], level=0), ImportFrom(module='helpers.AgentConvo', names=[alias(name='AgentConvo')], level=0), ImportFrom(module='helpers.Debugger', names=[alias(name='Debugger')], level=0), ImportFrom(module='helpers.test_Project', names=[alias(name='create_project')], level=0), ImportFrom(module='test.mock_questionary', names=[alias(name='MockQuestionary')], level=0), FunctionDef(name='test_debug', args=arguments(posonlyargs=[], args=[arg(arg='mock_save_command'), arg(arg='mock_run_command'), arg(arg='mock_get_saved_command'), arg(arg='mock_save_input'), arg(arg='mock_user_input'), arg(arg='mock_save_step'), arg(arg='mock_get_saved_step')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Attribute(value=Name(id='builtins', ctx=Load()), attr='print', ctx=Store()), Name(id='ipc_client_instance', ctx=Store())], ctx=Store())], value=Call(func=Name(id='get_custom_print', ctx=Load()), args=[Dict(keys=[], values=[])], keywords=[])), Assign(targets=[Name(id='project', ctx=Store())], value=Call(func=Name(id='create_project', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='project', ctx=Load()), attr='current_step', ctx=Store())], value=Constant(value='coding')), Assign(targets=[Name(id='developer', ctx=Store())], value=Call(func=Name(id='Developer', ctx=Load()), args=[Name(id='project', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='project', ctx=Load()), attr='developer', ctx=Store())], value=Name(id='developer', ctx=Load())), Assign(targets=[Name(id='convo', ctx=Store())], value=Call(func=Name(id='AgentConvo', ctx=Load()), args=[Name(id='developer', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='convo', ctx=Load()), attr='load_branch', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Constant(value=None))), Assign(targets=[Name(id='debugger', ctx=Store())], value=Call(func=Name(id='Debugger', ctx=Load()), args=[Name(id='developer', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='convo', ctx=Load()), attr='construct_and_add_message_from_prompt', ctx=Load()), args=[Constant(value='dev_ops/ran_command.prompt'), Dict(keys=[Constant(value='cli_response')], values=[Constant(value="\nstderr:\n```\nnode:internal/modules/cjs/loader:1080\n  throw err;\n  ^\n\nError: Cannot find module 'mime'\nRequire stack:\n- /workspace/chat_app/node_modules/send/index.js\n- /workspace/chat_app/node_modules/express/lib/utils.js\n- /workspace/chat_app/node_modules/express/lib/application.js\n- /workspace/chat_app/node_modules/express/lib/express.js\n- /workspace/chat_app/node_modules/express/index.js\n- /workspace/chat_app/server.js\n    at Module._resolveFilename (node:internal/modules/cjs/loader:1077:15)\n    at Module._load (node:internal/modules/cjs/loader:922:27)\n    at Module.require (node:internal/modules/cjs/loader:1143:19)\n    at require (node:internal/modules/cjs/helpers:121:18)\n    at Object.<anonymous> (/workspace/chat_app/node_modules/send/index.js:24:12)\n    at Module._compile (node:internal/modules/cjs/loader:1256:14)\n    at Module._extensions..js (node:internal/modules/cjs/loader:1310:10)\n    at Module.load (node:internal/modules/cjs/loader:1119:32)\n    at Module._load (node:internal/modules/cjs/loader:960:12)\n```\nstdout:\n```\n> chat_app@1.0.0 start\n> node server.js\n```        \n")])], keywords=[])), Assign(targets=[Name(id='mock_questionary', ctx=Store())], value=Call(func=Name(id='MockQuestionary', ctx=Load()), args=[List(elts=[Constant(value=''), Constant(value='')], ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='utils.questionary.questionary'), Name(id='mock_questionary', ctx=Load())], keywords=[]))], body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='debugger', ctx=Load()), attr='debug', ctx=Load()), args=[Name(id='convo', ctx=Load())], keywords=[keyword(arg='command', value=Dict(keys=[Constant(value='command')], values=[Constant(value='npm run start')])), keyword(arg='is_root_task', value=Constant(value=True))])), Assert(test=Compare(left=Name(id='result', ctx=Load()), ops=[Eq()], comparators=[Dict(keys=[Constant(value='success')], values=[Constant(value=True)])]))])], decorator_list=[Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='uses_tokens', ctx=Load()), Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='pilot.helpers.AgentConvo.get_saved_development_step')], keywords=[]), Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='pilot.helpers.AgentConvo.save_development_step')], keywords=[]), Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='utils.questionary.get_saved_user_input')], keywords=[]), Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='utils.questionary.save_user_input')], keywords=[]), Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='helpers.cli.get_saved_command_run')], keywords=[]), Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='helpers.cli.run_command')], keywords=[]), Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='helpers.cli.save_command_run')], keywords=[])]), FunctionDef(name='test_debug_need_to_see_output', args=arguments(posonlyargs=[], args=[arg(arg='mock_save_step'), arg(arg='mock_get_completion'), arg(arg='mock_get_step')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Attribute(value=Name(id='builtins', ctx=Load()), attr='print', ctx=Store()), Name(id='ipc_client_instance', ctx=Store())], ctx=Store())], value=Call(func=Name(id='get_custom_print', ctx=Load()), args=[Dict(keys=[], values=[])], keywords=[])), Assign(targets=[Name(id='project', ctx=Store())], value=Call(func=Name(id='create_project', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='project', ctx=Load()), attr='current_step', ctx=Store())], value=Constant(value='coding')), Assign(targets=[Name(id='developer', ctx=Store())], value=Call(func=Name(id='Developer', ctx=Load()), args=[Name(id='project', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='developer', ctx=Load()), attr='step_command_run', ctx=Store())], value=Call(func=Name(id='MagicMock', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Attribute(value=Name(id='developer', ctx=Load()), attr='step_command_run', ctx=Load()), attr='side_effect', ctx=Store())], value=List(elts=[Dict(keys=[Constant(value='cli_response'), Constant(value='success')], values=[BinOp(left=BinOp(left=Constant(value='stdout:\n```\n'), op=Add(), right=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dumps', ctx=Load()), args=[Dict(keys=[Constant(value='dependencies')], values=[Dict(keys=[Constant(value='something')], values=[Constant(value='0.1.2')])])], keywords=[])), op=Add(), right=Constant(value='\n```\n')), Constant(value=True)]), Dict(keys=[Constant(value='cli_response'), Constant(value='success')], values=[Constant(value='app is running...'), Constant(value=True)])], ctx=Load())), Assign(targets=[Attribute(value=Name(id='developer', ctx=Load()), attr='step_test', ctx=Store())], value=Call(func=Name(id='MagicMock', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Attribute(value=Name(id='developer', ctx=Load()), attr='step_test', ctx=Load()), attr='return_value', ctx=Store())], value=Dict(keys=[Constant(value='success')], values=[Constant(value=True)])), Assign(targets=[Attribute(value=Name(id='project', ctx=Load()), attr='developer', ctx=Store())], value=Name(id='developer', ctx=Load())), Assign(targets=[Name(id='debugger', ctx=Store())], value=Call(func=Name(id='Debugger', ctx=Load()), args=[Name(id='developer', ctx=Load())], keywords=[])), Assign(targets=[Name(id='convo', ctx=Store())], value=Call(func=Name(id='AgentConvo', ctx=Load()), args=[Name(id='developer', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='convo', ctx=Load()), attr='load_branch', ctx=Store())], value=Call(func=Name(id='MagicMock', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='convo', ctx=Load()), attr='replace_files', ctx=Store())], value=Call(func=Name(id='MagicMock', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='mock_get_completion', ctx=Load()), attr='side_effect', ctx=Store())], value=ListComp(elt=Dict(keys=[Constant(value='text')], values=[Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dumps', ctx=Load()), args=[Name(id='response', ctx=Load())], keywords=[])]), generators=[comprehension(target=Name(id='response', ctx=Store()), iter=List(elts=[Dict(keys=[Constant(value='thoughts'), Constant(value='reasoning'), Constant(value='steps')], values=[Constant(value='Hmmm, testing'), Constant(value='I need to see the output of the command'), List(elts=[Dict(keys=[Constant(value='type'), Constant(value='command'), Constant(value='need_to_see_output')], values=[Constant(value='command'), Constant(value='cat package.json'), Constant(value=True)]), Dict(keys=[Constant(value='type'), Constant(value='command')], values=[Constant(value='command'), Constant(value='npm install something')])], ctx=Load())]), Dict(keys=[Constant(value='thoughts'), Constant(value='reasoning'), Constant(value='steps')], values=[Constant(value='It is already installed'), Constant(value='I installed it earlier'), List(elts=[Dict(keys=[Constant(value='type'), Constant(value='command'), Constant(value='command_id')], values=[Constant(value='command'), Constant(value='npm start'), Constant(value='app')])], ctx=Load())])], ctx=Load()), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='debugger', ctx=Load()), attr='debug', ctx=Load()), args=[Name(id='convo', ctx=Load())], keywords=[keyword(arg='command', value=Dict(keys=[Constant(value='command')], values=[Constant(value='npm run start')])), keyword(arg='is_root_task', value=Constant(value=True))])), Assert(test=Compare(left=Attribute(value=Name(id='mock_get_completion', ctx=Load()), attr='call_count', ctx=Load()), ops=[Eq()], comparators=[Constant(value=2)])), Assign(targets=[Name(id='prompt', ctx=Store())], value=Subscript(value=Subscript(value=Subscript(value=Attribute(value=Subscript(value=Attribute(value=Name(id='mock_get_completion', ctx=Load()), attr='call_args_list', ctx=Load()), slice=Constant(value=1), ctx=Load()), attr='args', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value=2), ctx=Load()), slice=Constant(value='content'), ctx=Load())), Assert(test=Call(func=Attribute(value=Name(id='prompt', ctx=Load()), attr='startswith', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='{"thoughts": "It is already installed", "reasoning": "I installed it earlier", "steps": [{"type": "command", "command": "npm start", "command_id": "app"}]}'), attr='lstrip', ctx=Load()), args=[], keywords=[])], keywords=[])), Assert(test=Compare(left=Attribute(value=Attribute(value=Name(id='developer', ctx=Load()), attr='step_command_run', ctx=Load()), attr='call_count', ctx=Load()), ops=[Eq()], comparators=[Constant(value=2)])), Assert(test=Compare(left=Subscript(value=Subscript(value=Attribute(value=Subscript(value=Attribute(value=Attribute(value=Name(id='developer', ctx=Load()), attr='step_command_run', ctx=Load()), attr='call_args_list', ctx=Load()), slice=Constant(value=1), ctx=Load()), attr='args', ctx=Load()), slice=Constant(value=1), ctx=Load()), slice=Constant(value='command'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='npm start')]))], decorator_list=[Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='helpers.AgentConvo.get_saved_development_step')], keywords=[]), Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='helpers.AgentConvo.create_gpt_chat_completion')], keywords=[]), Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='helpers.AgentConvo.save_development_step')], keywords=[])])], type_ignores=[])