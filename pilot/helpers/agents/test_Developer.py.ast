Module(body=[Import(names=[alias(name='builtins')]), Import(names=[alias(name='json')]), Import(names=[alias(name='os')]), Import(names=[alias(name='pytest')]), ImportFrom(module='unittest.mock', names=[alias(name='patch'), alias(name='MagicMock')], level=0), Import(names=[alias(name='requests')]), ImportFrom(module='helpers.AgentConvo', names=[alias(name='AgentConvo')], level=0), ImportFrom(module='dotenv', names=[alias(name='load_dotenv')], level=0), Expr(value=Call(func=Name(id='load_dotenv', ctx=Load()), args=[], keywords=[])), ImportFrom(module='main', names=[alias(name='get_custom_print')], level=0), ImportFrom(module='Developer', names=[alias(name='Developer'), alias(name='ENVIRONMENT_SETUP_STEP')], level=1), ImportFrom(module='test.mock_questionary', names=[alias(name='MockQuestionary')], level=0), ImportFrom(module='helpers.test_Project', names=[alias(name='create_project')], level=0), ClassDef(name='TestDeveloper', bases=[], keywords=[], body=[FunctionDef(name='setup_method', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Attribute(value=Name(id='builtins', ctx=Load()), attr='print', ctx=Store()), Name(id='ipc_client_instance', ctx=Store())], ctx=Store())], value=Call(func=Name(id='get_custom_print', ctx=Load()), args=[Dict(keys=[], values=[])], keywords=[])), Assign(targets=[Name(id='name', ctx=Store())], value=Constant(value='TestDeveloper')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Store())], value=Call(func=Name(id='create_project', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='app_id', ctx=Store())], value=Constant(value='test-developer')), Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='name', ctx=Store())], value=Name(id='name', ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='set_root_path', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Name(id='__file__', ctx=Load())], keywords=[])], keywords=[]), Constant(value='../../../workspace/TestDeveloper')], keywords=[])], keywords=[])], keywords=[])), Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='technologies', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='current_step', ctx=Store())], value=Name(id='ENVIRONMENT_SETUP_STEP', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='developer', ctx=Store())], value=Call(func=Name(id='Developer', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_install_technology', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='mock_execute_command'), arg(arg='mock_completion'), arg(arg='mock_save'), arg(arg='mock_get_saved_step')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='developer', ctx=Load()), attr='convo_os_specific_tech', ctx=Store())], value=Call(func=Name(id='AgentConvo', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='developer', ctx=Load())], keywords=[])), Assign(targets=[Name(id='llm_response', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='developer', ctx=Load()), attr='install_technology', ctx=Load()), args=[Constant(value='python')], keywords=[])), Assert(test=Compare(left=Name(id='llm_response', ctx=Load()), ops=[Eq()], comparators=[Constant(value='DONE')])), Expr(value=Call(func=Attribute(value=Name(id='mock_execute_command', ctx=Load()), attr='assert_called_once_with', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), Constant(value='python --version')], keywords=[keyword(arg='timeout', value=Constant(value=10)), keyword(arg='command_id', value=Constant(value=None))]))], decorator_list=[Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='uses_tokens', ctx=Load()), Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='helpers.AgentConvo.get_saved_development_step')], keywords=[]), Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='helpers.AgentConvo.save_development_step')], keywords=[]), Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='helpers.AgentConvo.create_gpt_chat_completion')], keywords=[keyword(arg='return_value', value=Dict(keys=[Constant(value='text')], values=[Constant(value='{"command": "python --version", "timeout": 10}')]))]), Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='helpers.cli.execute_command')], keywords=[keyword(arg='return_value', value=Tuple(elts=[Constant(value=''), Constant(value='DONE'), Constant(value=None)], ctx=Load()))])]), FunctionDef(name='test_implement_task', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='mock_completion'), arg(arg='mock_save'), arg(arg='mock_get_saved_step')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='project', ctx=Store())], value=Call(func=Name(id='create_project', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='project', ctx=Load()), attr='project_description', ctx=Store())], value=Constant(value='Test Project')), Assign(targets=[Attribute(value=Name(id='project', ctx=Load()), attr='development_plan', ctx=Store())], value=List(elts=[Dict(keys=[Constant(value='description'), Constant(value='user_review_goal')], values=[Constant(value='Do stuff'), Constant(value='Do stuff')])], ctx=Load())), Assign(targets=[Attribute(value=Name(id='project', ctx=Load()), attr='get_all_coded_files', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=List(elts=[], ctx=Load()))), Assign(targets=[Attribute(value=Name(id='project', ctx=Load()), attr='current_step', ctx=Store())], value=Constant(value='test')), Assign(targets=[Name(id='developer', ctx=Store())], value=Call(func=Name(id='Developer', ctx=Load()), args=[Name(id='project', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='developer', ctx=Load()), attr='execute_task', ctx=Store())], value=Call(func=Name(id='MagicMock', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Attribute(value=Name(id='developer', ctx=Load()), attr='execute_task', ctx=Load()), attr='return_value', ctx=Store())], value=Dict(keys=[Constant(value='success')], values=[Constant(value=True)])), Expr(value=Call(func=Attribute(value=Name(id='developer', ctx=Load()), attr='implement_task', ctx=Load()), args=[Constant(value=0), Dict(keys=[Constant(value='description')], values=[Constant(value='Do stuff')])], keywords=[])), Assert(test=Compare(left=Attribute(value=Attribute(value=Name(id='developer', ctx=Load()), attr='execute_task', ctx=Load()), attr='call_count', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])), Assert(test=Compare(left=Subscript(value=Subscript(value=Attribute(value=Attribute(value=Name(id='developer', ctx=Load()), attr='execute_task', ctx=Load()), attr='call_args', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value=2), ctx=Load()), ops=[Eq()], comparators=[List(elts=[Dict(keys=[Constant(value='command')], values=[Constant(value='ls -al')])], ctx=Load())]))], decorator_list=[Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='helpers.AgentConvo.get_saved_development_step')], keywords=[]), Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='helpers.AgentConvo.save_development_step')], keywords=[]), Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='helpers.AgentConvo.create_gpt_chat_completion')], keywords=[keyword(arg='return_value', value=Dict(keys=[Constant(value='text')], values=[Constant(value='{"tasks": [{"command": "ls -al"}]}')]))])]), FunctionDef(name='test_implement_task_reject_with_user_input', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='mock_completion'), arg(arg='mock_save'), arg(arg='mock_get_saved_step')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='project', ctx=Store())], value=Call(func=Name(id='create_project', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='project', ctx=Load()), attr='project_description', ctx=Store())], value=Constant(value='Test Project')), Assign(targets=[Attribute(value=Name(id='project', ctx=Load()), attr='development_plan', ctx=Store())], value=List(elts=[Dict(keys=[Constant(value='description'), Constant(value='user_review_goal')], values=[Constant(value='Do stuff'), Constant(value='Do stuff')])], ctx=Load())), Assign(targets=[Attribute(value=Name(id='project', ctx=Load()), attr='get_all_coded_files', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=List(elts=[], ctx=Load()))), Assign(targets=[Attribute(value=Name(id='project', ctx=Load()), attr='current_step', ctx=Store())], value=Constant(value='test')), Assign(targets=[Name(id='developer', ctx=Store())], value=Call(func=Name(id='Developer', ctx=Load()), args=[Name(id='project', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='developer', ctx=Load()), attr='execute_task', ctx=Store())], value=Call(func=Name(id='MagicMock', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Attribute(value=Name(id='developer', ctx=Load()), attr='execute_task', ctx=Load()), attr='side_effect', ctx=Store())], value=List(elts=[Dict(keys=[Constant(value='success'), Constant(value='step_index'), Constant(value='user_input')], values=[Constant(value=False), Constant(value=2), Constant(value='no, use a better command')]), Dict(keys=[Constant(value='success')], values=[Constant(value=True)])], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='developer', ctx=Load()), attr='implement_task', ctx=Load()), args=[Constant(value=0), Dict(keys=[Constant(value='description')], values=[Constant(value='Do stuff')])], keywords=[])), Assert(test=Compare(left=Attribute(value=Name(id='mock_completion', ctx=Load()), attr='call_count', ctx=Load()), ops=[Eq()], comparators=[Constant(value=3)])), Assign(targets=[Name(id='prompt', ctx=Store())], value=Subscript(value=Subscript(value=Subscript(value=Attribute(value=Subscript(value=Attribute(value=Name(id='mock_completion', ctx=Load()), attr='call_args_list', ctx=Load()), slice=Constant(value=2), ctx=Load()), attr='args', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value=2), ctx=Load()), slice=Constant(value='content'), ctx=Load())), Assert(test=Call(func=Attribute(value=Name(id='prompt', ctx=Load()), attr='startswith', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='{"tasks": [{"command": "ls -al"}, {"command": "ls -al src"}, {"command": "ls -al test"}, {"command": "ls -al build"}]}'), attr='lstrip', ctx=Load()), args=[], keywords=[])], keywords=[])), Assert(test=Compare(left=Attribute(value=Attribute(value=Name(id='developer', ctx=Load()), attr='execute_task', ctx=Load()), attr='call_count', ctx=Load()), ops=[Eq()], comparators=[Constant(value=2)]))], decorator_list=[Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='helpers.AgentConvo.get_saved_development_step')], keywords=[]), Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='helpers.AgentConvo.save_development_step')], keywords=[]), Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='helpers.AgentConvo.create_gpt_chat_completion')], keywords=[keyword(arg='return_value', value=Dict(keys=[Constant(value='text')], values=[Constant(value='{"tasks": [{"command": "ls -al"}, {"command": "ls -al src"}, {"command": "ls -al test"}, {"command": "ls -al build"}]}')]))])]), FunctionDef(name='test_code_changes_command_test', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='mock_get_saved_step'), arg(arg='mock_save'), arg(arg='mock_chat_completion'), arg(arg='mock_execute_command')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='monkey', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='convo', ctx=Store())], value=Call(func=Name(id='AgentConvo', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='developer', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='convo', ctx=Load()), attr='save_branch', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='branch_name')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=Name(id='branch_name', ctx=Load()))), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='developer', ctx=Load()), attr='test_code_changes', ctx=Load()), args=[Name(id='monkey', ctx=Load()), Name(id='convo', ctx=Load())], keywords=[])), Assert(test=Compare(left=Name(id='result', ctx=Load()), ops=[Eq()], comparators=[Dict(keys=[Constant(value='success')], values=[Constant(value=True)])]))], decorator_list=[Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='helpers.AgentConvo.get_saved_development_step')], keywords=[]), Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='helpers.AgentConvo.save_development_step')], keywords=[]), Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='helpers.AgentConvo.create_gpt_chat_completion')], keywords=[keyword(arg='return_value', value=Dict(keys=[Constant(value='text')], values=[Constant(value='{"type": "command_test", "command": {"command": "npm run test", "timeout": 3000}}')]))]), Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='helpers.cli.execute_command')], keywords=[keyword(arg='return_value', value=Tuple(elts=[Constant(value='stdout:\n```\n\n```'), Constant(value='DONE'), Constant(value=None)], ctx=Load()))])]), FunctionDef(name='test_code_changes_manual_test_continue', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='mock_get_saved_step'), arg(arg='mock_save'), arg(arg='mock_chat_completion'), arg(arg='mock_ask_user')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='monkey', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='convo', ctx=Store())], value=Call(func=Name(id='AgentConvo', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='developer', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='convo', ctx=Load()), attr='save_branch', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='branch_name')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=Name(id='branch_name', ctx=Load()))), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='developer', ctx=Load()), attr='test_code_changes', ctx=Load()), args=[Name(id='monkey', ctx=Load()), Name(id='convo', ctx=Load())], keywords=[])), Assert(test=Compare(left=Name(id='result', ctx=Load()), ops=[Eq()], comparators=[Dict(keys=[Constant(value='success')], values=[Constant(value=True)])]))], decorator_list=[Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='helpers.AgentConvo.get_saved_development_step')], keywords=[]), Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='helpers.AgentConvo.save_development_step')], keywords=[]), Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='helpers.AgentConvo.create_gpt_chat_completion')], keywords=[keyword(arg='return_value', value=Dict(keys=[Constant(value='text')], values=[Constant(value='{"type": "manual_test", "manual_test_description": "Does it look good?"}')]))]), Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='helpers.Project.ask_user')], keywords=[keyword(arg='return_value', value=Constant(value='continue'))])]), FunctionDef(name='test_code_changes_manual_test_no', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='mock_get_saved_user_input'), arg(arg='mock_chat_completion'), arg(arg='mock_save'), arg(arg='mock_get_saved_step')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='monkey', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='convo', ctx=Store())], value=Call(func=Name(id='AgentConvo', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='developer', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='convo', ctx=Load()), attr='save_branch', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='branch_name')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=Name(id='branch_name', ctx=Load()))), Assign(targets=[Attribute(value=Name(id='convo', ctx=Load()), attr='load_branch', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='function_uuid')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=Name(id='function_uuid', ctx=Load()))), Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='developer', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='developer', ctx=Load())), Assign(targets=[Attribute(value=Name(id='mock_chat_completion', ctx=Load()), attr='side_effect', ctx=Store())], value=List(elts=[Dict(keys=[Constant(value='text')], values=[Constant(value='{"type": "manual_test", "manual_test_description": "Does it look good?"}')]), Dict(keys=[Constant(value='text')], values=[Constant(value='{"thoughts": "hmmm...", "reasoning": "testing", "steps": [{"type": "command", "command": {"command": "something scary", "timeout": 3000}, "check_if_fixed": true}]}')]), Dict(keys=[Constant(value='text')], values=[Constant(value='do something else scary')])], ctx=Load())), Assign(targets=[Name(id='mock_questionary', ctx=Store())], value=Call(func=Name(id='MockQuestionary', ctx=Load()), args=[List(elts=[Constant(value='no'), Constant(value='no')], ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='utils.questionary.questionary'), Name(id='mock_questionary', ctx=Load())], keywords=[]))], body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='developer', ctx=Load()), attr='test_code_changes', ctx=Load()), args=[Name(id='monkey', ctx=Load()), Name(id='convo', ctx=Load())], keywords=[])), Assert(test=Compare(left=Name(id='result', ctx=Load()), ops=[Eq()], comparators=[Dict(keys=[Constant(value='success'), Constant(value='user_input')], values=[Constant(value=True), Constant(value='no')])]))])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='skip', ctx=Load()), args=[Constant(value='endless loop in questionary')], keywords=[]), Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='helpers.AgentConvo.get_saved_development_step')], keywords=[]), Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='helpers.AgentConvo.save_development_step')], keywords=[]), Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='helpers.AgentConvo.create_gpt_chat_completion')], keywords=[]), Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='utils.questionary.get_saved_user_input')], keywords=[])]), FunctionDef(name='test_test_code_changes_invalid_json', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='mock_get_saved_user_input'), arg(arg='mock_requests_post'), arg(arg='mock_save'), arg(arg='mock_get_saved_step'), arg(arg='mock_execute'), arg(arg='monkeypatch')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='monkey', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='convo', ctx=Store())], value=Call(func=Name(id='AgentConvo', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='developer', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='convo', ctx=Load()), attr='save_branch', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='branch_name')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=Name(id='branch_name', ctx=Load()))), Assign(targets=[Attribute(value=Name(id='convo', ctx=Load()), attr='load_branch', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='function_uuid')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=Name(id='function_uuid', ctx=Load()))), Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='developer', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='developer', ctx=Load())), Assign(targets=[Name(id='types_in_response', ctx=Store())], value=List(elts=[Constant(value='command'), Constant(value='wrong_again'), Constant(value='command_test')], ctx=Load())), Assign(targets=[Name(id='json_received', ctx=Store())], value=List(elts=[], ctx=Load())), FunctionDef(name='generate_response', args=arguments(posonlyargs=[], args=[], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Assign(targets=[Name(id='content', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='msg', ctx=Load()), slice=Constant(value='content'), ctx=Load()), generators=[comprehension(target=Name(id='msg', ctx=Store()), iter=Subscript(value=Subscript(value=Name(id='kwargs', ctx=Load()), slice=Constant(value='json'), ctx=Load()), slice=Constant(value='messages'), ctx=Load()), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='json_received', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='content', ctx=Load())], keywords=[])), Assign(targets=[Name(id='gpt_response', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dumps', ctx=Load()), args=[Dict(keys=[Constant(value='type'), Constant(value='command')], values=[Call(func=Attribute(value=Name(id='types_in_response', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value=0)], keywords=[]), Dict(keys=[Constant(value='command'), Constant(value='timeout')], values=[Constant(value='node server.js'), Constant(value=3000)])])], keywords=[])), Assign(targets=[Name(id='choice', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dumps', ctx=Load()), args=[Dict(keys=[Constant(value='delta')], values=[Dict(keys=[Constant(value='content')], values=[Name(id='gpt_response', ctx=Load())])])], keywords=[])), Assign(targets=[Name(id='line', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dumps', ctx=Load()), args=[Dict(keys=[Constant(value='choices')], values=[List(elts=[Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='loads', ctx=Load()), args=[Name(id='choice', ctx=Load())], keywords=[])], ctx=Load())])], keywords=[]), attr='encode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[])), Assign(targets=[Name(id='response', ctx=Store())], value=Call(func=Attribute(value=Name(id='requests', ctx=Load()), attr='Response', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='response', ctx=Load()), attr='status_code', ctx=Store())], value=Constant(value=200)), Assign(targets=[Attribute(value=Name(id='response', ctx=Load()), attr='iter_lines', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=List(elts=[Name(id='line', ctx=Load())], ctx=Load()))), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[JoinedStr(values=[Constant(value='##### mock response: '), FormattedValue(value=Name(id='response', ctx=Load()), conversion=-1)])], keywords=[])), Return(value=Name(id='response', ctx=Load()))], decorator_list=[]), Assign(targets=[Attribute(value=Name(id='mock_requests_post', ctx=Load()), attr='side_effect', ctx=Store())], value=Name(id='generate_response', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='monkeypatch', ctx=Load()), attr='setenv', ctx=Load()), args=[Constant(value='OPENAI_API_KEY'), Constant(value='secret')], keywords=[])), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='developer', ctx=Load()), attr='test_code_changes', ctx=Load()), args=[Name(id='monkey', ctx=Load()), Name(id='convo', ctx=Load())], keywords=[])), Assert(test=Compare(left=Name(id='result', ctx=Load()), ops=[Eq()], comparators=[Dict(keys=[Constant(value='success')], values=[Constant(value=True)])])), Assert(test=Compare(left=Attribute(value=Name(id='mock_requests_post', ctx=Load()), attr='call_count', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]))], decorator_list=[Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='helpers.cli.execute_command')], keywords=[keyword(arg='return_value', value=Tuple(elts=[Constant(value='stdout:\n```\n\n```'), Constant(value='DONE'), Constant(value=None)], ctx=Load()))]), Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='helpers.AgentConvo.get_saved_development_step')], keywords=[]), Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='helpers.AgentConvo.save_development_step')], keywords=[]), Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='utils.llm_connection.requests.post')], keywords=[]), Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='utils.questionary.get_saved_user_input')], keywords=[])])], decorator_list=[])], type_ignores=[])