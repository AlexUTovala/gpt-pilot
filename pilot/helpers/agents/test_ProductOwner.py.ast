Module(body=[Import(names=[alias(name='builtins')]), Import(names=[alias(name='pytest')]), ImportFrom(module='dotenv', names=[alias(name='load_dotenv')], level=0), ImportFrom(module='unittest.mock', names=[alias(name='patch'), alias(name='MagicMock')], level=0), ImportFrom(module='main', names=[alias(name='get_custom_print')], level=0), ImportFrom(module='helpers.test_Project', names=[alias(name='create_project')], level=0), ImportFrom(module='ProductOwner', names=[alias(name='ProductOwner')], level=1), Expr(value=Call(func=Name(id='load_dotenv', ctx=Load()), args=[], keywords=[])), ClassDef(name='TestProductOwner', bases=[], keywords=[], body=[FunctionDef(name='setup_method', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Attribute(value=Name(id='builtins', ctx=Load()), attr='print', ctx=Store()), Name(id='ipc_client_instance', ctx=Store())], ctx=Store())], value=Call(func=Name(id='get_custom_print', ctx=Load()), args=[Dict(keys=[], values=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_ask_clarifying_questions', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='mock_completion'), arg(arg='mock_ask')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='project', ctx=Store())], value=Call(func=Name(id='create_project', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='product_owner', ctx=Store())], value=Call(func=Name(id='ProductOwner', ctx=Load()), args=[Name(id='project', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='mock_completion', ctx=Load()), attr='side_effect', ctx=Store())], value=List(elts=[Dict(keys=[Constant(value='text')], values=[Constant(value='Will the app run in the console?')]), Dict(keys=[Constant(value='text')], values=[Constant(value='Will it always print "Hello World"?')]), Dict(keys=[Constant(value='text')], values=[Constant(value='EVERYTHING_CLEAR')])], ctx=Load())), Assign(targets=[Name(id='high_level_messages', ctx=Store())], value=Call(func=Attribute(value=Name(id='product_owner', ctx=Load()), attr='ask_clarifying_questions', ctx=Load()), args=[Constant(value='A Python version of the typical "hello world" application.')], keywords=[])), For(target=Name(id='msg', ctx=Store()), iter=Name(id='high_level_messages', ctx=Load()), body=[Assert(test=Compare(left=Subscript(value=Name(id='msg', ctx=Load()), slice=Constant(value='role'), ctx=Load()), ops=[NotEq()], comparators=[Constant(value='system')])), Assert(test=Compare(left=Constant(value='You are an experienced project owner'), ops=[NotIn()], comparators=[Subscript(value=Name(id='msg', ctx=Load()), slice=Constant(value='content'), ctx=Load())])), Assert(test=Compare(left=Constant(value="I'm going to show you an overview of tasks"), ops=[NotIn()], comparators=[Subscript(value=Name(id='msg', ctx=Load()), slice=Constant(value='content'), ctx=Load())])), Assert(test=Compare(left=Constant(value='Getting additional answers'), ops=[NotIn()], comparators=[Subscript(value=Name(id='msg', ctx=Load()), slice=Constant(value='content'), ctx=Load())]))], orelse=[])], decorator_list=[Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='prompts.prompts.ask_user')], keywords=[keyword(arg='return_value', value=Constant(value='yes'))]), Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='prompts.prompts.create_gpt_chat_completion')], keywords=[])]), FunctionDef(name='test_generate_project_summary', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='mock_get_step')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='project', ctx=Store())], value=Call(func=Name(id='create_project', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='product_owner', ctx=Store())], value=Call(func=Name(id='ProductOwner', ctx=Load()), args=[Name(id='project', ctx=Load())], keywords=[])), Assign(targets=[Name(id='summary', ctx=Store())], value=Call(func=Attribute(value=Name(id='product_owner', ctx=Load()), attr='generate_project_summary', ctx=Load()), args=[List(elts=[Dict(keys=[Constant(value='role'), Constant(value='content')], values=[Constant(value='user'), Constant(value='I want you to create the app (let\'s call it "TestProject") that can be described like this:\n```\nA Python version of the typical "hello world" application.\n```')]), Dict(keys=[Constant(value='role'), Constant(value='content')], values=[Constant(value='assistant'), Constant(value='Should the application produce a text-based output?')]), Dict(keys=[Constant(value='role'), Constant(value='content')], values=[Constant(value='user'), Constant(value='yes')]), Dict(keys=[Constant(value='role'), Constant(value='content')], values=[Constant(value='assistant'), Constant(value='Should the application be command-line based or should it have a GUI (Graphical User Interface)?')]), Dict(keys=[Constant(value='role'), Constant(value='content')], values=[Constant(value='user'), Constant(value='command-line')]), Dict(keys=[Constant(value='role'), Constant(value='content')], values=[Constant(value='assistant'), Constant(value='Is there a specific version of Python you prefer the application to be written in?')]), Dict(keys=[Constant(value='role'), Constant(value='content')], values=[Constant(value='user'), Constant(value='no')]), Dict(keys=[Constant(value='role'), Constant(value='content')], values=[Constant(value='assistant'), Constant(value='Are there any specific packages or libraries you want to be used in the development of this application?')]), Dict(keys=[Constant(value='role'), Constant(value='content')], values=[Constant(value='user'), Constant(value='no')])], ctx=Load())], keywords=[])), Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='summary', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), Assert(test=Compare(left=Constant(value='EVERYTHING_CLEAR'), ops=[NotIn()], comparators=[Name(id='summary', ctx=Load())])), Assert(test=Compare(left=Constant(value='neutral tone'), ops=[NotIn()], comparators=[Name(id='summary', ctx=Load())])), Assert(test=Compare(left=Constant(value='clarification'), ops=[NotIn()], comparators=[Name(id='summary', ctx=Load())]))], decorator_list=[Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='uses_tokens', ctx=Load()), Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='helpers.AgentConvo.get_saved_development_step')], keywords=[])])], decorator_list=[])], type_ignores=[])