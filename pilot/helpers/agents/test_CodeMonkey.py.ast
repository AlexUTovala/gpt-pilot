Module(body=[Import(names=[alias(name='re')]), Import(names=[alias(name='os')]), ImportFrom(module='unittest.mock', names=[alias(name='patch'), alias(name='MagicMock')], level=0), ImportFrom(module='dotenv', names=[alias(name='load_dotenv')], level=0), Expr(value=Call(func=Name(id='load_dotenv', ctx=Load()), args=[], keywords=[])), ImportFrom(module='CodeMonkey', names=[alias(name='CodeMonkey')], level=1), ImportFrom(module='Developer', names=[alias(name='Developer')], level=1), ImportFrom(module='database.models.files', names=[alias(name='File')], level=0), ImportFrom(module='database.models.development_steps', names=[alias(name='DevelopmentSteps')], level=0), ImportFrom(module='helpers.Project', names=[alias(name='Project'), alias(name='update_file'), alias(name='clear_directory')], level=0), ImportFrom(module='helpers.AgentConvo', names=[alias(name='AgentConvo')], level=0), ImportFrom(module='test.test_utils', names=[alias(name='mock_terminal_size')], level=0), Assign(targets=[Name(id='SEND_TO_LLM', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='WRITE_TO_FILE', ctx=Store())], value=Constant(value=False)), ClassDef(name='TestCodeMonkey', bases=[], keywords=[], body=[FunctionDef(name='setup_method', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Constant(value='TestDeveloper')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Store())], value=Call(func=Name(id='Project', ctx=Load()), args=[Dict(keys=[Constant(value='app_id'), Constant(value='name'), Constant(value='app_type')], values=[Constant(value='test-developer'), Name(id='name', ctx=Load()), Constant(value='')])], keywords=[keyword(arg='name', value=Name(id='name', ctx=Load())), keyword(arg='architecture', value=List(elts=[], ctx=Load())), keyword(arg='user_stories', value=List(elts=[], ctx=Load())), keyword(arg='current_step', value=Constant(value='coding'))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='set_root_path', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Name(id='__file__', ctx=Load())], keywords=[])], keywords=[]), Constant(value='../../../workspace/TestDeveloper')], keywords=[])], keywords=[])], keywords=[])), Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='technologies', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='last_step', ctx=Store())], value=Call(func=Name(id='DevelopmentSteps', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='last_step', ctx=Load()), attr='id', ctx=Store())], value=Constant(value=1)), Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='checkpoints', ctx=Store())], value=Dict(keys=[Constant(value='last_development_step')], values=[Name(id='last_step', ctx=Load())])), Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='app', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='developer', ctx=Store())], value=Call(func=Name(id='Developer', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='codeMonkey', ctx=Store())], value=Call(func=Name(id='CodeMonkey', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load())], keywords=[keyword(arg='developer', value=Attribute(value=Name(id='self', ctx=Load()), attr='developer', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='test_implement_code_changes', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='mock_get_dev'), arg(arg='mock_save_dev'), arg(arg='mock_file_insert')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='task_description', ctx=Store())], value=Constant(value='High level description of the task')), Assign(targets=[Name(id='code_changes_description', ctx=Store())], value=Constant(value="Write the word 'Washington' to a .txt file")), Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='get_all_coded_files', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=List(elts=[], ctx=Load()))), If(test=Name(id='SEND_TO_LLM', ctx=Load()), body=[Assign(targets=[Name(id='convo', ctx=Store())], value=Call(func=Name(id='AgentConvo', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='codeMonkey', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='convo', ctx=Store())], value=Call(func=Name(id='MagicMock', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='mock_responses', ctx=Store())], value=List(elts=[Dict(keys=[Constant(value='files')], values=[List(elts=[Dict(keys=[Constant(value='content'), Constant(value='description'), Constant(value='name'), Constant(value='path')], values=[Constant(value='Washington'), Constant(value="A new .txt file with the word 'Washington' in it."), Constant(value='washington.txt'), Constant(value='washington.txt')])], ctx=Load())])], ctx=Load())), Assign(targets=[Attribute(value=Attribute(value=Name(id='convo', ctx=Load()), attr='send_message', ctx=Load()), attr='side_effect', ctx=Store())], value=Name(id='mock_responses', ctx=Load()))]), If(test=Name(id='WRITE_TO_FILE', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='codeMonkey', ctx=Load()), attr='implement_code_changes', ctx=Load()), args=[Name(id='convo', ctx=Load()), Name(id='task_description', ctx=Load()), Name(id='code_changes_description', ctx=Load()), Dict(keys=[], values=[])], keywords=[]))], orelse=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='patch', ctx=Load()), attr='object', ctx=Load()), args=[Name(id='Project', ctx=Load()), Constant(value='save_file')], keywords=[]), optional_vars=Name(id='mock_save_file', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='codeMonkey', ctx=Load()), attr='implement_code_changes', ctx=Load()), args=[Name(id='convo', ctx=Load()), Name(id='task_description', ctx=Load()), Name(id='code_changes_description', ctx=Load()), Dict(keys=[], values=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='mock_save_file', ctx=Load()), attr='assert_called_once', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='called_data', ctx=Store())], value=Subscript(value=Subscript(value=Attribute(value=Name(id='mock_save_file', ctx=Load()), attr='call_args', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value=0), ctx=Load())), Assert(test=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='match', ctx=Load()), args=[Constant(value='\\w+\\.txt$'), Subscript(value=Name(id='called_data', ctx=Load()), slice=Constant(value='name'), ctx=Load())], keywords=[])), Assert(test=BoolOp(op=Or(), values=[Compare(left=Subscript(value=Name(id='called_data', ctx=Load()), slice=Constant(value='path'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='/')]), Compare(left=Subscript(value=Name(id='called_data', ctx=Load()), slice=Constant(value='path'), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='called_data', ctx=Load()), slice=Constant(value='name'), ctx=Load())])])), Assert(test=Compare(left=Subscript(value=Name(id='called_data', ctx=Load()), slice=Constant(value='content'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='Washington')]))])])], decorator_list=[Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='helpers.AgentConvo.get_saved_development_step')], keywords=[keyword(arg='return_value', value=Constant(value=None))]), Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='helpers.AgentConvo.save_development_step')], keywords=[]), Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='os.get_terminal_size'), Name(id='mock_terminal_size', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='patch', ctx=Load()), attr='object', ctx=Load()), args=[Name(id='File', ctx=Load()), Constant(value='insert')], keywords=[])]), FunctionDef(name='test_implement_code_changes_with_read', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='mock_get_dev'), arg(arg='mock_save_dev'), arg(arg='mock_file_insert')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='task_description', ctx=Store())], value=Constant(value='High level description of the task')), Assign(targets=[Name(id='code_changes_description', ctx=Store())], value=Constant(value='Read the file called file_to_read.txt and write its content to a file called output.txt')), Assign(targets=[Name(id='workspace', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='root_path', ctx=Load())), Expr(value=Call(func=Name(id='update_file', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='workspace', ctx=Load()), Constant(value='file_to_read.txt')], keywords=[]), Constant(value='Hello World!\n')], keywords=[])), Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='get_all_coded_files', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=List(elts=[], ctx=Load()))), If(test=Name(id='SEND_TO_LLM', ctx=Load()), body=[Assign(targets=[Name(id='convo', ctx=Store())], value=Call(func=Name(id='AgentConvo', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='codeMonkey', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='convo', ctx=Store())], value=Call(func=Name(id='MagicMock', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='mock_responses', ctx=Store())], value=List(elts=[Dict(keys=[Constant(value='files')], values=[List(elts=[Dict(keys=[Constant(value='content'), Constant(value='description'), Constant(value='name'), Constant(value='path')], values=[Constant(value='Hello World!\n'), Constant(value='This file is the output file. The content of file_to_read.txt is copied into this file.'), Constant(value='output.txt'), Constant(value='output.txt')])], ctx=Load())])], ctx=Load())), Assign(targets=[Attribute(value=Attribute(value=Name(id='convo', ctx=Load()), attr='send_message', ctx=Load()), attr='side_effect', ctx=Store())], value=Name(id='mock_responses', ctx=Load()))]), If(test=Name(id='WRITE_TO_FILE', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='codeMonkey', ctx=Load()), attr='implement_code_changes', ctx=Load()), args=[Name(id='convo', ctx=Load()), Name(id='task_description', ctx=Load()), Name(id='code_changes_description', ctx=Load()), Dict(keys=[], values=[])], keywords=[]))], orelse=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='patch', ctx=Load()), attr='object', ctx=Load()), args=[Name(id='Project', ctx=Load()), Constant(value='save_file')], keywords=[]), optional_vars=Name(id='mock_save_file', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='codeMonkey', ctx=Load()), attr='implement_code_changes', ctx=Load()), args=[Name(id='convo', ctx=Load()), Name(id='task_description', ctx=Load()), Name(id='code_changes_description', ctx=Load()), Dict(keys=[], values=[])], keywords=[])), Expr(value=Call(func=Name(id='clear_directory', ctx=Load()), args=[Name(id='workspace', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='mock_save_file', ctx=Load()), attr='assert_called_once', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='called_data', ctx=Store())], value=Subscript(value=Subscript(value=Attribute(value=Name(id='mock_save_file', ctx=Load()), attr='call_args', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value=0), ctx=Load())), Assert(test=Compare(left=Subscript(value=Name(id='called_data', ctx=Load()), slice=Constant(value='name'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='output.txt')])), Assert(test=BoolOp(op=Or(), values=[Compare(left=Subscript(value=Name(id='called_data', ctx=Load()), slice=Constant(value='path'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='/')]), Compare(left=Subscript(value=Name(id='called_data', ctx=Load()), slice=Constant(value='path'), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='called_data', ctx=Load()), slice=Constant(value='name'), ctx=Load())])])), Assert(test=Compare(left=Subscript(value=Name(id='called_data', ctx=Load()), slice=Constant(value='content'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='Hello World!\n')]))])])], decorator_list=[Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='helpers.AgentConvo.get_saved_development_step')], keywords=[]), Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='helpers.AgentConvo.save_development_step')], keywords=[]), Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='os.get_terminal_size'), Name(id='mock_terminal_size', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='patch', ctx=Load()), attr='object', ctx=Load()), args=[Name(id='File', ctx=Load()), Constant(value='insert')], keywords=[])])], decorator_list=[])], type_ignores=[])