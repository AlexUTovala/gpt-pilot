Module(body=[Import(names=[alias(name='builtins')]), Import(names=[alias(name='os')]), Import(names=[alias(name='pytest')]), ImportFrom(module='unittest.mock', names=[alias(name='patch')], level=0), ImportFrom(module='dotenv', names=[alias(name='load_dotenv')], level=0), Expr(value=Call(func=Name(id='load_dotenv', ctx=Load()), args=[], keywords=[])), ImportFrom(module='main', names=[alias(name='get_custom_print')], level=0), ImportFrom(module='helpers.agents.TechLead', names=[alias(name='TechLead'), alias(name='DEVELOPMENT_PLANNING_STEP')], level=0), ImportFrom(module='helpers.Project', names=[alias(name='Project')], level=0), ImportFrom(module='test.test_utils', names=[alias(name='assert_non_empty_string')], level=0), ImportFrom(module='test.mock_questionary', names=[alias(name='MockQuestionary')], level=0), ClassDef(name='TestTechLead', bases=[], keywords=[], body=[FunctionDef(name='setup_method', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Attribute(value=Name(id='builtins', ctx=Load()), attr='print', ctx=Store()), Name(id='ipc_client_instance', ctx=Store())], ctx=Store())], value=Call(func=Name(id='get_custom_print', ctx=Load()), args=[Dict(keys=[], values=[])], keywords=[])), Assign(targets=[Name(id='name', ctx=Store())], value=Constant(value='TestTechLead')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Store())], value=Call(func=Name(id='Project', ctx=Load()), args=[Dict(keys=[Constant(value='app_id'), Constant(value='name'), Constant(value='app_type')], values=[Constant(value='test-tech-lead'), Name(id='name', ctx=Load()), Constant(value='')])], keywords=[keyword(arg='name', value=Name(id='name', ctx=Load())), keyword(arg='architecture', value=List(elts=[], ctx=Load())), keyword(arg='user_stories', value=List(elts=[], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='set_root_path', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Name(id='__file__', ctx=Load())], keywords=[])], keywords=[]), Constant(value='../../../workspace/TestTechLead')], keywords=[])], keywords=[])], keywords=[])), Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='technologies', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='project_description', ctx=Store())], value=Constant(value='\nThe project entails creating a web-based chat application, tentatively named "chat_app." \nThis application does not require user authentication or chat history storage. \nIt solely supports one-on-one messaging, excluding group chats or multimedia sharing like photos, videos, or files. \nAdditionally, there are no specific requirements for real-time functionality, like live typing indicators or read receipts. \nThe development of this application will strictly follow a monolithic structure, avoiding the use of microservices, as per the client\'s demand. \nThe development process will include the creation of user stories and tasks, based on detailed discussions with the client. \n        ')), Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='user_stories', ctx=Store())], value=List(elts=[Constant(value='User Story 1: As a user, I can access the web-based "chat_app" directly without needing to authenticate or log in. Do you want to add anything else? If not, just press ENTER.'), Constant(value='User Story 2: As a user, I can start one-on-one conversations with another user on the "chat_app". Do you want to add anything else? If not, just press ENTER.'), Constant(value='User Story 3: As a user, I can send and receive messages in real-time within my one-on-one conversation on the "chat_app". Do you want to add anything else? If not, just press ENTER.'), Constant(value='User Story 4: As a user, I do not need to worry about deleting or storing my chats because the "chat_app" does not store chat histories. Do you want to add anything else? If not, just press ENTER.'), Constant(value='User Story 5: As a user, I will only be able to send text messages, as the "chat_app" does not support any kind of multimedia sharing like photos, videos, or files. Do you want to add anything else? If not, just press ENTER.'), Constant(value='User Story 6: As a user, I will not see any live typing indicators or read receipts since the "chat_app" does not provide any additional real-time functionality beyond message exchange. Do you want to add anything else? If not, just press ENTER.')], ctx=Load())), Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='architecture', ctx=Store())], value=List(elts=[Constant(value='Node.js'), Constant(value='Socket.io'), Constant(value='Bootstrap'), Constant(value='JavaScript'), Constant(value='HTML5'), Constant(value='CSS3')], ctx=Load())), Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='current_step', ctx=Store())], value=Name(id='DEVELOPMENT_PLANNING_STEP', ctx=Load()))], decorator_list=[]), FunctionDef(name='test_create_development_plan', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='mock_get_saved_step'), arg(arg='mock_save_progress'), arg(arg='mock_get_progress_steps')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='techLead', ctx=Store())], value=Call(func=Name(id='TechLead', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load())], keywords=[])), Assign(targets=[Name(id='mock_questionary', ctx=Store())], value=Call(func=Name(id='MockQuestionary', ctx=Load()), args=[List(elts=[Constant(value=''), Constant(value=''), Constant(value='no')], ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='utils.questionary.questionary'), Name(id='mock_questionary', ctx=Load())], keywords=[]))], body=[Assign(targets=[Name(id='development_plan', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='techLead', ctx=Load()), attr='create_development_plan', ctx=Load()), args=[], keywords=[])), Assert(test=Compare(left=Name(id='development_plan', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Expr(value=Call(func=Name(id='assert_non_empty_string', ctx=Load()), args=[Subscript(value=Subscript(value=Name(id='development_plan', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='description'), ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='assert_non_empty_string', ctx=Load()), args=[Subscript(value=Subscript(value=Name(id='development_plan', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='programmatic_goal'), ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='assert_non_empty_string', ctx=Load()), args=[Subscript(value=Subscript(value=Name(id='development_plan', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='user_review_goal'), ctx=Load())], keywords=[]))])], decorator_list=[Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='uses_tokens', ctx=Load()), Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='helpers.AgentConvo.get_saved_development_step')], keywords=[keyword(arg='return_value', value=Constant(value=None))]), Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='helpers.agents.TechLead.save_progress')], keywords=[keyword(arg='return_value', value=Constant(value=None))]), Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='helpers.agents.TechLead.get_progress_steps')], keywords=[keyword(arg='return_value', value=Constant(value=None))])])], decorator_list=[])], type_ignores=[])