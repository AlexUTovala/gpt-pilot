Module(body=[Import(names=[alias(name='platform')]), Import(names=[alias(name='uuid')]), Import(names=[alias(name='re')]), ImportFrom(module='const.messages', names=[alias(name='WHEN_USER_DONE')], level=0), ImportFrom(module='utils.style', names=[alias(name='color_green'), alias(name='color_green_bold'), alias(name='color_red'), alias(name='color_red_bold'), alias(name='color_yellow_bold'), alias(name='color_cyan_bold'), alias(name='color_white_bold')], level=0), ImportFrom(module='helpers.exceptions.TokenLimitError', names=[alias(name='TokenLimitError')], level=0), ImportFrom(module='const.code_execution', names=[alias(name='MAX_COMMAND_DEBUG_TRIES')], level=0), ImportFrom(module='helpers.exceptions.TooDeepRecursionError', names=[alias(name='TooDeepRecursionError')], level=0), ImportFrom(module='helpers.Debugger', names=[alias(name='Debugger')], level=0), ImportFrom(module='utils.questionary', names=[alias(name='styled_text')], level=0), ImportFrom(module='utils.utils', names=[alias(name='step_already_finished')], level=0), ImportFrom(module='helpers.agents.CodeMonkey', names=[alias(name='CodeMonkey')], level=0), ImportFrom(module='logger.logger', names=[alias(name='logger')], level=0), ImportFrom(module='helpers.Agent', names=[alias(name='Agent')], level=0), ImportFrom(module='helpers.AgentConvo', names=[alias(name='AgentConvo')], level=0), ImportFrom(module='utils.utils', names=[alias(name='should_execute_step'), alias(name='array_of_objects_to_string'), alias(name='generate_app_data')], level=0), ImportFrom(module='helpers.cli', names=[alias(name='run_command_until_success'), alias(name='execute_command_and_check_cli_response'), alias(name='running_processes')], level=0), ImportFrom(module='const.function_calls', names=[alias(name='FILTER_OS_TECHNOLOGIES'), alias(name='EXECUTE_COMMANDS'), alias(name='GET_TEST_TYPE'), alias(name='IMPLEMENT_TASK'), alias(name='COMMAND_TO_RUN'), alias(name='GET_FULLY_CODED_FILE')], level=0), ImportFrom(module='database.database', names=[alias(name='save_progress'), alias(name='get_progress_steps'), alias(name='update_app_status')], level=0), ImportFrom(module='utils.utils', names=[alias(name='get_os_info')], level=0), Assign(targets=[Name(id='ENVIRONMENT_SETUP_STEP', ctx=Store())], value=Constant(value='environment_setup')), ClassDef(name='Developer', bases=[Name(id='Agent', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='project')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Constant(value='full_stack_developer'), Name(id='project', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='run_command', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='save_dev_steps', ctx=Store())], value=Constant(value=True)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='debugger', ctx=Store())], value=Call(func=Name(id='Debugger', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='start_coding', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='finished', ctx=Load())), body=[Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='current_step', ctx=Store())], value=Constant(value='coding')), Expr(value=Call(func=Name(id='update_app_status', ctx=Load()), args=[Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='args', ctx=Load()), slice=Constant(value='app_id'), ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='current_step', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='skip_steps', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='skip_steps', ctx=Store())], value=IfExp(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='continuing_project', ctx=Load())), BoolOp(op=And(), values=[Compare(left=Constant(value='skip_until_dev_step'), ops=[In()], comparators=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='args', ctx=Load())]), Compare(left=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='args', ctx=Load()), slice=Constant(value='skip_until_dev_step'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='0')])])]), body=Constant(value=False), orelse=Constant(value=True)))], orelse=[])], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Name(id='color_green_bold', ctx=Load()), args=[Constant(value='ðŸš€ Now for the actual development...\n')], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Starting to create the actual code...')], keywords=[])), Assign(targets=[Name(id='total_tasks', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='development_plan', ctx=Load())], keywords=[])), Assign(targets=[Name(id='progress_thresholds', ctx=Store())], value=List(elts=[Constant(value=50)], ctx=Load())), Assign(targets=[Name(id='documented_thresholds', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='dev_task', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='development_plan', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='current_progress_percent', ctx=Store())], value=Call(func=Name(id='round', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='i', ctx=Load()), op=Div(), right=Name(id='total_tasks', ctx=Load())), op=Mult(), right=Constant(value=100)), Constant(value=2)], keywords=[])), For(target=Name(id='threshold', ctx=Store()), iter=Name(id='progress_thresholds', ctx=Load()), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='current_progress_percent', ctx=Load()), ops=[Gt()], comparators=[Name(id='threshold', ctx=Load())]), Compare(left=Name(id='threshold', ctx=Load()), ops=[NotIn()], comparators=[Name(id='documented_thresholds', ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='technical_writer', ctx=Load()), attr='document_project', ctx=Load()), args=[Name(id='current_progress_percent', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='documented_thresholds', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='threshold', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='implement_task', ctx=Load()), args=[Name(id='i', ctx=Load()), Name(id='dev_task', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='technical_writer', ctx=Load()), attr='document_project', ctx=Load()), args=[Constant(value=100)], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='dot_pilot_gpt', ctx=Load()), attr='chat_log_folder', ctx=Load()), args=[Constant(value=None)], keywords=[])), If(test=UnaryOp(op=Not(), operand=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='finished', ctx=Load())), body=[Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='finished', ctx=Store())], value=Constant(value=True)), Expr(value=Call(func=Name(id='update_app_status', ctx=Load()), args=[Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='args', ctx=Load()), slice=Constant(value='app_id'), ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='current_step', ctx=Load())], keywords=[])), Assign(targets=[Name(id='message', ctx=Store())], value=Constant(value='The app is DONE!!! Yay...you can use it now.\n')), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Name(id='message', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Name(id='color_green_bold', ctx=Load()), args=[Name(id='message', ctx=Load())], keywords=[])], keywords=[]))], orelse=[Assign(targets=[Name(id='message', ctx=Store())], value=Constant(value='Feature complete!\n')), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Name(id='message', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Name(id='color_green_bold', ctx=Load()), args=[Name(id='message', ctx=Load())], keywords=[])], keywords=[]))])], decorator_list=[]), FunctionDef(name='implement_task', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='i'), arg(arg='development_task')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[BinOp(left=Call(func=Name(id='color_green_bold', ctx=Load()), args=[JoinedStr(values=[Constant(value='Implementing task #'), FormattedValue(value=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1)), conversion=-1), Constant(value=': ')])], keywords=[]), op=Add(), right=Call(func=Name(id='color_green', ctx=Load()), args=[JoinedStr(values=[Constant(value=' '), FormattedValue(value=Subscript(value=Name(id='development_task', ctx=Load()), slice=Constant(value='description'), ctx=Load()), conversion=-1), Constant(value='\n')])], keywords=[]))], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='dot_pilot_gpt', ctx=Load()), attr='chat_log_folder', ctx=Load()), args=[BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[])), Assign(targets=[Name(id='convo_dev_task', ctx=Store())], value=Call(func=Name(id='AgentConvo', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='convo_dev_task', ctx=Load()), attr='send_message', ctx=Load()), args=[Constant(value='development/task/breakdown.prompt'), Dict(keys=[Constant(value='name'), Constant(value='app_type'), Constant(value='app_summary'), Constant(value='clarifications'), Constant(value='user_stories'), Constant(value='user_tasks'), Constant(value='technologies'), Constant(value='array_of_objects_to_string'), Constant(value='directory_tree'), Constant(value='current_task_index'), Constant(value='development_tasks'), Constant(value='files'), Constant(value='task_type')], values=[Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='args', ctx=Load()), slice=Constant(value='name'), ctx=Load()), Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='args', ctx=Load()), slice=Constant(value='app_type'), ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='project_description', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='clarifications', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='user_stories', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='user_tasks', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='architecture', ctx=Load()), Name(id='array_of_objects_to_string', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='get_directory_tree', ctx=Load()), args=[Constant(value=True)], keywords=[]), Name(id='i', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='development_plan', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='get_all_coded_files', ctx=Load()), args=[], keywords=[]), IfExp(test=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='finished', ctx=Load()), body=Constant(value='feature'), orelse=Constant(value='app'))])], keywords=[])), Assign(targets=[Name(id='response', ctx=Store())], value=Call(func=Attribute(value=Name(id='convo_dev_task', ctx=Load()), attr='send_message', ctx=Load()), args=[Constant(value='development/parse_task.prompt'), Dict(keys=[Constant(value='running_processes'), Constant(value='os')], values=[Name(id='running_processes', ctx=Load()), Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='system', ctx=Load()), args=[], keywords=[])]), Name(id='IMPLEMENT_TASK', ctx=Load())], keywords=[])), Assign(targets=[Name(id='steps', ctx=Store())], value=Subscript(value=Name(id='response', ctx=Load()), slice=Constant(value='tasks'), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='convo_dev_task', ctx=Load()), attr='remove_last_x_messages', ctx=Load()), args=[Constant(value=2)], keywords=[])), Assign(targets=[Name(id='completed_steps', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Constant(value=True), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute_task', ctx=Load()), args=[Name(id='convo_dev_task', ctx=Load()), Subscript(value=Name(id='development_task', ctx=Load()), slice=Constant(value='description'), ctx=Load()), Name(id='steps', ctx=Load())], keywords=[keyword(arg='development_task', value=Name(id='development_task', ctx=Load())), keyword(arg='continue_development', value=Constant(value=True)), keyword(arg='is_root_task', value=Constant(value=True)), keyword(arg='continue_from_step', value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='completed_steps', ctx=Load())], keywords=[]))])), If(test=Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='success'), ctx=Load()), body=[Break()], orelse=[]), If(test=Compare(left=Constant(value='step_index'), ops=[In()], comparators=[Name(id='result', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='os'), ctx=Store())], value=Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='system', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='step_index', ctx=Store())], value=Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='step_index'), ctx=Load())), Assign(targets=[Name(id='completed_steps', ctx=Store())], value=Subscript(value=Name(id='steps', ctx=Load()), slice=Slice(upper=BinOp(left=Name(id='step_index', ctx=Load()), op=Add(), right=Constant(value=1))), ctx=Load())), Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='completed_steps'), ctx=Store())], value=Name(id='completed_steps', ctx=Load())), Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='current_step'), ctx=Store())], value=Subscript(value=Name(id='steps', ctx=Load()), slice=Name(id='step_index', ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='next_steps'), ctx=Store())], value=Subscript(value=Name(id='steps', ctx=Load()), slice=Slice(lower=BinOp(left=Name(id='step_index', ctx=Load()), op=Add(), right=Constant(value=1))), ctx=Load())), Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='current_step_index'), ctx=Store())], value=Name(id='step_index', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='convo_dev_task', ctx=Load()), attr='remove_last_x_messages', ctx=Load()), args=[Constant(value=2)], keywords=[])), Assign(targets=[Name(id='response', ctx=Store())], value=Call(func=Attribute(value=Name(id='convo_dev_task', ctx=Load()), attr='send_message', ctx=Load()), args=[Constant(value='development/task/update_task.prompt'), Name(id='result', ctx=Load()), Name(id='IMPLEMENT_TASK', ctx=Load())], keywords=[])), Assign(targets=[Name(id='steps', ctx=Store())], value=BinOp(left=Name(id='completed_steps', ctx=Load()), op=Add(), right=Subscript(value=Name(id='response', ctx=Load()), slice=Constant(value='tasks'), ctx=Load())))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='Testing at end of task failed')], keywords=[])), Break()])], orelse=[])], decorator_list=[]), FunctionDef(name='replace_old_code_comments', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='files_with_changes')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='files_with_comments', ctx=Store())], value=ListComp(elt=Dict(keys=[None, Constant(value='comments')], values=[Name(id='file', ctx=Load()), ListComp(elt=Name(id='line', ctx=Load()), generators=[comprehension(target=Name(id='line', ctx=Store()), iter=Call(func=Attribute(value=Subscript(value=Name(id='file', ctx=Load()), slice=Constant(value='content'), ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='\n')], keywords=[]), ifs=[Compare(left=Constant(value='[OLD CODE]'), ops=[In()], comparators=[Name(id='line', ctx=Load())])], is_async=0)])]), generators=[comprehension(target=Name(id='file', ctx=Store()), iter=Name(id='files_with_changes', ctx=Load()), ifs=[], is_async=0)])), For(target=Name(id='file', ctx=Store()), iter=Name(id='files_with_comments', ctx=Load()), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='file', ctx=Load()), slice=Constant(value='comments'), ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='fully_coded_file_convo', ctx=Store())], value=Call(func=Name(id='AgentConvo', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), Assign(targets=[Name(id='fully_coded_file_response', ctx=Store())], value=Call(func=Attribute(value=Name(id='fully_coded_file_convo', ctx=Load()), attr='send_message', ctx=Load()), args=[Constant(value='development/get_fully_coded_file.prompt'), Dict(keys=[Constant(value='file'), Constant(value='new_file')], values=[Subscript(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='get_files', ctx=Load()), args=[List(elts=[Subscript(value=Name(id='file', ctx=Load()), slice=Constant(value='path'), ctx=Load())], ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load()), Name(id='file', ctx=Load())]), Name(id='GET_FULLY_CODED_FILE', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='file', ctx=Load()), slice=Constant(value='content'), ctx=Store())], value=Subscript(value=Name(id='fully_coded_file_response', ctx=Load()), slice=Constant(value='file_content'), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='files_with_comments', ctx=Load()))], decorator_list=[]), FunctionDef(name='step_code_change', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='convo'), arg(arg='task_description'), arg(arg='step'), arg(arg='i'), arg(arg='test_after_code_changes')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Constant(value='code_change_description'), ops=[In()], comparators=[Name(id='step', ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[JoinedStr(values=[Constant(value='Implementing code changes for `'), FormattedValue(value=Subscript(value=Name(id='step', ctx=Load()), slice=Constant(value='code_change_description'), ctx=Load()), conversion=-1), Constant(value='`')])], keywords=[])), Assign(targets=[Name(id='code_monkey', ctx=Store())], value=Call(func=Name(id='CodeMonkey', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), Name(id='self', ctx=Load())], keywords=[])), Assign(targets=[Name(id='updated_convo', ctx=Store())], value=Call(func=Attribute(value=Name(id='code_monkey', ctx=Load()), attr='implement_code_changes', ctx=Load()), args=[Name(id='convo', ctx=Load()), Name(id='task_description', ctx=Load()), Subscript(value=Name(id='step', ctx=Load()), slice=Constant(value='code_change_description'), ctx=Load()), Name(id='step', ctx=Load()), Name(id='i', ctx=Load())], keywords=[])), If(test=Name(id='test_after_code_changes', ctx=Load()), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='test_code_changes', ctx=Load()), args=[Name(id='code_monkey', ctx=Load()), Name(id='updated_convo', ctx=Load())], keywords=[]))], orelse=[Return(value=Dict(keys=[Constant(value='success')], values=[Constant(value=True)]))])], orelse=[]), If(test=Compare(left=Constant(value='code_change'), ops=[NotIn()], comparators=[Name(id='step', ctx=Load())]), body=[Assign(targets=[Name(id='data', ctx=Store())], value=Name(id='step', ctx=Load()))], orelse=[Assign(targets=[Name(id='data', ctx=Store())], value=Subscript(value=Name(id='step', ctx=Load()), slice=Constant(value='code_change'), ctx=Load()))]), Assign(targets=[Name(id='data', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='replace_old_code_comments', ctx=Load()), args=[List(elts=[Name(id='data', ctx=Load())], ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='save_file', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])), Return(value=Dict(keys=[Constant(value='success')], values=[Constant(value=True)]))], decorator_list=[]), FunctionDef(name='step_command_run', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='convo'), arg(arg='step'), arg(arg='i'), arg(arg='success_with_cli_response')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Running command: %s'), Subscript(value=Name(id='step', ctx=Load()), slice=Constant(value='command'), ctx=Load())], keywords=[])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Subscript(value=Name(id='step', ctx=Load()), slice=Constant(value='command'), ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='data', ctx=Store())], value=Name(id='step', ctx=Load()))], orelse=[Assign(targets=[Name(id='data', ctx=Store())], value=Subscript(value=Name(id='step', ctx=Load()), slice=Constant(value='command'), ctx=Load()))]), Assign(targets=[Name(id='additional_message', ctx=Store())], value=Constant(value='')), Assign(targets=[Name(id='command_id', ctx=Store())], value=IfExp(test=Compare(left=Constant(value='command_id'), ops=[In()], comparators=[Name(id='data', ctx=Load())]), body=Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='command_id'), ctx=Load()), orelse=Constant(value=None))), Assign(targets=[Name(id='success_message', ctx=Store())], value=IfExp(test=Compare(left=Constant(value='success_message'), ops=[In()], comparators=[Name(id='data', ctx=Load())]), body=Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='success_message'), ctx=Load()), orelse=Constant(value=None))), Return(value=Call(func=Name(id='run_command_until_success', ctx=Load()), args=[Name(id='convo', ctx=Load()), Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='command'), ctx=Load())], keywords=[keyword(arg='timeout', value=Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='timeout'), ctx=Load())), keyword(arg='command_id', value=Name(id='command_id', ctx=Load())), keyword(arg='success_message', value=Name(id='success_message', ctx=Load())), keyword(arg='additional_message', value=Name(id='additional_message', ctx=Load())), keyword(arg='success_with_cli_response', value=Name(id='success_with_cli_response', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='step_human_intervention', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='convo'), arg(arg='step', annotation=Name(id='dict', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        :param convo:\n        :param step: {'human_intervention_description': 'some description'}\n        :return: {\n          'success': bool\n          'user_input': string_from_human\n        }\n        ")), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Human intervention needed%s: %s'), IfExp(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='run_command', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Constant(value=''), orelse=JoinedStr(values=[Constant(value=' for command `'), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='run_command', ctx=Load()), conversion=-1), Constant(value='`')])), Subscript(value=Name(id='step', ctx=Load()), slice=Constant(value='human_intervention_description'), ctx=Load())], keywords=[])), While(test=Constant(value=True), body=[Assign(targets=[Name(id='human_intervention_description', ctx=Store())], value=Subscript(value=Name(id='step', ctx=Load()), slice=Constant(value='human_intervention_description'), ctx=Load())), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='run_command', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_run_command', ctx=Load()), args=[Name(id='convo', ctx=Load())], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='run_command', ctx=Load()), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='ipc_client_instance', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='ipc_client_instance', ctx=Load()), attr='client', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])]), body=[AugAssign(target=Name(id='human_intervention_description', ctx=Store()), op=Add(), value=Call(func=Name(id='color_yellow_bold', ctx=Load()), args=[BinOp(left=BinOp(left=Constant(value='\n\nIf you want to run the app, just type "r" and press ENTER and that will run `'), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='run_command', ctx=Load())), op=Add(), right=Constant(value='`'))], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='run_command', ctx=Load())], keywords=[keyword(arg='type', value=Constant(value='run_command'))]))])], orelse=[]), Assign(targets=[Name(id='response', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='ask_for_human_intervention', ctx=Load()), args=[Constant(value='I need human intervention:'), Name(id='human_intervention_description', ctx=Load())], keywords=[keyword(arg='cbs', value=Dict(keys=[Constant(value='r')], values=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='conv')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='run_command_until_success', ctx=Load()), args=[Name(id='conv', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='run_command', ctx=Load())], keywords=[keyword(arg='command_id', value=Constant(value='app')), keyword(arg='timeout', value=Constant(value=None)), keyword(arg='force', value=Constant(value=True)), keyword(arg='return_cli_response', value=Constant(value=True))]))])), keyword(arg='convo', value=Name(id='convo', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='human response: %s'), Name(id='response', ctx=Load())], keywords=[])), If(test=Compare(left=Constant(value='user_input'), ops=[NotIn()], comparators=[Name(id='response', ctx=Load())]), body=[Continue()], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='response', ctx=Load()), slice=Constant(value='user_input'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='continue')]), body=[Assign(targets=[Subscript(value=Name(id='response', ctx=Load()), slice=Constant(value='success'), ctx=Store())], value=Constant(value=True))], orelse=[Assign(targets=[Subscript(value=Name(id='response', ctx=Load()), slice=Constant(value='success'), ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='debugger', ctx=Load()), attr='debug', ctx=Load()), args=[Name(id='convo', ctx=Load())], keywords=[keyword(arg='user_input', value=Subscript(value=Name(id='response', ctx=Load()), slice=Constant(value='user_input'), ctx=Load())), keyword(arg='issue_description', value=Subscript(value=Name(id='step', ctx=Load()), slice=Constant(value='human_intervention_description'), ctx=Load()))]))]), Return(value=Name(id='response', ctx=Load()))], orelse=[])], decorator_list=[]), FunctionDef(name='step_test', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='convo'), arg(arg='test_command')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='should_rerun_command', ctx=Store())], value=Call(func=Attribute(value=Name(id='convo', ctx=Load()), attr='send_message', ctx=Load()), args=[Constant(value='dev_ops/should_rerun_command.prompt'), Name(id='test_command', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='should_rerun_command', ctx=Load()), ops=[Eq()], comparators=[Constant(value='NO')]), body=[Return(value=Dict(keys=[Constant(value='success')], values=[Constant(value=True)]))], orelse=[If(test=Compare(left=Name(id='should_rerun_command', ctx=Load()), ops=[Eq()], comparators=[Constant(value='YES')]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Re-running test command: %s'), Name(id='test_command', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='cli_response', ctx=Store()), Name(id='llm_response', ctx=Store())], ctx=Store())], value=Call(func=Name(id='execute_command_and_check_cli_response', ctx=Load()), args=[Name(id='convo', ctx=Load()), Name(id='test_command', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[BinOp(left=Constant(value='After running command llm_response: '), op=Add(), right=Name(id='llm_response', ctx=Load()))], keywords=[])), If(test=Compare(left=Name(id='llm_response', ctx=Load()), ops=[Eq()], comparators=[Constant(value='NEEDS_DEBUGGING')]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Name(id='color_red', ctx=Load()), args=[Constant(value='Got incorrect CLI response:')], keywords=[])], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='cli_response', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Name(id='color_red', ctx=Load()), args=[Constant(value='-------------------')], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='result', ctx=Store())], value=Dict(keys=[Constant(value='success'), Constant(value='cli_response')], values=[Compare(left=Name(id='llm_response', ctx=Load()), ops=[In()], comparators=[List(elts=[Constant(value='DONE'), Constant(value='SKIP')], ctx=Load())]), Name(id='cli_response', ctx=Load())])), If(test=Compare(left=Name(id='cli_response', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='user_input'), ctx=Store())], value=Name(id='llm_response', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='llm_response'), ctx=Store())], value=Name(id='llm_response', ctx=Load()))]), Return(value=Name(id='result', ctx=Load()))], orelse=[])])], decorator_list=[]), FunctionDef(name='get_run_command', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='convo')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='llm_response', ctx=Store())], value=Call(func=Attribute(value=Name(id='convo', ctx=Load()), attr='send_message', ctx=Load()), args=[Constant(value='development/get_run_command.prompt'), Dict(keys=[], values=[]), Name(id='COMMAND_TO_RUN', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='run_command', ctx=Store())], value=Subscript(value=Name(id='llm_response', ctx=Load()), slice=Constant(value='command'), ctx=Load())), Assign(targets=[Name(id='triple_backtick_pattern', ctx=Store())], value=Constant(value='```(?:\\w+\\n)?(.*?)```')), Assign(targets=[Name(id='triple_match', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='search', ctx=Load()), args=[Name(id='triple_backtick_pattern', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='run_command', ctx=Load()), Attribute(value=Name(id='re', ctx=Load()), attr='DOTALL', ctx=Load())], keywords=[])), Assign(targets=[Name(id='single_backtick_pattern', ctx=Store())], value=Constant(value='`(.*?)`')), Assign(targets=[Name(id='single_match', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='search', ctx=Load()), args=[Name(id='single_backtick_pattern', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='run_command', ctx=Load()), Attribute(value=Name(id='re', ctx=Load()), attr='DOTALL', ctx=Load())], keywords=[])), If(test=Name(id='triple_match', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='run_command', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='triple_match', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value=1)], keywords=[]), attr='strip', ctx=Load()), args=[], keywords=[]))], orelse=[If(test=Name(id='single_match', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='run_command', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='single_match', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value=1)], keywords=[]), attr='strip', ctx=Load()), args=[], keywords=[]))], orelse=[])])], decorator_list=[]), FunctionDef(name='task_postprocessing', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='convo'), arg(arg='development_task'), arg(arg='continue_development'), arg(arg='task_result'), arg(arg='last_branch_name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_run_command', ctx=Load()), args=[Name(id='convo', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='development_task', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='convo', ctx=Load()), attr='remove_last_x_messages', ctx=Load()), args=[Constant(value=2)], keywords=[])), Assign(targets=[Name(id='detailed_user_review_goal', ctx=Store())], value=Call(func=Attribute(value=Name(id='convo', ctx=Load()), attr='send_message', ctx=Load()), args=[Constant(value='development/define_user_review_goal.prompt'), Dict(keys=[Constant(value='os')], values=[Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='system', ctx=Load()), args=[], keywords=[])])], keywords=[keyword(arg='should_log_message', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='convo', ctx=Load()), attr='remove_last_x_messages', ctx=Load()), args=[Constant(value=2)], keywords=[]))], orelse=[]), Try(body=[If(test=Name(id='continue_development', ctx=Load()), body=[Assign(targets=[Name(id='continue_description', ctx=Store())], value=IfExp(test=Compare(left=Name(id='detailed_user_review_goal', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Name(id='detailed_user_review_goal', ctx=Load()), orelse=Constant(value=None))), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='continue_development', ctx=Load()), args=[Name(id='convo', ctx=Load()), Name(id='last_branch_name', ctx=Load()), Name(id='continue_description', ctx=Load()), Name(id='development_task', ctx=Load())], keywords=[]))], orelse=[])], handlers=[ExceptHandler(type=Name(id='TooDeepRecursionError', ctx=Load()), name='e', body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='Too deep recursion error. Call dev_help_needed() for human_intervention: %s'), Attribute(value=Name(id='e', ctx=Load()), attr='message', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='dev_help_needed', ctx=Load()), args=[Dict(keys=[Constant(value='type'), Constant(value='human_intervention_description')], values=[Constant(value='human_intervention'), Attribute(value=Name(id='e', ctx=Load()), attr='message', ctx=Load())])], keywords=[]))])], orelse=[], finalbody=[]), Return(value=Name(id='task_result', ctx=Load()))], decorator_list=[]), FunctionDef(name='should_retry_step_implementation', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='step'), arg(arg='step_implementation_try')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='step_implementation_try', ctx=Load()), ops=[GtE()], comparators=[Name(id='MAX_COMMAND_DEBUG_TRIES', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='dev_help_needed', ctx=Load()), args=[Name(id='step', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Name(id='color_red_bold', ctx=Load()), args=[Constant(value='\n--------- LLM Reached Token Limit ----------')], keywords=[])], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Name(id='color_red_bold', ctx=Load()), args=[Constant(value='Can I retry implementing the entire development step?')], keywords=[])], keywords=[])), Assign(targets=[Name(id='answer', ctx=Store())], value=Constant(value='')), While(test=Compare(left=Name(id='answer', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='y')]), body=[Assign(targets=[Name(id='answer', ctx=Store())], value=Call(func=Name(id='styled_text', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), Constant(value='Type y/n')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Retry step implementation? %s'), Name(id='answer', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='answer', ctx=Load()), ops=[Eq()], comparators=[Constant(value='n')]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='dev_help_needed', ctx=Load()), args=[Name(id='step', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Dict(keys=[Constant(value='success'), Constant(value='retry')], values=[Constant(value=False), Constant(value=True)]))], decorator_list=[]), FunctionDef(name='dev_help_needed', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='step')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Subscript(value=Name(id='step', ctx=Load()), slice=Constant(value='type'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='command')]), body=[Assign(targets=[Name(id='help_description', ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Name(id='color_red_bold', ctx=Load()), args=[Constant(value="I tried running the following command but it doesn't seem to work:\n\n")], keywords=[]), op=Add(), right=Call(func=Name(id='color_white_bold', ctx=Load()), args=[Subscript(value=Subscript(value=Name(id='step', ctx=Load()), slice=Constant(value='command'), ctx=Load()), slice=Constant(value='command'), ctx=Load())], keywords=[])), op=Add(), right=Call(func=Name(id='color_red_bold', ctx=Load()), args=[Constant(value='\n\nCan you please make it work?')], keywords=[])))], orelse=[If(test=Compare(left=Subscript(value=Name(id='step', ctx=Load()), slice=Constant(value='type'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='code_change')]), body=[Assign(targets=[Name(id='help_description', ctx=Store())], value=Subscript(value=Name(id='step', ctx=Load()), slice=Constant(value='code_change_description'), ctx=Load()))], orelse=[If(test=Compare(left=Subscript(value=Name(id='step', ctx=Load()), slice=Constant(value='type'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='human_intervention')]), body=[Assign(targets=[Name(id='help_description', ctx=Store())], value=Subscript(value=Name(id='step', ctx=Load()), slice=Constant(value='human_intervention_description'), ctx=Load()))], orelse=[])])]), FunctionDef(name='extract_substring', args=arguments(posonlyargs=[], args=[arg(arg='s')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='start_idx', ctx=Store())], value=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='find', ctx=Load()), args=[Constant(value='```')], keywords=[])), Assign(targets=[Name(id='end_idx', ctx=Store())], value=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='find', ctx=Load()), args=[Constant(value='```'), BinOp(left=Name(id='start_idx', ctx=Load()), op=Add(), right=Constant(value=3))], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='start_idx', ctx=Load()), ops=[NotEq()], comparators=[UnaryOp(op=USub(), operand=Constant(value=1))]), Compare(left=Name(id='end_idx', ctx=Load()), ops=[NotEq()], comparators=[UnaryOp(op=USub(), operand=Constant(value=1))])]), body=[Return(value=Subscript(value=Name(id='s', ctx=Load()), slice=Slice(lower=BinOp(left=Name(id='start_idx', ctx=Load()), op=Add(), right=Constant(value=3)), upper=Name(id='end_idx', ctx=Load())), ctx=Load()))], orelse=[Return(value=Name(id='s', ctx=Load()))])], decorator_list=[]), Assign(targets=[Name(id='answer', ctx=Store())], value=Constant(value='')), While(test=Compare(left=Call(func=Attribute(value=Name(id='answer', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), ops=[NotEq()], comparators=[Constant(value='continue')]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Name(id='color_red_bold', ctx=Load()), args=[Constant(value='\n----------------------------- I need your help ------------------------------')], keywords=[])], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Name(id='extract_substring', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='help_description', ctx=Load())], keywords=[])], keywords=[])], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Name(id='color_red_bold', ctx=Load()), args=[Constant(value='\n-----------------------------------------------------------------------------')], keywords=[])], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='continue')], keywords=[keyword(arg='type', value=Constant(value='button'))])), Assign(targets=[Name(id='answer', ctx=Store())], value=Call(func=Name(id='styled_text', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), Name(id='WHEN_USER_DONE', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='help needed: %s'), Name(id='answer', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Dict(keys=[Constant(value='success'), Constant(value='user_input')], values=[Constant(value=True), Name(id='answer', ctx=Load())]))], decorator_list=[]), FunctionDef(name='execute_task', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='convo'), arg(arg='task_description'), arg(arg='task_steps'), arg(arg='test_command'), arg(arg='reset_convo'), arg(arg='test_after_code_changes'), arg(arg='continue_development'), arg(arg='development_task'), arg(arg='is_root_task'), arg(arg='continue_from_step')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=True), Constant(value=True), Constant(value=False), Constant(value=None), Constant(value=False), Constant(value=0)]), body=[Assign(targets=[Name(id='function_uuid', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Attribute(value=Name(id='uuid', ctx=Load()), attr='uuid4', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='convo', ctx=Load()), attr='save_branch', ctx=Load()), args=[Name(id='function_uuid', ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='step', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='task_steps', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='i', ctx=Load()), ops=[Lt()], comparators=[Name(id='continue_from_step', ctx=Load())]), body=[Continue()], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='---------- execute_task() step #%d: %s'), Name(id='i', ctx=Load()), Name(id='step', ctx=Load())], keywords=[])), Assign(targets=[Name(id='result', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='step_implementation_try', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='need_to_see_output', ctx=Store())], value=BoolOp(op=And(), values=[Compare(left=Constant(value='need_to_see_output'), ops=[In()], comparators=[Name(id='step', ctx=Load())]), Subscript(value=Name(id='step', ctx=Load()), slice=Constant(value='need_to_see_output'), ctx=Load())])), While(test=Constant(value=True), body=[Try(body=[If(test=Name(id='reset_convo', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='convo', ctx=Load()), attr='load_branch', ctx=Load()), args=[Name(id='function_uuid', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='step', ctx=Load()), slice=Constant(value='type'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='command')]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='step_command_run', ctx=Load()), args=[Name(id='convo', ctx=Load()), Name(id='step', ctx=Load()), Name(id='i', ctx=Load())], keywords=[keyword(arg='success_with_cli_response', value=Name(id='need_to_see_output', ctx=Load()))]))], orelse=[If(test=Compare(left=Subscript(value=Name(id='step', ctx=Load()), slice=Constant(value='type'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='code_change')]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='step_code_change', ctx=Load()), args=[Name(id='convo', ctx=Load()), Name(id='task_description', ctx=Load()), Name(id='step', ctx=Load()), Name(id='i', ctx=Load()), Name(id='test_after_code_changes', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Subscript(value=Name(id='step', ctx=Load()), slice=Constant(value='type'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='human_intervention')]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='step_human_intervention', ctx=Load()), args=[Name(id='convo', ctx=Load()), Name(id='step', ctx=Load())], keywords=[]))], orelse=[])])]), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='  step result: %s'), Name(id='result', ctx=Load())], keywords=[])), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='success'), ctx=Load())), BoolOp(op=And(), values=[Name(id='need_to_see_output', ctx=Load()), Compare(left=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='user_input')], keywords=[]), ops=[NotEq()], comparators=[Constant(value='SKIP')])])]), body=[Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='step'), ctx=Store())], value=Name(id='step', ctx=Load())), Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='step_index'), ctx=Store())], value=Name(id='i', ctx=Load())), Return(value=Name(id='result', ctx=Load()))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='test_command', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), BoolOp(op=Or(), values=[Compare(left=Constant(value='check_if_fixed'), ops=[NotIn()], comparators=[Name(id='step', ctx=Load())]), Subscript(value=Name(id='step', ctx=Load()), slice=Constant(value='check_if_fixed'), ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='check_if_fixed: %s'), Name(id='test_command', ctx=Load())], keywords=[])), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='step_test', ctx=Load()), args=[Name(id='convo', ctx=Load()), Name(id='test_command', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='task result: %s'), Name(id='result', ctx=Load())], keywords=[])), Return(value=Name(id='result', ctx=Load()))], orelse=[]), Break()], handlers=[ExceptHandler(type=Name(id='TokenLimitError', ctx=Load()), name='e', body=[If(test=Name(id='is_root_task', ctx=Load()), body=[Assign(targets=[Name(id='response', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='should_retry_step_implementation', ctx=Load()), args=[Name(id='step', ctx=Load()), Name(id='step_implementation_try', ctx=Load())], keywords=[])), If(test=Compare(left=Constant(value='retry'), ops=[In()], comparators=[Name(id='response', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='convo', ctx=Load()), attr='load_branch', ctx=Load()), args=[Name(id='function_uuid', ctx=Load())], keywords=[])), Continue()], orelse=[If(test=Compare(left=Constant(value='success'), ops=[In()], comparators=[Name(id='response', ctx=Load())]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Name(id='response', ctx=Load())), Break()], orelse=[])])], orelse=[Raise(exc=Name(id='e', ctx=Load()))])]), ExceptHandler(type=Name(id='TooDeepRecursionError', ctx=Load()), name='e', body=[If(test=Name(id='is_root_task', ctx=Load()), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='dev_help_needed', ctx=Load()), args=[Name(id='step', ctx=Load())], keywords=[])), Break()], orelse=[Raise(exc=Name(id='e', ctx=Load()))])])], orelse=[], finalbody=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='result', ctx=Store())], value=Dict(keys=[Constant(value='success')], values=[Constant(value=True)])), Expr(value=Call(func=Attribute(value=Name(id='convo', ctx=Load()), attr='load_branch', ctx=Load()), args=[Name(id='function_uuid', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='task_postprocessing', ctx=Load()), args=[Name(id='convo', ctx=Load()), Name(id='development_task', ctx=Load()), Name(id='continue_development', ctx=Load()), Name(id='result', ctx=Load()), Name(id='function_uuid', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='continue_development', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='iteration_convo'), arg(arg='last_branch_name'), arg(arg='continue_description'), arg(arg='development_task')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=''), Constant(value=None)]), body=[While(test=Constant(value=True), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Continue development, last_branch_name: %s'), Name(id='last_branch_name', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='last_branch_name', ctx=Load()), ops=[In()], comparators=[Call(func=Attribute(value=Attribute(value=Name(id='iteration_convo', ctx=Load()), attr='branches', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='iteration_convo', ctx=Load()), attr='load_branch', ctx=Load()), args=[Name(id='last_branch_name', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='user_description', ctx=Store())], value=IfExp(test=Compare(left=Name(id='continue_description', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='')]), body=BinOp(left=BinOp(left=Constant(value='Here is a description of what should be working: \n\n'), op=Add(), right=Call(func=Name(id='color_cyan_bold', ctx=Load()), args=[Name(id='continue_description', ctx=Load())], keywords=[])), op=Add(), right=Constant(value='\n')), orelse=Constant(value=''))), Assign(targets=[Name(id='user_description', ctx=Store())], value=BinOp(left=Constant(value='Can you check if the app works please? '), op=Add(), right=Name(id='user_description', ctx=Load()))), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='run_command', ctx=Load()), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='ipc_client_instance', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='ipc_client_instance', ctx=Load()), attr='client', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])]), body=[AugAssign(target=Name(id='user_description', ctx=Store()), op=Add(), value=Call(func=Name(id='color_yellow_bold', ctx=Load()), args=[BinOp(left=BinOp(left=Constant(value='\n\nIf you want to run the app, just type "r" and press ENTER and that will run `'), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='run_command', ctx=Load())), op=Add(), right=Constant(value='`'))], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='run_command', ctx=Load())], keywords=[keyword(arg='type', value=Constant(value='run_command'))]))])], orelse=[]), Assign(targets=[Name(id='response', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='ask_for_human_intervention', ctx=Load()), args=[Name(id='user_description', ctx=Load())], keywords=[keyword(arg='cbs', value=Dict(keys=[Constant(value='r')], values=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='convo')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='run_command_until_success', ctx=Load()), args=[Name(id='convo', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='run_command', ctx=Load())], keywords=[keyword(arg='command_id', value=Constant(value='app')), keyword(arg='timeout', value=Constant(value=None)), keyword(arg='force', value=Constant(value=True)), keyword(arg='return_cli_response', value=Constant(value=True)), keyword(arg='is_root_task', value=Constant(value=True))]))])), keyword(arg='convo', value=Name(id='iteration_convo', ctx=Load())), keyword(arg='is_root_task', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='response: %s'), Name(id='response', ctx=Load())], keywords=[])), Assign(targets=[Name(id='user_feedback', ctx=Store())], value=IfExp(test=Compare(left=Constant(value='user_input'), ops=[In()], comparators=[Name(id='response', ctx=Load())]), body=Subscript(value=Name(id='response', ctx=Load()), slice=Constant(value='user_input'), ctx=Load()), orelse=Constant(value=None))), If(test=Compare(left=Name(id='user_feedback', ctx=Load()), ops=[Eq()], comparators=[Constant(value='continue')]), body=[Return(value=Dict(keys=[Constant(value='success'), Constant(value='user_input')], values=[Constant(value=True), Name(id='user_feedback', ctx=Load())]))], orelse=[]), If(test=Compare(left=Name(id='user_feedback', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='iteration_convo', ctx=Store())], value=Call(func=Name(id='AgentConvo', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), Assign(targets=[Name(id='iteration_description', ctx=Store())], value=Call(func=Attribute(value=Name(id='iteration_convo', ctx=Load()), attr='send_message', ctx=Load()), args=[Constant(value='development/iteration.prompt'), Dict(keys=[Constant(value='name'), Constant(value='app_type'), Constant(value='app_summary'), Constant(value='clarifications'), Constant(value='user_stories'), Constant(value='user_tasks'), Constant(value='technologies'), Constant(value='array_of_objects_to_string'), Constant(value='directory_tree'), Constant(value='current_task'), Constant(value='development_tasks'), Constant(value='files'), Constant(value='user_input')], values=[Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='args', ctx=Load()), slice=Constant(value='name'), ctx=Load()), Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='args', ctx=Load()), slice=Constant(value='app_type'), ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='project_description', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='clarifications', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='user_stories', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='user_tasks', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='architecture', ctx=Load()), Name(id='array_of_objects_to_string', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='get_directory_tree', ctx=Load()), args=[Constant(value=True)], keywords=[]), Name(id='development_task', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='development_plan', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='get_all_coded_files', ctx=Load()), args=[], keywords=[]), Name(id='user_feedback', ctx=Load())])], keywords=[])), Assign(targets=[Name(id='llm_response', ctx=Store())], value=Call(func=Attribute(value=Name(id='iteration_convo', ctx=Load()), attr='send_message', ctx=Load()), args=[Constant(value='development/parse_task.prompt'), Dict(keys=[Constant(value='running_processes'), Constant(value='os')], values=[Name(id='running_processes', ctx=Load()), Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='system', ctx=Load()), args=[], keywords=[])]), Name(id='IMPLEMENT_TASK', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='iteration_convo', ctx=Load()), attr='remove_last_x_messages', ctx=Load()), args=[Constant(value=2)], keywords=[])), Assign(targets=[Name(id='task_steps', ctx=Store())], value=Subscript(value=Name(id='llm_response', ctx=Load()), slice=Constant(value='tasks'), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute_task', ctx=Load()), args=[Name(id='iteration_convo', ctx=Load()), Name(id='iteration_description', ctx=Load()), Name(id='task_steps', ctx=Load())], keywords=[keyword(arg='is_root_task', value=Constant(value=True))]))], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='set_up_environment', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='current_step', ctx=Store())], value=Name(id='ENVIRONMENT_SETUP_STEP', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='convo_os_specific_tech', ctx=Store())], value=Call(func=Name(id='AgentConvo', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), Assign(targets=[Name(id='step', ctx=Store())], value=Call(func=Name(id='get_progress_steps', ctx=Load()), args=[Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='args', ctx=Load()), slice=Constant(value='app_id'), ctx=Load()), Name(id='ENVIRONMENT_SETUP_STEP', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Name(id='step', ctx=Load()), UnaryOp(op=Not(), operand=Call(func=Name(id='should_execute_step', ctx=Load()), args=[Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='args', ctx=Load()), slice=Constant(value='step'), ctx=Load()), Name(id='ENVIRONMENT_SETUP_STEP', ctx=Load())], keywords=[]))]), body=[Expr(value=Call(func=Name(id='step_already_finished', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='args', ctx=Load()), Name(id='step', ctx=Load())], keywords=[])), Return()], orelse=[]), Assign(targets=[Name(id='user_input', ctx=Store())], value=Constant(value='')), While(test=Compare(left=Call(func=Attribute(value=Name(id='user_input', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), ops=[NotEq()], comparators=[Constant(value='done')]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='done')], keywords=[keyword(arg='type', value=Constant(value='button'))])), Assign(targets=[Name(id='user_input', ctx=Store())], value=Call(func=Name(id='styled_text', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), Constant(value='Please set up your local environment so that the technologies listed can be utilized. When you\'re done, write "DONE"')], keywords=[]))], orelse=[]), Expr(value=Call(func=Name(id='save_progress', ctx=Load()), args=[Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='args', ctx=Load()), slice=Constant(value='app_id'), ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='current_step', ctx=Load()), Dict(keys=[Constant(value='os_specific_technologies'), Constant(value='newly_installed_technologies'), Constant(value='app_data')], values=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), Call(func=Name(id='generate_app_data', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='args', ctx=Load())], keywords=[])])], keywords=[])), Return(), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Name(id='color_green_bold', ctx=Load()), args=[Constant(value='Setting up the environment...\n')], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Setting up the environment...')], keywords=[])), Assign(targets=[Name(id='os_info', ctx=Store())], value=Call(func=Name(id='get_os_info', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='llm_response', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='convo_os_specific_tech', ctx=Load()), attr='send_message', ctx=Load()), args=[Constant(value='development/env_setup/specs.prompt'), Dict(keys=[Constant(value='name'), Constant(value='app_type'), Constant(value='os_info'), Constant(value='technologies')], values=[Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='args', ctx=Load()), slice=Constant(value='name'), ctx=Load()), Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='args', ctx=Load()), slice=Constant(value='app_type'), ctx=Load()), Name(id='os_info', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='architecture', ctx=Load())]), Name(id='FILTER_OS_TECHNOLOGIES', ctx=Load())], keywords=[])), Assign(targets=[Name(id='os_specific_technologies', ctx=Store())], value=Subscript(value=Name(id='llm_response', ctx=Load()), slice=Constant(value='technologies'), ctx=Load())), For(target=Name(id='technology', ctx=Store()), iter=Name(id='os_specific_technologies', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Installing %s'), Name(id='technology', ctx=Load())], keywords=[])), Assign(targets=[Name(id='llm_response', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='install_technology', ctx=Load()), args=[Name(id='technology', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='llm_response', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='DONE')]), body=[Assign(targets=[Name(id='llm_response', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='convo_os_specific_tech', ctx=Load()), attr='send_message', ctx=Load()), args=[Constant(value='development/env_setup/unsuccessful_installation.prompt'), Dict(keys=[Constant(value='technology')], values=[Name(id='technology', ctx=Load())]), Name(id='EXECUTE_COMMANDS', ctx=Load())], keywords=[])), Assign(targets=[Name(id='installation_commands', ctx=Store())], value=Subscript(value=Name(id='llm_response', ctx=Load()), slice=Constant(value='commands'), ctx=Load())), If(test=Compare(left=Name(id='installation_commands', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[For(target=Name(id='cmd', ctx=Store()), iter=Name(id='installation_commands', ctx=Load()), body=[Expr(value=Call(func=Name(id='run_command_until_success', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='convo_os_specific_tech', ctx=Load()), Subscript(value=Name(id='cmd', ctx=Load()), slice=Constant(value='command'), ctx=Load())], keywords=[keyword(arg='timeout', value=Subscript(value=Name(id='cmd', ctx=Load()), slice=Constant(value='timeout'), ctx=Load()))]))], orelse=[])], orelse=[])], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='The entire tech stack is installed and ready to be used.')], keywords=[])), Expr(value=Call(func=Name(id='save_progress', ctx=Load()), args=[Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='args', ctx=Load()), slice=Constant(value='app_id'), ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='current_step', ctx=Load()), Dict(keys=[Constant(value='os_specific_technologies'), Constant(value='newly_installed_technologies'), Constant(value='app_data')], values=[Name(id='os_specific_technologies', ctx=Load()), List(elts=[], ctx=Load()), Call(func=Name(id='generate_app_data', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='args', ctx=Load())], keywords=[])])], keywords=[]))], decorator_list=[]), FunctionDef(name='install_technology', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='technology')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='llm_response', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='convo_os_specific_tech', ctx=Load()), attr='send_message', ctx=Load()), args=[Constant(value='development/env_setup/install_next_technology.prompt'), Dict(keys=[Constant(value='technology')], values=[Name(id='technology', ctx=Load())]), Dict(keys=[Constant(value='definitions'), Constant(value='functions')], values=[List(elts=[Dict(keys=[Constant(value='name'), Constant(value='description'), Constant(value='parameters')], values=[Constant(value='execute_command'), JoinedStr(values=[Constant(value='Executes a command that should check if '), FormattedValue(value=Name(id='technology', ctx=Load()), conversion=-1), Constant(value=' is installed on the machine. ')]), Dict(keys=[Constant(value='type'), Constant(value='properties'), Constant(value='required')], values=[Constant(value='object'), Dict(keys=[Constant(value='command'), Constant(value='timeout')], values=[Dict(keys=[Constant(value='type'), Constant(value='description')], values=[Constant(value='string'), JoinedStr(values=[Constant(value='Command that needs to be executed to check if '), FormattedValue(value=Name(id='technology', ctx=Load()), conversion=-1), Constant(value=' is installed on the machine.')])]), Dict(keys=[Constant(value='type'), Constant(value='description')], values=[Constant(value='number'), Constant(value='Timeout in seconds for the approximate time this command takes to finish.')])]), List(elts=[Constant(value='command'), Constant(value='timeout')], ctx=Load())])])], ctx=Load()), Dict(keys=[Constant(value='execute_command')], values=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='command'), arg(arg='timeout')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Tuple(elts=[Name(id='command', ctx=Load()), Name(id='timeout', ctx=Load())], ctx=Load()))])])], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='cli_response', ctx=Store()), Name(id='llm_response', ctx=Store())], ctx=Store())], value=Call(func=Name(id='execute_command_and_check_cli_response', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='convo_os_specific_tech', ctx=Load()), Name(id='llm_response', ctx=Load())], keywords=[])), Return(value=Name(id='llm_response', ctx=Load()))], decorator_list=[]), FunctionDef(name='test_code_changes', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='code_monkey'), arg(arg='convo')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Dict(keys=[Constant(value='success')], values=[Constant(value=True)])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Testing code changes...')], keywords=[])), Assign(targets=[Name(id='llm_response', ctx=Store())], value=Call(func=Attribute(value=Name(id='convo', ctx=Load()), attr='send_message', ctx=Load()), args=[Constant(value='development/task/step_check.prompt'), Dict(keys=[], values=[]), Name(id='GET_TEST_TYPE', ctx=Load())], keywords=[])), Assign(targets=[Name(id='test_type', ctx=Store())], value=Subscript(value=Name(id='llm_response', ctx=Load()), slice=Constant(value='type'), ctx=Load())), If(test=Compare(left=Name(id='test_type', ctx=Load()), ops=[Eq()], comparators=[Constant(value='command_test')]), body=[Assign(targets=[Name(id='command', ctx=Store())], value=Subscript(value=Name(id='llm_response', ctx=Load()), slice=Constant(value='command'), ctx=Load())), Return(value=Call(func=Name(id='run_command_until_success', ctx=Load()), args=[Name(id='convo', ctx=Load()), Subscript(value=Name(id='command', ctx=Load()), slice=Constant(value='command'), ctx=Load())], keywords=[keyword(arg='timeout', value=Subscript(value=Name(id='command', ctx=Load()), slice=Constant(value='timeout'), ctx=Load()))]))], orelse=[If(test=Compare(left=Name(id='test_type', ctx=Load()), ops=[Eq()], comparators=[Constant(value='automated_test')]), body=[Pass()], orelse=[If(test=Compare(left=Name(id='test_type', ctx=Load()), ops=[Eq()], comparators=[Constant(value='manual_test')]), body=[Assign(targets=[Name(id='return_value', ctx=Store())], value=Dict(keys=[Constant(value='success')], values=[Constant(value=False)])), While(test=UnaryOp(op=Not(), operand=Subscript(value=Name(id='return_value', ctx=Load()), slice=Constant(value='success'), ctx=Load())), body=[Assign(targets=[Name(id='description', ctx=Store())], value=Subscript(value=Name(id='llm_response', ctx=Load()), slice=Constant(value='manual_test_description'), ctx=Load())), Assign(targets=[Name(id='response', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='ask_for_human_intervention', ctx=Load()), args=[Constant(value='I need your help. Can you please test if this was successful?'), Name(id='description', ctx=Load())], keywords=[])), Assign(targets=[Name(id='user_feedback', ctx=Store())], value=Subscript(value=Name(id='response', ctx=Load()), slice=Constant(value='user_input'), ctx=Load())), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='user_feedback', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='user_feedback', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='continue')])]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='debugger', ctx=Load()), attr='debug', ctx=Load()), args=[Name(id='convo', ctx=Load())], keywords=[keyword(arg='user_input', value=Name(id='user_feedback', ctx=Load())), keyword(arg='issue_description', value=Name(id='description', ctx=Load()))]))], orelse=[Assign(targets=[Name(id='return_value', ctx=Store())], value=Dict(keys=[Constant(value='success'), Constant(value='user_input')], values=[Constant(value=True), Name(id='user_feedback', ctx=Load())]))])], orelse=[]), Return(value=Name(id='return_value', ctx=Load()))], orelse=[])])])], decorator_list=[]), FunctionDef(name='implement_step', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='convo'), arg(arg='step_index'), arg(arg='type'), arg(arg='description')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Implementing %s step #%d: %s'), Name(id='type', ctx=Load()), Name(id='step_index', ctx=Load()), Name(id='description', ctx=Load())], keywords=[])), Assign(targets=[Name(id='directory_tree', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='project', ctx=Load()), attr='get_directory_tree', ctx=Load()), args=[Constant(value=True)], keywords=[])), Assign(targets=[Name(id='llm_response', ctx=Store())], value=Call(func=Attribute(value=Name(id='convo', ctx=Load()), attr='send_message', ctx=Load()), args=[Constant(value='development/task/next_step.prompt'), Dict(keys=[Constant(value='finished_steps'), Constant(value='step_description'), Constant(value='step_type'), Constant(value='directory_tree'), Constant(value='step_index')], values=[List(elts=[], ctx=Load()), Name(id='description', ctx=Load()), Name(id='type', ctx=Load()), Name(id='directory_tree', ctx=Load()), Name(id='step_index', ctx=Load())]), Name(id='EXECUTE_COMMANDS', ctx=Load())], keywords=[])), Assign(targets=[Name(id='step_details', ctx=Store())], value=Subscript(value=Name(id='llm_response', ctx=Load()), slice=Constant(value='commands'), ctx=Load())), If(test=Compare(left=Name(id='type', ctx=Load()), ops=[Eq()], comparators=[Constant(value='COMMAND')]), body=[For(target=Name(id='cmd', ctx=Store()), iter=Name(id='step_details', ctx=Load()), body=[Expr(value=Call(func=Name(id='run_command_until_success', ctx=Load()), args=[Name(id='convo', ctx=Load()), Subscript(value=Name(id='cmd', ctx=Load()), slice=Constant(value='command'), ctx=Load())], keywords=[keyword(arg='timeout', value=Subscript(value=Name(id='cmd', ctx=Load()), slice=Constant(value='timeout'), ctx=Load()))]))], orelse=[])], orelse=[]), Pass()], decorator_list=[])], decorator_list=[])], type_ignores=[])