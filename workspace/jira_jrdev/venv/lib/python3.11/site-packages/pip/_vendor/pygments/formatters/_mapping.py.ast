Module(body=[Assign(targets=[Name(id='FORMATTERS', ctx=Store())], value=Dict(keys=[Constant(value='BBCodeFormatter'), Constant(value='BmpImageFormatter'), Constant(value='GifImageFormatter'), Constant(value='GroffFormatter'), Constant(value='HtmlFormatter'), Constant(value='IRCFormatter'), Constant(value='ImageFormatter'), Constant(value='JpgImageFormatter'), Constant(value='LatexFormatter'), Constant(value='NullFormatter'), Constant(value='PangoMarkupFormatter'), Constant(value='RawTokenFormatter'), Constant(value='RtfFormatter'), Constant(value='SvgFormatter'), Constant(value='Terminal256Formatter'), Constant(value='TerminalFormatter'), Constant(value='TerminalTrueColorFormatter'), Constant(value='TestcaseFormatter')], values=[Tuple(elts=[Constant(value='pygments.formatters.bbcode'), Constant(value='BBCode'), Tuple(elts=[Constant(value='bbcode'), Constant(value='bb')], ctx=Load()), Tuple(elts=[], ctx=Load()), Constant(value='Format tokens with BBcodes. These formatting codes are used by many bulletin boards, so you can highlight your sourcecode with pygments before posting it there.')], ctx=Load()), Tuple(elts=[Constant(value='pygments.formatters.img'), Constant(value='img_bmp'), Tuple(elts=[Constant(value='bmp'), Constant(value='bitmap')], ctx=Load()), Tuple(elts=[Constant(value='*.bmp')], ctx=Load()), Constant(value='Create a bitmap image from source code. This uses the Python Imaging Library to generate a pixmap from the source code.')], ctx=Load()), Tuple(elts=[Constant(value='pygments.formatters.img'), Constant(value='img_gif'), Tuple(elts=[Constant(value='gif')], ctx=Load()), Tuple(elts=[Constant(value='*.gif')], ctx=Load()), Constant(value='Create a GIF image from source code. This uses the Python Imaging Library to generate a pixmap from the source code.')], ctx=Load()), Tuple(elts=[Constant(value='pygments.formatters.groff'), Constant(value='groff'), Tuple(elts=[Constant(value='groff'), Constant(value='troff'), Constant(value='roff')], ctx=Load()), Tuple(elts=[], ctx=Load()), Constant(value='Format tokens with groff escapes to change their color and font style.')], ctx=Load()), Tuple(elts=[Constant(value='pygments.formatters.html'), Constant(value='HTML'), Tuple(elts=[Constant(value='html')], ctx=Load()), Tuple(elts=[Constant(value='*.html'), Constant(value='*.htm')], ctx=Load()), Constant(value="Format tokens as HTML 4 ``<span>`` tags. By default, the content is enclosed in a ``<pre>`` tag, itself wrapped in a ``<div>`` tag (but see the `nowrap` option). The ``<div>``'s CSS class can be set by the `cssclass` option.")], ctx=Load()), Tuple(elts=[Constant(value='pygments.formatters.irc'), Constant(value='IRC'), Tuple(elts=[Constant(value='irc'), Constant(value='IRC')], ctx=Load()), Tuple(elts=[], ctx=Load()), Constant(value='Format tokens with IRC color sequences')], ctx=Load()), Tuple(elts=[Constant(value='pygments.formatters.img'), Constant(value='img'), Tuple(elts=[Constant(value='img'), Constant(value='IMG'), Constant(value='png')], ctx=Load()), Tuple(elts=[Constant(value='*.png')], ctx=Load()), Constant(value='Create a PNG image from source code. This uses the Python Imaging Library to generate a pixmap from the source code.')], ctx=Load()), Tuple(elts=[Constant(value='pygments.formatters.img'), Constant(value='img_jpg'), Tuple(elts=[Constant(value='jpg'), Constant(value='jpeg')], ctx=Load()), Tuple(elts=[Constant(value='*.jpg')], ctx=Load()), Constant(value='Create a JPEG image from source code. This uses the Python Imaging Library to generate a pixmap from the source code.')], ctx=Load()), Tuple(elts=[Constant(value='pygments.formatters.latex'), Constant(value='LaTeX'), Tuple(elts=[Constant(value='latex'), Constant(value='tex')], ctx=Load()), Tuple(elts=[Constant(value='*.tex')], ctx=Load()), Constant(value='Format tokens as LaTeX code. This needs the `fancyvrb` and `color` standard packages.')], ctx=Load()), Tuple(elts=[Constant(value='pygments.formatters.other'), Constant(value='Text only'), Tuple(elts=[Constant(value='text'), Constant(value='null')], ctx=Load()), Tuple(elts=[Constant(value='*.txt')], ctx=Load()), Constant(value='Output the text unchanged without any formatting.')], ctx=Load()), Tuple(elts=[Constant(value='pygments.formatters.pangomarkup'), Constant(value='Pango Markup'), Tuple(elts=[Constant(value='pango'), Constant(value='pangomarkup')], ctx=Load()), Tuple(elts=[], ctx=Load()), Constant(value='Format tokens as Pango Markup code. It can then be rendered to an SVG.')], ctx=Load()), Tuple(elts=[Constant(value='pygments.formatters.other'), Constant(value='Raw tokens'), Tuple(elts=[Constant(value='raw'), Constant(value='tokens')], ctx=Load()), Tuple(elts=[Constant(value='*.raw')], ctx=Load()), Constant(value='Format tokens as a raw representation for storing token streams.')], ctx=Load()), Tuple(elts=[Constant(value='pygments.formatters.rtf'), Constant(value='RTF'), Tuple(elts=[Constant(value='rtf')], ctx=Load()), Tuple(elts=[Constant(value='*.rtf')], ctx=Load()), Constant(value='Format tokens as RTF markup. This formatter automatically outputs full RTF documents with color information and other useful stuff. Perfect for Copy and Paste into Microsoft(R) Word(R) documents.')], ctx=Load()), Tuple(elts=[Constant(value='pygments.formatters.svg'), Constant(value='SVG'), Tuple(elts=[Constant(value='svg')], ctx=Load()), Tuple(elts=[Constant(value='*.svg')], ctx=Load()), Constant(value='Format tokens as an SVG graphics file.  This formatter is still experimental. Each line of code is a ``<text>`` element with explicit ``x`` and ``y`` coordinates containing ``<tspan>`` elements with the individual token styles.')], ctx=Load()), Tuple(elts=[Constant(value='pygments.formatters.terminal256'), Constant(value='Terminal256'), Tuple(elts=[Constant(value='terminal256'), Constant(value='console256'), Constant(value='256')], ctx=Load()), Tuple(elts=[], ctx=Load()), Constant(value='Format tokens with ANSI color sequences, for output in a 256-color terminal or console.  Like in `TerminalFormatter` color sequences are terminated at newlines, so that paging the output works correctly.')], ctx=Load()), Tuple(elts=[Constant(value='pygments.formatters.terminal'), Constant(value='Terminal'), Tuple(elts=[Constant(value='terminal'), Constant(value='console')], ctx=Load()), Tuple(elts=[], ctx=Load()), Constant(value='Format tokens with ANSI color sequences, for output in a text console. Color sequences are terminated at newlines, so that paging the output works correctly.')], ctx=Load()), Tuple(elts=[Constant(value='pygments.formatters.terminal256'), Constant(value='TerminalTrueColor'), Tuple(elts=[Constant(value='terminal16m'), Constant(value='console16m'), Constant(value='16m')], ctx=Load()), Tuple(elts=[], ctx=Load()), Constant(value='Format tokens with ANSI color sequences, for output in a true-color terminal or console.  Like in `TerminalFormatter` color sequences are terminated at newlines, so that paging the output works correctly.')], ctx=Load()), Tuple(elts=[Constant(value='pygments.formatters.other'), Constant(value='Testcase'), Tuple(elts=[Constant(value='testcase')], ctx=Load()), Tuple(elts=[], ctx=Load()), Constant(value='Format tokens as appropriate for a new testcase.')], ctx=Load())]))], type_ignores=[])