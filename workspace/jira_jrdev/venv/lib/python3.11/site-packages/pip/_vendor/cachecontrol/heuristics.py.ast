Module(body=[ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), Import(names=[alias(name='calendar')]), Import(names=[alias(name='time')]), ImportFrom(module='datetime', names=[alias(name='datetime'), alias(name='timedelta'), alias(name='timezone')], level=0), ImportFrom(module='email.utils', names=[alias(name='formatdate'), alias(name='parsedate'), alias(name='parsedate_tz')], level=0), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING'), alias(name='Any'), alias(name='Mapping')], level=0), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='pip._vendor.urllib3', names=[alias(name='HTTPResponse')], level=0)], orelse=[]), Assign(targets=[Name(id='TIME_FMT', ctx=Store())], value=Constant(value='%a, %d %b %Y %H:%M:%S GMT')), FunctionDef(name='expire_after', args=arguments(posonlyargs=[], args=[arg(arg='delta', annotation=Name(id='timedelta', ctx=Load())), arg(arg='date', annotation=BinOp(left=Name(id='datetime', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Name(id='date', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='date', ctx=Load()), Call(func=Attribute(value=Name(id='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='timezone', ctx=Load()), attr='utc', ctx=Load())], keywords=[])])), Return(value=BinOp(left=Name(id='date', ctx=Load()), op=Add(), right=Name(id='delta', ctx=Load())))], decorator_list=[], returns=Name(id='datetime', ctx=Load())), FunctionDef(name='datetime_to_header', args=arguments(posonlyargs=[], args=[arg(arg='dt', annotation=Name(id='datetime', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='formatdate', ctx=Load()), args=[Call(func=Attribute(value=Name(id='calendar', ctx=Load()), attr='timegm', ctx=Load()), args=[Call(func=Attribute(value=Name(id='dt', ctx=Load()), attr='timetuple', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), ClassDef(name='BaseHeuristic', bases=[], keywords=[], body=[FunctionDef(name='warning', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='response', annotation=Name(id='HTTPResponse', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return a valid 1xx warning header value describing the cache\n        adjustments.\n\n        The response is provided too allow warnings like 113\n        http://tools.ietf.org/html/rfc7234#section-5.5.4 where we need\n        to explicitly say response is over 24 hours old.\n        ')), Return(value=Constant(value='110 - "Response is Stale"'))], decorator_list=[], returns=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None))), FunctionDef(name='update_headers', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='response', annotation=Name(id='HTTPResponse', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Update the response headers with any new headers.\n\n        NOTE: This SHOULD always include some Warning header to\n              signify that the response was cached by the client, not\n              by way of the provided headers.\n        ')), Return(value=Dict(keys=[], values=[]))], decorator_list=[], returns=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='apply', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='response', annotation=Name(id='HTTPResponse', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='updated_headers', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='update_headers', ctx=Load()), args=[Name(id='response', ctx=Load())], keywords=[])), If(test=Name(id='updated_headers', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='response', ctx=Load()), attr='headers', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='updated_headers', ctx=Load())], keywords=[])), Assign(targets=[Name(id='warning_header_value', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='warning', ctx=Load()), args=[Name(id='response', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='warning_header_value', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='response', ctx=Load()), attr='headers', ctx=Load()), attr='update', ctx=Load()), args=[Dict(keys=[Constant(value='Warning')], values=[Name(id='warning_header_value', ctx=Load())])], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='response', ctx=Load()))], decorator_list=[], returns=Name(id='HTTPResponse', ctx=Load()))], decorator_list=[]), ClassDef(name='OneDayCache', bases=[Name(id='BaseHeuristic', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Cache the response by providing an expires 1 day in the\n    future.\n    ')), FunctionDef(name='update_headers', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='response', annotation=Name(id='HTTPResponse', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='headers', ctx=Store())], value=Dict(keys=[], values=[])), If(test=Compare(left=Constant(value='expires'), ops=[NotIn()], comparators=[Attribute(value=Name(id='response', ctx=Load()), attr='headers', ctx=Load())]), body=[Assign(targets=[Name(id='date', ctx=Store())], value=Call(func=Name(id='parsedate', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='response', ctx=Load()), attr='headers', ctx=Load()), slice=Constant(value='date'), ctx=Load())], keywords=[])), Assign(targets=[Name(id='expires', ctx=Store())], value=Call(func=Name(id='expire_after', ctx=Load()), args=[Call(func=Name(id='timedelta', ctx=Load()), args=[], keywords=[keyword(arg='days', value=Constant(value=1))])], keywords=[keyword(arg='date', value=Call(func=Name(id='datetime', ctx=Load()), args=[Starred(value=Subscript(value=Name(id='date', ctx=Load()), slice=Slice(upper=Constant(value=6)), ctx=Load()), ctx=Load())], keywords=[keyword(arg='tzinfo', value=Attribute(value=Name(id='timezone', ctx=Load()), attr='utc', ctx=Load()))]))])), Assign(targets=[Subscript(value=Name(id='headers', ctx=Load()), slice=Constant(value='expires'), ctx=Store())], value=Call(func=Name(id='datetime_to_header', ctx=Load()), args=[Name(id='expires', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='headers', ctx=Load()), slice=Constant(value='cache-control'), ctx=Store())], value=Constant(value='public'))], orelse=[]), Return(value=Name(id='headers', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()))], decorator_list=[]), ClassDef(name='ExpiresAfter', bases=[Name(id='BaseHeuristic', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Cache **all** requests for a defined time period.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kw', annotation=Name(id='Any', ctx=Load())), defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='delta', ctx=Store())], value=Call(func=Name(id='timedelta', ctx=Load()), args=[], keywords=[keyword(value=Name(id='kw', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='update_headers', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='response', annotation=Name(id='HTTPResponse', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='expires', ctx=Store())], value=Call(func=Name(id='expire_after', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='delta', ctx=Load())], keywords=[])), Return(value=Dict(keys=[Constant(value='expires'), Constant(value='cache-control')], values=[Call(func=Name(id='datetime_to_header', ctx=Load()), args=[Name(id='expires', ctx=Load())], keywords=[]), Constant(value='public')]))], decorator_list=[], returns=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='warning', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='response', annotation=Name(id='HTTPResponse', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='tmpl', ctx=Store())], value=Constant(value='110 - Automatically cached for %s. Response might be stale')), Return(value=BinOp(left=Name(id='tmpl', ctx=Load()), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='delta', ctx=Load())))], decorator_list=[], returns=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None)))], decorator_list=[]), ClassDef(name='LastModified', bases=[Name(id='BaseHeuristic', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    If there is no Expires header already, fall back on Last-Modified\n    using the heuristic from\n    http://tools.ietf.org/html/rfc7234#section-4.2.2\n    to calculate a reasonable value.\n\n    Firefox also does something like this per\n    https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching_FAQ\n    http://lxr.mozilla.org/mozilla-release/source/netwerk/protocol/http/nsHttpResponseHead.cpp#397\n    Unlike mozilla we limit this to 24-hr.\n    ')), Assign(targets=[Name(id='cacheable_by_default_statuses', ctx=Store())], value=Set(elts=[Constant(value=200), Constant(value=203), Constant(value=204), Constant(value=206), Constant(value=300), Constant(value=301), Constant(value=404), Constant(value=405), Constant(value=410), Constant(value=414), Constant(value=501)])), FunctionDef(name='update_headers', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='resp', annotation=Name(id='HTTPResponse', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Name(id='headers', ctx=Store()), annotation=Subscript(value=Name(id='Mapping', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), value=Attribute(value=Name(id='resp', ctx=Load()), attr='headers', ctx=Load()), simple=1), If(test=Compare(left=Constant(value='expires'), ops=[In()], comparators=[Name(id='headers', ctx=Load())]), body=[Return(value=Dict(keys=[], values=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Constant(value='cache-control'), ops=[In()], comparators=[Name(id='headers', ctx=Load())]), Compare(left=Subscript(value=Name(id='headers', ctx=Load()), slice=Constant(value='cache-control'), ctx=Load()), ops=[NotEq()], comparators=[Constant(value='public')])]), body=[Return(value=Dict(keys=[], values=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='resp', ctx=Load()), attr='status', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='cacheable_by_default_statuses', ctx=Load())]), body=[Return(value=Dict(keys=[], values=[]))], orelse=[]), If(test=BoolOp(op=Or(), values=[Compare(left=Constant(value='date'), ops=[NotIn()], comparators=[Name(id='headers', ctx=Load())]), Compare(left=Constant(value='last-modified'), ops=[NotIn()], comparators=[Name(id='headers', ctx=Load())])]), body=[Return(value=Dict(keys=[], values=[]))], orelse=[]), Assign(targets=[Name(id='time_tuple', ctx=Store())], value=Call(func=Name(id='parsedate_tz', ctx=Load()), args=[Subscript(value=Name(id='headers', ctx=Load()), slice=Constant(value='date'), ctx=Load())], keywords=[])), Assert(test=Compare(left=Name(id='time_tuple', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Name(id='date', ctx=Store())], value=Call(func=Attribute(value=Name(id='calendar', ctx=Load()), attr='timegm', ctx=Load()), args=[Subscript(value=Name(id='time_tuple', ctx=Load()), slice=Slice(upper=Constant(value=6)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='last_modified', ctx=Store())], value=Call(func=Name(id='parsedate', ctx=Load()), args=[Subscript(value=Name(id='headers', ctx=Load()), slice=Constant(value='last-modified'), ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='last_modified', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Dict(keys=[], values=[]))], orelse=[]), Assign(targets=[Name(id='now', ctx=Store())], value=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='time', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='current_age', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Constant(value=0), BinOp(left=Name(id='now', ctx=Load()), op=Sub(), right=Name(id='date', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='delta', ctx=Store())], value=BinOp(left=Name(id='date', ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='calendar', ctx=Load()), attr='timegm', ctx=Load()), args=[Name(id='last_modified', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='freshness_lifetime', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Constant(value=0), Call(func=Name(id='min', ctx=Load()), args=[BinOp(left=Name(id='delta', ctx=Load()), op=Div(), right=Constant(value=10)), BinOp(left=Constant(value=24), op=Mult(), right=Constant(value=3600))], keywords=[])], keywords=[])), If(test=Compare(left=Name(id='freshness_lifetime', ctx=Load()), ops=[LtE()], comparators=[Name(id='current_age', ctx=Load())]), body=[Return(value=Dict(keys=[], values=[]))], orelse=[]), Assign(targets=[Name(id='expires', ctx=Store())], value=BinOp(left=Name(id='date', ctx=Load()), op=Add(), right=Name(id='freshness_lifetime', ctx=Load()))), Return(value=Dict(keys=[Constant(value='expires')], values=[Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='strftime', ctx=Load()), args=[Name(id='TIME_FMT', ctx=Load()), Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='gmtime', ctx=Load()), args=[Name(id='expires', ctx=Load())], keywords=[])], keywords=[])]))], decorator_list=[], returns=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='warning', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='resp', annotation=Name(id='HTTPResponse', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=None))], decorator_list=[], returns=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None)))], decorator_list=[])], type_ignores=[])