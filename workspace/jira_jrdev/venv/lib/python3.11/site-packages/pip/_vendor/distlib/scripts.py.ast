Module(body=[ImportFrom(module='io', names=[alias(name='BytesIO')], level=0), Import(names=[alias(name='logging')]), Import(names=[alias(name='os')]), Import(names=[alias(name='re')]), Import(names=[alias(name='struct')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='time')]), ImportFrom(module='zipfile', names=[alias(name='ZipInfo')], level=0), ImportFrom(module='compat', names=[alias(name='sysconfig'), alias(name='detect_encoding'), alias(name='ZipFile')], level=1), ImportFrom(module='resources', names=[alias(name='finder')], level=1), ImportFrom(module='util', names=[alias(name='FileOperator'), alias(name='get_export_entry'), alias(name='convert_path'), alias(name='get_executable'), alias(name='get_platform'), alias(name='in_venv')], level=1), Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), Assign(targets=[Name(id='_DEFAULT_MANIFEST', ctx=Store())], value=Call(func=Attribute(value=Constant(value='\n<?xml version="1.0" encoding="UTF-8" standalone="yes"?>\n<assembly xmlns="urn:schemas-microsoft-com:asm.v1" manifestVersion="1.0">\n <assemblyIdentity version="1.0.0.0"\n processorArchitecture="X86"\n name="%s"\n type="win32"/>\n\n <!-- Identify the application security requirements. -->\n <trustInfo xmlns="urn:schemas-microsoft-com:asm.v3">\n <security>\n <requestedPrivileges>\n <requestedExecutionLevel level="asInvoker" uiAccess="false"/>\n </requestedPrivileges>\n </security>\n </trustInfo>\n</assembly>'), attr='strip', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='FIRST_LINE_RE', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value=b'^#!.*pythonw?[0-9.]*([ \t].*)?$')], keywords=[])), Assign(targets=[Name(id='SCRIPT_TEMPLATE', ctx=Store())], value=Constant(value="# -*- coding: utf-8 -*-\nimport re\nimport sys\nfrom %(module)s import %(import_name)s\nif __name__ == '__main__':\n    sys.argv[0] = re.sub(r'(-script\\.pyw|\\.exe)?$', '', sys.argv[0])\n    sys.exit(%(func)s())\n")), FunctionDef(name='enquote_executable', args=arguments(posonlyargs=[], args=[arg(arg='executable')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Constant(value=' '), ops=[In()], comparators=[Name(id='executable', ctx=Load())]), body=[If(test=Call(func=Attribute(value=Name(id='executable', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='/usr/bin/env ')], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='env', ctx=Store()), Name(id='_executable', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='executable', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=' '), Constant(value=1)], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Constant(value=' '), ops=[In()], comparators=[Name(id='_executable', ctx=Load())]), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='_executable', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='"')], keywords=[]))]), body=[Assign(targets=[Name(id='executable', ctx=Store())], value=BinOp(left=Constant(value='%s "%s"'), op=Mod(), right=Tuple(elts=[Name(id='env', ctx=Load()), Name(id='_executable', ctx=Load())], ctx=Load())))], orelse=[])], orelse=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='executable', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='"')], keywords=[])), body=[Assign(targets=[Name(id='executable', ctx=Store())], value=BinOp(left=Constant(value='"%s"'), op=Mod(), right=Name(id='executable', ctx=Load())))], orelse=[])])], orelse=[]), Return(value=Name(id='executable', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='_enquote_executable', ctx=Store())], value=Name(id='enquote_executable', ctx=Load())), ClassDef(name='ScriptMaker', bases=[Name(id='object', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    A class to copy or create scripts from source scripts or callable\n    specifications.\n    ')), Assign(targets=[Name(id='script_template', ctx=Store())], value=Name(id='SCRIPT_TEMPLATE', ctx=Load())), Assign(targets=[Name(id='executable', ctx=Store())], value=Constant(value=None)), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='source_dir'), arg(arg='target_dir'), arg(arg='add_launchers'), arg(arg='dry_run'), arg(arg='fileop')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=False), Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='source_dir', ctx=Store())], value=Name(id='source_dir', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='target_dir', ctx=Store())], value=Name(id='target_dir', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='add_launchers', ctx=Store())], value=Name(id='add_launchers', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='force', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='clobber', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='set_mode', ctx=Store())], value=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='os', ctx=Load()), attr='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='posix')]), BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='os', ctx=Load()), attr='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='java')]), Compare(left=Attribute(value=Name(id='os', ctx=Load()), attr='_name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='posix')])])])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='variants', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Tuple(elts=[Constant(value=''), Constant(value='X.Y')], ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_fileop', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='fileop', ctx=Load()), Call(func=Name(id='FileOperator', ctx=Load()), args=[Name(id='dry_run', ctx=Load())], keywords=[])])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_is_nt', ctx=Store())], value=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='os', ctx=Load()), attr='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='nt')]), BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='os', ctx=Load()), attr='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='java')]), Compare(left=Attribute(value=Name(id='os', ctx=Load()), attr='_name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='nt')])])])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='version_info', ctx=Store())], value=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()))], decorator_list=[]), FunctionDef(name='_get_alternate_executable', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='executable'), arg(arg='options')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='gui'), Constant(value=False)], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='_is_nt', ctx=Load())]), body=[Assign(targets=[Tuple(elts=[Name(id='dn', ctx=Store()), Name(id='fn', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='split', ctx=Load()), args=[Name(id='executable', ctx=Load())], keywords=[])), Assign(targets=[Name(id='fn', ctx=Store())], value=Call(func=Attribute(value=Name(id='fn', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='python'), Constant(value='pythonw')], keywords=[])), Assign(targets=[Name(id='executable', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='dn', ctx=Load()), Name(id='fn', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='executable', ctx=Load()))], decorator_list=[]), If(test=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='java')], keywords=[]), body=[FunctionDef(name='_is_shell', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='executable')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n            Determine if the specified executable is a script\n            (contains a #! line)\n            ')), Try(body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='executable', ctx=Load())], keywords=[]), optional_vars=Name(id='fp', ctx=Store()))], body=[Return(value=Compare(left=Call(func=Attribute(value=Name(id='fp', ctx=Load()), attr='read', ctx=Load()), args=[Constant(value=2)], keywords=[]), ops=[Eq()], comparators=[Constant(value='#!')]))])], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='OSError', ctx=Load()), Name(id='IOError', ctx=Load())], ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='Failed to open %s'), Name(id='executable', ctx=Load())], keywords=[])), Return(value=Constant(value=False))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='_fix_jython_executable', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='executable')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_is_shell', ctx=Load()), args=[Name(id='executable', ctx=Load())], keywords=[]), body=[Import(names=[alias(name='java')]), If(test=Compare(left=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='java', ctx=Load()), attr='lang', ctx=Load()), attr='System', ctx=Load()), attr='getProperty', ctx=Load()), args=[Constant(value='os.name')], keywords=[]), ops=[Eq()], comparators=[Constant(value='Linux')]), body=[Return(value=Name(id='executable', ctx=Load()))], orelse=[])], orelse=[If(test=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='executable', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), attr='endswith', ctx=Load()), args=[Constant(value='jython.exe')], keywords=[]), body=[Return(value=Name(id='executable', ctx=Load()))], orelse=[])]), Return(value=BinOp(left=Constant(value='/usr/bin/env %s'), op=Mod(), right=Name(id='executable', ctx=Load())))], decorator_list=[])], orelse=[]), FunctionDef(name='_build_shebang', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='executable'), arg(arg='post_interp')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Build a shebang line. In the simple case (on Windows, or a shebang line\n        which is not too long or contains spaces) use a simple formulation for\n        the shebang. Otherwise, use /bin/sh as the executable, with a contrived\n        shebang which allows the script to run either under Python or sh, using\n        suitable quoting. Thanks to Harald Nordgren for his input.\n\n        See also: http://www.in-ulm.de/~mascheck/various/shebang/#length\n                  https://hg.mozilla.org/mozilla-central/file/tip/mach\n        ')), If(test=Compare(left=Attribute(value=Name(id='os', ctx=Load()), attr='name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='posix')]), body=[Assign(targets=[Name(id='simple_shebang', ctx=Store())], value=Constant(value=True))], orelse=[Assign(targets=[Name(id='shebang_length', ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='executable', ctx=Load())], keywords=[]), op=Add(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='post_interp', ctx=Load())], keywords=[])), op=Add(), right=Constant(value=3))), If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), ops=[Eq()], comparators=[Constant(value='darwin')]), body=[Assign(targets=[Name(id='max_shebang_length', ctx=Store())], value=Constant(value=512))], orelse=[Assign(targets=[Name(id='max_shebang_length', ctx=Store())], value=Constant(value=127))]), Assign(targets=[Name(id='simple_shebang', ctx=Store())], value=BoolOp(op=And(), values=[Compare(left=Constant(value=b' '), ops=[NotIn()], comparators=[Name(id='executable', ctx=Load())]), Compare(left=Name(id='shebang_length', ctx=Load()), ops=[LtE()], comparators=[Name(id='max_shebang_length', ctx=Load())])]))]), If(test=Name(id='simple_shebang', ctx=Load()), body=[Assign(targets=[Name(id='result', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=Constant(value=b'#!'), op=Add(), right=Name(id='executable', ctx=Load())), op=Add(), right=Name(id='post_interp', ctx=Load())), op=Add(), right=Constant(value=b'\n')))], orelse=[Assign(targets=[Name(id='result', ctx=Store())], value=Constant(value=b'#!/bin/sh\n')), AugAssign(target=Name(id='result', ctx=Store()), op=Add(), value=BinOp(left=BinOp(left=BinOp(left=Constant(value=b"'''exec' "), op=Add(), right=Name(id='executable', ctx=Load())), op=Add(), right=Name(id='post_interp', ctx=Load())), op=Add(), right=Constant(value=b' "$0" "$@"\n'))), AugAssign(target=Name(id='result', ctx=Store()), op=Add(), value=Constant(value=b"' '''"))]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[]), FunctionDef(name='_get_shebang', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='encoding'), arg(arg='post_interp'), arg(arg='options')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=b''), Constant(value=None)]), body=[Assign(targets=[Name(id='enquote', ctx=Store())], value=Constant(value=True)), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='executable', ctx=Load()), body=[Assign(targets=[Name(id='executable', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='executable', ctx=Load())), Assign(targets=[Name(id='enquote', ctx=Store())], value=Constant(value=False))], orelse=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='sysconfig', ctx=Load()), attr='is_python_build', ctx=Load()), args=[], keywords=[])), body=[Assign(targets=[Name(id='executable', ctx=Store())], value=Call(func=Name(id='get_executable', ctx=Load()), args=[], keywords=[]))], orelse=[If(test=Call(func=Name(id='in_venv', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='executable', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Call(func=Attribute(value=Name(id='sysconfig', ctx=Load()), attr='get_path', ctx=Load()), args=[Constant(value='scripts')], keywords=[]), BinOp(left=Constant(value='python%s'), op=Mod(), right=Call(func=Attribute(value=Name(id='sysconfig', ctx=Load()), attr='get_config_var', ctx=Load()), args=[Constant(value='EXE')], keywords=[]))], keywords=[]))], orelse=[Assign(targets=[Name(id='executable', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Call(func=Attribute(value=Name(id='sysconfig', ctx=Load()), attr='get_config_var', ctx=Load()), args=[Constant(value='BINDIR')], keywords=[]), BinOp(left=Constant(value='python%s%s'), op=Mod(), right=Tuple(elts=[Call(func=Attribute(value=Name(id='sysconfig', ctx=Load()), attr='get_config_var', ctx=Load()), args=[Constant(value='VERSION')], keywords=[]), Call(func=Attribute(value=Name(id='sysconfig', ctx=Load()), attr='get_config_var', ctx=Load()), args=[Constant(value='EXE')], keywords=[])], ctx=Load()))], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isfile', ctx=Load()), args=[Name(id='executable', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='executable', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Call(func=Attribute(value=Name(id='sysconfig', ctx=Load()), attr='get_config_var', ctx=Load()), args=[Constant(value='BINDIR')], keywords=[]), BinOp(left=Constant(value='python%s'), op=Mod(), right=Call(func=Attribute(value=Name(id='sysconfig', ctx=Load()), attr='get_config_var', ctx=Load()), args=[Constant(value='EXE')], keywords=[]))], keywords=[]))], orelse=[])])])]), If(test=Name(id='options', ctx=Load()), body=[Assign(targets=[Name(id='executable', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_alternate_executable', ctx=Load()), args=[Name(id='executable', ctx=Load()), Name(id='options', ctx=Load())], keywords=[]))], orelse=[]), If(test=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='java')], keywords=[]), body=[Assign(targets=[Name(id='executable', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_fix_jython_executable', ctx=Load()), args=[Name(id='executable', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='enquote', ctx=Load()), body=[Assign(targets=[Name(id='executable', ctx=Store())], value=Call(func=Name(id='enquote_executable', ctx=Load()), args=[Name(id='executable', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='executable', ctx=Store())], value=Call(func=Attribute(value=Name(id='executable', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), ops=[Eq()], comparators=[Constant(value='cli')]), Compare(left=Constant(value='-X:Frames'), ops=[NotIn()], comparators=[Name(id='post_interp', ctx=Load())]), Compare(left=Constant(value='-X:FullFrames'), ops=[NotIn()], comparators=[Name(id='post_interp', ctx=Load())])]), body=[AugAssign(target=Name(id='post_interp', ctx=Store()), op=Add(), value=Constant(value=b' -X:Frames'))], orelse=[]), Assign(targets=[Name(id='shebang', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_build_shebang', ctx=Load()), args=[Name(id='executable', ctx=Load()), Name(id='post_interp', ctx=Load())], keywords=[])), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='shebang', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[]))], handlers=[ExceptHandler(type=Name(id='UnicodeDecodeError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='The shebang (%r) is not decodable from utf-8'), op=Mod(), right=Name(id='shebang', ctx=Load()))], keywords=[]))])], orelse=[], finalbody=[]), If(test=Compare(left=Name(id='encoding', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='utf-8')]), body=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='shebang', ctx=Load()), attr='decode', ctx=Load()), args=[Name(id='encoding', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='UnicodeDecodeError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='The shebang (%r) is not decodable from the script encoding (%r)'), op=Mod(), right=Tuple(elts=[Name(id='shebang', ctx=Load()), Name(id='encoding', ctx=Load())], ctx=Load()))], keywords=[]))])], orelse=[], finalbody=[])], orelse=[]), Return(value=Name(id='shebang', ctx=Load()))], decorator_list=[]), FunctionDef(name='_get_script_text', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='entry')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='script_template', ctx=Load()), op=Mod(), right=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='module', value=Attribute(value=Name(id='entry', ctx=Load()), attr='prefix', ctx=Load())), keyword(arg='import_name', value=Subscript(value=Call(func=Attribute(value=Attribute(value=Name(id='entry', ctx=Load()), attr='suffix', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[]), slice=Constant(value=0), ctx=Load())), keyword(arg='func', value=Attribute(value=Name(id='entry', ctx=Load()), attr='suffix', ctx=Load()))])))], decorator_list=[]), Assign(targets=[Name(id='manifest', ctx=Store())], value=Name(id='_DEFAULT_MANIFEST', ctx=Load())), FunctionDef(name='get_manifest', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='exename')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='base', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='basename', ctx=Load()), args=[Name(id='exename', ctx=Load())], keywords=[])), Return(value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='manifest', ctx=Load()), op=Mod(), right=Name(id='base', ctx=Load())))], decorator_list=[]), FunctionDef(name='_write_script', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='names'), arg(arg='shebang'), arg(arg='script_bytes'), arg(arg='filenames'), arg(arg='ext')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='use_launcher', ctx=Store())], value=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='add_launchers', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_is_nt', ctx=Load())])), Assign(targets=[Name(id='linesep', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='linesep', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='shebang', ctx=Load()), attr='endswith', ctx=Load()), args=[Name(id='linesep', ctx=Load())], keywords=[])), body=[AugAssign(target=Name(id='shebang', ctx=Store()), op=Add(), value=Name(id='linesep', ctx=Load()))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='use_launcher', ctx=Load())), body=[Assign(targets=[Name(id='script_bytes', ctx=Store())], value=BinOp(left=Name(id='shebang', ctx=Load()), op=Add(), right=Name(id='script_bytes', ctx=Load())))], orelse=[If(test=Compare(left=Name(id='ext', ctx=Load()), ops=[Eq()], comparators=[Constant(value='py')]), body=[Assign(targets=[Name(id='launcher', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_launcher', ctx=Load()), args=[Constant(value='t')], keywords=[]))], orelse=[Assign(targets=[Name(id='launcher', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_launcher', ctx=Load()), args=[Constant(value='w')], keywords=[]))]), Assign(targets=[Name(id='stream', ctx=Store())], value=Call(func=Name(id='BytesIO', ctx=Load()), args=[], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='ZipFile', ctx=Load()), args=[Name(id='stream', ctx=Load()), Constant(value='w')], keywords=[]), optional_vars=Name(id='zf', ctx=Store()))], body=[Assign(targets=[Name(id='source_date_epoch', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='SOURCE_DATE_EPOCH')], keywords=[])), If(test=Name(id='source_date_epoch', ctx=Load()), body=[Assign(targets=[Name(id='date_time', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='gmtime', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Name(id='source_date_epoch', ctx=Load())], keywords=[])], keywords=[]), slice=Slice(upper=Constant(value=6)), ctx=Load())), Assign(targets=[Name(id='zinfo', ctx=Store())], value=Call(func=Name(id='ZipInfo', ctx=Load()), args=[], keywords=[keyword(arg='filename', value=Constant(value='__main__.py')), keyword(arg='date_time', value=Name(id='date_time', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='zf', ctx=Load()), attr='writestr', ctx=Load()), args=[Name(id='zinfo', ctx=Load()), Name(id='script_bytes', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='zf', ctx=Load()), attr='writestr', ctx=Load()), args=[Constant(value='__main__.py'), Name(id='script_bytes', ctx=Load())], keywords=[]))])]), Assign(targets=[Name(id='zip_data', ctx=Store())], value=Call(func=Attribute(value=Name(id='stream', ctx=Load()), attr='getvalue', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='script_bytes', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='launcher', ctx=Load()), op=Add(), right=Name(id='shebang', ctx=Load())), op=Add(), right=Name(id='zip_data', ctx=Load())))]), For(target=Name(id='name', ctx=Store()), iter=Name(id='names', ctx=Load()), body=[Assign(targets=[Name(id='outname', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='target_dir', ctx=Load()), Name(id='name', ctx=Load())], keywords=[])), If(test=Name(id='use_launcher', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='n', ctx=Store()), Name(id='e', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='splitext', ctx=Load()), args=[Name(id='outname', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Name(id='e', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='.py')], keywords=[]), body=[Assign(targets=[Name(id='outname', ctx=Store())], value=Name(id='n', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='outname', ctx=Store())], value=BinOp(left=Constant(value='%s.exe'), op=Mod(), right=Name(id='outname', ctx=Load()))), Try(body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_fileop', ctx=Load()), attr='write_binary_file', ctx=Load()), args=[Name(id='outname', ctx=Load()), Name(id='script_bytes', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='Failed to write executable - trying to use .deleteme logic')], keywords=[])), Assign(targets=[Name(id='dfname', ctx=Store())], value=BinOp(left=Constant(value='%s.deleteme'), op=Mod(), right=Name(id='outname', ctx=Load()))), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='dfname', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='dfname', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='rename', ctx=Load()), args=[Name(id='outname', ctx=Load()), Name(id='dfname', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_fileop', ctx=Load()), attr='write_binary_file', ctx=Load()), args=[Name(id='outname', ctx=Load()), Name(id='script_bytes', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Able to replace executable using .deleteme logic')], keywords=[])), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='dfname', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])])], orelse=[], finalbody=[])], orelse=[If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='_is_nt', ctx=Load()), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='outname', ctx=Load()), attr='endswith', ctx=Load()), args=[BinOp(left=Constant(value='.'), op=Add(), right=Name(id='ext', ctx=Load()))], keywords=[]))]), body=[Assign(targets=[Name(id='outname', ctx=Store())], value=BinOp(left=Constant(value='%s.%s'), op=Mod(), right=Tuple(elts=[Name(id='outname', ctx=Load()), Name(id='ext', ctx=Load())], ctx=Load())))], orelse=[]), If(test=BoolOp(op=And(), values=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='outname', ctx=Load())], keywords=[]), UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='clobber', ctx=Load()))]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='Skipping existing file %s'), Name(id='outname', ctx=Load())], keywords=[])), Continue()], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_fileop', ctx=Load()), attr='write_binary_file', ctx=Load()), args=[Name(id='outname', ctx=Load()), Name(id='script_bytes', ctx=Load())], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='set_mode', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_fileop', ctx=Load()), attr='set_executable_mode', ctx=Load()), args=[List(elts=[Name(id='outname', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[])]), Expr(value=Call(func=Attribute(value=Name(id='filenames', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='outname', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), Assign(targets=[Name(id='variant_separator', ctx=Store())], value=Constant(value='-')), FunctionDef(name='get_script_filenames', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Constant(value=''), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='variants', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Constant(value='X'), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='variants', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='add', ctx=Load()), args=[BinOp(left=Constant(value='%s%s'), op=Mod(), right=Tuple(elts=[Name(id='name', ctx=Load()), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='version_info', ctx=Load()), slice=Constant(value=0), ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[]), If(test=Compare(left=Constant(value='X.Y'), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='variants', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='add', ctx=Load()), args=[BinOp(left=Constant(value='%s%s%s.%s'), op=Mod(), right=Tuple(elts=[Name(id='name', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='variant_separator', ctx=Load()), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='version_info', ctx=Load()), slice=Constant(value=0), ctx=Load()), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='version_info', ctx=Load()), slice=Constant(value=1), ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[]), FunctionDef(name='_make_script', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='entry'), arg(arg='filenames'), arg(arg='options')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Name(id='post_interp', ctx=Store())], value=Constant(value=b'')), If(test=Name(id='options', ctx=Load()), body=[Assign(targets=[Name(id='args', ctx=Store())], value=Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='interpreter_args'), List(elts=[], ctx=Load())], keywords=[])), If(test=Name(id='args', ctx=Load()), body=[Assign(targets=[Name(id='args', ctx=Store())], value=BinOp(left=Constant(value=' %s'), op=Mod(), right=Call(func=Attribute(value=Constant(value=' '), attr='join', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='post_interp', ctx=Store())], value=Call(func=Attribute(value=Name(id='args', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='shebang', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_shebang', ctx=Load()), args=[Constant(value='utf-8'), Name(id='post_interp', ctx=Load())], keywords=[keyword(arg='options', value=Name(id='options', ctx=Load()))])), Assign(targets=[Name(id='script', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_script_text', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[]), attr='encode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[])), Assign(targets=[Name(id='scriptnames', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_script_filenames', ctx=Load()), args=[Attribute(value=Name(id='entry', ctx=Load()), attr='name', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Name(id='options', ctx=Load()), Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='gui'), Constant(value=False)], keywords=[])]), body=[Assign(targets=[Name(id='ext', ctx=Store())], value=Constant(value='pyw'))], orelse=[Assign(targets=[Name(id='ext', ctx=Store())], value=Constant(value='py'))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_write_script', ctx=Load()), args=[Name(id='scriptnames', ctx=Load()), Name(id='shebang', ctx=Load()), Name(id='script', ctx=Load()), Name(id='filenames', ctx=Load()), Name(id='ext', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_copy_script', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='script'), arg(arg='filenames')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='adjust', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='script', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='source_dir', ctx=Load()), Call(func=Name(id='convert_path', ctx=Load()), args=[Name(id='script', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='outname', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='target_dir', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='basename', ctx=Load()), args=[Name(id='script', ctx=Load())], keywords=[])], keywords=[])), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='force', ctx=Load())), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_fileop', ctx=Load()), attr='newer', ctx=Load()), args=[Name(id='script', ctx=Load()), Name(id='outname', ctx=Load())], keywords=[]))]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='not copying %s (up-to-date)'), Name(id='script', ctx=Load())], keywords=[])), Return()], orelse=[]), Try(body=[Assign(targets=[Name(id='f', ctx=Store())], value=Call(func=Name(id='open', ctx=Load()), args=[Name(id='script', ctx=Load()), Constant(value='rb')], keywords=[]))], handlers=[ExceptHandler(type=Name(id='IOError', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='dry_run', ctx=Load())), body=[Raise()], orelse=[]), Assign(targets=[Name(id='f', ctx=Store())], value=Constant(value=None))])], orelse=[Assign(targets=[Name(id='first_line', ctx=Store())], value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='readline', ctx=Load()), args=[], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='first_line', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='%s is an empty file (skipping)'), Name(id='script', ctx=Load())], keywords=[])), Return()], orelse=[]), Assign(targets=[Name(id='match', ctx=Store())], value=Call(func=Attribute(value=Name(id='FIRST_LINE_RE', ctx=Load()), attr='match', ctx=Load()), args=[Call(func=Attribute(value=Name(id='first_line', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value=b'\r\n'), Constant(value=b'\n')], keywords=[])], keywords=[])), If(test=Name(id='match', ctx=Load()), body=[Assign(targets=[Name(id='adjust', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='post_interp', ctx=Store())], value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value=1)], keywords=[]), Constant(value=b'')]))], orelse=[])], finalbody=[]), If(test=UnaryOp(op=Not(), operand=Name(id='adjust', ctx=Load())), body=[If(test=Name(id='f', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_fileop', ctx=Load()), attr='copy_file', ctx=Load()), args=[Name(id='script', ctx=Load()), Name(id='outname', ctx=Load())], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='set_mode', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_fileop', ctx=Load()), attr='set_executable_mode', ctx=Load()), args=[List(elts=[Name(id='outname', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='filenames', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='outname', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='copying and adjusting %s -> %s'), Name(id='script', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='target_dir', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_fileop', ctx=Load()), attr='dry_run', ctx=Load())), body=[Assign(targets=[Tuple(elts=[Name(id='encoding', ctx=Store()), Name(id='lines', ctx=Store())], ctx=Store())], value=Call(func=Name(id='detect_encoding', ctx=Load()), args=[Attribute(value=Name(id='f', ctx=Load()), attr='readline', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='seek', ctx=Load()), args=[Constant(value=0)], keywords=[])), Assign(targets=[Name(id='shebang', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_shebang', ctx=Load()), args=[Name(id='encoding', ctx=Load()), Name(id='post_interp', ctx=Load())], keywords=[])), If(test=Compare(left=Constant(value=b'pythonw'), ops=[In()], comparators=[Name(id='first_line', ctx=Load())]), body=[Assign(targets=[Name(id='ext', ctx=Store())], value=Constant(value='pyw'))], orelse=[Assign(targets=[Name(id='ext', ctx=Store())], value=Constant(value='py'))]), Assign(targets=[Name(id='n', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='basename', ctx=Load()), args=[Name(id='outname', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_write_script', ctx=Load()), args=[List(elts=[Name(id='n', ctx=Load())], ctx=Load()), Name(id='shebang', ctx=Load()), Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]), Name(id='filenames', ctx=Load()), Name(id='ext', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='f', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))], orelse=[])])], decorator_list=[]), FunctionDef(name='dry_run', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_fileop', ctx=Load()), attr='dry_run', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='dry_run', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_fileop', ctx=Load()), attr='dry_run', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='dry_run', ctx=Load()), attr='setter', ctx=Load())]), If(test=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='os', ctx=Load()), attr='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='nt')]), BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='os', ctx=Load()), attr='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='java')]), Compare(left=Attribute(value=Name(id='os', ctx=Load()), attr='_name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='nt')])])]), body=[FunctionDef(name='_get_launcher', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='kind')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='struct', ctx=Load()), attr='calcsize', ctx=Load()), args=[Constant(value='P')], keywords=[]), ops=[Eq()], comparators=[Constant(value=8)]), body=[Assign(targets=[Name(id='bits', ctx=Store())], value=Constant(value='64'))], orelse=[Assign(targets=[Name(id='bits', ctx=Store())], value=Constant(value='32'))]), Assign(targets=[Name(id='platform_suffix', ctx=Store())], value=IfExp(test=Compare(left=Call(func=Name(id='get_platform', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Constant(value='win-arm64')]), body=Constant(value='-arm'), orelse=Constant(value=''))), Assign(targets=[Name(id='name', ctx=Store())], value=BinOp(left=Constant(value='%s%s%s.exe'), op=Mod(), right=Tuple(elts=[Name(id='kind', ctx=Load()), Name(id='bits', ctx=Load()), Name(id='platform_suffix', ctx=Load())], ctx=Load()))), Assign(targets=[Name(id='distlib_package', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='__name__', ctx=Load()), attr='rsplit', ctx=Load()), args=[Constant(value='.'), Constant(value=1)], keywords=[]), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='resource', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='finder', ctx=Load()), args=[Name(id='distlib_package', ctx=Load())], keywords=[]), attr='find', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='resource', ctx=Load())), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=BinOp(left=Constant(value='Unable to find resource %s in package %s'), op=Mod(), right=Tuple(elts=[Name(id='name', ctx=Load()), Name(id='distlib_package', ctx=Load())], ctx=Load()))), Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Attribute(value=Name(id='resource', ctx=Load()), attr='bytes', ctx=Load()))], decorator_list=[])], orelse=[]), FunctionDef(name='make', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='specification'), arg(arg='options')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='\n        Make a script.\n\n        :param specification: The specification, which is either a valid export\n                              entry specification (to make a script from a\n                              callable) or a filename (to make a script by\n                              copying from a source location).\n        :param options: A dictionary of options controlling script generation.\n        :return: A list of all absolute pathnames written to.\n        ')), Assign(targets=[Name(id='filenames', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='entry', ctx=Store())], value=Call(func=Name(id='get_export_entry', ctx=Load()), args=[Name(id='specification', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='entry', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_copy_script', ctx=Load()), args=[Name(id='specification', ctx=Load()), Name(id='filenames', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_make_script', ctx=Load()), args=[Name(id='entry', ctx=Load()), Name(id='filenames', ctx=Load())], keywords=[keyword(arg='options', value=Name(id='options', ctx=Load()))]))]), Return(value=Name(id='filenames', ctx=Load()))], decorator_list=[]), FunctionDef(name='make_multiple', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='specifications'), arg(arg='options')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='\n        Take a list of specifications and make scripts from them,\n        :param specifications: A list of specifications.\n        :return: A list of all absolute pathnames written to,\n        ')), Assign(targets=[Name(id='filenames', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='specification', ctx=Store()), iter=Name(id='specifications', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='filenames', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='make', ctx=Load()), args=[Name(id='specification', ctx=Load()), Name(id='options', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Return(value=Name(id='filenames', ctx=Load()))], decorator_list=[])], decorator_list=[])], type_ignores=[])