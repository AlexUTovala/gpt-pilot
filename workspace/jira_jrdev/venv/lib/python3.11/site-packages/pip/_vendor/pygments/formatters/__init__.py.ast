Module(body=[Expr(value=Constant(value='\n    pygments.formatters\n    ~~~~~~~~~~~~~~~~~~~\n\n    Pygments formatters.\n\n    :copyright: Copyright 2006-2023 by the Pygments team, see AUTHORS.\n    :license: BSD, see LICENSE for details.\n')), Import(names=[alias(name='re')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='types')]), Import(names=[alias(name='fnmatch')]), ImportFrom(module='os.path', names=[alias(name='basename')], level=0), ImportFrom(module='pip._vendor.pygments.formatters._mapping', names=[alias(name='FORMATTERS')], level=0), ImportFrom(module='pip._vendor.pygments.plugin', names=[alias(name='find_plugin_formatters')], level=0), ImportFrom(module='pip._vendor.pygments.util', names=[alias(name='ClassNotFound')], level=0), Assign(targets=[Name(id='__all__', ctx=Store())], value=BinOp(left=List(elts=[Constant(value='get_formatter_by_name'), Constant(value='get_formatter_for_filename'), Constant(value='get_all_formatters'), Constant(value='load_formatter_from_file')], ctx=Load()), op=Add(), right=Call(func=Name(id='list', ctx=Load()), args=[Name(id='FORMATTERS', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='_formatter_cache', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='_pattern_cache', ctx=Store())], value=Dict(keys=[], values=[])), FunctionDef(name='_fn_matches', args=arguments(posonlyargs=[], args=[arg(arg='fn'), arg(arg='glob')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return whether the supplied file name fn matches pattern filename.')), If(test=Compare(left=Name(id='glob', ctx=Load()), ops=[NotIn()], comparators=[Name(id='_pattern_cache', ctx=Load())]), body=[Assign(targets=[Name(id='pattern', ctx=Store()), Subscript(value=Name(id='_pattern_cache', ctx=Load()), slice=Name(id='glob', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Call(func=Attribute(value=Name(id='fnmatch', ctx=Load()), attr='translate', ctx=Load()), args=[Name(id='glob', ctx=Load())], keywords=[])], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='pattern', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='fn', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Subscript(value=Name(id='_pattern_cache', ctx=Load()), slice=Name(id='glob', ctx=Load()), ctx=Load()), attr='match', ctx=Load()), args=[Name(id='fn', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_load_formatters', args=arguments(posonlyargs=[], args=[arg(arg='module_name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Load a formatter (and all others in the module too).')), Assign(targets=[Name(id='mod', ctx=Store())], value=Call(func=Name(id='__import__', ctx=Load()), args=[Name(id='module_name', ctx=Load()), Constant(value=None), Constant(value=None), List(elts=[Constant(value='__all__')], ctx=Load())], keywords=[])), For(target=Name(id='formatter_name', ctx=Store()), iter=Attribute(value=Name(id='mod', ctx=Load()), attr='__all__', ctx=Load()), body=[Assign(targets=[Name(id='cls', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='mod', ctx=Load()), Name(id='formatter_name', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='_formatter_cache', ctx=Load()), slice=Attribute(value=Name(id='cls', ctx=Load()), attr='name', ctx=Load()), ctx=Store())], value=Name(id='cls', ctx=Load()))], orelse=[])], decorator_list=[]), FunctionDef(name='get_all_formatters', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return a generator for all formatter classes.')), For(target=Name(id='info', ctx=Store()), iter=Call(func=Attribute(value=Name(id='FORMATTERS', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='info', ctx=Load()), slice=Constant(value=1), ctx=Load()), ops=[NotIn()], comparators=[Name(id='_formatter_cache', ctx=Load())]), body=[Expr(value=Call(func=Name(id='_load_formatters', ctx=Load()), args=[Subscript(value=Name(id='info', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Yield(value=Subscript(value=Name(id='_formatter_cache', ctx=Load()), slice=Subscript(value=Name(id='info', ctx=Load()), slice=Constant(value=1), ctx=Load()), ctx=Load())))], orelse=[]), For(target=Tuple(elts=[Name(id='_', ctx=Store()), Name(id='formatter', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='find_plugin_formatters', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Yield(value=Name(id='formatter', ctx=Load())))], orelse=[])], decorator_list=[]), FunctionDef(name='find_formatter_class', args=arguments(posonlyargs=[], args=[arg(arg='alias')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Lookup a formatter by alias.\n\n    Returns None if not found.\n    ')), For(target=Tuple(elts=[Name(id='module_name', ctx=Store()), Name(id='name', ctx=Store()), Name(id='aliases', ctx=Store()), Name(id='_', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='FORMATTERS', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Name(id='alias', ctx=Load()), ops=[In()], comparators=[Name(id='aliases', ctx=Load())]), body=[If(test=Compare(left=Name(id='name', ctx=Load()), ops=[NotIn()], comparators=[Name(id='_formatter_cache', ctx=Load())]), body=[Expr(value=Call(func=Name(id='_load_formatters', ctx=Load()), args=[Name(id='module_name', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Subscript(value=Name(id='_formatter_cache', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), For(target=Tuple(elts=[Name(id='_', ctx=Store()), Name(id='cls', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='find_plugin_formatters', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Name(id='alias', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='cls', ctx=Load()), attr='aliases', ctx=Load())]), body=[Return(value=Name(id='cls', ctx=Load()))], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='get_formatter_by_name', args=arguments(posonlyargs=[], args=[arg(arg='_alias')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='options'), defaults=[]), body=[Expr(value=Constant(value='\n    Return an instance of a :class:`.Formatter` subclass that has `alias` in its\n    aliases list. The formatter is given the `options` at its instantiation.\n\n    Will raise :exc:`pygments.util.ClassNotFound` if no formatter with that\n    alias is found.\n    ')), Assign(targets=[Name(id='cls', ctx=Store())], value=Call(func=Name(id='find_formatter_class', ctx=Load()), args=[Name(id='_alias', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='cls', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ClassNotFound', ctx=Load()), args=[BinOp(left=Constant(value='no formatter found for name %r'), op=Mod(), right=Name(id='_alias', ctx=Load()))], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='cls', ctx=Load()), args=[], keywords=[keyword(value=Name(id='options', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='load_formatter_from_file', args=arguments(posonlyargs=[], args=[arg(arg='filename'), arg(arg='formattername')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='options'), defaults=[Constant(value='CustomFormatter')]), body=[Expr(value=Constant(value='\n    Return a `Formatter` subclass instance loaded from the provided file, relative\n    to the current directory.\n\n    The file is expected to contain a Formatter class named ``formattername``\n    (by default, CustomFormatter). Users should be very careful with the input, because\n    this method is equivalent to running ``eval()`` on the input file. The formatter is\n    given the `options` at its instantiation.\n\n    :exc:`pygments.util.ClassNotFound` is raised if there are any errors loading\n    the formatter.\n\n    .. versionadded:: 2.2\n    ')), Try(body=[Assign(targets=[Name(id='custom_namespace', ctx=Store())], value=Dict(keys=[], values=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='filename', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Name(id='exec', ctx=Load()), args=[Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]), Name(id='custom_namespace', ctx=Load())], keywords=[]))]), If(test=Compare(left=Name(id='formattername', ctx=Load()), ops=[NotIn()], comparators=[Name(id='custom_namespace', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ClassNotFound', ctx=Load()), args=[BinOp(left=Constant(value='no valid %s class found in %s'), op=Mod(), right=Tuple(elts=[Name(id='formattername', ctx=Load()), Name(id='filename', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Name(id='formatter_class', ctx=Store())], value=Subscript(value=Name(id='custom_namespace', ctx=Load()), slice=Name(id='formattername', ctx=Load()), ctx=Load())), Return(value=Call(func=Name(id='formatter_class', ctx=Load()), args=[], keywords=[keyword(value=Name(id='options', ctx=Load()))]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), name='err', body=[Raise(exc=Call(func=Name(id='ClassNotFound', ctx=Load()), args=[BinOp(left=Constant(value='cannot read %s: %s'), op=Mod(), right=Tuple(elts=[Name(id='filename', ctx=Load()), Name(id='err', ctx=Load())], ctx=Load()))], keywords=[]))]), ExceptHandler(type=Name(id='ClassNotFound', ctx=Load()), body=[Raise()]), ExceptHandler(type=Name(id='Exception', ctx=Load()), name='err', body=[Raise(exc=Call(func=Name(id='ClassNotFound', ctx=Load()), args=[BinOp(left=Constant(value='error when loading custom formatter: %s'), op=Mod(), right=Name(id='err', ctx=Load()))], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='get_formatter_for_filename', args=arguments(posonlyargs=[], args=[arg(arg='fn')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='options'), defaults=[]), body=[Expr(value=Constant(value='\n    Return a :class:`.Formatter` subclass instance that has a filename pattern\n    matching `fn`. The formatter is given the `options` at its instantiation.\n\n    Will raise :exc:`pygments.util.ClassNotFound` if no formatter for that filename\n    is found.\n    ')), Assign(targets=[Name(id='fn', ctx=Store())], value=Call(func=Name(id='basename', ctx=Load()), args=[Name(id='fn', ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='modname', ctx=Store()), Name(id='name', ctx=Store()), Name(id='_', ctx=Store()), Name(id='filenames', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='FORMATTERS', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[]), body=[For(target=Name(id='filename', ctx=Store()), iter=Name(id='filenames', ctx=Load()), body=[If(test=Call(func=Name(id='_fn_matches', ctx=Load()), args=[Name(id='fn', ctx=Load()), Name(id='filename', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='name', ctx=Load()), ops=[NotIn()], comparators=[Name(id='_formatter_cache', ctx=Load())]), body=[Expr(value=Call(func=Name(id='_load_formatters', ctx=Load()), args=[Name(id='modname', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Subscript(value=Name(id='_formatter_cache', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load()), args=[], keywords=[keyword(value=Name(id='options', ctx=Load()))]))], orelse=[])], orelse=[])], orelse=[]), For(target=Name(id='cls', ctx=Store()), iter=Call(func=Name(id='find_plugin_formatters', ctx=Load()), args=[], keywords=[]), body=[For(target=Name(id='filename', ctx=Store()), iter=Attribute(value=Name(id='cls', ctx=Load()), attr='filenames', ctx=Load()), body=[If(test=Call(func=Name(id='_fn_matches', ctx=Load()), args=[Name(id='fn', ctx=Load()), Name(id='filename', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Name(id='cls', ctx=Load()), args=[], keywords=[keyword(value=Name(id='options', ctx=Load()))]))], orelse=[])], orelse=[])], orelse=[]), Raise(exc=Call(func=Name(id='ClassNotFound', ctx=Load()), args=[BinOp(left=Constant(value='no formatter found for file name %r'), op=Mod(), right=Name(id='fn', ctx=Load()))], keywords=[]))], decorator_list=[]), ClassDef(name='_automodule', bases=[Attribute(value=Name(id='types', ctx=Load()), attr='ModuleType', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Automatically import formatters.')), FunctionDef(name='__getattr__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='info', ctx=Store())], value=Call(func=Attribute(value=Name(id='FORMATTERS', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), If(test=Name(id='info', ctx=Load()), body=[Expr(value=Call(func=Name(id='_load_formatters', ctx=Load()), args=[Subscript(value=Name(id='info', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])), Assign(targets=[Name(id='cls', ctx=Store())], value=Subscript(value=Name(id='_formatter_cache', ctx=Load()), slice=Subscript(value=Name(id='info', ctx=Load()), slice=Constant(value=1), ctx=Load()), ctx=Load())), Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='name', ctx=Load()), Name(id='cls', ctx=Load())], keywords=[])), Return(value=Name(id='cls', ctx=Load()))], orelse=[]), Raise(exc=Call(func=Name(id='AttributeError', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), Assign(targets=[Name(id='oldmod', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='modules', ctx=Load()), slice=Name(id='__name__', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='newmod', ctx=Store())], value=Call(func=Name(id='_automodule', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='newmod', ctx=Load()), attr='__dict__', ctx=Load()), attr='update', ctx=Load()), args=[Attribute(value=Name(id='oldmod', ctx=Load()), attr='__dict__', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='modules', ctx=Load()), slice=Name(id='__name__', ctx=Load()), ctx=Store())], value=Name(id='newmod', ctx=Load())), Delete(targets=[Attribute(value=Name(id='newmod', ctx=Load()), attr='newmod', ctx=Del()), Attribute(value=Name(id='newmod', ctx=Load()), attr='oldmod', ctx=Del()), Attribute(value=Name(id='newmod', ctx=Load()), attr='sys', ctx=Del()), Attribute(value=Name(id='newmod', ctx=Load()), attr='types', ctx=Del())])], type_ignores=[])