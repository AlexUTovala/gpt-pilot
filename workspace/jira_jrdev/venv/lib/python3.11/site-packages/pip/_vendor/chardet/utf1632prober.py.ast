Module(body=[ImportFrom(module='typing', names=[alias(name='List'), alias(name='Union')], level=0), ImportFrom(module='charsetprober', names=[alias(name='CharSetProber')], level=1), ImportFrom(module='enums', names=[alias(name='ProbingState')], level=1), ClassDef(name='UTF1632Prober', bases=[Name(id='CharSetProber', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    This class simply looks for occurrences of zero bytes, and infers\n    whether the file is UTF16 or UTF32 (low-endian or big-endian)\n    For instance, files looking like ( \x00 \x00 \x00 [nonzero] )+\n    have a good probability to be UTF32BE.  Files looking like ( \x00 [nonzero] )+\n    may be guessed to be UTF16BE, and inversely for little-endian varieties.\n    ')), Assign(targets=[Name(id='MIN_CHARS_FOR_DETECTION', ctx=Store())], value=Constant(value=20)), Assign(targets=[Name(id='EXPECTED_RATIO', ctx=Store())], value=Constant(value=0.94)), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='position', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='zeros_at_mod', ctx=Store())], value=BinOp(left=List(elts=[Constant(value=0)], ctx=Load()), op=Mult(), right=Constant(value=4))), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='nonzeros_at_mod', ctx=Store())], value=BinOp(left=List(elts=[Constant(value=0)], ctx=Load()), op=Mult(), right=Constant(value=4))), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_state', ctx=Store())], value=Attribute(value=Name(id='ProbingState', ctx=Load()), attr='DETECTING', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='quad', ctx=Store())], value=List(elts=[Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0)], ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='invalid_utf16be', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='invalid_utf16le', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='invalid_utf32be', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='invalid_utf32le', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='first_half_surrogate_pair_detected_16be', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='first_half_surrogate_pair_detected_16le', ctx=Store())], value=Constant(value=False)), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='reset', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='reset', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='reset', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='position', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='zeros_at_mod', ctx=Store())], value=BinOp(left=List(elts=[Constant(value=0)], ctx=Load()), op=Mult(), right=Constant(value=4))), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='nonzeros_at_mod', ctx=Store())], value=BinOp(left=List(elts=[Constant(value=0)], ctx=Load()), op=Mult(), right=Constant(value=4))), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_state', ctx=Store())], value=Attribute(value=Name(id='ProbingState', ctx=Load()), attr='DETECTING', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='invalid_utf16be', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='invalid_utf16le', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='invalid_utf32be', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='invalid_utf32le', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='first_half_surrogate_pair_detected_16be', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='first_half_surrogate_pair_detected_16le', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='quad', ctx=Store())], value=List(elts=[Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0)], ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='charset_name', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='is_likely_utf32be', ctx=Load()), args=[], keywords=[]), body=[Return(value=Constant(value='utf-32be'))], orelse=[]), If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='is_likely_utf32le', ctx=Load()), args=[], keywords=[]), body=[Return(value=Constant(value='utf-32le'))], orelse=[]), If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='is_likely_utf16be', ctx=Load()), args=[], keywords=[]), body=[Return(value=Constant(value='utf-16be'))], orelse=[]), If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='is_likely_utf16le', ctx=Load()), args=[], keywords=[]), body=[Return(value=Constant(value='utf-16le'))], orelse=[]), Return(value=Constant(value='utf-16'))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='language', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=''))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='approx_32bit_chars', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='max', ctx=Load()), args=[Constant(value=1.0), BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='position', ctx=Load()), op=Div(), right=Constant(value=4.0))], keywords=[]))], decorator_list=[], returns=Name(id='float', ctx=Load())), FunctionDef(name='approx_16bit_chars', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='max', ctx=Load()), args=[Constant(value=1.0), BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='position', ctx=Load()), op=Div(), right=Constant(value=2.0))], keywords=[]))], decorator_list=[], returns=Name(id='float', ctx=Load())), FunctionDef(name='is_likely_utf32be', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='approx_chars', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='approx_32bit_chars', ctx=Load()), args=[], keywords=[])), Return(value=BoolOp(op=And(), values=[Compare(left=Name(id='approx_chars', ctx=Load()), ops=[GtE()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='MIN_CHARS_FOR_DETECTION', ctx=Load())]), BoolOp(op=And(), values=[Compare(left=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='zeros_at_mod', ctx=Load()), slice=Constant(value=0), ctx=Load()), op=Div(), right=Name(id='approx_chars', ctx=Load())), ops=[Gt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='EXPECTED_RATIO', ctx=Load())]), Compare(left=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='zeros_at_mod', ctx=Load()), slice=Constant(value=1), ctx=Load()), op=Div(), right=Name(id='approx_chars', ctx=Load())), ops=[Gt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='EXPECTED_RATIO', ctx=Load())]), Compare(left=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='zeros_at_mod', ctx=Load()), slice=Constant(value=2), ctx=Load()), op=Div(), right=Name(id='approx_chars', ctx=Load())), ops=[Gt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='EXPECTED_RATIO', ctx=Load())]), Compare(left=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nonzeros_at_mod', ctx=Load()), slice=Constant(value=3), ctx=Load()), op=Div(), right=Name(id='approx_chars', ctx=Load())), ops=[Gt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='EXPECTED_RATIO', ctx=Load())]), UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='invalid_utf32be', ctx=Load()))])]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='is_likely_utf32le', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='approx_chars', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='approx_32bit_chars', ctx=Load()), args=[], keywords=[])), Return(value=BoolOp(op=And(), values=[Compare(left=Name(id='approx_chars', ctx=Load()), ops=[GtE()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='MIN_CHARS_FOR_DETECTION', ctx=Load())]), BoolOp(op=And(), values=[Compare(left=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nonzeros_at_mod', ctx=Load()), slice=Constant(value=0), ctx=Load()), op=Div(), right=Name(id='approx_chars', ctx=Load())), ops=[Gt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='EXPECTED_RATIO', ctx=Load())]), Compare(left=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='zeros_at_mod', ctx=Load()), slice=Constant(value=1), ctx=Load()), op=Div(), right=Name(id='approx_chars', ctx=Load())), ops=[Gt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='EXPECTED_RATIO', ctx=Load())]), Compare(left=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='zeros_at_mod', ctx=Load()), slice=Constant(value=2), ctx=Load()), op=Div(), right=Name(id='approx_chars', ctx=Load())), ops=[Gt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='EXPECTED_RATIO', ctx=Load())]), Compare(left=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='zeros_at_mod', ctx=Load()), slice=Constant(value=3), ctx=Load()), op=Div(), right=Name(id='approx_chars', ctx=Load())), ops=[Gt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='EXPECTED_RATIO', ctx=Load())]), UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='invalid_utf32le', ctx=Load()))])]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='is_likely_utf16be', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='approx_chars', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='approx_16bit_chars', ctx=Load()), args=[], keywords=[])), Return(value=BoolOp(op=And(), values=[Compare(left=Name(id='approx_chars', ctx=Load()), ops=[GtE()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='MIN_CHARS_FOR_DETECTION', ctx=Load())]), BoolOp(op=And(), values=[Compare(left=BinOp(left=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nonzeros_at_mod', ctx=Load()), slice=Constant(value=1), ctx=Load()), op=Add(), right=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nonzeros_at_mod', ctx=Load()), slice=Constant(value=3), ctx=Load())), op=Div(), right=Name(id='approx_chars', ctx=Load())), ops=[Gt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='EXPECTED_RATIO', ctx=Load())]), Compare(left=BinOp(left=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='zeros_at_mod', ctx=Load()), slice=Constant(value=0), ctx=Load()), op=Add(), right=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='zeros_at_mod', ctx=Load()), slice=Constant(value=2), ctx=Load())), op=Div(), right=Name(id='approx_chars', ctx=Load())), ops=[Gt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='EXPECTED_RATIO', ctx=Load())]), UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='invalid_utf16be', ctx=Load()))])]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='is_likely_utf16le', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='approx_chars', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='approx_16bit_chars', ctx=Load()), args=[], keywords=[])), Return(value=BoolOp(op=And(), values=[Compare(left=Name(id='approx_chars', ctx=Load()), ops=[GtE()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='MIN_CHARS_FOR_DETECTION', ctx=Load())]), BoolOp(op=And(), values=[Compare(left=BinOp(left=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nonzeros_at_mod', ctx=Load()), slice=Constant(value=0), ctx=Load()), op=Add(), right=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nonzeros_at_mod', ctx=Load()), slice=Constant(value=2), ctx=Load())), op=Div(), right=Name(id='approx_chars', ctx=Load())), ops=[Gt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='EXPECTED_RATIO', ctx=Load())]), Compare(left=BinOp(left=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='zeros_at_mod', ctx=Load()), slice=Constant(value=1), ctx=Load()), op=Add(), right=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='zeros_at_mod', ctx=Load()), slice=Constant(value=3), ctx=Load())), op=Div(), right=Name(id='approx_chars', ctx=Load())), ops=[Gt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='EXPECTED_RATIO', ctx=Load())]), UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='invalid_utf16le', ctx=Load()))])]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='validate_utf32_characters', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='quad', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Validate if the quad of bytes is valid UTF-32.\n\n        UTF-32 is valid in the range 0x00000000 - 0x0010FFFF\n        excluding 0x0000D800 - 0x0000DFFF\n\n        https://en.wikipedia.org/wiki/UTF-32\n        ')), If(test=BoolOp(op=Or(), values=[Compare(left=Subscript(value=Name(id='quad', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[NotEq()], comparators=[Constant(value=0)]), Compare(left=Subscript(value=Name(id='quad', ctx=Load()), slice=Constant(value=1), ctx=Load()), ops=[Gt()], comparators=[Constant(value=16)]), BoolOp(op=And(), values=[Compare(left=Subscript(value=Name(id='quad', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Subscript(value=Name(id='quad', ctx=Load()), slice=Constant(value=1), ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Constant(value=216), ops=[LtE(), LtE()], comparators=[Subscript(value=Name(id='quad', ctx=Load()), slice=Constant(value=2), ctx=Load()), Constant(value=223)])])]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='invalid_utf32be', ctx=Store())], value=Constant(value=True))], orelse=[]), If(test=BoolOp(op=Or(), values=[Compare(left=Subscript(value=Name(id='quad', ctx=Load()), slice=Constant(value=3), ctx=Load()), ops=[NotEq()], comparators=[Constant(value=0)]), Compare(left=Subscript(value=Name(id='quad', ctx=Load()), slice=Constant(value=2), ctx=Load()), ops=[Gt()], comparators=[Constant(value=16)]), BoolOp(op=And(), values=[Compare(left=Subscript(value=Name(id='quad', ctx=Load()), slice=Constant(value=3), ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Subscript(value=Name(id='quad', ctx=Load()), slice=Constant(value=2), ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Constant(value=216), ops=[LtE(), LtE()], comparators=[Subscript(value=Name(id='quad', ctx=Load()), slice=Constant(value=1), ctx=Load()), Constant(value=223)])])]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='invalid_utf32le', ctx=Store())], value=Constant(value=True))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='validate_utf16_characters', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='pair', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Validate if the pair of bytes is  valid UTF-16.\n\n        UTF-16 is valid in the range 0x0000 - 0xFFFF excluding 0xD800 - 0xFFFF\n        with an exception for surrogate pairs, which must be in the range\n        0xD800-0xDBFF followed by 0xDC00-0xDFFF\n\n        https://en.wikipedia.org/wiki/UTF-16\n        ')), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='first_half_surrogate_pair_detected_16be', ctx=Load())), body=[If(test=Compare(left=Constant(value=216), ops=[LtE(), LtE()], comparators=[Subscript(value=Name(id='pair', ctx=Load()), slice=Constant(value=0), ctx=Load()), Constant(value=219)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='first_half_surrogate_pair_detected_16be', ctx=Store())], value=Constant(value=True))], orelse=[If(test=Compare(left=Constant(value=220), ops=[LtE(), LtE()], comparators=[Subscript(value=Name(id='pair', ctx=Load()), slice=Constant(value=0), ctx=Load()), Constant(value=223)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='invalid_utf16be', ctx=Store())], value=Constant(value=True))], orelse=[])])], orelse=[If(test=Compare(left=Constant(value=220), ops=[LtE(), LtE()], comparators=[Subscript(value=Name(id='pair', ctx=Load()), slice=Constant(value=0), ctx=Load()), Constant(value=223)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='first_half_surrogate_pair_detected_16be', ctx=Store())], value=Constant(value=False))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='invalid_utf16be', ctx=Store())], value=Constant(value=True))])]), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='first_half_surrogate_pair_detected_16le', ctx=Load())), body=[If(test=Compare(left=Constant(value=216), ops=[LtE(), LtE()], comparators=[Subscript(value=Name(id='pair', ctx=Load()), slice=Constant(value=1), ctx=Load()), Constant(value=219)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='first_half_surrogate_pair_detected_16le', ctx=Store())], value=Constant(value=True))], orelse=[If(test=Compare(left=Constant(value=220), ops=[LtE(), LtE()], comparators=[Subscript(value=Name(id='pair', ctx=Load()), slice=Constant(value=1), ctx=Load()), Constant(value=223)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='invalid_utf16le', ctx=Store())], value=Constant(value=True))], orelse=[])])], orelse=[If(test=Compare(left=Constant(value=220), ops=[LtE(), LtE()], comparators=[Subscript(value=Name(id='pair', ctx=Load()), slice=Constant(value=1), ctx=Load()), Constant(value=223)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='first_half_surrogate_pair_detected_16le', ctx=Store())], value=Constant(value=False))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='invalid_utf16le', ctx=Store())], value=Constant(value=True))])])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='feed', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='byte_str', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='bytes', ctx=Load()), Name(id='bytearray', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='c', ctx=Store()), iter=Name(id='byte_str', ctx=Load()), body=[Assign(targets=[Name(id='mod4', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='position', ctx=Load()), op=Mod(), right=Constant(value=4))), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='quad', ctx=Load()), slice=Name(id='mod4', ctx=Load()), ctx=Store())], value=Name(id='c', ctx=Load())), If(test=Compare(left=Name(id='mod4', ctx=Load()), ops=[Eq()], comparators=[Constant(value=3)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='validate_utf32_characters', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='quad', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='validate_utf16_characters', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='quad', ctx=Load()), slice=Slice(lower=Constant(value=0), upper=Constant(value=2)), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='validate_utf16_characters', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='quad', ctx=Load()), slice=Slice(lower=Constant(value=2), upper=Constant(value=4)), ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='c', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[AugAssign(target=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='zeros_at_mod', ctx=Load()), slice=Name(id='mod4', ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[AugAssign(target=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='nonzeros_at_mod', ctx=Load()), slice=Name(id='mod4', ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1))]), AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='position', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='state', ctx=Load()))], decorator_list=[], returns=Name(id='ProbingState', ctx=Load())), FunctionDef(name='state', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_state', ctx=Load()), ops=[In()], comparators=[Set(elts=[Attribute(value=Name(id='ProbingState', ctx=Load()), attr='NOT_ME', ctx=Load()), Attribute(value=Name(id='ProbingState', ctx=Load()), attr='FOUND_IT', ctx=Load())])]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_state', ctx=Load()))], orelse=[]), If(test=Compare(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_confidence', ctx=Load()), args=[], keywords=[]), ops=[Gt()], comparators=[Constant(value=0.8)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_state', ctx=Store())], value=Attribute(value=Name(id='ProbingState', ctx=Load()), attr='FOUND_IT', ctx=Load()))], orelse=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='position', ctx=Load()), ops=[Gt()], comparators=[BinOp(left=Constant(value=4), op=Mult(), right=Constant(value=1024))]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_state', ctx=Store())], value=Attribute(value=Name(id='ProbingState', ctx=Load()), attr='NOT_ME', ctx=Load()))], orelse=[])]), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_state', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='ProbingState', ctx=Load())), FunctionDef(name='get_confidence', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=IfExp(test=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='is_likely_utf16le', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='is_likely_utf16be', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='is_likely_utf32le', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='is_likely_utf32be', ctx=Load()), args=[], keywords=[])]), body=Constant(value=0.85), orelse=Constant(value=0.0)))], decorator_list=[], returns=Name(id='float', ctx=Load()))], decorator_list=[])], type_ignores=[])