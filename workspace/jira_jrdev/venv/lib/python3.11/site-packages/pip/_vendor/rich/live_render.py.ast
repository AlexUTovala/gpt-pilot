Module(body=[Import(names=[alias(name='sys')]), ImportFrom(module='typing', names=[alias(name='Optional'), alias(name='Tuple')], level=0), If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), ops=[GtE()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=8)], ctx=Load())]), body=[ImportFrom(module='typing', names=[alias(name='Literal')], level=0)], orelse=[ImportFrom(module='pip._vendor.typing_extensions', names=[alias(name='Literal')], level=0)]), ImportFrom(module='_loop', names=[alias(name='loop_last')], level=1), ImportFrom(module='console', names=[alias(name='Console'), alias(name='ConsoleOptions'), alias(name='RenderableType'), alias(name='RenderResult')], level=1), ImportFrom(module='control', names=[alias(name='Control')], level=1), ImportFrom(module='segment', names=[alias(name='ControlType'), alias(name='Segment')], level=1), ImportFrom(module='style', names=[alias(name='StyleType')], level=1), ImportFrom(module='text', names=[alias(name='Text')], level=1), Assign(targets=[Name(id='VerticalOverflowMethod', ctx=Store())], value=Subscript(value=Name(id='Literal', ctx=Load()), slice=Tuple(elts=[Constant(value='crop'), Constant(value='ellipsis'), Constant(value='visible')], ctx=Load()), ctx=Load())), ClassDef(name='LiveRender', bases=[], keywords=[], body=[Expr(value=Constant(value='Creates a renderable that may be updated.\n\n    Args:\n        renderable (RenderableType): Any renderable object.\n        style (StyleType, optional): An optional style to apply to the renderable. Defaults to "".\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='renderable', annotation=Name(id='RenderableType', ctx=Load())), arg(arg='style', annotation=Name(id='StyleType', ctx=Load())), arg(arg='vertical_overflow', annotation=Name(id='VerticalOverflowMethod', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=''), Constant(value='ellipsis')]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='renderable', ctx=Store())], value=Name(id='renderable', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Store())], value=Name(id='style', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='vertical_overflow', ctx=Store())], value=Name(id='vertical_overflow', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_shape', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0)], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='set_renderable', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='renderable', annotation=Name(id='RenderableType', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Set a new renderable.\n\n        Args:\n            renderable (RenderableType): Any renderable object, including str.\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='renderable', ctx=Store())], value=Name(id='renderable', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='position_cursor', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get control codes to move cursor to beginning of live render.\n\n        Returns:\n            Control: A control instance that may be printed.\n        ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_shape', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='height', ctx=Store())], ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_shape', ctx=Load())), Return(value=Call(func=Name(id='Control', ctx=Load()), args=[Attribute(value=Name(id='ControlType', ctx=Load()), attr='CARRIAGE_RETURN', ctx=Load()), Tuple(elts=[Attribute(value=Name(id='ControlType', ctx=Load()), attr='ERASE_IN_LINE', ctx=Load()), Constant(value=2)], ctx=Load()), Starred(value=BinOp(left=Tuple(elts=[Tuple(elts=[Attribute(value=Name(id='ControlType', ctx=Load()), attr='CURSOR_UP', ctx=Load()), Constant(value=1)], ctx=Load()), Tuple(elts=[Attribute(value=Name(id='ControlType', ctx=Load()), attr='ERASE_IN_LINE', ctx=Load()), Constant(value=2)], ctx=Load())], ctx=Load()), op=Mult(), right=BinOp(left=Name(id='height', ctx=Load()), op=Sub(), right=Constant(value=1))), ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='Control', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='Control', ctx=Load())), FunctionDef(name='restore_cursor', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get control codes to clear the render and restore the cursor to its previous position.\n\n        Returns:\n            Control: A Control instance that may be printed.\n        ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_shape', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='height', ctx=Store())], ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_shape', ctx=Load())), Return(value=Call(func=Name(id='Control', ctx=Load()), args=[Attribute(value=Name(id='ControlType', ctx=Load()), attr='CARRIAGE_RETURN', ctx=Load()), Starred(value=BinOp(left=Tuple(elts=[Tuple(elts=[Attribute(value=Name(id='ControlType', ctx=Load()), attr='CURSOR_UP', ctx=Load()), Constant(value=1)], ctx=Load()), Tuple(elts=[Attribute(value=Name(id='ControlType', ctx=Load()), attr='ERASE_IN_LINE', ctx=Load()), Constant(value=2)], ctx=Load())], ctx=Load()), op=Mult(), right=Name(id='height', ctx=Load())), ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='Control', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='Control', ctx=Load())), FunctionDef(name='__rich_console__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='console', annotation=Name(id='Console', ctx=Load())), arg(arg='options', annotation=Name(id='ConsoleOptions', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='renderable', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='renderable', ctx=Load())), Assign(targets=[Name(id='style', ctx=Store())], value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='get_style', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load())], keywords=[])), Assign(targets=[Name(id='lines', ctx=Store())], value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='render_lines', ctx=Load()), args=[Name(id='renderable', ctx=Load()), Name(id='options', ctx=Load())], keywords=[keyword(arg='style', value=Name(id='style', ctx=Load())), keyword(arg='pad', value=Constant(value=False))])), Assign(targets=[Name(id='shape', ctx=Store())], value=Call(func=Attribute(value=Name(id='Segment', ctx=Load()), attr='get_shape', ctx=Load()), args=[Name(id='lines', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='height', ctx=Store())], ctx=Store())], value=Name(id='shape', ctx=Load())), If(test=Compare(left=Name(id='height', ctx=Load()), ops=[Gt()], comparators=[Attribute(value=Attribute(value=Name(id='options', ctx=Load()), attr='size', ctx=Load()), attr='height', ctx=Load())]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='vertical_overflow', ctx=Load()), ops=[Eq()], comparators=[Constant(value='crop')]), body=[Assign(targets=[Name(id='lines', ctx=Store())], value=Subscript(value=Name(id='lines', ctx=Load()), slice=Slice(upper=Attribute(value=Attribute(value=Name(id='options', ctx=Load()), attr='size', ctx=Load()), attr='height', ctx=Load())), ctx=Load())), Assign(targets=[Name(id='shape', ctx=Store())], value=Call(func=Attribute(value=Name(id='Segment', ctx=Load()), attr='get_shape', ctx=Load()), args=[Name(id='lines', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='vertical_overflow', ctx=Load()), ops=[Eq()], comparators=[Constant(value='ellipsis')]), body=[Assign(targets=[Name(id='lines', ctx=Store())], value=Subscript(value=Name(id='lines', ctx=Load()), slice=Slice(upper=BinOp(left=Attribute(value=Attribute(value=Name(id='options', ctx=Load()), attr='size', ctx=Load()), attr='height', ctx=Load()), op=Sub(), right=Constant(value=1))), ctx=Load())), Assign(targets=[Name(id='overflow_text', ctx=Store())], value=Call(func=Name(id='Text', ctx=Load()), args=[Constant(value='...')], keywords=[keyword(arg='overflow', value=Constant(value='crop')), keyword(arg='justify', value=Constant(value='center')), keyword(arg='end', value=Constant(value='')), keyword(arg='style', value=Constant(value='live.ellipsis'))])), Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='render', ctx=Load()), args=[Name(id='overflow_text', ctx=Load())], keywords=[])], keywords=[])], keywords=[])), Assign(targets=[Name(id='shape', ctx=Store())], value=Call(func=Attribute(value=Name(id='Segment', ctx=Load()), attr='get_shape', ctx=Load()), args=[Name(id='lines', ctx=Load())], keywords=[]))], orelse=[])])], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_shape', ctx=Store())], value=Name(id='shape', ctx=Load())), Assign(targets=[Name(id='new_line', ctx=Store())], value=Call(func=Attribute(value=Name(id='Segment', ctx=Load()), attr='line', ctx=Load()), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='last', ctx=Store()), Name(id='line', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='loop_last', ctx=Load()), args=[Name(id='lines', ctx=Load())], keywords=[]), body=[Expr(value=YieldFrom(value=Name(id='line', ctx=Load()))), If(test=UnaryOp(op=Not(), operand=Name(id='last', ctx=Load())), body=[Expr(value=Yield(value=Name(id='new_line', ctx=Load())))], orelse=[])], orelse=[])], decorator_list=[], returns=Name(id='RenderResult', ctx=Load()))], decorator_list=[])], type_ignores=[])