Module(body=[ImportFrom(module='math', names=[alias(name='sqrt')], level=0), ImportFrom(module='functools', names=[alias(name='lru_cache')], level=0), ImportFrom(module='typing', names=[alias(name='Sequence'), alias(name='Tuple'), alias(name='TYPE_CHECKING')], level=0), ImportFrom(module='color_triplet', names=[alias(name='ColorTriplet')], level=1), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='pip._vendor.rich.table', names=[alias(name='Table')], level=0)], orelse=[]), ClassDef(name='Palette', bases=[], keywords=[], body=[Expr(value=Constant(value='A palette of available colors.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='colors', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_colors', ctx=Store())], value=Name(id='colors', ctx=Load()))], decorator_list=[]), FunctionDef(name='__getitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='number', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='ColorTriplet', ctx=Load()), args=[Starred(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_colors', ctx=Load()), slice=Name(id='number', ctx=Load()), ctx=Load()), ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='ColorTriplet', ctx=Load())), FunctionDef(name='__rich__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[ImportFrom(module='pip._vendor.rich.color', names=[alias(name='Color')], level=0), ImportFrom(module='pip._vendor.rich.style', names=[alias(name='Style')], level=0), ImportFrom(module='pip._vendor.rich.text', names=[alias(name='Text')], level=0), ImportFrom(module='pip._vendor.rich.table', names=[alias(name='Table')], level=0), Assign(targets=[Name(id='table', ctx=Store())], value=Call(func=Name(id='Table', ctx=Load()), args=[Constant(value='index'), Constant(value='RGB'), Constant(value='Color')], keywords=[keyword(arg='title', value=Constant(value='Palette')), keyword(arg='caption', value=JoinedStr(values=[FormattedValue(value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_colors', ctx=Load())], keywords=[]), conversion=-1), Constant(value=' colors')])), keyword(arg='highlight', value=Constant(value=True)), keyword(arg='caption_justify', value=Constant(value='right'))])), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='color', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_colors', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='table', ctx=Load()), attr='add_row', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='index', ctx=Load())], keywords=[]), Call(func=Name(id='repr', ctx=Load()), args=[Name(id='color', ctx=Load())], keywords=[]), Call(func=Name(id='Text', ctx=Load()), args=[BinOp(left=Constant(value=' '), op=Mult(), right=Constant(value=16))], keywords=[keyword(arg='style', value=Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='bgcolor', value=Call(func=Attribute(value=Name(id='Color', ctx=Load()), attr='from_rgb', ctx=Load()), args=[Starred(value=Name(id='color', ctx=Load()), ctx=Load())], keywords=[]))]))])], keywords=[]))], orelse=[]), Return(value=Name(id='table', ctx=Load()))], decorator_list=[], returns=Constant(value='Table')), FunctionDef(name='match', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='color', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Find a color from a palette that most closely matches a given color.\n\n        Args:\n            color (Tuple[int, int, int]): RGB components in range 0 > 255.\n\n        Returns:\n            int: Index of closes matching color.\n        ')), Assign(targets=[Tuple(elts=[Name(id='red1', ctx=Store()), Name(id='green1', ctx=Store()), Name(id='blue1', ctx=Store())], ctx=Store())], value=Name(id='color', ctx=Load())), Assign(targets=[Name(id='_sqrt', ctx=Store())], value=Name(id='sqrt', ctx=Load())), Assign(targets=[Name(id='get_color', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_colors', ctx=Load()), attr='__getitem__', ctx=Load())), FunctionDef(name='get_color_distance', args=arguments(posonlyargs=[], args=[arg(arg='index', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get the distance to a color.')), Assign(targets=[Tuple(elts=[Name(id='red2', ctx=Store()), Name(id='green2', ctx=Store()), Name(id='blue2', ctx=Store())], ctx=Store())], value=Call(func=Name(id='get_color', ctx=Load()), args=[Name(id='index', ctx=Load())], keywords=[])), Assign(targets=[Name(id='red_mean', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='red1', ctx=Load()), op=Add(), right=Name(id='red2', ctx=Load())), op=FloorDiv(), right=Constant(value=2))), Assign(targets=[Name(id='red', ctx=Store())], value=BinOp(left=Name(id='red1', ctx=Load()), op=Sub(), right=Name(id='red2', ctx=Load()))), Assign(targets=[Name(id='green', ctx=Store())], value=BinOp(left=Name(id='green1', ctx=Load()), op=Sub(), right=Name(id='green2', ctx=Load()))), Assign(targets=[Name(id='blue', ctx=Store())], value=BinOp(left=Name(id='blue1', ctx=Load()), op=Sub(), right=Name(id='blue2', ctx=Load()))), Return(value=Call(func=Name(id='_sqrt', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Constant(value=512), op=Add(), right=Name(id='red_mean', ctx=Load())), op=Mult(), right=Name(id='red', ctx=Load())), op=Mult(), right=Name(id='red', ctx=Load())), op=RShift(), right=Constant(value=8)), op=Add(), right=BinOp(left=BinOp(left=Constant(value=4), op=Mult(), right=Name(id='green', ctx=Load())), op=Mult(), right=Name(id='green', ctx=Load()))), op=Add(), right=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Constant(value=767), op=Sub(), right=Name(id='red_mean', ctx=Load())), op=Mult(), right=Name(id='blue', ctx=Load())), op=Mult(), right=Name(id='blue', ctx=Load())), op=RShift(), right=Constant(value=8)))], keywords=[]))], decorator_list=[], returns=Name(id='float', ctx=Load())), Assign(targets=[Name(id='min_index', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_colors', ctx=Load())], keywords=[])], keywords=[])], keywords=[keyword(arg='key', value=Name(id='get_color_distance', ctx=Load()))])), Return(value=Name(id='min_index', ctx=Load()))], decorator_list=[Call(func=Name(id='lru_cache', ctx=Load()), args=[], keywords=[keyword(arg='maxsize', value=Constant(value=1024))])], returns=Name(id='int', ctx=Load()))], decorator_list=[]), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__')]), body=[Import(names=[alias(name='colorsys')]), ImportFrom(module='typing', names=[alias(name='Iterable')], level=0), ImportFrom(module='pip._vendor.rich.color', names=[alias(name='Color')], level=0), ImportFrom(module='pip._vendor.rich.console', names=[alias(name='Console'), alias(name='ConsoleOptions')], level=0), ImportFrom(module='pip._vendor.rich.segment', names=[alias(name='Segment')], level=0), ImportFrom(module='pip._vendor.rich.style', names=[alias(name='Style')], level=0), ClassDef(name='ColorBox', bases=[], keywords=[], body=[FunctionDef(name='__rich_console__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='console', annotation=Name(id='Console', ctx=Load())), arg(arg='options', annotation=Name(id='ConsoleOptions', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='height', ctx=Store())], value=BinOp(left=Attribute(value=Attribute(value=Name(id='console', ctx=Load()), attr='size', ctx=Load()), attr='height', ctx=Load()), op=Sub(), right=Constant(value=3))), For(target=Name(id='y', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Name(id='height', ctx=Load())], keywords=[]), body=[For(target=Name(id='x', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='options', ctx=Load()), attr='max_width', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='h', ctx=Store())], value=BinOp(left=Name(id='x', ctx=Load()), op=Div(), right=Attribute(value=Name(id='options', ctx=Load()), attr='max_width', ctx=Load()))), Assign(targets=[Name(id='l', ctx=Store())], value=BinOp(left=Name(id='y', ctx=Load()), op=Div(), right=BinOp(left=Name(id='height', ctx=Load()), op=Add(), right=Constant(value=1)))), Assign(targets=[Tuple(elts=[Name(id='r1', ctx=Store()), Name(id='g1', ctx=Store()), Name(id='b1', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='colorsys', ctx=Load()), attr='hls_to_rgb', ctx=Load()), args=[Name(id='h', ctx=Load()), Name(id='l', ctx=Load()), Constant(value=1.0)], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='r2', ctx=Store()), Name(id='g2', ctx=Store()), Name(id='b2', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='colorsys', ctx=Load()), attr='hls_to_rgb', ctx=Load()), args=[Name(id='h', ctx=Load()), BinOp(left=Name(id='l', ctx=Load()), op=Add(), right=BinOp(left=BinOp(left=Constant(value=1), op=Div(), right=Name(id='height', ctx=Load())), op=Div(), right=Constant(value=2))), Constant(value=1.0)], keywords=[])), Assign(targets=[Name(id='bgcolor', ctx=Store())], value=Call(func=Attribute(value=Name(id='Color', ctx=Load()), attr='from_rgb', ctx=Load()), args=[BinOp(left=Name(id='r1', ctx=Load()), op=Mult(), right=Constant(value=255)), BinOp(left=Name(id='g1', ctx=Load()), op=Mult(), right=Constant(value=255)), BinOp(left=Name(id='b1', ctx=Load()), op=Mult(), right=Constant(value=255))], keywords=[])), Assign(targets=[Name(id='color', ctx=Store())], value=Call(func=Attribute(value=Name(id='Color', ctx=Load()), attr='from_rgb', ctx=Load()), args=[BinOp(left=Name(id='r2', ctx=Load()), op=Mult(), right=Constant(value=255)), BinOp(left=Name(id='g2', ctx=Load()), op=Mult(), right=Constant(value=255)), BinOp(left=Name(id='b2', ctx=Load()), op=Mult(), right=Constant(value=255))], keywords=[])), Expr(value=Yield(value=Call(func=Name(id='Segment', ctx=Load()), args=[Constant(value='▄'), Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='color', value=Name(id='color', ctx=Load())), keyword(arg='bgcolor', value=Name(id='bgcolor', ctx=Load()))])], keywords=[])))], orelse=[]), Expr(value=Yield(value=Call(func=Attribute(value=Name(id='Segment', ctx=Load()), attr='line', ctx=Load()), args=[], keywords=[])))], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='Segment', ctx=Load()), ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='console', ctx=Store())], value=Call(func=Name(id='Console', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='print', ctx=Load()), args=[Call(func=Name(id='ColorBox', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[])], type_ignores=[])