Module(body=[Expr(value=Constant(value='\n    pygments.lexers\n    ~~~~~~~~~~~~~~~\n\n    Pygments lexers.\n\n    :copyright: Copyright 2006-2023 by the Pygments team, see AUTHORS.\n    :license: BSD, see LICENSE for details.\n')), Import(names=[alias(name='re')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='types')]), Import(names=[alias(name='fnmatch')]), ImportFrom(module='os.path', names=[alias(name='basename')], level=0), ImportFrom(module='pip._vendor.pygments.lexers._mapping', names=[alias(name='LEXERS')], level=0), ImportFrom(module='pip._vendor.pygments.modeline', names=[alias(name='get_filetype_from_buffer')], level=0), ImportFrom(module='pip._vendor.pygments.plugin', names=[alias(name='find_plugin_lexers')], level=0), ImportFrom(module='pip._vendor.pygments.util', names=[alias(name='ClassNotFound'), alias(name='guess_decode')], level=0), Assign(targets=[Name(id='COMPAT', ctx=Store())], value=Dict(keys=[Constant(value='Python3Lexer'), Constant(value='Python3TracebackLexer')], values=[Constant(value='PythonLexer'), Constant(value='PythonTracebackLexer')])), Assign(targets=[Name(id='__all__', ctx=Store())], value=BinOp(left=BinOp(left=List(elts=[Constant(value='get_lexer_by_name'), Constant(value='get_lexer_for_filename'), Constant(value='find_lexer_class'), Constant(value='guess_lexer'), Constant(value='load_lexer_from_file')], ctx=Load()), op=Add(), right=Call(func=Name(id='list', ctx=Load()), args=[Name(id='LEXERS', ctx=Load())], keywords=[])), op=Add(), right=Call(func=Name(id='list', ctx=Load()), args=[Name(id='COMPAT', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='_lexer_cache', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='_pattern_cache', ctx=Store())], value=Dict(keys=[], values=[])), FunctionDef(name='_fn_matches', args=arguments(posonlyargs=[], args=[arg(arg='fn'), arg(arg='glob')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return whether the supplied file name fn matches pattern filename.')), If(test=Compare(left=Name(id='glob', ctx=Load()), ops=[NotIn()], comparators=[Name(id='_pattern_cache', ctx=Load())]), body=[Assign(targets=[Name(id='pattern', ctx=Store()), Subscript(value=Name(id='_pattern_cache', ctx=Load()), slice=Name(id='glob', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Call(func=Attribute(value=Name(id='fnmatch', ctx=Load()), attr='translate', ctx=Load()), args=[Name(id='glob', ctx=Load())], keywords=[])], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='pattern', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='fn', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Subscript(value=Name(id='_pattern_cache', ctx=Load()), slice=Name(id='glob', ctx=Load()), ctx=Load()), attr='match', ctx=Load()), args=[Name(id='fn', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_load_lexers', args=arguments(posonlyargs=[], args=[arg(arg='module_name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Load a lexer (and all others in the module too).')), Assign(targets=[Name(id='mod', ctx=Store())], value=Call(func=Name(id='__import__', ctx=Load()), args=[Name(id='module_name', ctx=Load()), Constant(value=None), Constant(value=None), List(elts=[Constant(value='__all__')], ctx=Load())], keywords=[])), For(target=Name(id='lexer_name', ctx=Store()), iter=Attribute(value=Name(id='mod', ctx=Load()), attr='__all__', ctx=Load()), body=[Assign(targets=[Name(id='cls', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='mod', ctx=Load()), Name(id='lexer_name', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='_lexer_cache', ctx=Load()), slice=Attribute(value=Name(id='cls', ctx=Load()), attr='name', ctx=Load()), ctx=Store())], value=Name(id='cls', ctx=Load()))], orelse=[])], decorator_list=[]), FunctionDef(name='get_all_lexers', args=arguments(posonlyargs=[], args=[arg(arg='plugins')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Expr(value=Constant(value='Return a generator of tuples in the form ``(name, aliases,\n    filenames, mimetypes)`` of all know lexers.\n\n    If *plugins* is true (the default), plugin lexers supplied by entrypoints\n    are also returned.  Otherwise, only builtin ones are considered.\n    ')), For(target=Name(id='item', ctx=Store()), iter=Call(func=Attribute(value=Name(id='LEXERS', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Yield(value=Subscript(value=Name(id='item', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())))], orelse=[]), If(test=Name(id='plugins', ctx=Load()), body=[For(target=Name(id='lexer', ctx=Store()), iter=Call(func=Name(id='find_plugin_lexers', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Yield(value=Tuple(elts=[Attribute(value=Name(id='lexer', ctx=Load()), attr='name', ctx=Load()), Attribute(value=Name(id='lexer', ctx=Load()), attr='aliases', ctx=Load()), Attribute(value=Name(id='lexer', ctx=Load()), attr='filenames', ctx=Load()), Attribute(value=Name(id='lexer', ctx=Load()), attr='mimetypes', ctx=Load())], ctx=Load())))], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='find_lexer_class', args=arguments(posonlyargs=[], args=[arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Return the `Lexer` subclass that with the *name* attribute as given by\n    the *name* argument.\n    ')), If(test=Compare(left=Name(id='name', ctx=Load()), ops=[In()], comparators=[Name(id='_lexer_cache', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='_lexer_cache', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load()))], orelse=[]), For(target=Tuple(elts=[Name(id='module_name', ctx=Store()), Name(id='lname', ctx=Store()), Name(id='aliases', ctx=Store()), Name(id='_', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='LEXERS', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Name(id='name', ctx=Load()), ops=[Eq()], comparators=[Name(id='lname', ctx=Load())]), body=[Expr(value=Call(func=Name(id='_load_lexers', ctx=Load()), args=[Name(id='module_name', ctx=Load())], keywords=[])), Return(value=Subscript(value=Name(id='_lexer_cache', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), For(target=Name(id='cls', ctx=Store()), iter=Call(func=Name(id='find_plugin_lexers', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Attribute(value=Name(id='cls', ctx=Load()), attr='name', ctx=Load()), ops=[Eq()], comparators=[Name(id='name', ctx=Load())]), body=[Return(value=Name(id='cls', ctx=Load()))], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='find_lexer_class_by_name', args=arguments(posonlyargs=[], args=[arg(arg='_alias')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Return the `Lexer` subclass that has `alias` in its aliases list, without\n    instantiating it.\n\n    Like `get_lexer_by_name`, but does not instantiate the class.\n\n    Will raise :exc:`pygments.util.ClassNotFound` if no lexer with that alias is\n    found.\n\n    .. versionadded:: 2.2\n    ')), If(test=UnaryOp(op=Not(), operand=Name(id='_alias', ctx=Load())), body=[Raise(exc=Call(func=Name(id='ClassNotFound', ctx=Load()), args=[BinOp(left=Constant(value='no lexer for alias %r found'), op=Mod(), right=Name(id='_alias', ctx=Load()))], keywords=[]))], orelse=[]), For(target=Tuple(elts=[Name(id='module_name', ctx=Store()), Name(id='name', ctx=Store()), Name(id='aliases', ctx=Store()), Name(id='_', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='LEXERS', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='_alias', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), ops=[In()], comparators=[Name(id='aliases', ctx=Load())]), body=[If(test=Compare(left=Name(id='name', ctx=Load()), ops=[NotIn()], comparators=[Name(id='_lexer_cache', ctx=Load())]), body=[Expr(value=Call(func=Name(id='_load_lexers', ctx=Load()), args=[Name(id='module_name', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Subscript(value=Name(id='_lexer_cache', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), For(target=Name(id='cls', ctx=Store()), iter=Call(func=Name(id='find_plugin_lexers', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='_alias', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), ops=[In()], comparators=[Attribute(value=Name(id='cls', ctx=Load()), attr='aliases', ctx=Load())]), body=[Return(value=Name(id='cls', ctx=Load()))], orelse=[])], orelse=[]), Raise(exc=Call(func=Name(id='ClassNotFound', ctx=Load()), args=[BinOp(left=Constant(value='no lexer for alias %r found'), op=Mod(), right=Name(id='_alias', ctx=Load()))], keywords=[]))], decorator_list=[]), FunctionDef(name='get_lexer_by_name', args=arguments(posonlyargs=[], args=[arg(arg='_alias')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='options'), defaults=[]), body=[Expr(value=Constant(value='\n    Return an instance of a `Lexer` subclass that has `alias` in its\n    aliases list. The lexer is given the `options` at its\n    instantiation.\n\n    Will raise :exc:`pygments.util.ClassNotFound` if no lexer with that alias is\n    found.\n    ')), If(test=UnaryOp(op=Not(), operand=Name(id='_alias', ctx=Load())), body=[Raise(exc=Call(func=Name(id='ClassNotFound', ctx=Load()), args=[BinOp(left=Constant(value='no lexer for alias %r found'), op=Mod(), right=Name(id='_alias', ctx=Load()))], keywords=[]))], orelse=[]), For(target=Tuple(elts=[Name(id='module_name', ctx=Store()), Name(id='name', ctx=Store()), Name(id='aliases', ctx=Store()), Name(id='_', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='LEXERS', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='_alias', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), ops=[In()], comparators=[Name(id='aliases', ctx=Load())]), body=[If(test=Compare(left=Name(id='name', ctx=Load()), ops=[NotIn()], comparators=[Name(id='_lexer_cache', ctx=Load())]), body=[Expr(value=Call(func=Name(id='_load_lexers', ctx=Load()), args=[Name(id='module_name', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Subscript(value=Name(id='_lexer_cache', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load()), args=[], keywords=[keyword(value=Name(id='options', ctx=Load()))]))], orelse=[])], orelse=[]), For(target=Name(id='cls', ctx=Store()), iter=Call(func=Name(id='find_plugin_lexers', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='_alias', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), ops=[In()], comparators=[Attribute(value=Name(id='cls', ctx=Load()), attr='aliases', ctx=Load())]), body=[Return(value=Call(func=Name(id='cls', ctx=Load()), args=[], keywords=[keyword(value=Name(id='options', ctx=Load()))]))], orelse=[])], orelse=[]), Raise(exc=Call(func=Name(id='ClassNotFound', ctx=Load()), args=[BinOp(left=Constant(value='no lexer for alias %r found'), op=Mod(), right=Name(id='_alias', ctx=Load()))], keywords=[]))], decorator_list=[]), FunctionDef(name='load_lexer_from_file', args=arguments(posonlyargs=[], args=[arg(arg='filename'), arg(arg='lexername')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='options'), defaults=[Constant(value='CustomLexer')]), body=[Expr(value=Constant(value='Load a lexer from a file.\n\n    This method expects a file located relative to the current working\n    directory, which contains a Lexer class. By default, it expects the\n    Lexer to be name CustomLexer; you can specify your own class name\n    as the second argument to this function.\n\n    Users should be very careful with the input, because this method\n    is equivalent to running eval on the input file.\n\n    Raises ClassNotFound if there are any problems importing the Lexer.\n\n    .. versionadded:: 2.2\n    ')), Try(body=[Assign(targets=[Name(id='custom_namespace', ctx=Store())], value=Dict(keys=[], values=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='filename', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Name(id='exec', ctx=Load()), args=[Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]), Name(id='custom_namespace', ctx=Load())], keywords=[]))]), If(test=Compare(left=Name(id='lexername', ctx=Load()), ops=[NotIn()], comparators=[Name(id='custom_namespace', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ClassNotFound', ctx=Load()), args=[BinOp(left=Constant(value='no valid %s class found in %s'), op=Mod(), right=Tuple(elts=[Name(id='lexername', ctx=Load()), Name(id='filename', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Name(id='lexer_class', ctx=Store())], value=Subscript(value=Name(id='custom_namespace', ctx=Load()), slice=Name(id='lexername', ctx=Load()), ctx=Load())), Return(value=Call(func=Name(id='lexer_class', ctx=Load()), args=[], keywords=[keyword(value=Name(id='options', ctx=Load()))]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), name='err', body=[Raise(exc=Call(func=Name(id='ClassNotFound', ctx=Load()), args=[BinOp(left=Constant(value='cannot read %s: %s'), op=Mod(), right=Tuple(elts=[Name(id='filename', ctx=Load()), Name(id='err', ctx=Load())], ctx=Load()))], keywords=[]))]), ExceptHandler(type=Name(id='ClassNotFound', ctx=Load()), body=[Raise()]), ExceptHandler(type=Name(id='Exception', ctx=Load()), name='err', body=[Raise(exc=Call(func=Name(id='ClassNotFound', ctx=Load()), args=[BinOp(left=Constant(value='error when loading custom lexer: %s'), op=Mod(), right=Name(id='err', ctx=Load()))], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='find_lexer_class_for_filename', args=arguments(posonlyargs=[], args=[arg(arg='_fn'), arg(arg='code')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Get a lexer for a filename.\n\n    If multiple lexers match the filename pattern, use ``analyse_text()`` to\n    figure out which one is more appropriate.\n\n    Returns None if not found.\n    ')), Assign(targets=[Name(id='matches', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='fn', ctx=Store())], value=Call(func=Name(id='basename', ctx=Load()), args=[Name(id='_fn', ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='modname', ctx=Store()), Name(id='name', ctx=Store()), Name(id='_', ctx=Store()), Name(id='filenames', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='LEXERS', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[]), body=[For(target=Name(id='filename', ctx=Store()), iter=Name(id='filenames', ctx=Load()), body=[If(test=Call(func=Name(id='_fn_matches', ctx=Load()), args=[Name(id='fn', ctx=Load()), Name(id='filename', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='name', ctx=Load()), ops=[NotIn()], comparators=[Name(id='_lexer_cache', ctx=Load())]), body=[Expr(value=Call(func=Name(id='_load_lexers', ctx=Load()), args=[Name(id='modname', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='matches', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Subscript(value=Name(id='_lexer_cache', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load()), Name(id='filename', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[]), For(target=Name(id='cls', ctx=Store()), iter=Call(func=Name(id='find_plugin_lexers', ctx=Load()), args=[], keywords=[]), body=[For(target=Name(id='filename', ctx=Store()), iter=Attribute(value=Name(id='cls', ctx=Load()), attr='filenames', ctx=Load()), body=[If(test=Call(func=Name(id='_fn_matches', ctx=Load()), args=[Name(id='fn', ctx=Load()), Name(id='filename', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='matches', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='cls', ctx=Load()), Name(id='filename', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='code', ctx=Load()), Name(id='bytes', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='code', ctx=Store())], value=Call(func=Name(id='guess_decode', ctx=Load()), args=[Name(id='code', ctx=Load())], keywords=[]))], orelse=[]), FunctionDef(name='get_rating', args=arguments(posonlyargs=[], args=[arg(arg='info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='cls', ctx=Store()), Name(id='filename', ctx=Store())], ctx=Store())], value=Name(id='info', ctx=Load())), Assign(targets=[Name(id='bonus', ctx=Store())], value=BoolOp(op=Or(), values=[BoolOp(op=And(), values=[Compare(left=Constant(value='*'), ops=[NotIn()], comparators=[Name(id='filename', ctx=Load())]), Constant(value=0.5)]), Constant(value=0)])), If(test=Name(id='code', ctx=Load()), body=[Return(value=Tuple(elts=[BinOp(left=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='analyse_text', ctx=Load()), args=[Name(id='code', ctx=Load())], keywords=[]), op=Add(), right=Name(id='bonus', ctx=Load())), Attribute(value=Name(id='cls', ctx=Load()), attr='__name__', ctx=Load())], ctx=Load()))], orelse=[]), Return(value=Tuple(elts=[BinOp(left=Attribute(value=Name(id='cls', ctx=Load()), attr='priority', ctx=Load()), op=Add(), right=Name(id='bonus', ctx=Load())), Attribute(value=Name(id='cls', ctx=Load()), attr='__name__', ctx=Load())], ctx=Load()))], decorator_list=[]), If(test=Name(id='matches', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='matches', ctx=Load()), attr='sort', ctx=Load()), args=[], keywords=[keyword(arg='key', value=Name(id='get_rating', ctx=Load()))])), Return(value=Subscript(value=Subscript(value=Name(id='matches', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[])], decorator_list=[]), FunctionDef(name='get_lexer_for_filename', args=arguments(posonlyargs=[], args=[arg(arg='_fn'), arg(arg='code')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='options'), defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Get a lexer for a filename.\n\n    Return a `Lexer` subclass instance that has a filename pattern\n    matching `fn`. The lexer is given the `options` at its\n    instantiation.\n\n    Raise :exc:`pygments.util.ClassNotFound` if no lexer for that filename\n    is found.\n\n    If multiple lexers match the filename pattern, use their ``analyse_text()``\n    methods to figure out which one is more appropriate.\n    ')), Assign(targets=[Name(id='res', ctx=Store())], value=Call(func=Name(id='find_lexer_class_for_filename', ctx=Load()), args=[Name(id='_fn', ctx=Load()), Name(id='code', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='res', ctx=Load())), body=[Raise(exc=Call(func=Name(id='ClassNotFound', ctx=Load()), args=[BinOp(left=Constant(value='no lexer for filename %r found'), op=Mod(), right=Name(id='_fn', ctx=Load()))], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='res', ctx=Load()), args=[], keywords=[keyword(value=Name(id='options', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='get_lexer_for_mimetype', args=arguments(posonlyargs=[], args=[arg(arg='_mime')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='options'), defaults=[]), body=[Expr(value=Constant(value='\n    Return a `Lexer` subclass instance that has `mime` in its mimetype\n    list. The lexer is given the `options` at its instantiation.\n\n    Will raise :exc:`pygments.util.ClassNotFound` if not lexer for that mimetype\n    is found.\n    ')), For(target=Tuple(elts=[Name(id='modname', ctx=Store()), Name(id='name', ctx=Store()), Name(id='_', ctx=Store()), Name(id='_', ctx=Store()), Name(id='mimetypes', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='LEXERS', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Name(id='_mime', ctx=Load()), ops=[In()], comparators=[Name(id='mimetypes', ctx=Load())]), body=[If(test=Compare(left=Name(id='name', ctx=Load()), ops=[NotIn()], comparators=[Name(id='_lexer_cache', ctx=Load())]), body=[Expr(value=Call(func=Name(id='_load_lexers', ctx=Load()), args=[Name(id='modname', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Subscript(value=Name(id='_lexer_cache', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load()), args=[], keywords=[keyword(value=Name(id='options', ctx=Load()))]))], orelse=[])], orelse=[]), For(target=Name(id='cls', ctx=Store()), iter=Call(func=Name(id='find_plugin_lexers', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Name(id='_mime', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='cls', ctx=Load()), attr='mimetypes', ctx=Load())]), body=[Return(value=Call(func=Name(id='cls', ctx=Load()), args=[], keywords=[keyword(value=Name(id='options', ctx=Load()))]))], orelse=[])], orelse=[]), Raise(exc=Call(func=Name(id='ClassNotFound', ctx=Load()), args=[BinOp(left=Constant(value='no lexer for mimetype %r found'), op=Mod(), right=Name(id='_mime', ctx=Load()))], keywords=[]))], decorator_list=[]), FunctionDef(name='_iter_lexerclasses', args=arguments(posonlyargs=[], args=[arg(arg='plugins')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Expr(value=Constant(value='Return an iterator over all lexer classes.')), For(target=Name(id='key', ctx=Store()), iter=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='LEXERS', ctx=Load())], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='module_name', ctx=Store()), Name(id='name', ctx=Store())], ctx=Store())], value=Subscript(value=Subscript(value=Name(id='LEXERS', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()), slice=Slice(upper=Constant(value=2)), ctx=Load())), If(test=Compare(left=Name(id='name', ctx=Load()), ops=[NotIn()], comparators=[Name(id='_lexer_cache', ctx=Load())]), body=[Expr(value=Call(func=Name(id='_load_lexers', ctx=Load()), args=[Name(id='module_name', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Yield(value=Subscript(value=Name(id='_lexer_cache', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load())))], orelse=[]), If(test=Name(id='plugins', ctx=Load()), body=[Expr(value=YieldFrom(value=Call(func=Name(id='find_plugin_lexers', ctx=Load()), args=[], keywords=[])))], orelse=[])], decorator_list=[]), FunctionDef(name='guess_lexer_for_filename', args=arguments(posonlyargs=[], args=[arg(arg='_fn'), arg(arg='_text')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='options'), defaults=[]), body=[Expr(value=Constant(value='\n    As :func:`guess_lexer()`, but only lexers which have a pattern in `filenames`\n    or `alias_filenames` that matches `filename` are taken into consideration.\n\n    :exc:`pygments.util.ClassNotFound` is raised if no lexer thinks it can\n    handle the content.\n    ')), Assign(targets=[Name(id='fn', ctx=Store())], value=Call(func=Name(id='basename', ctx=Load()), args=[Name(id='_fn', ctx=Load())], keywords=[])), Assign(targets=[Name(id='primary', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='matching_lexers', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), For(target=Name(id='lexer', ctx=Store()), iter=Call(func=Name(id='_iter_lexerclasses', ctx=Load()), args=[], keywords=[]), body=[For(target=Name(id='filename', ctx=Store()), iter=Attribute(value=Name(id='lexer', ctx=Load()), attr='filenames', ctx=Load()), body=[If(test=Call(func=Name(id='_fn_matches', ctx=Load()), args=[Name(id='fn', ctx=Load()), Name(id='filename', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='matching_lexers', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='lexer', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='primary', ctx=Load()), slice=Name(id='lexer', ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[])], orelse=[]), For(target=Name(id='filename', ctx=Store()), iter=Attribute(value=Name(id='lexer', ctx=Load()), attr='alias_filenames', ctx=Load()), body=[If(test=Call(func=Name(id='_fn_matches', ctx=Load()), args=[Name(id='fn', ctx=Load()), Name(id='filename', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='matching_lexers', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='lexer', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='primary', ctx=Load()), slice=Name(id='lexer', ctx=Load()), ctx=Store())], value=Constant(value=False))], orelse=[])], orelse=[])], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='matching_lexers', ctx=Load())), body=[Raise(exc=Call(func=Name(id='ClassNotFound', ctx=Load()), args=[BinOp(left=Constant(value='no lexer for filename %r found'), op=Mod(), right=Name(id='fn', ctx=Load()))], keywords=[]))], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='matching_lexers', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Call(func=Call(func=Attribute(value=Name(id='matching_lexers', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[]), args=[], keywords=[keyword(value=Name(id='options', ctx=Load()))]))], orelse=[]), Assign(targets=[Name(id='result', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='lexer', ctx=Store()), iter=Name(id='matching_lexers', ctx=Load()), body=[Assign(targets=[Name(id='rv', ctx=Store())], value=Call(func=Attribute(value=Name(id='lexer', ctx=Load()), attr='analyse_text', ctx=Load()), args=[Name(id='_text', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='rv', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1.0)]), body=[Return(value=Call(func=Name(id='lexer', ctx=Load()), args=[], keywords=[keyword(value=Name(id='options', ctx=Load()))]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='rv', ctx=Load()), Name(id='lexer', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), FunctionDef(name='type_sort', args=arguments(posonlyargs=[], args=[arg(arg='t')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Tuple(elts=[Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), Subscript(value=Name(id='primary', ctx=Load()), slice=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), ctx=Load()), Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), attr='priority', ctx=Load()), Attribute(value=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), attr='__name__', ctx=Load())], ctx=Load()))], decorator_list=[]), Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='sort', ctx=Load()), args=[], keywords=[keyword(arg='key', value=Name(id='type_sort', ctx=Load()))])), Return(value=Call(func=Subscript(value=Subscript(value=Name(id='result', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=1), ctx=Load()), args=[], keywords=[keyword(value=Name(id='options', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='guess_lexer', args=arguments(posonlyargs=[], args=[arg(arg='_text')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='options'), defaults=[]), body=[Expr(value=Constant(value="\n    Return a `Lexer` subclass instance that's guessed from the text in\n    `text`. For that, the :meth:`.analyse_text()` method of every known lexer\n    class is called with the text as argument, and the lexer which returned the\n    highest value will be instantiated and returned.\n\n    :exc:`pygments.util.ClassNotFound` is raised if no lexer thinks it can\n    handle the content.\n    ")), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='_text', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='inencoding', ctx=Store())], value=Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='inencoding'), Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='encoding')], keywords=[])], keywords=[])), If(test=Name(id='inencoding', ctx=Load()), body=[Assign(targets=[Name(id='_text', ctx=Store())], value=Call(func=Attribute(value=Name(id='_text', ctx=Load()), attr='decode', ctx=Load()), args=[BoolOp(op=Or(), values=[Name(id='inencoding', ctx=Load()), Constant(value='utf8')])], keywords=[]))], orelse=[Assign(targets=[Tuple(elts=[Name(id='_text', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Name(id='guess_decode', ctx=Load()), args=[Name(id='_text', ctx=Load())], keywords=[]))])], orelse=[]), Assign(targets=[Name(id='ft', ctx=Store())], value=Call(func=Name(id='get_filetype_from_buffer', ctx=Load()), args=[Name(id='_text', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='ft', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Try(body=[Return(value=Call(func=Name(id='get_lexer_by_name', ctx=Load()), args=[Name(id='ft', ctx=Load())], keywords=[keyword(value=Name(id='options', ctx=Load()))]))], handlers=[ExceptHandler(type=Name(id='ClassNotFound', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], orelse=[]), Assign(targets=[Name(id='best_lexer', ctx=Store())], value=List(elts=[Constant(value=0.0), Constant(value=None)], ctx=Load())), For(target=Name(id='lexer', ctx=Store()), iter=Call(func=Name(id='_iter_lexerclasses', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='rv', ctx=Store())], value=Call(func=Attribute(value=Name(id='lexer', ctx=Load()), attr='analyse_text', ctx=Load()), args=[Name(id='_text', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='rv', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1.0)]), body=[Return(value=Call(func=Name(id='lexer', ctx=Load()), args=[], keywords=[keyword(value=Name(id='options', ctx=Load()))]))], orelse=[]), If(test=Compare(left=Name(id='rv', ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='best_lexer', ctx=Load()), slice=Constant(value=0), ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='best_lexer', ctx=Load()), slice=Slice(), ctx=Store())], value=Tuple(elts=[Name(id='rv', ctx=Load()), Name(id='lexer', ctx=Load())], ctx=Load()))], orelse=[])], orelse=[]), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Subscript(value=Name(id='best_lexer', ctx=Load()), slice=Constant(value=0), ctx=Load())), Compare(left=Subscript(value=Name(id='best_lexer', ctx=Load()), slice=Constant(value=1), ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])]), body=[Raise(exc=Call(func=Name(id='ClassNotFound', ctx=Load()), args=[Constant(value='no lexer matching the text found')], keywords=[]))], orelse=[]), Return(value=Call(func=Subscript(value=Name(id='best_lexer', ctx=Load()), slice=Constant(value=1), ctx=Load()), args=[], keywords=[keyword(value=Name(id='options', ctx=Load()))]))], decorator_list=[]), ClassDef(name='_automodule', bases=[Attribute(value=Name(id='types', ctx=Load()), attr='ModuleType', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Automatically import lexers.')), FunctionDef(name='__getattr__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='info', ctx=Store())], value=Call(func=Attribute(value=Name(id='LEXERS', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), If(test=Name(id='info', ctx=Load()), body=[Expr(value=Call(func=Name(id='_load_lexers', ctx=Load()), args=[Subscript(value=Name(id='info', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])), Assign(targets=[Name(id='cls', ctx=Store())], value=Subscript(value=Name(id='_lexer_cache', ctx=Load()), slice=Subscript(value=Name(id='info', ctx=Load()), slice=Constant(value=1), ctx=Load()), ctx=Load())), Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='name', ctx=Load()), Name(id='cls', ctx=Load())], keywords=[])), Return(value=Name(id='cls', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='name', ctx=Load()), ops=[In()], comparators=[Name(id='COMPAT', ctx=Load())]), body=[Return(value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Subscript(value=Name(id='COMPAT', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Raise(exc=Call(func=Name(id='AttributeError', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), Assign(targets=[Name(id='oldmod', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='modules', ctx=Load()), slice=Name(id='__name__', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='newmod', ctx=Store())], value=Call(func=Name(id='_automodule', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='newmod', ctx=Load()), attr='__dict__', ctx=Load()), attr='update', ctx=Load()), args=[Attribute(value=Name(id='oldmod', ctx=Load()), attr='__dict__', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='modules', ctx=Load()), slice=Name(id='__name__', ctx=Load()), ctx=Store())], value=Name(id='newmod', ctx=Load())), Delete(targets=[Attribute(value=Name(id='newmod', ctx=Load()), attr='newmod', ctx=Del()), Attribute(value=Name(id='newmod', ctx=Load()), attr='oldmod', ctx=Del()), Attribute(value=Name(id='newmod', ctx=Load()), attr='sys', ctx=Del()), Attribute(value=Name(id='newmod', ctx=Load()), attr='types', ctx=Del())])], type_ignores=[])