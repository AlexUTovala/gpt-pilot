Module(body=[Import(names=[alias(name='sys')]), ImportFrom(module='itertools', names=[alias(name='chain')], level=0), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING'), alias(name='Iterable'), alias(name='Optional')], level=0), If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), ops=[GtE()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=8)], ctx=Load())]), body=[ImportFrom(module='typing', names=[alias(name='Literal')], level=0)], orelse=[ImportFrom(module='pip._vendor.typing_extensions', names=[alias(name='Literal')], level=0)]), ImportFrom(module='constrain', names=[alias(name='Constrain')], level=1), ImportFrom(module='jupyter', names=[alias(name='JupyterMixin')], level=1), ImportFrom(module='measure', names=[alias(name='Measurement')], level=1), ImportFrom(module='segment', names=[alias(name='Segment')], level=1), ImportFrom(module='style', names=[alias(name='StyleType')], level=1), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='console', names=[alias(name='Console'), alias(name='ConsoleOptions'), alias(name='RenderableType'), alias(name='RenderResult')], level=1)], orelse=[]), Assign(targets=[Name(id='AlignMethod', ctx=Store())], value=Subscript(value=Name(id='Literal', ctx=Load()), slice=Tuple(elts=[Constant(value='left'), Constant(value='center'), Constant(value='right')], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='VerticalAlignMethod', ctx=Store())], value=Subscript(value=Name(id='Literal', ctx=Load()), slice=Tuple(elts=[Constant(value='top'), Constant(value='middle'), Constant(value='bottom')], ctx=Load()), ctx=Load())), ClassDef(name='Align', bases=[Name(id='JupyterMixin', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Align a renderable by adding spaces if necessary.\n\n    Args:\n        renderable (RenderableType): A console renderable.\n        align (AlignMethod): One of "left", "center", or "right""\n        style (StyleType, optional): An optional style to apply to the background.\n        vertical (Optional[VerticalAlginMethod], optional): Optional vertical align, one of "top", "middle", or "bottom". Defaults to None.\n        pad (bool, optional): Pad the right with spaces. Defaults to True.\n        width (int, optional): Restrict contents to given width, or None to use default width. Defaults to None.\n        height (int, optional): Set height of align renderable, or None to fit to contents. Defaults to None.\n\n    Raises:\n        ValueError: if ``align`` is not one of the expected values.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='renderable', annotation=Constant(value='RenderableType')), arg(arg='align', annotation=Name(id='AlignMethod', ctx=Load())), arg(arg='style', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='StyleType', ctx=Load()), ctx=Load()))], kwonlyargs=[arg(arg='vertical', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='VerticalAlignMethod', ctx=Load()), ctx=Load())), arg(arg='pad', annotation=Name(id='bool', ctx=Load())), arg(arg='width', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='height', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()))], kw_defaults=[Constant(value=None), Constant(value=True), Constant(value=None), Constant(value=None)], defaults=[Constant(value='left'), Constant(value=None)]), body=[If(test=Compare(left=Name(id='align', ctx=Load()), ops=[NotIn()], comparators=[Tuple(elts=[Constant(value='left'), Constant(value='center'), Constant(value='right')], ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='invalid value for align, expected "left", "center", or "right" (not '), FormattedValue(value=Name(id='align', ctx=Load()), conversion=114), Constant(value=')')])], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='vertical', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='vertical', ctx=Load()), ops=[NotIn()], comparators=[Tuple(elts=[Constant(value='top'), Constant(value='middle'), Constant(value='bottom')], ctx=Load())])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='invalid value for vertical, expected "top", "middle", or "bottom" (not '), FormattedValue(value=Name(id='vertical', ctx=Load()), conversion=114), Constant(value=')')])], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='renderable', ctx=Store())], value=Name(id='renderable', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='align', ctx=Store())], value=Name(id='align', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Store())], value=Name(id='style', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='vertical', ctx=Store())], value=Name(id='vertical', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='pad', ctx=Store())], value=Name(id='pad', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='width', ctx=Store())], value=Name(id='width', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='height', ctx=Store())], value=Name(id='height', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[Constant(value='Align('), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='renderable', ctx=Load()), conversion=114), Constant(value=', '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='align', ctx=Load()), conversion=114), Constant(value=')')]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='left', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='renderable', annotation=Constant(value='RenderableType')), arg(arg='style', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='StyleType', ctx=Load()), ctx=Load()))], kwonlyargs=[arg(arg='vertical', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='VerticalAlignMethod', ctx=Load()), ctx=Load())), arg(arg='pad', annotation=Name(id='bool', ctx=Load())), arg(arg='width', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='height', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()))], kw_defaults=[Constant(value=None), Constant(value=True), Constant(value=None), Constant(value=None)], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Align a renderable to the left.')), Return(value=Call(func=Name(id='cls', ctx=Load()), args=[Name(id='renderable', ctx=Load()), Constant(value='left')], keywords=[keyword(arg='style', value=Name(id='style', ctx=Load())), keyword(arg='vertical', value=Name(id='vertical', ctx=Load())), keyword(arg='pad', value=Name(id='pad', ctx=Load())), keyword(arg='width', value=Name(id='width', ctx=Load())), keyword(arg='height', value=Name(id='height', ctx=Load()))]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Constant(value='Align')), FunctionDef(name='center', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='renderable', annotation=Constant(value='RenderableType')), arg(arg='style', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='StyleType', ctx=Load()), ctx=Load()))], kwonlyargs=[arg(arg='vertical', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='VerticalAlignMethod', ctx=Load()), ctx=Load())), arg(arg='pad', annotation=Name(id='bool', ctx=Load())), arg(arg='width', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='height', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()))], kw_defaults=[Constant(value=None), Constant(value=True), Constant(value=None), Constant(value=None)], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Align a renderable to the center.')), Return(value=Call(func=Name(id='cls', ctx=Load()), args=[Name(id='renderable', ctx=Load()), Constant(value='center')], keywords=[keyword(arg='style', value=Name(id='style', ctx=Load())), keyword(arg='vertical', value=Name(id='vertical', ctx=Load())), keyword(arg='pad', value=Name(id='pad', ctx=Load())), keyword(arg='width', value=Name(id='width', ctx=Load())), keyword(arg='height', value=Name(id='height', ctx=Load()))]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Constant(value='Align')), FunctionDef(name='right', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='renderable', annotation=Constant(value='RenderableType')), arg(arg='style', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='StyleType', ctx=Load()), ctx=Load()))], kwonlyargs=[arg(arg='vertical', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='VerticalAlignMethod', ctx=Load()), ctx=Load())), arg(arg='pad', annotation=Name(id='bool', ctx=Load())), arg(arg='width', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='height', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()))], kw_defaults=[Constant(value=None), Constant(value=True), Constant(value=None), Constant(value=None)], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Align a renderable to the right.')), Return(value=Call(func=Name(id='cls', ctx=Load()), args=[Name(id='renderable', ctx=Load()), Constant(value='right')], keywords=[keyword(arg='style', value=Name(id='style', ctx=Load())), keyword(arg='vertical', value=Name(id='vertical', ctx=Load())), keyword(arg='pad', value=Name(id='pad', ctx=Load())), keyword(arg='width', value=Name(id='width', ctx=Load())), keyword(arg='height', value=Name(id='height', ctx=Load()))]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Constant(value='Align')), FunctionDef(name='__rich_console__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='console', annotation=Constant(value='Console')), arg(arg='options', annotation=Constant(value='ConsoleOptions'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='align', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='align', ctx=Load())), Assign(targets=[Name(id='width', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='measure', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='renderable', ctx=Load())], keywords=[keyword(arg='options', value=Name(id='options', ctx=Load()))]), attr='maximum', ctx=Load())), Assign(targets=[Name(id='rendered', ctx=Store())], value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='render', ctx=Load()), args=[Call(func=Name(id='Constrain', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='renderable', ctx=Load()), IfExp(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='width', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Name(id='width', ctx=Load()), orelse=Call(func=Name(id='min', ctx=Load()), args=[Name(id='width', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='width', ctx=Load())], keywords=[]))], keywords=[]), Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='update', ctx=Load()), args=[], keywords=[keyword(arg='height', value=Constant(value=None))])], keywords=[])), Assign(targets=[Name(id='lines', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='Segment', ctx=Load()), attr='split_lines', ctx=Load()), args=[Name(id='rendered', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='width', ctx=Store()), Name(id='height', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='Segment', ctx=Load()), attr='get_shape', ctx=Load()), args=[Name(id='lines', ctx=Load())], keywords=[])), Assign(targets=[Name(id='lines', ctx=Store())], value=Call(func=Attribute(value=Name(id='Segment', ctx=Load()), attr='set_shape', ctx=Load()), args=[Name(id='lines', ctx=Load()), Name(id='width', ctx=Load()), Name(id='height', ctx=Load())], keywords=[])), Assign(targets=[Name(id='new_line', ctx=Store())], value=Call(func=Attribute(value=Name(id='Segment', ctx=Load()), attr='line', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='excess_space', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='options', ctx=Load()), attr='max_width', ctx=Load()), op=Sub(), right=Name(id='width', ctx=Load()))), Assign(targets=[Name(id='style', ctx=Store())], value=IfExp(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='get_style', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load())], keywords=[]), orelse=Constant(value=None))), FunctionDef(name='generate_segments', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='excess_space', ctx=Load()), ops=[LtE()], comparators=[Constant(value=0)]), body=[For(target=Name(id='line', ctx=Store()), iter=Name(id='lines', ctx=Load()), body=[Expr(value=YieldFrom(value=Name(id='line', ctx=Load()))), Expr(value=Yield(value=Name(id='new_line', ctx=Load())))], orelse=[])], orelse=[If(test=Compare(left=Name(id='align', ctx=Load()), ops=[Eq()], comparators=[Constant(value='left')]), body=[Assign(targets=[Name(id='pad', ctx=Store())], value=IfExp(test=Attribute(value=Name(id='self', ctx=Load()), attr='pad', ctx=Load()), body=Call(func=Name(id='Segment', ctx=Load()), args=[BinOp(left=Constant(value=' '), op=Mult(), right=Name(id='excess_space', ctx=Load())), Name(id='style', ctx=Load())], keywords=[]), orelse=Constant(value=None))), For(target=Name(id='line', ctx=Store()), iter=Name(id='lines', ctx=Load()), body=[Expr(value=YieldFrom(value=Name(id='line', ctx=Load()))), If(test=Name(id='pad', ctx=Load()), body=[Expr(value=Yield(value=Name(id='pad', ctx=Load())))], orelse=[]), Expr(value=Yield(value=Name(id='new_line', ctx=Load())))], orelse=[])], orelse=[If(test=Compare(left=Name(id='align', ctx=Load()), ops=[Eq()], comparators=[Constant(value='center')]), body=[Assign(targets=[Name(id='left', ctx=Store())], value=BinOp(left=Name(id='excess_space', ctx=Load()), op=FloorDiv(), right=Constant(value=2))), Assign(targets=[Name(id='pad', ctx=Store())], value=Call(func=Name(id='Segment', ctx=Load()), args=[BinOp(left=Constant(value=' '), op=Mult(), right=Name(id='left', ctx=Load())), Name(id='style', ctx=Load())], keywords=[])), Assign(targets=[Name(id='pad_right', ctx=Store())], value=IfExp(test=Attribute(value=Name(id='self', ctx=Load()), attr='pad', ctx=Load()), body=Call(func=Name(id='Segment', ctx=Load()), args=[BinOp(left=Constant(value=' '), op=Mult(), right=BinOp(left=Name(id='excess_space', ctx=Load()), op=Sub(), right=Name(id='left', ctx=Load()))), Name(id='style', ctx=Load())], keywords=[]), orelse=Constant(value=None))), For(target=Name(id='line', ctx=Store()), iter=Name(id='lines', ctx=Load()), body=[If(test=Name(id='left', ctx=Load()), body=[Expr(value=Yield(value=Name(id='pad', ctx=Load())))], orelse=[]), Expr(value=YieldFrom(value=Name(id='line', ctx=Load()))), If(test=Name(id='pad_right', ctx=Load()), body=[Expr(value=Yield(value=Name(id='pad_right', ctx=Load())))], orelse=[]), Expr(value=Yield(value=Name(id='new_line', ctx=Load())))], orelse=[])], orelse=[If(test=Compare(left=Name(id='align', ctx=Load()), ops=[Eq()], comparators=[Constant(value='right')]), body=[Assign(targets=[Name(id='pad', ctx=Store())], value=Call(func=Name(id='Segment', ctx=Load()), args=[BinOp(left=Constant(value=' '), op=Mult(), right=Name(id='excess_space', ctx=Load())), Name(id='style', ctx=Load())], keywords=[])), For(target=Name(id='line', ctx=Store()), iter=Name(id='lines', ctx=Load()), body=[Expr(value=Yield(value=Name(id='pad', ctx=Load()))), Expr(value=YieldFrom(value=Name(id='line', ctx=Load()))), Expr(value=Yield(value=Name(id='new_line', ctx=Load())))], orelse=[])], orelse=[])])])])], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='Segment', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='blank_line', ctx=Store())], value=IfExp(test=Attribute(value=Name(id='self', ctx=Load()), attr='pad', ctx=Load()), body=Call(func=Name(id='Segment', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=BinOp(left=Constant(value=' '), op=Mult(), right=BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='width', ctx=Load()), Attribute(value=Name(id='options', ctx=Load()), attr='max_width', ctx=Load())])), conversion=-1), Constant(value='\n')]), Name(id='style', ctx=Load())], keywords=[]), orelse=Call(func=Name(id='Segment', ctx=Load()), args=[Constant(value='\n')], keywords=[]))), FunctionDef(name='blank_lines', args=arguments(posonlyargs=[], args=[arg(arg='count', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='count', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[For(target=Name(id='_', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='count', ctx=Load())], keywords=[]), body=[Expr(value=Yield(value=Name(id='blank_line', ctx=Load())))], orelse=[])], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='Segment', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='vertical_height', ctx=Store())], value=BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='height', ctx=Load()), Attribute(value=Name(id='options', ctx=Load()), attr='height', ctx=Load())])), AnnAssign(target=Name(id='iter_segments', ctx=Store()), annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='Segment', ctx=Load()), ctx=Load()), simple=1), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='vertical', ctx=Load()), Compare(left=Name(id='vertical_height', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='vertical', ctx=Load()), ops=[Eq()], comparators=[Constant(value='top')]), body=[Assign(targets=[Name(id='bottom_space', ctx=Store())], value=BinOp(left=Name(id='vertical_height', ctx=Load()), op=Sub(), right=Name(id='height', ctx=Load()))), Assign(targets=[Name(id='iter_segments', ctx=Store())], value=Call(func=Name(id='chain', ctx=Load()), args=[Call(func=Name(id='generate_segments', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='blank_lines', ctx=Load()), args=[Name(id='bottom_space', ctx=Load())], keywords=[])], keywords=[]))], orelse=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='vertical', ctx=Load()), ops=[Eq()], comparators=[Constant(value='middle')]), body=[Assign(targets=[Name(id='top_space', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='vertical_height', ctx=Load()), op=Sub(), right=Name(id='height', ctx=Load())), op=FloorDiv(), right=Constant(value=2))), Assign(targets=[Name(id='bottom_space', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='vertical_height', ctx=Load()), op=Sub(), right=Name(id='top_space', ctx=Load())), op=Sub(), right=Name(id='height', ctx=Load()))), Assign(targets=[Name(id='iter_segments', ctx=Store())], value=Call(func=Name(id='chain', ctx=Load()), args=[Call(func=Name(id='blank_lines', ctx=Load()), args=[Name(id='top_space', ctx=Load())], keywords=[]), Call(func=Name(id='generate_segments', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='blank_lines', ctx=Load()), args=[Name(id='bottom_space', ctx=Load())], keywords=[])], keywords=[]))], orelse=[Assign(targets=[Name(id='top_space', ctx=Store())], value=BinOp(left=Name(id='vertical_height', ctx=Load()), op=Sub(), right=Name(id='height', ctx=Load()))), Assign(targets=[Name(id='iter_segments', ctx=Store())], value=Call(func=Name(id='chain', ctx=Load()), args=[Call(func=Name(id='blank_lines', ctx=Load()), args=[Name(id='top_space', ctx=Load())], keywords=[]), Call(func=Name(id='generate_segments', ctx=Load()), args=[], keywords=[])], keywords=[]))])])], orelse=[Assign(targets=[Name(id='iter_segments', ctx=Store())], value=Call(func=Name(id='generate_segments', ctx=Load()), args=[], keywords=[]))]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load()), body=[Assign(targets=[Name(id='style', ctx=Store())], value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='get_style', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load())], keywords=[])), Assign(targets=[Name(id='iter_segments', ctx=Store())], value=Call(func=Attribute(value=Name(id='Segment', ctx=Load()), attr='apply_style', ctx=Load()), args=[Name(id='iter_segments', ctx=Load()), Name(id='style', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=YieldFrom(value=Name(id='iter_segments', ctx=Load())))], decorator_list=[], returns=Constant(value='RenderResult')), FunctionDef(name='__rich_measure__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='console', annotation=Constant(value='Console')), arg(arg='options', annotation=Constant(value='ConsoleOptions'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='measurement', ctx=Store())], value=Call(func=Attribute(value=Name(id='Measurement', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='console', ctx=Load()), Name(id='options', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='renderable', ctx=Load())], keywords=[])), Return(value=Name(id='measurement', ctx=Load()))], decorator_list=[], returns=Name(id='Measurement', ctx=Load()))], decorator_list=[]), ClassDef(name='VerticalCenter', bases=[Name(id='JupyterMixin', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Vertically aligns a renderable.\n\n    Warn:\n        This class is deprecated and may be removed in a future version. Use Align class with\n        `vertical="middle"`.\n\n    Args:\n        renderable (RenderableType): A renderable object.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='renderable', annotation=Constant(value='RenderableType')), arg(arg='style', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='StyleType', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='renderable', ctx=Store())], value=Name(id='renderable', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Store())], value=Name(id='style', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[Constant(value='VerticalCenter('), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='renderable', ctx=Load()), conversion=114), Constant(value=')')]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='__rich_console__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='console', annotation=Constant(value='Console')), arg(arg='options', annotation=Constant(value='ConsoleOptions'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='style', ctx=Store())], value=IfExp(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='get_style', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load())], keywords=[]), orelse=Constant(value=None))), Assign(targets=[Name(id='lines', ctx=Store())], value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='render_lines', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='renderable', ctx=Load()), Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='update', ctx=Load()), args=[], keywords=[keyword(arg='height', value=Constant(value=None))])], keywords=[keyword(arg='pad', value=Constant(value=False))])), Assign(targets=[Tuple(elts=[Name(id='width', ctx=Store()), Name(id='_height', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='Segment', ctx=Load()), attr='get_shape', ctx=Load()), args=[Name(id='lines', ctx=Load())], keywords=[])), Assign(targets=[Name(id='new_line', ctx=Store())], value=Call(func=Attribute(value=Name(id='Segment', ctx=Load()), attr='line', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='height', ctx=Store())], value=BoolOp(op=Or(), values=[Attribute(value=Name(id='options', ctx=Load()), attr='height', ctx=Load()), Attribute(value=Attribute(value=Name(id='options', ctx=Load()), attr='size', ctx=Load()), attr='height', ctx=Load())])), Assign(targets=[Name(id='top_space', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='height', ctx=Load()), op=Sub(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='lines', ctx=Load())], keywords=[])), op=FloorDiv(), right=Constant(value=2))), Assign(targets=[Name(id='bottom_space', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='height', ctx=Load()), op=Sub(), right=Name(id='top_space', ctx=Load())), op=Sub(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='lines', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='blank_line', ctx=Store())], value=Call(func=Name(id='Segment', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=BinOp(left=Constant(value=' '), op=Mult(), right=Name(id='width', ctx=Load())), conversion=-1)]), Name(id='style', ctx=Load())], keywords=[])), FunctionDef(name='blank_lines', args=arguments(posonlyargs=[], args=[arg(arg='count', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='_', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='count', ctx=Load())], keywords=[]), body=[Expr(value=Yield(value=Name(id='blank_line', ctx=Load()))), Expr(value=Yield(value=Name(id='new_line', ctx=Load())))], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='Segment', ctx=Load()), ctx=Load())), If(test=Compare(left=Name(id='top_space', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[Expr(value=YieldFrom(value=Call(func=Name(id='blank_lines', ctx=Load()), args=[Name(id='top_space', ctx=Load())], keywords=[])))], orelse=[]), For(target=Name(id='line', ctx=Store()), iter=Name(id='lines', ctx=Load()), body=[Expr(value=YieldFrom(value=Name(id='line', ctx=Load()))), Expr(value=Yield(value=Name(id='new_line', ctx=Load())))], orelse=[]), If(test=Compare(left=Name(id='bottom_space', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[Expr(value=YieldFrom(value=Call(func=Name(id='blank_lines', ctx=Load()), args=[Name(id='bottom_space', ctx=Load())], keywords=[])))], orelse=[])], decorator_list=[], returns=Constant(value='RenderResult')), FunctionDef(name='__rich_measure__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='console', annotation=Constant(value='Console')), arg(arg='options', annotation=Constant(value='ConsoleOptions'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='measurement', ctx=Store())], value=Call(func=Attribute(value=Name(id='Measurement', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='console', ctx=Load()), Name(id='options', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='renderable', ctx=Load())], keywords=[])), Return(value=Name(id='measurement', ctx=Load()))], decorator_list=[], returns=Name(id='Measurement', ctx=Load()))], decorator_list=[]), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__')]), body=[ImportFrom(module='pip._vendor.rich.console', names=[alias(name='Console'), alias(name='Group')], level=0), ImportFrom(module='pip._vendor.rich.highlighter', names=[alias(name='ReprHighlighter')], level=0), ImportFrom(module='pip._vendor.rich.panel', names=[alias(name='Panel')], level=0), Assign(targets=[Name(id='highlighter', ctx=Store())], value=Call(func=Name(id='ReprHighlighter', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='console', ctx=Store())], value=Call(func=Name(id='Console', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='panel', ctx=Store())], value=Call(func=Name(id='Panel', ctx=Load()), args=[Call(func=Name(id='Group', ctx=Load()), args=[Call(func=Attribute(value=Name(id='Align', ctx=Load()), attr='left', ctx=Load()), args=[Call(func=Name(id='highlighter', ctx=Load()), args=[Constant(value="align='left'")], keywords=[])], keywords=[]), Call(func=Attribute(value=Name(id='Align', ctx=Load()), attr='center', ctx=Load()), args=[Call(func=Name(id='highlighter', ctx=Load()), args=[Constant(value="align='center'")], keywords=[])], keywords=[]), Call(func=Attribute(value=Name(id='Align', ctx=Load()), attr='right', ctx=Load()), args=[Call(func=Name(id='highlighter', ctx=Load()), args=[Constant(value="align='right'")], keywords=[])], keywords=[])], keywords=[])], keywords=[keyword(arg='width', value=Constant(value=60)), keyword(arg='style', value=Constant(value='on dark_blue')), keyword(arg='title', value=Constant(value='Align'))])), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='print', ctx=Load()), args=[Call(func=Attribute(value=Name(id='Align', ctx=Load()), attr='center', ctx=Load()), args=[Name(id='panel', ctx=Load())], keywords=[keyword(arg='vertical', value=Constant(value='middle')), keyword(arg='style', value=Constant(value='on red')), keyword(arg='height', value=Attribute(value=Name(id='console', ctx=Load()), attr='height', ctx=Load()))])], keywords=[]))], orelse=[])], type_ignores=[])