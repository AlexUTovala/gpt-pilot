Module(body=[Import(names=[alias(name='re')]), ImportFrom(module='typing', names=[alias(name='FrozenSet'), alias(name='NewType'), alias(name='Tuple'), alias(name='Union'), alias(name='cast')], level=0), ImportFrom(module='tags', names=[alias(name='Tag'), alias(name='parse_tag')], level=1), ImportFrom(module='version', names=[alias(name='InvalidVersion'), alias(name='Version')], level=1), Assign(targets=[Name(id='BuildTag', ctx=Store())], value=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[], ctx=Load()), ctx=Load()), Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='NormalizedName', ctx=Store())], value=Call(func=Name(id='NewType', ctx=Load()), args=[Constant(value='NormalizedName'), Name(id='str', ctx=Load())], keywords=[])), ClassDef(name='InvalidWheelFilename', bases=[Name(id='ValueError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    An invalid wheel filename was found, users should refer to PEP 427.\n    '))], decorator_list=[]), ClassDef(name='InvalidSdistFilename', bases=[Name(id='ValueError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    An invalid sdist filename was found, users should refer to the packaging user guide.\n    '))], decorator_list=[]), Assign(targets=[Name(id='_canonicalize_regex', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='[-_.]+')], keywords=[])), Assign(targets=[Name(id='_build_tag_regex', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='(\\d+)(.*)')], keywords=[])), FunctionDef(name='canonicalize_name', args=arguments(posonlyargs=[], args=[arg(arg='name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='_canonicalize_regex', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value='-'), Name(id='name', ctx=Load())], keywords=[]), attr='lower', ctx=Load()), args=[], keywords=[])), Return(value=Call(func=Name(id='cast', ctx=Load()), args=[Name(id='NormalizedName', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='NormalizedName', ctx=Load())), FunctionDef(name='canonicalize_version', args=arguments(posonlyargs=[], args=[arg(arg='version', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='Version', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    This is very similar to Version.__str__, but has one subtle difference\n    with the way it handles the release segment.\n    ')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='version', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Try(body=[Assign(targets=[Name(id='parsed', ctx=Store())], value=Call(func=Name(id='Version', ctx=Load()), args=[Name(id='version', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='InvalidVersion', ctx=Load()), body=[Return(value=Name(id='version', ctx=Load()))])], orelse=[], finalbody=[])], orelse=[Assign(targets=[Name(id='parsed', ctx=Store())], value=Name(id='version', ctx=Load()))]), Assign(targets=[Name(id='parts', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='parsed', ctx=Load()), attr='epoch', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='parts', ctx=Load()), attr='append', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='parsed', ctx=Load()), attr='epoch', ctx=Load()), conversion=-1), Constant(value='!')])], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='parts', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value='(\\.0)+$'), Constant(value=''), Call(func=Attribute(value=Constant(value='.'), attr='join', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='str', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='parsed', ctx=Load()), attr='release', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], keywords=[])], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='parsed', ctx=Load()), attr='pre', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='parts', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='str', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='parsed', ctx=Load()), attr='pre', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='parsed', ctx=Load()), attr='post', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='parts', ctx=Load()), attr='append', ctx=Load()), args=[JoinedStr(values=[Constant(value='.post'), FormattedValue(value=Attribute(value=Name(id='parsed', ctx=Load()), attr='post', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='parsed', ctx=Load()), attr='dev', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='parts', ctx=Load()), attr='append', ctx=Load()), args=[JoinedStr(values=[Constant(value='.dev'), FormattedValue(value=Attribute(value=Name(id='parsed', ctx=Load()), attr='dev', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='parsed', ctx=Load()), attr='local', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='parts', ctx=Load()), attr='append', ctx=Load()), args=[JoinedStr(values=[Constant(value='+'), FormattedValue(value=Attribute(value=Name(id='parsed', ctx=Load()), attr='local', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Name(id='parts', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='parse_wheel_filename', args=arguments(posonlyargs=[], args=[arg(arg='filename', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='filename', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='.whl')], keywords=[])), body=[Raise(exc=Call(func=Name(id='InvalidWheelFilename', ctx=Load()), args=[JoinedStr(values=[Constant(value="Invalid wheel filename (extension must be '.whl'): "), FormattedValue(value=Name(id='filename', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='filename', ctx=Store())], value=Subscript(value=Name(id='filename', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=4))), ctx=Load())), Assign(targets=[Name(id='dashes', ctx=Store())], value=Call(func=Attribute(value=Name(id='filename', ctx=Load()), attr='count', ctx=Load()), args=[Constant(value='-')], keywords=[])), If(test=Compare(left=Name(id='dashes', ctx=Load()), ops=[NotIn()], comparators=[Tuple(elts=[Constant(value=4), Constant(value=5)], ctx=Load())]), body=[Raise(exc=Call(func=Name(id='InvalidWheelFilename', ctx=Load()), args=[JoinedStr(values=[Constant(value='Invalid wheel filename (wrong number of parts): '), FormattedValue(value=Name(id='filename', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='parts', ctx=Store())], value=Call(func=Attribute(value=Name(id='filename', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='-'), BinOp(left=Name(id='dashes', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[])), Assign(targets=[Name(id='name_part', ctx=Store())], value=Subscript(value=Name(id='parts', ctx=Load()), slice=Constant(value=0), ctx=Load())), If(test=BoolOp(op=Or(), values=[Compare(left=Constant(value='__'), ops=[In()], comparators=[Name(id='name_part', ctx=Load())]), Compare(left=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='match', ctx=Load()), args=[Constant(value='^[\\w\\d._]*$'), Name(id='name_part', ctx=Load()), Attribute(value=Name(id='re', ctx=Load()), attr='UNICODE', ctx=Load())], keywords=[]), ops=[Is()], comparators=[Constant(value=None)])]), body=[Raise(exc=Call(func=Name(id='InvalidWheelFilename', ctx=Load()), args=[JoinedStr(values=[Constant(value='Invalid project name: '), FormattedValue(value=Name(id='filename', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Name(id='canonicalize_name', ctx=Load()), args=[Name(id='name_part', ctx=Load())], keywords=[])), Assign(targets=[Name(id='version', ctx=Store())], value=Call(func=Name(id='Version', ctx=Load()), args=[Subscript(value=Name(id='parts', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='dashes', ctx=Load()), ops=[Eq()], comparators=[Constant(value=5)]), body=[Assign(targets=[Name(id='build_part', ctx=Store())], value=Subscript(value=Name(id='parts', ctx=Load()), slice=Constant(value=2), ctx=Load())), Assign(targets=[Name(id='build_match', ctx=Store())], value=Call(func=Attribute(value=Name(id='_build_tag_regex', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='build_part', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='build_match', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='InvalidWheelFilename', ctx=Load()), args=[JoinedStr(values=[Constant(value='Invalid build number: '), FormattedValue(value=Name(id='build_part', ctx=Load()), conversion=-1), Constant(value=" in '"), FormattedValue(value=Name(id='filename', ctx=Load()), conversion=-1), Constant(value="'")])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='build', ctx=Store())], value=Call(func=Name(id='cast', ctx=Load()), args=[Name(id='BuildTag', ctx=Load()), Tuple(elts=[Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Name(id='build_match', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value=1)], keywords=[])], keywords=[]), Call(func=Attribute(value=Name(id='build_match', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value=2)], keywords=[])], ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='build', ctx=Store())], value=Tuple(elts=[], ctx=Load()))]), Assign(targets=[Name(id='tags', ctx=Store())], value=Call(func=Name(id='parse_tag', ctx=Load()), args=[Subscript(value=Name(id='parts', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Name(id='name', ctx=Load()), Name(id='version', ctx=Load()), Name(id='build', ctx=Load()), Name(id='tags', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='NormalizedName', ctx=Load()), Name(id='Version', ctx=Load()), Name(id='BuildTag', ctx=Load()), Subscript(value=Name(id='FrozenSet', ctx=Load()), slice=Name(id='Tag', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='parse_sdist_filename', args=arguments(posonlyargs=[], args=[arg(arg='filename', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Attribute(value=Name(id='filename', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='.tar.gz')], keywords=[]), body=[Assign(targets=[Name(id='file_stem', ctx=Store())], value=Subscript(value=Name(id='filename', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Call(func=Name(id='len', ctx=Load()), args=[Constant(value='.tar.gz')], keywords=[]))), ctx=Load()))], orelse=[If(test=Call(func=Attribute(value=Name(id='filename', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='.zip')], keywords=[]), body=[Assign(targets=[Name(id='file_stem', ctx=Store())], value=Subscript(value=Name(id='filename', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Call(func=Name(id='len', ctx=Load()), args=[Constant(value='.zip')], keywords=[]))), ctx=Load()))], orelse=[Raise(exc=Call(func=Name(id='InvalidSdistFilename', ctx=Load()), args=[JoinedStr(values=[Constant(value="Invalid sdist filename (extension must be '.tar.gz' or '.zip'): "), FormattedValue(value=Name(id='filename', ctx=Load()), conversion=-1)])], keywords=[]))])]), Assign(targets=[Tuple(elts=[Name(id='name_part', ctx=Store()), Name(id='sep', ctx=Store()), Name(id='version_part', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='file_stem', ctx=Load()), attr='rpartition', ctx=Load()), args=[Constant(value='-')], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='sep', ctx=Load())), body=[Raise(exc=Call(func=Name(id='InvalidSdistFilename', ctx=Load()), args=[JoinedStr(values=[Constant(value='Invalid sdist filename: '), FormattedValue(value=Name(id='filename', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Name(id='canonicalize_name', ctx=Load()), args=[Name(id='name_part', ctx=Load())], keywords=[])), Assign(targets=[Name(id='version', ctx=Store())], value=Call(func=Name(id='Version', ctx=Load()), args=[Name(id='version_part', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Name(id='name', ctx=Load()), Name(id='version', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='NormalizedName', ctx=Load()), Name(id='Version', ctx=Load())], ctx=Load()), ctx=Load()))], type_ignores=[])