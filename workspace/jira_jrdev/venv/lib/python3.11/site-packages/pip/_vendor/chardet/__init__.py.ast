Module(body=[ImportFrom(module='typing', names=[alias(name='List'), alias(name='Union')], level=0), ImportFrom(module='charsetgroupprober', names=[alias(name='CharSetGroupProber')], level=1), ImportFrom(module='charsetprober', names=[alias(name='CharSetProber')], level=1), ImportFrom(module='enums', names=[alias(name='InputState')], level=1), ImportFrom(module='resultdict', names=[alias(name='ResultDict')], level=1), ImportFrom(module='universaldetector', names=[alias(name='UniversalDetector')], level=1), ImportFrom(module='version', names=[alias(name='VERSION'), alias(name='__version__')], level=1), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='UniversalDetector'), Constant(value='detect'), Constant(value='detect_all'), Constant(value='__version__'), Constant(value='VERSION')], ctx=Load())), FunctionDef(name='detect', args=arguments(posonlyargs=[], args=[arg(arg='byte_str', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='bytes', ctx=Load()), Name(id='bytearray', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='should_rename_legacy', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value='\n    Detect the encoding of the given byte string.\n\n    :param byte_str:     The byte sequence to examine.\n    :type byte_str:      ``bytes`` or ``bytearray``\n    :param should_rename_legacy:  Should we rename legacy encodings\n                                  to their more modern equivalents?\n    :type should_rename_legacy:   ``bool``\n    ')), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='byte_str', ctx=Load()), Name(id='bytearray', ctx=Load())], keywords=[])), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='byte_str', ctx=Load()), Name(id='bytes', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[JoinedStr(values=[Constant(value='Expected object of type bytes or bytearray, got: '), FormattedValue(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='byte_str', ctx=Load())], keywords=[]), conversion=-1)])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='byte_str', ctx=Store())], value=Call(func=Name(id='bytearray', ctx=Load()), args=[Name(id='byte_str', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='detector', ctx=Store())], value=Call(func=Name(id='UniversalDetector', ctx=Load()), args=[], keywords=[keyword(arg='should_rename_legacy', value=Name(id='should_rename_legacy', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='detector', ctx=Load()), attr='feed', ctx=Load()), args=[Name(id='byte_str', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='detector', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='ResultDict', ctx=Load())), FunctionDef(name='detect_all', args=arguments(posonlyargs=[], args=[arg(arg='byte_str', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='bytes', ctx=Load()), Name(id='bytearray', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='ignore_threshold', annotation=Name(id='bool', ctx=Load())), arg(arg='should_rename_legacy', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Constant(value=False)]), body=[Expr(value=Constant(value='\n    Detect all the possible encodings of the given byte string.\n\n    :param byte_str:          The byte sequence to examine.\n    :type byte_str:           ``bytes`` or ``bytearray``\n    :param ignore_threshold:  Include encodings that are below\n                              ``UniversalDetector.MINIMUM_THRESHOLD``\n                              in results.\n    :type ignore_threshold:   ``bool``\n    :param should_rename_legacy:  Should we rename legacy encodings\n                                  to their more modern equivalents?\n    :type should_rename_legacy:   ``bool``\n    ')), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='byte_str', ctx=Load()), Name(id='bytearray', ctx=Load())], keywords=[])), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='byte_str', ctx=Load()), Name(id='bytes', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[JoinedStr(values=[Constant(value='Expected object of type bytes or bytearray, got: '), FormattedValue(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='byte_str', ctx=Load())], keywords=[]), conversion=-1)])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='byte_str', ctx=Store())], value=Call(func=Name(id='bytearray', ctx=Load()), args=[Name(id='byte_str', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='detector', ctx=Store())], value=Call(func=Name(id='UniversalDetector', ctx=Load()), args=[], keywords=[keyword(arg='should_rename_legacy', value=Name(id='should_rename_legacy', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='detector', ctx=Load()), attr='feed', ctx=Load()), args=[Name(id='byte_str', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='detector', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='detector', ctx=Load()), attr='input_state', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='InputState', ctx=Load()), attr='HIGH_BYTE', ctx=Load())]), body=[AnnAssign(target=Name(id='results', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='ResultDict', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), AnnAssign(target=Name(id='probers', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='CharSetProber', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), For(target=Name(id='prober', ctx=Store()), iter=Attribute(value=Name(id='detector', ctx=Load()), attr='charset_probers', ctx=Load()), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='prober', ctx=Load()), Name(id='CharSetGroupProber', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='probers', ctx=Load()), attr='extend', ctx=Load()), args=[GeneratorExp(elt=Name(id='p', ctx=Load()), generators=[comprehension(target=Name(id='p', ctx=Store()), iter=Attribute(value=Name(id='prober', ctx=Load()), attr='probers', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='probers', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='prober', ctx=Load())], keywords=[]))])], orelse=[]), For(target=Name(id='prober', ctx=Store()), iter=Name(id='probers', ctx=Load()), body=[If(test=BoolOp(op=Or(), values=[Name(id='ignore_threshold', ctx=Load()), Compare(left=Call(func=Attribute(value=Name(id='prober', ctx=Load()), attr='get_confidence', ctx=Load()), args=[], keywords=[]), ops=[Gt()], comparators=[Attribute(value=Name(id='detector', ctx=Load()), attr='MINIMUM_THRESHOLD', ctx=Load())])]), body=[Assign(targets=[Name(id='charset_name', ctx=Store())], value=BoolOp(op=Or(), values=[Attribute(value=Name(id='prober', ctx=Load()), attr='charset_name', ctx=Load()), Constant(value='')])), Assign(targets=[Name(id='lower_charset_name', ctx=Store())], value=Call(func=Attribute(value=Name(id='charset_name', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])), If(test=BoolOp(op=And(), values=[Call(func=Attribute(value=Name(id='lower_charset_name', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='iso-8859')], keywords=[]), Attribute(value=Name(id='detector', ctx=Load()), attr='has_win_bytes', ctx=Load())]), body=[Assign(targets=[Name(id='charset_name', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='detector', ctx=Load()), attr='ISO_WIN_MAP', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='lower_charset_name', ctx=Load()), Name(id='charset_name', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='should_rename_legacy', ctx=Load()), body=[Assign(targets=[Name(id='charset_name', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='detector', ctx=Load()), attr='LEGACY_MAP', ctx=Load()), attr='get', ctx=Load()), args=[Call(func=Attribute(value=Name(id='charset_name', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), Name(id='charset_name', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='results', ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='encoding'), Constant(value='confidence'), Constant(value='language')], values=[Name(id='charset_name', ctx=Load()), Call(func=Attribute(value=Name(id='prober', ctx=Load()), attr='get_confidence', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='prober', ctx=Load()), attr='language', ctx=Load())])], keywords=[]))], orelse=[])], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='results', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=0)]), body=[Return(value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='results', ctx=Load())], keywords=[keyword(arg='key', value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='result')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=UnaryOp(op=USub(), operand=Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='confidence'), ctx=Load()))))]))], orelse=[])], orelse=[]), Return(value=List(elts=[Attribute(value=Name(id='detector', ctx=Load()), attr='result', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='ResultDict', ctx=Load()), ctx=Load()))], type_ignores=[])