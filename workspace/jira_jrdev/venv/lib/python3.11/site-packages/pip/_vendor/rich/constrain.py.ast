Module(body=[ImportFrom(module='typing', names=[alias(name='Optional'), alias(name='TYPE_CHECKING')], level=0), ImportFrom(module='jupyter', names=[alias(name='JupyterMixin')], level=1), ImportFrom(module='measure', names=[alias(name='Measurement')], level=1), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='console', names=[alias(name='Console'), alias(name='ConsoleOptions'), alias(name='RenderableType'), alias(name='RenderResult')], level=1)], orelse=[]), ClassDef(name='Constrain', bases=[Name(id='JupyterMixin', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Constrain the width of a renderable to a given number of characters.\n\n    Args:\n        renderable (RenderableType): A renderable object.\n        width (int, optional): The maximum width (in characters) to render. Defaults to 80.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='renderable', annotation=Constant(value='RenderableType')), arg(arg='width', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=80)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='renderable', ctx=Store())], value=Name(id='renderable', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='width', ctx=Store())], value=Name(id='width', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__rich_console__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='console', annotation=Constant(value='Console')), arg(arg='options', annotation=Constant(value='ConsoleOptions'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='width', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Expr(value=Yield(value=Attribute(value=Name(id='self', ctx=Load()), attr='renderable', ctx=Load())))], orelse=[Assign(targets=[Name(id='child_options', ctx=Store())], value=Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='update_width', ctx=Load()), args=[Call(func=Name(id='min', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='width', ctx=Load()), Attribute(value=Name(id='options', ctx=Load()), attr='max_width', ctx=Load())], keywords=[])], keywords=[])), Expr(value=YieldFrom(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='render', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='renderable', ctx=Load()), Name(id='child_options', ctx=Load())], keywords=[])))])], decorator_list=[], returns=Constant(value='RenderResult')), FunctionDef(name='__rich_measure__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='console', annotation=Constant(value='Console')), arg(arg='options', annotation=Constant(value='ConsoleOptions'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='width', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='options', ctx=Store())], value=Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='update_width', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='width', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='measurement', ctx=Store())], value=Call(func=Attribute(value=Name(id='Measurement', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='console', ctx=Load()), Name(id='options', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='renderable', ctx=Load())], keywords=[])), Return(value=Name(id='measurement', ctx=Load()))], decorator_list=[], returns=Constant(value='Measurement'))], decorator_list=[])], type_ignores=[])