Module(body=[Import(names=[alias(name='railroad')]), ImportFrom(module='pip._vendor', names=[alias(name='pyparsing')], level=0), Import(names=[alias(name='typing')]), ImportFrom(module='typing', names=[alias(name='List'), alias(name='NamedTuple'), alias(name='Generic'), alias(name='TypeVar'), alias(name='Dict'), alias(name='Callable'), alias(name='Set'), alias(name='Iterable')], level=0), ImportFrom(module='jinja2', names=[alias(name='Template')], level=0), ImportFrom(module='io', names=[alias(name='StringIO')], level=0), Import(names=[alias(name='inspect')]), Assign(targets=[Name(id='jinja2_template_source', ctx=Store())], value=Constant(value='{% if not embed %}\n<!DOCTYPE html>\n<html>\n<head>\n{% endif %}\n    {% if not head %}\n        <style>\n            .railroad-heading {\n                font-family: monospace;\n            }\n        </style>\n    {% else %}\n        {{ head | safe }}\n    {% endif %}\n{% if not embed %}\n</head>\n<body>\n{% endif %}\n{{ body | safe }}\n{% for diagram in diagrams %}\n    <div class="railroad-group">\n        <h1 class="railroad-heading">{{ diagram.title }}</h1>\n        <div class="railroad-description">{{ diagram.text }}</div>\n        <div class="railroad-svg">\n            {{ diagram.svg }}\n        </div>\n    </div>\n{% endfor %}\n{% if not embed %}\n</body>\n</html>\n{% endif %}\n')), Assign(targets=[Name(id='template', ctx=Store())], value=Call(func=Name(id='Template', ctx=Load()), args=[Name(id='jinja2_template_source', ctx=Load())], keywords=[])), Assign(targets=[Name(id='NamedDiagram', ctx=Store())], value=Call(func=Name(id='NamedTuple', ctx=Load()), args=[Constant(value='NamedDiagram'), List(elts=[Tuple(elts=[Constant(value='name'), Name(id='str', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='diagram'), Subscript(value=Attribute(value=Name(id='typing', ctx=Load()), attr='Optional', ctx=Load()), slice=Attribute(value=Name(id='railroad', ctx=Load()), attr='DiagramItem', ctx=Load()), ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='index'), Name(id='int', ctx=Load())], ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Constant(value='\nA simple structure for associating a name with a railroad diagram\n')), Assign(targets=[Name(id='T', ctx=Store())], value=Call(func=Name(id='TypeVar', ctx=Load()), args=[Constant(value='T')], keywords=[])), ClassDef(name='EachItem', bases=[Attribute(value=Name(id='railroad', ctx=Load()), attr='Group', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Custom railroad item to compose a:\n    - Group containing a\n      - OneOrMore containing a\n        - Choice of the elements in the Each\n    with the group label indicating that all must be matched\n    ')), Assign(targets=[Name(id='all_label', ctx=Store())], value=Constant(value='[ALL]')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='items'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='choice_item', ctx=Store())], value=Call(func=Attribute(value=Name(id='railroad', ctx=Load()), attr='Choice', ctx=Load()), args=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='items', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1)), Starred(value=Name(id='items', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='one_or_more_item', ctx=Store())], value=Call(func=Attribute(value=Name(id='railroad', ctx=Load()), attr='OneOrMore', ctx=Load()), args=[], keywords=[keyword(arg='item', value=Name(id='choice_item', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Name(id='one_or_more_item', ctx=Load())], keywords=[keyword(arg='label', value=Attribute(value=Name(id='self', ctx=Load()), attr='all_label', ctx=Load()))]))], decorator_list=[])], decorator_list=[]), ClassDef(name='AnnotatedItem', bases=[Attribute(value=Name(id='railroad', ctx=Load()), attr='Group', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Simple subclass of Group that creates an annotation label\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='label', annotation=Name(id='str', ctx=Load())), arg(arg='item')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='item', value=Name(id='item', ctx=Load())), keyword(arg='label', value=IfExp(test=Name(id='label', ctx=Load()), body=Call(func=Attribute(value=Constant(value='[{}]'), attr='format', ctx=Load()), args=[Name(id='label', ctx=Load())], keywords=[]), orelse=Name(id='label', ctx=Load())))]))], decorator_list=[])], decorator_list=[]), ClassDef(name='EditablePartial', bases=[Subscript(value=Name(id='Generic', ctx=Load()), slice=Name(id='T', ctx=Load()), ctx=Load())], keywords=[], body=[Expr(value=Constant(value="\n    Acts like a functools.partial, but can be edited. In other words, it represents a type that hasn't yet been\n    constructed.\n    ")), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='func', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Name(id='T', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='args', annotation=Name(id='list', ctx=Load())), arg(arg='kwargs', annotation=Name(id='dict', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='func', ctx=Store())], value=Name(id='func', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='args', ctx=Store())], value=Name(id='args', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='kwargs', ctx=Store())], value=Name(id='kwargs', ctx=Load()))], decorator_list=[]), FunctionDef(name='from_call', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='func', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Name(id='T', ctx=Load())], ctx=Load()), ctx=Load()))], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Constant(value='\n        If you call this function in the same way that you would call the constructor, it will store the arguments\n        as you expect. For example EditablePartial.from_call(Fraction, 1, 3)() == Fraction(1, 3)\n        ')), Return(value=Call(func=Name(id='EditablePartial', ctx=Load()), args=[], keywords=[keyword(arg='func', value=Name(id='func', ctx=Load())), keyword(arg='args', value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[])), keyword(arg='kwargs', value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Constant(value='EditablePartial[T]')), FunctionDef(name='name', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='kwargs', ctx=Load()), slice=Constant(value='name'), ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='__call__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Evaluate the partial and return the result\n        ')), Assign(targets=[Name(id='args', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='args', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='kwargs', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='kwargs', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='arg_spec', ctx=Store())], value=Call(func=Attribute(value=Name(id='inspect', ctx=Load()), attr='getfullargspec', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='func', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='arg_spec', ctx=Load()), attr='varargs', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='kwargs', ctx=Load())]), body=[AugAssign(target=Name(id='args', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='kwargs', ctx=Load()), attr='pop', ctx=Load()), args=[Attribute(value=Name(id='arg_spec', ctx=Load()), attr='varargs', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='func', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[], returns=Name(id='T', ctx=Load()))], decorator_list=[]), FunctionDef(name='railroad_to_html', args=arguments(posonlyargs=[], args=[arg(arg='diagrams', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='NamedDiagram', ctx=Load()), ctx=Load())), arg(arg='embed')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[Constant(value=False)]), body=[Expr(value=Constant(value='\n    Given a list of NamedDiagram, produce a single HTML string that visualises those diagrams\n    :params kwargs: kwargs to be passed in to the template\n    ')), Assign(targets=[Name(id='data', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='diagram', ctx=Store()), iter=Name(id='diagrams', ctx=Load()), body=[If(test=Compare(left=Attribute(value=Name(id='diagram', ctx=Load()), attr='diagram', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Continue()], orelse=[]), Assign(targets=[Name(id='io', ctx=Store())], value=Call(func=Name(id='StringIO', ctx=Load()), args=[], keywords=[])), Try(body=[Assign(targets=[Name(id='css', ctx=Store())], value=Call(func=Attribute(value=Name(id='kwargs', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='css')], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='diagram', ctx=Load()), attr='diagram', ctx=Load()), attr='writeStandalone', ctx=Load()), args=[Attribute(value=Name(id='io', ctx=Load()), attr='write', ctx=Load())], keywords=[keyword(arg='css', value=Name(id='css', ctx=Load()))]))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='diagram', ctx=Load()), attr='diagram', ctx=Load()), attr='writeSvg', ctx=Load()), args=[Attribute(value=Name(id='io', ctx=Load()), attr='write', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='title', ctx=Store())], value=Attribute(value=Name(id='diagram', ctx=Load()), attr='name', ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='diagram', ctx=Load()), attr='index', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[AugAssign(target=Name(id='title', ctx=Store()), op=Add(), value=Constant(value=' (root)'))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='title'), Constant(value='text'), Constant(value='svg')], values=[Name(id='title', ctx=Load()), Constant(value=''), Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='getvalue', ctx=Load()), args=[], keywords=[])])], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='template', ctx=Load()), attr='render', ctx=Load()), args=[], keywords=[keyword(arg='diagrams', value=Name(id='data', ctx=Load())), keyword(arg='embed', value=Name(id='embed', ctx=Load())), keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='resolve_partial', args=arguments(posonlyargs=[], args=[arg(arg='partial', annotation=Constant(value='EditablePartial[T]'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Recursively resolves a collection of Partials into whatever type they are\n    ')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='partial', ctx=Load()), Name(id='EditablePartial', ctx=Load())], keywords=[]), body=[Assign(targets=[Attribute(value=Name(id='partial', ctx=Load()), attr='args', ctx=Store())], value=Call(func=Name(id='resolve_partial', ctx=Load()), args=[Attribute(value=Name(id='partial', ctx=Load()), attr='args', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='partial', ctx=Load()), attr='kwargs', ctx=Store())], value=Call(func=Name(id='resolve_partial', ctx=Load()), args=[Attribute(value=Name(id='partial', ctx=Load()), attr='kwargs', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='partial', ctx=Load()), args=[], keywords=[]))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='partial', ctx=Load()), Name(id='list', ctx=Load())], keywords=[]), body=[Return(value=ListComp(elt=Call(func=Name(id='resolve_partial', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='partial', ctx=Load()), ifs=[], is_async=0)]))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='partial', ctx=Load()), Name(id='dict', ctx=Load())], keywords=[]), body=[Return(value=DictComp(key=Name(id='key', ctx=Load()), value=Call(func=Name(id='resolve_partial', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), generators=[comprehension(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='x', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='partial', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)]))], orelse=[Return(value=Name(id='partial', ctx=Load()))])])])], decorator_list=[], returns=Name(id='T', ctx=Load())), FunctionDef(name='to_railroad', args=arguments(posonlyargs=[], args=[arg(arg='element', annotation=Attribute(value=Name(id='pyparsing', ctx=Load()), attr='ParserElement', ctx=Load())), arg(arg='diagram_kwargs', annotation=Subscript(value=Attribute(value=Name(id='typing', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='dict', ctx=Load()), ctx=Load())), arg(arg='vertical', annotation=Name(id='int', ctx=Load())), arg(arg='show_results_names', annotation=Name(id='bool', ctx=Load())), arg(arg='show_groups', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=3), Constant(value=False), Constant(value=False)]), body=[Expr(value=Constant(value='\n    Convert a pyparsing element tree into a list of diagrams. This is the recommended entrypoint to diagram\n    creation if you want to access the Railroad tree before it is converted to HTML\n    :param element: base element of the parser being diagrammed\n    :param diagram_kwargs: kwargs to pass to the Diagram() constructor\n    :param vertical: (optional) - int - limit at which number of alternatives should be\n       shown vertically instead of horizontally\n    :param show_results_names - bool to indicate whether results name annotations should be\n       included in the diagram\n    :param show_groups - bool to indicate whether groups should be highlighted with an unlabeled\n       surrounding box\n    ')), Assign(targets=[Name(id='lookup', ctx=Store())], value=Call(func=Name(id='ConverterState', ctx=Load()), args=[], keywords=[keyword(arg='diagram_kwargs', value=BoolOp(op=Or(), values=[Name(id='diagram_kwargs', ctx=Load()), Dict(keys=[], values=[])]))])), Expr(value=Call(func=Name(id='_to_diagram_element', ctx=Load()), args=[Name(id='element', ctx=Load())], keywords=[keyword(arg='lookup', value=Name(id='lookup', ctx=Load())), keyword(arg='parent', value=Constant(value=None)), keyword(arg='vertical', value=Name(id='vertical', ctx=Load())), keyword(arg='show_results_names', value=Name(id='show_results_names', ctx=Load())), keyword(arg='show_groups', value=Name(id='show_groups', ctx=Load()))])), Assign(targets=[Name(id='root_id', ctx=Store())], value=Call(func=Name(id='id', ctx=Load()), args=[Name(id='element', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='root_id', ctx=Load()), ops=[In()], comparators=[Name(id='lookup', ctx=Load())]), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='element', ctx=Load()), attr='customName', ctx=Load())), body=[Assign(targets=[Attribute(value=Subscript(value=Name(id='lookup', ctx=Load()), slice=Name(id='root_id', ctx=Load()), ctx=Load()), attr='name', ctx=Store())], value=Constant(value=''))], orelse=[]), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='lookup', ctx=Load()), slice=Name(id='root_id', ctx=Load()), ctx=Load()), attr='mark_for_extraction', ctx=Load()), args=[Name(id='root_id', ctx=Load()), Name(id='lookup', ctx=Load())], keywords=[keyword(arg='force', value=Constant(value=True))]))], orelse=[]), Assign(targets=[Name(id='diags', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='lookup', ctx=Load()), attr='diagrams', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='diags', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='seen', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='deduped_diags', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='d', ctx=Store()), iter=Name(id='diags', ctx=Load()), body=[If(test=Compare(left=Attribute(value=Name(id='d', ctx=Load()), attr='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='...')]), body=[Continue()], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='d', ctx=Load()), attr='name', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='d', ctx=Load()), attr='name', ctx=Load()), ops=[NotIn()], comparators=[Name(id='seen', ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Name(id='seen', ctx=Load()), attr='add', ctx=Load()), args=[Attribute(value=Name(id='d', ctx=Load()), attr='name', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='deduped_diags', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='d', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='resolved', ctx=Store())], value=ListComp(elt=Call(func=Name(id='resolve_partial', ctx=Load()), args=[Name(id='partial', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='partial', ctx=Store()), iter=Name(id='deduped_diags', ctx=Load()), ifs=[], is_async=0)]))], orelse=[Assign(targets=[Name(id='resolved', ctx=Store())], value=ListComp(elt=Call(func=Name(id='resolve_partial', ctx=Load()), args=[Name(id='partial', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='partial', ctx=Store()), iter=Name(id='diags', ctx=Load()), ifs=[], is_async=0)]))]), Return(value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='resolved', ctx=Load())], keywords=[keyword(arg='key', value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='diag')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Attribute(value=Name(id='diag', ctx=Load()), attr='index', ctx=Load())))]))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='NamedDiagram', ctx=Load()), ctx=Load())), FunctionDef(name='_should_vertical', args=arguments(posonlyargs=[], args=[arg(arg='specification', annotation=Name(id='int', ctx=Load())), arg(arg='exprs', annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Attribute(value=Name(id='pyparsing', ctx=Load()), attr='ParserElement', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Returns true if we should return a vertical list of elements\n    ')), If(test=Compare(left=Name(id='specification', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=False))], orelse=[Return(value=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Name(id='_visible_exprs', ctx=Load()), args=[Name(id='exprs', ctx=Load())], keywords=[])], keywords=[]), ops=[GtE()], comparators=[Name(id='specification', ctx=Load())]))])], decorator_list=[], returns=Name(id='bool', ctx=Load())), ClassDef(name='ElementState', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    State recorded for an individual pyparsing Element\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='element', annotation=Attribute(value=Name(id='pyparsing', ctx=Load()), attr='ParserElement', ctx=Load())), arg(arg='converted', annotation=Name(id='EditablePartial', ctx=Load())), arg(arg='parent', annotation=Name(id='EditablePartial', ctx=Load())), arg(arg='number', annotation=Name(id='int', ctx=Load())), arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='parent_index', annotation=Subscript(value=Attribute(value=Name(id='typing', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='element', ctx=Store()), annotation=Attribute(value=Name(id='pyparsing', ctx=Load()), attr='ParserElement', ctx=Load()), value=Name(id='element', ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Store()), annotation=Subscript(value=Attribute(value=Name(id='typing', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Name(id='name', ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='converted', ctx=Store()), annotation=Name(id='EditablePartial', ctx=Load()), value=Name(id='converted', ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='parent', ctx=Store()), annotation=Name(id='EditablePartial', ctx=Load()), value=Name(id='parent', ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='number', ctx=Store()), annotation=Name(id='int', ctx=Load()), value=Name(id='number', ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='parent_index', ctx=Store()), annotation=Subscript(value=Attribute(value=Name(id='typing', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()), value=Name(id='parent_index', ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='extract', ctx=Store()), annotation=Name(id='bool', ctx=Load()), value=Constant(value=False), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='complete', ctx=Store()), annotation=Name(id='bool', ctx=Load()), value=Constant(value=False), simple=0)], decorator_list=[]), FunctionDef(name='mark_for_extraction', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='el_id', annotation=Name(id='int', ctx=Load())), arg(arg='state', annotation=Constant(value='ConverterState')), arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='force', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=False)]), body=[Expr(value=Constant(value="\n        Called when this instance has been seen twice, and thus should eventually be extracted into a sub-diagram\n        :param el_id: id of the element\n        :param state: element/diagram state tracker\n        :param name: name to use for this element's text\n        :param force: If true, force extraction now, regardless of the state of this. Only useful for extracting the\n        root element when we know we're finished\n        ")), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='extract', ctx=Store())], value=Constant(value=True)), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())), body=[If(test=Name(id='name', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Store())], value=Name(id='name', ctx=Load()))], orelse=[If(test=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='element', ctx=Load()), attr='customName', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='element', ctx=Load()), attr='customName', ctx=Load()))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Store())], value=Constant(value=''))])])], orelse=[]), If(test=BoolOp(op=Or(), values=[Name(id='force', ctx=Load()), BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='complete', ctx=Load()), Call(func=Name(id='_worth_extracting', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='element', ctx=Load())], keywords=[])])]), body=[Expr(value=Call(func=Attribute(value=Name(id='state', ctx=Load()), attr='extract_into_diagram', ctx=Load()), args=[Name(id='el_id', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[])], decorator_list=[]), ClassDef(name='ConverterState', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    Stores some state that persists between recursions into the element tree\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='diagram_kwargs', annotation=Subscript(value=Attribute(value=Name(id='typing', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='dict', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_element_diagram_states', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='ElementState', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='diagrams', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Subscript(value=Name(id='EditablePartial', ctx=Load()), slice=Name(id='NamedDiagram', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='unnamed_index', ctx=Store()), annotation=Name(id='int', ctx=Load()), value=Constant(value=1), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='index', ctx=Store()), annotation=Name(id='int', ctx=Load()), value=Constant(value=0), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='diagram_kwargs', ctx=Store()), annotation=Name(id='dict', ctx=Load()), value=BoolOp(op=Or(), values=[Name(id='diagram_kwargs', ctx=Load()), Dict(keys=[], values=[])]), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='extracted_diagram_names', ctx=Store()), annotation=Subscript(value=Name(id='Set', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[]), simple=0)], decorator_list=[]), FunctionDef(name='__setitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Name(id='int', ctx=Load())), arg(arg='value', annotation=Name(id='ElementState', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_element_diagram_states', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[]), FunctionDef(name='__getitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_element_diagram_states', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()))], decorator_list=[], returns=Name(id='ElementState', ctx=Load())), FunctionDef(name='__delitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Delete(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_element_diagram_states', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Del())])], decorator_list=[]), FunctionDef(name='__contains__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Compare(left=Name(id='key', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_element_diagram_states', ctx=Load())]))], decorator_list=[]), FunctionDef(name='generate_unnamed', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Generate a number used in the name of an otherwise unnamed diagram\n        ')), AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='unnamed_index', ctx=Store()), op=Add(), value=Constant(value=1)), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='unnamed_index', ctx=Load()))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='generate_index', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Generate a number used to index a diagram\n        ')), AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='index', ctx=Store()), op=Add(), value=Constant(value=1)), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='index', ctx=Load()))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='extract_into_diagram', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='el_id', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Used when we encounter the same token twice in the same tree. When this\n        happens, we replace all instances of that token with a terminal, and\n        create a new subdiagram for the token\n        ')), Assign(targets=[Name(id='position', ctx=Store())], value=Subscript(value=Name(id='self', ctx=Load()), slice=Name(id='el_id', ctx=Load()), ctx=Load())), If(test=Attribute(value=Name(id='position', ctx=Load()), attr='parent', ctx=Load()), body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='EditablePartial', ctx=Load()), attr='from_call', ctx=Load()), args=[Attribute(value=Name(id='railroad', ctx=Load()), attr='NonTerminal', ctx=Load())], keywords=[keyword(arg='text', value=Attribute(value=Name(id='position', ctx=Load()), attr='name', ctx=Load()))])), If(test=Compare(left=Constant(value='item'), ops=[In()], comparators=[Attribute(value=Attribute(value=Name(id='position', ctx=Load()), attr='parent', ctx=Load()), attr='kwargs', ctx=Load())]), body=[Assign(targets=[Subscript(value=Attribute(value=Attribute(value=Name(id='position', ctx=Load()), attr='parent', ctx=Load()), attr='kwargs', ctx=Load()), slice=Constant(value='item'), ctx=Store())], value=Name(id='ret', ctx=Load()))], orelse=[If(test=Compare(left=Constant(value='items'), ops=[In()], comparators=[Attribute(value=Attribute(value=Name(id='position', ctx=Load()), attr='parent', ctx=Load()), attr='kwargs', ctx=Load())]), body=[Assign(targets=[Subscript(value=Subscript(value=Attribute(value=Attribute(value=Name(id='position', ctx=Load()), attr='parent', ctx=Load()), attr='kwargs', ctx=Load()), slice=Constant(value='items'), ctx=Load()), slice=Attribute(value=Name(id='position', ctx=Load()), attr='parent_index', ctx=Load()), ctx=Store())], value=Name(id='ret', ctx=Load()))], orelse=[])])], orelse=[]), If(test=Compare(left=Attribute(value=Attribute(value=Name(id='position', ctx=Load()), attr='converted', ctx=Load()), attr='func', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='railroad', ctx=Load()), attr='Group', ctx=Load())]), body=[Assign(targets=[Name(id='content', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='position', ctx=Load()), attr='converted', ctx=Load()), attr='kwargs', ctx=Load()), slice=Constant(value='item'), ctx=Load()))], orelse=[Assign(targets=[Name(id='content', ctx=Store())], value=Attribute(value=Name(id='position', ctx=Load()), attr='converted', ctx=Load()))]), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='diagrams', ctx=Load()), slice=Name(id='el_id', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Name(id='EditablePartial', ctx=Load()), attr='from_call', ctx=Load()), args=[Name(id='NamedDiagram', ctx=Load())], keywords=[keyword(arg='name', value=Attribute(value=Name(id='position', ctx=Load()), attr='name', ctx=Load())), keyword(arg='diagram', value=Call(func=Attribute(value=Name(id='EditablePartial', ctx=Load()), attr='from_call', ctx=Load()), args=[Attribute(value=Name(id='railroad', ctx=Load()), attr='Diagram', ctx=Load()), Name(id='content', ctx=Load())], keywords=[keyword(value=Attribute(value=Name(id='self', ctx=Load()), attr='diagram_kwargs', ctx=Load()))])), keyword(arg='index', value=Attribute(value=Name(id='position', ctx=Load()), attr='number', ctx=Load()))])), Delete(targets=[Subscript(value=Name(id='self', ctx=Load()), slice=Name(id='el_id', ctx=Load()), ctx=Del())])], decorator_list=[])], decorator_list=[]), FunctionDef(name='_worth_extracting', args=arguments(posonlyargs=[], args=[arg(arg='element', annotation=Attribute(value=Name(id='pyparsing', ctx=Load()), attr='ParserElement', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Returns true if this element is worth having its own sub-diagram. Simply, if any of its children\n    themselves have children, then its complex enough to extract\n    ')), Assign(targets=[Name(id='children', ctx=Store())], value=Call(func=Attribute(value=Name(id='element', ctx=Load()), attr='recurse', ctx=Load()), args=[], keywords=[])), Return(value=Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='child', ctx=Load()), attr='recurse', ctx=Load()), args=[], keywords=[]), generators=[comprehension(target=Name(id='child', ctx=Store()), iter=Name(id='children', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='_apply_diagram_item_enhancements', args=arguments(posonlyargs=[], args=[arg(arg='fn')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    decorator to ensure enhancements to a diagram item (such as results name annotations)\n    get applied on return from _to_diagram_element (we do this since there are several\n    returns in _to_diagram_element)\n    ')), FunctionDef(name='_inner', args=arguments(posonlyargs=[], args=[arg(arg='element', annotation=Attribute(value=Name(id='pyparsing', ctx=Load()), attr='ParserElement', ctx=Load())), arg(arg='parent', annotation=Subscript(value=Attribute(value=Name(id='typing', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='EditablePartial', ctx=Load()), ctx=Load())), arg(arg='lookup', annotation=Name(id='ConverterState', ctx=Load())), arg(arg='vertical', annotation=Name(id='int', ctx=Load())), arg(arg='index', annotation=Name(id='int', ctx=Load())), arg(arg='name_hint', annotation=Name(id='str', ctx=Load())), arg(arg='show_results_names', annotation=Name(id='bool', ctx=Load())), arg(arg='show_groups', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=0), Constant(value=None), Constant(value=False), Constant(value=False)]), body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Name(id='fn', ctx=Load()), args=[Name(id='element', ctx=Load()), Name(id='parent', ctx=Load()), Name(id='lookup', ctx=Load()), Name(id='vertical', ctx=Load()), Name(id='index', ctx=Load()), Name(id='name_hint', ctx=Load()), Name(id='show_results_names', ctx=Load()), Name(id='show_groups', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Name(id='show_results_names', ctx=Load()), Compare(left=Name(id='ret', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Name(id='element_results_name', ctx=Store())], value=Attribute(value=Name(id='element', ctx=Load()), attr='resultsName', ctx=Load())), If(test=Name(id='element_results_name', ctx=Load()), body=[AugAssign(target=Name(id='element_results_name', ctx=Store()), op=Add(), value=IfExp(test=Attribute(value=Name(id='element', ctx=Load()), attr='modalResults', ctx=Load()), body=Constant(value=''), orelse=Constant(value='*'))), Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='EditablePartial', ctx=Load()), attr='from_call', ctx=Load()), args=[Attribute(value=Name(id='railroad', ctx=Load()), attr='Group', ctx=Load())], keywords=[keyword(arg='item', value=Name(id='ret', ctx=Load())), keyword(arg='label', value=Name(id='element_results_name', ctx=Load()))]))], orelse=[])], orelse=[]), Return(value=Name(id='ret', ctx=Load()))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='typing', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='EditablePartial', ctx=Load()), ctx=Load())), Return(value=Name(id='_inner', ctx=Load()))], decorator_list=[]), FunctionDef(name='_visible_exprs', args=arguments(posonlyargs=[], args=[arg(arg='exprs', annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Attribute(value=Name(id='pyparsing', ctx=Load()), attr='ParserElement', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='non_diagramming_exprs', ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='pyparsing', ctx=Load()), attr='ParseElementEnhance', ctx=Load()), Attribute(value=Name(id='pyparsing', ctx=Load()), attr='PositionToken', ctx=Load()), Attribute(value=Attribute(value=Name(id='pyparsing', ctx=Load()), attr='And', ctx=Load()), attr='_ErrorStop', ctx=Load())], ctx=Load())), Return(value=ListComp(elt=Name(id='e', ctx=Load()), generators=[comprehension(target=Name(id='e', ctx=Store()), iter=Name(id='exprs', ctx=Load()), ifs=[UnaryOp(op=Not(), operand=BoolOp(op=Or(), values=[Attribute(value=Name(id='e', ctx=Load()), attr='customName', ctx=Load()), Attribute(value=Name(id='e', ctx=Load()), attr='resultsName', ctx=Load()), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='e', ctx=Load()), Name(id='non_diagramming_exprs', ctx=Load())], keywords=[])]))], is_async=0)]))], decorator_list=[]), FunctionDef(name='_to_diagram_element', args=arguments(posonlyargs=[], args=[arg(arg='element', annotation=Attribute(value=Name(id='pyparsing', ctx=Load()), attr='ParserElement', ctx=Load())), arg(arg='parent', annotation=Subscript(value=Attribute(value=Name(id='typing', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='EditablePartial', ctx=Load()), ctx=Load())), arg(arg='lookup', annotation=Name(id='ConverterState', ctx=Load())), arg(arg='vertical', annotation=Name(id='int', ctx=Load())), arg(arg='index', annotation=Name(id='int', ctx=Load())), arg(arg='name_hint', annotation=Name(id='str', ctx=Load())), arg(arg='show_results_names', annotation=Name(id='bool', ctx=Load())), arg(arg='show_groups', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=0), Constant(value=None), Constant(value=False), Constant(value=False)]), body=[Expr(value=Constant(value="\n    Recursively converts a PyParsing Element to a railroad Element\n    :param lookup: The shared converter state that keeps track of useful things\n    :param index: The index of this element within the parent\n    :param parent: The parent of this element in the output tree\n    :param vertical: Controls at what point we make a list of elements vertical. If this is an integer (the default),\n    it sets the threshold of the number of items before we go vertical. If True, always go vertical, if False, never\n    do so\n    :param name_hint: If provided, this will override the generated name\n    :param show_results_names: bool flag indicating whether to add annotations for results names\n    :returns: The converted version of the input element, but as a Partial that hasn't yet been constructed\n    :param show_groups: bool flag indicating whether to show groups using bounding box\n    ")), Assign(targets=[Name(id='exprs', ctx=Store())], value=Call(func=Attribute(value=Name(id='element', ctx=Load()), attr='recurse', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='name', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='name_hint', ctx=Load()), Attribute(value=Name(id='element', ctx=Load()), attr='customName', ctx=Load()), Attribute(value=Attribute(value=Name(id='element', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load())])), Assign(targets=[Name(id='el_id', ctx=Store())], value=Call(func=Name(id='id', ctx=Load()), args=[Name(id='element', ctx=Load())], keywords=[])), Assign(targets=[Name(id='element_results_name', ctx=Store())], value=Attribute(value=Name(id='element', ctx=Load()), attr='resultsName', ctx=Load())), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='element', ctx=Load()), attr='customName', ctx=Load())), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='element', ctx=Load()), Tuple(elts=[Attribute(value=Name(id='pyparsing', ctx=Load()), attr='Located', ctx=Load())], ctx=Load())], keywords=[]), body=[If(test=Name(id='exprs', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Subscript(value=Name(id='exprs', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='customName', ctx=Load())), body=[Assign(targets=[Name(id='propagated_name', ctx=Store())], value=Name(id='name', ctx=Load()))], orelse=[Assign(targets=[Name(id='propagated_name', ctx=Store())], value=Constant(value=None))]), Return(value=Call(func=Name(id='_to_diagram_element', ctx=Load()), args=[Attribute(value=Name(id='element', ctx=Load()), attr='expr', ctx=Load())], keywords=[keyword(arg='parent', value=Name(id='parent', ctx=Load())), keyword(arg='lookup', value=Name(id='lookup', ctx=Load())), keyword(arg='vertical', value=Name(id='vertical', ctx=Load())), keyword(arg='index', value=Name(id='index', ctx=Load())), keyword(arg='name_hint', value=Name(id='propagated_name', ctx=Load())), keyword(arg='show_results_names', value=Name(id='show_results_names', ctx=Load())), keyword(arg='show_groups', value=Name(id='show_groups', ctx=Load()))]))], orelse=[])], orelse=[])], orelse=[]), If(test=Call(func=Name(id='_worth_extracting', ctx=Load()), args=[Name(id='element', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='el_id', ctx=Load()), ops=[In()], comparators=[Name(id='lookup', ctx=Load())]), body=[Assign(targets=[Name(id='looked_up', ctx=Store())], value=Subscript(value=Name(id='lookup', ctx=Load()), slice=Name(id='el_id', ctx=Load()), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='looked_up', ctx=Load()), attr='mark_for_extraction', ctx=Load()), args=[Name(id='el_id', ctx=Load()), Name(id='lookup', ctx=Load())], keywords=[keyword(arg='name', value=Name(id='name_hint', ctx=Load()))])), Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='EditablePartial', ctx=Load()), attr='from_call', ctx=Load()), args=[Attribute(value=Name(id='railroad', ctx=Load()), attr='NonTerminal', ctx=Load())], keywords=[keyword(arg='text', value=Attribute(value=Name(id='looked_up', ctx=Load()), attr='name', ctx=Load()))])), Return(value=Name(id='ret', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='el_id', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='lookup', ctx=Load()), attr='diagrams', ctx=Load())]), body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='EditablePartial', ctx=Load()), attr='from_call', ctx=Load()), args=[Attribute(value=Name(id='railroad', ctx=Load()), attr='NonTerminal', ctx=Load())], keywords=[keyword(arg='text', value=Subscript(value=Attribute(value=Subscript(value=Attribute(value=Name(id='lookup', ctx=Load()), attr='diagrams', ctx=Load()), slice=Name(id='el_id', ctx=Load()), ctx=Load()), attr='kwargs', ctx=Load()), slice=Constant(value='name'), ctx=Load()))])), Return(value=Name(id='ret', ctx=Load()))], orelse=[])])], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='element', ctx=Load()), Attribute(value=Name(id='pyparsing', ctx=Load()), attr='And', ctx=Load())], keywords=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='exprs', ctx=Load())), body=[Return(value=Constant(value=None))], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[GeneratorExp(elt=Tuple(elts=[Attribute(value=Name(id='e', ctx=Load()), attr='name', ctx=Load()), Attribute(value=Name(id='e', ctx=Load()), attr='resultsName', ctx=Load())], ctx=Load()), generators=[comprehension(target=Name(id='e', ctx=Store()), iter=Name(id='exprs', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='EditablePartial', ctx=Load()), attr='from_call', ctx=Load()), args=[Attribute(value=Name(id='railroad', ctx=Load()), attr='OneOrMore', ctx=Load())], keywords=[keyword(arg='item', value=Constant(value='')), keyword(arg='repeat', value=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='exprs', ctx=Load())], keywords=[])], keywords=[]))]))], orelse=[If(test=Call(func=Name(id='_should_vertical', ctx=Load()), args=[Name(id='vertical', ctx=Load()), Name(id='exprs', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='EditablePartial', ctx=Load()), attr='from_call', ctx=Load()), args=[Attribute(value=Name(id='railroad', ctx=Load()), attr='Stack', ctx=Load())], keywords=[keyword(arg='items', value=List(elts=[], ctx=Load()))]))], orelse=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='EditablePartial', ctx=Load()), attr='from_call', ctx=Load()), args=[Attribute(value=Name(id='railroad', ctx=Load()), attr='Sequence', ctx=Load())], keywords=[keyword(arg='items', value=List(elts=[], ctx=Load()))]))])])], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='element', ctx=Load()), Tuple(elts=[Attribute(value=Name(id='pyparsing', ctx=Load()), attr='Or', ctx=Load()), Attribute(value=Name(id='pyparsing', ctx=Load()), attr='MatchFirst', ctx=Load())], ctx=Load())], keywords=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='exprs', ctx=Load())), body=[Return(value=Constant(value=None))], orelse=[]), If(test=Call(func=Name(id='_should_vertical', ctx=Load()), args=[Name(id='vertical', ctx=Load()), Name(id='exprs', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='EditablePartial', ctx=Load()), attr='from_call', ctx=Load()), args=[Attribute(value=Name(id='railroad', ctx=Load()), attr='Choice', ctx=Load()), Constant(value=0)], keywords=[keyword(arg='items', value=List(elts=[], ctx=Load()))]))], orelse=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='EditablePartial', ctx=Load()), attr='from_call', ctx=Load()), args=[Attribute(value=Name(id='railroad', ctx=Load()), attr='HorizontalChoice', ctx=Load())], keywords=[keyword(arg='items', value=List(elts=[], ctx=Load()))]))])], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='element', ctx=Load()), Attribute(value=Name(id='pyparsing', ctx=Load()), attr='Each', ctx=Load())], keywords=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='exprs', ctx=Load())), body=[Return(value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='EditablePartial', ctx=Load()), attr='from_call', ctx=Load()), args=[Name(id='EachItem', ctx=Load())], keywords=[keyword(arg='items', value=List(elts=[], ctx=Load()))]))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='element', ctx=Load()), Attribute(value=Name(id='pyparsing', ctx=Load()), attr='NotAny', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='EditablePartial', ctx=Load()), attr='from_call', ctx=Load()), args=[Name(id='AnnotatedItem', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='NOT')), keyword(arg='item', value=Constant(value=''))]))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='element', ctx=Load()), Attribute(value=Name(id='pyparsing', ctx=Load()), attr='FollowedBy', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='EditablePartial', ctx=Load()), attr='from_call', ctx=Load()), args=[Name(id='AnnotatedItem', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='LOOKAHEAD')), keyword(arg='item', value=Constant(value=''))]))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='element', ctx=Load()), Attribute(value=Name(id='pyparsing', ctx=Load()), attr='PrecededBy', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='EditablePartial', ctx=Load()), attr='from_call', ctx=Load()), args=[Name(id='AnnotatedItem', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='LOOKBEHIND')), keyword(arg='item', value=Constant(value=''))]))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='element', ctx=Load()), Attribute(value=Name(id='pyparsing', ctx=Load()), attr='Group', ctx=Load())], keywords=[]), body=[If(test=Name(id='show_groups', ctx=Load()), body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='EditablePartial', ctx=Load()), attr='from_call', ctx=Load()), args=[Name(id='AnnotatedItem', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='')), keyword(arg='item', value=Constant(value=''))]))], orelse=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='EditablePartial', ctx=Load()), attr='from_call', ctx=Load()), args=[Attribute(value=Name(id='railroad', ctx=Load()), attr='Group', ctx=Load())], keywords=[keyword(arg='label', value=Constant(value='')), keyword(arg='item', value=Constant(value=''))]))])], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='element', ctx=Load()), Attribute(value=Name(id='pyparsing', ctx=Load()), attr='TokenConverter', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='label', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='element', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='label', ctx=Load()), ops=[Eq()], comparators=[Constant(value='tokenconverter')]), body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='EditablePartial', ctx=Load()), attr='from_call', ctx=Load()), args=[Attribute(value=Name(id='railroad', ctx=Load()), attr='Sequence', ctx=Load())], keywords=[keyword(arg='items', value=List(elts=[], ctx=Load()))]))], orelse=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='EditablePartial', ctx=Load()), attr='from_call', ctx=Load()), args=[Name(id='AnnotatedItem', ctx=Load())], keywords=[keyword(arg='label', value=Name(id='label', ctx=Load())), keyword(arg='item', value=Constant(value=''))]))])], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='element', ctx=Load()), Attribute(value=Name(id='pyparsing', ctx=Load()), attr='Opt', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='EditablePartial', ctx=Load()), attr='from_call', ctx=Load()), args=[Attribute(value=Name(id='railroad', ctx=Load()), attr='Optional', ctx=Load())], keywords=[keyword(arg='item', value=Constant(value=''))]))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='element', ctx=Load()), Attribute(value=Name(id='pyparsing', ctx=Load()), attr='OneOrMore', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='EditablePartial', ctx=Load()), attr='from_call', ctx=Load()), args=[Attribute(value=Name(id='railroad', ctx=Load()), attr='OneOrMore', ctx=Load())], keywords=[keyword(arg='item', value=Constant(value=''))]))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='element', ctx=Load()), Attribute(value=Name(id='pyparsing', ctx=Load()), attr='ZeroOrMore', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='EditablePartial', ctx=Load()), attr='from_call', ctx=Load()), args=[Attribute(value=Name(id='railroad', ctx=Load()), attr='ZeroOrMore', ctx=Load())], keywords=[keyword(arg='item', value=Constant(value=''))]))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='element', ctx=Load()), Attribute(value=Name(id='pyparsing', ctx=Load()), attr='Group', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='EditablePartial', ctx=Load()), attr='from_call', ctx=Load()), args=[Attribute(value=Name(id='railroad', ctx=Load()), attr='Group', ctx=Load())], keywords=[keyword(arg='item', value=Constant(value=None)), keyword(arg='label', value=Name(id='element_results_name', ctx=Load()))]))], orelse=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='element', ctx=Load()), Attribute(value=Name(id='pyparsing', ctx=Load()), attr='Empty', ctx=Load())], keywords=[]), UnaryOp(op=Not(), operand=Attribute(value=Name(id='element', ctx=Load()), attr='customName', ctx=Load()))]), body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Constant(value=None))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='element', ctx=Load()), Attribute(value=Name(id='pyparsing', ctx=Load()), attr='ParseElementEnhance', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='EditablePartial', ctx=Load()), attr='from_call', ctx=Load()), args=[Attribute(value=Name(id='railroad', ctx=Load()), attr='Sequence', ctx=Load())], keywords=[keyword(arg='items', value=List(elts=[], ctx=Load()))]))], orelse=[If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='exprs', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=0)]), UnaryOp(op=Not(), operand=Name(id='element_results_name', ctx=Load()))]), body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='EditablePartial', ctx=Load()), attr='from_call', ctx=Load()), args=[Attribute(value=Name(id='railroad', ctx=Load()), attr='Group', ctx=Load())], keywords=[keyword(arg='item', value=Constant(value='')), keyword(arg='label', value=Name(id='name', ctx=Load()))]))], orelse=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='exprs', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='EditablePartial', ctx=Load()), attr='from_call', ctx=Load()), args=[Attribute(value=Name(id='railroad', ctx=Load()), attr='Sequence', ctx=Load())], keywords=[keyword(arg='items', value=List(elts=[], ctx=Load()))]))], orelse=[Assign(targets=[Name(id='terminal', ctx=Store())], value=Call(func=Attribute(value=Name(id='EditablePartial', ctx=Load()), attr='from_call', ctx=Load()), args=[Attribute(value=Name(id='railroad', ctx=Load()), attr='Terminal', ctx=Load()), Attribute(value=Name(id='element', ctx=Load()), attr='defaultName', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ret', ctx=Store())], value=Name(id='terminal', ctx=Load()))])])])])])])])])])])])])])])])]), If(test=Compare(left=Name(id='ret', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return()], orelse=[]), Assign(targets=[Subscript(value=Name(id='lookup', ctx=Load()), slice=Name(id='el_id', ctx=Load()), ctx=Store())], value=Call(func=Name(id='ElementState', ctx=Load()), args=[], keywords=[keyword(arg='element', value=Name(id='element', ctx=Load())), keyword(arg='converted', value=Name(id='ret', ctx=Load())), keyword(arg='parent', value=Name(id='parent', ctx=Load())), keyword(arg='parent_index', value=Name(id='index', ctx=Load())), keyword(arg='number', value=Call(func=Attribute(value=Name(id='lookup', ctx=Load()), attr='generate_index', ctx=Load()), args=[], keywords=[]))])), If(test=Attribute(value=Name(id='element', ctx=Load()), attr='customName', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='lookup', ctx=Load()), slice=Name(id='el_id', ctx=Load()), ctx=Load()), attr='mark_for_extraction', ctx=Load()), args=[Name(id='el_id', ctx=Load()), Name(id='lookup', ctx=Load()), Attribute(value=Name(id='element', ctx=Load()), attr='customName', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='i', ctx=Store())], value=Constant(value=0)), For(target=Name(id='expr', ctx=Store()), iter=Name(id='exprs', ctx=Load()), body=[If(test=Compare(left=Constant(value='items'), ops=[In()], comparators=[Attribute(value=Name(id='ret', ctx=Load()), attr='kwargs', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='ret', ctx=Load()), attr='kwargs', ctx=Load()), slice=Constant(value='items'), ctx=Load()), attr='insert', ctx=Load()), args=[Name(id='i', ctx=Load()), Constant(value=None)], keywords=[]))], orelse=[]), Assign(targets=[Name(id='item', ctx=Store())], value=Call(func=Name(id='_to_diagram_element', ctx=Load()), args=[Name(id='expr', ctx=Load())], keywords=[keyword(arg='parent', value=Name(id='ret', ctx=Load())), keyword(arg='lookup', value=Name(id='lookup', ctx=Load())), keyword(arg='vertical', value=Name(id='vertical', ctx=Load())), keyword(arg='index', value=Name(id='i', ctx=Load())), keyword(arg='show_results_names', value=Name(id='show_results_names', ctx=Load())), keyword(arg='show_groups', value=Name(id='show_groups', ctx=Load()))])), If(test=Compare(left=Name(id='item', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[If(test=Compare(left=Constant(value='item'), ops=[In()], comparators=[Attribute(value=Name(id='ret', ctx=Load()), attr='kwargs', ctx=Load())]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='ret', ctx=Load()), attr='kwargs', ctx=Load()), slice=Constant(value='item'), ctx=Store())], value=Name(id='item', ctx=Load()))], orelse=[If(test=Compare(left=Constant(value='items'), ops=[In()], comparators=[Attribute(value=Name(id='ret', ctx=Load()), attr='kwargs', ctx=Load())]), body=[Assign(targets=[Subscript(value=Subscript(value=Attribute(value=Name(id='ret', ctx=Load()), attr='kwargs', ctx=Load()), slice=Constant(value='items'), ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Store())], value=Name(id='item', ctx=Load())), AugAssign(target=Name(id='i', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])])], orelse=[If(test=Compare(left=Constant(value='items'), ops=[In()], comparators=[Attribute(value=Name(id='ret', ctx=Load()), attr='kwargs', ctx=Load())]), body=[Delete(targets=[Subscript(value=Subscript(value=Attribute(value=Name(id='ret', ctx=Load()), attr='kwargs', ctx=Load()), slice=Constant(value='items'), ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Del())])], orelse=[])])], orelse=[]), If(test=BoolOp(op=And(), values=[Name(id='ret', ctx=Load()), BoolOp(op=Or(), values=[BoolOp(op=And(), values=[Compare(left=Constant(value='items'), ops=[In()], comparators=[Attribute(value=Name(id='ret', ctx=Load()), attr='kwargs', ctx=Load())]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='ret', ctx=Load()), attr='kwargs', ctx=Load()), slice=Constant(value='items'), ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)])]), BoolOp(op=And(), values=[Compare(left=Constant(value='item'), ops=[In()], comparators=[Attribute(value=Name(id='ret', ctx=Load()), attr='kwargs', ctx=Load())]), Compare(left=Subscript(value=Attribute(value=Name(id='ret', ctx=Load()), attr='kwargs', ctx=Load()), slice=Constant(value='item'), ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])])])]), body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='EditablePartial', ctx=Load()), attr='from_call', ctx=Load()), args=[Attribute(value=Name(id='railroad', ctx=Load()), attr='Terminal', ctx=Load()), Name(id='name', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='el_id', ctx=Load()), ops=[In()], comparators=[Name(id='lookup', ctx=Load())]), body=[Assign(targets=[Attribute(value=Subscript(value=Name(id='lookup', ctx=Load()), slice=Name(id='el_id', ctx=Load()), ctx=Load()), attr='complete', ctx=Store())], value=Constant(value=True))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='el_id', ctx=Load()), ops=[In()], comparators=[Name(id='lookup', ctx=Load())]), Attribute(value=Subscript(value=Name(id='lookup', ctx=Load()), slice=Name(id='el_id', ctx=Load()), ctx=Load()), attr='extract', ctx=Load()), Attribute(value=Subscript(value=Name(id='lookup', ctx=Load()), slice=Name(id='el_id', ctx=Load()), ctx=Load()), attr='complete', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='lookup', ctx=Load()), attr='extract_into_diagram', ctx=Load()), args=[Name(id='el_id', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='ret', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='EditablePartial', ctx=Load()), attr='from_call', ctx=Load()), args=[Attribute(value=Name(id='railroad', ctx=Load()), attr='NonTerminal', ctx=Load())], keywords=[keyword(arg='text', value=Subscript(value=Attribute(value=Subscript(value=Attribute(value=Name(id='lookup', ctx=Load()), attr='diagrams', ctx=Load()), slice=Name(id='el_id', ctx=Load()), ctx=Load()), attr='kwargs', ctx=Load()), slice=Constant(value='name'), ctx=Load()))]))], orelse=[])], orelse=[]), Return(value=Name(id='ret', ctx=Load()))], decorator_list=[Name(id='_apply_diagram_item_enhancements', ctx=Load())], returns=Subscript(value=Attribute(value=Name(id='typing', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='EditablePartial', ctx=Load()), ctx=Load()))], type_ignores=[])