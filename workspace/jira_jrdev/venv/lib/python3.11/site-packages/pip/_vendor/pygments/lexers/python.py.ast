Module(body=[Expr(value=Constant(value='\n    pygments.lexers.python\n    ~~~~~~~~~~~~~~~~~~~~~~\n\n    Lexers for Python and related languages.\n\n    :copyright: Copyright 2006-2023 by the Pygments team, see AUTHORS.\n    :license: BSD, see LICENSE for details.\n')), Import(names=[alias(name='re')]), Import(names=[alias(name='keyword')]), ImportFrom(module='pip._vendor.pygments.lexer', names=[alias(name='DelegatingLexer'), alias(name='Lexer'), alias(name='RegexLexer'), alias(name='include'), alias(name='bygroups'), alias(name='using'), alias(name='default'), alias(name='words'), alias(name='combined'), alias(name='do_insertions'), alias(name='this'), alias(name='line_re')], level=0), ImportFrom(module='pip._vendor.pygments.util', names=[alias(name='get_bool_opt'), alias(name='shebang_matches')], level=0), ImportFrom(module='pip._vendor.pygments.token', names=[alias(name='Text'), alias(name='Comment'), alias(name='Operator'), alias(name='Keyword'), alias(name='Name'), alias(name='String'), alias(name='Number'), alias(name='Punctuation'), alias(name='Generic'), alias(name='Other'), alias(name='Error'), alias(name='Whitespace')], level=0), ImportFrom(module='pip._vendor.pygments', names=[alias(name='unistring', asname='uni')], level=0), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='PythonLexer'), Constant(value='PythonConsoleLexer'), Constant(value='PythonTracebackLexer'), Constant(value='Python2Lexer'), Constant(value='Python2TracebackLexer'), Constant(value='CythonLexer'), Constant(value='DgLexer'), Constant(value='NumPyLexer')], ctx=Load())), ClassDef(name='PythonLexer', bases=[Name(id='RegexLexer', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    For Python source code (version 3.x).\n\n    .. versionadded:: 0.10\n\n    .. versionchanged:: 2.5\n       This is now the default ``PythonLexer``.  It is still available as the\n       alias ``Python3Lexer``.\n    ')), Assign(targets=[Name(id='name', ctx=Store())], value=Constant(value='Python')), Assign(targets=[Name(id='url', ctx=Store())], value=Constant(value='http://www.python.org')), Assign(targets=[Name(id='aliases', ctx=Store())], value=List(elts=[Constant(value='python'), Constant(value='py'), Constant(value='sage'), Constant(value='python3'), Constant(value='py3')], ctx=Load())), Assign(targets=[Name(id='filenames', ctx=Store())], value=List(elts=[Constant(value='*.py'), Constant(value='*.pyw'), Constant(value='*.pyi'), Constant(value='*.jy'), Constant(value='*.sage'), Constant(value='*.sc'), Constant(value='SConstruct'), Constant(value='SConscript'), Constant(value='*.bzl'), Constant(value='BUCK'), Constant(value='BUILD'), Constant(value='BUILD.bazel'), Constant(value='WORKSPACE'), Constant(value='*.tac')], ctx=Load())), Assign(targets=[Name(id='mimetypes', ctx=Store())], value=List(elts=[Constant(value='text/x-python'), Constant(value='application/x-python'), Constant(value='text/x-python3'), Constant(value='application/x-python3')], ctx=Load())), Assign(targets=[Name(id='uni_name', ctx=Store())], value=BinOp(left=Constant(value='[%s][%s]*'), op=Mod(), right=Tuple(elts=[Attribute(value=Name(id='uni', ctx=Load()), attr='xid_start', ctx=Load()), Attribute(value=Name(id='uni', ctx=Load()), attr='xid_continue', ctx=Load())], ctx=Load()))), FunctionDef(name='innerstring_rules', args=arguments(posonlyargs=[], args=[arg(arg='ttype')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=List(elts=[Tuple(elts=[Constant(value='%(\\(\\w+\\))?[-#0 +]*([0-9]+|[*])?(\\.([0-9]+|[*]))?[hlL]?[E-GXc-giorsaux%]'), Attribute(value=Name(id='String', ctx=Load()), attr='Interpol', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='\\{((\\w+)((\\.\\w+)|(\\[[^\\]]+\\]))*)?(\\![sra])?(\\:(.?[<>=\\^])?[-+ ]?#?0?(\\d+)?,?(\\.\\d+)?[E-GXb-gnosx%]?)?\\}'), Attribute(value=Name(id='String', ctx=Load()), attr='Interpol', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='[^\\\\\\\'"%{\\n]+'), Name(id='ttype', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='[\\\'"\\\\]'), Name(id='ttype', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='%|(\\{{1,2})'), Name(id='ttype', ctx=Load())], ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='fstring_rules', args=arguments(posonlyargs=[], args=[arg(arg='ttype')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=List(elts=[Tuple(elts=[Constant(value='\\}'), Attribute(value=Name(id='String', ctx=Load()), attr='Interpol', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='\\{'), Attribute(value=Name(id='String', ctx=Load()), attr='Interpol', ctx=Load()), Constant(value='expr-inside-fstring')], ctx=Load()), Tuple(elts=[Constant(value='[^\\\\\\\'"{}\\n]+'), Name(id='ttype', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='[\\\'"\\\\]'), Name(id='ttype', ctx=Load())], ctx=Load())], ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='tokens', ctx=Store())], value=Dict(keys=[Constant(value='root'), Constant(value='expr'), Constant(value='expr-inside-fstring'), Constant(value='expr-inside-fstring-inner'), Constant(value='expr-keywords'), Constant(value='keywords'), Constant(value='soft-keywords'), Constant(value='soft-keywords-inner'), Constant(value='builtins'), Constant(value='magicfuncs'), Constant(value='magicvars'), Constant(value='numbers'), Constant(value='name'), Constant(value='funcname'), Constant(value='classname'), Constant(value='import'), Constant(value='fromimport'), Constant(value='rfstringescape'), Constant(value='fstringescape'), Constant(value='bytesescape'), Constant(value='stringescape'), Constant(value='fstrings-single'), Constant(value='fstrings-double'), Constant(value='strings-single'), Constant(value='strings-double'), Constant(value='dqf'), Constant(value='sqf'), Constant(value='dqs'), Constant(value='sqs'), Constant(value='tdqf'), Constant(value='tsqf'), Constant(value='tdqs'), Constant(value='tsqs')], values=[List(elts=[Tuple(elts=[Constant(value='\\n'), Name(id='Whitespace', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='^(\\s*)([rRuUbB]{,2})("""(?:.|\\n)*?""")'), Call(func=Name(id='bygroups', ctx=Load()), args=[Name(id='Whitespace', ctx=Load()), Attribute(value=Name(id='String', ctx=Load()), attr='Affix', ctx=Load()), Attribute(value=Name(id='String', ctx=Load()), attr='Doc', ctx=Load())], keywords=[])], ctx=Load()), Tuple(elts=[Constant(value="^(\\s*)([rRuUbB]{,2})('''(?:.|\\n)*?''')"), Call(func=Name(id='bygroups', ctx=Load()), args=[Name(id='Whitespace', ctx=Load()), Attribute(value=Name(id='String', ctx=Load()), attr='Affix', ctx=Load()), Attribute(value=Name(id='String', ctx=Load()), attr='Doc', ctx=Load())], keywords=[])], ctx=Load()), Tuple(elts=[Constant(value='\\A#!.+$'), Attribute(value=Name(id='Comment', ctx=Load()), attr='Hashbang', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='#.*$'), Attribute(value=Name(id='Comment', ctx=Load()), attr='Single', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='\\\\\\n'), Name(id='Text', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='\\\\'), Name(id='Text', ctx=Load())], ctx=Load()), Call(func=Name(id='include', ctx=Load()), args=[Constant(value='keywords')], keywords=[]), Call(func=Name(id='include', ctx=Load()), args=[Constant(value='soft-keywords')], keywords=[]), Tuple(elts=[Constant(value='(def)((?:\\s|\\\\\\s)+)'), Call(func=Name(id='bygroups', ctx=Load()), args=[Name(id='Keyword', ctx=Load()), Name(id='Text', ctx=Load())], keywords=[]), Constant(value='funcname')], ctx=Load()), Tuple(elts=[Constant(value='(class)((?:\\s|\\\\\\s)+)'), Call(func=Name(id='bygroups', ctx=Load()), args=[Name(id='Keyword', ctx=Load()), Name(id='Text', ctx=Load())], keywords=[]), Constant(value='classname')], ctx=Load()), Tuple(elts=[Constant(value='(from)((?:\\s|\\\\\\s)+)'), Call(func=Name(id='bygroups', ctx=Load()), args=[Attribute(value=Name(id='Keyword', ctx=Load()), attr='Namespace', ctx=Load()), Name(id='Text', ctx=Load())], keywords=[]), Constant(value='fromimport')], ctx=Load()), Tuple(elts=[Constant(value='(import)((?:\\s|\\\\\\s)+)'), Call(func=Name(id='bygroups', ctx=Load()), args=[Attribute(value=Name(id='Keyword', ctx=Load()), attr='Namespace', ctx=Load()), Name(id='Text', ctx=Load())], keywords=[]), Constant(value='import')], ctx=Load()), Call(func=Name(id='include', ctx=Load()), args=[Constant(value='expr')], keywords=[])], ctx=Load()), List(elts=[Tuple(elts=[Constant(value='(?i)(rf|fr)(""")'), Call(func=Name(id='bygroups', ctx=Load()), args=[Attribute(value=Name(id='String', ctx=Load()), attr='Affix', ctx=Load()), Attribute(value=Name(id='String', ctx=Load()), attr='Double', ctx=Load())], keywords=[]), Call(func=Name(id='combined', ctx=Load()), args=[Constant(value='rfstringescape'), Constant(value='tdqf')], keywords=[])], ctx=Load()), Tuple(elts=[Constant(value="(?i)(rf|fr)(''')"), Call(func=Name(id='bygroups', ctx=Load()), args=[Attribute(value=Name(id='String', ctx=Load()), attr='Affix', ctx=Load()), Attribute(value=Name(id='String', ctx=Load()), attr='Single', ctx=Load())], keywords=[]), Call(func=Name(id='combined', ctx=Load()), args=[Constant(value='rfstringescape'), Constant(value='tsqf')], keywords=[])], ctx=Load()), Tuple(elts=[Constant(value='(?i)(rf|fr)(")'), Call(func=Name(id='bygroups', ctx=Load()), args=[Attribute(value=Name(id='String', ctx=Load()), attr='Affix', ctx=Load()), Attribute(value=Name(id='String', ctx=Load()), attr='Double', ctx=Load())], keywords=[]), Call(func=Name(id='combined', ctx=Load()), args=[Constant(value='rfstringescape'), Constant(value='dqf')], keywords=[])], ctx=Load()), Tuple(elts=[Constant(value="(?i)(rf|fr)(')"), Call(func=Name(id='bygroups', ctx=Load()), args=[Attribute(value=Name(id='String', ctx=Load()), attr='Affix', ctx=Load()), Attribute(value=Name(id='String', ctx=Load()), attr='Single', ctx=Load())], keywords=[]), Call(func=Name(id='combined', ctx=Load()), args=[Constant(value='rfstringescape'), Constant(value='sqf')], keywords=[])], ctx=Load()), Tuple(elts=[Constant(value='([fF])(""")'), Call(func=Name(id='bygroups', ctx=Load()), args=[Attribute(value=Name(id='String', ctx=Load()), attr='Affix', ctx=Load()), Attribute(value=Name(id='String', ctx=Load()), attr='Double', ctx=Load())], keywords=[]), Call(func=Name(id='combined', ctx=Load()), args=[Constant(value='fstringescape'), Constant(value='tdqf')], keywords=[])], ctx=Load()), Tuple(elts=[Constant(value="([fF])(''')"), Call(func=Name(id='bygroups', ctx=Load()), args=[Attribute(value=Name(id='String', ctx=Load()), attr='Affix', ctx=Load()), Attribute(value=Name(id='String', ctx=Load()), attr='Single', ctx=Load())], keywords=[]), Call(func=Name(id='combined', ctx=Load()), args=[Constant(value='fstringescape'), Constant(value='tsqf')], keywords=[])], ctx=Load()), Tuple(elts=[Constant(value='([fF])(")'), Call(func=Name(id='bygroups', ctx=Load()), args=[Attribute(value=Name(id='String', ctx=Load()), attr='Affix', ctx=Load()), Attribute(value=Name(id='String', ctx=Load()), attr='Double', ctx=Load())], keywords=[]), Call(func=Name(id='combined', ctx=Load()), args=[Constant(value='fstringescape'), Constant(value='dqf')], keywords=[])], ctx=Load()), Tuple(elts=[Constant(value="([fF])(')"), Call(func=Name(id='bygroups', ctx=Load()), args=[Attribute(value=Name(id='String', ctx=Load()), attr='Affix', ctx=Load()), Attribute(value=Name(id='String', ctx=Load()), attr='Single', ctx=Load())], keywords=[]), Call(func=Name(id='combined', ctx=Load()), args=[Constant(value='fstringescape'), Constant(value='sqf')], keywords=[])], ctx=Load()), Tuple(elts=[Constant(value='(?i)(rb|br|r)(""")'), Call(func=Name(id='bygroups', ctx=Load()), args=[Attribute(value=Name(id='String', ctx=Load()), attr='Affix', ctx=Load()), Attribute(value=Name(id='String', ctx=Load()), attr='Double', ctx=Load())], keywords=[]), Constant(value='tdqs')], ctx=Load()), Tuple(elts=[Constant(value="(?i)(rb|br|r)(''')"), Call(func=Name(id='bygroups', ctx=Load()), args=[Attribute(value=Name(id='String', ctx=Load()), attr='Affix', ctx=Load()), Attribute(value=Name(id='String', ctx=Load()), attr='Single', ctx=Load())], keywords=[]), Constant(value='tsqs')], ctx=Load()), Tuple(elts=[Constant(value='(?i)(rb|br|r)(")'), Call(func=Name(id='bygroups', ctx=Load()), args=[Attribute(value=Name(id='String', ctx=Load()), attr='Affix', ctx=Load()), Attribute(value=Name(id='String', ctx=Load()), attr='Double', ctx=Load())], keywords=[]), Constant(value='dqs')], ctx=Load()), Tuple(elts=[Constant(value="(?i)(rb|br|r)(')"), Call(func=Name(id='bygroups', ctx=Load()), args=[Attribute(value=Name(id='String', ctx=Load()), attr='Affix', ctx=Load()), Attribute(value=Name(id='String', ctx=Load()), attr='Single', ctx=Load())], keywords=[]), Constant(value='sqs')], ctx=Load()), Tuple(elts=[Constant(value='([uU]?)(""")'), Call(func=Name(id='bygroups', ctx=Load()), args=[Attribute(value=Name(id='String', ctx=Load()), attr='Affix', ctx=Load()), Attribute(value=Name(id='String', ctx=Load()), attr='Double', ctx=Load())], keywords=[]), Call(func=Name(id='combined', ctx=Load()), args=[Constant(value='stringescape'), Constant(value='tdqs')], keywords=[])], ctx=Load()), Tuple(elts=[Constant(value="([uU]?)(''')"), Call(func=Name(id='bygroups', ctx=Load()), args=[Attribute(value=Name(id='String', ctx=Load()), attr='Affix', ctx=Load()), Attribute(value=Name(id='String', ctx=Load()), attr='Single', ctx=Load())], keywords=[]), Call(func=Name(id='combined', ctx=Load()), args=[Constant(value='stringescape'), Constant(value='tsqs')], keywords=[])], ctx=Load()), Tuple(elts=[Constant(value='([uU]?)(")'), Call(func=Name(id='bygroups', ctx=Load()), args=[Attribute(value=Name(id='String', ctx=Load()), attr='Affix', ctx=Load()), Attribute(value=Name(id='String', ctx=Load()), attr='Double', ctx=Load())], keywords=[]), Call(func=Name(id='combined', ctx=Load()), args=[Constant(value='stringescape'), Constant(value='dqs')], keywords=[])], ctx=Load()), Tuple(elts=[Constant(value="([uU]?)(')"), Call(func=Name(id='bygroups', ctx=Load()), args=[Attribute(value=Name(id='String', ctx=Load()), attr='Affix', ctx=Load()), Attribute(value=Name(id='String', ctx=Load()), attr='Single', ctx=Load())], keywords=[]), Call(func=Name(id='combined', ctx=Load()), args=[Constant(value='stringescape'), Constant(value='sqs')], keywords=[])], ctx=Load()), Tuple(elts=[Constant(value='([bB])(""")'), Call(func=Name(id='bygroups', ctx=Load()), args=[Attribute(value=Name(id='String', ctx=Load()), attr='Affix', ctx=Load()), Attribute(value=Name(id='String', ctx=Load()), attr='Double', ctx=Load())], keywords=[]), Call(func=Name(id='combined', ctx=Load()), args=[Constant(value='bytesescape'), Constant(value='tdqs')], keywords=[])], ctx=Load()), Tuple(elts=[Constant(value="([bB])(''')"), Call(func=Name(id='bygroups', ctx=Load()), args=[Attribute(value=Name(id='String', ctx=Load()), attr='Affix', ctx=Load()), Attribute(value=Name(id='String', ctx=Load()), attr='Single', ctx=Load())], keywords=[]), Call(func=Name(id='combined', ctx=Load()), args=[Constant(value='bytesescape'), Constant(value='tsqs')], keywords=[])], ctx=Load()), Tuple(elts=[Constant(value='([bB])(")'), Call(func=Name(id='bygroups', ctx=Load()), args=[Attribute(value=Name(id='String', ctx=Load()), attr='Affix', ctx=Load()), Attribute(value=Name(id='String', ctx=Load()), attr='Double', ctx=Load())], keywords=[]), Call(func=Name(id='combined', ctx=Load()), args=[Constant(value='bytesescape'), Constant(value='dqs')], keywords=[])], ctx=Load()), Tuple(elts=[Constant(value="([bB])(')"), Call(func=Name(id='bygroups', ctx=Load()), args=[Attribute(value=Name(id='String', ctx=Load()), attr='Affix', ctx=Load()), Attribute(value=Name(id='String', ctx=Load()), attr='Single', ctx=Load())], keywords=[]), Call(func=Name(id='combined', ctx=Load()), args=[Constant(value='bytesescape'), Constant(value='sqs')], keywords=[])], ctx=Load()), Tuple(elts=[Constant(value='[^\\S\\n]+'), Name(id='Text', ctx=Load())], ctx=Load()), Call(func=Name(id='include', ctx=Load()), args=[Constant(value='numbers')], keywords=[]), Tuple(elts=[Constant(value='!=|==|<<|>>|:=|[-~+/*%=<>&^|.]'), Name(id='Operator', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='[]{}:(),;[]'), Name(id='Punctuation', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='(in|is|and|or|not)\\b'), Attribute(value=Name(id='Operator', ctx=Load()), attr='Word', ctx=Load())], ctx=Load()), Call(func=Name(id='include', ctx=Load()), args=[Constant(value='expr-keywords')], keywords=[]), Call(func=Name(id='include', ctx=Load()), args=[Constant(value='builtins')], keywords=[]), Call(func=Name(id='include', ctx=Load()), args=[Constant(value='magicfuncs')], keywords=[]), Call(func=Name(id='include', ctx=Load()), args=[Constant(value='magicvars')], keywords=[]), Call(func=Name(id='include', ctx=Load()), args=[Constant(value='name')], keywords=[])], ctx=Load()), List(elts=[Tuple(elts=[Constant(value='[{([]'), Name(id='Punctuation', ctx=Load()), Constant(value='expr-inside-fstring-inner')], ctx=Load()), Tuple(elts=[Constant(value='(=\\s*)?(\\![sraf])?\\}'), Attribute(value=Name(id='String', ctx=Load()), attr='Interpol', ctx=Load()), Constant(value='#pop')], ctx=Load()), Tuple(elts=[Constant(value='(=\\s*)?(\\![sraf])?:'), Attribute(value=Name(id='String', ctx=Load()), attr='Interpol', ctx=Load()), Constant(value='#pop')], ctx=Load()), Tuple(elts=[Constant(value='\\s+'), Name(id='Whitespace', ctx=Load())], ctx=Load()), Call(func=Name(id='include', ctx=Load()), args=[Constant(value='expr')], keywords=[])], ctx=Load()), List(elts=[Tuple(elts=[Constant(value='[{([]'), Name(id='Punctuation', ctx=Load()), Constant(value='expr-inside-fstring-inner')], ctx=Load()), Tuple(elts=[Constant(value='[])}]'), Name(id='Punctuation', ctx=Load()), Constant(value='#pop')], ctx=Load()), Tuple(elts=[Constant(value='\\s+'), Name(id='Whitespace', ctx=Load())], ctx=Load()), Call(func=Name(id='include', ctx=Load()), args=[Constant(value='expr')], keywords=[])], ctx=Load()), List(elts=[Tuple(elts=[Call(func=Name(id='words', ctx=Load()), args=[Tuple(elts=[Constant(value='async for'), Constant(value='await'), Constant(value='else'), Constant(value='for'), Constant(value='if'), Constant(value='lambda'), Constant(value='yield'), Constant(value='yield from')], ctx=Load())], keywords=[keyword(arg='suffix', value=Constant(value='\\b'))]), Name(id='Keyword', ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='words', ctx=Load()), args=[Tuple(elts=[Constant(value='True'), Constant(value='False'), Constant(value='None')], ctx=Load())], keywords=[keyword(arg='suffix', value=Constant(value='\\b'))]), Attribute(value=Name(id='Keyword', ctx=Load()), attr='Constant', ctx=Load())], ctx=Load())], ctx=Load()), List(elts=[Tuple(elts=[Call(func=Name(id='words', ctx=Load()), args=[Tuple(elts=[Constant(value='assert'), Constant(value='async'), Constant(value='await'), Constant(value='break'), Constant(value='continue'), Constant(value='del'), Constant(value='elif'), Constant(value='else'), Constant(value='except'), Constant(value='finally'), Constant(value='for'), Constant(value='global'), Constant(value='if'), Constant(value='lambda'), Constant(value='pass'), Constant(value='raise'), Constant(value='nonlocal'), Constant(value='return'), Constant(value='try'), Constant(value='while'), Constant(value='yield'), Constant(value='yield from'), Constant(value='as'), Constant(value='with')], ctx=Load())], keywords=[keyword(arg='suffix', value=Constant(value='\\b'))]), Name(id='Keyword', ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='words', ctx=Load()), args=[Tuple(elts=[Constant(value='True'), Constant(value='False'), Constant(value='None')], ctx=Load())], keywords=[keyword(arg='suffix', value=Constant(value='\\b'))]), Attribute(value=Name(id='Keyword', ctx=Load()), attr='Constant', ctx=Load())], ctx=Load())], ctx=Load()), List(elts=[Tuple(elts=[BinOp(left=BinOp(left=Constant(value='(^[ \\t]*)(match|case)\\b(?![ \\t]*(?:[:,;=^&|@~)\\]}]|(?:'), op=Add(), right=Call(func=Attribute(value=Constant(value='|'), attr='join', ctx=Load()), args=[Attribute(value=Name(id='keyword', ctx=Load()), attr='kwlist', ctx=Load())], keywords=[])), op=Add(), right=Constant(value=')\\b))')), Call(func=Name(id='bygroups', ctx=Load()), args=[Name(id='Text', ctx=Load()), Name(id='Keyword', ctx=Load())], keywords=[]), Constant(value='soft-keywords-inner')], ctx=Load())], ctx=Load()), List(elts=[Tuple(elts=[Constant(value='(\\s+)([^\\n_]*)(_\\b)'), Call(func=Name(id='bygroups', ctx=Load()), args=[Name(id='Whitespace', ctx=Load()), Call(func=Name(id='using', ctx=Load()), args=[Name(id='this', ctx=Load())], keywords=[]), Name(id='Keyword', ctx=Load())], keywords=[])], ctx=Load()), Call(func=Name(id='default', ctx=Load()), args=[Constant(value='#pop')], keywords=[])], ctx=Load()), List(elts=[Tuple(elts=[Call(func=Name(id='words', ctx=Load()), args=[Tuple(elts=[Constant(value='__import__'), Constant(value='abs'), Constant(value='aiter'), Constant(value='all'), Constant(value='any'), Constant(value='bin'), Constant(value='bool'), Constant(value='bytearray'), Constant(value='breakpoint'), Constant(value='bytes'), Constant(value='callable'), Constant(value='chr'), Constant(value='classmethod'), Constant(value='compile'), Constant(value='complex'), Constant(value='delattr'), Constant(value='dict'), Constant(value='dir'), Constant(value='divmod'), Constant(value='enumerate'), Constant(value='eval'), Constant(value='filter'), Constant(value='float'), Constant(value='format'), Constant(value='frozenset'), Constant(value='getattr'), Constant(value='globals'), Constant(value='hasattr'), Constant(value='hash'), Constant(value='hex'), Constant(value='id'), Constant(value='input'), Constant(value='int'), Constant(value='isinstance'), Constant(value='issubclass'), Constant(value='iter'), Constant(value='len'), Constant(value='list'), Constant(value='locals'), Constant(value='map'), Constant(value='max'), Constant(value='memoryview'), Constant(value='min'), Constant(value='next'), Constant(value='object'), Constant(value='oct'), Constant(value='open'), Constant(value='ord'), Constant(value='pow'), Constant(value='print'), Constant(value='property'), Constant(value='range'), Constant(value='repr'), Constant(value='reversed'), Constant(value='round'), Constant(value='set'), Constant(value='setattr'), Constant(value='slice'), Constant(value='sorted'), Constant(value='staticmethod'), Constant(value='str'), Constant(value='sum'), Constant(value='super'), Constant(value='tuple'), Constant(value='type'), Constant(value='vars'), Constant(value='zip')], ctx=Load())], keywords=[keyword(arg='prefix', value=Constant(value='(?<!\\.)')), keyword(arg='suffix', value=Constant(value='\\b'))]), Attribute(value=Name(id='Name', ctx=Load()), attr='Builtin', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='(?<!\\.)(self|Ellipsis|NotImplemented|cls)\\b'), Attribute(value=Attribute(value=Name(id='Name', ctx=Load()), attr='Builtin', ctx=Load()), attr='Pseudo', ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='words', ctx=Load()), args=[Tuple(elts=[Constant(value='ArithmeticError'), Constant(value='AssertionError'), Constant(value='AttributeError'), Constant(value='BaseException'), Constant(value='BufferError'), Constant(value='BytesWarning'), Constant(value='DeprecationWarning'), Constant(value='EOFError'), Constant(value='EnvironmentError'), Constant(value='Exception'), Constant(value='FloatingPointError'), Constant(value='FutureWarning'), Constant(value='GeneratorExit'), Constant(value='IOError'), Constant(value='ImportError'), Constant(value='ImportWarning'), Constant(value='IndentationError'), Constant(value='IndexError'), Constant(value='KeyError'), Constant(value='KeyboardInterrupt'), Constant(value='LookupError'), Constant(value='MemoryError'), Constant(value='NameError'), Constant(value='NotImplementedError'), Constant(value='OSError'), Constant(value='OverflowError'), Constant(value='PendingDeprecationWarning'), Constant(value='ReferenceError'), Constant(value='ResourceWarning'), Constant(value='RuntimeError'), Constant(value='RuntimeWarning'), Constant(value='StopIteration'), Constant(value='SyntaxError'), Constant(value='SyntaxWarning'), Constant(value='SystemError'), Constant(value='SystemExit'), Constant(value='TabError'), Constant(value='TypeError'), Constant(value='UnboundLocalError'), Constant(value='UnicodeDecodeError'), Constant(value='UnicodeEncodeError'), Constant(value='UnicodeError'), Constant(value='UnicodeTranslateError'), Constant(value='UnicodeWarning'), Constant(value='UserWarning'), Constant(value='ValueError'), Constant(value='VMSError'), Constant(value='Warning'), Constant(value='WindowsError'), Constant(value='ZeroDivisionError'), Constant(value='BlockingIOError'), Constant(value='ChildProcessError'), Constant(value='ConnectionError'), Constant(value='BrokenPipeError'), Constant(value='ConnectionAbortedError'), Constant(value='ConnectionRefusedError'), Constant(value='ConnectionResetError'), Constant(value='FileExistsError'), Constant(value='FileNotFoundError'), Constant(value='InterruptedError'), Constant(value='IsADirectoryError'), Constant(value='NotADirectoryError'), Constant(value='PermissionError'), Constant(value='ProcessLookupError'), Constant(value='TimeoutError'), Constant(value='StopAsyncIteration'), Constant(value='ModuleNotFoundError'), Constant(value='RecursionError'), Constant(value='EncodingWarning')], ctx=Load())], keywords=[keyword(arg='prefix', value=Constant(value='(?<!\\.)')), keyword(arg='suffix', value=Constant(value='\\b'))]), Attribute(value=Name(id='Name', ctx=Load()), attr='Exception', ctx=Load())], ctx=Load())], ctx=Load()), List(elts=[Tuple(elts=[Call(func=Name(id='words', ctx=Load()), args=[Tuple(elts=[Constant(value='__abs__'), Constant(value='__add__'), Constant(value='__aenter__'), Constant(value='__aexit__'), Constant(value='__aiter__'), Constant(value='__and__'), Constant(value='__anext__'), Constant(value='__await__'), Constant(value='__bool__'), Constant(value='__bytes__'), Constant(value='__call__'), Constant(value='__complex__'), Constant(value='__contains__'), Constant(value='__del__'), Constant(value='__delattr__'), Constant(value='__delete__'), Constant(value='__delitem__'), Constant(value='__dir__'), Constant(value='__divmod__'), Constant(value='__enter__'), Constant(value='__eq__'), Constant(value='__exit__'), Constant(value='__float__'), Constant(value='__floordiv__'), Constant(value='__format__'), Constant(value='__ge__'), Constant(value='__get__'), Constant(value='__getattr__'), Constant(value='__getattribute__'), Constant(value='__getitem__'), Constant(value='__gt__'), Constant(value='__hash__'), Constant(value='__iadd__'), Constant(value='__iand__'), Constant(value='__ifloordiv__'), Constant(value='__ilshift__'), Constant(value='__imatmul__'), Constant(value='__imod__'), Constant(value='__imul__'), Constant(value='__index__'), Constant(value='__init__'), Constant(value='__instancecheck__'), Constant(value='__int__'), Constant(value='__invert__'), Constant(value='__ior__'), Constant(value='__ipow__'), Constant(value='__irshift__'), Constant(value='__isub__'), Constant(value='__iter__'), Constant(value='__itruediv__'), Constant(value='__ixor__'), Constant(value='__le__'), Constant(value='__len__'), Constant(value='__length_hint__'), Constant(value='__lshift__'), Constant(value='__lt__'), Constant(value='__matmul__'), Constant(value='__missing__'), Constant(value='__mod__'), Constant(value='__mul__'), Constant(value='__ne__'), Constant(value='__neg__'), Constant(value='__new__'), Constant(value='__next__'), Constant(value='__or__'), Constant(value='__pos__'), Constant(value='__pow__'), Constant(value='__prepare__'), Constant(value='__radd__'), Constant(value='__rand__'), Constant(value='__rdivmod__'), Constant(value='__repr__'), Constant(value='__reversed__'), Constant(value='__rfloordiv__'), Constant(value='__rlshift__'), Constant(value='__rmatmul__'), Constant(value='__rmod__'), Constant(value='__rmul__'), Constant(value='__ror__'), Constant(value='__round__'), Constant(value='__rpow__'), Constant(value='__rrshift__'), Constant(value='__rshift__'), Constant(value='__rsub__'), Constant(value='__rtruediv__'), Constant(value='__rxor__'), Constant(value='__set__'), Constant(value='__setattr__'), Constant(value='__setitem__'), Constant(value='__str__'), Constant(value='__sub__'), Constant(value='__subclasscheck__'), Constant(value='__truediv__'), Constant(value='__xor__')], ctx=Load())], keywords=[keyword(arg='suffix', value=Constant(value='\\b'))]), Attribute(value=Attribute(value=Name(id='Name', ctx=Load()), attr='Function', ctx=Load()), attr='Magic', ctx=Load())], ctx=Load())], ctx=Load()), List(elts=[Tuple(elts=[Call(func=Name(id='words', ctx=Load()), args=[Tuple(elts=[Constant(value='__annotations__'), Constant(value='__bases__'), Constant(value='__class__'), Constant(value='__closure__'), Constant(value='__code__'), Constant(value='__defaults__'), Constant(value='__dict__'), Constant(value='__doc__'), Constant(value='__file__'), Constant(value='__func__'), Constant(value='__globals__'), Constant(value='__kwdefaults__'), Constant(value='__module__'), Constant(value='__mro__'), Constant(value='__name__'), Constant(value='__objclass__'), Constant(value='__qualname__'), Constant(value='__self__'), Constant(value='__slots__'), Constant(value='__weakref__')], ctx=Load())], keywords=[keyword(arg='suffix', value=Constant(value='\\b'))]), Attribute(value=Attribute(value=Name(id='Name', ctx=Load()), attr='Variable', ctx=Load()), attr='Magic', ctx=Load())], ctx=Load())], ctx=Load()), List(elts=[Tuple(elts=[Constant(value='(\\d(?:_?\\d)*\\.(?:\\d(?:_?\\d)*)?|(?:\\d(?:_?\\d)*)?\\.\\d(?:_?\\d)*)([eE][+-]?\\d(?:_?\\d)*)?'), Attribute(value=Name(id='Number', ctx=Load()), attr='Float', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='\\d(?:_?\\d)*[eE][+-]?\\d(?:_?\\d)*j?'), Attribute(value=Name(id='Number', ctx=Load()), attr='Float', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='0[oO](?:_?[0-7])+'), Attribute(value=Name(id='Number', ctx=Load()), attr='Oct', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='0[bB](?:_?[01])+'), Attribute(value=Name(id='Number', ctx=Load()), attr='Bin', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='0[xX](?:_?[a-fA-F0-9])+'), Attribute(value=Name(id='Number', ctx=Load()), attr='Hex', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='\\d(?:_?\\d)*'), Attribute(value=Name(id='Number', ctx=Load()), attr='Integer', ctx=Load())], ctx=Load())], ctx=Load()), List(elts=[Tuple(elts=[BinOp(left=Constant(value='@'), op=Add(), right=Name(id='uni_name', ctx=Load())), Attribute(value=Name(id='Name', ctx=Load()), attr='Decorator', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='@'), Name(id='Operator', ctx=Load())], ctx=Load()), Tuple(elts=[Name(id='uni_name', ctx=Load()), Name(id='Name', ctx=Load())], ctx=Load())], ctx=Load()), List(elts=[Call(func=Name(id='include', ctx=Load()), args=[Constant(value='magicfuncs')], keywords=[]), Tuple(elts=[Name(id='uni_name', ctx=Load()), Attribute(value=Name(id='Name', ctx=Load()), attr='Function', ctx=Load()), Constant(value='#pop')], ctx=Load()), Call(func=Name(id='default', ctx=Load()), args=[Constant(value='#pop')], keywords=[])], ctx=Load()), List(elts=[Tuple(elts=[Name(id='uni_name', ctx=Load()), Attribute(value=Name(id='Name', ctx=Load()), attr='Class', ctx=Load()), Constant(value='#pop')], ctx=Load())], ctx=Load()), List(elts=[Tuple(elts=[Constant(value='(\\s+)(as)(\\s+)'), Call(func=Name(id='bygroups', ctx=Load()), args=[Name(id='Text', ctx=Load()), Name(id='Keyword', ctx=Load()), Name(id='Text', ctx=Load())], keywords=[])], ctx=Load()), Tuple(elts=[Constant(value='\\.'), Attribute(value=Name(id='Name', ctx=Load()), attr='Namespace', ctx=Load())], ctx=Load()), Tuple(elts=[Name(id='uni_name', ctx=Load()), Attribute(value=Name(id='Name', ctx=Load()), attr='Namespace', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='(\\s*)(,)(\\s*)'), Call(func=Name(id='bygroups', ctx=Load()), args=[Name(id='Text', ctx=Load()), Name(id='Operator', ctx=Load()), Name(id='Text', ctx=Load())], keywords=[])], ctx=Load()), Call(func=Name(id='default', ctx=Load()), args=[Constant(value='#pop')], keywords=[])], ctx=Load()), List(elts=[Tuple(elts=[Constant(value='(\\s+)(import)\\b'), Call(func=Name(id='bygroups', ctx=Load()), args=[Name(id='Text', ctx=Load()), Attribute(value=Name(id='Keyword', ctx=Load()), attr='Namespace', ctx=Load())], keywords=[]), Constant(value='#pop')], ctx=Load()), Tuple(elts=[Constant(value='\\.'), Attribute(value=Name(id='Name', ctx=Load()), attr='Namespace', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='None\\b'), Attribute(value=Name(id='Keyword', ctx=Load()), attr='Constant', ctx=Load()), Constant(value='#pop')], ctx=Load()), Tuple(elts=[Name(id='uni_name', ctx=Load()), Attribute(value=Name(id='Name', ctx=Load()), attr='Namespace', ctx=Load())], ctx=Load()), Call(func=Name(id='default', ctx=Load()), args=[Constant(value='#pop')], keywords=[])], ctx=Load()), List(elts=[Tuple(elts=[Constant(value='\\{\\{'), Attribute(value=Name(id='String', ctx=Load()), attr='Escape', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='\\}\\}'), Attribute(value=Name(id='String', ctx=Load()), attr='Escape', ctx=Load())], ctx=Load())], ctx=Load()), List(elts=[Call(func=Name(id='include', ctx=Load()), args=[Constant(value='rfstringescape')], keywords=[]), Call(func=Name(id='include', ctx=Load()), args=[Constant(value='stringescape')], keywords=[])], ctx=Load()), List(elts=[Tuple(elts=[Constant(value='\\\\([\\\\abfnrtv"\\\']|\\n|x[a-fA-F0-9]{2}|[0-7]{1,3})'), Attribute(value=Name(id='String', ctx=Load()), attr='Escape', ctx=Load())], ctx=Load())], ctx=Load()), List(elts=[Tuple(elts=[Constant(value='\\\\(N\\{.*?\\}|u[a-fA-F0-9]{4}|U[a-fA-F0-9]{8})'), Attribute(value=Name(id='String', ctx=Load()), attr='Escape', ctx=Load())], ctx=Load()), Call(func=Name(id='include', ctx=Load()), args=[Constant(value='bytesescape')], keywords=[])], ctx=Load()), Call(func=Name(id='fstring_rules', ctx=Load()), args=[Attribute(value=Name(id='String', ctx=Load()), attr='Single', ctx=Load())], keywords=[]), Call(func=Name(id='fstring_rules', ctx=Load()), args=[Attribute(value=Name(id='String', ctx=Load()), attr='Double', ctx=Load())], keywords=[]), Call(func=Name(id='innerstring_rules', ctx=Load()), args=[Attribute(value=Name(id='String', ctx=Load()), attr='Single', ctx=Load())], keywords=[]), Call(func=Name(id='innerstring_rules', ctx=Load()), args=[Attribute(value=Name(id='String', ctx=Load()), attr='Double', ctx=Load())], keywords=[]), List(elts=[Tuple(elts=[Constant(value='"'), Attribute(value=Name(id='String', ctx=Load()), attr='Double', ctx=Load()), Constant(value='#pop')], ctx=Load()), Tuple(elts=[Constant(value='\\\\\\\\|\\\\"|\\\\\\n'), Attribute(value=Name(id='String', ctx=Load()), attr='Escape', ctx=Load())], ctx=Load()), Call(func=Name(id='include', ctx=Load()), args=[Constant(value='fstrings-double')], keywords=[])], ctx=Load()), List(elts=[Tuple(elts=[Constant(value="'"), Attribute(value=Name(id='String', ctx=Load()), attr='Single', ctx=Load()), Constant(value='#pop')], ctx=Load()), Tuple(elts=[Constant(value="\\\\\\\\|\\\\'|\\\\\\n"), Attribute(value=Name(id='String', ctx=Load()), attr='Escape', ctx=Load())], ctx=Load()), Call(func=Name(id='include', ctx=Load()), args=[Constant(value='fstrings-single')], keywords=[])], ctx=Load()), List(elts=[Tuple(elts=[Constant(value='"'), Attribute(value=Name(id='String', ctx=Load()), attr='Double', ctx=Load()), Constant(value='#pop')], ctx=Load()), Tuple(elts=[Constant(value='\\\\\\\\|\\\\"|\\\\\\n'), Attribute(value=Name(id='String', ctx=Load()), attr='Escape', ctx=Load())], ctx=Load()), Call(func=Name(id='include', ctx=Load()), args=[Constant(value='strings-double')], keywords=[])], ctx=Load()), List(elts=[Tuple(elts=[Constant(value="'"), Attribute(value=Name(id='String', ctx=Load()), attr='Single', ctx=Load()), Constant(value='#pop')], ctx=Load()), Tuple(elts=[Constant(value="\\\\\\\\|\\\\'|\\\\\\n"), Attribute(value=Name(id='String', ctx=Load()), attr='Escape', ctx=Load())], ctx=Load()), Call(func=Name(id='include', ctx=Load()), args=[Constant(value='strings-single')], keywords=[])], ctx=Load()), List(elts=[Tuple(elts=[Constant(value='"""'), Attribute(value=Name(id='String', ctx=Load()), attr='Double', ctx=Load()), Constant(value='#pop')], ctx=Load()), Call(func=Name(id='include', ctx=Load()), args=[Constant(value='fstrings-double')], keywords=[]), Tuple(elts=[Constant(value='\\n'), Attribute(value=Name(id='String', ctx=Load()), attr='Double', ctx=Load())], ctx=Load())], ctx=Load()), List(elts=[Tuple(elts=[Constant(value="'''"), Attribute(value=Name(id='String', ctx=Load()), attr='Single', ctx=Load()), Constant(value='#pop')], ctx=Load()), Call(func=Name(id='include', ctx=Load()), args=[Constant(value='fstrings-single')], keywords=[]), Tuple(elts=[Constant(value='\\n'), Attribute(value=Name(id='String', ctx=Load()), attr='Single', ctx=Load())], ctx=Load())], ctx=Load()), List(elts=[Tuple(elts=[Constant(value='"""'), Attribute(value=Name(id='String', ctx=Load()), attr='Double', ctx=Load()), Constant(value='#pop')], ctx=Load()), Call(func=Name(id='include', ctx=Load()), args=[Constant(value='strings-double')], keywords=[]), Tuple(elts=[Constant(value='\\n'), Attribute(value=Name(id='String', ctx=Load()), attr='Double', ctx=Load())], ctx=Load())], ctx=Load()), List(elts=[Tuple(elts=[Constant(value="'''"), Attribute(value=Name(id='String', ctx=Load()), attr='Single', ctx=Load()), Constant(value='#pop')], ctx=Load()), Call(func=Name(id='include', ctx=Load()), args=[Constant(value='strings-single')], keywords=[]), Tuple(elts=[Constant(value='\\n'), Attribute(value=Name(id='String', ctx=Load()), attr='Single', ctx=Load())], ctx=Load())], ctx=Load())])), FunctionDef(name='analyse_text', args=arguments(posonlyargs=[], args=[arg(arg='text')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=Or(), values=[Call(func=Name(id='shebang_matches', ctx=Load()), args=[Name(id='text', ctx=Load()), Constant(value='pythonw?(3(\\.\\d)?)?')], keywords=[]), Compare(left=Constant(value='import '), ops=[In()], comparators=[Subscript(value=Name(id='text', ctx=Load()), slice=Slice(upper=Constant(value=1000)), ctx=Load())])]))], decorator_list=[])], decorator_list=[]), Assign(targets=[Name(id='Python3Lexer', ctx=Store())], value=Name(id='PythonLexer', ctx=Load())), ClassDef(name='Python2Lexer', bases=[Name(id='RegexLexer', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    For Python 2.x source code.\n\n    .. versionchanged:: 2.5\n       This class has been renamed from ``PythonLexer``.  ``PythonLexer`` now\n       refers to the Python 3 variant.  File name patterns like ``*.py`` have\n       been moved to Python 3 as well.\n    ')), Assign(targets=[Name(id='name', ctx=Store())], value=Constant(value='Python 2.x')), Assign(targets=[Name(id='url', ctx=Store())], value=Constant(value='http://www.python.org')), Assign(targets=[Name(id='aliases', ctx=Store())], value=List(elts=[Constant(value='python2'), Constant(value='py2')], ctx=Load())), Assign(targets=[Name(id='filenames', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='mimetypes', ctx=Store())], value=List(elts=[Constant(value='text/x-python2'), Constant(value='application/x-python2')], ctx=Load())), FunctionDef(name='innerstring_rules', args=arguments(posonlyargs=[], args=[arg(arg='ttype')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=List(elts=[Tuple(elts=[Constant(value='%(\\(\\w+\\))?[-#0 +]*([0-9]+|[*])?(\\.([0-9]+|[*]))?[hlL]?[E-GXc-giorsux%]'), Attribute(value=Name(id='String', ctx=Load()), attr='Interpol', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='[^\\\\\\\'"%\\n]+'), Name(id='ttype', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='[\\\'"\\\\]'), Name(id='ttype', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='%'), Name(id='ttype', ctx=Load())], ctx=Load())], ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='tokens', ctx=Store())], value=Dict(keys=[Constant(value='root'), Constant(value='keywords'), Constant(value='builtins'), Constant(value='magicfuncs'), Constant(value='magicvars'), Constant(value='numbers'), Constant(value='backtick'), Constant(value='name'), Constant(value='funcname'), Constant(value='classname'), Constant(value='import'), Constant(value='fromimport'), Constant(value='stringescape'), Constant(value='strings-single'), Constant(value='strings-double'), Constant(value='dqs'), Constant(value='sqs'), Constant(value='tdqs'), Constant(value='tsqs')], values=[List(elts=[Tuple(elts=[Constant(value='\\n'), Name(id='Whitespace', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='^(\\s*)([rRuUbB]{,2})("""(?:.|\\n)*?""")'), Call(func=Name(id='bygroups', ctx=Load()), args=[Name(id='Whitespace', ctx=Load()), Attribute(value=Name(id='String', ctx=Load()), attr='Affix', ctx=Load()), Attribute(value=Name(id='String', ctx=Load()), attr='Doc', ctx=Load())], keywords=[])], ctx=Load()), Tuple(elts=[Constant(value="^(\\s*)([rRuUbB]{,2})('''(?:.|\\n)*?''')"), Call(func=Name(id='bygroups', ctx=Load()), args=[Name(id='Whitespace', ctx=Load()), Attribute(value=Name(id='String', ctx=Load()), attr='Affix', ctx=Load()), Attribute(value=Name(id='String', ctx=Load()), attr='Doc', ctx=Load())], keywords=[])], ctx=Load()), Tuple(elts=[Constant(value='[^\\S\\n]+'), Name(id='Text', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='\\A#!.+$'), Attribute(value=Name(id='Comment', ctx=Load()), attr='Hashbang', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='#.*$'), Attribute(value=Name(id='Comment', ctx=Load()), attr='Single', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='[]{}:(),;[]'), Name(id='Punctuation', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='\\\\\\n'), Name(id='Text', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='\\\\'), Name(id='Text', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='(in|is|and|or|not)\\b'), Attribute(value=Name(id='Operator', ctx=Load()), attr='Word', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='!=|==|<<|>>|[-~+/*%=<>&^|.]'), Name(id='Operator', ctx=Load())], ctx=Load()), Call(func=Name(id='include', ctx=Load()), args=[Constant(value='keywords')], keywords=[]), Tuple(elts=[Constant(value='(def)((?:\\s|\\\\\\s)+)'), Call(func=Name(id='bygroups', ctx=Load()), args=[Name(id='Keyword', ctx=Load()), Name(id='Text', ctx=Load())], keywords=[]), Constant(value='funcname')], ctx=Load()), Tuple(elts=[Constant(value='(class)((?:\\s|\\\\\\s)+)'), Call(func=Name(id='bygroups', ctx=Load()), args=[Name(id='Keyword', ctx=Load()), Name(id='Text', ctx=Load())], keywords=[]), Constant(value='classname')], ctx=Load()), Tuple(elts=[Constant(value='(from)((?:\\s|\\\\\\s)+)'), Call(func=Name(id='bygroups', ctx=Load()), args=[Attribute(value=Name(id='Keyword', ctx=Load()), attr='Namespace', ctx=Load()), Name(id='Text', ctx=Load())], keywords=[]), Constant(value='fromimport')], ctx=Load()), Tuple(elts=[Constant(value='(import)((?:\\s|\\\\\\s)+)'), Call(func=Name(id='bygroups', ctx=Load()), args=[Attribute(value=Name(id='Keyword', ctx=Load()), attr='Namespace', ctx=Load()), Name(id='Text', ctx=Load())], keywords=[]), Constant(value='import')], ctx=Load()), Call(func=Name(id='include', ctx=Load()), args=[Constant(value='builtins')], keywords=[]), Call(func=Name(id='include', ctx=Load()), args=[Constant(value='magicfuncs')], keywords=[]), Call(func=Name(id='include', ctx=Load()), args=[Constant(value='magicvars')], keywords=[]), Call(func=Name(id='include', ctx=Load()), args=[Constant(value='backtick')], keywords=[]), Tuple(elts=[Constant(value='([rR]|[uUbB][rR]|[rR][uUbB])(""")'), Call(func=Name(id='bygroups', ctx=Load()), args=[Attribute(value=Name(id='String', ctx=Load()), attr='Affix', ctx=Load()), Attribute(value=Name(id='String', ctx=Load()), attr='Double', ctx=Load())], keywords=[]), Constant(value='tdqs')], ctx=Load()), Tuple(elts=[Constant(value="([rR]|[uUbB][rR]|[rR][uUbB])(''')"), Call(func=Name(id='bygroups', ctx=Load()), args=[Attribute(value=Name(id='String', ctx=Load()), attr='Affix', ctx=Load()), Attribute(value=Name(id='String', ctx=Load()), attr='Single', ctx=Load())], keywords=[]), Constant(value='tsqs')], ctx=Load()), Tuple(elts=[Constant(value='([rR]|[uUbB][rR]|[rR][uUbB])(")'), Call(func=Name(id='bygroups', ctx=Load()), args=[Attribute(value=Name(id='String', ctx=Load()), attr='Affix', ctx=Load()), Attribute(value=Name(id='String', ctx=Load()), attr='Double', ctx=Load())], keywords=[]), Constant(value='dqs')], ctx=Load()), Tuple(elts=[Constant(value="([rR]|[uUbB][rR]|[rR][uUbB])(')"), Call(func=Name(id='bygroups', ctx=Load()), args=[Attribute(value=Name(id='String', ctx=Load()), attr='Affix', ctx=Load()), Attribute(value=Name(id='String', ctx=Load()), attr='Single', ctx=Load())], keywords=[]), Constant(value='sqs')], ctx=Load()), Tuple(elts=[Constant(value='([uUbB]?)(""")'), Call(func=Name(id='bygroups', ctx=Load()), args=[Attribute(value=Name(id='String', ctx=Load()), attr='Affix', ctx=Load()), Attribute(value=Name(id='String', ctx=Load()), attr='Double', ctx=Load())], keywords=[]), Call(func=Name(id='combined', ctx=Load()), args=[Constant(value='stringescape'), Constant(value='tdqs')], keywords=[])], ctx=Load()), Tuple(elts=[Constant(value="([uUbB]?)(''')"), Call(func=Name(id='bygroups', ctx=Load()), args=[Attribute(value=Name(id='String', ctx=Load()), attr='Affix', ctx=Load()), Attribute(value=Name(id='String', ctx=Load()), attr='Single', ctx=Load())], keywords=[]), Call(func=Name(id='combined', ctx=Load()), args=[Constant(value='stringescape'), Constant(value='tsqs')], keywords=[])], ctx=Load()), Tuple(elts=[Constant(value='([uUbB]?)(")'), Call(func=Name(id='bygroups', ctx=Load()), args=[Attribute(value=Name(id='String', ctx=Load()), attr='Affix', ctx=Load()), Attribute(value=Name(id='String', ctx=Load()), attr='Double', ctx=Load())], keywords=[]), Call(func=Name(id='combined', ctx=Load()), args=[Constant(value='stringescape'), Constant(value='dqs')], keywords=[])], ctx=Load()), Tuple(elts=[Constant(value="([uUbB]?)(')"), Call(func=Name(id='bygroups', ctx=Load()), args=[Attribute(value=Name(id='String', ctx=Load()), attr='Affix', ctx=Load()), Attribute(value=Name(id='String', ctx=Load()), attr='Single', ctx=Load())], keywords=[]), Call(func=Name(id='combined', ctx=Load()), args=[Constant(value='stringescape'), Constant(value='sqs')], keywords=[])], ctx=Load()), Call(func=Name(id='include', ctx=Load()), args=[Constant(value='name')], keywords=[]), Call(func=Name(id='include', ctx=Load()), args=[Constant(value='numbers')], keywords=[])], ctx=Load()), List(elts=[Tuple(elts=[Call(func=Name(id='words', ctx=Load()), args=[Tuple(elts=[Constant(value='assert'), Constant(value='break'), Constant(value='continue'), Constant(value='del'), Constant(value='elif'), Constant(value='else'), Constant(value='except'), Constant(value='exec'), Constant(value='finally'), Constant(value='for'), Constant(value='global'), Constant(value='if'), Constant(value='lambda'), Constant(value='pass'), Constant(value='print'), Constant(value='raise'), Constant(value='return'), Constant(value='try'), Constant(value='while'), Constant(value='yield'), Constant(value='yield from'), Constant(value='as'), Constant(value='with')], ctx=Load())], keywords=[keyword(arg='suffix', value=Constant(value='\\b'))]), Name(id='Keyword', ctx=Load())], ctx=Load())], ctx=Load()), List(elts=[Tuple(elts=[Call(func=Name(id='words', ctx=Load()), args=[Tuple(elts=[Constant(value='__import__'), Constant(value='abs'), Constant(value='all'), Constant(value='any'), Constant(value='apply'), Constant(value='basestring'), Constant(value='bin'), Constant(value='bool'), Constant(value='buffer'), Constant(value='bytearray'), Constant(value='bytes'), Constant(value='callable'), Constant(value='chr'), Constant(value='classmethod'), Constant(value='cmp'), Constant(value='coerce'), Constant(value='compile'), Constant(value='complex'), Constant(value='delattr'), Constant(value='dict'), Constant(value='dir'), Constant(value='divmod'), Constant(value='enumerate'), Constant(value='eval'), Constant(value='execfile'), Constant(value='exit'), Constant(value='file'), Constant(value='filter'), Constant(value='float'), Constant(value='frozenset'), Constant(value='getattr'), Constant(value='globals'), Constant(value='hasattr'), Constant(value='hash'), Constant(value='hex'), Constant(value='id'), Constant(value='input'), Constant(value='int'), Constant(value='intern'), Constant(value='isinstance'), Constant(value='issubclass'), Constant(value='iter'), Constant(value='len'), Constant(value='list'), Constant(value='locals'), Constant(value='long'), Constant(value='map'), Constant(value='max'), Constant(value='min'), Constant(value='next'), Constant(value='object'), Constant(value='oct'), Constant(value='open'), Constant(value='ord'), Constant(value='pow'), Constant(value='property'), Constant(value='range'), Constant(value='raw_input'), Constant(value='reduce'), Constant(value='reload'), Constant(value='repr'), Constant(value='reversed'), Constant(value='round'), Constant(value='set'), Constant(value='setattr'), Constant(value='slice'), Constant(value='sorted'), Constant(value='staticmethod'), Constant(value='str'), Constant(value='sum'), Constant(value='super'), Constant(value='tuple'), Constant(value='type'), Constant(value='unichr'), Constant(value='unicode'), Constant(value='vars'), Constant(value='xrange'), Constant(value='zip')], ctx=Load())], keywords=[keyword(arg='prefix', value=Constant(value='(?<!\\.)')), keyword(arg='suffix', value=Constant(value='\\b'))]), Attribute(value=Name(id='Name', ctx=Load()), attr='Builtin', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='(?<!\\.)(self|None|Ellipsis|NotImplemented|False|True|cls)\\b'), Attribute(value=Attribute(value=Name(id='Name', ctx=Load()), attr='Builtin', ctx=Load()), attr='Pseudo', ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='words', ctx=Load()), args=[Tuple(elts=[Constant(value='ArithmeticError'), Constant(value='AssertionError'), Constant(value='AttributeError'), Constant(value='BaseException'), Constant(value='DeprecationWarning'), Constant(value='EOFError'), Constant(value='EnvironmentError'), Constant(value='Exception'), Constant(value='FloatingPointError'), Constant(value='FutureWarning'), Constant(value='GeneratorExit'), Constant(value='IOError'), Constant(value='ImportError'), Constant(value='ImportWarning'), Constant(value='IndentationError'), Constant(value='IndexError'), Constant(value='KeyError'), Constant(value='KeyboardInterrupt'), Constant(value='LookupError'), Constant(value='MemoryError'), Constant(value='NameError'), Constant(value='NotImplementedError'), Constant(value='OSError'), Constant(value='OverflowError'), Constant(value='OverflowWarning'), Constant(value='PendingDeprecationWarning'), Constant(value='ReferenceError'), Constant(value='RuntimeError'), Constant(value='RuntimeWarning'), Constant(value='StandardError'), Constant(value='StopIteration'), Constant(value='SyntaxError'), Constant(value='SyntaxWarning'), Constant(value='SystemError'), Constant(value='SystemExit'), Constant(value='TabError'), Constant(value='TypeError'), Constant(value='UnboundLocalError'), Constant(value='UnicodeDecodeError'), Constant(value='UnicodeEncodeError'), Constant(value='UnicodeError'), Constant(value='UnicodeTranslateError'), Constant(value='UnicodeWarning'), Constant(value='UserWarning'), Constant(value='ValueError'), Constant(value='VMSError'), Constant(value='Warning'), Constant(value='WindowsError'), Constant(value='ZeroDivisionError')], ctx=Load())], keywords=[keyword(arg='prefix', value=Constant(value='(?<!\\.)')), keyword(arg='suffix', value=Constant(value='\\b'))]), Attribute(value=Name(id='Name', ctx=Load()), attr='Exception', ctx=Load())], ctx=Load())], ctx=Load()), List(elts=[Tuple(elts=[Call(func=Name(id='words', ctx=Load()), args=[Tuple(elts=[Constant(value='__abs__'), Constant(value='__add__'), Constant(value='__and__'), Constant(value='__call__'), Constant(value='__cmp__'), Constant(value='__coerce__'), Constant(value='__complex__'), Constant(value='__contains__'), Constant(value='__del__'), Constant(value='__delattr__'), Constant(value='__delete__'), Constant(value='__delitem__'), Constant(value='__delslice__'), Constant(value='__div__'), Constant(value='__divmod__'), Constant(value='__enter__'), Constant(value='__eq__'), Constant(value='__exit__'), Constant(value='__float__'), Constant(value='__floordiv__'), Constant(value='__ge__'), Constant(value='__get__'), Constant(value='__getattr__'), Constant(value='__getattribute__'), Constant(value='__getitem__'), Constant(value='__getslice__'), Constant(value='__gt__'), Constant(value='__hash__'), Constant(value='__hex__'), Constant(value='__iadd__'), Constant(value='__iand__'), Constant(value='__idiv__'), Constant(value='__ifloordiv__'), Constant(value='__ilshift__'), Constant(value='__imod__'), Constant(value='__imul__'), Constant(value='__index__'), Constant(value='__init__'), Constant(value='__instancecheck__'), Constant(value='__int__'), Constant(value='__invert__'), Constant(value='__iop__'), Constant(value='__ior__'), Constant(value='__ipow__'), Constant(value='__irshift__'), Constant(value='__isub__'), Constant(value='__iter__'), Constant(value='__itruediv__'), Constant(value='__ixor__'), Constant(value='__le__'), Constant(value='__len__'), Constant(value='__long__'), Constant(value='__lshift__'), Constant(value='__lt__'), Constant(value='__missing__'), Constant(value='__mod__'), Constant(value='__mul__'), Constant(value='__ne__'), Constant(value='__neg__'), Constant(value='__new__'), Constant(value='__nonzero__'), Constant(value='__oct__'), Constant(value='__op__'), Constant(value='__or__'), Constant(value='__pos__'), Constant(value='__pow__'), Constant(value='__radd__'), Constant(value='__rand__'), Constant(value='__rcmp__'), Constant(value='__rdiv__'), Constant(value='__rdivmod__'), Constant(value='__repr__'), Constant(value='__reversed__'), Constant(value='__rfloordiv__'), Constant(value='__rlshift__'), Constant(value='__rmod__'), Constant(value='__rmul__'), Constant(value='__rop__'), Constant(value='__ror__'), Constant(value='__rpow__'), Constant(value='__rrshift__'), Constant(value='__rshift__'), Constant(value='__rsub__'), Constant(value='__rtruediv__'), Constant(value='__rxor__'), Constant(value='__set__'), Constant(value='__setattr__'), Constant(value='__setitem__'), Constant(value='__setslice__'), Constant(value='__str__'), Constant(value='__sub__'), Constant(value='__subclasscheck__'), Constant(value='__truediv__'), Constant(value='__unicode__'), Constant(value='__xor__')], ctx=Load())], keywords=[keyword(arg='suffix', value=Constant(value='\\b'))]), Attribute(value=Attribute(value=Name(id='Name', ctx=Load()), attr='Function', ctx=Load()), attr='Magic', ctx=Load())], ctx=Load())], ctx=Load()), List(elts=[Tuple(elts=[Call(func=Name(id='words', ctx=Load()), args=[Tuple(elts=[Constant(value='__bases__'), Constant(value='__class__'), Constant(value='__closure__'), Constant(value='__code__'), Constant(value='__defaults__'), Constant(value='__dict__'), Constant(value='__doc__'), Constant(value='__file__'), Constant(value='__func__'), Constant(value='__globals__'), Constant(value='__metaclass__'), Constant(value='__module__'), Constant(value='__mro__'), Constant(value='__name__'), Constant(value='__self__'), Constant(value='__slots__'), Constant(value='__weakref__')], ctx=Load())], keywords=[keyword(arg='suffix', value=Constant(value='\\b'))]), Attribute(value=Attribute(value=Name(id='Name', ctx=Load()), attr='Variable', ctx=Load()), attr='Magic', ctx=Load())], ctx=Load())], ctx=Load()), List(elts=[Tuple(elts=[Constant(value='(\\d+\\.\\d*|\\d*\\.\\d+)([eE][+-]?[0-9]+)?j?'), Attribute(value=Name(id='Number', ctx=Load()), attr='Float', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='\\d+[eE][+-]?[0-9]+j?'), Attribute(value=Name(id='Number', ctx=Load()), attr='Float', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='0[0-7]+j?'), Attribute(value=Name(id='Number', ctx=Load()), attr='Oct', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='0[bB][01]+'), Attribute(value=Name(id='Number', ctx=Load()), attr='Bin', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='0[xX][a-fA-F0-9]+'), Attribute(value=Name(id='Number', ctx=Load()), attr='Hex', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='\\d+L'), Attribute(value=Attribute(value=Name(id='Number', ctx=Load()), attr='Integer', ctx=Load()), attr='Long', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='\\d+j?'), Attribute(value=Name(id='Number', ctx=Load()), attr='Integer', ctx=Load())], ctx=Load())], ctx=Load()), List(elts=[Tuple(elts=[Constant(value='`.*?`'), Attribute(value=Name(id='String', ctx=Load()), attr='Backtick', ctx=Load())], ctx=Load())], ctx=Load()), List(elts=[Tuple(elts=[Constant(value='@[\\w.]+'), Attribute(value=Name(id='Name', ctx=Load()), attr='Decorator', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='[a-zA-Z_]\\w*'), Name(id='Name', ctx=Load())], ctx=Load())], ctx=Load()), List(elts=[Call(func=Name(id='include', ctx=Load()), args=[Constant(value='magicfuncs')], keywords=[]), Tuple(elts=[Constant(value='[a-zA-Z_]\\w*'), Attribute(value=Name(id='Name', ctx=Load()), attr='Function', ctx=Load()), Constant(value='#pop')], ctx=Load()), Call(func=Name(id='default', ctx=Load()), args=[Constant(value='#pop')], keywords=[])], ctx=Load()), List(elts=[Tuple(elts=[Constant(value='[a-zA-Z_]\\w*'), Attribute(value=Name(id='Name', ctx=Load()), attr='Class', ctx=Load()), Constant(value='#pop')], ctx=Load())], ctx=Load()), List(elts=[Tuple(elts=[Constant(value='(?:[ \\t]|\\\\\\n)+'), Name(id='Text', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='as\\b'), Attribute(value=Name(id='Keyword', ctx=Load()), attr='Namespace', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value=','), Name(id='Operator', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='[a-zA-Z_][\\w.]*'), Attribute(value=Name(id='Name', ctx=Load()), attr='Namespace', ctx=Load())], ctx=Load()), Call(func=Name(id='default', ctx=Load()), args=[Constant(value='#pop')], keywords=[])], ctx=Load()), List(elts=[Tuple(elts=[Constant(value='(?:[ \\t]|\\\\\\n)+'), Name(id='Text', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='import\\b'), Attribute(value=Name(id='Keyword', ctx=Load()), attr='Namespace', ctx=Load()), Constant(value='#pop')], ctx=Load()), Tuple(elts=[Constant(value='None\\b'), Attribute(value=Attribute(value=Name(id='Name', ctx=Load()), attr='Builtin', ctx=Load()), attr='Pseudo', ctx=Load()), Constant(value='#pop')], ctx=Load()), Tuple(elts=[Constant(value='[a-zA-Z_.][\\w.]*'), Attribute(value=Name(id='Name', ctx=Load()), attr='Namespace', ctx=Load())], ctx=Load()), Call(func=Name(id='default', ctx=Load()), args=[Constant(value='#pop')], keywords=[])], ctx=Load()), List(elts=[Tuple(elts=[Constant(value='\\\\([\\\\abfnrtv"\\\']|\\n|N\\{.*?\\}|u[a-fA-F0-9]{4}|U[a-fA-F0-9]{8}|x[a-fA-F0-9]{2}|[0-7]{1,3})'), Attribute(value=Name(id='String', ctx=Load()), attr='Escape', ctx=Load())], ctx=Load())], ctx=Load()), Call(func=Name(id='innerstring_rules', ctx=Load()), args=[Attribute(value=Name(id='String', ctx=Load()), attr='Single', ctx=Load())], keywords=[]), Call(func=Name(id='innerstring_rules', ctx=Load()), args=[Attribute(value=Name(id='String', ctx=Load()), attr='Double', ctx=Load())], keywords=[]), List(elts=[Tuple(elts=[Constant(value='"'), Attribute(value=Name(id='String', ctx=Load()), attr='Double', ctx=Load()), Constant(value='#pop')], ctx=Load()), Tuple(elts=[Constant(value='\\\\\\\\|\\\\"|\\\\\\n'), Attribute(value=Name(id='String', ctx=Load()), attr='Escape', ctx=Load())], ctx=Load()), Call(func=Name(id='include', ctx=Load()), args=[Constant(value='strings-double')], keywords=[])], ctx=Load()), List(elts=[Tuple(elts=[Constant(value="'"), Attribute(value=Name(id='String', ctx=Load()), attr='Single', ctx=Load()), Constant(value='#pop')], ctx=Load()), Tuple(elts=[Constant(value="\\\\\\\\|\\\\'|\\\\\\n"), Attribute(value=Name(id='String', ctx=Load()), attr='Escape', ctx=Load())], ctx=Load()), Call(func=Name(id='include', ctx=Load()), args=[Constant(value='strings-single')], keywords=[])], ctx=Load()), List(elts=[Tuple(elts=[Constant(value='"""'), Attribute(value=Name(id='String', ctx=Load()), attr='Double', ctx=Load()), Constant(value='#pop')], ctx=Load()), Call(func=Name(id='include', ctx=Load()), args=[Constant(value='strings-double')], keywords=[]), Tuple(elts=[Constant(value='\\n'), Attribute(value=Name(id='String', ctx=Load()), attr='Double', ctx=Load())], ctx=Load())], ctx=Load()), List(elts=[Tuple(elts=[Constant(value="'''"), Attribute(value=Name(id='String', ctx=Load()), attr='Single', ctx=Load()), Constant(value='#pop')], ctx=Load()), Call(func=Name(id='include', ctx=Load()), args=[Constant(value='strings-single')], keywords=[]), Tuple(elts=[Constant(value='\\n'), Attribute(value=Name(id='String', ctx=Load()), attr='Single', ctx=Load())], ctx=Load())], ctx=Load())])), FunctionDef(name='analyse_text', args=arguments(posonlyargs=[], args=[arg(arg='text')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='shebang_matches', ctx=Load()), args=[Name(id='text', ctx=Load()), Constant(value='pythonw?2(\\.\\d)?')], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='_PythonConsoleLexerBase', bases=[Name(id='RegexLexer', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='name', ctx=Store())], value=Constant(value='Python console session')), Assign(targets=[Name(id='aliases', ctx=Store())], value=List(elts=[Constant(value='pycon')], ctx=Load())), Assign(targets=[Name(id='mimetypes', ctx=Store())], value=List(elts=[Constant(value='text/x-python-doctest')], ctx=Load())), Expr(value=Constant(value='Auxiliary lexer for `PythonConsoleLexer`.\n\n    Code tokens are output as ``Token.Other.Code``, traceback tokens as\n    ``Token.Other.Traceback``.\n    ')), Assign(targets=[Name(id='tokens', ctx=Store())], value=Dict(keys=[Constant(value='root'), Constant(value='continuations'), Constant(value='traceback')], values=[List(elts=[Tuple(elts=[Constant(value='(>>> )(.*\\n)'), Call(func=Name(id='bygroups', ctx=Load()), args=[Attribute(value=Name(id='Generic', ctx=Load()), attr='Prompt', ctx=Load()), Attribute(value=Name(id='Other', ctx=Load()), attr='Code', ctx=Load())], keywords=[]), Constant(value='continuations')], ctx=Load()), Tuple(elts=[Constant(value='(>>>)(\\n)'), Call(func=Name(id='bygroups', ctx=Load()), args=[Attribute(value=Name(id='Generic', ctx=Load()), attr='Prompt', ctx=Load()), Name(id='Whitespace', ctx=Load())], keywords=[])], ctx=Load()), Tuple(elts=[Constant(value='(\\^C)?Traceback \\(most recent call last\\):\\n'), Attribute(value=Name(id='Other', ctx=Load()), attr='Traceback', ctx=Load()), Constant(value='traceback')], ctx=Load()), Tuple(elts=[Constant(value='  File "[^"]+", line \\d+'), Attribute(value=Name(id='Other', ctx=Load()), attr='Traceback', ctx=Load()), Constant(value='traceback')], ctx=Load()), Tuple(elts=[Constant(value='.*\\n'), Attribute(value=Name(id='Generic', ctx=Load()), attr='Output', ctx=Load())], ctx=Load())], ctx=Load()), List(elts=[Tuple(elts=[Constant(value='(\\.\\.\\. )(.*\\n)'), Call(func=Name(id='bygroups', ctx=Load()), args=[Attribute(value=Name(id='Generic', ctx=Load()), attr='Prompt', ctx=Load()), Attribute(value=Name(id='Other', ctx=Load()), attr='Code', ctx=Load())], keywords=[])], ctx=Load()), Tuple(elts=[Constant(value='(\\.\\.\\.)(\\n)'), Call(func=Name(id='bygroups', ctx=Load()), args=[Attribute(value=Name(id='Generic', ctx=Load()), attr='Prompt', ctx=Load()), Name(id='Whitespace', ctx=Load())], keywords=[])], ctx=Load()), Call(func=Name(id='default', ctx=Load()), args=[Constant(value='#pop')], keywords=[])], ctx=Load()), List(elts=[Tuple(elts=[Constant(value='(?=>>>( |$))'), Name(id='Text', ctx=Load()), Constant(value='#pop')], ctx=Load()), Tuple(elts=[Constant(value='(KeyboardInterrupt)(\\n)'), Call(func=Name(id='bygroups', ctx=Load()), args=[Attribute(value=Name(id='Name', ctx=Load()), attr='Class', ctx=Load()), Name(id='Whitespace', ctx=Load())], keywords=[])], ctx=Load()), Tuple(elts=[Constant(value='.*\\n'), Attribute(value=Name(id='Other', ctx=Load()), attr='Traceback', ctx=Load())], ctx=Load())], ctx=Load())]))], decorator_list=[]), ClassDef(name='PythonConsoleLexer', bases=[Name(id='DelegatingLexer', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    For Python console output or doctests, such as:\n\n    .. sourcecode:: pycon\n\n        >>> a = \'foo\'\n        >>> print(a)\n        foo\n        >>> 1 / 0\n        Traceback (most recent call last):\n          File "<stdin>", line 1, in <module>\n        ZeroDivisionError: integer division or modulo by zero\n\n    Additional options:\n\n    `python3`\n        Use Python 3 lexer for code.  Default is ``True``.\n\n        .. versionadded:: 1.0\n        .. versionchanged:: 2.5\n           Now defaults to ``True``.\n    ')), Assign(targets=[Name(id='name', ctx=Store())], value=Constant(value='Python console session')), Assign(targets=[Name(id='aliases', ctx=Store())], value=List(elts=[Constant(value='pycon')], ctx=Load())), Assign(targets=[Name(id='mimetypes', ctx=Store())], value=List(elts=[Constant(value='text/x-python-doctest')], ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='options'), defaults=[]), body=[Assign(targets=[Name(id='python3', ctx=Store())], value=Call(func=Name(id='get_bool_opt', ctx=Load()), args=[Name(id='options', ctx=Load()), Constant(value='python3'), Constant(value=True)], keywords=[])), If(test=Name(id='python3', ctx=Load()), body=[Assign(targets=[Name(id='pylexer', ctx=Store())], value=Name(id='PythonLexer', ctx=Load())), Assign(targets=[Name(id='tblexer', ctx=Store())], value=Name(id='PythonTracebackLexer', ctx=Load()))], orelse=[Assign(targets=[Name(id='pylexer', ctx=Store())], value=Name(id='Python2Lexer', ctx=Load())), Assign(targets=[Name(id='tblexer', ctx=Store())], value=Name(id='Python2TracebackLexer', ctx=Load()))]), ClassDef(name='_ReplaceInnerCode', bases=[Name(id='DelegatingLexer', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='options'), defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Name(id='pylexer', ctx=Load()), Name(id='_PythonConsoleLexerBase', ctx=Load()), Attribute(value=Name(id='Other', ctx=Load()), attr='Code', ctx=Load())], keywords=[keyword(value=Name(id='options', ctx=Load()))]))], decorator_list=[])], decorator_list=[]), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Name(id='tblexer', ctx=Load()), Name(id='_ReplaceInnerCode', ctx=Load()), Attribute(value=Name(id='Other', ctx=Load()), attr='Traceback', ctx=Load())], keywords=[keyword(value=Name(id='options', ctx=Load()))]))], decorator_list=[])], decorator_list=[]), ClassDef(name='PythonTracebackLexer', bases=[Name(id='RegexLexer', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    For Python 3.x tracebacks, with support for chained exceptions.\n\n    .. versionadded:: 1.0\n\n    .. versionchanged:: 2.5\n       This is now the default ``PythonTracebackLexer``.  It is still available\n       as the alias ``Python3TracebackLexer``.\n    ')), Assign(targets=[Name(id='name', ctx=Store())], value=Constant(value='Python Traceback')), Assign(targets=[Name(id='aliases', ctx=Store())], value=List(elts=[Constant(value='pytb'), Constant(value='py3tb')], ctx=Load())), Assign(targets=[Name(id='filenames', ctx=Store())], value=List(elts=[Constant(value='*.pytb'), Constant(value='*.py3tb')], ctx=Load())), Assign(targets=[Name(id='mimetypes', ctx=Store())], value=List(elts=[Constant(value='text/x-python-traceback'), Constant(value='text/x-python3-traceback')], ctx=Load())), Assign(targets=[Name(id='tokens', ctx=Store())], value=Dict(keys=[Constant(value='root'), Constant(value='intb'), Constant(value='markers')], values=[List(elts=[Tuple(elts=[Constant(value='\\n'), Name(id='Whitespace', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='^(\\^C)?Traceback \\(most recent call last\\):\\n'), Attribute(value=Name(id='Generic', ctx=Load()), attr='Traceback', ctx=Load()), Constant(value='intb')], ctx=Load()), Tuple(elts=[Constant(value='^During handling of the above exception, another exception occurred:\\n\\n'), Attribute(value=Name(id='Generic', ctx=Load()), attr='Traceback', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='^The above exception was the direct cause of the following exception:\\n\\n'), Attribute(value=Name(id='Generic', ctx=Load()), attr='Traceback', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='^(?=  File "[^"]+", line \\d+)'), Attribute(value=Name(id='Generic', ctx=Load()), attr='Traceback', ctx=Load()), Constant(value='intb')], ctx=Load()), Tuple(elts=[Constant(value='^.*\\n'), Name(id='Other', ctx=Load())], ctx=Load())], ctx=Load()), List(elts=[Tuple(elts=[Constant(value='^(  File )("[^"]+")(, line )(\\d+)(, in )(.+)(\\n)'), Call(func=Name(id='bygroups', ctx=Load()), args=[Name(id='Text', ctx=Load()), Attribute(value=Name(id='Name', ctx=Load()), attr='Builtin', ctx=Load()), Name(id='Text', ctx=Load()), Name(id='Number', ctx=Load()), Name(id='Text', ctx=Load()), Name(id='Name', ctx=Load()), Name(id='Whitespace', ctx=Load())], keywords=[])], ctx=Load()), Tuple(elts=[Constant(value='^(  File )("[^"]+")(, line )(\\d+)(\\n)'), Call(func=Name(id='bygroups', ctx=Load()), args=[Name(id='Text', ctx=Load()), Attribute(value=Name(id='Name', ctx=Load()), attr='Builtin', ctx=Load()), Name(id='Text', ctx=Load()), Name(id='Number', ctx=Load()), Name(id='Whitespace', ctx=Load())], keywords=[])], ctx=Load()), Tuple(elts=[Constant(value='^(    )(.+)(\\n)'), Call(func=Name(id='bygroups', ctx=Load()), args=[Name(id='Whitespace', ctx=Load()), Call(func=Name(id='using', ctx=Load()), args=[Name(id='PythonLexer', ctx=Load())], keywords=[]), Name(id='Whitespace', ctx=Load())], keywords=[]), Constant(value='markers')], ctx=Load()), Tuple(elts=[Constant(value='^([ \\t]*)(\\.\\.\\.)(\\n)'), Call(func=Name(id='bygroups', ctx=Load()), args=[Name(id='Whitespace', ctx=Load()), Name(id='Comment', ctx=Load()), Name(id='Whitespace', ctx=Load())], keywords=[])], ctx=Load()), Tuple(elts=[Constant(value='^([^:]+)(: )(.+)(\\n)'), Call(func=Name(id='bygroups', ctx=Load()), args=[Attribute(value=Name(id='Generic', ctx=Load()), attr='Error', ctx=Load()), Name(id='Text', ctx=Load()), Name(id='Name', ctx=Load()), Name(id='Whitespace', ctx=Load())], keywords=[]), Constant(value='#pop')], ctx=Load()), Tuple(elts=[Constant(value='^([a-zA-Z_][\\w.]*)(:?\\n)'), Call(func=Name(id='bygroups', ctx=Load()), args=[Attribute(value=Name(id='Generic', ctx=Load()), attr='Error', ctx=Load()), Name(id='Whitespace', ctx=Load())], keywords=[]), Constant(value='#pop')], ctx=Load()), Call(func=Name(id='default', ctx=Load()), args=[Constant(value='#pop')], keywords=[])], ctx=Load()), List(elts=[Tuple(elts=[Constant(value='^( {4,})([~^]+)(\\n)'), Call(func=Name(id='bygroups', ctx=Load()), args=[Name(id='Whitespace', ctx=Load()), Attribute(value=Name(id='Punctuation', ctx=Load()), attr='Marker', ctx=Load()), Name(id='Whitespace', ctx=Load())], keywords=[]), Constant(value='#pop')], ctx=Load()), Call(func=Name(id='default', ctx=Load()), args=[Constant(value='#pop')], keywords=[])], ctx=Load())]))], decorator_list=[]), Assign(targets=[Name(id='Python3TracebackLexer', ctx=Store())], value=Name(id='PythonTracebackLexer', ctx=Load())), ClassDef(name='Python2TracebackLexer', bases=[Name(id='RegexLexer', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    For Python tracebacks.\n\n    .. versionadded:: 0.7\n\n    .. versionchanged:: 2.5\n       This class has been renamed from ``PythonTracebackLexer``.\n       ``PythonTracebackLexer`` now refers to the Python 3 variant.\n    ')), Assign(targets=[Name(id='name', ctx=Store())], value=Constant(value='Python 2.x Traceback')), Assign(targets=[Name(id='aliases', ctx=Store())], value=List(elts=[Constant(value='py2tb')], ctx=Load())), Assign(targets=[Name(id='filenames', ctx=Store())], value=List(elts=[Constant(value='*.py2tb')], ctx=Load())), Assign(targets=[Name(id='mimetypes', ctx=Store())], value=List(elts=[Constant(value='text/x-python2-traceback')], ctx=Load())), Assign(targets=[Name(id='tokens', ctx=Store())], value=Dict(keys=[Constant(value='root'), Constant(value='intb'), Constant(value='marker')], values=[List(elts=[Tuple(elts=[Constant(value='^(\\^C)?(Traceback.*\\n)'), Call(func=Name(id='bygroups', ctx=Load()), args=[Name(id='Text', ctx=Load()), Attribute(value=Name(id='Generic', ctx=Load()), attr='Traceback', ctx=Load())], keywords=[]), Constant(value='intb')], ctx=Load()), Tuple(elts=[Constant(value='^(?=  File "[^"]+", line \\d+)'), Attribute(value=Name(id='Generic', ctx=Load()), attr='Traceback', ctx=Load()), Constant(value='intb')], ctx=Load()), Tuple(elts=[Constant(value='^.*\\n'), Name(id='Other', ctx=Load())], ctx=Load())], ctx=Load()), List(elts=[Tuple(elts=[Constant(value='^(  File )("[^"]+")(, line )(\\d+)(, in )(.+)(\\n)'), Call(func=Name(id='bygroups', ctx=Load()), args=[Name(id='Text', ctx=Load()), Attribute(value=Name(id='Name', ctx=Load()), attr='Builtin', ctx=Load()), Name(id='Text', ctx=Load()), Name(id='Number', ctx=Load()), Name(id='Text', ctx=Load()), Name(id='Name', ctx=Load()), Name(id='Whitespace', ctx=Load())], keywords=[])], ctx=Load()), Tuple(elts=[Constant(value='^(  File )("[^"]+")(, line )(\\d+)(\\n)'), Call(func=Name(id='bygroups', ctx=Load()), args=[Name(id='Text', ctx=Load()), Attribute(value=Name(id='Name', ctx=Load()), attr='Builtin', ctx=Load()), Name(id='Text', ctx=Load()), Name(id='Number', ctx=Load()), Name(id='Whitespace', ctx=Load())], keywords=[])], ctx=Load()), Tuple(elts=[Constant(value='^(    )(.+)(\\n)'), Call(func=Name(id='bygroups', ctx=Load()), args=[Name(id='Text', ctx=Load()), Call(func=Name(id='using', ctx=Load()), args=[Name(id='Python2Lexer', ctx=Load())], keywords=[]), Name(id='Whitespace', ctx=Load())], keywords=[]), Constant(value='marker')], ctx=Load()), Tuple(elts=[Constant(value='^([ \\t]*)(\\.\\.\\.)(\\n)'), Call(func=Name(id='bygroups', ctx=Load()), args=[Name(id='Text', ctx=Load()), Name(id='Comment', ctx=Load()), Name(id='Whitespace', ctx=Load())], keywords=[])], ctx=Load()), Tuple(elts=[Constant(value='^([^:]+)(: )(.+)(\\n)'), Call(func=Name(id='bygroups', ctx=Load()), args=[Attribute(value=Name(id='Generic', ctx=Load()), attr='Error', ctx=Load()), Name(id='Text', ctx=Load()), Name(id='Name', ctx=Load()), Name(id='Whitespace', ctx=Load())], keywords=[]), Constant(value='#pop')], ctx=Load()), Tuple(elts=[Constant(value='^([a-zA-Z_]\\w*)(:?\\n)'), Call(func=Name(id='bygroups', ctx=Load()), args=[Attribute(value=Name(id='Generic', ctx=Load()), attr='Error', ctx=Load()), Name(id='Whitespace', ctx=Load())], keywords=[]), Constant(value='#pop')], ctx=Load())], ctx=Load()), List(elts=[Tuple(elts=[Constant(value='( {4,})(\\^)'), Call(func=Name(id='bygroups', ctx=Load()), args=[Name(id='Text', ctx=Load()), Attribute(value=Name(id='Punctuation', ctx=Load()), attr='Marker', ctx=Load())], keywords=[]), Constant(value='#pop')], ctx=Load()), Call(func=Name(id='default', ctx=Load()), args=[Constant(value='#pop')], keywords=[])], ctx=Load())]))], decorator_list=[]), ClassDef(name='CythonLexer', bases=[Name(id='RegexLexer', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    For Pyrex and Cython source code.\n\n    .. versionadded:: 1.1\n    ')), Assign(targets=[Name(id='name', ctx=Store())], value=Constant(value='Cython')), Assign(targets=[Name(id='url', ctx=Store())], value=Constant(value='http://cython.org')), Assign(targets=[Name(id='aliases', ctx=Store())], value=List(elts=[Constant(value='cython'), Constant(value='pyx'), Constant(value='pyrex')], ctx=Load())), Assign(targets=[Name(id='filenames', ctx=Store())], value=List(elts=[Constant(value='*.pyx'), Constant(value='*.pxd'), Constant(value='*.pxi')], ctx=Load())), Assign(targets=[Name(id='mimetypes', ctx=Store())], value=List(elts=[Constant(value='text/x-cython'), Constant(value='application/x-cython')], ctx=Load())), Assign(targets=[Name(id='tokens', ctx=Store())], value=Dict(keys=[Constant(value='root'), Constant(value='keywords'), Constant(value='builtins'), Constant(value='numbers'), Constant(value='backtick'), Constant(value='name'), Constant(value='funcname'), Constant(value='cdef'), Constant(value='classname'), Constant(value='import'), Constant(value='fromimport'), Constant(value='stringescape'), Constant(value='strings'), Constant(value='nl'), Constant(value='dqs'), Constant(value='sqs'), Constant(value='tdqs'), Constant(value='tsqs')], values=[List(elts=[Tuple(elts=[Constant(value='\\n'), Name(id='Whitespace', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='^(\\s*)("""(?:.|\\n)*?""")'), Call(func=Name(id='bygroups', ctx=Load()), args=[Name(id='Whitespace', ctx=Load()), Attribute(value=Name(id='String', ctx=Load()), attr='Doc', ctx=Load())], keywords=[])], ctx=Load()), Tuple(elts=[Constant(value="^(\\s*)('''(?:.|\\n)*?''')"), Call(func=Name(id='bygroups', ctx=Load()), args=[Name(id='Whitespace', ctx=Load()), Attribute(value=Name(id='String', ctx=Load()), attr='Doc', ctx=Load())], keywords=[])], ctx=Load()), Tuple(elts=[Constant(value='[^\\S\\n]+'), Name(id='Text', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='#.*$'), Name(id='Comment', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='[]{}:(),;[]'), Name(id='Punctuation', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='\\\\\\n'), Name(id='Whitespace', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='\\\\'), Name(id='Text', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='(in|is|and|or|not)\\b'), Attribute(value=Name(id='Operator', ctx=Load()), attr='Word', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='(<)([a-zA-Z0-9.?]+)(>)'), Call(func=Name(id='bygroups', ctx=Load()), args=[Name(id='Punctuation', ctx=Load()), Attribute(value=Name(id='Keyword', ctx=Load()), attr='Type', ctx=Load()), Name(id='Punctuation', ctx=Load())], keywords=[])], ctx=Load()), Tuple(elts=[Constant(value='!=|==|<<|>>|[-~+/*%=<>&^|.?]'), Name(id='Operator', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='(from)(\\d+)(<=)(\\s+)(<)(\\d+)(:)'), Call(func=Name(id='bygroups', ctx=Load()), args=[Name(id='Keyword', ctx=Load()), Attribute(value=Name(id='Number', ctx=Load()), attr='Integer', ctx=Load()), Name(id='Operator', ctx=Load()), Name(id='Name', ctx=Load()), Name(id='Operator', ctx=Load()), Name(id='Name', ctx=Load()), Name(id='Punctuation', ctx=Load())], keywords=[])], ctx=Load()), Call(func=Name(id='include', ctx=Load()), args=[Constant(value='keywords')], keywords=[]), Tuple(elts=[Constant(value='(def|property)(\\s+)'), Call(func=Name(id='bygroups', ctx=Load()), args=[Name(id='Keyword', ctx=Load()), Name(id='Text', ctx=Load())], keywords=[]), Constant(value='funcname')], ctx=Load()), Tuple(elts=[Constant(value='(cp?def)(\\s+)'), Call(func=Name(id='bygroups', ctx=Load()), args=[Name(id='Keyword', ctx=Load()), Name(id='Text', ctx=Load())], keywords=[]), Constant(value='cdef')], ctx=Load()), Tuple(elts=[Constant(value='(cdef)(:)'), Call(func=Name(id='bygroups', ctx=Load()), args=[Name(id='Keyword', ctx=Load()), Name(id='Punctuation', ctx=Load())], keywords=[])], ctx=Load()), Tuple(elts=[Constant(value='(class|struct)(\\s+)'), Call(func=Name(id='bygroups', ctx=Load()), args=[Name(id='Keyword', ctx=Load()), Name(id='Text', ctx=Load())], keywords=[]), Constant(value='classname')], ctx=Load()), Tuple(elts=[Constant(value='(from)(\\s+)'), Call(func=Name(id='bygroups', ctx=Load()), args=[Name(id='Keyword', ctx=Load()), Name(id='Text', ctx=Load())], keywords=[]), Constant(value='fromimport')], ctx=Load()), Tuple(elts=[Constant(value='(c?import)(\\s+)'), Call(func=Name(id='bygroups', ctx=Load()), args=[Name(id='Keyword', ctx=Load()), Name(id='Text', ctx=Load())], keywords=[]), Constant(value='import')], ctx=Load()), Call(func=Name(id='include', ctx=Load()), args=[Constant(value='builtins')], keywords=[]), Call(func=Name(id='include', ctx=Load()), args=[Constant(value='backtick')], keywords=[]), Tuple(elts=[Constant(value='(?:[rR]|[uU][rR]|[rR][uU])"""'), Name(id='String', ctx=Load()), Constant(value='tdqs')], ctx=Load()), Tuple(elts=[Constant(value="(?:[rR]|[uU][rR]|[rR][uU])'''"), Name(id='String', ctx=Load()), Constant(value='tsqs')], ctx=Load()), Tuple(elts=[Constant(value='(?:[rR]|[uU][rR]|[rR][uU])"'), Name(id='String', ctx=Load()), Constant(value='dqs')], ctx=Load()), Tuple(elts=[Constant(value="(?:[rR]|[uU][rR]|[rR][uU])'"), Name(id='String', ctx=Load()), Constant(value='sqs')], ctx=Load()), Tuple(elts=[Constant(value='[uU]?"""'), Name(id='String', ctx=Load()), Call(func=Name(id='combined', ctx=Load()), args=[Constant(value='stringescape'), Constant(value='tdqs')], keywords=[])], ctx=Load()), Tuple(elts=[Constant(value="[uU]?'''"), Name(id='String', ctx=Load()), Call(func=Name(id='combined', ctx=Load()), args=[Constant(value='stringescape'), Constant(value='tsqs')], keywords=[])], ctx=Load()), Tuple(elts=[Constant(value='[uU]?"'), Name(id='String', ctx=Load()), Call(func=Name(id='combined', ctx=Load()), args=[Constant(value='stringescape'), Constant(value='dqs')], keywords=[])], ctx=Load()), Tuple(elts=[Constant(value="[uU]?'"), Name(id='String', ctx=Load()), Call(func=Name(id='combined', ctx=Load()), args=[Constant(value='stringescape'), Constant(value='sqs')], keywords=[])], ctx=Load()), Call(func=Name(id='include', ctx=Load()), args=[Constant(value='name')], keywords=[]), Call(func=Name(id='include', ctx=Load()), args=[Constant(value='numbers')], keywords=[])], ctx=Load()), List(elts=[Tuple(elts=[Call(func=Name(id='words', ctx=Load()), args=[Tuple(elts=[Constant(value='assert'), Constant(value='async'), Constant(value='await'), Constant(value='break'), Constant(value='by'), Constant(value='continue'), Constant(value='ctypedef'), Constant(value='del'), Constant(value='elif'), Constant(value='else'), Constant(value='except'), Constant(value='except?'), Constant(value='exec'), Constant(value='finally'), Constant(value='for'), Constant(value='fused'), Constant(value='gil'), Constant(value='global'), Constant(value='if'), Constant(value='include'), Constant(value='lambda'), Constant(value='nogil'), Constant(value='pass'), Constant(value='print'), Constant(value='raise'), Constant(value='return'), Constant(value='try'), Constant(value='while'), Constant(value='yield'), Constant(value='as'), Constant(value='with')], ctx=Load())], keywords=[keyword(arg='suffix', value=Constant(value='\\b'))]), Name(id='Keyword', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='(DEF|IF|ELIF|ELSE)\\b'), Attribute(value=Name(id='Comment', ctx=Load()), attr='Preproc', ctx=Load())], ctx=Load())], ctx=Load()), List(elts=[Tuple(elts=[Call(func=Name(id='words', ctx=Load()), args=[Tuple(elts=[Constant(value='__import__'), Constant(value='abs'), Constant(value='all'), Constant(value='any'), Constant(value='apply'), Constant(value='basestring'), Constant(value='bin'), Constant(value='bint'), Constant(value='bool'), Constant(value='buffer'), Constant(value='bytearray'), Constant(value='bytes'), Constant(value='callable'), Constant(value='chr'), Constant(value='classmethod'), Constant(value='cmp'), Constant(value='coerce'), Constant(value='compile'), Constant(value='complex'), Constant(value='delattr'), Constant(value='dict'), Constant(value='dir'), Constant(value='divmod'), Constant(value='enumerate'), Constant(value='eval'), Constant(value='execfile'), Constant(value='exit'), Constant(value='file'), Constant(value='filter'), Constant(value='float'), Constant(value='frozenset'), Constant(value='getattr'), Constant(value='globals'), Constant(value='hasattr'), Constant(value='hash'), Constant(value='hex'), Constant(value='id'), Constant(value='input'), Constant(value='int'), Constant(value='intern'), Constant(value='isinstance'), Constant(value='issubclass'), Constant(value='iter'), Constant(value='len'), Constant(value='list'), Constant(value='locals'), Constant(value='long'), Constant(value='map'), Constant(value='max'), Constant(value='min'), Constant(value='next'), Constant(value='object'), Constant(value='oct'), Constant(value='open'), Constant(value='ord'), Constant(value='pow'), Constant(value='property'), Constant(value='Py_ssize_t'), Constant(value='range'), Constant(value='raw_input'), Constant(value='reduce'), Constant(value='reload'), Constant(value='repr'), Constant(value='reversed'), Constant(value='round'), Constant(value='set'), Constant(value='setattr'), Constant(value='slice'), Constant(value='sorted'), Constant(value='staticmethod'), Constant(value='str'), Constant(value='sum'), Constant(value='super'), Constant(value='tuple'), Constant(value='type'), Constant(value='unichr'), Constant(value='unicode'), Constant(value='unsigned'), Constant(value='vars'), Constant(value='xrange'), Constant(value='zip')], ctx=Load())], keywords=[keyword(arg='prefix', value=Constant(value='(?<!\\.)')), keyword(arg='suffix', value=Constant(value='\\b'))]), Attribute(value=Name(id='Name', ctx=Load()), attr='Builtin', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='(?<!\\.)(self|None|Ellipsis|NotImplemented|False|True|NULL)\\b'), Attribute(value=Attribute(value=Name(id='Name', ctx=Load()), attr='Builtin', ctx=Load()), attr='Pseudo', ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='words', ctx=Load()), args=[Tuple(elts=[Constant(value='ArithmeticError'), Constant(value='AssertionError'), Constant(value='AttributeError'), Constant(value='BaseException'), Constant(value='DeprecationWarning'), Constant(value='EOFError'), Constant(value='EnvironmentError'), Constant(value='Exception'), Constant(value='FloatingPointError'), Constant(value='FutureWarning'), Constant(value='GeneratorExit'), Constant(value='IOError'), Constant(value='ImportError'), Constant(value='ImportWarning'), Constant(value='IndentationError'), Constant(value='IndexError'), Constant(value='KeyError'), Constant(value='KeyboardInterrupt'), Constant(value='LookupError'), Constant(value='MemoryError'), Constant(value='NameError'), Constant(value='NotImplemented'), Constant(value='NotImplementedError'), Constant(value='OSError'), Constant(value='OverflowError'), Constant(value='OverflowWarning'), Constant(value='PendingDeprecationWarning'), Constant(value='ReferenceError'), Constant(value='RuntimeError'), Constant(value='RuntimeWarning'), Constant(value='StandardError'), Constant(value='StopIteration'), Constant(value='SyntaxError'), Constant(value='SyntaxWarning'), Constant(value='SystemError'), Constant(value='SystemExit'), Constant(value='TabError'), Constant(value='TypeError'), Constant(value='UnboundLocalError'), Constant(value='UnicodeDecodeError'), Constant(value='UnicodeEncodeError'), Constant(value='UnicodeError'), Constant(value='UnicodeTranslateError'), Constant(value='UnicodeWarning'), Constant(value='UserWarning'), Constant(value='ValueError'), Constant(value='Warning'), Constant(value='ZeroDivisionError')], ctx=Load())], keywords=[keyword(arg='prefix', value=Constant(value='(?<!\\.)')), keyword(arg='suffix', value=Constant(value='\\b'))]), Attribute(value=Name(id='Name', ctx=Load()), attr='Exception', ctx=Load())], ctx=Load())], ctx=Load()), List(elts=[Tuple(elts=[Constant(value='(\\d+\\.?\\d*|\\d*\\.\\d+)([eE][+-]?[0-9]+)?'), Attribute(value=Name(id='Number', ctx=Load()), attr='Float', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='0\\d+'), Attribute(value=Name(id='Number', ctx=Load()), attr='Oct', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='0[xX][a-fA-F0-9]+'), Attribute(value=Name(id='Number', ctx=Load()), attr='Hex', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='\\d+L'), Attribute(value=Attribute(value=Name(id='Number', ctx=Load()), attr='Integer', ctx=Load()), attr='Long', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='\\d+'), Attribute(value=Name(id='Number', ctx=Load()), attr='Integer', ctx=Load())], ctx=Load())], ctx=Load()), List(elts=[Tuple(elts=[Constant(value='`.*?`'), Attribute(value=Name(id='String', ctx=Load()), attr='Backtick', ctx=Load())], ctx=Load())], ctx=Load()), List(elts=[Tuple(elts=[Constant(value='@\\w+'), Attribute(value=Name(id='Name', ctx=Load()), attr='Decorator', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='[a-zA-Z_]\\w*'), Name(id='Name', ctx=Load())], ctx=Load())], ctx=Load()), List(elts=[Tuple(elts=[Constant(value='[a-zA-Z_]\\w*'), Attribute(value=Name(id='Name', ctx=Load()), attr='Function', ctx=Load()), Constant(value='#pop')], ctx=Load())], ctx=Load()), List(elts=[Tuple(elts=[Constant(value='(public|readonly|extern|api|inline)\\b'), Attribute(value=Name(id='Keyword', ctx=Load()), attr='Reserved', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='(struct|enum|union|class)\\b'), Name(id='Keyword', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='([a-zA-Z_]\\w*)(\\s*)(?=[(:#=]|$)'), Call(func=Name(id='bygroups', ctx=Load()), args=[Attribute(value=Name(id='Name', ctx=Load()), attr='Function', ctx=Load()), Name(id='Text', ctx=Load())], keywords=[]), Constant(value='#pop')], ctx=Load()), Tuple(elts=[Constant(value='([a-zA-Z_]\\w*)(\\s*)(,)'), Call(func=Name(id='bygroups', ctx=Load()), args=[Attribute(value=Name(id='Name', ctx=Load()), attr='Function', ctx=Load()), Name(id='Text', ctx=Load()), Name(id='Punctuation', ctx=Load())], keywords=[])], ctx=Load()), Tuple(elts=[Constant(value='from\\b'), Name(id='Keyword', ctx=Load()), Constant(value='#pop')], ctx=Load()), Tuple(elts=[Constant(value='as\\b'), Name(id='Keyword', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value=':'), Name(id='Punctuation', ctx=Load()), Constant(value='#pop')], ctx=Load()), Tuple(elts=[Constant(value='(?=["\\\'])'), Name(id='Text', ctx=Load()), Constant(value='#pop')], ctx=Load()), Tuple(elts=[Constant(value='[a-zA-Z_]\\w*'), Attribute(value=Name(id='Keyword', ctx=Load()), attr='Type', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='.'), Name(id='Text', ctx=Load())], ctx=Load())], ctx=Load()), List(elts=[Tuple(elts=[Constant(value='[a-zA-Z_]\\w*'), Attribute(value=Name(id='Name', ctx=Load()), attr='Class', ctx=Load()), Constant(value='#pop')], ctx=Load())], ctx=Load()), List(elts=[Tuple(elts=[Constant(value='(\\s+)(as)(\\s+)'), Call(func=Name(id='bygroups', ctx=Load()), args=[Name(id='Text', ctx=Load()), Name(id='Keyword', ctx=Load()), Name(id='Text', ctx=Load())], keywords=[])], ctx=Load()), Tuple(elts=[Constant(value='[a-zA-Z_][\\w.]*'), Attribute(value=Name(id='Name', ctx=Load()), attr='Namespace', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='(\\s*)(,)(\\s*)'), Call(func=Name(id='bygroups', ctx=Load()), args=[Name(id='Text', ctx=Load()), Name(id='Operator', ctx=Load()), Name(id='Text', ctx=Load())], keywords=[])], ctx=Load()), Call(func=Name(id='default', ctx=Load()), args=[Constant(value='#pop')], keywords=[])], ctx=Load()), List(elts=[Tuple(elts=[Constant(value='(\\s+)(c?import)\\b'), Call(func=Name(id='bygroups', ctx=Load()), args=[Name(id='Text', ctx=Load()), Name(id='Keyword', ctx=Load())], keywords=[]), Constant(value='#pop')], ctx=Load()), Tuple(elts=[Constant(value='[a-zA-Z_.][\\w.]*'), Attribute(value=Name(id='Name', ctx=Load()), attr='Namespace', ctx=Load())], ctx=Load()), Call(func=Name(id='default', ctx=Load()), args=[Constant(value='#pop')], keywords=[])], ctx=Load()), List(elts=[Tuple(elts=[Constant(value='\\\\([\\\\abfnrtv"\\\']|\\n|N\\{.*?\\}|u[a-fA-F0-9]{4}|U[a-fA-F0-9]{8}|x[a-fA-F0-9]{2}|[0-7]{1,3})'), Attribute(value=Name(id='String', ctx=Load()), attr='Escape', ctx=Load())], ctx=Load())], ctx=Load()), List(elts=[Tuple(elts=[Constant(value='%(\\([a-zA-Z0-9]+\\))?[-#0 +]*([0-9]+|[*])?(\\.([0-9]+|[*]))?[hlL]?[E-GXc-giorsux%]'), Attribute(value=Name(id='String', ctx=Load()), attr='Interpol', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='[^\\\\\\\'"%\\n]+'), Name(id='String', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='[\\\'"\\\\]'), Name(id='String', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='%'), Name(id='String', ctx=Load())], ctx=Load())], ctx=Load()), List(elts=[Tuple(elts=[Constant(value='\\n'), Name(id='String', ctx=Load())], ctx=Load())], ctx=Load()), List(elts=[Tuple(elts=[Constant(value='"'), Name(id='String', ctx=Load()), Constant(value='#pop')], ctx=Load()), Tuple(elts=[Constant(value='\\\\\\\\|\\\\"|\\\\\\n'), Attribute(value=Name(id='String', ctx=Load()), attr='Escape', ctx=Load())], ctx=Load()), Call(func=Name(id='include', ctx=Load()), args=[Constant(value='strings')], keywords=[])], ctx=Load()), List(elts=[Tuple(elts=[Constant(value="'"), Name(id='String', ctx=Load()), Constant(value='#pop')], ctx=Load()), Tuple(elts=[Constant(value="\\\\\\\\|\\\\'|\\\\\\n"), Attribute(value=Name(id='String', ctx=Load()), attr='Escape', ctx=Load())], ctx=Load()), Call(func=Name(id='include', ctx=Load()), args=[Constant(value='strings')], keywords=[])], ctx=Load()), List(elts=[Tuple(elts=[Constant(value='"""'), Name(id='String', ctx=Load()), Constant(value='#pop')], ctx=Load()), Call(func=Name(id='include', ctx=Load()), args=[Constant(value='strings')], keywords=[]), Call(func=Name(id='include', ctx=Load()), args=[Constant(value='nl')], keywords=[])], ctx=Load()), List(elts=[Tuple(elts=[Constant(value="'''"), Name(id='String', ctx=Load()), Constant(value='#pop')], ctx=Load()), Call(func=Name(id='include', ctx=Load()), args=[Constant(value='strings')], keywords=[]), Call(func=Name(id='include', ctx=Load()), args=[Constant(value='nl')], keywords=[])], ctx=Load())]))], decorator_list=[]), ClassDef(name='DgLexer', bases=[Name(id='RegexLexer', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Lexer for dg,\n    a functional and object-oriented programming language\n    running on the CPython 3 VM.\n\n    .. versionadded:: 1.6\n    ')), Assign(targets=[Name(id='name', ctx=Store())], value=Constant(value='dg')), Assign(targets=[Name(id='aliases', ctx=Store())], value=List(elts=[Constant(value='dg')], ctx=Load())), Assign(targets=[Name(id='filenames', ctx=Store())], value=List(elts=[Constant(value='*.dg')], ctx=Load())), Assign(targets=[Name(id='mimetypes', ctx=Store())], value=List(elts=[Constant(value='text/x-dg')], ctx=Load())), Assign(targets=[Name(id='tokens', ctx=Store())], value=Dict(keys=[Constant(value='root'), Constant(value='stringescape'), Constant(value='string'), Constant(value='dqs'), Constant(value='sqs'), Constant(value='tdqs'), Constant(value='tsqs')], values=[List(elts=[Tuple(elts=[Constant(value='\\s+'), Name(id='Text', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='#.*?$'), Attribute(value=Name(id='Comment', ctx=Load()), attr='Single', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='(?i)0b[01]+'), Attribute(value=Name(id='Number', ctx=Load()), attr='Bin', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='(?i)0o[0-7]+'), Attribute(value=Name(id='Number', ctx=Load()), attr='Oct', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='(?i)0x[0-9a-f]+'), Attribute(value=Name(id='Number', ctx=Load()), attr='Hex', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='(?i)[+-]?[0-9]+\\.[0-9]+(e[+-]?[0-9]+)?j?'), Attribute(value=Name(id='Number', ctx=Load()), attr='Float', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='(?i)[+-]?[0-9]+e[+-]?\\d+j?'), Attribute(value=Name(id='Number', ctx=Load()), attr='Float', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='(?i)[+-]?[0-9]+j?'), Attribute(value=Name(id='Number', ctx=Load()), attr='Integer', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value="(?i)(br|r?b?)'''"), Name(id='String', ctx=Load()), Call(func=Name(id='combined', ctx=Load()), args=[Constant(value='stringescape'), Constant(value='tsqs'), Constant(value='string')], keywords=[])], ctx=Load()), Tuple(elts=[Constant(value='(?i)(br|r?b?)"""'), Name(id='String', ctx=Load()), Call(func=Name(id='combined', ctx=Load()), args=[Constant(value='stringescape'), Constant(value='tdqs'), Constant(value='string')], keywords=[])], ctx=Load()), Tuple(elts=[Constant(value="(?i)(br|r?b?)'"), Name(id='String', ctx=Load()), Call(func=Name(id='combined', ctx=Load()), args=[Constant(value='stringescape'), Constant(value='sqs'), Constant(value='string')], keywords=[])], ctx=Load()), Tuple(elts=[Constant(value='(?i)(br|r?b?)"'), Name(id='String', ctx=Load()), Call(func=Name(id='combined', ctx=Load()), args=[Constant(value='stringescape'), Constant(value='dqs'), Constant(value='string')], keywords=[])], ctx=Load()), Tuple(elts=[Constant(value="`\\w+'*`"), Name(id='Operator', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='\\b(and|in|is|or|where)\\b'), Attribute(value=Name(id='Operator', ctx=Load()), attr='Word', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='[!$%&*+\\-./:<-@\\\\^|~;,]+'), Name(id='Operator', ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='words', ctx=Load()), args=[Tuple(elts=[Constant(value='bool'), Constant(value='bytearray'), Constant(value='bytes'), Constant(value='classmethod'), Constant(value='complex'), Constant(value='dict'), Constant(value="dict'"), Constant(value='float'), Constant(value='frozenset'), Constant(value='int'), Constant(value='list'), Constant(value="list'"), Constant(value='memoryview'), Constant(value='object'), Constant(value='property'), Constant(value='range'), Constant(value='set'), Constant(value="set'"), Constant(value='slice'), Constant(value='staticmethod'), Constant(value='str'), Constant(value='super'), Constant(value='tuple'), Constant(value="tuple'"), Constant(value='type')], ctx=Load())], keywords=[keyword(arg='prefix', value=Constant(value='(?<!\\.)')), keyword(arg='suffix', value=Constant(value="(?![\\'\\w])"))]), Attribute(value=Name(id='Name', ctx=Load()), attr='Builtin', ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='words', ctx=Load()), args=[Tuple(elts=[Constant(value='__import__'), Constant(value='abs'), Constant(value='all'), Constant(value='any'), Constant(value='bin'), Constant(value='bind'), Constant(value='chr'), Constant(value='cmp'), Constant(value='compile'), Constant(value='complex'), Constant(value='delattr'), Constant(value='dir'), Constant(value='divmod'), Constant(value='drop'), Constant(value='dropwhile'), Constant(value='enumerate'), Constant(value='eval'), Constant(value='exhaust'), Constant(value='filter'), Constant(value='flip'), Constant(value='foldl1?'), Constant(value='format'), Constant(value='fst'), Constant(value='getattr'), Constant(value='globals'), Constant(value='hasattr'), Constant(value='hash'), Constant(value='head'), Constant(value='hex'), Constant(value='id'), Constant(value='init'), Constant(value='input'), Constant(value='isinstance'), Constant(value='issubclass'), Constant(value='iter'), Constant(value='iterate'), Constant(value='last'), Constant(value='len'), Constant(value='locals'), Constant(value='map'), Constant(value='max'), Constant(value='min'), Constant(value='next'), Constant(value='oct'), Constant(value='open'), Constant(value='ord'), Constant(value='pow'), Constant(value='print'), Constant(value='repr'), Constant(value='reversed'), Constant(value='round'), Constant(value='setattr'), Constant(value='scanl1?'), Constant(value='snd'), Constant(value='sorted'), Constant(value='sum'), Constant(value='tail'), Constant(value='take'), Constant(value='takewhile'), Constant(value='vars'), Constant(value='zip')], ctx=Load())], keywords=[keyword(arg='prefix', value=Constant(value='(?<!\\.)')), keyword(arg='suffix', value=Constant(value="(?![\\'\\w])"))]), Attribute(value=Name(id='Name', ctx=Load()), attr='Builtin', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value="(?<!\\.)(self|Ellipsis|NotImplemented|None|True|False)(?!['\\w])"), Attribute(value=Attribute(value=Name(id='Name', ctx=Load()), attr='Builtin', ctx=Load()), attr='Pseudo', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value="(?<!\\.)[A-Z]\\w*(Error|Exception|Warning)'*(?!['\\w])"), Attribute(value=Name(id='Name', ctx=Load()), attr='Exception', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value="(?<!\\.)(Exception|GeneratorExit|KeyboardInterrupt|StopIteration|SystemExit)(?!['\\w])"), Attribute(value=Name(id='Name', ctx=Load()), attr='Exception', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value="(?<![\\w.])(except|finally|for|if|import|not|otherwise|raise|subclass|while|with|yield)(?!['\\w])"), Attribute(value=Name(id='Keyword', ctx=Load()), attr='Reserved', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value="[A-Z_]+'*(?!['\\w])"), Name(id='Name', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value="[A-Z]\\w+'*(?!['\\w])"), Attribute(value=Name(id='Keyword', ctx=Load()), attr='Type', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value="\\w+'*"), Name(id='Name', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='[()]'), Name(id='Punctuation', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='.'), Name(id='Error', ctx=Load())], ctx=Load())], ctx=Load()), List(elts=[Tuple(elts=[Constant(value='\\\\([\\\\abfnrtv"\\\']|\\n|N\\{.*?\\}|u[a-fA-F0-9]{4}|U[a-fA-F0-9]{8}|x[a-fA-F0-9]{2}|[0-7]{1,3})'), Attribute(value=Name(id='String', ctx=Load()), attr='Escape', ctx=Load())], ctx=Load())], ctx=Load()), List(elts=[Tuple(elts=[Constant(value='%(\\(\\w+\\))?[-#0 +]*([0-9]+|[*])?(\\.([0-9]+|[*]))?[hlL]?[E-GXc-giorsux%]'), Attribute(value=Name(id='String', ctx=Load()), attr='Interpol', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='[^\\\\\\\'"%\\n]+'), Name(id='String', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='[\\\'"\\\\]'), Name(id='String', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='%'), Name(id='String', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='\\n'), Name(id='String', ctx=Load())], ctx=Load())], ctx=Load()), List(elts=[Tuple(elts=[Constant(value='"'), Name(id='String', ctx=Load()), Constant(value='#pop')], ctx=Load())], ctx=Load()), List(elts=[Tuple(elts=[Constant(value="'"), Name(id='String', ctx=Load()), Constant(value='#pop')], ctx=Load())], ctx=Load()), List(elts=[Tuple(elts=[Constant(value='"""'), Name(id='String', ctx=Load()), Constant(value='#pop')], ctx=Load())], ctx=Load()), List(elts=[Tuple(elts=[Constant(value="'''"), Name(id='String', ctx=Load()), Constant(value='#pop')], ctx=Load())], ctx=Load())]))], decorator_list=[]), ClassDef(name='NumPyLexer', bases=[Name(id='PythonLexer', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    A Python lexer recognizing Numerical Python builtins.\n\n    .. versionadded:: 0.10\n    ')), Assign(targets=[Name(id='name', ctx=Store())], value=Constant(value='NumPy')), Assign(targets=[Name(id='url', ctx=Store())], value=Constant(value='https://numpy.org/')), Assign(targets=[Name(id='aliases', ctx=Store())], value=List(elts=[Constant(value='numpy')], ctx=Load())), Assign(targets=[Name(id='mimetypes', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='filenames', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='EXTRA_KEYWORDS', ctx=Store())], value=Set(elts=[Constant(value='abs'), Constant(value='absolute'), Constant(value='accumulate'), Constant(value='add'), Constant(value='alen'), Constant(value='all'), Constant(value='allclose'), Constant(value='alltrue'), Constant(value='alterdot'), Constant(value='amax'), Constant(value='amin'), Constant(value='angle'), Constant(value='any'), Constant(value='append'), Constant(value='apply_along_axis'), Constant(value='apply_over_axes'), Constant(value='arange'), Constant(value='arccos'), Constant(value='arccosh'), Constant(value='arcsin'), Constant(value='arcsinh'), Constant(value='arctan'), Constant(value='arctan2'), Constant(value='arctanh'), Constant(value='argmax'), Constant(value='argmin'), Constant(value='argsort'), Constant(value='argwhere'), Constant(value='around'), Constant(value='array'), Constant(value='array2string'), Constant(value='array_equal'), Constant(value='array_equiv'), Constant(value='array_repr'), Constant(value='array_split'), Constant(value='array_str'), Constant(value='arrayrange'), Constant(value='asanyarray'), Constant(value='asarray'), Constant(value='asarray_chkfinite'), Constant(value='ascontiguousarray'), Constant(value='asfarray'), Constant(value='asfortranarray'), Constant(value='asmatrix'), Constant(value='asscalar'), Constant(value='astype'), Constant(value='atleast_1d'), Constant(value='atleast_2d'), Constant(value='atleast_3d'), Constant(value='average'), Constant(value='bartlett'), Constant(value='base_repr'), Constant(value='beta'), Constant(value='binary_repr'), Constant(value='bincount'), Constant(value='binomial'), Constant(value='bitwise_and'), Constant(value='bitwise_not'), Constant(value='bitwise_or'), Constant(value='bitwise_xor'), Constant(value='blackman'), Constant(value='bmat'), Constant(value='broadcast'), Constant(value='byte_bounds'), Constant(value='bytes'), Constant(value='byteswap'), Constant(value='c_'), Constant(value='can_cast'), Constant(value='ceil'), Constant(value='choose'), Constant(value='clip'), Constant(value='column_stack'), Constant(value='common_type'), Constant(value='compare_chararrays'), Constant(value='compress'), Constant(value='concatenate'), Constant(value='conj'), Constant(value='conjugate'), Constant(value='convolve'), Constant(value='copy'), Constant(value='corrcoef'), Constant(value='correlate'), Constant(value='cos'), Constant(value='cosh'), Constant(value='cov'), Constant(value='cross'), Constant(value='cumprod'), Constant(value='cumproduct'), Constant(value='cumsum'), Constant(value='delete'), Constant(value='deprecate'), Constant(value='diag'), Constant(value='diagflat'), Constant(value='diagonal'), Constant(value='diff'), Constant(value='digitize'), Constant(value='disp'), Constant(value='divide'), Constant(value='dot'), Constant(value='dsplit'), Constant(value='dstack'), Constant(value='dtype'), Constant(value='dump'), Constant(value='dumps'), Constant(value='ediff1d'), Constant(value='empty'), Constant(value='empty_like'), Constant(value='equal'), Constant(value='exp'), Constant(value='expand_dims'), Constant(value='expm1'), Constant(value='extract'), Constant(value='eye'), Constant(value='fabs'), Constant(value='fastCopyAndTranspose'), Constant(value='fft'), Constant(value='fftfreq'), Constant(value='fftshift'), Constant(value='fill'), Constant(value='finfo'), Constant(value='fix'), Constant(value='flat'), Constant(value='flatnonzero'), Constant(value='flatten'), Constant(value='fliplr'), Constant(value='flipud'), Constant(value='floor'), Constant(value='floor_divide'), Constant(value='fmod'), Constant(value='frexp'), Constant(value='fromarrays'), Constant(value='frombuffer'), Constant(value='fromfile'), Constant(value='fromfunction'), Constant(value='fromiter'), Constant(value='frompyfunc'), Constant(value='fromstring'), Constant(value='generic'), Constant(value='get_array_wrap'), Constant(value='get_include'), Constant(value='get_numarray_include'), Constant(value='get_numpy_include'), Constant(value='get_printoptions'), Constant(value='getbuffer'), Constant(value='getbufsize'), Constant(value='geterr'), Constant(value='geterrcall'), Constant(value='geterrobj'), Constant(value='getfield'), Constant(value='gradient'), Constant(value='greater'), Constant(value='greater_equal'), Constant(value='gumbel'), Constant(value='hamming'), Constant(value='hanning'), Constant(value='histogram'), Constant(value='histogram2d'), Constant(value='histogramdd'), Constant(value='hsplit'), Constant(value='hstack'), Constant(value='hypot'), Constant(value='i0'), Constant(value='identity'), Constant(value='ifft'), Constant(value='imag'), Constant(value='index_exp'), Constant(value='indices'), Constant(value='inf'), Constant(value='info'), Constant(value='inner'), Constant(value='insert'), Constant(value='int_asbuffer'), Constant(value='interp'), Constant(value='intersect1d'), Constant(value='intersect1d_nu'), Constant(value='inv'), Constant(value='invert'), Constant(value='iscomplex'), Constant(value='iscomplexobj'), Constant(value='isfinite'), Constant(value='isfortran'), Constant(value='isinf'), Constant(value='isnan'), Constant(value='isneginf'), Constant(value='isposinf'), Constant(value='isreal'), Constant(value='isrealobj'), Constant(value='isscalar'), Constant(value='issctype'), Constant(value='issubclass_'), Constant(value='issubdtype'), Constant(value='issubsctype'), Constant(value='item'), Constant(value='itemset'), Constant(value='iterable'), Constant(value='ix_'), Constant(value='kaiser'), Constant(value='kron'), Constant(value='ldexp'), Constant(value='left_shift'), Constant(value='less'), Constant(value='less_equal'), Constant(value='lexsort'), Constant(value='linspace'), Constant(value='load'), Constant(value='loads'), Constant(value='loadtxt'), Constant(value='log'), Constant(value='log10'), Constant(value='log1p'), Constant(value='log2'), Constant(value='logical_and'), Constant(value='logical_not'), Constant(value='logical_or'), Constant(value='logical_xor'), Constant(value='logspace'), Constant(value='lstsq'), Constant(value='mat'), Constant(value='matrix'), Constant(value='max'), Constant(value='maximum'), Constant(value='maximum_sctype'), Constant(value='may_share_memory'), Constant(value='mean'), Constant(value='median'), Constant(value='meshgrid'), Constant(value='mgrid'), Constant(value='min'), Constant(value='minimum'), Constant(value='mintypecode'), Constant(value='mod'), Constant(value='modf'), Constant(value='msort'), Constant(value='multiply'), Constant(value='nan'), Constant(value='nan_to_num'), Constant(value='nanargmax'), Constant(value='nanargmin'), Constant(value='nanmax'), Constant(value='nanmin'), Constant(value='nansum'), Constant(value='ndenumerate'), Constant(value='ndim'), Constant(value='ndindex'), Constant(value='negative'), Constant(value='newaxis'), Constant(value='newbuffer'), Constant(value='newbyteorder'), Constant(value='nonzero'), Constant(value='not_equal'), Constant(value='obj2sctype'), Constant(value='ogrid'), Constant(value='ones'), Constant(value='ones_like'), Constant(value='outer'), Constant(value='permutation'), Constant(value='piecewise'), Constant(value='pinv'), Constant(value='pkgload'), Constant(value='place'), Constant(value='poisson'), Constant(value='poly'), Constant(value='poly1d'), Constant(value='polyadd'), Constant(value='polyder'), Constant(value='polydiv'), Constant(value='polyfit'), Constant(value='polyint'), Constant(value='polymul'), Constant(value='polysub'), Constant(value='polyval'), Constant(value='power'), Constant(value='prod'), Constant(value='product'), Constant(value='ptp'), Constant(value='put'), Constant(value='putmask'), Constant(value='r_'), Constant(value='randint'), Constant(value='random_integers'), Constant(value='random_sample'), Constant(value='ranf'), Constant(value='rank'), Constant(value='ravel'), Constant(value='real'), Constant(value='real_if_close'), Constant(value='recarray'), Constant(value='reciprocal'), Constant(value='reduce'), Constant(value='remainder'), Constant(value='repeat'), Constant(value='require'), Constant(value='reshape'), Constant(value='resize'), Constant(value='restoredot'), Constant(value='right_shift'), Constant(value='rint'), Constant(value='roll'), Constant(value='rollaxis'), Constant(value='roots'), Constant(value='rot90'), Constant(value='round'), Constant(value='round_'), Constant(value='row_stack'), Constant(value='s_'), Constant(value='sample'), Constant(value='savetxt'), Constant(value='sctype2char'), Constant(value='searchsorted'), Constant(value='seed'), Constant(value='select'), Constant(value='set_numeric_ops'), Constant(value='set_printoptions'), Constant(value='set_string_function'), Constant(value='setbufsize'), Constant(value='setdiff1d'), Constant(value='seterr'), Constant(value='seterrcall'), Constant(value='seterrobj'), Constant(value='setfield'), Constant(value='setflags'), Constant(value='setmember1d'), Constant(value='setxor1d'), Constant(value='shape'), Constant(value='show_config'), Constant(value='shuffle'), Constant(value='sign'), Constant(value='signbit'), Constant(value='sin'), Constant(value='sinc'), Constant(value='sinh'), Constant(value='size'), Constant(value='slice'), Constant(value='solve'), Constant(value='sometrue'), Constant(value='sort'), Constant(value='sort_complex'), Constant(value='source'), Constant(value='split'), Constant(value='sqrt'), Constant(value='square'), Constant(value='squeeze'), Constant(value='standard_normal'), Constant(value='std'), Constant(value='subtract'), Constant(value='sum'), Constant(value='svd'), Constant(value='swapaxes'), Constant(value='take'), Constant(value='tan'), Constant(value='tanh'), Constant(value='tensordot'), Constant(value='test'), Constant(value='tile'), Constant(value='tofile'), Constant(value='tolist'), Constant(value='tostring'), Constant(value='trace'), Constant(value='transpose'), Constant(value='trapz'), Constant(value='tri'), Constant(value='tril'), Constant(value='trim_zeros'), Constant(value='triu'), Constant(value='true_divide'), Constant(value='typeDict'), Constant(value='typename'), Constant(value='uniform'), Constant(value='union1d'), Constant(value='unique'), Constant(value='unique1d'), Constant(value='unravel_index'), Constant(value='unwrap'), Constant(value='vander'), Constant(value='var'), Constant(value='vdot'), Constant(value='vectorize'), Constant(value='view'), Constant(value='vonmises'), Constant(value='vsplit'), Constant(value='vstack'), Constant(value='weibull'), Constant(value='where'), Constant(value='who'), Constant(value='zeros'), Constant(value='zeros_like')])), FunctionDef(name='get_tokens_unprocessed', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='text')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='token', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='PythonLexer', ctx=Load()), attr='get_tokens_unprocessed', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='text', ctx=Load())], keywords=[]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='token', ctx=Load()), ops=[Is()], comparators=[Name(id='Name', ctx=Load())]), Compare(left=Name(id='value', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='EXTRA_KEYWORDS', ctx=Load())])]), body=[Expr(value=Yield(value=Tuple(elts=[Name(id='index', ctx=Load()), Attribute(value=Name(id='Keyword', ctx=Load()), attr='Pseudo', ctx=Load()), Name(id='value', ctx=Load())], ctx=Load())))], orelse=[Expr(value=Yield(value=Tuple(elts=[Name(id='index', ctx=Load()), Name(id='token', ctx=Load()), Name(id='value', ctx=Load())], ctx=Load())))])], orelse=[])], decorator_list=[]), FunctionDef(name='analyse_text', args=arguments(posonlyargs=[], args=[arg(arg='text')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ltext', ctx=Store())], value=Subscript(value=Name(id='text', ctx=Load()), slice=Slice(upper=Constant(value=1000)), ctx=Load())), Return(value=BoolOp(op=And(), values=[BoolOp(op=Or(), values=[Call(func=Name(id='shebang_matches', ctx=Load()), args=[Name(id='text', ctx=Load()), Constant(value='pythonw?(3(\\.\\d)?)?')], keywords=[]), Compare(left=Constant(value='import '), ops=[In()], comparators=[Name(id='ltext', ctx=Load())])]), BoolOp(op=Or(), values=[Compare(left=Constant(value='import numpy'), ops=[In()], comparators=[Name(id='ltext', ctx=Load())]), Compare(left=Constant(value='from numpy import'), ops=[In()], comparators=[Name(id='ltext', ctx=Load())])])]))], decorator_list=[])], decorator_list=[])], type_ignores=[])