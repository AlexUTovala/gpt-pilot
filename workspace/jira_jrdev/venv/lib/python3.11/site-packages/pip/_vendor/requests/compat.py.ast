Module(body=[Expr(value=Constant(value='\nrequests.compat\n~~~~~~~~~~~~~~~\n\nThis module previously handled import compatibility issues\nbetween Python 2 and Python 3. It remains for backwards\ncompatibility until the next major version.\n')), ImportFrom(module='pip._vendor', names=[alias(name='chardet')], level=0), Import(names=[alias(name='sys')]), Assign(targets=[Name(id='_ver', ctx=Store())], value=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load())), Assign(targets=[Name(id='is_py2', ctx=Store())], value=Compare(left=Subscript(value=Name(id='_ver', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Constant(value=2)])), Assign(targets=[Name(id='is_py3', ctx=Store())], value=Compare(left=Subscript(value=Name(id='_ver', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Constant(value=3)])), Import(names=[alias(name='json')]), ImportFrom(module='json', names=[alias(name='JSONDecodeError')], level=0), ImportFrom(module='collections', names=[alias(name='OrderedDict')], level=0), ImportFrom(module='collections.abc', names=[alias(name='Callable'), alias(name='Mapping'), alias(name='MutableMapping')], level=0), ImportFrom(module='http', names=[alias(name='cookiejar', asname='cookielib')], level=0), ImportFrom(module='http.cookies', names=[alias(name='Morsel')], level=0), ImportFrom(module='io', names=[alias(name='StringIO')], level=0), ImportFrom(module='urllib.parse', names=[alias(name='quote'), alias(name='quote_plus'), alias(name='unquote'), alias(name='unquote_plus'), alias(name='urldefrag'), alias(name='urlencode'), alias(name='urljoin'), alias(name='urlparse'), alias(name='urlsplit'), alias(name='urlunparse')], level=0), ImportFrom(module='urllib.request', names=[alias(name='getproxies'), alias(name='getproxies_environment'), alias(name='parse_http_list'), alias(name='proxy_bypass'), alias(name='proxy_bypass_environment')], level=0), Assign(targets=[Name(id='builtin_str', ctx=Store())], value=Name(id='str', ctx=Load())), Assign(targets=[Name(id='str', ctx=Store())], value=Name(id='str', ctx=Load())), Assign(targets=[Name(id='bytes', ctx=Store())], value=Name(id='bytes', ctx=Load())), Assign(targets=[Name(id='basestring', ctx=Store())], value=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='bytes', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='numeric_types', ctx=Store())], value=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='integer_types', ctx=Store())], value=Tuple(elts=[Name(id='int', ctx=Load())], ctx=Load()))], type_ignores=[])