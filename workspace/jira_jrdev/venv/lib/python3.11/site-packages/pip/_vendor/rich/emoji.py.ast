Module(body=[Import(names=[alias(name='sys')]), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING'), alias(name='Optional'), alias(name='Union')], level=0), ImportFrom(module='jupyter', names=[alias(name='JupyterMixin')], level=1), ImportFrom(module='segment', names=[alias(name='Segment')], level=1), ImportFrom(module='style', names=[alias(name='Style')], level=1), ImportFrom(module='_emoji_codes', names=[alias(name='EMOJI')], level=1), ImportFrom(module='_emoji_replace', names=[alias(name='_emoji_replace')], level=1), If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), ops=[GtE()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=8)], ctx=Load())]), body=[ImportFrom(module='typing', names=[alias(name='Literal')], level=0)], orelse=[ImportFrom(module='pip._vendor.typing_extensions', names=[alias(name='Literal')], level=0)]), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='console', names=[alias(name='Console'), alias(name='ConsoleOptions'), alias(name='RenderResult')], level=1)], orelse=[]), Assign(targets=[Name(id='EmojiVariant', ctx=Store())], value=Subscript(value=Name(id='Literal', ctx=Load()), slice=Tuple(elts=[Constant(value='emoji'), Constant(value='text')], ctx=Load()), ctx=Load())), ClassDef(name='NoEmoji', bases=[Name(id='Exception', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='No emoji by that name.'))], decorator_list=[]), ClassDef(name='Emoji', bases=[Name(id='JupyterMixin', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='__slots__', ctx=Store())], value=List(elts=[Constant(value='name'), Constant(value='style'), Constant(value='_char'), Constant(value='variant')], ctx=Load())), Assign(targets=[Name(id='VARIANTS', ctx=Store())], value=Dict(keys=[Constant(value='text'), Constant(value='emoji')], values=[Constant(value='︎'), Constant(value='️')])), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='style', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Style', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='variant', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='EmojiVariant', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='none'), Constant(value=None)]), body=[Expr(value=Constant(value="A single emoji character.\n\n        Args:\n            name (str): Name of emoji.\n            style (Union[str, Style], optional): Optional style. Defaults to None.\n\n        Raises:\n            NoEmoji: If the emoji doesn't exist.\n        ")), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Store())], value=Name(id='name', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Store())], value=Name(id='style', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='variant', ctx=Store())], value=Name(id='variant', ctx=Load())), Try(body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_char', ctx=Store())], value=Subscript(value=Name(id='EMOJI', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='NoEmoji', ctx=Load()), args=[JoinedStr(values=[Constant(value='No emoji called '), FormattedValue(value=Name(id='name', ctx=Load()), conversion=114)])], keywords=[]))])], orelse=[], finalbody=[]), If(test=Compare(left=Name(id='variant', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_char', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='VARIANTS', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='variant', ctx=Load()), Constant(value='')], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='replace', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='text', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Replace emoji markup with corresponding unicode characters.\n\n        Args:\n            text (str): A string with emojis codes, e.g. "Hello :smiley:!"\n\n        Returns:\n            str: A string with emoji codes replaces with actual emoji.\n        ')), Return(value=Call(func=Name(id='_emoji_replace', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[Constant(value='<emoji '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), conversion=114), Constant(value='>')]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='__str__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_char', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='__rich_console__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='console', annotation=Constant(value='Console')), arg(arg='options', annotation=Constant(value='ConsoleOptions'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Yield(value=Call(func=Name(id='Segment', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_char', ctx=Load()), Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='get_style', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load())], keywords=[])], keywords=[])))], decorator_list=[], returns=Constant(value='RenderResult'))], decorator_list=[]), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__')]), body=[Import(names=[alias(name='sys')]), ImportFrom(module='pip._vendor.rich.columns', names=[alias(name='Columns')], level=0), ImportFrom(module='pip._vendor.rich.console', names=[alias(name='Console')], level=0), Assign(targets=[Name(id='console', ctx=Store())], value=Call(func=Name(id='Console', ctx=Load()), args=[], keywords=[keyword(arg='record', value=Constant(value=True))])), Assign(targets=[Name(id='columns', ctx=Store())], value=Call(func=Name(id='Columns', ctx=Load()), args=[GeneratorExp(elt=JoinedStr(values=[Constant(value=':'), FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1), Constant(value=': '), FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1)]), generators=[comprehension(target=Name(id='name', ctx=Store()), iter=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Attribute(value=Name(id='EMOJI', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[Compare(left=Constant(value='\u200d'), ops=[NotIn()], comparators=[Name(id='name', ctx=Load())])], is_async=0)])], keywords=[keyword(arg='column_first', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='print', ctx=Load()), args=[Name(id='columns', ctx=Load())], keywords=[])), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='argv', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='save_html', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='argv', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], type_ignores=[])