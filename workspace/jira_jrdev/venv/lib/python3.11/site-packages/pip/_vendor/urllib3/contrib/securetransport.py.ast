Module(body=[Expr(value=Constant(value='\nSecureTranport support for urllib3 via ctypes.\n\nThis makes platform-native TLS available to urllib3 users on macOS without the\nuse of a compiler. This is an important feature because the Python Package\nIndex is moving to become a TLSv1.2-or-higher server, and the default OpenSSL\nthat ships with macOS is not capable of doing TLSv1.2. The only way to resolve\nthis is to give macOS users an alternative solution to the problem, and that\nsolution is to use SecureTransport.\n\nWe use ctypes here because this solution must not require a compiler. That\'s\nbecause pip is not allowed to require a compiler either.\n\nThis is not intended to be a seriously long-term solution to this problem.\nThe hope is that PEP 543 will eventually solve this issue for us, at which\npoint we can retire this contrib module. But in the short term, we need to\nsolve the impending tire fire that is Python on Mac without this kind of\ncontrib module. So...here we are.\n\nTo use this module, simply import and inject it::\n\n    import pip._vendor.urllib3.contrib.securetransport as securetransport\n    securetransport.inject_into_urllib3()\n\nHappy TLSing!\n\nThis code is a bastardised version of the code found in Will Bond\'s oscrypto\nlibrary. An enormous debt is owed to him for blazing this trail for us. For\nthat reason, this code should be considered to be covered both by urllib3\'s\nlicense and by oscrypto\'s:\n\n.. code-block::\n\n    Copyright (c) 2015-2016 Will Bond <will@wbond.net>\n\n    Permission is hereby granted, free of charge, to any person obtaining a\n    copy of this software and associated documentation files (the "Software"),\n    to deal in the Software without restriction, including without limitation\n    the rights to use, copy, modify, merge, publish, distribute, sublicense,\n    and/or sell copies of the Software, and to permit persons to whom the\n    Software is furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in\n    all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n    DEALINGS IN THE SOFTWARE.\n')), ImportFrom(module='__future__', names=[alias(name='absolute_import')], level=0), Import(names=[alias(name='contextlib')]), Import(names=[alias(name='ctypes')]), Import(names=[alias(name='errno')]), Import(names=[alias(name='os.path')]), Import(names=[alias(name='shutil')]), Import(names=[alias(name='socket')]), Import(names=[alias(name='ssl')]), Import(names=[alias(name='struct')]), Import(names=[alias(name='threading')]), Import(names=[alias(name='weakref')]), ImportFrom(module='pip._vendor', names=[alias(name='six')], level=0), ImportFrom(names=[alias(name='util')], level=2), ImportFrom(module='util.ssl_', names=[alias(name='PROTOCOL_TLS_CLIENT')], level=2), ImportFrom(module='_securetransport.bindings', names=[alias(name='CoreFoundation'), alias(name='Security'), alias(name='SecurityConst')], level=1), ImportFrom(module='_securetransport.low_level', names=[alias(name='_assert_no_error'), alias(name='_build_tls_unknown_ca_alert'), alias(name='_cert_array_from_pem'), alias(name='_create_cfstring_array'), alias(name='_load_client_cert_chain'), alias(name='_temporary_keychain')], level=1), Try(body=[ImportFrom(module='socket', names=[alias(name='_fileobject')], level=0)], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Assign(targets=[Name(id='_fileobject', ctx=Store())], value=Constant(value=None)), ImportFrom(module='packages.backports.makefile', names=[alias(name='backport_makefile')], level=2)])], orelse=[], finalbody=[]), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='inject_into_urllib3'), Constant(value='extract_from_urllib3')], ctx=Load())), Assign(targets=[Name(id='HAS_SNI', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='orig_util_HAS_SNI', ctx=Store())], value=Attribute(value=Name(id='util', ctx=Load()), attr='HAS_SNI', ctx=Load())), Assign(targets=[Name(id='orig_util_SSLContext', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='util', ctx=Load()), attr='ssl_', ctx=Load()), attr='SSLContext', ctx=Load())), Assign(targets=[Name(id='_connection_refs', ctx=Store())], value=Call(func=Attribute(value=Name(id='weakref', ctx=Load()), attr='WeakValueDictionary', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='_connection_ref_lock', ctx=Store())], value=Call(func=Attribute(value=Name(id='threading', ctx=Load()), attr='Lock', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='SSL_WRITE_BLOCKSIZE', ctx=Store())], value=Constant(value=16384)), Assign(targets=[Name(id='CIPHER_SUITES', ctx=Store())], value=List(elts=[Attribute(value=Name(id='SecurityConst', ctx=Load()), attr='TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384', ctx=Load()), Attribute(value=Name(id='SecurityConst', ctx=Load()), attr='TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256', ctx=Load()), Attribute(value=Name(id='SecurityConst', ctx=Load()), attr='TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384', ctx=Load()), Attribute(value=Name(id='SecurityConst', ctx=Load()), attr='TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256', ctx=Load()), Attribute(value=Name(id='SecurityConst', ctx=Load()), attr='TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256', ctx=Load()), Attribute(value=Name(id='SecurityConst', ctx=Load()), attr='TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256', ctx=Load()), Attribute(value=Name(id='SecurityConst', ctx=Load()), attr='TLS_DHE_RSA_WITH_AES_256_GCM_SHA384', ctx=Load()), Attribute(value=Name(id='SecurityConst', ctx=Load()), attr='TLS_DHE_RSA_WITH_AES_128_GCM_SHA256', ctx=Load()), Attribute(value=Name(id='SecurityConst', ctx=Load()), attr='TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384', ctx=Load()), Attribute(value=Name(id='SecurityConst', ctx=Load()), attr='TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA', ctx=Load()), Attribute(value=Name(id='SecurityConst', ctx=Load()), attr='TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256', ctx=Load()), Attribute(value=Name(id='SecurityConst', ctx=Load()), attr='TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA', ctx=Load()), Attribute(value=Name(id='SecurityConst', ctx=Load()), attr='TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384', ctx=Load()), Attribute(value=Name(id='SecurityConst', ctx=Load()), attr='TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA', ctx=Load()), Attribute(value=Name(id='SecurityConst', ctx=Load()), attr='TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256', ctx=Load()), Attribute(value=Name(id='SecurityConst', ctx=Load()), attr='TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA', ctx=Load()), Attribute(value=Name(id='SecurityConst', ctx=Load()), attr='TLS_DHE_RSA_WITH_AES_256_CBC_SHA256', ctx=Load()), Attribute(value=Name(id='SecurityConst', ctx=Load()), attr='TLS_DHE_RSA_WITH_AES_256_CBC_SHA', ctx=Load()), Attribute(value=Name(id='SecurityConst', ctx=Load()), attr='TLS_DHE_RSA_WITH_AES_128_CBC_SHA256', ctx=Load()), Attribute(value=Name(id='SecurityConst', ctx=Load()), attr='TLS_DHE_RSA_WITH_AES_128_CBC_SHA', ctx=Load()), Attribute(value=Name(id='SecurityConst', ctx=Load()), attr='TLS_AES_256_GCM_SHA384', ctx=Load()), Attribute(value=Name(id='SecurityConst', ctx=Load()), attr='TLS_AES_128_GCM_SHA256', ctx=Load()), Attribute(value=Name(id='SecurityConst', ctx=Load()), attr='TLS_RSA_WITH_AES_256_GCM_SHA384', ctx=Load()), Attribute(value=Name(id='SecurityConst', ctx=Load()), attr='TLS_RSA_WITH_AES_128_GCM_SHA256', ctx=Load()), Attribute(value=Name(id='SecurityConst', ctx=Load()), attr='TLS_AES_128_CCM_8_SHA256', ctx=Load()), Attribute(value=Name(id='SecurityConst', ctx=Load()), attr='TLS_AES_128_CCM_SHA256', ctx=Load()), Attribute(value=Name(id='SecurityConst', ctx=Load()), attr='TLS_RSA_WITH_AES_256_CBC_SHA256', ctx=Load()), Attribute(value=Name(id='SecurityConst', ctx=Load()), attr='TLS_RSA_WITH_AES_128_CBC_SHA256', ctx=Load()), Attribute(value=Name(id='SecurityConst', ctx=Load()), attr='TLS_RSA_WITH_AES_256_CBC_SHA', ctx=Load()), Attribute(value=Name(id='SecurityConst', ctx=Load()), attr='TLS_RSA_WITH_AES_128_CBC_SHA', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='_protocol_to_min_max', ctx=Store())], value=Dict(keys=[Attribute(value=Name(id='util', ctx=Load()), attr='PROTOCOL_TLS', ctx=Load()), Name(id='PROTOCOL_TLS_CLIENT', ctx=Load())], values=[Tuple(elts=[Attribute(value=Name(id='SecurityConst', ctx=Load()), attr='kTLSProtocol1', ctx=Load()), Attribute(value=Name(id='SecurityConst', ctx=Load()), attr='kTLSProtocol12', ctx=Load())], ctx=Load()), Tuple(elts=[Attribute(value=Name(id='SecurityConst', ctx=Load()), attr='kTLSProtocol1', ctx=Load()), Attribute(value=Name(id='SecurityConst', ctx=Load()), attr='kTLSProtocol12', ctx=Load())], ctx=Load())])), If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='ssl', ctx=Load()), Constant(value='PROTOCOL_SSLv2')], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='_protocol_to_min_max', ctx=Load()), slice=Attribute(value=Name(id='ssl', ctx=Load()), attr='PROTOCOL_SSLv2', ctx=Load()), ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='SecurityConst', ctx=Load()), attr='kSSLProtocol2', ctx=Load()), Attribute(value=Name(id='SecurityConst', ctx=Load()), attr='kSSLProtocol2', ctx=Load())], ctx=Load()))], orelse=[]), If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='ssl', ctx=Load()), Constant(value='PROTOCOL_SSLv3')], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='_protocol_to_min_max', ctx=Load()), slice=Attribute(value=Name(id='ssl', ctx=Load()), attr='PROTOCOL_SSLv3', ctx=Load()), ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='SecurityConst', ctx=Load()), attr='kSSLProtocol3', ctx=Load()), Attribute(value=Name(id='SecurityConst', ctx=Load()), attr='kSSLProtocol3', ctx=Load())], ctx=Load()))], orelse=[]), If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='ssl', ctx=Load()), Constant(value='PROTOCOL_TLSv1')], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='_protocol_to_min_max', ctx=Load()), slice=Attribute(value=Name(id='ssl', ctx=Load()), attr='PROTOCOL_TLSv1', ctx=Load()), ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='SecurityConst', ctx=Load()), attr='kTLSProtocol1', ctx=Load()), Attribute(value=Name(id='SecurityConst', ctx=Load()), attr='kTLSProtocol1', ctx=Load())], ctx=Load()))], orelse=[]), If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='ssl', ctx=Load()), Constant(value='PROTOCOL_TLSv1_1')], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='_protocol_to_min_max', ctx=Load()), slice=Attribute(value=Name(id='ssl', ctx=Load()), attr='PROTOCOL_TLSv1_1', ctx=Load()), ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='SecurityConst', ctx=Load()), attr='kTLSProtocol11', ctx=Load()), Attribute(value=Name(id='SecurityConst', ctx=Load()), attr='kTLSProtocol11', ctx=Load())], ctx=Load()))], orelse=[]), If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='ssl', ctx=Load()), Constant(value='PROTOCOL_TLSv1_2')], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='_protocol_to_min_max', ctx=Load()), slice=Attribute(value=Name(id='ssl', ctx=Load()), attr='PROTOCOL_TLSv1_2', ctx=Load()), ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='SecurityConst', ctx=Load()), attr='kTLSProtocol12', ctx=Load()), Attribute(value=Name(id='SecurityConst', ctx=Load()), attr='kTLSProtocol12', ctx=Load())], ctx=Load()))], orelse=[]), FunctionDef(name='inject_into_urllib3', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Monkey-patch urllib3 with SecureTransport-backed SSL-support.\n    ')), Assign(targets=[Attribute(value=Name(id='util', ctx=Load()), attr='SSLContext', ctx=Store())], value=Name(id='SecureTransportContext', ctx=Load())), Assign(targets=[Attribute(value=Attribute(value=Name(id='util', ctx=Load()), attr='ssl_', ctx=Load()), attr='SSLContext', ctx=Store())], value=Name(id='SecureTransportContext', ctx=Load())), Assign(targets=[Attribute(value=Name(id='util', ctx=Load()), attr='HAS_SNI', ctx=Store())], value=Name(id='HAS_SNI', ctx=Load())), Assign(targets=[Attribute(value=Attribute(value=Name(id='util', ctx=Load()), attr='ssl_', ctx=Load()), attr='HAS_SNI', ctx=Store())], value=Name(id='HAS_SNI', ctx=Load())), Assign(targets=[Attribute(value=Name(id='util', ctx=Load()), attr='IS_SECURETRANSPORT', ctx=Store())], value=Constant(value=True)), Assign(targets=[Attribute(value=Attribute(value=Name(id='util', ctx=Load()), attr='ssl_', ctx=Load()), attr='IS_SECURETRANSPORT', ctx=Store())], value=Constant(value=True))], decorator_list=[]), FunctionDef(name='extract_from_urllib3', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Undo monkey-patching by :func:`inject_into_urllib3`.\n    ')), Assign(targets=[Attribute(value=Name(id='util', ctx=Load()), attr='SSLContext', ctx=Store())], value=Name(id='orig_util_SSLContext', ctx=Load())), Assign(targets=[Attribute(value=Attribute(value=Name(id='util', ctx=Load()), attr='ssl_', ctx=Load()), attr='SSLContext', ctx=Store())], value=Name(id='orig_util_SSLContext', ctx=Load())), Assign(targets=[Attribute(value=Name(id='util', ctx=Load()), attr='HAS_SNI', ctx=Store())], value=Name(id='orig_util_HAS_SNI', ctx=Load())), Assign(targets=[Attribute(value=Attribute(value=Name(id='util', ctx=Load()), attr='ssl_', ctx=Load()), attr='HAS_SNI', ctx=Store())], value=Name(id='orig_util_HAS_SNI', ctx=Load())), Assign(targets=[Attribute(value=Name(id='util', ctx=Load()), attr='IS_SECURETRANSPORT', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Attribute(value=Name(id='util', ctx=Load()), attr='ssl_', ctx=Load()), attr='IS_SECURETRANSPORT', ctx=Store())], value=Constant(value=False))], decorator_list=[]), FunctionDef(name='_read_callback', args=arguments(posonlyargs=[], args=[arg(arg='connection_id'), arg(arg='data_buffer'), arg(arg='data_length_pointer')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    SecureTransport read callback. This is called by ST to request that data\n    be returned from the socket.\n    ')), Assign(targets=[Name(id='wrapped_socket', ctx=Store())], value=Constant(value=None)), Try(body=[Assign(targets=[Name(id='wrapped_socket', ctx=Store())], value=Call(func=Attribute(value=Name(id='_connection_refs', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='connection_id', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='wrapped_socket', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Attribute(value=Name(id='SecurityConst', ctx=Load()), attr='errSSLInternal', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='base_socket', ctx=Store())], value=Attribute(value=Name(id='wrapped_socket', ctx=Load()), attr='socket', ctx=Load())), Assign(targets=[Name(id='requested_length', ctx=Store())], value=Subscript(value=Name(id='data_length_pointer', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='timeout', ctx=Store())], value=Call(func=Attribute(value=Name(id='wrapped_socket', ctx=Load()), attr='gettimeout', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='error', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='read_count', ctx=Store())], value=Constant(value=0)), Try(body=[While(test=Compare(left=Name(id='read_count', ctx=Load()), ops=[Lt()], comparators=[Name(id='requested_length', ctx=Load())]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='timeout', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Name(id='timeout', ctx=Load()), ops=[GtE()], comparators=[Constant(value=0)])]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='util', ctx=Load()), attr='wait_for_read', ctx=Load()), args=[Name(id='base_socket', ctx=Load()), Name(id='timeout', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Attribute(value=Name(id='socket', ctx=Load()), attr='error', ctx=Load()), args=[Attribute(value=Name(id='errno', ctx=Load()), attr='EAGAIN', ctx=Load()), Constant(value='timed out')], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='remaining', ctx=Store())], value=BinOp(left=Name(id='requested_length', ctx=Load()), op=Sub(), right=Name(id='read_count', ctx=Load()))), Assign(targets=[Name(id='buffer', ctx=Store())], value=Call(func=Attribute(value=BinOp(left=Attribute(value=Name(id='ctypes', ctx=Load()), attr='c_char', ctx=Load()), op=Mult(), right=Name(id='remaining', ctx=Load())), attr='from_address', ctx=Load()), args=[BinOp(left=Name(id='data_buffer', ctx=Load()), op=Add(), right=Name(id='read_count', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='chunk_size', ctx=Store())], value=Call(func=Attribute(value=Name(id='base_socket', ctx=Load()), attr='recv_into', ctx=Load()), args=[Name(id='buffer', ctx=Load()), Name(id='remaining', ctx=Load())], keywords=[])), AugAssign(target=Name(id='read_count', ctx=Store()), op=Add(), value=Name(id='chunk_size', ctx=Load())), If(test=UnaryOp(op=Not(), operand=Name(id='chunk_size', ctx=Load())), body=[If(test=UnaryOp(op=Not(), operand=Name(id='read_count', ctx=Load())), body=[Return(value=Attribute(value=Name(id='SecurityConst', ctx=Load()), attr='errSSLClosedGraceful', ctx=Load()))], orelse=[]), Break()], orelse=[])], orelse=[])], handlers=[ExceptHandler(type=Attribute(value=Name(id='socket', ctx=Load()), attr='error', ctx=Load()), name='e', body=[Assign(targets=[Name(id='error', ctx=Store())], value=Attribute(value=Name(id='e', ctx=Load()), attr='errno', ctx=Load())), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='error', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='error', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='errno', ctx=Load()), attr='EAGAIN', ctx=Load())])]), body=[Assign(targets=[Subscript(value=Name(id='data_length_pointer', ctx=Load()), slice=Constant(value=0), ctx=Store())], value=Name(id='read_count', ctx=Load())), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='error', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='errno', ctx=Load()), attr='ECONNRESET', ctx=Load())]), Compare(left=Name(id='error', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='errno', ctx=Load()), attr='EPIPE', ctx=Load())])]), body=[Return(value=Attribute(value=Name(id='SecurityConst', ctx=Load()), attr='errSSLClosedAbort', ctx=Load()))], orelse=[]), Raise()], orelse=[])])], orelse=[], finalbody=[]), Assign(targets=[Subscript(value=Name(id='data_length_pointer', ctx=Load()), slice=Constant(value=0), ctx=Store())], value=Name(id='read_count', ctx=Load())), If(test=Compare(left=Name(id='read_count', ctx=Load()), ops=[NotEq()], comparators=[Name(id='requested_length', ctx=Load())]), body=[Return(value=Attribute(value=Name(id='SecurityConst', ctx=Load()), attr='errSSLWouldBlock', ctx=Load()))], orelse=[]), Return(value=Constant(value=0))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='e', body=[If(test=Compare(left=Name(id='wrapped_socket', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='wrapped_socket', ctx=Load()), attr='_exception', ctx=Store())], value=Name(id='e', ctx=Load()))], orelse=[]), Return(value=Attribute(value=Name(id='SecurityConst', ctx=Load()), attr='errSSLInternal', ctx=Load()))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='_write_callback', args=arguments(posonlyargs=[], args=[arg(arg='connection_id'), arg(arg='data_buffer'), arg(arg='data_length_pointer')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    SecureTransport write callback. This is called by ST to request that data\n    actually be sent on the network.\n    ')), Assign(targets=[Name(id='wrapped_socket', ctx=Store())], value=Constant(value=None)), Try(body=[Assign(targets=[Name(id='wrapped_socket', ctx=Store())], value=Call(func=Attribute(value=Name(id='_connection_refs', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='connection_id', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='wrapped_socket', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Attribute(value=Name(id='SecurityConst', ctx=Load()), attr='errSSLInternal', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='base_socket', ctx=Store())], value=Attribute(value=Name(id='wrapped_socket', ctx=Load()), attr='socket', ctx=Load())), Assign(targets=[Name(id='bytes_to_write', ctx=Store())], value=Subscript(value=Name(id='data_length_pointer', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Name(id='ctypes', ctx=Load()), attr='string_at', ctx=Load()), args=[Name(id='data_buffer', ctx=Load()), Name(id='bytes_to_write', ctx=Load())], keywords=[])), Assign(targets=[Name(id='timeout', ctx=Store())], value=Call(func=Attribute(value=Name(id='wrapped_socket', ctx=Load()), attr='gettimeout', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='error', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='sent', ctx=Store())], value=Constant(value=0)), Try(body=[While(test=Compare(left=Name(id='sent', ctx=Load()), ops=[Lt()], comparators=[Name(id='bytes_to_write', ctx=Load())]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='timeout', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Name(id='timeout', ctx=Load()), ops=[GtE()], comparators=[Constant(value=0)])]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='util', ctx=Load()), attr='wait_for_write', ctx=Load()), args=[Name(id='base_socket', ctx=Load()), Name(id='timeout', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Attribute(value=Name(id='socket', ctx=Load()), attr='error', ctx=Load()), args=[Attribute(value=Name(id='errno', ctx=Load()), attr='EAGAIN', ctx=Load()), Constant(value='timed out')], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='chunk_sent', ctx=Store())], value=Call(func=Attribute(value=Name(id='base_socket', ctx=Load()), attr='send', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])), AugAssign(target=Name(id='sent', ctx=Store()), op=Add(), value=Name(id='chunk_sent', ctx=Load())), Assign(targets=[Name(id='data', ctx=Store())], value=Subscript(value=Name(id='data', ctx=Load()), slice=Slice(lower=Name(id='chunk_sent', ctx=Load())), ctx=Load()))], orelse=[])], handlers=[ExceptHandler(type=Attribute(value=Name(id='socket', ctx=Load()), attr='error', ctx=Load()), name='e', body=[Assign(targets=[Name(id='error', ctx=Store())], value=Attribute(value=Name(id='e', ctx=Load()), attr='errno', ctx=Load())), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='error', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='error', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='errno', ctx=Load()), attr='EAGAIN', ctx=Load())])]), body=[Assign(targets=[Subscript(value=Name(id='data_length_pointer', ctx=Load()), slice=Constant(value=0), ctx=Store())], value=Name(id='sent', ctx=Load())), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='error', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='errno', ctx=Load()), attr='ECONNRESET', ctx=Load())]), Compare(left=Name(id='error', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='errno', ctx=Load()), attr='EPIPE', ctx=Load())])]), body=[Return(value=Attribute(value=Name(id='SecurityConst', ctx=Load()), attr='errSSLClosedAbort', ctx=Load()))], orelse=[]), Raise()], orelse=[])])], orelse=[], finalbody=[]), Assign(targets=[Subscript(value=Name(id='data_length_pointer', ctx=Load()), slice=Constant(value=0), ctx=Store())], value=Name(id='sent', ctx=Load())), If(test=Compare(left=Name(id='sent', ctx=Load()), ops=[NotEq()], comparators=[Name(id='bytes_to_write', ctx=Load())]), body=[Return(value=Attribute(value=Name(id='SecurityConst', ctx=Load()), attr='errSSLWouldBlock', ctx=Load()))], orelse=[]), Return(value=Constant(value=0))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='e', body=[If(test=Compare(left=Name(id='wrapped_socket', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='wrapped_socket', ctx=Load()), attr='_exception', ctx=Store())], value=Name(id='e', ctx=Load()))], orelse=[]), Return(value=Attribute(value=Name(id='SecurityConst', ctx=Load()), attr='errSSLInternal', ctx=Load()))])], orelse=[], finalbody=[])], decorator_list=[]), Assign(targets=[Name(id='_read_callback_pointer', ctx=Store())], value=Call(func=Attribute(value=Name(id='Security', ctx=Load()), attr='SSLReadFunc', ctx=Load()), args=[Name(id='_read_callback', ctx=Load())], keywords=[])), Assign(targets=[Name(id='_write_callback_pointer', ctx=Store())], value=Call(func=Attribute(value=Name(id='Security', ctx=Load()), attr='SSLWriteFunc', ctx=Load()), args=[Name(id='_write_callback', ctx=Load())], keywords=[])), ClassDef(name='WrappedSocket', bases=[Name(id='object', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="\n    API-compatibility wrapper for Python's OpenSSL wrapped socket object.\n\n    Note: _makefile_refs, _drop(), and _reuse() are needed for the garbage\n    collector of PyPy.\n    ")), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='socket')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='socket', ctx=Store())], value=Name(id='socket', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='context', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_makefile_refs', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_closed', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_exception', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_keychain', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_keychain_dir', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_client_cert_chain', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_timeout', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='socket', ctx=Load()), attr='gettimeout', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='socket', ctx=Load()), attr='settimeout', ctx=Load()), args=[Constant(value=0)], keywords=[]))], decorator_list=[]), FunctionDef(name='_raise_on_error', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        A context manager that can be used to wrap calls that do I/O from\n        SecureTransport. If any of the I/O callbacks hit an exception, this\n        context manager will correctly propagate the exception after the fact.\n        This avoids silently swallowing those exceptions.\n\n        It also correctly forces the socket closed.\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_exception', ctx=Store())], value=Constant(value=None)), Expr(value=Yield()), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_exception', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Tuple(elts=[Name(id='exception', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='_exception', ctx=Store())], ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_exception', ctx=Load()), Constant(value=None)], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Raise(exc=Name(id='exception', ctx=Load()))], orelse=[])], decorator_list=[Attribute(value=Name(id='contextlib', ctx=Load()), attr='contextmanager', ctx=Load())]), FunctionDef(name='_set_ciphers', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Sets up the allowed ciphers. By default this matches the set in\n        util.ssl_.DEFAULT_CIPHERS, at least as supported by macOS. This is done\n        custom and doesn't allow changing at this time, mostly because parsing\n        OpenSSL cipher strings is going to be a freaking nightmare.\n        ")), Assign(targets=[Name(id='ciphers', ctx=Store())], value=Call(func=BinOp(left=Attribute(value=Name(id='Security', ctx=Load()), attr='SSLCipherSuite', ctx=Load()), op=Mult(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='CIPHER_SUITES', ctx=Load())], keywords=[])), args=[Starred(value=Name(id='CIPHER_SUITES', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='Security', ctx=Load()), attr='SSLSetEnabledCiphers', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='context', ctx=Load()), Name(id='ciphers', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='CIPHER_SUITES', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Name(id='_assert_no_error', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_set_alpn_protocols', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='protocols')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Sets up the ALPN protocols on the context.\n        ')), If(test=UnaryOp(op=Not(), operand=Name(id='protocols', ctx=Load())), body=[Return()], orelse=[]), Assign(targets=[Name(id='protocols_arr', ctx=Store())], value=Call(func=Name(id='_create_cfstring_array', ctx=Load()), args=[Name(id='protocols', ctx=Load())], keywords=[])), Try(body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='Security', ctx=Load()), attr='SSLSetALPNProtocols', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='context', ctx=Load()), Name(id='protocols_arr', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='_assert_no_error', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[]))], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='CoreFoundation', ctx=Load()), attr='CFRelease', ctx=Load()), args=[Name(id='protocols_arr', ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='_custom_validate', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='verify'), arg(arg='trust_bundle')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Called when we have set custom validation. We do this in two cases:\n        first, when cert validation is entirely disabled; and second, when\n        using a custom trust DB.\n        Raises an SSLError if the connection is not trusted.\n        ')), If(test=UnaryOp(op=Not(), operand=Name(id='verify', ctx=Load())), body=[Return()], orelse=[]), Assign(targets=[Name(id='successes', ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='SecurityConst', ctx=Load()), attr='kSecTrustResultUnspecified', ctx=Load()), Attribute(value=Name(id='SecurityConst', ctx=Load()), attr='kSecTrustResultProceed', ctx=Load())], ctx=Load())), Try(body=[Assign(targets=[Name(id='trust_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_evaluate_trust', ctx=Load()), args=[Name(id='trust_bundle', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='trust_result', ctx=Load()), ops=[In()], comparators=[Name(id='successes', ctx=Load())]), body=[Return()], orelse=[]), Assign(targets=[Name(id='reason', ctx=Store())], value=BinOp(left=Constant(value='error code: %d'), op=Mod(), right=Tuple(elts=[Name(id='trust_result', ctx=Load())], ctx=Load())))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='e', body=[Assign(targets=[Name(id='reason', ctx=Store())], value=BinOp(left=Constant(value='exception: %r'), op=Mod(), right=Tuple(elts=[Name(id='e', ctx=Load())], ctx=Load())))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='rec', ctx=Store())], value=Call(func=Name(id='_build_tls_unknown_ca_alert', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='version', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='socket', ctx=Load()), attr='sendall', ctx=Load()), args=[Name(id='rec', ctx=Load())], keywords=[])), Assign(targets=[Name(id='opts', ctx=Store())], value=Call(func=Attribute(value=Name(id='struct', ctx=Load()), attr='pack', ctx=Load()), args=[Constant(value='ii'), Constant(value=1), Constant(value=0)], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='socket', ctx=Load()), attr='setsockopt', ctx=Load()), args=[Attribute(value=Name(id='socket', ctx=Load()), attr='SOL_SOCKET', ctx=Load()), Attribute(value=Name(id='socket', ctx=Load()), attr='SO_LINGER', ctx=Load()), Name(id='opts', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Raise(exc=Call(func=Attribute(value=Name(id='ssl', ctx=Load()), attr='SSLError', ctx=Load()), args=[BinOp(left=Constant(value='certificate verify failed, %s'), op=Mod(), right=Name(id='reason', ctx=Load()))], keywords=[]))], decorator_list=[]), FunctionDef(name='_evaluate_trust', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='trust_bundle')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isfile', ctx=Load()), args=[Name(id='trust_bundle', ctx=Load())], keywords=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='trust_bundle', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='trust_bundle', ctx=Store())], value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]))])], orelse=[]), Assign(targets=[Name(id='cert_array', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='trust', ctx=Store())], value=Call(func=Attribute(value=Name(id='Security', ctx=Load()), attr='SecTrustRef', ctx=Load()), args=[], keywords=[])), Try(body=[Assign(targets=[Name(id='cert_array', ctx=Store())], value=Call(func=Name(id='_cert_array_from_pem', ctx=Load()), args=[Name(id='trust_bundle', ctx=Load())], keywords=[])), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='Security', ctx=Load()), attr='SSLCopyPeerTrust', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='context', ctx=Load()), Call(func=Attribute(value=Name(id='ctypes', ctx=Load()), attr='byref', ctx=Load()), args=[Name(id='trust', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Name(id='_assert_no_error', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='trust', ctx=Load())), body=[Raise(exc=Call(func=Attribute(value=Name(id='ssl', ctx=Load()), attr='SSLError', ctx=Load()), args=[Constant(value='Failed to copy trust reference')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='Security', ctx=Load()), attr='SecTrustSetAnchorCertificates', ctx=Load()), args=[Name(id='trust', ctx=Load()), Name(id='cert_array', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='_assert_no_error', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[])), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='Security', ctx=Load()), attr='SecTrustSetAnchorCertificatesOnly', ctx=Load()), args=[Name(id='trust', ctx=Load()), Constant(value=True)], keywords=[])), Expr(value=Call(func=Name(id='_assert_no_error', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[])), Assign(targets=[Name(id='trust_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='Security', ctx=Load()), attr='SecTrustResultType', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='Security', ctx=Load()), attr='SecTrustEvaluate', ctx=Load()), args=[Name(id='trust', ctx=Load()), Call(func=Attribute(value=Name(id='ctypes', ctx=Load()), attr='byref', ctx=Load()), args=[Name(id='trust_result', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Name(id='_assert_no_error', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[]))], handlers=[], orelse=[], finalbody=[If(test=Name(id='trust', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='CoreFoundation', ctx=Load()), attr='CFRelease', ctx=Load()), args=[Name(id='trust', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='cert_array', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='CoreFoundation', ctx=Load()), attr='CFRelease', ctx=Load()), args=[Name(id='cert_array', ctx=Load())], keywords=[]))], orelse=[])]), Return(value=Attribute(value=Name(id='trust_result', ctx=Load()), attr='value', ctx=Load()))], decorator_list=[]), FunctionDef(name='handshake', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='server_hostname'), arg(arg='verify'), arg(arg='trust_bundle'), arg(arg='min_version'), arg(arg='max_version'), arg(arg='client_cert'), arg(arg='client_key'), arg(arg='client_key_passphrase'), arg(arg='alpn_protocols')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Actually performs the TLS handshake. This is run automatically by\n        wrapped socket, and shouldn't be needed in user code.\n        ")), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='context', ctx=Store())], value=Call(func=Attribute(value=Name(id='Security', ctx=Load()), attr='SSLCreateContext', ctx=Load()), args=[Constant(value=None), Attribute(value=Name(id='SecurityConst', ctx=Load()), attr='kSSLClientSide', ctx=Load()), Attribute(value=Name(id='SecurityConst', ctx=Load()), attr='kSSLStreamType', ctx=Load())], keywords=[])), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='Security', ctx=Load()), attr='SSLSetIOFuncs', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='context', ctx=Load()), Name(id='_read_callback_pointer', ctx=Load()), Name(id='_write_callback_pointer', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='_assert_no_error', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Name(id='_connection_ref_lock', ctx=Load()))], body=[Assign(targets=[Name(id='handle', ctx=Store())], value=BinOp(left=Call(func=Name(id='id', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), op=Mod(), right=Constant(value=2147483647))), While(test=Compare(left=Name(id='handle', ctx=Load()), ops=[In()], comparators=[Name(id='_connection_refs', ctx=Load())]), body=[Assign(targets=[Name(id='handle', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='handle', ctx=Load()), op=Add(), right=Constant(value=1)), op=Mod(), right=Constant(value=2147483647)))], orelse=[]), Assign(targets=[Subscript(value=Name(id='_connection_refs', ctx=Load()), slice=Name(id='handle', ctx=Load()), ctx=Store())], value=Name(id='self', ctx=Load()))]), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='Security', ctx=Load()), attr='SSLSetConnection', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='context', ctx=Load()), Name(id='handle', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='_assert_no_error', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[])), If(test=Name(id='server_hostname', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='server_hostname', ctx=Load()), Name(id='bytes', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='server_hostname', ctx=Store())], value=Call(func=Attribute(value=Name(id='server_hostname', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='Security', ctx=Load()), attr='SSLSetPeerDomainName', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='context', ctx=Load()), Name(id='server_hostname', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='server_hostname', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Name(id='_assert_no_error', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_set_ciphers', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_set_alpn_protocols', ctx=Load()), args=[Name(id='alpn_protocols', ctx=Load())], keywords=[])), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='Security', ctx=Load()), attr='SSLSetProtocolVersionMin', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='context', ctx=Load()), Name(id='min_version', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='_assert_no_error', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[])), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='Security', ctx=Load()), attr='SSLSetProtocolVersionMax', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='context', ctx=Load()), Name(id='max_version', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='_assert_no_error', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[])), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Name(id='verify', ctx=Load())), Compare(left=Name(id='trust_bundle', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='Security', ctx=Load()), attr='SSLSetSessionOption', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='context', ctx=Load()), Attribute(value=Name(id='SecurityConst', ctx=Load()), attr='kSSLSessionOptionBreakOnServerAuth', ctx=Load()), Constant(value=True)], keywords=[])), Expr(value=Call(func=Name(id='_assert_no_error', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='client_cert', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_keychain', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='_keychain_dir', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_temporary_keychain', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_client_cert_chain', ctx=Store())], value=Call(func=Name(id='_load_client_cert_chain', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_keychain', ctx=Load()), Name(id='client_cert', ctx=Load()), Name(id='client_key', ctx=Load())], keywords=[])), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='Security', ctx=Load()), attr='SSLSetCertificate', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='context', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_client_cert_chain', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='_assert_no_error', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[]))], orelse=[]), While(test=Constant(value=True), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_raise_on_error', ctx=Load()), args=[], keywords=[]))], body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='Security', ctx=Load()), attr='SSLHandshake', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='context', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='result', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='SecurityConst', ctx=Load()), attr='errSSLWouldBlock', ctx=Load())]), body=[Raise(exc=Call(func=Attribute(value=Name(id='socket', ctx=Load()), attr='timeout', ctx=Load()), args=[Constant(value='handshake timed out')], keywords=[]))], orelse=[If(test=Compare(left=Name(id='result', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='SecurityConst', ctx=Load()), attr='errSSLServerAuthCompleted', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_custom_validate', ctx=Load()), args=[Name(id='verify', ctx=Load()), Name(id='trust_bundle', ctx=Load())], keywords=[])), Continue()], orelse=[Expr(value=Call(func=Name(id='_assert_no_error', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[])), Break()])])])], orelse=[])], decorator_list=[]), FunctionDef(name='fileno', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='socket', ctx=Load()), attr='fileno', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='_decref_socketios', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_makefile_refs', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_makefile_refs', ctx=Store()), op=Sub(), value=Constant(value=1))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_closed', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='recv', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='bufsiz')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='buffer', ctx=Store())], value=Call(func=Attribute(value=Name(id='ctypes', ctx=Load()), attr='create_string_buffer', ctx=Load()), args=[Name(id='bufsiz', ctx=Load())], keywords=[])), Assign(targets=[Name(id='bytes_read', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='recv_into', ctx=Load()), args=[Name(id='buffer', ctx=Load()), Name(id='bufsiz', ctx=Load())], keywords=[])), Assign(targets=[Name(id='data', ctx=Store())], value=Subscript(value=Name(id='buffer', ctx=Load()), slice=Slice(upper=Name(id='bytes_read', ctx=Load())), ctx=Load())), Return(value=Name(id='data', ctx=Load()))], decorator_list=[]), FunctionDef(name='recv_into', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='buffer'), arg(arg='nbytes')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_closed', ctx=Load()), body=[Return(value=Constant(value=0))], orelse=[]), If(test=Compare(left=Name(id='nbytes', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='nbytes', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='buffer', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='buffer', ctx=Store())], value=Call(func=Attribute(value=BinOp(left=Attribute(value=Name(id='ctypes', ctx=Load()), attr='c_char', ctx=Load()), op=Mult(), right=Name(id='nbytes', ctx=Load())), attr='from_buffer', ctx=Load()), args=[Name(id='buffer', ctx=Load())], keywords=[])), Assign(targets=[Name(id='processed_bytes', ctx=Store())], value=Call(func=Attribute(value=Name(id='ctypes', ctx=Load()), attr='c_size_t', ctx=Load()), args=[Constant(value=0)], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_raise_on_error', ctx=Load()), args=[], keywords=[]))], body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='Security', ctx=Load()), attr='SSLRead', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='context', ctx=Load()), Name(id='buffer', ctx=Load()), Name(id='nbytes', ctx=Load()), Call(func=Attribute(value=Name(id='ctypes', ctx=Load()), attr='byref', ctx=Load()), args=[Name(id='processed_bytes', ctx=Load())], keywords=[])], keywords=[]))]), If(test=Compare(left=Name(id='result', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='SecurityConst', ctx=Load()), attr='errSSLWouldBlock', ctx=Load())]), body=[If(test=Compare(left=Attribute(value=Name(id='processed_bytes', ctx=Load()), attr='value', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Raise(exc=Call(func=Attribute(value=Name(id='socket', ctx=Load()), attr='timeout', ctx=Load()), args=[Constant(value='recv timed out')], keywords=[]))], orelse=[])], orelse=[If(test=Compare(left=Name(id='result', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Attribute(value=Name(id='SecurityConst', ctx=Load()), attr='errSSLClosedGraceful', ctx=Load()), Attribute(value=Name(id='SecurityConst', ctx=Load()), attr='errSSLClosedNoNotify', ctx=Load())], ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='_assert_no_error', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[]))])]), Return(value=Attribute(value=Name(id='processed_bytes', ctx=Load()), attr='value', ctx=Load()))], decorator_list=[]), FunctionDef(name='settimeout', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='timeout')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_timeout', ctx=Store())], value=Name(id='timeout', ctx=Load()))], decorator_list=[]), FunctionDef(name='gettimeout', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_timeout', ctx=Load()))], decorator_list=[]), FunctionDef(name='send', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='processed_bytes', ctx=Store())], value=Call(func=Attribute(value=Name(id='ctypes', ctx=Load()), attr='c_size_t', ctx=Load()), args=[Constant(value=0)], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_raise_on_error', ctx=Load()), args=[], keywords=[]))], body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='Security', ctx=Load()), attr='SSLWrite', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='context', ctx=Load()), Name(id='data', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='ctypes', ctx=Load()), attr='byref', ctx=Load()), args=[Name(id='processed_bytes', ctx=Load())], keywords=[])], keywords=[]))]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='result', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='SecurityConst', ctx=Load()), attr='errSSLWouldBlock', ctx=Load())]), Compare(left=Attribute(value=Name(id='processed_bytes', ctx=Load()), attr='value', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Raise(exc=Call(func=Attribute(value=Name(id='socket', ctx=Load()), attr='timeout', ctx=Load()), args=[Constant(value='send timed out')], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='_assert_no_error', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[]))]), Return(value=Attribute(value=Name(id='processed_bytes', ctx=Load()), attr='value', ctx=Load()))], decorator_list=[]), FunctionDef(name='sendall', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='total_sent', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='total_sent', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='sent', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='send', ctx=Load()), args=[Subscript(value=Name(id='data', ctx=Load()), slice=Slice(lower=Name(id='total_sent', ctx=Load()), upper=BinOp(left=Name(id='total_sent', ctx=Load()), op=Add(), right=Name(id='SSL_WRITE_BLOCKSIZE', ctx=Load()))), ctx=Load())], keywords=[])), AugAssign(target=Name(id='total_sent', ctx=Store()), op=Add(), value=Name(id='sent', ctx=Load()))], orelse=[])], decorator_list=[]), FunctionDef(name='shutdown', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_raise_on_error', ctx=Load()), args=[], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='Security', ctx=Load()), attr='SSLClose', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='context', ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='close', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_makefile_refs', ctx=Load()), ops=[Lt()], comparators=[Constant(value=1)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_closed', ctx=Store())], value=Constant(value=True)), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='context', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='CoreFoundation', ctx=Load()), attr='CFRelease', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='context', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='context', ctx=Store())], value=Constant(value=None))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_client_cert_chain', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='CoreFoundation', ctx=Load()), attr='CFRelease', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_client_cert_chain', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_client_cert_chain', ctx=Store())], value=Constant(value=None))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_keychain', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='Security', ctx=Load()), attr='SecKeychainDelete', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_keychain', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='CoreFoundation', ctx=Load()), attr='CFRelease', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_keychain', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='shutil', ctx=Load()), attr='rmtree', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_keychain_dir', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_keychain', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='_keychain_dir', ctx=Store())], value=Constant(value=None))], orelse=[]), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='socket', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))], orelse=[AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_makefile_refs', ctx=Store()), op=Sub(), value=Constant(value=1))])], decorator_list=[]), FunctionDef(name='getpeercert', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='binary_form')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='binary_form', ctx=Load())), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='SecureTransport only supports dumping binary certs')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='trust', ctx=Store())], value=Call(func=Attribute(value=Name(id='Security', ctx=Load()), attr='SecTrustRef', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='certdata', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='der_bytes', ctx=Store())], value=Constant(value=None)), Try(body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='Security', ctx=Load()), attr='SSLCopyPeerTrust', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='context', ctx=Load()), Call(func=Attribute(value=Name(id='ctypes', ctx=Load()), attr='byref', ctx=Load()), args=[Name(id='trust', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Name(id='_assert_no_error', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='trust', ctx=Load())), body=[Return(value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='cert_count', ctx=Store())], value=Call(func=Attribute(value=Name(id='Security', ctx=Load()), attr='SecTrustGetCertificateCount', ctx=Load()), args=[Name(id='trust', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='cert_count', ctx=Load())), body=[Return(value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='leaf', ctx=Store())], value=Call(func=Attribute(value=Name(id='Security', ctx=Load()), attr='SecTrustGetCertificateAtIndex', ctx=Load()), args=[Name(id='trust', ctx=Load()), Constant(value=0)], keywords=[])), Assert(test=Name(id='leaf', ctx=Load())), Assign(targets=[Name(id='certdata', ctx=Store())], value=Call(func=Attribute(value=Name(id='Security', ctx=Load()), attr='SecCertificateCopyData', ctx=Load()), args=[Name(id='leaf', ctx=Load())], keywords=[])), Assert(test=Name(id='certdata', ctx=Load())), Assign(targets=[Name(id='data_length', ctx=Store())], value=Call(func=Attribute(value=Name(id='CoreFoundation', ctx=Load()), attr='CFDataGetLength', ctx=Load()), args=[Name(id='certdata', ctx=Load())], keywords=[])), Assign(targets=[Name(id='data_buffer', ctx=Store())], value=Call(func=Attribute(value=Name(id='CoreFoundation', ctx=Load()), attr='CFDataGetBytePtr', ctx=Load()), args=[Name(id='certdata', ctx=Load())], keywords=[])), Assign(targets=[Name(id='der_bytes', ctx=Store())], value=Call(func=Attribute(value=Name(id='ctypes', ctx=Load()), attr='string_at', ctx=Load()), args=[Name(id='data_buffer', ctx=Load()), Name(id='data_length', ctx=Load())], keywords=[]))], handlers=[], orelse=[], finalbody=[If(test=Name(id='certdata', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='CoreFoundation', ctx=Load()), attr='CFRelease', ctx=Load()), args=[Name(id='certdata', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='trust', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='CoreFoundation', ctx=Load()), attr='CFRelease', ctx=Load()), args=[Name(id='trust', ctx=Load())], keywords=[]))], orelse=[])]), Return(value=Name(id='der_bytes', ctx=Load()))], decorator_list=[]), FunctionDef(name='version', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='protocol', ctx=Store())], value=Call(func=Attribute(value=Name(id='Security', ctx=Load()), attr='SSLProtocol', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='Security', ctx=Load()), attr='SSLGetNegotiatedProtocolVersion', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='context', ctx=Load()), Call(func=Attribute(value=Name(id='ctypes', ctx=Load()), attr='byref', ctx=Load()), args=[Name(id='protocol', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Name(id='_assert_no_error', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='protocol', ctx=Load()), attr='value', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='SecurityConst', ctx=Load()), attr='kTLSProtocol13', ctx=Load())]), body=[Raise(exc=Call(func=Attribute(value=Name(id='ssl', ctx=Load()), attr='SSLError', ctx=Load()), args=[Constant(value='SecureTransport does not support TLS 1.3')], keywords=[]))], orelse=[If(test=Compare(left=Attribute(value=Name(id='protocol', ctx=Load()), attr='value', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='SecurityConst', ctx=Load()), attr='kTLSProtocol12', ctx=Load())]), body=[Return(value=Constant(value='TLSv1.2'))], orelse=[If(test=Compare(left=Attribute(value=Name(id='protocol', ctx=Load()), attr='value', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='SecurityConst', ctx=Load()), attr='kTLSProtocol11', ctx=Load())]), body=[Return(value=Constant(value='TLSv1.1'))], orelse=[If(test=Compare(left=Attribute(value=Name(id='protocol', ctx=Load()), attr='value', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='SecurityConst', ctx=Load()), attr='kTLSProtocol1', ctx=Load())]), body=[Return(value=Constant(value='TLSv1'))], orelse=[If(test=Compare(left=Attribute(value=Name(id='protocol', ctx=Load()), attr='value', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='SecurityConst', ctx=Load()), attr='kSSLProtocol3', ctx=Load())]), body=[Return(value=Constant(value='SSLv3'))], orelse=[If(test=Compare(left=Attribute(value=Name(id='protocol', ctx=Load()), attr='value', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='SecurityConst', ctx=Load()), attr='kSSLProtocol2', ctx=Load())]), body=[Return(value=Constant(value='SSLv2'))], orelse=[Raise(exc=Call(func=Attribute(value=Name(id='ssl', ctx=Load()), attr='SSLError', ctx=Load()), args=[BinOp(left=Constant(value='Unknown TLS version: %r'), op=Mod(), right=Name(id='protocol', ctx=Load()))], keywords=[]))])])])])])])], decorator_list=[]), FunctionDef(name='_reuse', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_makefile_refs', ctx=Store()), op=Add(), value=Constant(value=1))], decorator_list=[]), FunctionDef(name='_drop', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_makefile_refs', ctx=Load()), ops=[Lt()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))], orelse=[AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_makefile_refs', ctx=Store()), op=Sub(), value=Constant(value=1))])], decorator_list=[])], decorator_list=[]), If(test=Name(id='_fileobject', ctx=Load()), body=[FunctionDef(name='makefile', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='mode'), arg(arg='bufsize')], kwonlyargs=[], kw_defaults=[], defaults=[UnaryOp(op=USub(), operand=Constant(value=1))]), body=[AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_makefile_refs', ctx=Store()), op=Add(), value=Constant(value=1)), Return(value=Call(func=Name(id='_fileobject', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='mode', ctx=Load()), Name(id='bufsize', ctx=Load())], keywords=[keyword(arg='close', value=Constant(value=True))]))], decorator_list=[])], orelse=[FunctionDef(name='makefile', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='mode'), arg(arg='buffering')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[Constant(value='r'), Constant(value=None)]), body=[Assign(targets=[Name(id='buffering', ctx=Store())], value=Constant(value=0)), Return(value=Call(func=Name(id='backport_makefile', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='mode', ctx=Load()), Name(id='buffering', ctx=Load()), Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[])]), Assign(targets=[Attribute(value=Name(id='WrappedSocket', ctx=Load()), attr='makefile', ctx=Store())], value=Name(id='makefile', ctx=Load())), ClassDef(name='SecureTransportContext', bases=[Name(id='object', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    I am a wrapper class for the SecureTransport library, to translate the\n    interface of the standard library ``SSLContext`` object to calls into\n    SecureTransport.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='protocol')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_min_version', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='_max_version', ctx=Store())], ctx=Store())], value=Subscript(value=Name(id='_protocol_to_min_max', ctx=Load()), slice=Name(id='protocol', ctx=Load()), ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_options', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_verify', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_trust_bundle', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_client_cert', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_client_key', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_client_key_passphrase', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_alpn_protocols', ctx=Store())], value=Constant(value=None))], decorator_list=[]), FunctionDef(name='check_hostname', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        SecureTransport cannot have its hostname checking disabled. For more,\n        see the comment on getpeercert() in this file.\n        ')), Return(value=Constant(value=True))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='check_hostname', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        SecureTransport cannot have its hostname checking disabled. For more,\n        see the comment on getpeercert() in this file.\n        ')), Pass()], decorator_list=[Attribute(value=Name(id='check_hostname', ctx=Load()), attr='setter', ctx=Load())]), FunctionDef(name='options', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_options', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='options', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_options', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='options', ctx=Load()), attr='setter', ctx=Load())]), FunctionDef(name='verify_mode', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=IfExp(test=Attribute(value=Name(id='self', ctx=Load()), attr='_verify', ctx=Load()), body=Attribute(value=Name(id='ssl', ctx=Load()), attr='CERT_REQUIRED', ctx=Load()), orelse=Attribute(value=Name(id='ssl', ctx=Load()), attr='CERT_NONE', ctx=Load())))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='verify_mode', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_verify', ctx=Store())], value=IfExp(test=Compare(left=Name(id='value', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='ssl', ctx=Load()), attr='CERT_REQUIRED', ctx=Load())]), body=Constant(value=True), orelse=Constant(value=False)))], decorator_list=[Attribute(value=Name(id='verify_mode', ctx=Load()), attr='setter', ctx=Load())]), FunctionDef(name='set_default_verify_paths', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[]), FunctionDef(name='load_default_certs', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_default_verify_paths', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='set_ciphers', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ciphers')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='ciphers', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Attribute(value=Name(id='util', ctx=Load()), attr='ssl_', ctx=Load()), attr='DEFAULT_CIPHERS', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value="SecureTransport doesn't support custom cipher strings")], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='load_verify_locations', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='cafile'), arg(arg='capath'), arg(arg='cadata')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=[If(test=Compare(left=Name(id='capath', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='SecureTransport does not support cert directories')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='cafile', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='cafile', ctx=Load())], keywords=[]))], body=[Pass()])], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_trust_bundle', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='cafile', ctx=Load()), Name(id='cadata', ctx=Load())]))], decorator_list=[]), FunctionDef(name='load_cert_chain', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='certfile'), arg(arg='keyfile'), arg(arg='password')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_client_cert', ctx=Store())], value=Name(id='certfile', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_client_key', ctx=Store())], value=Name(id='keyfile', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_client_cert_passphrase', ctx=Store())], value=Name(id='password', ctx=Load()))], decorator_list=[]), FunctionDef(name='set_alpn_protocols', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='protocols')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Sets the ALPN protocols that will later be set on the context.\n\n        Raises a NotImplementedError if ALPN is not supported.\n        ')), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='Security', ctx=Load()), Constant(value='SSLSetALPNProtocols')], keywords=[])), body=[Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[Constant(value='SecureTransport supports ALPN only in macOS 10.12+')], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_alpn_protocols', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='six', ctx=Load()), attr='ensure_binary', ctx=Load()), args=[Name(id='p', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='p', ctx=Store()), iter=Name(id='protocols', ctx=Load()), ifs=[], is_async=0)]))], decorator_list=[]), FunctionDef(name='wrap_socket', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='sock'), arg(arg='server_side'), arg(arg='do_handshake_on_connect'), arg(arg='suppress_ragged_eofs'), arg(arg='server_hostname')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Constant(value=True), Constant(value=True), Constant(value=None)]), body=[Assert(test=UnaryOp(op=Not(), operand=Name(id='server_side', ctx=Load()))), Assert(test=Name(id='do_handshake_on_connect', ctx=Load())), Assert(test=Name(id='suppress_ragged_eofs', ctx=Load())), Assign(targets=[Name(id='wrapped_socket', ctx=Store())], value=Call(func=Name(id='WrappedSocket', ctx=Load()), args=[Name(id='sock', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='wrapped_socket', ctx=Load()), attr='handshake', ctx=Load()), args=[Name(id='server_hostname', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_verify', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_trust_bundle', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_min_version', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_max_version', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_client_cert', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_client_key', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_client_key_passphrase', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_alpn_protocols', ctx=Load())], keywords=[])), Return(value=Name(id='wrapped_socket', ctx=Load()))], decorator_list=[])], decorator_list=[])], type_ignores=[])