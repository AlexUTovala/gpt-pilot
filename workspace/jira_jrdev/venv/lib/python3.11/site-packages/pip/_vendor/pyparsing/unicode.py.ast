Module(body=[Import(names=[alias(name='sys')]), ImportFrom(module='itertools', names=[alias(name='filterfalse')], level=0), ImportFrom(module='typing', names=[alias(name='List'), alias(name='Tuple'), alias(name='Union')], level=0), ClassDef(name='_lazyclassproperty', bases=[], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='fn')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='fn', ctx=Store())], value=Name(id='fn', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='__doc__', ctx=Store())], value=Attribute(value=Name(id='fn', ctx=Load()), attr='__doc__', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='__name__', ctx=Store())], value=Attribute(value=Name(id='fn', ctx=Load()), attr='__name__', ctx=Load()))], decorator_list=[]), FunctionDef(name='__get__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='obj'), arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='cls', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='cls', ctx=Store())], value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='cls', ctx=Load()), Constant(value='_intern')], keywords=[])), Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=Compare(left=Attribute(value=Name(id='cls', ctx=Load()), attr='_intern', ctx=Load()), ops=[Is()], comparators=[Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='superclass', ctx=Load()), Constant(value='_intern'), List(elts=[], ctx=Load())], keywords=[])]), generators=[comprehension(target=Name(id='superclass', ctx=Store()), iter=Subscript(value=Attribute(value=Name(id='cls', ctx=Load()), attr='__mro__', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), ifs=[], is_async=0)])], keywords=[])]), body=[Assign(targets=[Attribute(value=Name(id='cls', ctx=Load()), attr='_intern', ctx=Store())], value=Dict(keys=[], values=[]))], orelse=[]), Assign(targets=[Name(id='attrname', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='fn', ctx=Load()), attr='__name__', ctx=Load())), If(test=Compare(left=Name(id='attrname', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='cls', ctx=Load()), attr='_intern', ctx=Load())]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='cls', ctx=Load()), attr='_intern', ctx=Load()), slice=Name(id='attrname', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fn', ctx=Load()), args=[Name(id='cls', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Subscript(value=Attribute(value=Name(id='cls', ctx=Load()), attr='_intern', ctx=Load()), slice=Name(id='attrname', ctx=Load()), ctx=Load()))], decorator_list=[])], decorator_list=[]), Assign(targets=[Name(id='UnicodeRangeList', ctx=Store())], value=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()), Subscript(value=Name(id='Tuple', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), ClassDef(name='unicode_set', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    A set of Unicode characters, for language-specific strings for\n    ``alphas``, ``nums``, ``alphanums``, and ``printables``.\n    A unicode_set is defined by a list of ranges in the Unicode character\n    set, in a class attribute ``_ranges``. Ranges can be specified using\n    2-tuples or a 1-tuple, such as::\n\n        _ranges = [\n            (0x0020, 0x007e),\n            (0x00a0, 0x00ff),\n            (0x0100,),\n            ]\n\n    Ranges are left- and right-inclusive. A 1-tuple of (x,) is treated as (x, x).\n\n    A unicode set can also be defined using multiple inheritance of other unicode sets::\n\n        class CJK(Chinese, Japanese, Korean):\n            pass\n    ')), AnnAssign(target=Name(id='_ranges', ctx=Store()), annotation=Name(id='UnicodeRangeList', ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), FunctionDef(name='_chars_for_ranges', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ret', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='cc', ctx=Store()), iter=Attribute(value=Name(id='cls', ctx=Load()), attr='__mro__', ctx=Load()), body=[If(test=Compare(left=Name(id='cc', ctx=Load()), ops=[Is()], comparators=[Name(id='unicode_set', ctx=Load())]), body=[Break()], orelse=[]), For(target=Name(id='rr', ctx=Store()), iter=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='cc', ctx=Load()), Constant(value='_ranges'), Tuple(elts=[], ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='ret', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Subscript(value=Name(id='rr', ctx=Load()), slice=Constant(value=0), ctx=Load()), BinOp(left=Subscript(value=Name(id='rr', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[])], keywords=[]))], orelse=[])], orelse=[]), Return(value=ListComp(elt=Call(func=Name(id='chr', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Name(id='ret', ctx=Load())], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[Name(id='_lazyclassproperty', ctx=Load())]), FunctionDef(name='printables', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='all non-whitespace characters in this range')), Return(value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Call(func=Name(id='filterfalse', ctx=Load()), args=[Attribute(value=Name(id='str', ctx=Load()), attr='isspace', ctx=Load()), Attribute(value=Name(id='cls', ctx=Load()), attr='_chars_for_ranges', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[Name(id='_lazyclassproperty', ctx=Load())]), FunctionDef(name='alphas', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='all alphabetic characters in this range')), Return(value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Call(func=Name(id='filter', ctx=Load()), args=[Attribute(value=Name(id='str', ctx=Load()), attr='isalpha', ctx=Load()), Attribute(value=Name(id='cls', ctx=Load()), attr='_chars_for_ranges', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[Name(id='_lazyclassproperty', ctx=Load())]), FunctionDef(name='nums', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='all numeric digit characters in this range')), Return(value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Call(func=Name(id='filter', ctx=Load()), args=[Attribute(value=Name(id='str', ctx=Load()), attr='isdigit', ctx=Load()), Attribute(value=Name(id='cls', ctx=Load()), attr='_chars_for_ranges', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[Name(id='_lazyclassproperty', ctx=Load())]), FunctionDef(name='alphanums', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='all alphanumeric characters in this range')), Return(value=BinOp(left=Attribute(value=Name(id='cls', ctx=Load()), attr='alphas', ctx=Load()), op=Add(), right=Attribute(value=Name(id='cls', ctx=Load()), attr='nums', ctx=Load())))], decorator_list=[Name(id='_lazyclassproperty', ctx=Load())]), FunctionDef(name='identchars', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="all characters in this range that are valid identifier characters, plus underscore '_'")), Return(value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Call(func=Name(id='filter', ctx=Load()), args=[Attribute(value=Name(id='str', ctx=Load()), attr='isidentifier', ctx=Load()), Attribute(value=Name(id='cls', ctx=Load()), attr='_chars_for_ranges', ctx=Load())], keywords=[])], keywords=[]), op=Add(), right=Constant(value='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyzªµº')), op=Add(), right=Constant(value='ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõöøùúûüýþÿ')), op=Add(), right=Constant(value='_'))], keywords=[])], keywords=[])], keywords=[]))], decorator_list=[Name(id='_lazyclassproperty', ctx=Load())]), FunctionDef(name='identbodychars', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        all characters in this range that are valid identifier body characters,\n        plus the digits 0-9, and · (Unicode MIDDLE DOT)\n        ')), Return(value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='cls', ctx=Load()), attr='identchars', ctx=Load()), op=Add(), right=Constant(value='0123456789·')), op=Add(), right=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[ListComp(elt=Name(id='c', ctx=Load()), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Attribute(value=Name(id='cls', ctx=Load()), attr='_chars_for_ranges', ctx=Load()), ifs=[Call(func=Attribute(value=BinOp(left=Constant(value='_'), op=Add(), right=Name(id='c', ctx=Load())), attr='isidentifier', ctx=Load()), args=[], keywords=[])], is_async=0)])], keywords=[]))], keywords=[])], keywords=[])], keywords=[]))], decorator_list=[Name(id='_lazyclassproperty', ctx=Load())]), FunctionDef(name='identifier', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        a pyparsing Word expression for an identifier using this range's definitions for\n        identchars and identbodychars\n        ")), ImportFrom(module='pip._vendor.pyparsing', names=[alias(name='Word')], level=0), Return(value=Call(func=Name(id='Word', ctx=Load()), args=[Attribute(value=Name(id='cls', ctx=Load()), attr='identchars', ctx=Load()), Attribute(value=Name(id='cls', ctx=Load()), attr='identbodychars', ctx=Load())], keywords=[]))], decorator_list=[Name(id='_lazyclassproperty', ctx=Load())])], decorator_list=[]), ClassDef(name='pyparsing_unicode', bases=[Name(id='unicode_set', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    A namespace class for defining common language unicode_sets.\n    ')), AnnAssign(target=Name(id='_ranges', ctx=Store()), annotation=Name(id='UnicodeRangeList', ctx=Load()), value=List(elts=[Tuple(elts=[Constant(value=32), Attribute(value=Name(id='sys', ctx=Load()), attr='maxunicode', ctx=Load())], ctx=Load())], ctx=Load()), simple=1), ClassDef(name='BasicMultilingualPlane', bases=[Name(id='unicode_set', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Unicode set for the Basic Multilingual Plane')), AnnAssign(target=Name(id='_ranges', ctx=Store()), annotation=Name(id='UnicodeRangeList', ctx=Load()), value=List(elts=[Tuple(elts=[Constant(value=32), Constant(value=65535)], ctx=Load())], ctx=Load()), simple=1)], decorator_list=[]), ClassDef(name='Latin1', bases=[Name(id='unicode_set', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Unicode set for Latin-1 Unicode Character Range')), AnnAssign(target=Name(id='_ranges', ctx=Store()), annotation=Name(id='UnicodeRangeList', ctx=Load()), value=List(elts=[Tuple(elts=[Constant(value=32), Constant(value=126)], ctx=Load()), Tuple(elts=[Constant(value=160), Constant(value=255)], ctx=Load())], ctx=Load()), simple=1)], decorator_list=[]), ClassDef(name='LatinA', bases=[Name(id='unicode_set', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Unicode set for Latin-A Unicode Character Range')), AnnAssign(target=Name(id='_ranges', ctx=Store()), annotation=Name(id='UnicodeRangeList', ctx=Load()), value=List(elts=[Tuple(elts=[Constant(value=256), Constant(value=383)], ctx=Load())], ctx=Load()), simple=1)], decorator_list=[]), ClassDef(name='LatinB', bases=[Name(id='unicode_set', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Unicode set for Latin-B Unicode Character Range')), AnnAssign(target=Name(id='_ranges', ctx=Store()), annotation=Name(id='UnicodeRangeList', ctx=Load()), value=List(elts=[Tuple(elts=[Constant(value=384), Constant(value=591)], ctx=Load())], ctx=Load()), simple=1)], decorator_list=[]), ClassDef(name='Greek', bases=[Name(id='unicode_set', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Unicode set for Greek Unicode Character Ranges')), AnnAssign(target=Name(id='_ranges', ctx=Store()), annotation=Name(id='UnicodeRangeList', ctx=Load()), value=List(elts=[Tuple(elts=[Constant(value=834), Constant(value=837)], ctx=Load()), Tuple(elts=[Constant(value=880), Constant(value=887)], ctx=Load()), Tuple(elts=[Constant(value=890), Constant(value=895)], ctx=Load()), Tuple(elts=[Constant(value=900), Constant(value=906)], ctx=Load()), Tuple(elts=[Constant(value=908)], ctx=Load()), Tuple(elts=[Constant(value=910), Constant(value=929)], ctx=Load()), Tuple(elts=[Constant(value=931), Constant(value=993)], ctx=Load()), Tuple(elts=[Constant(value=1008), Constant(value=1023)], ctx=Load()), Tuple(elts=[Constant(value=7462), Constant(value=7466)], ctx=Load()), Tuple(elts=[Constant(value=7518)], ctx=Load()), Tuple(elts=[Constant(value=7520)], ctx=Load()), Tuple(elts=[Constant(value=7526), Constant(value=7530)], ctx=Load()), Tuple(elts=[Constant(value=7936), Constant(value=7957)], ctx=Load()), Tuple(elts=[Constant(value=7960), Constant(value=7965)], ctx=Load()), Tuple(elts=[Constant(value=7968), Constant(value=8005)], ctx=Load()), Tuple(elts=[Constant(value=8008), Constant(value=8013)], ctx=Load()), Tuple(elts=[Constant(value=8016), Constant(value=8023)], ctx=Load()), Tuple(elts=[Constant(value=8025)], ctx=Load()), Tuple(elts=[Constant(value=8027)], ctx=Load()), Tuple(elts=[Constant(value=8029)], ctx=Load()), Tuple(elts=[Constant(value=8031), Constant(value=8061)], ctx=Load()), Tuple(elts=[Constant(value=8064), Constant(value=8116)], ctx=Load()), Tuple(elts=[Constant(value=8118), Constant(value=8132)], ctx=Load()), Tuple(elts=[Constant(value=8134), Constant(value=8147)], ctx=Load()), Tuple(elts=[Constant(value=8150), Constant(value=8155)], ctx=Load()), Tuple(elts=[Constant(value=8157), Constant(value=8175)], ctx=Load()), Tuple(elts=[Constant(value=8178), Constant(value=8180)], ctx=Load()), Tuple(elts=[Constant(value=8182), Constant(value=8190)], ctx=Load()), Tuple(elts=[Constant(value=8489)], ctx=Load()), Tuple(elts=[Constant(value=10009), Constant(value=10010)], ctx=Load()), Tuple(elts=[Constant(value=43877)], ctx=Load()), Tuple(elts=[Constant(value=65856), Constant(value=65933)], ctx=Load()), Tuple(elts=[Constant(value=65952)], ctx=Load()), Tuple(elts=[Constant(value=119296), Constant(value=119365)], ctx=Load()), Tuple(elts=[Constant(value=128929), Constant(value=128935)], ctx=Load())], ctx=Load()), simple=1)], decorator_list=[]), ClassDef(name='Cyrillic', bases=[Name(id='unicode_set', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Unicode set for Cyrillic Unicode Character Range')), AnnAssign(target=Name(id='_ranges', ctx=Store()), annotation=Name(id='UnicodeRangeList', ctx=Load()), value=List(elts=[Tuple(elts=[Constant(value=1024), Constant(value=1327)], ctx=Load()), Tuple(elts=[Constant(value=7296), Constant(value=7304)], ctx=Load()), Tuple(elts=[Constant(value=7467)], ctx=Load()), Tuple(elts=[Constant(value=7544)], ctx=Load()), Tuple(elts=[Constant(value=11744), Constant(value=11775)], ctx=Load()), Tuple(elts=[Constant(value=42560), Constant(value=42610)], ctx=Load()), Tuple(elts=[Constant(value=42612), Constant(value=42655)], ctx=Load()), Tuple(elts=[Constant(value=65070), Constant(value=65071)], ctx=Load())], ctx=Load()), simple=1)], decorator_list=[]), ClassDef(name='Chinese', bases=[Name(id='unicode_set', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Unicode set for Chinese Unicode Character Range')), AnnAssign(target=Name(id='_ranges', ctx=Store()), annotation=Name(id='UnicodeRangeList', ctx=Load()), value=List(elts=[Tuple(elts=[Constant(value=11904), Constant(value=11929)], ctx=Load()), Tuple(elts=[Constant(value=11931), Constant(value=12019)], ctx=Load()), Tuple(elts=[Constant(value=12736), Constant(value=12771)], ctx=Load()), Tuple(elts=[Constant(value=13312), Constant(value=19893)], ctx=Load()), Tuple(elts=[Constant(value=19968), Constant(value=40943)], ctx=Load()), Tuple(elts=[Constant(value=42752), Constant(value=42759)], ctx=Load()), Tuple(elts=[Constant(value=63744), Constant(value=64109)], ctx=Load()), Tuple(elts=[Constant(value=64112), Constant(value=64217)], ctx=Load()), Tuple(elts=[Constant(value=94178), Constant(value=94179)], ctx=Load()), Tuple(elts=[Constant(value=127504), Constant(value=127506)], ctx=Load()), Tuple(elts=[Constant(value=127508), Constant(value=127547)], ctx=Load()), Tuple(elts=[Constant(value=127552), Constant(value=127560)], ctx=Load()), Tuple(elts=[Constant(value=131072), Constant(value=173782)], ctx=Load()), Tuple(elts=[Constant(value=173824), Constant(value=177972)], ctx=Load()), Tuple(elts=[Constant(value=177984), Constant(value=178205)], ctx=Load()), Tuple(elts=[Constant(value=178208), Constant(value=183969)], ctx=Load()), Tuple(elts=[Constant(value=183984), Constant(value=191456)], ctx=Load()), Tuple(elts=[Constant(value=194560), Constant(value=195101)], ctx=Load())], ctx=Load()), simple=1)], decorator_list=[]), ClassDef(name='Japanese', bases=[Name(id='unicode_set', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Unicode set for Japanese Unicode Character Range, combining Kanji, Hiragana, and Katakana ranges')), ClassDef(name='Kanji', bases=[Name(id='unicode_set', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Unicode set for Kanji Unicode Character Range')), AnnAssign(target=Name(id='_ranges', ctx=Store()), annotation=Name(id='UnicodeRangeList', ctx=Load()), value=List(elts=[Tuple(elts=[Constant(value=19968), Constant(value=40895)], ctx=Load()), Tuple(elts=[Constant(value=12288), Constant(value=12351)], ctx=Load())], ctx=Load()), simple=1)], decorator_list=[]), ClassDef(name='Hiragana', bases=[Name(id='unicode_set', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Unicode set for Hiragana Unicode Character Range')), AnnAssign(target=Name(id='_ranges', ctx=Store()), annotation=Name(id='UnicodeRangeList', ctx=Load()), value=List(elts=[Tuple(elts=[Constant(value=12353), Constant(value=12438)], ctx=Load()), Tuple(elts=[Constant(value=12441), Constant(value=12448)], ctx=Load()), Tuple(elts=[Constant(value=12540)], ctx=Load()), Tuple(elts=[Constant(value=65392)], ctx=Load()), Tuple(elts=[Constant(value=110593)], ctx=Load()), Tuple(elts=[Constant(value=110928), Constant(value=110930)], ctx=Load()), Tuple(elts=[Constant(value=127488)], ctx=Load())], ctx=Load()), simple=1)], decorator_list=[]), ClassDef(name='Katakana', bases=[Name(id='unicode_set', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Unicode set for Katakana  Unicode Character Range')), AnnAssign(target=Name(id='_ranges', ctx=Store()), annotation=Name(id='UnicodeRangeList', ctx=Load()), value=List(elts=[Tuple(elts=[Constant(value=12441), Constant(value=12444)], ctx=Load()), Tuple(elts=[Constant(value=12448), Constant(value=12543)], ctx=Load()), Tuple(elts=[Constant(value=12784), Constant(value=12799)], ctx=Load()), Tuple(elts=[Constant(value=13008), Constant(value=13054)], ctx=Load()), Tuple(elts=[Constant(value=65381), Constant(value=65439)], ctx=Load()), Tuple(elts=[Constant(value=110592)], ctx=Load()), Tuple(elts=[Constant(value=110948), Constant(value=110951)], ctx=Load()), Tuple(elts=[Constant(value=127489), Constant(value=127490)], ctx=Load()), Tuple(elts=[Constant(value=127507)], ctx=Load())], ctx=Load()), simple=1)], decorator_list=[]), Assign(targets=[Name(id='漢字', ctx=Store())], value=Name(id='Kanji', ctx=Load())), Assign(targets=[Name(id='カタカナ', ctx=Store())], value=Name(id='Katakana', ctx=Load())), Assign(targets=[Name(id='ひらがな', ctx=Store())], value=Name(id='Hiragana', ctx=Load())), Assign(targets=[Name(id='_ranges', ctx=Store())], value=BinOp(left=BinOp(left=Attribute(value=Name(id='Kanji', ctx=Load()), attr='_ranges', ctx=Load()), op=Add(), right=Attribute(value=Name(id='Hiragana', ctx=Load()), attr='_ranges', ctx=Load())), op=Add(), right=Attribute(value=Name(id='Katakana', ctx=Load()), attr='_ranges', ctx=Load())))], decorator_list=[]), ClassDef(name='Hangul', bases=[Name(id='unicode_set', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Unicode set for Hangul (Korean) Unicode Character Range')), AnnAssign(target=Name(id='_ranges', ctx=Store()), annotation=Name(id='UnicodeRangeList', ctx=Load()), value=List(elts=[Tuple(elts=[Constant(value=4352), Constant(value=4607)], ctx=Load()), Tuple(elts=[Constant(value=12334), Constant(value=12335)], ctx=Load()), Tuple(elts=[Constant(value=12593), Constant(value=12686)], ctx=Load()), Tuple(elts=[Constant(value=12800), Constant(value=12828)], ctx=Load()), Tuple(elts=[Constant(value=12896), Constant(value=12923)], ctx=Load()), Tuple(elts=[Constant(value=12926)], ctx=Load()), Tuple(elts=[Constant(value=43360), Constant(value=43388)], ctx=Load()), Tuple(elts=[Constant(value=44032), Constant(value=55203)], ctx=Load()), Tuple(elts=[Constant(value=55216), Constant(value=55238)], ctx=Load()), Tuple(elts=[Constant(value=55243), Constant(value=55291)], ctx=Load()), Tuple(elts=[Constant(value=65440), Constant(value=65470)], ctx=Load()), Tuple(elts=[Constant(value=65474), Constant(value=65479)], ctx=Load()), Tuple(elts=[Constant(value=65482), Constant(value=65487)], ctx=Load()), Tuple(elts=[Constant(value=65490), Constant(value=65495)], ctx=Load()), Tuple(elts=[Constant(value=65498), Constant(value=65500)], ctx=Load())], ctx=Load()), simple=1)], decorator_list=[]), Assign(targets=[Name(id='Korean', ctx=Store())], value=Name(id='Hangul', ctx=Load())), ClassDef(name='CJK', bases=[Name(id='Chinese', ctx=Load()), Name(id='Japanese', ctx=Load()), Name(id='Hangul', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Unicode set for combined Chinese, Japanese, and Korean (CJK) Unicode Character Range'))], decorator_list=[]), ClassDef(name='Thai', bases=[Name(id='unicode_set', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Unicode set for Thai Unicode Character Range')), AnnAssign(target=Name(id='_ranges', ctx=Store()), annotation=Name(id='UnicodeRangeList', ctx=Load()), value=List(elts=[Tuple(elts=[Constant(value=3585), Constant(value=3642)], ctx=Load()), Tuple(elts=[Constant(value=3647), Constant(value=3675)], ctx=Load())], ctx=Load()), simple=1)], decorator_list=[]), ClassDef(name='Arabic', bases=[Name(id='unicode_set', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Unicode set for Arabic Unicode Character Range')), AnnAssign(target=Name(id='_ranges', ctx=Store()), annotation=Name(id='UnicodeRangeList', ctx=Load()), value=List(elts=[Tuple(elts=[Constant(value=1536), Constant(value=1563)], ctx=Load()), Tuple(elts=[Constant(value=1566), Constant(value=1791)], ctx=Load()), Tuple(elts=[Constant(value=1792), Constant(value=1919)], ctx=Load())], ctx=Load()), simple=1)], decorator_list=[]), ClassDef(name='Hebrew', bases=[Name(id='unicode_set', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Unicode set for Hebrew Unicode Character Range')), AnnAssign(target=Name(id='_ranges', ctx=Store()), annotation=Name(id='UnicodeRangeList', ctx=Load()), value=List(elts=[Tuple(elts=[Constant(value=1425), Constant(value=1479)], ctx=Load()), Tuple(elts=[Constant(value=1488), Constant(value=1514)], ctx=Load()), Tuple(elts=[Constant(value=1519), Constant(value=1524)], ctx=Load()), Tuple(elts=[Constant(value=64285), Constant(value=64310)], ctx=Load()), Tuple(elts=[Constant(value=64312), Constant(value=64316)], ctx=Load()), Tuple(elts=[Constant(value=64318)], ctx=Load()), Tuple(elts=[Constant(value=64320), Constant(value=64321)], ctx=Load()), Tuple(elts=[Constant(value=64323), Constant(value=64324)], ctx=Load()), Tuple(elts=[Constant(value=64326), Constant(value=64335)], ctx=Load())], ctx=Load()), simple=1)], decorator_list=[]), ClassDef(name='Devanagari', bases=[Name(id='unicode_set', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Unicode set for Devanagari Unicode Character Range')), AnnAssign(target=Name(id='_ranges', ctx=Store()), annotation=Name(id='UnicodeRangeList', ctx=Load()), value=List(elts=[Tuple(elts=[Constant(value=2304), Constant(value=2431)], ctx=Load()), Tuple(elts=[Constant(value=43232), Constant(value=43263)], ctx=Load())], ctx=Load()), simple=1)], decorator_list=[]), Assign(targets=[Name(id='BMP', ctx=Store())], value=Name(id='BasicMultilingualPlane', ctx=Load())), Assign(targets=[Name(id='العربية', ctx=Store())], value=Name(id='Arabic', ctx=Load())), Assign(targets=[Name(id='中文', ctx=Store())], value=Name(id='Chinese', ctx=Load())), Assign(targets=[Name(id='кириллица', ctx=Store())], value=Name(id='Cyrillic', ctx=Load())), Assign(targets=[Name(id='Ελληνικά', ctx=Store())], value=Name(id='Greek', ctx=Load())), Assign(targets=[Name(id='עִברִית', ctx=Store())], value=Name(id='Hebrew', ctx=Load())), Assign(targets=[Name(id='日本語', ctx=Store())], value=Name(id='Japanese', ctx=Load())), Assign(targets=[Name(id='한국어', ctx=Store())], value=Name(id='Korean', ctx=Load())), Assign(targets=[Name(id='ไทย', ctx=Store())], value=Name(id='Thai', ctx=Load())), Assign(targets=[Name(id='देवनागरी', ctx=Store())], value=Name(id='Devanagari', ctx=Load()))], decorator_list=[])], type_ignores=[])