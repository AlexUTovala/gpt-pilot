Module(body=[ImportFrom(module='core', names=[alias(name='encode'), alias(name='decode'), alias(name='alabel'), alias(name='ulabel'), alias(name='IDNAError')], level=1), Import(names=[alias(name='codecs')]), Import(names=[alias(name='re')]), ImportFrom(module='typing', names=[alias(name='Tuple'), alias(name='Optional')], level=0), Assign(targets=[Name(id='_unicode_dots_re', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='[.。．｡]')], keywords=[])), ClassDef(name='Codec', bases=[Attribute(value=Name(id='codecs', ctx=Load()), attr='Codec', ctx=Load())], keywords=[], body=[FunctionDef(name='encode', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Name(id='str', ctx=Load())), arg(arg='errors', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='strict')]), body=[If(test=Compare(left=Name(id='errors', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='strict')]), body=[Raise(exc=Call(func=Name(id='IDNAError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Unsupported error handling "{}"'), attr='format', ctx=Load()), args=[Name(id='errors', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='data', ctx=Load())), body=[Return(value=Tuple(elts=[Constant(value=b''), Constant(value=0)], ctx=Load()))], orelse=[]), Return(value=Tuple(elts=[Call(func=Name(id='encode', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]), Call(func=Name(id='len', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='bytes', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='decode', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Name(id='bytes', ctx=Load())), arg(arg='errors', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='strict')]), body=[If(test=Compare(left=Name(id='errors', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='strict')]), body=[Raise(exc=Call(func=Name(id='IDNAError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Unsupported error handling "{}"'), attr='format', ctx=Load()), args=[Name(id='errors', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='data', ctx=Load())), body=[Return(value=Tuple(elts=[Constant(value=''), Constant(value=0)], ctx=Load()))], orelse=[]), Return(value=Tuple(elts=[Call(func=Name(id='decode', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]), Call(func=Name(id='len', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()))], decorator_list=[]), ClassDef(name='IncrementalEncoder', bases=[Attribute(value=Name(id='codecs', ctx=Load()), attr='BufferedIncrementalEncoder', ctx=Load())], keywords=[], body=[FunctionDef(name='_buffer_encode', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Name(id='str', ctx=Load())), arg(arg='errors', annotation=Name(id='str', ctx=Load())), arg(arg='final', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='errors', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='strict')]), body=[Raise(exc=Call(func=Name(id='IDNAError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Unsupported error handling "{}"'), attr='format', ctx=Load()), args=[Name(id='errors', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='data', ctx=Load())), body=[Return(value=Tuple(elts=[Constant(value=''), Constant(value=0)], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='labels', ctx=Store())], value=Call(func=Attribute(value=Name(id='_unicode_dots_re', ctx=Load()), attr='split', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])), Assign(targets=[Name(id='trailing_dot', ctx=Store())], value=Constant(value='')), If(test=Name(id='labels', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Subscript(value=Name(id='labels', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())), body=[Assign(targets=[Name(id='trailing_dot', ctx=Store())], value=Constant(value='.')), Delete(targets=[Subscript(value=Name(id='labels', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Del())])], orelse=[If(test=UnaryOp(op=Not(), operand=Name(id='final', ctx=Load())), body=[Delete(targets=[Subscript(value=Name(id='labels', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Del())]), If(test=Name(id='labels', ctx=Load()), body=[Assign(targets=[Name(id='trailing_dot', ctx=Store())], value=Constant(value='.'))], orelse=[])], orelse=[])])], orelse=[]), Assign(targets=[Name(id='result', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='size', ctx=Store())], value=Constant(value=0)), For(target=Name(id='label', ctx=Store()), iter=Name(id='labels', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='alabel', ctx=Load()), args=[Name(id='label', ctx=Load())], keywords=[])], keywords=[])), If(test=Name(id='size', ctx=Load()), body=[AugAssign(target=Name(id='size', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), AugAssign(target=Name(id='size', ctx=Store()), op=Add(), value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='label', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='result_str', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Constant(value='.'), attr='join', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[]), op=Add(), right=Name(id='trailing_dot', ctx=Load()))), AugAssign(target=Name(id='size', ctx=Store()), op=Add(), value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='trailing_dot', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Name(id='result_str', ctx=Load()), Name(id='size', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()))], decorator_list=[]), ClassDef(name='IncrementalDecoder', bases=[Attribute(value=Name(id='codecs', ctx=Load()), attr='BufferedIncrementalDecoder', ctx=Load())], keywords=[], body=[FunctionDef(name='_buffer_decode', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Name(id='str', ctx=Load())), arg(arg='errors', annotation=Name(id='str', ctx=Load())), arg(arg='final', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='errors', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='strict')]), body=[Raise(exc=Call(func=Name(id='IDNAError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Unsupported error handling "{}"'), attr='format', ctx=Load()), args=[Name(id='errors', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='data', ctx=Load())), body=[Return(value=Tuple(elts=[Constant(value=''), Constant(value=0)], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='labels', ctx=Store())], value=Call(func=Attribute(value=Name(id='_unicode_dots_re', ctx=Load()), attr='split', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])), Assign(targets=[Name(id='trailing_dot', ctx=Store())], value=Constant(value='')), If(test=Name(id='labels', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Subscript(value=Name(id='labels', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())), body=[Assign(targets=[Name(id='trailing_dot', ctx=Store())], value=Constant(value='.')), Delete(targets=[Subscript(value=Name(id='labels', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Del())])], orelse=[If(test=UnaryOp(op=Not(), operand=Name(id='final', ctx=Load())), body=[Delete(targets=[Subscript(value=Name(id='labels', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Del())]), If(test=Name(id='labels', ctx=Load()), body=[Assign(targets=[Name(id='trailing_dot', ctx=Store())], value=Constant(value='.'))], orelse=[])], orelse=[])])], orelse=[]), Assign(targets=[Name(id='result', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='size', ctx=Store())], value=Constant(value=0)), For(target=Name(id='label', ctx=Store()), iter=Name(id='labels', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='ulabel', ctx=Load()), args=[Name(id='label', ctx=Load())], keywords=[])], keywords=[])), If(test=Name(id='size', ctx=Load()), body=[AugAssign(target=Name(id='size', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), AugAssign(target=Name(id='size', ctx=Store()), op=Add(), value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='label', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='result_str', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Constant(value='.'), attr='join', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[]), op=Add(), right=Name(id='trailing_dot', ctx=Load()))), AugAssign(target=Name(id='size', ctx=Store()), op=Add(), value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='trailing_dot', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Name(id='result_str', ctx=Load()), Name(id='size', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()))], decorator_list=[]), ClassDef(name='StreamWriter', bases=[Name(id='Codec', ctx=Load()), Attribute(value=Name(id='codecs', ctx=Load()), attr='StreamWriter', ctx=Load())], keywords=[], body=[Pass()], decorator_list=[]), ClassDef(name='StreamReader', bases=[Name(id='Codec', ctx=Load()), Attribute(value=Name(id='codecs', ctx=Load()), attr='StreamReader', ctx=Load())], keywords=[], body=[Pass()], decorator_list=[]), FunctionDef(name='getregentry', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='codecs', ctx=Load()), attr='CodecInfo', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='idna')), keyword(arg='encode', value=Attribute(value=Call(func=Name(id='Codec', ctx=Load()), args=[], keywords=[]), attr='encode', ctx=Load())), keyword(arg='decode', value=Attribute(value=Call(func=Name(id='Codec', ctx=Load()), args=[], keywords=[]), attr='decode', ctx=Load())), keyword(arg='incrementalencoder', value=Name(id='IncrementalEncoder', ctx=Load())), keyword(arg='incrementaldecoder', value=Name(id='IncrementalDecoder', ctx=Load())), keyword(arg='streamwriter', value=Name(id='StreamWriter', ctx=Load())), keyword(arg='streamreader', value=Name(id='StreamReader', ctx=Load()))]))], decorator_list=[], returns=Attribute(value=Name(id='codecs', ctx=Load()), attr='CodecInfo', ctx=Load()))], type_ignores=[])