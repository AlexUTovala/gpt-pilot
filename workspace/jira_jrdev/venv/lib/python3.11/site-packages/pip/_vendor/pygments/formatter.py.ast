Module(body=[Expr(value=Constant(value='\n    pygments.formatter\n    ~~~~~~~~~~~~~~~~~~\n\n    Base formatter class.\n\n    :copyright: Copyright 2006-2023 by the Pygments team, see AUTHORS.\n    :license: BSD, see LICENSE for details.\n')), Import(names=[alias(name='codecs')]), ImportFrom(module='pip._vendor.pygments.util', names=[alias(name='get_bool_opt')], level=0), ImportFrom(module='pip._vendor.pygments.styles', names=[alias(name='get_style_by_name')], level=0), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='Formatter')], ctx=Load())), FunctionDef(name='_lookup_style', args=arguments(posonlyargs=[], args=[arg(arg='style')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='style', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Name(id='get_style_by_name', ctx=Load()), args=[Name(id='style', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='style', ctx=Load()))], decorator_list=[]), ClassDef(name='Formatter', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    Converts a token stream to text.\n\n    Formatters should have attributes to help selecting them. These\n    are similar to the corresponding :class:`~pygments.lexer.Lexer`\n    attributes.\n\n    .. autoattribute:: name\n       :no-value:\n\n    .. autoattribute:: aliases\n       :no-value:\n\n    .. autoattribute:: filenames\n       :no-value:\n\n    You can pass options as keyword arguments to the constructor.\n    All formatters accept these basic options:\n\n    ``style``\n        The style to use, can be a string or a Style subclass\n        (default: "default"). Not used by e.g. the\n        TerminalFormatter.\n    ``full``\n        Tells the formatter to output a "full" document, i.e.\n        a complete self-contained document. This doesn\'t have\n        any effect for some formatters (default: false).\n    ``title``\n        If ``full`` is true, the title that should be used to\n        caption the document (default: \'\').\n    ``encoding``\n        If given, must be an encoding name. This will be used to\n        convert the Unicode token strings to byte strings in the\n        output. If it is "" or None, Unicode strings will be written\n        to the output file, which most file-like objects do not\n        support (default: None).\n    ``outencoding``\n        Overrides ``encoding`` if given.\n\n    ')), Assign(targets=[Name(id='name', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='aliases', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='filenames', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='unicodeoutput', ctx=Store())], value=Constant(value=True)), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='options'), defaults=[]), body=[Expr(value=Constant(value='\n        As with lexers, this constructor takes arbitrary optional arguments,\n        and if you override it, you should first process your own options, then\n        call the base class implementation.\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Store())], value=Call(func=Name(id='_lookup_style', ctx=Load()), args=[Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='style'), Constant(value='default')], keywords=[])], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='full', ctx=Store())], value=Call(func=Name(id='get_bool_opt', ctx=Load()), args=[Name(id='options', ctx=Load()), Constant(value='full'), Constant(value=False)], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='title', ctx=Store())], value=Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='title'), Constant(value='')], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='encoding', ctx=Store())], value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='encoding'), Constant(value=None)], keywords=[]), Constant(value=None)])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='encoding', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='guess'), Constant(value='chardet')], ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='encoding', ctx=Store())], value=Constant(value='utf-8'))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='encoding', ctx=Store())], value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='outencoding')], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='encoding', ctx=Load())])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Store())], value=Name(id='options', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_style_defs', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='arg')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='')]), body=[Expr(value=Constant(value='\n        This method must return statements or declarations suitable to define\n        the current style for subsequent highlighted text (e.g. CSS classes\n        in the `HTMLFormatter`).\n\n        The optional argument `arg` can be used to modify the generation and\n        is formatter dependent (it is standardized because it can be given on\n        the command line).\n\n        This method is called by the ``-S`` :doc:`command-line option <cmdline>`,\n        the `arg` is then given by the ``-a`` option.\n        ')), Return(value=Constant(value=''))], decorator_list=[]), FunctionDef(name='format', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='tokensource'), arg(arg='outfile')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        This method must format the tokens from the `tokensource` iterable and\n        write the formatted version to the file object `outfile`.\n\n        Formatter options can control how exactly the tokens are converted.\n        ')), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='encoding', ctx=Load()), body=[Assign(targets=[Name(id='outfile', ctx=Store())], value=Call(func=Subscript(value=Call(func=Attribute(value=Name(id='codecs', ctx=Load()), attr='lookup', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='encoding', ctx=Load())], keywords=[]), slice=Constant(value=3), ctx=Load()), args=[Name(id='outfile', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='format_unencoded', ctx=Load()), args=[Name(id='tokensource', ctx=Load()), Name(id='outfile', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[])], type_ignores=[])