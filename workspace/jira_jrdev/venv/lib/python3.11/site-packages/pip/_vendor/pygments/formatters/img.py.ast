Module(body=[Expr(value=Constant(value='\n    pygments.formatters.img\n    ~~~~~~~~~~~~~~~~~~~~~~~\n\n    Formatter for Pixmap output.\n\n    :copyright: Copyright 2006-2023 by the Pygments team, see AUTHORS.\n    :license: BSD, see LICENSE for details.\n')), Import(names=[alias(name='os')]), Import(names=[alias(name='sys')]), ImportFrom(module='pip._vendor.pygments.formatter', names=[alias(name='Formatter')], level=0), ImportFrom(module='pip._vendor.pygments.util', names=[alias(name='get_bool_opt'), alias(name='get_int_opt'), alias(name='get_list_opt'), alias(name='get_choice_opt')], level=0), Import(names=[alias(name='subprocess')]), Try(body=[ImportFrom(module='PIL', names=[alias(name='Image'), alias(name='ImageDraw'), alias(name='ImageFont')], level=0), Assign(targets=[Name(id='pil_available', ctx=Store())], value=Constant(value=True))], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Assign(targets=[Name(id='pil_available', ctx=Store())], value=Constant(value=False))])], orelse=[], finalbody=[]), Try(body=[Import(names=[alias(name='_winreg')])], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Try(body=[Import(names=[alias(name='winreg', asname='_winreg')])], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Assign(targets=[Name(id='_winreg', ctx=Store())], value=Constant(value=None))])], orelse=[], finalbody=[])])], orelse=[], finalbody=[]), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='ImageFormatter'), Constant(value='GifImageFormatter'), Constant(value='JpgImageFormatter'), Constant(value='BmpImageFormatter')], ctx=Load())), Assign(targets=[Name(id='STYLES', ctx=Store())], value=Dict(keys=[Constant(value='NORMAL'), Constant(value='ITALIC'), Constant(value='BOLD'), Constant(value='BOLDITALIC')], values=[List(elts=[Constant(value=''), Constant(value='Roman'), Constant(value='Book'), Constant(value='Normal'), Constant(value='Regular'), Constant(value='Medium')], ctx=Load()), List(elts=[Constant(value='Oblique'), Constant(value='Italic')], ctx=Load()), List(elts=[Constant(value='Bold')], ctx=Load()), List(elts=[Constant(value='Bold Oblique'), Constant(value='Bold Italic')], ctx=Load())])), Assign(targets=[Name(id='DEFAULT_FONT_NAME_NIX', ctx=Store())], value=Constant(value='DejaVu Sans Mono')), Assign(targets=[Name(id='DEFAULT_FONT_NAME_WIN', ctx=Store())], value=Constant(value='Courier New')), Assign(targets=[Name(id='DEFAULT_FONT_NAME_MAC', ctx=Store())], value=Constant(value='Menlo')), ClassDef(name='PilNotAvailable', bases=[Name(id='ImportError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='When Python imaging library is not available'))], decorator_list=[]), ClassDef(name='FontNotFound', bases=[Name(id='Exception', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='When there are no usable fonts specified'))], decorator_list=[]), ClassDef(name='FontManager', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    Manages a set of fonts: normal, italic, bold, etc...\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='font_name'), arg(arg='font_size')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=14)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='font_name', ctx=Store())], value=Name(id='font_name', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='font_size', ctx=Store())], value=Name(id='font_size', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='fonts', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='encoding', ctx=Store())], value=Constant(value=None)), If(test=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='win')], keywords=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='font_name', ctx=Load())), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='font_name', ctx=Store())], value=Name(id='DEFAULT_FONT_NAME_WIN', ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_create_win', ctx=Load()), args=[], keywords=[]))], orelse=[If(test=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='darwin')], keywords=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='font_name', ctx=Load())), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='font_name', ctx=Store())], value=Name(id='DEFAULT_FONT_NAME_MAC', ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_create_mac', ctx=Load()), args=[], keywords=[]))], orelse=[If(test=UnaryOp(op=Not(), operand=Name(id='font_name', ctx=Load())), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='font_name', ctx=Store())], value=Name(id='DEFAULT_FONT_NAME_NIX', ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_create_nix', ctx=Load()), args=[], keywords=[]))])])], decorator_list=[]), FunctionDef(name='_get_nix_font_path', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name'), arg(arg='style')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='proc', ctx=Store())], value=Call(func=Attribute(value=Name(id='subprocess', ctx=Load()), attr='Popen', ctx=Load()), args=[List(elts=[Constant(value='fc-list'), BinOp(left=Constant(value='%s:style=%s'), op=Mod(), right=Tuple(elts=[Name(id='name', ctx=Load()), Name(id='style', ctx=Load())], ctx=Load())), Constant(value='file')], ctx=Load())], keywords=[keyword(arg='stdout', value=Attribute(value=Name(id='subprocess', ctx=Load()), attr='PIPE', ctx=Load())), keyword(arg='stderr', value=Constant(value=None))])), Assign(targets=[Tuple(elts=[Name(id='stdout', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='proc', ctx=Load()), attr='communicate', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='proc', ctx=Load()), attr='returncode', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='lines', ctx=Store())], value=Call(func=Attribute(value=Name(id='stdout', ctx=Load()), attr='splitlines', ctx=Load()), args=[], keywords=[])), For(target=Name(id='line', ctx=Store()), iter=Name(id='lines', ctx=Load()), body=[If(test=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value=b'Fontconfig warning:')], keywords=[]), body=[Continue()], orelse=[]), Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='decode', ctx=Load()), args=[], keywords=[]), attr='strip', ctx=Load()), args=[], keywords=[]), attr='strip', ctx=Load()), args=[Constant(value=':')], keywords=[])), If(test=Name(id='path', ctx=Load()), body=[Return(value=Name(id='path', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Constant(value=None))], orelse=[])], decorator_list=[]), FunctionDef(name='_create_nix', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='name', ctx=Store()), iter=Subscript(value=Name(id='STYLES', ctx=Load()), slice=Constant(value='NORMAL'), ctx=Load()), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_nix_font_path', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='font_name', ctx=Load()), Name(id='name', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='fonts', ctx=Load()), slice=Constant(value='NORMAL'), ctx=Store())], value=Call(func=Attribute(value=Name(id='ImageFont', ctx=Load()), attr='truetype', ctx=Load()), args=[Name(id='path', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='font_size', ctx=Load())], keywords=[])), Break()], orelse=[])], orelse=[Raise(exc=Call(func=Name(id='FontNotFound', ctx=Load()), args=[BinOp(left=Constant(value='No usable fonts named: "%s"'), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='font_name', ctx=Load()))], keywords=[]))]), For(target=Name(id='style', ctx=Store()), iter=Tuple(elts=[Constant(value='ITALIC'), Constant(value='BOLD'), Constant(value='BOLDITALIC')], ctx=Load()), body=[For(target=Name(id='stylename', ctx=Store()), iter=Subscript(value=Name(id='STYLES', ctx=Load()), slice=Name(id='style', ctx=Load()), ctx=Load()), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_nix_font_path', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='font_name', ctx=Load()), Name(id='stylename', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='fonts', ctx=Load()), slice=Name(id='style', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Name(id='ImageFont', ctx=Load()), attr='truetype', ctx=Load()), args=[Name(id='path', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='font_size', ctx=Load())], keywords=[])), Break()], orelse=[])], orelse=[If(test=Compare(left=Name(id='style', ctx=Load()), ops=[Eq()], comparators=[Constant(value='BOLDITALIC')]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='fonts', ctx=Load()), slice=Name(id='style', ctx=Load()), ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='fonts', ctx=Load()), slice=Constant(value='BOLD'), ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='fonts', ctx=Load()), slice=Name(id='style', ctx=Load()), ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='fonts', ctx=Load()), slice=Constant(value='NORMAL'), ctx=Load()))])])], orelse=[])], decorator_list=[]), FunctionDef(name='_get_mac_font_path', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='font_map'), arg(arg='name'), arg(arg='style')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='font_map', ctx=Load()), attr='get', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=BinOp(left=BinOp(left=Name(id='name', ctx=Load()), op=Add(), right=Constant(value=' ')), op=Add(), right=Name(id='style', ctx=Load())), attr='strip', ctx=Load()), args=[], keywords=[]), attr='lower', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='_create_mac', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='font_map', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='font_dir', ctx=Store()), iter=Tuple(elts=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getenv', ctx=Load()), args=[Constant(value='HOME')], keywords=[]), Constant(value='Library/Fonts/')], keywords=[]), Constant(value='/Library/Fonts/'), Constant(value='/System/Library/Fonts/')], ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='font_map', ctx=Load()), attr='update', ctx=Load()), args=[GeneratorExp(elt=Tuple(elts=[Call(func=Attribute(value=Subscript(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='splitext', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='font_dir', ctx=Load()), Name(id='f', ctx=Load())], keywords=[])], ctx=Load()), generators=[comprehension(target=Name(id='f', ctx=Store()), iter=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='listdir', ctx=Load()), args=[Name(id='font_dir', ctx=Load())], keywords=[]), ifs=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), attr='endswith', ctx=Load()), args=[Tuple(elts=[Constant(value='ttf'), Constant(value='ttc')], ctx=Load())], keywords=[])], is_async=0)])], keywords=[]))], orelse=[]), For(target=Name(id='name', ctx=Store()), iter=Subscript(value=Name(id='STYLES', ctx=Load()), slice=Constant(value='NORMAL'), ctx=Load()), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_mac_font_path', ctx=Load()), args=[Name(id='font_map', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='font_name', ctx=Load()), Name(id='name', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='fonts', ctx=Load()), slice=Constant(value='NORMAL'), ctx=Store())], value=Call(func=Attribute(value=Name(id='ImageFont', ctx=Load()), attr='truetype', ctx=Load()), args=[Name(id='path', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='font_size', ctx=Load())], keywords=[])), Break()], orelse=[])], orelse=[Raise(exc=Call(func=Name(id='FontNotFound', ctx=Load()), args=[BinOp(left=Constant(value='No usable fonts named: "%s"'), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='font_name', ctx=Load()))], keywords=[]))]), For(target=Name(id='style', ctx=Store()), iter=Tuple(elts=[Constant(value='ITALIC'), Constant(value='BOLD'), Constant(value='BOLDITALIC')], ctx=Load()), body=[For(target=Name(id='stylename', ctx=Store()), iter=Subscript(value=Name(id='STYLES', ctx=Load()), slice=Name(id='style', ctx=Load()), ctx=Load()), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_mac_font_path', ctx=Load()), args=[Name(id='font_map', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='font_name', ctx=Load()), Name(id='stylename', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='fonts', ctx=Load()), slice=Name(id='style', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Name(id='ImageFont', ctx=Load()), attr='truetype', ctx=Load()), args=[Name(id='path', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='font_size', ctx=Load())], keywords=[])), Break()], orelse=[])], orelse=[If(test=Compare(left=Name(id='style', ctx=Load()), ops=[Eq()], comparators=[Constant(value='BOLDITALIC')]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='fonts', ctx=Load()), slice=Name(id='style', ctx=Load()), ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='fonts', ctx=Load()), slice=Constant(value='BOLD'), ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='fonts', ctx=Load()), slice=Name(id='style', ctx=Load()), ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='fonts', ctx=Load()), slice=Constant(value='NORMAL'), ctx=Load()))])])], orelse=[])], decorator_list=[]), FunctionDef(name='_lookup_win', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key'), arg(arg='basename'), arg(arg='styles'), arg(arg='fail')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[For(target=Name(id='suffix', ctx=Store()), iter=Tuple(elts=[Constant(value=''), Constant(value=' (TrueType)')], ctx=Load()), body=[For(target=Name(id='style', ctx=Store()), iter=Name(id='styles', ctx=Load()), body=[Try(body=[Assign(targets=[Name(id='valname', ctx=Store())], value=BinOp(left=Constant(value='%s%s%s'), op=Mod(), right=Tuple(elts=[Name(id='basename', ctx=Load()), BoolOp(op=And(), values=[Name(id='style', ctx=Load()), BinOp(left=Constant(value=' '), op=Add(), right=Name(id='style', ctx=Load()))]), Name(id='suffix', ctx=Load())], ctx=Load()))), Assign(targets=[Tuple(elts=[Name(id='val', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='_winreg', ctx=Load()), attr='QueryValueEx', ctx=Load()), args=[Name(id='key', ctx=Load()), Name(id='valname', ctx=Load())], keywords=[])), Return(value=Name(id='val', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), body=[Continue()])], orelse=[], finalbody=[])], orelse=[])], orelse=[If(test=Name(id='fail', ctx=Load()), body=[Raise(exc=Call(func=Name(id='FontNotFound', ctx=Load()), args=[BinOp(left=Constant(value='Font %s (%s) not found in registry'), op=Mod(), right=Tuple(elts=[Name(id='basename', ctx=Load()), Subscript(value=Name(id='styles', ctx=Load()), slice=Constant(value=0), ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[]), Return(value=Constant(value=None))])], decorator_list=[]), FunctionDef(name='_create_win', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='lookuperror', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='keynames', ctx=Store())], value=List(elts=[Tuple(elts=[Attribute(value=Name(id='_winreg', ctx=Load()), attr='HKEY_CURRENT_USER', ctx=Load()), Constant(value='Software\\Microsoft\\Windows NT\\CurrentVersion\\Fonts')], ctx=Load()), Tuple(elts=[Attribute(value=Name(id='_winreg', ctx=Load()), attr='HKEY_CURRENT_USER', ctx=Load()), Constant(value='Software\\Microsoft\\Windows\\CurrentVersion\\Fonts')], ctx=Load()), Tuple(elts=[Attribute(value=Name(id='_winreg', ctx=Load()), attr='HKEY_LOCAL_MACHINE', ctx=Load()), Constant(value='Software\\Microsoft\\Windows NT\\CurrentVersion\\Fonts')], ctx=Load()), Tuple(elts=[Attribute(value=Name(id='_winreg', ctx=Load()), attr='HKEY_LOCAL_MACHINE', ctx=Load()), Constant(value='Software\\Microsoft\\Windows\\CurrentVersion\\Fonts')], ctx=Load())], ctx=Load())), For(target=Name(id='keyname', ctx=Store()), iter=Name(id='keynames', ctx=Load()), body=[Try(body=[Assign(targets=[Name(id='key', ctx=Store())], value=Call(func=Attribute(value=Name(id='_winreg', ctx=Load()), attr='OpenKey', ctx=Load()), args=[Starred(value=Name(id='keyname', ctx=Load()), ctx=Load())], keywords=[])), Try(body=[Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_lookup_win', ctx=Load()), args=[Name(id='key', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='font_name', ctx=Load()), Subscript(value=Name(id='STYLES', ctx=Load()), slice=Constant(value='NORMAL'), ctx=Load()), Constant(value=True)], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='fonts', ctx=Load()), slice=Constant(value='NORMAL'), ctx=Store())], value=Call(func=Attribute(value=Name(id='ImageFont', ctx=Load()), attr='truetype', ctx=Load()), args=[Name(id='path', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='font_size', ctx=Load())], keywords=[])), For(target=Name(id='style', ctx=Store()), iter=Tuple(elts=[Constant(value='ITALIC'), Constant(value='BOLD'), Constant(value='BOLDITALIC')], ctx=Load()), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_lookup_win', ctx=Load()), args=[Name(id='key', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='font_name', ctx=Load()), Subscript(value=Name(id='STYLES', ctx=Load()), slice=Name(id='style', ctx=Load()), ctx=Load())], keywords=[])), If(test=Name(id='path', ctx=Load()), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='fonts', ctx=Load()), slice=Name(id='style', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Name(id='ImageFont', ctx=Load()), attr='truetype', ctx=Load()), args=[Name(id='path', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='font_size', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='style', ctx=Load()), ops=[Eq()], comparators=[Constant(value='BOLDITALIC')]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='fonts', ctx=Load()), slice=Name(id='style', ctx=Load()), ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='fonts', ctx=Load()), slice=Constant(value='BOLD'), ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='fonts', ctx=Load()), slice=Name(id='style', ctx=Load()), ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='fonts', ctx=Load()), slice=Constant(value='NORMAL'), ctx=Load()))])])], orelse=[]), Return()], handlers=[ExceptHandler(type=Name(id='FontNotFound', ctx=Load()), name='err', body=[Assign(targets=[Name(id='lookuperror', ctx=Store())], value=Name(id='err', ctx=Load()))])], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='_winreg', ctx=Load()), attr='CloseKey', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[]))])], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], orelse=[If(test=Name(id='lookuperror', ctx=Load()), body=[Raise(exc=Name(id='lookuperror', ctx=Load()))], orelse=[]), Raise(exc=Call(func=Name(id='FontNotFound', ctx=Load()), args=[Constant(value="Can't open Windows font registry key")], keywords=[]))])], decorator_list=[]), FunctionDef(name='get_char_size', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Get the character size.\n        ')), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_text_size', ctx=Load()), args=[Constant(value='M')], keywords=[]))], decorator_list=[]), FunctionDef(name='get_text_size', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='text')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Get the text size (width, height).\n        ')), Assign(targets=[Name(id='font', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='fonts', ctx=Load()), slice=Constant(value='NORMAL'), ctx=Load())), If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='font', ctx=Load()), Constant(value='getbbox')], keywords=[]), body=[Return(value=Subscript(value=Call(func=Attribute(value=Name(id='font', ctx=Load()), attr='getbbox', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[]), slice=Slice(lower=Constant(value=2), upper=Constant(value=4)), ctx=Load()))], orelse=[Return(value=Call(func=Attribute(value=Name(id='font', ctx=Load()), attr='getsize', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='get_font', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='bold'), arg(arg='oblique')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Get the font based on bold and italic flags.\n        ')), If(test=BoolOp(op=And(), values=[Name(id='bold', ctx=Load()), Name(id='oblique', ctx=Load())]), body=[Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='fonts', ctx=Load()), slice=Constant(value='BOLDITALIC'), ctx=Load()))], orelse=[If(test=Name(id='bold', ctx=Load()), body=[Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='fonts', ctx=Load()), slice=Constant(value='BOLD'), ctx=Load()))], orelse=[If(test=Name(id='oblique', ctx=Load()), body=[Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='fonts', ctx=Load()), slice=Constant(value='ITALIC'), ctx=Load()))], orelse=[Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='fonts', ctx=Load()), slice=Constant(value='NORMAL'), ctx=Load()))])])])], decorator_list=[])], decorator_list=[]), ClassDef(name='ImageFormatter', bases=[Name(id='Formatter', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Create a PNG image from source code. This uses the Python Imaging Library to\n    generate a pixmap from the source code.\n\n    .. versionadded:: 0.10\n\n    Additional options accepted:\n\n    `image_format`\n        An image format to output to that is recognised by PIL, these include:\n\n        * "PNG" (default)\n        * "JPEG"\n        * "BMP"\n        * "GIF"\n\n    `line_pad`\n        The extra spacing (in pixels) between each line of text.\n\n        Default: 2\n\n    `font_name`\n        The font name to be used as the base font from which others, such as\n        bold and italic fonts will be generated.  This really should be a\n        monospace font to look sane.\n\n        Default: "Courier New" on Windows, "Menlo" on Mac OS, and\n                 "DejaVu Sans Mono" on \\*nix\n\n    `font_size`\n        The font size in points to be used.\n\n        Default: 14\n\n    `image_pad`\n        The padding, in pixels to be used at each edge of the resulting image.\n\n        Default: 10\n\n    `line_numbers`\n        Whether line numbers should be shown: True/False\n\n        Default: True\n\n    `line_number_start`\n        The line number of the first line.\n\n        Default: 1\n\n    `line_number_step`\n        The step used when printing line numbers.\n\n        Default: 1\n\n    `line_number_bg`\n        The background colour (in "#123456" format) of the line number bar, or\n        None to use the style background color.\n\n        Default: "#eed"\n\n    `line_number_fg`\n        The text color of the line numbers (in "#123456"-like format).\n\n        Default: "#886"\n\n    `line_number_chars`\n        The number of columns of line numbers allowable in the line number\n        margin.\n\n        Default: 2\n\n    `line_number_bold`\n        Whether line numbers will be bold: True/False\n\n        Default: False\n\n    `line_number_italic`\n        Whether line numbers will be italicized: True/False\n\n        Default: False\n\n    `line_number_separator`\n        Whether a line will be drawn between the line number area and the\n        source code area: True/False\n\n        Default: True\n\n    `line_number_pad`\n        The horizontal padding (in pixels) between the line number margin, and\n        the source code area.\n\n        Default: 6\n\n    `hl_lines`\n        Specify a list of lines to be highlighted.\n\n        .. versionadded:: 1.2\n\n        Default: empty list\n\n    `hl_color`\n        Specify the color for highlighting lines.\n\n        .. versionadded:: 1.2\n\n        Default: highlight color of the selected style\n    ')), Assign(targets=[Name(id='name', ctx=Store())], value=Constant(value='img')), Assign(targets=[Name(id='aliases', ctx=Store())], value=List(elts=[Constant(value='img'), Constant(value='IMG'), Constant(value='png')], ctx=Load())), Assign(targets=[Name(id='filenames', ctx=Store())], value=List(elts=[Constant(value='*.png')], ctx=Load())), Assign(targets=[Name(id='unicodeoutput', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='default_image_format', ctx=Store())], value=Constant(value='png')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='options'), defaults=[]), body=[Expr(value=Constant(value='\n        See the class docstring for explanation of options.\n        ')), If(test=UnaryOp(op=Not(), operand=Name(id='pil_available', ctx=Load())), body=[Raise(exc=Call(func=Name(id='PilNotAvailable', ctx=Load()), args=[Constant(value='Python Imaging Library is required for this formatter')], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='Formatter', ctx=Load()), attr='__init__', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[keyword(value=Name(id='options', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='encoding', ctx=Store())], value=Constant(value='latin1')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='styles', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load()), attr='background_color', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='background_color', ctx=Store())], value=Constant(value='#fff'))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='background_color', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load()), attr='background_color', ctx=Load()))]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='image_format', ctx=Store())], value=Call(func=Name(id='get_choice_opt', ctx=Load()), args=[Name(id='options', ctx=Load()), Constant(value='image_format'), List(elts=[Constant(value='png'), Constant(value='jpeg'), Constant(value='gif'), Constant(value='bmp')], ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='default_image_format', ctx=Load())], keywords=[keyword(arg='normcase', value=Constant(value=True))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='image_pad', ctx=Store())], value=Call(func=Name(id='get_int_opt', ctx=Load()), args=[Name(id='options', ctx=Load()), Constant(value='image_pad'), Constant(value=10)], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='line_pad', ctx=Store())], value=Call(func=Name(id='get_int_opt', ctx=Load()), args=[Name(id='options', ctx=Load()), Constant(value='line_pad'), Constant(value=2)], keywords=[])), Assign(targets=[Name(id='fontsize', ctx=Store())], value=Call(func=Name(id='get_int_opt', ctx=Load()), args=[Name(id='options', ctx=Load()), Constant(value='font_size'), Constant(value=14)], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='fonts', ctx=Store())], value=Call(func=Name(id='FontManager', ctx=Load()), args=[Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='font_name'), Constant(value='')], keywords=[]), Name(id='fontsize', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='fontw', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='fonth', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='fonts', ctx=Load()), attr='get_char_size', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='line_number_fg', ctx=Store())], value=Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='line_number_fg'), Constant(value='#886')], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='line_number_bg', ctx=Store())], value=Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='line_number_bg'), Constant(value='#eed')], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='line_number_chars', ctx=Store())], value=Call(func=Name(id='get_int_opt', ctx=Load()), args=[Name(id='options', ctx=Load()), Constant(value='line_number_chars'), Constant(value=2)], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='line_number_bold', ctx=Store())], value=Call(func=Name(id='get_bool_opt', ctx=Load()), args=[Name(id='options', ctx=Load()), Constant(value='line_number_bold'), Constant(value=False)], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='line_number_italic', ctx=Store())], value=Call(func=Name(id='get_bool_opt', ctx=Load()), args=[Name(id='options', ctx=Load()), Constant(value='line_number_italic'), Constant(value=False)], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='line_number_pad', ctx=Store())], value=Call(func=Name(id='get_int_opt', ctx=Load()), args=[Name(id='options', ctx=Load()), Constant(value='line_number_pad'), Constant(value=6)], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='line_numbers', ctx=Store())], value=Call(func=Name(id='get_bool_opt', ctx=Load()), args=[Name(id='options', ctx=Load()), Constant(value='line_numbers'), Constant(value=True)], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='line_number_separator', ctx=Store())], value=Call(func=Name(id='get_bool_opt', ctx=Load()), args=[Name(id='options', ctx=Load()), Constant(value='line_number_separator'), Constant(value=True)], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='line_number_step', ctx=Store())], value=Call(func=Name(id='get_int_opt', ctx=Load()), args=[Name(id='options', ctx=Load()), Constant(value='line_number_step'), Constant(value=1)], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='line_number_start', ctx=Store())], value=Call(func=Name(id='get_int_opt', ctx=Load()), args=[Name(id='options', ctx=Load()), Constant(value='line_number_start'), Constant(value=1)], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='line_numbers', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='line_number_width', ctx=Store())], value=BinOp(left=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='fontw', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='self', ctx=Load()), attr='line_number_chars', ctx=Load())), op=Add(), right=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='line_number_pad', ctx=Load()), op=Mult(), right=Constant(value=2))))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='line_number_width', ctx=Store())], value=Constant(value=0))]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='hl_lines', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='hl_lines_str', ctx=Store())], value=Call(func=Name(id='get_list_opt', ctx=Load()), args=[Name(id='options', ctx=Load()), Constant(value='hl_lines'), List(elts=[], ctx=Load())], keywords=[])), For(target=Name(id='line', ctx=Store()), iter=Name(id='hl_lines_str', ctx=Load()), body=[Try(body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='hl_lines', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[])], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='hl_color', ctx=Store())], value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='hl_color'), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load()), attr='highlight_color', ctx=Load())], keywords=[]), Constant(value='#f90')])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='drawables', ctx=Store())], value=List(elts=[], ctx=Load()))], decorator_list=[]), FunctionDef(name='get_style_defs', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='arg')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='')]), body=[Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[Constant(value='The -S option is meaningless for the image formatter. Use -O style=<stylename> instead.')], keywords=[]))], decorator_list=[]), FunctionDef(name='_get_line_height', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Get the height of a line.\n        ')), Return(value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='fonth', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='line_pad', ctx=Load())))], decorator_list=[]), FunctionDef(name='_get_line_y', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='lineno')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Get the Y coordinate of a line number.\n        ')), Return(value=BinOp(left=BinOp(left=Name(id='lineno', ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_line_height', ctx=Load()), args=[], keywords=[])), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='image_pad', ctx=Load())))], decorator_list=[]), FunctionDef(name='_get_char_width', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Get the width of a character.\n        ')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='fontw', ctx=Load()))], decorator_list=[]), FunctionDef(name='_get_char_x', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='linelength')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Get the X coordinate of a character position.\n        ')), Return(value=BinOp(left=BinOp(left=Name(id='linelength', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='image_pad', ctx=Load())), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='line_number_width', ctx=Load())))], decorator_list=[]), FunctionDef(name='_get_text_pos', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='linelength'), arg(arg='lineno')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Get the actual position for a character and line position.\n        ')), Return(value=Tuple(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_char_x', ctx=Load()), args=[Name(id='linelength', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_line_y', ctx=Load()), args=[Name(id='lineno', ctx=Load())], keywords=[])], ctx=Load()))], decorator_list=[]), FunctionDef(name='_get_linenumber_pos', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='lineno')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Get the actual position for the start of a line number.\n        ')), Return(value=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='image_pad', ctx=Load()), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_line_y', ctx=Load()), args=[Name(id='lineno', ctx=Load())], keywords=[])], ctx=Load()))], decorator_list=[]), FunctionDef(name='_get_text_color', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='style')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Get the correct color for the token from the style.\n        ')), If(test=Compare(left=Subscript(value=Name(id='style', ctx=Load()), slice=Constant(value='color'), ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='fill', ctx=Store())], value=BinOp(left=Constant(value='#'), op=Add(), right=Subscript(value=Name(id='style', ctx=Load()), slice=Constant(value='color'), ctx=Load())))], orelse=[Assign(targets=[Name(id='fill', ctx=Store())], value=Constant(value='#000'))]), Return(value=Name(id='fill', ctx=Load()))], decorator_list=[]), FunctionDef(name='_get_text_bg_color', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='style')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Get the correct background color for the token from the style.\n        ')), If(test=Compare(left=Subscript(value=Name(id='style', ctx=Load()), slice=Constant(value='bgcolor'), ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='bg_color', ctx=Store())], value=BinOp(left=Constant(value='#'), op=Add(), right=Subscript(value=Name(id='style', ctx=Load()), slice=Constant(value='bgcolor'), ctx=Load())))], orelse=[Assign(targets=[Name(id='bg_color', ctx=Store())], value=Constant(value=None))]), Return(value=Name(id='bg_color', ctx=Load()))], decorator_list=[]), FunctionDef(name='_get_style_font', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='style')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Get the correct font for the style.\n        ')), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='fonts', ctx=Load()), attr='get_font', ctx=Load()), args=[Subscript(value=Name(id='style', ctx=Load()), slice=Constant(value='bold'), ctx=Load()), Subscript(value=Name(id='style', ctx=Load()), slice=Constant(value='italic'), ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_get_image_size', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='maxlinelength'), arg(arg='maxlineno')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Get the required image size.\n        ')), Return(value=Tuple(elts=[BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_char_x', ctx=Load()), args=[Name(id='maxlinelength', ctx=Load())], keywords=[]), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='image_pad', ctx=Load())), BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_line_y', ctx=Load()), args=[BinOp(left=Name(id='maxlineno', ctx=Load()), op=Add(), right=Constant(value=0))], keywords=[]), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='image_pad', ctx=Load()))], ctx=Load()))], decorator_list=[]), FunctionDef(name='_draw_linenumber', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='posno'), arg(arg='lineno')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Remember a line number drawable to paint later.\n        ')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_draw_text', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_linenumber_pos', ctx=Load()), args=[Name(id='posno', ctx=Load())], keywords=[]), Call(func=Attribute(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='lineno', ctx=Load())], keywords=[]), attr='rjust', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='line_number_chars', ctx=Load())], keywords=[])], keywords=[keyword(arg='font', value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='fonts', ctx=Load()), attr='get_font', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='line_number_bold', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='line_number_italic', ctx=Load())], keywords=[])), keyword(arg='text_fg', value=Attribute(value=Name(id='self', ctx=Load()), attr='line_number_fg', ctx=Load())), keyword(arg='text_bg', value=Constant(value=None))]))], decorator_list=[]), FunctionDef(name='_draw_text', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='pos'), arg(arg='text'), arg(arg='font'), arg(arg='text_fg'), arg(arg='text_bg')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Remember a single drawable tuple to paint later.\n        ')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='drawables', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='pos', ctx=Load()), Name(id='text', ctx=Load()), Name(id='font', ctx=Load()), Name(id='text_fg', ctx=Load()), Name(id='text_bg', ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_create_drawables', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='tokensource')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Create drawables for the token content.\n        ')), Assign(targets=[Name(id='lineno', ctx=Store()), Name(id='charno', ctx=Store()), Name(id='maxcharno', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='maxlinelength', ctx=Store()), Name(id='linelength', ctx=Store())], value=Constant(value=0)), For(target=Tuple(elts=[Name(id='ttype', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Name(id='tokensource', ctx=Load()), body=[While(test=Compare(left=Name(id='ttype', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='styles', ctx=Load())]), body=[Assign(targets=[Name(id='ttype', ctx=Store())], value=Attribute(value=Name(id='ttype', ctx=Load()), attr='parent', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='style', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='styles', ctx=Load()), slice=Name(id='ttype', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='expandtabs', ctx=Load()), args=[Constant(value=4)], keywords=[])), Assign(targets=[Name(id='lines', ctx=Store())], value=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='splitlines', ctx=Load()), args=[Constant(value=True)], keywords=[])), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='line', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='lines', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='temp', ctx=Store())], value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='rstrip', ctx=Load()), args=[Constant(value='\n')], keywords=[])), If(test=Name(id='temp', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_draw_text', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_text_pos', ctx=Load()), args=[Name(id='linelength', ctx=Load()), Name(id='lineno', ctx=Load())], keywords=[]), Name(id='temp', ctx=Load())], keywords=[keyword(arg='font', value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_style_font', ctx=Load()), args=[Name(id='style', ctx=Load())], keywords=[])), keyword(arg='text_fg', value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_text_color', ctx=Load()), args=[Name(id='style', ctx=Load())], keywords=[])), keyword(arg='text_bg', value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_text_bg_color', ctx=Load()), args=[Name(id='style', ctx=Load())], keywords=[]))])), Assign(targets=[Tuple(elts=[Name(id='temp_width', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='fonts', ctx=Load()), attr='get_text_size', ctx=Load()), args=[Name(id='temp', ctx=Load())], keywords=[])), AugAssign(target=Name(id='linelength', ctx=Store()), op=Add(), value=Name(id='temp_width', ctx=Load())), Assign(targets=[Name(id='maxlinelength', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Name(id='maxlinelength', ctx=Load()), Name(id='linelength', ctx=Load())], keywords=[])), AugAssign(target=Name(id='charno', ctx=Store()), op=Add(), value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='temp', ctx=Load())], keywords=[])), Assign(targets=[Name(id='maxcharno', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Name(id='maxcharno', ctx=Load()), Name(id='charno', ctx=Load())], keywords=[]))], orelse=[]), If(test=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='\n')], keywords=[]), body=[Assign(targets=[Name(id='linelength', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='charno', ctx=Store())], value=Constant(value=0)), AugAssign(target=Name(id='lineno', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='maxlinelength', ctx=Store())], value=Name(id='maxlinelength', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='maxcharno', ctx=Store())], value=Name(id='maxcharno', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='maxlineno', ctx=Store())], value=Name(id='lineno', ctx=Load()))], decorator_list=[]), FunctionDef(name='_draw_line_numbers', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Create drawables for the line numbers.\n        ')), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='line_numbers', ctx=Load())), body=[Return()], orelse=[]), For(target=Name(id='p', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='maxlineno', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='n', ctx=Store())], value=BinOp(left=Name(id='p', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='line_number_start', ctx=Load()))), If(test=Compare(left=BinOp(left=Name(id='n', ctx=Load()), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='line_number_step', ctx=Load())), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_draw_linenumber', ctx=Load()), args=[Name(id='p', ctx=Load()), Name(id='n', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='_paint_line_number_bg', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='im')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Paint the line number background on the image.\n        ')), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='line_numbers', ctx=Load())), body=[Return()], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='line_number_fg', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return()], orelse=[]), Assign(targets=[Name(id='draw', ctx=Store())], value=Call(func=Attribute(value=Name(id='ImageDraw', ctx=Load()), attr='Draw', ctx=Load()), args=[Name(id='im', ctx=Load())], keywords=[])), Assign(targets=[Name(id='recth', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='im', ctx=Load()), attr='size', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())), Assign(targets=[Name(id='rectw', ctx=Store())], value=BinOp(left=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='image_pad', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='line_number_width', ctx=Load())), op=Sub(), right=Attribute(value=Name(id='self', ctx=Load()), attr='line_number_pad', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='draw', ctx=Load()), attr='rectangle', ctx=Load()), args=[List(elts=[Tuple(elts=[Constant(value=0), Constant(value=0)], ctx=Load()), Tuple(elts=[Name(id='rectw', ctx=Load()), Name(id='recth', ctx=Load())], ctx=Load())], ctx=Load())], keywords=[keyword(arg='fill', value=Attribute(value=Name(id='self', ctx=Load()), attr='line_number_bg', ctx=Load()))])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='line_number_separator', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='draw', ctx=Load()), attr='line', ctx=Load()), args=[List(elts=[Tuple(elts=[Name(id='rectw', ctx=Load()), Constant(value=0)], ctx=Load()), Tuple(elts=[Name(id='rectw', ctx=Load()), Name(id='recth', ctx=Load())], ctx=Load())], ctx=Load())], keywords=[keyword(arg='fill', value=Attribute(value=Name(id='self', ctx=Load()), attr='line_number_fg', ctx=Load()))]))], orelse=[]), Delete(targets=[Name(id='draw', ctx=Del())])], decorator_list=[]), FunctionDef(name='format', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='tokensource'), arg(arg='outfile')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Format ``tokensource``, an iterable of ``(tokentype, tokenstring)``\n        tuples and write it into ``outfile``.\n\n        This implementation calculates where it should draw each token on the\n        pixmap, then calculates the required pixmap size and draws the items.\n        ')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_create_drawables', ctx=Load()), args=[Name(id='tokensource', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_draw_line_numbers', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='im', ctx=Store())], value=Call(func=Attribute(value=Name(id='Image', ctx=Load()), attr='new', ctx=Load()), args=[Constant(value='RGB'), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_image_size', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='maxlinelength', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='maxlineno', ctx=Load())], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='background_color', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_paint_line_number_bg', ctx=Load()), args=[Name(id='im', ctx=Load())], keywords=[])), Assign(targets=[Name(id='draw', ctx=Store())], value=Call(func=Attribute(value=Name(id='ImageDraw', ctx=Load()), attr='Draw', ctx=Load()), args=[Name(id='im', ctx=Load())], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='hl_lines', ctx=Load()), body=[Assign(targets=[Name(id='x', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='image_pad', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='line_number_width', ctx=Load())), op=Sub(), right=Attribute(value=Name(id='self', ctx=Load()), attr='line_number_pad', ctx=Load())), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='recth', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_line_height', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='rectw', ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='im', ctx=Load()), attr='size', ctx=Load()), slice=Constant(value=0), ctx=Load()), op=Sub(), right=Name(id='x', ctx=Load()))), For(target=Name(id='linenumber', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='hl_lines', ctx=Load()), body=[Assign(targets=[Name(id='y', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_line_y', ctx=Load()), args=[BinOp(left=Name(id='linenumber', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='draw', ctx=Load()), attr='rectangle', ctx=Load()), args=[List(elts=[Tuple(elts=[Name(id='x', ctx=Load()), Name(id='y', ctx=Load())], ctx=Load()), Tuple(elts=[BinOp(left=Name(id='x', ctx=Load()), op=Add(), right=Name(id='rectw', ctx=Load())), BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Name(id='recth', ctx=Load()))], ctx=Load())], ctx=Load())], keywords=[keyword(arg='fill', value=Attribute(value=Name(id='self', ctx=Load()), attr='hl_color', ctx=Load()))]))], orelse=[])], orelse=[]), For(target=Tuple(elts=[Name(id='pos', ctx=Store()), Name(id='value', ctx=Store()), Name(id='font', ctx=Store()), Name(id='text_fg', ctx=Store()), Name(id='text_bg', ctx=Store())], ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='drawables', ctx=Load()), body=[If(test=Name(id='text_bg', ctx=Load()), body=[Assign(targets=[Name(id='text_size', ctx=Store())], value=Call(func=Attribute(value=Name(id='draw', ctx=Load()), attr='textsize', ctx=Load()), args=[], keywords=[keyword(arg='text', value=Name(id='value', ctx=Load())), keyword(arg='font', value=Name(id='font', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='draw', ctx=Load()), attr='rectangle', ctx=Load()), args=[List(elts=[Subscript(value=Name(id='pos', ctx=Load()), slice=Constant(value=0), ctx=Load()), Subscript(value=Name(id='pos', ctx=Load()), slice=Constant(value=1), ctx=Load()), BinOp(left=Subscript(value=Name(id='pos', ctx=Load()), slice=Constant(value=0), ctx=Load()), op=Add(), right=Subscript(value=Name(id='text_size', ctx=Load()), slice=Constant(value=0), ctx=Load())), BinOp(left=Subscript(value=Name(id='pos', ctx=Load()), slice=Constant(value=1), ctx=Load()), op=Add(), right=Subscript(value=Name(id='text_size', ctx=Load()), slice=Constant(value=1), ctx=Load()))], ctx=Load())], keywords=[keyword(arg='fill', value=Name(id='text_bg', ctx=Load()))]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='draw', ctx=Load()), attr='text', ctx=Load()), args=[Name(id='pos', ctx=Load()), Name(id='value', ctx=Load())], keywords=[keyword(arg='font', value=Name(id='font', ctx=Load())), keyword(arg='fill', value=Name(id='text_fg', ctx=Load()))]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='im', ctx=Load()), attr='save', ctx=Load()), args=[Name(id='outfile', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='image_format', ctx=Load()), attr='upper', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='GifImageFormatter', bases=[Name(id='ImageFormatter', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Create a GIF image from source code. This uses the Python Imaging Library to\n    generate a pixmap from the source code.\n\n    .. versionadded:: 1.0\n    ')), Assign(targets=[Name(id='name', ctx=Store())], value=Constant(value='img_gif')), Assign(targets=[Name(id='aliases', ctx=Store())], value=List(elts=[Constant(value='gif')], ctx=Load())), Assign(targets=[Name(id='filenames', ctx=Store())], value=List(elts=[Constant(value='*.gif')], ctx=Load())), Assign(targets=[Name(id='default_image_format', ctx=Store())], value=Constant(value='gif'))], decorator_list=[]), ClassDef(name='JpgImageFormatter', bases=[Name(id='ImageFormatter', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Create a JPEG image from source code. This uses the Python Imaging Library to\n    generate a pixmap from the source code.\n\n    .. versionadded:: 1.0\n    ')), Assign(targets=[Name(id='name', ctx=Store())], value=Constant(value='img_jpg')), Assign(targets=[Name(id='aliases', ctx=Store())], value=List(elts=[Constant(value='jpg'), Constant(value='jpeg')], ctx=Load())), Assign(targets=[Name(id='filenames', ctx=Store())], value=List(elts=[Constant(value='*.jpg')], ctx=Load())), Assign(targets=[Name(id='default_image_format', ctx=Store())], value=Constant(value='jpeg'))], decorator_list=[]), ClassDef(name='BmpImageFormatter', bases=[Name(id='ImageFormatter', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Create a bitmap image from source code. This uses the Python Imaging Library to\n    generate a pixmap from the source code.\n\n    .. versionadded:: 1.0\n    ')), Assign(targets=[Name(id='name', ctx=Store())], value=Constant(value='img_bmp')), Assign(targets=[Name(id='aliases', ctx=Store())], value=List(elts=[Constant(value='bmp'), Constant(value='bitmap')], ctx=Load())), Assign(targets=[Name(id='filenames', ctx=Store())], value=List(elts=[Constant(value='*.bmp')], ctx=Load())), Assign(targets=[Name(id='default_image_format', ctx=Store())], value=Constant(value='bmp'))], decorator_list=[])], type_ignores=[])