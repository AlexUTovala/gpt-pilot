Module(body=[Expr(value=Constant(value='Module containing bug report helper(s).')), Import(names=[alias(name='json')]), Import(names=[alias(name='platform')]), Import(names=[alias(name='ssl')]), Import(names=[alias(name='sys')]), ImportFrom(module='pip._vendor', names=[alias(name='idna')], level=0), ImportFrom(module='pip._vendor', names=[alias(name='urllib3')], level=0), ImportFrom(names=[alias(name='__version__', asname='requests_version')], level=1), Assign(targets=[Name(id='charset_normalizer', ctx=Store())], value=Constant(value=None)), Try(body=[ImportFrom(module='pip._vendor', names=[alias(name='chardet')], level=0)], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Assign(targets=[Name(id='chardet', ctx=Store())], value=Constant(value=None))])], orelse=[], finalbody=[]), Try(body=[ImportFrom(module='pip._vendor.urllib3.contrib', names=[alias(name='pyopenssl')], level=0)], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Assign(targets=[Name(id='pyopenssl', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='OpenSSL', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='cryptography', ctx=Store())], value=Constant(value=None))])], orelse=[Import(names=[alias(name='cryptography')]), Import(names=[alias(name='OpenSSL')])], finalbody=[]), FunctionDef(name='_implementation', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Return a dict with the Python implementation and version.\n\n    Provide both the name and the version of the Python implementation\n    currently running. For example, on CPython 3.10.3 it will return\n    {'name': 'CPython', 'version': '3.10.3'}.\n\n    This function works best on CPython and PyPy: in particular, it probably\n    doesn't work for Jython or IronPython. Future investigation should be done\n    to work out the correct shape of the code for those platforms.\n    ")), Assign(targets=[Name(id='implementation', ctx=Store())], value=Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='python_implementation', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='implementation', ctx=Load()), ops=[Eq()], comparators=[Constant(value='CPython')]), body=[Assign(targets=[Name(id='implementation_version', ctx=Store())], value=Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='python_version', ctx=Load()), args=[], keywords=[]))], orelse=[If(test=Compare(left=Name(id='implementation', ctx=Load()), ops=[Eq()], comparators=[Constant(value='PyPy')]), body=[Assign(targets=[Name(id='implementation_version', ctx=Store())], value=Call(func=Attribute(value=Constant(value='{}.{}.{}'), attr='format', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='pypy_version_info', ctx=Load()), attr='major', ctx=Load()), Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='pypy_version_info', ctx=Load()), attr='minor', ctx=Load()), Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='pypy_version_info', ctx=Load()), attr='micro', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='pypy_version_info', ctx=Load()), attr='releaselevel', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='final')]), body=[Assign(targets=[Name(id='implementation_version', ctx=Store())], value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[List(elts=[Name(id='implementation_version', ctx=Load()), Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='pypy_version_info', ctx=Load()), attr='releaselevel', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[])], orelse=[If(test=Compare(left=Name(id='implementation', ctx=Load()), ops=[Eq()], comparators=[Constant(value='Jython')]), body=[Assign(targets=[Name(id='implementation_version', ctx=Store())], value=Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='python_version', ctx=Load()), args=[], keywords=[]))], orelse=[If(test=Compare(left=Name(id='implementation', ctx=Load()), ops=[Eq()], comparators=[Constant(value='IronPython')]), body=[Assign(targets=[Name(id='implementation_version', ctx=Store())], value=Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='python_version', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Name(id='implementation_version', ctx=Store())], value=Constant(value='Unknown'))])])])]), Return(value=Dict(keys=[Constant(value='name'), Constant(value='version')], values=[Name(id='implementation', ctx=Load()), Name(id='implementation_version', ctx=Load())]))], decorator_list=[]), FunctionDef(name='info', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Generate information for a bug report.')), Try(body=[Assign(targets=[Name(id='platform_info', ctx=Store())], value=Dict(keys=[Constant(value='system'), Constant(value='release')], values=[Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='system', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='release', ctx=Load()), args=[], keywords=[])]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), body=[Assign(targets=[Name(id='platform_info', ctx=Store())], value=Dict(keys=[Constant(value='system'), Constant(value='release')], values=[Constant(value='Unknown'), Constant(value='Unknown')]))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='implementation_info', ctx=Store())], value=Call(func=Name(id='_implementation', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='urllib3_info', ctx=Store())], value=Dict(keys=[Constant(value='version')], values=[Attribute(value=Name(id='urllib3', ctx=Load()), attr='__version__', ctx=Load())])), Assign(targets=[Name(id='charset_normalizer_info', ctx=Store())], value=Dict(keys=[Constant(value='version')], values=[Constant(value=None)])), Assign(targets=[Name(id='chardet_info', ctx=Store())], value=Dict(keys=[Constant(value='version')], values=[Constant(value=None)])), If(test=Name(id='charset_normalizer', ctx=Load()), body=[Assign(targets=[Name(id='charset_normalizer_info', ctx=Store())], value=Dict(keys=[Constant(value='version')], values=[Attribute(value=Name(id='charset_normalizer', ctx=Load()), attr='__version__', ctx=Load())]))], orelse=[]), If(test=Name(id='chardet', ctx=Load()), body=[Assign(targets=[Name(id='chardet_info', ctx=Store())], value=Dict(keys=[Constant(value='version')], values=[Attribute(value=Name(id='chardet', ctx=Load()), attr='__version__', ctx=Load())]))], orelse=[]), Assign(targets=[Name(id='pyopenssl_info', ctx=Store())], value=Dict(keys=[Constant(value='version'), Constant(value='openssl_version')], values=[Constant(value=None), Constant(value='')])), If(test=Name(id='OpenSSL', ctx=Load()), body=[Assign(targets=[Name(id='pyopenssl_info', ctx=Store())], value=Dict(keys=[Constant(value='version'), Constant(value='openssl_version')], values=[Attribute(value=Name(id='OpenSSL', ctx=Load()), attr='__version__', ctx=Load()), JoinedStr(values=[FormattedValue(value=Attribute(value=Attribute(value=Name(id='OpenSSL', ctx=Load()), attr='SSL', ctx=Load()), attr='OPENSSL_VERSION_NUMBER', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='x')]))])]))], orelse=[]), Assign(targets=[Name(id='cryptography_info', ctx=Store())], value=Dict(keys=[Constant(value='version')], values=[Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='cryptography', ctx=Load()), Constant(value='__version__'), Constant(value='')], keywords=[])])), Assign(targets=[Name(id='idna_info', ctx=Store())], value=Dict(keys=[Constant(value='version')], values=[Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='idna', ctx=Load()), Constant(value='__version__'), Constant(value='')], keywords=[])])), Assign(targets=[Name(id='system_ssl', ctx=Store())], value=Attribute(value=Name(id='ssl', ctx=Load()), attr='OPENSSL_VERSION_NUMBER', ctx=Load())), Assign(targets=[Name(id='system_ssl_info', ctx=Store())], value=Dict(keys=[Constant(value='version')], values=[IfExp(test=Compare(left=Name(id='system_ssl', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=JoinedStr(values=[FormattedValue(value=Name(id='system_ssl', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='x')]))]), orelse=Constant(value=''))])), Return(value=Dict(keys=[Constant(value='platform'), Constant(value='implementation'), Constant(value='system_ssl'), Constant(value='using_pyopenssl'), Constant(value='using_charset_normalizer'), Constant(value='pyOpenSSL'), Constant(value='urllib3'), Constant(value='chardet'), Constant(value='charset_normalizer'), Constant(value='cryptography'), Constant(value='idna'), Constant(value='requests')], values=[Name(id='platform_info', ctx=Load()), Name(id='implementation_info', ctx=Load()), Name(id='system_ssl_info', ctx=Load()), Compare(left=Name(id='pyopenssl', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='chardet', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Name(id='pyopenssl_info', ctx=Load()), Name(id='urllib3_info', ctx=Load()), Name(id='chardet_info', ctx=Load()), Name(id='charset_normalizer_info', ctx=Load()), Name(id='cryptography_info', ctx=Load()), Name(id='idna_info', ctx=Load()), Dict(keys=[Constant(value='version')], values=[Name(id='requests_version', ctx=Load())])]))], decorator_list=[]), FunctionDef(name='main', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Pretty-print the bug information as JSON.')), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dumps', ctx=Load()), args=[Call(func=Name(id='info', ctx=Load()), args=[], keywords=[])], keywords=[keyword(arg='sort_keys', value=Constant(value=True)), keyword(arg='indent', value=Constant(value=2))])], keywords=[]))], decorator_list=[]), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__')]), body=[Expr(value=Call(func=Name(id='main', ctx=Load()), args=[], keywords=[]))], orelse=[])], type_ignores=[])