Module(body=[Expr(value=Constant(value='\n    pygments.formatters.other\n    ~~~~~~~~~~~~~~~~~~~~~~~~~\n\n    Other formatters: NullFormatter, RawTokenFormatter.\n\n    :copyright: Copyright 2006-2023 by the Pygments team, see AUTHORS.\n    :license: BSD, see LICENSE for details.\n')), ImportFrom(module='pip._vendor.pygments.formatter', names=[alias(name='Formatter')], level=0), ImportFrom(module='pip._vendor.pygments.util', names=[alias(name='get_choice_opt')], level=0), ImportFrom(module='pip._vendor.pygments.token', names=[alias(name='Token')], level=0), ImportFrom(module='pip._vendor.pygments.console', names=[alias(name='colorize')], level=0), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='NullFormatter'), Constant(value='RawTokenFormatter'), Constant(value='TestcaseFormatter')], ctx=Load())), ClassDef(name='NullFormatter', bases=[Name(id='Formatter', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Output the text unchanged without any formatting.\n    ')), Assign(targets=[Name(id='name', ctx=Store())], value=Constant(value='Text only')), Assign(targets=[Name(id='aliases', ctx=Store())], value=List(elts=[Constant(value='text'), Constant(value='null')], ctx=Load())), Assign(targets=[Name(id='filenames', ctx=Store())], value=List(elts=[Constant(value='*.txt')], ctx=Load())), FunctionDef(name='format', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='tokensource'), arg(arg='outfile')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='enc', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='encoding', ctx=Load())), For(target=Tuple(elts=[Name(id='ttype', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Name(id='tokensource', ctx=Load()), body=[If(test=Name(id='enc', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='outfile', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='encode', ctx=Load()), args=[Name(id='enc', ctx=Load())], keywords=[])], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='outfile', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))])], orelse=[])], decorator_list=[])], decorator_list=[]), ClassDef(name='RawTokenFormatter', bases=[Name(id='Formatter', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="\n    Format tokens as a raw representation for storing token streams.\n\n    The format is ``tokentype<TAB>repr(tokenstring)\\n``. The output can later\n    be converted to a token stream with the `RawTokenLexer`, described in the\n    :doc:`lexer list <lexers>`.\n\n    Only two options are accepted:\n\n    `compress`\n        If set to ``'gz'`` or ``'bz2'``, compress the output with the given\n        compression algorithm after encoding (default: ``''``).\n    `error_color`\n        If set to a color name, highlight error tokens using that color.  If\n        set but with no value, defaults to ``'red'``.\n\n        .. versionadded:: 0.11\n\n    ")), Assign(targets=[Name(id='name', ctx=Store())], value=Constant(value='Raw tokens')), Assign(targets=[Name(id='aliases', ctx=Store())], value=List(elts=[Constant(value='raw'), Constant(value='tokens')], ctx=Load())), Assign(targets=[Name(id='filenames', ctx=Store())], value=List(elts=[Constant(value='*.raw')], ctx=Load())), Assign(targets=[Name(id='unicodeoutput', ctx=Store())], value=Constant(value=False)), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='options'), defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='Formatter', ctx=Load()), attr='__init__', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[keyword(value=Name(id='options', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='encoding', ctx=Store())], value=Constant(value='ascii')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='compress', ctx=Store())], value=Call(func=Name(id='get_choice_opt', ctx=Load()), args=[Name(id='options', ctx=Load()), Constant(value='compress'), List(elts=[Constant(value=''), Constant(value='none'), Constant(value='gz'), Constant(value='bz2')], ctx=Load()), Constant(value='')], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='error_color', ctx=Store())], value=Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='error_color'), Constant(value=None)], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='error_color', ctx=Load()), ops=[Is()], comparators=[Constant(value=True)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='error_color', ctx=Store())], value=Constant(value='red'))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='error_color', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Try(body=[Expr(value=Call(func=Name(id='colorize', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='error_color', ctx=Load()), Constant(value='')], keywords=[]))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='Invalid color %r specified'), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='error_color', ctx=Load()))], keywords=[]))])], orelse=[], finalbody=[])], orelse=[])], decorator_list=[]), FunctionDef(name='format', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='tokensource'), arg(arg='outfile')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='outfile', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value=b'')], keywords=[]))], handlers=[ExceptHandler(type=Name(id='TypeError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[Constant(value='The raw tokens formatter needs a binary output file')], keywords=[]))])], orelse=[], finalbody=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='compress', ctx=Load()), ops=[Eq()], comparators=[Constant(value='gz')]), body=[Import(names=[alias(name='gzip')]), Assign(targets=[Name(id='outfile', ctx=Store())], value=Call(func=Attribute(value=Name(id='gzip', ctx=Load()), attr='GzipFile', ctx=Load()), args=[Constant(value=''), Constant(value='wb'), Constant(value=9), Name(id='outfile', ctx=Load())], keywords=[])), Assign(targets=[Name(id='write', ctx=Store())], value=Attribute(value=Name(id='outfile', ctx=Load()), attr='write', ctx=Load())), Assign(targets=[Name(id='flush', ctx=Store())], value=Attribute(value=Name(id='outfile', ctx=Load()), attr='close', ctx=Load()))], orelse=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='compress', ctx=Load()), ops=[Eq()], comparators=[Constant(value='bz2')]), body=[Import(names=[alias(name='bz2')]), Assign(targets=[Name(id='compressor', ctx=Store())], value=Call(func=Attribute(value=Name(id='bz2', ctx=Load()), attr='BZ2Compressor', ctx=Load()), args=[Constant(value=9)], keywords=[])), FunctionDef(name='write', args=arguments(posonlyargs=[], args=[arg(arg='text')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='outfile', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Attribute(value=Name(id='compressor', ctx=Load()), attr='compress', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='flush', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='outfile', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Attribute(value=Name(id='compressor', ctx=Load()), attr='flush', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='outfile', ctx=Load()), attr='flush', ctx=Load()), args=[], keywords=[]))], decorator_list=[])], orelse=[Assign(targets=[Name(id='write', ctx=Store())], value=Attribute(value=Name(id='outfile', ctx=Load()), attr='write', ctx=Load())), Assign(targets=[Name(id='flush', ctx=Store())], value=Attribute(value=Name(id='outfile', ctx=Load()), attr='flush', ctx=Load()))])]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='error_color', ctx=Load()), body=[For(target=Tuple(elts=[Name(id='ttype', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Name(id='tokensource', ctx=Load()), body=[Assign(targets=[Name(id='line', ctx=Store())], value=BinOp(left=Constant(value=b'%r\t%r\n'), op=Mod(), right=Tuple(elts=[Name(id='ttype', ctx=Load()), Name(id='value', ctx=Load())], ctx=Load()))), If(test=Compare(left=Name(id='ttype', ctx=Load()), ops=[Is()], comparators=[Attribute(value=Name(id='Token', ctx=Load()), attr='Error', ctx=Load())]), body=[Expr(value=Call(func=Name(id='write', ctx=Load()), args=[Call(func=Name(id='colorize', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='error_color', ctx=Load()), Name(id='line', ctx=Load())], keywords=[])], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='write', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[]))])], orelse=[])], orelse=[For(target=Tuple(elts=[Name(id='ttype', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Name(id='tokensource', ctx=Load()), body=[Expr(value=Call(func=Name(id='write', ctx=Load()), args=[BinOp(left=Constant(value=b'%r\t%r\n'), op=Mod(), right=Tuple(elts=[Name(id='ttype', ctx=Load()), Name(id='value', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[])]), Expr(value=Call(func=Name(id='flush', ctx=Load()), args=[], keywords=[]))], decorator_list=[])], decorator_list=[]), Assign(targets=[Name(id='TESTCASE_BEFORE', ctx=Store())], value=Constant(value='    def testNeedsName(lexer):\n        fragment = %r\n        tokens = [\n')), Assign(targets=[Name(id='TESTCASE_AFTER', ctx=Store())], value=Constant(value='        ]\n        assert list(lexer.get_tokens(fragment)) == tokens\n')), ClassDef(name='TestcaseFormatter', bases=[Name(id='Formatter', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Format tokens as appropriate for a new testcase.\n\n    .. versionadded:: 2.0\n    ')), Assign(targets=[Name(id='name', ctx=Store())], value=Constant(value='Testcase')), Assign(targets=[Name(id='aliases', ctx=Store())], value=List(elts=[Constant(value='testcase')], ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='options'), defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='Formatter', ctx=Load()), attr='__init__', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[keyword(value=Name(id='options', ctx=Load()))])), If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='encoding', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='encoding', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='utf-8')])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Only None and utf-8 are allowed encodings.')], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='format', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='tokensource'), arg(arg='outfile')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='indentation', ctx=Store())], value=BinOp(left=Constant(value=' '), op=Mult(), right=Constant(value=12))), Assign(targets=[Name(id='rawbuf', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='outbuf', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='ttype', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Name(id='tokensource', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='rawbuf', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='outbuf', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Constant(value='%s(%s, %r),\n'), op=Mod(), right=Tuple(elts=[Name(id='indentation', ctx=Load()), Name(id='ttype', ctx=Load()), Name(id='value', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Name(id='before', ctx=Store())], value=BinOp(left=Name(id='TESTCASE_BEFORE', ctx=Load()), op=Mod(), right=Tuple(elts=[Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Name(id='rawbuf', ctx=Load())], keywords=[])], ctx=Load()))), Assign(targets=[Name(id='during', ctx=Store())], value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Name(id='outbuf', ctx=Load())], keywords=[])), Assign(targets=[Name(id='after', ctx=Store())], value=Name(id='TESTCASE_AFTER', ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='encoding', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='outfile', ctx=Load()), attr='write', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='before', ctx=Load()), op=Add(), right=Name(id='during', ctx=Load())), op=Add(), right=Name(id='after', ctx=Load()))], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='outfile', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Attribute(value=Name(id='before', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='outfile', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Attribute(value=Name(id='during', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='outfile', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Attribute(value=Name(id='after', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[])], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='outfile', ctx=Load()), attr='flush', ctx=Load()), args=[], keywords=[]))], decorator_list=[])], decorator_list=[])], type_ignores=[])