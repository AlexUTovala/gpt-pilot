Module(body=[ImportFrom(module='typing', names=[alias(name='Iterator'), alias(name='List'), alias(name='Optional'), alias(name='Tuple')], level=0), ImportFrom(module='_loop', names=[alias(name='loop_first'), alias(name='loop_last')], level=1), ImportFrom(module='console', names=[alias(name='Console'), alias(name='ConsoleOptions'), alias(name='RenderableType'), alias(name='RenderResult')], level=1), ImportFrom(module='jupyter', names=[alias(name='JupyterMixin')], level=1), ImportFrom(module='measure', names=[alias(name='Measurement')], level=1), ImportFrom(module='segment', names=[alias(name='Segment')], level=1), ImportFrom(module='style', names=[alias(name='Style'), alias(name='StyleStack'), alias(name='StyleType')], level=1), ImportFrom(module='styled', names=[alias(name='Styled')], level=1), ClassDef(name='Tree', bases=[Name(id='JupyterMixin', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A renderable for a tree structure.\n\n    Args:\n        label (RenderableType): The renderable or str for the tree label.\n        style (StyleType, optional): Style of this tree. Defaults to "tree".\n        guide_style (StyleType, optional): Style of the guide lines. Defaults to "tree.line".\n        expanded (bool, optional): Also display children. Defaults to True.\n        highlight (bool, optional): Highlight renderable (if str). Defaults to False.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='label', annotation=Name(id='RenderableType', ctx=Load()))], kwonlyargs=[arg(arg='style', annotation=Name(id='StyleType', ctx=Load())), arg(arg='guide_style', annotation=Name(id='StyleType', ctx=Load())), arg(arg='expanded', annotation=Name(id='bool', ctx=Load())), arg(arg='highlight', annotation=Name(id='bool', ctx=Load())), arg(arg='hide_root', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value='tree'), Constant(value='tree.line'), Constant(value=True), Constant(value=False), Constant(value=False)], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='label', ctx=Store())], value=Name(id='label', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Store())], value=Name(id='style', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='guide_style', ctx=Store())], value=Name(id='guide_style', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='children', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Tree', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='expanded', ctx=Store())], value=Name(id='expanded', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='highlight', ctx=Store())], value=Name(id='highlight', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='hide_root', ctx=Store())], value=Name(id='hide_root', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='add', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='label', annotation=Name(id='RenderableType', ctx=Load()))], kwonlyargs=[arg(arg='style', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='StyleType', ctx=Load()), ctx=Load())), arg(arg='guide_style', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='StyleType', ctx=Load()), ctx=Load())), arg(arg='expanded', annotation=Name(id='bool', ctx=Load())), arg(arg='highlight', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load()))], kw_defaults=[Constant(value=None), Constant(value=None), Constant(value=True), Constant(value=False)], defaults=[]), body=[Expr(value=Constant(value='Add a child tree.\n\n        Args:\n            label (RenderableType): The renderable or str for the tree label.\n            style (StyleType, optional): Style of this tree. Defaults to "tree".\n            guide_style (StyleType, optional): Style of the guide lines. Defaults to "tree.line".\n            expanded (bool, optional): Also display children. Defaults to True.\n            highlight (Optional[bool], optional): Highlight renderable (if str). Defaults to False.\n\n        Returns:\n            Tree: A new child Tree, which may be further modified.\n        ')), Assign(targets=[Name(id='node', ctx=Store())], value=Call(func=Name(id='Tree', ctx=Load()), args=[Name(id='label', ctx=Load())], keywords=[keyword(arg='style', value=IfExp(test=Compare(left=Name(id='style', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load()), orelse=Name(id='style', ctx=Load()))), keyword(arg='guide_style', value=IfExp(test=Compare(left=Name(id='guide_style', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Attribute(value=Name(id='self', ctx=Load()), attr='guide_style', ctx=Load()), orelse=Name(id='guide_style', ctx=Load()))), keyword(arg='expanded', value=Name(id='expanded', ctx=Load())), keyword(arg='highlight', value=IfExp(test=Compare(left=Name(id='highlight', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Attribute(value=Name(id='self', ctx=Load()), attr='highlight', ctx=Load()), orelse=Name(id='highlight', ctx=Load())))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='children', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='node', ctx=Load())], keywords=[])), Return(value=Name(id='node', ctx=Load()))], decorator_list=[], returns=Constant(value='Tree')), FunctionDef(name='__rich_console__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='console', annotation=Constant(value='Console')), arg(arg='options', annotation=Constant(value='ConsoleOptions'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Name(id='stack', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='bool', ctx=Load()), Name(id='Tree', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), Assign(targets=[Name(id='pop', ctx=Store())], value=Attribute(value=Name(id='stack', ctx=Load()), attr='pop', ctx=Load())), Assign(targets=[Name(id='push', ctx=Store())], value=Attribute(value=Name(id='stack', ctx=Load()), attr='append', ctx=Load())), Assign(targets=[Name(id='new_line', ctx=Store())], value=Call(func=Attribute(value=Name(id='Segment', ctx=Load()), attr='line', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='get_style', ctx=Store())], value=Attribute(value=Name(id='console', ctx=Load()), attr='get_style', ctx=Load())), Assign(targets=[Name(id='null_style', ctx=Store())], value=Call(func=Attribute(value=Name(id='Style', ctx=Load()), attr='null', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='guide_style', ctx=Store())], value=BoolOp(op=Or(), values=[Call(func=Name(id='get_style', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='guide_style', ctx=Load())], keywords=[keyword(arg='default', value=Constant(value=''))]), Name(id='null_style', ctx=Load())])), Assign(targets=[Tuple(elts=[Name(id='SPACE', ctx=Store()), Name(id='CONTINUE', ctx=Store()), Name(id='FORK', ctx=Store()), Name(id='END', ctx=Store())], ctx=Store())], value=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=4)], keywords=[])), Assign(targets=[Name(id='ASCII_GUIDES', ctx=Store())], value=Tuple(elts=[Constant(value='    '), Constant(value='|   '), Constant(value='+-- '), Constant(value='`-- ')], ctx=Load())), Assign(targets=[Name(id='TREE_GUIDES', ctx=Store())], value=List(elts=[Tuple(elts=[Constant(value='    '), Constant(value='│   '), Constant(value='├── '), Constant(value='└── ')], ctx=Load()), Tuple(elts=[Constant(value='    '), Constant(value='┃   '), Constant(value='┣━━ '), Constant(value='┗━━ ')], ctx=Load()), Tuple(elts=[Constant(value='    '), Constant(value='║   '), Constant(value='╠══ '), Constant(value='╚══ ')], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='_Segment', ctx=Store())], value=Name(id='Segment', ctx=Load())), FunctionDef(name='make_guide', args=arguments(posonlyargs=[], args=[arg(arg='index', annotation=Name(id='int', ctx=Load())), arg(arg='style', annotation=Name(id='Style', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Make a Segment for a level of the guide lines.')), If(test=Attribute(value=Name(id='options', ctx=Load()), attr='ascii_only', ctx=Load()), body=[Assign(targets=[Name(id='line', ctx=Store())], value=Subscript(value=Name(id='ASCII_GUIDES', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()))], orelse=[Assign(targets=[Name(id='guide', ctx=Store())], value=IfExp(test=Attribute(value=Name(id='style', ctx=Load()), attr='bold', ctx=Load()), body=Constant(value=1), orelse=IfExp(test=Attribute(value=Name(id='style', ctx=Load()), attr='underline2', ctx=Load()), body=Constant(value=2), orelse=Constant(value=0)))), Assign(targets=[Name(id='line', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='TREE_GUIDES', ctx=Load()), slice=IfExp(test=Attribute(value=Name(id='options', ctx=Load()), attr='legacy_windows', ctx=Load()), body=Constant(value=0), orelse=Name(id='guide', ctx=Load())), ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()))]), Return(value=Call(func=Name(id='_Segment', ctx=Load()), args=[Name(id='line', ctx=Load()), Name(id='style', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='Segment', ctx=Load())), AnnAssign(target=Name(id='levels', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Segment', ctx=Load()), ctx=Load()), value=List(elts=[Call(func=Name(id='make_guide', ctx=Load()), args=[Name(id='CONTINUE', ctx=Load()), Name(id='guide_style', ctx=Load())], keywords=[])], ctx=Load()), simple=1), Expr(value=Call(func=Name(id='push', ctx=Load()), args=[Call(func=Name(id='iter', ctx=Load()), args=[Call(func=Name(id='loop_last', ctx=Load()), args=[List(elts=[Name(id='self', ctx=Load())], ctx=Load())], keywords=[])], keywords=[])], keywords=[])), Assign(targets=[Name(id='guide_style_stack', ctx=Store())], value=Call(func=Name(id='StyleStack', ctx=Load()), args=[Call(func=Name(id='get_style', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='guide_style', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='style_stack', ctx=Store())], value=Call(func=Name(id='StyleStack', ctx=Load()), args=[Call(func=Name(id='get_style', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='remove_guide_styles', ctx=Store())], value=Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='bold', value=Constant(value=False)), keyword(arg='underline2', value=Constant(value=False))])), Assign(targets=[Name(id='depth', ctx=Store())], value=Constant(value=0)), While(test=Name(id='stack', ctx=Load()), body=[Assign(targets=[Name(id='stack_node', ctx=Store())], value=Call(func=Name(id='pop', ctx=Load()), args=[], keywords=[])), Try(body=[Assign(targets=[Tuple(elts=[Name(id='last', ctx=Store()), Name(id='node', ctx=Store())], ctx=Store())], value=Call(func=Name(id='next', ctx=Load()), args=[Name(id='stack_node', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='StopIteration', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='levels', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), If(test=Name(id='levels', ctx=Load()), body=[Assign(targets=[Name(id='guide_style', ctx=Store())], value=BoolOp(op=Or(), values=[Attribute(value=Subscript(value=Name(id='levels', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), attr='style', ctx=Load()), Name(id='null_style', ctx=Load())])), Assign(targets=[Subscript(value=Name(id='levels', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Store())], value=Call(func=Name(id='make_guide', ctx=Load()), args=[Name(id='FORK', ctx=Load()), Name(id='guide_style', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='guide_style_stack', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='style_stack', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[]))], orelse=[]), Continue()])], orelse=[], finalbody=[]), Expr(value=Call(func=Name(id='push', ctx=Load()), args=[Name(id='stack_node', ctx=Load())], keywords=[])), If(test=Name(id='last', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='levels', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Store())], value=Call(func=Name(id='make_guide', ctx=Load()), args=[Name(id='END', ctx=Load()), BoolOp(op=Or(), values=[Attribute(value=Subscript(value=Name(id='levels', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), attr='style', ctx=Load()), Name(id='null_style', ctx=Load())])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='guide_style', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='guide_style_stack', ctx=Load()), attr='current', ctx=Load()), op=Add(), right=Call(func=Name(id='get_style', ctx=Load()), args=[Attribute(value=Name(id='node', ctx=Load()), attr='guide_style', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='style', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='style_stack', ctx=Load()), attr='current', ctx=Load()), op=Add(), right=Call(func=Name(id='get_style', ctx=Load()), args=[Attribute(value=Name(id='node', ctx=Load()), attr='style', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='prefix', ctx=Store())], value=Subscript(value=Name(id='levels', ctx=Load()), slice=Slice(lower=IfExp(test=Attribute(value=Name(id='self', ctx=Load()), attr='hide_root', ctx=Load()), body=Constant(value=2), orelse=Constant(value=1))), ctx=Load())), Assign(targets=[Name(id='renderable_lines', ctx=Store())], value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='render_lines', ctx=Load()), args=[Call(func=Name(id='Styled', ctx=Load()), args=[Attribute(value=Name(id='node', ctx=Load()), attr='label', ctx=Load()), Name(id='style', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='update', ctx=Load()), args=[], keywords=[keyword(arg='width', value=BinOp(left=Attribute(value=Name(id='options', ctx=Load()), attr='max_width', ctx=Load()), op=Sub(), right=Call(func=Name(id='sum', ctx=Load()), args=[GeneratorExp(elt=Attribute(value=Name(id='level', ctx=Load()), attr='cell_length', ctx=Load()), generators=[comprehension(target=Name(id='level', ctx=Store()), iter=Name(id='prefix', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))), keyword(arg='highlight', value=Attribute(value=Name(id='self', ctx=Load()), attr='highlight', ctx=Load())), keyword(arg='height', value=Constant(value=None))])], keywords=[keyword(arg='pad', value=Compare(left=Attribute(value=Name(id='options', ctx=Load()), attr='justify', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]))])), If(test=UnaryOp(op=Not(), operand=BoolOp(op=And(), values=[Compare(left=Name(id='depth', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Attribute(value=Name(id='self', ctx=Load()), attr='hide_root', ctx=Load())])), body=[For(target=Tuple(elts=[Name(id='first', ctx=Store()), Name(id='line', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='loop_first', ctx=Load()), args=[Name(id='renderable_lines', ctx=Load())], keywords=[]), body=[If(test=Name(id='prefix', ctx=Load()), body=[Expr(value=YieldFrom(value=Call(func=Attribute(value=Name(id='_Segment', ctx=Load()), attr='apply_style', ctx=Load()), args=[Name(id='prefix', ctx=Load()), Attribute(value=Name(id='style', ctx=Load()), attr='background_style', ctx=Load())], keywords=[keyword(arg='post_style', value=Name(id='remove_guide_styles', ctx=Load()))])))], orelse=[]), Expr(value=YieldFrom(value=Name(id='line', ctx=Load()))), Expr(value=Yield(value=Name(id='new_line', ctx=Load()))), If(test=BoolOp(op=And(), values=[Name(id='first', ctx=Load()), Name(id='prefix', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='prefix', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Store())], value=Call(func=Name(id='make_guide', ctx=Load()), args=[IfExp(test=Name(id='last', ctx=Load()), body=Name(id='SPACE', ctx=Load()), orelse=Name(id='CONTINUE', ctx=Load())), BoolOp(op=Or(), values=[Attribute(value=Subscript(value=Name(id='prefix', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), attr='style', ctx=Load()), Name(id='null_style', ctx=Load())])], keywords=[]))], orelse=[])], orelse=[])], orelse=[]), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='node', ctx=Load()), attr='expanded', ctx=Load()), Attribute(value=Name(id='node', ctx=Load()), attr='children', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='levels', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Store())], value=Call(func=Name(id='make_guide', ctx=Load()), args=[IfExp(test=Name(id='last', ctx=Load()), body=Name(id='SPACE', ctx=Load()), orelse=Name(id='CONTINUE', ctx=Load())), BoolOp(op=Or(), values=[Attribute(value=Subscript(value=Name(id='levels', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), attr='style', ctx=Load()), Name(id='null_style', ctx=Load())])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='levels', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='make_guide', ctx=Load()), args=[IfExp(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='node', ctx=Load()), attr='children', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=Name(id='END', ctx=Load()), orelse=Name(id='FORK', ctx=Load())), Name(id='guide_style', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='style_stack', ctx=Load()), attr='push', ctx=Load()), args=[Call(func=Name(id='get_style', ctx=Load()), args=[Attribute(value=Name(id='node', ctx=Load()), attr='style', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='guide_style_stack', ctx=Load()), attr='push', ctx=Load()), args=[Call(func=Name(id='get_style', ctx=Load()), args=[Attribute(value=Name(id='node', ctx=Load()), attr='guide_style', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Name(id='push', ctx=Load()), args=[Call(func=Name(id='iter', ctx=Load()), args=[Call(func=Name(id='loop_last', ctx=Load()), args=[Attribute(value=Name(id='node', ctx=Load()), attr='children', ctx=Load())], keywords=[])], keywords=[])], keywords=[])), AugAssign(target=Name(id='depth', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], orelse=[])], decorator_list=[], returns=Constant(value='RenderResult')), FunctionDef(name='__rich_measure__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='console', annotation=Constant(value='Console')), arg(arg='options', annotation=Constant(value='ConsoleOptions'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Name(id='stack', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Name(id='Tree', ctx=Load()), ctx=Load()), ctx=Load()), value=List(elts=[Call(func=Name(id='iter', ctx=Load()), args=[List(elts=[Name(id='self', ctx=Load())], ctx=Load())], keywords=[])], ctx=Load()), simple=1), Assign(targets=[Name(id='pop', ctx=Store())], value=Attribute(value=Name(id='stack', ctx=Load()), attr='pop', ctx=Load())), Assign(targets=[Name(id='push', ctx=Store())], value=Attribute(value=Name(id='stack', ctx=Load()), attr='append', ctx=Load())), Assign(targets=[Name(id='minimum', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='maximum', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='measure', ctx=Store())], value=Attribute(value=Name(id='Measurement', ctx=Load()), attr='get', ctx=Load())), Assign(targets=[Name(id='level', ctx=Store())], value=Constant(value=0)), While(test=Name(id='stack', ctx=Load()), body=[Assign(targets=[Name(id='iter_tree', ctx=Store())], value=Call(func=Name(id='pop', ctx=Load()), args=[], keywords=[])), Try(body=[Assign(targets=[Name(id='tree', ctx=Store())], value=Call(func=Name(id='next', ctx=Load()), args=[Name(id='iter_tree', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='StopIteration', ctx=Load()), body=[AugAssign(target=Name(id='level', ctx=Store()), op=Sub(), value=Constant(value=1)), Continue()])], orelse=[], finalbody=[]), Expr(value=Call(func=Name(id='push', ctx=Load()), args=[Name(id='iter_tree', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='min_measure', ctx=Store()), Name(id='max_measure', ctx=Store())], ctx=Store())], value=Call(func=Name(id='measure', ctx=Load()), args=[Name(id='console', ctx=Load()), Name(id='options', ctx=Load()), Attribute(value=Name(id='tree', ctx=Load()), attr='label', ctx=Load())], keywords=[])), Assign(targets=[Name(id='indent', ctx=Store())], value=BinOp(left=Name(id='level', ctx=Load()), op=Mult(), right=Constant(value=4))), Assign(targets=[Name(id='minimum', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[BinOp(left=Name(id='min_measure', ctx=Load()), op=Add(), right=Name(id='indent', ctx=Load())), Name(id='minimum', ctx=Load())], keywords=[])), Assign(targets=[Name(id='maximum', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[BinOp(left=Name(id='max_measure', ctx=Load()), op=Add(), right=Name(id='indent', ctx=Load())), Name(id='maximum', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='tree', ctx=Load()), attr='expanded', ctx=Load()), Attribute(value=Name(id='tree', ctx=Load()), attr='children', ctx=Load())]), body=[Expr(value=Call(func=Name(id='push', ctx=Load()), args=[Call(func=Name(id='iter', ctx=Load()), args=[Attribute(value=Name(id='tree', ctx=Load()), attr='children', ctx=Load())], keywords=[])], keywords=[])), AugAssign(target=Name(id='level', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], orelse=[]), Return(value=Call(func=Name(id='Measurement', ctx=Load()), args=[Name(id='minimum', ctx=Load()), Name(id='maximum', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value='Measurement'))], decorator_list=[]), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__')]), body=[ImportFrom(module='pip._vendor.rich.console', names=[alias(name='Group')], level=0), ImportFrom(module='pip._vendor.rich.markdown', names=[alias(name='Markdown')], level=0), ImportFrom(module='pip._vendor.rich.panel', names=[alias(name='Panel')], level=0), ImportFrom(module='pip._vendor.rich.syntax', names=[alias(name='Syntax')], level=0), ImportFrom(module='pip._vendor.rich.table', names=[alias(name='Table')], level=0), Assign(targets=[Name(id='table', ctx=Store())], value=Call(func=Name(id='Table', ctx=Load()), args=[], keywords=[keyword(arg='row_styles', value=List(elts=[Constant(value=''), Constant(value='dim')], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='table', ctx=Load()), attr='add_column', ctx=Load()), args=[Constant(value='Released')], keywords=[keyword(arg='style', value=Constant(value='cyan')), keyword(arg='no_wrap', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Name(id='table', ctx=Load()), attr='add_column', ctx=Load()), args=[Constant(value='Title')], keywords=[keyword(arg='style', value=Constant(value='magenta'))])), Expr(value=Call(func=Attribute(value=Name(id='table', ctx=Load()), attr='add_column', ctx=Load()), args=[Constant(value='Box Office')], keywords=[keyword(arg='justify', value=Constant(value='right')), keyword(arg='style', value=Constant(value='green'))])), Expr(value=Call(func=Attribute(value=Name(id='table', ctx=Load()), attr='add_row', ctx=Load()), args=[Constant(value='Dec 20, 2019'), Constant(value='Star Wars: The Rise of Skywalker'), Constant(value='$952,110,690')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='table', ctx=Load()), attr='add_row', ctx=Load()), args=[Constant(value='May 25, 2018'), Constant(value='Solo: A Star Wars Story'), Constant(value='$393,151,347')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='table', ctx=Load()), attr='add_row', ctx=Load()), args=[Constant(value='Dec 15, 2017'), Constant(value='Star Wars Ep. V111: The Last Jedi'), Constant(value='$1,332,539,889')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='table', ctx=Load()), attr='add_row', ctx=Load()), args=[Constant(value='Dec 16, 2016'), Constant(value='Rogue One: A Star Wars Story'), Constant(value='$1,332,439,889')], keywords=[])), Assign(targets=[Name(id='code', ctx=Store())], value=Constant(value='class Segment(NamedTuple):\n    text: str = ""\n    style: Optional[Style] = None\n    is_control: bool = False\n')), Assign(targets=[Name(id='syntax', ctx=Store())], value=Call(func=Name(id='Syntax', ctx=Load()), args=[Name(id='code', ctx=Load()), Constant(value='python')], keywords=[keyword(arg='theme', value=Constant(value='monokai')), keyword(arg='line_numbers', value=Constant(value=True))])), Assign(targets=[Name(id='markdown', ctx=Store())], value=Call(func=Name(id='Markdown', ctx=Load()), args=[Constant(value='### example.md\n> Hello, World!\n>\n> Markdown _all_ the things\n')], keywords=[])), Assign(targets=[Name(id='root', ctx=Store())], value=Call(func=Name(id='Tree', ctx=Load()), args=[Constant(value='🌲 [b green]Rich Tree')], keywords=[keyword(arg='highlight', value=Constant(value=True)), keyword(arg='hide_root', value=Constant(value=True))])), Assign(targets=[Name(id='node', ctx=Store())], value=Call(func=Attribute(value=Name(id='root', ctx=Load()), attr='add', ctx=Load()), args=[Constant(value=':file_folder: Renderables')], keywords=[keyword(arg='guide_style', value=Constant(value='red'))])), Assign(targets=[Name(id='simple_node', ctx=Store())], value=Call(func=Attribute(value=Name(id='node', ctx=Load()), attr='add', ctx=Load()), args=[Constant(value=':file_folder: [bold yellow]Atomic')], keywords=[keyword(arg='guide_style', value=Constant(value='uu green'))])), Expr(value=Call(func=Attribute(value=Name(id='simple_node', ctx=Load()), attr='add', ctx=Load()), args=[Call(func=Name(id='Group', ctx=Load()), args=[Constant(value='📄 Syntax'), Name(id='syntax', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='simple_node', ctx=Load()), attr='add', ctx=Load()), args=[Call(func=Name(id='Group', ctx=Load()), args=[Constant(value='📄 Markdown'), Call(func=Name(id='Panel', ctx=Load()), args=[Name(id='markdown', ctx=Load())], keywords=[keyword(arg='border_style', value=Constant(value='green'))])], keywords=[])], keywords=[])), Assign(targets=[Name(id='containers_node', ctx=Store())], value=Call(func=Attribute(value=Name(id='node', ctx=Load()), attr='add', ctx=Load()), args=[Constant(value=':file_folder: [bold magenta]Containers')], keywords=[keyword(arg='guide_style', value=Constant(value='bold magenta'))])), Assign(targets=[Attribute(value=Name(id='containers_node', ctx=Load()), attr='expanded', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='panel', ctx=Store())], value=Call(func=Attribute(value=Name(id='Panel', ctx=Load()), attr='fit', ctx=Load()), args=[Constant(value='Just a panel')], keywords=[keyword(arg='border_style', value=Constant(value='red'))])), Expr(value=Call(func=Attribute(value=Name(id='containers_node', ctx=Load()), attr='add', ctx=Load()), args=[Call(func=Name(id='Group', ctx=Load()), args=[Constant(value='📄 Panels'), Name(id='panel', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='containers_node', ctx=Load()), attr='add', ctx=Load()), args=[Call(func=Name(id='Group', ctx=Load()), args=[Constant(value='📄 [b magenta]Table'), Name(id='table', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='console', ctx=Store())], value=Call(func=Name(id='Console', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='print', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[]))], orelse=[])], type_ignores=[])