Module(body=[Import(names=[alias(name='builtins')]), Import(names=[alias(name='collections')]), Import(names=[alias(name='dataclasses')]), Import(names=[alias(name='inspect')]), Import(names=[alias(name='os')]), Import(names=[alias(name='sys')]), ImportFrom(module='array', names=[alias(name='array')], level=0), ImportFrom(module='collections', names=[alias(name='Counter'), alias(name='UserDict'), alias(name='UserList'), alias(name='defaultdict'), alias(name='deque')], level=0), ImportFrom(module='dataclasses', names=[alias(name='dataclass'), alias(name='fields'), alias(name='is_dataclass')], level=0), ImportFrom(module='inspect', names=[alias(name='isclass')], level=0), ImportFrom(module='itertools', names=[alias(name='islice')], level=0), ImportFrom(module='types', names=[alias(name='MappingProxyType')], level=0), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING'), alias(name='Any'), alias(name='Callable'), alias(name='DefaultDict'), alias(name='Dict'), alias(name='Iterable'), alias(name='List'), alias(name='Optional'), alias(name='Sequence'), alias(name='Set'), alias(name='Tuple'), alias(name='Union')], level=0), ImportFrom(module='pip._vendor.rich.repr', names=[alias(name='RichReprResult')], level=0), Try(body=[Import(names=[alias(name='attr', asname='_attr_module')]), Assign(targets=[Name(id='_has_attrs', ctx=Store())], value=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='_attr_module', ctx=Load()), Constant(value='ib')], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Assign(targets=[Name(id='_has_attrs', ctx=Store())], value=Constant(value=False))])], orelse=[], finalbody=[]), ImportFrom(names=[alias(name='get_console')], level=1), ImportFrom(module='_loop', names=[alias(name='loop_last')], level=1), ImportFrom(module='_pick', names=[alias(name='pick_bool')], level=1), ImportFrom(module='abc', names=[alias(name='RichRenderable')], level=1), ImportFrom(module='cells', names=[alias(name='cell_len')], level=1), ImportFrom(module='highlighter', names=[alias(name='ReprHighlighter')], level=1), ImportFrom(module='jupyter', names=[alias(name='JupyterMixin'), alias(name='JupyterRenderable')], level=1), ImportFrom(module='measure', names=[alias(name='Measurement')], level=1), ImportFrom(module='text', names=[alias(name='Text')], level=1), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='console', names=[alias(name='Console'), alias(name='ConsoleOptions'), alias(name='HighlighterType'), alias(name='JustifyMethod'), alias(name='OverflowMethod'), alias(name='RenderResult')], level=1)], orelse=[]), FunctionDef(name='_is_attr_object', args=arguments(posonlyargs=[], args=[arg(arg='obj', annotation=Name(id='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check if an object was created with attrs module.')), Return(value=BoolOp(op=And(), values=[Name(id='_has_attrs', ctx=Load()), Call(func=Attribute(value=Name(id='_attr_module', ctx=Load()), attr='has', ctx=Load()), args=[Call(func=Name(id='type', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[])], keywords=[])]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='_get_attr_fields', args=arguments(posonlyargs=[], args=[arg(arg='obj', annotation=Name(id='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get fields for an attrs object.')), Return(value=IfExp(test=Name(id='_has_attrs', ctx=Load()), body=Call(func=Attribute(value=Name(id='_attr_module', ctx=Load()), attr='fields', ctx=Load()), args=[Call(func=Name(id='type', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[])], keywords=[]), orelse=List(elts=[], ctx=Load())))], decorator_list=[], returns=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Constant(value='_attr_module.Attribute[Any]'), ctx=Load())), FunctionDef(name='_is_dataclass_repr', args=arguments(posonlyargs=[], args=[arg(arg='obj', annotation=Name(id='object', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check if an instance of a dataclass contains the default repr.\n\n    Args:\n        obj (object): A dataclass instance.\n\n    Returns:\n        bool: True if the default repr is used, False if there is a custom repr.\n    ')), Try(body=[Return(value=Compare(left=Attribute(value=Attribute(value=Attribute(value=Name(id='obj', ctx=Load()), attr='__repr__', ctx=Load()), attr='__code__', ctx=Load()), attr='co_filename', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='dataclasses', ctx=Load()), attr='__file__', ctx=Load())]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Return(value=Constant(value=False))])], orelse=[], finalbody=[])], decorator_list=[], returns=Name(id='bool', ctx=Load())), Assign(targets=[Name(id='_dummy_namedtuple', ctx=Store())], value=Call(func=Attribute(value=Name(id='collections', ctx=Load()), attr='namedtuple', ctx=Load()), args=[Constant(value='_dummy_namedtuple'), List(elts=[], ctx=Load())], keywords=[])), FunctionDef(name='_has_default_namedtuple_repr', args=arguments(posonlyargs=[], args=[arg(arg='obj', annotation=Name(id='object', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Check if an instance of namedtuple contains the default repr\n\n    Args:\n        obj (object): A namedtuple\n\n    Returns:\n        bool: True if the default repr is used, False if there's a custom repr.\n    ")), Assign(targets=[Name(id='obj_file', ctx=Store())], value=Constant(value=None)), Try(body=[Assign(targets=[Name(id='obj_file', ctx=Store())], value=Call(func=Attribute(value=Name(id='inspect', ctx=Load()), attr='getfile', ctx=Load()), args=[Attribute(value=Name(id='obj', ctx=Load()), attr='__repr__', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='OSError', ctx=Load()), Name(id='TypeError', ctx=Load())], ctx=Load()), body=[Pass()])], orelse=[], finalbody=[]), Assign(targets=[Name(id='default_repr_file', ctx=Store())], value=Call(func=Attribute(value=Name(id='inspect', ctx=Load()), attr='getfile', ctx=Load()), args=[Attribute(value=Name(id='_dummy_namedtuple', ctx=Load()), attr='__repr__', ctx=Load())], keywords=[])), Return(value=Compare(left=Name(id='obj_file', ctx=Load()), ops=[Eq()], comparators=[Name(id='default_repr_file', ctx=Load())]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='_ipy_display_hook', args=arguments(posonlyargs=[], args=[arg(arg='value', annotation=Name(id='Any', ctx=Load())), arg(arg='console', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='Console'), ctx=Load())), arg(arg='overflow', annotation=Constant(value='OverflowMethod')), arg(arg='crop', annotation=Name(id='bool', ctx=Load())), arg(arg='indent_guides', annotation=Name(id='bool', ctx=Load())), arg(arg='max_length', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='max_string', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='max_depth', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='expand_all', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value='ignore'), Constant(value=False), Constant(value=False), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=False)]), body=[ImportFrom(module='console', names=[alias(name='ConsoleRenderable')], level=1), If(test=BoolOp(op=Or(), values=[Call(func=Name(id='_safe_isinstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='JupyterRenderable', ctx=Load())], keywords=[]), Compare(left=Name(id='value', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])]), body=[Return(value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='console', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='console', ctx=Load()), Call(func=Name(id='get_console', ctx=Load()), args=[], keywords=[])])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='capture', ctx=Load()), args=[], keywords=[]), optional_vars=Name(id='capture', ctx=Store()))], body=[If(test=Call(func=Name(id='_safe_isinstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='ConsoleRenderable', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='line', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='print', ctx=Load()), args=[IfExp(test=Call(func=Name(id='_safe_isinstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='RichRenderable', ctx=Load())], keywords=[]), body=Name(id='value', ctx=Load()), orelse=Call(func=Name(id='Pretty', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[keyword(arg='overflow', value=Name(id='overflow', ctx=Load())), keyword(arg='indent_guides', value=Name(id='indent_guides', ctx=Load())), keyword(arg='max_length', value=Name(id='max_length', ctx=Load())), keyword(arg='max_string', value=Name(id='max_string', ctx=Load())), keyword(arg='max_depth', value=Name(id='max_depth', ctx=Load())), keyword(arg='expand_all', value=Name(id='expand_all', ctx=Load())), keyword(arg='margin', value=Constant(value=12))]))], keywords=[keyword(arg='crop', value=Name(id='crop', ctx=Load())), keyword(arg='new_line_start', value=Constant(value=True)), keyword(arg='end', value=Constant(value=''))]))]), Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='capture', ctx=Load()), attr='get', ctx=Load()), args=[], keywords=[]), attr='rstrip', ctx=Load()), args=[Constant(value='\n')], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='_safe_isinstance', args=arguments(posonlyargs=[], args=[arg(arg='obj', annotation=Name(id='object', ctx=Load())), arg(arg='class_or_tuple', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='type', ctx=Load()), Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='type', ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='isinstance can fail in rare cases, for example types with no __class__')), Try(body=[Return(value=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='obj', ctx=Load()), Name(id='class_or_tuple', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Return(value=Constant(value=False))])], orelse=[], finalbody=[])], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='install', args=arguments(posonlyargs=[], args=[arg(arg='console', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='Console'), ctx=Load())), arg(arg='overflow', annotation=Constant(value='OverflowMethod')), arg(arg='crop', annotation=Name(id='bool', ctx=Load())), arg(arg='indent_guides', annotation=Name(id='bool', ctx=Load())), arg(arg='max_length', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='max_string', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='max_depth', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='expand_all', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value='ignore'), Constant(value=False), Constant(value=False), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=False)]), body=[Expr(value=Constant(value='Install automatic pretty printing in the Python REPL.\n\n    Args:\n        console (Console, optional): Console instance or ``None`` to use global console. Defaults to None.\n        overflow (Optional[OverflowMethod], optional): Overflow method. Defaults to "ignore".\n        crop (Optional[bool], optional): Enable cropping of long lines. Defaults to False.\n        indent_guides (bool, optional): Enable indentation guides. Defaults to False.\n        max_length (int, optional): Maximum length of containers before abbreviating, or None for no abbreviation.\n            Defaults to None.\n        max_string (int, optional): Maximum length of string before truncating, or None to disable. Defaults to None.\n        max_depth (int, optional): Maximum depth of nested data structures, or None for no maximum. Defaults to None.\n        expand_all (bool, optional): Expand all containers. Defaults to False.\n        max_frames (int): Maximum number of frames to show in a traceback, 0 for no maximum. Defaults to 100.\n    ')), ImportFrom(module='pip._vendor.rich', names=[alias(name='get_console')], level=0), Assign(targets=[Name(id='console', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='console', ctx=Load()), Call(func=Name(id='get_console', ctx=Load()), args=[], keywords=[])])), Assert(test=Compare(left=Name(id='console', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), FunctionDef(name='display_hook', args=arguments(posonlyargs=[], args=[arg(arg='value', annotation=Name(id='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Replacement sys.displayhook which prettifies objects with Rich.')), If(test=Compare(left=Name(id='value', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assert(test=Compare(left=Name(id='console', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Attribute(value=Name(id='builtins', ctx=Load()), attr='_', ctx=Store())], value=Constant(value=None)), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='print', ctx=Load()), args=[IfExp(test=Call(func=Name(id='_safe_isinstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='RichRenderable', ctx=Load())], keywords=[]), body=Name(id='value', ctx=Load()), orelse=Call(func=Name(id='Pretty', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[keyword(arg='overflow', value=Name(id='overflow', ctx=Load())), keyword(arg='indent_guides', value=Name(id='indent_guides', ctx=Load())), keyword(arg='max_length', value=Name(id='max_length', ctx=Load())), keyword(arg='max_string', value=Name(id='max_string', ctx=Load())), keyword(arg='max_depth', value=Name(id='max_depth', ctx=Load())), keyword(arg='expand_all', value=Name(id='expand_all', ctx=Load()))]))], keywords=[keyword(arg='crop', value=Name(id='crop', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='builtins', ctx=Load()), attr='_', ctx=Store())], value=Name(id='value', ctx=Load()))], orelse=[])], decorator_list=[], returns=Constant(value=None)), If(test=Compare(left=Constant(value='get_ipython'), ops=[In()], comparators=[Call(func=Name(id='globals', ctx=Load()), args=[], keywords=[])]), body=[Assign(targets=[Name(id='ip', ctx=Store())], value=Call(func=Name(id='get_ipython', ctx=Load()), args=[], keywords=[])), ImportFrom(module='IPython.core.formatters', names=[alias(name='BaseFormatter')], level=0), ClassDef(name='RichFormatter', bases=[Name(id='BaseFormatter', ctx=Load())], keywords=[], body=[AnnAssign(target=Name(id='pprint', ctx=Store()), annotation=Name(id='bool', ctx=Load()), value=Constant(value=True), simple=1), FunctionDef(name='__call__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value', annotation=Name(id='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='pprint', ctx=Load()), body=[Return(value=Call(func=Name(id='_ipy_display_hook', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[keyword(arg='console', value=Call(func=Name(id='get_console', ctx=Load()), args=[], keywords=[])), keyword(arg='overflow', value=Name(id='overflow', ctx=Load())), keyword(arg='indent_guides', value=Name(id='indent_guides', ctx=Load())), keyword(arg='max_length', value=Name(id='max_length', ctx=Load())), keyword(arg='max_string', value=Name(id='max_string', ctx=Load())), keyword(arg='max_depth', value=Name(id='max_depth', ctx=Load())), keyword(arg='expand_all', value=Name(id='expand_all', ctx=Load()))]))], orelse=[Return(value=Call(func=Name(id='repr', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Name(id='Any', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='rich_formatter', ctx=Store())], value=Call(func=Name(id='RichFormatter', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Attribute(value=Name(id='ip', ctx=Load()), attr='display_formatter', ctx=Load()), attr='formatters', ctx=Load()), slice=Constant(value='text/plain'), ctx=Store())], value=Name(id='rich_formatter', ctx=Load()))], orelse=[Assign(targets=[Attribute(value=Name(id='sys', ctx=Load()), attr='displayhook', ctx=Store())], value=Name(id='display_hook', ctx=Load()))])], decorator_list=[], returns=Constant(value=None)), ClassDef(name='Pretty', bases=[Name(id='JupyterMixin', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A rich renderable that pretty prints an object.\n\n    Args:\n        _object (Any): An object to pretty print.\n        highlighter (HighlighterType, optional): Highlighter object to apply to result, or None for ReprHighlighter. Defaults to None.\n        indent_size (int, optional): Number of spaces in indent. Defaults to 4.\n        justify (JustifyMethod, optional): Justify method, or None for default. Defaults to None.\n        overflow (OverflowMethod, optional): Overflow method, or None for default. Defaults to None.\n        no_wrap (Optional[bool], optional): Disable word wrapping. Defaults to False.\n        indent_guides (bool, optional): Enable indentation guides. Defaults to False.\n        max_length (int, optional): Maximum length of containers before abbreviating, or None for no abbreviation.\n            Defaults to None.\n        max_string (int, optional): Maximum length of string before truncating, or None to disable. Defaults to None.\n        max_depth (int, optional): Maximum depth of nested data structures, or None for no maximum. Defaults to None.\n        expand_all (bool, optional): Expand all containers. Defaults to False.\n        margin (int, optional): Subtrace a margin from width to force containers to expand earlier. Defaults to 0.\n        insert_line (bool, optional): Insert a new line if the output has multiple new lines. Defaults to False.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='_object', annotation=Name(id='Any', ctx=Load())), arg(arg='highlighter', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='HighlighterType'), ctx=Load()))], kwonlyargs=[arg(arg='indent_size', annotation=Name(id='int', ctx=Load())), arg(arg='justify', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='JustifyMethod'), ctx=Load())), arg(arg='overflow', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='OverflowMethod'), ctx=Load())), arg(arg='no_wrap', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load())), arg(arg='indent_guides', annotation=Name(id='bool', ctx=Load())), arg(arg='max_length', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='max_string', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='max_depth', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='expand_all', annotation=Name(id='bool', ctx=Load())), arg(arg='margin', annotation=Name(id='int', ctx=Load())), arg(arg='insert_line', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=4), Constant(value=None), Constant(value=None), Constant(value=False), Constant(value=False), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=False), Constant(value=0), Constant(value=False)], defaults=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_object', ctx=Store())], value=Name(id='_object', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='highlighter', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='highlighter', ctx=Load()), Call(func=Name(id='ReprHighlighter', ctx=Load()), args=[], keywords=[])])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='indent_size', ctx=Store())], value=Name(id='indent_size', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='justify', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='JustifyMethod'), ctx=Load()), value=Name(id='justify', ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='overflow', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='OverflowMethod'), ctx=Load()), value=Name(id='overflow', ctx=Load()), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='no_wrap', ctx=Store())], value=Name(id='no_wrap', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='indent_guides', ctx=Store())], value=Name(id='indent_guides', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='max_length', ctx=Store())], value=Name(id='max_length', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='max_string', ctx=Store())], value=Name(id='max_string', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='max_depth', ctx=Store())], value=Name(id='max_depth', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='expand_all', ctx=Store())], value=Name(id='expand_all', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='margin', ctx=Store())], value=Name(id='margin', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='insert_line', ctx=Store())], value=Name(id='insert_line', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__rich_console__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='console', annotation=Constant(value='Console')), arg(arg='options', annotation=Constant(value='ConsoleOptions'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='pretty_str', ctx=Store())], value=Call(func=Name(id='pretty_repr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_object', ctx=Load())], keywords=[keyword(arg='max_width', value=BinOp(left=Attribute(value=Name(id='options', ctx=Load()), attr='max_width', ctx=Load()), op=Sub(), right=Attribute(value=Name(id='self', ctx=Load()), attr='margin', ctx=Load()))), keyword(arg='indent_size', value=Attribute(value=Name(id='self', ctx=Load()), attr='indent_size', ctx=Load())), keyword(arg='max_length', value=Attribute(value=Name(id='self', ctx=Load()), attr='max_length', ctx=Load())), keyword(arg='max_string', value=Attribute(value=Name(id='self', ctx=Load()), attr='max_string', ctx=Load())), keyword(arg='max_depth', value=Attribute(value=Name(id='self', ctx=Load()), attr='max_depth', ctx=Load())), keyword(arg='expand_all', value=Attribute(value=Name(id='self', ctx=Load()), attr='expand_all', ctx=Load()))])), Assign(targets=[Name(id='pretty_text', ctx=Store())], value=Call(func=Attribute(value=Name(id='Text', ctx=Load()), attr='from_ansi', ctx=Load()), args=[Name(id='pretty_str', ctx=Load())], keywords=[keyword(arg='justify', value=BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='justify', ctx=Load()), Attribute(value=Name(id='options', ctx=Load()), attr='justify', ctx=Load())])), keyword(arg='overflow', value=BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='overflow', ctx=Load()), Attribute(value=Name(id='options', ctx=Load()), attr='overflow', ctx=Load())])), keyword(arg='no_wrap', value=Call(func=Name(id='pick_bool', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='no_wrap', ctx=Load()), Attribute(value=Name(id='options', ctx=Load()), attr='no_wrap', ctx=Load())], keywords=[])), keyword(arg='style', value=Constant(value='pretty'))])), Assign(targets=[Name(id='pretty_text', ctx=Store())], value=IfExp(test=Name(id='pretty_text', ctx=Load()), body=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='highlighter', ctx=Load()), args=[Name(id='pretty_text', ctx=Load())], keywords=[]), orelse=Call(func=Name(id='Text', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Call(func=Name(id='type', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_object', ctx=Load())], keywords=[]), conversion=-1), Constant(value='.__repr__ returned empty string')])], keywords=[keyword(arg='style', value=Constant(value='dim italic'))]))), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='indent_guides', ctx=Load()), UnaryOp(op=Not(), operand=Attribute(value=Name(id='options', ctx=Load()), attr='ascii_only', ctx=Load()))]), body=[Assign(targets=[Name(id='pretty_text', ctx=Store())], value=Call(func=Attribute(value=Name(id='pretty_text', ctx=Load()), attr='with_indent_guides', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='indent_size', ctx=Load())], keywords=[keyword(arg='style', value=Constant(value='repr.indent'))]))], orelse=[]), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='insert_line', ctx=Load()), Compare(left=Constant(value='\n'), ops=[In()], comparators=[Name(id='pretty_text', ctx=Load())])]), body=[Expr(value=Yield(value=Constant(value='')))], orelse=[]), Expr(value=Yield(value=Name(id='pretty_text', ctx=Load())))], decorator_list=[], returns=Constant(value='RenderResult')), FunctionDef(name='__rich_measure__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='console', annotation=Constant(value='Console')), arg(arg='options', annotation=Constant(value='ConsoleOptions'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='pretty_str', ctx=Store())], value=Call(func=Name(id='pretty_repr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_object', ctx=Load())], keywords=[keyword(arg='max_width', value=Attribute(value=Name(id='options', ctx=Load()), attr='max_width', ctx=Load())), keyword(arg='indent_size', value=Attribute(value=Name(id='self', ctx=Load()), attr='indent_size', ctx=Load())), keyword(arg='max_length', value=Attribute(value=Name(id='self', ctx=Load()), attr='max_length', ctx=Load())), keyword(arg='max_string', value=Attribute(value=Name(id='self', ctx=Load()), attr='max_string', ctx=Load())), keyword(arg='max_depth', value=Attribute(value=Name(id='self', ctx=Load()), attr='max_depth', ctx=Load())), keyword(arg='expand_all', value=Attribute(value=Name(id='self', ctx=Load()), attr='expand_all', ctx=Load()))])), Assign(targets=[Name(id='text_width', ctx=Store())], value=IfExp(test=Name(id='pretty_str', ctx=Load()), body=Call(func=Name(id='max', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='cell_len', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='line', ctx=Store()), iter=Call(func=Attribute(value=Name(id='pretty_str', ctx=Load()), attr='splitlines', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[]), orelse=Constant(value=0))), Return(value=Call(func=Name(id='Measurement', ctx=Load()), args=[Name(id='text_width', ctx=Load()), Name(id='text_width', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value='Measurement'))], decorator_list=[]), FunctionDef(name='_get_braces_for_defaultdict', args=arguments(posonlyargs=[], args=[arg(arg='_object', annotation=Subscript(value=Name(id='DefaultDict', ctx=Load()), slice=Tuple(elts=[Name(id='Any', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Tuple(elts=[JoinedStr(values=[Constant(value='defaultdict('), FormattedValue(value=Attribute(value=Name(id='_object', ctx=Load()), attr='default_factory', ctx=Load()), conversion=114), Constant(value=', {')]), Constant(value='})'), JoinedStr(values=[Constant(value='defaultdict('), FormattedValue(value=Attribute(value=Name(id='_object', ctx=Load()), attr='default_factory', ctx=Load()), conversion=114), Constant(value=', {})')])], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='_get_braces_for_array', args=arguments(posonlyargs=[], args=[arg(arg='_object', annotation=Constant(value='array[Any]'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Tuple(elts=[JoinedStr(values=[Constant(value='array('), FormattedValue(value=Attribute(value=Name(id='_object', ctx=Load()), attr='typecode', ctx=Load()), conversion=114), Constant(value=', [')]), Constant(value='])'), JoinedStr(values=[Constant(value='array('), FormattedValue(value=Attribute(value=Name(id='_object', ctx=Load()), attr='typecode', ctx=Load()), conversion=114), Constant(value=')')])], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), AnnAssign(target=Name(id='_BRACES', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='type', ctx=Load()), Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='Any', ctx=Load())], ctx=Load()), Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[Attribute(value=Name(id='os', ctx=Load()), attr='_Environ', ctx=Load()), Name(id='array', ctx=Load()), Name(id='defaultdict', ctx=Load()), Name(id='Counter', ctx=Load()), Name(id='deque', ctx=Load()), Name(id='dict', ctx=Load()), Name(id='UserDict', ctx=Load()), Name(id='frozenset', ctx=Load()), Name(id='list', ctx=Load()), Name(id='UserList', ctx=Load()), Name(id='set', ctx=Load()), Name(id='tuple', ctx=Load()), Name(id='MappingProxyType', ctx=Load())], values=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='_object')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Tuple(elts=[Constant(value='environ({'), Constant(value='})'), Constant(value='environ({})')], ctx=Load())), Name(id='_get_braces_for_array', ctx=Load()), Name(id='_get_braces_for_defaultdict', ctx=Load()), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='_object')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Tuple(elts=[Constant(value='Counter({'), Constant(value='})'), Constant(value='Counter()')], ctx=Load())), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='_object')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Tuple(elts=[Constant(value='deque(['), Constant(value='])'), Constant(value='deque()')], ctx=Load())), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='_object')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Tuple(elts=[Constant(value='{'), Constant(value='}'), Constant(value='{}')], ctx=Load())), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='_object')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Tuple(elts=[Constant(value='{'), Constant(value='}'), Constant(value='{}')], ctx=Load())), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='_object')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Tuple(elts=[Constant(value='frozenset({'), Constant(value='})'), Constant(value='frozenset()')], ctx=Load())), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='_object')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Tuple(elts=[Constant(value='['), Constant(value=']'), Constant(value='[]')], ctx=Load())), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='_object')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Tuple(elts=[Constant(value='['), Constant(value=']'), Constant(value='[]')], ctx=Load())), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='_object')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Tuple(elts=[Constant(value='{'), Constant(value='}'), Constant(value='set()')], ctx=Load())), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='_object')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Tuple(elts=[Constant(value='('), Constant(value=')'), Constant(value='()')], ctx=Load())), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='_object')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Tuple(elts=[Constant(value='mappingproxy({'), Constant(value='})'), Constant(value='mappingproxy({})')], ctx=Load()))]), simple=1), Assign(targets=[Name(id='_CONTAINERS', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[Call(func=Attribute(value=Name(id='_BRACES', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='_MAPPING_CONTAINERS', ctx=Store())], value=Tuple(elts=[Name(id='dict', ctx=Load()), Attribute(value=Name(id='os', ctx=Load()), attr='_Environ', ctx=Load()), Name(id='MappingProxyType', ctx=Load()), Name(id='UserDict', ctx=Load())], ctx=Load())), FunctionDef(name='is_expandable', args=arguments(posonlyargs=[], args=[arg(arg='obj', annotation=Name(id='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check if an object may be expanded by pretty print.')), Return(value=BoolOp(op=And(), values=[BoolOp(op=Or(), values=[Call(func=Name(id='_safe_isinstance', ctx=Load()), args=[Name(id='obj', ctx=Load()), Name(id='_CONTAINERS', ctx=Load())], keywords=[]), Call(func=Name(id='is_dataclass', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]), Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='obj', ctx=Load()), Constant(value='__rich_repr__')], keywords=[]), Call(func=Name(id='_is_attr_object', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[])]), UnaryOp(op=Not(), operand=Call(func=Name(id='isclass', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]))]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), ClassDef(name='Node', bases=[], keywords=[], body=[Expr(value=Constant(value='A node in a repr tree. May be atomic or a container.')), AnnAssign(target=Name(id='key_repr', ctx=Store()), annotation=Name(id='str', ctx=Load()), value=Constant(value=''), simple=1), AnnAssign(target=Name(id='value_repr', ctx=Store()), annotation=Name(id='str', ctx=Load()), value=Constant(value=''), simple=1), AnnAssign(target=Name(id='open_brace', ctx=Store()), annotation=Name(id='str', ctx=Load()), value=Constant(value=''), simple=1), AnnAssign(target=Name(id='close_brace', ctx=Store()), annotation=Name(id='str', ctx=Load()), value=Constant(value=''), simple=1), AnnAssign(target=Name(id='empty', ctx=Store()), annotation=Name(id='str', ctx=Load()), value=Constant(value=''), simple=1), AnnAssign(target=Name(id='last', ctx=Store()), annotation=Name(id='bool', ctx=Load()), value=Constant(value=False), simple=1), AnnAssign(target=Name(id='is_tuple', ctx=Store()), annotation=Name(id='bool', ctx=Load()), value=Constant(value=False), simple=1), AnnAssign(target=Name(id='is_namedtuple', ctx=Store()), annotation=Name(id='bool', ctx=Load()), value=Constant(value=False), simple=1), AnnAssign(target=Name(id='children', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Constant(value='Node'), ctx=Load()), ctx=Load()), value=Constant(value=None), simple=1), AnnAssign(target=Name(id='key_separator', ctx=Store()), annotation=Name(id='str', ctx=Load()), value=Constant(value=': '), simple=1), AnnAssign(target=Name(id='separator', ctx=Store()), annotation=Name(id='str', ctx=Load()), value=Constant(value=', '), simple=1), FunctionDef(name='iter_tokens', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Generate tokens for this node.')), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='key_repr', ctx=Load()), body=[Expr(value=Yield(value=Attribute(value=Name(id='self', ctx=Load()), attr='key_repr', ctx=Load()))), Expr(value=Yield(value=Attribute(value=Name(id='self', ctx=Load()), attr='key_separator', ctx=Load())))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='value_repr', ctx=Load()), body=[Expr(value=Yield(value=Attribute(value=Name(id='self', ctx=Load()), attr='value_repr', ctx=Load())))], orelse=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='children', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='children', ctx=Load()), body=[Expr(value=Yield(value=Attribute(value=Name(id='self', ctx=Load()), attr='open_brace', ctx=Load()))), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='is_tuple', ctx=Load()), UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='is_namedtuple', ctx=Load())), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='children', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)])]), body=[Expr(value=YieldFrom(value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='children', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='iter_tokens', ctx=Load()), args=[], keywords=[]))), Expr(value=Yield(value=Constant(value=',')))], orelse=[For(target=Name(id='child', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='children', ctx=Load()), body=[Expr(value=YieldFrom(value=Call(func=Attribute(value=Name(id='child', ctx=Load()), attr='iter_tokens', ctx=Load()), args=[], keywords=[]))), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='child', ctx=Load()), attr='last', ctx=Load())), body=[Expr(value=Yield(value=Attribute(value=Name(id='self', ctx=Load()), attr='separator', ctx=Load())))], orelse=[])], orelse=[])]), Expr(value=Yield(value=Attribute(value=Name(id='self', ctx=Load()), attr='close_brace', ctx=Load())))], orelse=[Expr(value=Yield(value=Attribute(value=Name(id='self', ctx=Load()), attr='empty', ctx=Load())))])], orelse=[])])], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='check_length', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='start_length', annotation=Name(id='int', ctx=Load())), arg(arg='max_length', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check the length fits within a limit.\n\n        Args:\n            start_length (int): Starting length of the line (indent, prefix, suffix).\n            max_length (int): Maximum length.\n\n        Returns:\n            bool: True if the node can be rendered within max length, otherwise False.\n        ')), Assign(targets=[Name(id='total_length', ctx=Store())], value=Name(id='start_length', ctx=Load())), For(target=Name(id='token', ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='iter_tokens', ctx=Load()), args=[], keywords=[]), body=[AugAssign(target=Name(id='total_length', ctx=Store()), op=Add(), value=Call(func=Name(id='cell_len', ctx=Load()), args=[Name(id='token', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='total_length', ctx=Load()), ops=[Gt()], comparators=[Name(id='max_length', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[])], orelse=[]), Return(value=Constant(value=True))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='__str__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='repr_text', ctx=Store())], value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='iter_tokens', ctx=Load()), args=[], keywords=[])], keywords=[])), Return(value=Name(id='repr_text', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='render', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='max_width', annotation=Name(id='int', ctx=Load())), arg(arg='indent_size', annotation=Name(id='int', ctx=Load())), arg(arg='expand_all', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=80), Constant(value=4), Constant(value=False)]), body=[Expr(value=Constant(value='Render the node to a pretty repr.\n\n        Args:\n            max_width (int, optional): Maximum width of the repr. Defaults to 80.\n            indent_size (int, optional): Size of indents. Defaults to 4.\n            expand_all (bool, optional): Expand all levels. Defaults to False.\n\n        Returns:\n            str: A repr string of the original object.\n        ')), Assign(targets=[Name(id='lines', ctx=Store())], value=List(elts=[Call(func=Name(id='_Line', ctx=Load()), args=[], keywords=[keyword(arg='node', value=Name(id='self', ctx=Load())), keyword(arg='is_root', value=Constant(value=True))])], ctx=Load())), Assign(targets=[Name(id='line_no', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='line_no', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='lines', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='line', ctx=Store())], value=Subscript(value=Name(id='lines', ctx=Load()), slice=Name(id='line_no', ctx=Load()), ctx=Load())), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='line', ctx=Load()), attr='expandable', ctx=Load()), UnaryOp(op=Not(), operand=Attribute(value=Name(id='line', ctx=Load()), attr='expanded', ctx=Load()))]), body=[If(test=BoolOp(op=Or(), values=[Name(id='expand_all', ctx=Load()), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='check_length', ctx=Load()), args=[Name(id='max_width', ctx=Load())], keywords=[]))]), body=[Assign(targets=[Subscript(value=Name(id='lines', ctx=Load()), slice=Slice(lower=Name(id='line_no', ctx=Load()), upper=BinOp(left=Name(id='line_no', ctx=Load()), op=Add(), right=Constant(value=1))), ctx=Store())], value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='expand', ctx=Load()), args=[Name(id='indent_size', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), AugAssign(target=Name(id='line_no', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='repr_str', ctx=Store())], value=Call(func=Attribute(value=Constant(value='\n'), attr='join', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='str', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='line', ctx=Store()), iter=Name(id='lines', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Return(value=Name(id='repr_str', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[Name(id='dataclass', ctx=Load())]), ClassDef(name='_Line', bases=[], keywords=[], body=[Expr(value=Constant(value='A line in repr output.')), AnnAssign(target=Name(id='parent', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='_Line'), ctx=Load()), value=Constant(value=None), simple=1), AnnAssign(target=Name(id='is_root', ctx=Store()), annotation=Name(id='bool', ctx=Load()), value=Constant(value=False), simple=1), AnnAssign(target=Name(id='node', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Node', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=1), AnnAssign(target=Name(id='text', ctx=Store()), annotation=Name(id='str', ctx=Load()), value=Constant(value=''), simple=1), AnnAssign(target=Name(id='suffix', ctx=Store()), annotation=Name(id='str', ctx=Load()), value=Constant(value=''), simple=1), AnnAssign(target=Name(id='whitespace', ctx=Store()), annotation=Name(id='str', ctx=Load()), value=Constant(value=''), simple=1), AnnAssign(target=Name(id='expanded', ctx=Store()), annotation=Name(id='bool', ctx=Load()), value=Constant(value=False), simple=1), AnnAssign(target=Name(id='last', ctx=Store()), annotation=Name(id='bool', ctx=Load()), value=Constant(value=False), simple=1), FunctionDef(name='expandable', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check if the line may be expanded.')), Return(value=Call(func=Name(id='bool', ctx=Load()), args=[BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='node', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='node', ctx=Load()), attr='children', ctx=Load())])], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='check_length', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='max_length', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check this line fits within a given number of cells.')), Assign(targets=[Name(id='start_length', ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='whitespace', ctx=Load())], keywords=[]), op=Add(), right=Call(func=Name(id='cell_len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load())], keywords=[])), op=Add(), right=Call(func=Name(id='cell_len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='suffix', ctx=Load())], keywords=[]))), Assert(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='node', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='node', ctx=Load()), attr='check_length', ctx=Load()), args=[Name(id='start_length', ctx=Load()), Name(id='max_length', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='expand', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='indent_size', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Expand this line by adding children on their own line.')), Assign(targets=[Name(id='node', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='node', ctx=Load())), Assert(test=Compare(left=Name(id='node', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Name(id='whitespace', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='whitespace', ctx=Load())), Assert(test=Attribute(value=Name(id='node', ctx=Load()), attr='children', ctx=Load())), If(test=Attribute(value=Name(id='node', ctx=Load()), attr='key_repr', ctx=Load()), body=[Assign(targets=[Name(id='new_line', ctx=Store())], value=Yield(value=Call(func=Name(id='_Line', ctx=Load()), args=[], keywords=[keyword(arg='text', value=JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='node', ctx=Load()), attr='key_repr', ctx=Load()), conversion=-1), FormattedValue(value=Attribute(value=Name(id='node', ctx=Load()), attr='key_separator', ctx=Load()), conversion=-1), FormattedValue(value=Attribute(value=Name(id='node', ctx=Load()), attr='open_brace', ctx=Load()), conversion=-1)])), keyword(arg='whitespace', value=Name(id='whitespace', ctx=Load()))])))], orelse=[Assign(targets=[Name(id='new_line', ctx=Store())], value=Yield(value=Call(func=Name(id='_Line', ctx=Load()), args=[], keywords=[keyword(arg='text', value=Attribute(value=Name(id='node', ctx=Load()), attr='open_brace', ctx=Load())), keyword(arg='whitespace', value=Name(id='whitespace', ctx=Load()))])))]), Assign(targets=[Name(id='child_whitespace', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='whitespace', ctx=Load()), op=Add(), right=BinOp(left=Constant(value=' '), op=Mult(), right=Name(id='indent_size', ctx=Load())))), Assign(targets=[Name(id='tuple_of_one', ctx=Store())], value=BoolOp(op=And(), values=[Attribute(value=Name(id='node', ctx=Load()), attr='is_tuple', ctx=Load()), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='node', ctx=Load()), attr='children', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)])])), For(target=Tuple(elts=[Name(id='last', ctx=Store()), Name(id='child', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='loop_last', ctx=Load()), args=[Attribute(value=Name(id='node', ctx=Load()), attr='children', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='separator', ctx=Store())], value=IfExp(test=Name(id='tuple_of_one', ctx=Load()), body=Constant(value=','), orelse=Attribute(value=Name(id='node', ctx=Load()), attr='separator', ctx=Load()))), Assign(targets=[Name(id='line', ctx=Store())], value=Call(func=Name(id='_Line', ctx=Load()), args=[], keywords=[keyword(arg='parent', value=Name(id='new_line', ctx=Load())), keyword(arg='node', value=Name(id='child', ctx=Load())), keyword(arg='whitespace', value=Name(id='child_whitespace', ctx=Load())), keyword(arg='suffix', value=Name(id='separator', ctx=Load())), keyword(arg='last', value=BoolOp(op=And(), values=[Name(id='last', ctx=Load()), UnaryOp(op=Not(), operand=Name(id='tuple_of_one', ctx=Load()))]))])), Expr(value=Yield(value=Name(id='line', ctx=Load())))], orelse=[]), Expr(value=Yield(value=Call(func=Name(id='_Line', ctx=Load()), args=[], keywords=[keyword(arg='text', value=Attribute(value=Name(id='node', ctx=Load()), attr='close_brace', ctx=Load())), keyword(arg='whitespace', value=Name(id='whitespace', ctx=Load())), keyword(arg='suffix', value=Attribute(value=Name(id='self', ctx=Load()), attr='suffix', ctx=Load())), keyword(arg='last', value=Attribute(value=Name(id='self', ctx=Load()), attr='last', ctx=Load()))])))], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Constant(value='_Line'), ctx=Load())), FunctionDef(name='__str__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='last', ctx=Load()), body=[Return(value=JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='whitespace', ctx=Load()), conversion=-1), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load()), conversion=-1), FormattedValue(value=BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='node', ctx=Load()), Constant(value='')]), conversion=-1)]))], orelse=[Return(value=JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='whitespace', ctx=Load()), conversion=-1), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load()), conversion=-1), FormattedValue(value=BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='node', ctx=Load()), Constant(value='')]), conversion=-1), FormattedValue(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='suffix', ctx=Load()), attr='rstrip', ctx=Load()), args=[], keywords=[]), conversion=-1)]))])], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[Name(id='dataclass', ctx=Load())]), FunctionDef(name='_is_namedtuple', args=arguments(posonlyargs=[], args=[arg(arg='obj', annotation=Name(id='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Checks if an object is most likely a namedtuple. It is possible\n    to craft an object that passes this check and isn't a namedtuple, but\n    there is only a minuscule chance of this happening unintentionally.\n\n    Args:\n        obj (Any): The object to test\n\n    Returns:\n        bool: True if the object is a namedtuple. False otherwise.\n    ")), Try(body=[Assign(targets=[Name(id='fields', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='obj', ctx=Load()), Constant(value='_fields'), Constant(value=None)], keywords=[]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Return(value=Constant(value=False))])], orelse=[], finalbody=[]), Return(value=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='obj', ctx=Load()), Name(id='tuple', ctx=Load())], keywords=[]), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='fields', ctx=Load()), Name(id='tuple', ctx=Load())], keywords=[])]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='traverse', args=arguments(posonlyargs=[], args=[arg(arg='_object', annotation=Name(id='Any', ctx=Load())), arg(arg='max_length', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='max_string', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='max_depth', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='Traverse object and generate a tree.\n\n    Args:\n        _object (Any): Object to be traversed.\n        max_length (int, optional): Maximum length of containers before abbreviating, or None for no abbreviation.\n            Defaults to None.\n        max_string (int, optional): Maximum length of string before truncating, or None to disable truncating.\n            Defaults to None.\n        max_depth (int, optional): Maximum depth of data structures, or None for no maximum.\n            Defaults to None.\n\n    Returns:\n        Node: The root of a tree structure which can be used to render a pretty repr.\n    ')), FunctionDef(name='to_repr', args=arguments(posonlyargs=[], args=[arg(arg='obj', annotation=Name(id='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get repr string for an object, but catch errors.')), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='max_string', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Call(func=Name(id='_safe_isinstance', ctx=Load()), args=[Name(id='obj', ctx=Load()), Tuple(elts=[Name(id='bytes', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load())], keywords=[]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Name(id='max_string', ctx=Load())])]), body=[Assign(targets=[Name(id='truncated', ctx=Store())], value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='max_string', ctx=Load()))), Assign(targets=[Name(id='obj_repr', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Subscript(value=Name(id='obj', ctx=Load()), slice=Slice(upper=Name(id='max_string', ctx=Load())), ctx=Load()), conversion=114), Constant(value='+'), FormattedValue(value=Name(id='truncated', ctx=Load()), conversion=-1)]))], orelse=[Try(body=[Assign(targets=[Name(id='obj_repr', ctx=Store())], value=Call(func=Name(id='repr', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='error', body=[Assign(targets=[Name(id='obj_repr', ctx=Store())], value=JoinedStr(values=[Constant(value='<repr-error '), FormattedValue(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[]), conversion=114), Constant(value='>')]))])], orelse=[], finalbody=[])]), Return(value=Name(id='obj_repr', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), AnnAssign(target=Name(id='visited_ids', ctx=Store()), annotation=Subscript(value=Name(id='Set', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()), value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[]), simple=1), Assign(targets=[Name(id='push_visited', ctx=Store())], value=Attribute(value=Name(id='visited_ids', ctx=Load()), attr='add', ctx=Load())), Assign(targets=[Name(id='pop_visited', ctx=Store())], value=Attribute(value=Name(id='visited_ids', ctx=Load()), attr='remove', ctx=Load())), FunctionDef(name='_traverse', args=arguments(posonlyargs=[], args=[arg(arg='obj', annotation=Name(id='Any', ctx=Load())), arg(arg='root', annotation=Name(id='bool', ctx=Load())), arg(arg='depth', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Constant(value=0)]), body=[Expr(value=Constant(value='Walk the object depth first.')), Assign(targets=[Name(id='obj_id', ctx=Store())], value=Call(func=Name(id='id', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='obj_id', ctx=Load()), ops=[In()], comparators=[Name(id='visited_ids', ctx=Load())]), body=[Return(value=Call(func=Name(id='Node', ctx=Load()), args=[], keywords=[keyword(arg='value_repr', value=Constant(value='...'))]))], orelse=[]), Assign(targets=[Name(id='obj_type', ctx=Store())], value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[])), AnnAssign(target=Name(id='children', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Node', ctx=Load()), ctx=Load()), simple=1), Assign(targets=[Name(id='reached_max_depth', ctx=Store())], value=BoolOp(op=And(), values=[Compare(left=Name(id='max_depth', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='depth', ctx=Load()), ops=[GtE()], comparators=[Name(id='max_depth', ctx=Load())])])), FunctionDef(name='iter_rich_args', args=arguments(posonlyargs=[], args=[arg(arg='rich_args', annotation=Name(id='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='arg', ctx=Store()), iter=Name(id='rich_args', ctx=Load()), body=[If(test=Call(func=Name(id='_safe_isinstance', ctx=Load()), args=[Name(id='arg', ctx=Load()), Name(id='tuple', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='arg', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=3)]), body=[Assign(targets=[Tuple(elts=[Name(id='key', ctx=Store()), Name(id='child', ctx=Store()), Name(id='default', ctx=Store())], ctx=Store())], value=Name(id='arg', ctx=Load())), If(test=Compare(left=Name(id='default', ctx=Load()), ops=[Eq()], comparators=[Name(id='child', ctx=Load())]), body=[Continue()], orelse=[]), Expr(value=Yield(value=Tuple(elts=[Name(id='key', ctx=Load()), Name(id='child', ctx=Load())], ctx=Load())))], orelse=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='arg', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=2)]), body=[Assign(targets=[Tuple(elts=[Name(id='key', ctx=Store()), Name(id='child', ctx=Store())], ctx=Store())], value=Name(id='arg', ctx=Load())), Expr(value=Yield(value=Tuple(elts=[Name(id='key', ctx=Load()), Name(id='child', ctx=Load())], ctx=Load())))], orelse=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='arg', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Expr(value=Yield(value=Subscript(value=Name(id='arg', ctx=Load()), slice=Constant(value=0), ctx=Load())))], orelse=[])])])], orelse=[Expr(value=Yield(value=Name(id='arg', ctx=Load())))])], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='Any', ctx=Load()), Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), Try(body=[Assign(targets=[Name(id='fake_attributes', ctx=Store())], value=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='obj', ctx=Load()), Constant(value='awehoi234_wdfjwljet234_234wdfoijsdfmmnxpi492')], keywords=[]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Assign(targets=[Name(id='fake_attributes', ctx=Store())], value=Constant(value=False))])], orelse=[], finalbody=[]), AnnAssign(target=Name(id='rich_repr_result', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='RichReprResult', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=1), If(test=UnaryOp(op=Not(), operand=Name(id='fake_attributes', ctx=Load())), body=[Try(body=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='obj', ctx=Load()), Constant(value='__rich_repr__')], keywords=[]), UnaryOp(op=Not(), operand=Call(func=Name(id='isclass', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]))]), body=[Assign(targets=[Name(id='rich_repr_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='obj', ctx=Load()), attr='__rich_repr__', ctx=Load()), args=[], keywords=[]))], orelse=[])], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], orelse=[]), If(test=Compare(left=Name(id='rich_repr_result', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Name(id='push_visited', ctx=Load()), args=[Name(id='obj_id', ctx=Load())], keywords=[])), Assign(targets=[Name(id='angular', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Attribute(value=Name(id='obj', ctx=Load()), attr='__rich_repr__', ctx=Load()), Constant(value='angular'), Constant(value=False)], keywords=[])), Assign(targets=[Name(id='args', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='iter_rich_args', ctx=Load()), args=[Name(id='rich_repr_result', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='class_name', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='obj', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load())), If(test=Name(id='args', ctx=Load()), body=[Assign(targets=[Name(id='children', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='append', ctx=Store())], value=Attribute(value=Name(id='children', ctx=Load()), attr='append', ctx=Load())), If(test=Name(id='reached_max_depth', ctx=Load()), body=[If(test=Name(id='angular', ctx=Load()), body=[Assign(targets=[Name(id='node', ctx=Store())], value=Call(func=Name(id='Node', ctx=Load()), args=[], keywords=[keyword(arg='value_repr', value=JoinedStr(values=[Constant(value='<'), FormattedValue(value=Name(id='class_name', ctx=Load()), conversion=-1), Constant(value='...>')]))]))], orelse=[Assign(targets=[Name(id='node', ctx=Store())], value=Call(func=Name(id='Node', ctx=Load()), args=[], keywords=[keyword(arg='value_repr', value=JoinedStr(values=[FormattedValue(value=Name(id='class_name', ctx=Load()), conversion=-1), Constant(value='(...)')]))]))])], orelse=[If(test=Name(id='angular', ctx=Load()), body=[Assign(targets=[Name(id='node', ctx=Store())], value=Call(func=Name(id='Node', ctx=Load()), args=[], keywords=[keyword(arg='open_brace', value=JoinedStr(values=[Constant(value='<'), FormattedValue(value=Name(id='class_name', ctx=Load()), conversion=-1), Constant(value=' ')])), keyword(arg='close_brace', value=Constant(value='>')), keyword(arg='children', value=Name(id='children', ctx=Load())), keyword(arg='last', value=Name(id='root', ctx=Load())), keyword(arg='separator', value=Constant(value=' '))]))], orelse=[Assign(targets=[Name(id='node', ctx=Store())], value=Call(func=Name(id='Node', ctx=Load()), args=[], keywords=[keyword(arg='open_brace', value=JoinedStr(values=[FormattedValue(value=Name(id='class_name', ctx=Load()), conversion=-1), Constant(value='(')])), keyword(arg='close_brace', value=Constant(value=')')), keyword(arg='children', value=Name(id='children', ctx=Load())), keyword(arg='last', value=Name(id='root', ctx=Load()))]))]), For(target=Tuple(elts=[Name(id='last', ctx=Store()), Name(id='arg', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='loop_last', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[]), body=[If(test=Call(func=Name(id='_safe_isinstance', ctx=Load()), args=[Name(id='arg', ctx=Load()), Name(id='tuple', ctx=Load())], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='key', ctx=Store()), Name(id='child', ctx=Store())], ctx=Store())], value=Name(id='arg', ctx=Load())), Assign(targets=[Name(id='child_node', ctx=Store())], value=Call(func=Name(id='_traverse', ctx=Load()), args=[Name(id='child', ctx=Load())], keywords=[keyword(arg='depth', value=BinOp(left=Name(id='depth', ctx=Load()), op=Add(), right=Constant(value=1)))])), Assign(targets=[Attribute(value=Name(id='child_node', ctx=Load()), attr='last', ctx=Store())], value=Name(id='last', ctx=Load())), Assign(targets=[Attribute(value=Name(id='child_node', ctx=Load()), attr='key_repr', ctx=Store())], value=Name(id='key', ctx=Load())), Assign(targets=[Attribute(value=Name(id='child_node', ctx=Load()), attr='key_separator', ctx=Store())], value=Constant(value='=')), Expr(value=Call(func=Name(id='append', ctx=Load()), args=[Name(id='child_node', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='child_node', ctx=Store())], value=Call(func=Name(id='_traverse', ctx=Load()), args=[Name(id='arg', ctx=Load())], keywords=[keyword(arg='depth', value=BinOp(left=Name(id='depth', ctx=Load()), op=Add(), right=Constant(value=1)))])), Assign(targets=[Attribute(value=Name(id='child_node', ctx=Load()), attr='last', ctx=Store())], value=Name(id='last', ctx=Load())), Expr(value=Call(func=Name(id='append', ctx=Load()), args=[Name(id='child_node', ctx=Load())], keywords=[]))])], orelse=[])])], orelse=[Assign(targets=[Name(id='node', ctx=Store())], value=Call(func=Name(id='Node', ctx=Load()), args=[], keywords=[keyword(arg='value_repr', value=IfExp(test=Name(id='angular', ctx=Load()), body=JoinedStr(values=[Constant(value='<'), FormattedValue(value=Name(id='class_name', ctx=Load()), conversion=-1), Constant(value='>')]), orelse=JoinedStr(values=[FormattedValue(value=Name(id='class_name', ctx=Load()), conversion=-1), Constant(value='()')]))), keyword(arg='children', value=List(elts=[], ctx=Load())), keyword(arg='last', value=Name(id='root', ctx=Load()))]))]), Expr(value=Call(func=Name(id='pop_visited', ctx=Load()), args=[Name(id='obj_id', ctx=Load())], keywords=[]))], orelse=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='_is_attr_object', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]), UnaryOp(op=Not(), operand=Name(id='fake_attributes', ctx=Load()))]), body=[Expr(value=Call(func=Name(id='push_visited', ctx=Load()), args=[Name(id='obj_id', ctx=Load())], keywords=[])), Assign(targets=[Name(id='children', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='append', ctx=Store())], value=Attribute(value=Name(id='children', ctx=Load()), attr='append', ctx=Load())), Assign(targets=[Name(id='attr_fields', ctx=Store())], value=Call(func=Name(id='_get_attr_fields', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[])), If(test=Name(id='attr_fields', ctx=Load()), body=[If(test=Name(id='reached_max_depth', ctx=Load()), body=[Assign(targets=[Name(id='node', ctx=Store())], value=Call(func=Name(id='Node', ctx=Load()), args=[], keywords=[keyword(arg='value_repr', value=JoinedStr(values=[FormattedValue(value=Attribute(value=Attribute(value=Name(id='obj', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), conversion=-1), Constant(value='(...)')]))]))], orelse=[Assign(targets=[Name(id='node', ctx=Store())], value=Call(func=Name(id='Node', ctx=Load()), args=[], keywords=[keyword(arg='open_brace', value=JoinedStr(values=[FormattedValue(value=Attribute(value=Attribute(value=Name(id='obj', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), conversion=-1), Constant(value='(')])), keyword(arg='close_brace', value=Constant(value=')')), keyword(arg='children', value=Name(id='children', ctx=Load())), keyword(arg='last', value=Name(id='root', ctx=Load()))])), FunctionDef(name='iter_attrs', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Iterate over attr fields and values.')), For(target=Name(id='attr', ctx=Store()), iter=Name(id='attr_fields', ctx=Load()), body=[If(test=Attribute(value=Name(id='attr', ctx=Load()), attr='repr', ctx=Load()), body=[Try(body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='obj', ctx=Load()), Attribute(value=Name(id='attr', ctx=Load()), attr='name', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='error', body=[Expr(value=Yield(value=Tuple(elts=[Attribute(value=Name(id='attr', ctx=Load()), attr='name', ctx=Load()), Name(id='error', ctx=Load()), Constant(value=None)], ctx=Load())))])], orelse=[Expr(value=Yield(value=Tuple(elts=[Attribute(value=Name(id='attr', ctx=Load()), attr='name', ctx=Load()), Name(id='value', ctx=Load()), IfExp(test=Call(func=Name(id='callable', ctx=Load()), args=[Attribute(value=Name(id='attr', ctx=Load()), attr='repr', ctx=Load())], keywords=[]), body=Attribute(value=Name(id='attr', ctx=Load()), attr='repr', ctx=Load()), orelse=Constant(value=None))], ctx=Load())))], finalbody=[])], orelse=[])], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='Any', ctx=Load())], ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), For(target=Tuple(elts=[Name(id='last', ctx=Store()), Tuple(elts=[Name(id='name', ctx=Store()), Name(id='value', ctx=Store()), Name(id='repr_callable', ctx=Store())], ctx=Store())], ctx=Store()), iter=Call(func=Name(id='loop_last', ctx=Load()), args=[Call(func=Name(id='iter_attrs', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Name(id='repr_callable', ctx=Load()), body=[Assign(targets=[Name(id='child_node', ctx=Store())], value=Call(func=Name(id='Node', ctx=Load()), args=[], keywords=[keyword(arg='value_repr', value=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='repr_callable', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])], keywords=[]))]))], orelse=[Assign(targets=[Name(id='child_node', ctx=Store())], value=Call(func=Name(id='_traverse', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[keyword(arg='depth', value=BinOp(left=Name(id='depth', ctx=Load()), op=Add(), right=Constant(value=1)))]))]), Assign(targets=[Attribute(value=Name(id='child_node', ctx=Load()), attr='last', ctx=Store())], value=Name(id='last', ctx=Load())), Assign(targets=[Attribute(value=Name(id='child_node', ctx=Load()), attr='key_repr', ctx=Store())], value=Name(id='name', ctx=Load())), Assign(targets=[Attribute(value=Name(id='child_node', ctx=Load()), attr='key_separator', ctx=Store())], value=Constant(value='=')), Expr(value=Call(func=Name(id='append', ctx=Load()), args=[Name(id='child_node', ctx=Load())], keywords=[]))], orelse=[])])], orelse=[Assign(targets=[Name(id='node', ctx=Store())], value=Call(func=Name(id='Node', ctx=Load()), args=[], keywords=[keyword(arg='value_repr', value=JoinedStr(values=[FormattedValue(value=Attribute(value=Attribute(value=Name(id='obj', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), conversion=-1), Constant(value='()')])), keyword(arg='children', value=List(elts=[], ctx=Load())), keyword(arg='last', value=Name(id='root', ctx=Load()))]))]), Expr(value=Call(func=Name(id='pop_visited', ctx=Load()), args=[Name(id='obj_id', ctx=Load())], keywords=[]))], orelse=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='is_dataclass', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]), UnaryOp(op=Not(), operand=Call(func=Name(id='_safe_isinstance', ctx=Load()), args=[Name(id='obj', ctx=Load()), Name(id='type', ctx=Load())], keywords=[])), UnaryOp(op=Not(), operand=Name(id='fake_attributes', ctx=Load())), Call(func=Name(id='_is_dataclass_repr', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Name(id='push_visited', ctx=Load()), args=[Name(id='obj_id', ctx=Load())], keywords=[])), Assign(targets=[Name(id='children', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='append', ctx=Store())], value=Attribute(value=Name(id='children', ctx=Load()), attr='append', ctx=Load())), If(test=Name(id='reached_max_depth', ctx=Load()), body=[Assign(targets=[Name(id='node', ctx=Store())], value=Call(func=Name(id='Node', ctx=Load()), args=[], keywords=[keyword(arg='value_repr', value=JoinedStr(values=[FormattedValue(value=Attribute(value=Attribute(value=Name(id='obj', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), conversion=-1), Constant(value='(...)')]))]))], orelse=[Assign(targets=[Name(id='node', ctx=Store())], value=Call(func=Name(id='Node', ctx=Load()), args=[], keywords=[keyword(arg='open_brace', value=JoinedStr(values=[FormattedValue(value=Attribute(value=Attribute(value=Name(id='obj', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), conversion=-1), Constant(value='(')])), keyword(arg='close_brace', value=Constant(value=')')), keyword(arg='children', value=Name(id='children', ctx=Load())), keyword(arg='last', value=Name(id='root', ctx=Load())), keyword(arg='empty', value=JoinedStr(values=[FormattedValue(value=Attribute(value=Attribute(value=Name(id='obj', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), conversion=-1), Constant(value='()')]))])), For(target=Tuple(elts=[Name(id='last', ctx=Store()), Name(id='field', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='loop_last', ctx=Load()), args=[GeneratorExp(elt=Name(id='field', ctx=Load()), generators=[comprehension(target=Name(id='field', ctx=Store()), iter=Call(func=Name(id='fields', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]), ifs=[Attribute(value=Name(id='field', ctx=Load()), attr='repr', ctx=Load())], is_async=0)])], keywords=[]), body=[Assign(targets=[Name(id='child_node', ctx=Store())], value=Call(func=Name(id='_traverse', ctx=Load()), args=[Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='obj', ctx=Load()), Attribute(value=Name(id='field', ctx=Load()), attr='name', ctx=Load())], keywords=[])], keywords=[keyword(arg='depth', value=BinOp(left=Name(id='depth', ctx=Load()), op=Add(), right=Constant(value=1)))])), Assign(targets=[Attribute(value=Name(id='child_node', ctx=Load()), attr='key_repr', ctx=Store())], value=Attribute(value=Name(id='field', ctx=Load()), attr='name', ctx=Load())), Assign(targets=[Attribute(value=Name(id='child_node', ctx=Load()), attr='last', ctx=Store())], value=Name(id='last', ctx=Load())), Assign(targets=[Attribute(value=Name(id='child_node', ctx=Load()), attr='key_separator', ctx=Store())], value=Constant(value='=')), Expr(value=Call(func=Name(id='append', ctx=Load()), args=[Name(id='child_node', ctx=Load())], keywords=[]))], orelse=[])]), Expr(value=Call(func=Name(id='pop_visited', ctx=Load()), args=[Name(id='obj_id', ctx=Load())], keywords=[]))], orelse=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='_is_namedtuple', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]), Call(func=Name(id='_has_default_namedtuple_repr', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Name(id='push_visited', ctx=Load()), args=[Name(id='obj_id', ctx=Load())], keywords=[])), Assign(targets=[Name(id='class_name', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='obj', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load())), If(test=Name(id='reached_max_depth', ctx=Load()), body=[Assign(targets=[Name(id='node', ctx=Store())], value=Call(func=Name(id='Node', ctx=Load()), args=[], keywords=[keyword(arg='value_repr', value=JoinedStr(values=[FormattedValue(value=Name(id='class_name', ctx=Load()), conversion=-1), Constant(value='(...)')]))]))], orelse=[Assign(targets=[Name(id='children', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='append', ctx=Store())], value=Attribute(value=Name(id='children', ctx=Load()), attr='append', ctx=Load())), Assign(targets=[Name(id='node', ctx=Store())], value=Call(func=Name(id='Node', ctx=Load()), args=[], keywords=[keyword(arg='open_brace', value=JoinedStr(values=[FormattedValue(value=Name(id='class_name', ctx=Load()), conversion=-1), Constant(value='(')])), keyword(arg='close_brace', value=Constant(value=')')), keyword(arg='children', value=Name(id='children', ctx=Load())), keyword(arg='empty', value=JoinedStr(values=[FormattedValue(value=Name(id='class_name', ctx=Load()), conversion=-1), Constant(value='()')]))])), For(target=Tuple(elts=[Name(id='last', ctx=Store()), Tuple(elts=[Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store())], ctx=Store()), iter=Call(func=Name(id='loop_last', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='obj', ctx=Load()), attr='_asdict', ctx=Load()), args=[], keywords=[]), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='child_node', ctx=Store())], value=Call(func=Name(id='_traverse', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[keyword(arg='depth', value=BinOp(left=Name(id='depth', ctx=Load()), op=Add(), right=Constant(value=1)))])), Assign(targets=[Attribute(value=Name(id='child_node', ctx=Load()), attr='key_repr', ctx=Store())], value=Name(id='key', ctx=Load())), Assign(targets=[Attribute(value=Name(id='child_node', ctx=Load()), attr='last', ctx=Store())], value=Name(id='last', ctx=Load())), Assign(targets=[Attribute(value=Name(id='child_node', ctx=Load()), attr='key_separator', ctx=Store())], value=Constant(value='=')), Expr(value=Call(func=Name(id='append', ctx=Load()), args=[Name(id='child_node', ctx=Load())], keywords=[]))], orelse=[])]), Expr(value=Call(func=Name(id='pop_visited', ctx=Load()), args=[Name(id='obj_id', ctx=Load())], keywords=[]))], orelse=[If(test=Call(func=Name(id='_safe_isinstance', ctx=Load()), args=[Name(id='obj', ctx=Load()), Name(id='_CONTAINERS', ctx=Load())], keywords=[]), body=[For(target=Name(id='container_type', ctx=Store()), iter=Name(id='_CONTAINERS', ctx=Load()), body=[If(test=Call(func=Name(id='_safe_isinstance', ctx=Load()), args=[Name(id='obj', ctx=Load()), Name(id='container_type', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='obj_type', ctx=Store())], value=Name(id='container_type', ctx=Load())), Break()], orelse=[])], orelse=[]), Expr(value=Call(func=Name(id='push_visited', ctx=Load()), args=[Name(id='obj_id', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='open_brace', ctx=Store()), Name(id='close_brace', ctx=Store()), Name(id='empty', ctx=Store())], ctx=Store())], value=Call(func=Subscript(value=Name(id='_BRACES', ctx=Load()), slice=Name(id='obj_type', ctx=Load()), ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[])), If(test=Name(id='reached_max_depth', ctx=Load()), body=[Assign(targets=[Name(id='node', ctx=Store())], value=Call(func=Name(id='Node', ctx=Load()), args=[], keywords=[keyword(arg='value_repr', value=JoinedStr(values=[FormattedValue(value=Name(id='open_brace', ctx=Load()), conversion=-1), Constant(value='...'), FormattedValue(value=Name(id='close_brace', ctx=Load()), conversion=-1)]))]))], orelse=[If(test=Compare(left=Attribute(value=Name(id='obj_type', ctx=Load()), attr='__repr__', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]), attr='__repr__', ctx=Load())]), body=[Assign(targets=[Name(id='node', ctx=Store())], value=Call(func=Name(id='Node', ctx=Load()), args=[], keywords=[keyword(arg='value_repr', value=Call(func=Name(id='to_repr', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[])), keyword(arg='last', value=Name(id='root', ctx=Load()))]))], orelse=[If(test=Name(id='obj', ctx=Load()), body=[Assign(targets=[Name(id='children', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='node', ctx=Store())], value=Call(func=Name(id='Node', ctx=Load()), args=[], keywords=[keyword(arg='open_brace', value=Name(id='open_brace', ctx=Load())), keyword(arg='close_brace', value=Name(id='close_brace', ctx=Load())), keyword(arg='children', value=Name(id='children', ctx=Load())), keyword(arg='last', value=Name(id='root', ctx=Load()))])), Assign(targets=[Name(id='append', ctx=Store())], value=Attribute(value=Name(id='children', ctx=Load()), attr='append', ctx=Load())), Assign(targets=[Name(id='num_items', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[])), Assign(targets=[Name(id='last_item_index', ctx=Store())], value=BinOp(left=Name(id='num_items', ctx=Load()), op=Sub(), right=Constant(value=1))), If(test=Call(func=Name(id='_safe_isinstance', ctx=Load()), args=[Name(id='obj', ctx=Load()), Name(id='_MAPPING_CONTAINERS', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='iter_items', ctx=Store())], value=Call(func=Name(id='iter', ctx=Load()), args=[Call(func=Attribute(value=Name(id='obj', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])), If(test=Compare(left=Name(id='max_length', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='iter_items', ctx=Store())], value=Call(func=Name(id='islice', ctx=Load()), args=[Name(id='iter_items', ctx=Load()), Name(id='max_length', ctx=Load())], keywords=[]))], orelse=[]), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Tuple(elts=[Name(id='key', ctx=Store()), Name(id='child', ctx=Store())], ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='iter_items', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='child_node', ctx=Store())], value=Call(func=Name(id='_traverse', ctx=Load()), args=[Name(id='child', ctx=Load())], keywords=[keyword(arg='depth', value=BinOp(left=Name(id='depth', ctx=Load()), op=Add(), right=Constant(value=1)))])), Assign(targets=[Attribute(value=Name(id='child_node', ctx=Load()), attr='key_repr', ctx=Store())], value=Call(func=Name(id='to_repr', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='child_node', ctx=Load()), attr='last', ctx=Store())], value=Compare(left=Name(id='index', ctx=Load()), ops=[Eq()], comparators=[Name(id='last_item_index', ctx=Load())])), Expr(value=Call(func=Name(id='append', ctx=Load()), args=[Name(id='child_node', ctx=Load())], keywords=[]))], orelse=[])], orelse=[Assign(targets=[Name(id='iter_values', ctx=Store())], value=Call(func=Name(id='iter', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='max_length', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='iter_values', ctx=Store())], value=Call(func=Name(id='islice', ctx=Load()), args=[Name(id='iter_values', ctx=Load()), Name(id='max_length', ctx=Load())], keywords=[]))], orelse=[]), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='child', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='iter_values', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='child_node', ctx=Store())], value=Call(func=Name(id='_traverse', ctx=Load()), args=[Name(id='child', ctx=Load())], keywords=[keyword(arg='depth', value=BinOp(left=Name(id='depth', ctx=Load()), op=Add(), right=Constant(value=1)))])), Assign(targets=[Attribute(value=Name(id='child_node', ctx=Load()), attr='last', ctx=Store())], value=Compare(left=Name(id='index', ctx=Load()), ops=[Eq()], comparators=[Name(id='last_item_index', ctx=Load())])), Expr(value=Call(func=Name(id='append', ctx=Load()), args=[Name(id='child_node', ctx=Load())], keywords=[]))], orelse=[])]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='max_length', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='num_items', ctx=Load()), ops=[Gt()], comparators=[Name(id='max_length', ctx=Load())])]), body=[Expr(value=Call(func=Name(id='append', ctx=Load()), args=[Call(func=Name(id='Node', ctx=Load()), args=[], keywords=[keyword(arg='value_repr', value=JoinedStr(values=[Constant(value='... +'), FormattedValue(value=BinOp(left=Name(id='num_items', ctx=Load()), op=Sub(), right=Name(id='max_length', ctx=Load())), conversion=-1)])), keyword(arg='last', value=Constant(value=True))])], keywords=[]))], orelse=[])], orelse=[Assign(targets=[Name(id='node', ctx=Store())], value=Call(func=Name(id='Node', ctx=Load()), args=[], keywords=[keyword(arg='empty', value=Name(id='empty', ctx=Load())), keyword(arg='children', value=List(elts=[], ctx=Load())), keyword(arg='last', value=Name(id='root', ctx=Load()))]))])])]), Expr(value=Call(func=Name(id='pop_visited', ctx=Load()), args=[Name(id='obj_id', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='node', ctx=Store())], value=Call(func=Name(id='Node', ctx=Load()), args=[], keywords=[keyword(arg='value_repr', value=Call(func=Name(id='to_repr', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[])), keyword(arg='last', value=Name(id='root', ctx=Load()))]))])])])])]), Assign(targets=[Attribute(value=Name(id='node', ctx=Load()), attr='is_tuple', ctx=Store())], value=Call(func=Name(id='_safe_isinstance', ctx=Load()), args=[Name(id='obj', ctx=Load()), Name(id='tuple', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='node', ctx=Load()), attr='is_namedtuple', ctx=Store())], value=Call(func=Name(id='_is_namedtuple', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[])), Return(value=Name(id='node', ctx=Load()))], decorator_list=[], returns=Name(id='Node', ctx=Load())), Assign(targets=[Name(id='node', ctx=Store())], value=Call(func=Name(id='_traverse', ctx=Load()), args=[Name(id='_object', ctx=Load())], keywords=[keyword(arg='root', value=Constant(value=True))])), Return(value=Name(id='node', ctx=Load()))], decorator_list=[], returns=Name(id='Node', ctx=Load())), FunctionDef(name='pretty_repr', args=arguments(posonlyargs=[], args=[arg(arg='_object', annotation=Name(id='Any', ctx=Load()))], kwonlyargs=[arg(arg='max_width', annotation=Name(id='int', ctx=Load())), arg(arg='indent_size', annotation=Name(id='int', ctx=Load())), arg(arg='max_length', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='max_string', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='max_depth', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='expand_all', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=80), Constant(value=4), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=False)], defaults=[]), body=[Expr(value=Constant(value='Prettify repr string by expanding on to new lines to fit within a given width.\n\n    Args:\n        _object (Any): Object to repr.\n        max_width (int, optional): Desired maximum width of repr string. Defaults to 80.\n        indent_size (int, optional): Number of spaces to indent. Defaults to 4.\n        max_length (int, optional): Maximum length of containers before abbreviating, or None for no abbreviation.\n            Defaults to None.\n        max_string (int, optional): Maximum length of string before truncating, or None to disable truncating.\n            Defaults to None.\n        max_depth (int, optional): Maximum depth of nested data structure, or None for no depth.\n            Defaults to None.\n        expand_all (bool, optional): Expand all containers regardless of available width. Defaults to False.\n\n    Returns:\n        str: A possibly multi-line representation of the object.\n    ')), If(test=Call(func=Name(id='_safe_isinstance', ctx=Load()), args=[Name(id='_object', ctx=Load()), Name(id='Node', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='node', ctx=Store())], value=Name(id='_object', ctx=Load()))], orelse=[Assign(targets=[Name(id='node', ctx=Store())], value=Call(func=Name(id='traverse', ctx=Load()), args=[Name(id='_object', ctx=Load())], keywords=[keyword(arg='max_length', value=Name(id='max_length', ctx=Load())), keyword(arg='max_string', value=Name(id='max_string', ctx=Load())), keyword(arg='max_depth', value=Name(id='max_depth', ctx=Load()))]))]), AnnAssign(target=Name(id='repr_str', ctx=Store()), annotation=Name(id='str', ctx=Load()), value=Call(func=Attribute(value=Name(id='node', ctx=Load()), attr='render', ctx=Load()), args=[], keywords=[keyword(arg='max_width', value=Name(id='max_width', ctx=Load())), keyword(arg='indent_size', value=Name(id='indent_size', ctx=Load())), keyword(arg='expand_all', value=Name(id='expand_all', ctx=Load()))]), simple=1), Return(value=Name(id='repr_str', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='pprint', args=arguments(posonlyargs=[], args=[arg(arg='_object', annotation=Name(id='Any', ctx=Load()))], kwonlyargs=[arg(arg='console', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='Console'), ctx=Load())), arg(arg='indent_guides', annotation=Name(id='bool', ctx=Load())), arg(arg='max_length', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='max_string', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='max_depth', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='expand_all', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=None), Constant(value=True), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=False)], defaults=[]), body=[Expr(value=Constant(value='A convenience function for pretty printing.\n\n    Args:\n        _object (Any): Object to pretty print.\n        console (Console, optional): Console instance, or None to use default. Defaults to None.\n        max_length (int, optional): Maximum length of containers before abbreviating, or None for no abbreviation.\n            Defaults to None.\n        max_string (int, optional): Maximum length of strings before truncating, or None to disable. Defaults to None.\n        max_depth (int, optional): Maximum depth for nested data structures, or None for unlimited depth. Defaults to None.\n        indent_guides (bool, optional): Enable indentation guides. Defaults to True.\n        expand_all (bool, optional): Expand all containers. Defaults to False.\n    ')), Assign(targets=[Name(id='_console', ctx=Store())], value=IfExp(test=Compare(left=Name(id='console', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Call(func=Name(id='get_console', ctx=Load()), args=[], keywords=[]), orelse=Name(id='console', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='_console', ctx=Load()), attr='print', ctx=Load()), args=[Call(func=Name(id='Pretty', ctx=Load()), args=[Name(id='_object', ctx=Load())], keywords=[keyword(arg='max_length', value=Name(id='max_length', ctx=Load())), keyword(arg='max_string', value=Name(id='max_string', ctx=Load())), keyword(arg='max_depth', value=Name(id='max_depth', ctx=Load())), keyword(arg='indent_guides', value=Name(id='indent_guides', ctx=Load())), keyword(arg='expand_all', value=Name(id='expand_all', ctx=Load())), keyword(arg='overflow', value=Constant(value='ignore'))])], keywords=[keyword(arg='soft_wrap', value=Constant(value=True))]))], decorator_list=[], returns=Constant(value=None)), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__')]), body=[ClassDef(name='BrokenRepr', bases=[], keywords=[], body=[FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=BinOp(left=Constant(value=1), op=Div(), right=Constant(value=0))), Return(value=Constant(value='this will fail'))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[]), ImportFrom(module='typing', names=[alias(name='NamedTuple')], level=0), ClassDef(name='StockKeepingUnit', bases=[Name(id='NamedTuple', ctx=Load())], keywords=[], body=[AnnAssign(target=Name(id='name', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='description', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='price', ctx=Store()), annotation=Name(id='float', ctx=Load()), simple=1), AnnAssign(target=Name(id='category', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='reviews', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), simple=1)], decorator_list=[]), Assign(targets=[Name(id='d', ctx=Store())], value=Call(func=Name(id='defaultdict', ctx=Load()), args=[Name(id='int', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='d', ctx=Load()), slice=Constant(value='foo'), ctx=Store())], value=Constant(value=5)), Assign(targets=[Name(id='data', ctx=Store())], value=Dict(keys=[Constant(value='foo'), Constant(value='bar'), Constant(value='defaultdict'), Constant(value='counter'), Constant(value='atomic'), Constant(value='namedtuple'), Constant(value='Broken')], values=[List(elts=[Constant(value=1), Constant(value='Hello World!'), Constant(value=100.123), Constant(value=323.232), Constant(value=432324.0), Set(elts=[Constant(value=5), Constant(value=6), Constant(value=7), Tuple(elts=[Constant(value=1), Constant(value=2), Constant(value=3), Constant(value=4)], ctx=Load()), Constant(value=8)])], ctx=Load()), Call(func=Name(id='frozenset', ctx=Load()), args=[Set(elts=[Constant(value=1), Constant(value=2), Constant(value=3)])], keywords=[]), Call(func=Name(id='defaultdict', ctx=Load()), args=[Name(id='list', ctx=Load()), Dict(keys=[Constant(value='crumble')], values=[List(elts=[Constant(value='apple'), Constant(value='rhubarb'), Constant(value='butter'), Constant(value='sugar'), Constant(value='flour')], ctx=Load())])], keywords=[]), Call(func=Name(id='Counter', ctx=Load()), args=[List(elts=[Constant(value='apple'), Constant(value='orange'), Constant(value='pear'), Constant(value='kumquat'), Constant(value='kumquat'), BinOp(left=Constant(value='durian'), op=Mult(), right=Constant(value=100))], ctx=Load())], keywords=[]), Tuple(elts=[Constant(value=False), Constant(value=True), Constant(value=None)], ctx=Load()), Call(func=Name(id='StockKeepingUnit', ctx=Load()), args=[Constant(value='Sparkling British Spring Water'), Constant(value='Carbonated spring water'), Constant(value=0.9), Constant(value='water'), List(elts=[Constant(value='its amazing!'), Constant(value='its terrible!')], ctx=Load())], keywords=[]), Call(func=Name(id='BrokenRepr', ctx=Load()), args=[], keywords=[])])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='foo'), ctx=Load()), attr='append', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])), ImportFrom(module='pip._vendor.rich', names=[alias(name='print')], level=0), ClassDef(name='Thing', bases=[], keywords=[], body=[FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value='Hello\x1b[38;5;239m World!'))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Name(id='Pretty', ctx=Load()), args=[Call(func=Name(id='Thing', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[]))], orelse=[])], type_ignores=[])