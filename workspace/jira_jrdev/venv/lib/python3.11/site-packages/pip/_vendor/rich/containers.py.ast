Module(body=[ImportFrom(module='itertools', names=[alias(name='zip_longest')], level=0), ImportFrom(module='typing', names=[alias(name='Iterator'), alias(name='Iterable'), alias(name='List'), alias(name='Optional'), alias(name='Union'), alias(name='overload'), alias(name='TypeVar'), alias(name='TYPE_CHECKING')], level=0), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='console', names=[alias(name='Console'), alias(name='ConsoleOptions'), alias(name='JustifyMethod'), alias(name='OverflowMethod'), alias(name='RenderResult'), alias(name='RenderableType')], level=1), ImportFrom(module='text', names=[alias(name='Text')], level=1)], orelse=[]), ImportFrom(module='cells', names=[alias(name='cell_len')], level=1), ImportFrom(module='measure', names=[alias(name='Measurement')], level=1), Assign(targets=[Name(id='T', ctx=Store())], value=Call(func=Name(id='TypeVar', ctx=Load()), args=[Constant(value='T')], keywords=[])), ClassDef(name='Renderables', bases=[], keywords=[], body=[Expr(value=Constant(value='A list subclass which renders its contents to the console.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='renderables', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Constant(value='RenderableType'), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_renderables', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Constant(value='RenderableType'), ctx=Load()), value=IfExp(test=Compare(left=Name(id='renderables', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Call(func=Name(id='list', ctx=Load()), args=[Name(id='renderables', ctx=Load())], keywords=[]), orelse=List(elts=[], ctx=Load())), simple=0)], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__rich_console__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='console', annotation=Constant(value='Console')), arg(arg='options', annotation=Constant(value='ConsoleOptions'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Console render method to insert line-breaks.')), Expr(value=YieldFrom(value=Attribute(value=Name(id='self', ctx=Load()), attr='_renderables', ctx=Load())))], decorator_list=[], returns=Constant(value='RenderResult')), FunctionDef(name='__rich_measure__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='console', annotation=Constant(value='Console')), arg(arg='options', annotation=Constant(value='ConsoleOptions'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='dimensions', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='Measurement', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='console', ctx=Load()), Name(id='options', ctx=Load()), Name(id='renderable', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='renderable', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_renderables', ctx=Load()), ifs=[], is_async=0)])), If(test=UnaryOp(op=Not(), operand=Name(id='dimensions', ctx=Load())), body=[Return(value=Call(func=Name(id='Measurement', ctx=Load()), args=[Constant(value=1), Constant(value=1)], keywords=[]))], orelse=[]), Assign(targets=[Name(id='_min', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[GeneratorExp(elt=Attribute(value=Name(id='dimension', ctx=Load()), attr='minimum', ctx=Load()), generators=[comprehension(target=Name(id='dimension', ctx=Store()), iter=Name(id='dimensions', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Name(id='_max', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[GeneratorExp(elt=Attribute(value=Name(id='dimension', ctx=Load()), attr='maximum', ctx=Load()), generators=[comprehension(target=Name(id='dimension', ctx=Store()), iter=Name(id='dimensions', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Return(value=Call(func=Name(id='Measurement', ctx=Load()), args=[Name(id='_min', ctx=Load()), Name(id='_max', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value='Measurement')), FunctionDef(name='append', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='renderable', annotation=Constant(value='RenderableType'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_renderables', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='renderable', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__iter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='iter', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_renderables', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Constant(value='RenderableType'), ctx=Load()))], decorator_list=[]), ClassDef(name='Lines', bases=[], keywords=[], body=[Expr(value=Constant(value='A list subclass which can render to the console.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='lines', annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Constant(value='Text'), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Tuple(elts=[], ctx=Load())]), body=[AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_lines', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Constant(value='Text'), ctx=Load()), value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='lines', ctx=Load())], keywords=[]), simple=0)], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[Constant(value='Lines('), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='_lines', ctx=Load()), conversion=114), Constant(value=')')]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='__iter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='iter', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_lines', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Constant(value='Text'), ctx=Load())), FunctionDef(name='__getitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='index', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=Ellipsis))], decorator_list=[Name(id='overload', ctx=Load())], returns=Constant(value='Text')), FunctionDef(name='__getitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='index', annotation=Name(id='slice', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=Ellipsis))], decorator_list=[Name(id='overload', ctx=Load())], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Constant(value='Text'), ctx=Load())), FunctionDef(name='__getitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='index', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='slice', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_lines', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Constant(value='Text'), Subscript(value=Name(id='List', ctx=Load()), slice=Constant(value='Text'), ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='__setitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='index', annotation=Name(id='int', ctx=Load())), arg(arg='value', annotation=Constant(value='Text'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_lines', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Store())], value=Name(id='value', ctx=Load())), Return(value=Name(id='self', ctx=Load()))], decorator_list=[], returns=Constant(value='Lines')), FunctionDef(name='__len__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_lines', ctx=Load()), attr='__len__', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='__rich_console__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='console', annotation=Constant(value='Console')), arg(arg='options', annotation=Constant(value='ConsoleOptions'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Console render method to insert line-breaks.')), Expr(value=YieldFrom(value=Attribute(value=Name(id='self', ctx=Load()), attr='_lines', ctx=Load())))], decorator_list=[], returns=Constant(value='RenderResult')), FunctionDef(name='append', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='line', annotation=Constant(value='Text'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_lines', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='extend', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='lines', annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Constant(value='Text'), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_lines', ctx=Load()), attr='extend', ctx=Load()), args=[Name(id='lines', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='pop', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='index', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[UnaryOp(op=USub(), operand=Constant(value=1))]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_lines', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='index', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value='Text')), FunctionDef(name='justify', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='console', annotation=Constant(value='Console')), arg(arg='width', annotation=Name(id='int', ctx=Load())), arg(arg='justify', annotation=Constant(value='JustifyMethod')), arg(arg='overflow', annotation=Constant(value='OverflowMethod'))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='left'), Constant(value='fold')]), body=[Expr(value=Constant(value='Justify and overflow text to a given width.\n\n        Args:\n            console (Console): Console instance.\n            width (int): Number of characters per line.\n            justify (str, optional): Default justify method for text: "left", "center", "full" or "right". Defaults to "left".\n            overflow (str, optional): Default overflow for text: "crop", "fold", or "ellipsis". Defaults to "fold".\n\n        ')), ImportFrom(module='text', names=[alias(name='Text')], level=1), If(test=Compare(left=Name(id='justify', ctx=Load()), ops=[Eq()], comparators=[Constant(value='left')]), body=[For(target=Name(id='line', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_lines', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='truncate', ctx=Load()), args=[Name(id='width', ctx=Load())], keywords=[keyword(arg='overflow', value=Name(id='overflow', ctx=Load())), keyword(arg='pad', value=Constant(value=True))]))], orelse=[])], orelse=[If(test=Compare(left=Name(id='justify', ctx=Load()), ops=[Eq()], comparators=[Constant(value='center')]), body=[For(target=Name(id='line', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_lines', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='rstrip', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='truncate', ctx=Load()), args=[Name(id='width', ctx=Load())], keywords=[keyword(arg='overflow', value=Name(id='overflow', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='pad_left', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='width', ctx=Load()), op=Sub(), right=Call(func=Name(id='cell_len', ctx=Load()), args=[Attribute(value=Name(id='line', ctx=Load()), attr='plain', ctx=Load())], keywords=[])), op=FloorDiv(), right=Constant(value=2))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='pad_right', ctx=Load()), args=[BinOp(left=Name(id='width', ctx=Load()), op=Sub(), right=Call(func=Name(id='cell_len', ctx=Load()), args=[Attribute(value=Name(id='line', ctx=Load()), attr='plain', ctx=Load())], keywords=[]))], keywords=[]))], orelse=[])], orelse=[If(test=Compare(left=Name(id='justify', ctx=Load()), ops=[Eq()], comparators=[Constant(value='right')]), body=[For(target=Name(id='line', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_lines', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='rstrip', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='truncate', ctx=Load()), args=[Name(id='width', ctx=Load())], keywords=[keyword(arg='overflow', value=Name(id='overflow', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='pad_left', ctx=Load()), args=[BinOp(left=Name(id='width', ctx=Load()), op=Sub(), right=Call(func=Name(id='cell_len', ctx=Load()), args=[Attribute(value=Name(id='line', ctx=Load()), attr='plain', ctx=Load())], keywords=[]))], keywords=[]))], orelse=[])], orelse=[If(test=Compare(left=Name(id='justify', ctx=Load()), ops=[Eq()], comparators=[Constant(value='full')]), body=[For(target=Tuple(elts=[Name(id='line_index', ctx=Store()), Name(id='line', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_lines', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='line_index', ctx=Load()), ops=[Eq()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_lines', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))]), body=[Break()], orelse=[]), Assign(targets=[Name(id='words', ctx=Store())], value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=' ')], keywords=[])), Assign(targets=[Name(id='words_size', ctx=Store())], value=Call(func=Name(id='sum', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='cell_len', ctx=Load()), args=[Attribute(value=Name(id='word', ctx=Load()), attr='plain', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='word', ctx=Store()), iter=Name(id='words', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Name(id='num_spaces', ctx=Store())], value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='words', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))), Assign(targets=[Name(id='spaces', ctx=Store())], value=ListComp(elt=Constant(value=1), generators=[comprehension(target=Name(id='_', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='num_spaces', ctx=Load())], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='index', ctx=Store())], value=Constant(value=0)), If(test=Name(id='spaces', ctx=Load()), body=[While(test=Compare(left=BinOp(left=Name(id='words_size', ctx=Load()), op=Add(), right=Name(id='num_spaces', ctx=Load())), ops=[Lt()], comparators=[Name(id='width', ctx=Load())]), body=[AugAssign(target=Subscript(value=Name(id='spaces', ctx=Load()), slice=BinOp(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='spaces', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='index', ctx=Load())), op=Sub(), right=Constant(value=1)), ctx=Store()), op=Add(), value=Constant(value=1)), AugAssign(target=Name(id='num_spaces', ctx=Store()), op=Add(), value=Constant(value=1)), Assign(targets=[Name(id='index', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='index', ctx=Load()), op=Add(), right=Constant(value=1)), op=Mod(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='spaces', ctx=Load())], keywords=[])))], orelse=[])], orelse=[]), AnnAssign(target=Name(id='tokens', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Text', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Tuple(elts=[Name(id='word', ctx=Store()), Name(id='next_word', ctx=Store())], ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Call(func=Name(id='zip_longest', ctx=Load()), args=[Name(id='words', ctx=Load()), Subscript(value=Name(id='words', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='tokens', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='word', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='index', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='spaces', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='style', ctx=Store())], value=Call(func=Attribute(value=Name(id='word', ctx=Load()), attr='get_style_at_offset', ctx=Load()), args=[Name(id='console', ctx=Load()), UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[])), Assign(targets=[Name(id='next_style', ctx=Store())], value=Call(func=Attribute(value=Name(id='next_word', ctx=Load()), attr='get_style_at_offset', ctx=Load()), args=[Name(id='console', ctx=Load()), Constant(value=0)], keywords=[])), Assign(targets=[Name(id='space_style', ctx=Store())], value=IfExp(test=Compare(left=Name(id='style', ctx=Load()), ops=[Eq()], comparators=[Name(id='next_style', ctx=Load())]), body=Name(id='style', ctx=Load()), orelse=Attribute(value=Name(id='line', ctx=Load()), attr='style', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='tokens', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='Text', ctx=Load()), args=[BinOp(left=Constant(value=' '), op=Mult(), right=Subscript(value=Name(id='spaces', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()))], keywords=[keyword(arg='style', value=Name(id='space_style', ctx=Load()))])], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Subscript(value=Name(id='self', ctx=Load()), slice=Name(id='line_index', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='Text', ctx=Load()), args=[Constant(value='')], keywords=[]), attr='join', ctx=Load()), args=[Name(id='tokens', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])])])])], decorator_list=[], returns=Constant(value=None))], decorator_list=[])], type_ignores=[])