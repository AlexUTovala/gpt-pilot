Module(body=[Expr(value=Constant(value='\n    pygments.sphinxext\n    ~~~~~~~~~~~~~~~~~~\n\n    Sphinx extension to generate automatic documentation of lexers,\n    formatters and filters.\n\n    :copyright: Copyright 2006-2023 by the Pygments team, see AUTHORS.\n    :license: BSD, see LICENSE for details.\n')), Import(names=[alias(name='sys')]), ImportFrom(module='docutils', names=[alias(name='nodes')], level=0), ImportFrom(module='docutils.statemachine', names=[alias(name='ViewList')], level=0), ImportFrom(module='docutils.parsers.rst', names=[alias(name='Directive')], level=0), ImportFrom(module='sphinx.util.nodes', names=[alias(name='nested_parse_with_titles')], level=0), Assign(targets=[Name(id='MODULEDOC', ctx=Store())], value=Constant(value='\n.. module:: %s\n\n%s\n%s\n')), Assign(targets=[Name(id='LEXERDOC', ctx=Store())], value=Constant(value='\n.. class:: %s\n\n    :Short names: %s\n    :Filenames:   %s\n    :MIME types:  %s\n\n    %s\n\n')), Assign(targets=[Name(id='FMTERDOC', ctx=Store())], value=Constant(value='\n.. class:: %s\n\n    :Short names: %s\n    :Filenames: %s\n\n    %s\n\n')), Assign(targets=[Name(id='FILTERDOC', ctx=Store())], value=Constant(value='\n.. class:: %s\n\n    :Name: %s\n\n    %s\n\n')), ClassDef(name='PygmentsDoc', bases=[Name(id='Directive', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    A directive to collect all lexers/formatters/filters and generate\n    autoclass directives for them.\n    ')), Assign(targets=[Name(id='has_content', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='required_arguments', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='optional_arguments', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='final_argument_whitespace', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='option_spec', ctx=Store())], value=Dict(keys=[], values=[])), FunctionDef(name='run', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='filenames', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='arguments', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Constant(value='lexers')]), body=[Assign(targets=[Name(id='out', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='document_lexers', ctx=Load()), args=[], keywords=[]))], orelse=[If(test=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='arguments', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Constant(value='formatters')]), body=[Assign(targets=[Name(id='out', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='document_formatters', ctx=Load()), args=[], keywords=[]))], orelse=[If(test=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='arguments', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Constant(value='filters')]), body=[Assign(targets=[Name(id='out', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='document_filters', ctx=Load()), args=[], keywords=[]))], orelse=[If(test=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='arguments', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Constant(value='lexers_overview')]), body=[Assign(targets=[Name(id='out', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='document_lexers_overview', ctx=Load()), args=[], keywords=[]))], orelse=[Raise(exc=Call(func=Name(id='Exception', ctx=Load()), args=[Constant(value='invalid argument for "pygmentsdoc" directive')], keywords=[]))])])])]), Assign(targets=[Name(id='node', ctx=Store())], value=Call(func=Attribute(value=Name(id='nodes', ctx=Load()), attr='compound', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='vl', ctx=Store())], value=Call(func=Name(id='ViewList', ctx=Load()), args=[Call(func=Attribute(value=Name(id='out', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='\n')], keywords=[])], keywords=[keyword(arg='source', value=Constant(value=''))])), Expr(value=Call(func=Name(id='nested_parse_with_titles', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='state', ctx=Load()), Name(id='vl', ctx=Load()), Name(id='node', ctx=Load())], keywords=[])), For(target=Name(id='fn', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='filenames', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='state', ctx=Load()), attr='document', ctx=Load()), attr='settings', ctx=Load()), attr='record_dependencies', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='fn', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Attribute(value=Name(id='node', ctx=Load()), attr='children', ctx=Load()))], decorator_list=[]), FunctionDef(name='document_lexers_overview', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Generate a tabular overview of all lexers.\n\n        The columns are the lexer name, the extensions handled by this lexer\n        (or "None"), the aliases and a link to the lexer class.')), ImportFrom(module='pip._vendor.pygments.lexers._mapping', names=[alias(name='LEXERS')], level=0), ImportFrom(module='pip._vendor.pygments.lexers', names=[alias(name='find_lexer_class')], level=0), Assign(targets=[Name(id='out', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='table', ctx=Store())], value=List(elts=[], ctx=Load())), FunctionDef(name='format_link', args=arguments(posonlyargs=[], args=[arg(arg='name'), arg(arg='url')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Name(id='url', ctx=Load()), body=[Return(value=JoinedStr(values=[Constant(value='`'), FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1), Constant(value=' <'), FormattedValue(value=Name(id='url', ctx=Load()), conversion=-1), Constant(value='>`_')]))], orelse=[]), Return(value=Name(id='name', ctx=Load()))], decorator_list=[]), For(target=Tuple(elts=[Name(id='classname', ctx=Store()), Name(id='data', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Attribute(value=Name(id='LEXERS', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[keyword(arg='key', value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Subscript(value=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value=1), ctx=Load()), slice=Constant(value=1), ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])))]), body=[Assign(targets=[Name(id='lexer_cls', ctx=Store())], value=Call(func=Name(id='find_lexer_class', ctx=Load()), args=[Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[])), Assign(targets=[Name(id='extensions', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='lexer_cls', ctx=Load()), attr='filenames', ctx=Load()), op=Add(), right=Attribute(value=Name(id='lexer_cls', ctx=Load()), attr='alias_filenames', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='table', ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='name'), Constant(value='extensions'), Constant(value='aliases'), Constant(value='class')], values=[Call(func=Name(id='format_link', ctx=Load()), args=[Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value=1), ctx=Load()), Attribute(value=Name(id='lexer_cls', ctx=Load()), attr='url', ctx=Load())], keywords=[]), BoolOp(op=Or(), values=[Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Name(id='extensions', ctx=Load())], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value='*'), Constant(value='\\*')], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value='_'), Constant(value='\\')], keywords=[]), Constant(value='None')]), Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value=2), ctx=Load())], keywords=[]), JoinedStr(values=[FormattedValue(value=Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value=0), ctx=Load()), conversion=-1), Constant(value='.'), FormattedValue(value=Name(id='classname', ctx=Load()), conversion=-1)])])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='column_names', ctx=Store())], value=List(elts=[Constant(value='name'), Constant(value='extensions'), Constant(value='aliases'), Constant(value='class')], ctx=Load())), Assign(targets=[Name(id='column_lengths', ctx=Store())], value=ListComp(elt=Call(func=Name(id='max', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='row', ctx=Load()), slice=Name(id='column', ctx=Load()), ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='row', ctx=Store()), iter=Name(id='table', ctx=Load()), ifs=[Subscript(value=Name(id='row', ctx=Load()), slice=Name(id='column', ctx=Load()), ctx=Load())], is_async=0)])], keywords=[]), generators=[comprehension(target=Name(id='column', ctx=Store()), iter=Name(id='column_names', ctx=Load()), ifs=[], is_async=0)])), FunctionDef(name='write_row', args=arguments(posonlyargs=[], args=[], vararg=arg(arg='columns'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Format a table row')), Assign(targets=[Name(id='out', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='l', ctx=Store()), Name(id='c', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Name(id='column_lengths', ctx=Load()), Name(id='columns', ctx=Load())], keywords=[]), body=[If(test=Name(id='c', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='out', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='c', ctx=Load()), attr='ljust', ctx=Load()), args=[Name(id='l', ctx=Load())], keywords=[])], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='out', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Constant(value=' '), op=Mult(), right=Name(id='l', ctx=Load()))], keywords=[]))])], orelse=[]), Return(value=Call(func=Attribute(value=Constant(value=' '), attr='join', ctx=Load()), args=[Name(id='out', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='write_seperator', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Write a table separator row')), Assign(targets=[Name(id='sep', ctx=Store())], value=ListComp(elt=BinOp(left=Constant(value='='), op=Mult(), right=Name(id='c', ctx=Load())), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Name(id='column_lengths', ctx=Load()), ifs=[], is_async=0)])), Return(value=Call(func=Name(id='write_row', ctx=Load()), args=[Starred(value=Name(id='sep', ctx=Load()), ctx=Load())], keywords=[]))], decorator_list=[]), Expr(value=Call(func=Attribute(value=Name(id='out', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='write_seperator', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='out', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='write_row', ctx=Load()), args=[Constant(value='Name'), Constant(value='Extension(s)'), Constant(value='Short name(s)'), Constant(value='Lexer class')], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='out', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='write_seperator', ctx=Load()), args=[], keywords=[])], keywords=[])), For(target=Name(id='row', ctx=Store()), iter=Name(id='table', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='out', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='write_row', ctx=Load()), args=[Subscript(value=Name(id='row', ctx=Load()), slice=Constant(value='name'), ctx=Load()), Subscript(value=Name(id='row', ctx=Load()), slice=Constant(value='extensions'), ctx=Load()), Subscript(value=Name(id='row', ctx=Load()), slice=Constant(value='aliases'), ctx=Load()), JoinedStr(values=[Constant(value=':class:`~'), FormattedValue(value=Subscript(value=Name(id='row', ctx=Load()), slice=Constant(value='class'), ctx=Load()), conversion=-1), Constant(value='`')])], keywords=[])], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='out', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='write_seperator', ctx=Load()), args=[], keywords=[])], keywords=[])), Return(value=Call(func=Attribute(value=Constant(value='\n'), attr='join', ctx=Load()), args=[Name(id='out', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='document_lexers', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[ImportFrom(module='pip._vendor.pygments.lexers._mapping', names=[alias(name='LEXERS')], level=0), Assign(targets=[Name(id='out', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='modules', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='moduledocstrings', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='classname', ctx=Store()), Name(id='data', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Attribute(value=Name(id='LEXERS', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[keyword(arg='key', value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value=0), ctx=Load())))]), body=[Assign(targets=[Name(id='module', ctx=Store())], value=Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='mod', ctx=Store())], value=Call(func=Name(id='__import__', ctx=Load()), args=[Name(id='module', ctx=Load()), Constant(value=None), Constant(value=None), List(elts=[Name(id='classname', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='filenames', ctx=Load()), attr='add', ctx=Load()), args=[Attribute(value=Name(id='mod', ctx=Load()), attr='__file__', ctx=Load())], keywords=[])), Assign(targets=[Name(id='cls', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='mod', ctx=Load()), Name(id='classname', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='cls', ctx=Load()), attr='__doc__', ctx=Load())), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[BinOp(left=Constant(value='Warning: %s does not have a docstring.'), op=Mod(), right=Name(id='classname', ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Name(id='docstring', ctx=Store())], value=Attribute(value=Name(id='cls', ctx=Load()), attr='__doc__', ctx=Load())), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='docstring', ctx=Load()), Name(id='bytes', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='docstring', ctx=Store())], value=Call(func=Attribute(value=Name(id='docstring', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='utf8')], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='modules', ctx=Load()), attr='setdefault', ctx=Load()), args=[Name(id='module', ctx=Load()), List(elts=[], ctx=Load())], keywords=[]), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='classname', ctx=Load()), BoolOp(op=Or(), values=[Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value=2), ctx=Load())], keywords=[]), Constant(value='None')]), BoolOp(op=Or(), values=[Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value=3), ctx=Load())], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value='*'), Constant(value='\\*')], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value='_'), Constant(value='\\')], keywords=[]), Constant(value='None')]), BoolOp(op=Or(), values=[Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value=4), ctx=Load())], keywords=[]), Constant(value='None')]), Name(id='docstring', ctx=Load())], ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='module', ctx=Load()), ops=[NotIn()], comparators=[Name(id='moduledocstrings', ctx=Load())]), body=[Assign(targets=[Name(id='moddoc', ctx=Store())], value=Attribute(value=Name(id='mod', ctx=Load()), attr='__doc__', ctx=Load())), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='moddoc', ctx=Load()), Name(id='bytes', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='moddoc', ctx=Store())], value=Call(func=Attribute(value=Name(id='moddoc', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='utf8')], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='moduledocstrings', ctx=Load()), slice=Name(id='module', ctx=Load()), ctx=Store())], value=Name(id='moddoc', ctx=Load()))], orelse=[])], orelse=[]), For(target=Tuple(elts=[Name(id='module', ctx=Store()), Name(id='lexers', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Attribute(value=Name(id='modules', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[keyword(arg='key', value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value=0), ctx=Load())))]), body=[If(test=Compare(left=Subscript(value=Name(id='moduledocstrings', ctx=Load()), slice=Name(id='module', ctx=Load()), ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='Exception', ctx=Load()), args=[BinOp(left=Constant(value='Missing docstring for %s'), op=Mod(), right=Tuple(elts=[Name(id='module', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Name(id='heading', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Subscript(value=Call(func=Attribute(value=Subscript(value=Name(id='moduledocstrings', ctx=Load()), slice=Name(id='module', ctx=Load()), ctx=Load()), attr='splitlines', ctx=Load()), args=[], keywords=[]), slice=Constant(value=4), ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]), attr='rstrip', ctx=Load()), args=[Constant(value='.')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='out', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Name(id='MODULEDOC', ctx=Load()), op=Mod(), right=Tuple(elts=[Name(id='module', ctx=Load()), Name(id='heading', ctx=Load()), BinOp(left=Constant(value='-'), op=Mult(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='heading', ctx=Load())], keywords=[]))], ctx=Load()))], keywords=[])), For(target=Name(id='data', ctx=Store()), iter=Name(id='lexers', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='out', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Name(id='LEXERDOC', ctx=Load()), op=Mod(), right=Name(id='data', ctx=Load()))], keywords=[]))], orelse=[])], orelse=[]), Return(value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Name(id='out', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='document_formatters', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[ImportFrom(module='pip._vendor.pygments.formatters', names=[alias(name='FORMATTERS')], level=0), Assign(targets=[Name(id='out', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='classname', ctx=Store()), Name(id='data', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Attribute(value=Name(id='FORMATTERS', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[keyword(arg='key', value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value=0), ctx=Load())))]), body=[Assign(targets=[Name(id='module', ctx=Store())], value=Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='mod', ctx=Store())], value=Call(func=Name(id='__import__', ctx=Load()), args=[Name(id='module', ctx=Load()), Constant(value=None), Constant(value=None), List(elts=[Name(id='classname', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='filenames', ctx=Load()), attr='add', ctx=Load()), args=[Attribute(value=Name(id='mod', ctx=Load()), attr='__file__', ctx=Load())], keywords=[])), Assign(targets=[Name(id='cls', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='mod', ctx=Load()), Name(id='classname', ctx=Load())], keywords=[])), Assign(targets=[Name(id='docstring', ctx=Store())], value=Attribute(value=Name(id='cls', ctx=Load()), attr='__doc__', ctx=Load())), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='docstring', ctx=Load()), Name(id='bytes', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='docstring', ctx=Store())], value=Call(func=Attribute(value=Name(id='docstring', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='utf8')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='heading', ctx=Store())], value=Attribute(value=Name(id='cls', ctx=Load()), attr='__name__', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='out', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Name(id='FMTERDOC', ctx=Load()), op=Mod(), right=Tuple(elts=[Name(id='heading', ctx=Load()), BoolOp(op=Or(), values=[Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value=2), ctx=Load())], keywords=[]), Constant(value='None')]), BoolOp(op=Or(), values=[Call(func=Attribute(value=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value=3), ctx=Load())], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value='*'), Constant(value='\\*')], keywords=[]), Constant(value='None')]), Name(id='docstring', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Name(id='out', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='document_filters', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[ImportFrom(module='pip._vendor.pygments.filters', names=[alias(name='FILTERS')], level=0), Assign(targets=[Name(id='out', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='cls', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='FILTERS', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='filenames', ctx=Load()), attr='add', ctx=Load()), args=[Attribute(value=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='modules', ctx=Load()), slice=Attribute(value=Name(id='cls', ctx=Load()), attr='__module__', ctx=Load()), ctx=Load()), attr='__file__', ctx=Load())], keywords=[])), Assign(targets=[Name(id='docstring', ctx=Store())], value=Attribute(value=Name(id='cls', ctx=Load()), attr='__doc__', ctx=Load())), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='docstring', ctx=Load()), Name(id='bytes', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='docstring', ctx=Store())], value=Call(func=Attribute(value=Name(id='docstring', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='utf8')], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='out', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Name(id='FILTERDOC', ctx=Load()), op=Mod(), right=Tuple(elts=[Attribute(value=Name(id='cls', ctx=Load()), attr='__name__', ctx=Load()), Name(id='name', ctx=Load()), Name(id='docstring', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Name(id='out', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), FunctionDef(name='setup', args=arguments(posonlyargs=[], args=[arg(arg='app')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='app', ctx=Load()), attr='add_directive', ctx=Load()), args=[Constant(value='pygmentsdoc'), Name(id='PygmentsDoc', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])