Module(body=[Expr(value=Constant(value='Light wrapper around the Win32 Console API - this module should only be imported on Windows\n\nThe API that this module wraps is documented at https://docs.microsoft.com/en-us/windows/console/console-functions\n')), Import(names=[alias(name='ctypes')]), Import(names=[alias(name='sys')]), ImportFrom(module='typing', names=[alias(name='Any')], level=0), AnnAssign(target=Name(id='windll', ctx=Store()), annotation=Name(id='Any', ctx=Load()), value=Constant(value=None), simple=1), If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), ops=[Eq()], comparators=[Constant(value='win32')]), body=[Assign(targets=[Name(id='windll', ctx=Store())], value=Call(func=Attribute(value=Name(id='ctypes', ctx=Load()), attr='LibraryLoader', ctx=Load()), args=[Attribute(value=Name(id='ctypes', ctx=Load()), attr='WinDLL', ctx=Load())], keywords=[]))], orelse=[Raise(exc=Call(func=Name(id='ImportError', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='__name__', ctx=Load()), conversion=-1), Constant(value=' can only be imported on Windows')])], keywords=[]))]), Import(names=[alias(name='time')]), ImportFrom(module='ctypes', names=[alias(name='Structure'), alias(name='byref'), alias(name='wintypes')], level=0), ImportFrom(module='typing', names=[alias(name='IO'), alias(name='NamedTuple'), alias(name='Type'), alias(name='cast')], level=0), ImportFrom(module='pip._vendor.rich.color', names=[alias(name='ColorSystem')], level=0), ImportFrom(module='pip._vendor.rich.style', names=[alias(name='Style')], level=0), Assign(targets=[Name(id='STDOUT', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=11))), Assign(targets=[Name(id='ENABLE_VIRTUAL_TERMINAL_PROCESSING', ctx=Store())], value=Constant(value=4)), Assign(targets=[Name(id='COORD', ctx=Store())], value=Attribute(value=Name(id='wintypes', ctx=Load()), attr='_COORD', ctx=Load())), ClassDef(name='LegacyWindowsError', bases=[Name(id='Exception', ctx=Load())], keywords=[], body=[Pass()], decorator_list=[]), ClassDef(name='WindowsCoordinates', bases=[Name(id='NamedTuple', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Coordinates in the Windows Console API are (y, x), not (x, y).\n    This class is intended to prevent that confusion.\n    Rows and columns are indexed from 0.\n    This class can be used in place of wintypes._COORD in arguments and argtypes.\n    ')), AnnAssign(target=Name(id='row', ctx=Store()), annotation=Name(id='int', ctx=Load()), simple=1), AnnAssign(target=Name(id='col', ctx=Store()), annotation=Name(id='int', ctx=Load()), simple=1), FunctionDef(name='from_param', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='value', annotation=Constant(value='WindowsCoordinates'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Converts a WindowsCoordinates into a wintypes _COORD structure.\n        This classmethod is internally called by ctypes to perform the conversion.\n\n        Args:\n            value (WindowsCoordinates): The input coordinates to convert.\n\n        Returns:\n            wintypes._COORD: The converted coordinates struct.\n        ')), Return(value=Call(func=Name(id='COORD', ctx=Load()), args=[Attribute(value=Name(id='value', ctx=Load()), attr='col', ctx=Load()), Attribute(value=Name(id='value', ctx=Load()), attr='row', ctx=Load())], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Name(id='COORD', ctx=Load()))], decorator_list=[]), ClassDef(name='CONSOLE_SCREEN_BUFFER_INFO', bases=[Name(id='Structure', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='_fields_', ctx=Store())], value=List(elts=[Tuple(elts=[Constant(value='dwSize'), Name(id='COORD', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='dwCursorPosition'), Name(id='COORD', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='wAttributes'), Attribute(value=Name(id='wintypes', ctx=Load()), attr='WORD', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='srWindow'), Attribute(value=Name(id='wintypes', ctx=Load()), attr='SMALL_RECT', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='dwMaximumWindowSize'), Name(id='COORD', ctx=Load())], ctx=Load())], ctx=Load()))], decorator_list=[]), ClassDef(name='CONSOLE_CURSOR_INFO', bases=[Attribute(value=Name(id='ctypes', ctx=Load()), attr='Structure', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='_fields_', ctx=Store())], value=List(elts=[Tuple(elts=[Constant(value='dwSize'), Attribute(value=Name(id='wintypes', ctx=Load()), attr='DWORD', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='bVisible'), Attribute(value=Name(id='wintypes', ctx=Load()), attr='BOOL', ctx=Load())], ctx=Load())], ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='_GetStdHandle', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='windll', ctx=Load()), attr='kernel32', ctx=Load()), attr='GetStdHandle', ctx=Load())), Assign(targets=[Attribute(value=Name(id='_GetStdHandle', ctx=Load()), attr='argtypes', ctx=Store())], value=List(elts=[Attribute(value=Name(id='wintypes', ctx=Load()), attr='DWORD', ctx=Load())], ctx=Load())), Assign(targets=[Attribute(value=Name(id='_GetStdHandle', ctx=Load()), attr='restype', ctx=Store())], value=Attribute(value=Name(id='wintypes', ctx=Load()), attr='HANDLE', ctx=Load())), FunctionDef(name='GetStdHandle', args=arguments(posonlyargs=[], args=[arg(arg='handle', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='STDOUT', ctx=Load())]), body=[Expr(value=Constant(value='Retrieves a handle to the specified standard device (standard input, standard output, or standard error).\n\n    Args:\n        handle (int): Integer identifier for the handle. Defaults to -11 (stdout).\n\n    Returns:\n        wintypes.HANDLE: The handle\n    ')), Return(value=Call(func=Name(id='cast', ctx=Load()), args=[Attribute(value=Name(id='wintypes', ctx=Load()), attr='HANDLE', ctx=Load()), Call(func=Name(id='_GetStdHandle', ctx=Load()), args=[Name(id='handle', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Attribute(value=Name(id='wintypes', ctx=Load()), attr='HANDLE', ctx=Load())), Assign(targets=[Name(id='_GetConsoleMode', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='windll', ctx=Load()), attr='kernel32', ctx=Load()), attr='GetConsoleMode', ctx=Load())), Assign(targets=[Attribute(value=Name(id='_GetConsoleMode', ctx=Load()), attr='argtypes', ctx=Store())], value=List(elts=[Attribute(value=Name(id='wintypes', ctx=Load()), attr='HANDLE', ctx=Load()), Attribute(value=Name(id='wintypes', ctx=Load()), attr='LPDWORD', ctx=Load())], ctx=Load())), Assign(targets=[Attribute(value=Name(id='_GetConsoleMode', ctx=Load()), attr='restype', ctx=Store())], value=Attribute(value=Name(id='wintypes', ctx=Load()), attr='BOOL', ctx=Load())), FunctionDef(name='GetConsoleMode', args=arguments(posonlyargs=[], args=[arg(arg='std_handle', annotation=Attribute(value=Name(id='wintypes', ctx=Load()), attr='HANDLE', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Retrieves the current input mode of a console's input buffer\n    or the current output mode of a console screen buffer.\n\n    Args:\n        std_handle (wintypes.HANDLE): A handle to the console input buffer or the console screen buffer.\n\n    Raises:\n        LegacyWindowsError: If any error occurs while calling the Windows console API.\n\n    Returns:\n        int: Value representing the current console mode as documented at\n            https://docs.microsoft.com/en-us/windows/console/getconsolemode#parameters\n    ")), Assign(targets=[Name(id='console_mode', ctx=Store())], value=Call(func=Attribute(value=Name(id='wintypes', ctx=Load()), attr='DWORD', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='success', ctx=Store())], value=Call(func=Name(id='bool', ctx=Load()), args=[Call(func=Name(id='_GetConsoleMode', ctx=Load()), args=[Name(id='std_handle', ctx=Load()), Name(id='console_mode', ctx=Load())], keywords=[])], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='success', ctx=Load())), body=[Raise(exc=Call(func=Name(id='LegacyWindowsError', ctx=Load()), args=[Constant(value='Unable to get legacy Windows Console Mode')], keywords=[]))], orelse=[]), Return(value=Attribute(value=Name(id='console_mode', ctx=Load()), attr='value', ctx=Load()))], decorator_list=[], returns=Name(id='int', ctx=Load())), Assign(targets=[Name(id='_FillConsoleOutputCharacterW', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='windll', ctx=Load()), attr='kernel32', ctx=Load()), attr='FillConsoleOutputCharacterW', ctx=Load())), Assign(targets=[Attribute(value=Name(id='_FillConsoleOutputCharacterW', ctx=Load()), attr='argtypes', ctx=Store())], value=List(elts=[Attribute(value=Name(id='wintypes', ctx=Load()), attr='HANDLE', ctx=Load()), Attribute(value=Name(id='ctypes', ctx=Load()), attr='c_char', ctx=Load()), Attribute(value=Name(id='wintypes', ctx=Load()), attr='DWORD', ctx=Load()), Call(func=Name(id='cast', ctx=Load()), args=[Subscript(value=Name(id='Type', ctx=Load()), slice=Name(id='COORD', ctx=Load()), ctx=Load()), Name(id='WindowsCoordinates', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='ctypes', ctx=Load()), attr='POINTER', ctx=Load()), args=[Attribute(value=Name(id='wintypes', ctx=Load()), attr='DWORD', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Attribute(value=Name(id='_FillConsoleOutputCharacterW', ctx=Load()), attr='restype', ctx=Store())], value=Attribute(value=Name(id='wintypes', ctx=Load()), attr='BOOL', ctx=Load())), FunctionDef(name='FillConsoleOutputCharacter', args=arguments(posonlyargs=[], args=[arg(arg='std_handle', annotation=Attribute(value=Name(id='wintypes', ctx=Load()), attr='HANDLE', ctx=Load())), arg(arg='char', annotation=Name(id='str', ctx=Load())), arg(arg='length', annotation=Name(id='int', ctx=Load())), arg(arg='start', annotation=Name(id='WindowsCoordinates', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Writes a character to the console screen buffer a specified number of times, beginning at the specified coordinates.\n\n    Args:\n        std_handle (wintypes.HANDLE): A handle to the console input buffer or the console screen buffer.\n        char (str): The character to write. Must be a string of length 1.\n        length (int): The number of times to write the character.\n        start (WindowsCoordinates): The coordinates to start writing at.\n\n    Returns:\n        int: The number of characters written.\n    ')), Assign(targets=[Name(id='character', ctx=Store())], value=Call(func=Attribute(value=Name(id='ctypes', ctx=Load()), attr='c_char', ctx=Load()), args=[Call(func=Attribute(value=Name(id='char', ctx=Load()), attr='encode', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='num_characters', ctx=Store())], value=Call(func=Attribute(value=Name(id='wintypes', ctx=Load()), attr='DWORD', ctx=Load()), args=[Name(id='length', ctx=Load())], keywords=[])), Assign(targets=[Name(id='num_written', ctx=Store())], value=Call(func=Attribute(value=Name(id='wintypes', ctx=Load()), attr='DWORD', ctx=Load()), args=[Constant(value=0)], keywords=[])), Expr(value=Call(func=Name(id='_FillConsoleOutputCharacterW', ctx=Load()), args=[Name(id='std_handle', ctx=Load()), Name(id='character', ctx=Load()), Name(id='num_characters', ctx=Load()), Name(id='start', ctx=Load()), Call(func=Name(id='byref', ctx=Load()), args=[Name(id='num_written', ctx=Load())], keywords=[])], keywords=[])), Return(value=Attribute(value=Name(id='num_written', ctx=Load()), attr='value', ctx=Load()))], decorator_list=[], returns=Name(id='int', ctx=Load())), Assign(targets=[Name(id='_FillConsoleOutputAttribute', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='windll', ctx=Load()), attr='kernel32', ctx=Load()), attr='FillConsoleOutputAttribute', ctx=Load())), Assign(targets=[Attribute(value=Name(id='_FillConsoleOutputAttribute', ctx=Load()), attr='argtypes', ctx=Store())], value=List(elts=[Attribute(value=Name(id='wintypes', ctx=Load()), attr='HANDLE', ctx=Load()), Attribute(value=Name(id='wintypes', ctx=Load()), attr='WORD', ctx=Load()), Attribute(value=Name(id='wintypes', ctx=Load()), attr='DWORD', ctx=Load()), Call(func=Name(id='cast', ctx=Load()), args=[Subscript(value=Name(id='Type', ctx=Load()), slice=Name(id='COORD', ctx=Load()), ctx=Load()), Name(id='WindowsCoordinates', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='ctypes', ctx=Load()), attr='POINTER', ctx=Load()), args=[Attribute(value=Name(id='wintypes', ctx=Load()), attr='DWORD', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Attribute(value=Name(id='_FillConsoleOutputAttribute', ctx=Load()), attr='restype', ctx=Store())], value=Attribute(value=Name(id='wintypes', ctx=Load()), attr='BOOL', ctx=Load())), FunctionDef(name='FillConsoleOutputAttribute', args=arguments(posonlyargs=[], args=[arg(arg='std_handle', annotation=Attribute(value=Name(id='wintypes', ctx=Load()), attr='HANDLE', ctx=Load())), arg(arg='attributes', annotation=Name(id='int', ctx=Load())), arg(arg='length', annotation=Name(id='int', ctx=Load())), arg(arg='start', annotation=Name(id='WindowsCoordinates', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Sets the character attributes for a specified number of character cells,\n    beginning at the specified coordinates in a screen buffer.\n\n    Args:\n        std_handle (wintypes.HANDLE): A handle to the console input buffer or the console screen buffer.\n        attributes (int): Integer value representing the foreground and background colours of the cells.\n        length (int): The number of cells to set the output attribute of.\n        start (WindowsCoordinates): The coordinates of the first cell whose attributes are to be set.\n\n    Returns:\n        int: The number of cells whose attributes were actually set.\n    ')), Assign(targets=[Name(id='num_cells', ctx=Store())], value=Call(func=Attribute(value=Name(id='wintypes', ctx=Load()), attr='DWORD', ctx=Load()), args=[Name(id='length', ctx=Load())], keywords=[])), Assign(targets=[Name(id='style_attrs', ctx=Store())], value=Call(func=Attribute(value=Name(id='wintypes', ctx=Load()), attr='WORD', ctx=Load()), args=[Name(id='attributes', ctx=Load())], keywords=[])), Assign(targets=[Name(id='num_written', ctx=Store())], value=Call(func=Attribute(value=Name(id='wintypes', ctx=Load()), attr='DWORD', ctx=Load()), args=[Constant(value=0)], keywords=[])), Expr(value=Call(func=Name(id='_FillConsoleOutputAttribute', ctx=Load()), args=[Name(id='std_handle', ctx=Load()), Name(id='style_attrs', ctx=Load()), Name(id='num_cells', ctx=Load()), Name(id='start', ctx=Load()), Call(func=Name(id='byref', ctx=Load()), args=[Name(id='num_written', ctx=Load())], keywords=[])], keywords=[])), Return(value=Attribute(value=Name(id='num_written', ctx=Load()), attr='value', ctx=Load()))], decorator_list=[], returns=Name(id='int', ctx=Load())), Assign(targets=[Name(id='_SetConsoleTextAttribute', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='windll', ctx=Load()), attr='kernel32', ctx=Load()), attr='SetConsoleTextAttribute', ctx=Load())), Assign(targets=[Attribute(value=Name(id='_SetConsoleTextAttribute', ctx=Load()), attr='argtypes', ctx=Store())], value=List(elts=[Attribute(value=Name(id='wintypes', ctx=Load()), attr='HANDLE', ctx=Load()), Attribute(value=Name(id='wintypes', ctx=Load()), attr='WORD', ctx=Load())], ctx=Load())), Assign(targets=[Attribute(value=Name(id='_SetConsoleTextAttribute', ctx=Load()), attr='restype', ctx=Store())], value=Attribute(value=Name(id='wintypes', ctx=Load()), attr='BOOL', ctx=Load())), FunctionDef(name='SetConsoleTextAttribute', args=arguments(posonlyargs=[], args=[arg(arg='std_handle', annotation=Attribute(value=Name(id='wintypes', ctx=Load()), attr='HANDLE', ctx=Load())), arg(arg='attributes', annotation=Attribute(value=Name(id='wintypes', ctx=Load()), attr='WORD', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Set the colour attributes for all text written after this function is called.\n\n    Args:\n        std_handle (wintypes.HANDLE): A handle to the console input buffer or the console screen buffer.\n        attributes (int): Integer value representing the foreground and background colours.\n\n\n    Returns:\n        bool: True if the attribute was set successfully, otherwise False.\n    ')), Return(value=Call(func=Name(id='bool', ctx=Load()), args=[Call(func=Name(id='_SetConsoleTextAttribute', ctx=Load()), args=[Name(id='std_handle', ctx=Load()), Name(id='attributes', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), Assign(targets=[Name(id='_GetConsoleScreenBufferInfo', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='windll', ctx=Load()), attr='kernel32', ctx=Load()), attr='GetConsoleScreenBufferInfo', ctx=Load())), Assign(targets=[Attribute(value=Name(id='_GetConsoleScreenBufferInfo', ctx=Load()), attr='argtypes', ctx=Store())], value=List(elts=[Attribute(value=Name(id='wintypes', ctx=Load()), attr='HANDLE', ctx=Load()), Call(func=Attribute(value=Name(id='ctypes', ctx=Load()), attr='POINTER', ctx=Load()), args=[Name(id='CONSOLE_SCREEN_BUFFER_INFO', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Attribute(value=Name(id='_GetConsoleScreenBufferInfo', ctx=Load()), attr='restype', ctx=Store())], value=Attribute(value=Name(id='wintypes', ctx=Load()), attr='BOOL', ctx=Load())), FunctionDef(name='GetConsoleScreenBufferInfo', args=arguments(posonlyargs=[], args=[arg(arg='std_handle', annotation=Attribute(value=Name(id='wintypes', ctx=Load()), attr='HANDLE', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Retrieves information about the specified console screen buffer.\n\n    Args:\n        std_handle (wintypes.HANDLE): A handle to the console input buffer or the console screen buffer.\n\n    Returns:\n        CONSOLE_SCREEN_BUFFER_INFO: A CONSOLE_SCREEN_BUFFER_INFO ctype struct contain information about\n            screen size, cursor position, colour attributes, and more.')), Assign(targets=[Name(id='console_screen_buffer_info', ctx=Store())], value=Call(func=Name(id='CONSOLE_SCREEN_BUFFER_INFO', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Name(id='_GetConsoleScreenBufferInfo', ctx=Load()), args=[Name(id='std_handle', ctx=Load()), Call(func=Name(id='byref', ctx=Load()), args=[Name(id='console_screen_buffer_info', ctx=Load())], keywords=[])], keywords=[])), Return(value=Name(id='console_screen_buffer_info', ctx=Load()))], decorator_list=[], returns=Name(id='CONSOLE_SCREEN_BUFFER_INFO', ctx=Load())), Assign(targets=[Name(id='_SetConsoleCursorPosition', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='windll', ctx=Load()), attr='kernel32', ctx=Load()), attr='SetConsoleCursorPosition', ctx=Load())), Assign(targets=[Attribute(value=Name(id='_SetConsoleCursorPosition', ctx=Load()), attr='argtypes', ctx=Store())], value=List(elts=[Attribute(value=Name(id='wintypes', ctx=Load()), attr='HANDLE', ctx=Load()), Call(func=Name(id='cast', ctx=Load()), args=[Subscript(value=Name(id='Type', ctx=Load()), slice=Name(id='COORD', ctx=Load()), ctx=Load()), Name(id='WindowsCoordinates', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Attribute(value=Name(id='_SetConsoleCursorPosition', ctx=Load()), attr='restype', ctx=Store())], value=Attribute(value=Name(id='wintypes', ctx=Load()), attr='BOOL', ctx=Load())), FunctionDef(name='SetConsoleCursorPosition', args=arguments(posonlyargs=[], args=[arg(arg='std_handle', annotation=Attribute(value=Name(id='wintypes', ctx=Load()), attr='HANDLE', ctx=Load())), arg(arg='coords', annotation=Name(id='WindowsCoordinates', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Set the position of the cursor in the console screen\n\n    Args:\n        std_handle (wintypes.HANDLE): A handle to the console input buffer or the console screen buffer.\n        coords (WindowsCoordinates): The coordinates to move the cursor to.\n\n    Returns:\n        bool: True if the function succeeds, otherwise False.\n    ')), Return(value=Call(func=Name(id='bool', ctx=Load()), args=[Call(func=Name(id='_SetConsoleCursorPosition', ctx=Load()), args=[Name(id='std_handle', ctx=Load()), Name(id='coords', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), Assign(targets=[Name(id='_GetConsoleCursorInfo', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='windll', ctx=Load()), attr='kernel32', ctx=Load()), attr='GetConsoleCursorInfo', ctx=Load())), Assign(targets=[Attribute(value=Name(id='_GetConsoleCursorInfo', ctx=Load()), attr='argtypes', ctx=Store())], value=List(elts=[Attribute(value=Name(id='wintypes', ctx=Load()), attr='HANDLE', ctx=Load()), Call(func=Attribute(value=Name(id='ctypes', ctx=Load()), attr='POINTER', ctx=Load()), args=[Name(id='CONSOLE_CURSOR_INFO', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Attribute(value=Name(id='_GetConsoleCursorInfo', ctx=Load()), attr='restype', ctx=Store())], value=Attribute(value=Name(id='wintypes', ctx=Load()), attr='BOOL', ctx=Load())), FunctionDef(name='GetConsoleCursorInfo', args=arguments(posonlyargs=[], args=[arg(arg='std_handle', annotation=Attribute(value=Name(id='wintypes', ctx=Load()), attr='HANDLE', ctx=Load())), arg(arg='cursor_info', annotation=Name(id='CONSOLE_CURSOR_INFO', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Get the cursor info - used to get cursor visibility and width\n\n    Args:\n        std_handle (wintypes.HANDLE): A handle to the console input buffer or the console screen buffer.\n        cursor_info (CONSOLE_CURSOR_INFO): CONSOLE_CURSOR_INFO ctype struct that receives information\n            about the console's cursor.\n\n    Returns:\n          bool: True if the function succeeds, otherwise False.\n    ")), Return(value=Call(func=Name(id='bool', ctx=Load()), args=[Call(func=Name(id='_GetConsoleCursorInfo', ctx=Load()), args=[Name(id='std_handle', ctx=Load()), Call(func=Name(id='byref', ctx=Load()), args=[Name(id='cursor_info', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), Assign(targets=[Name(id='_SetConsoleCursorInfo', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='windll', ctx=Load()), attr='kernel32', ctx=Load()), attr='SetConsoleCursorInfo', ctx=Load())), Assign(targets=[Attribute(value=Name(id='_SetConsoleCursorInfo', ctx=Load()), attr='argtypes', ctx=Store())], value=List(elts=[Attribute(value=Name(id='wintypes', ctx=Load()), attr='HANDLE', ctx=Load()), Call(func=Attribute(value=Name(id='ctypes', ctx=Load()), attr='POINTER', ctx=Load()), args=[Name(id='CONSOLE_CURSOR_INFO', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Attribute(value=Name(id='_SetConsoleCursorInfo', ctx=Load()), attr='restype', ctx=Store())], value=Attribute(value=Name(id='wintypes', ctx=Load()), attr='BOOL', ctx=Load())), FunctionDef(name='SetConsoleCursorInfo', args=arguments(posonlyargs=[], args=[arg(arg='std_handle', annotation=Attribute(value=Name(id='wintypes', ctx=Load()), attr='HANDLE', ctx=Load())), arg(arg='cursor_info', annotation=Name(id='CONSOLE_CURSOR_INFO', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Set the cursor info - used for adjusting cursor visibility and width\n\n    Args:\n        std_handle (wintypes.HANDLE): A handle to the console input buffer or the console screen buffer.\n        cursor_info (CONSOLE_CURSOR_INFO): CONSOLE_CURSOR_INFO ctype struct containing the new cursor info.\n\n    Returns:\n          bool: True if the function succeeds, otherwise False.\n    ')), Return(value=Call(func=Name(id='bool', ctx=Load()), args=[Call(func=Name(id='_SetConsoleCursorInfo', ctx=Load()), args=[Name(id='std_handle', ctx=Load()), Call(func=Name(id='byref', ctx=Load()), args=[Name(id='cursor_info', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), Assign(targets=[Name(id='_SetConsoleTitle', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='windll', ctx=Load()), attr='kernel32', ctx=Load()), attr='SetConsoleTitleW', ctx=Load())), Assign(targets=[Attribute(value=Name(id='_SetConsoleTitle', ctx=Load()), attr='argtypes', ctx=Store())], value=List(elts=[Attribute(value=Name(id='wintypes', ctx=Load()), attr='LPCWSTR', ctx=Load())], ctx=Load())), Assign(targets=[Attribute(value=Name(id='_SetConsoleTitle', ctx=Load()), attr='restype', ctx=Store())], value=Attribute(value=Name(id='wintypes', ctx=Load()), attr='BOOL', ctx=Load())), FunctionDef(name='SetConsoleTitle', args=arguments(posonlyargs=[], args=[arg(arg='title', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Sets the title of the current console window\n\n    Args:\n        title (str): The new title of the console window.\n\n    Returns:\n        bool: True if the function succeeds, otherwise False.\n    ')), Return(value=Call(func=Name(id='bool', ctx=Load()), args=[Call(func=Name(id='_SetConsoleTitle', ctx=Load()), args=[Name(id='title', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), ClassDef(name='LegacyWindowsTerm', bases=[], keywords=[], body=[Expr(value=Constant(value='This class allows interaction with the legacy Windows Console API. It should only be used in the context\n    of environments where virtual terminal processing is not available. However, if it is used in a Windows environment,\n    the entire API should work.\n\n    Args:\n        file (IO[str]): The file which the Windows Console API HANDLE is retrieved from, defaults to sys.stdout.\n    ')), Assign(targets=[Name(id='BRIGHT_BIT', ctx=Store())], value=Constant(value=8)), Assign(targets=[Name(id='ANSI_TO_WINDOWS', ctx=Store())], value=List(elts=[Constant(value=0), Constant(value=4), Constant(value=2), Constant(value=6), Constant(value=1), Constant(value=5), Constant(value=3), Constant(value=7), Constant(value=8), Constant(value=12), Constant(value=10), Constant(value=14), Constant(value=9), Constant(value=13), Constant(value=11), Constant(value=15)], ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='file', annotation=Constant(value='IO[str]'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='handle', ctx=Store())], value=Call(func=Name(id='GetStdHandle', ctx=Load()), args=[Name(id='STDOUT', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_handle', ctx=Store())], value=Name(id='handle', ctx=Load())), Assign(targets=[Name(id='default_text', ctx=Store())], value=Attribute(value=Call(func=Name(id='GetConsoleScreenBufferInfo', ctx=Load()), args=[Name(id='handle', ctx=Load())], keywords=[]), attr='wAttributes', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_default_text', ctx=Store())], value=Name(id='default_text', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_default_fore', ctx=Store())], value=BinOp(left=Name(id='default_text', ctx=Load()), op=BitAnd(), right=Constant(value=7))), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_default_back', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='default_text', ctx=Load()), op=RShift(), right=Constant(value=4)), op=BitAnd(), right=Constant(value=7))), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_default_attrs', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_default_fore', ctx=Load()), op=BitOr(), right=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_default_back', ctx=Load()), op=LShift(), right=Constant(value=4)))), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_file', ctx=Store())], value=Name(id='file', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='write', ctx=Store())], value=Attribute(value=Name(id='file', ctx=Load()), attr='write', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='flush', ctx=Store())], value=Attribute(value=Name(id='file', ctx=Load()), attr='flush', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='cursor_position', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Returns the current position of the cursor (0-based)\n\n        Returns:\n            WindowsCoordinates: The current cursor position.\n        ')), AnnAssign(target=Name(id='coord', ctx=Store()), annotation=Name(id='COORD', ctx=Load()), value=Attribute(value=Call(func=Name(id='GetConsoleScreenBufferInfo', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_handle', ctx=Load())], keywords=[]), attr='dwCursorPosition', ctx=Load()), simple=1), Return(value=Call(func=Name(id='WindowsCoordinates', ctx=Load()), args=[], keywords=[keyword(arg='row', value=Call(func=Name(id='cast', ctx=Load()), args=[Name(id='int', ctx=Load()), Attribute(value=Name(id='coord', ctx=Load()), attr='Y', ctx=Load())], keywords=[])), keyword(arg='col', value=Call(func=Name(id='cast', ctx=Load()), args=[Name(id='int', ctx=Load()), Attribute(value=Name(id='coord', ctx=Load()), attr='X', ctx=Load())], keywords=[]))]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='WindowsCoordinates', ctx=Load())), FunctionDef(name='screen_size', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Returns the current size of the console screen buffer, in character columns and rows\n\n        Returns:\n            WindowsCoordinates: The width and height of the screen as WindowsCoordinates.\n        ')), AnnAssign(target=Name(id='screen_size', ctx=Store()), annotation=Name(id='COORD', ctx=Load()), value=Attribute(value=Call(func=Name(id='GetConsoleScreenBufferInfo', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_handle', ctx=Load())], keywords=[]), attr='dwSize', ctx=Load()), simple=1), Return(value=Call(func=Name(id='WindowsCoordinates', ctx=Load()), args=[], keywords=[keyword(arg='row', value=Call(func=Name(id='cast', ctx=Load()), args=[Name(id='int', ctx=Load()), Attribute(value=Name(id='screen_size', ctx=Load()), attr='Y', ctx=Load())], keywords=[])), keyword(arg='col', value=Call(func=Name(id='cast', ctx=Load()), args=[Name(id='int', ctx=Load()), Attribute(value=Name(id='screen_size', ctx=Load()), attr='X', ctx=Load())], keywords=[]))]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='WindowsCoordinates', ctx=Load())), FunctionDef(name='write_text', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='text', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Write text directly to the terminal without any modification of styles\n\n        Args:\n            text (str): The text to write to the console\n        ')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='flush', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='write_styled', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='text', annotation=Name(id='str', ctx=Load())), arg(arg='style', annotation=Name(id='Style', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Write styled text to the terminal.\n\n        Args:\n            text (str): The text to write\n            style (Style): The style of the text\n        ')), Assign(targets=[Name(id='color', ctx=Store())], value=Attribute(value=Name(id='style', ctx=Load()), attr='color', ctx=Load())), Assign(targets=[Name(id='bgcolor', ctx=Store())], value=Attribute(value=Name(id='style', ctx=Load()), attr='bgcolor', ctx=Load())), If(test=Attribute(value=Name(id='style', ctx=Load()), attr='reverse', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='color', ctx=Store()), Name(id='bgcolor', ctx=Store())], ctx=Store())], value=Tuple(elts=[Name(id='bgcolor', ctx=Load()), Name(id='color', ctx=Load())], ctx=Load()))], orelse=[]), If(test=Name(id='color', ctx=Load()), body=[Assign(targets=[Name(id='fore', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Name(id='color', ctx=Load()), attr='downgrade', ctx=Load()), args=[Attribute(value=Name(id='ColorSystem', ctx=Load()), attr='WINDOWS', ctx=Load())], keywords=[]), attr='number', ctx=Load())), Assign(targets=[Name(id='fore', ctx=Store())], value=IfExp(test=Compare(left=Name(id='fore', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Name(id='fore', ctx=Load()), orelse=Constant(value=7))), If(test=Attribute(value=Name(id='style', ctx=Load()), attr='bold', ctx=Load()), body=[Assign(targets=[Name(id='fore', ctx=Store())], value=BinOp(left=Name(id='fore', ctx=Load()), op=BitOr(), right=Attribute(value=Name(id='self', ctx=Load()), attr='BRIGHT_BIT', ctx=Load())))], orelse=[]), If(test=Attribute(value=Name(id='style', ctx=Load()), attr='dim', ctx=Load()), body=[Assign(targets=[Name(id='fore', ctx=Store())], value=BinOp(left=Name(id='fore', ctx=Load()), op=BitAnd(), right=UnaryOp(op=Invert(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='BRIGHT_BIT', ctx=Load()))))], orelse=[]), Assign(targets=[Name(id='fore', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='ANSI_TO_WINDOWS', ctx=Load()), slice=Name(id='fore', ctx=Load()), ctx=Load()))], orelse=[Assign(targets=[Name(id='fore', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_default_fore', ctx=Load()))]), If(test=Name(id='bgcolor', ctx=Load()), body=[Assign(targets=[Name(id='back', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Name(id='bgcolor', ctx=Load()), attr='downgrade', ctx=Load()), args=[Attribute(value=Name(id='ColorSystem', ctx=Load()), attr='WINDOWS', ctx=Load())], keywords=[]), attr='number', ctx=Load())), Assign(targets=[Name(id='back', ctx=Store())], value=IfExp(test=Compare(left=Name(id='back', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Name(id='back', ctx=Load()), orelse=Constant(value=0))), Assign(targets=[Name(id='back', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='ANSI_TO_WINDOWS', ctx=Load()), slice=Name(id='back', ctx=Load()), ctx=Load()))], orelse=[Assign(targets=[Name(id='back', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_default_back', ctx=Load()))]), Assert(test=Compare(left=Name(id='fore', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assert(test=Compare(left=Name(id='back', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Expr(value=Call(func=Name(id='SetConsoleTextAttribute', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_handle', ctx=Load())], keywords=[keyword(arg='attributes', value=Call(func=Attribute(value=Name(id='ctypes', ctx=Load()), attr='c_ushort', ctx=Load()), args=[BinOp(left=Name(id='fore', ctx=Load()), op=BitOr(), right=BinOp(left=Name(id='back', ctx=Load()), op=LShift(), right=Constant(value=4)))], keywords=[]))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_text', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='SetConsoleTextAttribute', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_handle', ctx=Load())], keywords=[keyword(arg='attributes', value=Attribute(value=Name(id='self', ctx=Load()), attr='_default_text', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='move_cursor_to', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='new_position', annotation=Name(id='WindowsCoordinates', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Set the position of the cursor\n\n        Args:\n            new_position (WindowsCoordinates): The WindowsCoordinates representing the new position of the cursor.\n        ')), If(test=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='new_position', ctx=Load()), attr='col', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0)]), Compare(left=Attribute(value=Name(id='new_position', ctx=Load()), attr='row', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0)])]), body=[Return()], orelse=[]), Expr(value=Call(func=Name(id='SetConsoleCursorPosition', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_handle', ctx=Load())], keywords=[keyword(arg='coords', value=Name(id='new_position', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='erase_line', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Erase all content on the line the cursor is currently located at')), Assign(targets=[Name(id='screen_size', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='screen_size', ctx=Load())), Assign(targets=[Name(id='cursor_position', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Load())), Assign(targets=[Name(id='cells_to_erase', ctx=Store())], value=Attribute(value=Name(id='screen_size', ctx=Load()), attr='col', ctx=Load())), Assign(targets=[Name(id='start_coordinates', ctx=Store())], value=Call(func=Name(id='WindowsCoordinates', ctx=Load()), args=[], keywords=[keyword(arg='row', value=Attribute(value=Name(id='cursor_position', ctx=Load()), attr='row', ctx=Load())), keyword(arg='col', value=Constant(value=0))])), Expr(value=Call(func=Name(id='FillConsoleOutputCharacter', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_handle', ctx=Load()), Constant(value=' ')], keywords=[keyword(arg='length', value=Name(id='cells_to_erase', ctx=Load())), keyword(arg='start', value=Name(id='start_coordinates', ctx=Load()))])), Expr(value=Call(func=Name(id='FillConsoleOutputAttribute', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_handle', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_default_attrs', ctx=Load())], keywords=[keyword(arg='length', value=Name(id='cells_to_erase', ctx=Load())), keyword(arg='start', value=Name(id='start_coordinates', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='erase_end_of_line', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Erase all content from the cursor position to the end of that line')), Assign(targets=[Name(id='cursor_position', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Load())), Assign(targets=[Name(id='cells_to_erase', ctx=Store())], value=BinOp(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='screen_size', ctx=Load()), attr='col', ctx=Load()), op=Sub(), right=Attribute(value=Name(id='cursor_position', ctx=Load()), attr='col', ctx=Load()))), Expr(value=Call(func=Name(id='FillConsoleOutputCharacter', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_handle', ctx=Load()), Constant(value=' ')], keywords=[keyword(arg='length', value=Name(id='cells_to_erase', ctx=Load())), keyword(arg='start', value=Name(id='cursor_position', ctx=Load()))])), Expr(value=Call(func=Name(id='FillConsoleOutputAttribute', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_handle', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_default_attrs', ctx=Load())], keywords=[keyword(arg='length', value=Name(id='cells_to_erase', ctx=Load())), keyword(arg='start', value=Name(id='cursor_position', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='erase_start_of_line', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Erase all content from the cursor position to the start of that line')), Assign(targets=[Tuple(elts=[Name(id='row', ctx=Store()), Name(id='col', ctx=Store())], ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Load())), Assign(targets=[Name(id='start', ctx=Store())], value=Call(func=Name(id='WindowsCoordinates', ctx=Load()), args=[Name(id='row', ctx=Load()), Constant(value=0)], keywords=[])), Expr(value=Call(func=Name(id='FillConsoleOutputCharacter', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_handle', ctx=Load()), Constant(value=' ')], keywords=[keyword(arg='length', value=Name(id='col', ctx=Load())), keyword(arg='start', value=Name(id='start', ctx=Load()))])), Expr(value=Call(func=Name(id='FillConsoleOutputAttribute', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_handle', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_default_attrs', ctx=Load())], keywords=[keyword(arg='length', value=Name(id='col', ctx=Load())), keyword(arg='start', value=Name(id='start', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='move_cursor_up', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Move the cursor up a single cell')), Assign(targets=[Name(id='cursor_position', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Load())), Expr(value=Call(func=Name(id='SetConsoleCursorPosition', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_handle', ctx=Load())], keywords=[keyword(arg='coords', value=Call(func=Name(id='WindowsCoordinates', ctx=Load()), args=[], keywords=[keyword(arg='row', value=BinOp(left=Attribute(value=Name(id='cursor_position', ctx=Load()), attr='row', ctx=Load()), op=Sub(), right=Constant(value=1))), keyword(arg='col', value=Attribute(value=Name(id='cursor_position', ctx=Load()), attr='col', ctx=Load()))]))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='move_cursor_down', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Move the cursor down a single cell')), Assign(targets=[Name(id='cursor_position', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Load())), Expr(value=Call(func=Name(id='SetConsoleCursorPosition', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_handle', ctx=Load())], keywords=[keyword(arg='coords', value=Call(func=Name(id='WindowsCoordinates', ctx=Load()), args=[], keywords=[keyword(arg='row', value=BinOp(left=Attribute(value=Name(id='cursor_position', ctx=Load()), attr='row', ctx=Load()), op=Add(), right=Constant(value=1))), keyword(arg='col', value=Attribute(value=Name(id='cursor_position', ctx=Load()), attr='col', ctx=Load()))]))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='move_cursor_forward', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Move the cursor forward a single cell. Wrap to the next line if required.')), Assign(targets=[Tuple(elts=[Name(id='row', ctx=Store()), Name(id='col', ctx=Store())], ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Load())), If(test=Compare(left=Name(id='col', ctx=Load()), ops=[Eq()], comparators=[BinOp(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='screen_size', ctx=Load()), attr='col', ctx=Load()), op=Sub(), right=Constant(value=1))]), body=[AugAssign(target=Name(id='row', ctx=Store()), op=Add(), value=Constant(value=1)), Assign(targets=[Name(id='col', ctx=Store())], value=Constant(value=0))], orelse=[AugAssign(target=Name(id='col', ctx=Store()), op=Add(), value=Constant(value=1))]), Expr(value=Call(func=Name(id='SetConsoleCursorPosition', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_handle', ctx=Load())], keywords=[keyword(arg='coords', value=Call(func=Name(id='WindowsCoordinates', ctx=Load()), args=[], keywords=[keyword(arg='row', value=Name(id='row', ctx=Load())), keyword(arg='col', value=Name(id='col', ctx=Load()))]))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='move_cursor_to_column', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='column', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Move cursor to the column specified by the zero-based column index, staying on the same row\n\n        Args:\n            column (int): The zero-based column index to move the cursor to.\n        ')), Assign(targets=[Tuple(elts=[Name(id='row', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Load())), Expr(value=Call(func=Name(id='SetConsoleCursorPosition', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_handle', ctx=Load())], keywords=[keyword(arg='coords', value=Call(func=Name(id='WindowsCoordinates', ctx=Load()), args=[Name(id='row', ctx=Load()), Name(id='column', ctx=Load())], keywords=[]))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='move_cursor_backward', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Move the cursor backward a single cell. Wrap to the previous line if required.')), Assign(targets=[Tuple(elts=[Name(id='row', ctx=Store()), Name(id='col', ctx=Store())], ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='cursor_position', ctx=Load())), If(test=Compare(left=Name(id='col', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[AugAssign(target=Name(id='row', ctx=Store()), op=Sub(), value=Constant(value=1)), Assign(targets=[Name(id='col', ctx=Store())], value=BinOp(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='screen_size', ctx=Load()), attr='col', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[AugAssign(target=Name(id='col', ctx=Store()), op=Sub(), value=Constant(value=1))]), Expr(value=Call(func=Name(id='SetConsoleCursorPosition', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_handle', ctx=Load())], keywords=[keyword(arg='coords', value=Call(func=Name(id='WindowsCoordinates', ctx=Load()), args=[], keywords=[keyword(arg='row', value=Name(id='row', ctx=Load())), keyword(arg='col', value=Name(id='col', ctx=Load()))]))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='hide_cursor', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Hide the cursor')), Assign(targets=[Name(id='current_cursor_size', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_cursor_size', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='invisible_cursor', ctx=Store())], value=Call(func=Name(id='CONSOLE_CURSOR_INFO', ctx=Load()), args=[], keywords=[keyword(arg='dwSize', value=Name(id='current_cursor_size', ctx=Load())), keyword(arg='bVisible', value=Constant(value=0))])), Expr(value=Call(func=Name(id='SetConsoleCursorInfo', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_handle', ctx=Load())], keywords=[keyword(arg='cursor_info', value=Name(id='invisible_cursor', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='show_cursor', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Show the cursor')), Assign(targets=[Name(id='current_cursor_size', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_cursor_size', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='visible_cursor', ctx=Store())], value=Call(func=Name(id='CONSOLE_CURSOR_INFO', ctx=Load()), args=[], keywords=[keyword(arg='dwSize', value=Name(id='current_cursor_size', ctx=Load())), keyword(arg='bVisible', value=Constant(value=1))])), Expr(value=Call(func=Name(id='SetConsoleCursorInfo', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_handle', ctx=Load())], keywords=[keyword(arg='cursor_info', value=Name(id='visible_cursor', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='set_title', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='title', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Set the title of the terminal window\n\n        Args:\n            title (str): The new title of the console window\n        ')), Assert(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='title', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Constant(value=255)]), msg=Constant(value='Console title must be less than 255 characters')), Expr(value=Call(func=Name(id='SetConsoleTitle', ctx=Load()), args=[Name(id='title', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_get_cursor_size', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get the percentage of the character cell that is filled by the cursor')), Assign(targets=[Name(id='cursor_info', ctx=Store())], value=Call(func=Name(id='CONSOLE_CURSOR_INFO', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Name(id='GetConsoleCursorInfo', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_handle', ctx=Load())], keywords=[keyword(arg='cursor_info', value=Name(id='cursor_info', ctx=Load()))])), Return(value=Call(func=Name(id='int', ctx=Load()), args=[Attribute(value=Name(id='cursor_info', ctx=Load()), attr='dwSize', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='int', ctx=Load()))], decorator_list=[]), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__')]), body=[Assign(targets=[Name(id='handle', ctx=Store())], value=Call(func=Name(id='GetStdHandle', ctx=Load()), args=[], keywords=[])), ImportFrom(module='pip._vendor.rich.console', names=[alias(name='Console')], level=0), Assign(targets=[Name(id='console', ctx=Store())], value=Call(func=Name(id='Console', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='term', ctx=Store())], value=Call(func=Name(id='LegacyWindowsTerm', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='term', ctx=Load()), attr='set_title', ctx=Load()), args=[Constant(value='Win32 Console Examples')], keywords=[])), Assign(targets=[Name(id='style', ctx=Store())], value=Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='color', value=Constant(value='black')), keyword(arg='bgcolor', value=Constant(value='red'))])), Assign(targets=[Name(id='heading', ctx=Store())], value=Call(func=Attribute(value=Name(id='Style', ctx=Load()), attr='parse', ctx=Load()), args=[Constant(value='black on green')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='rule', ctx=Load()), args=[Constant(value='Checking colour output')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='print', ctx=Load()), args=[Constant(value='[on red]on red!')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='print', ctx=Load()), args=[Constant(value='[blue]blue!')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='print', ctx=Load()), args=[Constant(value='[yellow]yellow!')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='print', ctx=Load()), args=[Constant(value='[bold yellow]bold yellow!')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='print', ctx=Load()), args=[Constant(value='[bright_yellow]bright_yellow!')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='print', ctx=Load()), args=[Constant(value='[dim bright_yellow]dim bright_yellow!')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='print', ctx=Load()), args=[Constant(value='[italic cyan]italic cyan!')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='print', ctx=Load()), args=[Constant(value='[bold white on blue]bold white on blue!')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='print', ctx=Load()), args=[Constant(value='[reverse bold white on blue]reverse bold white on blue!')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='print', ctx=Load()), args=[Constant(value='[bold black on cyan]bold black on cyan!')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='print', ctx=Load()), args=[Constant(value='[black on green]black on green!')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='print', ctx=Load()), args=[Constant(value='[blue on green]blue on green!')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='print', ctx=Load()), args=[Constant(value='[white on black]white on black!')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='print', ctx=Load()), args=[Constant(value='[black on white]black on white!')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='print', ctx=Load()), args=[Constant(value='[#1BB152 on #DA812D]#1BB152 on #DA812D!')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='rule', ctx=Load()), args=[Constant(value='Checking cursor movement')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='print', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='term', ctx=Load()), attr='move_cursor_backward', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='term', ctx=Load()), attr='move_cursor_backward', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='term', ctx=Load()), attr='write_text', ctx=Load()), args=[Constant(value='went back and wrapped to prev line')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='sleep', ctx=Load()), args=[Constant(value=1)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='term', ctx=Load()), attr='move_cursor_up', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='term', ctx=Load()), attr='write_text', ctx=Load()), args=[Constant(value='we go up')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='sleep', ctx=Load()), args=[Constant(value=1)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='term', ctx=Load()), attr='move_cursor_down', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='term', ctx=Load()), attr='write_text', ctx=Load()), args=[Constant(value='and down')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='sleep', ctx=Load()), args=[Constant(value=1)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='term', ctx=Load()), attr='move_cursor_up', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='term', ctx=Load()), attr='move_cursor_backward', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='term', ctx=Load()), attr='move_cursor_backward', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='term', ctx=Load()), attr='write_text', ctx=Load()), args=[Constant(value='we went up and back 2')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='sleep', ctx=Load()), args=[Constant(value=1)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='term', ctx=Load()), attr='move_cursor_down', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='term', ctx=Load()), attr='move_cursor_backward', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='term', ctx=Load()), attr='move_cursor_backward', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='term', ctx=Load()), attr='write_text', ctx=Load()), args=[Constant(value='we went down and back 2')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='sleep', ctx=Load()), args=[Constant(value=1)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='term', ctx=Load()), attr='hide_cursor', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='print', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='rule', ctx=Load()), args=[Constant(value='Checking line erasing')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='print', ctx=Load()), args=[Constant(value='\n...Deleting to the start of the line...')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='term', ctx=Load()), attr='write_text', ctx=Load()), args=[Constant(value='The red arrow shows the cursor location, and direction of erase')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='sleep', ctx=Load()), args=[Constant(value=1)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='term', ctx=Load()), attr='move_cursor_to_column', ctx=Load()), args=[Constant(value=16)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='term', ctx=Load()), attr='write_styled', ctx=Load()), args=[Constant(value='<'), Call(func=Attribute(value=Name(id='Style', ctx=Load()), attr='parse', ctx=Load()), args=[Constant(value='black on red')], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='term', ctx=Load()), attr='move_cursor_backward', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='sleep', ctx=Load()), args=[Constant(value=1)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='term', ctx=Load()), attr='erase_start_of_line', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='sleep', ctx=Load()), args=[Constant(value=1)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='print', ctx=Load()), args=[Constant(value='\n\n...And to the end of the line...')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='term', ctx=Load()), attr='write_text', ctx=Load()), args=[Constant(value='The red arrow shows the cursor location, and direction of erase')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='sleep', ctx=Load()), args=[Constant(value=1)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='term', ctx=Load()), attr='move_cursor_to_column', ctx=Load()), args=[Constant(value=16)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='term', ctx=Load()), attr='write_styled', ctx=Load()), args=[Constant(value='>'), Call(func=Attribute(value=Name(id='Style', ctx=Load()), attr='parse', ctx=Load()), args=[Constant(value='black on red')], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='sleep', ctx=Load()), args=[Constant(value=1)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='term', ctx=Load()), attr='erase_end_of_line', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='sleep', ctx=Load()), args=[Constant(value=1)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='print', ctx=Load()), args=[Constant(value='\n\n...Now the whole line will be erased...')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='term', ctx=Load()), attr='write_styled', ctx=Load()), args=[Constant(value="I'm going to disappear!")], keywords=[keyword(arg='style', value=Call(func=Attribute(value=Name(id='Style', ctx=Load()), attr='parse', ctx=Load()), args=[Constant(value='black on cyan')], keywords=[]))])), Expr(value=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='sleep', ctx=Load()), args=[Constant(value=1)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='term', ctx=Load()), attr='erase_line', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='term', ctx=Load()), attr='show_cursor', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='\n')], keywords=[]))], orelse=[])], type_ignores=[])