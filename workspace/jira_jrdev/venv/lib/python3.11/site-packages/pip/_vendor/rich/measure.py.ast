Module(body=[ImportFrom(module='operator', names=[alias(name='itemgetter')], level=0), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING'), alias(name='Callable'), alias(name='NamedTuple'), alias(name='Optional'), alias(name='Sequence')], level=0), ImportFrom(names=[alias(name='errors')], level=1), ImportFrom(module='protocol', names=[alias(name='is_renderable'), alias(name='rich_cast')], level=1), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='console', names=[alias(name='Console'), alias(name='ConsoleOptions'), alias(name='RenderableType')], level=1)], orelse=[]), ClassDef(name='Measurement', bases=[Name(id='NamedTuple', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Stores the minimum and maximum widths (in characters) required to render an object.')), AnnAssign(target=Name(id='minimum', ctx=Store()), annotation=Name(id='int', ctx=Load()), simple=1), Expr(value=Constant(value='Minimum number of cells required to render.')), AnnAssign(target=Name(id='maximum', ctx=Store()), annotation=Name(id='int', ctx=Load()), simple=1), Expr(value=Constant(value='Maximum number of cells required to render.')), FunctionDef(name='span', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get difference between maximum and minimum.')), Return(value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='maximum', ctx=Load()), op=Sub(), right=Attribute(value=Name(id='self', ctx=Load()), attr='minimum', ctx=Load())))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load())), FunctionDef(name='normalize', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get measurement that ensures that minimum <= maximum and minimum >= 0\n\n        Returns:\n            Measurement: A normalized measurement.\n        ')), Assign(targets=[Tuple(elts=[Name(id='minimum', ctx=Store()), Name(id='maximum', ctx=Store())], ctx=Store())], value=Name(id='self', ctx=Load())), Assign(targets=[Name(id='minimum', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[Call(func=Name(id='max', ctx=Load()), args=[Constant(value=0), Name(id='minimum', ctx=Load())], keywords=[]), Name(id='maximum', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='Measurement', ctx=Load()), args=[Call(func=Name(id='max', ctx=Load()), args=[Constant(value=0), Name(id='minimum', ctx=Load())], keywords=[]), Call(func=Name(id='max', ctx=Load()), args=[Constant(value=0), Call(func=Name(id='max', ctx=Load()), args=[Name(id='minimum', ctx=Load()), Name(id='maximum', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], decorator_list=[], returns=Constant(value='Measurement')), FunctionDef(name='with_maximum', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='width', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get a RenderableWith where the widths are <= width.\n\n        Args:\n            width (int): Maximum desired width.\n\n        Returns:\n            Measurement: New Measurement object.\n        ')), Assign(targets=[Tuple(elts=[Name(id='minimum', ctx=Store()), Name(id='maximum', ctx=Store())], ctx=Store())], value=Name(id='self', ctx=Load())), Return(value=Call(func=Name(id='Measurement', ctx=Load()), args=[Call(func=Name(id='min', ctx=Load()), args=[Name(id='minimum', ctx=Load()), Name(id='width', ctx=Load())], keywords=[]), Call(func=Name(id='min', ctx=Load()), args=[Name(id='maximum', ctx=Load()), Name(id='width', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Constant(value='Measurement')), FunctionDef(name='with_minimum', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='width', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get a RenderableWith where the widths are >= width.\n\n        Args:\n            width (int): Minimum desired width.\n\n        Returns:\n            Measurement: New Measurement object.\n        ')), Assign(targets=[Tuple(elts=[Name(id='minimum', ctx=Store()), Name(id='maximum', ctx=Store())], ctx=Store())], value=Name(id='self', ctx=Load())), Assign(targets=[Name(id='width', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Constant(value=0), Name(id='width', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='Measurement', ctx=Load()), args=[Call(func=Name(id='max', ctx=Load()), args=[Name(id='minimum', ctx=Load()), Name(id='width', ctx=Load())], keywords=[]), Call(func=Name(id='max', ctx=Load()), args=[Name(id='maximum', ctx=Load()), Name(id='width', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Constant(value='Measurement')), FunctionDef(name='clamp', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='min_width', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='max_width', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='Clamp a measurement within the specified range.\n\n        Args:\n            min_width (int): Minimum desired width, or ``None`` for no minimum. Defaults to None.\n            max_width (int): Maximum desired width, or ``None`` for no maximum. Defaults to None.\n\n        Returns:\n            Measurement: New Measurement object.\n        ')), Assign(targets=[Name(id='measurement', ctx=Store())], value=Name(id='self', ctx=Load())), If(test=Compare(left=Name(id='min_width', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='measurement', ctx=Store())], value=Call(func=Attribute(value=Name(id='measurement', ctx=Load()), attr='with_minimum', ctx=Load()), args=[Name(id='min_width', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='max_width', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='measurement', ctx=Store())], value=Call(func=Attribute(value=Name(id='measurement', ctx=Load()), attr='with_maximum', ctx=Load()), args=[Name(id='max_width', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='measurement', ctx=Load()))], decorator_list=[], returns=Constant(value='Measurement')), FunctionDef(name='get', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='console', annotation=Constant(value='Console')), arg(arg='options', annotation=Constant(value='ConsoleOptions')), arg(arg='renderable', annotation=Constant(value='RenderableType'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get a measurement for a renderable.\n\n        Args:\n            console (~rich.console.Console): Console instance.\n            options (~rich.console.ConsoleOptions): Console options.\n            renderable (RenderableType): An object that may be rendered with Rich.\n\n        Raises:\n            errors.NotRenderableError: If the object is not renderable.\n\n        Returns:\n            Measurement: Measurement object containing range of character widths required to render the object.\n        ')), Assign(targets=[Name(id='_max_width', ctx=Store())], value=Attribute(value=Name(id='options', ctx=Load()), attr='max_width', ctx=Load())), If(test=Compare(left=Name(id='_max_width', ctx=Load()), ops=[Lt()], comparators=[Constant(value=1)]), body=[Return(value=Call(func=Name(id='Measurement', ctx=Load()), args=[Constant(value=0), Constant(value=0)], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='renderable', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='renderable', ctx=Store())], value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='render_str', ctx=Load()), args=[Name(id='renderable', ctx=Load())], keywords=[keyword(arg='markup', value=Attribute(value=Name(id='options', ctx=Load()), attr='markup', ctx=Load())), keyword(arg='highlight', value=Constant(value=False))]))], orelse=[]), Assign(targets=[Name(id='renderable', ctx=Store())], value=Call(func=Name(id='rich_cast', ctx=Load()), args=[Name(id='renderable', ctx=Load())], keywords=[])), If(test=Call(func=Name(id='is_renderable', ctx=Load()), args=[Name(id='renderable', ctx=Load())], keywords=[]), body=[AnnAssign(target=Name(id='get_console_width', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Constant(value='Console'), Constant(value='ConsoleOptions')], ctx=Load()), Constant(value='Measurement')], ctx=Load()), ctx=Load()), ctx=Load()), value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='renderable', ctx=Load()), Constant(value='__rich_measure__'), Constant(value=None)], keywords=[]), simple=1), If(test=Compare(left=Name(id='get_console_width', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='render_width', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Name(id='get_console_width', ctx=Load()), args=[Name(id='console', ctx=Load()), Name(id='options', ctx=Load())], keywords=[]), attr='normalize', ctx=Load()), args=[], keywords=[]), attr='with_maximum', ctx=Load()), args=[Name(id='_max_width', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='render_width', ctx=Load()), attr='maximum', ctx=Load()), ops=[Lt()], comparators=[Constant(value=1)]), body=[Return(value=Call(func=Name(id='Measurement', ctx=Load()), args=[Constant(value=0), Constant(value=0)], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='render_width', ctx=Load()), attr='normalize', ctx=Load()), args=[], keywords=[]))], orelse=[Return(value=Call(func=Name(id='Measurement', ctx=Load()), args=[Constant(value=0), Name(id='_max_width', ctx=Load())], keywords=[]))])], orelse=[Raise(exc=Call(func=Attribute(value=Name(id='errors', ctx=Load()), attr='NotRenderableError', ctx=Load()), args=[JoinedStr(values=[Constant(value='Unable to get render width for '), FormattedValue(value=Name(id='renderable', ctx=Load()), conversion=114), Constant(value='; a str, Segment, or object with __rich_console__ method is required')])], keywords=[]))])], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Constant(value='Measurement'))], decorator_list=[]), FunctionDef(name='measure_renderables', args=arguments(posonlyargs=[], args=[arg(arg='console', annotation=Constant(value='Console')), arg(arg='options', annotation=Constant(value='ConsoleOptions')), arg(arg='renderables', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Constant(value='RenderableType'), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get a measurement that would fit a number of renderables.\n\n    Args:\n        console (~rich.console.Console): Console instance.\n        options (~rich.console.ConsoleOptions): Console options.\n        renderables (Iterable[RenderableType]): One or more renderable objects.\n\n    Returns:\n        Measurement: Measurement object containing range of character widths required to\n            contain all given renderables.\n    ')), If(test=UnaryOp(op=Not(), operand=Name(id='renderables', ctx=Load())), body=[Return(value=Call(func=Name(id='Measurement', ctx=Load()), args=[Constant(value=0), Constant(value=0)], keywords=[]))], orelse=[]), Assign(targets=[Name(id='get_measurement', ctx=Store())], value=Attribute(value=Name(id='Measurement', ctx=Load()), attr='get', ctx=Load())), Assign(targets=[Name(id='measurements', ctx=Store())], value=ListComp(elt=Call(func=Name(id='get_measurement', ctx=Load()), args=[Name(id='console', ctx=Load()), Name(id='options', ctx=Load()), Name(id='renderable', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='renderable', ctx=Store()), iter=Name(id='renderables', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='measured_width', ctx=Store())], value=Call(func=Name(id='Measurement', ctx=Load()), args=[Attribute(value=Call(func=Name(id='max', ctx=Load()), args=[Name(id='measurements', ctx=Load())], keywords=[keyword(arg='key', value=Call(func=Name(id='itemgetter', ctx=Load()), args=[Constant(value=0)], keywords=[]))]), attr='minimum', ctx=Load()), Attribute(value=Call(func=Name(id='max', ctx=Load()), args=[Name(id='measurements', ctx=Load())], keywords=[keyword(arg='key', value=Call(func=Name(id='itemgetter', ctx=Load()), args=[Constant(value=1)], keywords=[]))]), attr='maximum', ctx=Load())], keywords=[])), Return(value=Name(id='measured_width', ctx=Load()))], decorator_list=[], returns=Constant(value='Measurement'))], type_ignores=[])