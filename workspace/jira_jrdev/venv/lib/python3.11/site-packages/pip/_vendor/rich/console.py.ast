Module(body=[Import(names=[alias(name='inspect')]), Import(names=[alias(name='os')]), Import(names=[alias(name='platform')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='threading')]), Import(names=[alias(name='zlib')]), ImportFrom(module='abc', names=[alias(name='ABC'), alias(name='abstractmethod')], level=0), ImportFrom(module='dataclasses', names=[alias(name='dataclass'), alias(name='field')], level=0), ImportFrom(module='datetime', names=[alias(name='datetime')], level=0), ImportFrom(module='functools', names=[alias(name='wraps')], level=0), ImportFrom(module='getpass', names=[alias(name='getpass')], level=0), ImportFrom(module='html', names=[alias(name='escape')], level=0), ImportFrom(module='inspect', names=[alias(name='isclass')], level=0), ImportFrom(module='itertools', names=[alias(name='islice')], level=0), ImportFrom(module='math', names=[alias(name='ceil')], level=0), ImportFrom(module='time', names=[alias(name='monotonic')], level=0), ImportFrom(module='types', names=[alias(name='FrameType'), alias(name='ModuleType'), alias(name='TracebackType')], level=0), ImportFrom(module='typing', names=[alias(name='IO'), alias(name='TYPE_CHECKING'), alias(name='Any'), alias(name='Callable'), alias(name='Dict'), alias(name='Iterable'), alias(name='List'), alias(name='Mapping'), alias(name='NamedTuple'), alias(name='Optional'), alias(name='TextIO'), alias(name='Tuple'), alias(name='Type'), alias(name='Union'), alias(name='cast')], level=0), ImportFrom(module='pip._vendor.rich._null_file', names=[alias(name='NULL_FILE')], level=0), If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), ops=[GtE()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=8)], ctx=Load())]), body=[ImportFrom(module='typing', names=[alias(name='Literal'), alias(name='Protocol'), alias(name='runtime_checkable')], level=0)], orelse=[ImportFrom(module='pip._vendor.typing_extensions', names=[alias(name='Literal'), alias(name='Protocol'), alias(name='runtime_checkable')], level=0)]), ImportFrom(names=[alias(name='errors'), alias(name='themes')], level=1), ImportFrom(module='_emoji_replace', names=[alias(name='_emoji_replace')], level=1), ImportFrom(module='_export_format', names=[alias(name='CONSOLE_HTML_FORMAT'), alias(name='CONSOLE_SVG_FORMAT')], level=1), ImportFrom(module='_fileno', names=[alias(name='get_fileno')], level=1), ImportFrom(module='_log_render', names=[alias(name='FormatTimeCallable'), alias(name='LogRender')], level=1), ImportFrom(module='align', names=[alias(name='Align'), alias(name='AlignMethod')], level=1), ImportFrom(module='color', names=[alias(name='ColorSystem'), alias(name='blend_rgb')], level=1), ImportFrom(module='control', names=[alias(name='Control')], level=1), ImportFrom(module='emoji', names=[alias(name='EmojiVariant')], level=1), ImportFrom(module='highlighter', names=[alias(name='NullHighlighter'), alias(name='ReprHighlighter')], level=1), ImportFrom(module='markup', names=[alias(name='render', asname='render_markup')], level=1), ImportFrom(module='measure', names=[alias(name='Measurement'), alias(name='measure_renderables')], level=1), ImportFrom(module='pager', names=[alias(name='Pager'), alias(name='SystemPager')], level=1), ImportFrom(module='pretty', names=[alias(name='Pretty'), alias(name='is_expandable')], level=1), ImportFrom(module='protocol', names=[alias(name='rich_cast')], level=1), ImportFrom(module='region', names=[alias(name='Region')], level=1), ImportFrom(module='scope', names=[alias(name='render_scope')], level=1), ImportFrom(module='screen', names=[alias(name='Screen')], level=1), ImportFrom(module='segment', names=[alias(name='Segment')], level=1), ImportFrom(module='style', names=[alias(name='Style'), alias(name='StyleType')], level=1), ImportFrom(module='styled', names=[alias(name='Styled')], level=1), ImportFrom(module='terminal_theme', names=[alias(name='DEFAULT_TERMINAL_THEME'), alias(name='SVG_EXPORT_THEME'), alias(name='TerminalTheme')], level=1), ImportFrom(module='text', names=[alias(name='Text'), alias(name='TextType')], level=1), ImportFrom(module='theme', names=[alias(name='Theme'), alias(name='ThemeStack')], level=1), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='_windows', names=[alias(name='WindowsConsoleFeatures')], level=1), ImportFrom(module='live', names=[alias(name='Live')], level=1), ImportFrom(module='status', names=[alias(name='Status')], level=1)], orelse=[]), Assign(targets=[Name(id='JUPYTER_DEFAULT_COLUMNS', ctx=Store())], value=Constant(value=115)), Assign(targets=[Name(id='JUPYTER_DEFAULT_LINES', ctx=Store())], value=Constant(value=100)), Assign(targets=[Name(id='WINDOWS', ctx=Store())], value=Compare(left=Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='system', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Constant(value='Windows')])), Assign(targets=[Name(id='HighlighterType', ctx=Store())], value=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Constant(value='Text')], ctx=Load()), ctx=Load())], ctx=Load()), Constant(value='Text')], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='JustifyMethod', ctx=Store())], value=Subscript(value=Name(id='Literal', ctx=Load()), slice=Tuple(elts=[Constant(value='default'), Constant(value='left'), Constant(value='center'), Constant(value='right'), Constant(value='full')], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='OverflowMethod', ctx=Store())], value=Subscript(value=Name(id='Literal', ctx=Load()), slice=Tuple(elts=[Constant(value='fold'), Constant(value='crop'), Constant(value='ellipsis'), Constant(value='ignore')], ctx=Load()), ctx=Load())), ClassDef(name='NoChange', bases=[], keywords=[], body=[Pass()], decorator_list=[]), Assign(targets=[Name(id='NO_CHANGE', ctx=Store())], value=Call(func=Name(id='NoChange', ctx=Load()), args=[], keywords=[])), Try(body=[Assign(targets=[Name(id='_STDIN_FILENO', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='__stdin__', ctx=Load()), attr='fileno', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Assign(targets=[Name(id='_STDIN_FILENO', ctx=Store())], value=Constant(value=0))])], orelse=[], finalbody=[]), Try(body=[Assign(targets=[Name(id='_STDOUT_FILENO', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='__stdout__', ctx=Load()), attr='fileno', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Assign(targets=[Name(id='_STDOUT_FILENO', ctx=Store())], value=Constant(value=1))])], orelse=[], finalbody=[]), Try(body=[Assign(targets=[Name(id='_STDERR_FILENO', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='__stderr__', ctx=Load()), attr='fileno', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Assign(targets=[Name(id='_STDERR_FILENO', ctx=Store())], value=Constant(value=2))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='_STD_STREAMS', ctx=Store())], value=Tuple(elts=[Name(id='_STDIN_FILENO', ctx=Load()), Name(id='_STDOUT_FILENO', ctx=Load()), Name(id='_STDERR_FILENO', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='_STD_STREAMS_OUTPUT', ctx=Store())], value=Tuple(elts=[Name(id='_STDOUT_FILENO', ctx=Load()), Name(id='_STDERR_FILENO', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='_TERM_COLORS', ctx=Store())], value=Dict(keys=[Constant(value='kitty'), Constant(value='256color'), Constant(value='16color')], values=[Attribute(value=Name(id='ColorSystem', ctx=Load()), attr='EIGHT_BIT', ctx=Load()), Attribute(value=Name(id='ColorSystem', ctx=Load()), attr='EIGHT_BIT', ctx=Load()), Attribute(value=Name(id='ColorSystem', ctx=Load()), attr='STANDARD', ctx=Load())])), ClassDef(name='ConsoleDimensions', bases=[Name(id='NamedTuple', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Size of the terminal.')), AnnAssign(target=Name(id='width', ctx=Store()), annotation=Name(id='int', ctx=Load()), simple=1), Expr(value=Constant(value="The width of the console in 'cells'.")), AnnAssign(target=Name(id='height', ctx=Store()), annotation=Name(id='int', ctx=Load()), simple=1), Expr(value=Constant(value='The height of the console in lines.'))], decorator_list=[]), ClassDef(name='ConsoleOptions', bases=[], keywords=[], body=[Expr(value=Constant(value='Options for __rich_console__ method.')), AnnAssign(target=Name(id='size', ctx=Store()), annotation=Name(id='ConsoleDimensions', ctx=Load()), simple=1), Expr(value=Constant(value='Size of console.')), AnnAssign(target=Name(id='legacy_windows', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1), Expr(value=Constant(value='legacy_windows: flag for legacy windows.')), AnnAssign(target=Name(id='min_width', ctx=Store()), annotation=Name(id='int', ctx=Load()), simple=1), Expr(value=Constant(value='Minimum width of renderable.')), AnnAssign(target=Name(id='max_width', ctx=Store()), annotation=Name(id='int', ctx=Load()), simple=1), Expr(value=Constant(value='Maximum width of renderable.')), AnnAssign(target=Name(id='is_terminal', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1), Expr(value=Constant(value='True if the target is a terminal, otherwise False.')), AnnAssign(target=Name(id='encoding', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), Expr(value=Constant(value='Encoding of terminal.')), AnnAssign(target=Name(id='max_height', ctx=Store()), annotation=Name(id='int', ctx=Load()), simple=1), Expr(value=Constant(value='Height of container (starts as terminal)')), AnnAssign(target=Name(id='justify', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='JustifyMethod', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=1), Expr(value=Constant(value='Justify value override for renderable.')), AnnAssign(target=Name(id='overflow', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='OverflowMethod', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=1), Expr(value=Constant(value='Overflow value override for renderable.')), AnnAssign(target=Name(id='no_wrap', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load()), value=Constant(value=False), simple=1), Expr(value=Constant(value='Disable wrapping for text.')), AnnAssign(target=Name(id='highlight', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=1), Expr(value=Constant(value='Highlight override for render_str.')), AnnAssign(target=Name(id='markup', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=1), Expr(value=Constant(value='Enable markup when rendering strings.')), AnnAssign(target=Name(id='height', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=1), FunctionDef(name='ascii_only', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check if renderables should use ascii only.')), Return(value=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='encoding', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='utf')], keywords=[])))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='copy', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return a copy of the options.\n\n        Returns:\n            ConsoleOptions: a copy of self.\n        ')), AnnAssign(target=Name(id='options', ctx=Store()), annotation=Name(id='ConsoleOptions', ctx=Load()), value=Call(func=Attribute(value=Name(id='ConsoleOptions', ctx=Load()), attr='__new__', ctx=Load()), args=[Name(id='ConsoleOptions', ctx=Load())], keywords=[]), simple=1), Assign(targets=[Attribute(value=Name(id='options', ctx=Load()), attr='__dict__', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__dict__', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='options', ctx=Load()))], decorator_list=[], returns=Constant(value='ConsoleOptions')), FunctionDef(name='update', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[arg(arg='width', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='NoChange', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='min_width', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='NoChange', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='max_width', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='NoChange', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='justify', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='JustifyMethod', ctx=Load()), ctx=Load()), Name(id='NoChange', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='overflow', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='OverflowMethod', ctx=Load()), ctx=Load()), Name(id='NoChange', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='no_wrap', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load()), Name(id='NoChange', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='highlight', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load()), Name(id='NoChange', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='markup', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load()), Name(id='NoChange', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='height', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()), Name(id='NoChange', ctx=Load())], ctx=Load()), ctx=Load()))], kw_defaults=[Name(id='NO_CHANGE', ctx=Load()), Name(id='NO_CHANGE', ctx=Load()), Name(id='NO_CHANGE', ctx=Load()), Name(id='NO_CHANGE', ctx=Load()), Name(id='NO_CHANGE', ctx=Load()), Name(id='NO_CHANGE', ctx=Load()), Name(id='NO_CHANGE', ctx=Load()), Name(id='NO_CHANGE', ctx=Load()), Name(id='NO_CHANGE', ctx=Load())], defaults=[]), body=[Expr(value=Constant(value='Update values, return a copy.')), Assign(targets=[Name(id='options', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='width', ctx=Load()), Name(id='NoChange', ctx=Load())], keywords=[])), body=[Assign(targets=[Attribute(value=Name(id='options', ctx=Load()), attr='min_width', ctx=Store()), Attribute(value=Name(id='options', ctx=Load()), attr='max_width', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Constant(value=0), Name(id='width', ctx=Load())], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='min_width', ctx=Load()), Name(id='NoChange', ctx=Load())], keywords=[])), body=[Assign(targets=[Attribute(value=Name(id='options', ctx=Load()), attr='min_width', ctx=Store())], value=Name(id='min_width', ctx=Load()))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='max_width', ctx=Load()), Name(id='NoChange', ctx=Load())], keywords=[])), body=[Assign(targets=[Attribute(value=Name(id='options', ctx=Load()), attr='max_width', ctx=Store())], value=Name(id='max_width', ctx=Load()))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='justify', ctx=Load()), Name(id='NoChange', ctx=Load())], keywords=[])), body=[Assign(targets=[Attribute(value=Name(id='options', ctx=Load()), attr='justify', ctx=Store())], value=Name(id='justify', ctx=Load()))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='overflow', ctx=Load()), Name(id='NoChange', ctx=Load())], keywords=[])), body=[Assign(targets=[Attribute(value=Name(id='options', ctx=Load()), attr='overflow', ctx=Store())], value=Name(id='overflow', ctx=Load()))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='no_wrap', ctx=Load()), Name(id='NoChange', ctx=Load())], keywords=[])), body=[Assign(targets=[Attribute(value=Name(id='options', ctx=Load()), attr='no_wrap', ctx=Store())], value=Name(id='no_wrap', ctx=Load()))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='highlight', ctx=Load()), Name(id='NoChange', ctx=Load())], keywords=[])), body=[Assign(targets=[Attribute(value=Name(id='options', ctx=Load()), attr='highlight', ctx=Store())], value=Name(id='highlight', ctx=Load()))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='markup', ctx=Load()), Name(id='NoChange', ctx=Load())], keywords=[])), body=[Assign(targets=[Attribute(value=Name(id='options', ctx=Load()), attr='markup', ctx=Store())], value=Name(id='markup', ctx=Load()))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='height', ctx=Load()), Name(id='NoChange', ctx=Load())], keywords=[])), body=[If(test=Compare(left=Name(id='height', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='options', ctx=Load()), attr='max_height', ctx=Store())], value=Name(id='height', ctx=Load()))], orelse=[]), Assign(targets=[Attribute(value=Name(id='options', ctx=Load()), attr='height', ctx=Store())], value=IfExp(test=Compare(left=Name(id='height', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Constant(value=None), orelse=Call(func=Name(id='max', ctx=Load()), args=[Constant(value=0), Name(id='height', ctx=Load())], keywords=[])))], orelse=[]), Return(value=Name(id='options', ctx=Load()))], decorator_list=[], returns=Constant(value='ConsoleOptions')), FunctionDef(name='update_width', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='width', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Update just the width, return a copy.\n\n        Args:\n            width (int): New width (sets both min_width and max_width)\n\n        Returns:\n            ~ConsoleOptions: New console options instance.\n        ')), Assign(targets=[Name(id='options', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='options', ctx=Load()), attr='min_width', ctx=Store()), Attribute(value=Name(id='options', ctx=Load()), attr='max_width', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Constant(value=0), Name(id='width', ctx=Load())], keywords=[])), Return(value=Name(id='options', ctx=Load()))], decorator_list=[], returns=Constant(value='ConsoleOptions')), FunctionDef(name='update_height', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='height', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Update the height, and return a copy.\n\n        Args:\n            height (int): New height\n\n        Returns:\n            ~ConsoleOptions: New Console options instance.\n        ')), Assign(targets=[Name(id='options', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='options', ctx=Load()), attr='max_height', ctx=Store()), Attribute(value=Name(id='options', ctx=Load()), attr='height', ctx=Store())], value=Name(id='height', ctx=Load())), Return(value=Name(id='options', ctx=Load()))], decorator_list=[], returns=Constant(value='ConsoleOptions')), FunctionDef(name='reset_height', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return a copy of the options with height set to ``None``.\n\n        Returns:\n            ~ConsoleOptions: New console options instance.\n        ')), Assign(targets=[Name(id='options', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='options', ctx=Load()), attr='height', ctx=Store())], value=Constant(value=None)), Return(value=Name(id='options', ctx=Load()))], decorator_list=[], returns=Constant(value='ConsoleOptions')), FunctionDef(name='update_dimensions', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='width', annotation=Name(id='int', ctx=Load())), arg(arg='height', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Update the width and height, and return a copy.\n\n        Args:\n            width (int): New width (sets both min_width and max_width).\n            height (int): New height.\n\n        Returns:\n            ~ConsoleOptions: New console options instance.\n        ')), Assign(targets=[Name(id='options', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='options', ctx=Load()), attr='min_width', ctx=Store()), Attribute(value=Name(id='options', ctx=Load()), attr='max_width', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Constant(value=0), Name(id='width', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='options', ctx=Load()), attr='height', ctx=Store()), Attribute(value=Name(id='options', ctx=Load()), attr='max_height', ctx=Store())], value=Name(id='height', ctx=Load())), Return(value=Name(id='options', ctx=Load()))], decorator_list=[], returns=Constant(value='ConsoleOptions'))], decorator_list=[Name(id='dataclass', ctx=Load())]), ClassDef(name='RichCast', bases=[Name(id='Protocol', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="An object that may be 'cast' to a console renderable.")), FunctionDef(name='__rich__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=Ellipsis))], decorator_list=[], returns=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Constant(value='ConsoleRenderable'), Constant(value='RichCast'), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()))], decorator_list=[Name(id='runtime_checkable', ctx=Load())]), ClassDef(name='ConsoleRenderable', bases=[Name(id='Protocol', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='An object that supports the console protocol.')), FunctionDef(name='__rich_console__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='console', annotation=Constant(value='Console')), arg(arg='options', annotation=Constant(value='ConsoleOptions'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=Ellipsis))], decorator_list=[], returns=Constant(value='RenderResult'))], decorator_list=[Name(id='runtime_checkable', ctx=Load())]), Assign(targets=[Name(id='RenderableType', ctx=Store())], value=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='ConsoleRenderable', ctx=Load()), Name(id='RichCast', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='RenderResult', ctx=Store())], value=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='RenderableType', ctx=Load()), Name(id='Segment', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), Assign(targets=[Name(id='_null_highlighter', ctx=Store())], value=Call(func=Name(id='NullHighlighter', ctx=Load()), args=[], keywords=[])), ClassDef(name='CaptureError', bases=[Name(id='Exception', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='An error in the Capture context manager.'))], decorator_list=[]), ClassDef(name='NewLine', bases=[], keywords=[], body=[Expr(value=Constant(value='A renderable to generate new line(s)')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='count', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='count', ctx=Store())], value=Name(id='count', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__rich_console__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='console', annotation=Constant(value='Console')), arg(arg='options', annotation=Constant(value='ConsoleOptions'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Yield(value=Call(func=Name(id='Segment', ctx=Load()), args=[BinOp(left=Constant(value='\n'), op=Mult(), right=Attribute(value=Name(id='self', ctx=Load()), attr='count', ctx=Load()))], keywords=[])))], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='Segment', ctx=Load()), ctx=Load()))], decorator_list=[]), ClassDef(name='ScreenUpdate', bases=[], keywords=[], body=[Expr(value=Constant(value='Render a list of lines at a given offset.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='lines', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Segment', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='x', annotation=Name(id='int', ctx=Load())), arg(arg='y', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_lines', ctx=Store())], value=Name(id='lines', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='x', ctx=Store())], value=Name(id='x', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='y', ctx=Store())], value=Name(id='y', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__rich_console__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='console', annotation=Constant(value='Console')), arg(arg='options', annotation=Name(id='ConsoleOptions', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='x', ctx=Load())), Assign(targets=[Name(id='move_to', ctx=Store())], value=Attribute(value=Name(id='Control', ctx=Load()), attr='move_to', ctx=Load())), For(target=Tuple(elts=[Name(id='offset', ctx=Store()), Name(id='line', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_lines', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='y', ctx=Load())], keywords=[]), body=[Expr(value=Yield(value=Call(func=Name(id='move_to', ctx=Load()), args=[Name(id='x', ctx=Load()), Name(id='offset', ctx=Load())], keywords=[]))), Expr(value=YieldFrom(value=Name(id='line', ctx=Load())))], orelse=[])], decorator_list=[], returns=Name(id='RenderResult', ctx=Load()))], decorator_list=[]), ClassDef(name='Capture', bases=[], keywords=[], body=[Expr(value=Constant(value='Context manager to capture the result of printing to the console.\n    See :meth:`~rich.console.Console.capture` for how to use.\n\n    Args:\n        console (Console): A console instance to capture output.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='console', annotation=Constant(value='Console'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_console', ctx=Store())], value=Name(id='console', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_result', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0)], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__enter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_console', ctx=Load()), attr='begin_capture', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='self', ctx=Load()))], decorator_list=[], returns=Constant(value='Capture')), FunctionDef(name='__exit__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='exc_type', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Type', ctx=Load()), slice=Name(id='BaseException', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='exc_val', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='BaseException', ctx=Load()), ctx=Load())), arg(arg='exc_tb', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TracebackType', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_result', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_console', ctx=Load()), attr='end_capture', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='get', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get the result of the capture.')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_result', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='CaptureError', ctx=Load()), args=[Constant(value='Capture result is not available until context manager exits.')], keywords=[]))], orelse=[]), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_result', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[]), ClassDef(name='ThemeContext', bases=[], keywords=[], body=[Expr(value=Constant(value='A context manager to use a temporary theme. See :meth:`~rich.console.Console.use_theme` for usage.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='console', annotation=Constant(value='Console')), arg(arg='theme', annotation=Name(id='Theme', ctx=Load())), arg(arg='inherit', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='console', ctx=Store())], value=Name(id='console', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='theme', ctx=Store())], value=Name(id='theme', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='inherit', ctx=Store())], value=Name(id='inherit', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__enter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='console', ctx=Load()), attr='push_theme', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='theme', ctx=Load())], keywords=[])), Return(value=Name(id='self', ctx=Load()))], decorator_list=[], returns=Constant(value='ThemeContext')), FunctionDef(name='__exit__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='exc_type', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Type', ctx=Load()), slice=Name(id='BaseException', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='exc_val', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='BaseException', ctx=Load()), ctx=Load())), arg(arg='exc_tb', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TracebackType', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='console', ctx=Load()), attr='pop_theme', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='PagerContext', bases=[], keywords=[], body=[Expr(value=Constant(value="A context manager that 'pages' content. See :meth:`~rich.console.Console.pager` for usage.")), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='console', annotation=Constant(value='Console')), arg(arg='pager', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Pager', ctx=Load()), ctx=Load())), arg(arg='styles', annotation=Name(id='bool', ctx=Load())), arg(arg='links', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=False), Constant(value=False)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_console', ctx=Store())], value=Name(id='console', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='pager', ctx=Store())], value=IfExp(test=Compare(left=Name(id='pager', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Call(func=Name(id='SystemPager', ctx=Load()), args=[], keywords=[]), orelse=Name(id='pager', ctx=Load()))), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='styles', ctx=Store())], value=Name(id='styles', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='links', ctx=Store())], value=Name(id='links', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__enter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_console', ctx=Load()), attr='_enter_buffer', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='self', ctx=Load()))], decorator_list=[], returns=Constant(value='PagerContext')), FunctionDef(name='__exit__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='exc_type', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Type', ctx=Load()), slice=Name(id='BaseException', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='exc_val', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='BaseException', ctx=Load()), ctx=Load())), arg(arg='exc_tb', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TracebackType', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='exc_type', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[With(items=[withitem(context_expr=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_console', ctx=Load()), attr='_lock', ctx=Load()))], body=[AnnAssign(target=Name(id='buffer', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Segment', ctx=Load()), ctx=Load()), value=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_console', ctx=Load()), attr='_buffer', ctx=Load()), slice=Slice(), ctx=Load()), simple=1), Delete(targets=[Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_console', ctx=Load()), attr='_buffer', ctx=Load()), slice=Slice(), ctx=Del())]), AnnAssign(target=Name(id='segments', ctx=Store()), annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='Segment', ctx=Load()), ctx=Load()), value=Name(id='buffer', ctx=Load()), simple=1), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='styles', ctx=Load())), body=[Assign(targets=[Name(id='segments', ctx=Store())], value=Call(func=Attribute(value=Name(id='Segment', ctx=Load()), attr='strip_styles', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[]))], orelse=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='links', ctx=Load())), body=[Assign(targets=[Name(id='segments', ctx=Store())], value=Call(func=Attribute(value=Name(id='Segment', ctx=Load()), attr='strip_links', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[]))], orelse=[])]), Assign(targets=[Name(id='content', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_console', ctx=Load()), attr='_render_buffer', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='pager', ctx=Load()), attr='show', ctx=Load()), args=[Name(id='content', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_console', ctx=Load()), attr='_exit_buffer', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='ScreenContext', bases=[], keywords=[], body=[Expr(value=Constant(value='A context manager that enables an alternative screen. See :meth:`~rich.console.Console.screen` for usage.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='console', annotation=Constant(value='Console')), arg(arg='hide_cursor', annotation=Name(id='bool', ctx=Load())), arg(arg='style', annotation=Name(id='StyleType', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='')]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='console', ctx=Store())], value=Name(id='console', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='hide_cursor', ctx=Store())], value=Name(id='hide_cursor', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='screen', ctx=Store())], value=Call(func=Name(id='Screen', ctx=Load()), args=[], keywords=[keyword(arg='style', value=Name(id='style', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_changed', ctx=Store())], value=Constant(value=False))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='update', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='renderables', annotation=Name(id='RenderableType', ctx=Load())), kwonlyargs=[arg(arg='style', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='StyleType', ctx=Load()), ctx=Load()))], kw_defaults=[Constant(value=None)], defaults=[]), body=[Expr(value=Constant(value='Update the screen.\n\n        Args:\n            renderable (RenderableType, optional): Optional renderable to replace current renderable,\n                or None for no change. Defaults to None.\n            style: (Style, optional): Replacement style, or None for no change. Defaults to None.\n        ')), If(test=Name(id='renderables', ctx=Load()), body=[Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='screen', ctx=Load()), attr='renderable', ctx=Store())], value=IfExp(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='renderables', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=Call(func=Name(id='Group', ctx=Load()), args=[Starred(value=Name(id='renderables', ctx=Load()), ctx=Load())], keywords=[]), orelse=Subscript(value=Name(id='renderables', ctx=Load()), slice=Constant(value=0), ctx=Load())))], orelse=[]), If(test=Compare(left=Name(id='style', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='screen', ctx=Load()), attr='style', ctx=Store())], value=Name(id='style', ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='console', ctx=Load()), attr='print', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='screen', ctx=Load())], keywords=[keyword(arg='end', value=Constant(value=''))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__enter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_changed', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='console', ctx=Load()), attr='set_alt_screen', ctx=Load()), args=[Constant(value=True)], keywords=[])), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='_changed', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='hide_cursor', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='console', ctx=Load()), attr='show_cursor', ctx=Load()), args=[Constant(value=False)], keywords=[]))], orelse=[]), Return(value=Name(id='self', ctx=Load()))], decorator_list=[], returns=Constant(value='ScreenContext')), FunctionDef(name='__exit__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='exc_type', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Type', ctx=Load()), slice=Name(id='BaseException', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='exc_val', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='BaseException', ctx=Load()), ctx=Load())), arg(arg='exc_tb', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TracebackType', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_changed', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='console', ctx=Load()), attr='set_alt_screen', ctx=Load()), args=[Constant(value=False)], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='hide_cursor', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='console', ctx=Load()), attr='show_cursor', ctx=Load()), args=[Constant(value=True)], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='Group', bases=[], keywords=[], body=[Expr(value=Constant(value='Takes a group of renderables and returns a renderable object that renders the group.\n\n    Args:\n        renderables (Iterable[RenderableType]): An iterable of renderable objects.\n        fit (bool, optional): Fit dimension of group to contents, or fill available space. Defaults to True.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='renderables', annotation=Constant(value='RenderableType')), kwonlyargs=[arg(arg='fit', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=True)], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_renderables', ctx=Store())], value=Name(id='renderables', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='fit', ctx=Store())], value=Name(id='fit', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_render', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='RenderableType', ctx=Load()), ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0)], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='renderables', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_render', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_render', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_renderables', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_render', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Constant(value='RenderableType'), ctx=Load())), FunctionDef(name='__rich_measure__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='console', annotation=Constant(value='Console')), arg(arg='options', annotation=Constant(value='ConsoleOptions'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='fit', ctx=Load()), body=[Return(value=Call(func=Name(id='measure_renderables', ctx=Load()), args=[Name(id='console', ctx=Load()), Name(id='options', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='renderables', ctx=Load())], keywords=[]))], orelse=[Return(value=Call(func=Name(id='Measurement', ctx=Load()), args=[Attribute(value=Name(id='options', ctx=Load()), attr='max_width', ctx=Load()), Attribute(value=Name(id='options', ctx=Load()), attr='max_width', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value='Measurement')), FunctionDef(name='__rich_console__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='console', annotation=Constant(value='Console')), arg(arg='options', annotation=Constant(value='ConsoleOptions'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=YieldFrom(value=Attribute(value=Name(id='self', ctx=Load()), attr='renderables', ctx=Load())))], decorator_list=[], returns=Name(id='RenderResult', ctx=Load()))], decorator_list=[]), FunctionDef(name='group', args=arguments(posonlyargs=[], args=[arg(arg='fit', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Expr(value=Constant(value='A decorator that turns an iterable of renderables in to a group.\n\n    Args:\n        fit (bool, optional): Fit dimension of group to contents, or fill available space. Defaults to True.\n    ')), FunctionDef(name='decorator', args=arguments(posonlyargs=[], args=[arg(arg='method', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='RenderableType', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Convert a method that returns an iterable of renderables in to a Group.')), FunctionDef(name='_replace', args=arguments(posonlyargs=[], args=[], vararg=arg(arg='args', annotation=Name(id='Any', ctx=Load())), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs', annotation=Name(id='Any', ctx=Load())), defaults=[]), body=[Assign(targets=[Name(id='renderables', ctx=Store())], value=Call(func=Name(id='method', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))])), Return(value=Call(func=Name(id='Group', ctx=Load()), args=[Starred(value=Name(id='renderables', ctx=Load()), ctx=Load())], keywords=[keyword(arg='fit', value=Name(id='fit', ctx=Load()))]))], decorator_list=[Call(func=Name(id='wraps', ctx=Load()), args=[Name(id='method', ctx=Load())], keywords=[])], returns=Name(id='Group', ctx=Load())), Return(value=Name(id='_replace', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Name(id='Group', ctx=Load())], ctx=Load()), ctx=Load())), Return(value=Name(id='decorator', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Name(id='Group', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='_is_jupyter', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Check if we're running in a Jupyter notebook.")), Try(body=[Expr(value=Name(id='get_ipython', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='NameError', ctx=Load()), body=[Return(value=Constant(value=False))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='ipython', ctx=Store())], value=Call(func=Name(id='get_ipython', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='shell', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='ipython', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load())), If(test=BoolOp(op=Or(), values=[Compare(left=Constant(value='google.colab'), ops=[In()], comparators=[Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='ipython', ctx=Load()), attr='__class__', ctx=Load())], keywords=[])]), Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getenv', ctx=Load()), args=[Constant(value='DATABRICKS_RUNTIME_VERSION')], keywords=[]), Compare(left=Name(id='shell', ctx=Load()), ops=[Eq()], comparators=[Constant(value='ZMQInteractiveShell')])]), body=[Return(value=Constant(value=True))], orelse=[If(test=Compare(left=Name(id='shell', ctx=Load()), ops=[Eq()], comparators=[Constant(value='TerminalInteractiveShell')]), body=[Return(value=Constant(value=False))], orelse=[Return(value=Constant(value=False))])])], decorator_list=[], returns=Name(id='bool', ctx=Load())), Assign(targets=[Name(id='COLOR_SYSTEMS', ctx=Store())], value=Dict(keys=[Constant(value='standard'), Constant(value='256'), Constant(value='truecolor'), Constant(value='windows')], values=[Attribute(value=Name(id='ColorSystem', ctx=Load()), attr='STANDARD', ctx=Load()), Attribute(value=Name(id='ColorSystem', ctx=Load()), attr='EIGHT_BIT', ctx=Load()), Attribute(value=Name(id='ColorSystem', ctx=Load()), attr='TRUECOLOR', ctx=Load()), Attribute(value=Name(id='ColorSystem', ctx=Load()), attr='WINDOWS', ctx=Load())])), Assign(targets=[Name(id='_COLOR_SYSTEMS_NAMES', ctx=Store())], value=DictComp(key=Name(id='system', ctx=Load()), value=Name(id='name', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='system', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='COLOR_SYSTEMS', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])), ClassDef(name='ConsoleThreadLocals', bases=[Attribute(value=Name(id='threading', ctx=Load()), attr='local', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Thread local values for Console context.')), AnnAssign(target=Name(id='theme_stack', ctx=Store()), annotation=Name(id='ThemeStack', ctx=Load()), simple=1), AnnAssign(target=Name(id='buffer', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Segment', ctx=Load()), ctx=Load()), value=Call(func=Name(id='field', ctx=Load()), args=[], keywords=[keyword(arg='default_factory', value=Name(id='list', ctx=Load()))]), simple=1), AnnAssign(target=Name(id='buffer_index', ctx=Store()), annotation=Name(id='int', ctx=Load()), value=Constant(value=0), simple=1)], decorator_list=[Name(id='dataclass', ctx=Load())]), ClassDef(name='RenderHook', bases=[Name(id='ABC', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Provides hooks in to the render process.')), FunctionDef(name='process_renderables', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='renderables', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='ConsoleRenderable', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Called with a list of objects to render.\n\n        This method can return a new list of renderables, or modify and return the same list.\n\n        Args:\n            renderables (List[ConsoleRenderable]): A number of renderable objects.\n\n        Returns:\n            List[ConsoleRenderable]: A replacement list of renderables.\n        '))], decorator_list=[Name(id='abstractmethod', ctx=Load())], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='ConsoleRenderable', ctx=Load()), ctx=Load()))], decorator_list=[]), AnnAssign(target=Name(id='_windows_console_features', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='WindowsConsoleFeatures'), ctx=Load()), value=Constant(value=None), simple=1), FunctionDef(name='get_windows_console_features', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Global(names=['_windows_console_features']), If(test=Compare(left=Name(id='_windows_console_features', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=Name(id='_windows_console_features', ctx=Load()))], orelse=[]), ImportFrom(module='_windows', names=[alias(name='get_windows_console_features')], level=1), Assign(targets=[Name(id='_windows_console_features', ctx=Store())], value=Call(func=Name(id='get_windows_console_features', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='_windows_console_features', ctx=Load()))], decorator_list=[], returns=Constant(value='WindowsConsoleFeatures')), FunctionDef(name='detect_legacy_windows', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Detect legacy Windows.')), Return(value=BoolOp(op=And(), values=[Name(id='WINDOWS', ctx=Load()), UnaryOp(op=Not(), operand=Attribute(value=Call(func=Name(id='get_windows_console_features', ctx=Load()), args=[], keywords=[]), attr='vt', ctx=Load()))]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), ClassDef(name='Console', bases=[], keywords=[], body=[Expr(value=Constant(value='A high level console interface.\n\n    Args:\n        color_system (str, optional): The color system supported by your terminal,\n            either ``"standard"``, ``"256"`` or ``"truecolor"``. Leave as ``"auto"`` to autodetect.\n        force_terminal (Optional[bool], optional): Enable/disable terminal control codes, or None to auto-detect terminal. Defaults to None.\n        force_jupyter (Optional[bool], optional): Enable/disable Jupyter rendering, or None to auto-detect Jupyter. Defaults to None.\n        force_interactive (Optional[bool], optional): Enable/disable interactive mode, or None to auto detect. Defaults to None.\n        soft_wrap (Optional[bool], optional): Set soft wrap default on print method. Defaults to False.\n        theme (Theme, optional): An optional style theme object, or ``None`` for default theme.\n        stderr (bool, optional): Use stderr rather than stdout if ``file`` is not specified. Defaults to False.\n        file (IO, optional): A file object where the console should write to. Defaults to stdout.\n        quiet (bool, Optional): Boolean to suppress all output. Defaults to False.\n        width (int, optional): The width of the terminal. Leave as default to auto-detect width.\n        height (int, optional): The height of the terminal. Leave as default to auto-detect height.\n        style (StyleType, optional): Style to apply to all output, or None for no style. Defaults to None.\n        no_color (Optional[bool], optional): Enabled no color mode, or None to auto detect. Defaults to None.\n        tab_size (int, optional): Number of spaces used to replace a tab character. Defaults to 8.\n        record (bool, optional): Boolean to enable recording of terminal output,\n            required to call :meth:`export_html`, :meth:`export_svg`, and :meth:`export_text`. Defaults to False.\n        markup (bool, optional): Boolean to enable :ref:`console_markup`. Defaults to True.\n        emoji (bool, optional): Enable emoji code. Defaults to True.\n        emoji_variant (str, optional): Optional emoji variant, either "text" or "emoji". Defaults to None.\n        highlight (bool, optional): Enable automatic highlighting. Defaults to True.\n        log_time (bool, optional): Boolean to enable logging of time by :meth:`log` methods. Defaults to True.\n        log_path (bool, optional): Boolean to enable the logging of the caller by :meth:`log`. Defaults to True.\n        log_time_format (Union[str, TimeFormatterCallable], optional): If ``log_time`` is enabled, either string for strftime or callable that formats the time. Defaults to "[%X] ".\n        highlighter (HighlighterType, optional): Default highlighter.\n        legacy_windows (bool, optional): Enable legacy Windows mode, or ``None`` to auto detect. Defaults to ``None``.\n        safe_box (bool, optional): Restrict box options that don\'t render on legacy Windows.\n        get_datetime (Callable[[], datetime], optional): Callable that gets the current time as a datetime.datetime object (used by Console.log),\n            or None for datetime.now.\n        get_time (Callable[[], time], optional): Callable that gets the current time in seconds, default uses time.monotonic.\n    ')), AnnAssign(target=Name(id='_environ', ctx=Store()), annotation=Subscript(value=Name(id='Mapping', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), simple=1), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[arg(arg='color_system', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Literal', ctx=Load()), slice=Tuple(elts=[Constant(value='auto'), Constant(value='standard'), Constant(value='256'), Constant(value='truecolor'), Constant(value='windows')], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='force_terminal', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load())), arg(arg='force_jupyter', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load())), arg(arg='force_interactive', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load())), arg(arg='soft_wrap', annotation=Name(id='bool', ctx=Load())), arg(arg='theme', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Theme', ctx=Load()), ctx=Load())), arg(arg='stderr', annotation=Name(id='bool', ctx=Load())), arg(arg='file', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='IO', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='quiet', annotation=Name(id='bool', ctx=Load())), arg(arg='width', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='height', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='style', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='StyleType', ctx=Load()), ctx=Load())), arg(arg='no_color', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load())), arg(arg='tab_size', annotation=Name(id='int', ctx=Load())), arg(arg='record', annotation=Name(id='bool', ctx=Load())), arg(arg='markup', annotation=Name(id='bool', ctx=Load())), arg(arg='emoji', annotation=Name(id='bool', ctx=Load())), arg(arg='emoji_variant', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='EmojiVariant', ctx=Load()), ctx=Load())), arg(arg='highlight', annotation=Name(id='bool', ctx=Load())), arg(arg='log_time', annotation=Name(id='bool', ctx=Load())), arg(arg='log_path', annotation=Name(id='bool', ctx=Load())), arg(arg='log_time_format', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='FormatTimeCallable', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='highlighter', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='HighlighterType'), ctx=Load())), arg(arg='legacy_windows', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load())), arg(arg='safe_box', annotation=Name(id='bool', ctx=Load())), arg(arg='get_datetime', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='datetime', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='get_time', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='_environ', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Mapping', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kw_defaults=[Constant(value='auto'), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=False), Constant(value=None), Constant(value=False), Constant(value=None), Constant(value=False), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=8), Constant(value=False), Constant(value=True), Constant(value=True), Constant(value=None), Constant(value=True), Constant(value=True), Constant(value=True), Constant(value='[%X]'), Call(func=Name(id='ReprHighlighter', ctx=Load()), args=[], keywords=[]), Constant(value=None), Constant(value=True), Constant(value=None), Constant(value=None), Constant(value=None)], defaults=[]), body=[If(test=Compare(left=Name(id='_environ', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_environ', ctx=Store())], value=Name(id='_environ', ctx=Load()))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='is_jupyter', ctx=Store())], value=IfExp(test=Compare(left=Name(id='force_jupyter', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Call(func=Name(id='_is_jupyter', ctx=Load()), args=[], keywords=[]), orelse=Name(id='force_jupyter', ctx=Load()))), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='is_jupyter', ctx=Load()), body=[If(test=Compare(left=Name(id='width', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='jupyter_columns', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='JUPYTER_COLUMNS')], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='jupyter_columns', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Call(func=Attribute(value=Name(id='jupyter_columns', ctx=Load()), attr='isdigit', ctx=Load()), args=[], keywords=[])]), body=[Assign(targets=[Name(id='width', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Name(id='jupyter_columns', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='width', ctx=Store())], value=Name(id='JUPYTER_DEFAULT_COLUMNS', ctx=Load()))])], orelse=[]), If(test=Compare(left=Name(id='height', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='jupyter_lines', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='JUPYTER_LINES')], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='jupyter_lines', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Call(func=Attribute(value=Name(id='jupyter_lines', ctx=Load()), attr='isdigit', ctx=Load()), args=[], keywords=[])]), body=[Assign(targets=[Name(id='height', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Name(id='jupyter_lines', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='height', ctx=Store())], value=Name(id='JUPYTER_DEFAULT_LINES', ctx=Load()))])], orelse=[])], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='tab_size', ctx=Store())], value=Name(id='tab_size', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='record', ctx=Store())], value=Name(id='record', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_markup', ctx=Store())], value=Name(id='markup', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_emoji', ctx=Store())], value=Name(id='emoji', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_emoji_variant', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='EmojiVariant', ctx=Load()), ctx=Load()), value=Name(id='emoji_variant', ctx=Load()), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_highlight', ctx=Store())], value=Name(id='highlight', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='legacy_windows', ctx=Store()), annotation=Name(id='bool', ctx=Load()), value=IfExp(test=Compare(left=Name(id='legacy_windows', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=BoolOp(op=And(), values=[Call(func=Name(id='detect_legacy_windows', ctx=Load()), args=[], keywords=[]), UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='is_jupyter', ctx=Load()))]), orelse=Name(id='legacy_windows', ctx=Load())), simple=0), If(test=Compare(left=Name(id='width', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='columns', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='COLUMNS')], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='columns', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Call(func=Attribute(value=Name(id='columns', ctx=Load()), attr='isdigit', ctx=Load()), args=[], keywords=[])]), body=[Assign(targets=[Name(id='width', ctx=Store())], value=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Name(id='columns', ctx=Load())], keywords=[]), op=Sub(), right=Attribute(value=Name(id='self', ctx=Load()), attr='legacy_windows', ctx=Load())))], orelse=[])], orelse=[]), If(test=Compare(left=Name(id='height', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='lines', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='LINES')], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='lines', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='isdigit', ctx=Load()), args=[], keywords=[])]), body=[Assign(targets=[Name(id='height', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Name(id='lines', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='soft_wrap', ctx=Store())], value=Name(id='soft_wrap', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_width', ctx=Store())], value=Name(id='width', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_height', ctx=Store())], value=Name(id='height', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_color_system', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='ColorSystem', ctx=Load()), ctx=Load()), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_force_terminal', ctx=Store())], value=Constant(value=None)), If(test=Compare(left=Name(id='force_terminal', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_force_terminal', ctx=Store())], value=Name(id='force_terminal', ctx=Load()))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_file', ctx=Store())], value=Name(id='file', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='quiet', ctx=Store())], value=Name(id='quiet', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='stderr', ctx=Store())], value=Name(id='stderr', ctx=Load())), If(test=Compare(left=Name(id='color_system', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_color_system', ctx=Store())], value=Constant(value=None))], orelse=[If(test=Compare(left=Name(id='color_system', ctx=Load()), ops=[Eq()], comparators=[Constant(value='auto')]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_color_system', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_detect_color_system', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_color_system', ctx=Store())], value=Subscript(value=Name(id='COLOR_SYSTEMS', ctx=Load()), slice=Name(id='color_system', ctx=Load()), ctx=Load()))])]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_lock', ctx=Store())], value=Call(func=Attribute(value=Name(id='threading', ctx=Load()), attr='RLock', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_log_render', ctx=Store())], value=Call(func=Name(id='LogRender', ctx=Load()), args=[], keywords=[keyword(arg='show_time', value=Name(id='log_time', ctx=Load())), keyword(arg='show_path', value=Name(id='log_path', ctx=Load())), keyword(arg='time_format', value=Name(id='log_time_format', ctx=Load()))])), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='highlighter', ctx=Store()), annotation=Name(id='HighlighterType', ctx=Load()), value=BoolOp(op=Or(), values=[Name(id='highlighter', ctx=Load()), Name(id='_null_highlighter', ctx=Load())]), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='safe_box', ctx=Store())], value=Name(id='safe_box', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='get_datetime', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='get_datetime', ctx=Load()), Attribute(value=Name(id='datetime', ctx=Load()), attr='now', ctx=Load())])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='get_time', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='get_time', ctx=Load()), Name(id='monotonic', ctx=Load())])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Store())], value=Name(id='style', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='no_color', ctx=Store())], value=IfExp(test=Compare(left=Name(id='no_color', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Name(id='no_color', ctx=Load()), orelse=Compare(left=Constant(value='NO_COLOR'), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_environ', ctx=Load())]))), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='is_interactive', ctx=Store())], value=IfExp(test=Compare(left=Name(id='force_interactive', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='is_terminal', ctx=Load()), UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='is_dumb_terminal', ctx=Load()))]), orelse=Name(id='force_interactive', ctx=Load()))), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_record_buffer_lock', ctx=Store())], value=Call(func=Attribute(value=Name(id='threading', ctx=Load()), attr='RLock', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_thread_locals', ctx=Store())], value=Call(func=Name(id='ConsoleThreadLocals', ctx=Load()), args=[], keywords=[keyword(arg='theme_stack', value=Call(func=Name(id='ThemeStack', ctx=Load()), args=[IfExp(test=Compare(left=Name(id='theme', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Attribute(value=Name(id='themes', ctx=Load()), attr='DEFAULT', ctx=Load()), orelse=Name(id='theme', ctx=Load()))], keywords=[]))])), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_record_buffer', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Segment', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_render_hooks', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='RenderHook', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_live', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='Live'), ctx=Load()), value=Constant(value=None), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_is_alt_screen', ctx=Store())], value=Constant(value=False))], decorator_list=[]), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[Constant(value='<console width='), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='width', ctx=Load()), conversion=-1), Constant(value=' '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='_color_system', ctx=Load()), conversion=115), Constant(value='>')]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='file', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get the file object to write to.')), Assign(targets=[Name(id='file', ctx=Store())], value=BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='_file', ctx=Load()), IfExp(test=Attribute(value=Name(id='self', ctx=Load()), attr='stderr', ctx=Load()), body=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()), orelse=Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load()))])), Assign(targets=[Name(id='file', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='file', ctx=Load()), Constant(value='rich_proxied_file'), Name(id='file', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='file', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='file', ctx=Store())], value=Name(id='NULL_FILE', ctx=Load()))], orelse=[]), Return(value=Name(id='file', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='IO', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='new_file', annotation=Subscript(value=Name(id='IO', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Set a new file object.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_file', ctx=Store())], value=Name(id='new_file', ctx=Load()))], decorator_list=[Attribute(value=Name(id='file', ctx=Load()), attr='setter', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='_buffer', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get a thread local buffer.')), Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_thread_locals', ctx=Load()), attr='buffer', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Segment', ctx=Load()), ctx=Load())), FunctionDef(name='_buffer_index', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get a thread local buffer.')), Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_thread_locals', ctx=Load()), attr='buffer_index', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load())), FunctionDef(name='_buffer_index', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_thread_locals', ctx=Load()), attr='buffer_index', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='_buffer_index', ctx=Load()), attr='setter', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='_theme_stack', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get the thread local theme stack.')), Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_thread_locals', ctx=Load()), attr='theme_stack', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='ThemeStack', ctx=Load())), FunctionDef(name='_detect_color_system', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Detect color system from env vars.')), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='is_jupyter', ctx=Load()), body=[Return(value=Attribute(value=Name(id='ColorSystem', ctx=Load()), attr='TRUECOLOR', ctx=Load()))], orelse=[]), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='is_terminal', ctx=Load())), Attribute(value=Name(id='self', ctx=Load()), attr='is_dumb_terminal', ctx=Load())]), body=[Return(value=Constant(value=None))], orelse=[]), If(test=Name(id='WINDOWS', ctx=Load()), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='legacy_windows', ctx=Load()), body=[Return(value=Attribute(value=Name(id='ColorSystem', ctx=Load()), attr='WINDOWS', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='windows_console_features', ctx=Store())], value=Call(func=Name(id='get_windows_console_features', ctx=Load()), args=[], keywords=[])), Return(value=IfExp(test=Attribute(value=Name(id='windows_console_features', ctx=Load()), attr='truecolor', ctx=Load()), body=Attribute(value=Name(id='ColorSystem', ctx=Load()), attr='TRUECOLOR', ctx=Load()), orelse=Attribute(value=Name(id='ColorSystem', ctx=Load()), attr='EIGHT_BIT', ctx=Load())))], orelse=[Assign(targets=[Name(id='color_term', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='COLORTERM'), Constant(value='')], keywords=[]), attr='strip', ctx=Load()), args=[], keywords=[]), attr='lower', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='color_term', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='truecolor'), Constant(value='24bit')], ctx=Load())]), body=[Return(value=Attribute(value=Name(id='ColorSystem', ctx=Load()), attr='TRUECOLOR', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='term', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='TERM'), Constant(value='')], keywords=[]), attr='strip', ctx=Load()), args=[], keywords=[]), attr='lower', ctx=Load()), args=[], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='_term_name', ctx=Store()), Name(id='_hyphen', ctx=Store()), Name(id='colors', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='term', ctx=Load()), attr='rpartition', ctx=Load()), args=[Constant(value='-')], keywords=[])), Assign(targets=[Name(id='color_system', ctx=Store())], value=Call(func=Attribute(value=Name(id='_TERM_COLORS', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='colors', ctx=Load()), Attribute(value=Name(id='ColorSystem', ctx=Load()), attr='STANDARD', ctx=Load())], keywords=[])), Return(value=Name(id='color_system', ctx=Load()))])], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='ColorSystem', ctx=Load()), ctx=Load())), FunctionDef(name='_enter_buffer', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Enter in to a buffer context, and buffer all output.')), AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer_index', ctx=Store()), op=Add(), value=Constant(value=1))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_exit_buffer', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Leave buffer context, and render content if required.')), AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer_index', ctx=Store()), op=Sub(), value=Constant(value=1)), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_check_buffer', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='set_live', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='live', annotation=Constant(value='Live'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Set Live instance. Used by Live context manager.\n\n        Args:\n            live (Live): Live instance using this Console.\n\n        Raises:\n            errors.LiveError: If this Console has a Live context currently active.\n        ')), With(items=[withitem(context_expr=Attribute(value=Name(id='self', ctx=Load()), attr='_lock', ctx=Load()))], body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_live', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Attribute(value=Name(id='errors', ctx=Load()), attr='LiveError', ctx=Load()), args=[Constant(value='Only one live display may be active at once')], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_live', ctx=Store())], value=Name(id='live', ctx=Load()))])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='clear_live', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Clear the Live instance.')), With(items=[withitem(context_expr=Attribute(value=Name(id='self', ctx=Load()), attr='_lock', ctx=Load()))], body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_live', ctx=Store())], value=Constant(value=None))])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='push_render_hook', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='hook', annotation=Name(id='RenderHook', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Add a new render hook to the stack.\n\n        Args:\n            hook (RenderHook): Render hook instance.\n        ')), With(items=[withitem(context_expr=Attribute(value=Name(id='self', ctx=Load()), attr='_lock', ctx=Load()))], body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_render_hooks', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='hook', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='pop_render_hook', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Pop the last renderhook from the stack.')), With(items=[withitem(context_expr=Attribute(value=Name(id='self', ctx=Load()), attr='_lock', ctx=Load()))], body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_render_hooks', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[]))])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__enter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Own context manager to enter buffer context.')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_enter_buffer', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='self', ctx=Load()))], decorator_list=[], returns=Constant(value='Console')), FunctionDef(name='__exit__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='exc_type', annotation=Name(id='Any', ctx=Load())), arg(arg='exc_value', annotation=Name(id='Any', ctx=Load())), arg(arg='traceback', annotation=Name(id='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Exit buffer context.')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_exit_buffer', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='begin_capture', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Begin capturing console output. Call :meth:`end_capture` to exit capture mode and return output.')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_enter_buffer', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='end_capture', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='End capture mode and return captured string.\n\n        Returns:\n            str: Console output.\n        ')), Assign(targets=[Name(id='render_result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_render_buffer', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load())], keywords=[])), Delete(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), slice=Slice(), ctx=Del())]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_exit_buffer', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='render_result', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='push_theme', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='theme', annotation=Name(id='Theme', ctx=Load()))], kwonlyargs=[arg(arg='inherit', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=True)], defaults=[]), body=[Expr(value=Constant(value='Push a new theme on to the top of the stack, replacing the styles from the previous theme.\n        Generally speaking, you should call :meth:`~rich.console.Console.use_theme` to get a context manager, rather\n        than calling this method directly.\n\n        Args:\n            theme (Theme): A theme instance.\n            inherit (bool, optional): Inherit existing styles. Defaults to True.\n        ')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_theme_stack', ctx=Load()), attr='push_theme', ctx=Load()), args=[Name(id='theme', ctx=Load())], keywords=[keyword(arg='inherit', value=Name(id='inherit', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='pop_theme', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Remove theme from top of stack, restoring previous theme.')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_theme_stack', ctx=Load()), attr='pop_theme', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='use_theme', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='theme', annotation=Name(id='Theme', ctx=Load()))], kwonlyargs=[arg(arg='inherit', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=True)], defaults=[]), body=[Expr(value=Constant(value='Use a different theme for the duration of the context manager.\n\n        Args:\n            theme (Theme): Theme instance to user.\n            inherit (bool, optional): Inherit existing console styles. Defaults to True.\n\n        Returns:\n            ThemeContext: [description]\n        ')), Return(value=Call(func=Name(id='ThemeContext', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='theme', ctx=Load()), Name(id='inherit', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='ThemeContext', ctx=Load())), FunctionDef(name='color_system', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get color system string.\n\n        Returns:\n            Optional[str]: "standard", "256" or "truecolor".\n        ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_color_system', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=Subscript(value=Name(id='_COLOR_SYSTEMS_NAMES', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='_color_system', ctx=Load()), ctx=Load()))], orelse=[Return(value=Constant(value=None))])], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='encoding', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get the encoding of the console file, e.g. ``"utf-8"``.\n\n        Returns:\n            str: A standard encoding string.\n        ')), Return(value=Call(func=Attribute(value=BoolOp(op=Or(), values=[Call(func=Name(id='getattr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='file', ctx=Load()), Constant(value='encoding'), Constant(value='utf-8')], keywords=[]), Constant(value='utf-8')]), attr='lower', ctx=Load()), args=[], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='is_terminal', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check if the console is writing to a terminal.\n\n        Returns:\n            bool: True if the console writing to a device capable of\n            understanding terminal codes, otherwise False.\n        ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_force_terminal', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_force_terminal', ctx=Load()))], orelse=[]), If(test=BoolOp(op=And(), values=[Call(func=Name(id='hasattr', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='stdin', ctx=Load()), Constant(value='__module__')], keywords=[]), Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stdin', ctx=Load()), attr='__module__', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='idlelib')], keywords=[])]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='is_jupyter', ctx=Load()), body=[Return(value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='force_color', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='FORCE_COLOR')], keywords=[])), If(test=Compare(left=Name(id='force_color', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_force_terminal', ctx=Store())], value=Constant(value=True)), Return(value=Constant(value=True))], orelse=[]), AnnAssign(target=Name(id='isatty', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='bool', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), value=Call(func=Name(id='getattr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='file', ctx=Load()), Constant(value='isatty'), Constant(value=None)], keywords=[]), simple=1), Try(body=[Return(value=IfExp(test=Compare(left=Name(id='isatty', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Constant(value=False), orelse=Call(func=Name(id='isatty', ctx=Load()), args=[], keywords=[])))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Return(value=Constant(value=False))])], orelse=[], finalbody=[])], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='is_dumb_terminal', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Detect dumb terminal.\n\n        Returns:\n            bool: True if writing to a dumb terminal, otherwise False.\n\n        ')), Assign(targets=[Name(id='_term', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='TERM'), Constant(value='')], keywords=[])), Assign(targets=[Name(id='is_dumb', ctx=Store())], value=Compare(left=Call(func=Attribute(value=Name(id='_term', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), ops=[In()], comparators=[Tuple(elts=[Constant(value='dumb'), Constant(value='unknown')], ctx=Load())])), Return(value=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='is_terminal', ctx=Load()), Name(id='is_dumb', ctx=Load())]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='options', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get default console options.')), Return(value=Call(func=Name(id='ConsoleOptions', ctx=Load()), args=[], keywords=[keyword(arg='max_height', value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='size', ctx=Load()), attr='height', ctx=Load())), keyword(arg='size', value=Attribute(value=Name(id='self', ctx=Load()), attr='size', ctx=Load())), keyword(arg='legacy_windows', value=Attribute(value=Name(id='self', ctx=Load()), attr='legacy_windows', ctx=Load())), keyword(arg='min_width', value=Constant(value=1)), keyword(arg='max_width', value=Attribute(value=Name(id='self', ctx=Load()), attr='width', ctx=Load())), keyword(arg='encoding', value=Attribute(value=Name(id='self', ctx=Load()), attr='encoding', ctx=Load())), keyword(arg='is_terminal', value=Attribute(value=Name(id='self', ctx=Load()), attr='is_terminal', ctx=Load()))]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='ConsoleOptions', ctx=Load())), FunctionDef(name='size', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get the size of the console.\n\n        Returns:\n            ConsoleDimensions: A named tuple containing the dimensions.\n        ')), If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_width', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_height', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Return(value=Call(func=Name(id='ConsoleDimensions', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_width', ctx=Load()), op=Sub(), right=Attribute(value=Name(id='self', ctx=Load()), attr='legacy_windows', ctx=Load())), Attribute(value=Name(id='self', ctx=Load()), attr='_height', ctx=Load())], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='is_dumb_terminal', ctx=Load()), body=[Return(value=Call(func=Name(id='ConsoleDimensions', ctx=Load()), args=[Constant(value=80), Constant(value=25)], keywords=[]))], orelse=[]), AnnAssign(target=Name(id='width', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=1), AnnAssign(target=Name(id='height', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=1), If(test=Name(id='WINDOWS', ctx=Load()), body=[Try(body=[Assign(targets=[Tuple(elts=[Name(id='width', ctx=Store()), Name(id='height', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='get_terminal_size', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='AttributeError', ctx=Load()), Name(id='ValueError', ctx=Load()), Name(id='OSError', ctx=Load())], ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], orelse=[For(target=Name(id='file_descriptor', ctx=Store()), iter=Name(id='_STD_STREAMS', ctx=Load()), body=[Try(body=[Assign(targets=[Tuple(elts=[Name(id='width', ctx=Store()), Name(id='height', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='get_terminal_size', ctx=Load()), args=[Name(id='file_descriptor', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='AttributeError', ctx=Load()), Name(id='ValueError', ctx=Load()), Name(id='OSError', ctx=Load())], ctx=Load()), body=[Pass()])], orelse=[Break()], finalbody=[])], orelse=[])]), Assign(targets=[Name(id='columns', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='COLUMNS')], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='columns', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Call(func=Attribute(value=Name(id='columns', ctx=Load()), attr='isdigit', ctx=Load()), args=[], keywords=[])]), body=[Assign(targets=[Name(id='width', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Name(id='columns', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='lines', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='LINES')], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='lines', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='isdigit', ctx=Load()), args=[], keywords=[])]), body=[Assign(targets=[Name(id='height', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Name(id='lines', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='width', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='width', ctx=Load()), Constant(value=80)])), Assign(targets=[Name(id='height', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='height', ctx=Load()), Constant(value=25)])), Return(value=Call(func=Name(id='ConsoleDimensions', ctx=Load()), args=[IfExp(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_width', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=BinOp(left=Name(id='width', ctx=Load()), op=Sub(), right=Attribute(value=Name(id='self', ctx=Load()), attr='legacy_windows', ctx=Load())), orelse=Attribute(value=Name(id='self', ctx=Load()), attr='_width', ctx=Load())), IfExp(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_height', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Name(id='height', ctx=Load()), orelse=Attribute(value=Name(id='self', ctx=Load()), attr='_height', ctx=Load()))], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='ConsoleDimensions', ctx=Load())), FunctionDef(name='size', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='new_size', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Set a new size for the terminal.\n\n        Args:\n            new_size (Tuple[int, int]): New width and height.\n        ')), Assign(targets=[Tuple(elts=[Name(id='width', ctx=Store()), Name(id='height', ctx=Store())], ctx=Store())], value=Name(id='new_size', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_width', ctx=Store())], value=Name(id='width', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_height', ctx=Store())], value=Name(id='height', ctx=Load()))], decorator_list=[Attribute(value=Name(id='size', ctx=Load()), attr='setter', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='width', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get the width of the console.\n\n        Returns:\n            int: The width (in characters) of the console.\n        ')), Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='size', ctx=Load()), attr='width', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load())), FunctionDef(name='width', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='width', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Set width.\n\n        Args:\n            width (int): New width.\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_width', ctx=Store())], value=Name(id='width', ctx=Load()))], decorator_list=[Attribute(value=Name(id='width', ctx=Load()), attr='setter', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='height', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get the height of the console.\n\n        Returns:\n            int: The height (in lines) of the console.\n        ')), Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='size', ctx=Load()), attr='height', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load())), FunctionDef(name='height', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='height', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Set height.\n\n        Args:\n            height (int): new height.\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_height', ctx=Store())], value=Name(id='height', ctx=Load()))], decorator_list=[Attribute(value=Name(id='height', ctx=Load()), attr='setter', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='bell', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Play a 'bell' sound (if supported by the terminal).")), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='control', ctx=Load()), args=[Call(func=Attribute(value=Name(id='Control', ctx=Load()), attr='bell', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='capture', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='A context manager to *capture* the result of print() or log() in a string,\n        rather than writing it to the console.\n\n        Example:\n            >>> from rich.console import Console\n            >>> console = Console()\n            >>> with console.capture() as capture:\n            ...     console.print("[bold magenta]Hello World[/]")\n            >>> print(capture.get())\n\n        Returns:\n            Capture: Context manager with disables writing to the terminal.\n        ')), Assign(targets=[Name(id='capture', ctx=Store())], value=Call(func=Name(id='Capture', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), Return(value=Name(id='capture', ctx=Load()))], decorator_list=[], returns=Name(id='Capture', ctx=Load())), FunctionDef(name='pager', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='pager', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Pager', ctx=Load()), ctx=Load())), arg(arg='styles', annotation=Name(id='bool', ctx=Load())), arg(arg='links', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=False), Constant(value=False)]), body=[Expr(value=Constant(value='A context manager to display anything printed within a "pager". The pager application\n        is defined by the system and will typically support at least pressing a key to scroll.\n\n        Args:\n            pager (Pager, optional): A pager object, or None to use :class:`~rich.pager.SystemPager`. Defaults to None.\n            styles (bool, optional): Show styles in pager. Defaults to False.\n            links (bool, optional): Show links in pager. Defaults to False.\n\n        Example:\n            >>> from rich.console import Console\n            >>> from rich.__main__ import make_test_card\n            >>> console = Console()\n            >>> with console.pager():\n                    console.print(make_test_card())\n\n        Returns:\n            PagerContext: A context manager.\n        ')), Return(value=Call(func=Name(id='PagerContext', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[keyword(arg='pager', value=Name(id='pager', ctx=Load())), keyword(arg='styles', value=Name(id='styles', ctx=Load())), keyword(arg='links', value=Name(id='links', ctx=Load()))]))], decorator_list=[], returns=Name(id='PagerContext', ctx=Load())), FunctionDef(name='line', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='count', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1)]), body=[Expr(value=Constant(value='Write new line(s).\n\n        Args:\n            count (int, optional): Number of new lines. Defaults to 1.\n        ')), Assert(test=Compare(left=Name(id='count', ctx=Load()), ops=[GtE()], comparators=[Constant(value=0)]), msg=Constant(value='count must be >= 0')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='print', ctx=Load()), args=[Call(func=Name(id='NewLine', ctx=Load()), args=[Name(id='count', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='clear', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='home', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Expr(value=Constant(value="Clear the screen.\n\n        Args:\n            home (bool, optional): Also move the cursor to 'home' position. Defaults to True.\n        ")), If(test=Name(id='home', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='control', ctx=Load()), args=[Call(func=Attribute(value=Name(id='Control', ctx=Load()), attr='clear', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='Control', ctx=Load()), attr='home', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='control', ctx=Load()), args=[Call(func=Attribute(value=Name(id='Control', ctx=Load()), attr='clear', ctx=Load()), args=[], keywords=[])], keywords=[]))])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='status', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='status', annotation=Name(id='RenderableType', ctx=Load()))], kwonlyargs=[arg(arg='spinner', annotation=Name(id='str', ctx=Load())), arg(arg='spinner_style', annotation=Name(id='StyleType', ctx=Load())), arg(arg='speed', annotation=Name(id='float', ctx=Load())), arg(arg='refresh_per_second', annotation=Name(id='float', ctx=Load()))], kw_defaults=[Constant(value='dots'), Constant(value='status.spinner'), Constant(value=1.0), Constant(value=12.5)], defaults=[]), body=[Expr(value=Constant(value='Display a status and spinner.\n\n        Args:\n            status (RenderableType): A status renderable (str or Text typically).\n            spinner (str, optional): Name of spinner animation (see python -m rich.spinner). Defaults to "dots".\n            spinner_style (StyleType, optional): Style of spinner. Defaults to "status.spinner".\n            speed (float, optional): Speed factor for spinner animation. Defaults to 1.0.\n            refresh_per_second (float, optional): Number of refreshes per second. Defaults to 12.5.\n\n        Returns:\n            Status: A Status object that may be used as a context manager.\n        ')), ImportFrom(module='status', names=[alias(name='Status')], level=1), Assign(targets=[Name(id='status_renderable', ctx=Store())], value=Call(func=Name(id='Status', ctx=Load()), args=[Name(id='status', ctx=Load())], keywords=[keyword(arg='console', value=Name(id='self', ctx=Load())), keyword(arg='spinner', value=Name(id='spinner', ctx=Load())), keyword(arg='spinner_style', value=Name(id='spinner_style', ctx=Load())), keyword(arg='speed', value=Name(id='speed', ctx=Load())), keyword(arg='refresh_per_second', value=Name(id='refresh_per_second', ctx=Load()))])), Return(value=Name(id='status_renderable', ctx=Load()))], decorator_list=[], returns=Constant(value='Status')), FunctionDef(name='show_cursor', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='show', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Expr(value=Constant(value='Show or hide the cursor.\n\n        Args:\n            show (bool, optional): Set visibility of the cursor.\n        ')), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='is_terminal', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='control', ctx=Load()), args=[Call(func=Attribute(value=Name(id='Control', ctx=Load()), attr='show_cursor', ctx=Load()), args=[Name(id='show', ctx=Load())], keywords=[])], keywords=[])), Return(value=Constant(value=True))], orelse=[]), Return(value=Constant(value=False))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='set_alt_screen', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='enable', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Expr(value=Constant(value='Enables alternative screen mode.\n\n        Note, if you enable this mode, you should ensure that is disabled before\n        the application exits. See :meth:`~rich.Console.screen` for a context manager\n        that handles this for you.\n\n        Args:\n            enable (bool, optional): Enable (True) or disable (False) alternate screen. Defaults to True.\n\n        Returns:\n            bool: True if the control codes were written.\n\n        ')), Assign(targets=[Name(id='changed', ctx=Store())], value=Constant(value=False)), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='is_terminal', ctx=Load()), UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='legacy_windows', ctx=Load()))]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='control', ctx=Load()), args=[Call(func=Attribute(value=Name(id='Control', ctx=Load()), attr='alt_screen', ctx=Load()), args=[Name(id='enable', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='changed', ctx=Store())], value=Constant(value=True)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_is_alt_screen', ctx=Store())], value=Name(id='enable', ctx=Load()))], orelse=[]), Return(value=Name(id='changed', ctx=Load()))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='is_alt_screen', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check if the alt screen was enabled.\n\n        Returns:\n            bool: True if the alt screen was enabled, otherwise False.\n        ')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_is_alt_screen', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='set_window_title', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='title', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Set the title of the console terminal window.\n\n        Warning: There is no means within Rich of "resetting" the window title to its\n        previous value, meaning the title you set will persist even after your application\n        exits.\n\n        ``fish`` shell resets the window title before and after each command by default,\n        negating this issue. Windows Terminal and command prompt will also reset the title for you.\n        Most other shells and terminals, however, do not do this.\n\n        Some terminals may require configuration changes before you can set the title.\n        Some terminals may not support setting the title at all.\n\n        Other software (including the terminal itself, the shell, custom prompts, plugins, etc.)\n        may also set the terminal window title. This could result in whatever value you write\n        using this method being overwritten.\n\n        Args:\n            title (str): The new title of the terminal window.\n\n        Returns:\n            bool: True if the control code to change the terminal title was\n                written, otherwise False. Note that a return value of True\n                does not guarantee that the window title has actually changed,\n                since the feature may be unsupported/disabled in some terminals.\n        ')), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='is_terminal', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='control', ctx=Load()), args=[Call(func=Attribute(value=Name(id='Control', ctx=Load()), attr='title', ctx=Load()), args=[Name(id='title', ctx=Load())], keywords=[])], keywords=[])), Return(value=Constant(value=True))], orelse=[]), Return(value=Constant(value=False))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='screen', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='hide_cursor', annotation=Name(id='bool', ctx=Load())), arg(arg='style', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='StyleType', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Expr(value=Constant(value="Context manager to enable and disable 'alternative screen' mode.\n\n        Args:\n            hide_cursor (bool, optional): Also hide the cursor. Defaults to False.\n            style (Style, optional): Optional style for screen. Defaults to None.\n\n        Returns:\n            ~ScreenContext: Context which enables alternate screen on enter, and disables it on exit.\n        ")), Return(value=Call(func=Name(id='ScreenContext', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[keyword(arg='hide_cursor', value=Name(id='hide_cursor', ctx=Load())), keyword(arg='style', value=BoolOp(op=Or(), values=[Name(id='style', ctx=Load()), Constant(value='')]))]))], decorator_list=[], returns=Constant(value='ScreenContext')), FunctionDef(name='measure', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='renderable', annotation=Name(id='RenderableType', ctx=Load()))], kwonlyargs=[arg(arg='options', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='ConsoleOptions', ctx=Load()), ctx=Load()))], kw_defaults=[Constant(value=None)], defaults=[]), body=[Expr(value=Constant(value='Measure a renderable. Returns a :class:`~rich.measure.Measurement` object which contains\n        information regarding the number of characters required to print the renderable.\n\n        Args:\n            renderable (RenderableType): Any renderable or string.\n            options (Optional[ConsoleOptions], optional): Options to use when measuring, or None\n                to use default options. Defaults to None.\n\n        Returns:\n            Measurement: A measurement of the renderable.\n        ')), Assign(targets=[Name(id='measurement', ctx=Store())], value=Call(func=Attribute(value=Name(id='Measurement', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='self', ctx=Load()), BoolOp(op=Or(), values=[Name(id='options', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())]), Name(id='renderable', ctx=Load())], keywords=[])), Return(value=Name(id='measurement', ctx=Load()))], decorator_list=[], returns=Name(id='Measurement', ctx=Load())), FunctionDef(name='render', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='renderable', annotation=Name(id='RenderableType', ctx=Load())), arg(arg='options', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='ConsoleOptions', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Render an object in to an iterable of `Segment` instances.\n\n        This method contains the logic for rendering objects with the console protocol.\n        You are unlikely to need to use it directly, unless you are extending the library.\n\n        Args:\n            renderable (RenderableType): An object supporting the console protocol, or\n                an object that may be converted to a string.\n            options (ConsoleOptions, optional): An options object, or None to use self.options. Defaults to None.\n\n        Returns:\n            Iterable[Segment]: An iterable of segments that may be rendered.\n        ')), Assign(targets=[Name(id='_options', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='options', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())])), If(test=Compare(left=Attribute(value=Name(id='_options', ctx=Load()), attr='max_width', ctx=Load()), ops=[Lt()], comparators=[Constant(value=1)]), body=[Return()], orelse=[]), AnnAssign(target=Name(id='render_iterable', ctx=Store()), annotation=Name(id='RenderResult', ctx=Load()), simple=1), Assign(targets=[Name(id='renderable', ctx=Store())], value=Call(func=Name(id='rich_cast', ctx=Load()), args=[Name(id='renderable', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='renderable', ctx=Load()), Constant(value='__rich_console__')], keywords=[]), UnaryOp(op=Not(), operand=Call(func=Name(id='isclass', ctx=Load()), args=[Name(id='renderable', ctx=Load())], keywords=[]))]), body=[Assign(targets=[Name(id='render_iterable', ctx=Store())], value=Call(func=Attribute(value=Name(id='renderable', ctx=Load()), attr='__rich_console__', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='_options', ctx=Load())], keywords=[]))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='renderable', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='text_renderable', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='render_str', ctx=Load()), args=[Name(id='renderable', ctx=Load())], keywords=[keyword(arg='highlight', value=Attribute(value=Name(id='_options', ctx=Load()), attr='highlight', ctx=Load())), keyword(arg='markup', value=Attribute(value=Name(id='_options', ctx=Load()), attr='markup', ctx=Load()))])), Assign(targets=[Name(id='render_iterable', ctx=Store())], value=Call(func=Attribute(value=Name(id='text_renderable', ctx=Load()), attr='__rich_console__', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='_options', ctx=Load())], keywords=[]))], orelse=[Raise(exc=Call(func=Attribute(value=Name(id='errors', ctx=Load()), attr='NotRenderableError', ctx=Load()), args=[JoinedStr(values=[Constant(value='Unable to render '), FormattedValue(value=Name(id='renderable', ctx=Load()), conversion=114), Constant(value='; A str, Segment or object with __rich_console__ method is required')])], keywords=[]))])]), Try(body=[Assign(targets=[Name(id='iter_render', ctx=Store())], value=Call(func=Name(id='iter', ctx=Load()), args=[Name(id='render_iterable', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='TypeError', ctx=Load()), body=[Raise(exc=Call(func=Attribute(value=Name(id='errors', ctx=Load()), attr='NotRenderableError', ctx=Load()), args=[JoinedStr(values=[Constant(value='object '), FormattedValue(value=Name(id='render_iterable', ctx=Load()), conversion=114), Constant(value=' is not renderable')])], keywords=[]))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='_Segment', ctx=Store())], value=Name(id='Segment', ctx=Load())), Assign(targets=[Name(id='_options', ctx=Store())], value=Call(func=Attribute(value=Name(id='_options', ctx=Load()), attr='reset_height', ctx=Load()), args=[], keywords=[])), For(target=Name(id='render_output', ctx=Store()), iter=Name(id='iter_render', ctx=Load()), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='render_output', ctx=Load()), Name(id='_Segment', ctx=Load())], keywords=[]), body=[Expr(value=Yield(value=Name(id='render_output', ctx=Load())))], orelse=[Expr(value=YieldFrom(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='render', ctx=Load()), args=[Name(id='render_output', ctx=Load()), Name(id='_options', ctx=Load())], keywords=[])))])], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='Segment', ctx=Load()), ctx=Load())), FunctionDef(name='render_lines', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='renderable', annotation=Name(id='RenderableType', ctx=Load())), arg(arg='options', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='ConsoleOptions', ctx=Load()), ctx=Load()))], kwonlyargs=[arg(arg='style', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Style', ctx=Load()), ctx=Load())), arg(arg='pad', annotation=Name(id='bool', ctx=Load())), arg(arg='new_lines', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=None), Constant(value=True), Constant(value=False)], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Render objects in to a list of lines.\n\n        The output of render_lines is useful when further formatting of rendered console text\n        is required, such as the Panel class which draws a border around any renderable object.\n\n        Args:\n            renderable (RenderableType): Any object renderable in the console.\n            options (Optional[ConsoleOptions], optional): Console options, or None to use self.options. Default to ``None``.\n            style (Style, optional): Optional style to apply to renderables. Defaults to ``None``.\n            pad (bool, optional): Pad lines shorter than render width. Defaults to ``True``.\n            new_lines (bool, optional): Include "\n" characters at end of lines.\n\n        Returns:\n            List[List[Segment]]: A list of lines, where a line is a list of Segment objects.\n        ')), With(items=[withitem(context_expr=Attribute(value=Name(id='self', ctx=Load()), attr='_lock', ctx=Load()))], body=[Assign(targets=[Name(id='render_options', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='options', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())])), Assign(targets=[Name(id='_rendered', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='render', ctx=Load()), args=[Name(id='renderable', ctx=Load()), Name(id='render_options', ctx=Load())], keywords=[])), If(test=Name(id='style', ctx=Load()), body=[Assign(targets=[Name(id='_rendered', ctx=Store())], value=Call(func=Attribute(value=Name(id='Segment', ctx=Load()), attr='apply_style', ctx=Load()), args=[Name(id='_rendered', ctx=Load()), Name(id='style', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='render_height', ctx=Store())], value=Attribute(value=Name(id='render_options', ctx=Load()), attr='height', ctx=Load())), If(test=Compare(left=Name(id='render_height', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='render_height', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Constant(value=0), Name(id='render_height', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='lines', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='islice', ctx=Load()), args=[Call(func=Attribute(value=Name(id='Segment', ctx=Load()), attr='split_and_crop_lines', ctx=Load()), args=[Name(id='_rendered', ctx=Load()), Attribute(value=Name(id='render_options', ctx=Load()), attr='max_width', ctx=Load())], keywords=[keyword(arg='include_new_lines', value=Name(id='new_lines', ctx=Load())), keyword(arg='pad', value=Name(id='pad', ctx=Load())), keyword(arg='style', value=Name(id='style', ctx=Load()))]), Constant(value=None), Name(id='render_height', ctx=Load())], keywords=[])], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='render_options', ctx=Load()), attr='height', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='extra_lines', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='render_options', ctx=Load()), attr='height', ctx=Load()), op=Sub(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='lines', ctx=Load())], keywords=[]))), If(test=Compare(left=Name(id='extra_lines', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='pad_line', ctx=Store())], value=List(elts=[IfExp(test=Name(id='new_lines', ctx=Load()), body=List(elts=[Call(func=Name(id='Segment', ctx=Load()), args=[BinOp(left=Constant(value=' '), op=Mult(), right=Attribute(value=Name(id='render_options', ctx=Load()), attr='max_width', ctx=Load())), Name(id='style', ctx=Load())], keywords=[]), Call(func=Name(id='Segment', ctx=Load()), args=[Constant(value='\n')], keywords=[])], ctx=Load()), orelse=List(elts=[Call(func=Name(id='Segment', ctx=Load()), args=[BinOp(left=Constant(value=' '), op=Mult(), right=Attribute(value=Name(id='render_options', ctx=Load()), attr='max_width', ctx=Load())), Name(id='style', ctx=Load())], keywords=[])], ctx=Load()))], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='extend', ctx=Load()), args=[BinOp(left=Name(id='pad_line', ctx=Load()), op=Mult(), right=Name(id='extra_lines', ctx=Load()))], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='lines', ctx=Load()))])], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Segment', ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='render_str', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='text', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[arg(arg='style', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Style', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='justify', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='JustifyMethod', ctx=Load()), ctx=Load())), arg(arg='overflow', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='OverflowMethod', ctx=Load()), ctx=Load())), arg(arg='emoji', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load())), arg(arg='markup', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load())), arg(arg='highlight', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load())), arg(arg='highlighter', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='HighlighterType', ctx=Load()), ctx=Load()))], kw_defaults=[Constant(value=''), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None)], defaults=[]), body=[Expr(value=Constant(value='Convert a string to a Text instance. This is called automatically if\n        you print or log a string.\n\n        Args:\n            text (str): Text to render.\n            style (Union[str, Style], optional): Style to apply to rendered text.\n            justify (str, optional): Justify method: "default", "left", "center", "full", or "right". Defaults to ``None``.\n            overflow (str, optional): Overflow method: "crop", "fold", or "ellipsis". Defaults to ``None``.\n            emoji (Optional[bool], optional): Enable emoji, or ``None`` to use Console default.\n            markup (Optional[bool], optional): Enable markup, or ``None`` to use Console default.\n            highlight (Optional[bool], optional): Enable highlighting, or ``None`` to use Console default.\n            highlighter (HighlighterType, optional): Optional highlighter to apply.\n        Returns:\n            ConsoleRenderable: Renderable object.\n\n        ')), Assign(targets=[Name(id='emoji_enabled', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='emoji', ctx=Load()), BoolOp(op=And(), values=[Compare(left=Name(id='emoji', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Attribute(value=Name(id='self', ctx=Load()), attr='_emoji', ctx=Load())])])), Assign(targets=[Name(id='markup_enabled', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='markup', ctx=Load()), BoolOp(op=And(), values=[Compare(left=Name(id='markup', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Attribute(value=Name(id='self', ctx=Load()), attr='_markup', ctx=Load())])])), Assign(targets=[Name(id='highlight_enabled', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='highlight', ctx=Load()), BoolOp(op=And(), values=[Compare(left=Name(id='highlight', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Attribute(value=Name(id='self', ctx=Load()), attr='_highlight', ctx=Load())])])), If(test=Name(id='markup_enabled', ctx=Load()), body=[Assign(targets=[Name(id='rich_text', ctx=Store())], value=Call(func=Name(id='render_markup', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[keyword(arg='style', value=Name(id='style', ctx=Load())), keyword(arg='emoji', value=Name(id='emoji_enabled', ctx=Load())), keyword(arg='emoji_variant', value=Attribute(value=Name(id='self', ctx=Load()), attr='_emoji_variant', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='rich_text', ctx=Load()), attr='justify', ctx=Store())], value=Name(id='justify', ctx=Load())), Assign(targets=[Attribute(value=Name(id='rich_text', ctx=Load()), attr='overflow', ctx=Store())], value=Name(id='overflow', ctx=Load()))], orelse=[Assign(targets=[Name(id='rich_text', ctx=Store())], value=Call(func=Name(id='Text', ctx=Load()), args=[IfExp(test=Name(id='emoji_enabled', ctx=Load()), body=Call(func=Name(id='_emoji_replace', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[keyword(arg='default_variant', value=Attribute(value=Name(id='self', ctx=Load()), attr='_emoji_variant', ctx=Load()))]), orelse=Name(id='text', ctx=Load()))], keywords=[keyword(arg='justify', value=Name(id='justify', ctx=Load())), keyword(arg='overflow', value=Name(id='overflow', ctx=Load())), keyword(arg='style', value=Name(id='style', ctx=Load()))]))]), Assign(targets=[Name(id='_highlighter', ctx=Store())], value=IfExp(test=Name(id='highlight_enabled', ctx=Load()), body=BoolOp(op=Or(), values=[Name(id='highlighter', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='highlighter', ctx=Load())]), orelse=Constant(value=None))), If(test=Compare(left=Name(id='_highlighter', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='highlight_text', ctx=Store())], value=Call(func=Name(id='_highlighter', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='rich_text', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='highlight_text', ctx=Load()), attr='copy_styles', ctx=Load()), args=[Name(id='rich_text', ctx=Load())], keywords=[])), Return(value=Name(id='highlight_text', ctx=Load()))], orelse=[]), Return(value=Name(id='rich_text', ctx=Load()))], decorator_list=[], returns=Constant(value='Text')), FunctionDef(name='get_style', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Style', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[arg(arg='default', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='Style', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kw_defaults=[Constant(value=None)], defaults=[]), body=[Expr(value=Constant(value='Get a Style instance by its theme name or parse a definition.\n\n        Args:\n            name (str): The name of a style or a style definition.\n\n        Returns:\n            Style: A Style object.\n\n        Raises:\n            MissingStyle: If no style could be parsed from name.\n\n        ')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='Style', ctx=Load())], keywords=[]), body=[Return(value=Name(id='name', ctx=Load()))], orelse=[]), Try(body=[Assign(targets=[Name(id='style', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_theme_stack', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='style', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='style', ctx=Store())], value=Call(func=Attribute(value=Name(id='Style', ctx=Load()), attr='parse', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]))], orelse=[]), Return(value=IfExp(test=Attribute(value=Name(id='style', ctx=Load()), attr='link', ctx=Load()), body=Call(func=Attribute(value=Name(id='style', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[]), orelse=Name(id='style', ctx=Load())))], handlers=[ExceptHandler(type=Attribute(value=Name(id='errors', ctx=Load()), attr='StyleSyntaxError', ctx=Load()), name='error', body=[If(test=Compare(left=Name(id='default', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_style', ctx=Load()), args=[Name(id='default', ctx=Load())], keywords=[]))], orelse=[]), Raise(exc=Call(func=Attribute(value=Name(id='errors', ctx=Load()), attr='MissingStyle', ctx=Load()), args=[JoinedStr(values=[Constant(value='Failed to get style '), FormattedValue(value=Name(id='name', ctx=Load()), conversion=114), Constant(value='; '), FormattedValue(value=Name(id='error', ctx=Load()), conversion=-1)])], keywords=[]), cause=Constant(value=None))])], orelse=[], finalbody=[])], decorator_list=[], returns=Name(id='Style', ctx=Load())), FunctionDef(name='_collect_renderables', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='objects', annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load())), arg(arg='sep', annotation=Name(id='str', ctx=Load())), arg(arg='end', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[arg(arg='justify', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='JustifyMethod', ctx=Load()), ctx=Load())), arg(arg='emoji', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load())), arg(arg='markup', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load())), arg(arg='highlight', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load()))], kw_defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None)], defaults=[]), body=[Expr(value=Constant(value='Combine a number of renderables and text into one renderable.\n\n        Args:\n            objects (Iterable[Any]): Anything that Rich can render.\n            sep (str): String to write between print data.\n            end (str): String to write at end of print data.\n            justify (str, optional): One of "left", "right", "center", or "full". Defaults to ``None``.\n            emoji (Optional[bool], optional): Enable emoji code, or ``None`` to use console default.\n            markup (Optional[bool], optional): Enable markup, or ``None`` to use console default.\n            highlight (Optional[bool], optional): Enable automatic highlighting, or ``None`` to use console default.\n\n        Returns:\n            List[ConsoleRenderable]: A list of things to render.\n        ')), AnnAssign(target=Name(id='renderables', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='ConsoleRenderable', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), Assign(targets=[Name(id='_append', ctx=Store())], value=Attribute(value=Name(id='renderables', ctx=Load()), attr='append', ctx=Load())), AnnAssign(target=Name(id='text', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Text', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), Assign(targets=[Name(id='append_text', ctx=Store())], value=Attribute(value=Name(id='text', ctx=Load()), attr='append', ctx=Load())), Assign(targets=[Name(id='append', ctx=Store())], value=Name(id='_append', ctx=Load())), If(test=Compare(left=Name(id='justify', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='left'), Constant(value='center'), Constant(value='right')], ctx=Load())]), body=[FunctionDef(name='align_append', args=arguments(posonlyargs=[], args=[arg(arg='renderable', annotation=Name(id='RenderableType', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='_append', ctx=Load()), args=[Call(func=Name(id='Align', ctx=Load()), args=[Name(id='renderable', ctx=Load()), Call(func=Name(id='cast', ctx=Load()), args=[Name(id='AlignMethod', ctx=Load()), Name(id='justify', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], decorator_list=[], returns=Constant(value=None)), Assign(targets=[Name(id='append', ctx=Store())], value=Name(id='align_append', ctx=Load()))], orelse=[]), AnnAssign(target=Name(id='_highlighter', ctx=Store()), annotation=Name(id='HighlighterType', ctx=Load()), value=Name(id='_null_highlighter', ctx=Load()), simple=1), If(test=BoolOp(op=Or(), values=[Name(id='highlight', ctx=Load()), BoolOp(op=And(), values=[Compare(left=Name(id='highlight', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Attribute(value=Name(id='self', ctx=Load()), attr='_highlight', ctx=Load())])]), body=[Assign(targets=[Name(id='_highlighter', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='highlighter', ctx=Load()))], orelse=[]), FunctionDef(name='check_text', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Name(id='text', ctx=Load()), body=[Assign(targets=[Name(id='sep_text', ctx=Store())], value=Call(func=Name(id='Text', ctx=Load()), args=[Name(id='sep', ctx=Load())], keywords=[keyword(arg='justify', value=Name(id='justify', ctx=Load())), keyword(arg='end', value=Name(id='end', ctx=Load()))])), Expr(value=Call(func=Name(id='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='sep_text', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='text', ctx=Load()), attr='clear', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), For(target=Name(id='renderable', ctx=Store()), iter=Name(id='objects', ctx=Load()), body=[Assign(targets=[Name(id='renderable', ctx=Store())], value=Call(func=Name(id='rich_cast', ctx=Load()), args=[Name(id='renderable', ctx=Load())], keywords=[])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='renderable', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Name(id='append_text', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='render_str', ctx=Load()), args=[Name(id='renderable', ctx=Load())], keywords=[keyword(arg='emoji', value=Name(id='emoji', ctx=Load())), keyword(arg='markup', value=Name(id='markup', ctx=Load())), keyword(arg='highlighter', value=Name(id='_highlighter', ctx=Load()))])], keywords=[]))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='renderable', ctx=Load()), Name(id='Text', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Name(id='append_text', ctx=Load()), args=[Name(id='renderable', ctx=Load())], keywords=[]))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='renderable', ctx=Load()), Name(id='ConsoleRenderable', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Name(id='check_text', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Name(id='append', ctx=Load()), args=[Name(id='renderable', ctx=Load())], keywords=[]))], orelse=[If(test=Call(func=Name(id='is_expandable', ctx=Load()), args=[Name(id='renderable', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Name(id='check_text', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Name(id='append', ctx=Load()), args=[Call(func=Name(id='Pretty', ctx=Load()), args=[Name(id='renderable', ctx=Load())], keywords=[keyword(arg='highlighter', value=Name(id='_highlighter', ctx=Load()))])], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='append_text', ctx=Load()), args=[Call(func=Name(id='_highlighter', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='renderable', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))])])])])], orelse=[]), Expr(value=Call(func=Name(id='check_text', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='style', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_style', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load())], keywords=[])), Assign(targets=[Name(id='renderables', ctx=Store())], value=ListComp(elt=Call(func=Name(id='Styled', ctx=Load()), args=[Name(id='renderable', ctx=Load()), Name(id='style', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='renderable', ctx=Store()), iter=Name(id='renderables', ctx=Load()), ifs=[], is_async=0)]))], orelse=[]), Return(value=Name(id='renderables', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='ConsoleRenderable', ctx=Load()), ctx=Load())), FunctionDef(name='rule', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='title', annotation=Name(id='TextType', ctx=Load()))], kwonlyargs=[arg(arg='characters', annotation=Name(id='str', ctx=Load())), arg(arg='style', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Style', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='align', annotation=Name(id='AlignMethod', ctx=Load()))], kw_defaults=[Constant(value='─'), Constant(value='rule.line'), Constant(value='center')], defaults=[Constant(value='')]), body=[Expr(value=Constant(value='Draw a line with optional centered title.\n\n        Args:\n            title (str, optional): Text to render over the rule. Defaults to "".\n            characters (str, optional): Character(s) to form the line. Defaults to "─".\n            style (str, optional): Style of line. Defaults to "rule.line".\n            align (str, optional): How to align the title, one of "left", "center", or "right". Defaults to "center".\n        ')), ImportFrom(module='rule', names=[alias(name='Rule')], level=1), Assign(targets=[Name(id='rule', ctx=Store())], value=Call(func=Name(id='Rule', ctx=Load()), args=[], keywords=[keyword(arg='title', value=Name(id='title', ctx=Load())), keyword(arg='characters', value=Name(id='characters', ctx=Load())), keyword(arg='style', value=Name(id='style', ctx=Load())), keyword(arg='align', value=Name(id='align', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='print', ctx=Load()), args=[Name(id='rule', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='control', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='control', annotation=Name(id='Control', ctx=Load())), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Insert non-printing control codes.\n\n        Args:\n            control_codes (str): Control codes, such as those that may move the cursor.\n        ')), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='is_dumb_terminal', ctx=Load())), body=[With(items=[withitem(context_expr=Name(id='self', ctx=Load()))], body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), attr='extend', ctx=Load()), args=[GeneratorExp(elt=Attribute(value=Name(id='_control', ctx=Load()), attr='segment', ctx=Load()), generators=[comprehension(target=Name(id='_control', ctx=Store()), iter=Name(id='control', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))])], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='out', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='objects', annotation=Name(id='Any', ctx=Load())), kwonlyargs=[arg(arg='sep', annotation=Name(id='str', ctx=Load())), arg(arg='end', annotation=Name(id='str', ctx=Load())), arg(arg='style', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Style', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='highlight', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load()))], kw_defaults=[Constant(value=' '), Constant(value='\n'), Constant(value=None), Constant(value=None)], defaults=[]), body=[Expr(value=Constant(value='Output to the terminal. This is a low-level way of writing to the terminal which unlike\n        :meth:`~rich.console.Console.print` won\'t pretty print, wrap text, or apply markup, but will\n        optionally apply highlighting and a basic style.\n\n        Args:\n            sep (str, optional): String to write between print data. Defaults to " ".\n            end (str, optional): String to write at end of print data. Defaults to "\\\\n".\n            style (Union[str, Style], optional): A style to apply to output. Defaults to None.\n            highlight (Optional[bool], optional): Enable automatic highlighting, or ``None`` to use\n                console default. Defaults to ``None``.\n        ')), AnnAssign(target=Name(id='raw_output', ctx=Store()), annotation=Name(id='str', ctx=Load()), value=Call(func=Attribute(value=Name(id='sep', ctx=Load()), attr='join', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='str', ctx=Load()), args=[Name(id='_object', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='_object', ctx=Store()), iter=Name(id='objects', ctx=Load()), ifs=[], is_async=0)])], keywords=[]), simple=1), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='print', ctx=Load()), args=[Name(id='raw_output', ctx=Load())], keywords=[keyword(arg='style', value=Name(id='style', ctx=Load())), keyword(arg='highlight', value=Name(id='highlight', ctx=Load())), keyword(arg='emoji', value=Constant(value=False)), keyword(arg='markup', value=Constant(value=False)), keyword(arg='no_wrap', value=Constant(value=True)), keyword(arg='overflow', value=Constant(value='ignore')), keyword(arg='crop', value=Constant(value=False)), keyword(arg='end', value=Name(id='end', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='print', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='objects', annotation=Name(id='Any', ctx=Load())), kwonlyargs=[arg(arg='sep', annotation=Name(id='str', ctx=Load())), arg(arg='end', annotation=Name(id='str', ctx=Load())), arg(arg='style', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Style', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='justify', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='JustifyMethod', ctx=Load()), ctx=Load())), arg(arg='overflow', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='OverflowMethod', ctx=Load()), ctx=Load())), arg(arg='no_wrap', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load())), arg(arg='emoji', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load())), arg(arg='markup', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load())), arg(arg='highlight', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load())), arg(arg='width', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='height', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='crop', annotation=Name(id='bool', ctx=Load())), arg(arg='soft_wrap', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load())), arg(arg='new_line_start', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=' '), Constant(value='\n'), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=True), Constant(value=None), Constant(value=False)], defaults=[]), body=[Expr(value=Constant(value='Print to the console.\n\n        Args:\n            objects (positional args): Objects to log to the terminal.\n            sep (str, optional): String to write between print data. Defaults to " ".\n            end (str, optional): String to write at end of print data. Defaults to "\\\\n".\n            style (Union[str, Style], optional): A style to apply to output. Defaults to None.\n            justify (str, optional): Justify method: "default", "left", "right", "center", or "full". Defaults to ``None``.\n            overflow (str, optional): Overflow method: "ignore", "crop", "fold", or "ellipsis". Defaults to None.\n            no_wrap (Optional[bool], optional): Disable word wrapping. Defaults to None.\n            emoji (Optional[bool], optional): Enable emoji code, or ``None`` to use console default. Defaults to ``None``.\n            markup (Optional[bool], optional): Enable markup, or ``None`` to use console default. Defaults to ``None``.\n            highlight (Optional[bool], optional): Enable automatic highlighting, or ``None`` to use console default. Defaults to ``None``.\n            width (Optional[int], optional): Width of output, or ``None`` to auto-detect. Defaults to ``None``.\n            crop (Optional[bool], optional): Crop output to width of terminal. Defaults to True.\n            soft_wrap (bool, optional): Enable soft wrap mode which disables word wrapping and cropping of text or ``None`` for\n                Console default. Defaults to ``None``.\n            new_line_start (bool, False): Insert a new line at the start if the output contains more than one line. Defaults to ``False``.\n        ')), If(test=UnaryOp(op=Not(), operand=Name(id='objects', ctx=Load())), body=[Assign(targets=[Name(id='objects', ctx=Store())], value=Tuple(elts=[Call(func=Name(id='NewLine', ctx=Load()), args=[], keywords=[])], ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='soft_wrap', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='soft_wrap', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='soft_wrap', ctx=Load()))], orelse=[]), If(test=Name(id='soft_wrap', ctx=Load()), body=[If(test=Compare(left=Name(id='no_wrap', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='no_wrap', ctx=Store())], value=Constant(value=True))], orelse=[]), If(test=Compare(left=Name(id='overflow', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='overflow', ctx=Store())], value=Constant(value='ignore'))], orelse=[]), Assign(targets=[Name(id='crop', ctx=Store())], value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='render_hooks', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_render_hooks', ctx=Load()), slice=Slice(), ctx=Load())), With(items=[withitem(context_expr=Name(id='self', ctx=Load()))], body=[Assign(targets=[Name(id='renderables', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_collect_renderables', ctx=Load()), args=[Name(id='objects', ctx=Load()), Name(id='sep', ctx=Load()), Name(id='end', ctx=Load())], keywords=[keyword(arg='justify', value=Name(id='justify', ctx=Load())), keyword(arg='emoji', value=Name(id='emoji', ctx=Load())), keyword(arg='markup', value=Name(id='markup', ctx=Load())), keyword(arg='highlight', value=Name(id='highlight', ctx=Load()))])), For(target=Name(id='hook', ctx=Store()), iter=Name(id='render_hooks', ctx=Load()), body=[Assign(targets=[Name(id='renderables', ctx=Store())], value=Call(func=Attribute(value=Name(id='hook', ctx=Load()), attr='process_renderables', ctx=Load()), args=[Name(id='renderables', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='render_options', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load()), attr='update', ctx=Load()), args=[], keywords=[keyword(arg='justify', value=Name(id='justify', ctx=Load())), keyword(arg='overflow', value=Name(id='overflow', ctx=Load())), keyword(arg='width', value=IfExp(test=Compare(left=Name(id='width', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Call(func=Name(id='min', ctx=Load()), args=[Name(id='width', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='width', ctx=Load())], keywords=[]), orelse=Name(id='NO_CHANGE', ctx=Load()))), keyword(arg='height', value=Name(id='height', ctx=Load())), keyword(arg='no_wrap', value=Name(id='no_wrap', ctx=Load())), keyword(arg='markup', value=Name(id='markup', ctx=Load())), keyword(arg='highlight', value=Name(id='highlight', ctx=Load()))])), AnnAssign(target=Name(id='new_segments', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Segment', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), Assign(targets=[Name(id='extend', ctx=Store())], value=Attribute(value=Name(id='new_segments', ctx=Load()), attr='extend', ctx=Load())), Assign(targets=[Name(id='render', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='render', ctx=Load())), If(test=Compare(left=Name(id='style', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[For(target=Name(id='renderable', ctx=Store()), iter=Name(id='renderables', ctx=Load()), body=[Expr(value=Call(func=Name(id='extend', ctx=Load()), args=[Call(func=Name(id='render', ctx=Load()), args=[Name(id='renderable', ctx=Load()), Name(id='render_options', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], orelse=[For(target=Name(id='renderable', ctx=Store()), iter=Name(id='renderables', ctx=Load()), body=[Expr(value=Call(func=Name(id='extend', ctx=Load()), args=[Call(func=Attribute(value=Name(id='Segment', ctx=Load()), attr='apply_style', ctx=Load()), args=[Call(func=Name(id='render', ctx=Load()), args=[Name(id='renderable', ctx=Load()), Name(id='render_options', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_style', ctx=Load()), args=[Name(id='style', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], orelse=[])]), If(test=Name(id='new_line_start', ctx=Load()), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[GeneratorExp(elt=Attribute(value=Name(id='segment', ctx=Load()), attr='text', ctx=Load()), generators=[comprehension(target=Name(id='segment', ctx=Store()), iter=Name(id='new_segments', ctx=Load()), ifs=[], is_async=0)])], keywords=[]), attr='splitlines', ctx=Load()), args=[], keywords=[])], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Attribute(value=Name(id='new_segments', ctx=Load()), attr='insert', ctx=Load()), args=[Constant(value=0), Call(func=Attribute(value=Name(id='Segment', ctx=Load()), attr='line', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[])], orelse=[]), If(test=Name(id='crop', ctx=Load()), body=[Assign(targets=[Name(id='buffer_extend', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), attr='extend', ctx=Load())), For(target=Name(id='line', ctx=Store()), iter=Call(func=Attribute(value=Name(id='Segment', ctx=Load()), attr='split_and_crop_lines', ctx=Load()), args=[Name(id='new_segments', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='width', ctx=Load())], keywords=[keyword(arg='pad', value=Constant(value=False))]), body=[Expr(value=Call(func=Name(id='buffer_extend', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[]))], orelse=[])], orelse=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), attr='extend', ctx=Load()), args=[Name(id='new_segments', ctx=Load())], keywords=[]))])])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='print_json', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='json', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[arg(arg='data', annotation=Name(id='Any', ctx=Load())), arg(arg='indent', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Name(id='int', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='highlight', annotation=Name(id='bool', ctx=Load())), arg(arg='skip_keys', annotation=Name(id='bool', ctx=Load())), arg(arg='ensure_ascii', annotation=Name(id='bool', ctx=Load())), arg(arg='check_circular', annotation=Name(id='bool', ctx=Load())), arg(arg='allow_nan', annotation=Name(id='bool', ctx=Load())), arg(arg='default', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='Any', ctx=Load())], ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='sort_keys', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=None), Constant(value=2), Constant(value=True), Constant(value=False), Constant(value=False), Constant(value=True), Constant(value=True), Constant(value=None), Constant(value=False)], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Pretty prints JSON. Output will be valid JSON.\n\n        Args:\n            json (Optional[str]): A string containing JSON.\n            data (Any): If json is not supplied, then encode this data.\n            indent (Union[None, int, str], optional): Number of spaces to indent. Defaults to 2.\n            highlight (bool, optional): Enable highlighting of output: Defaults to True.\n            skip_keys (bool, optional): Skip keys not of a basic type. Defaults to False.\n            ensure_ascii (bool, optional): Escape all non-ascii characters. Defaults to False.\n            check_circular (bool, optional): Check for circular references. Defaults to True.\n            allow_nan (bool, optional): Allow NaN and Infinity values. Defaults to True.\n            default (Callable, optional): A callable that converts values that can not be encoded\n                in to something that can be JSON encoded. Defaults to None.\n            sort_keys (bool, optional): Sort dictionary keys. Defaults to False.\n        ')), ImportFrom(module='pip._vendor.rich.json', names=[alias(name='JSON')], level=0), If(test=Compare(left=Name(id='json', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='json_renderable', ctx=Store())], value=Call(func=Attribute(value=Name(id='JSON', ctx=Load()), attr='from_data', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[keyword(arg='indent', value=Name(id='indent', ctx=Load())), keyword(arg='highlight', value=Name(id='highlight', ctx=Load())), keyword(arg='skip_keys', value=Name(id='skip_keys', ctx=Load())), keyword(arg='ensure_ascii', value=Name(id='ensure_ascii', ctx=Load())), keyword(arg='check_circular', value=Name(id='check_circular', ctx=Load())), keyword(arg='allow_nan', value=Name(id='allow_nan', ctx=Load())), keyword(arg='default', value=Name(id='default', ctx=Load())), keyword(arg='sort_keys', value=Name(id='sort_keys', ctx=Load()))]))], orelse=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='json', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[JoinedStr(values=[Constant(value='json must be str. Did you mean print_json(data='), FormattedValue(value=Name(id='json', ctx=Load()), conversion=114), Constant(value=') ?')])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='json_renderable', ctx=Store())], value=Call(func=Name(id='JSON', ctx=Load()), args=[Name(id='json', ctx=Load())], keywords=[keyword(arg='indent', value=Name(id='indent', ctx=Load())), keyword(arg='highlight', value=Name(id='highlight', ctx=Load())), keyword(arg='skip_keys', value=Name(id='skip_keys', ctx=Load())), keyword(arg='ensure_ascii', value=Name(id='ensure_ascii', ctx=Load())), keyword(arg='check_circular', value=Name(id='check_circular', ctx=Load())), keyword(arg='allow_nan', value=Name(id='allow_nan', ctx=Load())), keyword(arg='default', value=Name(id='default', ctx=Load())), keyword(arg='sort_keys', value=Name(id='sort_keys', ctx=Load()))]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='print', ctx=Load()), args=[Name(id='json_renderable', ctx=Load())], keywords=[keyword(arg='soft_wrap', value=Constant(value=True))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='update_screen', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='renderable', annotation=Name(id='RenderableType', ctx=Load()))], kwonlyargs=[arg(arg='region', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Region', ctx=Load()), ctx=Load())), arg(arg='options', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='ConsoleOptions', ctx=Load()), ctx=Load()))], kw_defaults=[Constant(value=None), Constant(value=None)], defaults=[]), body=[Expr(value=Constant(value="Update the screen at a given offset.\n\n        Args:\n            renderable (RenderableType): A Rich renderable.\n            region (Region, optional): Region of screen to update, or None for entire screen. Defaults to None.\n            x (int, optional): x offset. Defaults to 0.\n            y (int, optional): y offset. Defaults to 0.\n\n        Raises:\n            errors.NoAltScreen: If the Console isn't in alt screen mode.\n\n        ")), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='is_alt_screen', ctx=Load())), body=[Raise(exc=Call(func=Attribute(value=Name(id='errors', ctx=Load()), attr='NoAltScreen', ctx=Load()), args=[Constant(value='Alt screen must be enabled to call update_screen')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='render_options', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='options', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())])), If(test=Compare(left=Name(id='region', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='x', ctx=Store()), Name(id='y', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='render_options', ctx=Store())], value=Call(func=Attribute(value=Name(id='render_options', ctx=Load()), attr='update_dimensions', ctx=Load()), args=[Attribute(value=Name(id='render_options', ctx=Load()), attr='max_width', ctx=Load()), BoolOp(op=Or(), values=[Attribute(value=Name(id='render_options', ctx=Load()), attr='height', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='height', ctx=Load())])], keywords=[]))], orelse=[Assign(targets=[Tuple(elts=[Name(id='x', ctx=Store()), Name(id='y', ctx=Store()), Name(id='width', ctx=Store()), Name(id='height', ctx=Store())], ctx=Store())], value=Name(id='region', ctx=Load())), Assign(targets=[Name(id='render_options', ctx=Store())], value=Call(func=Attribute(value=Name(id='render_options', ctx=Load()), attr='update_dimensions', ctx=Load()), args=[Name(id='width', ctx=Load()), Name(id='height', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='lines', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='render_lines', ctx=Load()), args=[Name(id='renderable', ctx=Load())], keywords=[keyword(arg='options', value=Name(id='render_options', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='update_screen_lines', ctx=Load()), args=[Name(id='lines', ctx=Load()), Name(id='x', ctx=Load()), Name(id='y', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='update_screen_lines', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='lines', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Segment', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='x', annotation=Name(id='int', ctx=Load())), arg(arg='y', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0), Constant(value=0)]), body=[Expr(value=Constant(value="Update lines of the screen at a given offset.\n\n        Args:\n            lines (List[List[Segment]]): Rendered lines (as produced by :meth:`~rich.Console.render_lines`).\n            x (int, optional): x offset (column no). Defaults to 0.\n            y (int, optional): y offset (column no). Defaults to 0.\n\n        Raises:\n            errors.NoAltScreen: If the Console isn't in alt screen mode.\n        ")), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='is_alt_screen', ctx=Load())), body=[Raise(exc=Call(func=Attribute(value=Name(id='errors', ctx=Load()), attr='NoAltScreen', ctx=Load()), args=[Constant(value='Alt screen must be enabled to call update_screen')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='screen_update', ctx=Store())], value=Call(func=Name(id='ScreenUpdate', ctx=Load()), args=[Name(id='lines', ctx=Load()), Name(id='x', ctx=Load()), Name(id='y', ctx=Load())], keywords=[])), Assign(targets=[Name(id='segments', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='render', ctx=Load()), args=[Name(id='screen_update', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), attr='extend', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_check_buffer', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='print_exception', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[arg(arg='width', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='extra_lines', annotation=Name(id='int', ctx=Load())), arg(arg='theme', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='word_wrap', annotation=Name(id='bool', ctx=Load())), arg(arg='show_locals', annotation=Name(id='bool', ctx=Load())), arg(arg='suppress', annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='ModuleType', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='max_frames', annotation=Name(id='int', ctx=Load()))], kw_defaults=[Constant(value=100), Constant(value=3), Constant(value=None), Constant(value=False), Constant(value=False), Tuple(elts=[], ctx=Load()), Constant(value=100)], defaults=[]), body=[Expr(value=Constant(value='Prints a rich render of the last exception and traceback.\n\n        Args:\n            width (Optional[int], optional): Number of characters used to render code. Defaults to 100.\n            extra_lines (int, optional): Additional lines of code to render. Defaults to 3.\n            theme (str, optional): Override pygments theme used in traceback\n            word_wrap (bool, optional): Enable word wrapping of long lines. Defaults to False.\n            show_locals (bool, optional): Enable display of local variables. Defaults to False.\n            suppress (Iterable[Union[str, ModuleType]]): Optional sequence of modules or paths to exclude from traceback.\n            max_frames (int): Maximum number of frames to show in a traceback, 0 for no maximum. Defaults to 100.\n        ')), ImportFrom(module='traceback', names=[alias(name='Traceback')], level=1), Assign(targets=[Name(id='traceback', ctx=Store())], value=Call(func=Name(id='Traceback', ctx=Load()), args=[], keywords=[keyword(arg='width', value=Name(id='width', ctx=Load())), keyword(arg='extra_lines', value=Name(id='extra_lines', ctx=Load())), keyword(arg='theme', value=Name(id='theme', ctx=Load())), keyword(arg='word_wrap', value=Name(id='word_wrap', ctx=Load())), keyword(arg='show_locals', value=Name(id='show_locals', ctx=Load())), keyword(arg='suppress', value=Name(id='suppress', ctx=Load())), keyword(arg='max_frames', value=Name(id='max_frames', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='print', ctx=Load()), args=[Name(id='traceback', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_caller_frame_info', args=arguments(posonlyargs=[], args=[arg(arg='offset', annotation=Name(id='int', ctx=Load())), arg(arg='currentframe', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='FrameType', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Attribute(value=Name(id='inspect', ctx=Load()), attr='currentframe', ctx=Load())]), body=[Expr(value=Constant(value='Get caller frame information.\n\n        Args:\n            offset (int): the caller offset within the current frame stack.\n            currentframe (Callable[[], Optional[FrameType]], optional): the callable to use to\n                retrieve the current frame. Defaults to ``inspect.currentframe``.\n\n        Returns:\n            Tuple[str, int, Dict[str, Any]]: A tuple containing the filename, the line number and\n                the dictionary of local variables associated with the caller frame.\n\n        Raises:\n            RuntimeError: If the stack offset is invalid.\n        ')), AugAssign(target=Name(id='offset', ctx=Store()), op=Add(), value=Constant(value=1)), Assign(targets=[Name(id='frame', ctx=Store())], value=Call(func=Name(id='currentframe', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='frame', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[While(test=BoolOp(op=And(), values=[Name(id='offset', ctx=Load()), Compare(left=Name(id='frame', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Name(id='frame', ctx=Store())], value=Attribute(value=Name(id='frame', ctx=Load()), attr='f_back', ctx=Load())), AugAssign(target=Name(id='offset', ctx=Store()), op=Sub(), value=Constant(value=1))], orelse=[]), Assert(test=Compare(left=Name(id='frame', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Return(value=Tuple(elts=[Attribute(value=Attribute(value=Name(id='frame', ctx=Load()), attr='f_code', ctx=Load()), attr='co_filename', ctx=Load()), Attribute(value=Name(id='frame', ctx=Load()), attr='f_lineno', ctx=Load()), Attribute(value=Name(id='frame', ctx=Load()), attr='f_locals', ctx=Load())], ctx=Load()))], orelse=[Assign(targets=[Name(id='frame_info', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='inspect', ctx=Load()), attr='stack', ctx=Load()), args=[], keywords=[]), slice=Name(id='offset', ctx=Load()), ctx=Load())), Return(value=Tuple(elts=[Attribute(value=Name(id='frame_info', ctx=Load()), attr='filename', ctx=Load()), Attribute(value=Name(id='frame_info', ctx=Load()), attr='lineno', ctx=Load()), Attribute(value=Attribute(value=Name(id='frame_info', ctx=Load()), attr='frame', ctx=Load()), attr='f_locals', ctx=Load())], ctx=Load()))])], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='int', ctx=Load()), Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='log', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='objects', annotation=Name(id='Any', ctx=Load())), kwonlyargs=[arg(arg='sep', annotation=Name(id='str', ctx=Load())), arg(arg='end', annotation=Name(id='str', ctx=Load())), arg(arg='style', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Style', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='justify', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='JustifyMethod', ctx=Load()), ctx=Load())), arg(arg='emoji', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load())), arg(arg='markup', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load())), arg(arg='highlight', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load())), arg(arg='log_locals', annotation=Name(id='bool', ctx=Load())), arg(arg='_stack_offset', annotation=Name(id='int', ctx=Load()))], kw_defaults=[Constant(value=' '), Constant(value='\n'), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=False), Constant(value=1)], defaults=[]), body=[Expr(value=Constant(value='Log rich content to the terminal.\n\n        Args:\n            objects (positional args): Objects to log to the terminal.\n            sep (str, optional): String to write between print data. Defaults to " ".\n            end (str, optional): String to write at end of print data. Defaults to "\\\\n".\n            style (Union[str, Style], optional): A style to apply to output. Defaults to None.\n            justify (str, optional): One of "left", "right", "center", or "full". Defaults to ``None``.\n            overflow (str, optional): Overflow method: "crop", "fold", or "ellipsis". Defaults to None.\n            emoji (Optional[bool], optional): Enable emoji code, or ``None`` to use console default. Defaults to None.\n            markup (Optional[bool], optional): Enable markup, or ``None`` to use console default. Defaults to None.\n            highlight (Optional[bool], optional): Enable automatic highlighting, or ``None`` to use console default. Defaults to None.\n            log_locals (bool, optional): Boolean to enable logging of locals where ``log()``\n                was called. Defaults to False.\n            _stack_offset (int, optional): Offset of caller from end of call stack. Defaults to 1.\n        ')), If(test=UnaryOp(op=Not(), operand=Name(id='objects', ctx=Load())), body=[Assign(targets=[Name(id='objects', ctx=Store())], value=Tuple(elts=[Call(func=Name(id='NewLine', ctx=Load()), args=[], keywords=[])], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='render_hooks', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_render_hooks', ctx=Load()), slice=Slice(), ctx=Load())), With(items=[withitem(context_expr=Name(id='self', ctx=Load()))], body=[Assign(targets=[Name(id='renderables', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_collect_renderables', ctx=Load()), args=[Name(id='objects', ctx=Load()), Name(id='sep', ctx=Load()), Name(id='end', ctx=Load())], keywords=[keyword(arg='justify', value=Name(id='justify', ctx=Load())), keyword(arg='emoji', value=Name(id='emoji', ctx=Load())), keyword(arg='markup', value=Name(id='markup', ctx=Load())), keyword(arg='highlight', value=Name(id='highlight', ctx=Load()))])), If(test=Compare(left=Name(id='style', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='renderables', ctx=Store())], value=ListComp(elt=Call(func=Name(id='Styled', ctx=Load()), args=[Name(id='renderable', ctx=Load()), Name(id='style', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='renderable', ctx=Store()), iter=Name(id='renderables', ctx=Load()), ifs=[], is_async=0)]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='filename', ctx=Store()), Name(id='line_no', ctx=Store()), Name(id='locals', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_caller_frame_info', ctx=Load()), args=[Name(id='_stack_offset', ctx=Load())], keywords=[])), Assign(targets=[Name(id='link_path', ctx=Store())], value=IfExp(test=Call(func=Attribute(value=Name(id='filename', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='<')], keywords=[]), body=Constant(value=None), orelse=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='path', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='filename', ctx=Load()), attr='rpartition', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='sep', ctx=Load())], keywords=[]), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())), If(test=Name(id='log_locals', ctx=Load()), body=[Assign(targets=[Name(id='locals_map', ctx=Store())], value=DictComp(key=Name(id='key', ctx=Load()), value=Name(id='value', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='locals', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='key', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='__')], keywords=[]))], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='renderables', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='render_scope', ctx=Load()), args=[Name(id='locals_map', ctx=Load())], keywords=[keyword(arg='title', value=Constant(value='[i]locals'))])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='renderables', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_log_render', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='renderables', ctx=Load())], keywords=[keyword(arg='log_time', value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_datetime', ctx=Load()), args=[], keywords=[])), keyword(arg='path', value=Name(id='path', ctx=Load())), keyword(arg='line_no', value=Name(id='line_no', ctx=Load())), keyword(arg='link_path', value=Name(id='link_path', ctx=Load()))])], ctx=Load())), For(target=Name(id='hook', ctx=Store()), iter=Name(id='render_hooks', ctx=Load()), body=[Assign(targets=[Name(id='renderables', ctx=Store())], value=Call(func=Attribute(value=Name(id='hook', ctx=Load()), attr='process_renderables', ctx=Load()), args=[Name(id='renderables', ctx=Load())], keywords=[]))], orelse=[]), AnnAssign(target=Name(id='new_segments', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Segment', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), Assign(targets=[Name(id='extend', ctx=Store())], value=Attribute(value=Name(id='new_segments', ctx=Load()), attr='extend', ctx=Load())), Assign(targets=[Name(id='render', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='render', ctx=Load())), Assign(targets=[Name(id='render_options', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())), For(target=Name(id='renderable', ctx=Store()), iter=Name(id='renderables', ctx=Load()), body=[Expr(value=Call(func=Name(id='extend', ctx=Load()), args=[Call(func=Name(id='render', ctx=Load()), args=[Name(id='renderable', ctx=Load()), Name(id='render_options', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='buffer_extend', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), attr='extend', ctx=Load())), For(target=Name(id='line', ctx=Store()), iter=Call(func=Attribute(value=Name(id='Segment', ctx=Load()), attr='split_and_crop_lines', ctx=Load()), args=[Name(id='new_segments', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='width', ctx=Load())], keywords=[keyword(arg='pad', value=Constant(value=False))]), body=[Expr(value=Call(func=Name(id='buffer_extend', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[]))], orelse=[])])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_check_buffer', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check if the buffer may be rendered. Render it if it can (e.g. Console.quiet is False)\n        Rendering is supported on Windows, Unix and Jupyter environments. For\n        legacy Windows consoles, the win32 API is called directly.\n        This method will also record what it renders if recording is enabled via Console.record.\n        ')), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='quiet', ctx=Load()), body=[Delete(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), slice=Slice(), ctx=Del())]), Return()], orelse=[]), With(items=[withitem(context_expr=Attribute(value=Name(id='self', ctx=Load()), attr='_lock', ctx=Load()))], body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='record', ctx=Load()), body=[With(items=[withitem(context_expr=Attribute(value=Name(id='self', ctx=Load()), attr='_record_buffer_lock', ctx=Load()))], body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_record_buffer', ctx=Load()), attr='extend', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), slice=Slice(), ctx=Load())], keywords=[]))])], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer_index', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='is_jupyter', ctx=Load()), body=[ImportFrom(module='jupyter', names=[alias(name='display')], level=1), Expr(value=Call(func=Name(id='display', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_render_buffer', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), slice=Slice(), ctx=Load())], keywords=[])], keywords=[])), Delete(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), slice=Slice(), ctx=Del())])], orelse=[If(test=Name(id='WINDOWS', ctx=Load()), body=[Assign(targets=[Name(id='use_legacy_windows_render', ctx=Store())], value=Constant(value=False)), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='legacy_windows', ctx=Load()), body=[Assign(targets=[Name(id='fileno', ctx=Store())], value=Call(func=Name(id='get_fileno', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='file', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='fileno', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='use_legacy_windows_render', ctx=Store())], value=Compare(left=Name(id='fileno', ctx=Load()), ops=[In()], comparators=[Name(id='_STD_STREAMS_OUTPUT', ctx=Load())]))], orelse=[])], orelse=[]), If(test=Name(id='use_legacy_windows_render', ctx=Load()), body=[ImportFrom(module='pip._vendor.rich._win32_console', names=[alias(name='LegacyWindowsTerm')], level=0), ImportFrom(module='pip._vendor.rich._windows_renderer', names=[alias(name='legacy_windows_render')], level=0), Assign(targets=[Name(id='buffer', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), slice=Slice(), ctx=Load())), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='no_color', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_color_system', ctx=Load())]), body=[Assign(targets=[Name(id='buffer', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='Segment', ctx=Load()), attr='remove_color', ctx=Load()), args=[Name(id='buffer', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Expr(value=Call(func=Name(id='legacy_windows_render', ctx=Load()), args=[Name(id='buffer', ctx=Load()), Call(func=Name(id='LegacyWindowsTerm', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='file', ctx=Load())], keywords=[])], keywords=[]))], orelse=[Assign(targets=[Name(id='text', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_render_buffer', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), slice=Slice(), ctx=Load())], keywords=[])), Assign(targets=[Name(id='write', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='file', ctx=Load()), attr='write', ctx=Load())), Assign(targets=[Name(id='MAX_WRITE', ctx=Store())], value=BinOp(left=BinOp(left=Constant(value=32), op=Mult(), right=Constant(value=1024)), op=FloorDiv(), right=Constant(value=4))), Try(body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[]), ops=[LtE()], comparators=[Name(id='MAX_WRITE', ctx=Load())]), body=[Expr(value=Call(func=Name(id='write', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[]))], orelse=[AnnAssign(target=Name(id='batch', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), Assign(targets=[Name(id='batch_append', ctx=Store())], value=Attribute(value=Name(id='batch', ctx=Load()), attr='append', ctx=Load())), Assign(targets=[Name(id='size', ctx=Store())], value=Constant(value=0)), For(target=Name(id='line', ctx=Store()), iter=Call(func=Attribute(value=Name(id='text', ctx=Load()), attr='splitlines', ctx=Load()), args=[Constant(value=True)], keywords=[]), body=[If(test=BoolOp(op=And(), values=[Compare(left=BinOp(left=Name(id='size', ctx=Load()), op=Add(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[])), ops=[Gt()], comparators=[Name(id='MAX_WRITE', ctx=Load())]), Name(id='batch', ctx=Load())]), body=[Expr(value=Call(func=Name(id='write', ctx=Load()), args=[Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Name(id='batch', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='batch', ctx=Load()), attr='clear', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='size', ctx=Store())], value=Constant(value=0))], orelse=[]), Expr(value=Call(func=Name(id='batch_append', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[])), AugAssign(target=Name(id='size', ctx=Store()), op=Add(), value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='batch', ctx=Load()), body=[Expr(value=Call(func=Name(id='write', ctx=Load()), args=[Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Name(id='batch', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='batch', ctx=Load()), attr='clear', ctx=Load()), args=[], keywords=[]))], orelse=[])])], handlers=[ExceptHandler(type=Name(id='UnicodeEncodeError', ctx=Load()), name='error', body=[Assign(targets=[Attribute(value=Name(id='error', ctx=Load()), attr='reason', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='error', ctx=Load()), attr='reason', ctx=Load()), conversion=-1), Constant(value='\n*** You may need to add PYTHONIOENCODING=utf-8 to your environment ***')])), Raise()])], orelse=[], finalbody=[])])], orelse=[Assign(targets=[Name(id='text', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_render_buffer', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), slice=Slice(), ctx=Load())], keywords=[])), Try(body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='file', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='UnicodeEncodeError', ctx=Load()), name='error', body=[Assign(targets=[Attribute(value=Name(id='error', ctx=Load()), attr='reason', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='error', ctx=Load()), attr='reason', ctx=Load()), conversion=-1), Constant(value='\n*** You may need to add PYTHONIOENCODING=utf-8 to your environment ***')])), Raise()])], orelse=[], finalbody=[])]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='file', ctx=Load()), attr='flush', ctx=Load()), args=[], keywords=[])), Delete(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), slice=Slice(), ctx=Del())])])], orelse=[])])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_render_buffer', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='buffer', annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='Segment', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Render buffered output, and clear buffer.')), AnnAssign(target=Name(id='output', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), Assign(targets=[Name(id='append', ctx=Store())], value=Attribute(value=Name(id='output', ctx=Load()), attr='append', ctx=Load())), Assign(targets=[Name(id='color_system', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_color_system', ctx=Load())), Assign(targets=[Name(id='legacy_windows', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='legacy_windows', ctx=Load())), Assign(targets=[Name(id='not_terminal', ctx=Store())], value=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='is_terminal', ctx=Load()))), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='no_color', ctx=Load()), Name(id='color_system', ctx=Load())]), body=[Assign(targets=[Name(id='buffer', ctx=Store())], value=Call(func=Attribute(value=Name(id='Segment', ctx=Load()), attr='remove_color', ctx=Load()), args=[Name(id='buffer', ctx=Load())], keywords=[]))], orelse=[]), For(target=Tuple(elts=[Name(id='text', ctx=Store()), Name(id='style', ctx=Store()), Name(id='control', ctx=Store())], ctx=Store()), iter=Name(id='buffer', ctx=Load()), body=[If(test=Name(id='style', ctx=Load()), body=[Expr(value=Call(func=Name(id='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='style', ctx=Load()), attr='render', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[keyword(arg='color_system', value=Name(id='color_system', ctx=Load())), keyword(arg='legacy_windows', value=Name(id='legacy_windows', ctx=Load()))])], keywords=[]))], orelse=[If(test=UnaryOp(op=Not(), operand=BoolOp(op=And(), values=[Name(id='not_terminal', ctx=Load()), Name(id='control', ctx=Load())])), body=[Expr(value=Call(func=Name(id='append', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[]))], orelse=[])])], orelse=[]), Assign(targets=[Name(id='rendered', ctx=Store())], value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[])), Return(value=Name(id='rendered', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='input', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='prompt', annotation=Name(id='TextType', ctx=Load()))], kwonlyargs=[arg(arg='markup', annotation=Name(id='bool', ctx=Load())), arg(arg='emoji', annotation=Name(id='bool', ctx=Load())), arg(arg='password', annotation=Name(id='bool', ctx=Load())), arg(arg='stream', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TextIO', ctx=Load()), ctx=Load()))], kw_defaults=[Constant(value=True), Constant(value=True), Constant(value=False), Constant(value=None)], defaults=[Constant(value='')]), body=[Expr(value=Constant(value="Displays a prompt and waits for input from the user. The prompt may contain color / style.\n\n        It works in the same way as Python's builtin :func:`input` function and provides elaborate line editing and history features if Python's builtin :mod:`readline` module is previously loaded.\n\n        Args:\n            prompt (Union[str, Text]): Text to render in the prompt.\n            markup (bool, optional): Enable console markup (requires a str prompt). Defaults to True.\n            emoji (bool, optional): Enable emoji (requires a str prompt). Defaults to True.\n            password: (bool, optional): Hide typed text. Defaults to False.\n            stream: (TextIO, optional): Optional file to read input from (rather than stdin). Defaults to None.\n\n        Returns:\n            str: Text read from stdin.\n        ")), If(test=Name(id='prompt', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='print', ctx=Load()), args=[Name(id='prompt', ctx=Load())], keywords=[keyword(arg='markup', value=Name(id='markup', ctx=Load())), keyword(arg='emoji', value=Name(id='emoji', ctx=Load())), keyword(arg='end', value=Constant(value=''))]))], orelse=[]), If(test=Name(id='password', ctx=Load()), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='getpass', ctx=Load()), args=[Constant(value='')], keywords=[keyword(arg='stream', value=Name(id='stream', ctx=Load()))]))], orelse=[If(test=Name(id='stream', ctx=Load()), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='stream', ctx=Load()), attr='readline', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='input', ctx=Load()), args=[], keywords=[]))])]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='export_text', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[arg(arg='clear', annotation=Name(id='bool', ctx=Load())), arg(arg='styles', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=True), Constant(value=False)], defaults=[]), body=[Expr(value=Constant(value='Generate text from console contents (requires record=True argument in constructor).\n\n        Args:\n            clear (bool, optional): Clear record buffer after exporting. Defaults to ``True``.\n            styles (bool, optional): If ``True``, ansi escape codes will be included. ``False`` for plain text.\n                Defaults to ``False``.\n\n        Returns:\n            str: String containing console contents.\n\n        ')), Assert(test=Attribute(value=Name(id='self', ctx=Load()), attr='record', ctx=Load()), msg=Constant(value='To export console contents set record=True in the constructor or instance')), With(items=[withitem(context_expr=Attribute(value=Name(id='self', ctx=Load()), attr='_record_buffer_lock', ctx=Load()))], body=[If(test=Name(id='styles', ctx=Load()), body=[Assign(targets=[Name(id='text', ctx=Store())], value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[GeneratorExp(elt=IfExp(test=Name(id='style', ctx=Load()), body=Call(func=Attribute(value=Name(id='style', ctx=Load()), attr='render', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[]), orelse=Name(id='text', ctx=Load())), generators=[comprehension(target=Tuple(elts=[Name(id='text', ctx=Store()), Name(id='style', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_record_buffer', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], orelse=[Assign(targets=[Name(id='text', ctx=Store())], value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[GeneratorExp(elt=Attribute(value=Name(id='segment', ctx=Load()), attr='text', ctx=Load()), generators=[comprehension(target=Name(id='segment', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_record_buffer', ctx=Load()), ifs=[UnaryOp(op=Not(), operand=Attribute(value=Name(id='segment', ctx=Load()), attr='control', ctx=Load()))], is_async=0)])], keywords=[]))]), If(test=Name(id='clear', ctx=Load()), body=[Delete(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_record_buffer', ctx=Load()), slice=Slice(), ctx=Del())])], orelse=[])]), Return(value=Name(id='text', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='save_text', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[arg(arg='clear', annotation=Name(id='bool', ctx=Load())), arg(arg='styles', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=True), Constant(value=False)], defaults=[]), body=[Expr(value=Constant(value='Generate text from console and save to a given location (requires record=True argument in constructor).\n\n        Args:\n            path (str): Path to write text files.\n            clear (bool, optional): Clear record buffer after exporting. Defaults to ``True``.\n            styles (bool, optional): If ``True``, ansi style codes will be included. ``False`` for plain text.\n                Defaults to ``False``.\n\n        ')), Assign(targets=[Name(id='text', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='export_text', ctx=Load()), args=[], keywords=[keyword(arg='clear', value=Name(id='clear', ctx=Load())), keyword(arg='styles', value=Name(id='styles', ctx=Load()))])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='path', ctx=Load()), Constant(value='wt')], keywords=[keyword(arg='encoding', value=Constant(value='utf-8'))]), optional_vars=Name(id='write_file', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='write_file', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='export_html', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[arg(arg='theme', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TerminalTheme', ctx=Load()), ctx=Load())), arg(arg='clear', annotation=Name(id='bool', ctx=Load())), arg(arg='code_format', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='inline_styles', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=None), Constant(value=True), Constant(value=None), Constant(value=False)], defaults=[]), body=[Expr(value=Constant(value="Generate HTML from console contents (requires record=True argument in constructor).\n\n        Args:\n            theme (TerminalTheme, optional): TerminalTheme object containing console colors.\n            clear (bool, optional): Clear record buffer after exporting. Defaults to ``True``.\n            code_format (str, optional): Format string to render HTML. In addition to '{foreground}',\n                '{background}', and '{code}', should contain '{stylesheet}' if inline_styles is ``False``.\n            inline_styles (bool, optional): If ``True`` styles will be inlined in to spans, which makes files\n                larger but easier to cut and paste markup. If ``False``, styles will be embedded in a style tag.\n                Defaults to False.\n\n        Returns:\n            str: String containing console contents as HTML.\n        ")), Assert(test=Attribute(value=Name(id='self', ctx=Load()), attr='record', ctx=Load()), msg=Constant(value='To export console contents set record=True in the constructor or instance')), AnnAssign(target=Name(id='fragments', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), Assign(targets=[Name(id='append', ctx=Store())], value=Attribute(value=Name(id='fragments', ctx=Load()), attr='append', ctx=Load())), Assign(targets=[Name(id='_theme', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='theme', ctx=Load()), Name(id='DEFAULT_TERMINAL_THEME', ctx=Load())])), Assign(targets=[Name(id='stylesheet', ctx=Store())], value=Constant(value='')), Assign(targets=[Name(id='render_code_format', ctx=Store())], value=IfExp(test=Compare(left=Name(id='code_format', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Name(id='CONSOLE_HTML_FORMAT', ctx=Load()), orelse=Name(id='code_format', ctx=Load()))), With(items=[withitem(context_expr=Attribute(value=Name(id='self', ctx=Load()), attr='_record_buffer_lock', ctx=Load()))], body=[If(test=Name(id='inline_styles', ctx=Load()), body=[For(target=Tuple(elts=[Name(id='text', ctx=Store()), Name(id='style', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='Segment', ctx=Load()), attr='filter_control', ctx=Load()), args=[Call(func=Attribute(value=Name(id='Segment', ctx=Load()), attr='simplify', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_record_buffer', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='text', ctx=Store())], value=Call(func=Name(id='escape', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[])), If(test=Name(id='style', ctx=Load()), body=[Assign(targets=[Name(id='rule', ctx=Store())], value=Call(func=Attribute(value=Name(id='style', ctx=Load()), attr='get_html_style', ctx=Load()), args=[Name(id='_theme', ctx=Load())], keywords=[])), If(test=Attribute(value=Name(id='style', ctx=Load()), attr='link', ctx=Load()), body=[Assign(targets=[Name(id='text', ctx=Store())], value=JoinedStr(values=[Constant(value='<a href="'), FormattedValue(value=Attribute(value=Name(id='style', ctx=Load()), attr='link', ctx=Load()), conversion=-1), Constant(value='">'), FormattedValue(value=Name(id='text', ctx=Load()), conversion=-1), Constant(value='</a>')]))], orelse=[]), Assign(targets=[Name(id='text', ctx=Store())], value=IfExp(test=Name(id='rule', ctx=Load()), body=JoinedStr(values=[Constant(value='<span style="'), FormattedValue(value=Name(id='rule', ctx=Load()), conversion=-1), Constant(value='">'), FormattedValue(value=Name(id='text', ctx=Load()), conversion=-1), Constant(value='</span>')]), orelse=Name(id='text', ctx=Load())))], orelse=[]), Expr(value=Call(func=Name(id='append', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[]))], orelse=[])], orelse=[AnnAssign(target=Name(id='styles', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=1), For(target=Tuple(elts=[Name(id='text', ctx=Store()), Name(id='style', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='Segment', ctx=Load()), attr='filter_control', ctx=Load()), args=[Call(func=Attribute(value=Name(id='Segment', ctx=Load()), attr='simplify', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_record_buffer', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='text', ctx=Store())], value=Call(func=Name(id='escape', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[])), If(test=Name(id='style', ctx=Load()), body=[Assign(targets=[Name(id='rule', ctx=Store())], value=Call(func=Attribute(value=Name(id='style', ctx=Load()), attr='get_html_style', ctx=Load()), args=[Name(id='_theme', ctx=Load())], keywords=[])), Assign(targets=[Name(id='style_number', ctx=Store())], value=Call(func=Attribute(value=Name(id='styles', ctx=Load()), attr='setdefault', ctx=Load()), args=[Name(id='rule', ctx=Load()), BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='styles', ctx=Load())], keywords=[]), op=Add(), right=Constant(value=1))], keywords=[])), If(test=Attribute(value=Name(id='style', ctx=Load()), attr='link', ctx=Load()), body=[Assign(targets=[Name(id='text', ctx=Store())], value=JoinedStr(values=[Constant(value='<a class="r'), FormattedValue(value=Name(id='style_number', ctx=Load()), conversion=-1), Constant(value='" href="'), FormattedValue(value=Attribute(value=Name(id='style', ctx=Load()), attr='link', ctx=Load()), conversion=-1), Constant(value='">'), FormattedValue(value=Name(id='text', ctx=Load()), conversion=-1), Constant(value='</a>')]))], orelse=[Assign(targets=[Name(id='text', ctx=Store())], value=JoinedStr(values=[Constant(value='<span class="r'), FormattedValue(value=Name(id='style_number', ctx=Load()), conversion=-1), Constant(value='">'), FormattedValue(value=Name(id='text', ctx=Load()), conversion=-1), Constant(value='</span>')]))])], orelse=[]), Expr(value=Call(func=Name(id='append', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[]))], orelse=[]), AnnAssign(target=Name(id='stylesheet_rules', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), Assign(targets=[Name(id='stylesheet_append', ctx=Store())], value=Attribute(value=Name(id='stylesheet_rules', ctx=Load()), attr='append', ctx=Load())), For(target=Tuple(elts=[Name(id='style_rule', ctx=Store()), Name(id='style_number', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='styles', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Name(id='style_rule', ctx=Load()), body=[Expr(value=Call(func=Name(id='stylesheet_append', ctx=Load()), args=[JoinedStr(values=[Constant(value='.r'), FormattedValue(value=Name(id='style_number', ctx=Load()), conversion=-1), Constant(value=' {'), FormattedValue(value=Name(id='style_rule', ctx=Load()), conversion=-1), Constant(value='}')])], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='stylesheet', ctx=Store())], value=Call(func=Attribute(value=Constant(value='\n'), attr='join', ctx=Load()), args=[Name(id='stylesheet_rules', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='rendered_code', ctx=Store())], value=Call(func=Attribute(value=Name(id='render_code_format', ctx=Load()), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='code', value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Name(id='fragments', ctx=Load())], keywords=[])), keyword(arg='stylesheet', value=Name(id='stylesheet', ctx=Load())), keyword(arg='foreground', value=Attribute(value=Attribute(value=Name(id='_theme', ctx=Load()), attr='foreground_color', ctx=Load()), attr='hex', ctx=Load())), keyword(arg='background', value=Attribute(value=Attribute(value=Name(id='_theme', ctx=Load()), attr='background_color', ctx=Load()), attr='hex', ctx=Load()))])), If(test=Name(id='clear', ctx=Load()), body=[Delete(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_record_buffer', ctx=Load()), slice=Slice(), ctx=Del())])], orelse=[])]), Return(value=Name(id='rendered_code', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='save_html', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[arg(arg='theme', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TerminalTheme', ctx=Load()), ctx=Load())), arg(arg='clear', annotation=Name(id='bool', ctx=Load())), arg(arg='code_format', annotation=Name(id='str', ctx=Load())), arg(arg='inline_styles', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=None), Constant(value=True), Name(id='CONSOLE_HTML_FORMAT', ctx=Load()), Constant(value=False)], defaults=[]), body=[Expr(value=Constant(value="Generate HTML from console contents and write to a file (requires record=True argument in constructor).\n\n        Args:\n            path (str): Path to write html file.\n            theme (TerminalTheme, optional): TerminalTheme object containing console colors.\n            clear (bool, optional): Clear record buffer after exporting. Defaults to ``True``.\n            code_format (str, optional): Format string to render HTML. In addition to '{foreground}',\n                '{background}', and '{code}', should contain '{stylesheet}' if inline_styles is ``False``.\n            inline_styles (bool, optional): If ``True`` styles will be inlined in to spans, which makes files\n                larger but easier to cut and paste markup. If ``False``, styles will be embedded in a style tag.\n                Defaults to False.\n\n        ")), Assign(targets=[Name(id='html', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='export_html', ctx=Load()), args=[], keywords=[keyword(arg='theme', value=Name(id='theme', ctx=Load())), keyword(arg='clear', value=Name(id='clear', ctx=Load())), keyword(arg='code_format', value=Name(id='code_format', ctx=Load())), keyword(arg='inline_styles', value=Name(id='inline_styles', ctx=Load()))])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='path', ctx=Load()), Constant(value='wt')], keywords=[keyword(arg='encoding', value=Constant(value='utf-8'))]), optional_vars=Name(id='write_file', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='write_file', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='html', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='export_svg', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[arg(arg='title', annotation=Name(id='str', ctx=Load())), arg(arg='theme', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TerminalTheme', ctx=Load()), ctx=Load())), arg(arg='clear', annotation=Name(id='bool', ctx=Load())), arg(arg='code_format', annotation=Name(id='str', ctx=Load())), arg(arg='font_aspect_ratio', annotation=Name(id='float', ctx=Load())), arg(arg='unique_id', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kw_defaults=[Constant(value='Rich'), Constant(value=None), Constant(value=True), Name(id='CONSOLE_SVG_FORMAT', ctx=Load()), Constant(value=0.61), Constant(value=None)], defaults=[]), body=[Expr(value=Constant(value="\n        Generate an SVG from the console contents (requires record=True in Console constructor).\n\n        Args:\n            title (str, optional): The title of the tab in the output image\n            theme (TerminalTheme, optional): The ``TerminalTheme`` object to use to style the terminal\n            clear (bool, optional): Clear record buffer after exporting. Defaults to ``True``\n            code_format (str, optional): Format string used to generate the SVG. Rich will inject a number of variables\n                into the string in order to form the final SVG output. The default template used and the variables\n                injected by Rich can be found by inspecting the ``console.CONSOLE_SVG_FORMAT`` variable.\n            font_aspect_ratio (float, optional): The width to height ratio of the font used in the ``code_format``\n                string. Defaults to 0.61, which is the width to height ratio of Fira Code (the default font).\n                If you aren't specifying a different font inside ``code_format``, you probably don't need this.\n            unique_id (str, optional): unique id that is used as the prefix for various elements (CSS styles, node\n                ids). If not set, this defaults to a computed value based on the recorded content.\n        ")), ImportFrom(module='pip._vendor.rich.cells', names=[alias(name='cell_len')], level=0), AnnAssign(target=Name(id='style_cache', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='Style', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=1), FunctionDef(name='get_svg_style', args=arguments(posonlyargs=[], args=[arg(arg='style', annotation=Name(id='Style', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Convert a Style to CSS rules for SVG.')), If(test=Compare(left=Name(id='style', ctx=Load()), ops=[In()], comparators=[Name(id='style_cache', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='style_cache', ctx=Load()), slice=Name(id='style', ctx=Load()), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='css_rules', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='color', ctx=Store())], value=IfExp(test=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='style', ctx=Load()), attr='color', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Attribute(value=Attribute(value=Name(id='style', ctx=Load()), attr='color', ctx=Load()), attr='is_default', ctx=Load())]), body=Attribute(value=Name(id='_theme', ctx=Load()), attr='foreground_color', ctx=Load()), orelse=Call(func=Attribute(value=Attribute(value=Name(id='style', ctx=Load()), attr='color', ctx=Load()), attr='get_truecolor', ctx=Load()), args=[Name(id='_theme', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='bgcolor', ctx=Store())], value=IfExp(test=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='style', ctx=Load()), attr='bgcolor', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Attribute(value=Attribute(value=Name(id='style', ctx=Load()), attr='bgcolor', ctx=Load()), attr='is_default', ctx=Load())]), body=Attribute(value=Name(id='_theme', ctx=Load()), attr='background_color', ctx=Load()), orelse=Call(func=Attribute(value=Attribute(value=Name(id='style', ctx=Load()), attr='bgcolor', ctx=Load()), attr='get_truecolor', ctx=Load()), args=[Name(id='_theme', ctx=Load())], keywords=[]))), If(test=Attribute(value=Name(id='style', ctx=Load()), attr='reverse', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='color', ctx=Store()), Name(id='bgcolor', ctx=Store())], ctx=Store())], value=Tuple(elts=[Name(id='bgcolor', ctx=Load()), Name(id='color', ctx=Load())], ctx=Load()))], orelse=[]), If(test=Attribute(value=Name(id='style', ctx=Load()), attr='dim', ctx=Load()), body=[Assign(targets=[Name(id='color', ctx=Store())], value=Call(func=Name(id='blend_rgb', ctx=Load()), args=[Name(id='color', ctx=Load()), Name(id='bgcolor', ctx=Load()), Constant(value=0.4)], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='css_rules', ctx=Load()), attr='append', ctx=Load()), args=[JoinedStr(values=[Constant(value='fill: '), FormattedValue(value=Attribute(value=Name(id='color', ctx=Load()), attr='hex', ctx=Load()), conversion=-1)])], keywords=[])), If(test=Attribute(value=Name(id='style', ctx=Load()), attr='bold', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='css_rules', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='font-weight: bold')], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='style', ctx=Load()), attr='italic', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='css_rules', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='font-style: italic;')], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='style', ctx=Load()), attr='underline', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='css_rules', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='text-decoration: underline;')], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='style', ctx=Load()), attr='strike', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='css_rules', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='text-decoration: line-through;')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='css', ctx=Store())], value=Call(func=Attribute(value=Constant(value=';'), attr='join', ctx=Load()), args=[Name(id='css_rules', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='style_cache', ctx=Load()), slice=Name(id='style', ctx=Load()), ctx=Store())], value=Name(id='css', ctx=Load())), Return(value=Name(id='css', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), Assign(targets=[Name(id='_theme', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='theme', ctx=Load()), Name(id='SVG_EXPORT_THEME', ctx=Load())])), Assign(targets=[Name(id='width', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='width', ctx=Load())), Assign(targets=[Name(id='char_height', ctx=Store())], value=Constant(value=20)), Assign(targets=[Name(id='char_width', ctx=Store())], value=BinOp(left=Name(id='char_height', ctx=Load()), op=Mult(), right=Name(id='font_aspect_ratio', ctx=Load()))), Assign(targets=[Name(id='line_height', ctx=Store())], value=BinOp(left=Name(id='char_height', ctx=Load()), op=Mult(), right=Constant(value=1.22))), Assign(targets=[Name(id='margin_top', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='margin_right', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='margin_bottom', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='margin_left', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='padding_top', ctx=Store())], value=Constant(value=40)), Assign(targets=[Name(id='padding_right', ctx=Store())], value=Constant(value=8)), Assign(targets=[Name(id='padding_bottom', ctx=Store())], value=Constant(value=8)), Assign(targets=[Name(id='padding_left', ctx=Store())], value=Constant(value=8)), Assign(targets=[Name(id='padding_width', ctx=Store())], value=BinOp(left=Name(id='padding_left', ctx=Load()), op=Add(), right=Name(id='padding_right', ctx=Load()))), Assign(targets=[Name(id='padding_height', ctx=Store())], value=BinOp(left=Name(id='padding_top', ctx=Load()), op=Add(), right=Name(id='padding_bottom', ctx=Load()))), Assign(targets=[Name(id='margin_width', ctx=Store())], value=BinOp(left=Name(id='margin_left', ctx=Load()), op=Add(), right=Name(id='margin_right', ctx=Load()))), Assign(targets=[Name(id='margin_height', ctx=Store())], value=BinOp(left=Name(id='margin_top', ctx=Load()), op=Add(), right=Name(id='margin_bottom', ctx=Load()))), AnnAssign(target=Name(id='text_backgrounds', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), AnnAssign(target=Name(id='text_group', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), AnnAssign(target=Name(id='classes', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=1), Assign(targets=[Name(id='style_no', ctx=Store())], value=Constant(value=1)), FunctionDef(name='escape_text', args=arguments(posonlyargs=[], args=[arg(arg='text', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='HTML escape text and replace spaces with nbsp.')), Return(value=Call(func=Attribute(value=Call(func=Name(id='escape', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value=' '), Constant(value='&#160;')], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='make_tag', args=arguments(posonlyargs=[], args=[arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='content', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='attribs', annotation=Name(id='object', ctx=Load())), defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Make a tag from name, content, and attributes.')), FunctionDef(name='stringify', args=arguments(posonlyargs=[], args=[arg(arg='value', annotation=Name(id='object', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='float', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Name(id='format', ctx=Load()), args=[Name(id='value', ctx=Load()), Constant(value='g')], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), Assign(targets=[Name(id='tag_attribs', ctx=Store())], value=Call(func=Attribute(value=Constant(value=' '), attr='join', ctx=Load()), args=[GeneratorExp(elt=JoinedStr(values=[FormattedValue(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='k', ctx=Load()), attr='lstrip', ctx=Load()), args=[Constant(value='_')], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value='_'), Constant(value='-')], keywords=[]), conversion=-1), Constant(value='="'), FormattedValue(value=Call(func=Name(id='stringify', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[]), conversion=-1), Constant(value='"')]), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='attribs', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[])), Return(value=IfExp(test=Name(id='content', ctx=Load()), body=JoinedStr(values=[Constant(value='<'), FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1), Constant(value=' '), FormattedValue(value=Name(id='tag_attribs', ctx=Load()), conversion=-1), Constant(value='>'), FormattedValue(value=Name(id='content', ctx=Load()), conversion=-1), Constant(value='</'), FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1), Constant(value='>')]), orelse=JoinedStr(values=[Constant(value='<'), FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1), Constant(value=' '), FormattedValue(value=Name(id='tag_attribs', ctx=Load()), conversion=-1), Constant(value='/>')])))], decorator_list=[], returns=Name(id='str', ctx=Load())), With(items=[withitem(context_expr=Attribute(value=Name(id='self', ctx=Load()), attr='_record_buffer_lock', ctx=Load()))], body=[Assign(targets=[Name(id='segments', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='Segment', ctx=Load()), attr='filter_control', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_record_buffer', ctx=Load())], keywords=[])], keywords=[])), If(test=Name(id='clear', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_record_buffer', ctx=Load()), attr='clear', ctx=Load()), args=[], keywords=[]))], orelse=[])]), If(test=Compare(left=Name(id='unique_id', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='unique_id', ctx=Store())], value=BinOp(left=Constant(value='terminal-'), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Attribute(value=Name(id='zlib', ctx=Load()), attr='adler32', ctx=Load()), args=[BinOp(left=Call(func=Attribute(value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='repr', ctx=Load()), args=[Name(id='segment', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='segment', ctx=Store()), iter=Name(id='segments', ctx=Load()), ifs=[], is_async=0)])], keywords=[]), attr='encode', ctx=Load()), args=[Constant(value='utf-8'), Constant(value='ignore')], keywords=[]), op=Add(), right=Call(func=Attribute(value=Name(id='title', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='utf-8'), Constant(value='ignore')], keywords=[]))], keywords=[])], keywords=[])))], orelse=[]), Assign(targets=[Name(id='y', ctx=Store())], value=Constant(value=0)), For(target=Tuple(elts=[Name(id='y', ctx=Store()), Name(id='line', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Call(func=Attribute(value=Name(id='Segment', ctx=Load()), attr='split_and_crop_lines', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[keyword(arg='length', value=Name(id='width', ctx=Load()))])], keywords=[]), body=[Assign(targets=[Name(id='x', ctx=Store())], value=Constant(value=0)), For(target=Tuple(elts=[Name(id='text', ctx=Store()), Name(id='style', ctx=Store()), Name(id='_control', ctx=Store())], ctx=Store()), iter=Name(id='line', ctx=Load()), body=[Assign(targets=[Name(id='style', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='style', ctx=Load()), Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[])])), Assign(targets=[Name(id='rules', ctx=Store())], value=Call(func=Name(id='get_svg_style', ctx=Load()), args=[Name(id='style', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='rules', ctx=Load()), ops=[NotIn()], comparators=[Name(id='classes', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='classes', ctx=Load()), slice=Name(id='rules', ctx=Load()), ctx=Store())], value=Name(id='style_no', ctx=Load())), AugAssign(target=Name(id='style_no', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='class_name', ctx=Store())], value=JoinedStr(values=[Constant(value='r'), FormattedValue(value=Subscript(value=Name(id='classes', ctx=Load()), slice=Name(id='rules', ctx=Load()), ctx=Load()), conversion=-1)])), If(test=Attribute(value=Name(id='style', ctx=Load()), attr='reverse', ctx=Load()), body=[Assign(targets=[Name(id='has_background', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='background', ctx=Store())], value=IfExp(test=Compare(left=Attribute(value=Name(id='style', ctx=Load()), attr='color', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Attribute(value=Attribute(value=Name(id='_theme', ctx=Load()), attr='foreground_color', ctx=Load()), attr='hex', ctx=Load()), orelse=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='style', ctx=Load()), attr='color', ctx=Load()), attr='get_truecolor', ctx=Load()), args=[Name(id='_theme', ctx=Load())], keywords=[]), attr='hex', ctx=Load())))], orelse=[Assign(targets=[Name(id='bgcolor', ctx=Store())], value=Attribute(value=Name(id='style', ctx=Load()), attr='bgcolor', ctx=Load())), Assign(targets=[Name(id='has_background', ctx=Store())], value=BoolOp(op=And(), values=[Compare(left=Name(id='bgcolor', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), UnaryOp(op=Not(), operand=Attribute(value=Name(id='bgcolor', ctx=Load()), attr='is_default', ctx=Load()))])), Assign(targets=[Name(id='background', ctx=Store())], value=IfExp(test=Compare(left=Attribute(value=Name(id='style', ctx=Load()), attr='bgcolor', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Attribute(value=Attribute(value=Name(id='_theme', ctx=Load()), attr='background_color', ctx=Load()), attr='hex', ctx=Load()), orelse=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='style', ctx=Load()), attr='bgcolor', ctx=Load()), attr='get_truecolor', ctx=Load()), args=[Name(id='_theme', ctx=Load())], keywords=[]), attr='hex', ctx=Load())))]), Assign(targets=[Name(id='text_length', ctx=Store())], value=Call(func=Name(id='cell_len', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[])), If(test=Name(id='has_background', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='text_backgrounds', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='make_tag', ctx=Load()), args=[Constant(value='rect')], keywords=[keyword(arg='fill', value=Name(id='background', ctx=Load())), keyword(arg='x', value=BinOp(left=Name(id='x', ctx=Load()), op=Mult(), right=Name(id='char_width', ctx=Load()))), keyword(arg='y', value=BinOp(left=BinOp(left=Name(id='y', ctx=Load()), op=Mult(), right=Name(id='line_height', ctx=Load())), op=Add(), right=Constant(value=1.5))), keyword(arg='width', value=BinOp(left=Name(id='char_width', ctx=Load()), op=Mult(), right=Name(id='text_length', ctx=Load()))), keyword(arg='height', value=BinOp(left=Name(id='line_height', ctx=Load()), op=Add(), right=Constant(value=0.25))), keyword(arg='shape_rendering', value=Constant(value='crispEdges'))])], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='text', ctx=Load()), ops=[NotEq()], comparators=[BinOp(left=Constant(value=' '), op=Mult(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[]))]), body=[Expr(value=Call(func=Attribute(value=Name(id='text_group', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='make_tag', ctx=Load()), args=[Constant(value='text'), Call(func=Name(id='escape_text', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[])], keywords=[keyword(arg='_class', value=JoinedStr(values=[FormattedValue(value=Name(id='unique_id', ctx=Load()), conversion=-1), Constant(value='-'), FormattedValue(value=Name(id='class_name', ctx=Load()), conversion=-1)])), keyword(arg='x', value=BinOp(left=Name(id='x', ctx=Load()), op=Mult(), right=Name(id='char_width', ctx=Load()))), keyword(arg='y', value=BinOp(left=BinOp(left=Name(id='y', ctx=Load()), op=Mult(), right=Name(id='line_height', ctx=Load())), op=Add(), right=Name(id='char_height', ctx=Load()))), keyword(arg='textLength', value=BinOp(left=Name(id='char_width', ctx=Load()), op=Mult(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[]))), keyword(arg='clip_path', value=JoinedStr(values=[Constant(value='url(#'), FormattedValue(value=Name(id='unique_id', ctx=Load()), conversion=-1), Constant(value='-line-'), FormattedValue(value=Name(id='y', ctx=Load()), conversion=-1), Constant(value=')')]))])], keywords=[]))], orelse=[]), AugAssign(target=Name(id='x', ctx=Store()), op=Add(), value=Call(func=Name(id='cell_len', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='line_offsets', ctx=Store())], value=ListComp(elt=BinOp(left=BinOp(left=Name(id='line_no', ctx=Load()), op=Mult(), right=Name(id='line_height', ctx=Load())), op=Add(), right=Constant(value=1.5)), generators=[comprehension(target=Name(id='line_no', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='y', ctx=Load())], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='lines', ctx=Store())], value=Call(func=Attribute(value=Constant(value='\n'), attr='join', ctx=Load()), args=[GeneratorExp(elt=JoinedStr(values=[Constant(value='<clipPath id="'), FormattedValue(value=Name(id='unique_id', ctx=Load()), conversion=-1), Constant(value='-line-'), FormattedValue(value=Name(id='line_no', ctx=Load()), conversion=-1), Constant(value='">\n    '), FormattedValue(value=Call(func=Name(id='make_tag', ctx=Load()), args=[Constant(value='rect')], keywords=[keyword(arg='x', value=Constant(value=0)), keyword(arg='y', value=Name(id='offset', ctx=Load())), keyword(arg='width', value=BinOp(left=Name(id='char_width', ctx=Load()), op=Mult(), right=Name(id='width', ctx=Load()))), keyword(arg='height', value=BinOp(left=Name(id='line_height', ctx=Load()), op=Add(), right=Constant(value=0.25)))]), conversion=-1), Constant(value='\n            </clipPath>')]), generators=[comprehension(target=Tuple(elts=[Name(id='line_no', ctx=Store()), Name(id='offset', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='line_offsets', ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Name(id='styles', ctx=Store())], value=Call(func=Attribute(value=Constant(value='\n'), attr='join', ctx=Load()), args=[GeneratorExp(elt=JoinedStr(values=[Constant(value='.'), FormattedValue(value=Name(id='unique_id', ctx=Load()), conversion=-1), Constant(value='-r'), FormattedValue(value=Name(id='rule_no', ctx=Load()), conversion=-1), Constant(value=' { '), FormattedValue(value=Name(id='css', ctx=Load()), conversion=-1), Constant(value=' }')]), generators=[comprehension(target=Tuple(elts=[Name(id='css', ctx=Store()), Name(id='rule_no', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='classes', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Name(id='backgrounds', ctx=Store())], value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Name(id='text_backgrounds', ctx=Load())], keywords=[])), Assign(targets=[Name(id='matrix', ctx=Store())], value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Name(id='text_group', ctx=Load())], keywords=[])), Assign(targets=[Name(id='terminal_width', ctx=Store())], value=Call(func=Name(id='ceil', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='width', ctx=Load()), op=Mult(), right=Name(id='char_width', ctx=Load())), op=Add(), right=Name(id='padding_width', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='terminal_height', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Constant(value=1)), op=Mult(), right=Name(id='line_height', ctx=Load())), op=Add(), right=Name(id='padding_height', ctx=Load()))), Assign(targets=[Name(id='chrome', ctx=Store())], value=Call(func=Name(id='make_tag', ctx=Load()), args=[Constant(value='rect')], keywords=[keyword(arg='fill', value=Attribute(value=Attribute(value=Name(id='_theme', ctx=Load()), attr='background_color', ctx=Load()), attr='hex', ctx=Load())), keyword(arg='stroke', value=Constant(value='rgba(255,255,255,0.35)')), keyword(arg='stroke_width', value=Constant(value='1')), keyword(arg='x', value=Name(id='margin_left', ctx=Load())), keyword(arg='y', value=Name(id='margin_top', ctx=Load())), keyword(arg='width', value=Name(id='terminal_width', ctx=Load())), keyword(arg='height', value=Name(id='terminal_height', ctx=Load())), keyword(arg='rx', value=Constant(value=8))])), Assign(targets=[Name(id='title_color', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='_theme', ctx=Load()), attr='foreground_color', ctx=Load()), attr='hex', ctx=Load())), If(test=Name(id='title', ctx=Load()), body=[AugAssign(target=Name(id='chrome', ctx=Store()), op=Add(), value=Call(func=Name(id='make_tag', ctx=Load()), args=[Constant(value='text'), Call(func=Name(id='escape_text', ctx=Load()), args=[Name(id='title', ctx=Load())], keywords=[])], keywords=[keyword(arg='_class', value=JoinedStr(values=[FormattedValue(value=Name(id='unique_id', ctx=Load()), conversion=-1), Constant(value='-title')])), keyword(arg='fill', value=Name(id='title_color', ctx=Load())), keyword(arg='text_anchor', value=Constant(value='middle')), keyword(arg='x', value=BinOp(left=Name(id='terminal_width', ctx=Load()), op=FloorDiv(), right=Constant(value=2))), keyword(arg='y', value=BinOp(left=BinOp(left=Name(id='margin_top', ctx=Load()), op=Add(), right=Name(id='char_height', ctx=Load())), op=Add(), right=Constant(value=6)))]))], orelse=[]), AugAssign(target=Name(id='chrome', ctx=Store()), op=Add(), value=JoinedStr(values=[Constant(value='\n            <g transform="translate(26,22)">\n            <circle cx="0" cy="0" r="7" fill="#ff5f57"/>\n            <circle cx="22" cy="0" r="7" fill="#febc2e"/>\n            <circle cx="44" cy="0" r="7" fill="#28c840"/>\n            </g>\n        ')])), Assign(targets=[Name(id='svg', ctx=Store())], value=Call(func=Attribute(value=Name(id='code_format', ctx=Load()), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='unique_id', value=Name(id='unique_id', ctx=Load())), keyword(arg='char_width', value=Name(id='char_width', ctx=Load())), keyword(arg='char_height', value=Name(id='char_height', ctx=Load())), keyword(arg='line_height', value=Name(id='line_height', ctx=Load())), keyword(arg='terminal_width', value=BinOp(left=BinOp(left=Name(id='char_width', ctx=Load()), op=Mult(), right=Name(id='width', ctx=Load())), op=Sub(), right=Constant(value=1))), keyword(arg='terminal_height', value=BinOp(left=BinOp(left=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Constant(value=1)), op=Mult(), right=Name(id='line_height', ctx=Load())), op=Sub(), right=Constant(value=1))), keyword(arg='width', value=BinOp(left=Name(id='terminal_width', ctx=Load()), op=Add(), right=Name(id='margin_width', ctx=Load()))), keyword(arg='height', value=BinOp(left=Name(id='terminal_height', ctx=Load()), op=Add(), right=Name(id='margin_height', ctx=Load()))), keyword(arg='terminal_x', value=BinOp(left=Name(id='margin_left', ctx=Load()), op=Add(), right=Name(id='padding_left', ctx=Load()))), keyword(arg='terminal_y', value=BinOp(left=Name(id='margin_top', ctx=Load()), op=Add(), right=Name(id='padding_top', ctx=Load()))), keyword(arg='styles', value=Name(id='styles', ctx=Load())), keyword(arg='chrome', value=Name(id='chrome', ctx=Load())), keyword(arg='backgrounds', value=Name(id='backgrounds', ctx=Load())), keyword(arg='matrix', value=Name(id='matrix', ctx=Load())), keyword(arg='lines', value=Name(id='lines', ctx=Load()))])), Return(value=Name(id='svg', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='save_svg', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[arg(arg='title', annotation=Name(id='str', ctx=Load())), arg(arg='theme', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TerminalTheme', ctx=Load()), ctx=Load())), arg(arg='clear', annotation=Name(id='bool', ctx=Load())), arg(arg='code_format', annotation=Name(id='str', ctx=Load())), arg(arg='font_aspect_ratio', annotation=Name(id='float', ctx=Load())), arg(arg='unique_id', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kw_defaults=[Constant(value='Rich'), Constant(value=None), Constant(value=True), Name(id='CONSOLE_SVG_FORMAT', ctx=Load()), Constant(value=0.61), Constant(value=None)], defaults=[]), body=[Expr(value=Constant(value="Generate an SVG file from the console contents (requires record=True in Console constructor).\n\n        Args:\n            path (str): The path to write the SVG to.\n            title (str, optional): The title of the tab in the output image\n            theme (TerminalTheme, optional): The ``TerminalTheme`` object to use to style the terminal\n            clear (bool, optional): Clear record buffer after exporting. Defaults to ``True``\n            code_format (str, optional): Format string used to generate the SVG. Rich will inject a number of variables\n                into the string in order to form the final SVG output. The default template used and the variables\n                injected by Rich can be found by inspecting the ``console.CONSOLE_SVG_FORMAT`` variable.\n            font_aspect_ratio (float, optional): The width to height ratio of the font used in the ``code_format``\n                string. Defaults to 0.61, which is the width to height ratio of Fira Code (the default font).\n                If you aren't specifying a different font inside ``code_format``, you probably don't need this.\n            unique_id (str, optional): unique id that is used as the prefix for various elements (CSS styles, node\n                ids). If not set, this defaults to a computed value based on the recorded content.\n        ")), Assign(targets=[Name(id='svg', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='export_svg', ctx=Load()), args=[], keywords=[keyword(arg='title', value=Name(id='title', ctx=Load())), keyword(arg='theme', value=Name(id='theme', ctx=Load())), keyword(arg='clear', value=Name(id='clear', ctx=Load())), keyword(arg='code_format', value=Name(id='code_format', ctx=Load())), keyword(arg='font_aspect_ratio', value=Name(id='font_aspect_ratio', ctx=Load())), keyword(arg='unique_id', value=Name(id='unique_id', ctx=Load()))])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='path', ctx=Load()), Constant(value='wt')], keywords=[keyword(arg='encoding', value=Constant(value='utf-8'))]), optional_vars=Name(id='write_file', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='write_file', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='svg', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), FunctionDef(name='_svg_hash', args=arguments(posonlyargs=[], args=[arg(arg='svg_main_code', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Returns a unique hash for the given SVG main code.\n\n    Args:\n        svg_main_code (str): The content we're going to inject in the SVG envelope.\n\n    Returns:\n        str: a hash of the given content\n    ")), Return(value=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Attribute(value=Name(id='zlib', ctx=Load()), attr='adler32', ctx=Load()), args=[Call(func=Attribute(value=Name(id='svg_main_code', ctx=Load()), attr='encode', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__')]), body=[Assign(targets=[Name(id='console', ctx=Store())], value=Call(func=Name(id='Console', ctx=Load()), args=[], keywords=[keyword(arg='record', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='log', ctx=Load()), args=[Constant(value='JSONRPC [i]request[/i]'), Constant(value=5), Constant(value=1.3), Constant(value=True), Constant(value=False), Constant(value=None), Dict(keys=[Constant(value='jsonrpc'), Constant(value='method'), Constant(value='params'), Constant(value='id')], values=[Constant(value='2.0'), Constant(value='subtract'), Dict(keys=[Constant(value='minuend'), Constant(value='subtrahend')], values=[Constant(value=42), Constant(value=23)]), Constant(value=3)])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='log', ctx=Load()), args=[Constant(value='Hello, World!'), Constant(value="{'a': 1}"), Call(func=Name(id='repr', ctx=Load()), args=[Name(id='console', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='print', ctx=Load()), args=[Dict(keys=[Constant(value='name'), Constant(value='empty'), Constant(value='quiz')], values=[Constant(value=None), List(elts=[], ctx=Load()), Dict(keys=[Constant(value='sport'), Constant(value='maths')], values=[Dict(keys=[Constant(value='answered'), Constant(value='q1')], values=[Constant(value=True), Dict(keys=[Constant(value='question'), Constant(value='options'), Constant(value='answer')], values=[Constant(value='Which one is correct team name in NBA?'), List(elts=[Constant(value='New York Bulls'), Constant(value='Los Angeles Kings'), Constant(value='Golden State Warriors'), Constant(value='Huston Rocket')], ctx=Load()), Constant(value='Huston Rocket')])]), Dict(keys=[Constant(value='answered'), Constant(value='q1'), Constant(value='q2')], values=[Constant(value=False), Dict(keys=[Constant(value='question'), Constant(value='options'), Constant(value='answer')], values=[Constant(value='5 + 7 = ?'), List(elts=[Constant(value=10), Constant(value=11), Constant(value=12), Constant(value=13)], ctx=Load()), Constant(value=12)]), Dict(keys=[Constant(value='question'), Constant(value='options'), Constant(value='answer')], values=[Constant(value='12 - 8 = ?'), List(elts=[Constant(value=1), Constant(value=2), Constant(value=3), Constant(value=4)], ctx=Load()), Constant(value=4)])])])])], keywords=[]))], orelse=[])], type_ignores=[])