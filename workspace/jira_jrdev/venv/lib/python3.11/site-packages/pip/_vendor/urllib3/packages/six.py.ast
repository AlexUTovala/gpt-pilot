Module(body=[Expr(value=Constant(value='Utilities for writing code that runs on Python 2 and 3')), ImportFrom(module='__future__', names=[alias(name='absolute_import')], level=0), Import(names=[alias(name='functools')]), Import(names=[alias(name='itertools')]), Import(names=[alias(name='operator')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='types')]), Assign(targets=[Name(id='__author__', ctx=Store())], value=Constant(value='Benjamin Peterson <benjamin@python.org>')), Assign(targets=[Name(id='__version__', ctx=Store())], value=Constant(value='1.16.0')), Assign(targets=[Name(id='PY2', ctx=Store())], value=Compare(left=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Constant(value=2)])), Assign(targets=[Name(id='PY3', ctx=Store())], value=Compare(left=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Constant(value=3)])), Assign(targets=[Name(id='PY34', ctx=Store())], value=Compare(left=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), slice=Slice(lower=Constant(value=0), upper=Constant(value=2)), ctx=Load()), ops=[GtE()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=4)], ctx=Load())])), If(test=Name(id='PY3', ctx=Load()), body=[Assign(targets=[Name(id='string_types', ctx=Store())], value=Tuple(elts=[Name(id='str', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='integer_types', ctx=Store())], value=Tuple(elts=[Name(id='int', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='class_types', ctx=Store())], value=Tuple(elts=[Name(id='type', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='text_type', ctx=Store())], value=Name(id='str', ctx=Load())), Assign(targets=[Name(id='binary_type', ctx=Store())], value=Name(id='bytes', ctx=Load())), Assign(targets=[Name(id='MAXSIZE', ctx=Store())], value=Attribute(value=Name(id='sys', ctx=Load()), attr='maxsize', ctx=Load()))], orelse=[Assign(targets=[Name(id='string_types', ctx=Store())], value=Tuple(elts=[Name(id='basestring', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='integer_types', ctx=Store())], value=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='long', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='class_types', ctx=Store())], value=Tuple(elts=[Name(id='type', ctx=Load()), Attribute(value=Name(id='types', ctx=Load()), attr='ClassType', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='text_type', ctx=Store())], value=Name(id='unicode', ctx=Load())), Assign(targets=[Name(id='binary_type', ctx=Store())], value=Name(id='str', ctx=Load())), If(test=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='java')], keywords=[]), body=[Assign(targets=[Name(id='MAXSIZE', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=BinOp(left=Constant(value=1), op=LShift(), right=Constant(value=31)), op=Sub(), right=Constant(value=1))], keywords=[]))], orelse=[ClassDef(name='X', bases=[Name(id='object', ctx=Load())], keywords=[], body=[FunctionDef(name='__len__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Constant(value=1), op=LShift(), right=Constant(value=31)))], decorator_list=[])], decorator_list=[]), Try(body=[Expr(value=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Name(id='X', ctx=Load()), args=[], keywords=[])], keywords=[]))], handlers=[ExceptHandler(type=Name(id='OverflowError', ctx=Load()), body=[Assign(targets=[Name(id='MAXSIZE', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=BinOp(left=Constant(value=1), op=LShift(), right=Constant(value=31)), op=Sub(), right=Constant(value=1))], keywords=[]))])], orelse=[Assign(targets=[Name(id='MAXSIZE', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=BinOp(left=Constant(value=1), op=LShift(), right=Constant(value=63)), op=Sub(), right=Constant(value=1))], keywords=[]))], finalbody=[]), Delete(targets=[Name(id='X', ctx=Del())])])]), If(test=Name(id='PY34', ctx=Load()), body=[ImportFrom(module='importlib.util', names=[alias(name='spec_from_loader')], level=0)], orelse=[Assign(targets=[Name(id='spec_from_loader', ctx=Store())], value=Constant(value=None))]), FunctionDef(name='_add_doc', args=arguments(posonlyargs=[], args=[arg(arg='func'), arg(arg='doc')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Add documentation to a function.')), Assign(targets=[Attribute(value=Name(id='func', ctx=Load()), attr='__doc__', ctx=Store())], value=Name(id='doc', ctx=Load()))], decorator_list=[]), FunctionDef(name='_import_module', args=arguments(posonlyargs=[], args=[arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Import module, returning the module after the last dot.')), Expr(value=Call(func=Name(id='__import__', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), Return(value=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='modules', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load()))], decorator_list=[]), ClassDef(name='_LazyDescr', bases=[Name(id='object', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Store())], value=Name(id='name', ctx=Load()))], decorator_list=[]), FunctionDef(name='__get__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='obj'), arg(arg='tp')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_resolve', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='obj', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), Name(id='result', ctx=Load())], keywords=[])), Try(body=[Expr(value=Call(func=Name(id='delattr', ctx=Load()), args=[Attribute(value=Name(id='obj', ctx=Load()), attr='__class__', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='MovedModule', bases=[Name(id='_LazyDescr', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name'), arg(arg='old'), arg(arg='new')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[Name(id='MovedModule', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]), attr='__init__', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), If(test=Name(id='PY3', ctx=Load()), body=[If(test=Compare(left=Name(id='new', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='new', ctx=Store())], value=Name(id='name', ctx=Load()))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='mod', ctx=Store())], value=Name(id='new', ctx=Load()))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='mod', ctx=Store())], value=Name(id='old', ctx=Load()))])], decorator_list=[]), FunctionDef(name='_resolve', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='_import_module', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='mod', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='__getattr__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='attr')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='_module', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_resolve', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='_module', ctx=Load()), Name(id='attr', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='attr', ctx=Load()), Name(id='value', ctx=Load())], keywords=[])), Return(value=Name(id='value', ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='_LazyModule', bases=[Attribute(value=Name(id='types', ctx=Load()), attr='ModuleType', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[Name(id='_LazyModule', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]), attr='__init__', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='__doc__', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__doc__', ctx=Load()))], decorator_list=[]), FunctionDef(name='__dir__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='attrs', ctx=Store())], value=List(elts=[Constant(value='__doc__'), Constant(value='__name__')], ctx=Load())), AugAssign(target=Name(id='attrs', ctx=Store()), op=Add(), value=ListComp(elt=Attribute(value=Name(id='attr', ctx=Load()), attr='name', ctx=Load()), generators=[comprehension(target=Name(id='attr', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_moved_attributes', ctx=Load()), ifs=[], is_async=0)])), Return(value=Name(id='attrs', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='_moved_attributes', ctx=Store())], value=List(elts=[], ctx=Load()))], decorator_list=[]), ClassDef(name='MovedAttribute', bases=[Name(id='_LazyDescr', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name'), arg(arg='old_mod'), arg(arg='new_mod'), arg(arg='old_attr'), arg(arg='new_attr')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[Name(id='MovedAttribute', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]), attr='__init__', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), If(test=Name(id='PY3', ctx=Load()), body=[If(test=Compare(left=Name(id='new_mod', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='new_mod', ctx=Store())], value=Name(id='name', ctx=Load()))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='mod', ctx=Store())], value=Name(id='new_mod', ctx=Load())), If(test=Compare(left=Name(id='new_attr', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='old_attr', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='new_attr', ctx=Store())], value=Name(id='name', ctx=Load()))], orelse=[Assign(targets=[Name(id='new_attr', ctx=Store())], value=Name(id='old_attr', ctx=Load()))])], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='attr', ctx=Store())], value=Name(id='new_attr', ctx=Load()))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='mod', ctx=Store())], value=Name(id='old_mod', ctx=Load())), If(test=Compare(left=Name(id='old_attr', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='old_attr', ctx=Store())], value=Name(id='name', ctx=Load()))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='attr', ctx=Store())], value=Name(id='old_attr', ctx=Load()))])], decorator_list=[]), FunctionDef(name='_resolve', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='module', ctx=Store())], value=Call(func=Name(id='_import_module', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='mod', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='module', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='attr', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='_SixMetaPathImporter', bases=[Name(id='object', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    A meta path importer to import six.moves and its submodules.\n\n    This class implements a PEP302 finder and loader. It should be compatible\n    with Python 2.5 and all existing versions of Python3\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='six_module_name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Store())], value=Name(id='six_module_name', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='known_modules', ctx=Store())], value=Dict(keys=[], values=[]))], decorator_list=[]), FunctionDef(name='_add_module', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='mod')], vararg=arg(arg='fullnames'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='fullname', ctx=Store()), iter=Name(id='fullnames', ctx=Load()), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='known_modules', ctx=Load()), slice=BinOp(left=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), op=Add(), right=Constant(value='.')), op=Add(), right=Name(id='fullname', ctx=Load())), ctx=Store())], value=Name(id='mod', ctx=Load()))], orelse=[])], decorator_list=[]), FunctionDef(name='_get_module', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='fullname')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='known_modules', ctx=Load()), slice=BinOp(left=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), op=Add(), right=Constant(value='.')), op=Add(), right=Name(id='fullname', ctx=Load())), ctx=Load()))], decorator_list=[]), FunctionDef(name='find_module', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='fullname'), arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='fullname', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='known_modules', ctx=Load())]), body=[Return(value=Name(id='self', ctx=Load()))], orelse=[]), Return(value=Constant(value=None))], decorator_list=[]), FunctionDef(name='find_spec', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='fullname'), arg(arg='path'), arg(arg='target')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='fullname', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='known_modules', ctx=Load())]), body=[Return(value=Call(func=Name(id='spec_from_loader', ctx=Load()), args=[Name(id='fullname', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Constant(value=None))], decorator_list=[]), FunctionDef(name='__get_module', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='fullname')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='known_modules', ctx=Load()), slice=Name(id='fullname', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='ImportError', ctx=Load()), args=[BinOp(left=Constant(value='This loader does not know module '), op=Add(), right=Name(id='fullname', ctx=Load()))], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='load_module', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='fullname')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Return(value=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='modules', ctx=Load()), slice=Name(id='fullname', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[]), Assign(targets=[Name(id='mod', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='__get_module', ctx=Load()), args=[Name(id='fullname', ctx=Load())], keywords=[])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='mod', ctx=Load()), Name(id='MovedModule', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='mod', ctx=Store())], value=Call(func=Attribute(value=Name(id='mod', ctx=Load()), attr='_resolve', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Attribute(value=Name(id='mod', ctx=Load()), attr='__loader__', ctx=Store())], value=Name(id='self', ctx=Load()))]), Assign(targets=[Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='modules', ctx=Load()), slice=Name(id='fullname', ctx=Load()), ctx=Store())], value=Name(id='mod', ctx=Load())), Return(value=Name(id='mod', ctx=Load()))], decorator_list=[]), FunctionDef(name='is_package', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='fullname')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return true, if the named module is a package.\n\n        We need this method to get correct spec objects with\n        Python 3.4 (see PEP451)\n        ')), Return(value=Call(func=Name(id='hasattr', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='__get_module', ctx=Load()), args=[Name(id='fullname', ctx=Load())], keywords=[]), Constant(value='__path__')], keywords=[]))], decorator_list=[]), FunctionDef(name='get_code', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='fullname')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return None\n\n        Required, if is_package is implemented')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='__get_module', ctx=Load()), args=[Name(id='fullname', ctx=Load())], keywords=[])), Return(value=Constant(value=None))], decorator_list=[]), Assign(targets=[Name(id='get_source', ctx=Store())], value=Name(id='get_code', ctx=Load())), FunctionDef(name='create_module', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='spec')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='load_module', ctx=Load()), args=[Attribute(value=Name(id='spec', ctx=Load()), attr='name', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='exec_module', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='module')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[])], decorator_list=[]), Assign(targets=[Name(id='_importer', ctx=Store())], value=Call(func=Name(id='_SixMetaPathImporter', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), ClassDef(name='_MovedItems', bases=[Name(id='_LazyModule', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Lazy loading of moved objects')), Assign(targets=[Name(id='__path__', ctx=Store())], value=List(elts=[], ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='_moved_attributes', ctx=Store())], value=List(elts=[Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='cStringIO'), Constant(value='cStringIO'), Constant(value='io'), Constant(value='StringIO')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='filter'), Constant(value='itertools'), Constant(value='builtins'), Constant(value='ifilter'), Constant(value='filter')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='filterfalse'), Constant(value='itertools'), Constant(value='itertools'), Constant(value='ifilterfalse'), Constant(value='filterfalse')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='input'), Constant(value='__builtin__'), Constant(value='builtins'), Constant(value='raw_input'), Constant(value='input')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='intern'), Constant(value='__builtin__'), Constant(value='sys')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='map'), Constant(value='itertools'), Constant(value='builtins'), Constant(value='imap'), Constant(value='map')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='getcwd'), Constant(value='os'), Constant(value='os'), Constant(value='getcwdu'), Constant(value='getcwd')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='getcwdb'), Constant(value='os'), Constant(value='os'), Constant(value='getcwd'), Constant(value='getcwdb')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='getoutput'), Constant(value='commands'), Constant(value='subprocess')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='range'), Constant(value='__builtin__'), Constant(value='builtins'), Constant(value='xrange'), Constant(value='range')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='reload_module'), Constant(value='__builtin__'), IfExp(test=Name(id='PY34', ctx=Load()), body=Constant(value='importlib'), orelse=Constant(value='imp')), Constant(value='reload')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='reduce'), Constant(value='__builtin__'), Constant(value='functools')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='shlex_quote'), Constant(value='pipes'), Constant(value='shlex'), Constant(value='quote')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='StringIO'), Constant(value='StringIO'), Constant(value='io')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='UserDict'), Constant(value='UserDict'), Constant(value='collections')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='UserList'), Constant(value='UserList'), Constant(value='collections')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='UserString'), Constant(value='UserString'), Constant(value='collections')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='xrange'), Constant(value='__builtin__'), Constant(value='builtins'), Constant(value='xrange'), Constant(value='range')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='zip'), Constant(value='itertools'), Constant(value='builtins'), Constant(value='izip'), Constant(value='zip')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='zip_longest'), Constant(value='itertools'), Constant(value='itertools'), Constant(value='izip_longest'), Constant(value='zip_longest')], keywords=[]), Call(func=Name(id='MovedModule', ctx=Load()), args=[Constant(value='builtins'), Constant(value='__builtin__')], keywords=[]), Call(func=Name(id='MovedModule', ctx=Load()), args=[Constant(value='configparser'), Constant(value='ConfigParser')], keywords=[]), Call(func=Name(id='MovedModule', ctx=Load()), args=[Constant(value='collections_abc'), Constant(value='collections'), IfExp(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), ops=[GtE()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=3)], ctx=Load())]), body=Constant(value='collections.abc'), orelse=Constant(value='collections'))], keywords=[]), Call(func=Name(id='MovedModule', ctx=Load()), args=[Constant(value='copyreg'), Constant(value='copy_reg')], keywords=[]), Call(func=Name(id='MovedModule', ctx=Load()), args=[Constant(value='dbm_gnu'), Constant(value='gdbm'), Constant(value='dbm.gnu')], keywords=[]), Call(func=Name(id='MovedModule', ctx=Load()), args=[Constant(value='dbm_ndbm'), Constant(value='dbm'), Constant(value='dbm.ndbm')], keywords=[]), Call(func=Name(id='MovedModule', ctx=Load()), args=[Constant(value='_dummy_thread'), Constant(value='dummy_thread'), IfExp(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), ops=[Lt()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=9)], ctx=Load())]), body=Constant(value='_dummy_thread'), orelse=Constant(value='_thread'))], keywords=[]), Call(func=Name(id='MovedModule', ctx=Load()), args=[Constant(value='http_cookiejar'), Constant(value='cookielib'), Constant(value='http.cookiejar')], keywords=[]), Call(func=Name(id='MovedModule', ctx=Load()), args=[Constant(value='http_cookies'), Constant(value='Cookie'), Constant(value='http.cookies')], keywords=[]), Call(func=Name(id='MovedModule', ctx=Load()), args=[Constant(value='html_entities'), Constant(value='htmlentitydefs'), Constant(value='html.entities')], keywords=[]), Call(func=Name(id='MovedModule', ctx=Load()), args=[Constant(value='html_parser'), Constant(value='HTMLParser'), Constant(value='html.parser')], keywords=[]), Call(func=Name(id='MovedModule', ctx=Load()), args=[Constant(value='http_client'), Constant(value='httplib'), Constant(value='http.client')], keywords=[]), Call(func=Name(id='MovedModule', ctx=Load()), args=[Constant(value='email_mime_base'), Constant(value='email.MIMEBase'), Constant(value='email.mime.base')], keywords=[]), Call(func=Name(id='MovedModule', ctx=Load()), args=[Constant(value='email_mime_image'), Constant(value='email.MIMEImage'), Constant(value='email.mime.image')], keywords=[]), Call(func=Name(id='MovedModule', ctx=Load()), args=[Constant(value='email_mime_multipart'), Constant(value='email.MIMEMultipart'), Constant(value='email.mime.multipart')], keywords=[]), Call(func=Name(id='MovedModule', ctx=Load()), args=[Constant(value='email_mime_nonmultipart'), Constant(value='email.MIMENonMultipart'), Constant(value='email.mime.nonmultipart')], keywords=[]), Call(func=Name(id='MovedModule', ctx=Load()), args=[Constant(value='email_mime_text'), Constant(value='email.MIMEText'), Constant(value='email.mime.text')], keywords=[]), Call(func=Name(id='MovedModule', ctx=Load()), args=[Constant(value='BaseHTTPServer'), Constant(value='BaseHTTPServer'), Constant(value='http.server')], keywords=[]), Call(func=Name(id='MovedModule', ctx=Load()), args=[Constant(value='CGIHTTPServer'), Constant(value='CGIHTTPServer'), Constant(value='http.server')], keywords=[]), Call(func=Name(id='MovedModule', ctx=Load()), args=[Constant(value='SimpleHTTPServer'), Constant(value='SimpleHTTPServer'), Constant(value='http.server')], keywords=[]), Call(func=Name(id='MovedModule', ctx=Load()), args=[Constant(value='cPickle'), Constant(value='cPickle'), Constant(value='pickle')], keywords=[]), Call(func=Name(id='MovedModule', ctx=Load()), args=[Constant(value='queue'), Constant(value='Queue')], keywords=[]), Call(func=Name(id='MovedModule', ctx=Load()), args=[Constant(value='reprlib'), Constant(value='repr')], keywords=[]), Call(func=Name(id='MovedModule', ctx=Load()), args=[Constant(value='socketserver'), Constant(value='SocketServer')], keywords=[]), Call(func=Name(id='MovedModule', ctx=Load()), args=[Constant(value='_thread'), Constant(value='thread'), Constant(value='_thread')], keywords=[]), Call(func=Name(id='MovedModule', ctx=Load()), args=[Constant(value='tkinter'), Constant(value='Tkinter')], keywords=[]), Call(func=Name(id='MovedModule', ctx=Load()), args=[Constant(value='tkinter_dialog'), Constant(value='Dialog'), Constant(value='tkinter.dialog')], keywords=[]), Call(func=Name(id='MovedModule', ctx=Load()), args=[Constant(value='tkinter_filedialog'), Constant(value='FileDialog'), Constant(value='tkinter.filedialog')], keywords=[]), Call(func=Name(id='MovedModule', ctx=Load()), args=[Constant(value='tkinter_scrolledtext'), Constant(value='ScrolledText'), Constant(value='tkinter.scrolledtext')], keywords=[]), Call(func=Name(id='MovedModule', ctx=Load()), args=[Constant(value='tkinter_simpledialog'), Constant(value='SimpleDialog'), Constant(value='tkinter.simpledialog')], keywords=[]), Call(func=Name(id='MovedModule', ctx=Load()), args=[Constant(value='tkinter_tix'), Constant(value='Tix'), Constant(value='tkinter.tix')], keywords=[]), Call(func=Name(id='MovedModule', ctx=Load()), args=[Constant(value='tkinter_ttk'), Constant(value='ttk'), Constant(value='tkinter.ttk')], keywords=[]), Call(func=Name(id='MovedModule', ctx=Load()), args=[Constant(value='tkinter_constants'), Constant(value='Tkconstants'), Constant(value='tkinter.constants')], keywords=[]), Call(func=Name(id='MovedModule', ctx=Load()), args=[Constant(value='tkinter_dnd'), Constant(value='Tkdnd'), Constant(value='tkinter.dnd')], keywords=[]), Call(func=Name(id='MovedModule', ctx=Load()), args=[Constant(value='tkinter_colorchooser'), Constant(value='tkColorChooser'), Constant(value='tkinter.colorchooser')], keywords=[]), Call(func=Name(id='MovedModule', ctx=Load()), args=[Constant(value='tkinter_commondialog'), Constant(value='tkCommonDialog'), Constant(value='tkinter.commondialog')], keywords=[]), Call(func=Name(id='MovedModule', ctx=Load()), args=[Constant(value='tkinter_tkfiledialog'), Constant(value='tkFileDialog'), Constant(value='tkinter.filedialog')], keywords=[]), Call(func=Name(id='MovedModule', ctx=Load()), args=[Constant(value='tkinter_font'), Constant(value='tkFont'), Constant(value='tkinter.font')], keywords=[]), Call(func=Name(id='MovedModule', ctx=Load()), args=[Constant(value='tkinter_messagebox'), Constant(value='tkMessageBox'), Constant(value='tkinter.messagebox')], keywords=[]), Call(func=Name(id='MovedModule', ctx=Load()), args=[Constant(value='tkinter_tksimpledialog'), Constant(value='tkSimpleDialog'), Constant(value='tkinter.simpledialog')], keywords=[]), Call(func=Name(id='MovedModule', ctx=Load()), args=[Constant(value='urllib_parse'), BinOp(left=Name(id='__name__', ctx=Load()), op=Add(), right=Constant(value='.moves.urllib_parse')), Constant(value='urllib.parse')], keywords=[]), Call(func=Name(id='MovedModule', ctx=Load()), args=[Constant(value='urllib_error'), BinOp(left=Name(id='__name__', ctx=Load()), op=Add(), right=Constant(value='.moves.urllib_error')), Constant(value='urllib.error')], keywords=[]), Call(func=Name(id='MovedModule', ctx=Load()), args=[Constant(value='urllib'), BinOp(left=Name(id='__name__', ctx=Load()), op=Add(), right=Constant(value='.moves.urllib')), BinOp(left=Name(id='__name__', ctx=Load()), op=Add(), right=Constant(value='.moves.urllib'))], keywords=[]), Call(func=Name(id='MovedModule', ctx=Load()), args=[Constant(value='urllib_robotparser'), Constant(value='robotparser'), Constant(value='urllib.robotparser')], keywords=[]), Call(func=Name(id='MovedModule', ctx=Load()), args=[Constant(value='xmlrpc_client'), Constant(value='xmlrpclib'), Constant(value='xmlrpc.client')], keywords=[]), Call(func=Name(id='MovedModule', ctx=Load()), args=[Constant(value='xmlrpc_server'), Constant(value='SimpleXMLRPCServer'), Constant(value='xmlrpc.server')], keywords=[])], ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), ops=[Eq()], comparators=[Constant(value='win32')]), body=[AugAssign(target=Name(id='_moved_attributes', ctx=Store()), op=Add(), value=List(elts=[Call(func=Name(id='MovedModule', ctx=Load()), args=[Constant(value='winreg'), Constant(value='_winreg')], keywords=[])], ctx=Load()))], orelse=[]), For(target=Name(id='attr', ctx=Store()), iter=Name(id='_moved_attributes', ctx=Load()), body=[Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='_MovedItems', ctx=Load()), Attribute(value=Name(id='attr', ctx=Load()), attr='name', ctx=Load()), Name(id='attr', ctx=Load())], keywords=[])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='attr', ctx=Load()), Name(id='MovedModule', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='_importer', ctx=Load()), attr='_add_module', ctx=Load()), args=[Name(id='attr', ctx=Load()), BinOp(left=Constant(value='moves.'), op=Add(), right=Attribute(value=Name(id='attr', ctx=Load()), attr='name', ctx=Load()))], keywords=[]))], orelse=[])], orelse=[]), Delete(targets=[Name(id='attr', ctx=Del())]), Assign(targets=[Attribute(value=Name(id='_MovedItems', ctx=Load()), attr='_moved_attributes', ctx=Store())], value=Name(id='_moved_attributes', ctx=Load())), Assign(targets=[Name(id='moves', ctx=Store())], value=Call(func=Name(id='_MovedItems', ctx=Load()), args=[BinOp(left=Name(id='__name__', ctx=Load()), op=Add(), right=Constant(value='.moves'))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='_importer', ctx=Load()), attr='_add_module', ctx=Load()), args=[Name(id='moves', ctx=Load()), Constant(value='moves')], keywords=[])), ClassDef(name='Module_six_moves_urllib_parse', bases=[Name(id='_LazyModule', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Lazy loading of moved objects in six.moves.urllib_parse'))], decorator_list=[]), Assign(targets=[Name(id='_urllib_parse_moved_attributes', ctx=Store())], value=List(elts=[Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='ParseResult'), Constant(value='urlparse'), Constant(value='urllib.parse')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='SplitResult'), Constant(value='urlparse'), Constant(value='urllib.parse')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='parse_qs'), Constant(value='urlparse'), Constant(value='urllib.parse')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='parse_qsl'), Constant(value='urlparse'), Constant(value='urllib.parse')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='urldefrag'), Constant(value='urlparse'), Constant(value='urllib.parse')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='urljoin'), Constant(value='urlparse'), Constant(value='urllib.parse')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='urlparse'), Constant(value='urlparse'), Constant(value='urllib.parse')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='urlsplit'), Constant(value='urlparse'), Constant(value='urllib.parse')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='urlunparse'), Constant(value='urlparse'), Constant(value='urllib.parse')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='urlunsplit'), Constant(value='urlparse'), Constant(value='urllib.parse')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='quote'), Constant(value='urllib'), Constant(value='urllib.parse')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='quote_plus'), Constant(value='urllib'), Constant(value='urllib.parse')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='unquote'), Constant(value='urllib'), Constant(value='urllib.parse')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='unquote_plus'), Constant(value='urllib'), Constant(value='urllib.parse')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='unquote_to_bytes'), Constant(value='urllib'), Constant(value='urllib.parse'), Constant(value='unquote'), Constant(value='unquote_to_bytes')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='urlencode'), Constant(value='urllib'), Constant(value='urllib.parse')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='splitquery'), Constant(value='urllib'), Constant(value='urllib.parse')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='splittag'), Constant(value='urllib'), Constant(value='urllib.parse')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='splituser'), Constant(value='urllib'), Constant(value='urllib.parse')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='splitvalue'), Constant(value='urllib'), Constant(value='urllib.parse')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='uses_fragment'), Constant(value='urlparse'), Constant(value='urllib.parse')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='uses_netloc'), Constant(value='urlparse'), Constant(value='urllib.parse')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='uses_params'), Constant(value='urlparse'), Constant(value='urllib.parse')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='uses_query'), Constant(value='urlparse'), Constant(value='urllib.parse')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='uses_relative'), Constant(value='urlparse'), Constant(value='urllib.parse')], keywords=[])], ctx=Load())), For(target=Name(id='attr', ctx=Store()), iter=Name(id='_urllib_parse_moved_attributes', ctx=Load()), body=[Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='Module_six_moves_urllib_parse', ctx=Load()), Attribute(value=Name(id='attr', ctx=Load()), attr='name', ctx=Load()), Name(id='attr', ctx=Load())], keywords=[]))], orelse=[]), Delete(targets=[Name(id='attr', ctx=Del())]), Assign(targets=[Attribute(value=Name(id='Module_six_moves_urllib_parse', ctx=Load()), attr='_moved_attributes', ctx=Store())], value=Name(id='_urllib_parse_moved_attributes', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='_importer', ctx=Load()), attr='_add_module', ctx=Load()), args=[Call(func=Name(id='Module_six_moves_urllib_parse', ctx=Load()), args=[BinOp(left=Name(id='__name__', ctx=Load()), op=Add(), right=Constant(value='.moves.urllib_parse'))], keywords=[]), Constant(value='moves.urllib_parse'), Constant(value='moves.urllib.parse')], keywords=[])), ClassDef(name='Module_six_moves_urllib_error', bases=[Name(id='_LazyModule', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Lazy loading of moved objects in six.moves.urllib_error'))], decorator_list=[]), Assign(targets=[Name(id='_urllib_error_moved_attributes', ctx=Store())], value=List(elts=[Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='URLError'), Constant(value='urllib2'), Constant(value='urllib.error')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='HTTPError'), Constant(value='urllib2'), Constant(value='urllib.error')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='ContentTooShortError'), Constant(value='urllib'), Constant(value='urllib.error')], keywords=[])], ctx=Load())), For(target=Name(id='attr', ctx=Store()), iter=Name(id='_urllib_error_moved_attributes', ctx=Load()), body=[Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='Module_six_moves_urllib_error', ctx=Load()), Attribute(value=Name(id='attr', ctx=Load()), attr='name', ctx=Load()), Name(id='attr', ctx=Load())], keywords=[]))], orelse=[]), Delete(targets=[Name(id='attr', ctx=Del())]), Assign(targets=[Attribute(value=Name(id='Module_six_moves_urllib_error', ctx=Load()), attr='_moved_attributes', ctx=Store())], value=Name(id='_urllib_error_moved_attributes', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='_importer', ctx=Load()), attr='_add_module', ctx=Load()), args=[Call(func=Name(id='Module_six_moves_urllib_error', ctx=Load()), args=[BinOp(left=Name(id='__name__', ctx=Load()), op=Add(), right=Constant(value='.moves.urllib.error'))], keywords=[]), Constant(value='moves.urllib_error'), Constant(value='moves.urllib.error')], keywords=[])), ClassDef(name='Module_six_moves_urllib_request', bases=[Name(id='_LazyModule', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Lazy loading of moved objects in six.moves.urllib_request'))], decorator_list=[]), Assign(targets=[Name(id='_urllib_request_moved_attributes', ctx=Store())], value=List(elts=[Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='urlopen'), Constant(value='urllib2'), Constant(value='urllib.request')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='install_opener'), Constant(value='urllib2'), Constant(value='urllib.request')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='build_opener'), Constant(value='urllib2'), Constant(value='urllib.request')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='pathname2url'), Constant(value='urllib'), Constant(value='urllib.request')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='url2pathname'), Constant(value='urllib'), Constant(value='urllib.request')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='getproxies'), Constant(value='urllib'), Constant(value='urllib.request')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='Request'), Constant(value='urllib2'), Constant(value='urllib.request')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='OpenerDirector'), Constant(value='urllib2'), Constant(value='urllib.request')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='HTTPDefaultErrorHandler'), Constant(value='urllib2'), Constant(value='urllib.request')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='HTTPRedirectHandler'), Constant(value='urllib2'), Constant(value='urllib.request')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='HTTPCookieProcessor'), Constant(value='urllib2'), Constant(value='urllib.request')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='ProxyHandler'), Constant(value='urllib2'), Constant(value='urllib.request')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='BaseHandler'), Constant(value='urllib2'), Constant(value='urllib.request')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='HTTPPasswordMgr'), Constant(value='urllib2'), Constant(value='urllib.request')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='HTTPPasswordMgrWithDefaultRealm'), Constant(value='urllib2'), Constant(value='urllib.request')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='AbstractBasicAuthHandler'), Constant(value='urllib2'), Constant(value='urllib.request')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='HTTPBasicAuthHandler'), Constant(value='urllib2'), Constant(value='urllib.request')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='ProxyBasicAuthHandler'), Constant(value='urllib2'), Constant(value='urllib.request')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='AbstractDigestAuthHandler'), Constant(value='urllib2'), Constant(value='urllib.request')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='HTTPDigestAuthHandler'), Constant(value='urllib2'), Constant(value='urllib.request')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='ProxyDigestAuthHandler'), Constant(value='urllib2'), Constant(value='urllib.request')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='HTTPHandler'), Constant(value='urllib2'), Constant(value='urllib.request')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='HTTPSHandler'), Constant(value='urllib2'), Constant(value='urllib.request')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='FileHandler'), Constant(value='urllib2'), Constant(value='urllib.request')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='FTPHandler'), Constant(value='urllib2'), Constant(value='urllib.request')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='CacheFTPHandler'), Constant(value='urllib2'), Constant(value='urllib.request')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='UnknownHandler'), Constant(value='urllib2'), Constant(value='urllib.request')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='HTTPErrorProcessor'), Constant(value='urllib2'), Constant(value='urllib.request')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='urlretrieve'), Constant(value='urllib'), Constant(value='urllib.request')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='urlcleanup'), Constant(value='urllib'), Constant(value='urllib.request')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='URLopener'), Constant(value='urllib'), Constant(value='urllib.request')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='FancyURLopener'), Constant(value='urllib'), Constant(value='urllib.request')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='proxy_bypass'), Constant(value='urllib'), Constant(value='urllib.request')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='parse_http_list'), Constant(value='urllib2'), Constant(value='urllib.request')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='parse_keqv_list'), Constant(value='urllib2'), Constant(value='urllib.request')], keywords=[])], ctx=Load())), For(target=Name(id='attr', ctx=Store()), iter=Name(id='_urllib_request_moved_attributes', ctx=Load()), body=[Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='Module_six_moves_urllib_request', ctx=Load()), Attribute(value=Name(id='attr', ctx=Load()), attr='name', ctx=Load()), Name(id='attr', ctx=Load())], keywords=[]))], orelse=[]), Delete(targets=[Name(id='attr', ctx=Del())]), Assign(targets=[Attribute(value=Name(id='Module_six_moves_urllib_request', ctx=Load()), attr='_moved_attributes', ctx=Store())], value=Name(id='_urllib_request_moved_attributes', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='_importer', ctx=Load()), attr='_add_module', ctx=Load()), args=[Call(func=Name(id='Module_six_moves_urllib_request', ctx=Load()), args=[BinOp(left=Name(id='__name__', ctx=Load()), op=Add(), right=Constant(value='.moves.urllib.request'))], keywords=[]), Constant(value='moves.urllib_request'), Constant(value='moves.urllib.request')], keywords=[])), ClassDef(name='Module_six_moves_urllib_response', bases=[Name(id='_LazyModule', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Lazy loading of moved objects in six.moves.urllib_response'))], decorator_list=[]), Assign(targets=[Name(id='_urllib_response_moved_attributes', ctx=Store())], value=List(elts=[Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='addbase'), Constant(value='urllib'), Constant(value='urllib.response')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='addclosehook'), Constant(value='urllib'), Constant(value='urllib.response')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='addinfo'), Constant(value='urllib'), Constant(value='urllib.response')], keywords=[]), Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='addinfourl'), Constant(value='urllib'), Constant(value='urllib.response')], keywords=[])], ctx=Load())), For(target=Name(id='attr', ctx=Store()), iter=Name(id='_urllib_response_moved_attributes', ctx=Load()), body=[Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='Module_six_moves_urllib_response', ctx=Load()), Attribute(value=Name(id='attr', ctx=Load()), attr='name', ctx=Load()), Name(id='attr', ctx=Load())], keywords=[]))], orelse=[]), Delete(targets=[Name(id='attr', ctx=Del())]), Assign(targets=[Attribute(value=Name(id='Module_six_moves_urllib_response', ctx=Load()), attr='_moved_attributes', ctx=Store())], value=Name(id='_urllib_response_moved_attributes', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='_importer', ctx=Load()), attr='_add_module', ctx=Load()), args=[Call(func=Name(id='Module_six_moves_urllib_response', ctx=Load()), args=[BinOp(left=Name(id='__name__', ctx=Load()), op=Add(), right=Constant(value='.moves.urllib.response'))], keywords=[]), Constant(value='moves.urllib_response'), Constant(value='moves.urllib.response')], keywords=[])), ClassDef(name='Module_six_moves_urllib_robotparser', bases=[Name(id='_LazyModule', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Lazy loading of moved objects in six.moves.urllib_robotparser'))], decorator_list=[]), Assign(targets=[Name(id='_urllib_robotparser_moved_attributes', ctx=Store())], value=List(elts=[Call(func=Name(id='MovedAttribute', ctx=Load()), args=[Constant(value='RobotFileParser'), Constant(value='robotparser'), Constant(value='urllib.robotparser')], keywords=[])], ctx=Load())), For(target=Name(id='attr', ctx=Store()), iter=Name(id='_urllib_robotparser_moved_attributes', ctx=Load()), body=[Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='Module_six_moves_urllib_robotparser', ctx=Load()), Attribute(value=Name(id='attr', ctx=Load()), attr='name', ctx=Load()), Name(id='attr', ctx=Load())], keywords=[]))], orelse=[]), Delete(targets=[Name(id='attr', ctx=Del())]), Assign(targets=[Attribute(value=Name(id='Module_six_moves_urllib_robotparser', ctx=Load()), attr='_moved_attributes', ctx=Store())], value=Name(id='_urllib_robotparser_moved_attributes', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='_importer', ctx=Load()), attr='_add_module', ctx=Load()), args=[Call(func=Name(id='Module_six_moves_urllib_robotparser', ctx=Load()), args=[BinOp(left=Name(id='__name__', ctx=Load()), op=Add(), right=Constant(value='.moves.urllib.robotparser'))], keywords=[]), Constant(value='moves.urllib_robotparser'), Constant(value='moves.urllib.robotparser')], keywords=[])), ClassDef(name='Module_six_moves_urllib', bases=[Attribute(value=Name(id='types', ctx=Load()), attr='ModuleType', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Create a six.moves.urllib namespace that resembles the Python 3 namespace')), Assign(targets=[Name(id='__path__', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='parse', ctx=Store())], value=Call(func=Attribute(value=Name(id='_importer', ctx=Load()), attr='_get_module', ctx=Load()), args=[Constant(value='moves.urllib_parse')], keywords=[])), Assign(targets=[Name(id='error', ctx=Store())], value=Call(func=Attribute(value=Name(id='_importer', ctx=Load()), attr='_get_module', ctx=Load()), args=[Constant(value='moves.urllib_error')], keywords=[])), Assign(targets=[Name(id='request', ctx=Store())], value=Call(func=Attribute(value=Name(id='_importer', ctx=Load()), attr='_get_module', ctx=Load()), args=[Constant(value='moves.urllib_request')], keywords=[])), Assign(targets=[Name(id='response', ctx=Store())], value=Call(func=Attribute(value=Name(id='_importer', ctx=Load()), attr='_get_module', ctx=Load()), args=[Constant(value='moves.urllib_response')], keywords=[])), Assign(targets=[Name(id='robotparser', ctx=Store())], value=Call(func=Attribute(value=Name(id='_importer', ctx=Load()), attr='_get_module', ctx=Load()), args=[Constant(value='moves.urllib_robotparser')], keywords=[])), FunctionDef(name='__dir__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=List(elts=[Constant(value='parse'), Constant(value='error'), Constant(value='request'), Constant(value='response'), Constant(value='robotparser')], ctx=Load()))], decorator_list=[])], decorator_list=[]), Expr(value=Call(func=Attribute(value=Name(id='_importer', ctx=Load()), attr='_add_module', ctx=Load()), args=[Call(func=Name(id='Module_six_moves_urllib', ctx=Load()), args=[BinOp(left=Name(id='__name__', ctx=Load()), op=Add(), right=Constant(value='.moves.urllib'))], keywords=[]), Constant(value='moves.urllib')], keywords=[])), FunctionDef(name='add_move', args=arguments(posonlyargs=[], args=[arg(arg='move')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Add an item to six.moves.')), Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='_MovedItems', ctx=Load()), Attribute(value=Name(id='move', ctx=Load()), attr='name', ctx=Load()), Name(id='move', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='remove_move', args=arguments(posonlyargs=[], args=[arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Remove item from six.moves.')), Try(body=[Expr(value=Call(func=Name(id='delattr', ctx=Load()), args=[Name(id='_MovedItems', ctx=Load()), Name(id='name', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Try(body=[Delete(targets=[Subscript(value=Attribute(value=Name(id='moves', ctx=Load()), attr='__dict__', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Del())])], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='AttributeError', ctx=Load()), args=[BinOp(left=Constant(value='no such move, %r'), op=Mod(), right=Tuple(elts=[Name(id='name', ctx=Load())], ctx=Load()))], keywords=[]))])], orelse=[], finalbody=[])])], orelse=[], finalbody=[])], decorator_list=[]), If(test=Name(id='PY3', ctx=Load()), body=[Assign(targets=[Name(id='_meth_func', ctx=Store())], value=Constant(value='__func__')), Assign(targets=[Name(id='_meth_self', ctx=Store())], value=Constant(value='__self__')), Assign(targets=[Name(id='_func_closure', ctx=Store())], value=Constant(value='__closure__')), Assign(targets=[Name(id='_func_code', ctx=Store())], value=Constant(value='__code__')), Assign(targets=[Name(id='_func_defaults', ctx=Store())], value=Constant(value='__defaults__')), Assign(targets=[Name(id='_func_globals', ctx=Store())], value=Constant(value='__globals__'))], orelse=[Assign(targets=[Name(id='_meth_func', ctx=Store())], value=Constant(value='im_func')), Assign(targets=[Name(id='_meth_self', ctx=Store())], value=Constant(value='im_self')), Assign(targets=[Name(id='_func_closure', ctx=Store())], value=Constant(value='func_closure')), Assign(targets=[Name(id='_func_code', ctx=Store())], value=Constant(value='func_code')), Assign(targets=[Name(id='_func_defaults', ctx=Store())], value=Constant(value='func_defaults')), Assign(targets=[Name(id='_func_globals', ctx=Store())], value=Constant(value='func_globals'))]), Try(body=[Assign(targets=[Name(id='advance_iterator', ctx=Store())], value=Name(id='next', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='NameError', ctx=Load()), body=[FunctionDef(name='advance_iterator', args=arguments(posonlyargs=[], args=[arg(arg='it')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='it', ctx=Load()), attr='next', ctx=Load()), args=[], keywords=[]))], decorator_list=[])])], orelse=[], finalbody=[]), Assign(targets=[Name(id='next', ctx=Store())], value=Name(id='advance_iterator', ctx=Load())), Try(body=[Assign(targets=[Name(id='callable', ctx=Store())], value=Name(id='callable', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='NameError', ctx=Load()), body=[FunctionDef(name='callable', args=arguments(posonlyargs=[], args=[arg(arg='obj')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=Compare(left=Constant(value='__call__'), ops=[In()], comparators=[Attribute(value=Name(id='klass', ctx=Load()), attr='__dict__', ctx=Load())]), generators=[comprehension(target=Name(id='klass', ctx=Store()), iter=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]), attr='__mro__', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[])])], orelse=[], finalbody=[]), If(test=Name(id='PY3', ctx=Load()), body=[FunctionDef(name='get_unbound_function', args=arguments(posonlyargs=[], args=[arg(arg='unbound')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Name(id='unbound', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='create_bound_method', ctx=Store())], value=Attribute(value=Name(id='types', ctx=Load()), attr='MethodType', ctx=Load())), FunctionDef(name='create_unbound_method', args=arguments(posonlyargs=[], args=[arg(arg='func'), arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Name(id='func', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='Iterator', ctx=Store())], value=Name(id='object', ctx=Load()))], orelse=[FunctionDef(name='get_unbound_function', args=arguments(posonlyargs=[], args=[arg(arg='unbound')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='unbound', ctx=Load()), attr='im_func', ctx=Load()))], decorator_list=[]), FunctionDef(name='create_bound_method', args=arguments(posonlyargs=[], args=[arg(arg='func'), arg(arg='obj')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='types', ctx=Load()), attr='MethodType', ctx=Load()), args=[Name(id='func', ctx=Load()), Name(id='obj', ctx=Load()), Attribute(value=Name(id='obj', ctx=Load()), attr='__class__', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='create_unbound_method', args=arguments(posonlyargs=[], args=[arg(arg='func'), arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='types', ctx=Load()), attr='MethodType', ctx=Load()), args=[Name(id='func', ctx=Load()), Constant(value=None), Name(id='cls', ctx=Load())], keywords=[]))], decorator_list=[]), ClassDef(name='Iterator', bases=[Name(id='object', ctx=Load())], keywords=[], body=[FunctionDef(name='next', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__next__', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), Assign(targets=[Name(id='callable', ctx=Store())], value=Name(id='callable', ctx=Load()))]), Expr(value=Call(func=Name(id='_add_doc', ctx=Load()), args=[Name(id='get_unbound_function', ctx=Load()), Constant(value='Get the function out of a possibly unbound function')], keywords=[])), Assign(targets=[Name(id='get_method_function', ctx=Store())], value=Call(func=Attribute(value=Name(id='operator', ctx=Load()), attr='attrgetter', ctx=Load()), args=[Name(id='_meth_func', ctx=Load())], keywords=[])), Assign(targets=[Name(id='get_method_self', ctx=Store())], value=Call(func=Attribute(value=Name(id='operator', ctx=Load()), attr='attrgetter', ctx=Load()), args=[Name(id='_meth_self', ctx=Load())], keywords=[])), Assign(targets=[Name(id='get_function_closure', ctx=Store())], value=Call(func=Attribute(value=Name(id='operator', ctx=Load()), attr='attrgetter', ctx=Load()), args=[Name(id='_func_closure', ctx=Load())], keywords=[])), Assign(targets=[Name(id='get_function_code', ctx=Store())], value=Call(func=Attribute(value=Name(id='operator', ctx=Load()), attr='attrgetter', ctx=Load()), args=[Name(id='_func_code', ctx=Load())], keywords=[])), Assign(targets=[Name(id='get_function_defaults', ctx=Store())], value=Call(func=Attribute(value=Name(id='operator', ctx=Load()), attr='attrgetter', ctx=Load()), args=[Name(id='_func_defaults', ctx=Load())], keywords=[])), Assign(targets=[Name(id='get_function_globals', ctx=Store())], value=Call(func=Attribute(value=Name(id='operator', ctx=Load()), attr='attrgetter', ctx=Load()), args=[Name(id='_func_globals', ctx=Load())], keywords=[])), If(test=Name(id='PY3', ctx=Load()), body=[FunctionDef(name='iterkeys', args=arguments(posonlyargs=[], args=[arg(arg='d')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kw'), defaults=[]), body=[Return(value=Call(func=Name(id='iter', ctx=Load()), args=[Call(func=Attribute(value=Name(id='d', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[keyword(value=Name(id='kw', ctx=Load()))])], keywords=[]))], decorator_list=[]), FunctionDef(name='itervalues', args=arguments(posonlyargs=[], args=[arg(arg='d')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kw'), defaults=[]), body=[Return(value=Call(func=Name(id='iter', ctx=Load()), args=[Call(func=Attribute(value=Name(id='d', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[keyword(value=Name(id='kw', ctx=Load()))])], keywords=[]))], decorator_list=[]), FunctionDef(name='iteritems', args=arguments(posonlyargs=[], args=[arg(arg='d')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kw'), defaults=[]), body=[Return(value=Call(func=Name(id='iter', ctx=Load()), args=[Call(func=Attribute(value=Name(id='d', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[keyword(value=Name(id='kw', ctx=Load()))])], keywords=[]))], decorator_list=[]), FunctionDef(name='iterlists', args=arguments(posonlyargs=[], args=[arg(arg='d')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kw'), defaults=[]), body=[Return(value=Call(func=Name(id='iter', ctx=Load()), args=[Call(func=Attribute(value=Name(id='d', ctx=Load()), attr='lists', ctx=Load()), args=[], keywords=[keyword(value=Name(id='kw', ctx=Load()))])], keywords=[]))], decorator_list=[]), Assign(targets=[Name(id='viewkeys', ctx=Store())], value=Call(func=Attribute(value=Name(id='operator', ctx=Load()), attr='methodcaller', ctx=Load()), args=[Constant(value='keys')], keywords=[])), Assign(targets=[Name(id='viewvalues', ctx=Store())], value=Call(func=Attribute(value=Name(id='operator', ctx=Load()), attr='methodcaller', ctx=Load()), args=[Constant(value='values')], keywords=[])), Assign(targets=[Name(id='viewitems', ctx=Store())], value=Call(func=Attribute(value=Name(id='operator', ctx=Load()), attr='methodcaller', ctx=Load()), args=[Constant(value='items')], keywords=[]))], orelse=[FunctionDef(name='iterkeys', args=arguments(posonlyargs=[], args=[arg(arg='d')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kw'), defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='d', ctx=Load()), attr='iterkeys', ctx=Load()), args=[], keywords=[keyword(value=Name(id='kw', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='itervalues', args=arguments(posonlyargs=[], args=[arg(arg='d')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kw'), defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='d', ctx=Load()), attr='itervalues', ctx=Load()), args=[], keywords=[keyword(value=Name(id='kw', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='iteritems', args=arguments(posonlyargs=[], args=[arg(arg='d')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kw'), defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='d', ctx=Load()), attr='iteritems', ctx=Load()), args=[], keywords=[keyword(value=Name(id='kw', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='iterlists', args=arguments(posonlyargs=[], args=[arg(arg='d')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kw'), defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='d', ctx=Load()), attr='iterlists', ctx=Load()), args=[], keywords=[keyword(value=Name(id='kw', ctx=Load()))]))], decorator_list=[]), Assign(targets=[Name(id='viewkeys', ctx=Store())], value=Call(func=Attribute(value=Name(id='operator', ctx=Load()), attr='methodcaller', ctx=Load()), args=[Constant(value='viewkeys')], keywords=[])), Assign(targets=[Name(id='viewvalues', ctx=Store())], value=Call(func=Attribute(value=Name(id='operator', ctx=Load()), attr='methodcaller', ctx=Load()), args=[Constant(value='viewvalues')], keywords=[])), Assign(targets=[Name(id='viewitems', ctx=Store())], value=Call(func=Attribute(value=Name(id='operator', ctx=Load()), attr='methodcaller', ctx=Load()), args=[Constant(value='viewitems')], keywords=[]))]), Expr(value=Call(func=Name(id='_add_doc', ctx=Load()), args=[Name(id='iterkeys', ctx=Load()), Constant(value='Return an iterator over the keys of a dictionary.')], keywords=[])), Expr(value=Call(func=Name(id='_add_doc', ctx=Load()), args=[Name(id='itervalues', ctx=Load()), Constant(value='Return an iterator over the values of a dictionary.')], keywords=[])), Expr(value=Call(func=Name(id='_add_doc', ctx=Load()), args=[Name(id='iteritems', ctx=Load()), Constant(value='Return an iterator over the (key, value) pairs of a dictionary.')], keywords=[])), Expr(value=Call(func=Name(id='_add_doc', ctx=Load()), args=[Name(id='iterlists', ctx=Load()), Constant(value='Return an iterator over the (key, [values]) pairs of a dictionary.')], keywords=[])), If(test=Name(id='PY3', ctx=Load()), body=[FunctionDef(name='b', args=arguments(posonlyargs=[], args=[arg(arg='s')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='latin-1')], keywords=[]))], decorator_list=[]), FunctionDef(name='u', args=arguments(posonlyargs=[], args=[arg(arg='s')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Name(id='s', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='unichr', ctx=Store())], value=Name(id='chr', ctx=Load())), Import(names=[alias(name='struct')]), Assign(targets=[Name(id='int2byte', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Name(id='struct', ctx=Load()), attr='Struct', ctx=Load()), args=[Constant(value='>B')], keywords=[]), attr='pack', ctx=Load())), Delete(targets=[Name(id='struct', ctx=Del())]), Assign(targets=[Name(id='byte2int', ctx=Store())], value=Call(func=Attribute(value=Name(id='operator', ctx=Load()), attr='itemgetter', ctx=Load()), args=[Constant(value=0)], keywords=[])), Assign(targets=[Name(id='indexbytes', ctx=Store())], value=Attribute(value=Name(id='operator', ctx=Load()), attr='getitem', ctx=Load())), Assign(targets=[Name(id='iterbytes', ctx=Store())], value=Name(id='iter', ctx=Load())), Import(names=[alias(name='io')]), Assign(targets=[Name(id='StringIO', ctx=Store())], value=Attribute(value=Name(id='io', ctx=Load()), attr='StringIO', ctx=Load())), Assign(targets=[Name(id='BytesIO', ctx=Store())], value=Attribute(value=Name(id='io', ctx=Load()), attr='BytesIO', ctx=Load())), Delete(targets=[Name(id='io', ctx=Del())]), Assign(targets=[Name(id='_assertCountEqual', ctx=Store())], value=Constant(value='assertCountEqual')), If(test=Compare(left=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), slice=Constant(value=1), ctx=Load()), ops=[LtE()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='_assertRaisesRegex', ctx=Store())], value=Constant(value='assertRaisesRegexp')), Assign(targets=[Name(id='_assertRegex', ctx=Store())], value=Constant(value='assertRegexpMatches')), Assign(targets=[Name(id='_assertNotRegex', ctx=Store())], value=Constant(value='assertNotRegexpMatches'))], orelse=[Assign(targets=[Name(id='_assertRaisesRegex', ctx=Store())], value=Constant(value='assertRaisesRegex')), Assign(targets=[Name(id='_assertRegex', ctx=Store())], value=Constant(value='assertRegex')), Assign(targets=[Name(id='_assertNotRegex', ctx=Store())], value=Constant(value='assertNotRegex'))])], orelse=[FunctionDef(name='b', args=arguments(posonlyargs=[], args=[arg(arg='s')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Name(id='s', ctx=Load()))], decorator_list=[]), FunctionDef(name='u', args=arguments(posonlyargs=[], args=[arg(arg='s')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='unicode', ctx=Load()), args=[Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='\\\\'), Constant(value='\\\\\\\\')], keywords=[]), Constant(value='unicode_escape')], keywords=[]))], decorator_list=[]), Assign(targets=[Name(id='unichr', ctx=Store())], value=Name(id='unichr', ctx=Load())), Assign(targets=[Name(id='int2byte', ctx=Store())], value=Name(id='chr', ctx=Load())), FunctionDef(name='byte2int', args=arguments(posonlyargs=[], args=[arg(arg='bs')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='ord', ctx=Load()), args=[Subscript(value=Name(id='bs', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='indexbytes', args=arguments(posonlyargs=[], args=[arg(arg='buf'), arg(arg='i')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='ord', ctx=Load()), args=[Subscript(value=Name(id='buf', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())], keywords=[]))], decorator_list=[]), Assign(targets=[Name(id='iterbytes', ctx=Store())], value=Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='partial', ctx=Load()), args=[Attribute(value=Name(id='itertools', ctx=Load()), attr='imap', ctx=Load()), Name(id='ord', ctx=Load())], keywords=[])), Import(names=[alias(name='StringIO')]), Assign(targets=[Name(id='StringIO', ctx=Store()), Name(id='BytesIO', ctx=Store())], value=Attribute(value=Name(id='StringIO', ctx=Load()), attr='StringIO', ctx=Load())), Assign(targets=[Name(id='_assertCountEqual', ctx=Store())], value=Constant(value='assertItemsEqual')), Assign(targets=[Name(id='_assertRaisesRegex', ctx=Store())], value=Constant(value='assertRaisesRegexp')), Assign(targets=[Name(id='_assertRegex', ctx=Store())], value=Constant(value='assertRegexpMatches')), Assign(targets=[Name(id='_assertNotRegex', ctx=Store())], value=Constant(value='assertNotRegexpMatches'))]), Expr(value=Call(func=Name(id='_add_doc', ctx=Load()), args=[Name(id='b', ctx=Load()), Constant(value='Byte literal')], keywords=[])), Expr(value=Call(func=Name(id='_add_doc', ctx=Load()), args=[Name(id='u', ctx=Load()), Constant(value='Text literal')], keywords=[])), FunctionDef(name='assertCountEqual', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Return(value=Call(func=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='_assertCountEqual', ctx=Load())], keywords=[]), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='assertRaisesRegex', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Return(value=Call(func=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='_assertRaisesRegex', ctx=Load())], keywords=[]), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='assertRegex', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Return(value=Call(func=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='_assertRegex', ctx=Load())], keywords=[]), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='assertNotRegex', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Return(value=Call(func=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='_assertNotRegex', ctx=Load())], keywords=[]), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[]), If(test=Name(id='PY3', ctx=Load()), body=[Assign(targets=[Name(id='exec_', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Attribute(value=Name(id='moves', ctx=Load()), attr='builtins', ctx=Load()), Constant(value='exec')], keywords=[])), FunctionDef(name='reraise', args=arguments(posonlyargs=[], args=[arg(arg='tp'), arg(arg='value'), arg(arg='tb')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Try(body=[If(test=Compare(left=Name(id='value', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Name(id='tp', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='value', ctx=Load()), attr='__traceback__', ctx=Load()), ops=[IsNot()], comparators=[Name(id='tb', ctx=Load())]), body=[Raise(exc=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='with_traceback', ctx=Load()), args=[Name(id='tb', ctx=Load())], keywords=[]))], orelse=[]), Raise(exc=Name(id='value', ctx=Load()))], handlers=[], orelse=[], finalbody=[Assign(targets=[Name(id='value', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='tb', ctx=Store())], value=Constant(value=None))])], decorator_list=[])], orelse=[FunctionDef(name='exec_', args=arguments(posonlyargs=[], args=[arg(arg='_code_'), arg(arg='_globs_'), arg(arg='_locs_')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='Execute code in a namespace.')), If(test=Compare(left=Name(id='_globs_', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='frame', ctx=Store())], value=Call(func=Attribute(value=Name(id='sys', ctx=Load()), attr='_getframe', ctx=Load()), args=[Constant(value=1)], keywords=[])), Assign(targets=[Name(id='_globs_', ctx=Store())], value=Attribute(value=Name(id='frame', ctx=Load()), attr='f_globals', ctx=Load())), If(test=Compare(left=Name(id='_locs_', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='_locs_', ctx=Store())], value=Attribute(value=Name(id='frame', ctx=Load()), attr='f_locals', ctx=Load()))], orelse=[]), Delete(targets=[Name(id='frame', ctx=Del())])], orelse=[If(test=Compare(left=Name(id='_locs_', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='_locs_', ctx=Store())], value=Name(id='_globs_', ctx=Load()))], orelse=[])]), Expr(value=Call(func=Name(id='exec', ctx=Load()), args=[Constant(value='exec _code_ in _globs_, _locs_')], keywords=[]))], decorator_list=[]), Expr(value=Call(func=Name(id='exec_', ctx=Load()), args=[Constant(value='def reraise(tp, value, tb=None):\n    try:\n        raise tp, value, tb\n    finally:\n        tb = None\n')], keywords=[]))]), If(test=Compare(left=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), slice=Slice(upper=Constant(value=2)), ctx=Load()), ops=[Gt()], comparators=[Tuple(elts=[Constant(value=3)], ctx=Load())]), body=[Expr(value=Call(func=Name(id='exec_', ctx=Load()), args=[Constant(value='def raise_from(value, from_value):\n    try:\n        raise value from from_value\n    finally:\n        value = None\n')], keywords=[]))], orelse=[FunctionDef(name='raise_from', args=arguments(posonlyargs=[], args=[arg(arg='value'), arg(arg='from_value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Name(id='value', ctx=Load()))], decorator_list=[])]), Assign(targets=[Name(id='print_', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Attribute(value=Name(id='moves', ctx=Load()), attr='builtins', ctx=Load()), Constant(value='print'), Constant(value=None)], keywords=[])), If(test=Compare(left=Name(id='print_', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[FunctionDef(name='print_', args=arguments(posonlyargs=[], args=[], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Constant(value='The new-style print function for Python 2.4 and 2.5.')), Assign(targets=[Name(id='fp', ctx=Store())], value=Call(func=Attribute(value=Name(id='kwargs', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='file'), Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='fp', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return()], orelse=[]), FunctionDef(name='write', args=arguments(posonlyargs=[], args=[arg(arg='data')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='data', ctx=Load()), Name(id='basestring', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='fp', ctx=Load()), Name(id='file', ctx=Load())], keywords=[]), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='data', ctx=Load()), Name(id='unicode', ctx=Load())], keywords=[]), Compare(left=Attribute(value=Name(id='fp', ctx=Load()), attr='encoding', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Name(id='errors', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='fp', ctx=Load()), Constant(value='errors'), Constant(value=None)], keywords=[])), If(test=Compare(left=Name(id='errors', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='errors', ctx=Store())], value=Constant(value='strict'))], orelse=[]), Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='encode', ctx=Load()), args=[Attribute(value=Name(id='fp', ctx=Load()), attr='encoding', ctx=Load()), Name(id='errors', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='fp', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], decorator_list=[]), Assign(targets=[Name(id='want_unicode', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='sep', ctx=Store())], value=Call(func=Attribute(value=Name(id='kwargs', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='sep'), Constant(value=None)], keywords=[])), If(test=Compare(left=Name(id='sep', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='sep', ctx=Load()), Name(id='unicode', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='want_unicode', ctx=Store())], value=Constant(value=True))], orelse=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='sep', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[Constant(value='sep must be None or a string')], keywords=[]))], orelse=[])])], orelse=[]), Assign(targets=[Name(id='end', ctx=Store())], value=Call(func=Attribute(value=Name(id='kwargs', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='end'), Constant(value=None)], keywords=[])), If(test=Compare(left=Name(id='end', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='end', ctx=Load()), Name(id='unicode', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='want_unicode', ctx=Store())], value=Constant(value=True))], orelse=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='end', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[Constant(value='end must be None or a string')], keywords=[]))], orelse=[])])], orelse=[]), If(test=Name(id='kwargs', ctx=Load()), body=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[Constant(value='invalid keyword arguments to print()')], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='want_unicode', ctx=Load())), body=[For(target=Name(id='arg', ctx=Store()), iter=Name(id='args', ctx=Load()), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='arg', ctx=Load()), Name(id='unicode', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='want_unicode', ctx=Store())], value=Constant(value=True)), Break()], orelse=[])], orelse=[])], orelse=[]), If(test=Name(id='want_unicode', ctx=Load()), body=[Assign(targets=[Name(id='newline', ctx=Store())], value=Call(func=Name(id='unicode', ctx=Load()), args=[Constant(value='\n')], keywords=[])), Assign(targets=[Name(id='space', ctx=Store())], value=Call(func=Name(id='unicode', ctx=Load()), args=[Constant(value=' ')], keywords=[]))], orelse=[Assign(targets=[Name(id='newline', ctx=Store())], value=Constant(value='\n')), Assign(targets=[Name(id='space', ctx=Store())], value=Constant(value=' '))]), If(test=Compare(left=Name(id='sep', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='sep', ctx=Store())], value=Name(id='space', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='end', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='end', ctx=Store())], value=Name(id='newline', ctx=Load()))], orelse=[]), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='arg', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[]), body=[If(test=Name(id='i', ctx=Load()), body=[Expr(value=Call(func=Name(id='write', ctx=Load()), args=[Name(id='sep', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Name(id='write', ctx=Load()), args=[Name(id='arg', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Name(id='write', ctx=Load()), args=[Name(id='end', ctx=Load())], keywords=[]))], decorator_list=[])], orelse=[]), If(test=Compare(left=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), slice=Slice(upper=Constant(value=2)), ctx=Load()), ops=[Lt()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=3)], ctx=Load())]), body=[Assign(targets=[Name(id='_print', ctx=Store())], value=Name(id='print_', ctx=Load())), FunctionDef(name='print_', args=arguments(posonlyargs=[], args=[], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Assign(targets=[Name(id='fp', ctx=Store())], value=Call(func=Attribute(value=Name(id='kwargs', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='file'), Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load())], keywords=[])), Assign(targets=[Name(id='flush', ctx=Store())], value=Call(func=Attribute(value=Name(id='kwargs', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='flush'), Constant(value=False)], keywords=[])), Expr(value=Call(func=Name(id='_print', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))])), If(test=BoolOp(op=And(), values=[Name(id='flush', ctx=Load()), Compare(left=Name(id='fp', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Expr(value=Call(func=Attribute(value=Name(id='fp', ctx=Load()), attr='flush', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[])], orelse=[]), Expr(value=Call(func=Name(id='_add_doc', ctx=Load()), args=[Name(id='reraise', ctx=Load()), Constant(value='Reraise an exception.')], keywords=[])), If(test=Compare(left=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), slice=Slice(lower=Constant(value=0), upper=Constant(value=2)), ctx=Load()), ops=[Lt()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=4)], ctx=Load())]), body=[FunctionDef(name='_update_wrapper', args=arguments(posonlyargs=[], args=[arg(arg='wrapper'), arg(arg='wrapped'), arg(arg='assigned'), arg(arg='updated')], kwonlyargs=[], kw_defaults=[], defaults=[Attribute(value=Name(id='functools', ctx=Load()), attr='WRAPPER_ASSIGNMENTS', ctx=Load()), Attribute(value=Name(id='functools', ctx=Load()), attr='WRAPPER_UPDATES', ctx=Load())]), body=[For(target=Name(id='attr', ctx=Store()), iter=Name(id='assigned', ctx=Load()), body=[Try(body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='wrapped', ctx=Load()), Name(id='attr', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Continue()])], orelse=[Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='wrapper', ctx=Load()), Name(id='attr', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]))], finalbody=[])], orelse=[]), For(target=Name(id='attr', ctx=Store()), iter=Name(id='updated', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='wrapper', ctx=Load()), Name(id='attr', ctx=Load())], keywords=[]), attr='update', ctx=Load()), args=[Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='wrapped', ctx=Load()), Name(id='attr', ctx=Load()), Dict(keys=[], values=[])], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='wrapper', ctx=Load()), attr='__wrapped__', ctx=Store())], value=Name(id='wrapped', ctx=Load())), Return(value=Name(id='wrapper', ctx=Load()))], decorator_list=[]), Assign(targets=[Attribute(value=Name(id='_update_wrapper', ctx=Load()), attr='__doc__', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='functools', ctx=Load()), attr='update_wrapper', ctx=Load()), attr='__doc__', ctx=Load())), FunctionDef(name='wraps', args=arguments(posonlyargs=[], args=[arg(arg='wrapped'), arg(arg='assigned'), arg(arg='updated')], kwonlyargs=[], kw_defaults=[], defaults=[Attribute(value=Name(id='functools', ctx=Load()), attr='WRAPPER_ASSIGNMENTS', ctx=Load()), Attribute(value=Name(id='functools', ctx=Load()), attr='WRAPPER_UPDATES', ctx=Load())]), body=[Return(value=Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='partial', ctx=Load()), args=[Name(id='_update_wrapper', ctx=Load())], keywords=[keyword(arg='wrapped', value=Name(id='wrapped', ctx=Load())), keyword(arg='assigned', value=Name(id='assigned', ctx=Load())), keyword(arg='updated', value=Name(id='updated', ctx=Load()))]))], decorator_list=[]), Assign(targets=[Attribute(value=Name(id='wraps', ctx=Load()), attr='__doc__', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='functools', ctx=Load()), attr='wraps', ctx=Load()), attr='__doc__', ctx=Load()))], orelse=[Assign(targets=[Name(id='wraps', ctx=Store())], value=Attribute(value=Name(id='functools', ctx=Load()), attr='wraps', ctx=Load()))]), FunctionDef(name='with_metaclass', args=arguments(posonlyargs=[], args=[arg(arg='meta')], vararg=arg(arg='bases'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Create a base class with a metaclass.')), ClassDef(name='metaclass', bases=[Name(id='type', ctx=Load())], keywords=[], body=[FunctionDef(name='__new__', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='name'), arg(arg='this_bases'), arg(arg='d')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), slice=Slice(upper=Constant(value=2)), ctx=Load()), ops=[GtE()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=7)], ctx=Load())]), body=[Assign(targets=[Name(id='resolved_bases', ctx=Store())], value=Call(func=Attribute(value=Name(id='types', ctx=Load()), attr='resolve_bases', ctx=Load()), args=[Name(id='bases', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='resolved_bases', ctx=Load()), ops=[IsNot()], comparators=[Name(id='bases', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='d', ctx=Load()), slice=Constant(value='__orig_bases__'), ctx=Store())], value=Name(id='bases', ctx=Load()))], orelse=[])], orelse=[Assign(targets=[Name(id='resolved_bases', ctx=Store())], value=Name(id='bases', ctx=Load()))]), Return(value=Call(func=Name(id='meta', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='resolved_bases', ctx=Load()), Name(id='d', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='__prepare__', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='name'), arg(arg='this_bases')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='meta', ctx=Load()), attr='__prepare__', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='bases', ctx=Load())], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())])], decorator_list=[]), Return(value=Call(func=Attribute(value=Name(id='type', ctx=Load()), attr='__new__', ctx=Load()), args=[Name(id='metaclass', ctx=Load()), Constant(value='temporary_class'), Tuple(elts=[], ctx=Load()), Dict(keys=[], values=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='add_metaclass', args=arguments(posonlyargs=[], args=[arg(arg='metaclass')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Class decorator for creating a class with a metaclass.')), FunctionDef(name='wrapper', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='orig_vars', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='cls', ctx=Load()), attr='__dict__', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='slots', ctx=Store())], value=Call(func=Attribute(value=Name(id='orig_vars', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='__slots__')], keywords=[])), If(test=Compare(left=Name(id='slots', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='slots', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='slots', ctx=Store())], value=List(elts=[Name(id='slots', ctx=Load())], ctx=Load()))], orelse=[]), For(target=Name(id='slots_var', ctx=Store()), iter=Name(id='slots', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='orig_vars', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='slots_var', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='orig_vars', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='__dict__'), Constant(value=None)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='orig_vars', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='__weakref__'), Constant(value=None)], keywords=[])), If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='cls', ctx=Load()), Constant(value='__qualname__')], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='orig_vars', ctx=Load()), slice=Constant(value='__qualname__'), ctx=Store())], value=Attribute(value=Name(id='cls', ctx=Load()), attr='__qualname__', ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='metaclass', ctx=Load()), args=[Attribute(value=Name(id='cls', ctx=Load()), attr='__name__', ctx=Load()), Attribute(value=Name(id='cls', ctx=Load()), attr='__bases__', ctx=Load()), Name(id='orig_vars', ctx=Load())], keywords=[]))], decorator_list=[]), Return(value=Name(id='wrapper', ctx=Load()))], decorator_list=[]), FunctionDef(name='ensure_binary', args=arguments(posonlyargs=[], args=[arg(arg='s'), arg(arg='encoding'), arg(arg='errors')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='utf-8'), Constant(value='strict')]), body=[Expr(value=Constant(value='Coerce **s** to six.binary_type.\n\n    For Python 2:\n      - `unicode` -> encoded to `str`\n      - `str` -> `str`\n\n    For Python 3:\n      - `str` -> encoded to `bytes`\n      - `bytes` -> `bytes`\n    ')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='s', ctx=Load()), Name(id='binary_type', ctx=Load())], keywords=[]), body=[Return(value=Name(id='s', ctx=Load()))], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='s', ctx=Load()), Name(id='text_type', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='encode', ctx=Load()), args=[Name(id='encoding', ctx=Load()), Name(id='errors', ctx=Load())], keywords=[]))], orelse=[]), Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[BinOp(left=Constant(value="not expecting type '%s'"), op=Mod(), right=Call(func=Name(id='type', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]))], keywords=[]))], decorator_list=[]), FunctionDef(name='ensure_str', args=arguments(posonlyargs=[], args=[arg(arg='s'), arg(arg='encoding'), arg(arg='errors')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='utf-8'), Constant(value='strict')]), body=[Expr(value=Constant(value='Coerce *s* to `str`.\n\n    For Python 2:\n      - `unicode` -> encoded to `str`\n      - `str` -> `str`\n\n    For Python 3:\n      - `str` -> `str`\n      - `bytes` -> decoded to `str`\n    ')), If(test=Compare(left=Call(func=Name(id='type', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]), ops=[Is()], comparators=[Name(id='str', ctx=Load())]), body=[Return(value=Name(id='s', ctx=Load()))], orelse=[]), If(test=BoolOp(op=And(), values=[Name(id='PY2', ctx=Load()), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='s', ctx=Load()), Name(id='text_type', ctx=Load())], keywords=[])]), body=[Return(value=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='encode', ctx=Load()), args=[Name(id='encoding', ctx=Load()), Name(id='errors', ctx=Load())], keywords=[]))], orelse=[If(test=BoolOp(op=And(), values=[Name(id='PY3', ctx=Load()), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='s', ctx=Load()), Name(id='binary_type', ctx=Load())], keywords=[])]), body=[Return(value=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='decode', ctx=Load()), args=[Name(id='encoding', ctx=Load()), Name(id='errors', ctx=Load())], keywords=[]))], orelse=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='s', ctx=Load()), Tuple(elts=[Name(id='text_type', ctx=Load()), Name(id='binary_type', ctx=Load())], ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[BinOp(left=Constant(value="not expecting type '%s'"), op=Mod(), right=Call(func=Name(id='type', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]))], keywords=[]))], orelse=[])])]), Return(value=Name(id='s', ctx=Load()))], decorator_list=[]), FunctionDef(name='ensure_text', args=arguments(posonlyargs=[], args=[arg(arg='s'), arg(arg='encoding'), arg(arg='errors')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='utf-8'), Constant(value='strict')]), body=[Expr(value=Constant(value='Coerce *s* to six.text_type.\n\n    For Python 2:\n      - `unicode` -> `unicode`\n      - `str` -> `unicode`\n\n    For Python 3:\n      - `str` -> `str`\n      - `bytes` -> decoded to `str`\n    ')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='s', ctx=Load()), Name(id='binary_type', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='decode', ctx=Load()), args=[Name(id='encoding', ctx=Load()), Name(id='errors', ctx=Load())], keywords=[]))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='s', ctx=Load()), Name(id='text_type', ctx=Load())], keywords=[]), body=[Return(value=Name(id='s', ctx=Load()))], orelse=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[BinOp(left=Constant(value="not expecting type '%s'"), op=Mod(), right=Call(func=Name(id='type', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]))], keywords=[]))])])], decorator_list=[]), FunctionDef(name='python_2_unicode_compatible', args=arguments(posonlyargs=[], args=[arg(arg='klass')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    A class decorator that defines __unicode__ and __str__ methods under Python 2.\n    Under Python 3 it does nothing.\n\n    To support Python 2 and 3 with a single code base, define a __str__ method\n    returning text and apply this decorator to the class.\n    ')), If(test=Name(id='PY2', ctx=Load()), body=[If(test=Compare(left=Constant(value='__str__'), ops=[NotIn()], comparators=[Attribute(value=Name(id='klass', ctx=Load()), attr='__dict__', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value="@python_2_unicode_compatible cannot be applied to %s because it doesn't define __str__()."), op=Mod(), right=Attribute(value=Name(id='klass', ctx=Load()), attr='__name__', ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='klass', ctx=Load()), attr='__unicode__', ctx=Store())], value=Attribute(value=Name(id='klass', ctx=Load()), attr='__str__', ctx=Load())), Assign(targets=[Attribute(value=Name(id='klass', ctx=Load()), attr='__str__', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='__unicode__', ctx=Load()), args=[], keywords=[]), attr='encode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[])))], orelse=[]), Return(value=Name(id='klass', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='__path__', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='__package__', ctx=Store())], value=Name(id='__name__', ctx=Load())), If(test=Compare(left=Call(func=Attribute(value=Call(func=Name(id='globals', ctx=Load()), args=[], keywords=[]), attr='get', ctx=Load()), args=[Constant(value='__spec__')], keywords=[]), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='__spec__', ctx=Load()), attr='submodule_search_locations', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[]), If(test=Attribute(value=Name(id='sys', ctx=Load()), attr='meta_path', ctx=Load()), body=[For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='importer', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='meta_path', ctx=Load())], keywords=[]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='importer', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='_SixMetaPathImporter')]), Compare(left=Attribute(value=Name(id='importer', ctx=Load()), attr='name', ctx=Load()), ops=[Eq()], comparators=[Name(id='__name__', ctx=Load())])]), body=[Delete(targets=[Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='meta_path', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Del())]), Break()], orelse=[])], orelse=[]), Delete(targets=[Name(id='i', ctx=Del()), Name(id='importer', ctx=Del())])], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='meta_path', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='_importer', ctx=Load())], keywords=[]))], type_ignores=[])