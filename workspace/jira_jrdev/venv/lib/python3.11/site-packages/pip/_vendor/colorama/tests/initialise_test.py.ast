Module(body=[Import(names=[alias(name='sys')]), ImportFrom(module='unittest', names=[alias(name='TestCase'), alias(name='main'), alias(name='skipUnless')], level=0), Try(body=[ImportFrom(module='unittest.mock', names=[alias(name='patch'), alias(name='Mock')], level=0)], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[ImportFrom(module='mock', names=[alias(name='patch'), alias(name='Mock')], level=0)])], orelse=[], finalbody=[]), ImportFrom(module='ansitowin32', names=[alias(name='StreamWrapper')], level=2), ImportFrom(module='initialise', names=[alias(name='init'), alias(name='just_fix_windows_console'), alias(name='_wipe_internal_state_for_tests')], level=2), ImportFrom(module='utils', names=[alias(name='osname'), alias(name='replace_by')], level=1), Assign(targets=[Name(id='orig_stdout', ctx=Store())], value=Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load())), Assign(targets=[Name(id='orig_stderr', ctx=Store())], value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load())), ClassDef(name='InitTest', bases=[Name(id='TestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='setUp', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertNotWrapped', ctx=Load()), args=[], keywords=[]))], decorator_list=[Call(func=Name(id='skipUnless', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load()), attr='isatty', ctx=Load()), args=[], keywords=[]), Constant(value='sys.stdout is not a tty')], keywords=[])]), FunctionDef(name='tearDown', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='_wipe_internal_state_for_tests', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Store())], value=Name(id='orig_stdout', ctx=Load())), Assign(targets=[Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Store())], value=Name(id='orig_stderr', ctx=Load()))], decorator_list=[]), FunctionDef(name='assertWrapped', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsNot', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load()), Name(id='orig_stdout', ctx=Load()), Constant(value='stdout should be wrapped')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsNot', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()), Name(id='orig_stderr', ctx=Load()), Constant(value='stderr should be wrapped')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertTrue', ctx=Load()), args=[Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load()), Name(id='StreamWrapper', ctx=Load())], keywords=[]), Constant(value='bad stdout wrapper')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertTrue', ctx=Load()), args=[Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()), Name(id='StreamWrapper', ctx=Load())], keywords=[]), Constant(value='bad stderr wrapper')], keywords=[]))], decorator_list=[]), FunctionDef(name='assertNotWrapped', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIs', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load()), Name(id='orig_stdout', ctx=Load()), Constant(value='stdout should not be wrapped')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIs', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()), Name(id='orig_stderr', ctx=Load()), Constant(value='stderr should not be wrapped')], keywords=[]))], decorator_list=[]), FunctionDef(name='testInitWrapsOnWindows', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='_')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='osname', ctx=Load()), args=[Constant(value='nt')], keywords=[]))], body=[Expr(value=Call(func=Name(id='init', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertWrapped', ctx=Load()), args=[], keywords=[]))])], decorator_list=[Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='colorama.initialise.reset_all')], keywords=[]), Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='colorama.ansitowin32.winapi_test'), Lambda(args=arguments(posonlyargs=[], args=[], vararg=arg(arg='_'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=Constant(value=True))], keywords=[]), Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='colorama.ansitowin32.enable_vt_processing'), Lambda(args=arguments(posonlyargs=[], args=[], vararg=arg(arg='_'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=Constant(value=False))], keywords=[])]), FunctionDef(name='testInitDoesntWrapOnEmulatedWindows', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='_')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='osname', ctx=Load()), args=[Constant(value='nt')], keywords=[]))], body=[Expr(value=Call(func=Name(id='init', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertNotWrapped', ctx=Load()), args=[], keywords=[]))])], decorator_list=[Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='colorama.initialise.reset_all')], keywords=[]), Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='colorama.ansitowin32.winapi_test'), Lambda(args=arguments(posonlyargs=[], args=[], vararg=arg(arg='_'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=Constant(value=False))], keywords=[])]), FunctionDef(name='testInitDoesntWrapOnNonWindows', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='osname', ctx=Load()), args=[Constant(value='posix')], keywords=[]))], body=[Expr(value=Call(func=Name(id='init', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertNotWrapped', ctx=Load()), args=[], keywords=[]))])], decorator_list=[]), FunctionDef(name='testInitDoesntWrapIfNone', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='replace_by', ctx=Load()), args=[Constant(value=None)], keywords=[]))], body=[Expr(value=Call(func=Name(id='init', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsNone', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsNone', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='testInitAutoresetOnWrapsOnAllPlatforms', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='osname', ctx=Load()), args=[Constant(value='posix')], keywords=[]))], body=[Expr(value=Call(func=Name(id='init', ctx=Load()), args=[], keywords=[keyword(arg='autoreset', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertWrapped', ctx=Load()), args=[], keywords=[]))])], decorator_list=[]), FunctionDef(name='testInitWrapOffDoesntWrapOnWindows', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='osname', ctx=Load()), args=[Constant(value='nt')], keywords=[]))], body=[Expr(value=Call(func=Name(id='init', ctx=Load()), args=[], keywords=[keyword(arg='wrap', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertNotWrapped', ctx=Load()), args=[], keywords=[]))])], decorator_list=[]), FunctionDef(name='testInitWrapOffIncompatibleWithAutoresetOn', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='ValueError', ctx=Load()), Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='init', ctx=Load()), args=[], keywords=[keyword(arg='autoreset', value=Constant(value=True)), keyword(arg='wrap', value=Constant(value=False))]))], keywords=[]))], decorator_list=[]), FunctionDef(name='testAutoResetPassedOn', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='mockATW32'), arg(arg='_')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='osname', ctx=Load()), args=[Constant(value='nt')], keywords=[]))], body=[Expr(value=Call(func=Name(id='init', ctx=Load()), args=[], keywords=[keyword(arg='autoreset', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='mockATW32', ctx=Load()), attr='call_args_list', ctx=Load())], keywords=[]), Constant(value=2)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Subscript(value=Subscript(value=Subscript(value=Attribute(value=Name(id='mockATW32', ctx=Load()), attr='call_args_list', ctx=Load()), slice=Constant(value=1), ctx=Load()), slice=Constant(value=1), ctx=Load()), slice=Constant(value='autoreset'), ctx=Load()), Constant(value=True)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Subscript(value=Subscript(value=Subscript(value=Attribute(value=Name(id='mockATW32', ctx=Load()), attr='call_args_list', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value=1), ctx=Load()), slice=Constant(value='autoreset'), ctx=Load()), Constant(value=True)], keywords=[]))])], decorator_list=[Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='colorama.win32.SetConsoleTextAttribute')], keywords=[]), Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='colorama.initialise.AnsiToWin32')], keywords=[])]), FunctionDef(name='testAutoResetChangeable', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='mockATW32')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='osname', ctx=Load()), args=[Constant(value='nt')], keywords=[]))], body=[Expr(value=Call(func=Name(id='init', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Name(id='init', ctx=Load()), args=[], keywords=[keyword(arg='autoreset', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='mockATW32', ctx=Load()), attr='call_args_list', ctx=Load())], keywords=[]), Constant(value=4)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Subscript(value=Subscript(value=Subscript(value=Attribute(value=Name(id='mockATW32', ctx=Load()), attr='call_args_list', ctx=Load()), slice=Constant(value=2), ctx=Load()), slice=Constant(value=1), ctx=Load()), slice=Constant(value='autoreset'), ctx=Load()), Constant(value=True)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Subscript(value=Subscript(value=Subscript(value=Attribute(value=Name(id='mockATW32', ctx=Load()), attr='call_args_list', ctx=Load()), slice=Constant(value=3), ctx=Load()), slice=Constant(value=1), ctx=Load()), slice=Constant(value='autoreset'), ctx=Load()), Constant(value=True)], keywords=[])), Expr(value=Call(func=Name(id='init', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='mockATW32', ctx=Load()), attr='call_args_list', ctx=Load())], keywords=[]), Constant(value=6)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Subscript(value=Subscript(value=Subscript(value=Attribute(value=Name(id='mockATW32', ctx=Load()), attr='call_args_list', ctx=Load()), slice=Constant(value=4), ctx=Load()), slice=Constant(value=1), ctx=Load()), slice=Constant(value='autoreset'), ctx=Load()), Constant(value=False)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Subscript(value=Subscript(value=Subscript(value=Attribute(value=Name(id='mockATW32', ctx=Load()), attr='call_args_list', ctx=Load()), slice=Constant(value=5), ctx=Load()), slice=Constant(value=1), ctx=Load()), slice=Constant(value='autoreset'), ctx=Load()), Constant(value=False)], keywords=[]))])], decorator_list=[Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='colorama.initialise.AnsiToWin32')], keywords=[])]), FunctionDef(name='testAtexitRegisteredOnlyOnce', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='mockRegister')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='init', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertTrue', ctx=Load()), args=[Attribute(value=Name(id='mockRegister', ctx=Load()), attr='called', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='mockRegister', ctx=Load()), attr='reset_mock', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Name(id='init', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertFalse', ctx=Load()), args=[Attribute(value=Name(id='mockRegister', ctx=Load()), attr='called', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='colorama.initialise.atexit.register')], keywords=[])])], decorator_list=[]), ClassDef(name='JustFixWindowsConsoleTest', bases=[Name(id='TestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='_reset', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='_wipe_internal_state_for_tests', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Store())], value=Name(id='orig_stdout', ctx=Load())), Assign(targets=[Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Store())], value=Name(id='orig_stderr', ctx=Load()))], decorator_list=[]), FunctionDef(name='tearDown', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_reset', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='testJustFixWindowsConsole', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='win32')]), body=[Expr(value=Call(func=Name(id='just_fix_windows_console', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIs', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load()), Name(id='orig_stdout', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIs', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()), Name(id='orig_stderr', ctx=Load())], keywords=[]))], orelse=[FunctionDef(name='fake_std', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='stdout', ctx=Store())], value=Call(func=Name(id='Mock', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='stdout', ctx=Load()), attr='closed', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Attribute(value=Name(id='stdout', ctx=Load()), attr='isatty', ctx=Load()), attr='return_value', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Attribute(value=Name(id='stdout', ctx=Load()), attr='fileno', ctx=Load()), attr='return_value', ctx=Store())], value=Constant(value=1)), Assign(targets=[Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Store())], value=Name(id='stdout', ctx=Load())), Assign(targets=[Name(id='stderr', ctx=Store())], value=Call(func=Name(id='Mock', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='stderr', ctx=Load()), attr='closed', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Attribute(value=Name(id='stderr', ctx=Load()), attr='isatty', ctx=Load()), attr='return_value', ctx=Store())], value=Constant(value=True)), Assign(targets=[Attribute(value=Attribute(value=Name(id='stderr', ctx=Load()), attr='fileno', ctx=Load()), attr='return_value', ctx=Store())], value=Constant(value=2)), Assign(targets=[Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Store())], value=Name(id='stderr', ctx=Load()))], decorator_list=[]), For(target=Name(id='native_ansi', ctx=Store()), iter=List(elts=[Constant(value=False), Constant(value=True)], ctx=Load()), body=[With(items=[withitem(context_expr=Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='colorama.ansitowin32.enable_vt_processing'), Lambda(args=arguments(posonlyargs=[], args=[], vararg=arg(arg='_'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=Name(id='native_ansi', ctx=Load()))], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_reset', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Name(id='fake_std', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='prev_stdout', ctx=Store())], value=Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load())), Assign(targets=[Name(id='prev_stderr', ctx=Store())], value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load())), Expr(value=Call(func=Name(id='just_fix_windows_console', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIs', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load()), Name(id='prev_stdout', ctx=Load())], keywords=[])), If(test=Name(id='native_ansi', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIs', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()), Name(id='prev_stderr', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsNot', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()), Name(id='prev_stderr', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='prev_stdout', ctx=Store())], value=Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load())), Assign(targets=[Name(id='prev_stderr', ctx=Store())], value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load())), Expr(value=Call(func=Name(id='just_fix_windows_console', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIs', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load()), Name(id='prev_stdout', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIs', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()), Name(id='prev_stderr', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_reset', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Name(id='fake_std', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Name(id='init', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='prev_stdout', ctx=Store())], value=Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load())), Assign(targets=[Name(id='prev_stderr', ctx=Store())], value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load())), Expr(value=Call(func=Name(id='just_fix_windows_console', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIs', ctx=Load()), args=[Name(id='prev_stdout', ctx=Load()), Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIs', ctx=Load()), args=[Name(id='prev_stderr', ctx=Load()), Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load())], keywords=[]))])], orelse=[])])], decorator_list=[Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='colorama.ansitowin32.winapi_test'), Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Constant(value=True))], keywords=[])])], decorator_list=[]), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__')]), body=[Expr(value=Call(func=Name(id='main', ctx=Load()), args=[], keywords=[]))], orelse=[])], type_ignores=[])