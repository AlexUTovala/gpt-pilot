Module(body=[Expr(value=Constant(value='\n    pygments.formatters.bbcode\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n    BBcode formatter.\n\n    :copyright: Copyright 2006-2023 by the Pygments team, see AUTHORS.\n    :license: BSD, see LICENSE for details.\n')), ImportFrom(module='pip._vendor.pygments.formatter', names=[alias(name='Formatter')], level=0), ImportFrom(module='pip._vendor.pygments.util', names=[alias(name='get_bool_opt')], level=0), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='BBCodeFormatter')], ctx=Load())), ClassDef(name='BBCodeFormatter', bases=[Name(id='Formatter', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="\n    Format tokens with BBcodes. These formatting codes are used by many\n    bulletin boards, so you can highlight your sourcecode with pygments before\n    posting it there.\n\n    This formatter has no support for background colors and borders, as there\n    are no common BBcode tags for that.\n\n    Some board systems (e.g. phpBB) don't support colors in their [code] tag,\n    so you can't use the highlighting together with that tag.\n    Text in a [code] tag usually is shown with a monospace font (which this\n    formatter can do with the ``monofont`` option) and no spaces (which you\n    need for indentation) are removed.\n\n    Additional options accepted:\n\n    `style`\n        The style to use, can be a string or a Style subclass (default:\n        ``'default'``).\n\n    `codetag`\n        If set to true, put the output into ``[code]`` tags (default:\n        ``false``)\n\n    `monofont`\n        If set to true, add a tag to show the code with a monospace font\n        (default: ``false``).\n    ")), Assign(targets=[Name(id='name', ctx=Store())], value=Constant(value='BBCode')), Assign(targets=[Name(id='aliases', ctx=Store())], value=List(elts=[Constant(value='bbcode'), Constant(value='bb')], ctx=Load())), Assign(targets=[Name(id='filenames', ctx=Store())], value=List(elts=[], ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='options'), defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='Formatter', ctx=Load()), attr='__init__', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[keyword(value=Name(id='options', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_code', ctx=Store())], value=Call(func=Name(id='get_bool_opt', ctx=Load()), args=[Name(id='options', ctx=Load()), Constant(value='codetag'), Constant(value=False)], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_mono', ctx=Store())], value=Call(func=Name(id='get_bool_opt', ctx=Load()), args=[Name(id='options', ctx=Load()), Constant(value='monofont'), Constant(value=False)], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='styles', ctx=Store())], value=Dict(keys=[], values=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_make_styles', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='_make_styles', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Tuple(elts=[Name(id='ttype', ctx=Store()), Name(id='ndef', ctx=Store())], ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load()), body=[Assign(targets=[Name(id='start', ctx=Store()), Name(id='end', ctx=Store())], value=Constant(value='')), If(test=Subscript(value=Name(id='ndef', ctx=Load()), slice=Constant(value='color'), ctx=Load()), body=[AugAssign(target=Name(id='start', ctx=Store()), op=Add(), value=BinOp(left=Constant(value='[color=#%s]'), op=Mod(), right=Subscript(value=Name(id='ndef', ctx=Load()), slice=Constant(value='color'), ctx=Load()))), Assign(targets=[Name(id='end', ctx=Store())], value=BinOp(left=Constant(value='[/color]'), op=Add(), right=Name(id='end', ctx=Load())))], orelse=[]), If(test=Subscript(value=Name(id='ndef', ctx=Load()), slice=Constant(value='bold'), ctx=Load()), body=[AugAssign(target=Name(id='start', ctx=Store()), op=Add(), value=Constant(value='[b]')), Assign(targets=[Name(id='end', ctx=Store())], value=BinOp(left=Constant(value='[/b]'), op=Add(), right=Name(id='end', ctx=Load())))], orelse=[]), If(test=Subscript(value=Name(id='ndef', ctx=Load()), slice=Constant(value='italic'), ctx=Load()), body=[AugAssign(target=Name(id='start', ctx=Store()), op=Add(), value=Constant(value='[i]')), Assign(targets=[Name(id='end', ctx=Store())], value=BinOp(left=Constant(value='[/i]'), op=Add(), right=Name(id='end', ctx=Load())))], orelse=[]), If(test=Subscript(value=Name(id='ndef', ctx=Load()), slice=Constant(value='underline'), ctx=Load()), body=[AugAssign(target=Name(id='start', ctx=Store()), op=Add(), value=Constant(value='[u]')), Assign(targets=[Name(id='end', ctx=Store())], value=BinOp(left=Constant(value='[/u]'), op=Add(), right=Name(id='end', ctx=Load())))], orelse=[]), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='styles', ctx=Load()), slice=Name(id='ttype', ctx=Load()), ctx=Store())], value=Tuple(elts=[Name(id='start', ctx=Load()), Name(id='end', ctx=Load())], ctx=Load()))], orelse=[])], decorator_list=[]), FunctionDef(name='format_unencoded', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='tokensource'), arg(arg='outfile')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_code', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='outfile', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value='[code]')], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_mono', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='outfile', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value='[font=monospace]')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='lastval', ctx=Store())], value=Constant(value='')), Assign(targets=[Name(id='lasttype', ctx=Store())], value=Constant(value=None)), For(target=Tuple(elts=[Name(id='ttype', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Name(id='tokensource', ctx=Load()), body=[While(test=Compare(left=Name(id='ttype', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='styles', ctx=Load())]), body=[Assign(targets=[Name(id='ttype', ctx=Store())], value=Attribute(value=Name(id='ttype', ctx=Load()), attr='parent', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='ttype', ctx=Load()), ops=[Eq()], comparators=[Name(id='lasttype', ctx=Load())]), body=[AugAssign(target=Name(id='lastval', ctx=Store()), op=Add(), value=Name(id='value', ctx=Load()))], orelse=[If(test=Name(id='lastval', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='start', ctx=Store()), Name(id='end', ctx=Store())], ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='styles', ctx=Load()), slice=Name(id='lasttype', ctx=Load()), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='outfile', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Tuple(elts=[Name(id='start', ctx=Load()), Name(id='lastval', ctx=Load()), Name(id='end', ctx=Load())], ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='lastval', ctx=Store())], value=Name(id='value', ctx=Load())), Assign(targets=[Name(id='lasttype', ctx=Store())], value=Name(id='ttype', ctx=Load()))])], orelse=[]), If(test=Name(id='lastval', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='start', ctx=Store()), Name(id='end', ctx=Store())], ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='styles', ctx=Load()), slice=Name(id='lasttype', ctx=Load()), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='outfile', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Tuple(elts=[Name(id='start', ctx=Load()), Name(id='lastval', ctx=Load()), Name(id='end', ctx=Load())], ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_mono', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='outfile', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value='[/font]')], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_code', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='outfile', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value='[/code]')], keywords=[]))], orelse=[]), If(test=BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='_code', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_mono', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='outfile', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value='\n')], keywords=[]))], orelse=[])], decorator_list=[])], decorator_list=[])], type_ignores=[])