Module(body=[Expr(value=Constant(value='This is invoked in a subprocess to call the build backend hooks.\n\nIt expects:\n- Command line args: hook_name, control_dir\n- Environment variables:\n      PEP517_BUILD_BACKEND=entry.point:spec\n      PEP517_BACKEND_PATH=paths (separated with os.pathsep)\n- control_dir/input.json:\n  - {"kwargs": {...}}\n\nResults:\n- control_dir/output.json\n  - {"return_val": ...}\n')), Import(names=[alias(name='json')]), Import(names=[alias(name='os')]), Import(names=[alias(name='os.path')]), Import(names=[alias(name='re')]), Import(names=[alias(name='shutil')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='traceback')]), ImportFrom(module='glob', names=[alias(name='glob')], level=0), ImportFrom(module='importlib', names=[alias(name='import_module')], level=0), ImportFrom(module='os.path', names=[alias(name='join', asname='pjoin')], level=0), FunctionDef(name='write_json', args=arguments(posonlyargs=[], args=[arg(arg='obj'), arg(arg='path')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='path', ctx=Load()), Constant(value='w')], keywords=[keyword(arg='encoding', value=Constant(value='utf-8'))]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[Name(id='obj', ctx=Load()), Name(id='f', ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))])], decorator_list=[]), FunctionDef(name='read_json', args=arguments(posonlyargs=[], args=[arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[keyword(arg='encoding', value=Constant(value='utf-8'))]), optional_vars=Name(id='f', ctx=Store()))], body=[Return(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))])], decorator_list=[]), ClassDef(name='BackendUnavailable', bases=[Name(id='Exception', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Raised if we cannot import the backend')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='traceback')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='traceback', ctx=Store())], value=Name(id='traceback', ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='BackendInvalid', bases=[Name(id='Exception', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Raised if the backend is invalid')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='message')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='message', ctx=Store())], value=Name(id='message', ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='HookMissing', bases=[Name(id='Exception', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Raised if a hook is missing and we are not executing the fallback')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='hook_name')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Name(id='hook_name', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='hook_name', ctx=Store())], value=Name(id='hook_name', ctx=Load()))], decorator_list=[])], decorator_list=[]), FunctionDef(name='contained_in', args=arguments(posonlyargs=[], args=[arg(arg='filename'), arg(arg='directory')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Test if a file is located within the given directory.')), Assign(targets=[Name(id='filename', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normcase', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='directory', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normcase', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Name(id='directory', ctx=Load())], keywords=[])], keywords=[])), Return(value=Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='commonprefix', ctx=Load()), args=[List(elts=[Name(id='filename', ctx=Load()), Name(id='directory', ctx=Load())], ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Name(id='directory', ctx=Load())]))], decorator_list=[]), FunctionDef(name='_build_backend', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Find and load the build backend')), Assign(targets=[Name(id='backend_path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='PEP517_BACKEND_PATH')], keywords=[])), If(test=Name(id='backend_path', ctx=Load()), body=[Assign(targets=[Name(id='extra_pathitems', ctx=Store())], value=Call(func=Attribute(value=Name(id='backend_path', ctx=Load()), attr='split', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='pathsep', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='path', ctx=Load()), slice=Slice(upper=Constant(value=0)), ctx=Store())], value=Name(id='extra_pathitems', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='ep', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), slice=Constant(value='PEP517_BUILD_BACKEND'), ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='mod_path', ctx=Store()), Name(id='_', ctx=Store()), Name(id='obj_path', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='ep', ctx=Load()), attr='partition', ctx=Load()), args=[Constant(value=':')], keywords=[])), Try(body=[Assign(targets=[Name(id='obj', ctx=Store())], value=Call(func=Name(id='import_module', ctx=Load()), args=[Name(id='mod_path', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='BackendUnavailable', ctx=Load()), args=[Call(func=Attribute(value=Name(id='traceback', ctx=Load()), attr='format_exc', ctx=Load()), args=[], keywords=[])], keywords=[]))])], orelse=[], finalbody=[]), If(test=Name(id='backend_path', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='contained_in', ctx=Load()), args=[Attribute(value=Name(id='obj', ctx=Load()), attr='__file__', ctx=Load()), Name(id='path', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='path', ctx=Store()), iter=Name(id='extra_pathitems', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), body=[Raise(exc=Call(func=Name(id='BackendInvalid', ctx=Load()), args=[Constant(value='Backend was not loaded from backend-path')], keywords=[]))], orelse=[])], orelse=[]), If(test=Name(id='obj_path', ctx=Load()), body=[For(target=Name(id='path_part', ctx=Store()), iter=Call(func=Attribute(value=Name(id='obj_path', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[]), body=[Assign(targets=[Name(id='obj', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='obj', ctx=Load()), Name(id='path_part', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='obj', ctx=Load()))], decorator_list=[]), FunctionDef(name='_supported_features', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Return the list of options features supported by the backend.\n\n    Returns a list of strings.\n    The only possible value is 'build_editable'.\n    ")), Assign(targets=[Name(id='backend', ctx=Store())], value=Call(func=Name(id='_build_backend', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='features', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='backend', ctx=Load()), Constant(value='build_editable')], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='features', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='build_editable')], keywords=[]))], orelse=[]), Return(value=Name(id='features', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_requires_for_build_wheel', args=arguments(posonlyargs=[], args=[arg(arg='config_settings')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Invoke the optional get_requires_for_build_wheel hook\n\n    Returns [] if the hook is not defined.\n    ')), Assign(targets=[Name(id='backend', ctx=Store())], value=Call(func=Name(id='_build_backend', ctx=Load()), args=[], keywords=[])), Try(body=[Assign(targets=[Name(id='hook', ctx=Store())], value=Attribute(value=Name(id='backend', ctx=Load()), attr='get_requires_for_build_wheel', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Return(value=List(elts=[], ctx=Load()))])], orelse=[Return(value=Call(func=Name(id='hook', ctx=Load()), args=[Name(id='config_settings', ctx=Load())], keywords=[]))], finalbody=[])], decorator_list=[]), FunctionDef(name='get_requires_for_build_editable', args=arguments(posonlyargs=[], args=[arg(arg='config_settings')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Invoke the optional get_requires_for_build_editable hook\n\n    Returns [] if the hook is not defined.\n    ')), Assign(targets=[Name(id='backend', ctx=Store())], value=Call(func=Name(id='_build_backend', ctx=Load()), args=[], keywords=[])), Try(body=[Assign(targets=[Name(id='hook', ctx=Store())], value=Attribute(value=Name(id='backend', ctx=Load()), attr='get_requires_for_build_editable', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Return(value=List(elts=[], ctx=Load()))])], orelse=[Return(value=Call(func=Name(id='hook', ctx=Load()), args=[Name(id='config_settings', ctx=Load())], keywords=[]))], finalbody=[])], decorator_list=[]), FunctionDef(name='prepare_metadata_for_build_wheel', args=arguments(posonlyargs=[], args=[arg(arg='metadata_directory'), arg(arg='config_settings'), arg(arg='_allow_fallback')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Invoke optional prepare_metadata_for_build_wheel\n\n    Implements a fallback by building a wheel if the hook isn't defined,\n    unless _allow_fallback is False in which case HookMissing is raised.\n    ")), Assign(targets=[Name(id='backend', ctx=Store())], value=Call(func=Name(id='_build_backend', ctx=Load()), args=[], keywords=[])), Try(body=[Assign(targets=[Name(id='hook', ctx=Store())], value=Attribute(value=Name(id='backend', ctx=Load()), attr='prepare_metadata_for_build_wheel', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Name(id='_allow_fallback', ctx=Load())), body=[Raise(exc=Call(func=Name(id='HookMissing', ctx=Load()), args=[], keywords=[]))], orelse=[])])], orelse=[Return(value=Call(func=Name(id='hook', ctx=Load()), args=[Name(id='metadata_directory', ctx=Load()), Name(id='config_settings', ctx=Load())], keywords=[]))], finalbody=[]), Assign(targets=[Name(id='whl_basename', ctx=Store())], value=Call(func=Attribute(value=Name(id='backend', ctx=Load()), attr='build_wheel', ctx=Load()), args=[Name(id='metadata_directory', ctx=Load()), Name(id='config_settings', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='_get_wheel_metadata_from_wheel', ctx=Load()), args=[Name(id='whl_basename', ctx=Load()), Name(id='metadata_directory', ctx=Load()), Name(id='config_settings', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='prepare_metadata_for_build_editable', args=arguments(posonlyargs=[], args=[arg(arg='metadata_directory'), arg(arg='config_settings'), arg(arg='_allow_fallback')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Invoke optional prepare_metadata_for_build_editable\n\n    Implements a fallback by building an editable wheel if the hook isn't\n    defined, unless _allow_fallback is False in which case HookMissing is\n    raised.\n    ")), Assign(targets=[Name(id='backend', ctx=Store())], value=Call(func=Name(id='_build_backend', ctx=Load()), args=[], keywords=[])), Try(body=[Assign(targets=[Name(id='hook', ctx=Store())], value=Attribute(value=Name(id='backend', ctx=Load()), attr='prepare_metadata_for_build_editable', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Name(id='_allow_fallback', ctx=Load())), body=[Raise(exc=Call(func=Name(id='HookMissing', ctx=Load()), args=[], keywords=[]))], orelse=[]), Try(body=[Assign(targets=[Name(id='build_hook', ctx=Store())], value=Attribute(value=Name(id='backend', ctx=Load()), attr='build_editable', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='HookMissing', ctx=Load()), args=[], keywords=[keyword(arg='hook_name', value=Constant(value='build_editable'))]))])], orelse=[Assign(targets=[Name(id='whl_basename', ctx=Store())], value=Call(func=Name(id='build_hook', ctx=Load()), args=[Name(id='metadata_directory', ctx=Load()), Name(id='config_settings', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='_get_wheel_metadata_from_wheel', ctx=Load()), args=[Name(id='whl_basename', ctx=Load()), Name(id='metadata_directory', ctx=Load()), Name(id='config_settings', ctx=Load())], keywords=[]))], finalbody=[])])], orelse=[Return(value=Call(func=Name(id='hook', ctx=Load()), args=[Name(id='metadata_directory', ctx=Load()), Name(id='config_settings', ctx=Load())], keywords=[]))], finalbody=[])], decorator_list=[]), Assign(targets=[Name(id='WHEEL_BUILT_MARKER', ctx=Store())], value=Constant(value='PEP517_ALREADY_BUILT_WHEEL')), FunctionDef(name='_dist_info_files', args=arguments(posonlyargs=[], args=[arg(arg='whl_zip')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Identify the .dist-info folder inside a wheel ZipFile.')), Assign(targets=[Name(id='res', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='path', ctx=Store()), iter=Call(func=Attribute(value=Name(id='whl_zip', ctx=Load()), attr='namelist', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='m', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='match', ctx=Load()), args=[Constant(value='[^/\\\\]+-[^/\\\\]+\\.dist-info/'), Name(id='path', ctx=Load())], keywords=[])), If(test=Name(id='m', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='res', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), If(test=Name(id='res', ctx=Load()), body=[Return(value=Name(id='res', ctx=Load()))], orelse=[]), Raise(exc=Call(func=Name(id='Exception', ctx=Load()), args=[Constant(value='No .dist-info folder found in wheel')], keywords=[]))], decorator_list=[]), FunctionDef(name='_get_wheel_metadata_from_wheel', args=arguments(posonlyargs=[], args=[arg(arg='whl_basename'), arg(arg='metadata_directory'), arg(arg='config_settings')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Extract the metadata from a wheel.\n\n    Fallback for when the build backend does not\n    define the 'get_wheel_metadata' hook.\n    ")), ImportFrom(module='zipfile', names=[alias(name='ZipFile')], level=0), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='metadata_directory', ctx=Load()), Name(id='WHEEL_BUILT_MARKER', ctx=Load())], keywords=[]), Constant(value='wb')], keywords=[]))], body=[Pass()]), Assign(targets=[Name(id='whl_file', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='metadata_directory', ctx=Load()), Name(id='whl_basename', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='ZipFile', ctx=Load()), args=[Name(id='whl_file', ctx=Load())], keywords=[]), optional_vars=Name(id='zipf', ctx=Store()))], body=[Assign(targets=[Name(id='dist_info', ctx=Store())], value=Call(func=Name(id='_dist_info_files', ctx=Load()), args=[Name(id='zipf', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='zipf', ctx=Load()), attr='extractall', ctx=Load()), args=[], keywords=[keyword(arg='path', value=Name(id='metadata_directory', ctx=Load())), keyword(arg='members', value=Name(id='dist_info', ctx=Load()))]))]), Return(value=Subscript(value=Call(func=Attribute(value=Subscript(value=Name(id='dist_info', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='/')], keywords=[]), slice=Constant(value=0), ctx=Load()))], decorator_list=[]), FunctionDef(name='_find_already_built_wheel', args=arguments(posonlyargs=[], args=[arg(arg='metadata_directory')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check for a wheel already built during the get_wheel_metadata hook.\n    ')), If(test=UnaryOp(op=Not(), operand=Name(id='metadata_directory', ctx=Load())), body=[Return(value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='metadata_parent', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Name(id='metadata_directory', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isfile', ctx=Load()), args=[Call(func=Name(id='pjoin', ctx=Load()), args=[Name(id='metadata_parent', ctx=Load()), Name(id='WHEEL_BUILT_MARKER', ctx=Load())], keywords=[])], keywords=[])), body=[Return(value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='whl_files', ctx=Store())], value=Call(func=Name(id='glob', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='metadata_parent', ctx=Load()), Constant(value='*.whl')], keywords=[])], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='whl_files', ctx=Load())), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='Found wheel built marker, but no .whl files')], keywords=[])), Return(value=Constant(value=None))], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='whl_files', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='Found multiple .whl files; unspecified behaviour. Will call build_wheel.')], keywords=[])), Return(value=Constant(value=None))], orelse=[]), Return(value=Subscript(value=Name(id='whl_files', ctx=Load()), slice=Constant(value=0), ctx=Load()))], decorator_list=[]), FunctionDef(name='build_wheel', args=arguments(posonlyargs=[], args=[arg(arg='wheel_directory'), arg(arg='config_settings'), arg(arg='metadata_directory')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Invoke the mandatory build_wheel hook.\n\n    If a wheel was already built in the\n    prepare_metadata_for_build_wheel fallback, this\n    will copy it rather than rebuilding the wheel.\n    ')), Assign(targets=[Name(id='prebuilt_whl', ctx=Store())], value=Call(func=Name(id='_find_already_built_wheel', ctx=Load()), args=[Name(id='metadata_directory', ctx=Load())], keywords=[])), If(test=Name(id='prebuilt_whl', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='shutil', ctx=Load()), attr='copy2', ctx=Load()), args=[Name(id='prebuilt_whl', ctx=Load()), Name(id='wheel_directory', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='basename', ctx=Load()), args=[Name(id='prebuilt_whl', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Call(func=Name(id='_build_backend', ctx=Load()), args=[], keywords=[]), attr='build_wheel', ctx=Load()), args=[Name(id='wheel_directory', ctx=Load()), Name(id='config_settings', ctx=Load()), Name(id='metadata_directory', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='build_editable', args=arguments(posonlyargs=[], args=[arg(arg='wheel_directory'), arg(arg='config_settings'), arg(arg='metadata_directory')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Invoke the optional build_editable hook.\n\n    If a wheel was already built in the\n    prepare_metadata_for_build_editable fallback, this\n    will copy it rather than rebuilding the wheel.\n    ')), Assign(targets=[Name(id='backend', ctx=Store())], value=Call(func=Name(id='_build_backend', ctx=Load()), args=[], keywords=[])), Try(body=[Assign(targets=[Name(id='hook', ctx=Store())], value=Attribute(value=Name(id='backend', ctx=Load()), attr='build_editable', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='HookMissing', ctx=Load()), args=[], keywords=[]))])], orelse=[Assign(targets=[Name(id='prebuilt_whl', ctx=Store())], value=Call(func=Name(id='_find_already_built_wheel', ctx=Load()), args=[Name(id='metadata_directory', ctx=Load())], keywords=[])), If(test=Name(id='prebuilt_whl', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='shutil', ctx=Load()), attr='copy2', ctx=Load()), args=[Name(id='prebuilt_whl', ctx=Load()), Name(id='wheel_directory', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='basename', ctx=Load()), args=[Name(id='prebuilt_whl', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='hook', ctx=Load()), args=[Name(id='wheel_directory', ctx=Load()), Name(id='config_settings', ctx=Load()), Name(id='metadata_directory', ctx=Load())], keywords=[]))], finalbody=[])], decorator_list=[]), FunctionDef(name='get_requires_for_build_sdist', args=arguments(posonlyargs=[], args=[arg(arg='config_settings')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Invoke the optional get_requires_for_build_wheel hook\n\n    Returns [] if the hook is not defined.\n    ')), Assign(targets=[Name(id='backend', ctx=Store())], value=Call(func=Name(id='_build_backend', ctx=Load()), args=[], keywords=[])), Try(body=[Assign(targets=[Name(id='hook', ctx=Store())], value=Attribute(value=Name(id='backend', ctx=Load()), attr='get_requires_for_build_sdist', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Return(value=List(elts=[], ctx=Load()))])], orelse=[Return(value=Call(func=Name(id='hook', ctx=Load()), args=[Name(id='config_settings', ctx=Load())], keywords=[]))], finalbody=[])], decorator_list=[]), ClassDef(name='_DummyException', bases=[Name(id='Exception', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Nothing should ever raise this exception'))], decorator_list=[]), ClassDef(name='GotUnsupportedOperation', bases=[Name(id='Exception', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='For internal use when backend raises UnsupportedOperation')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='traceback')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='traceback', ctx=Store())], value=Name(id='traceback', ctx=Load()))], decorator_list=[])], decorator_list=[]), FunctionDef(name='build_sdist', args=arguments(posonlyargs=[], args=[arg(arg='sdist_directory'), arg(arg='config_settings')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Invoke the mandatory build_sdist hook.')), Assign(targets=[Name(id='backend', ctx=Store())], value=Call(func=Name(id='_build_backend', ctx=Load()), args=[], keywords=[])), Try(body=[Return(value=Call(func=Attribute(value=Name(id='backend', ctx=Load()), attr='build_sdist', ctx=Load()), args=[Name(id='sdist_directory', ctx=Load()), Name(id='config_settings', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='backend', ctx=Load()), Constant(value='UnsupportedOperation'), Name(id='_DummyException', ctx=Load())], keywords=[]), body=[Raise(exc=Call(func=Name(id='GotUnsupportedOperation', ctx=Load()), args=[Call(func=Attribute(value=Name(id='traceback', ctx=Load()), attr='format_exc', ctx=Load()), args=[], keywords=[])], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[]), Assign(targets=[Name(id='HOOK_NAMES', ctx=Store())], value=Set(elts=[Constant(value='get_requires_for_build_wheel'), Constant(value='prepare_metadata_for_build_wheel'), Constant(value='build_wheel'), Constant(value='get_requires_for_build_editable'), Constant(value='prepare_metadata_for_build_editable'), Constant(value='build_editable'), Constant(value='get_requires_for_build_sdist'), Constant(value='build_sdist'), Constant(value='_supported_features')])), FunctionDef(name='main', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='argv', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Constant(value=3)]), body=[Expr(value=Call(func=Attribute(value=Name(id='sys', ctx=Load()), attr='exit', ctx=Load()), args=[Constant(value='Needs args: hook_name, control_dir')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='hook_name', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='argv', ctx=Load()), slice=Constant(value=1), ctx=Load())), Assign(targets=[Name(id='control_dir', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='argv', ctx=Load()), slice=Constant(value=2), ctx=Load())), If(test=Compare(left=Name(id='hook_name', ctx=Load()), ops=[NotIn()], comparators=[Name(id='HOOK_NAMES', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='sys', ctx=Load()), attr='exit', ctx=Load()), args=[BinOp(left=Constant(value='Unknown hook: %s'), op=Mod(), right=Name(id='hook_name', ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Name(id='hook', ctx=Store())], value=Subscript(value=Call(func=Name(id='globals', ctx=Load()), args=[], keywords=[]), slice=Name(id='hook_name', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='hook_input', ctx=Store())], value=Call(func=Name(id='read_json', ctx=Load()), args=[Call(func=Name(id='pjoin', ctx=Load()), args=[Name(id='control_dir', ctx=Load()), Constant(value='input.json')], keywords=[])], keywords=[])), Assign(targets=[Name(id='json_out', ctx=Store())], value=Dict(keys=[Constant(value='unsupported'), Constant(value='return_val')], values=[Constant(value=False), Constant(value=None)])), Try(body=[Assign(targets=[Subscript(value=Name(id='json_out', ctx=Load()), slice=Constant(value='return_val'), ctx=Store())], value=Call(func=Name(id='hook', ctx=Load()), args=[], keywords=[keyword(value=Subscript(value=Name(id='hook_input', ctx=Load()), slice=Constant(value='kwargs'), ctx=Load()))]))], handlers=[ExceptHandler(type=Name(id='BackendUnavailable', ctx=Load()), name='e', body=[Assign(targets=[Subscript(value=Name(id='json_out', ctx=Load()), slice=Constant(value='no_backend'), ctx=Store())], value=Constant(value=True)), Assign(targets=[Subscript(value=Name(id='json_out', ctx=Load()), slice=Constant(value='traceback'), ctx=Store())], value=Attribute(value=Name(id='e', ctx=Load()), attr='traceback', ctx=Load()))]), ExceptHandler(type=Name(id='BackendInvalid', ctx=Load()), name='e', body=[Assign(targets=[Subscript(value=Name(id='json_out', ctx=Load()), slice=Constant(value='backend_invalid'), ctx=Store())], value=Constant(value=True)), Assign(targets=[Subscript(value=Name(id='json_out', ctx=Load()), slice=Constant(value='backend_error'), ctx=Store())], value=Attribute(value=Name(id='e', ctx=Load()), attr='message', ctx=Load()))]), ExceptHandler(type=Name(id='GotUnsupportedOperation', ctx=Load()), name='e', body=[Assign(targets=[Subscript(value=Name(id='json_out', ctx=Load()), slice=Constant(value='unsupported'), ctx=Store())], value=Constant(value=True)), Assign(targets=[Subscript(value=Name(id='json_out', ctx=Load()), slice=Constant(value='traceback'), ctx=Store())], value=Attribute(value=Name(id='e', ctx=Load()), attr='traceback', ctx=Load()))]), ExceptHandler(type=Name(id='HookMissing', ctx=Load()), name='e', body=[Assign(targets=[Subscript(value=Name(id='json_out', ctx=Load()), slice=Constant(value='hook_missing'), ctx=Store())], value=Constant(value=True)), Assign(targets=[Subscript(value=Name(id='json_out', ctx=Load()), slice=Constant(value='missing_hook_name'), ctx=Store())], value=BoolOp(op=Or(), values=[Attribute(value=Name(id='e', ctx=Load()), attr='hook_name', ctx=Load()), Name(id='hook_name', ctx=Load())]))])], orelse=[], finalbody=[]), Expr(value=Call(func=Name(id='write_json', ctx=Load()), args=[Name(id='json_out', ctx=Load()), Call(func=Name(id='pjoin', ctx=Load()), args=[Name(id='control_dir', ctx=Load()), Constant(value='output.json')], keywords=[])], keywords=[keyword(arg='indent', value=Constant(value=2))]))], decorator_list=[]), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__')]), body=[Expr(value=Call(func=Name(id='main', ctx=Load()), args=[], keywords=[]))], orelse=[])], type_ignores=[])