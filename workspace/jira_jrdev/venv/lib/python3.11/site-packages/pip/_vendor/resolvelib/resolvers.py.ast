Module(body=[Import(names=[alias(name='collections')]), Import(names=[alias(name='itertools')]), Import(names=[alias(name='operator')]), ImportFrom(module='providers', names=[alias(name='AbstractResolver')], level=1), ImportFrom(module='structs', names=[alias(name='DirectedGraph'), alias(name='IteratorMapping'), alias(name='build_iter_view')], level=1), Assign(targets=[Name(id='RequirementInformation', ctx=Store())], value=Call(func=Attribute(value=Name(id='collections', ctx=Load()), attr='namedtuple', ctx=Load()), args=[Constant(value='RequirementInformation'), List(elts=[Constant(value='requirement'), Constant(value='parent')], ctx=Load())], keywords=[])), ClassDef(name='ResolverException', bases=[Name(id='Exception', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A base class for all exceptions raised by this module.\n\n    Exceptions derived by this class should all be handled in this module. Any\n    bubbling pass the resolver should be treated as a bug.\n    '))], decorator_list=[]), ClassDef(name='RequirementsConflicted', bases=[Name(id='ResolverException', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='criterion')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[Name(id='RequirementsConflicted', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]), attr='__init__', ctx=Load()), args=[Name(id='criterion', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='criterion', ctx=Store())], value=Name(id='criterion', ctx=Load()))], decorator_list=[]), FunctionDef(name='__str__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value='Requirements conflict: {}'), attr='format', ctx=Load()), args=[Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='repr', ctx=Load()), args=[Name(id='r', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='r', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='criterion', ctx=Load()), attr='iter_requirement', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[])], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='InconsistentCandidate', bases=[Name(id='ResolverException', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='candidate'), arg(arg='criterion')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[Name(id='InconsistentCandidate', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]), attr='__init__', ctx=Load()), args=[Name(id='candidate', ctx=Load()), Name(id='criterion', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='candidate', ctx=Store())], value=Name(id='candidate', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='criterion', ctx=Store())], value=Name(id='criterion', ctx=Load()))], decorator_list=[]), FunctionDef(name='__str__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value='Provided candidate {!r} does not satisfy {}'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='candidate', ctx=Load()), Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='repr', ctx=Load()), args=[Name(id='r', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='r', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='criterion', ctx=Load()), attr='iter_requirement', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[])], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='Criterion', bases=[Name(id='object', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Representation of possible resolution results of a package.\n\n    This holds three attributes:\n\n    * `information` is a collection of `RequirementInformation` pairs.\n      Each pair is a requirement contributing to this criterion, and the\n      candidate that provides the requirement.\n    * `incompatibilities` is a collection of all known not-to-work candidates\n      to exclude from consideration.\n    * `candidates` is a collection containing all possible candidates deducted\n      from the union of contributing requirements and known incompatibilities.\n      It should never be empty, except when the criterion is an attribute of a\n      raised `RequirementsConflicted` (in which case it is always empty).\n\n    .. note::\n        This class is intended to be externally immutable. **Do not** mutate\n        any of its attribute containers.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='candidates'), arg(arg='information'), arg(arg='incompatibilities')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='candidates', ctx=Store())], value=Name(id='candidates', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='information', ctx=Store())], value=Name(id='information', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='incompatibilities', ctx=Store())], value=Name(id='incompatibilities', ctx=Load()))], decorator_list=[]), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='requirements', ctx=Store())], value=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Constant(value='({!r}, via={!r})'), attr='format', ctx=Load()), args=[Name(id='req', ctx=Load()), Name(id='parent', ctx=Load())], keywords=[]), generators=[comprehension(target=Tuple(elts=[Name(id='req', ctx=Store()), Name(id='parent', ctx=Store())], ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='information', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Return(value=Call(func=Attribute(value=Constant(value='Criterion({})'), attr='format', ctx=Load()), args=[Name(id='requirements', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='iter_requirement', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=GeneratorExp(elt=Attribute(value=Name(id='i', ctx=Load()), attr='requirement', ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='information', ctx=Load()), ifs=[], is_async=0)]))], decorator_list=[]), FunctionDef(name='iter_parent', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=GeneratorExp(elt=Attribute(value=Name(id='i', ctx=Load()), attr='parent', ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='information', ctx=Load()), ifs=[], is_async=0)]))], decorator_list=[])], decorator_list=[]), ClassDef(name='ResolutionError', bases=[Name(id='ResolverException', ctx=Load())], keywords=[], body=[Pass()], decorator_list=[]), ClassDef(name='ResolutionImpossible', bases=[Name(id='ResolutionError', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='causes')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[Name(id='ResolutionImpossible', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]), attr='__init__', ctx=Load()), args=[Name(id='causes', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='causes', ctx=Store())], value=Name(id='causes', ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='ResolutionTooDeep', bases=[Name(id='ResolutionError', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='round_count')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[Name(id='ResolutionTooDeep', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]), attr='__init__', ctx=Load()), args=[Name(id='round_count', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='round_count', ctx=Store())], value=Name(id='round_count', ctx=Load()))], decorator_list=[])], decorator_list=[]), Assign(targets=[Name(id='State', ctx=Store())], value=Call(func=Attribute(value=Name(id='collections', ctx=Load()), attr='namedtuple', ctx=Load()), args=[Constant(value='State'), Constant(value='mapping criteria backtrack_causes')], keywords=[])), ClassDef(name='Resolution', bases=[Name(id='object', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Stateful resolution object.\n\n    This is designed as a one-off object that holds information to kick start\n    the resolution process, and holds the results afterwards.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='provider'), arg(arg='reporter')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_p', ctx=Store())], value=Name(id='provider', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_r', ctx=Store())], value=Name(id='reporter', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_states', ctx=Store())], value=List(elts=[], ctx=Load()))], decorator_list=[]), FunctionDef(name='state', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_states', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='IndexError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='AttributeError', ctx=Load()), args=[Constant(value='state')], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='_push_new_state', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Push a new state into history.\n\n        This new state will be used to hold resolution results of the next\n        coming round.\n        ')), Assign(targets=[Name(id='base', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_states', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())), Assign(targets=[Name(id='state', ctx=Store())], value=Call(func=Name(id='State', ctx=Load()), args=[], keywords=[keyword(arg='mapping', value=Call(func=Attribute(value=Attribute(value=Name(id='base', ctx=Load()), attr='mapping', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), keyword(arg='criteria', value=Call(func=Attribute(value=Attribute(value=Name(id='base', ctx=Load()), attr='criteria', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), keyword(arg='backtrack_causes', value=Subscript(value=Attribute(value=Name(id='base', ctx=Load()), attr='backtrack_causes', ctx=Load()), slice=Slice(), ctx=Load()))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_states', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='state', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_add_to_criteria', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='criteria'), arg(arg='requirement'), arg(arg='parent')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_r', ctx=Load()), attr='adding_requirement', ctx=Load()), args=[], keywords=[keyword(arg='requirement', value=Name(id='requirement', ctx=Load())), keyword(arg='parent', value=Name(id='parent', ctx=Load()))])), Assign(targets=[Name(id='identifier', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_p', ctx=Load()), attr='identify', ctx=Load()), args=[], keywords=[keyword(arg='requirement_or_candidate', value=Name(id='requirement', ctx=Load()))])), Assign(targets=[Name(id='criterion', ctx=Store())], value=Call(func=Attribute(value=Name(id='criteria', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='identifier', ctx=Load())], keywords=[])), If(test=Name(id='criterion', ctx=Load()), body=[Assign(targets=[Name(id='incompatibilities', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Attribute(value=Name(id='criterion', ctx=Load()), attr='incompatibilities', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='incompatibilities', ctx=Store())], value=List(elts=[], ctx=Load()))]), Assign(targets=[Name(id='matches', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_p', ctx=Load()), attr='find_matches', ctx=Load()), args=[], keywords=[keyword(arg='identifier', value=Name(id='identifier', ctx=Load())), keyword(arg='requirements', value=Call(func=Name(id='IteratorMapping', ctx=Load()), args=[Name(id='criteria', ctx=Load()), Call(func=Attribute(value=Name(id='operator', ctx=Load()), attr='methodcaller', ctx=Load()), args=[Constant(value='iter_requirement')], keywords=[]), Dict(keys=[Name(id='identifier', ctx=Load())], values=[List(elts=[Name(id='requirement', ctx=Load())], ctx=Load())])], keywords=[])), keyword(arg='incompatibilities', value=Call(func=Name(id='IteratorMapping', ctx=Load()), args=[Name(id='criteria', ctx=Load()), Call(func=Attribute(value=Name(id='operator', ctx=Load()), attr='attrgetter', ctx=Load()), args=[Constant(value='incompatibilities')], keywords=[]), Dict(keys=[Name(id='identifier', ctx=Load())], values=[Name(id='incompatibilities', ctx=Load())])], keywords=[]))])), If(test=Name(id='criterion', ctx=Load()), body=[Assign(targets=[Name(id='information', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Attribute(value=Name(id='criterion', ctx=Load()), attr='information', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='information', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='RequirementInformation', ctx=Load()), args=[Name(id='requirement', ctx=Load()), Name(id='parent', ctx=Load())], keywords=[])], keywords=[]))], orelse=[Assign(targets=[Name(id='information', ctx=Store())], value=List(elts=[Call(func=Name(id='RequirementInformation', ctx=Load()), args=[Name(id='requirement', ctx=Load()), Name(id='parent', ctx=Load())], keywords=[])], ctx=Load()))]), Assign(targets=[Name(id='criterion', ctx=Store())], value=Call(func=Name(id='Criterion', ctx=Load()), args=[], keywords=[keyword(arg='candidates', value=Call(func=Name(id='build_iter_view', ctx=Load()), args=[Name(id='matches', ctx=Load())], keywords=[])), keyword(arg='information', value=Name(id='information', ctx=Load())), keyword(arg='incompatibilities', value=Name(id='incompatibilities', ctx=Load()))])), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='criterion', ctx=Load()), attr='candidates', ctx=Load())), body=[Raise(exc=Call(func=Name(id='RequirementsConflicted', ctx=Load()), args=[Name(id='criterion', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='criteria', ctx=Load()), slice=Name(id='identifier', ctx=Load()), ctx=Store())], value=Name(id='criterion', ctx=Load()))], decorator_list=[]), FunctionDef(name='_remove_information_from_criteria', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='criteria'), arg(arg='parents')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Remove information from parents of criteria.\n\n        Concretely, removes all values from each criterion's ``information``\n        field that have one of ``parents`` as provider of the requirement.\n\n        :param criteria: The criteria to update.\n        :param parents: Identifiers for which to remove information from all criteria.\n        ")), If(test=UnaryOp(op=Not(), operand=Name(id='parents', ctx=Load())), body=[Return()], orelse=[]), For(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='criterion', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='criteria', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='criteria', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Call(func=Name(id='Criterion', ctx=Load()), args=[Attribute(value=Name(id='criterion', ctx=Load()), attr='candidates', ctx=Load()), ListComp(elt=Name(id='information', ctx=Load()), generators=[comprehension(target=Name(id='information', ctx=Store()), iter=Attribute(value=Name(id='criterion', ctx=Load()), attr='information', ctx=Load()), ifs=[BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='information', ctx=Load()), attr='parent', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_p', ctx=Load()), attr='identify', ctx=Load()), args=[Attribute(value=Name(id='information', ctx=Load()), attr='parent', ctx=Load())], keywords=[]), ops=[NotIn()], comparators=[Name(id='parents', ctx=Load())])])], is_async=0)]), Attribute(value=Name(id='criterion', ctx=Load()), attr='incompatibilities', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='_get_preference', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_p', ctx=Load()), attr='get_preference', ctx=Load()), args=[], keywords=[keyword(arg='identifier', value=Name(id='name', ctx=Load())), keyword(arg='resolutions', value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='state', ctx=Load()), attr='mapping', ctx=Load())), keyword(arg='candidates', value=Call(func=Name(id='IteratorMapping', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='state', ctx=Load()), attr='criteria', ctx=Load()), Call(func=Attribute(value=Name(id='operator', ctx=Load()), attr='attrgetter', ctx=Load()), args=[Constant(value='candidates')], keywords=[])], keywords=[])), keyword(arg='information', value=Call(func=Name(id='IteratorMapping', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='state', ctx=Load()), attr='criteria', ctx=Load()), Call(func=Attribute(value=Name(id='operator', ctx=Load()), attr='attrgetter', ctx=Load()), args=[Constant(value='information')], keywords=[])], keywords=[])), keyword(arg='backtrack_causes', value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='state', ctx=Load()), attr='backtrack_causes', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='_is_current_pin_satisfying', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name'), arg(arg='criterion')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Name(id='current_pin', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='state', ctx=Load()), attr='mapping', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Return(value=Constant(value=False))])], orelse=[], finalbody=[]), Return(value=Call(func=Name(id='all', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_p', ctx=Load()), attr='is_satisfied_by', ctx=Load()), args=[], keywords=[keyword(arg='requirement', value=Name(id='r', ctx=Load())), keyword(arg='candidate', value=Name(id='current_pin', ctx=Load()))]), generators=[comprehension(target=Name(id='r', ctx=Store()), iter=Call(func=Attribute(value=Name(id='criterion', ctx=Load()), attr='iter_requirement', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[]), FunctionDef(name='_get_updated_criteria', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='candidate')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='criteria', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='state', ctx=Load()), attr='criteria', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), For(target=Name(id='requirement', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_p', ctx=Load()), attr='get_dependencies', ctx=Load()), args=[], keywords=[keyword(arg='candidate', value=Name(id='candidate', ctx=Load()))]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_add_to_criteria', ctx=Load()), args=[Name(id='criteria', ctx=Load()), Name(id='requirement', ctx=Load())], keywords=[keyword(arg='parent', value=Name(id='candidate', ctx=Load()))]))], orelse=[]), Return(value=Name(id='criteria', ctx=Load()))], decorator_list=[]), FunctionDef(name='_attempt_to_pin_criterion', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='criterion', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='state', ctx=Load()), attr='criteria', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='causes', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='candidate', ctx=Store()), iter=Attribute(value=Name(id='criterion', ctx=Load()), attr='candidates', ctx=Load()), body=[Try(body=[Assign(targets=[Name(id='criteria', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_updated_criteria', ctx=Load()), args=[Name(id='candidate', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='RequirementsConflicted', ctx=Load()), name='e', body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_r', ctx=Load()), attr='rejecting_candidate', ctx=Load()), args=[Attribute(value=Name(id='e', ctx=Load()), attr='criterion', ctx=Load()), Name(id='candidate', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='causes', ctx=Load()), attr='append', ctx=Load()), args=[Attribute(value=Name(id='e', ctx=Load()), attr='criterion', ctx=Load())], keywords=[])), Continue()])], orelse=[], finalbody=[]), Assign(targets=[Name(id='satisfied', ctx=Store())], value=Call(func=Name(id='all', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_p', ctx=Load()), attr='is_satisfied_by', ctx=Load()), args=[], keywords=[keyword(arg='requirement', value=Name(id='r', ctx=Load())), keyword(arg='candidate', value=Name(id='candidate', ctx=Load()))]), generators=[comprehension(target=Name(id='r', ctx=Store()), iter=Call(func=Attribute(value=Name(id='criterion', ctx=Load()), attr='iter_requirement', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='satisfied', ctx=Load())), body=[Raise(exc=Call(func=Name(id='InconsistentCandidate', ctx=Load()), args=[Name(id='candidate', ctx=Load()), Name(id='criterion', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_r', ctx=Load()), attr='pinning', ctx=Load()), args=[], keywords=[keyword(arg='candidate', value=Name(id='candidate', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='state', ctx=Load()), attr='criteria', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='criteria', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='state', ctx=Load()), attr='mapping', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='name', ctx=Load()), Constant(value=None)], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='state', ctx=Load()), attr='mapping', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Name(id='candidate', ctx=Load())), Return(value=List(elts=[], ctx=Load()))], orelse=[]), Return(value=Name(id='causes', ctx=Load()))], decorator_list=[]), FunctionDef(name='_backjump', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='causes')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Perform backjumping.\n\n        When we enter here, the stack is like this::\n\n            [ state Z ]\n            [ state Y ]\n            [ state X ]\n            .... earlier states are irrelevant.\n\n        1. No pins worked for Z, so it does not have a pin.\n        2. We want to reset state Y to unpinned, and pin another candidate.\n        3. State X holds what state Y was before the pin, but does not\n           have the incompatibility information gathered in state Y.\n\n        Each iteration of the loop will:\n\n        1.  Identify Z. The incompatibility is not always caused by the latest\n            state. For example, given three requirements A, B and C, with\n            dependencies A1, B1 and C1, where A1 and B1 are incompatible: the\n            last state might be related to C, so we want to discard the\n            previous state.\n        2.  Discard Z.\n        3.  Discard Y but remember its incompatibility information gathered\n            previously, and the failure we're dealing with right now.\n        4.  Push a new state Y' based on X, and apply the incompatibility\n            information from Y to Y'.\n        5a. If this causes Y' to conflict, we need to backtrack again. Make Y'\n            the new Z and go back to step 2.\n        5b. If the incompatibilities apply cleanly, end backtracking.\n        ")), Assign(targets=[Name(id='incompatible_reqs', ctx=Store())], value=Call(func=Attribute(value=Name(id='itertools', ctx=Load()), attr='chain', ctx=Load()), args=[GeneratorExp(elt=Attribute(value=Name(id='c', ctx=Load()), attr='parent', ctx=Load()), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Name(id='causes', ctx=Load()), ifs=[Compare(left=Attribute(value=Name(id='c', ctx=Load()), attr='parent', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])], is_async=0)]), GeneratorExp(elt=Attribute(value=Name(id='c', ctx=Load()), attr='requirement', ctx=Load()), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Name(id='causes', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Name(id='incompatible_deps', ctx=Store())], value=SetComp(elt=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_p', ctx=Load()), attr='identify', ctx=Load()), args=[Name(id='r', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='r', ctx=Store()), iter=Name(id='incompatible_reqs', ctx=Load()), ifs=[], is_async=0)])), While(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_states', ctx=Load())], keywords=[]), ops=[GtE()], comparators=[Constant(value=3)]), body=[Delete(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_states', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Del())]), Assign(targets=[Name(id='incompatible_state', ctx=Store())], value=Constant(value=False)), While(test=UnaryOp(op=Not(), operand=Name(id='incompatible_state', ctx=Load())), body=[Try(body=[Assign(targets=[Name(id='broken_state', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_states', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='name', ctx=Store()), Name(id='candidate', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='broken_state', ctx=Load()), attr='mapping', ctx=Load()), attr='popitem', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='IndexError', ctx=Load()), Name(id='KeyError', ctx=Load())], ctx=Load()), body=[Raise(exc=Call(func=Name(id='ResolutionImpossible', ctx=Load()), args=[Name(id='causes', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='current_dependencies', ctx=Store())], value=SetComp(elt=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_p', ctx=Load()), attr='identify', ctx=Load()), args=[Name(id='d', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='d', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_p', ctx=Load()), attr='get_dependencies', ctx=Load()), args=[Name(id='candidate', ctx=Load())], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='incompatible_state', ctx=Store())], value=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='current_dependencies', ctx=Load()), attr='isdisjoint', ctx=Load()), args=[Name(id='incompatible_deps', ctx=Load())], keywords=[])))], orelse=[]), Assign(targets=[Name(id='incompatibilities_from_broken', ctx=Store())], value=ListComp(elt=Tuple(elts=[Name(id='k', ctx=Load()), Call(func=Name(id='list', ctx=Load()), args=[Attribute(value=Name(id='v', ctx=Load()), attr='incompatibilities', ctx=Load())], keywords=[])], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='broken_state', ctx=Load()), attr='criteria', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='incompatibilities_from_broken', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='name', ctx=Load()), List(elts=[Name(id='candidate', ctx=Load())], ctx=Load())], ctx=Load())], keywords=[])), FunctionDef(name='_patch_criteria', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='incompatibilities', ctx=Store())], ctx=Store()), iter=Name(id='incompatibilities_from_broken', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Name(id='incompatibilities', ctx=Load())), body=[Continue()], orelse=[]), Try(body=[Assign(targets=[Name(id='criterion', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='state', ctx=Load()), attr='criteria', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Continue()])], orelse=[], finalbody=[]), Assign(targets=[Name(id='matches', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_p', ctx=Load()), attr='find_matches', ctx=Load()), args=[], keywords=[keyword(arg='identifier', value=Name(id='k', ctx=Load())), keyword(arg='requirements', value=Call(func=Name(id='IteratorMapping', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='state', ctx=Load()), attr='criteria', ctx=Load()), Call(func=Attribute(value=Name(id='operator', ctx=Load()), attr='methodcaller', ctx=Load()), args=[Constant(value='iter_requirement')], keywords=[])], keywords=[])), keyword(arg='incompatibilities', value=Call(func=Name(id='IteratorMapping', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='state', ctx=Load()), attr='criteria', ctx=Load()), Call(func=Attribute(value=Name(id='operator', ctx=Load()), attr='attrgetter', ctx=Load()), args=[Constant(value='incompatibilities')], keywords=[]), Dict(keys=[Name(id='k', ctx=Load())], values=[Name(id='incompatibilities', ctx=Load())])], keywords=[]))])), Assign(targets=[Name(id='candidates', ctx=Store())], value=Call(func=Name(id='build_iter_view', ctx=Load()), args=[Name(id='matches', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='candidates', ctx=Load())), body=[Return(value=Constant(value=False))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='incompatibilities', ctx=Load()), attr='extend', ctx=Load()), args=[Attribute(value=Name(id='criterion', ctx=Load()), attr='incompatibilities', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='state', ctx=Load()), attr='criteria', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Store())], value=Call(func=Name(id='Criterion', ctx=Load()), args=[], keywords=[keyword(arg='candidates', value=Name(id='candidates', ctx=Load())), keyword(arg='information', value=Call(func=Name(id='list', ctx=Load()), args=[Attribute(value=Name(id='criterion', ctx=Load()), attr='information', ctx=Load())], keywords=[])), keyword(arg='incompatibilities', value=Name(id='incompatibilities', ctx=Load()))]))], orelse=[]), Return(value=Constant(value=True))], decorator_list=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_push_new_state', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='success', ctx=Store())], value=Call(func=Name(id='_patch_criteria', ctx=Load()), args=[], keywords=[])), If(test=Name(id='success', ctx=Load()), body=[Return(value=Constant(value=True))], orelse=[])], orelse=[]), Return(value=Constant(value=False))], decorator_list=[]), FunctionDef(name='resolve', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='requirements'), arg(arg='max_rounds')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_states', ctx=Load()), body=[Raise(exc=Call(func=Name(id='RuntimeError', ctx=Load()), args=[Constant(value='already resolved')], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_r', ctx=Load()), attr='starting', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_states', ctx=Store())], value=List(elts=[Call(func=Name(id='State', ctx=Load()), args=[], keywords=[keyword(arg='mapping', value=Call(func=Attribute(value=Name(id='collections', ctx=Load()), attr='OrderedDict', ctx=Load()), args=[], keywords=[])), keyword(arg='criteria', value=Dict(keys=[], values=[])), keyword(arg='backtrack_causes', value=List(elts=[], ctx=Load()))])], ctx=Load())), For(target=Name(id='r', ctx=Store()), iter=Name(id='requirements', ctx=Load()), body=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_add_to_criteria', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='state', ctx=Load()), attr='criteria', ctx=Load()), Name(id='r', ctx=Load())], keywords=[keyword(arg='parent', value=Constant(value=None))]))], handlers=[ExceptHandler(type=Name(id='RequirementsConflicted', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='ResolutionImpossible', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='e', ctx=Load()), attr='criterion', ctx=Load()), attr='information', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_push_new_state', ctx=Load()), args=[], keywords=[])), For(target=Name(id='round_index', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='max_rounds', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_r', ctx=Load()), attr='starting_round', ctx=Load()), args=[], keywords=[keyword(arg='index', value=Name(id='round_index', ctx=Load()))])), Assign(targets=[Name(id='unsatisfied_names', ctx=Store())], value=ListComp(elt=Name(id='key', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='criterion', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='state', ctx=Load()), attr='criteria', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_is_current_pin_satisfying', ctx=Load()), args=[Name(id='key', ctx=Load()), Name(id='criterion', ctx=Load())], keywords=[]))], is_async=0)])), If(test=UnaryOp(op=Not(), operand=Name(id='unsatisfied_names', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_r', ctx=Load()), attr='ending', ctx=Load()), args=[], keywords=[keyword(arg='state', value=Attribute(value=Name(id='self', ctx=Load()), attr='state', ctx=Load()))])), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='state', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='satisfied_names', ctx=Store())], value=BinOp(left=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='state', ctx=Load()), attr='criteria', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[]), op=Sub(), right=Call(func=Name(id='set', ctx=Load()), args=[Name(id='unsatisfied_names', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[Name(id='unsatisfied_names', ctx=Load())], keywords=[keyword(arg='key', value=Attribute(value=Name(id='self', ctx=Load()), attr='_get_preference', ctx=Load()))])), Assign(targets=[Name(id='failure_causes', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_attempt_to_pin_criterion', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), If(test=Name(id='failure_causes', ctx=Load()), body=[Assign(targets=[Name(id='causes', ctx=Store())], value=ListComp(elt=Name(id='i', ctx=Load()), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Name(id='failure_causes', ctx=Load()), ifs=[], is_async=0), comprehension(target=Name(id='i', ctx=Store()), iter=Attribute(value=Name(id='c', ctx=Load()), attr='information', ctx=Load()), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_r', ctx=Load()), attr='resolving_conflicts', ctx=Load()), args=[], keywords=[keyword(arg='causes', value=Name(id='causes', ctx=Load()))])), Assign(targets=[Name(id='success', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_backjump', ctx=Load()), args=[Name(id='causes', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='state', ctx=Load()), attr='backtrack_causes', ctx=Load()), slice=Slice(), ctx=Store())], value=Name(id='causes', ctx=Load())), If(test=UnaryOp(op=Not(), operand=Name(id='success', ctx=Load())), body=[Raise(exc=Call(func=Name(id='ResolutionImpossible', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='state', ctx=Load()), attr='backtrack_causes', ctx=Load())], keywords=[]))], orelse=[])], orelse=[Assign(targets=[Name(id='newly_unsatisfied_names', ctx=Store())], value=SetComp(elt=Name(id='key', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='criterion', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='state', ctx=Load()), attr='criteria', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[BoolOp(op=And(), values=[Compare(left=Name(id='key', ctx=Load()), ops=[In()], comparators=[Name(id='satisfied_names', ctx=Load())]), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_is_current_pin_satisfying', ctx=Load()), args=[Name(id='key', ctx=Load()), Name(id='criterion', ctx=Load())], keywords=[]))])], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_remove_information_from_criteria', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='state', ctx=Load()), attr='criteria', ctx=Load()), Name(id='newly_unsatisfied_names', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_push_new_state', ctx=Load()), args=[], keywords=[]))]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_r', ctx=Load()), attr='ending_round', ctx=Load()), args=[], keywords=[keyword(arg='index', value=Name(id='round_index', ctx=Load())), keyword(arg='state', value=Attribute(value=Name(id='self', ctx=Load()), attr='state', ctx=Load()))]))], orelse=[]), Raise(exc=Call(func=Name(id='ResolutionTooDeep', ctx=Load()), args=[Name(id='max_rounds', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), FunctionDef(name='_has_route_to_root', args=arguments(posonlyargs=[], args=[arg(arg='criteria'), arg(arg='key'), arg(arg='all_keys'), arg(arg='connected')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='key', ctx=Load()), ops=[In()], comparators=[Name(id='connected', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[]), If(test=Compare(left=Name(id='key', ctx=Load()), ops=[NotIn()], comparators=[Name(id='criteria', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), For(target=Name(id='p', ctx=Store()), iter=Call(func=Attribute(value=Subscript(value=Name(id='criteria', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()), attr='iter_parent', ctx=Load()), args=[], keywords=[]), body=[Try(body=[Assign(targets=[Name(id='pkey', ctx=Store())], value=Subscript(value=Name(id='all_keys', ctx=Load()), slice=Call(func=Name(id='id', ctx=Load()), args=[Name(id='p', ctx=Load())], keywords=[]), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Continue()])], orelse=[], finalbody=[]), If(test=Compare(left=Name(id='pkey', ctx=Load()), ops=[In()], comparators=[Name(id='connected', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='connected', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[])), Return(value=Constant(value=True))], orelse=[]), If(test=Call(func=Name(id='_has_route_to_root', ctx=Load()), args=[Name(id='criteria', ctx=Load()), Name(id='pkey', ctx=Load()), Name(id='all_keys', ctx=Load()), Name(id='connected', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='connected', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[])), Return(value=Constant(value=True))], orelse=[])], orelse=[]), Return(value=Constant(value=False))], decorator_list=[]), Assign(targets=[Name(id='Result', ctx=Store())], value=Call(func=Attribute(value=Name(id='collections', ctx=Load()), attr='namedtuple', ctx=Load()), args=[Constant(value='Result'), Constant(value='mapping graph criteria')], keywords=[])), FunctionDef(name='_build_result', args=arguments(posonlyargs=[], args=[arg(arg='state')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='mapping', ctx=Store())], value=Attribute(value=Name(id='state', ctx=Load()), attr='mapping', ctx=Load())), Assign(targets=[Name(id='all_keys', ctx=Store())], value=DictComp(key=Call(func=Name(id='id', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[]), value=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='mapping', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Subscript(value=Name(id='all_keys', ctx=Load()), slice=Call(func=Name(id='id', ctx=Load()), args=[Constant(value=None)], keywords=[]), ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='graph', ctx=Store())], value=Call(func=Name(id='DirectedGraph', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='graph', ctx=Load()), attr='add', ctx=Load()), args=[Constant(value=None)], keywords=[])), Assign(targets=[Name(id='connected', ctx=Store())], value=Set(elts=[Constant(value=None)])), For(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='criterion', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='state', ctx=Load()), attr='criteria', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='_has_route_to_root', ctx=Load()), args=[Attribute(value=Name(id='state', ctx=Load()), attr='criteria', ctx=Load()), Name(id='key', ctx=Load()), Name(id='all_keys', ctx=Load()), Name(id='connected', ctx=Load())], keywords=[])), body=[Continue()], orelse=[]), If(test=Compare(left=Name(id='key', ctx=Load()), ops=[NotIn()], comparators=[Name(id='graph', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='graph', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='p', ctx=Store()), iter=Call(func=Attribute(value=Name(id='criterion', ctx=Load()), attr='iter_parent', ctx=Load()), args=[], keywords=[]), body=[Try(body=[Assign(targets=[Name(id='pkey', ctx=Store())], value=Subscript(value=Name(id='all_keys', ctx=Load()), slice=Call(func=Name(id='id', ctx=Load()), args=[Name(id='p', ctx=Load())], keywords=[]), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Continue()])], orelse=[], finalbody=[]), If(test=Compare(left=Name(id='pkey', ctx=Load()), ops=[NotIn()], comparators=[Name(id='graph', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='graph', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='pkey', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='graph', ctx=Load()), attr='connect', ctx=Load()), args=[Name(id='pkey', ctx=Load()), Name(id='key', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Call(func=Name(id='Result', ctx=Load()), args=[], keywords=[keyword(arg='mapping', value=DictComp(key=Name(id='k', ctx=Load()), value=Name(id='v', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='mapping', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[Compare(left=Name(id='k', ctx=Load()), ops=[In()], comparators=[Name(id='connected', ctx=Load())])], is_async=0)])), keyword(arg='graph', value=Name(id='graph', ctx=Load())), keyword(arg='criteria', value=Attribute(value=Name(id='state', ctx=Load()), attr='criteria', ctx=Load()))]))], decorator_list=[]), ClassDef(name='Resolver', bases=[Name(id='AbstractResolver', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='The thing that performs the actual resolution work.')), Assign(targets=[Name(id='base_exception', ctx=Store())], value=Name(id='ResolverException', ctx=Load())), FunctionDef(name='resolve', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='requirements'), arg(arg='max_rounds')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=100)]), body=[Expr(value=Constant(value='Take a collection of constraints, spit out the resolution result.\n\n        The return value is a representation to the final resolution result. It\n        is a tuple subclass with three public members:\n\n        * `mapping`: A dict of resolved candidates. Each key is an identifier\n            of a requirement (as returned by the provider\'s `identify` method),\n            and the value is the resolved candidate.\n        * `graph`: A `DirectedGraph` instance representing the dependency tree.\n            The vertices are keys of `mapping`, and each edge represents *why*\n            a particular package is included. A special vertex `None` is\n            included to represent parents of user-supplied requirements.\n        * `criteria`: A dict of "criteria" that hold detailed information on\n            how edges in the graph are derived. Each key is an identifier of a\n            requirement, and the value is a `Criterion` instance.\n\n        The following exceptions may be raised if a resolution cannot be found:\n\n        * `ResolutionImpossible`: A resolution cannot be found for the given\n            combination of requirements. The `causes` attribute of the\n            exception is a list of (requirement, parent), giving the\n            requirements that could not be satisfied.\n        * `ResolutionTooDeep`: The dependency tree is too deeply nested and\n            the resolver gave up. This is usually caused by a circular\n            dependency, but you can try to resolve this by increasing the\n            `max_rounds` argument.\n        ')), Assign(targets=[Name(id='resolution', ctx=Store())], value=Call(func=Name(id='Resolution', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='provider', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='reporter', ctx=Load())], keywords=[])), Assign(targets=[Name(id='state', ctx=Store())], value=Call(func=Attribute(value=Name(id='resolution', ctx=Load()), attr='resolve', ctx=Load()), args=[Name(id='requirements', ctx=Load())], keywords=[keyword(arg='max_rounds', value=Name(id='max_rounds', ctx=Load()))])), Return(value=Call(func=Name(id='_build_result', ctx=Load()), args=[Name(id='state', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[])], type_ignores=[])