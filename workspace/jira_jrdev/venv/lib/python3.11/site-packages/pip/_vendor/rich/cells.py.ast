Module(body=[Import(names=[alias(name='re')]), ImportFrom(module='functools', names=[alias(name='lru_cache')], level=0), ImportFrom(module='typing', names=[alias(name='Callable'), alias(name='List')], level=0), ImportFrom(module='_cell_widths', names=[alias(name='CELL_WIDTHS')], level=1), Assign(targets=[Name(id='_is_single_cell_widths', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='^[ -o\xa0˿Ͱ-҂]*$')], keywords=[]), attr='match', ctx=Load())), FunctionDef(name='cached_cell_len', args=arguments(posonlyargs=[], args=[arg(arg='text', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get the number of cells required to display text.\n\n    This method always caches, which may use up a lot of memory. It is recommended to use\n    `cell_len` over this method.\n\n    Args:\n        text (str): Text to display.\n\n    Returns:\n        int: Get the number of cells required to display text.\n    ')), Assign(targets=[Name(id='_get_size', ctx=Store())], value=Name(id='get_character_cell_size', ctx=Load())), Assign(targets=[Name(id='total_size', ctx=Store())], value=Call(func=Name(id='sum', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='_get_size', ctx=Load()), args=[Name(id='character', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='character', ctx=Store()), iter=Name(id='text', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Return(value=Name(id='total_size', ctx=Load()))], decorator_list=[Call(func=Name(id='lru_cache', ctx=Load()), args=[Constant(value=4096)], keywords=[])], returns=Name(id='int', ctx=Load())), FunctionDef(name='cell_len', args=arguments(posonlyargs=[], args=[arg(arg='text', annotation=Name(id='str', ctx=Load())), arg(arg='_cell_len', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='str', ctx=Load())], ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='cached_cell_len', ctx=Load())]), body=[Expr(value=Constant(value='Get the number of cells required to display text.\n\n    Args:\n        text (str): Text to display.\n\n    Returns:\n        int: Get the number of cells required to display text.\n    ')), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Constant(value=512)]), body=[Return(value=Call(func=Name(id='_cell_len', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='_get_size', ctx=Store())], value=Name(id='get_character_cell_size', ctx=Load())), Assign(targets=[Name(id='total_size', ctx=Store())], value=Call(func=Name(id='sum', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='_get_size', ctx=Load()), args=[Name(id='character', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='character', ctx=Store()), iter=Name(id='text', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Return(value=Name(id='total_size', ctx=Load()))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='get_character_cell_size', args=arguments(posonlyargs=[], args=[arg(arg='character', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get the cell size of a character.\n\n    Args:\n        character (str): A single character.\n\n    Returns:\n        int: Number of cells (0, 1 or 2) occupied by that character.\n    ')), Return(value=Call(func=Name(id='_get_codepoint_cell_size', ctx=Load()), args=[Call(func=Name(id='ord', ctx=Load()), args=[Name(id='character', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[Call(func=Name(id='lru_cache', ctx=Load()), args=[], keywords=[keyword(arg='maxsize', value=Constant(value=4096))])], returns=Name(id='int', ctx=Load())), FunctionDef(name='_get_codepoint_cell_size', args=arguments(posonlyargs=[], args=[arg(arg='codepoint', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get the cell size of a character.\n\n    Args:\n        codepoint (int): Codepoint of a character.\n\n    Returns:\n        int: Number of cells (0, 1 or 2) occupied by that character.\n    ')), Assign(targets=[Name(id='_table', ctx=Store())], value=Name(id='CELL_WIDTHS', ctx=Load())), Assign(targets=[Name(id='lower_bound', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='upper_bound', ctx=Store())], value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='_table', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))), Assign(targets=[Name(id='index', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='lower_bound', ctx=Load()), op=Add(), right=Name(id='upper_bound', ctx=Load())), op=FloorDiv(), right=Constant(value=2))), While(test=Constant(value=True), body=[Assign(targets=[Tuple(elts=[Name(id='start', ctx=Store()), Name(id='end', ctx=Store()), Name(id='width', ctx=Store())], ctx=Store())], value=Subscript(value=Name(id='_table', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())), If(test=Compare(left=Name(id='codepoint', ctx=Load()), ops=[Lt()], comparators=[Name(id='start', ctx=Load())]), body=[Assign(targets=[Name(id='upper_bound', ctx=Store())], value=BinOp(left=Name(id='index', ctx=Load()), op=Sub(), right=Constant(value=1)))], orelse=[If(test=Compare(left=Name(id='codepoint', ctx=Load()), ops=[Gt()], comparators=[Name(id='end', ctx=Load())]), body=[Assign(targets=[Name(id='lower_bound', ctx=Store())], value=BinOp(left=Name(id='index', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[Return(value=IfExp(test=Compare(left=Name(id='width', ctx=Load()), ops=[Eq()], comparators=[UnaryOp(op=USub(), operand=Constant(value=1))]), body=Constant(value=0), orelse=Name(id='width', ctx=Load())))])]), If(test=Compare(left=Name(id='upper_bound', ctx=Load()), ops=[Lt()], comparators=[Name(id='lower_bound', ctx=Load())]), body=[Break()], orelse=[]), Assign(targets=[Name(id='index', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='lower_bound', ctx=Load()), op=Add(), right=Name(id='upper_bound', ctx=Load())), op=FloorDiv(), right=Constant(value=2)))], orelse=[]), Return(value=Constant(value=1))], decorator_list=[Call(func=Name(id='lru_cache', ctx=Load()), args=[], keywords=[keyword(arg='maxsize', value=Constant(value=4096))])], returns=Name(id='int', ctx=Load())), FunctionDef(name='set_cell_size', args=arguments(posonlyargs=[], args=[arg(arg='text', annotation=Name(id='str', ctx=Load())), arg(arg='total', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Set the length of a string to fit within given number of cells.')), If(test=Call(func=Name(id='_is_single_cell_widths', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='size', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='size', ctx=Load()), ops=[Lt()], comparators=[Name(id='total', ctx=Load())]), body=[Return(value=BinOp(left=Name(id='text', ctx=Load()), op=Add(), right=BinOp(left=Constant(value=' '), op=Mult(), right=BinOp(left=Name(id='total', ctx=Load()), op=Sub(), right=Name(id='size', ctx=Load())))))], orelse=[]), Return(value=Subscript(value=Name(id='text', ctx=Load()), slice=Slice(upper=Name(id='total', ctx=Load())), ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='total', ctx=Load()), ops=[LtE()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=''))], orelse=[]), Assign(targets=[Name(id='cell_size', ctx=Store())], value=Call(func=Name(id='cell_len', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='cell_size', ctx=Load()), ops=[Eq()], comparators=[Name(id='total', ctx=Load())]), body=[Return(value=Name(id='text', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='cell_size', ctx=Load()), ops=[Lt()], comparators=[Name(id='total', ctx=Load())]), body=[Return(value=BinOp(left=Name(id='text', ctx=Load()), op=Add(), right=BinOp(left=Constant(value=' '), op=Mult(), right=BinOp(left=Name(id='total', ctx=Load()), op=Sub(), right=Name(id='cell_size', ctx=Load())))))], orelse=[]), Assign(targets=[Name(id='start', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='end', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[])), While(test=Constant(value=True), body=[Assign(targets=[Name(id='pos', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='start', ctx=Load()), op=Add(), right=Name(id='end', ctx=Load())), op=FloorDiv(), right=Constant(value=2))), Assign(targets=[Name(id='before', ctx=Store())], value=Subscript(value=Name(id='text', ctx=Load()), slice=Slice(upper=BinOp(left=Name(id='pos', ctx=Load()), op=Add(), right=Constant(value=1))), ctx=Load())), Assign(targets=[Name(id='before_len', ctx=Store())], value=Call(func=Name(id='cell_len', ctx=Load()), args=[Name(id='before', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='before_len', ctx=Load()), ops=[Eq()], comparators=[BinOp(left=Name(id='total', ctx=Load()), op=Add(), right=Constant(value=1))]), Compare(left=Call(func=Name(id='cell_len', ctx=Load()), args=[Subscript(value=Name(id='before', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=2)])]), body=[Return(value=BinOp(left=Subscript(value=Name(id='before', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), op=Add(), right=Constant(value=' ')))], orelse=[]), If(test=Compare(left=Name(id='before_len', ctx=Load()), ops=[Eq()], comparators=[Name(id='total', ctx=Load())]), body=[Return(value=Name(id='before', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='before_len', ctx=Load()), ops=[Gt()], comparators=[Name(id='total', ctx=Load())]), body=[Assign(targets=[Name(id='end', ctx=Store())], value=Name(id='pos', ctx=Load()))], orelse=[Assign(targets=[Name(id='start', ctx=Store())], value=Name(id='pos', ctx=Load()))])], orelse=[])], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='chop_cells', args=arguments(posonlyargs=[], args=[arg(arg='text', annotation=Name(id='str', ctx=Load())), arg(arg='max_size', annotation=Name(id='int', ctx=Load())), arg(arg='position', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[Expr(value=Constant(value='Break text in to equal (cell) length strings, returning the characters in reverse\n    order')), Assign(targets=[Name(id='_get_character_cell_size', ctx=Store())], value=Name(id='get_character_cell_size', ctx=Load())), Assign(targets=[Name(id='characters', ctx=Store())], value=ListComp(elt=Tuple(elts=[Name(id='character', ctx=Load()), Call(func=Name(id='_get_character_cell_size', ctx=Load()), args=[Name(id='character', ctx=Load())], keywords=[])], ctx=Load()), generators=[comprehension(target=Name(id='character', ctx=Store()), iter=Name(id='text', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='total_size', ctx=Store())], value=Name(id='position', ctx=Load())), AnnAssign(target=Name(id='lines', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load()), value=List(elts=[List(elts=[], ctx=Load())], ctx=Load()), simple=1), Assign(targets=[Name(id='append', ctx=Store())], value=Attribute(value=Subscript(value=Name(id='lines', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), attr='append', ctx=Load())), For(target=Tuple(elts=[Name(id='character', ctx=Store()), Name(id='size', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='reversed', ctx=Load()), args=[Name(id='characters', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='total_size', ctx=Load()), op=Add(), right=Name(id='size', ctx=Load())), ops=[Gt()], comparators=[Name(id='max_size', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='append', ctx=Load()), args=[List(elts=[Name(id='character', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='append', ctx=Store())], value=Attribute(value=Subscript(value=Name(id='lines', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), attr='append', ctx=Load())), Assign(targets=[Name(id='total_size', ctx=Store())], value=Name(id='size', ctx=Load()))], orelse=[AugAssign(target=Name(id='total_size', ctx=Store()), op=Add(), value=Name(id='size', ctx=Load())), Expr(value=Call(func=Name(id='append', ctx=Load()), args=[Name(id='character', ctx=Load())], keywords=[]))])], orelse=[]), Return(value=ListComp(elt=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='line', ctx=Store()), iter=Name(id='lines', ctx=Load()), ifs=[], is_async=0)]))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__')]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Name(id='get_character_cell_size', ctx=Load()), args=[Constant(value='😽')], keywords=[])], keywords=[])), For(target=Name(id='line', ctx=Store()), iter=Call(func=Name(id='chop_cells', ctx=Load()), args=[Constant(value='这是对亚洲语言支持的测试。面对模棱两可的想法，拒绝猜测的诱惑。'), Constant(value=8)], keywords=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='n', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=80), Constant(value=1), UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[BinOp(left=Call(func=Name(id='set_cell_size', ctx=Load()), args=[Constant(value='这是对亚洲语言支持的测试。面对模棱两可的想法，拒绝猜测的诱惑。'), Name(id='n', ctx=Load())], keywords=[]), op=Add(), right=Constant(value='|'))], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[BinOp(left=Constant(value='x'), op=Mult(), right=Name(id='n', ctx=Load()))], keywords=[]))], orelse=[])], orelse=[])], type_ignores=[])