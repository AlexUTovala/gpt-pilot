Module(body=[Expr(value=Constant(value="\nThis module provides a pool manager that uses Google App Engine's\n`URLFetch Service <https://cloud.google.com/appengine/docs/python/urlfetch>`_.\n\nExample usage::\n\n    from pip._vendor.urllib3 import PoolManager\n    from pip._vendor.urllib3.contrib.appengine import AppEngineManager, is_appengine_sandbox\n\n    if is_appengine_sandbox():\n        # AppEngineManager uses AppEngine's URLFetch API behind the scenes\n        http = AppEngineManager()\n    else:\n        # PoolManager uses a socket-level API behind the scenes\n        http = PoolManager()\n\n    r = http.request('GET', 'https://google.com/')\n\nThere are `limitations <https://cloud.google.com/appengine/docs/python/urlfetch/#Python_Quotas_and_limits>`_ to the URLFetch service and it may not be\nthe best choice for your application. There are three options for using\nurllib3 on Google App Engine:\n\n1. You can use :class:`AppEngineManager` with URLFetch. URLFetch is\n   cost-effective in many circumstances as long as your usage is within the\n   limitations.\n2. You can use a normal :class:`~urllib3.PoolManager` by enabling sockets.\n   Sockets also have `limitations and restrictions\n   <https://cloud.google.com/appengine/docs/python/sockets/   #limitations-and-restrictions>`_ and have a lower free quota than URLFetch.\n   To use sockets, be sure to specify the following in your ``app.yaml``::\n\n        env_variables:\n            GAE_USE_SOCKETS_HTTPLIB : 'true'\n\n3. If you are using `App Engine Flexible\n<https://cloud.google.com/appengine/docs/flexible/>`_, you can use the standard\n:class:`PoolManager` without any configuration or special environment variables.\n")), ImportFrom(module='__future__', names=[alias(name='absolute_import')], level=0), Import(names=[alias(name='io')]), Import(names=[alias(name='logging')]), Import(names=[alias(name='warnings')]), ImportFrom(module='exceptions', names=[alias(name='HTTPError'), alias(name='HTTPWarning'), alias(name='MaxRetryError'), alias(name='ProtocolError'), alias(name='SSLError'), alias(name='TimeoutError')], level=2), ImportFrom(module='packages.six.moves.urllib.parse', names=[alias(name='urljoin')], level=2), ImportFrom(module='request', names=[alias(name='RequestMethods')], level=2), ImportFrom(module='response', names=[alias(name='HTTPResponse')], level=2), ImportFrom(module='util.retry', names=[alias(name='Retry')], level=2), ImportFrom(module='util.timeout', names=[alias(name='Timeout')], level=2), ImportFrom(names=[alias(name='_appengine_environ')], level=1), Try(body=[ImportFrom(module='google.appengine.api', names=[alias(name='urlfetch')], level=0)], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Assign(targets=[Name(id='urlfetch', ctx=Store())], value=Constant(value=None))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='log', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), ClassDef(name='AppEnginePlatformWarning', bases=[Name(id='HTTPWarning', ctx=Load())], keywords=[], body=[Pass()], decorator_list=[]), ClassDef(name='AppEnginePlatformError', bases=[Name(id='HTTPError', ctx=Load())], keywords=[], body=[Pass()], decorator_list=[]), ClassDef(name='AppEngineManager', bases=[Name(id='RequestMethods', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Connection manager for Google App Engine sandbox applications.\n\n    This manager uses the URLFetch service directly instead of using the\n    emulated httplib, and is subject to URLFetch limitations as described in\n    the App Engine documentation `here\n    <https://cloud.google.com/appengine/docs/python/urlfetch>`_.\n\n    Notably it will raise an :class:`AppEnginePlatformError` if:\n        * URLFetch is not available.\n        * If you attempt to use this on App Engine Flexible, as full socket\n          support is available.\n        * If a request size is more than 10 megabytes.\n        * If a response size is more than 32 megabytes.\n        * If you use an unsupported request method such as OPTIONS.\n\n    Beyond those cases, it will raise normal urllib3 errors.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='headers'), arg(arg='retries'), arg(arg='validate_certificate'), arg(arg='urlfetch_retries')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=True), Constant(value=True)]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='urlfetch', ctx=Load())), body=[Raise(exc=Call(func=Name(id='AppEnginePlatformError', ctx=Load()), args=[Constant(value='URLFetch is not available in this environment.')], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value='urllib3 is using URLFetch on Google App Engine sandbox instead of sockets. To use sockets directly instead of URLFetch see https://urllib3.readthedocs.io/en/1.26.x/reference/urllib3.contrib.html.'), Name(id='AppEnginePlatformWarning', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='RequestMethods', ctx=Load()), attr='__init__', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='headers', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='validate_certificate', ctx=Store())], value=Name(id='validate_certificate', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='urlfetch_retries', ctx=Store())], value=Name(id='urlfetch_retries', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='retries', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='retries', ctx=Load()), Attribute(value=Name(id='Retry', ctx=Load()), attr='DEFAULT', ctx=Load())]))], decorator_list=[]), FunctionDef(name='__enter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Name(id='self', ctx=Load()))], decorator_list=[]), FunctionDef(name='__exit__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='exc_type'), arg(arg='exc_val'), arg(arg='exc_tb')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=False))], decorator_list=[]), FunctionDef(name='urlopen', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='method'), arg(arg='url'), arg(arg='body'), arg(arg='headers'), arg(arg='retries'), arg(arg='redirect'), arg(arg='timeout')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='response_kw'), defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=True), Attribute(value=Name(id='Timeout', ctx=Load()), attr='DEFAULT_TIMEOUT', ctx=Load())]), body=[Assign(targets=[Name(id='retries', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_retries', ctx=Load()), args=[Name(id='retries', ctx=Load()), Name(id='redirect', ctx=Load())], keywords=[])), Try(body=[Assign(targets=[Name(id='follow_redirects', ctx=Store())], value=BoolOp(op=And(), values=[Name(id='redirect', ctx=Load()), Compare(left=Attribute(value=Name(id='retries', ctx=Load()), attr='redirect', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=0)]), Attribute(value=Name(id='retries', ctx=Load()), attr='total', ctx=Load())])), Assign(targets=[Name(id='response', ctx=Store())], value=Call(func=Attribute(value=Name(id='urlfetch', ctx=Load()), attr='fetch', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[keyword(arg='payload', value=Name(id='body', ctx=Load())), keyword(arg='method', value=Name(id='method', ctx=Load())), keyword(arg='headers', value=BoolOp(op=Or(), values=[Name(id='headers', ctx=Load()), Dict(keys=[], values=[])])), keyword(arg='allow_truncated', value=Constant(value=False)), keyword(arg='follow_redirects', value=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='urlfetch_retries', ctx=Load()), Name(id='follow_redirects', ctx=Load())])), keyword(arg='deadline', value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_absolute_timeout', ctx=Load()), args=[Name(id='timeout', ctx=Load())], keywords=[])), keyword(arg='validate_certificate', value=Attribute(value=Name(id='self', ctx=Load()), attr='validate_certificate', ctx=Load()))]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='urlfetch', ctx=Load()), attr='DeadlineExceededError', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='TimeoutError', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='e', ctx=Load())], keywords=[]))]), ExceptHandler(type=Attribute(value=Name(id='urlfetch', ctx=Load()), attr='InvalidURLError', ctx=Load()), name='e', body=[If(test=Compare(left=Constant(value='too large'), ops=[In()], comparators=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[])]), body=[Raise(exc=Call(func=Name(id='AppEnginePlatformError', ctx=Load()), args=[Constant(value='URLFetch request too large, URLFetch only supports requests up to 10mb in size.'), Name(id='e', ctx=Load())], keywords=[]))], orelse=[]), Raise(exc=Call(func=Name(id='ProtocolError', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]))]), ExceptHandler(type=Attribute(value=Name(id='urlfetch', ctx=Load()), attr='DownloadError', ctx=Load()), name='e', body=[If(test=Compare(left=Constant(value='Too many redirects'), ops=[In()], comparators=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[])]), body=[Raise(exc=Call(func=Name(id='MaxRetryError', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='url', ctx=Load())], keywords=[keyword(arg='reason', value=Name(id='e', ctx=Load()))]))], orelse=[]), Raise(exc=Call(func=Name(id='ProtocolError', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]))]), ExceptHandler(type=Attribute(value=Name(id='urlfetch', ctx=Load()), attr='ResponseTooLargeError', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='AppEnginePlatformError', ctx=Load()), args=[Constant(value='URLFetch response too large, URLFetch only supportsresponses up to 32mb in size.'), Name(id='e', ctx=Load())], keywords=[]))]), ExceptHandler(type=Attribute(value=Name(id='urlfetch', ctx=Load()), attr='SSLCertificateError', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='SSLError', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]))]), ExceptHandler(type=Attribute(value=Name(id='urlfetch', ctx=Load()), attr='InvalidMethodError', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='AppEnginePlatformError', ctx=Load()), args=[BinOp(left=Constant(value='URLFetch does not support method: %s'), op=Mod(), right=Name(id='method', ctx=Load())), Name(id='e', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='http_response', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_urlfetch_response_to_http_response', ctx=Load()), args=[Name(id='response', ctx=Load())], keywords=[keyword(arg='retries', value=Name(id='retries', ctx=Load())), keyword(value=Name(id='response_kw', ctx=Load()))])), Assign(targets=[Name(id='redirect_location', ctx=Store())], value=BoolOp(op=And(), values=[Name(id='redirect', ctx=Load()), Call(func=Attribute(value=Name(id='http_response', ctx=Load()), attr='get_redirect_location', ctx=Load()), args=[], keywords=[])])), If(test=Name(id='redirect_location', ctx=Load()), body=[If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='urlfetch_retries', ctx=Load()), Attribute(value=Name(id='retries', ctx=Load()), attr='raise_on_redirect', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='MaxRetryError', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='url', ctx=Load()), Constant(value='too many redirects')], keywords=[]))], orelse=[If(test=Compare(left=Attribute(value=Name(id='http_response', ctx=Load()), attr='status', ctx=Load()), ops=[Eq()], comparators=[Constant(value=303)]), body=[Assign(targets=[Name(id='method', ctx=Store())], value=Constant(value='GET'))], orelse=[]), Try(body=[Assign(targets=[Name(id='retries', ctx=Store())], value=Call(func=Attribute(value=Name(id='retries', ctx=Load()), attr='increment', ctx=Load()), args=[Name(id='method', ctx=Load()), Name(id='url', ctx=Load())], keywords=[keyword(arg='response', value=Name(id='http_response', ctx=Load())), keyword(arg='_pool', value=Name(id='self', ctx=Load()))]))], handlers=[ExceptHandler(type=Name(id='MaxRetryError', ctx=Load()), body=[If(test=Attribute(value=Name(id='retries', ctx=Load()), attr='raise_on_redirect', ctx=Load()), body=[Raise(exc=Call(func=Name(id='MaxRetryError', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='url', ctx=Load()), Constant(value='too many redirects')], keywords=[]))], orelse=[]), Return(value=Name(id='http_response', ctx=Load()))])], orelse=[], finalbody=[]), Expr(value=Call(func=Attribute(value=Name(id='retries', ctx=Load()), attr='sleep_for_retry', ctx=Load()), args=[Name(id='http_response', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Redirecting %s -> %s'), Name(id='url', ctx=Load()), Name(id='redirect_location', ctx=Load())], keywords=[])), Assign(targets=[Name(id='redirect_url', ctx=Store())], value=Call(func=Name(id='urljoin', ctx=Load()), args=[Name(id='url', ctx=Load()), Name(id='redirect_location', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='urlopen', ctx=Load()), args=[Name(id='method', ctx=Load()), Name(id='redirect_url', ctx=Load()), Name(id='body', ctx=Load()), Name(id='headers', ctx=Load())], keywords=[keyword(arg='retries', value=Name(id='retries', ctx=Load())), keyword(arg='redirect', value=Name(id='redirect', ctx=Load())), keyword(arg='timeout', value=Name(id='timeout', ctx=Load())), keyword(value=Name(id='response_kw', ctx=Load()))]))])], orelse=[]), Assign(targets=[Name(id='has_retry_after', ctx=Store())], value=Call(func=Name(id='bool', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='http_response', ctx=Load()), attr='headers', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='Retry-After')], keywords=[])], keywords=[])), If(test=Call(func=Attribute(value=Name(id='retries', ctx=Load()), attr='is_retry', ctx=Load()), args=[Name(id='method', ctx=Load()), Attribute(value=Name(id='http_response', ctx=Load()), attr='status', ctx=Load()), Name(id='has_retry_after', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='retries', ctx=Store())], value=Call(func=Attribute(value=Name(id='retries', ctx=Load()), attr='increment', ctx=Load()), args=[Name(id='method', ctx=Load()), Name(id='url', ctx=Load())], keywords=[keyword(arg='response', value=Name(id='http_response', ctx=Load())), keyword(arg='_pool', value=Name(id='self', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Retry: %s'), Name(id='url', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='retries', ctx=Load()), attr='sleep', ctx=Load()), args=[Name(id='http_response', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='urlopen', ctx=Load()), args=[Name(id='method', ctx=Load()), Name(id='url', ctx=Load())], keywords=[keyword(arg='body', value=Name(id='body', ctx=Load())), keyword(arg='headers', value=Name(id='headers', ctx=Load())), keyword(arg='retries', value=Name(id='retries', ctx=Load())), keyword(arg='redirect', value=Name(id='redirect', ctx=Load())), keyword(arg='timeout', value=Name(id='timeout', ctx=Load())), keyword(value=Name(id='response_kw', ctx=Load()))]))], orelse=[]), Return(value=Name(id='http_response', ctx=Load()))], decorator_list=[]), FunctionDef(name='_urlfetch_response_to_http_response', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='urlfetch_resp')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='response_kw'), defaults=[]), body=[If(test=Call(func=Name(id='is_prod_appengine', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='content_encoding', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='urlfetch_resp', ctx=Load()), attr='headers', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='content-encoding')], keywords=[])), If(test=Compare(left=Name(id='content_encoding', ctx=Load()), ops=[Eq()], comparators=[Constant(value='deflate')]), body=[Delete(targets=[Subscript(value=Attribute(value=Name(id='urlfetch_resp', ctx=Load()), attr='headers', ctx=Load()), slice=Constant(value='content-encoding'), ctx=Del())])], orelse=[])], orelse=[]), Assign(targets=[Name(id='transfer_encoding', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='urlfetch_resp', ctx=Load()), attr='headers', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='transfer-encoding')], keywords=[])), If(test=Compare(left=Name(id='transfer_encoding', ctx=Load()), ops=[Eq()], comparators=[Constant(value='chunked')]), body=[Assign(targets=[Name(id='encodings', ctx=Store())], value=Call(func=Attribute(value=Name(id='transfer_encoding', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=',')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='encodings', ctx=Load()), attr='remove', ctx=Load()), args=[Constant(value='chunked')], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='urlfetch_resp', ctx=Load()), attr='headers', ctx=Load()), slice=Constant(value='transfer-encoding'), ctx=Store())], value=Call(func=Attribute(value=Constant(value=','), attr='join', ctx=Load()), args=[Name(id='encodings', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='original_response', ctx=Store())], value=Call(func=Name(id='HTTPResponse', ctx=Load()), args=[], keywords=[keyword(arg='body', value=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='BytesIO', ctx=Load()), args=[Attribute(value=Name(id='urlfetch_resp', ctx=Load()), attr='content', ctx=Load())], keywords=[])), keyword(arg='msg', value=Attribute(value=Name(id='urlfetch_resp', ctx=Load()), attr='header_msg', ctx=Load())), keyword(arg='headers', value=Attribute(value=Name(id='urlfetch_resp', ctx=Load()), attr='headers', ctx=Load())), keyword(arg='status', value=Attribute(value=Name(id='urlfetch_resp', ctx=Load()), attr='status_code', ctx=Load())), keyword(value=Name(id='response_kw', ctx=Load()))])), Return(value=Call(func=Name(id='HTTPResponse', ctx=Load()), args=[], keywords=[keyword(arg='body', value=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='BytesIO', ctx=Load()), args=[Attribute(value=Name(id='urlfetch_resp', ctx=Load()), attr='content', ctx=Load())], keywords=[])), keyword(arg='headers', value=Attribute(value=Name(id='urlfetch_resp', ctx=Load()), attr='headers', ctx=Load())), keyword(arg='status', value=Attribute(value=Name(id='urlfetch_resp', ctx=Load()), attr='status_code', ctx=Load())), keyword(arg='original_response', value=Name(id='original_response', ctx=Load())), keyword(value=Name(id='response_kw', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='_get_absolute_timeout', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='timeout')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='timeout', ctx=Load()), ops=[Is()], comparators=[Attribute(value=Name(id='Timeout', ctx=Load()), attr='DEFAULT_TIMEOUT', ctx=Load())]), body=[Return(value=Constant(value=None))], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='timeout', ctx=Load()), Name(id='Timeout', ctx=Load())], keywords=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='timeout', ctx=Load()), attr='_read', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='timeout', ctx=Load()), attr='_connect', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value='URLFetch does not support granular timeout settings, reverting to total or default URLFetch timeout.'), Name(id='AppEnginePlatformWarning', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Attribute(value=Name(id='timeout', ctx=Load()), attr='total', ctx=Load()))], orelse=[]), Return(value=Name(id='timeout', ctx=Load()))], decorator_list=[]), FunctionDef(name='_get_retries', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='retries'), arg(arg='redirect')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='retries', ctx=Load()), Name(id='Retry', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='retries', ctx=Store())], value=Call(func=Attribute(value=Name(id='Retry', ctx=Load()), attr='from_int', ctx=Load()), args=[Name(id='retries', ctx=Load())], keywords=[keyword(arg='redirect', value=Name(id='redirect', ctx=Load())), keyword(arg='default', value=Attribute(value=Name(id='self', ctx=Load()), attr='retries', ctx=Load()))]))], orelse=[]), If(test=BoolOp(op=Or(), values=[Attribute(value=Name(id='retries', ctx=Load()), attr='connect', ctx=Load()), Attribute(value=Name(id='retries', ctx=Load()), attr='read', ctx=Load()), Attribute(value=Name(id='retries', ctx=Load()), attr='redirect', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value='URLFetch only supports total retries and does not recognize connect, read, or redirect retry parameters.'), Name(id='AppEnginePlatformWarning', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='retries', ctx=Load()))], decorator_list=[])], decorator_list=[]), Assign(targets=[Name(id='is_appengine', ctx=Store())], value=Attribute(value=Name(id='_appengine_environ', ctx=Load()), attr='is_appengine', ctx=Load())), Assign(targets=[Name(id='is_appengine_sandbox', ctx=Store())], value=Attribute(value=Name(id='_appengine_environ', ctx=Load()), attr='is_appengine_sandbox', ctx=Load())), Assign(targets=[Name(id='is_local_appengine', ctx=Store())], value=Attribute(value=Name(id='_appengine_environ', ctx=Load()), attr='is_local_appengine', ctx=Load())), Assign(targets=[Name(id='is_prod_appengine', ctx=Store())], value=Attribute(value=Name(id='_appengine_environ', ctx=Load()), attr='is_prod_appengine', ctx=Load())), Assign(targets=[Name(id='is_prod_appengine_mvms', ctx=Store())], value=Attribute(value=Name(id='_appengine_environ', ctx=Load()), attr='is_prod_appengine_mvms', ctx=Load()))], type_ignores=[])