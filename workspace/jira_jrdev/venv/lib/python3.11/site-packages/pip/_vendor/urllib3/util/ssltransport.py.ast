Module(body=[Import(names=[alias(name='io')]), Import(names=[alias(name='socket')]), Import(names=[alias(name='ssl')]), ImportFrom(module='exceptions', names=[alias(name='ProxySchemeUnsupported')], level=2), ImportFrom(module='packages', names=[alias(name='six')], level=2), Assign(targets=[Name(id='SSL_BLOCKSIZE', ctx=Store())], value=Constant(value=16384)), ClassDef(name='SSLTransport', bases=[], keywords=[], body=[Expr(value=Constant(value="\n    The SSLTransport wraps an existing socket and establishes an SSL connection.\n\n    Contrary to Python's implementation of SSLSocket, it allows you to chain\n    multiple TLS connections together. It's particularly useful if you need to\n    implement TLS within TLS.\n\n    The class supports most of the socket API operations.\n    ")), FunctionDef(name='_validate_ssl_context_for_tls_in_tls', args=arguments(posonlyargs=[], args=[arg(arg='ssl_context')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Raises a ProxySchemeUnsupported if the provided ssl_context can't be used\n        for TLS in TLS.\n\n        The only requirement is that the ssl_context provides the 'wrap_bio'\n        methods.\n        ")), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='ssl_context', ctx=Load()), Constant(value='wrap_bio')], keywords=[])), body=[If(test=Attribute(value=Name(id='six', ctx=Load()), attr='PY2', ctx=Load()), body=[Raise(exc=Call(func=Name(id='ProxySchemeUnsupported', ctx=Load()), args=[Constant(value="TLS in TLS requires SSLContext.wrap_bio() which isn't supported on Python 2")], keywords=[]))], orelse=[Raise(exc=Call(func=Name(id='ProxySchemeUnsupported', ctx=Load()), args=[Constant(value="TLS in TLS requires SSLContext.wrap_bio() which isn't available on non-native SSLContext")], keywords=[]))])], orelse=[])], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='socket'), arg(arg='ssl_context'), arg(arg='server_hostname'), arg(arg='suppress_ragged_eofs')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=True)]), body=[Expr(value=Constant(value='\n        Create an SSLTransport around socket using the provided ssl_context.\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='incoming', ctx=Store())], value=Call(func=Attribute(value=Name(id='ssl', ctx=Load()), attr='MemoryBIO', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='outgoing', ctx=Store())], value=Call(func=Attribute(value=Name(id='ssl', ctx=Load()), attr='MemoryBIO', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='suppress_ragged_eofs', ctx=Store())], value=Name(id='suppress_ragged_eofs', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='socket', ctx=Store())], value=Name(id='socket', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='sslobj', ctx=Store())], value=Call(func=Attribute(value=Name(id='ssl_context', ctx=Load()), attr='wrap_bio', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='incoming', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='outgoing', ctx=Load())], keywords=[keyword(arg='server_hostname', value=Name(id='server_hostname', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_ssl_io_loop', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='sslobj', ctx=Load()), attr='do_handshake', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='__enter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Name(id='self', ctx=Load()))], decorator_list=[]), FunctionDef(name='__exit__', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='_'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='fileno', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='socket', ctx=Load()), attr='fileno', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='read', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='len'), arg(arg='buffer')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1024), Constant(value=None)]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_wrap_ssl_read', ctx=Load()), args=[Name(id='len', ctx=Load()), Name(id='buffer', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='recv', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='len'), arg(arg='flags')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1024), Constant(value=0)]), body=[If(test=Compare(left=Name(id='flags', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=0)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='non-zero flags not allowed in calls to recv')], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_wrap_ssl_read', ctx=Load()), args=[Name(id='len', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='recv_into', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='buffer'), arg(arg='nbytes'), arg(arg='flags')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=0)]), body=[If(test=Compare(left=Name(id='flags', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=0)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='non-zero flags not allowed in calls to recv_into')], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Name(id='buffer', ctx=Load()), Compare(left=Name(id='nbytes', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Name(id='nbytes', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='buffer', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='nbytes', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='nbytes', ctx=Store())], value=Constant(value=1024))], orelse=[])]), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='read', ctx=Load()), args=[Name(id='nbytes', ctx=Load()), Name(id='buffer', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='sendall', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data'), arg(arg='flags')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[If(test=Compare(left=Name(id='flags', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=0)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='non-zero flags not allowed in calls to sendall')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='count', ctx=Store())], value=Constant(value=0)), With(items=[withitem(context_expr=Call(func=Name(id='memoryview', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]), optional_vars=Name(id='view', ctx=Store())), withitem(context_expr=Call(func=Attribute(value=Name(id='view', ctx=Load()), attr='cast', ctx=Load()), args=[Constant(value='B')], keywords=[]), optional_vars=Name(id='byte_view', ctx=Store()))], body=[Assign(targets=[Name(id='amount', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='byte_view', ctx=Load())], keywords=[])), While(test=Compare(left=Name(id='count', ctx=Load()), ops=[Lt()], comparators=[Name(id='amount', ctx=Load())]), body=[Assign(targets=[Name(id='v', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='send', ctx=Load()), args=[Subscript(value=Name(id='byte_view', ctx=Load()), slice=Slice(lower=Name(id='count', ctx=Load())), ctx=Load())], keywords=[])), AugAssign(target=Name(id='count', ctx=Store()), op=Add(), value=Name(id='v', ctx=Load()))], orelse=[])])], decorator_list=[]), FunctionDef(name='send', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data'), arg(arg='flags')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[If(test=Compare(left=Name(id='flags', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=0)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='non-zero flags not allowed in calls to send')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='response', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_ssl_io_loop', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='sslobj', ctx=Load()), attr='write', ctx=Load()), Name(id='data', ctx=Load())], keywords=[])), Return(value=Name(id='response', ctx=Load()))], decorator_list=[]), FunctionDef(name='makefile', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='mode'), arg(arg='buffering'), arg(arg='encoding'), arg(arg='errors'), arg(arg='newline')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='r'), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value="\n        Python's httpclient uses makefile and buffered io when reading HTTP\n        messages and we need to support it.\n\n        This is unfortunately a copy and paste of socket.py makefile with small\n        changes to point to the socket directly.\n        ")), If(test=UnaryOp(op=Not(), operand=Compare(left=Call(func=Name(id='set', ctx=Load()), args=[Name(id='mode', ctx=Load())], keywords=[]), ops=[LtE()], comparators=[Set(elts=[Constant(value='r'), Constant(value='w'), Constant(value='b')])])), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='invalid mode %r (only r, w, b allowed)'), op=Mod(), right=Tuple(elts=[Name(id='mode', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Name(id='writing', ctx=Store())], value=Compare(left=Constant(value='w'), ops=[In()], comparators=[Name(id='mode', ctx=Load())])), Assign(targets=[Name(id='reading', ctx=Store())], value=BoolOp(op=Or(), values=[Compare(left=Constant(value='r'), ops=[In()], comparators=[Name(id='mode', ctx=Load())]), UnaryOp(op=Not(), operand=Name(id='writing', ctx=Load()))])), Assert(test=BoolOp(op=Or(), values=[Name(id='reading', ctx=Load()), Name(id='writing', ctx=Load())])), Assign(targets=[Name(id='binary', ctx=Store())], value=Compare(left=Constant(value='b'), ops=[In()], comparators=[Name(id='mode', ctx=Load())])), Assign(targets=[Name(id='rawmode', ctx=Store())], value=Constant(value='')), If(test=Name(id='reading', ctx=Load()), body=[AugAssign(target=Name(id='rawmode', ctx=Store()), op=Add(), value=Constant(value='r'))], orelse=[]), If(test=Name(id='writing', ctx=Load()), body=[AugAssign(target=Name(id='rawmode', ctx=Store()), op=Add(), value=Constant(value='w'))], orelse=[]), Assign(targets=[Name(id='raw', ctx=Store())], value=Call(func=Attribute(value=Name(id='socket', ctx=Load()), attr='SocketIO', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='rawmode', ctx=Load())], keywords=[])), AugAssign(target=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='socket', ctx=Load()), attr='_io_refs', ctx=Store()), op=Add(), value=Constant(value=1)), If(test=Compare(left=Name(id='buffering', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='buffering', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[]), If(test=Compare(left=Name(id='buffering', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='buffering', ctx=Store())], value=Attribute(value=Name(id='io', ctx=Load()), attr='DEFAULT_BUFFER_SIZE', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='buffering', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='binary', ctx=Load())), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='unbuffered streams must be binary')], keywords=[]))], orelse=[]), Return(value=Name(id='raw', ctx=Load()))], orelse=[]), If(test=BoolOp(op=And(), values=[Name(id='reading', ctx=Load()), Name(id='writing', ctx=Load())]), body=[Assign(targets=[Name(id='buffer', ctx=Store())], value=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='BufferedRWPair', ctx=Load()), args=[Name(id='raw', ctx=Load()), Name(id='raw', ctx=Load()), Name(id='buffering', ctx=Load())], keywords=[]))], orelse=[If(test=Name(id='reading', ctx=Load()), body=[Assign(targets=[Name(id='buffer', ctx=Store())], value=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='BufferedReader', ctx=Load()), args=[Name(id='raw', ctx=Load()), Name(id='buffering', ctx=Load())], keywords=[]))], orelse=[Assert(test=Name(id='writing', ctx=Load())), Assign(targets=[Name(id='buffer', ctx=Store())], value=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='BufferedWriter', ctx=Load()), args=[Name(id='raw', ctx=Load()), Name(id='buffering', ctx=Load())], keywords=[]))])]), If(test=Name(id='binary', ctx=Load()), body=[Return(value=Name(id='buffer', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='text', ctx=Store())], value=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='TextIOWrapper', ctx=Load()), args=[Name(id='buffer', ctx=Load()), Name(id='encoding', ctx=Load()), Name(id='errors', ctx=Load()), Name(id='newline', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='text', ctx=Load()), attr='mode', ctx=Store())], value=Name(id='mode', ctx=Load())), Return(value=Name(id='text', ctx=Load()))], decorator_list=[]), FunctionDef(name='unwrap', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_ssl_io_loop', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='sslobj', ctx=Load()), attr='unwrap', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='close', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='socket', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='getpeercert', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='binary_form')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='sslobj', ctx=Load()), attr='getpeercert', ctx=Load()), args=[Name(id='binary_form', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='version', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='sslobj', ctx=Load()), attr='version', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='cipher', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='sslobj', ctx=Load()), attr='cipher', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='selected_alpn_protocol', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='sslobj', ctx=Load()), attr='selected_alpn_protocol', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='selected_npn_protocol', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='sslobj', ctx=Load()), attr='selected_npn_protocol', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='shared_ciphers', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='sslobj', ctx=Load()), attr='shared_ciphers', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='compression', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='sslobj', ctx=Load()), attr='compression', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='settimeout', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='socket', ctx=Load()), attr='settimeout', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='gettimeout', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='socket', ctx=Load()), attr='gettimeout', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='_decref_socketios', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='socket', ctx=Load()), attr='_decref_socketios', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='_wrap_ssl_read', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='len'), arg(arg='buffer')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Try(body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_ssl_io_loop', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='sslobj', ctx=Load()), attr='read', ctx=Load()), Name(id='len', ctx=Load()), Name(id='buffer', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='ssl', ctx=Load()), attr='SSLError', ctx=Load()), name='e', body=[If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='e', ctx=Load()), attr='errno', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='ssl', ctx=Load()), attr='SSL_ERROR_EOF', ctx=Load())]), Attribute(value=Name(id='self', ctx=Load()), attr='suppress_ragged_eofs', ctx=Load())]), body=[Return(value=Constant(value=0))], orelse=[Raise()])])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='_ssl_io_loop', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='func')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Performs an I/O loop between incoming/outgoing and the socket.')), Assign(targets=[Name(id='should_loop', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='ret', ctx=Store())], value=Constant(value=None)), While(test=Name(id='should_loop', ctx=Load()), body=[Assign(targets=[Name(id='errno', ctx=Store())], value=Constant(value=None)), Try(body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Name(id='func', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='ssl', ctx=Load()), attr='SSLError', ctx=Load()), name='e', body=[If(test=Compare(left=Attribute(value=Name(id='e', ctx=Load()), attr='errno', ctx=Load()), ops=[NotIn()], comparators=[Tuple(elts=[Attribute(value=Name(id='ssl', ctx=Load()), attr='SSL_ERROR_WANT_READ', ctx=Load()), Attribute(value=Name(id='ssl', ctx=Load()), attr='SSL_ERROR_WANT_WRITE', ctx=Load())], ctx=Load())]), body=[Raise(exc=Name(id='e', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='errno', ctx=Store())], value=Attribute(value=Name(id='e', ctx=Load()), attr='errno', ctx=Load()))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='buf', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='outgoing', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='socket', ctx=Load()), attr='sendall', ctx=Load()), args=[Name(id='buf', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='errno', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='should_loop', ctx=Store())], value=Constant(value=False))], orelse=[If(test=Compare(left=Name(id='errno', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='ssl', ctx=Load()), attr='SSL_ERROR_WANT_READ', ctx=Load())]), body=[Assign(targets=[Name(id='buf', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='socket', ctx=Load()), attr='recv', ctx=Load()), args=[Name(id='SSL_BLOCKSIZE', ctx=Load())], keywords=[])), If(test=Name(id='buf', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='incoming', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='buf', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='incoming', ctx=Load()), attr='write_eof', ctx=Load()), args=[], keywords=[]))])], orelse=[])])], orelse=[]), Return(value=Name(id='ret', ctx=Load()))], decorator_list=[])], decorator_list=[])], type_ignores=[])