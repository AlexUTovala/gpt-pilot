Module(body=[Expr(value=Constant(value="\nrequests.exceptions\n~~~~~~~~~~~~~~~~~~~\n\nThis module contains the set of Requests' exceptions.\n")), ImportFrom(module='pip._vendor.urllib3.exceptions', names=[alias(name='HTTPError', asname='BaseHTTPError')], level=0), ImportFrom(module='compat', names=[alias(name='JSONDecodeError', asname='CompatJSONDecodeError')], level=1), ClassDef(name='RequestException', bases=[Name(id='IOError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='There was an ambiguous exception that occurred while handling your\n    request.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Constant(value='Initialize RequestException with `request` and `response` objects.')), Assign(targets=[Name(id='response', ctx=Store())], value=Call(func=Attribute(value=Name(id='kwargs', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='response'), Constant(value=None)], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='response', ctx=Store())], value=Name(id='response', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='request', ctx=Store())], value=Call(func=Attribute(value=Name(id='kwargs', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='request'), Constant(value=None)], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='response', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='request', ctx=Load())), Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='response', ctx=Load()), Constant(value='request')], keywords=[])]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='request', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='response', ctx=Load()), attr='request', ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[])], decorator_list=[]), ClassDef(name='InvalidJSONError', bases=[Name(id='RequestException', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A JSON error occurred.'))], decorator_list=[]), ClassDef(name='JSONDecodeError', bases=[Name(id='InvalidJSONError', ctx=Load()), Name(id='CompatJSONDecodeError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="Couldn't decode the text into json")), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Constant(value="\n        Construct the JSONDecodeError instance first with all\n        args. Then use it's args to construct the IOError so that\n        the json specific args aren't used as IOError specific args\n        and the error message from JSONDecodeError is preserved.\n        ")), Expr(value=Call(func=Attribute(value=Name(id='CompatJSONDecodeError', ctx=Load()), attr='__init__', ctx=Load()), args=[Name(id='self', ctx=Load()), Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='InvalidJSONError', ctx=Load()), attr='__init__', ctx=Load()), args=[Name(id='self', ctx=Load()), Starred(value=Attribute(value=Name(id='self', ctx=Load()), attr='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[])], decorator_list=[]), ClassDef(name='HTTPError', bases=[Name(id='RequestException', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='An HTTP error occurred.'))], decorator_list=[]), ClassDef(name='ConnectionError', bases=[Name(id='RequestException', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A Connection error occurred.'))], decorator_list=[]), ClassDef(name='ProxyError', bases=[Name(id='ConnectionError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A proxy error occurred.'))], decorator_list=[]), ClassDef(name='SSLError', bases=[Name(id='ConnectionError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='An SSL error occurred.'))], decorator_list=[]), ClassDef(name='Timeout', bases=[Name(id='RequestException', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='The request timed out.\n\n    Catching this error will catch both\n    :exc:`~requests.exceptions.ConnectTimeout` and\n    :exc:`~requests.exceptions.ReadTimeout` errors.\n    '))], decorator_list=[]), ClassDef(name='ConnectTimeout', bases=[Name(id='ConnectionError', ctx=Load()), Name(id='Timeout', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='The request timed out while trying to connect to the remote server.\n\n    Requests that produced this error are safe to retry.\n    '))], decorator_list=[]), ClassDef(name='ReadTimeout', bases=[Name(id='Timeout', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='The server did not send any data in the allotted amount of time.'))], decorator_list=[]), ClassDef(name='URLRequired', bases=[Name(id='RequestException', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A valid URL is required to make a request.'))], decorator_list=[]), ClassDef(name='TooManyRedirects', bases=[Name(id='RequestException', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Too many redirects.'))], decorator_list=[]), ClassDef(name='MissingSchema', bases=[Name(id='RequestException', ctx=Load()), Name(id='ValueError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='The URL scheme (e.g. http or https) is missing.'))], decorator_list=[]), ClassDef(name='InvalidSchema', bases=[Name(id='RequestException', ctx=Load()), Name(id='ValueError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='The URL scheme provided is either invalid or unsupported.'))], decorator_list=[]), ClassDef(name='InvalidURL', bases=[Name(id='RequestException', ctx=Load()), Name(id='ValueError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='The URL provided was somehow invalid.'))], decorator_list=[]), ClassDef(name='InvalidHeader', bases=[Name(id='RequestException', ctx=Load()), Name(id='ValueError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='The header value provided was somehow invalid.'))], decorator_list=[]), ClassDef(name='InvalidProxyURL', bases=[Name(id='InvalidURL', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='The proxy URL provided is invalid.'))], decorator_list=[]), ClassDef(name='ChunkedEncodingError', bases=[Name(id='RequestException', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='The server declared chunked encoding but sent an invalid chunk.'))], decorator_list=[]), ClassDef(name='ContentDecodingError', bases=[Name(id='RequestException', ctx=Load()), Name(id='BaseHTTPError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Failed to decode response content.'))], decorator_list=[]), ClassDef(name='StreamConsumedError', bases=[Name(id='RequestException', ctx=Load()), Name(id='TypeError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='The content for this response was already consumed.'))], decorator_list=[]), ClassDef(name='RetryError', bases=[Name(id='RequestException', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Custom retries logic failed'))], decorator_list=[]), ClassDef(name='UnrewindableBodyError', bases=[Name(id='RequestException', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Requests encountered an error when trying to rewind a body.'))], decorator_list=[]), ClassDef(name='RequestsWarning', bases=[Name(id='Warning', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Base warning for Requests.'))], decorator_list=[]), ClassDef(name='FileModeWarning', bases=[Name(id='RequestsWarning', ctx=Load()), Name(id='DeprecationWarning', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A file was opened in text mode, but Requests determined its binary length.'))], decorator_list=[]), ClassDef(name='RequestsDependencyWarning', bases=[Name(id='RequestsWarning', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="An imported dependency doesn't match the expected version range."))], decorator_list=[])], type_ignores=[])