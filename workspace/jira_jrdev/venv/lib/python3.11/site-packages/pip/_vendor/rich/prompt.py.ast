Module(body=[ImportFrom(module='typing', names=[alias(name='Any'), alias(name='Generic'), alias(name='List'), alias(name='Optional'), alias(name='TextIO'), alias(name='TypeVar'), alias(name='Union'), alias(name='overload')], level=0), ImportFrom(names=[alias(name='get_console')], level=1), ImportFrom(module='console', names=[alias(name='Console')], level=1), ImportFrom(module='text', names=[alias(name='Text'), alias(name='TextType')], level=1), Assign(targets=[Name(id='PromptType', ctx=Store())], value=Call(func=Name(id='TypeVar', ctx=Load()), args=[Constant(value='PromptType')], keywords=[])), Assign(targets=[Name(id='DefaultType', ctx=Store())], value=Call(func=Name(id='TypeVar', ctx=Load()), args=[Constant(value='DefaultType')], keywords=[])), ClassDef(name='PromptError', bases=[Name(id='Exception', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Exception base class for prompt related errors.'))], decorator_list=[]), ClassDef(name='InvalidResponse', bases=[Name(id='PromptError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Exception to indicate a response was invalid. Raise this within process_response() to indicate an error\n    and provide an error message.\n\n    Args:\n        message (Union[str, Text]): Error message.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='message', annotation=Name(id='TextType', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='message', ctx=Store())], value=Name(id='message', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__rich__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='message', ctx=Load()))], decorator_list=[], returns=Name(id='TextType', ctx=Load()))], decorator_list=[]), ClassDef(name='PromptBase', bases=[Subscript(value=Name(id='Generic', ctx=Load()), slice=Name(id='PromptType', ctx=Load()), ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Ask the user for input until a valid response is received. This is the base class, see one of\n    the concrete classes for examples.\n\n    Args:\n        prompt (TextType, optional): Prompt text. Defaults to "".\n        console (Console, optional): A Console instance or None to use global console. Defaults to None.\n        password (bool, optional): Enable password input. Defaults to False.\n        choices (List[str], optional): A list of valid choices. Defaults to None.\n        show_default (bool, optional): Show default in prompt. Defaults to True.\n        show_choices (bool, optional): Show choices in prompt. Defaults to True.\n    ')), AnnAssign(target=Name(id='response_type', ctx=Store()), annotation=Name(id='type', ctx=Load()), value=Name(id='str', ctx=Load()), simple=1), Assign(targets=[Name(id='validate_error_message', ctx=Store())], value=Constant(value='[prompt.invalid]Please enter a valid value')), Assign(targets=[Name(id='illegal_choice_message', ctx=Store())], value=Constant(value='[prompt.invalid.choice]Please select one of the available options')), Assign(targets=[Name(id='prompt_suffix', ctx=Store())], value=Constant(value=': ')), AnnAssign(target=Name(id='choices', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load()), value=Constant(value=None), simple=1), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='prompt', annotation=Name(id='TextType', ctx=Load()))], kwonlyargs=[arg(arg='console', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Console', ctx=Load()), ctx=Load())), arg(arg='password', annotation=Name(id='bool', ctx=Load())), arg(arg='choices', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='show_default', annotation=Name(id='bool', ctx=Load())), arg(arg='show_choices', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=None), Constant(value=False), Constant(value=None), Constant(value=True), Constant(value=True)], defaults=[Constant(value='')]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='console', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='console', ctx=Load()), Call(func=Name(id='get_console', ctx=Load()), args=[], keywords=[])])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='prompt', ctx=Store())], value=IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='prompt', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=Call(func=Attribute(value=Name(id='Text', ctx=Load()), attr='from_markup', ctx=Load()), args=[Name(id='prompt', ctx=Load())], keywords=[keyword(arg='style', value=Constant(value='prompt'))]), orelse=Name(id='prompt', ctx=Load()))), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='password', ctx=Store())], value=Name(id='password', ctx=Load())), If(test=Compare(left=Name(id='choices', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='choices', ctx=Store())], value=Name(id='choices', ctx=Load()))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='show_default', ctx=Store())], value=Name(id='show_default', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='show_choices', ctx=Store())], value=Name(id='show_choices', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='ask', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='prompt', annotation=Name(id='TextType', ctx=Load()))], kwonlyargs=[arg(arg='console', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Console', ctx=Load()), ctx=Load())), arg(arg='password', annotation=Name(id='bool', ctx=Load())), arg(arg='choices', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='show_default', annotation=Name(id='bool', ctx=Load())), arg(arg='show_choices', annotation=Name(id='bool', ctx=Load())), arg(arg='default', annotation=Name(id='DefaultType', ctx=Load())), arg(arg='stream', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TextIO', ctx=Load()), ctx=Load()))], kw_defaults=[Constant(value=None), Constant(value=False), Constant(value=None), Constant(value=True), Constant(value=True), None, Constant(value=None)], defaults=[Constant(value='')]), body=[Expr(value=Constant(value=Ellipsis))], decorator_list=[Name(id='classmethod', ctx=Load()), Name(id='overload', ctx=Load())], returns=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='DefaultType', ctx=Load()), Name(id='PromptType', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='ask', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='prompt', annotation=Name(id='TextType', ctx=Load()))], kwonlyargs=[arg(arg='console', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Console', ctx=Load()), ctx=Load())), arg(arg='password', annotation=Name(id='bool', ctx=Load())), arg(arg='choices', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='show_default', annotation=Name(id='bool', ctx=Load())), arg(arg='show_choices', annotation=Name(id='bool', ctx=Load())), arg(arg='stream', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TextIO', ctx=Load()), ctx=Load()))], kw_defaults=[Constant(value=None), Constant(value=False), Constant(value=None), Constant(value=True), Constant(value=True), Constant(value=None)], defaults=[Constant(value='')]), body=[Expr(value=Constant(value=Ellipsis))], decorator_list=[Name(id='classmethod', ctx=Load()), Name(id='overload', ctx=Load())], returns=Name(id='PromptType', ctx=Load())), FunctionDef(name='ask', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='prompt', annotation=Name(id='TextType', ctx=Load()))], kwonlyargs=[arg(arg='console', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Console', ctx=Load()), ctx=Load())), arg(arg='password', annotation=Name(id='bool', ctx=Load())), arg(arg='choices', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='show_default', annotation=Name(id='bool', ctx=Load())), arg(arg='show_choices', annotation=Name(id='bool', ctx=Load())), arg(arg='default', annotation=Name(id='Any', ctx=Load())), arg(arg='stream', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TextIO', ctx=Load()), ctx=Load()))], kw_defaults=[Constant(value=None), Constant(value=False), Constant(value=None), Constant(value=True), Constant(value=True), Constant(value=Ellipsis), Constant(value=None)], defaults=[Constant(value='')]), body=[Expr(value=Constant(value='Shortcut to construct and run a prompt loop and return the result.\n\n        Example:\n            >>> filename = Prompt.ask("Enter a filename")\n\n        Args:\n            prompt (TextType, optional): Prompt text. Defaults to "".\n            console (Console, optional): A Console instance or None to use global console. Defaults to None.\n            password (bool, optional): Enable password input. Defaults to False.\n            choices (List[str], optional): A list of valid choices. Defaults to None.\n            show_default (bool, optional): Show default in prompt. Defaults to True.\n            show_choices (bool, optional): Show choices in prompt. Defaults to True.\n            stream (TextIO, optional): Optional text file open for reading to get input. Defaults to None.\n        ')), Assign(targets=[Name(id='_prompt', ctx=Store())], value=Call(func=Name(id='cls', ctx=Load()), args=[Name(id='prompt', ctx=Load())], keywords=[keyword(arg='console', value=Name(id='console', ctx=Load())), keyword(arg='password', value=Name(id='password', ctx=Load())), keyword(arg='choices', value=Name(id='choices', ctx=Load())), keyword(arg='show_default', value=Name(id='show_default', ctx=Load())), keyword(arg='show_choices', value=Name(id='show_choices', ctx=Load()))])), Return(value=Call(func=Name(id='_prompt', ctx=Load()), args=[], keywords=[keyword(arg='default', value=Name(id='default', ctx=Load())), keyword(arg='stream', value=Name(id='stream', ctx=Load()))]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Name(id='Any', ctx=Load())), FunctionDef(name='render_default', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='default', annotation=Name(id='DefaultType', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Turn the supplied default in to a Text instance.\n\n        Args:\n            default (DefaultType): Default value.\n\n        Returns:\n            Text: Text containing rendering of default value.\n        ')), Return(value=Call(func=Name(id='Text', ctx=Load()), args=[JoinedStr(values=[Constant(value='('), FormattedValue(value=Name(id='default', ctx=Load()), conversion=-1), Constant(value=')')]), Constant(value='prompt.default')], keywords=[]))], decorator_list=[], returns=Name(id='Text', ctx=Load())), FunctionDef(name='make_prompt', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='default', annotation=Name(id='DefaultType', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Make prompt text.\n\n        Args:\n            default (DefaultType): Default value.\n\n        Returns:\n            Text: Text to display in prompt.\n        ')), Assign(targets=[Name(id='prompt', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='prompt', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='prompt', ctx=Load()), attr='end', ctx=Store())], value=Constant(value='')), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='show_choices', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='choices', ctx=Load())]), body=[Assign(targets=[Name(id='_choices', ctx=Store())], value=Call(func=Attribute(value=Constant(value='/'), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='choices', ctx=Load())], keywords=[])), Assign(targets=[Name(id='choices', ctx=Store())], value=JoinedStr(values=[Constant(value='['), FormattedValue(value=Name(id='_choices', ctx=Load()), conversion=-1), Constant(value=']')])), Expr(value=Call(func=Attribute(value=Name(id='prompt', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value=' ')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='prompt', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='choices', ctx=Load()), Constant(value='prompt.choices')], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='default', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=Ellipsis)]), Attribute(value=Name(id='self', ctx=Load()), attr='show_default', ctx=Load()), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='default', ctx=Load()), Tuple(elts=[Name(id='str', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='response_type', ctx=Load())], ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='prompt', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value=' ')], keywords=[])), Assign(targets=[Name(id='_default', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='render_default', ctx=Load()), args=[Name(id='default', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='prompt', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='_default', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='prompt', ctx=Load()), attr='append', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='prompt_suffix', ctx=Load())], keywords=[])), Return(value=Name(id='prompt', ctx=Load()))], decorator_list=[], returns=Name(id='Text', ctx=Load())), FunctionDef(name='get_input', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='console', annotation=Name(id='Console', ctx=Load())), arg(arg='prompt', annotation=Name(id='TextType', ctx=Load())), arg(arg='password', annotation=Name(id='bool', ctx=Load())), arg(arg='stream', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TextIO', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Get input from user.\n\n        Args:\n            console (Console): Console instance.\n            prompt (TextType): Prompt text.\n            password (bool): Enable password entry.\n\n        Returns:\n            str: String from user.\n        ')), Return(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='input', ctx=Load()), args=[Name(id='prompt', ctx=Load())], keywords=[keyword(arg='password', value=Name(id='password', ctx=Load())), keyword(arg='stream', value=Name(id='stream', ctx=Load()))]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='check_choice', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check value is in the list of valid choices.\n\n        Args:\n            value (str): Value entered by user.\n\n        Returns:\n            bool: True if choice was valid, otherwise False.\n        ')), Assert(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='choices', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Return(value=Compare(left=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='choices', ctx=Load())]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='process_response', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Process response from user, convert to prompt type.\n\n        Args:\n            value (str): String typed by user.\n\n        Raises:\n            InvalidResponse: If ``value`` is invalid.\n\n        Returns:\n            PromptType: The value to be returned from ask method.\n        ')), Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[])), Try(body=[AnnAssign(target=Name(id='return_value', ctx=Store()), annotation=Name(id='PromptType', ctx=Load()), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='response_type', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]), simple=1)], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='InvalidResponse', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='validate_error_message', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[]), If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='choices', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='check_choice', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))]), body=[Raise(exc=Call(func=Name(id='InvalidResponse', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='illegal_choice_message', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='return_value', ctx=Load()))], decorator_list=[], returns=Name(id='PromptType', ctx=Load())), FunctionDef(name='on_validate_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value', annotation=Name(id='str', ctx=Load())), arg(arg='error', annotation=Name(id='InvalidResponse', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Called to handle validation error.\n\n        Args:\n            value (str): String entered by user.\n            error (InvalidResponse): Exception instance the initiated the error.\n        ')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='console', ctx=Load()), attr='print', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='pre_prompt', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Hook to display something before the prompt.'))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__call__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[arg(arg='stream', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TextIO', ctx=Load()), ctx=Load()))], kw_defaults=[Constant(value=None)], defaults=[]), body=[Expr(value=Constant(value=Ellipsis))], decorator_list=[Name(id='overload', ctx=Load())], returns=Name(id='PromptType', ctx=Load())), FunctionDef(name='__call__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[arg(arg='default', annotation=Name(id='DefaultType', ctx=Load())), arg(arg='stream', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TextIO', ctx=Load()), ctx=Load()))], kw_defaults=[None, Constant(value=None)], defaults=[]), body=[Expr(value=Constant(value=Ellipsis))], decorator_list=[Name(id='overload', ctx=Load())], returns=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='PromptType', ctx=Load()), Name(id='DefaultType', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='__call__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[arg(arg='default', annotation=Name(id='Any', ctx=Load())), arg(arg='stream', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TextIO', ctx=Load()), ctx=Load()))], kw_defaults=[Constant(value=Ellipsis), Constant(value=None)], defaults=[]), body=[Expr(value=Constant(value='Run the prompt loop.\n\n        Args:\n            default (Any, optional): Optional default value.\n\n        Returns:\n            PromptType: Processed value.\n        ')), While(test=Constant(value=True), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='pre_prompt', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='prompt', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='make_prompt', ctx=Load()), args=[Name(id='default', ctx=Load())], keywords=[])), Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_input', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='console', ctx=Load()), Name(id='prompt', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='password', ctx=Load())], keywords=[keyword(arg='stream', value=Name(id='stream', ctx=Load()))])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='value', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), Compare(left=Name(id='default', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=Ellipsis)])]), body=[Return(value=Name(id='default', ctx=Load()))], orelse=[]), Try(body=[Assign(targets=[Name(id='return_value', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='process_response', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='InvalidResponse', ctx=Load()), name='error', body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='on_validate_error', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='error', ctx=Load())], keywords=[])), Continue()])], orelse=[Return(value=Name(id='return_value', ctx=Load()))], finalbody=[])], orelse=[])], decorator_list=[], returns=Name(id='Any', ctx=Load()))], decorator_list=[]), ClassDef(name='Prompt', bases=[Subscript(value=Name(id='PromptBase', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A prompt that returns a str.\n\n    Example:\n        >>> name = Prompt.ask("Enter your name")\n\n\n    ')), Assign(targets=[Name(id='response_type', ctx=Store())], value=Name(id='str', ctx=Load()))], decorator_list=[]), ClassDef(name='IntPrompt', bases=[Subscript(value=Name(id='PromptBase', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A prompt that returns an integer.\n\n    Example:\n        >>> burrito_count = IntPrompt.ask("How many burritos do you want to order")\n\n    ')), Assign(targets=[Name(id='response_type', ctx=Store())], value=Name(id='int', ctx=Load())), Assign(targets=[Name(id='validate_error_message', ctx=Store())], value=Constant(value='[prompt.invalid]Please enter a valid integer number'))], decorator_list=[]), ClassDef(name='FloatPrompt', bases=[Subscript(value=Name(id='PromptBase', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A prompt that returns a float.\n\n    Example:\n        >>> temperature = FloatPrompt.ask("Enter desired temperature")\n\n    ')), Assign(targets=[Name(id='response_type', ctx=Store())], value=Name(id='float', ctx=Load())), Assign(targets=[Name(id='validate_error_message', ctx=Store())], value=Constant(value='[prompt.invalid]Please enter a number'))], decorator_list=[]), ClassDef(name='Confirm', bases=[Subscript(value=Name(id='PromptBase', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A yes / no confirmation prompt.\n\n    Example:\n        >>> if Confirm.ask("Continue"):\n                run_job()\n\n    ')), Assign(targets=[Name(id='response_type', ctx=Store())], value=Name(id='bool', ctx=Load())), Assign(targets=[Name(id='validate_error_message', ctx=Store())], value=Constant(value='[prompt.invalid]Please enter Y or N')), AnnAssign(target=Name(id='choices', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=List(elts=[Constant(value='y'), Constant(value='n')], ctx=Load()), simple=1), FunctionDef(name='render_default', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='default', annotation=Name(id='DefaultType', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Render the default as (y) or (n) rather than True/False.')), Assign(targets=[Tuple(elts=[Name(id='yes', ctx=Store()), Name(id='no', ctx=Store())], ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='choices', ctx=Load())), Return(value=Call(func=Name(id='Text', ctx=Load()), args=[IfExp(test=Name(id='default', ctx=Load()), body=JoinedStr(values=[Constant(value='('), FormattedValue(value=Name(id='yes', ctx=Load()), conversion=-1), Constant(value=')')]), orelse=JoinedStr(values=[Constant(value='('), FormattedValue(value=Name(id='no', ctx=Load()), conversion=-1), Constant(value=')')]))], keywords=[keyword(arg='style', value=Constant(value='prompt.default'))]))], decorator_list=[], returns=Name(id='Text', ctx=Load())), FunctionDef(name='process_response', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Convert choices to a bool.')), Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]), attr='lower', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='value', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='choices', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='InvalidResponse', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='validate_error_message', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Compare(left=Name(id='value', ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='choices', ctx=Load()), slice=Constant(value=0), ctx=Load())]))], decorator_list=[], returns=Name(id='bool', ctx=Load()))], decorator_list=[]), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__')]), body=[ImportFrom(module='pip._vendor.rich', names=[alias(name='print')], level=0), If(test=Call(func=Attribute(value=Name(id='Confirm', ctx=Load()), attr='ask', ctx=Load()), args=[Constant(value='Run [i]prompt[/i] tests?')], keywords=[keyword(arg='default', value=Constant(value=True))]), body=[While(test=Constant(value=True), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='IntPrompt', ctx=Load()), attr='ask', ctx=Load()), args=[Constant(value=':rocket: Enter a number between [b]1[/b] and [b]10[/b]')], keywords=[keyword(arg='default', value=Constant(value=5))])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='result', ctx=Load()), ops=[GtE()], comparators=[Constant(value=1)]), Compare(left=Name(id='result', ctx=Load()), ops=[LtE()], comparators=[Constant(value=10)])]), body=[Break()], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value=':pile_of_poo: [prompt.invalid]Number must be between 1 and 10')], keywords=[]))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[JoinedStr(values=[Constant(value='number='), FormattedValue(value=Name(id='result', ctx=Load()), conversion=-1)])], keywords=[])), While(test=Constant(value=True), body=[Assign(targets=[Name(id='password', ctx=Store())], value=Call(func=Attribute(value=Name(id='Prompt', ctx=Load()), attr='ask', ctx=Load()), args=[Constant(value='Please enter a password [cyan](must be at least 5 characters)')], keywords=[keyword(arg='password', value=Constant(value=True))])), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='password', ctx=Load())], keywords=[]), ops=[GtE()], comparators=[Constant(value=5)]), body=[Break()], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='[prompt.invalid]password too short')], keywords=[]))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[JoinedStr(values=[Constant(value='password='), FormattedValue(value=Name(id='password', ctx=Load()), conversion=114)])], keywords=[])), Assign(targets=[Name(id='fruit', ctx=Store())], value=Call(func=Attribute(value=Name(id='Prompt', ctx=Load()), attr='ask', ctx=Load()), args=[Constant(value='Enter a fruit')], keywords=[keyword(arg='choices', value=List(elts=[Constant(value='apple'), Constant(value='orange'), Constant(value='pear')], ctx=Load()))])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[JoinedStr(values=[Constant(value='fruit='), FormattedValue(value=Name(id='fruit', ctx=Load()), conversion=114)])], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='[b]OK :loudly_crying_face:')], keywords=[]))])], orelse=[])], type_ignores=[])