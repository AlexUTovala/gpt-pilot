Module(body=[ImportFrom(module='ssl_', names=[alias(name='create_urllib3_context'), alias(name='resolve_cert_reqs'), alias(name='resolve_ssl_version')], level=1), FunctionDef(name='connection_requires_http_tunnel', args=arguments(posonlyargs=[], args=[arg(arg='proxy_url'), arg(arg='proxy_config'), arg(arg='destination_scheme')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='\n    Returns True if the connection requires an HTTP CONNECT through the proxy.\n\n    :param URL proxy_url:\n        URL of the proxy.\n    :param ProxyConfig proxy_config:\n        Proxy configuration from poolmanager.py\n    :param str destination_scheme:\n        The scheme of the destination. (i.e https, http, etc)\n    ')), If(test=Compare(left=Name(id='proxy_url', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Compare(left=Name(id='destination_scheme', ctx=Load()), ops=[Eq()], comparators=[Constant(value='http')]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='proxy_url', ctx=Load()), attr='scheme', ctx=Load()), ops=[Eq()], comparators=[Constant(value='https')]), Name(id='proxy_config', ctx=Load()), Attribute(value=Name(id='proxy_config', ctx=Load()), attr='use_forwarding_for_https', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), Return(value=Constant(value=True))], decorator_list=[]), FunctionDef(name='create_proxy_ssl_context', args=arguments(posonlyargs=[], args=[arg(arg='ssl_version'), arg(arg='cert_reqs'), arg(arg='ca_certs'), arg(arg='ca_cert_dir'), arg(arg='ca_cert_data')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value="\n    Generates a default proxy ssl context if one hasn't been provided by the\n    user.\n    ")), Assign(targets=[Name(id='ssl_context', ctx=Store())], value=Call(func=Name(id='create_urllib3_context', ctx=Load()), args=[], keywords=[keyword(arg='ssl_version', value=Call(func=Name(id='resolve_ssl_version', ctx=Load()), args=[Name(id='ssl_version', ctx=Load())], keywords=[])), keyword(arg='cert_reqs', value=Call(func=Name(id='resolve_cert_reqs', ctx=Load()), args=[Name(id='cert_reqs', ctx=Load())], keywords=[]))])), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Name(id='ca_certs', ctx=Load())), UnaryOp(op=Not(), operand=Name(id='ca_cert_dir', ctx=Load())), UnaryOp(op=Not(), operand=Name(id='ca_cert_data', ctx=Load())), Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='ssl_context', ctx=Load()), Constant(value='load_default_certs')], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='ssl_context', ctx=Load()), attr='load_default_certs', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Name(id='ssl_context', ctx=Load()))], decorator_list=[])], type_ignores=[])