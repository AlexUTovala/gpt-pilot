Module(body=[ImportFrom(module='pathlib', names=[alias(name='Path')], level=0), ImportFrom(module='json', names=[alias(name='loads'), alias(name='dumps')], level=0), ImportFrom(module='typing', names=[alias(name='Any'), alias(name='Callable'), alias(name='Optional'), alias(name='Union')], level=0), ImportFrom(module='text', names=[alias(name='Text')], level=1), ImportFrom(module='highlighter', names=[alias(name='JSONHighlighter'), alias(name='NullHighlighter')], level=1), ClassDef(name='JSON', bases=[], keywords=[], body=[Expr(value=Constant(value='A renderable which pretty prints JSON.\n\n    Args:\n        json (str): JSON encoded data.\n        indent (Union[None, int, str], optional): Number of characters to indent by. Defaults to 2.\n        highlight (bool, optional): Enable highlighting. Defaults to True.\n        skip_keys (bool, optional): Skip keys not of a basic type. Defaults to False.\n        ensure_ascii (bool, optional): Escape all non-ascii characters. Defaults to False.\n        check_circular (bool, optional): Check for circular references. Defaults to True.\n        allow_nan (bool, optional): Allow NaN and Infinity values. Defaults to True.\n        default (Callable, optional): A callable that converts values that can not be encoded\n            in to something that can be JSON encoded. Defaults to None.\n        sort_keys (bool, optional): Sort dictionary keys. Defaults to False.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='json', annotation=Name(id='str', ctx=Load())), arg(arg='indent', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Name(id='int', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='highlight', annotation=Name(id='bool', ctx=Load())), arg(arg='skip_keys', annotation=Name(id='bool', ctx=Load())), arg(arg='ensure_ascii', annotation=Name(id='bool', ctx=Load())), arg(arg='check_circular', annotation=Name(id='bool', ctx=Load())), arg(arg='allow_nan', annotation=Name(id='bool', ctx=Load())), arg(arg='default', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='Any', ctx=Load())], ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='sort_keys', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=2), Constant(value=True), Constant(value=False), Constant(value=False), Constant(value=True), Constant(value=True), Constant(value=None), Constant(value=False)]), body=[Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Name(id='loads', ctx=Load()), args=[Name(id='json', ctx=Load())], keywords=[])), Assign(targets=[Name(id='json', ctx=Store())], value=Call(func=Name(id='dumps', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[keyword(arg='indent', value=Name(id='indent', ctx=Load())), keyword(arg='skipkeys', value=Name(id='skip_keys', ctx=Load())), keyword(arg='ensure_ascii', value=Name(id='ensure_ascii', ctx=Load())), keyword(arg='check_circular', value=Name(id='check_circular', ctx=Load())), keyword(arg='allow_nan', value=Name(id='allow_nan', ctx=Load())), keyword(arg='default', value=Name(id='default', ctx=Load())), keyword(arg='sort_keys', value=Name(id='sort_keys', ctx=Load()))])), Assign(targets=[Name(id='highlighter', ctx=Store())], value=IfExp(test=Name(id='highlight', ctx=Load()), body=Call(func=Name(id='JSONHighlighter', ctx=Load()), args=[], keywords=[]), orelse=Call(func=Name(id='NullHighlighter', ctx=Load()), args=[], keywords=[]))), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Store())], value=Call(func=Name(id='highlighter', ctx=Load()), args=[Name(id='json', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load()), attr='no_wrap', ctx=Store())], value=Constant(value=True)), Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load()), attr='overflow', ctx=Store())], value=Constant(value=None))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='from_data', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='data', annotation=Name(id='Any', ctx=Load())), arg(arg='indent', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Name(id='int', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='highlight', annotation=Name(id='bool', ctx=Load())), arg(arg='skip_keys', annotation=Name(id='bool', ctx=Load())), arg(arg='ensure_ascii', annotation=Name(id='bool', ctx=Load())), arg(arg='check_circular', annotation=Name(id='bool', ctx=Load())), arg(arg='allow_nan', annotation=Name(id='bool', ctx=Load())), arg(arg='default', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='Any', ctx=Load())], ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='sort_keys', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=2), Constant(value=True), Constant(value=False), Constant(value=False), Constant(value=True), Constant(value=True), Constant(value=None), Constant(value=False)]), body=[Expr(value=Constant(value='Encodes a JSON object from arbitrary data.\n\n        Args:\n            data (Any): An object that may be encoded in to JSON\n            indent (Union[None, int, str], optional): Number of characters to indent by. Defaults to 2.\n            highlight (bool, optional): Enable highlighting. Defaults to True.\n            default (Callable, optional): Optional callable which will be called for objects that cannot be serialized. Defaults to None.\n            skip_keys (bool, optional): Skip keys not of a basic type. Defaults to False.\n            ensure_ascii (bool, optional): Escape all non-ascii characters. Defaults to False.\n            check_circular (bool, optional): Check for circular references. Defaults to True.\n            allow_nan (bool, optional): Allow NaN and Infinity values. Defaults to True.\n            default (Callable, optional): A callable that converts values that can not be encoded\n                in to something that can be JSON encoded. Defaults to None.\n            sort_keys (bool, optional): Sort dictionary keys. Defaults to False.\n\n        Returns:\n            JSON: New JSON object from the given data.\n        ')), AnnAssign(target=Name(id='json_instance', ctx=Store()), annotation=Constant(value='JSON'), value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='__new__', ctx=Load()), args=[Name(id='cls', ctx=Load())], keywords=[]), simple=1), Assign(targets=[Name(id='json', ctx=Store())], value=Call(func=Name(id='dumps', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[keyword(arg='indent', value=Name(id='indent', ctx=Load())), keyword(arg='skipkeys', value=Name(id='skip_keys', ctx=Load())), keyword(arg='ensure_ascii', value=Name(id='ensure_ascii', ctx=Load())), keyword(arg='check_circular', value=Name(id='check_circular', ctx=Load())), keyword(arg='allow_nan', value=Name(id='allow_nan', ctx=Load())), keyword(arg='default', value=Name(id='default', ctx=Load())), keyword(arg='sort_keys', value=Name(id='sort_keys', ctx=Load()))])), Assign(targets=[Name(id='highlighter', ctx=Store())], value=IfExp(test=Name(id='highlight', ctx=Load()), body=Call(func=Name(id='JSONHighlighter', ctx=Load()), args=[], keywords=[]), orelse=Call(func=Name(id='NullHighlighter', ctx=Load()), args=[], keywords=[]))), Assign(targets=[Attribute(value=Name(id='json_instance', ctx=Load()), attr='text', ctx=Store())], value=Call(func=Name(id='highlighter', ctx=Load()), args=[Name(id='json', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Attribute(value=Name(id='json_instance', ctx=Load()), attr='text', ctx=Load()), attr='no_wrap', ctx=Store())], value=Constant(value=True)), Assign(targets=[Attribute(value=Attribute(value=Name(id='json_instance', ctx=Load()), attr='text', ctx=Load()), attr='overflow', ctx=Store())], value=Constant(value=None)), Return(value=Name(id='json_instance', ctx=Load()))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Constant(value='JSON')), FunctionDef(name='__rich__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load()))], decorator_list=[], returns=Name(id='Text', ctx=Load()))], decorator_list=[]), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__')]), body=[Import(names=[alias(name='argparse')]), Import(names=[alias(name='sys')]), Assign(targets=[Name(id='parser', ctx=Store())], value=Call(func=Attribute(value=Name(id='argparse', ctx=Load()), attr='ArgumentParser', ctx=Load()), args=[], keywords=[keyword(arg='description', value=Constant(value='Pretty print json'))])), Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='add_argument', ctx=Load()), args=[Constant(value='path')], keywords=[keyword(arg='metavar', value=Constant(value='PATH')), keyword(arg='help', value=Constant(value='path to file, or - for stdin'))])), Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='add_argument', ctx=Load()), args=[Constant(value='-i'), Constant(value='--indent')], keywords=[keyword(arg='metavar', value=Constant(value='SPACES')), keyword(arg='type', value=Name(id='int', ctx=Load())), keyword(arg='help', value=Constant(value='Number of spaces in an indent')), keyword(arg='default', value=Constant(value=2))])), Assign(targets=[Name(id='args', ctx=Store())], value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='parse_args', ctx=Load()), args=[], keywords=[])), ImportFrom(module='pip._vendor.rich.console', names=[alias(name='Console')], level=0), Assign(targets=[Name(id='console', ctx=Store())], value=Call(func=Name(id='Console', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='error_console', ctx=Store())], value=Call(func=Name(id='Console', ctx=Load()), args=[], keywords=[keyword(arg='stderr', value=Constant(value=True))])), Try(body=[If(test=Compare(left=Attribute(value=Name(id='args', ctx=Load()), attr='path', ctx=Load()), ops=[Eq()], comparators=[Constant(value='-')]), body=[Assign(targets=[Name(id='json_data', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stdin', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Name(id='json_data', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='Path', ctx=Load()), args=[Attribute(value=Name(id='args', ctx=Load()), attr='path', ctx=Load())], keywords=[]), attr='read_text', ctx=Load()), args=[], keywords=[]))])], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='error', body=[Expr(value=Call(func=Attribute(value=Name(id='error_console', ctx=Load()), attr='print', ctx=Load()), args=[JoinedStr(values=[Constant(value='Unable to read '), FormattedValue(value=Attribute(value=Name(id='args', ctx=Load()), attr='path', ctx=Load()), conversion=114), Constant(value='; '), FormattedValue(value=Name(id='error', ctx=Load()), conversion=-1)])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='sys', ctx=Load()), attr='exit', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]))])], orelse=[], finalbody=[]), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='print', ctx=Load()), args=[Call(func=Name(id='JSON', ctx=Load()), args=[Name(id='json_data', ctx=Load())], keywords=[keyword(arg='indent', value=Attribute(value=Name(id='args', ctx=Load()), attr='indent', ctx=Load()))])], keywords=[keyword(arg='soft_wrap', value=Constant(value=True))]))], orelse=[])], type_ignores=[])