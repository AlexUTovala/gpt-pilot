Module(body=[Import(names=[alias(name='hashlib')]), Import(names=[alias(name='logging')]), Import(names=[alias(name='os')]), Import(names=[alias(name='shutil')]), Import(names=[alias(name='subprocess')]), Import(names=[alias(name='tempfile')]), Try(body=[ImportFrom(module='threading', names=[alias(name='Thread')], level=0)], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[ImportFrom(module='dummy_threading', names=[alias(name='Thread')], level=0)])], orelse=[], finalbody=[]), ImportFrom(names=[alias(name='DistlibException')], level=1), ImportFrom(module='compat', names=[alias(name='HTTPBasicAuthHandler'), alias(name='Request'), alias(name='HTTPPasswordMgr'), alias(name='urlparse'), alias(name='build_opener'), alias(name='string_types')], level=1), ImportFrom(module='util', names=[alias(name='zip_dir'), alias(name='ServerProxy')], level=1), Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), Assign(targets=[Name(id='DEFAULT_INDEX', ctx=Store())], value=Constant(value='https://pypi.org/pypi')), Assign(targets=[Name(id='DEFAULT_REALM', ctx=Store())], value=Constant(value='pypi')), ClassDef(name='PackageIndex', bases=[Name(id='object', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    This class represents a package index compatible with PyPI, the Python\n    Package Index.\n    ')), Assign(targets=[Name(id='boundary', ctx=Store())], value=Constant(value=b'----------ThIs_Is_tHe_distlib_index_bouNdaRY_$')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='url')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='\n        Initialise an instance.\n\n        :param url: The URL of the index. If not specified, the URL for PyPI is\n                    used.\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='url', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='url', ctx=Load()), Name(id='DEFAULT_INDEX', ctx=Load())])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='read_configuration', ctx=Load()), args=[], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='scheme', ctx=Store()), Name(id='netloc', ctx=Store()), Name(id='path', ctx=Store()), Name(id='params', ctx=Store()), Name(id='query', ctx=Store()), Name(id='frag', ctx=Store())], ctx=Store())], value=Call(func=Name(id='urlparse', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='url', ctx=Load())], keywords=[])), If(test=BoolOp(op=Or(), values=[Name(id='params', ctx=Load()), Name(id='query', ctx=Load()), Name(id='frag', ctx=Load()), Compare(left=Name(id='scheme', ctx=Load()), ops=[NotIn()], comparators=[Tuple(elts=[Constant(value='http'), Constant(value='https')], ctx=Load())])]), body=[Raise(exc=Call(func=Name(id='DistlibException', ctx=Load()), args=[BinOp(left=Constant(value='invalid repository: %s'), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='url', ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='password_handler', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='ssl_verifier', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='gpg', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='gpg_home', ctx=Store())], value=Constant(value=None)), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='devnull', ctx=Load()), Constant(value='w')], keywords=[]), optional_vars=Name(id='sink', ctx=Store()))], body=[For(target=Name(id='s', ctx=Store()), iter=Tuple(elts=[Constant(value='gpg'), Constant(value='gpg2')], ctx=Load()), body=[Try(body=[Assign(targets=[Name(id='rc', ctx=Store())], value=Call(func=Attribute(value=Name(id='subprocess', ctx=Load()), attr='check_call', ctx=Load()), args=[List(elts=[Name(id='s', ctx=Load()), Constant(value='--version')], ctx=Load())], keywords=[keyword(arg='stdout', value=Name(id='sink', ctx=Load())), keyword(arg='stderr', value=Name(id='sink', ctx=Load()))])), If(test=Compare(left=Name(id='rc', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='gpg', ctx=Store())], value=Name(id='s', ctx=Load())), Break()], orelse=[])], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], orelse=[])])], decorator_list=[]), FunctionDef(name='_get_pypirc_command', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Get the distutils command for interacting with PyPI configurations.\n        :return: the command.\n        ')), ImportFrom(module='util', names=[alias(name='_get_pypirc_command', asname='cmd')], level=1), Return(value=Call(func=Name(id='cmd', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='read_configuration', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Read the PyPI access configuration as supported by distutils. This populates\n        ``username``, ``password``, ``realm`` and ``url`` attributes from the\n        configuration.\n        ')), ImportFrom(module='util', names=[alias(name='_load_pypirc')], level=1), Assign(targets=[Name(id='cfg', ctx=Store())], value=Call(func=Name(id='_load_pypirc', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='username', ctx=Store())], value=Call(func=Attribute(value=Name(id='cfg', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='username')], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='password', ctx=Store())], value=Call(func=Attribute(value=Name(id='cfg', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='password')], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='realm', ctx=Store())], value=Call(func=Attribute(value=Name(id='cfg', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='realm'), Constant(value='pypi')], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='url', ctx=Store())], value=Call(func=Attribute(value=Name(id='cfg', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='repository'), Attribute(value=Name(id='self', ctx=Load()), attr='url', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='save_configuration', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Save the PyPI access configuration. You must have set ``username`` and\n        ``password`` attributes before calling this method.\n        ')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='check_credentials', ctx=Load()), args=[], keywords=[])), ImportFrom(module='util', names=[alias(name='_store_pypirc')], level=1), Expr(value=Call(func=Name(id='_store_pypirc', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='check_credentials', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Check that ``username`` and ``password`` have been set, and raise an\n        exception if not.\n        ')), If(test=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='username', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='password', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])]), body=[Raise(exc=Call(func=Name(id='DistlibException', ctx=Load()), args=[Constant(value='username and password must be set')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='pm', ctx=Store())], value=Call(func=Name(id='HTTPPasswordMgr', ctx=Load()), args=[], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='netloc', ctx=Store()), Name(id='_', ctx=Store()), Name(id='_', ctx=Store()), Name(id='_', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Name(id='urlparse', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='url', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='pm', ctx=Load()), attr='add_password', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='realm', ctx=Load()), Name(id='netloc', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='username', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='password', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='password_handler', ctx=Store())], value=Call(func=Name(id='HTTPBasicAuthHandler', ctx=Load()), args=[Name(id='pm', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='register', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='metadata')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Register a distribution on PyPI, using the provided metadata.\n\n        :param metadata: A :class:`Metadata` instance defining at least a name\n                         and version number for the distribution to be\n                         registered.\n        :return: The HTTP response received from PyPI upon submission of the\n                request.\n        ')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='check_credentials', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='metadata', ctx=Load()), attr='validate', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='d', ctx=Store())], value=Call(func=Attribute(value=Name(id='metadata', ctx=Load()), attr='todict', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Name(id='d', ctx=Load()), slice=Constant(value=':action'), ctx=Store())], value=Constant(value='verify')), Assign(targets=[Name(id='request', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='encode_request', ctx=Load()), args=[Call(func=Attribute(value=Name(id='d', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), List(elts=[], ctx=Load())], keywords=[])), Assign(targets=[Name(id='response', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='send_request', ctx=Load()), args=[Name(id='request', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='d', ctx=Load()), slice=Constant(value=':action'), ctx=Store())], value=Constant(value='submit')), Assign(targets=[Name(id='request', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='encode_request', ctx=Load()), args=[Call(func=Attribute(value=Name(id='d', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), List(elts=[], ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='send_request', ctx=Load()), args=[Name(id='request', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_reader', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name'), arg(arg='stream'), arg(arg='outbuf')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Thread runner for reading lines of from a subprocess into a buffer.\n\n        :param name: The logical name of the stream (used for logging only).\n        :param stream: The stream to read from. This will typically a pipe\n                       connected to the output stream of a subprocess.\n        :param outbuf: The list to append the read lines to.\n        ')), While(test=Constant(value=True), body=[Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Attribute(value=Name(id='stream', ctx=Load()), attr='readline', ctx=Load()), args=[], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='s', ctx=Load())), body=[Break()], orelse=[]), Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[]), attr='rstrip', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='outbuf', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[BinOp(left=Constant(value='%s: %s'), op=Mod(), right=Tuple(elts=[Name(id='name', ctx=Load()), Name(id='s', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='stream', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='get_sign_command', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='filename'), arg(arg='signer'), arg(arg='sign_password'), arg(arg='keystore')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value="\n        Return a suitable command for signing a file.\n\n        :param filename: The pathname to the file to be signed.\n        :param signer: The identifier of the signer of the file.\n        :param sign_password: The passphrase for the signer's\n                              private key used for signing.\n        :param keystore: The path to a directory which contains the keys\n                         used in verification. If not specified, the\n                         instance's ``gpg_home`` attribute is used instead.\n        :return: The signing command as a list suitable to be\n                 passed to :class:`subprocess.Popen`.\n        ")), Assign(targets=[Name(id='cmd', ctx=Store())], value=List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='gpg', ctx=Load()), Constant(value='--status-fd'), Constant(value='2'), Constant(value='--no-tty')], ctx=Load())), If(test=Compare(left=Name(id='keystore', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='keystore', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='gpg_home', ctx=Load()))], orelse=[]), If(test=Name(id='keystore', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='cmd', ctx=Load()), attr='extend', ctx=Load()), args=[List(elts=[Constant(value='--homedir'), Name(id='keystore', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='sign_password', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='cmd', ctx=Load()), attr='extend', ctx=Load()), args=[List(elts=[Constant(value='--batch'), Constant(value='--passphrase-fd'), Constant(value='0')], ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='td', ctx=Store())], value=Call(func=Attribute(value=Name(id='tempfile', ctx=Load()), attr='mkdtemp', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='sf', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='td', ctx=Load()), BinOp(left=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='basename', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[]), op=Add(), right=Constant(value='.asc'))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='cmd', ctx=Load()), attr='extend', ctx=Load()), args=[List(elts=[Constant(value='--detach-sign'), Constant(value='--armor'), Constant(value='--local-user'), Name(id='signer', ctx=Load()), Constant(value='--output'), Name(id='sf', ctx=Load()), Name(id='filename', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='invoking: %s'), Call(func=Attribute(value=Constant(value=' '), attr='join', ctx=Load()), args=[Name(id='cmd', ctx=Load())], keywords=[])], keywords=[])), Return(value=Tuple(elts=[Name(id='cmd', ctx=Load()), Name(id='sf', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='run_command', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='cmd'), arg(arg='input_data')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value="\n        Run a command in a child process , passing it any input data specified.\n\n        :param cmd: The command to run.\n        :param input_data: If specified, this must be a byte string containing\n                           data to be sent to the child process.\n        :return: A tuple consisting of the subprocess' exit code, a list of\n                 lines read from the subprocess' ``stdout``, and a list of\n                 lines read from the subprocess' ``stderr``.\n        ")), Assign(targets=[Name(id='kwargs', ctx=Store())], value=Dict(keys=[Constant(value='stdout'), Constant(value='stderr')], values=[Attribute(value=Name(id='subprocess', ctx=Load()), attr='PIPE', ctx=Load()), Attribute(value=Name(id='subprocess', ctx=Load()), attr='PIPE', ctx=Load())])), If(test=Compare(left=Name(id='input_data', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='kwargs', ctx=Load()), slice=Constant(value='stdin'), ctx=Store())], value=Attribute(value=Name(id='subprocess', ctx=Load()), attr='PIPE', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='stdout', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='stderr', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Attribute(value=Name(id='subprocess', ctx=Load()), attr='Popen', ctx=Load()), args=[Name(id='cmd', ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))])), Assign(targets=[Name(id='t1', ctx=Store())], value=Call(func=Name(id='Thread', ctx=Load()), args=[], keywords=[keyword(arg='target', value=Attribute(value=Name(id='self', ctx=Load()), attr='_reader', ctx=Load())), keyword(arg='args', value=Tuple(elts=[Constant(value='stdout'), Attribute(value=Name(id='p', ctx=Load()), attr='stdout', ctx=Load()), Name(id='stdout', ctx=Load())], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='t1', ctx=Load()), attr='start', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='t2', ctx=Store())], value=Call(func=Name(id='Thread', ctx=Load()), args=[], keywords=[keyword(arg='target', value=Attribute(value=Name(id='self', ctx=Load()), attr='_reader', ctx=Load())), keyword(arg='args', value=Tuple(elts=[Constant(value='stderr'), Attribute(value=Name(id='p', ctx=Load()), attr='stderr', ctx=Load()), Name(id='stderr', ctx=Load())], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='t2', ctx=Load()), attr='start', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='input_data', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='p', ctx=Load()), attr='stdin', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='input_data', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='p', ctx=Load()), attr='stdin', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='wait', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='t1', ctx=Load()), attr='join', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='t2', ctx=Load()), attr='join', ctx=Load()), args=[], keywords=[])), Return(value=Tuple(elts=[Attribute(value=Name(id='p', ctx=Load()), attr='returncode', ctx=Load()), Name(id='stdout', ctx=Load()), Name(id='stderr', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='sign_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='filename'), arg(arg='signer'), arg(arg='sign_password'), arg(arg='keystore')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value="\n        Sign a file.\n\n        :param filename: The pathname to the file to be signed.\n        :param signer: The identifier of the signer of the file.\n        :param sign_password: The passphrase for the signer's\n                              private key used for signing.\n        :param keystore: The path to a directory which contains the keys\n                         used in signing. If not specified, the instance's\n                         ``gpg_home`` attribute is used instead.\n        :return: The absolute pathname of the file where the signature is\n                 stored.\n        ")), Assign(targets=[Tuple(elts=[Name(id='cmd', ctx=Store()), Name(id='sig_file', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_sign_command', ctx=Load()), args=[Name(id='filename', ctx=Load()), Name(id='signer', ctx=Load()), Name(id='sign_password', ctx=Load()), Name(id='keystore', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='rc', ctx=Store()), Name(id='stdout', ctx=Store()), Name(id='stderr', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='run_command', ctx=Load()), args=[Name(id='cmd', ctx=Load()), Call(func=Attribute(value=Name(id='sign_password', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[])], keywords=[])), If(test=Compare(left=Name(id='rc', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=0)]), body=[Raise(exc=Call(func=Name(id='DistlibException', ctx=Load()), args=[BinOp(left=Constant(value='sign command failed with error code %s'), op=Mod(), right=Name(id='rc', ctx=Load()))], keywords=[]))], orelse=[]), Return(value=Name(id='sig_file', ctx=Load()))], decorator_list=[]), FunctionDef(name='upload_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='metadata'), arg(arg='filename'), arg(arg='signer'), arg(arg='sign_password'), arg(arg='filetype'), arg(arg='pyversion'), arg(arg='keystore')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value='sdist'), Constant(value='source'), Constant(value=None)]), body=[Expr(value=Constant(value="\n        Upload a release file to the index.\n\n        :param metadata: A :class:`Metadata` instance defining at least a name\n                         and version number for the file to be uploaded.\n        :param filename: The pathname of the file to be uploaded.\n        :param signer: The identifier of the signer of the file.\n        :param sign_password: The passphrase for the signer's\n                              private key used for signing.\n        :param filetype: The type of the file being uploaded. This is the\n                        distutils command which produced that file, e.g.\n                        ``sdist`` or ``bdist_wheel``.\n        :param pyversion: The version of Python which the release relates\n                          to. For code compatible with any Python, this would\n                          be ``source``, otherwise it would be e.g. ``3.2``.\n        :param keystore: The path to a directory which contains the keys\n                         used in signing. If not specified, the instance's\n                         ``gpg_home`` attribute is used instead.\n        :return: The HTTP response received from PyPI upon submission of the\n                request.\n        ")), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='check_credentials', ctx=Load()), args=[], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='DistlibException', ctx=Load()), args=[BinOp(left=Constant(value='not found: %s'), op=Mod(), right=Name(id='filename', ctx=Load()))], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='metadata', ctx=Load()), attr='validate', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='d', ctx=Store())], value=Call(func=Attribute(value=Name(id='metadata', ctx=Load()), attr='todict', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='sig_file', ctx=Store())], value=Constant(value=None)), If(test=Name(id='signer', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='gpg', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='no signing program available - not signed')], keywords=[]))], orelse=[Assign(targets=[Name(id='sig_file', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='sign_file', ctx=Load()), args=[Name(id='filename', ctx=Load()), Name(id='signer', ctx=Load()), Name(id='sign_password', ctx=Load()), Name(id='keystore', ctx=Load())], keywords=[]))])], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='filename', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='file_data', ctx=Store())], value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]))]), Assign(targets=[Name(id='md5_digest', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='hashlib', ctx=Load()), attr='md5', ctx=Load()), args=[Name(id='file_data', ctx=Load())], keywords=[]), attr='hexdigest', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='sha256_digest', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='hashlib', ctx=Load()), attr='sha256', ctx=Load()), args=[Name(id='file_data', ctx=Load())], keywords=[]), attr='hexdigest', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='d', ctx=Load()), attr='update', ctx=Load()), args=[Dict(keys=[Constant(value=':action'), Constant(value='protocol_version'), Constant(value='filetype'), Constant(value='pyversion'), Constant(value='md5_digest'), Constant(value='sha256_digest')], values=[Constant(value='file_upload'), Constant(value='1'), Name(id='filetype', ctx=Load()), Name(id='pyversion', ctx=Load()), Name(id='md5_digest', ctx=Load()), Name(id='sha256_digest', ctx=Load())])], keywords=[])), Assign(targets=[Name(id='files', ctx=Store())], value=List(elts=[Tuple(elts=[Constant(value='content'), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='basename', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[]), Name(id='file_data', ctx=Load())], ctx=Load())], ctx=Load())), If(test=Name(id='sig_file', ctx=Load()), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='sig_file', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='sig_data', ctx=Store())], value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='files', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value='gpg_signature'), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='basename', ctx=Load()), args=[Name(id='sig_file', ctx=Load())], keywords=[]), Name(id='sig_data', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='shutil', ctx=Load()), attr='rmtree', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Name(id='sig_file', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='request', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='encode_request', ctx=Load()), args=[Call(func=Attribute(value=Name(id='d', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), Name(id='files', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='send_request', ctx=Load()), args=[Name(id='request', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='upload_documentation', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='metadata'), arg(arg='doc_dir')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Upload documentation to the index.\n\n        :param metadata: A :class:`Metadata` instance defining at least a name\n                         and version number for the documentation to be\n                         uploaded.\n        :param doc_dir: The pathname of the directory which contains the\n                        documentation. This should be the directory that\n                        contains the ``index.html`` for the documentation.\n        :return: The HTTP response received from PyPI upon submission of the\n                request.\n        ')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='check_credentials', ctx=Load()), args=[], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isdir', ctx=Load()), args=[Name(id='doc_dir', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='DistlibException', ctx=Load()), args=[BinOp(left=Constant(value='not a directory: %r'), op=Mod(), right=Name(id='doc_dir', ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Name(id='fn', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='doc_dir', ctx=Load()), Constant(value='index.html')], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='fn', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='DistlibException', ctx=Load()), args=[BinOp(left=Constant(value='not found: %r'), op=Mod(), right=Name(id='fn', ctx=Load()))], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='metadata', ctx=Load()), attr='validate', ctx=Load()), args=[], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='name', ctx=Store()), Name(id='version', ctx=Store())], ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='metadata', ctx=Load()), attr='name', ctx=Load()), Attribute(value=Name(id='metadata', ctx=Load()), attr='version', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='zip_data', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='zip_dir', ctx=Load()), args=[Name(id='doc_dir', ctx=Load())], keywords=[]), attr='getvalue', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='fields', ctx=Store())], value=List(elts=[Tuple(elts=[Constant(value=':action'), Constant(value='doc_upload')], ctx=Load()), Tuple(elts=[Constant(value='name'), Name(id='name', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='version'), Name(id='version', ctx=Load())], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='files', ctx=Store())], value=List(elts=[Tuple(elts=[Constant(value='content'), Name(id='name', ctx=Load()), Name(id='zip_data', ctx=Load())], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='request', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='encode_request', ctx=Load()), args=[Name(id='fields', ctx=Load()), Name(id='files', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='send_request', ctx=Load()), args=[Name(id='request', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='get_verify_command', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='signature_filename'), arg(arg='data_filename'), arg(arg='keystore')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value="\n        Return a suitable command for verifying a file.\n\n        :param signature_filename: The pathname to the file containing the\n                                   signature.\n        :param data_filename: The pathname to the file containing the\n                              signed data.\n        :param keystore: The path to a directory which contains the keys\n                         used in verification. If not specified, the\n                         instance's ``gpg_home`` attribute is used instead.\n        :return: The verifying command as a list suitable to be\n                 passed to :class:`subprocess.Popen`.\n        ")), Assign(targets=[Name(id='cmd', ctx=Store())], value=List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='gpg', ctx=Load()), Constant(value='--status-fd'), Constant(value='2'), Constant(value='--no-tty')], ctx=Load())), If(test=Compare(left=Name(id='keystore', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='keystore', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='gpg_home', ctx=Load()))], orelse=[]), If(test=Name(id='keystore', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='cmd', ctx=Load()), attr='extend', ctx=Load()), args=[List(elts=[Constant(value='--homedir'), Name(id='keystore', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='cmd', ctx=Load()), attr='extend', ctx=Load()), args=[List(elts=[Constant(value='--verify'), Name(id='signature_filename', ctx=Load()), Name(id='data_filename', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='invoking: %s'), Call(func=Attribute(value=Constant(value=' '), attr='join', ctx=Load()), args=[Name(id='cmd', ctx=Load())], keywords=[])], keywords=[])), Return(value=Name(id='cmd', ctx=Load()))], decorator_list=[]), FunctionDef(name='verify_signature', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='signature_filename'), arg(arg='data_filename'), arg(arg='keystore')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value="\n        Verify a signature for a file.\n\n        :param signature_filename: The pathname to the file containing the\n                                   signature.\n        :param data_filename: The pathname to the file containing the\n                              signed data.\n        :param keystore: The path to a directory which contains the keys\n                         used in verification. If not specified, the\n                         instance's ``gpg_home`` attribute is used instead.\n        :return: True if the signature was verified, else False.\n        ")), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='gpg', ctx=Load())), body=[Raise(exc=Call(func=Name(id='DistlibException', ctx=Load()), args=[Constant(value='verification unavailable because gpg unavailable')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='cmd', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_verify_command', ctx=Load()), args=[Name(id='signature_filename', ctx=Load()), Name(id='data_filename', ctx=Load()), Name(id='keystore', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='rc', ctx=Store()), Name(id='stdout', ctx=Store()), Name(id='stderr', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='run_command', ctx=Load()), args=[Name(id='cmd', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='rc', ctx=Load()), ops=[NotIn()], comparators=[Tuple(elts=[Constant(value=0), Constant(value=1)], ctx=Load())]), body=[Raise(exc=Call(func=Name(id='DistlibException', ctx=Load()), args=[BinOp(left=Constant(value='verify command failed with error code %s'), op=Mod(), right=Name(id='rc', ctx=Load()))], keywords=[]))], orelse=[]), Return(value=Compare(left=Name(id='rc', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]))], decorator_list=[]), FunctionDef(name='download_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='url'), arg(arg='destfile'), arg(arg='digest'), arg(arg='reporthook')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value="\n        This is a convenience method for downloading a file from an URL.\n        Normally, this will be a file from the index, though currently\n        no check is made for this (i.e. a file can be downloaded from\n        anywhere).\n\n        The method is just like the :func:`urlretrieve` function in the\n        standard library, except that it allows digest computation to be\n        done during download and checking that the downloaded data\n        matched any expected value.\n\n        :param url: The URL of the file to be downloaded (assumed to be\n                    available via an HTTP GET request).\n        :param destfile: The pathname where the downloaded file is to be\n                         saved.\n        :param digest: If specified, this must be a (hasher, value)\n                       tuple, where hasher is the algorithm used (e.g.\n                       ``'md5'``) and ``value`` is the expected value.\n        :param reporthook: The same as for :func:`urlretrieve` in the\n                           standard library.\n        ")), If(test=Compare(left=Name(id='digest', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='digester', ctx=Store())], value=Constant(value=None)), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='No digest specified')], keywords=[]))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='digest', ctx=Load()), Tuple(elts=[Name(id='list', ctx=Load()), Name(id='tuple', ctx=Load())], ctx=Load())], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='hasher', ctx=Store()), Name(id='digest', ctx=Store())], ctx=Store())], value=Name(id='digest', ctx=Load()))], orelse=[Assign(targets=[Name(id='hasher', ctx=Store())], value=Constant(value='md5'))]), Assign(targets=[Name(id='digester', ctx=Store())], value=Call(func=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='hashlib', ctx=Load()), Name(id='hasher', ctx=Load())], keywords=[]), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[BinOp(left=Constant(value='Digest specified: %s'), op=Mod(), right=Name(id='digest', ctx=Load()))], keywords=[]))]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='destfile', ctx=Load()), Constant(value='wb')], keywords=[]), optional_vars=Name(id='dfp', ctx=Store()))], body=[Assign(targets=[Name(id='sfp', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='send_request', ctx=Load()), args=[Call(func=Name(id='Request', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[])], keywords=[])), Try(body=[Assign(targets=[Name(id='headers', ctx=Store())], value=Call(func=Attribute(value=Name(id='sfp', ctx=Load()), attr='info', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='blocksize', ctx=Store())], value=Constant(value=8192)), Assign(targets=[Name(id='size', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=1))), Assign(targets=[Name(id='read', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='blocknum', ctx=Store())], value=Constant(value=0)), If(test=Compare(left=Constant(value='content-length'), ops=[In()], comparators=[Name(id='headers', ctx=Load())]), body=[Assign(targets=[Name(id='size', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='headers', ctx=Load()), slice=Constant(value='Content-Length'), ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='reporthook', ctx=Load()), body=[Expr(value=Call(func=Name(id='reporthook', ctx=Load()), args=[Name(id='blocknum', ctx=Load()), Name(id='blocksize', ctx=Load()), Name(id='size', ctx=Load())], keywords=[]))], orelse=[]), While(test=Constant(value=True), body=[Assign(targets=[Name(id='block', ctx=Store())], value=Call(func=Attribute(value=Name(id='sfp', ctx=Load()), attr='read', ctx=Load()), args=[Name(id='blocksize', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='block', ctx=Load())), body=[Break()], orelse=[]), AugAssign(target=Name(id='read', ctx=Store()), op=Add(), value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='block', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='dfp', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='block', ctx=Load())], keywords=[])), If(test=Name(id='digester', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='digester', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='block', ctx=Load())], keywords=[]))], orelse=[]), AugAssign(target=Name(id='blocknum', ctx=Store()), op=Add(), value=Constant(value=1)), If(test=Name(id='reporthook', ctx=Load()), body=[Expr(value=Call(func=Name(id='reporthook', ctx=Load()), args=[Name(id='blocknum', ctx=Load()), Name(id='blocksize', ctx=Load()), Name(id='size', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='sfp', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))])]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='size', ctx=Load()), ops=[GtE()], comparators=[Constant(value=0)]), Compare(left=Name(id='read', ctx=Load()), ops=[Lt()], comparators=[Name(id='size', ctx=Load())])]), body=[Raise(exc=Call(func=Name(id='DistlibException', ctx=Load()), args=[BinOp(left=Constant(value='retrieval incomplete: got only %d out of %d bytes'), op=Mod(), right=Tuple(elts=[Name(id='read', ctx=Load()), Name(id='size', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[]), If(test=Name(id='digester', ctx=Load()), body=[Assign(targets=[Name(id='actual', ctx=Store())], value=Call(func=Attribute(value=Name(id='digester', ctx=Load()), attr='hexdigest', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='digest', ctx=Load()), ops=[NotEq()], comparators=[Name(id='actual', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='DistlibException', ctx=Load()), args=[BinOp(left=Constant(value='%s digest mismatch for %s: expected %s, got %s'), op=Mod(), right=Tuple(elts=[Name(id='hasher', ctx=Load()), Name(id='destfile', ctx=Load()), Name(id='digest', ctx=Load()), Name(id='actual', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Digest verified: %s'), Name(id='digest', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='send_request', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='req')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Send a standard library :class:`Request` to PyPI and return its\n        response.\n\n        :param req: The request to send.\n        :return: The HTTP response from PyPI (a standard library HTTPResponse).\n        ')), Assign(targets=[Name(id='handlers', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='password_handler', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='handlers', ctx=Load()), attr='append', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='password_handler', ctx=Load())], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='ssl_verifier', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='handlers', ctx=Load()), attr='append', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='ssl_verifier', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='opener', ctx=Store())], value=Call(func=Name(id='build_opener', ctx=Load()), args=[Starred(value=Name(id='handlers', ctx=Load()), ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='opener', ctx=Load()), attr='open', ctx=Load()), args=[Name(id='req', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='encode_request', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='fields'), arg(arg='files')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Encode fields and files for posting to an HTTP server.\n\n        :param fields: The fields to send as a list of (fieldname, value)\n                       tuples.\n        :param files: The files to send as a list of (fieldname, filename,\n                      file_bytes) tuple.\n        ')), Assign(targets=[Name(id='parts', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='boundary', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='boundary', ctx=Load())), For(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='values', ctx=Store())], ctx=Store()), iter=Name(id='fields', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='values', ctx=Load()), Tuple(elts=[Name(id='list', ctx=Load()), Name(id='tuple', ctx=Load())], ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='values', ctx=Store())], value=List(elts=[Name(id='values', ctx=Load())], ctx=Load()))], orelse=[]), For(target=Name(id='v', ctx=Store()), iter=Name(id='values', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='parts', ctx=Load()), attr='extend', ctx=Load()), args=[Tuple(elts=[BinOp(left=Constant(value=b'--'), op=Add(), right=Name(id='boundary', ctx=Load())), Call(func=Attribute(value=BinOp(left=Constant(value='Content-Disposition: form-data; name="%s"'), op=Mod(), right=Name(id='k', ctx=Load())), attr='encode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[]), Constant(value=b''), Call(func=Attribute(value=Name(id='v', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[])], ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), For(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='filename', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Name(id='files', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='parts', ctx=Load()), attr='extend', ctx=Load()), args=[Tuple(elts=[BinOp(left=Constant(value=b'--'), op=Add(), right=Name(id='boundary', ctx=Load())), Call(func=Attribute(value=BinOp(left=Constant(value='Content-Disposition: form-data; name="%s"; filename="%s"'), op=Mod(), right=Tuple(elts=[Name(id='key', ctx=Load()), Name(id='filename', ctx=Load())], ctx=Load())), attr='encode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[]), Constant(value=b''), Name(id='value', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='parts', ctx=Load()), attr='extend', ctx=Load()), args=[Tuple(elts=[BinOp(left=BinOp(left=Constant(value=b'--'), op=Add(), right=Name(id='boundary', ctx=Load())), op=Add(), right=Constant(value=b'--')), Constant(value=b'')], ctx=Load())], keywords=[])), Assign(targets=[Name(id='body', ctx=Store())], value=Call(func=Attribute(value=Constant(value=b'\r\n'), attr='join', ctx=Load()), args=[Name(id='parts', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ct', ctx=Store())], value=BinOp(left=Constant(value=b'multipart/form-data; boundary='), op=Add(), right=Name(id='boundary', ctx=Load()))), Assign(targets=[Name(id='headers', ctx=Store())], value=Dict(keys=[Constant(value='Content-type'), Constant(value='Content-length')], values=[Name(id='ct', ctx=Load()), Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='body', ctx=Load())], keywords=[])], keywords=[])])), Return(value=Call(func=Name(id='Request', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='url', ctx=Load()), Name(id='body', ctx=Load()), Name(id='headers', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='terms'), arg(arg='operator')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='terms', ctx=Load()), Name(id='string_types', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='terms', ctx=Store())], value=Dict(keys=[Constant(value='name')], values=[Name(id='terms', ctx=Load())]))], orelse=[]), Assign(targets=[Name(id='rpc_proxy', ctx=Store())], value=Call(func=Name(id='ServerProxy', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='url', ctx=Load())], keywords=[keyword(arg='timeout', value=Constant(value=3.0))])), Try(body=[Return(value=Call(func=Attribute(value=Name(id='rpc_proxy', ctx=Load()), attr='search', ctx=Load()), args=[Name(id='terms', ctx=Load()), BoolOp(op=Or(), values=[Name(id='operator', ctx=Load()), Constant(value='and')])], keywords=[]))], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Call(func=Name(id='rpc_proxy', ctx=Load()), args=[Constant(value='close')], keywords=[]), args=[], keywords=[]))])], decorator_list=[])], decorator_list=[])], type_ignores=[])