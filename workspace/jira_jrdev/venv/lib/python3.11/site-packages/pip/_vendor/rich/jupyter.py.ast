Module(body=[ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING'), alias(name='Any'), alias(name='Dict'), alias(name='Iterable'), alias(name='List'), alias(name='Sequence')], level=0), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='pip._vendor.rich.console', names=[alias(name='ConsoleRenderable')], level=0)], orelse=[]), ImportFrom(names=[alias(name='get_console')], level=1), ImportFrom(module='segment', names=[alias(name='Segment')], level=1), ImportFrom(module='terminal_theme', names=[alias(name='DEFAULT_TERMINAL_THEME')], level=1), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='pip._vendor.rich.console', names=[alias(name='ConsoleRenderable')], level=0)], orelse=[]), Assign(targets=[Name(id='JUPYTER_HTML_FORMAT', ctx=Store())], value=Constant(value='<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,\'DejaVu Sans Mono\',consolas,\'Courier New\',monospace">{code}</pre>\n')), ClassDef(name='JupyterRenderable', bases=[], keywords=[], body=[Expr(value=Constant(value='A shim to write html to Jupyter notebook.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='html', annotation=Name(id='str', ctx=Load())), arg(arg='text', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='html', ctx=Store())], value=Name(id='html', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Store())], value=Name(id='text', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_repr_mimebundle_', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='include', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='exclude', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs', annotation=Name(id='Any', ctx=Load())), defaults=[]), body=[Assign(targets=[Name(id='data', ctx=Store())], value=Dict(keys=[Constant(value='text/plain'), Constant(value='text/html')], values=[Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='html', ctx=Load())])), If(test=Name(id='include', ctx=Load()), body=[Assign(targets=[Name(id='data', ctx=Store())], value=DictComp(key=Name(id='k', ctx=Load()), value=Name(id='v', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[Compare(left=Name(id='k', ctx=Load()), ops=[In()], comparators=[Name(id='include', ctx=Load())])], is_async=0)]))], orelse=[]), If(test=Name(id='exclude', ctx=Load()), body=[Assign(targets=[Name(id='data', ctx=Store())], value=DictComp(key=Name(id='k', ctx=Load()), value=Name(id='v', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[Compare(left=Name(id='k', ctx=Load()), ops=[NotIn()], comparators=[Name(id='exclude', ctx=Load())])], is_async=0)]))], orelse=[]), Return(value=Name(id='data', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()))], decorator_list=[]), ClassDef(name='JupyterMixin', bases=[], keywords=[], body=[Expr(value=Constant(value='Add to an Rich renderable to make it render in Jupyter notebook.')), Assign(targets=[Name(id='__slots__', ctx=Store())], value=Tuple(elts=[], ctx=Load())), FunctionDef(name='_repr_mimebundle_', args=arguments(posonlyargs=[], args=[arg(arg='self', annotation=Constant(value='ConsoleRenderable')), arg(arg='include', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='exclude', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs', annotation=Name(id='Any', ctx=Load())), defaults=[]), body=[Assign(targets=[Name(id='console', ctx=Store())], value=Call(func=Name(id='get_console', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='segments', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='render', ctx=Load()), args=[Name(id='self', ctx=Load()), Attribute(value=Name(id='console', ctx=Load()), attr='options', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='html', ctx=Store())], value=Call(func=Name(id='_render_segments', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[])), Assign(targets=[Name(id='text', ctx=Store())], value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='_render_buffer', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[])), Assign(targets=[Name(id='data', ctx=Store())], value=Dict(keys=[Constant(value='text/plain'), Constant(value='text/html')], values=[Name(id='text', ctx=Load()), Name(id='html', ctx=Load())])), If(test=Name(id='include', ctx=Load()), body=[Assign(targets=[Name(id='data', ctx=Store())], value=DictComp(key=Name(id='k', ctx=Load()), value=Name(id='v', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[Compare(left=Name(id='k', ctx=Load()), ops=[In()], comparators=[Name(id='include', ctx=Load())])], is_async=0)]))], orelse=[]), If(test=Name(id='exclude', ctx=Load()), body=[Assign(targets=[Name(id='data', ctx=Store())], value=DictComp(key=Name(id='k', ctx=Load()), value=Name(id='v', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[Compare(left=Name(id='k', ctx=Load()), ops=[NotIn()], comparators=[Name(id='exclude', ctx=Load())])], is_async=0)]))], orelse=[]), Return(value=Name(id='data', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()))], decorator_list=[]), FunctionDef(name='_render_segments', args=arguments(posonlyargs=[], args=[arg(arg='segments', annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='Segment', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='escape', args=arguments(posonlyargs=[], args=[arg(arg='text', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Escape html.')), Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='text', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='&'), Constant(value='&amp;')], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value='<'), Constant(value='&lt;')], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value='>'), Constant(value='&gt;')], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), AnnAssign(target=Name(id='fragments', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), Assign(targets=[Name(id='append_fragment', ctx=Store())], value=Attribute(value=Name(id='fragments', ctx=Load()), attr='append', ctx=Load())), Assign(targets=[Name(id='theme', ctx=Store())], value=Name(id='DEFAULT_TERMINAL_THEME', ctx=Load())), For(target=Tuple(elts=[Name(id='text', ctx=Store()), Name(id='style', ctx=Store()), Name(id='control', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='Segment', ctx=Load()), attr='simplify', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[]), body=[If(test=Name(id='control', ctx=Load()), body=[Continue()], orelse=[]), Assign(targets=[Name(id='text', ctx=Store())], value=Call(func=Name(id='escape', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[])), If(test=Name(id='style', ctx=Load()), body=[Assign(targets=[Name(id='rule', ctx=Store())], value=Call(func=Attribute(value=Name(id='style', ctx=Load()), attr='get_html_style', ctx=Load()), args=[Name(id='theme', ctx=Load())], keywords=[])), Assign(targets=[Name(id='text', ctx=Store())], value=IfExp(test=Name(id='rule', ctx=Load()), body=JoinedStr(values=[Constant(value='<span style="'), FormattedValue(value=Name(id='rule', ctx=Load()), conversion=-1), Constant(value='">'), FormattedValue(value=Name(id='text', ctx=Load()), conversion=-1), Constant(value='</span>')]), orelse=Name(id='text', ctx=Load()))), If(test=Attribute(value=Name(id='style', ctx=Load()), attr='link', ctx=Load()), body=[Assign(targets=[Name(id='text', ctx=Store())], value=JoinedStr(values=[Constant(value='<a href="'), FormattedValue(value=Attribute(value=Name(id='style', ctx=Load()), attr='link', ctx=Load()), conversion=-1), Constant(value='" target="_blank">'), FormattedValue(value=Name(id='text', ctx=Load()), conversion=-1), Constant(value='</a>')]))], orelse=[])], orelse=[]), Expr(value=Call(func=Name(id='append_fragment', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='code', ctx=Store())], value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Name(id='fragments', ctx=Load())], keywords=[])), Assign(targets=[Name(id='html', ctx=Store())], value=Call(func=Attribute(value=Name(id='JUPYTER_HTML_FORMAT', ctx=Load()), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='code', value=Name(id='code', ctx=Load()))])), Return(value=Name(id='html', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='display', args=arguments(posonlyargs=[], args=[arg(arg='segments', annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='Segment', ctx=Load()), ctx=Load())), arg(arg='text', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Render segments to Jupyter.')), Assign(targets=[Name(id='html', ctx=Store())], value=Call(func=Name(id='_render_segments', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[])), Assign(targets=[Name(id='jupyter_renderable', ctx=Store())], value=Call(func=Name(id='JupyterRenderable', ctx=Load()), args=[Name(id='html', ctx=Load()), Name(id='text', ctx=Load())], keywords=[])), Try(body=[ImportFrom(module='IPython.display', names=[alias(name='display', asname='ipython_display')], level=0), Expr(value=Call(func=Name(id='ipython_display', ctx=Load()), args=[Name(id='jupyter_renderable', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ModuleNotFoundError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='print', args=arguments(posonlyargs=[], args=[], vararg=arg(arg='args', annotation=Name(id='Any', ctx=Load())), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs', annotation=Name(id='Any', ctx=Load())), defaults=[]), body=[Expr(value=Constant(value='Proxy for Console print.')), Assign(targets=[Name(id='console', ctx=Store())], value=Call(func=Name(id='get_console', ctx=Load()), args=[], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='print', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None))], type_ignores=[])