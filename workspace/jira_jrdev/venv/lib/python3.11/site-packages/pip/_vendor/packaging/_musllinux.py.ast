Module(body=[Expr(value=Constant(value='PEP 656 support.\n\nThis module implements logic to detect if the currently running Python is\nlinked against musl, and what musl version is used.\n')), Import(names=[alias(name='contextlib')]), Import(names=[alias(name='functools')]), Import(names=[alias(name='operator')]), Import(names=[alias(name='os')]), Import(names=[alias(name='re')]), Import(names=[alias(name='struct')]), Import(names=[alias(name='subprocess')]), Import(names=[alias(name='sys')]), ImportFrom(module='typing', names=[alias(name='IO'), alias(name='Iterator'), alias(name='NamedTuple'), alias(name='Optional'), alias(name='Tuple')], level=0), FunctionDef(name='_read_unpacked', args=arguments(posonlyargs=[], args=[arg(arg='f', annotation=Subscript(value=Name(id='IO', ctx=Load()), slice=Name(id='bytes', ctx=Load()), ctx=Load())), arg(arg='fmt', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='struct', ctx=Load()), attr='unpack', ctx=Load()), args=[Name(id='fmt', ctx=Load()), Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='read', ctx=Load()), args=[Call(func=Attribute(value=Name(id='struct', ctx=Load()), attr='calcsize', ctx=Load()), args=[Name(id='fmt', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load())), FunctionDef(name='_parse_ld_musl_from_elf', args=arguments(posonlyargs=[], args=[arg(arg='f', annotation=Subscript(value=Name(id='IO', ctx=Load()), slice=Name(id='bytes', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Detect musl libc location by parsing the Python executable.\n\n    Based on: https://gist.github.com/lyssdod/f51579ae8d93c8657a5564aefc2ffbca\n    ELF header: https://refspecs.linuxfoundation.org/elf/gabi4+/ch4.eheader.html\n    ')), Expr(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='seek', ctx=Load()), args=[Constant(value=0)], keywords=[])), Try(body=[Assign(targets=[Name(id='ident', ctx=Store())], value=Call(func=Name(id='_read_unpacked', ctx=Load()), args=[Name(id='f', ctx=Load()), Constant(value='16B')], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='struct', ctx=Load()), attr='error', ctx=Load()), body=[Return(value=Constant(value=None))])], orelse=[], finalbody=[]), If(test=Compare(left=Subscript(value=Name(id='ident', ctx=Load()), slice=Slice(upper=Constant(value=4)), ctx=Load()), ops=[NotEq()], comparators=[Call(func=Name(id='tuple', ctx=Load()), args=[Constant(value=b'\x7fELF')], keywords=[])]), body=[Return(value=Constant(value=None))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='seek', ctx=Load()), args=[Call(func=Attribute(value=Name(id='struct', ctx=Load()), attr='calcsize', ctx=Load()), args=[Constant(value='HHI')], keywords=[]), Constant(value=1)], keywords=[])), Try(body=[Assign(targets=[Tuple(elts=[Name(id='e_fmt', ctx=Store()), Name(id='p_fmt', ctx=Store()), Name(id='p_idx', ctx=Store())], ctx=Store())], value=Subscript(value=Dict(keys=[Constant(value=1), Constant(value=2)], values=[Tuple(elts=[Constant(value='IIIIHHH'), Constant(value='IIIIIIII'), Tuple(elts=[Constant(value=0), Constant(value=1), Constant(value=4)], ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='QQQIHHH'), Constant(value='IIQQQQQQ'), Tuple(elts=[Constant(value=0), Constant(value=2), Constant(value=5)], ctx=Load())], ctx=Load())]), slice=Subscript(value=Name(id='ident', ctx=Load()), slice=Constant(value=4), ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Return(value=Constant(value=None))])], orelse=[Assign(targets=[Name(id='p_get', ctx=Store())], value=Call(func=Attribute(value=Name(id='operator', ctx=Load()), attr='itemgetter', ctx=Load()), args=[Starred(value=Name(id='p_idx', ctx=Load()), ctx=Load())], keywords=[]))], finalbody=[]), Try(body=[Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='e_phoff', ctx=Store()), Name(id='_', ctx=Store()), Name(id='_', ctx=Store()), Name(id='_', ctx=Store()), Name(id='e_phentsize', ctx=Store()), Name(id='e_phnum', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_read_unpacked', ctx=Load()), args=[Name(id='f', ctx=Load()), Name(id='e_fmt', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='struct', ctx=Load()), attr='error', ctx=Load()), body=[Return(value=Constant(value=None))])], orelse=[], finalbody=[]), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[BinOp(left=Name(id='e_phnum', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='seek', ctx=Load()), args=[BinOp(left=Name(id='e_phoff', ctx=Load()), op=Add(), right=BinOp(left=Name(id='e_phentsize', ctx=Load()), op=Mult(), right=Name(id='i', ctx=Load())))], keywords=[])), Try(body=[Assign(targets=[Tuple(elts=[Name(id='p_type', ctx=Store()), Name(id='p_offset', ctx=Store()), Name(id='p_filesz', ctx=Store())], ctx=Store())], value=Call(func=Name(id='p_get', ctx=Load()), args=[Call(func=Name(id='_read_unpacked', ctx=Load()), args=[Name(id='f', ctx=Load()), Name(id='p_fmt', ctx=Load())], keywords=[])], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='struct', ctx=Load()), attr='error', ctx=Load()), body=[Return(value=Constant(value=None))])], orelse=[], finalbody=[]), If(test=Compare(left=Name(id='p_type', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=3)]), body=[Continue()], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='seek', ctx=Load()), args=[Name(id='p_offset', ctx=Load())], keywords=[])), Assign(targets=[Name(id='interpreter', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='fsdecode', ctx=Load()), args=[Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='read', ctx=Load()), args=[Name(id='p_filesz', ctx=Load())], keywords=[])], keywords=[]), attr='strip', ctx=Load()), args=[Constant(value='\x00')], keywords=[])), If(test=Compare(left=Constant(value='musl'), ops=[NotIn()], comparators=[Name(id='interpreter', ctx=Load())]), body=[Return(value=Constant(value=None))], orelse=[]), Return(value=Name(id='interpreter', ctx=Load()))], orelse=[]), Return(value=Constant(value=None))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), ClassDef(name='_MuslVersion', bases=[Name(id='NamedTuple', ctx=Load())], keywords=[], body=[AnnAssign(target=Name(id='major', ctx=Store()), annotation=Name(id='int', ctx=Load()), simple=1), AnnAssign(target=Name(id='minor', ctx=Store()), annotation=Name(id='int', ctx=Load()), simple=1)], decorator_list=[]), FunctionDef(name='_parse_musl_version', args=arguments(posonlyargs=[], args=[arg(arg='output', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='lines', ctx=Store())], value=ListComp(elt=Name(id='n', ctx=Load()), generators=[comprehension(target=Name(id='n', ctx=Store()), iter=GeneratorExp(elt=Call(func=Attribute(value=Name(id='n', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]), generators=[comprehension(target=Name(id='n', ctx=Store()), iter=Call(func=Attribute(value=Name(id='output', ctx=Load()), attr='splitlines', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)]), ifs=[Name(id='n', ctx=Load())], is_async=0)])), If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='lines', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Constant(value=2)]), Compare(left=Subscript(value=Subscript(value=Name(id='lines', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Slice(upper=Constant(value=4)), ctx=Load()), ops=[NotEq()], comparators=[Constant(value='musl')])]), body=[Return(value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='m', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='match', ctx=Load()), args=[Constant(value='Version (\\d+)\\.(\\d+)'), Subscript(value=Name(id='lines', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='m', ctx=Load())), body=[Return(value=Constant(value=None))], orelse=[]), Return(value=Call(func=Name(id='_MuslVersion', ctx=Load()), args=[], keywords=[keyword(arg='major', value=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value=1)], keywords=[])], keywords=[])), keyword(arg='minor', value=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value=2)], keywords=[])], keywords=[]))]))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='_MuslVersion', ctx=Load()), ctx=Load())), FunctionDef(name='_get_musl_version', args=arguments(posonlyargs=[], args=[arg(arg='executable', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Detect currently-running musl runtime version.\n\n    This is done by checking the specified executable's dynamic linking\n    information, and invoking the loader to parse its output for a version\n    string. If the loader is musl, the output would be something like::\n\n        musl libc (x86_64)\n        Version 1.2.2\n        Dynamic Program Loader\n    ")), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='contextlib', ctx=Load()), attr='ExitStack', ctx=Load()), args=[], keywords=[]), optional_vars=Name(id='stack', ctx=Store()))], body=[Try(body=[Assign(targets=[Name(id='f', ctx=Store())], value=Call(func=Attribute(value=Name(id='stack', ctx=Load()), attr='enter_context', ctx=Load()), args=[Call(func=Name(id='open', ctx=Load()), args=[Name(id='executable', ctx=Load()), Constant(value='rb')], keywords=[])], keywords=[]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), body=[Return(value=Constant(value=None))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='ld', ctx=Store())], value=Call(func=Name(id='_parse_ld_musl_from_elf', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))]), If(test=UnaryOp(op=Not(), operand=Name(id='ld', ctx=Load())), body=[Return(value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='proc', ctx=Store())], value=Call(func=Attribute(value=Name(id='subprocess', ctx=Load()), attr='run', ctx=Load()), args=[List(elts=[Name(id='ld', ctx=Load())], ctx=Load())], keywords=[keyword(arg='stderr', value=Attribute(value=Name(id='subprocess', ctx=Load()), attr='PIPE', ctx=Load())), keyword(arg='universal_newlines', value=Constant(value=True))])), Return(value=Call(func=Name(id='_parse_musl_version', ctx=Load()), args=[Attribute(value=Name(id='proc', ctx=Load()), attr='stderr', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='lru_cache', ctx=Load()), args=[], keywords=[])], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='_MuslVersion', ctx=Load()), ctx=Load())), FunctionDef(name='platform_tags', args=arguments(posonlyargs=[], args=[arg(arg='arch', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Generate musllinux tags compatible to the current platform.\n\n    :param arch: Should be the part of platform tag after the ``linux_``\n        prefix, e.g. ``x86_64``. The ``linux_`` prefix is assumed as a\n        prerequisite for the current platform to be musllinux-compatible.\n\n    :returns: An iterator of compatible musllinux tags.\n    ')), Assign(targets=[Name(id='sys_musl', ctx=Store())], value=Call(func=Name(id='_get_musl_version', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='executable', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='sys_musl', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return()], orelse=[]), For(target=Name(id='minor', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='sys_musl', ctx=Load()), attr='minor', ctx=Load()), UnaryOp(op=USub(), operand=Constant(value=1)), UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]), body=[Expr(value=Yield(value=JoinedStr(values=[Constant(value='musllinux_'), FormattedValue(value=Attribute(value=Name(id='sys_musl', ctx=Load()), attr='major', ctx=Load()), conversion=-1), Constant(value='_'), FormattedValue(value=Name(id='minor', ctx=Load()), conversion=-1), Constant(value='_'), FormattedValue(value=Name(id='arch', ctx=Load()), conversion=-1)])))], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__')]), body=[Import(names=[alias(name='sysconfig')]), Assign(targets=[Name(id='plat', ctx=Store())], value=Call(func=Attribute(value=Name(id='sysconfig', ctx=Load()), attr='get_platform', ctx=Load()), args=[], keywords=[])), Assert(test=Call(func=Attribute(value=Name(id='plat', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='linux-')], keywords=[]), msg=Constant(value='not linux')), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='plat:'), Name(id='plat', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='musl:'), Call(func=Name(id='_get_musl_version', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='executable', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='tags:')], keywords=[keyword(arg='end', value=Constant(value=' '))])), For(target=Name(id='t', ctx=Store()), iter=Call(func=Name(id='platform_tags', ctx=Load()), args=[Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value='[.-]'), Constant(value='_'), Subscript(value=Call(func=Attribute(value=Name(id='plat', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='-'), Constant(value=1)], keywords=[]), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[keyword(arg='end', value=Constant(value='\n      '))]))], orelse=[])], orelse=[])], type_ignores=[])