Module(body=[Import(names=[alias(name='itertools')]), ImportFrom(module='compat', names=[alias(name='collections_abc')], level=1), ClassDef(name='DirectedGraph', bases=[Name(id='object', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A graph structure with directed edges.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_vertices', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_forwards', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_backwards', ctx=Store())], value=Dict(keys=[], values=[]))], decorator_list=[]), FunctionDef(name='__iter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='iter', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_vertices', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='__len__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_vertices', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='__contains__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Compare(left=Name(id='key', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_vertices', ctx=Load())]))], decorator_list=[]), FunctionDef(name='copy', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return a shallow copy of this graph.')), Assign(targets=[Name(id='other', ctx=Store())], value=Call(func=Name(id='DirectedGraph', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='other', ctx=Load()), attr='_vertices', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_vertices', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='other', ctx=Load()), attr='_forwards', ctx=Store())], value=DictComp(key=Name(id='k', ctx=Load()), value=Call(func=Name(id='set', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[]), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_forwards', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Attribute(value=Name(id='other', ctx=Load()), attr='_backwards', ctx=Store())], value=DictComp(key=Name(id='k', ctx=Load()), value=Call(func=Name(id='set', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[]), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_backwards', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])), Return(value=Name(id='other', ctx=Load()))], decorator_list=[]), FunctionDef(name='add', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Add a new vertex to the graph.')), If(test=Compare(left=Name(id='key', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_vertices', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='vertex exists')], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_vertices', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_forwards', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_backwards', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='remove', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Remove a vertex from the graph, disconnecting all edges from/to it.')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_vertices', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[])), For(target=Name(id='f', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_forwards', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_backwards', ctx=Load()), slice=Name(id='f', ctx=Load()), ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='t', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_backwards', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_forwards', ctx=Load()), slice=Name(id='t', ctx=Load()), ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='connected', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='f'), arg(arg='t')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=And(), values=[Compare(left=Name(id='f', ctx=Load()), ops=[In()], comparators=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_backwards', ctx=Load()), slice=Name(id='t', ctx=Load()), ctx=Load())]), Compare(left=Name(id='t', ctx=Load()), ops=[In()], comparators=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_forwards', ctx=Load()), slice=Name(id='f', ctx=Load()), ctx=Load())])]))], decorator_list=[]), FunctionDef(name='connect', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='f'), arg(arg='t')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Connect two existing vertices.\n\n        Nothing happens if the vertices are already connected.\n        ')), If(test=Compare(left=Name(id='t', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_vertices', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='KeyError', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_forwards', ctx=Load()), slice=Name(id='f', ctx=Load()), ctx=Load()), attr='add', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_backwards', ctx=Load()), slice=Name(id='t', ctx=Load()), ctx=Load()), attr='add', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='iter_edges', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Tuple(elts=[Name(id='f', ctx=Store()), Name(id='children', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_forwards', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[For(target=Name(id='t', ctx=Store()), iter=Name(id='children', ctx=Load()), body=[Expr(value=Yield(value=Tuple(elts=[Name(id='f', ctx=Load()), Name(id='t', ctx=Load())], ctx=Load())))], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='iter_children', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='iter', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_forwards', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='iter_parents', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='iter', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_backwards', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='IteratorMapping', bases=[Attribute(value=Name(id='collections_abc', ctx=Load()), attr='Mapping', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='mapping'), arg(arg='accessor'), arg(arg='appends')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_mapping', ctx=Store())], value=Name(id='mapping', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_accessor', ctx=Store())], value=Name(id='accessor', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_appends', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='appends', ctx=Load()), Dict(keys=[], values=[])]))], decorator_list=[]), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value='IteratorMapping({!r}, {!r}, {!r})'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_mapping', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_accessor', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_appends', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='__bool__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='bool', ctx=Load()), args=[BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='_mapping', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_appends', ctx=Load())])], keywords=[]))], decorator_list=[]), Assign(targets=[Name(id='__nonzero__', ctx=Store())], value=Name(id='__bool__', ctx=Load())), FunctionDef(name='__contains__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=Or(), values=[Compare(left=Name(id='key', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_mapping', ctx=Load())]), Compare(left=Name(id='key', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_appends', ctx=Load())])]))], decorator_list=[]), FunctionDef(name='__getitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='k')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Name(id='v', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_mapping', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Return(value=Call(func=Name(id='iter', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_appends', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Load())], keywords=[]))])], orelse=[], finalbody=[]), Return(value=Call(func=Attribute(value=Name(id='itertools', ctx=Load()), attr='chain', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_accessor', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_appends', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='k', ctx=Load()), Tuple(elts=[], ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='__iter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='more', ctx=Store())], value=GeneratorExp(elt=Name(id='k', ctx=Load()), generators=[comprehension(target=Name(id='k', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_appends', ctx=Load()), ifs=[Compare(left=Name(id='k', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_mapping', ctx=Load())])], is_async=0)])), Return(value=Call(func=Attribute(value=Name(id='itertools', ctx=Load()), attr='chain', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_mapping', ctx=Load()), Name(id='more', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='__len__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='more', ctx=Store())], value=Call(func=Name(id='sum', ctx=Load()), args=[GeneratorExp(elt=Constant(value=1), generators=[comprehension(target=Name(id='k', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_appends', ctx=Load()), ifs=[Compare(left=Name(id='k', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_mapping', ctx=Load())])], is_async=0)])], keywords=[])), Return(value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_mapping', ctx=Load())], keywords=[]), op=Add(), right=Name(id='more', ctx=Load())))], decorator_list=[])], decorator_list=[]), ClassDef(name='_FactoryIterableView', bases=[Name(id='object', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Wrap an iterator factory returned by `find_matches()`.\n\n    Calling `iter()` on this class would invoke the underlying iterator\n    factory, making it a "collection with ordering" that can be iterated\n    through multiple times, but lacks random access methods presented in\n    built-in Python sequence types.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='factory')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_factory', ctx=Store())], value=Name(id='factory', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_iterable', ctx=Store())], value=Constant(value=None))], decorator_list=[]), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value='{}({})'), attr='format', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), Call(func=Name(id='list', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='__bool__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Expr(value=Call(func=Name(id='next', ctx=Load()), args=[Call(func=Name(id='iter', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])], keywords=[]))], handlers=[ExceptHandler(type=Name(id='StopIteration', ctx=Load()), body=[Return(value=Constant(value=False))])], orelse=[], finalbody=[]), Return(value=Constant(value=True))], decorator_list=[]), Assign(targets=[Name(id='__nonzero__', ctx=Store())], value=Name(id='__bool__', ctx=Load())), FunctionDef(name='__iter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='iterable', ctx=Store())], value=IfExp(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_iterable', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_factory', ctx=Load()), args=[], keywords=[]), orelse=Attribute(value=Name(id='self', ctx=Load()), attr='_iterable', ctx=Load()))), Assign(targets=[Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_iterable', ctx=Store()), Name(id='current', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='itertools', ctx=Load()), attr='tee', ctx=Load()), args=[Name(id='iterable', ctx=Load())], keywords=[])), Return(value=Name(id='current', ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='_SequenceIterableView', bases=[Name(id='object', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Wrap an iterable returned by find_matches().\n\n    This is essentially just a proxy to the underlying sequence that provides\n    the same interface as `_FactoryIterableView`.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='sequence')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_sequence', ctx=Store())], value=Name(id='sequence', ctx=Load()))], decorator_list=[]), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value='{}({})'), attr='format', ctx=Load()), args=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_sequence', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='__bool__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='bool', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_sequence', ctx=Load())], keywords=[]))], decorator_list=[]), Assign(targets=[Name(id='__nonzero__', ctx=Store())], value=Name(id='__bool__', ctx=Load())), FunctionDef(name='__iter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='iter', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_sequence', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), FunctionDef(name='build_iter_view', args=arguments(posonlyargs=[], args=[arg(arg='matches')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Build an iterable view from the value returned by `find_matches()`.')), If(test=Call(func=Name(id='callable', ctx=Load()), args=[Name(id='matches', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Name(id='_FactoryIterableView', ctx=Load()), args=[Name(id='matches', ctx=Load())], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='matches', ctx=Load()), Attribute(value=Name(id='collections_abc', ctx=Load()), attr='Sequence', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='matches', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='matches', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='_SequenceIterableView', ctx=Load()), args=[Name(id='matches', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])