Module(body=[ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING'), alias(name='Optional')], level=0), ImportFrom(module='align', names=[alias(name='AlignMethod')], level=1), ImportFrom(module='box', names=[alias(name='ROUNDED'), alias(name='Box')], level=1), ImportFrom(module='cells', names=[alias(name='cell_len')], level=1), ImportFrom(module='jupyter', names=[alias(name='JupyterMixin')], level=1), ImportFrom(module='measure', names=[alias(name='Measurement'), alias(name='measure_renderables')], level=1), ImportFrom(module='padding', names=[alias(name='Padding'), alias(name='PaddingDimensions')], level=1), ImportFrom(module='segment', names=[alias(name='Segment')], level=1), ImportFrom(module='style', names=[alias(name='Style'), alias(name='StyleType')], level=1), ImportFrom(module='text', names=[alias(name='Text'), alias(name='TextType')], level=1), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='console', names=[alias(name='Console'), alias(name='ConsoleOptions'), alias(name='RenderableType'), alias(name='RenderResult')], level=1)], orelse=[]), ClassDef(name='Panel', bases=[Name(id='JupyterMixin', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A console renderable that draws a border around its contents.\n\n    Example:\n        >>> console.print(Panel("Hello, World!"))\n\n    Args:\n        renderable (RenderableType): A console renderable object.\n        box (Box, optional): A Box instance that defines the look of the border (see :ref:`appendix_box`.\n            Defaults to box.ROUNDED.\n        safe_box (bool, optional): Disable box characters that don\'t display on windows legacy terminal with *raster* fonts. Defaults to True.\n        expand (bool, optional): If True the panel will stretch to fill the console\n            width, otherwise it will be sized to fit the contents. Defaults to True.\n        style (str, optional): The style of the panel (border and contents). Defaults to "none".\n        border_style (str, optional): The style of the border. Defaults to "none".\n        width (Optional[int], optional): Optional width of panel. Defaults to None to auto-detect.\n        height (Optional[int], optional): Optional height of panel. Defaults to None to auto-detect.\n        padding (Optional[PaddingDimensions]): Optional padding around renderable. Defaults to 0.\n        highlight (bool, optional): Enable automatic highlighting of panel title (if str). Defaults to False.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='renderable', annotation=Constant(value='RenderableType')), arg(arg='box', annotation=Name(id='Box', ctx=Load()))], kwonlyargs=[arg(arg='title', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TextType', ctx=Load()), ctx=Load())), arg(arg='title_align', annotation=Name(id='AlignMethod', ctx=Load())), arg(arg='subtitle', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TextType', ctx=Load()), ctx=Load())), arg(arg='subtitle_align', annotation=Name(id='AlignMethod', ctx=Load())), arg(arg='safe_box', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load())), arg(arg='expand', annotation=Name(id='bool', ctx=Load())), arg(arg='style', annotation=Name(id='StyleType', ctx=Load())), arg(arg='border_style', annotation=Name(id='StyleType', ctx=Load())), arg(arg='width', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='height', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='padding', annotation=Name(id='PaddingDimensions', ctx=Load())), arg(arg='highlight', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=None), Constant(value='center'), Constant(value=None), Constant(value='center'), Constant(value=None), Constant(value=True), Constant(value='none'), Constant(value='none'), Constant(value=None), Constant(value=None), Tuple(elts=[Constant(value=0), Constant(value=1)], ctx=Load()), Constant(value=False)], defaults=[Name(id='ROUNDED', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='renderable', ctx=Store())], value=Name(id='renderable', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='box', ctx=Store())], value=Name(id='box', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='title', ctx=Store())], value=Name(id='title', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='title_align', ctx=Store()), annotation=Name(id='AlignMethod', ctx=Load()), value=Name(id='title_align', ctx=Load()), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='subtitle', ctx=Store())], value=Name(id='subtitle', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='subtitle_align', ctx=Store())], value=Name(id='subtitle_align', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='safe_box', ctx=Store())], value=Name(id='safe_box', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='expand', ctx=Store())], value=Name(id='expand', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Store())], value=Name(id='style', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='border_style', ctx=Store())], value=Name(id='border_style', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='width', ctx=Store())], value=Name(id='width', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='height', ctx=Store())], value=Name(id='height', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='padding', ctx=Store())], value=Name(id='padding', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='highlight', ctx=Store())], value=Name(id='highlight', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='fit', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='renderable', annotation=Constant(value='RenderableType')), arg(arg='box', annotation=Name(id='Box', ctx=Load()))], kwonlyargs=[arg(arg='title', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TextType', ctx=Load()), ctx=Load())), arg(arg='title_align', annotation=Name(id='AlignMethod', ctx=Load())), arg(arg='subtitle', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TextType', ctx=Load()), ctx=Load())), arg(arg='subtitle_align', annotation=Name(id='AlignMethod', ctx=Load())), arg(arg='safe_box', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load())), arg(arg='style', annotation=Name(id='StyleType', ctx=Load())), arg(arg='border_style', annotation=Name(id='StyleType', ctx=Load())), arg(arg='width', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='padding', annotation=Name(id='PaddingDimensions', ctx=Load()))], kw_defaults=[Constant(value=None), Constant(value='center'), Constant(value=None), Constant(value='center'), Constant(value=None), Constant(value='none'), Constant(value='none'), Constant(value=None), Tuple(elts=[Constant(value=0), Constant(value=1)], ctx=Load())], defaults=[Name(id='ROUNDED', ctx=Load())]), body=[Expr(value=Constant(value='An alternative constructor that sets expand=False.')), Return(value=Call(func=Name(id='cls', ctx=Load()), args=[Name(id='renderable', ctx=Load()), Name(id='box', ctx=Load())], keywords=[keyword(arg='title', value=Name(id='title', ctx=Load())), keyword(arg='title_align', value=Name(id='title_align', ctx=Load())), keyword(arg='subtitle', value=Name(id='subtitle', ctx=Load())), keyword(arg='subtitle_align', value=Name(id='subtitle_align', ctx=Load())), keyword(arg='safe_box', value=Name(id='safe_box', ctx=Load())), keyword(arg='style', value=Name(id='style', ctx=Load())), keyword(arg='border_style', value=Name(id='border_style', ctx=Load())), keyword(arg='width', value=Name(id='width', ctx=Load())), keyword(arg='padding', value=Name(id='padding', ctx=Load())), keyword(arg='expand', value=Constant(value=False))]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Constant(value='Panel')), FunctionDef(name='_title', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='title', ctx=Load()), body=[Assign(targets=[Name(id='title_text', ctx=Store())], value=IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='title', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=Call(func=Attribute(value=Name(id='Text', ctx=Load()), attr='from_markup', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='title', ctx=Load())], keywords=[]), orelse=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='title', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[]))), Assign(targets=[Attribute(value=Name(id='title_text', ctx=Load()), attr='end', ctx=Store())], value=Constant(value='')), Assign(targets=[Attribute(value=Name(id='title_text', ctx=Load()), attr='plain', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='title_text', ctx=Load()), attr='plain', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='\n'), Constant(value=' ')], keywords=[])), Assign(targets=[Attribute(value=Name(id='title_text', ctx=Load()), attr='no_wrap', ctx=Store())], value=Constant(value=True)), Expr(value=Call(func=Attribute(value=Name(id='title_text', ctx=Load()), attr='expand_tabs', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='title_text', ctx=Load()), attr='pad', ctx=Load()), args=[Constant(value=1)], keywords=[])), Return(value=Name(id='title_text', ctx=Load()))], orelse=[]), Return(value=Constant(value=None))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Text', ctx=Load()), ctx=Load())), FunctionDef(name='_subtitle', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='subtitle', ctx=Load()), body=[Assign(targets=[Name(id='subtitle_text', ctx=Store())], value=IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='subtitle', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=Call(func=Attribute(value=Name(id='Text', ctx=Load()), attr='from_markup', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='subtitle', ctx=Load())], keywords=[]), orelse=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subtitle', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[]))), Assign(targets=[Attribute(value=Name(id='subtitle_text', ctx=Load()), attr='end', ctx=Store())], value=Constant(value='')), Assign(targets=[Attribute(value=Name(id='subtitle_text', ctx=Load()), attr='plain', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='subtitle_text', ctx=Load()), attr='plain', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='\n'), Constant(value=' ')], keywords=[])), Assign(targets=[Attribute(value=Name(id='subtitle_text', ctx=Load()), attr='no_wrap', ctx=Store())], value=Constant(value=True)), Expr(value=Call(func=Attribute(value=Name(id='subtitle_text', ctx=Load()), attr='expand_tabs', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='subtitle_text', ctx=Load()), attr='pad', ctx=Load()), args=[Constant(value=1)], keywords=[])), Return(value=Name(id='subtitle_text', ctx=Load()))], orelse=[]), Return(value=Constant(value=None))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Text', ctx=Load()), ctx=Load())), FunctionDef(name='__rich_console__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='console', annotation=Constant(value='Console')), arg(arg='options', annotation=Constant(value='ConsoleOptions'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='_padding', ctx=Store())], value=Call(func=Attribute(value=Name(id='Padding', ctx=Load()), attr='unpack', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='padding', ctx=Load())], keywords=[])), Assign(targets=[Name(id='renderable', ctx=Store())], value=IfExp(test=Call(func=Name(id='any', ctx=Load()), args=[Name(id='_padding', ctx=Load())], keywords=[]), body=Call(func=Name(id='Padding', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='renderable', ctx=Load()), Name(id='_padding', ctx=Load())], keywords=[]), orelse=Attribute(value=Name(id='self', ctx=Load()), attr='renderable', ctx=Load()))), Assign(targets=[Name(id='style', ctx=Store())], value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='get_style', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load())], keywords=[])), Assign(targets=[Name(id='border_style', ctx=Store())], value=BinOp(left=Name(id='style', ctx=Load()), op=Add(), right=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='get_style', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='border_style', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='width', ctx=Store())], value=IfExp(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='width', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Attribute(value=Name(id='options', ctx=Load()), attr='max_width', ctx=Load()), orelse=Call(func=Name(id='min', ctx=Load()), args=[Attribute(value=Name(id='options', ctx=Load()), attr='max_width', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='width', ctx=Load())], keywords=[]))), AnnAssign(target=Name(id='safe_box', ctx=Store()), annotation=Name(id='bool', ctx=Load()), value=IfExp(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='safe_box', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Attribute(value=Name(id='console', ctx=Load()), attr='safe_box', ctx=Load()), orelse=Attribute(value=Name(id='self', ctx=Load()), attr='safe_box', ctx=Load())), simple=1), Assign(targets=[Name(id='box', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='box', ctx=Load()), attr='substitute', ctx=Load()), args=[Name(id='options', ctx=Load())], keywords=[keyword(arg='safe', value=Name(id='safe_box', ctx=Load()))])), FunctionDef(name='align_text', args=arguments(posonlyargs=[], args=[arg(arg='text', annotation=Name(id='Text', ctx=Load())), arg(arg='width', annotation=Name(id='int', ctx=Load())), arg(arg='align', annotation=Name(id='str', ctx=Load())), arg(arg='character', annotation=Name(id='str', ctx=Load())), arg(arg='style', annotation=Name(id='Style', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Gets new aligned text.\n\n            Args:\n                text (Text): Title or subtitle text.\n                width (int): Desired width.\n                align (str): Alignment.\n                character (str): Character for alignment.\n                style (Style): Border style\n\n            Returns:\n                Text: New text instance\n            ')), Assign(targets=[Name(id='text', ctx=Store())], value=Call(func=Attribute(value=Name(id='text', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='text', ctx=Load()), attr='truncate', ctx=Load()), args=[Name(id='width', ctx=Load())], keywords=[])), Assign(targets=[Name(id='excess_space', ctx=Store())], value=BinOp(left=Name(id='width', ctx=Load()), op=Sub(), right=Call(func=Name(id='cell_len', ctx=Load()), args=[Attribute(value=Name(id='text', ctx=Load()), attr='plain', ctx=Load())], keywords=[]))), If(test=Name(id='excess_space', ctx=Load()), body=[If(test=Compare(left=Name(id='align', ctx=Load()), ops=[Eq()], comparators=[Constant(value='left')]), body=[Return(value=Call(func=Attribute(value=Name(id='Text', ctx=Load()), attr='assemble', ctx=Load()), args=[Name(id='text', ctx=Load()), Tuple(elts=[BinOp(left=Name(id='character', ctx=Load()), op=Mult(), right=Name(id='excess_space', ctx=Load())), Name(id='style', ctx=Load())], ctx=Load())], keywords=[keyword(arg='no_wrap', value=Constant(value=True)), keyword(arg='end', value=Constant(value=''))]))], orelse=[If(test=Compare(left=Name(id='align', ctx=Load()), ops=[Eq()], comparators=[Constant(value='center')]), body=[Assign(targets=[Name(id='left', ctx=Store())], value=BinOp(left=Name(id='excess_space', ctx=Load()), op=FloorDiv(), right=Constant(value=2))), Return(value=Call(func=Attribute(value=Name(id='Text', ctx=Load()), attr='assemble', ctx=Load()), args=[Tuple(elts=[BinOp(left=Name(id='character', ctx=Load()), op=Mult(), right=Name(id='left', ctx=Load())), Name(id='style', ctx=Load())], ctx=Load()), Name(id='text', ctx=Load()), Tuple(elts=[BinOp(left=Name(id='character', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='excess_space', ctx=Load()), op=Sub(), right=Name(id='left', ctx=Load()))), Name(id='style', ctx=Load())], ctx=Load())], keywords=[keyword(arg='no_wrap', value=Constant(value=True)), keyword(arg='end', value=Constant(value=''))]))], orelse=[Return(value=Call(func=Attribute(value=Name(id='Text', ctx=Load()), attr='assemble', ctx=Load()), args=[Tuple(elts=[BinOp(left=Name(id='character', ctx=Load()), op=Mult(), right=Name(id='excess_space', ctx=Load())), Name(id='style', ctx=Load())], ctx=Load()), Name(id='text', ctx=Load())], keywords=[keyword(arg='no_wrap', value=Constant(value=True)), keyword(arg='end', value=Constant(value=''))]))])])], orelse=[]), Return(value=Name(id='text', ctx=Load()))], decorator_list=[], returns=Name(id='Text', ctx=Load())), Assign(targets=[Name(id='title_text', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_title', ctx=Load())), If(test=Compare(left=Name(id='title_text', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='title_text', ctx=Load()), attr='stylize_before', ctx=Load()), args=[Name(id='border_style', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='child_width', ctx=Store())], value=IfExp(test=Attribute(value=Name(id='self', ctx=Load()), attr='expand', ctx=Load()), body=BinOp(left=Name(id='width', ctx=Load()), op=Sub(), right=Constant(value=2)), orelse=Attribute(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='measure', ctx=Load()), args=[Name(id='renderable', ctx=Load())], keywords=[keyword(arg='options', value=Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='update_width', ctx=Load()), args=[BinOp(left=Name(id='width', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[]))]), attr='maximum', ctx=Load()))), Assign(targets=[Name(id='child_height', ctx=Store())], value=BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='height', ctx=Load()), Attribute(value=Name(id='options', ctx=Load()), attr='height', ctx=Load()), Constant(value=None)])), If(test=Name(id='child_height', ctx=Load()), body=[AugAssign(target=Name(id='child_height', ctx=Store()), op=Sub(), value=Constant(value=2))], orelse=[]), If(test=Compare(left=Name(id='title_text', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='child_width', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='options', ctx=Load()), attr='max_width', ctx=Load()), op=Sub(), right=Constant(value=2)), Call(func=Name(id='max', ctx=Load()), args=[Name(id='child_width', ctx=Load()), BinOp(left=Attribute(value=Name(id='title_text', ctx=Load()), attr='cell_len', ctx=Load()), op=Add(), right=Constant(value=2))], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='width', ctx=Store())], value=BinOp(left=Name(id='child_width', ctx=Load()), op=Add(), right=Constant(value=2))), Assign(targets=[Name(id='child_options', ctx=Store())], value=Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='update', ctx=Load()), args=[], keywords=[keyword(arg='width', value=Name(id='child_width', ctx=Load())), keyword(arg='height', value=Name(id='child_height', ctx=Load())), keyword(arg='highlight', value=Attribute(value=Name(id='self', ctx=Load()), attr='highlight', ctx=Load()))])), Assign(targets=[Name(id='lines', ctx=Store())], value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='render_lines', ctx=Load()), args=[Name(id='renderable', ctx=Load()), Name(id='child_options', ctx=Load())], keywords=[keyword(arg='style', value=Name(id='style', ctx=Load()))])), Assign(targets=[Name(id='line_start', ctx=Store())], value=Call(func=Name(id='Segment', ctx=Load()), args=[Attribute(value=Name(id='box', ctx=Load()), attr='mid_left', ctx=Load()), Name(id='border_style', ctx=Load())], keywords=[])), Assign(targets=[Name(id='line_end', ctx=Store())], value=Call(func=Name(id='Segment', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='box', ctx=Load()), attr='mid_right', ctx=Load()), conversion=-1)]), Name(id='border_style', ctx=Load())], keywords=[])), Assign(targets=[Name(id='new_line', ctx=Store())], value=Call(func=Attribute(value=Name(id='Segment', ctx=Load()), attr='line', ctx=Load()), args=[], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='title_text', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Name(id='width', ctx=Load()), ops=[LtE()], comparators=[Constant(value=4)])]), body=[Expr(value=Yield(value=Call(func=Name(id='Segment', ctx=Load()), args=[Call(func=Attribute(value=Name(id='box', ctx=Load()), attr='get_top', ctx=Load()), args=[List(elts=[BinOp(left=Name(id='width', ctx=Load()), op=Sub(), right=Constant(value=2))], ctx=Load())], keywords=[]), Name(id='border_style', ctx=Load())], keywords=[])))], orelse=[Assign(targets=[Name(id='title_text', ctx=Store())], value=Call(func=Name(id='align_text', ctx=Load()), args=[Name(id='title_text', ctx=Load()), BinOp(left=Name(id='width', ctx=Load()), op=Sub(), right=Constant(value=4)), Attribute(value=Name(id='self', ctx=Load()), attr='title_align', ctx=Load()), Attribute(value=Name(id='box', ctx=Load()), attr='top', ctx=Load()), Name(id='border_style', ctx=Load())], keywords=[])), Expr(value=Yield(value=Call(func=Name(id='Segment', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='box', ctx=Load()), attr='top_left', ctx=Load()), op=Add(), right=Attribute(value=Name(id='box', ctx=Load()), attr='top', ctx=Load())), Name(id='border_style', ctx=Load())], keywords=[]))), Expr(value=YieldFrom(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='render', ctx=Load()), args=[Name(id='title_text', ctx=Load()), Call(func=Attribute(value=Name(id='child_options', ctx=Load()), attr='update_width', ctx=Load()), args=[BinOp(left=Name(id='width', ctx=Load()), op=Sub(), right=Constant(value=4))], keywords=[])], keywords=[]))), Expr(value=Yield(value=Call(func=Name(id='Segment', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='box', ctx=Load()), attr='top', ctx=Load()), op=Add(), right=Attribute(value=Name(id='box', ctx=Load()), attr='top_right', ctx=Load())), Name(id='border_style', ctx=Load())], keywords=[])))]), Expr(value=Yield(value=Name(id='new_line', ctx=Load()))), For(target=Name(id='line', ctx=Store()), iter=Name(id='lines', ctx=Load()), body=[Expr(value=Yield(value=Name(id='line_start', ctx=Load()))), Expr(value=YieldFrom(value=Name(id='line', ctx=Load()))), Expr(value=Yield(value=Name(id='line_end', ctx=Load()))), Expr(value=Yield(value=Name(id='new_line', ctx=Load())))], orelse=[]), Assign(targets=[Name(id='subtitle_text', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_subtitle', ctx=Load())), If(test=Compare(left=Name(id='subtitle_text', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='subtitle_text', ctx=Load()), attr='stylize_before', ctx=Load()), args=[Name(id='border_style', ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='subtitle_text', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Name(id='width', ctx=Load()), ops=[LtE()], comparators=[Constant(value=4)])]), body=[Expr(value=Yield(value=Call(func=Name(id='Segment', ctx=Load()), args=[Call(func=Attribute(value=Name(id='box', ctx=Load()), attr='get_bottom', ctx=Load()), args=[List(elts=[BinOp(left=Name(id='width', ctx=Load()), op=Sub(), right=Constant(value=2))], ctx=Load())], keywords=[]), Name(id='border_style', ctx=Load())], keywords=[])))], orelse=[Assign(targets=[Name(id='subtitle_text', ctx=Store())], value=Call(func=Name(id='align_text', ctx=Load()), args=[Name(id='subtitle_text', ctx=Load()), BinOp(left=Name(id='width', ctx=Load()), op=Sub(), right=Constant(value=4)), Attribute(value=Name(id='self', ctx=Load()), attr='subtitle_align', ctx=Load()), Attribute(value=Name(id='box', ctx=Load()), attr='bottom', ctx=Load()), Name(id='border_style', ctx=Load())], keywords=[])), Expr(value=Yield(value=Call(func=Name(id='Segment', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='box', ctx=Load()), attr='bottom_left', ctx=Load()), op=Add(), right=Attribute(value=Name(id='box', ctx=Load()), attr='bottom', ctx=Load())), Name(id='border_style', ctx=Load())], keywords=[]))), Expr(value=YieldFrom(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='render', ctx=Load()), args=[Name(id='subtitle_text', ctx=Load()), Call(func=Attribute(value=Name(id='child_options', ctx=Load()), attr='update_width', ctx=Load()), args=[BinOp(left=Name(id='width', ctx=Load()), op=Sub(), right=Constant(value=4))], keywords=[])], keywords=[]))), Expr(value=Yield(value=Call(func=Name(id='Segment', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='box', ctx=Load()), attr='bottom', ctx=Load()), op=Add(), right=Attribute(value=Name(id='box', ctx=Load()), attr='bottom_right', ctx=Load())), Name(id='border_style', ctx=Load())], keywords=[])))]), Expr(value=Yield(value=Name(id='new_line', ctx=Load())))], decorator_list=[], returns=Constant(value='RenderResult')), FunctionDef(name='__rich_measure__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='console', annotation=Constant(value='Console')), arg(arg='options', annotation=Constant(value='ConsoleOptions'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='_title', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_title', ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='right', ctx=Store()), Name(id='_', ctx=Store()), Name(id='left', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='Padding', ctx=Load()), attr='unpack', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='padding', ctx=Load())], keywords=[])), Assign(targets=[Name(id='padding', ctx=Store())], value=BinOp(left=Name(id='left', ctx=Load()), op=Add(), right=Name(id='right', ctx=Load()))), Assign(targets=[Name(id='renderables', ctx=Store())], value=IfExp(test=Name(id='_title', ctx=Load()), body=List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='renderable', ctx=Load()), Name(id='_title', ctx=Load())], ctx=Load()), orelse=List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='renderable', ctx=Load())], ctx=Load()))), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='width', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='width', ctx=Store())], value=BinOp(left=BinOp(left=Attribute(value=Call(func=Name(id='measure_renderables', ctx=Load()), args=[Name(id='console', ctx=Load()), Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='update_width', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='options', ctx=Load()), attr='max_width', ctx=Load()), op=Sub(), right=Name(id='padding', ctx=Load())), op=Sub(), right=Constant(value=2))], keywords=[]), Name(id='renderables', ctx=Load())], keywords=[]), attr='maximum', ctx=Load()), op=Add(), right=Name(id='padding', ctx=Load())), op=Add(), right=Constant(value=2)))], orelse=[Assign(targets=[Name(id='width', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='width', ctx=Load()))]), Return(value=Call(func=Name(id='Measurement', ctx=Load()), args=[Name(id='width', ctx=Load()), Name(id='width', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value='Measurement'))], decorator_list=[]), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__')]), body=[ImportFrom(module='console', names=[alias(name='Console')], level=1), Assign(targets=[Name(id='c', ctx=Store())], value=Call(func=Name(id='Console', ctx=Load()), args=[], keywords=[])), ImportFrom(module='box', names=[alias(name='DOUBLE'), alias(name='ROUNDED')], level=1), ImportFrom(module='padding', names=[alias(name='Padding')], level=1), Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Name(id='Panel', ctx=Load()), args=[Constant(value='Hello, World!')], keywords=[keyword(arg='title', value=Constant(value='rich.Panel')), keyword(arg='style', value=Constant(value='white on blue')), keyword(arg='box', value=Name(id='DOUBLE', ctx=Load())), keyword(arg='padding', value=Constant(value=1))])), Expr(value=Call(func=Attribute(value=Name(id='c', ctx=Load()), attr='print', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='c', ctx=Load()), attr='print', ctx=Load()), args=[Name(id='p', ctx=Load())], keywords=[]))], orelse=[])], type_ignores=[])