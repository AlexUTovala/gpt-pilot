Module(body=[Expr(value=Constant(value='\n    Pygments\n    ~~~~~~~~\n\n    Pygments is a syntax highlighting package written in Python.\n\n    It is a generic syntax highlighter for general use in all kinds of software\n    such as forum systems, wikis or other applications that need to prettify\n    source code. Highlights are:\n\n    * a wide range of common languages and markup formats is supported\n    * special attention is paid to details, increasing quality by a fair amount\n    * support for new languages and formats are added easily\n    * a number of output formats, presently HTML, LaTeX, RTF, SVG, all image\n      formats that PIL supports, and ANSI sequences\n    * it is usable as a command-line tool and as a library\n    * ... and it highlights even Brainfuck!\n\n    The `Pygments master branch`_ is installable with ``easy_install Pygments==dev``.\n\n    .. _Pygments master branch:\n       https://github.com/pygments/pygments/archive/master.zip#egg=Pygments-dev\n\n    :copyright: Copyright 2006-2023 by the Pygments team, see AUTHORS.\n    :license: BSD, see LICENSE for details.\n')), ImportFrom(module='io', names=[alias(name='StringIO'), alias(name='BytesIO')], level=0), Assign(targets=[Name(id='__version__', ctx=Store())], value=Constant(value='2.15.1')), Assign(targets=[Name(id='__docformat__', ctx=Store())], value=Constant(value='restructuredtext')), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='lex'), Constant(value='format'), Constant(value='highlight')], ctx=Load())), FunctionDef(name='lex', args=arguments(posonlyargs=[], args=[arg(arg='code'), arg(arg='lexer')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Lex `code` with the `lexer` (must be a `Lexer` instance)\n    and return an iterable of tokens. Currently, this only calls\n    `lexer.get_tokens()`.\n    ')), Try(body=[Return(value=Call(func=Attribute(value=Name(id='lexer', ctx=Load()), attr='get_tokens', ctx=Load()), args=[Name(id='code', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='TypeError', ctx=Load()), body=[ImportFrom(module='pip._vendor.pygments.lexer', names=[alias(name='RegexLexer')], level=0), If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='lexer', ctx=Load()), Name(id='type', ctx=Load())], keywords=[]), Call(func=Name(id='issubclass', ctx=Load()), args=[Name(id='lexer', ctx=Load()), Name(id='RegexLexer', ctx=Load())], keywords=[])]), body=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[Constant(value='lex() argument must be a lexer instance, not a class')], keywords=[]))], orelse=[]), Raise()])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='format', args=arguments(posonlyargs=[], args=[arg(arg='tokens'), arg(arg='formatter'), arg(arg='outfile')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='\n    Format ``tokens`` (an iterable of tokens) with the formatter ``formatter``\n    (a `Formatter` instance).\n\n    If ``outfile`` is given and a valid file object (an object with a\n    ``write`` method), the result will be written to it, otherwise it\n    is returned as a string.\n    ')), Try(body=[If(test=UnaryOp(op=Not(), operand=Name(id='outfile', ctx=Load())), body=[Assign(targets=[Name(id='realoutfile', ctx=Store())], value=BoolOp(op=Or(), values=[BoolOp(op=And(), values=[Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='formatter', ctx=Load()), Constant(value='encoding'), Constant(value=None)], keywords=[]), Call(func=Name(id='BytesIO', ctx=Load()), args=[], keywords=[])]), Call(func=Name(id='StringIO', ctx=Load()), args=[], keywords=[])])), Expr(value=Call(func=Attribute(value=Name(id='formatter', ctx=Load()), attr='format', ctx=Load()), args=[Name(id='tokens', ctx=Load()), Name(id='realoutfile', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='realoutfile', ctx=Load()), attr='getvalue', ctx=Load()), args=[], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='formatter', ctx=Load()), attr='format', ctx=Load()), args=[Name(id='tokens', ctx=Load()), Name(id='outfile', ctx=Load())], keywords=[]))])], handlers=[ExceptHandler(type=Name(id='TypeError', ctx=Load()), body=[ImportFrom(module='pip._vendor.pygments.formatter', names=[alias(name='Formatter')], level=0), If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='formatter', ctx=Load()), Name(id='type', ctx=Load())], keywords=[]), Call(func=Name(id='issubclass', ctx=Load()), args=[Name(id='formatter', ctx=Load()), Name(id='Formatter', ctx=Load())], keywords=[])]), body=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[Constant(value='format() argument must be a formatter instance, not a class')], keywords=[]))], orelse=[]), Raise()])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='highlight', args=arguments(posonlyargs=[], args=[arg(arg='code'), arg(arg='lexer'), arg(arg='formatter'), arg(arg='outfile')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='\n    This is the most high-level highlighting function. It combines `lex` and\n    `format` in one function.\n    ')), Return(value=Call(func=Name(id='format', ctx=Load()), args=[Call(func=Name(id='lex', ctx=Load()), args=[Name(id='code', ctx=Load()), Name(id='lexer', ctx=Load())], keywords=[]), Name(id='formatter', ctx=Load()), Name(id='outfile', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])