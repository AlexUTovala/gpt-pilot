Module(body=[Expr(value=Constant(value='\n    pygments.lexer\n    ~~~~~~~~~~~~~~\n\n    Base lexer classes.\n\n    :copyright: Copyright 2006-2023 by the Pygments team, see AUTHORS.\n    :license: BSD, see LICENSE for details.\n')), Import(names=[alias(name='re')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='time')]), ImportFrom(module='pip._vendor.pygments.filter', names=[alias(name='apply_filters'), alias(name='Filter')], level=0), ImportFrom(module='pip._vendor.pygments.filters', names=[alias(name='get_filter_by_name')], level=0), ImportFrom(module='pip._vendor.pygments.token', names=[alias(name='Error'), alias(name='Text'), alias(name='Other'), alias(name='Whitespace'), alias(name='_TokenType')], level=0), ImportFrom(module='pip._vendor.pygments.util', names=[alias(name='get_bool_opt'), alias(name='get_int_opt'), alias(name='get_list_opt'), alias(name='make_analysator'), alias(name='Future'), alias(name='guess_decode')], level=0), ImportFrom(module='pip._vendor.pygments.regexopt', names=[alias(name='regex_opt')], level=0), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='Lexer'), Constant(value='RegexLexer'), Constant(value='ExtendedRegexLexer'), Constant(value='DelegatingLexer'), Constant(value='LexerContext'), Constant(value='include'), Constant(value='inherit'), Constant(value='bygroups'), Constant(value='using'), Constant(value='this'), Constant(value='default'), Constant(value='words'), Constant(value='line_re')], ctx=Load())), Assign(targets=[Name(id='line_re', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='.*?\n')], keywords=[])), Assign(targets=[Name(id='_encoding_map', ctx=Store())], value=List(elts=[Tuple(elts=[Constant(value=b'\xef\xbb\xbf'), Constant(value='utf-8')], ctx=Load()), Tuple(elts=[Constant(value=b'\xff\xfe\x00\x00'), Constant(value='utf-32')], ctx=Load()), Tuple(elts=[Constant(value=b'\x00\x00\xfe\xff'), Constant(value='utf-32be')], ctx=Load()), Tuple(elts=[Constant(value=b'\xff\xfe'), Constant(value='utf-16')], ctx=Load()), Tuple(elts=[Constant(value=b'\xfe\xff'), Constant(value='utf-16be')], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='_default_analyse', ctx=Store())], value=Call(func=Name(id='staticmethod', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Constant(value=0.0))], keywords=[])), ClassDef(name='LexerMeta', bases=[Name(id='type', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    This metaclass automagically converts ``analyse_text`` methods into\n    static methods which always return float values.\n    ')), FunctionDef(name='__new__', args=arguments(posonlyargs=[], args=[arg(arg='mcs'), arg(arg='name'), arg(arg='bases'), arg(arg='d')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Constant(value='analyse_text'), ops=[In()], comparators=[Name(id='d', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='d', ctx=Load()), slice=Constant(value='analyse_text'), ctx=Store())], value=Call(func=Name(id='make_analysator', ctx=Load()), args=[Subscript(value=Name(id='d', ctx=Load()), slice=Constant(value='analyse_text'), ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='type', ctx=Load()), attr='__new__', ctx=Load()), args=[Name(id='mcs', ctx=Load()), Name(id='name', ctx=Load()), Name(id='bases', ctx=Load()), Name(id='d', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='Lexer', bases=[], keywords=[keyword(arg='metaclass', value=Name(id='LexerMeta', ctx=Load()))], body=[Expr(value=Constant(value="\n    Lexer for a specific language.\n\n    See also :doc:`lexerdevelopment`, a high-level guide to writing\n    lexers.\n\n    Lexer classes have attributes used for choosing the most appropriate\n    lexer based on various criteria.\n\n    .. autoattribute:: name\n       :no-value:\n    .. autoattribute:: aliases\n       :no-value:\n    .. autoattribute:: filenames\n       :no-value:\n    .. autoattribute:: alias_filenames\n    .. autoattribute:: mimetypes\n       :no-value:\n    .. autoattribute:: priority\n\n    Lexers included in Pygments should have an additional attribute:\n\n    .. autoattribute:: url\n       :no-value:\n\n    You can pass options to the constructor. The basic options recognized\n    by all lexers and processed by the base `Lexer` class are:\n\n    ``stripnl``\n        Strip leading and trailing newlines from the input (default: True).\n    ``stripall``\n        Strip all leading and trailing whitespace from the input\n        (default: False).\n    ``ensurenl``\n        Make sure that the input ends with a newline (default: True).  This\n        is required for some lexers that consume input linewise.\n\n        .. versionadded:: 1.3\n\n    ``tabsize``\n        If given and greater than 0, expand tabs in the input (default: 0).\n    ``encoding``\n        If given, must be an encoding name. This encoding will be used to\n        convert the input string to Unicode, if it is not already a Unicode\n        string (default: ``'guess'``, which uses a simple UTF-8 / Locale /\n        Latin1 detection.  Can also be ``'chardet'`` to use the chardet\n        library, if it is installed.\n    ``inencoding``\n        Overrides the ``encoding`` if given.\n    ")), Assign(targets=[Name(id='name', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='aliases', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='filenames', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='alias_filenames', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='mimetypes', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='priority', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='url', ctx=Store())], value=Constant(value=None)), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='options'), defaults=[]), body=[Expr(value=Constant(value="\n        This constructor takes arbitrary options as keyword arguments.\n        Every subclass must first process its own options and then call\n        the `Lexer` constructor, since it processes the basic\n        options like `stripnl`.\n\n        An example looks like this:\n\n        .. sourcecode:: python\n\n           def __init__(self, **options):\n               self.compress = options.get('compress', '')\n               Lexer.__init__(self, **options)\n\n        As these options must all be specifiable as strings (due to the\n        command line usage), there are various utility functions\n        available to help with that, see `Utilities`_.\n        ")), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Store())], value=Name(id='options', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='stripnl', ctx=Store())], value=Call(func=Name(id='get_bool_opt', ctx=Load()), args=[Name(id='options', ctx=Load()), Constant(value='stripnl'), Constant(value=True)], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='stripall', ctx=Store())], value=Call(func=Name(id='get_bool_opt', ctx=Load()), args=[Name(id='options', ctx=Load()), Constant(value='stripall'), Constant(value=False)], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='ensurenl', ctx=Store())], value=Call(func=Name(id='get_bool_opt', ctx=Load()), args=[Name(id='options', ctx=Load()), Constant(value='ensurenl'), Constant(value=True)], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='tabsize', ctx=Store())], value=Call(func=Name(id='get_int_opt', ctx=Load()), args=[Name(id='options', ctx=Load()), Constant(value='tabsize'), Constant(value=0)], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='encoding', ctx=Store())], value=Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='encoding'), Constant(value='guess')], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='encoding', ctx=Store())], value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='inencoding')], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='encoding', ctx=Load())])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='filters', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='filter_', ctx=Store()), iter=Call(func=Name(id='get_list_opt', ctx=Load()), args=[Name(id='options', ctx=Load()), Constant(value='filters'), Tuple(elts=[], ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='add_filter', ctx=Load()), args=[Name(id='filter_', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load()), body=[Return(value=BinOp(left=Constant(value='<pygments.lexers.%s with %r>'), op=Mod(), right=Tuple(elts=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())], ctx=Load())))], orelse=[Return(value=BinOp(left=Constant(value='<pygments.lexers.%s>'), op=Mod(), right=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load())))])], decorator_list=[]), FunctionDef(name='add_filter', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='filter_')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='options'), defaults=[]), body=[Expr(value=Constant(value='\n        Add a new stream filter to this lexer.\n        ')), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='filter_', ctx=Load()), Name(id='Filter', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='filter_', ctx=Store())], value=Call(func=Name(id='get_filter_by_name', ctx=Load()), args=[Name(id='filter_', ctx=Load())], keywords=[keyword(value=Name(id='options', ctx=Load()))]))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='filters', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='filter_', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='analyse_text', args=arguments(posonlyargs=[], args=[arg(arg='text')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        A static method which is called for lexer guessing.\n\n        It should analyse the text and return a float in the range\n        from ``0.0`` to ``1.0``.  If it returns ``0.0``, the lexer\n        will not be selected as the most probable one, if it returns\n        ``1.0``, it will be selected immediately.  This is used by\n        `guess_lexer`.\n\n        The `LexerMeta` metaclass automatically wraps this function so\n        that it works like a static method (no ``self`` or ``cls``\n        parameter) and the return value is automatically converted to\n        `float`. If the return value is an object that is boolean `False`\n        it's the same as if the return values was ``0.0``.\n        "))], decorator_list=[]), FunctionDef(name='get_tokens', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='text'), arg(arg='unfiltered')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value="\n        This method is the basic interface of a lexer. It is called by\n        the `highlight()` function. It must process the text and return an\n        iterable of ``(tokentype, value)`` pairs from `text`.\n\n        Normally, you don't need to override this method. The default\n        implementation processes the options recognized by all lexers\n        (`stripnl`, `stripall` and so on), and then yields all tokens\n        from `get_tokens_unprocessed()`, with the ``index`` dropped.\n\n        If `unfiltered` is set to `True`, the filtering mechanism is\n        bypassed even if filters are defined.\n        ")), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='text', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='encoding', ctx=Load()), ops=[Eq()], comparators=[Constant(value='guess')]), body=[Assign(targets=[Tuple(elts=[Name(id='text', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Name(id='guess_decode', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='encoding', ctx=Load()), ops=[Eq()], comparators=[Constant(value='chardet')]), body=[Try(body=[ImportFrom(module='pip._vendor', names=[alias(name='chardet')], level=0)], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='ImportError', ctx=Load()), args=[Constant(value='To enable chardet encoding guessing, please install the chardet library from http://chardet.feedparser.org/')], keywords=[]), cause=Name(id='e', ctx=Load()))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='decoded', ctx=Store())], value=Constant(value=None)), For(target=Tuple(elts=[Name(id='bom', ctx=Store()), Name(id='encoding', ctx=Store())], ctx=Store()), iter=Name(id='_encoding_map', ctx=Load()), body=[If(test=Call(func=Attribute(value=Name(id='text', ctx=Load()), attr='startswith', ctx=Load()), args=[Name(id='bom', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='decoded', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='text', ctx=Load()), slice=Slice(lower=Call(func=Name(id='len', ctx=Load()), args=[Name(id='bom', ctx=Load())], keywords=[])), ctx=Load()), attr='decode', ctx=Load()), args=[Name(id='encoding', ctx=Load()), Constant(value='replace')], keywords=[])), Break()], orelse=[])], orelse=[]), If(test=Compare(left=Name(id='decoded', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='enc', ctx=Store())], value=Call(func=Attribute(value=Name(id='chardet', ctx=Load()), attr='detect', ctx=Load()), args=[Subscript(value=Name(id='text', ctx=Load()), slice=Slice(upper=Constant(value=1024)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='decoded', ctx=Store())], value=Call(func=Attribute(value=Name(id='text', ctx=Load()), attr='decode', ctx=Load()), args=[BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='enc', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='encoding')], keywords=[]), Constant(value='utf-8')]), Constant(value='replace')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='text', ctx=Store())], value=Name(id='decoded', ctx=Load()))], orelse=[Assign(targets=[Name(id='text', ctx=Store())], value=Call(func=Attribute(value=Name(id='text', ctx=Load()), attr='decode', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='encoding', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Name(id='text', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='\ufeff')], keywords=[]), body=[Assign(targets=[Name(id='text', ctx=Store())], value=Subscript(value=Name(id='text', ctx=Load()), slice=Slice(lower=Call(func=Name(id='len', ctx=Load()), args=[Constant(value='\ufeff')], keywords=[])), ctx=Load()))], orelse=[])])])], orelse=[If(test=Call(func=Attribute(value=Name(id='text', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='\ufeff')], keywords=[]), body=[Assign(targets=[Name(id='text', ctx=Store())], value=Subscript(value=Name(id='text', ctx=Load()), slice=Slice(lower=Call(func=Name(id='len', ctx=Load()), args=[Constant(value='\ufeff')], keywords=[])), ctx=Load()))], orelse=[])]), Assign(targets=[Name(id='text', ctx=Store())], value=Call(func=Attribute(value=Name(id='text', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='\r\n'), Constant(value='\n')], keywords=[])), Assign(targets=[Name(id='text', ctx=Store())], value=Call(func=Attribute(value=Name(id='text', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='\r'), Constant(value='\n')], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='stripall', ctx=Load()), body=[Assign(targets=[Name(id='text', ctx=Store())], value=Call(func=Attribute(value=Name(id='text', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]))], orelse=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='stripnl', ctx=Load()), body=[Assign(targets=[Name(id='text', ctx=Store())], value=Call(func=Attribute(value=Name(id='text', ctx=Load()), attr='strip', ctx=Load()), args=[Constant(value='\n')], keywords=[]))], orelse=[])]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='tabsize', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='text', ctx=Store())], value=Call(func=Attribute(value=Name(id='text', ctx=Load()), attr='expandtabs', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='tabsize', ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='ensurenl', ctx=Load()), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='text', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='\n')], keywords=[]))]), body=[AugAssign(target=Name(id='text', ctx=Store()), op=Add(), value=Constant(value='\n'))], orelse=[]), FunctionDef(name='streamer', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Tuple(elts=[Name(id='_', ctx=Store()), Name(id='t', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_tokens_unprocessed', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[]), body=[Expr(value=Yield(value=Tuple(elts=[Name(id='t', ctx=Load()), Name(id='v', ctx=Load())], ctx=Load())))], orelse=[])], decorator_list=[]), Assign(targets=[Name(id='stream', ctx=Store())], value=Call(func=Name(id='streamer', ctx=Load()), args=[], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='unfiltered', ctx=Load())), body=[Assign(targets=[Name(id='stream', ctx=Store())], value=Call(func=Name(id='apply_filters', ctx=Load()), args=[Name(id='stream', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='filters', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='stream', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_tokens_unprocessed', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='text')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        This method should process the text and return an iterable of\n        ``(index, tokentype, value)`` tuples where ``index`` is the starting\n        position of the token within the input text.\n\n        It must be overridden by subclasses. It is recommended to\n        implement it as a generator to maximize effectiveness.\n        ')), Raise(exc=Name(id='NotImplementedError', ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='DelegatingLexer', bases=[Name(id='Lexer', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    This lexer takes two lexer as arguments. A root lexer and\n    a language lexer. First everything is scanned using the language\n    lexer, afterwards all ``Other`` tokens are lexed using the root\n    lexer.\n\n    The lexers from the ``template`` lexer package use this base lexer.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='_root_lexer'), arg(arg='_language_lexer'), arg(arg='_needle')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='options'), defaults=[Name(id='Other', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='root_lexer', ctx=Store())], value=Call(func=Name(id='_root_lexer', ctx=Load()), args=[], keywords=[keyword(value=Name(id='options', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='language_lexer', ctx=Store())], value=Call(func=Name(id='_language_lexer', ctx=Load()), args=[], keywords=[keyword(value=Name(id='options', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='needle', ctx=Store())], value=Name(id='_needle', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='Lexer', ctx=Load()), attr='__init__', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[keyword(value=Name(id='options', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='get_tokens_unprocessed', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='text')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='buffered', ctx=Store())], value=Constant(value='')), Assign(targets=[Name(id='insertions', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='lng_buffer', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='t', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='language_lexer', ctx=Load()), attr='get_tokens_unprocessed', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='t', ctx=Load()), ops=[Is()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='needle', ctx=Load())]), body=[If(test=Name(id='lng_buffer', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='insertions', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='buffered', ctx=Load())], keywords=[]), Name(id='lng_buffer', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='lng_buffer', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[]), AugAssign(target=Name(id='buffered', ctx=Store()), op=Add(), value=Name(id='v', ctx=Load()))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='lng_buffer', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='i', ctx=Load()), Name(id='t', ctx=Load()), Name(id='v', ctx=Load())], ctx=Load())], keywords=[]))])], orelse=[]), If(test=Name(id='lng_buffer', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='insertions', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='buffered', ctx=Load())], keywords=[]), Name(id='lng_buffer', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='do_insertions', ctx=Load()), args=[Name(id='insertions', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='root_lexer', ctx=Load()), attr='get_tokens_unprocessed', ctx=Load()), args=[Name(id='buffered', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='include', bases=[Name(id='str', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Indicates that a state should include rules from another state.\n    ')), Pass()], decorator_list=[]), ClassDef(name='_inherit', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    Indicates the a state should inherit from its superclass.\n    ')), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value='inherit'))], decorator_list=[])], decorator_list=[]), Assign(targets=[Name(id='inherit', ctx=Store())], value=Call(func=Name(id='_inherit', ctx=Load()), args=[], keywords=[])), ClassDef(name='combined', bases=[Name(id='tuple', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Indicates a state combined from multiple states.\n    ')), FunctionDef(name='__new__', args=arguments(posonlyargs=[], args=[arg(arg='cls')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='tuple', ctx=Load()), attr='__new__', ctx=Load()), args=[Name(id='cls', ctx=Load()), Name(id='args', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[])], decorator_list=[]), ClassDef(name='_PseudoMatch', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    A pseudo match object constructed from a string.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='start'), arg(arg='text')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_text', ctx=Store())], value=Name(id='text', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_start', ctx=Store())], value=Name(id='start', ctx=Load()))], decorator_list=[]), FunctionDef(name='start', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='arg')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_start', ctx=Load()))], decorator_list=[]), FunctionDef(name='end', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='arg')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Return(value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_start', ctx=Load()), op=Add(), right=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_text', ctx=Load())], keywords=[])))], decorator_list=[]), FunctionDef(name='group', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='arg')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Name(id='arg', ctx=Load()), body=[Raise(exc=Call(func=Name(id='IndexError', ctx=Load()), args=[Constant(value='No such group')], keywords=[]))], orelse=[]), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_text', ctx=Load()))], decorator_list=[]), FunctionDef(name='groups', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_text', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='groupdict', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Dict(keys=[], values=[]))], decorator_list=[])], decorator_list=[]), FunctionDef(name='bygroups', args=arguments(posonlyargs=[], args=[], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Callback that yields multiple actions for each group in the match.\n    ')), FunctionDef(name='callback', args=arguments(posonlyargs=[], args=[arg(arg='lexer'), arg(arg='match'), arg(arg='ctx')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='action', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='action', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Continue()], orelse=[If(test=Compare(left=Call(func=Name(id='type', ctx=Load()), args=[Name(id='action', ctx=Load())], keywords=[]), ops=[Is()], comparators=[Name(id='_TokenType', ctx=Load())]), body=[Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='group', ctx=Load()), args=[BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[])), If(test=Name(id='data', ctx=Load()), body=[Expr(value=Yield(value=Tuple(elts=[Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='start', ctx=Load()), args=[BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]), Name(id='action', ctx=Load()), Name(id='data', ctx=Load())], ctx=Load())))], orelse=[])], orelse=[Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='group', ctx=Load()), args=[BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[])), If(test=Compare(left=Name(id='data', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[If(test=Name(id='ctx', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='ctx', ctx=Load()), attr='pos', ctx=Store())], value=Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='start', ctx=Load()), args=[BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))], orelse=[]), For(target=Name(id='item', ctx=Store()), iter=Call(func=Name(id='action', ctx=Load()), args=[Name(id='lexer', ctx=Load()), Call(func=Name(id='_PseudoMatch', ctx=Load()), args=[Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='start', ctx=Load()), args=[BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]), Name(id='data', ctx=Load())], keywords=[]), Name(id='ctx', ctx=Load())], keywords=[]), body=[If(test=Name(id='item', ctx=Load()), body=[Expr(value=Yield(value=Name(id='item', ctx=Load())))], orelse=[])], orelse=[])], orelse=[])])])], orelse=[]), If(test=Name(id='ctx', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='ctx', ctx=Load()), attr='pos', ctx=Store())], value=Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='end', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[]), Return(value=Name(id='callback', ctx=Load()))], decorator_list=[]), ClassDef(name='_This', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    Special singleton used for indicating the caller class.\n    Used by ``using``.\n    '))], decorator_list=[]), Assign(targets=[Name(id='this', ctx=Store())], value=Call(func=Name(id='_This', ctx=Load()), args=[], keywords=[])), FunctionDef(name='using', args=arguments(posonlyargs=[], args=[arg(arg='_other')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Constant(value="\n    Callback that processes the match with a different lexer.\n\n    The keyword arguments are forwarded to the lexer, except `state` which\n    is handled separately.\n\n    `state` specifies the state that the new lexer will start in, and can\n    be an enumerable such as ('root', 'inline', 'string') or a simple\n    string which is assumed to be on top of the root state.\n\n    Note: For that to work, `_other` must not be an `ExtendedRegexLexer`.\n    ")), Assign(targets=[Name(id='gt_kwargs', ctx=Store())], value=Dict(keys=[], values=[])), If(test=Compare(left=Constant(value='state'), ops=[In()], comparators=[Name(id='kwargs', ctx=Load())]), body=[Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Attribute(value=Name(id='kwargs', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='state')], keywords=[])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='s', ctx=Load()), Tuple(elts=[Name(id='list', ctx=Load()), Name(id='tuple', ctx=Load())], ctx=Load())], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='gt_kwargs', ctx=Load()), slice=Constant(value='stack'), ctx=Store())], value=Name(id='s', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Name(id='gt_kwargs', ctx=Load()), slice=Constant(value='stack'), ctx=Store())], value=Tuple(elts=[Constant(value='root'), Name(id='s', ctx=Load())], ctx=Load()))])], orelse=[]), If(test=Compare(left=Name(id='_other', ctx=Load()), ops=[Is()], comparators=[Name(id='this', ctx=Load())]), body=[FunctionDef(name='callback', args=arguments(posonlyargs=[], args=[arg(arg='lexer'), arg(arg='match'), arg(arg='ctx')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Name(id='kwargs', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='kwargs', ctx=Load()), attr='update', ctx=Load()), args=[Attribute(value=Name(id='lexer', ctx=Load()), attr='options', ctx=Load())], keywords=[])), Assign(targets=[Name(id='lx', ctx=Store())], value=Call(func=Attribute(value=Name(id='lexer', ctx=Load()), attr='__class__', ctx=Load()), args=[], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], orelse=[Assign(targets=[Name(id='lx', ctx=Store())], value=Name(id='lexer', ctx=Load()))]), Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='start', ctx=Load()), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='t', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='lx', ctx=Load()), attr='get_tokens_unprocessed', ctx=Load()), args=[Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='group', ctx=Load()), args=[], keywords=[])], keywords=[keyword(value=Name(id='gt_kwargs', ctx=Load()))]), body=[Expr(value=Yield(value=Tuple(elts=[BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Name(id='s', ctx=Load())), Name(id='t', ctx=Load()), Name(id='v', ctx=Load())], ctx=Load())))], orelse=[]), If(test=Name(id='ctx', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='ctx', ctx=Load()), attr='pos', ctx=Store())], value=Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='end', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[])], orelse=[FunctionDef(name='callback', args=arguments(posonlyargs=[], args=[arg(arg='lexer'), arg(arg='match'), arg(arg='ctx')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='kwargs', ctx=Load()), attr='update', ctx=Load()), args=[Attribute(value=Name(id='lexer', ctx=Load()), attr='options', ctx=Load())], keywords=[])), Assign(targets=[Name(id='lx', ctx=Store())], value=Call(func=Name(id='_other', ctx=Load()), args=[], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))])), Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='start', ctx=Load()), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='t', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='lx', ctx=Load()), attr='get_tokens_unprocessed', ctx=Load()), args=[Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='group', ctx=Load()), args=[], keywords=[])], keywords=[keyword(value=Name(id='gt_kwargs', ctx=Load()))]), body=[Expr(value=Yield(value=Tuple(elts=[BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Name(id='s', ctx=Load())), Name(id='t', ctx=Load()), Name(id='v', ctx=Load())], ctx=Load())))], orelse=[]), If(test=Name(id='ctx', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='ctx', ctx=Load()), attr='pos', ctx=Store())], value=Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='end', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[])]), Return(value=Name(id='callback', ctx=Load()))], decorator_list=[]), ClassDef(name='default', bases=[], keywords=[], body=[Expr(value=Constant(value="\n    Indicates a state or state action (e.g. #pop) to apply.\n    For example default('#pop') is equivalent to ('', Token, '#pop')\n    Note that state tuples may be used as well.\n\n    .. versionadded:: 2.0\n    ")), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='state')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='state', ctx=Store())], value=Name(id='state', ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='words', bases=[Name(id='Future', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Indicates a list of literal words that is transformed into an optimized\n    regex that matches any of the words.\n\n    .. versionadded:: 2.0\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='words'), arg(arg='prefix'), arg(arg='suffix')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=''), Constant(value='')]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='words', ctx=Store())], value=Name(id='words', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='prefix', ctx=Store())], value=Name(id='prefix', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='suffix', ctx=Store())], value=Name(id='suffix', ctx=Load()))], decorator_list=[]), FunctionDef(name='get', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='regex_opt', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='words', ctx=Load())], keywords=[keyword(arg='prefix', value=Attribute(value=Name(id='self', ctx=Load()), attr='prefix', ctx=Load())), keyword(arg='suffix', value=Attribute(value=Name(id='self', ctx=Load()), attr='suffix', ctx=Load()))]))], decorator_list=[])], decorator_list=[]), ClassDef(name='RegexLexerMeta', bases=[Name(id='LexerMeta', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Metaclass for RegexLexer, creates the self._tokens attribute from\n    self.tokens on the first instantiation.\n    ')), FunctionDef(name='_process_regex', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='regex'), arg(arg='rflags'), arg(arg='state')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Preprocess the regular expression component of a token definition.')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='regex', ctx=Load()), Name(id='Future', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='regex', ctx=Store())], value=Call(func=Attribute(value=Name(id='regex', ctx=Load()), attr='get', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Attribute(value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Name(id='regex', ctx=Load()), Name(id='rflags', ctx=Load())], keywords=[]), attr='match', ctx=Load()))], decorator_list=[]), FunctionDef(name='_process_token', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='token')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Preprocess the token component of a token definition.')), Assert(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='type', ctx=Load()), args=[Name(id='token', ctx=Load())], keywords=[]), ops=[Is()], comparators=[Name(id='_TokenType', ctx=Load())]), Call(func=Name(id='callable', ctx=Load()), args=[Name(id='token', ctx=Load())], keywords=[])]), msg=BinOp(left=Constant(value='token type must be simple type or callable, not %r'), op=Mod(), right=Tuple(elts=[Name(id='token', ctx=Load())], ctx=Load()))), Return(value=Name(id='token', ctx=Load()))], decorator_list=[]), FunctionDef(name='_process_new_state', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='new_state'), arg(arg='unprocessed'), arg(arg='processed')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Preprocess the state transition action of a token definition.')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='new_state', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='new_state', ctx=Load()), ops=[Eq()], comparators=[Constant(value='#pop')]), body=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[If(test=Compare(left=Name(id='new_state', ctx=Load()), ops=[In()], comparators=[Name(id='unprocessed', ctx=Load())]), body=[Return(value=Tuple(elts=[Name(id='new_state', ctx=Load())], ctx=Load()))], orelse=[If(test=Compare(left=Name(id='new_state', ctx=Load()), ops=[Eq()], comparators=[Constant(value='#push')]), body=[Return(value=Name(id='new_state', ctx=Load()))], orelse=[If(test=Compare(left=Subscript(value=Name(id='new_state', ctx=Load()), slice=Slice(upper=Constant(value=5)), ctx=Load()), ops=[Eq()], comparators=[Constant(value='#pop:')]), body=[Return(value=UnaryOp(op=USub(), operand=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='new_state', ctx=Load()), slice=Slice(lower=Constant(value=5)), ctx=Load())], keywords=[])))], orelse=[Assert(test=Constant(value=False), msg=BinOp(left=Constant(value='unknown new state %r'), op=Mod(), right=Name(id='new_state', ctx=Load())))])])])])], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='new_state', ctx=Load()), Name(id='combined', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='tmp_state', ctx=Store())], value=BinOp(left=Constant(value='_tmp_%d'), op=Mod(), right=Attribute(value=Name(id='cls', ctx=Load()), attr='_tmpname', ctx=Load()))), AugAssign(target=Attribute(value=Name(id='cls', ctx=Load()), attr='_tmpname', ctx=Store()), op=Add(), value=Constant(value=1)), Assign(targets=[Name(id='itokens', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='istate', ctx=Store()), iter=Name(id='new_state', ctx=Load()), body=[Assert(test=Compare(left=Name(id='istate', ctx=Load()), ops=[NotEq()], comparators=[Name(id='new_state', ctx=Load())]), msg=BinOp(left=Constant(value='circular state ref %r'), op=Mod(), right=Name(id='istate', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='itokens', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='_process_state', ctx=Load()), args=[Name(id='unprocessed', ctx=Load()), Name(id='processed', ctx=Load()), Name(id='istate', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='processed', ctx=Load()), slice=Name(id='tmp_state', ctx=Load()), ctx=Store())], value=Name(id='itokens', ctx=Load())), Return(value=Tuple(elts=[Name(id='tmp_state', ctx=Load())], ctx=Load()))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='new_state', ctx=Load()), Name(id='tuple', ctx=Load())], keywords=[]), body=[For(target=Name(id='istate', ctx=Store()), iter=Name(id='new_state', ctx=Load()), body=[Assert(test=BoolOp(op=Or(), values=[Compare(left=Name(id='istate', ctx=Load()), ops=[In()], comparators=[Name(id='unprocessed', ctx=Load())]), Compare(left=Name(id='istate', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='#pop'), Constant(value='#push')], ctx=Load())])]), msg=BinOp(left=Constant(value='unknown new state '), op=Add(), right=Name(id='istate', ctx=Load())))], orelse=[]), Return(value=Name(id='new_state', ctx=Load()))], orelse=[Assert(test=Constant(value=False), msg=BinOp(left=Constant(value='unknown new state def %r'), op=Mod(), right=Name(id='new_state', ctx=Load())))])])])], decorator_list=[]), FunctionDef(name='_process_state', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='unprocessed'), arg(arg='processed'), arg(arg='state')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Preprocess a single state definition.')), Assert(test=Compare(left=Call(func=Name(id='type', ctx=Load()), args=[Name(id='state', ctx=Load())], keywords=[]), ops=[Is()], comparators=[Name(id='str', ctx=Load())]), msg=BinOp(left=Constant(value='wrong state name %r'), op=Mod(), right=Name(id='state', ctx=Load()))), Assert(test=Compare(left=Subscript(value=Name(id='state', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[NotEq()], comparators=[Constant(value='#')]), msg=BinOp(left=Constant(value='invalid state name %r'), op=Mod(), right=Name(id='state', ctx=Load()))), If(test=Compare(left=Name(id='state', ctx=Load()), ops=[In()], comparators=[Name(id='processed', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='processed', ctx=Load()), slice=Name(id='state', ctx=Load()), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='tokens', ctx=Store()), Subscript(value=Name(id='processed', ctx=Load()), slice=Name(id='state', ctx=Load()), ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='rflags', ctx=Store())], value=Attribute(value=Name(id='cls', ctx=Load()), attr='flags', ctx=Load())), For(target=Name(id='tdef', ctx=Store()), iter=Subscript(value=Name(id='unprocessed', ctx=Load()), slice=Name(id='state', ctx=Load()), ctx=Load()), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='tdef', ctx=Load()), Name(id='include', ctx=Load())], keywords=[]), body=[Assert(test=Compare(left=Name(id='tdef', ctx=Load()), ops=[NotEq()], comparators=[Name(id='state', ctx=Load())]), msg=BinOp(left=Constant(value='circular state reference %r'), op=Mod(), right=Name(id='state', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='tokens', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='_process_state', ctx=Load()), args=[Name(id='unprocessed', ctx=Load()), Name(id='processed', ctx=Load()), Call(func=Name(id='str', ctx=Load()), args=[Name(id='tdef', ctx=Load())], keywords=[])], keywords=[])], keywords=[])), Continue()], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='tdef', ctx=Load()), Name(id='_inherit', ctx=Load())], keywords=[]), body=[Continue()], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='tdef', ctx=Load()), Name(id='default', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='new_state', ctx=Store())], value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='_process_new_state', ctx=Load()), args=[Attribute(value=Name(id='tdef', ctx=Load()), attr='state', ctx=Load()), Name(id='unprocessed', ctx=Load()), Name(id='processed', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='tokens', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Attribute(value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='')], keywords=[]), attr='match', ctx=Load()), Constant(value=None), Name(id='new_state', ctx=Load())], ctx=Load())], keywords=[])), Continue()], orelse=[]), Assert(test=Compare(left=Call(func=Name(id='type', ctx=Load()), args=[Name(id='tdef', ctx=Load())], keywords=[]), ops=[Is()], comparators=[Name(id='tuple', ctx=Load())]), msg=BinOp(left=Constant(value='wrong rule def %r'), op=Mod(), right=Name(id='tdef', ctx=Load()))), Try(body=[Assign(targets=[Name(id='rex', ctx=Store())], value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='_process_regex', ctx=Load()), args=[Subscript(value=Name(id='tdef', ctx=Load()), slice=Constant(value=0), ctx=Load()), Name(id='rflags', ctx=Load()), Name(id='state', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='err', body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='uncompilable regex %r in state %r of %r: %s'), op=Mod(), right=Tuple(elts=[Subscript(value=Name(id='tdef', ctx=Load()), slice=Constant(value=0), ctx=Load()), Name(id='state', ctx=Load()), Name(id='cls', ctx=Load()), Name(id='err', ctx=Load())], ctx=Load()))], keywords=[]), cause=Name(id='err', ctx=Load()))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='token', ctx=Store())], value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='_process_token', ctx=Load()), args=[Subscript(value=Name(id='tdef', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[])), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='tdef', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=2)]), body=[Assign(targets=[Name(id='new_state', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='new_state', ctx=Store())], value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='_process_new_state', ctx=Load()), args=[Subscript(value=Name(id='tdef', ctx=Load()), slice=Constant(value=2), ctx=Load()), Name(id='unprocessed', ctx=Load()), Name(id='processed', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='tokens', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='rex', ctx=Load()), Name(id='token', ctx=Load()), Name(id='new_state', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='tokens', ctx=Load()))], decorator_list=[]), FunctionDef(name='process_tokendef', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='name'), arg(arg='tokendefs')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Preprocess a dictionary of token definitions.')), Assign(targets=[Name(id='processed', ctx=Store()), Subscript(value=Attribute(value=Name(id='cls', ctx=Load()), attr='_all_tokens', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='tokendefs', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='tokendefs', ctx=Load()), Subscript(value=Attribute(value=Name(id='cls', ctx=Load()), attr='tokens', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load())])), For(target=Name(id='state', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Name(id='tokendefs', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='_process_state', ctx=Load()), args=[Name(id='tokendefs', ctx=Load()), Name(id='processed', ctx=Load()), Name(id='state', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='processed', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_tokendefs', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Merge tokens from superclasses in MRO order, returning a single tokendef\n        dictionary.\n\n        Any state that is not defined by a subclass will be inherited\n        automatically.  States that *are* defined by subclasses will, by\n        default, override that state in the superclass.  If a subclass wishes to\n        inherit definitions from a superclass, it can use the special value\n        "inherit", which will cause the superclass\' state definition to be\n        included at that point in the state.\n        ')), Assign(targets=[Name(id='tokens', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='inheritable', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='c', ctx=Store()), iter=Attribute(value=Name(id='cls', ctx=Load()), attr='__mro__', ctx=Load()), body=[Assign(targets=[Name(id='toks', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='c', ctx=Load()), attr='__dict__', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='tokens'), Dict(keys=[], values=[])], keywords=[])), For(target=Tuple(elts=[Name(id='state', ctx=Store()), Name(id='items', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='toks', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='curitems', ctx=Store())], value=Call(func=Attribute(value=Name(id='tokens', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='state', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='curitems', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='tokens', ctx=Load()), slice=Name(id='state', ctx=Load()), ctx=Store())], value=Name(id='items', ctx=Load())), Try(body=[Assign(targets=[Name(id='inherit_ndx', ctx=Store())], value=Call(func=Attribute(value=Name(id='items', ctx=Load()), attr='index', ctx=Load()), args=[Name(id='inherit', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Continue()])], orelse=[], finalbody=[]), Assign(targets=[Subscript(value=Name(id='inheritable', ctx=Load()), slice=Name(id='state', ctx=Load()), ctx=Store())], value=Name(id='inherit_ndx', ctx=Load())), Continue()], orelse=[]), Assign(targets=[Name(id='inherit_ndx', ctx=Store())], value=Call(func=Attribute(value=Name(id='inheritable', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='state', ctx=Load()), Constant(value=None)], keywords=[])), If(test=Compare(left=Name(id='inherit_ndx', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Continue()], orelse=[]), Assign(targets=[Subscript(value=Name(id='curitems', ctx=Load()), slice=Slice(lower=Name(id='inherit_ndx', ctx=Load()), upper=BinOp(left=Name(id='inherit_ndx', ctx=Load()), op=Add(), right=Constant(value=1))), ctx=Store())], value=Name(id='items', ctx=Load())), Try(body=[Assign(targets=[Name(id='new_inh_ndx', ctx=Store())], value=Call(func=Attribute(value=Name(id='items', ctx=Load()), attr='index', ctx=Load()), args=[Name(id='inherit', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Pass()])], orelse=[Assign(targets=[Subscript(value=Name(id='inheritable', ctx=Load()), slice=Name(id='state', ctx=Load()), ctx=Store())], value=BinOp(left=Name(id='inherit_ndx', ctx=Load()), op=Add(), right=Name(id='new_inh_ndx', ctx=Load())))], finalbody=[])], orelse=[])], orelse=[]), Return(value=Name(id='tokens', ctx=Load()))], decorator_list=[]), FunctionDef(name='__call__', args=arguments(posonlyargs=[], args=[arg(arg='cls')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwds'), defaults=[]), body=[Expr(value=Constant(value='Instantiate cls after preprocessing its token definitions.')), If(test=Compare(left=Constant(value='_tokens'), ops=[NotIn()], comparators=[Attribute(value=Name(id='cls', ctx=Load()), attr='__dict__', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='cls', ctx=Load()), attr='_all_tokens', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Attribute(value=Name(id='cls', ctx=Load()), attr='_tmpname', ctx=Store())], value=Constant(value=0)), If(test=BoolOp(op=And(), values=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='cls', ctx=Load()), Constant(value='token_variants')], keywords=[]), Attribute(value=Name(id='cls', ctx=Load()), attr='token_variants', ctx=Load())]), body=[Pass()], orelse=[Assign(targets=[Attribute(value=Name(id='cls', ctx=Load()), attr='_tokens', ctx=Store())], value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='process_tokendef', ctx=Load()), args=[Constant(value=''), Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='get_tokendefs', ctx=Load()), args=[], keywords=[])], keywords=[]))])], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='type', ctx=Load()), attr='__call__', ctx=Load()), args=[Name(id='cls', ctx=Load()), Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwds', ctx=Load()))]))], decorator_list=[])], decorator_list=[]), ClassDef(name='RegexLexer', bases=[Name(id='Lexer', ctx=Load())], keywords=[keyword(arg='metaclass', value=Name(id='RegexLexerMeta', ctx=Load()))], body=[Expr(value=Constant(value='\n    Base for simple stateful regular expression-based lexers.\n    Simplifies the lexing process so that you need only\n    provide a list of states and regular expressions.\n    ')), Assign(targets=[Name(id='flags', ctx=Store())], value=Attribute(value=Name(id='re', ctx=Load()), attr='MULTILINE', ctx=Load())), Assign(targets=[Name(id='tokens', ctx=Store())], value=Dict(keys=[], values=[])), FunctionDef(name='get_tokens_unprocessed', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='text'), arg(arg='stack')], kwonlyargs=[], kw_defaults=[], defaults=[Tuple(elts=[Constant(value='root')], ctx=Load())]), body=[Expr(value=Constant(value="\n        Split ``text`` into (tokentype, text) pairs.\n\n        ``stack`` is the initial stack (default: ``['root']``)\n        ")), Assign(targets=[Name(id='pos', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='tokendefs', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_tokens', ctx=Load())), Assign(targets=[Name(id='statestack', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='stack', ctx=Load())], keywords=[])), Assign(targets=[Name(id='statetokens', ctx=Store())], value=Subscript(value=Name(id='tokendefs', ctx=Load()), slice=Subscript(value=Name(id='statestack', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), ctx=Load())), While(test=Constant(value=1), body=[For(target=Tuple(elts=[Name(id='rexmatch', ctx=Store()), Name(id='action', ctx=Store()), Name(id='new_state', ctx=Store())], ctx=Store()), iter=Name(id='statetokens', ctx=Load()), body=[Assign(targets=[Name(id='m', ctx=Store())], value=Call(func=Name(id='rexmatch', ctx=Load()), args=[Name(id='text', ctx=Load()), Name(id='pos', ctx=Load())], keywords=[])), If(test=Name(id='m', ctx=Load()), body=[If(test=Compare(left=Name(id='action', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[If(test=Compare(left=Call(func=Name(id='type', ctx=Load()), args=[Name(id='action', ctx=Load())], keywords=[]), ops=[Is()], comparators=[Name(id='_TokenType', ctx=Load())]), body=[Expr(value=Yield(value=Tuple(elts=[Name(id='pos', ctx=Load()), Name(id='action', ctx=Load()), Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='group', ctx=Load()), args=[], keywords=[])], ctx=Load())))], orelse=[Expr(value=YieldFrom(value=Call(func=Name(id='action', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='m', ctx=Load())], keywords=[])))])], orelse=[]), Assign(targets=[Name(id='pos', ctx=Store())], value=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='end', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='new_state', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='new_state', ctx=Load()), Name(id='tuple', ctx=Load())], keywords=[]), body=[For(target=Name(id='state', ctx=Store()), iter=Name(id='new_state', ctx=Load()), body=[If(test=Compare(left=Name(id='state', ctx=Load()), ops=[Eq()], comparators=[Constant(value='#pop')]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='statestack', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Attribute(value=Name(id='statestack', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[]))], orelse=[])], orelse=[If(test=Compare(left=Name(id='state', ctx=Load()), ops=[Eq()], comparators=[Constant(value='#push')]), body=[Expr(value=Call(func=Attribute(value=Name(id='statestack', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='statestack', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='statestack', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='state', ctx=Load())], keywords=[]))])])], orelse=[])], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='new_state', ctx=Load()), Name(id='int', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Call(func=Name(id='abs', ctx=Load()), args=[Name(id='new_state', ctx=Load())], keywords=[]), ops=[GtE()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='statestack', ctx=Load())], keywords=[])]), body=[Delete(targets=[Subscript(value=Name(id='statestack', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Del())])], orelse=[Delete(targets=[Subscript(value=Name(id='statestack', ctx=Load()), slice=Slice(lower=Name(id='new_state', ctx=Load())), ctx=Del())])])], orelse=[If(test=Compare(left=Name(id='new_state', ctx=Load()), ops=[Eq()], comparators=[Constant(value='#push')]), body=[Expr(value=Call(func=Attribute(value=Name(id='statestack', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='statestack', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[]))], orelse=[Assert(test=Constant(value=False), msg=BinOp(left=Constant(value='wrong state def: %r'), op=Mod(), right=Name(id='new_state', ctx=Load())))])])]), Assign(targets=[Name(id='statetokens', ctx=Store())], value=Subscript(value=Name(id='tokendefs', ctx=Load()), slice=Subscript(value=Name(id='statestack', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), ctx=Load()))], orelse=[]), Break()], orelse=[])], orelse=[Try(body=[If(test=Compare(left=Subscript(value=Name(id='text', ctx=Load()), slice=Name(id='pos', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value='\n')]), body=[Assign(targets=[Name(id='statestack', ctx=Store())], value=List(elts=[Constant(value='root')], ctx=Load())), Assign(targets=[Name(id='statetokens', ctx=Store())], value=Subscript(value=Name(id='tokendefs', ctx=Load()), slice=Constant(value='root'), ctx=Load())), Expr(value=Yield(value=Tuple(elts=[Name(id='pos', ctx=Load()), Name(id='Whitespace', ctx=Load()), Constant(value='\n')], ctx=Load()))), AugAssign(target=Name(id='pos', ctx=Store()), op=Add(), value=Constant(value=1)), Continue()], orelse=[]), Expr(value=Yield(value=Tuple(elts=[Name(id='pos', ctx=Load()), Name(id='Error', ctx=Load()), Subscript(value=Name(id='text', ctx=Load()), slice=Name(id='pos', ctx=Load()), ctx=Load())], ctx=Load()))), AugAssign(target=Name(id='pos', ctx=Store()), op=Add(), value=Constant(value=1))], handlers=[ExceptHandler(type=Name(id='IndexError', ctx=Load()), body=[Break()])], orelse=[], finalbody=[])])], orelse=[])], decorator_list=[])], decorator_list=[]), ClassDef(name='LexerContext', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    A helper object that holds lexer position data.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='text'), arg(arg='pos'), arg(arg='stack'), arg(arg='end')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Store())], value=Name(id='text', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='pos', ctx=Store())], value=Name(id='pos', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='end', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='end', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[])])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='stack', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='stack', ctx=Load()), List(elts=[Constant(value='root')], ctx=Load())]))], decorator_list=[]), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Constant(value='LexerContext(%r, %r, %r)'), op=Mod(), right=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='text', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='pos', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='stack', ctx=Load())], ctx=Load())))], decorator_list=[])], decorator_list=[]), ClassDef(name='ExtendedRegexLexer', bases=[Name(id='RegexLexer', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    A RegexLexer that uses a context object to store its state.\n    ')), FunctionDef(name='get_tokens_unprocessed', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='text'), arg(arg='context')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='\n        Split ``text`` into (tokentype, text) pairs.\n        If ``context`` is given, use this lexer context instead.\n        ')), Assign(targets=[Name(id='tokendefs', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_tokens', ctx=Load())), If(test=UnaryOp(op=Not(), operand=Name(id='context', ctx=Load())), body=[Assign(targets=[Name(id='ctx', ctx=Store())], value=Call(func=Name(id='LexerContext', ctx=Load()), args=[Name(id='text', ctx=Load()), Constant(value=0)], keywords=[])), Assign(targets=[Name(id='statetokens', ctx=Store())], value=Subscript(value=Name(id='tokendefs', ctx=Load()), slice=Constant(value='root'), ctx=Load()))], orelse=[Assign(targets=[Name(id='ctx', ctx=Store())], value=Name(id='context', ctx=Load())), Assign(targets=[Name(id='statetokens', ctx=Store())], value=Subscript(value=Name(id='tokendefs', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='ctx', ctx=Load()), attr='stack', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), ctx=Load())), Assign(targets=[Name(id='text', ctx=Store())], value=Attribute(value=Name(id='ctx', ctx=Load()), attr='text', ctx=Load()))]), While(test=Constant(value=1), body=[For(target=Tuple(elts=[Name(id='rexmatch', ctx=Store()), Name(id='action', ctx=Store()), Name(id='new_state', ctx=Store())], ctx=Store()), iter=Name(id='statetokens', ctx=Load()), body=[Assign(targets=[Name(id='m', ctx=Store())], value=Call(func=Name(id='rexmatch', ctx=Load()), args=[Name(id='text', ctx=Load()), Attribute(value=Name(id='ctx', ctx=Load()), attr='pos', ctx=Load()), Attribute(value=Name(id='ctx', ctx=Load()), attr='end', ctx=Load())], keywords=[])), If(test=Name(id='m', ctx=Load()), body=[If(test=Compare(left=Name(id='action', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[If(test=Compare(left=Call(func=Name(id='type', ctx=Load()), args=[Name(id='action', ctx=Load())], keywords=[]), ops=[Is()], comparators=[Name(id='_TokenType', ctx=Load())]), body=[Expr(value=Yield(value=Tuple(elts=[Attribute(value=Name(id='ctx', ctx=Load()), attr='pos', ctx=Load()), Name(id='action', ctx=Load()), Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='group', ctx=Load()), args=[], keywords=[])], ctx=Load()))), Assign(targets=[Attribute(value=Name(id='ctx', ctx=Load()), attr='pos', ctx=Store())], value=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='end', ctx=Load()), args=[], keywords=[]))], orelse=[Expr(value=YieldFrom(value=Call(func=Name(id='action', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='m', ctx=Load()), Name(id='ctx', ctx=Load())], keywords=[]))), If(test=UnaryOp(op=Not(), operand=Name(id='new_state', ctx=Load())), body=[Assign(targets=[Name(id='statetokens', ctx=Store())], value=Subscript(value=Name(id='tokendefs', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='ctx', ctx=Load()), attr='stack', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), ctx=Load()))], orelse=[])])], orelse=[]), If(test=Compare(left=Name(id='new_state', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='new_state', ctx=Load()), Name(id='tuple', ctx=Load())], keywords=[]), body=[For(target=Name(id='state', ctx=Store()), iter=Name(id='new_state', ctx=Load()), body=[If(test=Compare(left=Name(id='state', ctx=Load()), ops=[Eq()], comparators=[Constant(value='#pop')]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='ctx', ctx=Load()), attr='stack', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='ctx', ctx=Load()), attr='stack', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[]))], orelse=[])], orelse=[If(test=Compare(left=Name(id='state', ctx=Load()), ops=[Eq()], comparators=[Constant(value='#push')]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='ctx', ctx=Load()), attr='stack', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='ctx', ctx=Load()), attr='stack', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='ctx', ctx=Load()), attr='stack', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='state', ctx=Load())], keywords=[]))])])], orelse=[])], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='new_state', ctx=Load()), Name(id='int', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Call(func=Name(id='abs', ctx=Load()), args=[Name(id='new_state', ctx=Load())], keywords=[]), ops=[GtE()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='ctx', ctx=Load()), attr='stack', ctx=Load())], keywords=[])]), body=[Delete(targets=[Subscript(value=Attribute(value=Name(id='ctx', ctx=Load()), attr='stack', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Del())])], orelse=[Delete(targets=[Subscript(value=Attribute(value=Name(id='ctx', ctx=Load()), attr='stack', ctx=Load()), slice=Slice(lower=Name(id='new_state', ctx=Load())), ctx=Del())])])], orelse=[If(test=Compare(left=Name(id='new_state', ctx=Load()), ops=[Eq()], comparators=[Constant(value='#push')]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='ctx', ctx=Load()), attr='stack', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='ctx', ctx=Load()), attr='stack', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[]))], orelse=[Assert(test=Constant(value=False), msg=BinOp(left=Constant(value='wrong state def: %r'), op=Mod(), right=Name(id='new_state', ctx=Load())))])])]), Assign(targets=[Name(id='statetokens', ctx=Store())], value=Subscript(value=Name(id='tokendefs', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='ctx', ctx=Load()), attr='stack', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), ctx=Load()))], orelse=[]), Break()], orelse=[])], orelse=[Try(body=[If(test=Compare(left=Attribute(value=Name(id='ctx', ctx=Load()), attr='pos', ctx=Load()), ops=[GtE()], comparators=[Attribute(value=Name(id='ctx', ctx=Load()), attr='end', ctx=Load())]), body=[Break()], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='text', ctx=Load()), slice=Attribute(value=Name(id='ctx', ctx=Load()), attr='pos', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value='\n')]), body=[Assign(targets=[Attribute(value=Name(id='ctx', ctx=Load()), attr='stack', ctx=Store())], value=List(elts=[Constant(value='root')], ctx=Load())), Assign(targets=[Name(id='statetokens', ctx=Store())], value=Subscript(value=Name(id='tokendefs', ctx=Load()), slice=Constant(value='root'), ctx=Load())), Expr(value=Yield(value=Tuple(elts=[Attribute(value=Name(id='ctx', ctx=Load()), attr='pos', ctx=Load()), Name(id='Text', ctx=Load()), Constant(value='\n')], ctx=Load()))), AugAssign(target=Attribute(value=Name(id='ctx', ctx=Load()), attr='pos', ctx=Store()), op=Add(), value=Constant(value=1)), Continue()], orelse=[]), Expr(value=Yield(value=Tuple(elts=[Attribute(value=Name(id='ctx', ctx=Load()), attr='pos', ctx=Load()), Name(id='Error', ctx=Load()), Subscript(value=Name(id='text', ctx=Load()), slice=Attribute(value=Name(id='ctx', ctx=Load()), attr='pos', ctx=Load()), ctx=Load())], ctx=Load()))), AugAssign(target=Attribute(value=Name(id='ctx', ctx=Load()), attr='pos', ctx=Store()), op=Add(), value=Constant(value=1))], handlers=[ExceptHandler(type=Name(id='IndexError', ctx=Load()), body=[Break()])], orelse=[], finalbody=[])])], orelse=[])], decorator_list=[])], decorator_list=[]), FunctionDef(name='do_insertions', args=arguments(posonlyargs=[], args=[arg(arg='insertions'), arg(arg='tokens')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Helper for lexers which must combine the results of several\n    sublexers.\n\n    ``insertions`` is a list of ``(index, itokens)`` pairs.\n    Each ``itokens`` iterable should be inserted at position\n    ``index`` into the token stream given by the ``tokens``\n    argument.\n\n    The result is a combined token stream.\n\n    TODO: clean up the code here.\n    ')), Assign(targets=[Name(id='insertions', ctx=Store())], value=Call(func=Name(id='iter', ctx=Load()), args=[Name(id='insertions', ctx=Load())], keywords=[])), Try(body=[Assign(targets=[Tuple(elts=[Name(id='index', ctx=Store()), Name(id='itokens', ctx=Store())], ctx=Store())], value=Call(func=Name(id='next', ctx=Load()), args=[Name(id='insertions', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='StopIteration', ctx=Load()), body=[Expr(value=YieldFrom(value=Name(id='tokens', ctx=Load()))), Return()])], orelse=[], finalbody=[]), Assign(targets=[Name(id='realpos', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='insleft', ctx=Store())], value=Constant(value=True)), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='t', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Name(id='tokens', ctx=Load()), body=[If(test=Compare(left=Name(id='realpos', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='realpos', ctx=Store())], value=Name(id='i', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='oldi', ctx=Store())], value=Constant(value=0)), While(test=BoolOp(op=And(), values=[Name(id='insleft', ctx=Load()), Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[])), ops=[GtE()], comparators=[Name(id='index', ctx=Load())])]), body=[Assign(targets=[Name(id='tmpval', ctx=Store())], value=Subscript(value=Name(id='v', ctx=Load()), slice=Slice(lower=Name(id='oldi', ctx=Load()), upper=BinOp(left=Name(id='index', ctx=Load()), op=Sub(), right=Name(id='i', ctx=Load()))), ctx=Load())), If(test=Name(id='tmpval', ctx=Load()), body=[Expr(value=Yield(value=Tuple(elts=[Name(id='realpos', ctx=Load()), Name(id='t', ctx=Load()), Name(id='tmpval', ctx=Load())], ctx=Load()))), AugAssign(target=Name(id='realpos', ctx=Store()), op=Add(), value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='tmpval', ctx=Load())], keywords=[]))], orelse=[]), For(target=Tuple(elts=[Name(id='it_index', ctx=Store()), Name(id='it_token', ctx=Store()), Name(id='it_value', ctx=Store())], ctx=Store()), iter=Name(id='itokens', ctx=Load()), body=[Expr(value=Yield(value=Tuple(elts=[Name(id='realpos', ctx=Load()), Name(id='it_token', ctx=Load()), Name(id='it_value', ctx=Load())], ctx=Load()))), AugAssign(target=Name(id='realpos', ctx=Store()), op=Add(), value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='it_value', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='oldi', ctx=Store())], value=BinOp(left=Name(id='index', ctx=Load()), op=Sub(), right=Name(id='i', ctx=Load()))), Try(body=[Assign(targets=[Tuple(elts=[Name(id='index', ctx=Store()), Name(id='itokens', ctx=Store())], ctx=Store())], value=Call(func=Name(id='next', ctx=Load()), args=[Name(id='insertions', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='StopIteration', ctx=Load()), body=[Assign(targets=[Name(id='insleft', ctx=Store())], value=Constant(value=False)), Break()])], orelse=[], finalbody=[])], orelse=[]), If(test=Compare(left=Name(id='oldi', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[])]), body=[Expr(value=Yield(value=Tuple(elts=[Name(id='realpos', ctx=Load()), Name(id='t', ctx=Load()), Subscript(value=Name(id='v', ctx=Load()), slice=Slice(lower=Name(id='oldi', ctx=Load())), ctx=Load())], ctx=Load()))), AugAssign(target=Name(id='realpos', ctx=Store()), op=Add(), value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[]), op=Sub(), right=Name(id='oldi', ctx=Load())))], orelse=[])], orelse=[]), While(test=Name(id='insleft', ctx=Load()), body=[Assign(targets=[Name(id='realpos', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='realpos', ctx=Load()), Constant(value=0)])), For(target=Tuple(elts=[Name(id='p', ctx=Store()), Name(id='t', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Name(id='itokens', ctx=Load()), body=[Expr(value=Yield(value=Tuple(elts=[Name(id='realpos', ctx=Load()), Name(id='t', ctx=Load()), Name(id='v', ctx=Load())], ctx=Load()))), AugAssign(target=Name(id='realpos', ctx=Store()), op=Add(), value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[]))], orelse=[]), Try(body=[Assign(targets=[Tuple(elts=[Name(id='index', ctx=Store()), Name(id='itokens', ctx=Store())], ctx=Store())], value=Call(func=Name(id='next', ctx=Load()), args=[Name(id='insertions', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='StopIteration', ctx=Load()), body=[Assign(targets=[Name(id='insleft', ctx=Store())], value=Constant(value=False)), Break()])], orelse=[], finalbody=[])], orelse=[])], decorator_list=[]), ClassDef(name='ProfilingRegexLexerMeta', bases=[Name(id='RegexLexerMeta', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Metaclass for ProfilingRegexLexer, collects regex timing info.')), FunctionDef(name='_process_regex', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='regex'), arg(arg='rflags'), arg(arg='state')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='regex', ctx=Load()), Name(id='words', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='rex', ctx=Store())], value=Call(func=Name(id='regex_opt', ctx=Load()), args=[Attribute(value=Name(id='regex', ctx=Load()), attr='words', ctx=Load())], keywords=[keyword(arg='prefix', value=Attribute(value=Name(id='regex', ctx=Load()), attr='prefix', ctx=Load())), keyword(arg='suffix', value=Attribute(value=Name(id='regex', ctx=Load()), attr='suffix', ctx=Load()))]))], orelse=[Assign(targets=[Name(id='rex', ctx=Store())], value=Name(id='regex', ctx=Load()))]), Assign(targets=[Name(id='compiled', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Name(id='rex', ctx=Load()), Name(id='rflags', ctx=Load())], keywords=[])), FunctionDef(name='match_func', args=arguments(posonlyargs=[], args=[arg(arg='text'), arg(arg='pos'), arg(arg='endpos')], kwonlyargs=[], kw_defaults=[], defaults=[Attribute(value=Name(id='sys', ctx=Load()), attr='maxsize', ctx=Load())]), body=[Assign(targets=[Name(id='info', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='cls', ctx=Load()), attr='_prof_data', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), attr='setdefault', ctx=Load()), args=[Tuple(elts=[Name(id='state', ctx=Load()), Name(id='rex', ctx=Load())], ctx=Load()), List(elts=[Constant(value=0), Constant(value=0.0)], ctx=Load())], keywords=[])), Assign(targets=[Name(id='t0', ctx=Store())], value=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='time', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='res', ctx=Store())], value=Call(func=Attribute(value=Name(id='compiled', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='text', ctx=Load()), Name(id='pos', ctx=Load()), Name(id='endpos', ctx=Load())], keywords=[])), Assign(targets=[Name(id='t1', ctx=Store())], value=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='time', ctx=Load()), args=[], keywords=[])), AugAssign(target=Subscript(value=Name(id='info', ctx=Load()), slice=Constant(value=0), ctx=Store()), op=Add(), value=Constant(value=1)), AugAssign(target=Subscript(value=Name(id='info', ctx=Load()), slice=Constant(value=1), ctx=Store()), op=Add(), value=BinOp(left=Name(id='t1', ctx=Load()), op=Sub(), right=Name(id='t0', ctx=Load()))), Return(value=Name(id='res', ctx=Load()))], decorator_list=[]), Return(value=Name(id='match_func', ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='ProfilingRegexLexer', bases=[Name(id='RegexLexer', ctx=Load())], keywords=[keyword(arg='metaclass', value=Name(id='ProfilingRegexLexerMeta', ctx=Load()))], body=[Expr(value=Constant(value='Drop-in replacement for RegexLexer that does profiling of its regexes.')), Assign(targets=[Name(id='_prof_data', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='_prof_sort_index', ctx=Store())], value=Constant(value=4)), FunctionDef(name='get_tokens_unprocessed', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='text'), arg(arg='stack')], kwonlyargs=[], kw_defaults=[], defaults=[Tuple(elts=[Constant(value='root')], ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='_prof_data', ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[], values=[])], keywords=[])), Expr(value=YieldFrom(value=Call(func=Attribute(value=Name(id='RegexLexer', ctx=Load()), attr='get_tokens_unprocessed', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='text', ctx=Load()), Name(id='stack', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='rawdata', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='_prof_data', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[GeneratorExp(elt=Tuple(elts=[Name(id='s', ctx=Load()), Subscript(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Name(id='repr', ctx=Load()), args=[Name(id='r', ctx=Load())], keywords=[]), attr='strip', ctx=Load()), args=[Constant(value="u'")], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value='\\\\'), Constant(value='\\')], keywords=[]), slice=Slice(upper=Constant(value=65)), ctx=Load()), Name(id='n', ctx=Load()), BinOp(left=Constant(value=1000), op=Mult(), right=Name(id='t', ctx=Load())), BinOp(left=BinOp(left=Constant(value=1000), op=Mult(), right=Name(id='t', ctx=Load())), op=Div(), right=Name(id='n', ctx=Load()))], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Tuple(elts=[Name(id='s', ctx=Store()), Name(id='r', ctx=Store())], ctx=Store()), Tuple(elts=[Name(id='n', ctx=Store()), Name(id='t', ctx=Store())], ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='rawdata', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[keyword(arg='key', value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Subscript(value=Name(id='x', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='_prof_sort_index', ctx=Load()), ctx=Load()))), keyword(arg='reverse', value=Constant(value=True))])), Assign(targets=[Name(id='sum_total', ctx=Store())], value=Call(func=Name(id='sum', ctx=Load()), args=[GeneratorExp(elt=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value=3), ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='data', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[BinOp(left=Constant(value='Profiling result for %s lexing %d chars in %.3f ms'), op=Mod(), right=Tuple(elts=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[]), Name(id='sum_total', ctx=Load())], ctx=Load()))], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[BinOp(left=Constant(value='='), op=Mult(), right=Constant(value=110))], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[BinOp(left=Constant(value='%-20s %-64s ncalls  tottime  percall'), op=Mod(), right=Tuple(elts=[Constant(value='state'), Constant(value='regex')], ctx=Load()))], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[BinOp(left=Constant(value='-'), op=Mult(), right=Constant(value=110))], keywords=[])), For(target=Name(id='d', ctx=Store()), iter=Name(id='data', ctx=Load()), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[BinOp(left=Constant(value='%-20s %-65s %5d %8.4f %8.4f'), op=Mod(), right=Name(id='d', ctx=Load()))], keywords=[]))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[BinOp(left=Constant(value='='), op=Mult(), right=Constant(value=110))], keywords=[]))], decorator_list=[])], decorator_list=[])], type_ignores=[])