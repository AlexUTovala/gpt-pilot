Module(body=[Expr(value=Constant(value='\n    pygments.regexopt\n    ~~~~~~~~~~~~~~~~~\n\n    An algorithm that generates optimized regexes for matching long lists of\n    literal strings.\n\n    :copyright: Copyright 2006-2023 by the Pygments team, see AUTHORS.\n    :license: BSD, see LICENSE for details.\n')), Import(names=[alias(name='re')]), ImportFrom(module='re', names=[alias(name='escape')], level=0), ImportFrom(module='os.path', names=[alias(name='commonprefix')], level=0), ImportFrom(module='itertools', names=[alias(name='groupby')], level=0), ImportFrom(module='operator', names=[alias(name='itemgetter')], level=0), Assign(targets=[Name(id='CS_ESCAPE', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='[\\[\\^\\\\\\-\\]]')], keywords=[])), Assign(targets=[Name(id='FIRST_ELEMENT', ctx=Store())], value=Call(func=Name(id='itemgetter', ctx=Load()), args=[Constant(value=0)], keywords=[])), FunctionDef(name='make_charset', args=arguments(posonlyargs=[], args=[arg(arg='letters')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=BinOp(left=Constant(value='['), op=Add(), right=Call(func=Attribute(value=Name(id='CS_ESCAPE', ctx=Load()), attr='sub', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='m')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=BinOp(left=Constant(value='\\'), op=Add(), right=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='group', ctx=Load()), args=[], keywords=[]))), Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Name(id='letters', ctx=Load())], keywords=[])], keywords=[])), op=Add(), right=Constant(value=']')))], decorator_list=[]), FunctionDef(name='regex_opt_inner', args=arguments(posonlyargs=[], args=[arg(arg='strings'), arg(arg='open_paren')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return a regex that matches any string in the sorted list of strings.')), Assign(targets=[Name(id='close_paren', ctx=Store())], value=BoolOp(op=Or(), values=[BoolOp(op=And(), values=[Name(id='open_paren', ctx=Load()), Constant(value=')')]), Constant(value='')])), If(test=UnaryOp(op=Not(), operand=Name(id='strings', ctx=Load())), body=[Return(value=Constant(value=''))], orelse=[]), Assign(targets=[Name(id='first', ctx=Store())], value=Subscript(value=Name(id='strings', ctx=Load()), slice=Constant(value=0), ctx=Load())), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='strings', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=BinOp(left=BinOp(left=Name(id='open_paren', ctx=Load()), op=Add(), right=Call(func=Name(id='escape', ctx=Load()), args=[Name(id='first', ctx=Load())], keywords=[])), op=Add(), right=Name(id='close_paren', ctx=Load())))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='first', ctx=Load())), body=[Return(value=BinOp(left=BinOp(left=BinOp(left=Name(id='open_paren', ctx=Load()), op=Add(), right=Call(func=Name(id='regex_opt_inner', ctx=Load()), args=[Subscript(value=Name(id='strings', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Constant(value='(?:')], keywords=[])), op=Add(), right=Constant(value='?')), op=Add(), right=Name(id='close_paren', ctx=Load())))], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='first', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='oneletter', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='rest', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='s', ctx=Store()), iter=Name(id='strings', ctx=Load()), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Attribute(value=Name(id='oneletter', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='rest', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]))])], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='oneletter', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[If(test=Name(id='rest', ctx=Load()), body=[Return(value=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='open_paren', ctx=Load()), op=Add(), right=Call(func=Name(id='regex_opt_inner', ctx=Load()), args=[Name(id='rest', ctx=Load()), Constant(value='')], keywords=[])), op=Add(), right=Constant(value='|')), op=Add(), right=Call(func=Name(id='make_charset', ctx=Load()), args=[Name(id='oneletter', ctx=Load())], keywords=[])), op=Add(), right=Name(id='close_paren', ctx=Load())))], orelse=[]), Return(value=BinOp(left=BinOp(left=Name(id='open_paren', ctx=Load()), op=Add(), right=Call(func=Name(id='make_charset', ctx=Load()), args=[Name(id='oneletter', ctx=Load())], keywords=[])), op=Add(), right=Name(id='close_paren', ctx=Load())))], orelse=[])], orelse=[]), Assign(targets=[Name(id='prefix', ctx=Store())], value=Call(func=Name(id='commonprefix', ctx=Load()), args=[Name(id='strings', ctx=Load())], keywords=[])), If(test=Name(id='prefix', ctx=Load()), body=[Assign(targets=[Name(id='plen', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='prefix', ctx=Load())], keywords=[])), Return(value=BinOp(left=BinOp(left=BinOp(left=Name(id='open_paren', ctx=Load()), op=Add(), right=Call(func=Name(id='escape', ctx=Load()), args=[Name(id='prefix', ctx=Load())], keywords=[])), op=Add(), right=Call(func=Name(id='regex_opt_inner', ctx=Load()), args=[ListComp(elt=Subscript(value=Name(id='s', ctx=Load()), slice=Slice(lower=Name(id='plen', ctx=Load())), ctx=Load()), generators=[comprehension(target=Name(id='s', ctx=Store()), iter=Name(id='strings', ctx=Load()), ifs=[], is_async=0)]), Constant(value='(?:')], keywords=[])), op=Add(), right=Name(id='close_paren', ctx=Load())))], orelse=[]), Assign(targets=[Name(id='strings_rev', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='s', ctx=Load()), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), generators=[comprehension(target=Name(id='s', ctx=Store()), iter=Name(id='strings', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='suffix', ctx=Store())], value=Call(func=Name(id='commonprefix', ctx=Load()), args=[Name(id='strings_rev', ctx=Load())], keywords=[])), If(test=Name(id='suffix', ctx=Load()), body=[Assign(targets=[Name(id='slen', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='suffix', ctx=Load())], keywords=[])), Return(value=BinOp(left=BinOp(left=BinOp(left=Name(id='open_paren', ctx=Load()), op=Add(), right=Call(func=Name(id='regex_opt_inner', ctx=Load()), args=[Call(func=Name(id='sorted', ctx=Load()), args=[GeneratorExp(elt=Subscript(value=Name(id='s', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Name(id='slen', ctx=Load()))), ctx=Load()), generators=[comprehension(target=Name(id='s', ctx=Store()), iter=Name(id='strings', ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Constant(value='(?:')], keywords=[])), op=Add(), right=Call(func=Name(id='escape', ctx=Load()), args=[Subscript(value=Name(id='suffix', ctx=Load()), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])), op=Add(), right=Name(id='close_paren', ctx=Load())))], orelse=[]), Return(value=BinOp(left=BinOp(left=Name(id='open_paren', ctx=Load()), op=Add(), right=Call(func=Attribute(value=Constant(value='|'), attr='join', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='regex_opt_inner', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Subscript(value=Name(id='group', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[]), Constant(value='')], keywords=[]), generators=[comprehension(target=Name(id='group', ctx=Store()), iter=Call(func=Name(id='groupby', ctx=Load()), args=[Name(id='strings', ctx=Load()), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='s')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Subscript(value=Name(id='s', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='first', ctx=Load()), slice=Constant(value=0), ctx=Load())]))], keywords=[]), ifs=[], is_async=0)])], keywords=[])), op=Add(), right=Name(id='close_paren', ctx=Load())))], decorator_list=[]), FunctionDef(name='regex_opt', args=arguments(posonlyargs=[], args=[arg(arg='strings'), arg(arg='prefix'), arg(arg='suffix')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=''), Constant(value='')]), body=[Expr(value=Constant(value='Return a compiled regex that matches any string in the given list.\n\n    The strings to match must be literal strings, not regexes.  They will be\n    regex-escaped.\n\n    *prefix* and *suffix* are pre- and appended to the final regex.\n    ')), Assign(targets=[Name(id='strings', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='strings', ctx=Load())], keywords=[])), Return(value=BinOp(left=BinOp(left=Name(id='prefix', ctx=Load()), op=Add(), right=Call(func=Name(id='regex_opt_inner', ctx=Load()), args=[Name(id='strings', ctx=Load()), Constant(value='(')], keywords=[])), op=Add(), right=Name(id='suffix', ctx=Load())))], decorator_list=[])], type_ignores=[])