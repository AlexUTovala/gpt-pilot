Module(body=[Expr(value=Constant(value='Rich text and beautiful formatting in the terminal.')), Import(names=[alias(name='os')]), ImportFrom(module='typing', names=[alias(name='IO'), alias(name='TYPE_CHECKING'), alias(name='Any'), alias(name='Callable'), alias(name='Optional'), alias(name='Union')], level=0), ImportFrom(module='_extension', names=[alias(name='load_ipython_extension')], level=1), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='get_console'), Constant(value='reconfigure'), Constant(value='print'), Constant(value='inspect'), Constant(value='print_json')], ctx=Load())), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='console', names=[alias(name='Console')], level=1)], orelse=[]), AnnAssign(target=Name(id='_console', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='Console'), ctx=Load()), value=Constant(value=None), simple=1), Try(body=[Assign(targets=[Name(id='_IMPORT_CWD', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getcwd', ctx=Load()), args=[], keywords=[])], keywords=[]))], handlers=[ExceptHandler(type=Name(id='FileNotFoundError', ctx=Load()), body=[Assign(targets=[Name(id='_IMPORT_CWD', ctx=Store())], value=Constant(value=''))])], orelse=[], finalbody=[]), FunctionDef(name='get_console', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Get a global :class:`~rich.console.Console` instance. This function is used when Rich requires a Console,\n    and hasn't been explicitly given one.\n\n    Returns:\n        Console: A console instance.\n    ")), Global(names=['_console']), If(test=Compare(left=Name(id='_console', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[ImportFrom(module='console', names=[alias(name='Console')], level=1), Assign(targets=[Name(id='_console', ctx=Store())], value=Call(func=Name(id='Console', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Name(id='_console', ctx=Load()))], decorator_list=[], returns=Constant(value='Console')), FunctionDef(name='reconfigure', args=arguments(posonlyargs=[], args=[], vararg=arg(arg='args', annotation=Name(id='Any', ctx=Load())), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs', annotation=Name(id='Any', ctx=Load())), defaults=[]), body=[Expr(value=Constant(value='Reconfigures the global console by replacing it with another.\n\n    Args:\n        *args (Any): Positional arguments for the replacement :class:`~rich.console.Console`.\n        **kwargs (Any): Keyword arguments for the replacement :class:`~rich.console.Console`.\n    ')), ImportFrom(module='pip._vendor.rich.console', names=[alias(name='Console')], level=0), Assign(targets=[Name(id='new_console', ctx=Store())], value=Call(func=Name(id='Console', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))])), Assign(targets=[Name(id='_console', ctx=Store())], value=Call(func=Name(id='get_console', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='_console', ctx=Load()), attr='__dict__', ctx=Store())], value=Attribute(value=Name(id='new_console', ctx=Load()), attr='__dict__', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='print', args=arguments(posonlyargs=[], args=[], vararg=arg(arg='objects', annotation=Name(id='Any', ctx=Load())), kwonlyargs=[arg(arg='sep', annotation=Name(id='str', ctx=Load())), arg(arg='end', annotation=Name(id='str', ctx=Load())), arg(arg='file', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='IO', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='flush', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=' '), Constant(value='\n'), Constant(value=None), Constant(value=False)], defaults=[]), body=[Expr(value=Constant(value='Print object(s) supplied via positional arguments.\n    This function has an identical signature to the built-in print.\n    For more advanced features, see the :class:`~rich.console.Console` class.\n\n    Args:\n        sep (str, optional): Separator between printed objects. Defaults to " ".\n        end (str, optional): Character to write at end of output. Defaults to "\\\\n".\n        file (IO[str], optional): File to write to, or None for stdout. Defaults to None.\n        flush (bool, optional): Has no effect as Rich always flushes output. Defaults to False.\n\n    ')), ImportFrom(module='console', names=[alias(name='Console')], level=1), Assign(targets=[Name(id='write_console', ctx=Store())], value=IfExp(test=Compare(left=Name(id='file', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Call(func=Name(id='get_console', ctx=Load()), args=[], keywords=[]), orelse=Call(func=Name(id='Console', ctx=Load()), args=[], keywords=[keyword(arg='file', value=Name(id='file', ctx=Load()))]))), Return(value=Call(func=Attribute(value=Name(id='write_console', ctx=Load()), attr='print', ctx=Load()), args=[Starred(value=Name(id='objects', ctx=Load()), ctx=Load())], keywords=[keyword(arg='sep', value=Name(id='sep', ctx=Load())), keyword(arg='end', value=Name(id='end', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='print_json', args=arguments(posonlyargs=[], args=[arg(arg='json', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[arg(arg='data', annotation=Name(id='Any', ctx=Load())), arg(arg='indent', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Name(id='int', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='highlight', annotation=Name(id='bool', ctx=Load())), arg(arg='skip_keys', annotation=Name(id='bool', ctx=Load())), arg(arg='ensure_ascii', annotation=Name(id='bool', ctx=Load())), arg(arg='check_circular', annotation=Name(id='bool', ctx=Load())), arg(arg='allow_nan', annotation=Name(id='bool', ctx=Load())), arg(arg='default', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='Any', ctx=Load())], ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='sort_keys', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=None), Constant(value=2), Constant(value=True), Constant(value=False), Constant(value=False), Constant(value=True), Constant(value=True), Constant(value=None), Constant(value=False)], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Pretty prints JSON. Output will be valid JSON.\n\n    Args:\n        json (str): A string containing JSON.\n        data (Any): If json is not supplied, then encode this data.\n        indent (int, optional): Number of spaces to indent. Defaults to 2.\n        highlight (bool, optional): Enable highlighting of output: Defaults to True.\n        skip_keys (bool, optional): Skip keys not of a basic type. Defaults to False.\n        ensure_ascii (bool, optional): Escape all non-ascii characters. Defaults to False.\n        check_circular (bool, optional): Check for circular references. Defaults to True.\n        allow_nan (bool, optional): Allow NaN and Infinity values. Defaults to True.\n        default (Callable, optional): A callable that converts values that can not be encoded\n            in to something that can be JSON encoded. Defaults to None.\n        sort_keys (bool, optional): Sort dictionary keys. Defaults to False.\n    ')), Expr(value=Call(func=Attribute(value=Call(func=Name(id='get_console', ctx=Load()), args=[], keywords=[]), attr='print_json', ctx=Load()), args=[Name(id='json', ctx=Load())], keywords=[keyword(arg='data', value=Name(id='data', ctx=Load())), keyword(arg='indent', value=Name(id='indent', ctx=Load())), keyword(arg='highlight', value=Name(id='highlight', ctx=Load())), keyword(arg='skip_keys', value=Name(id='skip_keys', ctx=Load())), keyword(arg='ensure_ascii', value=Name(id='ensure_ascii', ctx=Load())), keyword(arg='check_circular', value=Name(id='check_circular', ctx=Load())), keyword(arg='allow_nan', value=Name(id='allow_nan', ctx=Load())), keyword(arg='default', value=Name(id='default', ctx=Load())), keyword(arg='sort_keys', value=Name(id='sort_keys', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='inspect', args=arguments(posonlyargs=[], args=[arg(arg='obj', annotation=Name(id='Any', ctx=Load()))], kwonlyargs=[arg(arg='console', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='Console'), ctx=Load())), arg(arg='title', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='help', annotation=Name(id='bool', ctx=Load())), arg(arg='methods', annotation=Name(id='bool', ctx=Load())), arg(arg='docs', annotation=Name(id='bool', ctx=Load())), arg(arg='private', annotation=Name(id='bool', ctx=Load())), arg(arg='dunder', annotation=Name(id='bool', ctx=Load())), arg(arg='sort', annotation=Name(id='bool', ctx=Load())), arg(arg='all', annotation=Name(id='bool', ctx=Load())), arg(arg='value', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=None), Constant(value=None), Constant(value=False), Constant(value=False), Constant(value=True), Constant(value=False), Constant(value=False), Constant(value=True), Constant(value=False), Constant(value=True)], defaults=[]), body=[Expr(value=Constant(value='Inspect any Python object.\n\n    * inspect(<OBJECT>) to see summarized info.\n    * inspect(<OBJECT>, methods=True) to see methods.\n    * inspect(<OBJECT>, help=True) to see full (non-abbreviated) help.\n    * inspect(<OBJECT>, private=True) to see private attributes (single underscore).\n    * inspect(<OBJECT>, dunder=True) to see attributes beginning with double underscore.\n    * inspect(<OBJECT>, all=True) to see all attributes.\n\n    Args:\n        obj (Any): An object to inspect.\n        title (str, optional): Title to display over inspect result, or None use type. Defaults to None.\n        help (bool, optional): Show full help text rather than just first paragraph. Defaults to False.\n        methods (bool, optional): Enable inspection of callables. Defaults to False.\n        docs (bool, optional): Also render doc strings. Defaults to True.\n        private (bool, optional): Show private attributes (beginning with underscore). Defaults to False.\n        dunder (bool, optional): Show attributes starting with double underscore. Defaults to False.\n        sort (bool, optional): Sort attributes alphabetically. Defaults to True.\n        all (bool, optional): Show all attributes. Defaults to False.\n        value (bool, optional): Pretty print value. Defaults to True.\n    ')), Assign(targets=[Name(id='_console', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='console', ctx=Load()), Call(func=Name(id='get_console', ctx=Load()), args=[], keywords=[])])), ImportFrom(module='pip._vendor.rich._inspect', names=[alias(name='Inspect')], level=0), Assign(targets=[Name(id='is_inspect', ctx=Store())], value=Compare(left=Name(id='obj', ctx=Load()), ops=[Is()], comparators=[Name(id='inspect', ctx=Load())])), Assign(targets=[Name(id='_inspect', ctx=Store())], value=Call(func=Name(id='Inspect', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[keyword(arg='title', value=Name(id='title', ctx=Load())), keyword(arg='help', value=BoolOp(op=Or(), values=[Name(id='is_inspect', ctx=Load()), Name(id='help', ctx=Load())])), keyword(arg='methods', value=BoolOp(op=Or(), values=[Name(id='is_inspect', ctx=Load()), Name(id='methods', ctx=Load())])), keyword(arg='docs', value=BoolOp(op=Or(), values=[Name(id='is_inspect', ctx=Load()), Name(id='docs', ctx=Load())])), keyword(arg='private', value=Name(id='private', ctx=Load())), keyword(arg='dunder', value=Name(id='dunder', ctx=Load())), keyword(arg='sort', value=Name(id='sort', ctx=Load())), keyword(arg='all', value=Name(id='all', ctx=Load())), keyword(arg='value', value=Name(id='value', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='_console', ctx=Load()), attr='print', ctx=Load()), args=[Name(id='_inspect', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__')]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='Hello, **World**')], keywords=[]))], orelse=[])], type_ignores=[])