Module(body=[ImportFrom(module='__future__', names=[alias(name='absolute_import')], level=0), Import(names=[alias(name='email')]), Import(names=[alias(name='logging')]), Import(names=[alias(name='re')]), Import(names=[alias(name='time')]), Import(names=[alias(name='warnings')]), ImportFrom(module='collections', names=[alias(name='namedtuple')], level=0), ImportFrom(module='itertools', names=[alias(name='takewhile')], level=0), ImportFrom(module='exceptions', names=[alias(name='ConnectTimeoutError'), alias(name='InvalidHeader'), alias(name='MaxRetryError'), alias(name='ProtocolError'), alias(name='ProxyError'), alias(name='ReadTimeoutError'), alias(name='ResponseError')], level=2), ImportFrom(module='packages', names=[alias(name='six')], level=2), Assign(targets=[Name(id='log', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), Assign(targets=[Name(id='RequestHistory', ctx=Store())], value=Call(func=Name(id='namedtuple', ctx=Load()), args=[Constant(value='RequestHistory'), List(elts=[Constant(value='method'), Constant(value='url'), Constant(value='error'), Constant(value='status'), Constant(value='redirect_location')], ctx=Load())], keywords=[])), Assign(targets=[Name(id='_Default', ctx=Store())], value=Call(func=Name(id='object', ctx=Load()), args=[], keywords=[])), ClassDef(name='_RetryMeta', bases=[Name(id='type', ctx=Load())], keywords=[], body=[FunctionDef(name='DEFAULT_METHOD_WHITELIST', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value="Using 'Retry.DEFAULT_METHOD_WHITELIST' is deprecated and will be removed in v2.0. Use 'Retry.DEFAULT_ALLOWED_METHODS' instead"), Name(id='DeprecationWarning', ctx=Load())], keywords=[])), Return(value=Attribute(value=Name(id='cls', ctx=Load()), attr='DEFAULT_ALLOWED_METHODS', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='DEFAULT_METHOD_WHITELIST', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value="Using 'Retry.DEFAULT_METHOD_WHITELIST' is deprecated and will be removed in v2.0. Use 'Retry.DEFAULT_ALLOWED_METHODS' instead"), Name(id='DeprecationWarning', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='cls', ctx=Load()), attr='DEFAULT_ALLOWED_METHODS', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='DEFAULT_METHOD_WHITELIST', ctx=Load()), attr='setter', ctx=Load())]), FunctionDef(name='DEFAULT_REDIRECT_HEADERS_BLACKLIST', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value="Using 'Retry.DEFAULT_REDIRECT_HEADERS_BLACKLIST' is deprecated and will be removed in v2.0. Use 'Retry.DEFAULT_REMOVE_HEADERS_ON_REDIRECT' instead"), Name(id='DeprecationWarning', ctx=Load())], keywords=[])), Return(value=Attribute(value=Name(id='cls', ctx=Load()), attr='DEFAULT_REMOVE_HEADERS_ON_REDIRECT', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='DEFAULT_REDIRECT_HEADERS_BLACKLIST', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value="Using 'Retry.DEFAULT_REDIRECT_HEADERS_BLACKLIST' is deprecated and will be removed in v2.0. Use 'Retry.DEFAULT_REMOVE_HEADERS_ON_REDIRECT' instead"), Name(id='DeprecationWarning', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='cls', ctx=Load()), attr='DEFAULT_REMOVE_HEADERS_ON_REDIRECT', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='DEFAULT_REDIRECT_HEADERS_BLACKLIST', ctx=Load()), attr='setter', ctx=Load())]), FunctionDef(name='BACKOFF_MAX', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value="Using 'Retry.BACKOFF_MAX' is deprecated and will be removed in v2.0. Use 'Retry.DEFAULT_BACKOFF_MAX' instead"), Name(id='DeprecationWarning', ctx=Load())], keywords=[])), Return(value=Attribute(value=Name(id='cls', ctx=Load()), attr='DEFAULT_BACKOFF_MAX', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='BACKOFF_MAX', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value="Using 'Retry.BACKOFF_MAX' is deprecated and will be removed in v2.0. Use 'Retry.DEFAULT_BACKOFF_MAX' instead"), Name(id='DeprecationWarning', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='cls', ctx=Load()), attr='DEFAULT_BACKOFF_MAX', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='BACKOFF_MAX', ctx=Load()), attr='setter', ctx=Load())])], decorator_list=[]), ClassDef(name='Retry', bases=[Name(id='object', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="Retry configuration.\n\n    Each retry attempt will create a new Retry object with updated values, so\n    they can be safely reused.\n\n    Retries can be defined as a default for a pool::\n\n        retries = Retry(connect=5, read=2, redirect=5)\n        http = PoolManager(retries=retries)\n        response = http.request('GET', 'http://example.com/')\n\n    Or per-request (which overrides the default for the pool)::\n\n        response = http.request('GET', 'http://example.com/', retries=Retry(10))\n\n    Retries can be disabled by passing ``False``::\n\n        response = http.request('GET', 'http://example.com/', retries=False)\n\n    Errors will be wrapped in :class:`~urllib3.exceptions.MaxRetryError` unless\n    retries are disabled, in which case the causing exception will be raised.\n\n    :param int total:\n        Total number of retries to allow. Takes precedence over other counts.\n\n        Set to ``None`` to remove this constraint and fall back on other\n        counts.\n\n        Set to ``0`` to fail on the first retry.\n\n        Set to ``False`` to disable and imply ``raise_on_redirect=False``.\n\n    :param int connect:\n        How many connection-related errors to retry on.\n\n        These are errors raised before the request is sent to the remote server,\n        which we assume has not triggered the server to process the request.\n\n        Set to ``0`` to fail on the first retry of this type.\n\n    :param int read:\n        How many times to retry on read errors.\n\n        These errors are raised after the request was sent to the server, so the\n        request may have side-effects.\n\n        Set to ``0`` to fail on the first retry of this type.\n\n    :param int redirect:\n        How many redirects to perform. Limit this to avoid infinite redirect\n        loops.\n\n        A redirect is a HTTP response with a status code 301, 302, 303, 307 or\n        308.\n\n        Set to ``0`` to fail on the first retry of this type.\n\n        Set to ``False`` to disable and imply ``raise_on_redirect=False``.\n\n    :param int status:\n        How many times to retry on bad status codes.\n\n        These are retries made on responses, where status code matches\n        ``status_forcelist``.\n\n        Set to ``0`` to fail on the first retry of this type.\n\n    :param int other:\n        How many times to retry on other errors.\n\n        Other errors are errors that are not connect, read, redirect or status errors.\n        These errors might be raised after the request was sent to the server, so the\n        request might have side-effects.\n\n        Set to ``0`` to fail on the first retry of this type.\n\n        If ``total`` is not set, it's a good idea to set this to 0 to account\n        for unexpected edge cases and avoid infinite retry loops.\n\n    :param iterable allowed_methods:\n        Set of uppercased HTTP method verbs that we should retry on.\n\n        By default, we only retry on methods which are considered to be\n        idempotent (multiple requests with the same parameters end with the\n        same state). See :attr:`Retry.DEFAULT_ALLOWED_METHODS`.\n\n        Set to a ``False`` value to retry on any verb.\n\n        .. warning::\n\n            Previously this parameter was named ``method_whitelist``, that\n            usage is deprecated in v1.26.0 and will be removed in v2.0.\n\n    :param iterable status_forcelist:\n        A set of integer HTTP status codes that we should force a retry on.\n        A retry is initiated if the request method is in ``allowed_methods``\n        and the response status code is in ``status_forcelist``.\n\n        By default, this is disabled with ``None``.\n\n    :param float backoff_factor:\n        A backoff factor to apply between attempts after the second try\n        (most errors are resolved immediately by a second try without a\n        delay). urllib3 will sleep for::\n\n            {backoff factor} * (2 ** ({number of total retries} - 1))\n\n        seconds. If the backoff_factor is 0.1, then :func:`.sleep` will sleep\n        for [0.0s, 0.2s, 0.4s, ...] between retries. It will never be longer\n        than :attr:`Retry.DEFAULT_BACKOFF_MAX`.\n\n        By default, backoff is disabled (set to 0).\n\n    :param bool raise_on_redirect: Whether, if the number of redirects is\n        exhausted, to raise a MaxRetryError, or to return a response with a\n        response code in the 3xx range.\n\n    :param bool raise_on_status: Similar meaning to ``raise_on_redirect``:\n        whether we should raise an exception, or return a response,\n        if status falls in ``status_forcelist`` range and retries have\n        been exhausted.\n\n    :param tuple history: The history of the request encountered during\n        each call to :meth:`~Retry.increment`. The list is in the order\n        the requests occurred. Each list item is of class :class:`RequestHistory`.\n\n    :param bool respect_retry_after_header:\n        Whether to respect Retry-After header on status codes defined as\n        :attr:`Retry.RETRY_AFTER_STATUS_CODES` or not.\n\n    :param iterable remove_headers_on_redirect:\n        Sequence of headers to remove from the request when a response\n        indicating a redirect is returned before firing off the redirected\n        request.\n    ")), Assign(targets=[Name(id='DEFAULT_ALLOWED_METHODS', ctx=Store())], value=Call(func=Name(id='frozenset', ctx=Load()), args=[List(elts=[Constant(value='HEAD'), Constant(value='GET'), Constant(value='PUT'), Constant(value='DELETE'), Constant(value='OPTIONS'), Constant(value='TRACE')], ctx=Load())], keywords=[])), Assign(targets=[Name(id='RETRY_AFTER_STATUS_CODES', ctx=Store())], value=Call(func=Name(id='frozenset', ctx=Load()), args=[List(elts=[Constant(value=413), Constant(value=429), Constant(value=503)], ctx=Load())], keywords=[])), Assign(targets=[Name(id='DEFAULT_REMOVE_HEADERS_ON_REDIRECT', ctx=Store())], value=Call(func=Name(id='frozenset', ctx=Load()), args=[List(elts=[Constant(value='Cookie'), Constant(value='Authorization')], ctx=Load())], keywords=[])), Assign(targets=[Name(id='DEFAULT_BACKOFF_MAX', ctx=Store())], value=Constant(value=120)), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='total'), arg(arg='connect'), arg(arg='read'), arg(arg='redirect'), arg(arg='status'), arg(arg='other'), arg(arg='allowed_methods'), arg(arg='status_forcelist'), arg(arg='backoff_factor'), arg(arg='raise_on_redirect'), arg(arg='raise_on_status'), arg(arg='history'), arg(arg='respect_retry_after_header'), arg(arg='remove_headers_on_redirect'), arg(arg='method_whitelist')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=10), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Name(id='_Default', ctx=Load()), Constant(value=None), Constant(value=0), Constant(value=True), Constant(value=True), Constant(value=None), Constant(value=True), Name(id='_Default', ctx=Load()), Name(id='_Default', ctx=Load())]), body=[If(test=Compare(left=Name(id='method_whitelist', ctx=Load()), ops=[IsNot()], comparators=[Name(id='_Default', ctx=Load())]), body=[If(test=Compare(left=Name(id='allowed_methods', ctx=Load()), ops=[IsNot()], comparators=[Name(id='_Default', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value="Using both 'allowed_methods' and 'method_whitelist' together is not allowed. Instead only use 'allowed_methods'")], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value="Using 'method_whitelist' with Retry is deprecated and will be removed in v2.0. Use 'allowed_methods' instead"), Name(id='DeprecationWarning', ctx=Load())], keywords=[keyword(arg='stacklevel', value=Constant(value=2))])), Assign(targets=[Name(id='allowed_methods', ctx=Store())], value=Name(id='method_whitelist', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='allowed_methods', ctx=Load()), ops=[Is()], comparators=[Name(id='_Default', ctx=Load())]), body=[Assign(targets=[Name(id='allowed_methods', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='DEFAULT_ALLOWED_METHODS', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='remove_headers_on_redirect', ctx=Load()), ops=[Is()], comparators=[Name(id='_Default', ctx=Load())]), body=[Assign(targets=[Name(id='remove_headers_on_redirect', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='DEFAULT_REMOVE_HEADERS_ON_REDIRECT', ctx=Load()))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='total', ctx=Store())], value=Name(id='total', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='connect', ctx=Store())], value=Name(id='connect', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='read', ctx=Store())], value=Name(id='read', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='status', ctx=Store())], value=Name(id='status', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='other', ctx=Store())], value=Name(id='other', ctx=Load())), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='redirect', ctx=Load()), ops=[Is()], comparators=[Constant(value=False)]), Compare(left=Name(id='total', ctx=Load()), ops=[Is()], comparators=[Constant(value=False)])]), body=[Assign(targets=[Name(id='redirect', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='raise_on_redirect', ctx=Store())], value=Constant(value=False))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='redirect', ctx=Store())], value=Name(id='redirect', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='status_forcelist', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='status_forcelist', ctx=Load()), Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='allowed_methods', ctx=Store())], value=Name(id='allowed_methods', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='backoff_factor', ctx=Store())], value=Name(id='backoff_factor', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='raise_on_redirect', ctx=Store())], value=Name(id='raise_on_redirect', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='raise_on_status', ctx=Store())], value=Name(id='raise_on_status', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='history', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='history', ctx=Load()), Call(func=Name(id='tuple', ctx=Load()), args=[], keywords=[])])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='respect_retry_after_header', ctx=Store())], value=Name(id='respect_retry_after_header', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='remove_headers_on_redirect', ctx=Store())], value=Call(func=Name(id='frozenset', ctx=Load()), args=[ListComp(elt=Call(func=Attribute(value=Name(id='h', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), generators=[comprehension(target=Name(id='h', ctx=Store()), iter=Name(id='remove_headers_on_redirect', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[]), FunctionDef(name='new', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kw'), defaults=[]), body=[Assign(targets=[Name(id='params', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='total', value=Attribute(value=Name(id='self', ctx=Load()), attr='total', ctx=Load())), keyword(arg='connect', value=Attribute(value=Name(id='self', ctx=Load()), attr='connect', ctx=Load())), keyword(arg='read', value=Attribute(value=Name(id='self', ctx=Load()), attr='read', ctx=Load())), keyword(arg='redirect', value=Attribute(value=Name(id='self', ctx=Load()), attr='redirect', ctx=Load())), keyword(arg='status', value=Attribute(value=Name(id='self', ctx=Load()), attr='status', ctx=Load())), keyword(arg='other', value=Attribute(value=Name(id='self', ctx=Load()), attr='other', ctx=Load())), keyword(arg='status_forcelist', value=Attribute(value=Name(id='self', ctx=Load()), attr='status_forcelist', ctx=Load())), keyword(arg='backoff_factor', value=Attribute(value=Name(id='self', ctx=Load()), attr='backoff_factor', ctx=Load())), keyword(arg='raise_on_redirect', value=Attribute(value=Name(id='self', ctx=Load()), attr='raise_on_redirect', ctx=Load())), keyword(arg='raise_on_status', value=Attribute(value=Name(id='self', ctx=Load()), attr='raise_on_status', ctx=Load())), keyword(arg='history', value=Attribute(value=Name(id='self', ctx=Load()), attr='history', ctx=Load())), keyword(arg='remove_headers_on_redirect', value=Attribute(value=Name(id='self', ctx=Load()), attr='remove_headers_on_redirect', ctx=Load())), keyword(arg='respect_retry_after_header', value=Attribute(value=Name(id='self', ctx=Load()), attr='respect_retry_after_header', ctx=Load()))])), If(test=BoolOp(op=And(), values=[Compare(left=Constant(value='method_whitelist'), ops=[NotIn()], comparators=[Name(id='kw', ctx=Load())]), Compare(left=Constant(value='allowed_methods'), ops=[NotIn()], comparators=[Name(id='kw', ctx=Load())])]), body=[If(test=Compare(left=Constant(value='method_whitelist'), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='__dict__', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value="Using 'method_whitelist' with Retry is deprecated and will be removed in v2.0. Use 'allowed_methods' instead"), Name(id='DeprecationWarning', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='params', ctx=Load()), slice=Constant(value='method_whitelist'), ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='allowed_methods', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Name(id='params', ctx=Load()), slice=Constant(value='allowed_methods'), ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='allowed_methods', ctx=Load()))])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='params', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='kw', ctx=Load())], keywords=[])), Return(value=Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), args=[], keywords=[keyword(value=Name(id='params', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='from_int', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='retries'), arg(arg='redirect'), arg(arg='default')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Expr(value=Constant(value='Backwards-compatibility for the old retries format.')), If(test=Compare(left=Name(id='retries', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='retries', ctx=Store())], value=IfExp(test=Compare(left=Name(id='default', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Name(id='default', ctx=Load()), orelse=Attribute(value=Name(id='cls', ctx=Load()), attr='DEFAULT', ctx=Load())))], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='retries', ctx=Load()), Name(id='Retry', ctx=Load())], keywords=[]), body=[Return(value=Name(id='retries', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='redirect', ctx=Store())], value=BoolOp(op=And(), values=[Call(func=Name(id='bool', ctx=Load()), args=[Name(id='redirect', ctx=Load())], keywords=[]), Constant(value=None)])), Assign(targets=[Name(id='new_retries', ctx=Store())], value=Call(func=Name(id='cls', ctx=Load()), args=[Name(id='retries', ctx=Load())], keywords=[keyword(arg='redirect', value=Name(id='redirect', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Converted retries value: %r -> %r'), Name(id='retries', ctx=Load()), Name(id='new_retries', ctx=Load())], keywords=[])), Return(value=Name(id='new_retries', ctx=Load()))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='get_backoff_time', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Formula for computing the current backoff\n\n        :rtype: float\n        ')), Assign(targets=[Name(id='consecutive_errors_len', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='takewhile', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Attribute(value=Name(id='x', ctx=Load()), attr='redirect_location', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])), Call(func=Name(id='reversed', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='history', ctx=Load())], keywords=[])], keywords=[])], keywords=[])], keywords=[])), If(test=Compare(left=Name(id='consecutive_errors_len', ctx=Load()), ops=[LtE()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value=0))], orelse=[]), Assign(targets=[Name(id='backoff_value', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='backoff_factor', ctx=Load()), op=Mult(), right=BinOp(left=Constant(value=2), op=Pow(), right=BinOp(left=Name(id='consecutive_errors_len', ctx=Load()), op=Sub(), right=Constant(value=1))))), Return(value=Call(func=Name(id='min', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='DEFAULT_BACKOFF_MAX', ctx=Load()), Name(id='backoff_value', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='parse_retry_after', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='retry_after')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='match', ctx=Load()), args=[Constant(value='^\\s*[0-9]+\\s*$'), Name(id='retry_after', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='seconds', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Name(id='retry_after', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='retry_date_tuple', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='email', ctx=Load()), attr='utils', ctx=Load()), attr='parsedate_tz', ctx=Load()), args=[Name(id='retry_after', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='retry_date_tuple', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='InvalidHeader', ctx=Load()), args=[BinOp(left=Constant(value='Invalid Retry-After header: %s'), op=Mod(), right=Name(id='retry_after', ctx=Load()))], keywords=[]))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='retry_date_tuple', ctx=Load()), slice=Constant(value=9), ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='retry_date_tuple', ctx=Store())], value=BinOp(left=BinOp(left=Subscript(value=Name(id='retry_date_tuple', ctx=Load()), slice=Slice(upper=Constant(value=9)), ctx=Load()), op=Add(), right=Tuple(elts=[Constant(value=0)], ctx=Load())), op=Add(), right=Subscript(value=Name(id='retry_date_tuple', ctx=Load()), slice=Slice(lower=Constant(value=10)), ctx=Load())))], orelse=[]), Assign(targets=[Name(id='retry_date', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='email', ctx=Load()), attr='utils', ctx=Load()), attr='mktime_tz', ctx=Load()), args=[Name(id='retry_date_tuple', ctx=Load())], keywords=[])), Assign(targets=[Name(id='seconds', ctx=Store())], value=BinOp(left=Name(id='retry_date', ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='time', ctx=Load()), args=[], keywords=[])))]), If(test=Compare(left=Name(id='seconds', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='seconds', ctx=Store())], value=Constant(value=0))], orelse=[]), Return(value=Name(id='seconds', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_retry_after', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='response')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get the value of Retry-After in seconds.')), Assign(targets=[Name(id='retry_after', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='response', ctx=Load()), attr='headers', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='Retry-After')], keywords=[])), If(test=Compare(left=Name(id='retry_after', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=None))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='parse_retry_after', ctx=Load()), args=[Name(id='retry_after', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='sleep_for_retry', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='response')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Name(id='retry_after', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_retry_after', ctx=Load()), args=[Name(id='response', ctx=Load())], keywords=[])), If(test=Name(id='retry_after', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='sleep', ctx=Load()), args=[Name(id='retry_after', ctx=Load())], keywords=[])), Return(value=Constant(value=True))], orelse=[]), Return(value=Constant(value=False))], decorator_list=[]), FunctionDef(name='_sleep_backoff', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='backoff', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_backoff_time', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='backoff', ctx=Load()), ops=[LtE()], comparators=[Constant(value=0)]), body=[Return()], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='sleep', ctx=Load()), args=[Name(id='backoff', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='sleep', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='response')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value="Sleep between retry attempts.\n\n        This method will respect a server's ``Retry-After`` response header\n        and sleep the duration of the time requested. If that is not present, it\n        will use an exponential backoff. By default, the backoff factor is 0 and\n        this method will return immediately.\n        ")), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='respect_retry_after_header', ctx=Load()), Name(id='response', ctx=Load())]), body=[Assign(targets=[Name(id='slept', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='sleep_for_retry', ctx=Load()), args=[Name(id='response', ctx=Load())], keywords=[])), If(test=Name(id='slept', ctx=Load()), body=[Return()], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_sleep_backoff', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='_is_connection_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='err')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Errors when we're fairly sure that the server did not receive the\n        request, so it should be safe to retry.\n        ")), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='err', ctx=Load()), Name(id='ProxyError', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='err', ctx=Store())], value=Attribute(value=Name(id='err', ctx=Load()), attr='original_error', ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='err', ctx=Load()), Name(id='ConnectTimeoutError', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_is_read_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='err')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Errors that occur after the request has been started, so we should\n        assume that the server began processing it.\n        ')), Return(value=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='err', ctx=Load()), Tuple(elts=[Name(id='ReadTimeoutError', ctx=Load()), Name(id='ProtocolError', ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_is_method_retryable', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='method')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Checks if a given HTTP method should be retried upon, depending if\n        it is included in the allowed_methods\n        ')), If(test=Compare(left=Constant(value='method_whitelist'), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='__dict__', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value="Using 'method_whitelist' with Retry is deprecated and will be removed in v2.0. Use 'allowed_methods' instead"), Name(id='DeprecationWarning', ctx=Load())], keywords=[])), Assign(targets=[Name(id='allowed_methods', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='method_whitelist', ctx=Load()))], orelse=[Assign(targets=[Name(id='allowed_methods', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='allowed_methods', ctx=Load()))]), If(test=BoolOp(op=And(), values=[Name(id='allowed_methods', ctx=Load()), Compare(left=Call(func=Attribute(value=Name(id='method', ctx=Load()), attr='upper', ctx=Load()), args=[], keywords=[]), ops=[NotIn()], comparators=[Name(id='allowed_methods', ctx=Load())])]), body=[Return(value=Constant(value=False))], orelse=[]), Return(value=Constant(value=True))], decorator_list=[]), FunctionDef(name='is_retry', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='method'), arg(arg='status_code'), arg(arg='has_retry_after')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value='Is this method/status code retryable? (Based on allowlists and control\n        variables such as the number of total retries to allow, whether to\n        respect the Retry-After header, whether this header is present, and\n        whether the returned status code is on the list of status codes to\n        be retried upon on the presence of the aforementioned header)\n        ')), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_is_method_retryable', ctx=Load()), args=[Name(id='method', ctx=Load())], keywords=[])), body=[Return(value=Constant(value=False))], orelse=[]), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='status_forcelist', ctx=Load()), Compare(left=Name(id='status_code', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='status_forcelist', ctx=Load())])]), body=[Return(value=Constant(value=True))], orelse=[]), Return(value=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='total', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='respect_retry_after_header', ctx=Load()), Name(id='has_retry_after', ctx=Load()), Compare(left=Name(id='status_code', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='RETRY_AFTER_STATUS_CODES', ctx=Load())])]))], decorator_list=[]), FunctionDef(name='is_exhausted', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Are we out of retries?')), Assign(targets=[Name(id='retry_counts', ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='total', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='connect', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='read', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='redirect', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='status', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='other', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='retry_counts', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='filter', ctx=Load()), args=[Constant(value=None), Name(id='retry_counts', ctx=Load())], keywords=[])], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='retry_counts', ctx=Load())), body=[Return(value=Constant(value=False))], orelse=[]), Return(value=Compare(left=Call(func=Name(id='min', ctx=Load()), args=[Name(id='retry_counts', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Constant(value=0)]))], decorator_list=[]), FunctionDef(name='increment', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='method'), arg(arg='url'), arg(arg='response'), arg(arg='error'), arg(arg='_pool'), arg(arg='_stacktrace')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='Return a new Retry object with incremented retry counters.\n\n        :param response: A response object, or None, if the server did not\n            return a response.\n        :type response: :class:`~urllib3.response.HTTPResponse`\n        :param Exception error: An error encountered during the request, or\n            None if the response was received successfully.\n\n        :return: A new ``Retry`` object.\n        ')), If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='total', ctx=Load()), ops=[Is()], comparators=[Constant(value=False)]), Name(id='error', ctx=Load())]), body=[Raise(exc=Call(func=Attribute(value=Name(id='six', ctx=Load()), attr='reraise', ctx=Load()), args=[Call(func=Name(id='type', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[]), Name(id='error', ctx=Load()), Name(id='_stacktrace', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='total', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='total', ctx=Load())), If(test=Compare(left=Name(id='total', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[AugAssign(target=Name(id='total', ctx=Store()), op=Sub(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='connect', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='connect', ctx=Load())), Assign(targets=[Name(id='read', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='read', ctx=Load())), Assign(targets=[Name(id='redirect', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='redirect', ctx=Load())), Assign(targets=[Name(id='status_count', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='status', ctx=Load())), Assign(targets=[Name(id='other', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='other', ctx=Load())), Assign(targets=[Name(id='cause', ctx=Store())], value=Constant(value='unknown')), Assign(targets=[Name(id='status', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='redirect_location', ctx=Store())], value=Constant(value=None)), If(test=BoolOp(op=And(), values=[Name(id='error', ctx=Load()), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_is_connection_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Name(id='connect', ctx=Load()), ops=[Is()], comparators=[Constant(value=False)]), body=[Raise(exc=Call(func=Attribute(value=Name(id='six', ctx=Load()), attr='reraise', ctx=Load()), args=[Call(func=Name(id='type', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[]), Name(id='error', ctx=Load()), Name(id='_stacktrace', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='connect', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[AugAssign(target=Name(id='connect', ctx=Store()), op=Sub(), value=Constant(value=1))], orelse=[])])], orelse=[If(test=BoolOp(op=And(), values=[Name(id='error', ctx=Load()), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_is_read_error', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='read', ctx=Load()), ops=[Is()], comparators=[Constant(value=False)]), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_is_method_retryable', ctx=Load()), args=[Name(id='method', ctx=Load())], keywords=[]))]), body=[Raise(exc=Call(func=Attribute(value=Name(id='six', ctx=Load()), attr='reraise', ctx=Load()), args=[Call(func=Name(id='type', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[]), Name(id='error', ctx=Load()), Name(id='_stacktrace', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='read', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[AugAssign(target=Name(id='read', ctx=Store()), op=Sub(), value=Constant(value=1))], orelse=[])])], orelse=[If(test=Name(id='error', ctx=Load()), body=[If(test=Compare(left=Name(id='other', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[AugAssign(target=Name(id='other', ctx=Store()), op=Sub(), value=Constant(value=1))], orelse=[])], orelse=[If(test=BoolOp(op=And(), values=[Name(id='response', ctx=Load()), Call(func=Attribute(value=Name(id='response', ctx=Load()), attr='get_redirect_location', ctx=Load()), args=[], keywords=[])]), body=[If(test=Compare(left=Name(id='redirect', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[AugAssign(target=Name(id='redirect', ctx=Store()), op=Sub(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='cause', ctx=Store())], value=Constant(value='too many redirects')), Assign(targets=[Name(id='redirect_location', ctx=Store())], value=Call(func=Attribute(value=Name(id='response', ctx=Load()), attr='get_redirect_location', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='status', ctx=Store())], value=Attribute(value=Name(id='response', ctx=Load()), attr='status', ctx=Load()))], orelse=[Assign(targets=[Name(id='cause', ctx=Store())], value=Attribute(value=Name(id='ResponseError', ctx=Load()), attr='GENERIC_ERROR', ctx=Load())), If(test=BoolOp(op=And(), values=[Name(id='response', ctx=Load()), Attribute(value=Name(id='response', ctx=Load()), attr='status', ctx=Load())]), body=[If(test=Compare(left=Name(id='status_count', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[AugAssign(target=Name(id='status_count', ctx=Store()), op=Sub(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='cause', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='ResponseError', ctx=Load()), attr='SPECIFIC_ERROR', ctx=Load()), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='status_code', value=Attribute(value=Name(id='response', ctx=Load()), attr='status', ctx=Load()))])), Assign(targets=[Name(id='status', ctx=Store())], value=Attribute(value=Name(id='response', ctx=Load()), attr='status', ctx=Load()))], orelse=[])])])])]), Assign(targets=[Name(id='history', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='history', ctx=Load()), op=Add(), right=Tuple(elts=[Call(func=Name(id='RequestHistory', ctx=Load()), args=[Name(id='method', ctx=Load()), Name(id='url', ctx=Load()), Name(id='error', ctx=Load()), Name(id='status', ctx=Load()), Name(id='redirect_location', ctx=Load())], keywords=[])], ctx=Load()))), Assign(targets=[Name(id='new_retry', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='new', ctx=Load()), args=[], keywords=[keyword(arg='total', value=Name(id='total', ctx=Load())), keyword(arg='connect', value=Name(id='connect', ctx=Load())), keyword(arg='read', value=Name(id='read', ctx=Load())), keyword(arg='redirect', value=Name(id='redirect', ctx=Load())), keyword(arg='status', value=Name(id='status_count', ctx=Load())), keyword(arg='other', value=Name(id='other', ctx=Load())), keyword(arg='history', value=Name(id='history', ctx=Load()))])), If(test=Call(func=Attribute(value=Name(id='new_retry', ctx=Load()), attr='is_exhausted', ctx=Load()), args=[], keywords=[]), body=[Raise(exc=Call(func=Name(id='MaxRetryError', ctx=Load()), args=[Name(id='_pool', ctx=Load()), Name(id='url', ctx=Load()), BoolOp(op=Or(), values=[Name(id='error', ctx=Load()), Call(func=Name(id='ResponseError', ctx=Load()), args=[Name(id='cause', ctx=Load())], keywords=[])])], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value="Incremented Retry for (url='%s'): %r"), Name(id='url', ctx=Load()), Name(id='new_retry', ctx=Load())], keywords=[])), Return(value=Name(id='new_retry', ctx=Load()))], decorator_list=[]), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value='{cls.__name__}(total={self.total}, connect={self.connect}, read={self.read}, redirect={self.redirect}, status={self.status})'), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='cls', value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), keyword(arg='self', value=Name(id='self', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='__getattr__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='item')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='item', ctx=Load()), ops=[Eq()], comparators=[Constant(value='method_whitelist')]), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value="Using 'method_whitelist' with Retry is deprecated and will be removed in v2.0. Use 'allowed_methods' instead"), Name(id='DeprecationWarning', ctx=Load())], keywords=[])), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='allowed_methods', ctx=Load()))], orelse=[]), Try(body=[Return(value=Call(func=Name(id='getattr', ctx=Load()), args=[Call(func=Name(id='super', ctx=Load()), args=[Name(id='Retry', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]), Name(id='item', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Return(value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='Retry', ctx=Load()), Name(id='item', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[])], decorator_list=[Call(func=Attribute(value=Name(id='six', ctx=Load()), attr='add_metaclass', ctx=Load()), args=[Name(id='_RetryMeta', ctx=Load())], keywords=[])]), Assign(targets=[Attribute(value=Name(id='Retry', ctx=Load()), attr='DEFAULT', ctx=Store())], value=Call(func=Name(id='Retry', ctx=Load()), args=[Constant(value=3)], keywords=[]))], type_ignores=[])