Module(body=[ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), ImportFrom(module='typing', names=[alias(name='IO'), alias(name='Callable')], level=0), FunctionDef(name='get_fileno', args=arguments(posonlyargs=[], args=[arg(arg='file_like', annotation=Subscript(value=Name(id='IO', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get fileno() from a file, accounting for poorly implemented file-like objects.\n\n    Args:\n        file_like (IO): A file-like object.\n\n    Returns:\n        int | None: The result of fileno if available, or None if operation failed.\n    ')), AnnAssign(target=Name(id='fileno', ctx=Store()), annotation=BinOp(left=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None)), value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='file_like', ctx=Load()), Constant(value='fileno'), Constant(value=None)], keywords=[]), simple=1), If(test=Compare(left=Name(id='fileno', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Try(body=[Return(value=Call(func=Name(id='fileno', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Return(value=Constant(value=None))])], orelse=[], finalbody=[])], orelse=[]), Return(value=Constant(value=None))], decorator_list=[], returns=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None)))], type_ignores=[])