Module(body=[Import(names=[alias(name='re')]), Import(names=[alias(name='string')]), Import(names=[alias(name='urllib.parse')]), ImportFrom(module='typing', names=[alias(name='List'), alias(name='Optional', asname='TOptional'), alias(name='Set')], level=0), ImportFrom(module='pip._vendor.pyparsing', names=[alias(name='Combine'), alias(name='Literal', asname='L'), alias(name='Optional'), alias(name='ParseException'), alias(name='Regex'), alias(name='Word'), alias(name='ZeroOrMore'), alias(name='originalTextFor'), alias(name='stringEnd'), alias(name='stringStart')], level=0), ImportFrom(module='markers', names=[alias(name='MARKER_EXPR'), alias(name='Marker')], level=1), ImportFrom(module='specifiers', names=[alias(name='LegacySpecifier'), alias(name='Specifier'), alias(name='SpecifierSet')], level=1), ClassDef(name='InvalidRequirement', bases=[Name(id='ValueError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    An invalid requirement was found, users should refer to PEP 508.\n    '))], decorator_list=[]), Assign(targets=[Name(id='ALPHANUM', ctx=Store())], value=Call(func=Name(id='Word', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='string', ctx=Load()), attr='ascii_letters', ctx=Load()), op=Add(), right=Attribute(value=Name(id='string', ctx=Load()), attr='digits', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='LBRACKET', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='L', ctx=Load()), args=[Constant(value='[')], keywords=[]), attr='suppress', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='RBRACKET', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='L', ctx=Load()), args=[Constant(value=']')], keywords=[]), attr='suppress', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='LPAREN', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='L', ctx=Load()), args=[Constant(value='(')], keywords=[]), attr='suppress', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='RPAREN', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='L', ctx=Load()), args=[Constant(value=')')], keywords=[]), attr='suppress', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='COMMA', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='L', ctx=Load()), args=[Constant(value=',')], keywords=[]), attr='suppress', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='SEMICOLON', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='L', ctx=Load()), args=[Constant(value=';')], keywords=[]), attr='suppress', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='AT', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='L', ctx=Load()), args=[Constant(value='@')], keywords=[]), attr='suppress', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='PUNCTUATION', ctx=Store())], value=Call(func=Name(id='Word', ctx=Load()), args=[Constant(value='-_.')], keywords=[])), Assign(targets=[Name(id='IDENTIFIER_END', ctx=Store())], value=BinOp(left=Name(id='ALPHANUM', ctx=Load()), op=BitOr(), right=BinOp(left=Call(func=Name(id='ZeroOrMore', ctx=Load()), args=[Name(id='PUNCTUATION', ctx=Load())], keywords=[]), op=Add(), right=Name(id='ALPHANUM', ctx=Load())))), Assign(targets=[Name(id='IDENTIFIER', ctx=Store())], value=Call(func=Name(id='Combine', ctx=Load()), args=[BinOp(left=Name(id='ALPHANUM', ctx=Load()), op=Add(), right=Call(func=Name(id='ZeroOrMore', ctx=Load()), args=[Name(id='IDENTIFIER_END', ctx=Load())], keywords=[]))], keywords=[])), Assign(targets=[Name(id='NAME', ctx=Store())], value=Call(func=Name(id='IDENTIFIER', ctx=Load()), args=[Constant(value='name')], keywords=[])), Assign(targets=[Name(id='EXTRA', ctx=Store())], value=Name(id='IDENTIFIER', ctx=Load())), Assign(targets=[Name(id='URI', ctx=Store())], value=Call(func=Call(func=Name(id='Regex', ctx=Load()), args=[Constant(value='[^ ]+')], keywords=[]), args=[Constant(value='url')], keywords=[])), Assign(targets=[Name(id='URL', ctx=Store())], value=BinOp(left=Name(id='AT', ctx=Load()), op=Add(), right=Name(id='URI', ctx=Load()))), Assign(targets=[Name(id='EXTRAS_LIST', ctx=Store())], value=BinOp(left=Name(id='EXTRA', ctx=Load()), op=Add(), right=Call(func=Name(id='ZeroOrMore', ctx=Load()), args=[BinOp(left=Name(id='COMMA', ctx=Load()), op=Add(), right=Name(id='EXTRA', ctx=Load()))], keywords=[]))), Assign(targets=[Name(id='EXTRAS', ctx=Store())], value=Call(func=BinOp(left=BinOp(left=Name(id='LBRACKET', ctx=Load()), op=Add(), right=Call(func=Name(id='Optional', ctx=Load()), args=[Name(id='EXTRAS_LIST', ctx=Load())], keywords=[])), op=Add(), right=Name(id='RBRACKET', ctx=Load())), args=[Constant(value='extras')], keywords=[])), Assign(targets=[Name(id='VERSION_PEP440', ctx=Store())], value=Call(func=Name(id='Regex', ctx=Load()), args=[Attribute(value=Name(id='Specifier', ctx=Load()), attr='_regex_str', ctx=Load()), BinOp(left=Attribute(value=Name(id='re', ctx=Load()), attr='VERBOSE', ctx=Load()), op=BitOr(), right=Attribute(value=Name(id='re', ctx=Load()), attr='IGNORECASE', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='VERSION_LEGACY', ctx=Store())], value=Call(func=Name(id='Regex', ctx=Load()), args=[Attribute(value=Name(id='LegacySpecifier', ctx=Load()), attr='_regex_str', ctx=Load()), BinOp(left=Attribute(value=Name(id='re', ctx=Load()), attr='VERBOSE', ctx=Load()), op=BitOr(), right=Attribute(value=Name(id='re', ctx=Load()), attr='IGNORECASE', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='VERSION_ONE', ctx=Store())], value=BinOp(left=Name(id='VERSION_PEP440', ctx=Load()), op=BitXor(), right=Name(id='VERSION_LEGACY', ctx=Load()))), Assign(targets=[Name(id='VERSION_MANY', ctx=Store())], value=Call(func=Call(func=Name(id='Combine', ctx=Load()), args=[BinOp(left=Name(id='VERSION_ONE', ctx=Load()), op=Add(), right=Call(func=Name(id='ZeroOrMore', ctx=Load()), args=[BinOp(left=Name(id='COMMA', ctx=Load()), op=Add(), right=Name(id='VERSION_ONE', ctx=Load()))], keywords=[]))], keywords=[keyword(arg='joinString', value=Constant(value=',')), keyword(arg='adjacent', value=Constant(value=False))]), args=[Constant(value='_raw_spec')], keywords=[])), Assign(targets=[Name(id='_VERSION_SPEC', ctx=Store())], value=Call(func=Name(id='Optional', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=Name(id='LPAREN', ctx=Load()), op=Add(), right=Name(id='VERSION_MANY', ctx=Load())), op=Add(), right=Name(id='RPAREN', ctx=Load())), op=BitOr(), right=Name(id='VERSION_MANY', ctx=Load()))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='_VERSION_SPEC', ctx=Load()), attr='setParseAction', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='s'), arg(arg='l'), arg(arg='t')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=BoolOp(op=Or(), values=[Attribute(value=Name(id='t', ctx=Load()), attr='_raw_spec', ctx=Load()), Constant(value='')]))], keywords=[])), Assign(targets=[Name(id='VERSION_SPEC', ctx=Store())], value=Call(func=Call(func=Name(id='originalTextFor', ctx=Load()), args=[Name(id='_VERSION_SPEC', ctx=Load())], keywords=[]), args=[Constant(value='specifier')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='VERSION_SPEC', ctx=Load()), attr='setParseAction', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='s'), arg(arg='l'), arg(arg='t')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()))], keywords=[])), Assign(targets=[Name(id='MARKER_EXPR', ctx=Store())], value=Call(func=Call(func=Name(id='originalTextFor', ctx=Load()), args=[Call(func=Name(id='MARKER_EXPR', ctx=Load()), args=[], keywords=[])], keywords=[]), args=[Constant(value='marker')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='MARKER_EXPR', ctx=Load()), attr='setParseAction', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='s'), arg(arg='l'), arg(arg='t')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='Marker', ctx=Load()), args=[Subscript(value=Name(id='s', ctx=Load()), slice=Slice(lower=Attribute(value=Name(id='t', ctx=Load()), attr='_original_start', ctx=Load()), upper=Attribute(value=Name(id='t', ctx=Load()), attr='_original_end', ctx=Load())), ctx=Load())], keywords=[]))], keywords=[])), Assign(targets=[Name(id='MARKER_SEPARATOR', ctx=Store())], value=Name(id='SEMICOLON', ctx=Load())), Assign(targets=[Name(id='MARKER', ctx=Store())], value=BinOp(left=Name(id='MARKER_SEPARATOR', ctx=Load()), op=Add(), right=Name(id='MARKER_EXPR', ctx=Load()))), Assign(targets=[Name(id='VERSION_AND_MARKER', ctx=Store())], value=BinOp(left=Name(id='VERSION_SPEC', ctx=Load()), op=Add(), right=Call(func=Name(id='Optional', ctx=Load()), args=[Name(id='MARKER', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='URL_AND_MARKER', ctx=Store())], value=BinOp(left=Name(id='URL', ctx=Load()), op=Add(), right=Call(func=Name(id='Optional', ctx=Load()), args=[Name(id='MARKER', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='NAMED_REQUIREMENT', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='NAME', ctx=Load()), op=Add(), right=Call(func=Name(id='Optional', ctx=Load()), args=[Name(id='EXTRAS', ctx=Load())], keywords=[])), op=Add(), right=BinOp(left=Name(id='URL_AND_MARKER', ctx=Load()), op=BitOr(), right=Name(id='VERSION_AND_MARKER', ctx=Load())))), Assign(targets=[Name(id='REQUIREMENT', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='stringStart', ctx=Load()), op=Add(), right=Name(id='NAMED_REQUIREMENT', ctx=Load())), op=Add(), right=Name(id='stringEnd', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='REQUIREMENT', ctx=Load()), attr='parseString', ctx=Load()), args=[Constant(value='x[]')], keywords=[])), ClassDef(name='Requirement', bases=[], keywords=[], body=[Expr(value=Constant(value='Parse a requirement.\n\n    Parse a given requirement string into its parts, such as name, specifier,\n    URL, and extras. Raises InvalidRequirement on a badly-formed requirement\n    string.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='requirement_string', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Name(id='req', ctx=Store())], value=Call(func=Attribute(value=Name(id='REQUIREMENT', ctx=Load()), attr='parseString', ctx=Load()), args=[Name(id='requirement_string', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ParseException', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='InvalidRequirement', ctx=Load()), args=[JoinedStr(values=[Constant(value='Parse error at "'), FormattedValue(value=Subscript(value=Name(id='requirement_string', ctx=Load()), slice=Slice(lower=Attribute(value=Name(id='e', ctx=Load()), attr='loc', ctx=Load()), upper=BinOp(left=Attribute(value=Name(id='e', ctx=Load()), attr='loc', ctx=Load()), op=Add(), right=Constant(value=8))), ctx=Load()), conversion=114), Constant(value='": '), FormattedValue(value=Attribute(value=Name(id='e', ctx=Load()), attr='msg', ctx=Load()), conversion=-1)])], keywords=[]))])], orelse=[], finalbody=[]), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Store()), annotation=Name(id='str', ctx=Load()), value=Attribute(value=Name(id='req', ctx=Load()), attr='name', ctx=Load()), simple=0), If(test=Attribute(value=Name(id='req', ctx=Load()), attr='url', ctx=Load()), body=[Assign(targets=[Name(id='parsed_url', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='urllib', ctx=Load()), attr='parse', ctx=Load()), attr='urlparse', ctx=Load()), args=[Attribute(value=Name(id='req', ctx=Load()), attr='url', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='parsed_url', ctx=Load()), attr='scheme', ctx=Load()), ops=[Eq()], comparators=[Constant(value='file')]), body=[If(test=Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='urllib', ctx=Load()), attr='parse', ctx=Load()), attr='urlunparse', ctx=Load()), args=[Name(id='parsed_url', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Attribute(value=Name(id='req', ctx=Load()), attr='url', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='InvalidRequirement', ctx=Load()), args=[Constant(value='Invalid URL given')], keywords=[]))], orelse=[])], orelse=[If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=BoolOp(op=And(), values=[Attribute(value=Name(id='parsed_url', ctx=Load()), attr='scheme', ctx=Load()), Attribute(value=Name(id='parsed_url', ctx=Load()), attr='netloc', ctx=Load())])), BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Attribute(value=Name(id='parsed_url', ctx=Load()), attr='scheme', ctx=Load())), UnaryOp(op=Not(), operand=Attribute(value=Name(id='parsed_url', ctx=Load()), attr='netloc', ctx=Load()))])]), body=[Raise(exc=Call(func=Name(id='InvalidRequirement', ctx=Load()), args=[JoinedStr(values=[Constant(value='Invalid URL: '), FormattedValue(value=Attribute(value=Name(id='req', ctx=Load()), attr='url', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[])]), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='url', ctx=Store()), annotation=Subscript(value=Name(id='TOptional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Attribute(value=Name(id='req', ctx=Load()), attr='url', ctx=Load()), simple=0)], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='url', ctx=Store())], value=Constant(value=None))]), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='extras', ctx=Store()), annotation=Subscript(value=Name(id='Set', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Call(func=Name(id='set', ctx=Load()), args=[IfExp(test=Attribute(value=Name(id='req', ctx=Load()), attr='extras', ctx=Load()), body=Call(func=Attribute(value=Attribute(value=Name(id='req', ctx=Load()), attr='extras', ctx=Load()), attr='asList', ctx=Load()), args=[], keywords=[]), orelse=List(elts=[], ctx=Load()))], keywords=[]), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='specifier', ctx=Store()), annotation=Name(id='SpecifierSet', ctx=Load()), value=Call(func=Name(id='SpecifierSet', ctx=Load()), args=[Attribute(value=Name(id='req', ctx=Load()), attr='specifier', ctx=Load())], keywords=[]), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='marker', ctx=Store()), annotation=Subscript(value=Name(id='TOptional', ctx=Load()), slice=Name(id='Marker', ctx=Load()), ctx=Load()), value=IfExp(test=Attribute(value=Name(id='req', ctx=Load()), attr='marker', ctx=Load()), body=Attribute(value=Name(id='req', ctx=Load()), attr='marker', ctx=Load()), orelse=Constant(value=None)), simple=0)], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__str__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Name(id='parts', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())], ctx=Load()), simple=1), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='extras', ctx=Load()), body=[Assign(targets=[Name(id='formatted_extras', ctx=Store())], value=Call(func=Attribute(value=Constant(value=','), attr='join', ctx=Load()), args=[Call(func=Name(id='sorted', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='extras', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='parts', ctx=Load()), attr='append', ctx=Load()), args=[JoinedStr(values=[Constant(value='['), FormattedValue(value=Name(id='formatted_extras', ctx=Load()), conversion=-1), Constant(value=']')])], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='specifier', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='parts', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='specifier', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='url', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='parts', ctx=Load()), attr='append', ctx=Load()), args=[JoinedStr(values=[Constant(value='@ '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='url', ctx=Load()), conversion=-1)])], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='marker', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='parts', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value=' ')], keywords=[]))], orelse=[])], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='marker', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='parts', ctx=Load()), attr='append', ctx=Load()), args=[JoinedStr(values=[Constant(value='; '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='marker', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Name(id='parts', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[Constant(value="<Requirement('"), FormattedValue(value=Name(id='self', ctx=Load()), conversion=-1), Constant(value="')>")]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[])], type_ignores=[])