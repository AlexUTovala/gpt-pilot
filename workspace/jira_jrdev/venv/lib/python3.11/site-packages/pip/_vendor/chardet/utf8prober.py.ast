Module(body=[ImportFrom(module='typing', names=[alias(name='Union')], level=0), ImportFrom(module='charsetprober', names=[alias(name='CharSetProber')], level=1), ImportFrom(module='codingstatemachine', names=[alias(name='CodingStateMachine')], level=1), ImportFrom(module='enums', names=[alias(name='MachineState'), alias(name='ProbingState')], level=1), ImportFrom(module='mbcssm', names=[alias(name='UTF8_SM_MODEL')], level=1), ClassDef(name='UTF8Prober', bases=[Name(id='CharSetProber', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='ONE_CHAR_PROB', ctx=Store())], value=Constant(value=0.5)), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='coding_sm', ctx=Store())], value=Call(func=Name(id='CodingStateMachine', ctx=Load()), args=[Name(id='UTF8_SM_MODEL', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_mb_chars', ctx=Store())], value=Constant(value=0)), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='reset', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='reset', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='reset', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='coding_sm', ctx=Load()), attr='reset', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_num_mb_chars', ctx=Store())], value=Constant(value=0))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='charset_name', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value='utf-8'))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='language', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=''))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='feed', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='byte_str', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='bytes', ctx=Load()), Name(id='bytearray', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='c', ctx=Store()), iter=Name(id='byte_str', ctx=Load()), body=[Assign(targets=[Name(id='coding_state', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='coding_sm', ctx=Load()), attr='next_state', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='coding_state', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='MachineState', ctx=Load()), attr='ERROR', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_state', ctx=Store())], value=Attribute(value=Name(id='ProbingState', ctx=Load()), attr='NOT_ME', ctx=Load())), Break()], orelse=[]), If(test=Compare(left=Name(id='coding_state', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='MachineState', ctx=Load()), attr='ITS_ME', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_state', ctx=Store())], value=Attribute(value=Name(id='ProbingState', ctx=Load()), attr='FOUND_IT', ctx=Load())), Break()], orelse=[]), If(test=Compare(left=Name(id='coding_state', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='MachineState', ctx=Load()), attr='START', ctx=Load())]), body=[If(test=Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='coding_sm', ctx=Load()), attr='get_current_charlen', ctx=Load()), args=[], keywords=[]), ops=[GtE()], comparators=[Constant(value=2)]), body=[AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_num_mb_chars', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], orelse=[])], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='state', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='ProbingState', ctx=Load()), attr='DETECTING', ctx=Load())]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_confidence', ctx=Load()), args=[], keywords=[]), ops=[Gt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='SHORTCUT_THRESHOLD', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_state', ctx=Store())], value=Attribute(value=Name(id='ProbingState', ctx=Load()), attr='FOUND_IT', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='state', ctx=Load()))], decorator_list=[], returns=Name(id='ProbingState', ctx=Load())), FunctionDef(name='get_confidence', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='unlike', ctx=Store())], value=Constant(value=0.99)), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_num_mb_chars', ctx=Load()), ops=[Lt()], comparators=[Constant(value=6)]), body=[AugAssign(target=Name(id='unlike', ctx=Store()), op=Mult(), value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='ONE_CHAR_PROB', ctx=Load()), op=Pow(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_num_mb_chars', ctx=Load()))), Return(value=BinOp(left=Constant(value=1.0), op=Sub(), right=Name(id='unlike', ctx=Load())))], orelse=[]), Return(value=Name(id='unlike', ctx=Load()))], decorator_list=[], returns=Name(id='float', ctx=Load()))], decorator_list=[])], type_ignores=[])