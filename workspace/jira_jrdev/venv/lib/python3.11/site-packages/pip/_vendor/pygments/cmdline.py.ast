Module(body=[Expr(value=Constant(value='\n    pygments.cmdline\n    ~~~~~~~~~~~~~~~~\n\n    Command line interface.\n\n    :copyright: Copyright 2006-2023 by the Pygments team, see AUTHORS.\n    :license: BSD, see LICENSE for details.\n')), Import(names=[alias(name='os')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='shutil')]), Import(names=[alias(name='argparse')]), ImportFrom(module='textwrap', names=[alias(name='dedent')], level=0), ImportFrom(module='pip._vendor.pygments', names=[alias(name='__version__'), alias(name='highlight')], level=0), ImportFrom(module='pip._vendor.pygments.util', names=[alias(name='ClassNotFound'), alias(name='OptionError'), alias(name='docstring_headline'), alias(name='guess_decode'), alias(name='guess_decode_from_terminal'), alias(name='terminal_encoding'), alias(name='UnclosingTextIOWrapper')], level=0), ImportFrom(module='pip._vendor.pygments.lexers', names=[alias(name='get_all_lexers'), alias(name='get_lexer_by_name'), alias(name='guess_lexer'), alias(name='load_lexer_from_file'), alias(name='get_lexer_for_filename'), alias(name='find_lexer_class_for_filename')], level=0), ImportFrom(module='pip._vendor.pygments.lexers.special', names=[alias(name='TextLexer')], level=0), ImportFrom(module='pip._vendor.pygments.formatters.latex', names=[alias(name='LatexEmbeddedLexer'), alias(name='LatexFormatter')], level=0), ImportFrom(module='pip._vendor.pygments.formatters', names=[alias(name='get_all_formatters'), alias(name='get_formatter_by_name'), alias(name='load_formatter_from_file'), alias(name='get_formatter_for_filename'), alias(name='find_formatter_class')], level=0), ImportFrom(module='pip._vendor.pygments.formatters.terminal', names=[alias(name='TerminalFormatter')], level=0), ImportFrom(module='pip._vendor.pygments.formatters.terminal256', names=[alias(name='Terminal256Formatter'), alias(name='TerminalTrueColorFormatter')], level=0), ImportFrom(module='pip._vendor.pygments.filters', names=[alias(name='get_all_filters'), alias(name='find_filter_class')], level=0), ImportFrom(module='pip._vendor.pygments.styles', names=[alias(name='get_all_styles'), alias(name='get_style_by_name')], level=0), FunctionDef(name='_parse_options', args=arguments(posonlyargs=[], args=[arg(arg='o_strs')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='opts', ctx=Store())], value=Dict(keys=[], values=[])), If(test=UnaryOp(op=Not(), operand=Name(id='o_strs', ctx=Load())), body=[Return(value=Name(id='opts', ctx=Load()))], orelse=[]), For(target=Name(id='o_str', ctx=Store()), iter=Name(id='o_strs', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='o_str', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[])), body=[Continue()], orelse=[]), Assign(targets=[Name(id='o_args', ctx=Store())], value=Call(func=Attribute(value=Name(id='o_str', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=',')], keywords=[])), For(target=Name(id='o_arg', ctx=Store()), iter=Name(id='o_args', ctx=Load()), body=[Assign(targets=[Name(id='o_arg', ctx=Store())], value=Call(func=Attribute(value=Name(id='o_arg', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[])), Try(body=[Assign(targets=[Tuple(elts=[Name(id='o_key', ctx=Store()), Name(id='o_val', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='o_arg', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='='), Constant(value=1)], keywords=[])), Assign(targets=[Name(id='o_key', ctx=Store())], value=Call(func=Attribute(value=Name(id='o_key', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='o_val', ctx=Store())], value=Call(func=Attribute(value=Name(id='o_val', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='opts', ctx=Load()), slice=Name(id='o_arg', ctx=Load()), ctx=Store())], value=Constant(value=True))])], orelse=[Assign(targets=[Subscript(value=Name(id='opts', ctx=Load()), slice=Name(id='o_key', ctx=Load()), ctx=Store())], value=Name(id='o_val', ctx=Load()))], finalbody=[])], orelse=[])], orelse=[]), Return(value=Name(id='opts', ctx=Load()))], decorator_list=[]), FunctionDef(name='_parse_filters', args=arguments(posonlyargs=[], args=[arg(arg='f_strs')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='filters', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=UnaryOp(op=Not(), operand=Name(id='f_strs', ctx=Load())), body=[Return(value=Name(id='filters', ctx=Load()))], orelse=[]), For(target=Name(id='f_str', ctx=Store()), iter=Name(id='f_strs', ctx=Load()), body=[If(test=Compare(left=Constant(value=':'), ops=[In()], comparators=[Name(id='f_str', ctx=Load())]), body=[Assign(targets=[Tuple(elts=[Name(id='fname', ctx=Store()), Name(id='fopts', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='f_str', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=':'), Constant(value=1)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='filters', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='fname', ctx=Load()), Call(func=Name(id='_parse_options', ctx=Load()), args=[List(elts=[Name(id='fopts', ctx=Load())], ctx=Load())], keywords=[])], ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='filters', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='f_str', ctx=Load()), Dict(keys=[], values=[])], ctx=Load())], keywords=[]))])], orelse=[]), Return(value=Name(id='filters', ctx=Load()))], decorator_list=[]), FunctionDef(name='_print_help', args=arguments(posonlyargs=[], args=[arg(arg='what'), arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[If(test=Compare(left=Name(id='what', ctx=Load()), ops=[Eq()], comparators=[Constant(value='lexer')]), body=[Assign(targets=[Name(id='cls', ctx=Store())], value=Call(func=Name(id='get_lexer_by_name', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[BinOp(left=Constant(value='Help on the %s lexer:'), op=Mod(), right=Attribute(value=Name(id='cls', ctx=Load()), attr='name', ctx=Load()))], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Name(id='dedent', ctx=Load()), args=[Attribute(value=Name(id='cls', ctx=Load()), attr='__doc__', ctx=Load())], keywords=[])], keywords=[]))], orelse=[If(test=Compare(left=Name(id='what', ctx=Load()), ops=[Eq()], comparators=[Constant(value='formatter')]), body=[Assign(targets=[Name(id='cls', ctx=Store())], value=Call(func=Name(id='find_formatter_class', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[BinOp(left=Constant(value='Help on the %s formatter:'), op=Mod(), right=Attribute(value=Name(id='cls', ctx=Load()), attr='name', ctx=Load()))], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Name(id='dedent', ctx=Load()), args=[Attribute(value=Name(id='cls', ctx=Load()), attr='__doc__', ctx=Load())], keywords=[])], keywords=[]))], orelse=[If(test=Compare(left=Name(id='what', ctx=Load()), ops=[Eq()], comparators=[Constant(value='filter')]), body=[Assign(targets=[Name(id='cls', ctx=Store())], value=Call(func=Name(id='find_filter_class', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[BinOp(left=Constant(value='Help on the %s filter:'), op=Mod(), right=Name(id='name', ctx=Load()))], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Name(id='dedent', ctx=Load()), args=[Attribute(value=Name(id='cls', ctx=Load()), attr='__doc__', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])])]), Return(value=Constant(value=0))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='AttributeError', ctx=Load()), Name(id='ValueError', ctx=Load())], ctx=Load()), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[BinOp(left=Constant(value='%s not found!'), op=Mod(), right=Name(id='what', ctx=Load()))], keywords=[keyword(arg='file', value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()))])), Return(value=Constant(value=1))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='_print_list', args=arguments(posonlyargs=[], args=[arg(arg='what')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='what', ctx=Load()), ops=[Eq()], comparators=[Constant(value='lexer')]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='Lexers:')], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='~~~~~~~')], keywords=[])), Assign(targets=[Name(id='info', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='fullname', ctx=Store()), Name(id='names', ctx=Store()), Name(id='exts', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='get_all_lexers', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='tup', ctx=Store())], value=Tuple(elts=[BinOp(left=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Name(id='names', ctx=Load())], keywords=[]), op=Add(), right=Constant(value=':')), Name(id='fullname', ctx=Load()), BoolOp(op=Or(), values=[BoolOp(op=And(), values=[Name(id='exts', ctx=Load()), BinOp(left=BinOp(left=Constant(value='(filenames '), op=Add(), right=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Name(id='exts', ctx=Load())], keywords=[])), op=Add(), right=Constant(value=')'))]), Constant(value='')])], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='info', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='tup', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='info', ctx=Load()), attr='sort', ctx=Load()), args=[], keywords=[])), For(target=Name(id='i', ctx=Store()), iter=Name(id='info', ctx=Load()), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[BinOp(left=Constant(value='* %s\n    %s %s'), op=Mod(), right=Name(id='i', ctx=Load()))], keywords=[]))], orelse=[])], orelse=[If(test=Compare(left=Name(id='what', ctx=Load()), ops=[Eq()], comparators=[Constant(value='formatter')]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='Formatters:')], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='~~~~~~~~~~~')], keywords=[])), Assign(targets=[Name(id='info', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='cls', ctx=Store()), iter=Call(func=Name(id='get_all_formatters', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='doc', ctx=Store())], value=Call(func=Name(id='docstring_headline', ctx=Load()), args=[Name(id='cls', ctx=Load())], keywords=[])), Assign(targets=[Name(id='tup', ctx=Store())], value=Tuple(elts=[BinOp(left=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Attribute(value=Name(id='cls', ctx=Load()), attr='aliases', ctx=Load())], keywords=[]), op=Add(), right=Constant(value=':')), Name(id='doc', ctx=Load()), BoolOp(op=Or(), values=[BoolOp(op=And(), values=[Attribute(value=Name(id='cls', ctx=Load()), attr='filenames', ctx=Load()), BinOp(left=BinOp(left=Constant(value='(filenames '), op=Add(), right=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Attribute(value=Name(id='cls', ctx=Load()), attr='filenames', ctx=Load())], keywords=[])), op=Add(), right=Constant(value=')'))]), Constant(value='')])], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='info', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='tup', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='info', ctx=Load()), attr='sort', ctx=Load()), args=[], keywords=[])), For(target=Name(id='i', ctx=Store()), iter=Name(id='info', ctx=Load()), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[BinOp(left=Constant(value='* %s\n    %s %s'), op=Mod(), right=Name(id='i', ctx=Load()))], keywords=[]))], orelse=[])], orelse=[If(test=Compare(left=Name(id='what', ctx=Load()), ops=[Eq()], comparators=[Constant(value='filter')]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='Filters:')], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='~~~~~~~~')], keywords=[])), For(target=Name(id='name', ctx=Store()), iter=Call(func=Name(id='get_all_filters', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='cls', ctx=Store())], value=Call(func=Name(id='find_filter_class', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[BinOp(left=BinOp(left=Constant(value='* '), op=Add(), right=Name(id='name', ctx=Load())), op=Add(), right=Constant(value=':'))], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[BinOp(left=Constant(value='    %s'), op=Mod(), right=Call(func=Name(id='docstring_headline', ctx=Load()), args=[Name(id='cls', ctx=Load())], keywords=[]))], keywords=[]))], orelse=[])], orelse=[If(test=Compare(left=Name(id='what', ctx=Load()), ops=[Eq()], comparators=[Constant(value='style')]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='Styles:')], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='~~~~~~~')], keywords=[])), For(target=Name(id='name', ctx=Store()), iter=Call(func=Name(id='get_all_styles', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='cls', ctx=Store())], value=Call(func=Name(id='get_style_by_name', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[BinOp(left=BinOp(left=Constant(value='* '), op=Add(), right=Name(id='name', ctx=Load())), op=Add(), right=Constant(value=':'))], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[BinOp(left=Constant(value='    %s'), op=Mod(), right=Call(func=Name(id='docstring_headline', ctx=Load()), args=[Name(id='cls', ctx=Load())], keywords=[]))], keywords=[]))], orelse=[])], orelse=[])])])])], decorator_list=[]), FunctionDef(name='_print_list_as_json', args=arguments(posonlyargs=[], args=[arg(arg='requested_items')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Import(names=[alias(name='json')]), Assign(targets=[Name(id='result', ctx=Store())], value=Dict(keys=[], values=[])), If(test=Compare(left=Constant(value='lexer'), ops=[In()], comparators=[Name(id='requested_items', ctx=Load())]), body=[Assign(targets=[Name(id='info', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='fullname', ctx=Store()), Name(id='names', ctx=Store()), Name(id='filenames', ctx=Store()), Name(id='mimetypes', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='get_all_lexers', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='info', ctx=Load()), slice=Name(id='fullname', ctx=Load()), ctx=Store())], value=Dict(keys=[Constant(value='aliases'), Constant(value='filenames'), Constant(value='mimetypes')], values=[Name(id='names', ctx=Load()), Name(id='filenames', ctx=Load()), Name(id='mimetypes', ctx=Load())]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='lexers'), ctx=Store())], value=Name(id='info', ctx=Load()))], orelse=[]), If(test=Compare(left=Constant(value='formatter'), ops=[In()], comparators=[Name(id='requested_items', ctx=Load())]), body=[Assign(targets=[Name(id='info', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='cls', ctx=Store()), iter=Call(func=Name(id='get_all_formatters', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='doc', ctx=Store())], value=Call(func=Name(id='docstring_headline', ctx=Load()), args=[Name(id='cls', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='info', ctx=Load()), slice=Attribute(value=Name(id='cls', ctx=Load()), attr='name', ctx=Load()), ctx=Store())], value=Dict(keys=[Constant(value='aliases'), Constant(value='filenames'), Constant(value='doc')], values=[Attribute(value=Name(id='cls', ctx=Load()), attr='aliases', ctx=Load()), Attribute(value=Name(id='cls', ctx=Load()), attr='filenames', ctx=Load()), Name(id='doc', ctx=Load())]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='formatters'), ctx=Store())], value=Name(id='info', ctx=Load()))], orelse=[]), If(test=Compare(left=Constant(value='filter'), ops=[In()], comparators=[Name(id='requested_items', ctx=Load())]), body=[Assign(targets=[Name(id='info', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='name', ctx=Store()), iter=Call(func=Name(id='get_all_filters', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='cls', ctx=Store())], value=Call(func=Name(id='find_filter_class', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='info', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Dict(keys=[Constant(value='doc')], values=[Call(func=Name(id='docstring_headline', ctx=Load()), args=[Name(id='cls', ctx=Load())], keywords=[])]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='filters'), ctx=Store())], value=Name(id='info', ctx=Load()))], orelse=[]), If(test=Compare(left=Constant(value='style'), ops=[In()], comparators=[Name(id='requested_items', ctx=Load())]), body=[Assign(targets=[Name(id='info', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='name', ctx=Store()), iter=Call(func=Name(id='get_all_styles', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='cls', ctx=Store())], value=Call(func=Name(id='get_style_by_name', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='info', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Dict(keys=[Constant(value='doc')], values=[Call(func=Name(id='docstring_headline', ctx=Load()), args=[Name(id='cls', ctx=Load())], keywords=[])]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='styles'), ctx=Store())], value=Name(id='info', ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[Name(id='result', ctx=Load()), Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='main_inner', args=arguments(posonlyargs=[], args=[arg(arg='parser'), arg(arg='argns')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='argns', ctx=Load()), attr='help', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='print_help', ctx=Load()), args=[], keywords=[])), Return(value=Constant(value=0))], orelse=[]), If(test=Attribute(value=Name(id='argns', ctx=Load()), attr='V', ctx=Load()), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[BinOp(left=Constant(value='Pygments version %s, (c) 2006-2023 by Georg Brandl, Matthäus Chajdas and contributors.'), op=Mod(), right=Name(id='__version__', ctx=Load()))], keywords=[])), Return(value=Constant(value=0))], orelse=[]), FunctionDef(name='is_only_option', args=arguments(posonlyargs=[], args=[arg(arg='opt')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=UnaryOp(op=Not(), operand=Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=Name(id='v', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Call(func=Name(id='vars', ctx=Load()), args=[Name(id='argns', ctx=Load())], keywords=[]), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[Compare(left=Name(id='k', ctx=Load()), ops=[NotEq()], comparators=[Name(id='opt', ctx=Load())])], is_async=0)])], keywords=[])))], decorator_list=[]), If(test=Compare(left=Attribute(value=Name(id='argns', ctx=Load()), attr='L', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='arg_set', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Call(func=Name(id='vars', ctx=Load()), args=[Name(id='argns', ctx=Load())], keywords=[]), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Name(id='v', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='arg_set', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='k', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='arg_set', ctx=Load()), attr='discard', ctx=Load()), args=[Constant(value='L')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='arg_set', ctx=Load()), attr='discard', ctx=Load()), args=[Constant(value='json')], keywords=[])), If(test=Name(id='arg_set', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='print_help', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load())], keywords=[])), Return(value=Constant(value=2))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='argns', ctx=Load()), attr='json', ctx=Load())), body=[Expr(value=Call(func=Name(id='main', ctx=Load()), args=[List(elts=[Constant(value=''), Constant(value='-V')], ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='allowed_types', ctx=Store())], value=Set(elts=[Constant(value='lexer'), Constant(value='formatter'), Constant(value='filter'), Constant(value='style')])), Assign(targets=[Name(id='largs', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='arg', ctx=Load()), attr='rstrip', ctx=Load()), args=[Constant(value='s')], keywords=[]), generators=[comprehension(target=Name(id='arg', ctx=Store()), iter=Attribute(value=Name(id='argns', ctx=Load()), attr='L', ctx=Load()), ifs=[], is_async=0)])), If(test=Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=Compare(left=Name(id='arg', ctx=Load()), ops=[NotIn()], comparators=[Name(id='allowed_types', ctx=Load())]), generators=[comprehension(target=Name(id='arg', ctx=Store()), iter=Name(id='largs', ctx=Load()), ifs=[], is_async=0)])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='print_help', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load())], keywords=[])), Return(value=Constant(value=0))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='largs', ctx=Load())), body=[Assign(targets=[Name(id='largs', ctx=Store())], value=Name(id='allowed_types', ctx=Load()))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='argns', ctx=Load()), attr='json', ctx=Load())), body=[For(target=Name(id='arg', ctx=Store()), iter=Name(id='largs', ctx=Load()), body=[Expr(value=Call(func=Name(id='_print_list', ctx=Load()), args=[Name(id='arg', ctx=Load())], keywords=[]))], orelse=[])], orelse=[Expr(value=Call(func=Name(id='_print_list_as_json', ctx=Load()), args=[Name(id='largs', ctx=Load())], keywords=[]))]), Return(value=Constant(value=0))], orelse=[]), If(test=Attribute(value=Name(id='argns', ctx=Load()), attr='H', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='is_only_option', ctx=Load()), args=[Constant(value='H')], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='print_help', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load())], keywords=[])), Return(value=Constant(value=2))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='what', ctx=Store()), Name(id='name', ctx=Store())], ctx=Store())], value=Attribute(value=Name(id='argns', ctx=Load()), attr='H', ctx=Load())), If(test=Compare(left=Name(id='what', ctx=Load()), ops=[NotIn()], comparators=[Tuple(elts=[Constant(value='lexer'), Constant(value='formatter'), Constant(value='filter')], ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='print_help', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load())], keywords=[])), Return(value=Constant(value=2))], orelse=[]), Return(value=Call(func=Name(id='_print_help', ctx=Load()), args=[Name(id='what', ctx=Load()), Name(id='name', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='parsed_opts', ctx=Store())], value=Call(func=Name(id='_parse_options', ctx=Load()), args=[BoolOp(op=Or(), values=[Attribute(value=Name(id='argns', ctx=Load()), attr='O', ctx=Load()), List(elts=[], ctx=Load())])], keywords=[])), For(target=Name(id='p_opt', ctx=Store()), iter=BoolOp(op=Or(), values=[Attribute(value=Name(id='argns', ctx=Load()), attr='P', ctx=Load()), List(elts=[], ctx=Load())]), body=[Try(body=[Assign(targets=[Tuple(elts=[Name(id='name', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='p_opt', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='='), Constant(value=1)], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='parsed_opts', ctx=Load()), slice=Name(id='p_opt', ctx=Load()), ctx=Store())], value=Constant(value=True))])], orelse=[Assign(targets=[Subscript(value=Name(id='parsed_opts', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Name(id='value', ctx=Load()))], finalbody=[])], orelse=[]), Assign(targets=[Name(id='inencoding', ctx=Store())], value=Call(func=Attribute(value=Name(id='parsed_opts', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='inencoding'), Call(func=Attribute(value=Name(id='parsed_opts', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='encoding')], keywords=[])], keywords=[])), Assign(targets=[Name(id='outencoding', ctx=Store())], value=Call(func=Attribute(value=Name(id='parsed_opts', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='outencoding'), Call(func=Attribute(value=Name(id='parsed_opts', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='encoding')], keywords=[])], keywords=[])), If(test=Attribute(value=Name(id='argns', ctx=Load()), attr='N', ctx=Load()), body=[Assign(targets=[Name(id='lexer', ctx=Store())], value=Call(func=Name(id='find_lexer_class_for_filename', ctx=Load()), args=[Attribute(value=Name(id='argns', ctx=Load()), attr='N', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='lexer', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='lexer', ctx=Store())], value=Name(id='TextLexer', ctx=Load()))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='lexer', ctx=Load()), attr='aliases', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])), Return(value=Constant(value=0))], orelse=[]), If(test=Attribute(value=Name(id='argns', ctx=Load()), attr='C', ctx=Load()), body=[Assign(targets=[Name(id='inp', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stdin', ctx=Load()), attr='buffer', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[])), Try(body=[Assign(targets=[Name(id='lexer', ctx=Store())], value=Call(func=Name(id='guess_lexer', ctx=Load()), args=[Name(id='inp', ctx=Load())], keywords=[keyword(arg='inencoding', value=Name(id='inencoding', ctx=Load()))]))], handlers=[ExceptHandler(type=Name(id='ClassNotFound', ctx=Load()), body=[Assign(targets=[Name(id='lexer', ctx=Store())], value=Name(id='TextLexer', ctx=Load()))])], orelse=[], finalbody=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='lexer', ctx=Load()), attr='aliases', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])), Return(value=Constant(value=0))], orelse=[]), Assign(targets=[Name(id='S_opt', ctx=Store())], value=Attribute(value=Name(id='argns', ctx=Load()), attr='S', ctx=Load())), Assign(targets=[Name(id='a_opt', ctx=Store())], value=Attribute(value=Name(id='argns', ctx=Load()), attr='a', ctx=Load())), If(test=Compare(left=Name(id='S_opt', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='f_opt', ctx=Store())], value=Attribute(value=Name(id='argns', ctx=Load()), attr='f', ctx=Load())), If(test=UnaryOp(op=Not(), operand=Name(id='f_opt', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='print_help', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load())], keywords=[])), Return(value=Constant(value=2))], orelse=[]), If(test=BoolOp(op=Or(), values=[Attribute(value=Name(id='argns', ctx=Load()), attr='l', ctx=Load()), Attribute(value=Name(id='argns', ctx=Load()), attr='INPUTFILE', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='print_help', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load())], keywords=[])), Return(value=Constant(value=2))], orelse=[]), Try(body=[Assign(targets=[Subscript(value=Name(id='parsed_opts', ctx=Load()), slice=Constant(value='style'), ctx=Store())], value=Name(id='S_opt', ctx=Load())), Assign(targets=[Name(id='fmter', ctx=Store())], value=Call(func=Name(id='get_formatter_by_name', ctx=Load()), args=[Name(id='f_opt', ctx=Load())], keywords=[keyword(value=Name(id='parsed_opts', ctx=Load()))]))], handlers=[ExceptHandler(type=Name(id='ClassNotFound', ctx=Load()), name='err', body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='err', ctx=Load())], keywords=[keyword(arg='file', value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()))])), Return(value=Constant(value=1))])], orelse=[], finalbody=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Attribute(value=Name(id='fmter', ctx=Load()), attr='get_style_defs', ctx=Load()), args=[BoolOp(op=Or(), values=[Name(id='a_opt', ctx=Load()), Constant(value='')])], keywords=[])], keywords=[])), Return(value=Constant(value=0))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='argns', ctx=Load()), attr='a', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='print_help', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load())], keywords=[])), Return(value=Constant(value=2))], orelse=[]), Assign(targets=[Name(id='F_opts', ctx=Store())], value=Call(func=Name(id='_parse_filters', ctx=Load()), args=[BoolOp(op=Or(), values=[Attribute(value=Name(id='argns', ctx=Load()), attr='F', ctx=Load()), List(elts=[], ctx=Load())])], keywords=[])), Assign(targets=[Name(id='allow_custom_lexer_formatter', ctx=Store())], value=Call(func=Name(id='bool', ctx=Load()), args=[Attribute(value=Name(id='argns', ctx=Load()), attr='x', ctx=Load())], keywords=[])), Assign(targets=[Name(id='lexer', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='lexername', ctx=Store())], value=Attribute(value=Name(id='argns', ctx=Load()), attr='l', ctx=Load())), If(test=Name(id='lexername', ctx=Load()), body=[If(test=BoolOp(op=And(), values=[Name(id='allow_custom_lexer_formatter', ctx=Load()), Compare(left=Constant(value='.py'), ops=[In()], comparators=[Name(id='lexername', ctx=Load())])]), body=[Try(body=[Assign(targets=[Name(id='filename', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='name', ctx=Store())], value=Constant(value=None)), If(test=Compare(left=Constant(value=':'), ops=[In()], comparators=[Name(id='lexername', ctx=Load())]), body=[Assign(targets=[Tuple(elts=[Name(id='filename', ctx=Store()), Name(id='name', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='lexername', ctx=Load()), attr='rsplit', ctx=Load()), args=[Constant(value=':'), Constant(value=1)], keywords=[])), If(test=Compare(left=Constant(value='.py'), ops=[In()], comparators=[Name(id='name', ctx=Load())]), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Constant(value=None))], orelse=[])], orelse=[]), If(test=BoolOp(op=And(), values=[Name(id='filename', ctx=Load()), Name(id='name', ctx=Load())]), body=[Assign(targets=[Name(id='lexer', ctx=Store())], value=Call(func=Name(id='load_lexer_from_file', ctx=Load()), args=[Name(id='filename', ctx=Load()), Name(id='name', ctx=Load())], keywords=[keyword(value=Name(id='parsed_opts', ctx=Load()))]))], orelse=[Assign(targets=[Name(id='lexer', ctx=Store())], value=Call(func=Name(id='load_lexer_from_file', ctx=Load()), args=[Name(id='lexername', ctx=Load())], keywords=[keyword(value=Name(id='parsed_opts', ctx=Load()))]))])], handlers=[ExceptHandler(type=Name(id='ClassNotFound', ctx=Load()), name='err', body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='Error:'), Name(id='err', ctx=Load())], keywords=[keyword(arg='file', value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()))])), Return(value=Constant(value=1))])], orelse=[], finalbody=[])], orelse=[Try(body=[Assign(targets=[Name(id='lexer', ctx=Store())], value=Call(func=Name(id='get_lexer_by_name', ctx=Load()), args=[Name(id='lexername', ctx=Load())], keywords=[keyword(value=Name(id='parsed_opts', ctx=Load()))]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='OptionError', ctx=Load()), Name(id='ClassNotFound', ctx=Load())], ctx=Load()), name='err', body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='Error:'), Name(id='err', ctx=Load())], keywords=[keyword(arg='file', value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()))])), Return(value=Constant(value=1))])], orelse=[], finalbody=[])])], orelse=[]), Assign(targets=[Name(id='code', ctx=Store())], value=Constant(value=None)), If(test=Attribute(value=Name(id='argns', ctx=Load()), attr='INPUTFILE', ctx=Load()), body=[If(test=Attribute(value=Name(id='argns', ctx=Load()), attr='s', ctx=Load()), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='Error: -s option not usable when input file specified')], keywords=[keyword(arg='file', value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()))])), Return(value=Constant(value=2))], orelse=[]), Assign(targets=[Name(id='infn', ctx=Store())], value=Attribute(value=Name(id='argns', ctx=Load()), attr='INPUTFILE', ctx=Load())), Try(body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='infn', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='infp', ctx=Store()))], body=[Assign(targets=[Name(id='code', ctx=Store())], value=Call(func=Attribute(value=Name(id='infp', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]))])], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='err', body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='Error: cannot read infile:'), Name(id='err', ctx=Load())], keywords=[keyword(arg='file', value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()))])), Return(value=Constant(value=1))])], orelse=[], finalbody=[]), If(test=UnaryOp(op=Not(), operand=Name(id='inencoding', ctx=Load())), body=[Assign(targets=[Tuple(elts=[Name(id='code', ctx=Store()), Name(id='inencoding', ctx=Store())], ctx=Store())], value=Call(func=Name(id='guess_decode', ctx=Load()), args=[Name(id='code', ctx=Load())], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='lexer', ctx=Load())), body=[Try(body=[Assign(targets=[Name(id='lexer', ctx=Store())], value=Call(func=Name(id='get_lexer_for_filename', ctx=Load()), args=[Name(id='infn', ctx=Load()), Name(id='code', ctx=Load())], keywords=[keyword(value=Name(id='parsed_opts', ctx=Load()))]))], handlers=[ExceptHandler(type=Name(id='ClassNotFound', ctx=Load()), name='err', body=[If(test=Attribute(value=Name(id='argns', ctx=Load()), attr='g', ctx=Load()), body=[Try(body=[Assign(targets=[Name(id='lexer', ctx=Store())], value=Call(func=Name(id='guess_lexer', ctx=Load()), args=[Name(id='code', ctx=Load())], keywords=[keyword(value=Name(id='parsed_opts', ctx=Load()))]))], handlers=[ExceptHandler(type=Name(id='ClassNotFound', ctx=Load()), body=[Assign(targets=[Name(id='lexer', ctx=Store())], value=Call(func=Name(id='TextLexer', ctx=Load()), args=[], keywords=[keyword(value=Name(id='parsed_opts', ctx=Load()))]))])], orelse=[], finalbody=[])], orelse=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='Error:'), Name(id='err', ctx=Load())], keywords=[keyword(arg='file', value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()))])), Return(value=Constant(value=1))])]), ExceptHandler(type=Name(id='OptionError', ctx=Load()), name='err', body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='Error:'), Name(id='err', ctx=Load())], keywords=[keyword(arg='file', value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()))])), Return(value=Constant(value=1))])], orelse=[], finalbody=[])], orelse=[])], orelse=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='argns', ctx=Load()), attr='s', ctx=Load())), body=[Assign(targets=[Name(id='code', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stdin', ctx=Load()), attr='buffer', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='inencoding', ctx=Load())), body=[Assign(targets=[Tuple(elts=[Name(id='code', ctx=Store()), Name(id='inencoding', ctx=Store())], ctx=Store())], value=Call(func=Name(id='guess_decode_from_terminal', ctx=Load()), args=[Name(id='code', ctx=Load()), Attribute(value=Name(id='sys', ctx=Load()), attr='stdin', ctx=Load())], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='lexer', ctx=Load())), body=[Try(body=[Assign(targets=[Name(id='lexer', ctx=Store())], value=Call(func=Name(id='guess_lexer', ctx=Load()), args=[Name(id='code', ctx=Load())], keywords=[keyword(value=Name(id='parsed_opts', ctx=Load()))]))], handlers=[ExceptHandler(type=Name(id='ClassNotFound', ctx=Load()), body=[Assign(targets=[Name(id='lexer', ctx=Store())], value=Call(func=Name(id='TextLexer', ctx=Load()), args=[], keywords=[keyword(value=Name(id='parsed_opts', ctx=Load()))]))])], orelse=[], finalbody=[])], orelse=[])], orelse=[If(test=UnaryOp(op=Not(), operand=Name(id='lexer', ctx=Load())), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='Error: when using -s a lexer has to be selected with -l')], keywords=[keyword(arg='file', value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()))])), Return(value=Constant(value=2))], orelse=[])])]), For(target=Tuple(elts=[Name(id='fname', ctx=Store()), Name(id='fopts', ctx=Store())], ctx=Store()), iter=Name(id='F_opts', ctx=Load()), body=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='lexer', ctx=Load()), attr='add_filter', ctx=Load()), args=[Name(id='fname', ctx=Load())], keywords=[keyword(value=Name(id='fopts', ctx=Load()))]))], handlers=[ExceptHandler(type=Name(id='ClassNotFound', ctx=Load()), name='err', body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='Error:'), Name(id='err', ctx=Load())], keywords=[keyword(arg='file', value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()))])), Return(value=Constant(value=1))])], orelse=[], finalbody=[])], orelse=[]), Assign(targets=[Name(id='outfn', ctx=Store())], value=Attribute(value=Name(id='argns', ctx=Load()), attr='o', ctx=Load())), Assign(targets=[Name(id='fmter', ctx=Store())], value=Attribute(value=Name(id='argns', ctx=Load()), attr='f', ctx=Load())), If(test=Name(id='fmter', ctx=Load()), body=[If(test=BoolOp(op=And(), values=[Name(id='allow_custom_lexer_formatter', ctx=Load()), Compare(left=Constant(value='.py'), ops=[In()], comparators=[Name(id='fmter', ctx=Load())])]), body=[Try(body=[Assign(targets=[Name(id='filename', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='name', ctx=Store())], value=Constant(value=None)), If(test=Compare(left=Constant(value=':'), ops=[In()], comparators=[Name(id='fmter', ctx=Load())]), body=[Assign(targets=[Tuple(elts=[Name(id='filename', ctx=Store()), Name(id='name', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='fmter', ctx=Load()), attr='rsplit', ctx=Load()), args=[Constant(value=':'), Constant(value=1)], keywords=[])), If(test=Compare(left=Constant(value='.py'), ops=[In()], comparators=[Name(id='name', ctx=Load())]), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Constant(value=None))], orelse=[])], orelse=[]), If(test=BoolOp(op=And(), values=[Name(id='filename', ctx=Load()), Name(id='name', ctx=Load())]), body=[Assign(targets=[Name(id='fmter', ctx=Store())], value=Call(func=Name(id='load_formatter_from_file', ctx=Load()), args=[Name(id='filename', ctx=Load()), Name(id='name', ctx=Load())], keywords=[keyword(value=Name(id='parsed_opts', ctx=Load()))]))], orelse=[Assign(targets=[Name(id='fmter', ctx=Store())], value=Call(func=Name(id='load_formatter_from_file', ctx=Load()), args=[Name(id='fmter', ctx=Load())], keywords=[keyword(value=Name(id='parsed_opts', ctx=Load()))]))])], handlers=[ExceptHandler(type=Name(id='ClassNotFound', ctx=Load()), name='err', body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='Error:'), Name(id='err', ctx=Load())], keywords=[keyword(arg='file', value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()))])), Return(value=Constant(value=1))])], orelse=[], finalbody=[])], orelse=[Try(body=[Assign(targets=[Name(id='fmter', ctx=Store())], value=Call(func=Name(id='get_formatter_by_name', ctx=Load()), args=[Name(id='fmter', ctx=Load())], keywords=[keyword(value=Name(id='parsed_opts', ctx=Load()))]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='OptionError', ctx=Load()), Name(id='ClassNotFound', ctx=Load())], ctx=Load()), name='err', body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='Error:'), Name(id='err', ctx=Load())], keywords=[keyword(arg='file', value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()))])), Return(value=Constant(value=1))])], orelse=[], finalbody=[])])], orelse=[]), If(test=Name(id='outfn', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Name(id='fmter', ctx=Load())), body=[Try(body=[Assign(targets=[Name(id='fmter', ctx=Store())], value=Call(func=Name(id='get_formatter_for_filename', ctx=Load()), args=[Name(id='outfn', ctx=Load())], keywords=[keyword(value=Name(id='parsed_opts', ctx=Load()))]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='OptionError', ctx=Load()), Name(id='ClassNotFound', ctx=Load())], ctx=Load()), name='err', body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='Error:'), Name(id='err', ctx=Load())], keywords=[keyword(arg='file', value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()))])), Return(value=Constant(value=1))])], orelse=[], finalbody=[])], orelse=[]), Try(body=[Assign(targets=[Name(id='outfile', ctx=Store())], value=Call(func=Name(id='open', ctx=Load()), args=[Name(id='outfn', ctx=Load()), Constant(value='wb')], keywords=[]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='err', body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='Error: cannot open outfile:'), Name(id='err', ctx=Load())], keywords=[keyword(arg='file', value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()))])), Return(value=Constant(value=1))])], orelse=[], finalbody=[])], orelse=[If(test=UnaryOp(op=Not(), operand=Name(id='fmter', ctx=Load())), body=[If(test=Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='COLORTERM'), Constant(value='')], keywords=[]), ops=[In()], comparators=[Tuple(elts=[Constant(value='truecolor'), Constant(value='24bit')], ctx=Load())]), body=[Assign(targets=[Name(id='fmter', ctx=Store())], value=Call(func=Name(id='TerminalTrueColorFormatter', ctx=Load()), args=[], keywords=[keyword(value=Name(id='parsed_opts', ctx=Load()))]))], orelse=[If(test=Compare(left=Constant(value='256'), ops=[In()], comparators=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='TERM'), Constant(value='')], keywords=[])]), body=[Assign(targets=[Name(id='fmter', ctx=Store())], value=Call(func=Name(id='Terminal256Formatter', ctx=Load()), args=[], keywords=[keyword(value=Name(id='parsed_opts', ctx=Load()))]))], orelse=[Assign(targets=[Name(id='fmter', ctx=Store())], value=Call(func=Name(id='TerminalFormatter', ctx=Load()), args=[], keywords=[keyword(value=Name(id='parsed_opts', ctx=Load()))]))])])], orelse=[]), Assign(targets=[Name(id='outfile', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load()), attr='buffer', ctx=Load()))]), If(test=UnaryOp(op=Not(), operand=Name(id='outencoding', ctx=Load())), body=[If(test=Name(id='outfn', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='fmter', ctx=Load()), attr='encoding', ctx=Store())], value=Name(id='inencoding', ctx=Load()))], orelse=[Assign(targets=[Attribute(value=Name(id='fmter', ctx=Load()), attr='encoding', ctx=Store())], value=Call(func=Name(id='terminal_encoding', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load())], keywords=[]))])], orelse=[]), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Name(id='outfn', ctx=Load())), Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='win32'), Constant(value='cygwin')], ctx=Load())]), Compare(left=Attribute(value=Name(id='fmter', ctx=Load()), attr='name', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='Terminal'), Constant(value='Terminal256')], ctx=Load())])]), body=[Assign(targets=[Name(id='outfile', ctx=Store())], value=Call(func=Name(id='UnclosingTextIOWrapper', ctx=Load()), args=[Name(id='outfile', ctx=Load())], keywords=[keyword(arg='encoding', value=Attribute(value=Name(id='fmter', ctx=Load()), attr='encoding', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='fmter', ctx=Load()), attr='encoding', ctx=Store())], value=Constant(value=None)), Try(body=[Import(names=[alias(name='pip._vendor.colorama.initialise', asname='colorama_initialise')])], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Pass()])], orelse=[Assign(targets=[Name(id='outfile', ctx=Store())], value=Call(func=Attribute(value=Name(id='colorama_initialise', ctx=Load()), attr='wrap_stream', ctx=Load()), args=[Name(id='outfile', ctx=Load())], keywords=[keyword(arg='convert', value=Constant(value=None)), keyword(arg='strip', value=Constant(value=None)), keyword(arg='autoreset', value=Constant(value=False)), keyword(arg='wrap', value=Constant(value=True))]))], finalbody=[])], orelse=[]), Assign(targets=[Name(id='escapeinside', ctx=Store())], value=Call(func=Attribute(value=Name(id='parsed_opts', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='escapeinside'), Constant(value='')], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='escapeinside', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=2)]), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='fmter', ctx=Load()), Name(id='LatexFormatter', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='left', ctx=Store())], value=Subscript(value=Name(id='escapeinside', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='right', ctx=Store())], value=Subscript(value=Name(id='escapeinside', ctx=Load()), slice=Constant(value=1), ctx=Load())), Assign(targets=[Name(id='lexer', ctx=Store())], value=Call(func=Name(id='LatexEmbeddedLexer', ctx=Load()), args=[Name(id='left', ctx=Load()), Name(id='right', ctx=Load()), Name(id='lexer', ctx=Load())], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='argns', ctx=Load()), attr='s', ctx=Load())), body=[Try(body=[Expr(value=Call(func=Name(id='highlight', ctx=Load()), args=[Name(id='code', ctx=Load()), Name(id='lexer', ctx=Load()), Name(id='fmter', ctx=Load()), Name(id='outfile', ctx=Load())], keywords=[]))], handlers=[], orelse=[], finalbody=[If(test=Name(id='outfn', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='outfile', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))], orelse=[])]), Return(value=Constant(value=0))], orelse=[Try(body=[While(test=Constant(value=1), body=[Assign(targets=[Name(id='line', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stdin', ctx=Load()), attr='buffer', ctx=Load()), attr='readline', ctx=Load()), args=[], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='line', ctx=Load())), body=[Break()], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='inencoding', ctx=Load())), body=[Assign(targets=[Name(id='line', ctx=Store())], value=Subscript(value=Call(func=Name(id='guess_decode_from_terminal', ctx=Load()), args=[Name(id='line', ctx=Load()), Attribute(value=Name(id='sys', ctx=Load()), attr='stdin', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load()))], orelse=[]), Expr(value=Call(func=Name(id='highlight', ctx=Load()), args=[Name(id='line', ctx=Load()), Name(id='lexer', ctx=Load()), Name(id='fmter', ctx=Load()), Name(id='outfile', ctx=Load())], keywords=[])), If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='outfile', ctx=Load()), Constant(value='flush')], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='outfile', ctx=Load()), attr='flush', ctx=Load()), args=[], keywords=[]))], orelse=[])], orelse=[]), Return(value=Constant(value=0))], handlers=[ExceptHandler(type=Name(id='KeyboardInterrupt', ctx=Load()), body=[Return(value=Constant(value=0))])], orelse=[], finalbody=[If(test=Name(id='outfn', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='outfile', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))], orelse=[])])])], decorator_list=[]), ClassDef(name='HelpFormatter', bases=[Attribute(value=Name(id='argparse', ctx=Load()), attr='HelpFormatter', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='prog'), arg(arg='indent_increment'), arg(arg='max_help_position'), arg(arg='width')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=2), Constant(value=16), Constant(value=None)]), body=[If(test=Compare(left=Name(id='width', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Try(body=[Assign(targets=[Name(id='width', ctx=Store())], value=BinOp(left=Attribute(value=Call(func=Attribute(value=Name(id='shutil', ctx=Load()), attr='get_terminal_size', ctx=Load()), args=[], keywords=[]), attr='columns', ctx=Load()), op=Sub(), right=Constant(value=2)))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='argparse', ctx=Load()), attr='HelpFormatter', ctx=Load()), attr='__init__', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='prog', ctx=Load()), Name(id='indent_increment', ctx=Load()), Name(id='max_help_position', ctx=Load()), Name(id='width', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), FunctionDef(name='main', args=arguments(posonlyargs=[], args=[arg(arg='args')], kwonlyargs=[], kw_defaults=[], defaults=[Attribute(value=Name(id='sys', ctx=Load()), attr='argv', ctx=Load())]), body=[Expr(value=Constant(value='\n    Main command line entry point.\n    ')), Assign(targets=[Name(id='desc', ctx=Store())], value=Constant(value='Highlight an input file and write the result to an output file.')), Assign(targets=[Name(id='parser', ctx=Store())], value=Call(func=Attribute(value=Name(id='argparse', ctx=Load()), attr='ArgumentParser', ctx=Load()), args=[], keywords=[keyword(arg='description', value=Name(id='desc', ctx=Load())), keyword(arg='add_help', value=Constant(value=False)), keyword(arg='formatter_class', value=Name(id='HelpFormatter', ctx=Load()))])), Assign(targets=[Name(id='operation', ctx=Store())], value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='add_argument_group', ctx=Load()), args=[Constant(value='Main operation')], keywords=[])), Assign(targets=[Name(id='lexersel', ctx=Store())], value=Call(func=Attribute(value=Name(id='operation', ctx=Load()), attr='add_mutually_exclusive_group', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='lexersel', ctx=Load()), attr='add_argument', ctx=Load()), args=[Constant(value='-l')], keywords=[keyword(arg='metavar', value=Constant(value='LEXER')), keyword(arg='help', value=Constant(value='Specify the lexer to use.  (Query names with -L.)  If not given and -g is not present, the lexer is guessed from the filename.'))])), Expr(value=Call(func=Attribute(value=Name(id='lexersel', ctx=Load()), attr='add_argument', ctx=Load()), args=[Constant(value='-g')], keywords=[keyword(arg='action', value=Constant(value='store_true')), keyword(arg='help', value=Constant(value='Guess the lexer from the file contents, or pass through as plain text if nothing can be guessed.'))])), Expr(value=Call(func=Attribute(value=Name(id='operation', ctx=Load()), attr='add_argument', ctx=Load()), args=[Constant(value='-F')], keywords=[keyword(arg='metavar', value=Constant(value='FILTER[:options]')), keyword(arg='action', value=Constant(value='append')), keyword(arg='help', value=Constant(value='Add a filter to the token stream.  (Query names with -L.) Filter options are given after a colon if necessary.'))])), Expr(value=Call(func=Attribute(value=Name(id='operation', ctx=Load()), attr='add_argument', ctx=Load()), args=[Constant(value='-f')], keywords=[keyword(arg='metavar', value=Constant(value='FORMATTER')), keyword(arg='help', value=Constant(value='Specify the formatter to use.  (Query names with -L.) If not given, the formatter is guessed from the output filename, and defaults to the terminal formatter if the output is to the terminal or an unknown file extension.'))])), Expr(value=Call(func=Attribute(value=Name(id='operation', ctx=Load()), attr='add_argument', ctx=Load()), args=[Constant(value='-O')], keywords=[keyword(arg='metavar', value=Constant(value='OPTION=value[,OPTION=value,...]')), keyword(arg='action', value=Constant(value='append')), keyword(arg='help', value=Constant(value='Give options to the lexer and formatter as a comma-separated list of key-value pairs. Example: `-O bg=light,python=cool`.'))])), Expr(value=Call(func=Attribute(value=Name(id='operation', ctx=Load()), attr='add_argument', ctx=Load()), args=[Constant(value='-P')], keywords=[keyword(arg='metavar', value=Constant(value='OPTION=value')), keyword(arg='action', value=Constant(value='append')), keyword(arg='help', value=Constant(value='Give a single option to the lexer and formatter - with this you can pass options whose value contains commas and equal signs. Example: `-P "heading=Pygments, the Python highlighter"`.'))])), Expr(value=Call(func=Attribute(value=Name(id='operation', ctx=Load()), attr='add_argument', ctx=Load()), args=[Constant(value='-o')], keywords=[keyword(arg='metavar', value=Constant(value='OUTPUTFILE')), keyword(arg='help', value=Constant(value='Where to write the output.  Defaults to standard output.'))])), Expr(value=Call(func=Attribute(value=Name(id='operation', ctx=Load()), attr='add_argument', ctx=Load()), args=[Constant(value='INPUTFILE')], keywords=[keyword(arg='nargs', value=Constant(value='?')), keyword(arg='help', value=Constant(value='Where to read the input.  Defaults to standard input.'))])), Assign(targets=[Name(id='flags', ctx=Store())], value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='add_argument_group', ctx=Load()), args=[Constant(value='Operation flags')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='flags', ctx=Load()), attr='add_argument', ctx=Load()), args=[Constant(value='-v')], keywords=[keyword(arg='action', value=Constant(value='store_true')), keyword(arg='help', value=Constant(value='Print a detailed traceback on unhandled exceptions, which is useful for debugging and bug reports.'))])), Expr(value=Call(func=Attribute(value=Name(id='flags', ctx=Load()), attr='add_argument', ctx=Load()), args=[Constant(value='-s')], keywords=[keyword(arg='action', value=Constant(value='store_true')), keyword(arg='help', value=Constant(value='Process lines one at a time until EOF, rather than waiting to process the entire file.  This only works for stdin, only for lexers with no line-spanning constructs, and is intended for streaming input such as you get from `tail -f`. Example usage: `tail -f sql.log | pygmentize -s -l sql`.'))])), Expr(value=Call(func=Attribute(value=Name(id='flags', ctx=Load()), attr='add_argument', ctx=Load()), args=[Constant(value='-x')], keywords=[keyword(arg='action', value=Constant(value='store_true')), keyword(arg='help', value=Constant(value='Allow custom lexers and formatters to be loaded from a .py file relative to the current working directory. For example, `-l ./customlexer.py -x`. By default, this option expects a file with a class named CustomLexer or CustomFormatter; you can also specify your own class name with a colon (`-l ./lexer.py:MyLexer`). Users should be very careful not to use this option with untrusted files, because it will import and run them.'))])), Expr(value=Call(func=Attribute(value=Name(id='flags', ctx=Load()), attr='add_argument', ctx=Load()), args=[Constant(value='--json')], keywords=[keyword(arg='help', value=Constant(value='Output as JSON. This can be only used in conjunction with -L.')), keyword(arg='default', value=Constant(value=False)), keyword(arg='action', value=Constant(value='store_true'))])), Assign(targets=[Name(id='special_modes_group', ctx=Store())], value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='add_argument_group', ctx=Load()), args=[Constant(value='Special modes - do not do any highlighting')], keywords=[])), Assign(targets=[Name(id='special_modes', ctx=Store())], value=Call(func=Attribute(value=Name(id='special_modes_group', ctx=Load()), attr='add_mutually_exclusive_group', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='special_modes', ctx=Load()), attr='add_argument', ctx=Load()), args=[Constant(value='-S')], keywords=[keyword(arg='metavar', value=Constant(value='STYLE -f formatter')), keyword(arg='help', value=Constant(value='Print style definitions for STYLE for a formatter given with -f. The argument given by -a is formatter dependent.'))])), Expr(value=Call(func=Attribute(value=Name(id='special_modes', ctx=Load()), attr='add_argument', ctx=Load()), args=[Constant(value='-L')], keywords=[keyword(arg='nargs', value=Constant(value='*')), keyword(arg='metavar', value=Constant(value='WHAT')), keyword(arg='help', value=Constant(value='List lexers, formatters, styles or filters -- give additional arguments for the thing(s) you want to list (e.g. "styles"), or omit them to list everything.'))])), Expr(value=Call(func=Attribute(value=Name(id='special_modes', ctx=Load()), attr='add_argument', ctx=Load()), args=[Constant(value='-N')], keywords=[keyword(arg='metavar', value=Constant(value='FILENAME')), keyword(arg='help', value=Constant(value='Guess and print out a lexer name based solely on the given filename. Does not take input or highlight anything. If no specific lexer can be determined, "text" is printed.'))])), Expr(value=Call(func=Attribute(value=Name(id='special_modes', ctx=Load()), attr='add_argument', ctx=Load()), args=[Constant(value='-C')], keywords=[keyword(arg='action', value=Constant(value='store_true')), keyword(arg='help', value=Constant(value='Like -N, but print out a lexer name based solely on a given content from standard input.'))])), Expr(value=Call(func=Attribute(value=Name(id='special_modes', ctx=Load()), attr='add_argument', ctx=Load()), args=[Constant(value='-H')], keywords=[keyword(arg='action', value=Constant(value='store')), keyword(arg='nargs', value=Constant(value=2)), keyword(arg='metavar', value=Tuple(elts=[Constant(value='NAME'), Constant(value='TYPE')], ctx=Load())), keyword(arg='help', value=Constant(value='Print detailed help for the object <name> of type <type>, where <type> is one of "lexer", "formatter" or "filter".'))])), Expr(value=Call(func=Attribute(value=Name(id='special_modes', ctx=Load()), attr='add_argument', ctx=Load()), args=[Constant(value='-V')], keywords=[keyword(arg='action', value=Constant(value='store_true')), keyword(arg='help', value=Constant(value='Print the package version.'))])), Expr(value=Call(func=Attribute(value=Name(id='special_modes', ctx=Load()), attr='add_argument', ctx=Load()), args=[Constant(value='-h'), Constant(value='--help')], keywords=[keyword(arg='action', value=Constant(value='store_true')), keyword(arg='help', value=Constant(value='Print this help.'))])), Expr(value=Call(func=Attribute(value=Name(id='special_modes_group', ctx=Load()), attr='add_argument', ctx=Load()), args=[Constant(value='-a')], keywords=[keyword(arg='metavar', value=Constant(value='ARG')), keyword(arg='help', value=Constant(value='Formatter-specific additional argument for the -S (print style sheet) mode.'))])), Assign(targets=[Name(id='argns', ctx=Store())], value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='parse_args', ctx=Load()), args=[Subscript(value=Name(id='args', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])), Try(body=[Return(value=Call(func=Name(id='main_inner', ctx=Load()), args=[Name(id='parser', ctx=Load()), Name(id='argns', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='BrokenPipeError', ctx=Load()), body=[Return(value=Constant(value=0))]), ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[If(test=Attribute(value=Name(id='argns', ctx=Load()), attr='v', ctx=Load()), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[], keywords=[keyword(arg='file', value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()))])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[BinOp(left=Constant(value='*'), op=Mult(), right=Constant(value=65))], keywords=[keyword(arg='file', value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()))])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='An unhandled exception occurred while highlighting.')], keywords=[keyword(arg='file', value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()))])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='Please report the whole traceback to the issue tracker at')], keywords=[keyword(arg='file', value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()))])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='<https://github.com/pygments/pygments/issues>.')], keywords=[keyword(arg='file', value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()))])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[BinOp(left=Constant(value='*'), op=Mult(), right=Constant(value=65))], keywords=[keyword(arg='file', value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()))])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[], keywords=[keyword(arg='file', value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()))])), Raise()], orelse=[]), Import(names=[alias(name='traceback')]), Assign(targets=[Name(id='info', ctx=Store())], value=Call(func=Attribute(value=Name(id='traceback', ctx=Load()), attr='format_exception', ctx=Load()), args=[Starred(value=Call(func=Attribute(value=Name(id='sys', ctx=Load()), attr='exc_info', ctx=Load()), args=[], keywords=[]), ctx=Load())], keywords=[])), Assign(targets=[Name(id='msg', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='info', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='info', ctx=Load())], keywords=[]), ops=[GtE()], comparators=[Constant(value=3)]), body=[AugAssign(target=Name(id='msg', ctx=Store()), op=Add(), value=BinOp(left=Constant(value='\n   (f%s)'), op=Mod(), right=Subscript(value=Call(func=Attribute(value=Subscript(value=Call(func=Attribute(value=Subscript(value=Name(id='info', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=2)), ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='\n')], keywords=[]), slice=Constant(value=0), ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]), slice=Slice(lower=Constant(value=1)), ctx=Load())))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[], keywords=[keyword(arg='file', value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()))])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='*** Error while highlighting:')], keywords=[keyword(arg='file', value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()))])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[keyword(arg='file', value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()))])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='*** If this is a bug you want to report, please rerun with -v.')], keywords=[keyword(arg='file', value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()))])), Return(value=Constant(value=1))])], orelse=[], finalbody=[])], decorator_list=[])], type_ignores=[])