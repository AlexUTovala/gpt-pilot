Module(body=[Expr(value=Constant(value='\n    pygments.formatters.terminal\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n    Formatter for terminal output with ANSI sequences.\n\n    :copyright: Copyright 2006-2023 by the Pygments team, see AUTHORS.\n    :license: BSD, see LICENSE for details.\n')), ImportFrom(module='pip._vendor.pygments.formatter', names=[alias(name='Formatter')], level=0), ImportFrom(module='pip._vendor.pygments.token', names=[alias(name='Keyword'), alias(name='Name'), alias(name='Comment'), alias(name='String'), alias(name='Error'), alias(name='Number'), alias(name='Operator'), alias(name='Generic'), alias(name='Token'), alias(name='Whitespace')], level=0), ImportFrom(module='pip._vendor.pygments.console', names=[alias(name='ansiformat')], level=0), ImportFrom(module='pip._vendor.pygments.util', names=[alias(name='get_choice_opt')], level=0), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='TerminalFormatter')], ctx=Load())), Assign(targets=[Name(id='TERMINAL_COLORS', ctx=Store())], value=Dict(keys=[Name(id='Token', ctx=Load()), Name(id='Whitespace', ctx=Load()), Name(id='Comment', ctx=Load()), Attribute(value=Name(id='Comment', ctx=Load()), attr='Preproc', ctx=Load()), Name(id='Keyword', ctx=Load()), Attribute(value=Name(id='Keyword', ctx=Load()), attr='Type', ctx=Load()), Attribute(value=Name(id='Operator', ctx=Load()), attr='Word', ctx=Load()), Attribute(value=Name(id='Name', ctx=Load()), attr='Builtin', ctx=Load()), Attribute(value=Name(id='Name', ctx=Load()), attr='Function', ctx=Load()), Attribute(value=Name(id='Name', ctx=Load()), attr='Namespace', ctx=Load()), Attribute(value=Name(id='Name', ctx=Load()), attr='Class', ctx=Load()), Attribute(value=Name(id='Name', ctx=Load()), attr='Exception', ctx=Load()), Attribute(value=Name(id='Name', ctx=Load()), attr='Decorator', ctx=Load()), Attribute(value=Name(id='Name', ctx=Load()), attr='Variable', ctx=Load()), Attribute(value=Name(id='Name', ctx=Load()), attr='Constant', ctx=Load()), Attribute(value=Name(id='Name', ctx=Load()), attr='Attribute', ctx=Load()), Attribute(value=Name(id='Name', ctx=Load()), attr='Tag', ctx=Load()), Name(id='String', ctx=Load()), Name(id='Number', ctx=Load()), Attribute(value=Name(id='Generic', ctx=Load()), attr='Deleted', ctx=Load()), Attribute(value=Name(id='Generic', ctx=Load()), attr='Inserted', ctx=Load()), Attribute(value=Name(id='Generic', ctx=Load()), attr='Heading', ctx=Load()), Attribute(value=Name(id='Generic', ctx=Load()), attr='Subheading', ctx=Load()), Attribute(value=Name(id='Generic', ctx=Load()), attr='Prompt', ctx=Load()), Attribute(value=Name(id='Generic', ctx=Load()), attr='Error', ctx=Load()), Name(id='Error', ctx=Load())], values=[Tuple(elts=[Constant(value=''), Constant(value='')], ctx=Load()), Tuple(elts=[Constant(value='gray'), Constant(value='brightblack')], ctx=Load()), Tuple(elts=[Constant(value='gray'), Constant(value='brightblack')], ctx=Load()), Tuple(elts=[Constant(value='cyan'), Constant(value='brightcyan')], ctx=Load()), Tuple(elts=[Constant(value='blue'), Constant(value='brightblue')], ctx=Load()), Tuple(elts=[Constant(value='cyan'), Constant(value='brightcyan')], ctx=Load()), Tuple(elts=[Constant(value='magenta'), Constant(value='brightmagenta')], ctx=Load()), Tuple(elts=[Constant(value='cyan'), Constant(value='brightcyan')], ctx=Load()), Tuple(elts=[Constant(value='green'), Constant(value='brightgreen')], ctx=Load()), Tuple(elts=[Constant(value='_cyan_'), Constant(value='_brightcyan_')], ctx=Load()), Tuple(elts=[Constant(value='_green_'), Constant(value='_brightgreen_')], ctx=Load()), Tuple(elts=[Constant(value='cyan'), Constant(value='brightcyan')], ctx=Load()), Tuple(elts=[Constant(value='brightblack'), Constant(value='gray')], ctx=Load()), Tuple(elts=[Constant(value='red'), Constant(value='brightred')], ctx=Load()), Tuple(elts=[Constant(value='red'), Constant(value='brightred')], ctx=Load()), Tuple(elts=[Constant(value='cyan'), Constant(value='brightcyan')], ctx=Load()), Tuple(elts=[Constant(value='brightblue'), Constant(value='brightblue')], ctx=Load()), Tuple(elts=[Constant(value='yellow'), Constant(value='yellow')], ctx=Load()), Tuple(elts=[Constant(value='blue'), Constant(value='brightblue')], ctx=Load()), Tuple(elts=[Constant(value='brightred'), Constant(value='brightred')], ctx=Load()), Tuple(elts=[Constant(value='green'), Constant(value='brightgreen')], ctx=Load()), Tuple(elts=[Constant(value='**'), Constant(value='**')], ctx=Load()), Tuple(elts=[Constant(value='*magenta*'), Constant(value='*brightmagenta*')], ctx=Load()), Tuple(elts=[Constant(value='**'), Constant(value='**')], ctx=Load()), Tuple(elts=[Constant(value='brightred'), Constant(value='brightred')], ctx=Load()), Tuple(elts=[Constant(value='_brightred_'), Constant(value='_brightred_')], ctx=Load())])), ClassDef(name='TerminalFormatter', bases=[Name(id='Formatter', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Format tokens with ANSI color sequences, for output in a text console.\n    Color sequences are terminated at newlines, so that paging the output\n    works correctly.\n\n    The `get_style_defs()` method doesn\'t do anything special since there is\n    no support for common styles.\n\n    Options accepted:\n\n    `bg`\n        Set to ``"light"`` or ``"dark"`` depending on the terminal\'s background\n        (default: ``"light"``).\n\n    `colorscheme`\n        A dictionary mapping token types to (lightbg, darkbg) color names or\n        ``None`` (default: ``None`` = use builtin colorscheme).\n\n    `linenos`\n        Set to ``True`` to have line numbers on the terminal output as well\n        (default: ``False`` = no line numbers).\n    ')), Assign(targets=[Name(id='name', ctx=Store())], value=Constant(value='Terminal')), Assign(targets=[Name(id='aliases', ctx=Store())], value=List(elts=[Constant(value='terminal'), Constant(value='console')], ctx=Load())), Assign(targets=[Name(id='filenames', ctx=Store())], value=List(elts=[], ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='options'), defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='Formatter', ctx=Load()), attr='__init__', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[keyword(value=Name(id='options', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='darkbg', ctx=Store())], value=Compare(left=Call(func=Name(id='get_choice_opt', ctx=Load()), args=[Name(id='options', ctx=Load()), Constant(value='bg'), List(elts=[Constant(value='light'), Constant(value='dark')], ctx=Load()), Constant(value='light')], keywords=[]), ops=[Eq()], comparators=[Constant(value='dark')])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='colorscheme', ctx=Store())], value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='colorscheme'), Constant(value=None)], keywords=[]), Name(id='TERMINAL_COLORS', ctx=Load())])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='linenos', ctx=Store())], value=Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='linenos'), Constant(value=False)], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_lineno', ctx=Store())], value=Constant(value=0))], decorator_list=[]), FunctionDef(name='format', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='tokensource'), arg(arg='outfile')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='Formatter', ctx=Load()), attr='format', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='tokensource', ctx=Load()), Name(id='outfile', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_write_lineno', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='outfile')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_lineno', ctx=Store()), op=Add(), value=Constant(value=1)), Expr(value=Call(func=Attribute(value=Name(id='outfile', ctx=Load()), attr='write', ctx=Load()), args=[BinOp(left=Constant(value='%s%04d: '), op=Mod(), right=Tuple(elts=[BoolOp(op=Or(), values=[BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_lineno', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=1)]), Constant(value='\n')]), Constant(value='')]), Attribute(value=Name(id='self', ctx=Load()), attr='_lineno', ctx=Load())], ctx=Load()))], keywords=[]))], decorator_list=[]), FunctionDef(name='_get_color', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ttype')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='colors', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='colorscheme', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='ttype', ctx=Load())], keywords=[])), While(test=Compare(left=Name(id='colors', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='ttype', ctx=Store())], value=Attribute(value=Name(id='ttype', ctx=Load()), attr='parent', ctx=Load())), Assign(targets=[Name(id='colors', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='colorscheme', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='ttype', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Subscript(value=Name(id='colors', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='darkbg', ctx=Load()), ctx=Load()))], decorator_list=[]), FunctionDef(name='format_unencoded', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='tokensource'), arg(arg='outfile')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='linenos', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_write_lineno', ctx=Load()), args=[Name(id='outfile', ctx=Load())], keywords=[]))], orelse=[]), For(target=Tuple(elts=[Name(id='ttype', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Name(id='tokensource', ctx=Load()), body=[Assign(targets=[Name(id='color', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_color', ctx=Load()), args=[Name(id='ttype', ctx=Load())], keywords=[])), For(target=Name(id='line', ctx=Store()), iter=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='splitlines', ctx=Load()), args=[Constant(value=True)], keywords=[]), body=[If(test=Name(id='color', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='outfile', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Name(id='ansiformat', ctx=Load()), args=[Name(id='color', ctx=Load()), Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='rstrip', ctx=Load()), args=[Constant(value='\n')], keywords=[])], keywords=[])], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='outfile', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='rstrip', ctx=Load()), args=[Constant(value='\n')], keywords=[])], keywords=[]))]), If(test=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='\n')], keywords=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='linenos', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_write_lineno', ctx=Load()), args=[Name(id='outfile', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='outfile', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value='\n')], keywords=[]))])], orelse=[])], orelse=[])], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='linenos', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='outfile', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value='\n')], keywords=[]))], orelse=[])], decorator_list=[])], decorator_list=[])], type_ignores=[])