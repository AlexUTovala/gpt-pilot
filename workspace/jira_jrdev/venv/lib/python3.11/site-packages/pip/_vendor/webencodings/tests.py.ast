Module(body=[Expr(value=Constant(value='\n\n    webencodings.tests\n    ~~~~~~~~~~~~~~~~~~\n\n    A basic test suite for Encoding.\n\n    :copyright: Copyright 2012 by Simon Sapin\n    :license: BSD, see LICENSE for details.\n\n')), ImportFrom(module='__future__', names=[alias(name='unicode_literals')], level=0), ImportFrom(names=[alias(name='lookup'), alias(name='LABELS'), alias(name='decode'), alias(name='encode'), alias(name='iter_decode'), alias(name='iter_encode'), alias(name='IncrementalDecoder'), alias(name='IncrementalEncoder'), alias(name='UTF8')], level=1), FunctionDef(name='assert_raises', args=arguments(posonlyargs=[], args=[arg(arg='exception'), arg(arg='function')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Try(body=[Expr(value=Call(func=Name(id='function', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], handlers=[ExceptHandler(type=Name(id='exception', ctx=Load()), body=[Return()])], orelse=[Raise(exc=Call(func=Name(id='AssertionError', ctx=Load()), args=[BinOp(left=Constant(value='Did not raise %s.'), op=Mod(), right=Name(id='exception', ctx=Load()))], keywords=[]))], finalbody=[])], decorator_list=[]), FunctionDef(name='test_labels', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Compare(left=Attribute(value=Call(func=Name(id='lookup', ctx=Load()), args=[Constant(value='utf-8')], keywords=[]), attr='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='utf-8')])), Assert(test=Compare(left=Attribute(value=Call(func=Name(id='lookup', ctx=Load()), args=[Constant(value='Utf-8')], keywords=[]), attr='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='utf-8')])), Assert(test=Compare(left=Attribute(value=Call(func=Name(id='lookup', ctx=Load()), args=[Constant(value='UTF-8')], keywords=[]), attr='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='utf-8')])), Assert(test=Compare(left=Attribute(value=Call(func=Name(id='lookup', ctx=Load()), args=[Constant(value='utf8')], keywords=[]), attr='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='utf-8')])), Assert(test=Compare(left=Attribute(value=Call(func=Name(id='lookup', ctx=Load()), args=[Constant(value='utf8')], keywords=[]), attr='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='utf-8')])), Assert(test=Compare(left=Attribute(value=Call(func=Name(id='lookup', ctx=Load()), args=[Constant(value='utf8 ')], keywords=[]), attr='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='utf-8')])), Assert(test=Compare(left=Attribute(value=Call(func=Name(id='lookup', ctx=Load()), args=[Constant(value=' \r\nutf8\t')], keywords=[]), attr='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='utf-8')])), Assert(test=Compare(left=Call(func=Name(id='lookup', ctx=Load()), args=[Constant(value='u8')], keywords=[]), ops=[Is()], comparators=[Constant(value=None)])), Assert(test=Compare(left=Call(func=Name(id='lookup', ctx=Load()), args=[Constant(value='utf-8\xa0')], keywords=[]), ops=[Is()], comparators=[Constant(value=None)])), Assert(test=Compare(left=Attribute(value=Call(func=Name(id='lookup', ctx=Load()), args=[Constant(value='US-ASCII')], keywords=[]), attr='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='windows-1252')])), Assert(test=Compare(left=Attribute(value=Call(func=Name(id='lookup', ctx=Load()), args=[Constant(value='iso-8859-1')], keywords=[]), attr='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='windows-1252')])), Assert(test=Compare(left=Attribute(value=Call(func=Name(id='lookup', ctx=Load()), args=[Constant(value='latin1')], keywords=[]), attr='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='windows-1252')])), Assert(test=Compare(left=Attribute(value=Call(func=Name(id='lookup', ctx=Load()), args=[Constant(value='LATIN1')], keywords=[]), attr='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='windows-1252')])), Assert(test=Compare(left=Call(func=Name(id='lookup', ctx=Load()), args=[Constant(value='latin-1')], keywords=[]), ops=[Is()], comparators=[Constant(value=None)])), Assert(test=Compare(left=Call(func=Name(id='lookup', ctx=Load()), args=[Constant(value='LATİN1')], keywords=[]), ops=[Is()], comparators=[Constant(value=None)]))], decorator_list=[]), FunctionDef(name='test_all_labels', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='label', ctx=Store()), iter=Name(id='LABELS', ctx=Load()), body=[Assert(test=Compare(left=Call(func=Name(id='decode', ctx=Load()), args=[Constant(value=b''), Name(id='label', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Tuple(elts=[Constant(value=''), Call(func=Name(id='lookup', ctx=Load()), args=[Name(id='label', ctx=Load())], keywords=[])], ctx=Load())])), Assert(test=Compare(left=Call(func=Name(id='encode', ctx=Load()), args=[Constant(value=''), Name(id='label', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=b'')])), For(target=Name(id='repeat', ctx=Store()), iter=List(elts=[Constant(value=0), Constant(value=1), Constant(value=12)], ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='output', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Name(id='iter_decode', ctx=Load()), args=[BinOp(left=List(elts=[Constant(value=b'')], ctx=Load()), op=Mult(), right=Name(id='repeat', ctx=Load())), Name(id='label', ctx=Load())], keywords=[])), Assert(test=Compare(left=Call(func=Name(id='list', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[List(elts=[], ctx=Load())])), Assert(test=Compare(left=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='iter_encode', ctx=Load()), args=[BinOp(left=List(elts=[Constant(value='')], ctx=Load()), op=Mult(), right=Name(id='repeat', ctx=Load())), Name(id='label', ctx=Load())], keywords=[])], keywords=[]), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]))], orelse=[]), Assign(targets=[Name(id='decoder', ctx=Store())], value=Call(func=Name(id='IncrementalDecoder', ctx=Load()), args=[Name(id='label', ctx=Load())], keywords=[])), Assert(test=Compare(left=Call(func=Attribute(value=Name(id='decoder', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value=b'')], keywords=[]), ops=[Eq()], comparators=[Constant(value='')])), Assert(test=Compare(left=Call(func=Attribute(value=Name(id='decoder', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value=b'')], keywords=[keyword(arg='final', value=Constant(value=True))]), ops=[Eq()], comparators=[Constant(value='')])), Assign(targets=[Name(id='encoder', ctx=Store())], value=Call(func=Name(id='IncrementalEncoder', ctx=Load()), args=[Name(id='label', ctx=Load())], keywords=[])), Assert(test=Compare(left=Call(func=Attribute(value=Name(id='encoder', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='')], keywords=[]), ops=[Eq()], comparators=[Constant(value=b'')])), Assert(test=Compare(left=Call(func=Attribute(value=Name(id='encoder', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='')], keywords=[keyword(arg='final', value=Constant(value=True))]), ops=[Eq()], comparators=[Constant(value=b'')]))], orelse=[]), For(target=Name(id='name', ctx=Store()), iter=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Name(id='LABELS', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Assert(test=Compare(left=Attribute(value=Call(func=Name(id='lookup', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]), attr='name', ctx=Load()), ops=[Eq()], comparators=[Name(id='name', ctx=Load())]))], orelse=[])], decorator_list=[]), FunctionDef(name='test_invalid_label', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='assert_raises', ctx=Load()), args=[Name(id='LookupError', ctx=Load()), Name(id='decode', ctx=Load()), Constant(value=b'\xef\xbb\xbf\xc3\xa9'), Constant(value='invalid')], keywords=[])), Expr(value=Call(func=Name(id='assert_raises', ctx=Load()), args=[Name(id='LookupError', ctx=Load()), Name(id='encode', ctx=Load()), Constant(value='é'), Constant(value='invalid')], keywords=[])), Expr(value=Call(func=Name(id='assert_raises', ctx=Load()), args=[Name(id='LookupError', ctx=Load()), Name(id='iter_decode', ctx=Load()), List(elts=[], ctx=Load()), Constant(value='invalid')], keywords=[])), Expr(value=Call(func=Name(id='assert_raises', ctx=Load()), args=[Name(id='LookupError', ctx=Load()), Name(id='iter_encode', ctx=Load()), List(elts=[], ctx=Load()), Constant(value='invalid')], keywords=[])), Expr(value=Call(func=Name(id='assert_raises', ctx=Load()), args=[Name(id='LookupError', ctx=Load()), Name(id='IncrementalDecoder', ctx=Load()), Constant(value='invalid')], keywords=[])), Expr(value=Call(func=Name(id='assert_raises', ctx=Load()), args=[Name(id='LookupError', ctx=Load()), Name(id='IncrementalEncoder', ctx=Load()), Constant(value='invalid')], keywords=[]))], decorator_list=[]), FunctionDef(name='test_decode', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Compare(left=Call(func=Name(id='decode', ctx=Load()), args=[Constant(value=b'\x80'), Constant(value='latin1')], keywords=[]), ops=[Eq()], comparators=[Tuple(elts=[Constant(value='€'), Call(func=Name(id='lookup', ctx=Load()), args=[Constant(value='latin1')], keywords=[])], ctx=Load())])), Assert(test=Compare(left=Call(func=Name(id='decode', ctx=Load()), args=[Constant(value=b'\x80'), Call(func=Name(id='lookup', ctx=Load()), args=[Constant(value='latin1')], keywords=[])], keywords=[]), ops=[Eq()], comparators=[Tuple(elts=[Constant(value='€'), Call(func=Name(id='lookup', ctx=Load()), args=[Constant(value='latin1')], keywords=[])], ctx=Load())])), Assert(test=Compare(left=Call(func=Name(id='decode', ctx=Load()), args=[Constant(value=b'\xc3\xa9'), Constant(value='utf8')], keywords=[]), ops=[Eq()], comparators=[Tuple(elts=[Constant(value='é'), Call(func=Name(id='lookup', ctx=Load()), args=[Constant(value='utf8')], keywords=[])], ctx=Load())])), Assert(test=Compare(left=Call(func=Name(id='decode', ctx=Load()), args=[Constant(value=b'\xc3\xa9'), Name(id='UTF8', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Tuple(elts=[Constant(value='é'), Call(func=Name(id='lookup', ctx=Load()), args=[Constant(value='utf8')], keywords=[])], ctx=Load())])), Assert(test=Compare(left=Call(func=Name(id='decode', ctx=Load()), args=[Constant(value=b'\xc3\xa9'), Constant(value='ascii')], keywords=[]), ops=[Eq()], comparators=[Tuple(elts=[Constant(value='Ã©'), Call(func=Name(id='lookup', ctx=Load()), args=[Constant(value='ascii')], keywords=[])], ctx=Load())])), Assert(test=Compare(left=Call(func=Name(id='decode', ctx=Load()), args=[Constant(value=b'\xef\xbb\xbf\xc3\xa9'), Constant(value='ascii')], keywords=[]), ops=[Eq()], comparators=[Tuple(elts=[Constant(value='é'), Call(func=Name(id='lookup', ctx=Load()), args=[Constant(value='utf8')], keywords=[])], ctx=Load())])), Assert(test=Compare(left=Call(func=Name(id='decode', ctx=Load()), args=[Constant(value=b'\xfe\xff\x00\xe9'), Constant(value='ascii')], keywords=[]), ops=[Eq()], comparators=[Tuple(elts=[Constant(value='é'), Call(func=Name(id='lookup', ctx=Load()), args=[Constant(value='utf-16be')], keywords=[])], ctx=Load())])), Assert(test=Compare(left=Call(func=Name(id='decode', ctx=Load()), args=[Constant(value=b'\xff\xfe\xe9\x00'), Constant(value='ascii')], keywords=[]), ops=[Eq()], comparators=[Tuple(elts=[Constant(value='é'), Call(func=Name(id='lookup', ctx=Load()), args=[Constant(value='utf-16le')], keywords=[])], ctx=Load())])), Assert(test=Compare(left=Call(func=Name(id='decode', ctx=Load()), args=[Constant(value=b'\xfe\xff\xe9\x00'), Constant(value='ascii')], keywords=[]), ops=[Eq()], comparators=[Tuple(elts=[Constant(value='\ue900'), Call(func=Name(id='lookup', ctx=Load()), args=[Constant(value='utf-16be')], keywords=[])], ctx=Load())])), Assert(test=Compare(left=Call(func=Name(id='decode', ctx=Load()), args=[Constant(value=b'\xff\xfe\x00\xe9'), Constant(value='ascii')], keywords=[]), ops=[Eq()], comparators=[Tuple(elts=[Constant(value='\ue900'), Call(func=Name(id='lookup', ctx=Load()), args=[Constant(value='utf-16le')], keywords=[])], ctx=Load())])), Assert(test=Compare(left=Call(func=Name(id='decode', ctx=Load()), args=[Constant(value=b'\x00\xe9'), Constant(value='UTF-16BE')], keywords=[]), ops=[Eq()], comparators=[Tuple(elts=[Constant(value='é'), Call(func=Name(id='lookup', ctx=Load()), args=[Constant(value='utf-16be')], keywords=[])], ctx=Load())])), Assert(test=Compare(left=Call(func=Name(id='decode', ctx=Load()), args=[Constant(value=b'\xe9\x00'), Constant(value='UTF-16LE')], keywords=[]), ops=[Eq()], comparators=[Tuple(elts=[Constant(value='é'), Call(func=Name(id='lookup', ctx=Load()), args=[Constant(value='utf-16le')], keywords=[])], ctx=Load())])), Assert(test=Compare(left=Call(func=Name(id='decode', ctx=Load()), args=[Constant(value=b'\xe9\x00'), Constant(value='UTF-16')], keywords=[]), ops=[Eq()], comparators=[Tuple(elts=[Constant(value='é'), Call(func=Name(id='lookup', ctx=Load()), args=[Constant(value='utf-16le')], keywords=[])], ctx=Load())])), Assert(test=Compare(left=Call(func=Name(id='decode', ctx=Load()), args=[Constant(value=b'\xe9\x00'), Constant(value='UTF-16BE')], keywords=[]), ops=[Eq()], comparators=[Tuple(elts=[Constant(value='\ue900'), Call(func=Name(id='lookup', ctx=Load()), args=[Constant(value='utf-16be')], keywords=[])], ctx=Load())])), Assert(test=Compare(left=Call(func=Name(id='decode', ctx=Load()), args=[Constant(value=b'\x00\xe9'), Constant(value='UTF-16LE')], keywords=[]), ops=[Eq()], comparators=[Tuple(elts=[Constant(value='\ue900'), Call(func=Name(id='lookup', ctx=Load()), args=[Constant(value='utf-16le')], keywords=[])], ctx=Load())])), Assert(test=Compare(left=Call(func=Name(id='decode', ctx=Load()), args=[Constant(value=b'\x00\xe9'), Constant(value='UTF-16')], keywords=[]), ops=[Eq()], comparators=[Tuple(elts=[Constant(value='\ue900'), Call(func=Name(id='lookup', ctx=Load()), args=[Constant(value='utf-16le')], keywords=[])], ctx=Load())]))], decorator_list=[]), FunctionDef(name='test_encode', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Compare(left=Call(func=Name(id='encode', ctx=Load()), args=[Constant(value='é'), Constant(value='latin1')], keywords=[]), ops=[Eq()], comparators=[Constant(value=b'\xe9')])), Assert(test=Compare(left=Call(func=Name(id='encode', ctx=Load()), args=[Constant(value='é'), Constant(value='utf8')], keywords=[]), ops=[Eq()], comparators=[Constant(value=b'\xc3\xa9')])), Assert(test=Compare(left=Call(func=Name(id='encode', ctx=Load()), args=[Constant(value='é'), Constant(value='utf8')], keywords=[]), ops=[Eq()], comparators=[Constant(value=b'\xc3\xa9')])), Assert(test=Compare(left=Call(func=Name(id='encode', ctx=Load()), args=[Constant(value='é'), Constant(value='utf-16')], keywords=[]), ops=[Eq()], comparators=[Constant(value=b'\xe9\x00')])), Assert(test=Compare(left=Call(func=Name(id='encode', ctx=Load()), args=[Constant(value='é'), Constant(value='utf-16le')], keywords=[]), ops=[Eq()], comparators=[Constant(value=b'\xe9\x00')])), Assert(test=Compare(left=Call(func=Name(id='encode', ctx=Load()), args=[Constant(value='é'), Constant(value='utf-16be')], keywords=[]), ops=[Eq()], comparators=[Constant(value=b'\x00\xe9')]))], decorator_list=[]), FunctionDef(name='test_iter_decode', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='iter_decode_to_string', args=arguments(posonlyargs=[], args=[arg(arg='input'), arg(arg='fallback_encoding')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='output', ctx=Store()), Name(id='_encoding', ctx=Store())], ctx=Store())], value=Call(func=Name(id='iter_decode', ctx=Load()), args=[Name(id='input', ctx=Load()), Name(id='fallback_encoding', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]))], decorator_list=[]), Assert(test=Compare(left=Call(func=Name(id='iter_decode_to_string', ctx=Load()), args=[List(elts=[], ctx=Load()), Constant(value='latin1')], keywords=[]), ops=[Eq()], comparators=[Constant(value='')])), Assert(test=Compare(left=Call(func=Name(id='iter_decode_to_string', ctx=Load()), args=[List(elts=[Constant(value=b'')], ctx=Load()), Constant(value='latin1')], keywords=[]), ops=[Eq()], comparators=[Constant(value='')])), Assert(test=Compare(left=Call(func=Name(id='iter_decode_to_string', ctx=Load()), args=[List(elts=[Constant(value=b'\xe9')], ctx=Load()), Constant(value='latin1')], keywords=[]), ops=[Eq()], comparators=[Constant(value='é')])), Assert(test=Compare(left=Call(func=Name(id='iter_decode_to_string', ctx=Load()), args=[List(elts=[Constant(value=b'hello')], ctx=Load()), Constant(value='latin1')], keywords=[]), ops=[Eq()], comparators=[Constant(value='hello')])), Assert(test=Compare(left=Call(func=Name(id='iter_decode_to_string', ctx=Load()), args=[List(elts=[Constant(value=b'he'), Constant(value=b'llo')], ctx=Load()), Constant(value='latin1')], keywords=[]), ops=[Eq()], comparators=[Constant(value='hello')])), Assert(test=Compare(left=Call(func=Name(id='iter_decode_to_string', ctx=Load()), args=[List(elts=[Constant(value=b'hell'), Constant(value=b'o')], ctx=Load()), Constant(value='latin1')], keywords=[]), ops=[Eq()], comparators=[Constant(value='hello')])), Assert(test=Compare(left=Call(func=Name(id='iter_decode_to_string', ctx=Load()), args=[List(elts=[Constant(value=b'\xc3\xa9')], ctx=Load()), Constant(value='latin1')], keywords=[]), ops=[Eq()], comparators=[Constant(value='Ã©')])), Assert(test=Compare(left=Call(func=Name(id='iter_decode_to_string', ctx=Load()), args=[List(elts=[Constant(value=b'\xef\xbb\xbf\xc3\xa9')], ctx=Load()), Constant(value='latin1')], keywords=[]), ops=[Eq()], comparators=[Constant(value='é')])), Assert(test=Compare(left=Call(func=Name(id='iter_decode_to_string', ctx=Load()), args=[List(elts=[Constant(value=b'\xef\xbb\xbf'), Constant(value=b'\xc3'), Constant(value=b'\xa9')], ctx=Load()), Constant(value='latin1')], keywords=[]), ops=[Eq()], comparators=[Constant(value='é')])), Assert(test=Compare(left=Call(func=Name(id='iter_decode_to_string', ctx=Load()), args=[List(elts=[Constant(value=b'\xef\xbb\xbf'), Constant(value=b'a'), Constant(value=b'\xc3')], ctx=Load()), Constant(value='latin1')], keywords=[]), ops=[Eq()], comparators=[Constant(value='a�')])), Assert(test=Compare(left=Call(func=Name(id='iter_decode_to_string', ctx=Load()), args=[List(elts=[Constant(value=b''), Constant(value=b'\xef'), Constant(value=b''), Constant(value=b''), Constant(value=b'\xbb\xbf\xc3'), Constant(value=b'\xa9')], ctx=Load()), Constant(value='latin1')], keywords=[]), ops=[Eq()], comparators=[Constant(value='é')])), Assert(test=Compare(left=Call(func=Name(id='iter_decode_to_string', ctx=Load()), args=[List(elts=[Constant(value=b'\xef\xbb\xbf')], ctx=Load()), Constant(value='latin1')], keywords=[]), ops=[Eq()], comparators=[Constant(value='')])), Assert(test=Compare(left=Call(func=Name(id='iter_decode_to_string', ctx=Load()), args=[List(elts=[Constant(value=b'\xef\xbb')], ctx=Load()), Constant(value='latin1')], keywords=[]), ops=[Eq()], comparators=[Constant(value='ï»')])), Assert(test=Compare(left=Call(func=Name(id='iter_decode_to_string', ctx=Load()), args=[List(elts=[Constant(value=b'\xfe\xff\x00\xe9')], ctx=Load()), Constant(value='latin1')], keywords=[]), ops=[Eq()], comparators=[Constant(value='é')])), Assert(test=Compare(left=Call(func=Name(id='iter_decode_to_string', ctx=Load()), args=[List(elts=[Constant(value=b'\xff\xfe\xe9\x00')], ctx=Load()), Constant(value='latin1')], keywords=[]), ops=[Eq()], comparators=[Constant(value='é')])), Assert(test=Compare(left=Call(func=Name(id='iter_decode_to_string', ctx=Load()), args=[List(elts=[Constant(value=b''), Constant(value=b'\xff'), Constant(value=b''), Constant(value=b''), Constant(value=b'\xfe\xe9'), Constant(value=b'\x00')], ctx=Load()), Constant(value='latin1')], keywords=[]), ops=[Eq()], comparators=[Constant(value='é')])), Assert(test=Compare(left=Call(func=Name(id='iter_decode_to_string', ctx=Load()), args=[List(elts=[Constant(value=b''), Constant(value=b'h\xe9'), Constant(value=b'llo')], ctx=Load()), Constant(value='x-user-defined')], keywords=[]), ops=[Eq()], comparators=[Constant(value='h\uf7e9llo')]))], decorator_list=[]), FunctionDef(name='test_iter_encode', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Compare(left=Call(func=Attribute(value=Constant(value=b''), attr='join', ctx=Load()), args=[Call(func=Name(id='iter_encode', ctx=Load()), args=[List(elts=[], ctx=Load()), Constant(value='latin1')], keywords=[])], keywords=[]), ops=[Eq()], comparators=[Constant(value=b'')])), Assert(test=Compare(left=Call(func=Attribute(value=Constant(value=b''), attr='join', ctx=Load()), args=[Call(func=Name(id='iter_encode', ctx=Load()), args=[List(elts=[Constant(value='')], ctx=Load()), Constant(value='latin1')], keywords=[])], keywords=[]), ops=[Eq()], comparators=[Constant(value=b'')])), Assert(test=Compare(left=Call(func=Attribute(value=Constant(value=b''), attr='join', ctx=Load()), args=[Call(func=Name(id='iter_encode', ctx=Load()), args=[List(elts=[Constant(value='é')], ctx=Load()), Constant(value='latin1')], keywords=[])], keywords=[]), ops=[Eq()], comparators=[Constant(value=b'\xe9')])), Assert(test=Compare(left=Call(func=Attribute(value=Constant(value=b''), attr='join', ctx=Load()), args=[Call(func=Name(id='iter_encode', ctx=Load()), args=[List(elts=[Constant(value=''), Constant(value='é'), Constant(value=''), Constant(value='')], ctx=Load()), Constant(value='latin1')], keywords=[])], keywords=[]), ops=[Eq()], comparators=[Constant(value=b'\xe9')])), Assert(test=Compare(left=Call(func=Attribute(value=Constant(value=b''), attr='join', ctx=Load()), args=[Call(func=Name(id='iter_encode', ctx=Load()), args=[List(elts=[Constant(value=''), Constant(value='é'), Constant(value=''), Constant(value='')], ctx=Load()), Constant(value='utf-16')], keywords=[])], keywords=[]), ops=[Eq()], comparators=[Constant(value=b'\xe9\x00')])), Assert(test=Compare(left=Call(func=Attribute(value=Constant(value=b''), attr='join', ctx=Load()), args=[Call(func=Name(id='iter_encode', ctx=Load()), args=[List(elts=[Constant(value=''), Constant(value='é'), Constant(value=''), Constant(value='')], ctx=Load()), Constant(value='utf-16le')], keywords=[])], keywords=[]), ops=[Eq()], comparators=[Constant(value=b'\xe9\x00')])), Assert(test=Compare(left=Call(func=Attribute(value=Constant(value=b''), attr='join', ctx=Load()), args=[Call(func=Name(id='iter_encode', ctx=Load()), args=[List(elts=[Constant(value=''), Constant(value='é'), Constant(value=''), Constant(value='')], ctx=Load()), Constant(value='utf-16be')], keywords=[])], keywords=[]), ops=[Eq()], comparators=[Constant(value=b'\x00\xe9')])), Assert(test=Compare(left=Call(func=Attribute(value=Constant(value=b''), attr='join', ctx=Load()), args=[Call(func=Name(id='iter_encode', ctx=Load()), args=[List(elts=[Constant(value=''), Constant(value='h\uf7e9'), Constant(value=''), Constant(value='llo')], ctx=Load()), Constant(value='x-user-defined')], keywords=[])], keywords=[]), ops=[Eq()], comparators=[Constant(value=b'h\xe9llo')]))], decorator_list=[]), FunctionDef(name='test_x_user_defined', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='encoded', ctx=Store())], value=Constant(value=b'2,\x0c\x0b\x1aO\xd9#\xcb\x0f\xc9\xbbt\xcf\xa8\xca')), Assign(targets=[Name(id='decoded', ctx=Store())], value=Constant(value='2,\x0c\x0b\x1aO\uf7d9#\uf7cb\x0f\uf7c9\uf7bbt\uf7cf\uf7a8\uf7ca')), Assign(targets=[Name(id='encoded', ctx=Store())], value=Constant(value=b'aa')), Assign(targets=[Name(id='decoded', ctx=Store())], value=Constant(value='aa')), Assert(test=Compare(left=Call(func=Name(id='decode', ctx=Load()), args=[Name(id='encoded', ctx=Load()), Constant(value='x-user-defined')], keywords=[]), ops=[Eq()], comparators=[Tuple(elts=[Name(id='decoded', ctx=Load()), Call(func=Name(id='lookup', ctx=Load()), args=[Constant(value='x-user-defined')], keywords=[])], ctx=Load())])), Assert(test=Compare(left=Call(func=Name(id='encode', ctx=Load()), args=[Name(id='decoded', ctx=Load()), Constant(value='x-user-defined')], keywords=[]), ops=[Eq()], comparators=[Name(id='encoded', ctx=Load())]))], decorator_list=[])], type_ignores=[])