Module(body=[ImportFrom(module='exceptions', names=[alias(name='*')], level=1), ImportFrom(module='ext', names=[alias(name='ExtType'), alias(name='Timestamp')], level=1), Import(names=[alias(name='os')]), Import(names=[alias(name='sys')]), Assign(targets=[Name(id='version', ctx=Store())], value=Tuple(elts=[Constant(value=1), Constant(value=0), Constant(value=5)], ctx=Load())), Assign(targets=[Name(id='__version__', ctx=Store())], value=Constant(value='1.0.5')), If(test=BoolOp(op=Or(), values=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='MSGPACK_PUREPYTHON')], keywords=[]), Compare(left=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Constant(value=2)])]), body=[ImportFrom(module='fallback', names=[alias(name='Packer'), alias(name='unpackb'), alias(name='Unpacker')], level=1)], orelse=[Try(body=[ImportFrom(module='_cmsgpack', names=[alias(name='Packer'), alias(name='unpackb'), alias(name='Unpacker')], level=1)], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[ImportFrom(module='fallback', names=[alias(name='Packer'), alias(name='unpackb'), alias(name='Unpacker')], level=1)])], orelse=[], finalbody=[])]), FunctionDef(name='pack', args=arguments(posonlyargs=[], args=[arg(arg='o'), arg(arg='stream')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Constant(value='\n    Pack object `o` and write it to `stream`\n\n    See :class:`Packer` for options.\n    ')), Assign(targets=[Name(id='packer', ctx=Store())], value=Call(func=Name(id='Packer', ctx=Load()), args=[], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='stream', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Attribute(value=Name(id='packer', ctx=Load()), attr='pack', ctx=Load()), args=[Name(id='o', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='packb', args=arguments(posonlyargs=[], args=[arg(arg='o')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Constant(value='\n    Pack object `o` and return packed bytes\n\n    See :class:`Packer` for options.\n    ')), Return(value=Call(func=Attribute(value=Call(func=Name(id='Packer', ctx=Load()), args=[], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]), attr='pack', ctx=Load()), args=[Name(id='o', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='unpack', args=arguments(posonlyargs=[], args=[arg(arg='stream')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Constant(value='\n    Unpack an object from `stream`.\n\n    Raises `ExtraData` when `stream` contains extra bytes.\n    See :class:`Unpacker` for options.\n    ')), Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Name(id='stream', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[])), Return(value=Call(func=Name(id='unpackb', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[]), Assign(targets=[Name(id='load', ctx=Store())], value=Name(id='unpack', ctx=Load())), Assign(targets=[Name(id='loads', ctx=Store())], value=Name(id='unpackb', ctx=Load())), Assign(targets=[Name(id='dump', ctx=Store())], value=Name(id='pack', ctx=Load())), Assign(targets=[Name(id='dumps', ctx=Store())], value=Name(id='packb', ctx=Load()))], type_ignores=[])