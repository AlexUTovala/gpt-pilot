Module(body=[Expr(value=Constant(value='\nParser for the environment markers micro-language defined in PEP 508.\n')), Import(names=[alias(name='os')]), Import(names=[alias(name='re')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='platform')]), ImportFrom(module='compat', names=[alias(name='string_types')], level=1), ImportFrom(module='util', names=[alias(name='in_venv'), alias(name='parse_marker')], level=1), ImportFrom(module='version', names=[alias(name='NormalizedVersion', asname='NV')], level=1), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='interpret')], ctx=Load())), Assign(targets=[Name(id='_VERSION_PATTERN', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='((\\d+(\\.\\d+)*\\w*)|\\\'(\\d+(\\.\\d+)*\\w*)\\\'|\\"(\\d+(\\.\\d+)*\\w*)\\")')], keywords=[])), FunctionDef(name='_is_literal', args=arguments(posonlyargs=[], args=[arg(arg='o')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='o', ctx=Load()), Name(id='string_types', ctx=Load())], keywords=[])), UnaryOp(op=Not(), operand=Name(id='o', ctx=Load()))]), body=[Return(value=Constant(value=False))], orelse=[]), Return(value=Compare(left=Subscript(value=Name(id='o', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[In()], comparators=[Constant(value='\'"')]))], decorator_list=[]), FunctionDef(name='_get_versions', args=arguments(posonlyargs=[], args=[arg(arg='s')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='m', ctx=Store()), iter=Call(func=Attribute(value=Name(id='_VERSION_PATTERN', ctx=Load()), attr='finditer', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='NV', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='groups', ctx=Load()), args=[], keywords=[]), slice=Constant(value=0), ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='set', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[]))], decorator_list=[]), ClassDef(name='Evaluator', bases=[Name(id='object', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    This class is used to evaluate marker expessions.\n    ')), Assign(targets=[Name(id='operations', ctx=Store())], value=Dict(keys=[Constant(value='=='), Constant(value='==='), Constant(value='~='), Constant(value='!='), Constant(value='<'), Constant(value='<='), Constant(value='>'), Constant(value='>='), Constant(value='and'), Constant(value='or'), Constant(value='in'), Constant(value='not in')], values=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x'), arg(arg='y')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Name(id='x', ctx=Load()), ops=[Eq()], comparators=[Name(id='y', ctx=Load())])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x'), arg(arg='y')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Name(id='x', ctx=Load()), ops=[Eq()], comparators=[Name(id='y', ctx=Load())])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x'), arg(arg='y')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=BoolOp(op=Or(), values=[Compare(left=Name(id='x', ctx=Load()), ops=[Eq()], comparators=[Name(id='y', ctx=Load())]), Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Name(id='y', ctx=Load())])])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x'), arg(arg='y')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Name(id='x', ctx=Load()), ops=[NotEq()], comparators=[Name(id='y', ctx=Load())])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x'), arg(arg='y')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Name(id='x', ctx=Load()), ops=[Lt()], comparators=[Name(id='y', ctx=Load())])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x'), arg(arg='y')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=BoolOp(op=Or(), values=[Compare(left=Name(id='x', ctx=Load()), ops=[Eq()], comparators=[Name(id='y', ctx=Load())]), Compare(left=Name(id='x', ctx=Load()), ops=[Lt()], comparators=[Name(id='y', ctx=Load())])])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x'), arg(arg='y')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Name(id='y', ctx=Load())])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x'), arg(arg='y')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=BoolOp(op=Or(), values=[Compare(left=Name(id='x', ctx=Load()), ops=[Eq()], comparators=[Name(id='y', ctx=Load())]), Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Name(id='y', ctx=Load())])])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x'), arg(arg='y')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=BoolOp(op=And(), values=[Name(id='x', ctx=Load()), Name(id='y', ctx=Load())])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x'), arg(arg='y')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=BoolOp(op=Or(), values=[Name(id='x', ctx=Load()), Name(id='y', ctx=Load())])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x'), arg(arg='y')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Name(id='x', ctx=Load()), ops=[In()], comparators=[Name(id='y', ctx=Load())])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x'), arg(arg='y')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Name(id='x', ctx=Load()), ops=[NotIn()], comparators=[Name(id='y', ctx=Load())]))])), FunctionDef(name='evaluate', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='expr'), arg(arg='context')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Evaluate a marker expression returned by the :func:`parse_requirement`\n        function in the specified context.\n        ')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='expr', ctx=Load()), Name(id='string_types', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='expr', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[In()], comparators=[Constant(value='\'"')]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Subscript(value=Name(id='expr', ctx=Load()), slice=Slice(lower=Constant(value=1), upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))], orelse=[If(test=Compare(left=Name(id='expr', ctx=Load()), ops=[NotIn()], comparators=[Name(id='context', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='SyntaxError', ctx=Load()), args=[BinOp(left=Constant(value='unknown variable: %s'), op=Mod(), right=Name(id='expr', ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Name(id='result', ctx=Store())], value=Subscript(value=Name(id='context', ctx=Load()), slice=Name(id='expr', ctx=Load()), ctx=Load()))])], orelse=[Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='expr', ctx=Load()), Name(id='dict', ctx=Load())], keywords=[])), Assign(targets=[Name(id='op', ctx=Store())], value=Subscript(value=Name(id='expr', ctx=Load()), slice=Constant(value='op'), ctx=Load())), If(test=Compare(left=Name(id='op', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='operations', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[BinOp(left=Constant(value='op not implemented: %s'), op=Mod(), right=Name(id='op', ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Name(id='elhs', ctx=Store())], value=Subscript(value=Name(id='expr', ctx=Load()), slice=Constant(value='lhs'), ctx=Load())), Assign(targets=[Name(id='erhs', ctx=Store())], value=Subscript(value=Name(id='expr', ctx=Load()), slice=Constant(value='rhs'), ctx=Load())), If(test=BoolOp(op=And(), values=[Call(func=Name(id='_is_literal', ctx=Load()), args=[Subscript(value=Name(id='expr', ctx=Load()), slice=Constant(value='lhs'), ctx=Load())], keywords=[]), Call(func=Name(id='_is_literal', ctx=Load()), args=[Subscript(value=Name(id='expr', ctx=Load()), slice=Constant(value='rhs'), ctx=Load())], keywords=[])]), body=[Raise(exc=Call(func=Name(id='SyntaxError', ctx=Load()), args=[BinOp(left=Constant(value='invalid comparison: %s %s %s'), op=Mod(), right=Tuple(elts=[Name(id='elhs', ctx=Load()), Name(id='op', ctx=Load()), Name(id='erhs', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Name(id='lhs', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate', ctx=Load()), args=[Name(id='elhs', ctx=Load()), Name(id='context', ctx=Load())], keywords=[])), Assign(targets=[Name(id='rhs', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evaluate', ctx=Load()), args=[Name(id='erhs', ctx=Load()), Name(id='context', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[BoolOp(op=Or(), values=[Compare(left=Name(id='elhs', ctx=Load()), ops=[Eq()], comparators=[Constant(value='python_version')]), Compare(left=Name(id='erhs', ctx=Load()), ops=[Eq()], comparators=[Constant(value='python_version')])]), Compare(left=Name(id='op', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='<'), Constant(value='<='), Constant(value='>'), Constant(value='>='), Constant(value='==='), Constant(value='=='), Constant(value='!='), Constant(value='~=')], ctx=Load())])]), body=[Assign(targets=[Name(id='lhs', ctx=Store())], value=Call(func=Name(id='NV', ctx=Load()), args=[Name(id='lhs', ctx=Load())], keywords=[])), Assign(targets=[Name(id='rhs', ctx=Store())], value=Call(func=Name(id='NV', ctx=Load()), args=[Name(id='rhs', ctx=Load())], keywords=[]))], orelse=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='elhs', ctx=Load()), ops=[Eq()], comparators=[Constant(value='python_version')]), Compare(left=Name(id='op', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='in'), Constant(value='not in')], ctx=Load())])]), body=[Assign(targets=[Name(id='lhs', ctx=Store())], value=Call(func=Name(id='NV', ctx=Load()), args=[Name(id='lhs', ctx=Load())], keywords=[])), Assign(targets=[Name(id='rhs', ctx=Store())], value=Call(func=Name(id='_get_versions', ctx=Load()), args=[Name(id='rhs', ctx=Load())], keywords=[]))], orelse=[])]), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='operations', ctx=Load()), slice=Name(id='op', ctx=Load()), ctx=Load()), args=[Name(id='lhs', ctx=Load()), Name(id='rhs', ctx=Load())], keywords=[]))]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[])], decorator_list=[]), Assign(targets=[Name(id='_DIGITS', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='\\d+\\.\\d+')], keywords=[])), FunctionDef(name='default_context', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='format_full_version', args=arguments(posonlyargs=[], args=[arg(arg='info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='version', ctx=Store())], value=BinOp(left=Constant(value='%s.%s.%s'), op=Mod(), right=Tuple(elts=[Attribute(value=Name(id='info', ctx=Load()), attr='major', ctx=Load()), Attribute(value=Name(id='info', ctx=Load()), attr='minor', ctx=Load()), Attribute(value=Name(id='info', ctx=Load()), attr='micro', ctx=Load())], ctx=Load()))), Assign(targets=[Name(id='kind', ctx=Store())], value=Attribute(value=Name(id='info', ctx=Load()), attr='releaselevel', ctx=Load())), If(test=Compare(left=Name(id='kind', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='final')]), body=[AugAssign(target=Name(id='version', ctx=Store()), op=Add(), value=BinOp(left=Subscript(value=Name(id='kind', ctx=Load()), slice=Constant(value=0), ctx=Load()), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='info', ctx=Load()), attr='serial', ctx=Load())], keywords=[])))], orelse=[]), Return(value=Name(id='version', ctx=Load()))], decorator_list=[]), If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='sys', ctx=Load()), Constant(value='implementation')], keywords=[]), body=[Assign(targets=[Name(id='implementation_version', ctx=Store())], value=Call(func=Name(id='format_full_version', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='implementation', ctx=Load()), attr='version', ctx=Load())], keywords=[])), Assign(targets=[Name(id='implementation_name', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='implementation', ctx=Load()), attr='name', ctx=Load()))], orelse=[Assign(targets=[Name(id='implementation_version', ctx=Store())], value=Constant(value='0')), Assign(targets=[Name(id='implementation_name', ctx=Store())], value=Constant(value=''))]), Assign(targets=[Name(id='ppv', ctx=Store())], value=Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='python_version', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='m', ctx=Store())], value=Call(func=Attribute(value=Name(id='_DIGITS', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='ppv', ctx=Load())], keywords=[])), Assign(targets=[Name(id='pv', ctx=Store())], value=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value=0)], keywords=[])), Assign(targets=[Name(id='result', ctx=Store())], value=Dict(keys=[Constant(value='implementation_name'), Constant(value='implementation_version'), Constant(value='os_name'), Constant(value='platform_machine'), Constant(value='platform_python_implementation'), Constant(value='platform_release'), Constant(value='platform_system'), Constant(value='platform_version'), Constant(value='platform_in_venv'), Constant(value='python_full_version'), Constant(value='python_version'), Constant(value='sys_platform')], values=[Name(id='implementation_name', ctx=Load()), Name(id='implementation_version', ctx=Load()), Attribute(value=Name(id='os', ctx=Load()), attr='name', ctx=Load()), Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='machine', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='python_implementation', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='release', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='system', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='version', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='in_venv', ctx=Load()), args=[], keywords=[])], keywords=[]), Name(id='ppv', ctx=Load()), Name(id='pv', ctx=Load()), Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load())])), Return(value=Name(id='result', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='DEFAULT_CONTEXT', ctx=Store())], value=Call(func=Name(id='default_context', ctx=Load()), args=[], keywords=[])), Delete(targets=[Name(id='default_context', ctx=Del())]), Assign(targets=[Name(id='evaluator', ctx=Store())], value=Call(func=Name(id='Evaluator', ctx=Load()), args=[], keywords=[])), FunctionDef(name='interpret', args=arguments(posonlyargs=[], args=[arg(arg='marker'), arg(arg='execution_context')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='\n    Interpret a marker and return a result depending on environment.\n\n    :param marker: The marker to interpret.\n    :type marker: str\n    :param execution_context: The context used for name lookup.\n    :type execution_context: mapping\n    ')), Try(body=[Assign(targets=[Tuple(elts=[Name(id='expr', ctx=Store()), Name(id='rest', ctx=Store())], ctx=Store())], value=Call(func=Name(id='parse_marker', ctx=Load()), args=[Name(id='marker', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='SyntaxError', ctx=Load()), args=[BinOp(left=Constant(value='Unable to interpret marker syntax: %s: %s'), op=Mod(), right=Tuple(elts=[Name(id='marker', ctx=Load()), Name(id='e', ctx=Load())], ctx=Load()))], keywords=[]))])], orelse=[], finalbody=[]), If(test=BoolOp(op=And(), values=[Name(id='rest', ctx=Load()), Compare(left=Subscript(value=Name(id='rest', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[NotEq()], comparators=[Constant(value='#')])]), body=[Raise(exc=Call(func=Name(id='SyntaxError', ctx=Load()), args=[BinOp(left=Constant(value='unexpected trailing data in marker: %s: %s'), op=Mod(), right=Tuple(elts=[Name(id='marker', ctx=Load()), Name(id='rest', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Name(id='context', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[Name(id='DEFAULT_CONTEXT', ctx=Load())], keywords=[])), If(test=Name(id='execution_context', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='context', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='execution_context', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='evaluator', ctx=Load()), attr='evaluate', ctx=Load()), args=[Name(id='expr', ctx=Load()), Name(id='context', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])