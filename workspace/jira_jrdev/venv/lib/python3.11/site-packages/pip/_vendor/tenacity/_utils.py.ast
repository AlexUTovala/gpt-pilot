Module(body=[Import(names=[alias(name='sys')]), Import(names=[alias(name='typing')]), ImportFrom(module='datetime', names=[alias(name='timedelta')], level=0), Assign(targets=[Name(id='MAX_WAIT', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='sys', ctx=Load()), attr='maxsize', ctx=Load()), op=Div(), right=Constant(value=2))), FunctionDef(name='find_ordinal', args=arguments(posonlyargs=[], args=[arg(arg='pos_num', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='pos_num', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value='th'))], orelse=[If(test=Compare(left=Name(id='pos_num', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Constant(value='st'))], orelse=[If(test=Compare(left=Name(id='pos_num', ctx=Load()), ops=[Eq()], comparators=[Constant(value=2)]), body=[Return(value=Constant(value='nd'))], orelse=[If(test=Compare(left=Name(id='pos_num', ctx=Load()), ops=[Eq()], comparators=[Constant(value=3)]), body=[Return(value=Constant(value='rd'))], orelse=[If(test=Compare(left=Constant(value=4), ops=[LtE(), LtE()], comparators=[Name(id='pos_num', ctx=Load()), Constant(value=20)]), body=[Return(value=Constant(value='th'))], orelse=[Return(value=Call(func=Name(id='find_ordinal', ctx=Load()), args=[BinOp(left=Name(id='pos_num', ctx=Load()), op=Mod(), right=Constant(value=10))], keywords=[]))])])])])])], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='to_ordinal', args=arguments(posonlyargs=[], args=[arg(arg='pos_num', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[FormattedValue(value=Name(id='pos_num', ctx=Load()), conversion=-1), FormattedValue(value=Call(func=Name(id='find_ordinal', ctx=Load()), args=[Name(id='pos_num', ctx=Load())], keywords=[]), conversion=-1)]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='get_callback_name', args=arguments(posonlyargs=[], args=[arg(arg='cb', annotation=Subscript(value=Attribute(value=Name(id='typing', ctx=Load()), attr='Callable', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Attribute(value=Name(id='typing', ctx=Load()), attr='Any', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get a callback fully-qualified name.\n\n    If no name can be produced ``repr(cb)`` is called and returned.\n    ')), Assign(targets=[Name(id='segments', ctx=Store())], value=List(elts=[], ctx=Load())), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='segments', ctx=Load()), attr='append', ctx=Load()), args=[Attribute(value=Name(id='cb', ctx=Load()), attr='__qualname__', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='segments', ctx=Load()), attr='append', ctx=Load()), args=[Attribute(value=Name(id='cb', ctx=Load()), attr='__name__', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])])], orelse=[], finalbody=[]), If(test=UnaryOp(op=Not(), operand=Name(id='segments', ctx=Load())), body=[Return(value=Call(func=Name(id='repr', ctx=Load()), args=[Name(id='cb', ctx=Load())], keywords=[]))], orelse=[Try(body=[If(test=Attribute(value=Name(id='cb', ctx=Load()), attr='__module__', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='segments', ctx=Load()), attr='insert', ctx=Load()), args=[Constant(value=0), Attribute(value=Name(id='cb', ctx=Load()), attr='__module__', ctx=Load())], keywords=[]))], orelse=[])], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[]), Return(value=Call(func=Attribute(value=Constant(value='.'), attr='join', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Name(id='str', ctx=Load())), Assign(targets=[Name(id='time_unit_type', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='typing', ctx=Load()), attr='Union', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='float', ctx=Load()), Name(id='timedelta', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='to_seconds', args=arguments(posonlyargs=[], args=[arg(arg='time_unit', annotation=Name(id='time_unit_type', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='float', ctx=Load()), args=[IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='time_unit', ctx=Load()), Name(id='timedelta', ctx=Load())], keywords=[]), body=Call(func=Attribute(value=Name(id='time_unit', ctx=Load()), attr='total_seconds', ctx=Load()), args=[], keywords=[]), orelse=Name(id='time_unit', ctx=Load()))], keywords=[]))], decorator_list=[], returns=Name(id='float', ctx=Load()))], type_ignores=[])