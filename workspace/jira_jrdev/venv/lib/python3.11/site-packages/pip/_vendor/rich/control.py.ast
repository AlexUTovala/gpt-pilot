Module(body=[Import(names=[alias(name='sys')]), Import(names=[alias(name='time')]), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING'), alias(name='Callable'), alias(name='Dict'), alias(name='Iterable'), alias(name='List'), alias(name='Union')], level=0), If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), ops=[GtE()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=8)], ctx=Load())]), body=[ImportFrom(module='typing', names=[alias(name='Final')], level=0)], orelse=[ImportFrom(module='pip._vendor.typing_extensions', names=[alias(name='Final')], level=0)]), ImportFrom(module='segment', names=[alias(name='ControlCode'), alias(name='ControlType'), alias(name='Segment')], level=1), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='console', names=[alias(name='Console'), alias(name='ConsoleOptions'), alias(name='RenderResult')], level=1)], orelse=[]), AnnAssign(target=Name(id='STRIP_CONTROL_CODES', ctx=Store()), annotation=Name(id='Final', ctx=Load()), value=List(elts=[Constant(value=7), Constant(value=8), Constant(value=11), Constant(value=12), Constant(value=13)], ctx=Load()), simple=1), AnnAssign(target=Name(id='_CONTROL_STRIP_TRANSLATE', ctx=Store()), annotation=Name(id='Final', ctx=Load()), value=DictComp(key=Name(id='_codepoint', ctx=Load()), value=Constant(value=None), generators=[comprehension(target=Name(id='_codepoint', ctx=Store()), iter=Name(id='STRIP_CONTROL_CODES', ctx=Load()), ifs=[], is_async=0)]), simple=1), AnnAssign(target=Name(id='CONTROL_ESCAPE', ctx=Store()), annotation=Name(id='Final', ctx=Load()), value=Dict(keys=[Constant(value=7), Constant(value=8), Constant(value=11), Constant(value=12), Constant(value=13)], values=[Constant(value='\\a'), Constant(value='\\b'), Constant(value='\\v'), Constant(value='\\f'), Constant(value='\\r')]), simple=1), AnnAssign(target=Name(id='CONTROL_CODES_FORMAT', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[Attribute(value=Name(id='ControlType', ctx=Load()), attr='BELL', ctx=Load()), Attribute(value=Name(id='ControlType', ctx=Load()), attr='CARRIAGE_RETURN', ctx=Load()), Attribute(value=Name(id='ControlType', ctx=Load()), attr='HOME', ctx=Load()), Attribute(value=Name(id='ControlType', ctx=Load()), attr='CLEAR', ctx=Load()), Attribute(value=Name(id='ControlType', ctx=Load()), attr='ENABLE_ALT_SCREEN', ctx=Load()), Attribute(value=Name(id='ControlType', ctx=Load()), attr='DISABLE_ALT_SCREEN', ctx=Load()), Attribute(value=Name(id='ControlType', ctx=Load()), attr='SHOW_CURSOR', ctx=Load()), Attribute(value=Name(id='ControlType', ctx=Load()), attr='HIDE_CURSOR', ctx=Load()), Attribute(value=Name(id='ControlType', ctx=Load()), attr='CURSOR_UP', ctx=Load()), Attribute(value=Name(id='ControlType', ctx=Load()), attr='CURSOR_DOWN', ctx=Load()), Attribute(value=Name(id='ControlType', ctx=Load()), attr='CURSOR_FORWARD', ctx=Load()), Attribute(value=Name(id='ControlType', ctx=Load()), attr='CURSOR_BACKWARD', ctx=Load()), Attribute(value=Name(id='ControlType', ctx=Load()), attr='CURSOR_MOVE_TO_COLUMN', ctx=Load()), Attribute(value=Name(id='ControlType', ctx=Load()), attr='ERASE_IN_LINE', ctx=Load()), Attribute(value=Name(id='ControlType', ctx=Load()), attr='CURSOR_MOVE_TO', ctx=Load()), Attribute(value=Name(id='ControlType', ctx=Load()), attr='SET_WINDOW_TITLE', ctx=Load())], values=[Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Constant(value='\x07')), Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Constant(value='\r')), Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Constant(value='\x1b[H')), Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Constant(value='\x1b[2J')), Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Constant(value='\x1b[?1049h')), Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Constant(value='\x1b[?1049l')), Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Constant(value='\x1b[?25h')), Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Constant(value='\x1b[?25l')), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='param')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=JoinedStr(values=[Constant(value='\x1b['), FormattedValue(value=Name(id='param', ctx=Load()), conversion=-1), Constant(value='A')])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='param')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=JoinedStr(values=[Constant(value='\x1b['), FormattedValue(value=Name(id='param', ctx=Load()), conversion=-1), Constant(value='B')])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='param')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=JoinedStr(values=[Constant(value='\x1b['), FormattedValue(value=Name(id='param', ctx=Load()), conversion=-1), Constant(value='C')])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='param')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=JoinedStr(values=[Constant(value='\x1b['), FormattedValue(value=Name(id='param', ctx=Load()), conversion=-1), Constant(value='D')])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='param')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=JoinedStr(values=[Constant(value='\x1b['), FormattedValue(value=BinOp(left=Name(id='param', ctx=Load()), op=Add(), right=Constant(value=1)), conversion=-1), Constant(value='G')])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='param')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=JoinedStr(values=[Constant(value='\x1b['), FormattedValue(value=Name(id='param', ctx=Load()), conversion=-1), Constant(value='K')])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x'), arg(arg='y')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=JoinedStr(values=[Constant(value='\x1b['), FormattedValue(value=BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Constant(value=1)), conversion=-1), Constant(value=';'), FormattedValue(value=BinOp(left=Name(id='x', ctx=Load()), op=Add(), right=Constant(value=1)), conversion=-1), Constant(value='H')])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='title')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=JoinedStr(values=[Constant(value='\x1b]0;'), FormattedValue(value=Name(id='title', ctx=Load()), conversion=-1), Constant(value='\x07')]))]), simple=1), ClassDef(name='Control', bases=[], keywords=[], body=[Expr(value=Constant(value='A renderable that inserts a control code (non printable but may move cursor).\n\n    Args:\n        *codes (str): Positional arguments are either a :class:`~rich.segment.ControlType` enum or a\n            tuple of ControlType and an integer parameter\n    ')), Assign(targets=[Name(id='__slots__', ctx=Store())], value=List(elts=[Constant(value='segment')], ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='codes', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='ControlType', ctx=Load()), Name(id='ControlCode', ctx=Load())], ctx=Load()), ctx=Load())), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Name(id='control_codes', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='ControlCode', ctx=Load()), ctx=Load()), value=ListComp(elt=IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='code', ctx=Load()), Name(id='ControlType', ctx=Load())], keywords=[]), body=Tuple(elts=[Name(id='code', ctx=Load())], ctx=Load()), orelse=Name(id='code', ctx=Load())), generators=[comprehension(target=Name(id='code', ctx=Store()), iter=Name(id='codes', ctx=Load()), ifs=[], is_async=0)]), simple=1), Assign(targets=[Name(id='_format_map', ctx=Store())], value=Name(id='CONTROL_CODES_FORMAT', ctx=Load())), Assign(targets=[Name(id='rendered_codes', ctx=Store())], value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[GeneratorExp(elt=Call(func=Subscript(value=Name(id='_format_map', ctx=Load()), slice=Name(id='code', ctx=Load()), ctx=Load()), args=[Starred(value=Name(id='parameters', ctx=Load()), ctx=Load())], keywords=[]), generators=[comprehension(target=Tuple(elts=[Name(id='code', ctx=Store()), Starred(value=Name(id='parameters', ctx=Store()), ctx=Store())], ctx=Store()), iter=Name(id='control_codes', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='segment', ctx=Store())], value=Call(func=Name(id='Segment', ctx=Load()), args=[Name(id='rendered_codes', ctx=Load()), Constant(value=None), Name(id='control_codes', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='bell', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Ring the 'bell'.")), Return(value=Call(func=Name(id='cls', ctx=Load()), args=[Attribute(value=Name(id='ControlType', ctx=Load()), attr='BELL', ctx=Load())], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Constant(value='Control')), FunctionDef(name='home', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Move cursor to 'home' position.")), Return(value=Call(func=Name(id='cls', ctx=Load()), args=[Attribute(value=Name(id='ControlType', ctx=Load()), attr='HOME', ctx=Load())], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Constant(value='Control')), FunctionDef(name='move', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='x', annotation=Name(id='int', ctx=Load())), arg(arg='y', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0), Constant(value=0)]), body=[Expr(value=Constant(value='Move cursor relative to current position.\n\n        Args:\n            x (int): X offset.\n            y (int): Y offset.\n\n        Returns:\n            ~Control: Control object.\n\n        ')), FunctionDef(name='get_codes', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='control', ctx=Store())], value=Name(id='ControlType', ctx=Load())), If(test=Name(id='x', ctx=Load()), body=[Expr(value=Yield(value=Tuple(elts=[IfExp(test=Compare(left=Name(id='x', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=Attribute(value=Name(id='control', ctx=Load()), attr='CURSOR_FORWARD', ctx=Load()), orelse=Attribute(value=Name(id='control', ctx=Load()), attr='CURSOR_BACKWARD', ctx=Load())), Call(func=Name(id='abs', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])], ctx=Load())))], orelse=[]), If(test=Name(id='y', ctx=Load()), body=[Expr(value=Yield(value=Tuple(elts=[IfExp(test=Compare(left=Name(id='y', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=Attribute(value=Name(id='control', ctx=Load()), attr='CURSOR_DOWN', ctx=Load()), orelse=Attribute(value=Name(id='control', ctx=Load()), attr='CURSOR_UP', ctx=Load())), Call(func=Name(id='abs', ctx=Load()), args=[Name(id='y', ctx=Load())], keywords=[])], ctx=Load())))], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='ControlCode', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='control', ctx=Store())], value=Call(func=Name(id='cls', ctx=Load()), args=[Starred(value=Call(func=Name(id='get_codes', ctx=Load()), args=[], keywords=[]), ctx=Load())], keywords=[])), Return(value=Name(id='control', ctx=Load()))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Constant(value='Control')), FunctionDef(name='move_to_column', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='x', annotation=Name(id='int', ctx=Load())), arg(arg='y', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[Expr(value=Constant(value='Move to the given column, optionally add offset to row.\n\n        Returns:\n            x (int): absolute x (column)\n            y (int): optional y offset (row)\n\n        Returns:\n            ~Control: Control object.\n        ')), Return(value=IfExp(test=Name(id='y', ctx=Load()), body=Call(func=Name(id='cls', ctx=Load()), args=[Tuple(elts=[Attribute(value=Name(id='ControlType', ctx=Load()), attr='CURSOR_MOVE_TO_COLUMN', ctx=Load()), Name(id='x', ctx=Load())], ctx=Load()), Tuple(elts=[IfExp(test=Compare(left=Name(id='y', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=Attribute(value=Name(id='ControlType', ctx=Load()), attr='CURSOR_DOWN', ctx=Load()), orelse=Attribute(value=Name(id='ControlType', ctx=Load()), attr='CURSOR_UP', ctx=Load())), Call(func=Name(id='abs', ctx=Load()), args=[Name(id='y', ctx=Load())], keywords=[])], ctx=Load())], keywords=[]), orelse=Call(func=Name(id='cls', ctx=Load()), args=[Tuple(elts=[Attribute(value=Name(id='ControlType', ctx=Load()), attr='CURSOR_MOVE_TO_COLUMN', ctx=Load()), Name(id='x', ctx=Load())], ctx=Load())], keywords=[])))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Constant(value='Control')), FunctionDef(name='move_to', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='x', annotation=Name(id='int', ctx=Load())), arg(arg='y', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Move cursor to absolute position.\n\n        Args:\n            x (int): x offset (column)\n            y (int): y offset (row)\n\n        Returns:\n            ~Control: Control object.\n        ')), Return(value=Call(func=Name(id='cls', ctx=Load()), args=[Tuple(elts=[Attribute(value=Name(id='ControlType', ctx=Load()), attr='CURSOR_MOVE_TO', ctx=Load()), Name(id='x', ctx=Load()), Name(id='y', ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Constant(value='Control')), FunctionDef(name='clear', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Clear the screen.')), Return(value=Call(func=Name(id='cls', ctx=Load()), args=[Attribute(value=Name(id='ControlType', ctx=Load()), attr='CLEAR', ctx=Load())], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Constant(value='Control')), FunctionDef(name='show_cursor', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='show', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Show or hide the cursor.')), Return(value=Call(func=Name(id='cls', ctx=Load()), args=[IfExp(test=Name(id='show', ctx=Load()), body=Attribute(value=Name(id='ControlType', ctx=Load()), attr='SHOW_CURSOR', ctx=Load()), orelse=Attribute(value=Name(id='ControlType', ctx=Load()), attr='HIDE_CURSOR', ctx=Load()))], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Constant(value='Control')), FunctionDef(name='alt_screen', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='enable', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Enable or disable alt screen.')), If(test=Name(id='enable', ctx=Load()), body=[Return(value=Call(func=Name(id='cls', ctx=Load()), args=[Attribute(value=Name(id='ControlType', ctx=Load()), attr='ENABLE_ALT_SCREEN', ctx=Load()), Attribute(value=Name(id='ControlType', ctx=Load()), attr='HOME', ctx=Load())], keywords=[]))], orelse=[Return(value=Call(func=Name(id='cls', ctx=Load()), args=[Attribute(value=Name(id='ControlType', ctx=Load()), attr='DISABLE_ALT_SCREEN', ctx=Load())], keywords=[]))])], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Constant(value='Control')), FunctionDef(name='title', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='title', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Set the terminal window title\n\n        Args:\n            title (str): The new terminal window title\n        ')), Return(value=Call(func=Name(id='cls', ctx=Load()), args=[Tuple(elts=[Attribute(value=Name(id='ControlType', ctx=Load()), attr='SET_WINDOW_TITLE', ctx=Load()), Name(id='title', ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Constant(value='Control')), FunctionDef(name='__str__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='segment', ctx=Load()), attr='text', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='__rich_console__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='console', annotation=Constant(value='Console')), arg(arg='options', annotation=Constant(value='ConsoleOptions'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='segment', ctx=Load()), attr='text', ctx=Load()), body=[Expr(value=Yield(value=Attribute(value=Name(id='self', ctx=Load()), attr='segment', ctx=Load())))], orelse=[])], decorator_list=[], returns=Constant(value='RenderResult'))], decorator_list=[]), FunctionDef(name='strip_control_codes', args=arguments(posonlyargs=[], args=[arg(arg='text', annotation=Name(id='str', ctx=Load())), arg(arg='_translate_table', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='_CONTROL_STRIP_TRANSLATE', ctx=Load())]), body=[Expr(value=Constant(value='Remove control codes from text.\n\n    Args:\n        text (str): A string possibly contain control codes.\n\n    Returns:\n        str: String with control codes removed.\n    ')), Return(value=Call(func=Attribute(value=Name(id='text', ctx=Load()), attr='translate', ctx=Load()), args=[Name(id='_translate_table', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='escape_control_codes', args=arguments(posonlyargs=[], args=[arg(arg='text', annotation=Name(id='str', ctx=Load())), arg(arg='_translate_table', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='CONTROL_ESCAPE', ctx=Load())]), body=[Expr(value=Constant(value='Replace control codes with their "escaped" equivalent in the given text.\n    (e.g. "\x08" becomes "\\b")\n\n    Args:\n        text (str): A string possibly containing control codes.\n\n    Returns:\n        str: String with control codes replaced with their escaped version.\n    ')), Return(value=Call(func=Attribute(value=Name(id='text', ctx=Load()), attr='translate', ctx=Load()), args=[Name(id='_translate_table', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__')]), body=[ImportFrom(module='pip._vendor.rich.console', names=[alias(name='Console')], level=0), Assign(targets=[Name(id='console', ctx=Store())], value=Call(func=Name(id='Console', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='print', ctx=Load()), args=[Constant(value='Look at the title of your terminal window ^')], keywords=[])), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=10)], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='set_window_title', ctx=Load()), args=[BinOp(left=Constant(value='🚀 Loading'), op=Add(), right=BinOp(left=Constant(value='.'), op=Mult(), right=Name(id='i', ctx=Load())))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='sleep', ctx=Load()), args=[Constant(value=0.5)], keywords=[]))], orelse=[])], orelse=[])], type_ignores=[])