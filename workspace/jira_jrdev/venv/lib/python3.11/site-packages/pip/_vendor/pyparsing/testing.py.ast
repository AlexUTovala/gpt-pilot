Module(body=[ImportFrom(module='contextlib', names=[alias(name='contextmanager')], level=0), Import(names=[alias(name='typing')]), ImportFrom(module='core', names=[alias(name='ParserElement'), alias(name='ParseException'), alias(name='Keyword'), alias(name='__diag__'), alias(name='__compat__')], level=1), ClassDef(name='pyparsing_test', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    namespace class for classes useful in writing unit tests\n    ')), ClassDef(name='reset_pyparsing_context', bases=[], keywords=[], body=[Expr(value=Constant(value='\n        Context manager to be used when writing unit tests that modify pyparsing config values:\n        - packrat parsing\n        - bounded recursion parsing\n        - default whitespace characters.\n        - default keyword characters\n        - literal string auto-conversion class\n        - __diag__ settings\n\n        Example::\n\n            with reset_pyparsing_context():\n                # test that literals used to construct a grammar are automatically suppressed\n                ParserElement.inlineLiteralsUsing(Suppress)\n\n                term = Word(alphas) | Word(nums)\n                group = Group(\'(\' + term[...] + \')\')\n\n                # assert that the \'()\' characters are not included in the parsed tokens\n                self.assertParseAndCheckList(group, "(abc 123 def)", [\'abc\', \'123\', \'def\'])\n\n            # after exiting context manager, literals are converted to Literal expressions again\n        ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_save_context', ctx=Store())], value=Dict(keys=[], values=[]))], decorator_list=[]), FunctionDef(name='save', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_save_context', ctx=Load()), slice=Constant(value='default_whitespace'), ctx=Store())], value=Attribute(value=Name(id='ParserElement', ctx=Load()), attr='DEFAULT_WHITE_CHARS', ctx=Load())), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_save_context', ctx=Load()), slice=Constant(value='default_keyword_chars'), ctx=Store())], value=Attribute(value=Name(id='Keyword', ctx=Load()), attr='DEFAULT_KEYWORD_CHARS', ctx=Load())), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_save_context', ctx=Load()), slice=Constant(value='literal_string_class'), ctx=Store())], value=Attribute(value=Name(id='ParserElement', ctx=Load()), attr='_literalStringClass', ctx=Load())), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_save_context', ctx=Load()), slice=Constant(value='verbose_stacktrace'), ctx=Store())], value=Attribute(value=Name(id='ParserElement', ctx=Load()), attr='verbose_stacktrace', ctx=Load())), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_save_context', ctx=Load()), slice=Constant(value='packrat_enabled'), ctx=Store())], value=Attribute(value=Name(id='ParserElement', ctx=Load()), attr='_packratEnabled', ctx=Load())), If(test=Attribute(value=Name(id='ParserElement', ctx=Load()), attr='_packratEnabled', ctx=Load()), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_save_context', ctx=Load()), slice=Constant(value='packrat_cache_size'), ctx=Store())], value=Attribute(value=Attribute(value=Name(id='ParserElement', ctx=Load()), attr='packrat_cache', ctx=Load()), attr='size', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_save_context', ctx=Load()), slice=Constant(value='packrat_cache_size'), ctx=Store())], value=Constant(value=None))]), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_save_context', ctx=Load()), slice=Constant(value='packrat_parse'), ctx=Store())], value=Attribute(value=Name(id='ParserElement', ctx=Load()), attr='_parse', ctx=Load())), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_save_context', ctx=Load()), slice=Constant(value='recursion_enabled'), ctx=Store())], value=Attribute(value=Name(id='ParserElement', ctx=Load()), attr='_left_recursion_enabled', ctx=Load())), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_save_context', ctx=Load()), slice=Constant(value='__diag__'), ctx=Store())], value=DictComp(key=Name(id='name', ctx=Load()), value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='__diag__', ctx=Load()), Name(id='name', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='name', ctx=Store()), iter=Attribute(value=Name(id='__diag__', ctx=Load()), attr='_all_names', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_save_context', ctx=Load()), slice=Constant(value='__compat__'), ctx=Store())], value=Dict(keys=[Constant(value='collect_all_And_tokens')], values=[Attribute(value=Name(id='__compat__', ctx=Load()), attr='collect_all_And_tokens', ctx=Load())])), Return(value=Name(id='self', ctx=Load()))], decorator_list=[]), FunctionDef(name='restore', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='ParserElement', ctx=Load()), attr='DEFAULT_WHITE_CHARS', ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_save_context', ctx=Load()), slice=Constant(value='default_whitespace'), ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='ParserElement', ctx=Load()), attr='set_default_whitespace_chars', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_save_context', ctx=Load()), slice=Constant(value='default_whitespace'), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='ParserElement', ctx=Load()), attr='verbose_stacktrace', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_save_context', ctx=Load()), slice=Constant(value='verbose_stacktrace'), ctx=Load())), Assign(targets=[Attribute(value=Name(id='Keyword', ctx=Load()), attr='DEFAULT_KEYWORD_CHARS', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_save_context', ctx=Load()), slice=Constant(value='default_keyword_chars'), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='ParserElement', ctx=Load()), attr='inlineLiteralsUsing', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_save_context', ctx=Load()), slice=Constant(value='literal_string_class'), ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_save_context', ctx=Load()), slice=Constant(value='__diag__'), ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=IfExp(test=Name(id='value', ctx=Load()), body=Attribute(value=Name(id='__diag__', ctx=Load()), attr='enable', ctx=Load()), orelse=Attribute(value=Name(id='__diag__', ctx=Load()), attr='disable', ctx=Load())), args=[Name(id='name', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='ParserElement', ctx=Load()), attr='_packratEnabled', ctx=Store())], value=Constant(value=False)), If(test=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_save_context', ctx=Load()), slice=Constant(value='packrat_enabled'), ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='ParserElement', ctx=Load()), attr='enable_packrat', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_save_context', ctx=Load()), slice=Constant(value='packrat_cache_size'), ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Attribute(value=Name(id='ParserElement', ctx=Load()), attr='_parse', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_save_context', ctx=Load()), slice=Constant(value='packrat_parse'), ctx=Load()))]), Assign(targets=[Attribute(value=Name(id='ParserElement', ctx=Load()), attr='_left_recursion_enabled', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_save_context', ctx=Load()), slice=Constant(value='recursion_enabled'), ctx=Load())), Assign(targets=[Attribute(value=Name(id='__compat__', ctx=Load()), attr='collect_all_And_tokens', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_save_context', ctx=Load()), slice=Constant(value='__compat__'), ctx=Load())), Return(value=Name(id='self', ctx=Load()))], decorator_list=[]), FunctionDef(name='copy', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='ret', ctx=Load()), attr='_save_context', ctx=Load()), attr='update', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_save_context', ctx=Load())], keywords=[])), Return(value=Name(id='ret', ctx=Load()))], decorator_list=[]), FunctionDef(name='__enter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='save', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='__exit__', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='restore', ctx=Load()), args=[], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='TestParseResultsAsserts', bases=[], keywords=[], body=[Expr(value=Constant(value='\n        A mixin class to add parse results assertion methods to normal unittest.TestCase classes.\n        ')), FunctionDef(name='assertParseResultsEquals', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='result'), arg(arg='expected_list'), arg(arg='expected_dict'), arg(arg='msg')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='\n            Unit test assertion to compare a :class:`ParseResults` object with an optional ``expected_list``,\n            and compare any defined results names with an optional ``expected_dict``.\n            ')), If(test=Compare(left=Name(id='expected_list', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='expected_list', ctx=Load()), Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='as_list', ctx=Load()), args=[], keywords=[])], keywords=[keyword(arg='msg', value=Name(id='msg', ctx=Load()))]))], orelse=[]), If(test=Compare(left=Name(id='expected_dict', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='expected_dict', ctx=Load()), Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='as_dict', ctx=Load()), args=[], keywords=[])], keywords=[keyword(arg='msg', value=Name(id='msg', ctx=Load()))]))], orelse=[])], decorator_list=[]), FunctionDef(name='assertParseAndCheckList', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='expr'), arg(arg='test_string'), arg(arg='expected_list'), arg(arg='msg'), arg(arg='verbose')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=True)]), body=[Expr(value=Constant(value='\n            Convenience wrapper assert to test a parser element and input string, and assert that\n            the resulting ``ParseResults.asList()`` is equal to the ``expected_list``.\n            ')), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='expr', ctx=Load()), attr='parse_string', ctx=Load()), args=[Name(id='test_string', ctx=Load())], keywords=[keyword(arg='parse_all', value=Constant(value=True))])), If(test=Name(id='verbose', ctx=Load()), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='dump', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='as_list', ctx=Load()), args=[], keywords=[])], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertParseResultsEquals', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[keyword(arg='expected_list', value=Name(id='expected_list', ctx=Load())), keyword(arg='msg', value=Name(id='msg', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='assertParseAndCheckDict', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='expr'), arg(arg='test_string'), arg(arg='expected_dict'), arg(arg='msg'), arg(arg='verbose')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=True)]), body=[Expr(value=Constant(value='\n            Convenience wrapper assert to test a parser element and input string, and assert that\n            the resulting ``ParseResults.asDict()`` is equal to the ``expected_dict``.\n            ')), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='expr', ctx=Load()), attr='parse_string', ctx=Load()), args=[Name(id='test_string', ctx=Load())], keywords=[keyword(arg='parseAll', value=Constant(value=True))])), If(test=Name(id='verbose', ctx=Load()), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='dump', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='as_list', ctx=Load()), args=[], keywords=[])], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertParseResultsEquals', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[keyword(arg='expected_dict', value=Name(id='expected_dict', ctx=Load())), keyword(arg='msg', value=Name(id='msg', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='assertRunTestResults', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='run_tests_report'), arg(arg='expected_parse_results'), arg(arg='msg')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='\n            Unit test assertion to evaluate output of ``ParserElement.runTests()``. If a list of\n            list-dict tuples is given as the ``expected_parse_results`` argument, then these are zipped\n            with the report tuples returned by ``runTests`` and evaluated using ``assertParseResultsEquals``.\n            Finally, asserts that the overall ``runTests()`` success value is ``True``.\n\n            :param run_tests_report: tuple(bool, [tuple(str, ParseResults or Exception)]) returned from runTests\n            :param expected_parse_results (optional): [tuple(str, list, dict, Exception)]\n            ')), Assign(targets=[Tuple(elts=[Name(id='run_test_success', ctx=Store()), Name(id='run_test_results', ctx=Store())], ctx=Store())], value=Name(id='run_tests_report', ctx=Load())), If(test=Compare(left=Name(id='expected_parse_results', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='merged', ctx=Store())], value=ListComp(elt=Tuple(elts=[Starred(value=Name(id='rpt', ctx=Load()), ctx=Load()), Name(id='expected', ctx=Load())], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='rpt', ctx=Store()), Name(id='expected', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Name(id='run_test_results', ctx=Load()), Name(id='expected_parse_results', ctx=Load())], keywords=[]), ifs=[], is_async=0)])), For(target=Tuple(elts=[Name(id='test_string', ctx=Store()), Name(id='result', ctx=Store()), Name(id='expected', ctx=Store())], ctx=Store()), iter=Name(id='merged', ctx=Load()), body=[Assign(targets=[Name(id='fail_msg', ctx=Store())], value=Call(func=Name(id='next', ctx=Load()), args=[GeneratorExp(elt=Name(id='exp', ctx=Load()), generators=[comprehension(target=Name(id='exp', ctx=Store()), iter=Name(id='expected', ctx=Load()), ifs=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='exp', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])], is_async=0)]), Constant(value=None)], keywords=[])), Assign(targets=[Name(id='expected_exception', ctx=Store())], value=Call(func=Name(id='next', ctx=Load()), args=[GeneratorExp(elt=Name(id='exp', ctx=Load()), generators=[comprehension(target=Name(id='exp', ctx=Store()), iter=Name(id='expected', ctx=Load()), ifs=[BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='exp', ctx=Load()), Name(id='type', ctx=Load())], keywords=[]), Call(func=Name(id='issubclass', ctx=Load()), args=[Name(id='exp', ctx=Load()), Name(id='Exception', ctx=Load())], keywords=[])])], is_async=0)]), Constant(value=None)], keywords=[])), If(test=Compare(left=Name(id='expected_exception', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[], keywords=[keyword(arg='expected_exception', value=Name(id='expected_exception', ctx=Load())), keyword(arg='msg', value=BoolOp(op=Or(), values=[Name(id='fail_msg', ctx=Load()), Name(id='msg', ctx=Load())]))]))], body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='result', ctx=Load()), Name(id='Exception', ctx=Load())], keywords=[]), body=[Raise(exc=Name(id='result', ctx=Load()))], orelse=[])])], orelse=[Assign(targets=[Name(id='expected_list', ctx=Store())], value=Call(func=Name(id='next', ctx=Load()), args=[GeneratorExp(elt=Name(id='exp', ctx=Load()), generators=[comprehension(target=Name(id='exp', ctx=Store()), iter=Name(id='expected', ctx=Load()), ifs=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='exp', ctx=Load()), Name(id='list', ctx=Load())], keywords=[])], is_async=0)]), Constant(value=None)], keywords=[])), Assign(targets=[Name(id='expected_dict', ctx=Store())], value=Call(func=Name(id='next', ctx=Load()), args=[GeneratorExp(elt=Name(id='exp', ctx=Load()), generators=[comprehension(target=Name(id='exp', ctx=Store()), iter=Name(id='expected', ctx=Load()), ifs=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='exp', ctx=Load()), Name(id='dict', ctx=Load())], keywords=[])], is_async=0)]), Constant(value=None)], keywords=[])), If(test=Compare(left=Tuple(elts=[Name(id='expected_list', ctx=Load()), Name(id='expected_dict', ctx=Load())], ctx=Load()), ops=[NotEq()], comparators=[Tuple(elts=[Constant(value=None), Constant(value=None)], ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertParseResultsEquals', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[keyword(arg='expected_list', value=Name(id='expected_list', ctx=Load())), keyword(arg='expected_dict', value=Name(id='expected_dict', ctx=Load())), keyword(arg='msg', value=BoolOp(op=Or(), values=[Name(id='fail_msg', ctx=Load()), Name(id='msg', ctx=Load())]))]))], orelse=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[JoinedStr(values=[Constant(value='no validation for '), FormattedValue(value=Name(id='test_string', ctx=Load()), conversion=114)])], keywords=[]))])])], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertTrue', ctx=Load()), args=[Name(id='run_test_success', ctx=Load())], keywords=[keyword(arg='msg', value=IfExp(test=Compare(left=Name(id='msg', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Name(id='msg', ctx=Load()), orelse=Constant(value='failed runTests')))]))], decorator_list=[]), FunctionDef(name='assertRaisesParseException', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='exc_type'), arg(arg='msg')], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='ParseException', ctx=Load()), Constant(value=None)]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='exc_type', ctx=Load())], keywords=[keyword(arg='msg', value=Name(id='msg', ctx=Load()))]))], body=[Expr(value=Yield())])], decorator_list=[Name(id='contextmanager', ctx=Load())])], decorator_list=[]), FunctionDef(name='with_line_numbers', args=arguments(posonlyargs=[], args=[arg(arg='s', annotation=Name(id='str', ctx=Load())), arg(arg='start_line', annotation=Subscript(value=Attribute(value=Name(id='typing', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='end_line', annotation=Subscript(value=Attribute(value=Name(id='typing', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='expand_tabs', annotation=Name(id='bool', ctx=Load())), arg(arg='eol_mark', annotation=Name(id='str', ctx=Load())), arg(arg='mark_spaces', annotation=Subscript(value=Attribute(value=Name(id='typing', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='mark_control', annotation=Subscript(value=Attribute(value=Name(id='typing', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=True), Constant(value='|'), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='\n        Helpful method for debugging a parser - prints a string with line and column numbers.\n        (Line and column numbers are 1-based.)\n\n        :param s: tuple(bool, str - string to be printed with line and column numbers\n        :param start_line: int - (optional) starting line number in s to print (default=1)\n        :param end_line: int - (optional) ending line number in s to print (default=len(s))\n        :param expand_tabs: bool - (optional) expand tabs to spaces, to match the pyparsing default\n        :param eol_mark: str - (optional) string to mark the end of lines, helps visualize trailing spaces (default="|")\n        :param mark_spaces: str - (optional) special character to display in place of spaces\n        :param mark_control: str - (optional) convert non-printing control characters to a placeholding\n                                 character; valid values:\n                                 - "unicode" - replaces control chars with Unicode symbols, such as "␍" and "␊"\n                                 - any single character string - replace control characters with given string\n                                 - None (default) - string is displayed as-is\n\n        :return: str - input string with leading line numbers and column number headers\n        ')), If(test=Name(id='expand_tabs', ctx=Load()), body=[Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='expandtabs', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='mark_control', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='mark_control', ctx=Store())], value=Call(func=Attribute(value=Name(id='typing', ctx=Load()), attr='cast', ctx=Load()), args=[Name(id='str', ctx=Load()), Name(id='mark_control', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='mark_control', ctx=Load()), ops=[Eq()], comparators=[Constant(value='unicode')]), body=[Assign(targets=[Name(id='transtable_map', ctx=Store())], value=DictComp(key=Name(id='c', ctx=Load()), value=Name(id='u', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='c', ctx=Store()), Name(id='u', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Constant(value=33)], keywords=[]), Call(func=Name(id='range', ctx=Load()), args=[Constant(value=9216), Constant(value=9267)], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Subscript(value=Name(id='transtable_map', ctx=Load()), slice=Constant(value=127), ctx=Store())], value=Constant(value=9249)), Assign(targets=[Name(id='tbl', ctx=Store())], value=Call(func=Attribute(value=Name(id='str', ctx=Load()), attr='maketrans', ctx=Load()), args=[Name(id='transtable_map', ctx=Load())], keywords=[])), Assign(targets=[Name(id='eol_mark', ctx=Store())], value=Constant(value=''))], orelse=[Assign(targets=[Name(id='ord_mark_control', ctx=Store())], value=Call(func=Name(id='ord', ctx=Load()), args=[Name(id='mark_control', ctx=Load())], keywords=[])), Assign(targets=[Name(id='tbl', ctx=Store())], value=Call(func=Attribute(value=Name(id='str', ctx=Load()), attr='maketrans', ctx=Load()), args=[DictComp(key=Name(id='c', ctx=Load()), value=Name(id='ord_mark_control', ctx=Load()), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=BinOp(left=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Constant(value=32)], keywords=[])], keywords=[]), op=Add(), right=List(elts=[Constant(value=127)], ctx=Load())), ifs=[], is_async=0)])], keywords=[]))]), Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='translate', ctx=Load()), args=[Name(id='tbl', ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='mark_spaces', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='mark_spaces', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=' ')])]), body=[If(test=Compare(left=Name(id='mark_spaces', ctx=Load()), ops=[Eq()], comparators=[Constant(value='unicode')]), body=[Assign(targets=[Name(id='tbl', ctx=Store())], value=Call(func=Attribute(value=Name(id='str', ctx=Load()), attr='maketrans', ctx=Load()), args=[Dict(keys=[Constant(value=9), Constant(value=32)], values=[Constant(value=9225), Constant(value=9251)])], keywords=[])), Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='translate', ctx=Load()), args=[Name(id='tbl', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value=' '), Name(id='mark_spaces', ctx=Load())], keywords=[]))])], orelse=[]), If(test=Compare(left=Name(id='start_line', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='start_line', ctx=Store())], value=Constant(value=1))], orelse=[]), If(test=Compare(left=Name(id='end_line', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='end_line', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='end_line', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[Name(id='end_line', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='start_line', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[Call(func=Name(id='max', ctx=Load()), args=[Constant(value=1), Name(id='start_line', ctx=Load())], keywords=[]), Name(id='end_line', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='mark_control', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='unicode')]), body=[Assign(targets=[Name(id='s_lines', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='splitlines', ctx=Load()), args=[], keywords=[]), slice=Slice(lower=BinOp(left=Name(id='start_line', ctx=Load()), op=Sub(), right=Constant(value=1)), upper=Name(id='end_line', ctx=Load())), ctx=Load()))], orelse=[Assign(targets=[Name(id='s_lines', ctx=Store())], value=ListComp(elt=BinOp(left=Name(id='line', ctx=Load()), op=Add(), right=Constant(value='␊')), generators=[comprehension(target=Name(id='line', ctx=Store()), iter=Subscript(value=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='␊')], keywords=[]), slice=Slice(lower=BinOp(left=Name(id='start_line', ctx=Load()), op=Sub(), right=Constant(value=1)), upper=Name(id='end_line', ctx=Load())), ctx=Load()), ifs=[], is_async=0)]))]), If(test=UnaryOp(op=Not(), operand=Name(id='s_lines', ctx=Load())), body=[Return(value=Constant(value=''))], orelse=[]), Assign(targets=[Name(id='lineno_width', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='end_line', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='max_line_len', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='len', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='line', ctx=Store()), iter=Name(id='s_lines', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Name(id='lead', ctx=Store())], value=BinOp(left=Constant(value=' '), op=Mult(), right=BinOp(left=Name(id='lineno_width', ctx=Load()), op=Add(), right=Constant(value=1)))), If(test=Compare(left=Name(id='max_line_len', ctx=Load()), ops=[GtE()], comparators=[Constant(value=99)]), body=[Assign(targets=[Name(id='header0', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='lead', ctx=Load()), op=Add(), right=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[GeneratorExp(elt=JoinedStr(values=[FormattedValue(value=BinOp(left=Constant(value=' '), op=Mult(), right=Constant(value=99)), conversion=-1), FormattedValue(value=BinOp(left=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1)), op=Mod(), right=Constant(value=100)), conversion=-1)]), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='max', ctx=Load()), args=[BinOp(left=Name(id='max_line_len', ctx=Load()), op=FloorDiv(), right=Constant(value=100)), Constant(value=1)], keywords=[])], keywords=[]), ifs=[], is_async=0)])], keywords=[])), op=Add(), right=Constant(value='\n')))], orelse=[Assign(targets=[Name(id='header0', ctx=Store())], value=Constant(value=''))]), Assign(targets=[Name(id='header1', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=Name(id='header0', ctx=Load()), op=Add(), right=Name(id='lead', ctx=Load())), op=Add(), right=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[GeneratorExp(elt=JoinedStr(values=[Constant(value='         '), FormattedValue(value=BinOp(left=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1)), op=Mod(), right=Constant(value=10)), conversion=-1)]), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[UnaryOp(op=USub(), operand=BinOp(left=UnaryOp(op=USub(), operand=Name(id='max_line_len', ctx=Load())), op=FloorDiv(), right=Constant(value=10)))], keywords=[]), ifs=[], is_async=0)])], keywords=[])), op=Add(), right=Constant(value='\n'))), Assign(targets=[Name(id='header2', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='lead', ctx=Load()), op=Add(), right=BinOp(left=Constant(value='1234567890'), op=Mult(), right=UnaryOp(op=USub(), operand=BinOp(left=UnaryOp(op=USub(), operand=Name(id='max_line_len', ctx=Load())), op=FloorDiv(), right=Constant(value=10))))), op=Add(), right=Constant(value='\n'))), Return(value=BinOp(left=BinOp(left=BinOp(left=Name(id='header1', ctx=Load()), op=Add(), right=Name(id='header2', ctx=Load())), op=Add(), right=Call(func=Attribute(value=Constant(value='\n'), attr='join', ctx=Load()), args=[GeneratorExp(elt=JoinedStr(values=[FormattedValue(value=Name(id='i', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[FormattedValue(value=Name(id='lineno_width', ctx=Load()), conversion=-1), Constant(value='d')])), Constant(value=':'), FormattedValue(value=Name(id='line', ctx=Load()), conversion=-1), FormattedValue(value=Name(id='eol_mark', ctx=Load()), conversion=-1)]), generators=[comprehension(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='line', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='s_lines', ctx=Load())], keywords=[keyword(arg='start', value=Name(id='start_line', ctx=Load()))]), ifs=[], is_async=0)])], keywords=[])), op=Add(), right=Constant(value='\n')))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Name(id='str', ctx=Load()))], decorator_list=[])], type_ignores=[])