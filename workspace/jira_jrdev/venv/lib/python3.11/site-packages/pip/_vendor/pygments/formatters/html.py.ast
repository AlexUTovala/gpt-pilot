Module(body=[Expr(value=Constant(value='\n    pygments.formatters.html\n    ~~~~~~~~~~~~~~~~~~~~~~~~\n\n    Formatter for HTML output.\n\n    :copyright: Copyright 2006-2023 by the Pygments team, see AUTHORS.\n    :license: BSD, see LICENSE for details.\n')), Import(names=[alias(name='functools')]), Import(names=[alias(name='os')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='os.path')]), ImportFrom(module='io', names=[alias(name='StringIO')], level=0), ImportFrom(module='pip._vendor.pygments.formatter', names=[alias(name='Formatter')], level=0), ImportFrom(module='pip._vendor.pygments.token', names=[alias(name='Token'), alias(name='Text'), alias(name='STANDARD_TYPES')], level=0), ImportFrom(module='pip._vendor.pygments.util', names=[alias(name='get_bool_opt'), alias(name='get_int_opt'), alias(name='get_list_opt')], level=0), Try(body=[Import(names=[alias(name='ctags')])], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Assign(targets=[Name(id='ctags', ctx=Store())], value=Constant(value=None))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='HtmlFormatter')], ctx=Load())), Assign(targets=[Name(id='_escape_html_table', ctx=Store())], value=Dict(keys=[Call(func=Name(id='ord', ctx=Load()), args=[Constant(value='&')], keywords=[]), Call(func=Name(id='ord', ctx=Load()), args=[Constant(value='<')], keywords=[]), Call(func=Name(id='ord', ctx=Load()), args=[Constant(value='>')], keywords=[]), Call(func=Name(id='ord', ctx=Load()), args=[Constant(value='"')], keywords=[]), Call(func=Name(id='ord', ctx=Load()), args=[Constant(value="'")], keywords=[])], values=[Constant(value='&amp;'), Constant(value='&lt;'), Constant(value='&gt;'), Constant(value='&quot;'), Constant(value='&#39;')])), FunctionDef(name='escape_html', args=arguments(posonlyargs=[], args=[arg(arg='text'), arg(arg='table')], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='_escape_html_table', ctx=Load())]), body=[Expr(value=Constant(value='Escape &, <, > as well as single and double quotes for HTML.')), Return(value=Call(func=Attribute(value=Name(id='text', ctx=Load()), attr='translate', ctx=Load()), args=[Name(id='table', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='webify', args=arguments(posonlyargs=[], args=[arg(arg='color')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='color', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='calc')], keywords=[]), Call(func=Attribute(value=Name(id='color', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='var')], keywords=[])]), body=[Return(value=Name(id='color', ctx=Load()))], orelse=[Return(value=BinOp(left=Constant(value='#'), op=Add(), right=Name(id='color', ctx=Load())))])], decorator_list=[]), FunctionDef(name='_get_ttype_class', args=arguments(posonlyargs=[], args=[arg(arg='ttype')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='fname', ctx=Store())], value=Call(func=Attribute(value=Name(id='STANDARD_TYPES', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='ttype', ctx=Load())], keywords=[])), If(test=Name(id='fname', ctx=Load()), body=[Return(value=Name(id='fname', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='aname', ctx=Store())], value=Constant(value='')), While(test=Compare(left=Name(id='fname', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='aname', ctx=Store())], value=BinOp(left=BinOp(left=Constant(value='-'), op=Add(), right=Subscript(value=Name(id='ttype', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())), op=Add(), right=Name(id='aname', ctx=Load()))), Assign(targets=[Name(id='ttype', ctx=Store())], value=Attribute(value=Name(id='ttype', ctx=Load()), attr='parent', ctx=Load())), Assign(targets=[Name(id='fname', ctx=Store())], value=Call(func=Attribute(value=Name(id='STANDARD_TYPES', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='ttype', ctx=Load())], keywords=[]))], orelse=[]), Return(value=BinOp(left=Name(id='fname', ctx=Load()), op=Add(), right=Name(id='aname', ctx=Load())))], decorator_list=[]), Assign(targets=[Name(id='CSSFILE_TEMPLATE', ctx=Store())], value=Constant(value='/*\ngenerated by Pygments <https://pygments.org/>\nCopyright 2006-2023 by the Pygments team.\nLicensed under the BSD license, see LICENSE for details.\n*/\n%(styledefs)s\n')), Assign(targets=[Name(id='DOC_HEADER', ctx=Store())], value=BinOp(left=BinOp(left=Constant(value='<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN"\n   "http://www.w3.org/TR/html4/strict.dtd">\n<!--\ngenerated by Pygments <https://pygments.org/>\nCopyright 2006-2023 by the Pygments team.\nLicensed under the BSD license, see LICENSE for details.\n-->\n<html>\n<head>\n  <title>%(title)s</title>\n  <meta http-equiv="content-type" content="text/html; charset=%(encoding)s">\n  <style type="text/css">\n'), op=Add(), right=Name(id='CSSFILE_TEMPLATE', ctx=Load())), op=Add(), right=Constant(value='\n  </style>\n</head>\n<body>\n<h2>%(title)s</h2>\n\n'))), Assign(targets=[Name(id='DOC_HEADER_EXTERNALCSS', ctx=Store())], value=Constant(value='<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN"\n   "http://www.w3.org/TR/html4/strict.dtd">\n\n<html>\n<head>\n  <title>%(title)s</title>\n  <meta http-equiv="content-type" content="text/html; charset=%(encoding)s">\n  <link rel="stylesheet" href="%(cssfile)s" type="text/css">\n</head>\n<body>\n<h2>%(title)s</h2>\n\n')), Assign(targets=[Name(id='DOC_FOOTER', ctx=Store())], value=Constant(value='</body>\n</html>\n')), ClassDef(name='HtmlFormatter', bases=[Name(id='Formatter', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Format tokens as HTML 4 ``<span>`` tags. By default, the content is enclosed\n    in a ``<pre>`` tag, itself wrapped in a ``<div>`` tag (but see the `nowrap` option).\n    The ``<div>``\'s CSS class can be set by the `cssclass` option.\n\n    If the `linenos` option is set to ``"table"``, the ``<pre>`` is\n    additionally wrapped inside a ``<table>`` which has one row and two\n    cells: one containing the line numbers and one containing the code.\n    Example:\n\n    .. sourcecode:: html\n\n        <div class="highlight" >\n        <table><tr>\n          <td class="linenos" title="click to toggle"\n            onclick="with (this.firstChild.style)\n                     { display = (display == \'\') ? \'none\' : \'\' }">\n            <pre>1\n            2</pre>\n          </td>\n          <td class="code">\n            <pre><span class="Ke">def </span><span class="NaFu">foo</span>(bar):\n              <span class="Ke">pass</span>\n            </pre>\n          </td>\n        </tr></table></div>\n\n    (whitespace added to improve clarity).\n\n    A list of lines can be specified using the `hl_lines` option to make these\n    lines highlighted (as of Pygments 0.11).\n\n    With the `full` option, a complete HTML 4 document is output, including\n    the style definitions inside a ``<style>`` tag, or in a separate file if\n    the `cssfile` option is given.\n\n    When `tagsfile` is set to the path of a ctags index file, it is used to\n    generate hyperlinks from names to their definition.  You must enable\n    `lineanchors` and run ctags with the `-n` option for this to work.  The\n    `python-ctags` module from PyPI must be installed to use this feature;\n    otherwise a `RuntimeError` will be raised.\n\n    The `get_style_defs(arg=\'\')` method of a `HtmlFormatter` returns a string\n    containing CSS rules for the CSS classes used by the formatter. The\n    argument `arg` can be used to specify additional CSS selectors that\n    are prepended to the classes. A call `fmter.get_style_defs(\'td .code\')`\n    would result in the following CSS classes:\n\n    .. sourcecode:: css\n\n        td .code .kw { font-weight: bold; color: #00FF00 }\n        td .code .cm { color: #999999 }\n        ...\n\n    If you have Pygments 0.6 or higher, you can also pass a list or tuple to the\n    `get_style_defs()` method to request multiple prefixes for the tokens:\n\n    .. sourcecode:: python\n\n        formatter.get_style_defs([\'div.syntax pre\', \'pre.syntax\'])\n\n    The output would then look like this:\n\n    .. sourcecode:: css\n\n        div.syntax pre .kw,\n        pre.syntax .kw { font-weight: bold; color: #00FF00 }\n        div.syntax pre .cm,\n        pre.syntax .cm { color: #999999 }\n        ...\n\n    Additional options accepted:\n\n    `nowrap`\n        If set to ``True``, don\'t add a ``<pre>`` and a ``<div>`` tag\n        around the tokens. This disables most other options (default: ``False``).\n\n    `full`\n        Tells the formatter to output a "full" document, i.e. a complete\n        self-contained document (default: ``False``).\n\n    `title`\n        If `full` is true, the title that should be used to caption the\n        document (default: ``\'\'``).\n\n    `style`\n        The style to use, can be a string or a Style subclass (default:\n        ``\'default\'``). This option has no effect if the `cssfile`\n        and `noclobber_cssfile` option are given and the file specified in\n        `cssfile` exists.\n\n    `noclasses`\n        If set to true, token ``<span>`` tags (as well as line number elements)\n        will not use CSS classes, but inline styles. This is not recommended\n        for larger pieces of code since it increases output size by quite a bit\n        (default: ``False``).\n\n    `classprefix`\n        Since the token types use relatively short class names, they may clash\n        with some of your own class names. In this case you can use the\n        `classprefix` option to give a string to prepend to all Pygments-generated\n        CSS class names for token types.\n        Note that this option also affects the output of `get_style_defs()`.\n\n    `cssclass`\n        CSS class for the wrapping ``<div>`` tag (default: ``\'highlight\'``).\n        If you set this option, the default selector for `get_style_defs()`\n        will be this class.\n\n        .. versionadded:: 0.9\n           If you select the ``\'table\'`` line numbers, the wrapping table will\n           have a CSS class of this string plus ``\'table\'``, the default is\n           accordingly ``\'highlighttable\'``.\n\n    `cssstyles`\n        Inline CSS styles for the wrapping ``<div>`` tag (default: ``\'\'``).\n\n    `prestyles`\n        Inline CSS styles for the ``<pre>`` tag (default: ``\'\'``).\n\n        .. versionadded:: 0.11\n\n    `cssfile`\n        If the `full` option is true and this option is given, it must be the\n        name of an external file. If the filename does not include an absolute\n        path, the file\'s path will be assumed to be relative to the main output\n        file\'s path, if the latter can be found. The stylesheet is then written\n        to this file instead of the HTML file.\n\n        .. versionadded:: 0.6\n\n    `noclobber_cssfile`\n        If `cssfile` is given and the specified file exists, the css file will\n        not be overwritten. This allows the use of the `full` option in\n        combination with a user specified css file. Default is ``False``.\n\n        .. versionadded:: 1.1\n\n    `linenos`\n        If set to ``\'table\'``, output line numbers as a table with two cells,\n        one containing the line numbers, the other the whole code.  This is\n        copy-and-paste-friendly, but may cause alignment problems with some\n        browsers or fonts.  If set to ``\'inline\'``, the line numbers will be\n        integrated in the ``<pre>`` tag that contains the code (that setting\n        is *new in Pygments 0.8*).\n\n        For compatibility with Pygments 0.7 and earlier, every true value\n        except ``\'inline\'`` means the same as ``\'table\'`` (in particular, that\n        means also ``True``).\n\n        The default value is ``False``, which means no line numbers at all.\n\n        **Note:** with the default ("table") line number mechanism, the line\n        numbers and code can have different line heights in Internet Explorer\n        unless you give the enclosing ``<pre>`` tags an explicit ``line-height``\n        CSS property (you get the default line spacing with ``line-height:\n        125%``).\n\n    `hl_lines`\n        Specify a list of lines to be highlighted. The line numbers are always\n        relative to the input (i.e. the first line is line 1) and are\n        independent of `linenostart`.\n\n        .. versionadded:: 0.11\n\n    `linenostart`\n        The line number for the first line (default: ``1``).\n\n    `linenostep`\n        If set to a number n > 1, only every nth line number is printed.\n\n    `linenospecial`\n        If set to a number n > 0, every nth line number is given the CSS\n        class ``"special"`` (default: ``0``).\n\n    `nobackground`\n        If set to ``True``, the formatter won\'t output the background color\n        for the wrapping element (this automatically defaults to ``False``\n        when there is no wrapping element [eg: no argument for the\n        `get_syntax_defs` method given]) (default: ``False``).\n\n        .. versionadded:: 0.6\n\n    `lineseparator`\n        This string is output between lines of code. It defaults to ``"\\n"``,\n        which is enough to break a line inside ``<pre>`` tags, but you can\n        e.g. set it to ``"<br>"`` to get HTML line breaks.\n\n        .. versionadded:: 0.7\n\n    `lineanchors`\n        If set to a nonempty string, e.g. ``foo``, the formatter will wrap each\n        output line in an anchor tag with an ``id`` (and `name`) of ``foo-linenumber``.\n        This allows easy linking to certain lines.\n\n        .. versionadded:: 0.9\n\n    `linespans`\n        If set to a nonempty string, e.g. ``foo``, the formatter will wrap each\n        output line in a span tag with an ``id`` of ``foo-linenumber``.\n        This allows easy access to lines via javascript.\n\n        .. versionadded:: 1.6\n\n    `anchorlinenos`\n        If set to `True`, will wrap line numbers in <a> tags. Used in\n        combination with `linenos` and `lineanchors`.\n\n    `tagsfile`\n        If set to the path of a ctags file, wrap names in anchor tags that\n        link to their definitions. `lineanchors` should be used, and the\n        tags file should specify line numbers (see the `-n` option to ctags).\n\n        .. versionadded:: 1.6\n\n    `tagurlformat`\n        A string formatting pattern used to generate links to ctags definitions.\n        Available variables are `%(path)s`, `%(fname)s` and `%(fext)s`.\n        Defaults to an empty string, resulting in just `#prefix-number` links.\n\n        .. versionadded:: 1.6\n\n    `filename`\n        A string used to generate a filename when rendering ``<pre>`` blocks,\n        for example if displaying source code. If `linenos` is set to\n        ``\'table\'`` then the filename will be rendered in an initial row\n        containing a single `<th>` which spans both columns.\n\n        .. versionadded:: 2.1\n\n    `wrapcode`\n        Wrap the code inside ``<pre>`` blocks using ``<code>``, as recommended\n        by the HTML5 specification.\n\n        .. versionadded:: 2.4\n\n    `debug_token_types`\n        Add ``title`` attributes to all token ``<span>`` tags that show the\n        name of the token.\n\n        .. versionadded:: 2.10\n\n\n    **Subclassing the HTML formatter**\n\n    .. versionadded:: 0.7\n\n    The HTML formatter is now built in a way that allows easy subclassing, thus\n    customizing the output HTML code. The `format()` method calls\n    `self._format_lines()` which returns a generator that yields tuples of ``(1,\n    line)``, where the ``1`` indicates that the ``line`` is a line of the\n    formatted source code.\n\n    If the `nowrap` option is set, the generator is the iterated over and the\n    resulting HTML is output.\n\n    Otherwise, `format()` calls `self.wrap()`, which wraps the generator with\n    other generators. These may add some HTML code to the one generated by\n    `_format_lines()`, either by modifying the lines generated by the latter,\n    then yielding them again with ``(1, line)``, and/or by yielding other HTML\n    code before or after the lines, with ``(0, html)``. The distinction between\n    source lines and other code makes it possible to wrap the generator multiple\n    times.\n\n    The default `wrap()` implementation adds a ``<div>`` and a ``<pre>`` tag.\n\n    A custom `HtmlFormatter` subclass could look like this:\n\n    .. sourcecode:: python\n\n        class CodeHtmlFormatter(HtmlFormatter):\n\n            def wrap(self, source, *, include_div):\n                return self._wrap_code(source)\n\n            def _wrap_code(self, source):\n                yield 0, \'<code>\'\n                for i, t in source:\n                    if i == 1:\n                        # it\'s a line of formatted code\n                        t += \'<br>\'\n                    yield i, t\n                yield 0, \'</code>\'\n\n    This results in wrapping the formatted lines with a ``<code>`` tag, where the\n    source lines are broken using ``<br>`` tags.\n\n    After calling `wrap()`, the `format()` method also adds the "line numbers"\n    and/or "full document" wrappers if the respective options are set. Then, all\n    HTML yielded by the wrapped generator is output.\n    ')), Assign(targets=[Name(id='name', ctx=Store())], value=Constant(value='HTML')), Assign(targets=[Name(id='aliases', ctx=Store())], value=List(elts=[Constant(value='html')], ctx=Load())), Assign(targets=[Name(id='filenames', ctx=Store())], value=List(elts=[Constant(value='*.html'), Constant(value='*.htm')], ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='options'), defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='Formatter', ctx=Load()), attr='__init__', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[keyword(value=Name(id='options', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='title', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_decodeifneeded', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='title', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='nowrap', ctx=Store())], value=Call(func=Name(id='get_bool_opt', ctx=Load()), args=[Name(id='options', ctx=Load()), Constant(value='nowrap'), Constant(value=False)], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='noclasses', ctx=Store())], value=Call(func=Name(id='get_bool_opt', ctx=Load()), args=[Name(id='options', ctx=Load()), Constant(value='noclasses'), Constant(value=False)], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='classprefix', ctx=Store())], value=Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='classprefix'), Constant(value='')], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='cssclass', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_decodeifneeded', ctx=Load()), args=[Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='cssclass'), Constant(value='highlight')], keywords=[])], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='cssstyles', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_decodeifneeded', ctx=Load()), args=[Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='cssstyles'), Constant(value='')], keywords=[])], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='prestyles', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_decodeifneeded', ctx=Load()), args=[Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='prestyles'), Constant(value='')], keywords=[])], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='cssfile', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_decodeifneeded', ctx=Load()), args=[Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='cssfile'), Constant(value='')], keywords=[])], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='noclobber_cssfile', ctx=Store())], value=Call(func=Name(id='get_bool_opt', ctx=Load()), args=[Name(id='options', ctx=Load()), Constant(value='noclobber_cssfile'), Constant(value=False)], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='tagsfile', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_decodeifneeded', ctx=Load()), args=[Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='tagsfile'), Constant(value='')], keywords=[])], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='tagurlformat', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_decodeifneeded', ctx=Load()), args=[Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='tagurlformat'), Constant(value='')], keywords=[])], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='filename', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_decodeifneeded', ctx=Load()), args=[Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='filename'), Constant(value='')], keywords=[])], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='wrapcode', ctx=Store())], value=Call(func=Name(id='get_bool_opt', ctx=Load()), args=[Name(id='options', ctx=Load()), Constant(value='wrapcode'), Constant(value=False)], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='span_element_openers', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='debug_token_types', ctx=Store())], value=Call(func=Name(id='get_bool_opt', ctx=Load()), args=[Name(id='options', ctx=Load()), Constant(value='debug_token_types'), Constant(value=False)], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='tagsfile', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Name(id='ctags', ctx=Load())), body=[Raise(exc=Call(func=Name(id='RuntimeError', ctx=Load()), args=[Constant(value='The "ctags" package must to be installed to be able to use the "tagsfile" feature.')], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_ctags', ctx=Store())], value=Call(func=Attribute(value=Name(id='ctags', ctx=Load()), attr='CTags', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='tagsfile', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='linenos', ctx=Store())], value=Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='linenos'), Constant(value=False)], keywords=[])), If(test=Compare(left=Name(id='linenos', ctx=Load()), ops=[Eq()], comparators=[Constant(value='inline')]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='linenos', ctx=Store())], value=Constant(value=2))], orelse=[If(test=Name(id='linenos', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='linenos', ctx=Store())], value=Constant(value=1))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='linenos', ctx=Store())], value=Constant(value=0))])]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='linenostart', ctx=Store())], value=Call(func=Name(id='abs', ctx=Load()), args=[Call(func=Name(id='get_int_opt', ctx=Load()), args=[Name(id='options', ctx=Load()), Constant(value='linenostart'), Constant(value=1)], keywords=[])], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='linenostep', ctx=Store())], value=Call(func=Name(id='abs', ctx=Load()), args=[Call(func=Name(id='get_int_opt', ctx=Load()), args=[Name(id='options', ctx=Load()), Constant(value='linenostep'), Constant(value=1)], keywords=[])], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='linenospecial', ctx=Store())], value=Call(func=Name(id='abs', ctx=Load()), args=[Call(func=Name(id='get_int_opt', ctx=Load()), args=[Name(id='options', ctx=Load()), Constant(value='linenospecial'), Constant(value=0)], keywords=[])], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='nobackground', ctx=Store())], value=Call(func=Name(id='get_bool_opt', ctx=Load()), args=[Name(id='options', ctx=Load()), Constant(value='nobackground'), Constant(value=False)], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='lineseparator', ctx=Store())], value=Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='lineseparator'), Constant(value='\n')], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='lineanchors', ctx=Store())], value=Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='lineanchors'), Constant(value='')], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='linespans', ctx=Store())], value=Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='linespans'), Constant(value='')], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='anchorlinenos', ctx=Store())], value=Call(func=Name(id='get_bool_opt', ctx=Load()), args=[Name(id='options', ctx=Load()), Constant(value='anchorlinenos'), Constant(value=False)], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='hl_lines', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), For(target=Name(id='lineno', ctx=Store()), iter=Call(func=Name(id='get_list_opt', ctx=Load()), args=[Name(id='options', ctx=Load()), Constant(value='hl_lines'), List(elts=[], ctx=Load())], keywords=[]), body=[Try(body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='hl_lines', ctx=Load()), attr='add', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Name(id='lineno', ctx=Load())], keywords=[])], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_create_stylesheet', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='_get_css_class', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ttype')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the css class of this token type prefixed with\n        the classprefix option.')), Assign(targets=[Name(id='ttypeclass', ctx=Store())], value=Call(func=Name(id='_get_ttype_class', ctx=Load()), args=[Name(id='ttype', ctx=Load())], keywords=[])), If(test=Name(id='ttypeclass', ctx=Load()), body=[Return(value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='classprefix', ctx=Load()), op=Add(), right=Name(id='ttypeclass', ctx=Load())))], orelse=[]), Return(value=Constant(value=''))], decorator_list=[]), FunctionDef(name='_get_css_classes', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ttype')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the CSS classes of this token type prefixed with the classprefix option.')), Assign(targets=[Name(id='cls', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_css_class', ctx=Load()), args=[Name(id='ttype', ctx=Load())], keywords=[])), While(test=Compare(left=Name(id='ttype', ctx=Load()), ops=[NotIn()], comparators=[Name(id='STANDARD_TYPES', ctx=Load())]), body=[Assign(targets=[Name(id='ttype', ctx=Store())], value=Attribute(value=Name(id='ttype', ctx=Load()), attr='parent', ctx=Load())), Assign(targets=[Name(id='cls', ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_css_class', ctx=Load()), args=[Name(id='ttype', ctx=Load())], keywords=[]), op=Add(), right=Constant(value=' ')), op=Add(), right=Name(id='cls', ctx=Load())))], orelse=[]), Return(value=BoolOp(op=Or(), values=[Name(id='cls', ctx=Load()), Constant(value='')]))], decorator_list=[]), FunctionDef(name='_get_css_inline_styles', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ttype')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the inline CSS styles for this token type.')), Assign(targets=[Name(id='cclass', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='ttype2class', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='ttype', ctx=Load())], keywords=[])), While(test=Compare(left=Name(id='cclass', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='ttype', ctx=Store())], value=Attribute(value=Name(id='ttype', ctx=Load()), attr='parent', ctx=Load())), Assign(targets=[Name(id='cclass', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='ttype2class', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='ttype', ctx=Load())], keywords=[]))], orelse=[]), Return(value=BoolOp(op=Or(), values=[Name(id='cclass', ctx=Load()), Constant(value='')]))], decorator_list=[]), FunctionDef(name='_create_stylesheet', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='t2c', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='ttype2class', ctx=Store())], value=Dict(keys=[Name(id='Token', ctx=Load())], values=[Constant(value='')])), Assign(targets=[Name(id='c2s', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='class2style', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='ttype', ctx=Store()), Name(id='ndef', ctx=Store())], ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load()), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_css_class', ctx=Load()), args=[Name(id='ttype', ctx=Load())], keywords=[])), Assign(targets=[Name(id='style', ctx=Store())], value=Constant(value='')), If(test=Subscript(value=Name(id='ndef', ctx=Load()), slice=Constant(value='color'), ctx=Load()), body=[AugAssign(target=Name(id='style', ctx=Store()), op=Add(), value=BinOp(left=Constant(value='color: %s; '), op=Mod(), right=Call(func=Name(id='webify', ctx=Load()), args=[Subscript(value=Name(id='ndef', ctx=Load()), slice=Constant(value='color'), ctx=Load())], keywords=[])))], orelse=[]), If(test=Subscript(value=Name(id='ndef', ctx=Load()), slice=Constant(value='bold'), ctx=Load()), body=[AugAssign(target=Name(id='style', ctx=Store()), op=Add(), value=Constant(value='font-weight: bold; '))], orelse=[]), If(test=Subscript(value=Name(id='ndef', ctx=Load()), slice=Constant(value='italic'), ctx=Load()), body=[AugAssign(target=Name(id='style', ctx=Store()), op=Add(), value=Constant(value='font-style: italic; '))], orelse=[]), If(test=Subscript(value=Name(id='ndef', ctx=Load()), slice=Constant(value='underline'), ctx=Load()), body=[AugAssign(target=Name(id='style', ctx=Store()), op=Add(), value=Constant(value='text-decoration: underline; '))], orelse=[]), If(test=Subscript(value=Name(id='ndef', ctx=Load()), slice=Constant(value='bgcolor'), ctx=Load()), body=[AugAssign(target=Name(id='style', ctx=Store()), op=Add(), value=BinOp(left=Constant(value='background-color: %s; '), op=Mod(), right=Call(func=Name(id='webify', ctx=Load()), args=[Subscript(value=Name(id='ndef', ctx=Load()), slice=Constant(value='bgcolor'), ctx=Load())], keywords=[])))], orelse=[]), If(test=Subscript(value=Name(id='ndef', ctx=Load()), slice=Constant(value='border'), ctx=Load()), body=[AugAssign(target=Name(id='style', ctx=Store()), op=Add(), value=BinOp(left=Constant(value='border: 1px solid %s; '), op=Mod(), right=Call(func=Name(id='webify', ctx=Load()), args=[Subscript(value=Name(id='ndef', ctx=Load()), slice=Constant(value='border'), ctx=Load())], keywords=[])))], orelse=[]), If(test=Name(id='style', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='t2c', ctx=Load()), slice=Name(id='ttype', ctx=Load()), ctx=Store())], value=Name(id='name', ctx=Load())), Assign(targets=[Subscript(value=Name(id='c2s', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Tuple(elts=[Subscript(value=Name(id='style', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=2))), ctx=Load()), Name(id='ttype', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='ttype', ctx=Load())], keywords=[])], ctx=Load()))], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='get_style_defs', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='arg')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='\n        Return CSS style definitions for the classes produced by the current\n        highlighting style. ``arg`` can be a string or list of selectors to\n        insert before the token type classes.\n        ')), Assign(targets=[Name(id='style_lines', ctx=Store())], value=List(elts=[], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='style_lines', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_linenos_style_defs', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='style_lines', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_background_style_defs', ctx=Load()), args=[Name(id='arg', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='style_lines', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_token_style_defs', ctx=Load()), args=[Name(id='arg', ctx=Load())], keywords=[])], keywords=[])), Return(value=Call(func=Attribute(value=Constant(value='\n'), attr='join', ctx=Load()), args=[Name(id='style_lines', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='get_token_style_defs', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='arg')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Name(id='prefix', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_css_prefix', ctx=Load()), args=[Name(id='arg', ctx=Load())], keywords=[])), Assign(targets=[Name(id='styles', ctx=Store())], value=ListComp(elt=Tuple(elts=[Name(id='level', ctx=Load()), Name(id='ttype', ctx=Load()), Name(id='cls', ctx=Load()), Name(id='style', ctx=Load())], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='cls', ctx=Store()), Tuple(elts=[Name(id='style', ctx=Store()), Name(id='ttype', ctx=Store()), Name(id='level', ctx=Store())], ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='class2style', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[BoolOp(op=And(), values=[Name(id='cls', ctx=Load()), Name(id='style', ctx=Load())])], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='styles', ctx=Load()), attr='sort', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='lines', ctx=Store())], value=ListComp(elt=BinOp(left=Constant(value='%s { %s } /* %s */'), op=Mod(), right=Tuple(elts=[Call(func=Name(id='prefix', ctx=Load()), args=[Name(id='cls', ctx=Load())], keywords=[]), Name(id='style', ctx=Load()), Subscript(value=Call(func=Name(id='repr', ctx=Load()), args=[Name(id='ttype', ctx=Load())], keywords=[]), slice=Slice(lower=Constant(value=6)), ctx=Load())], ctx=Load())), generators=[comprehension(target=Tuple(elts=[Name(id='level', ctx=Store()), Name(id='ttype', ctx=Store()), Name(id='cls', ctx=Store()), Name(id='style', ctx=Store())], ctx=Store()), iter=Name(id='styles', ctx=Load()), ifs=[], is_async=0)])), Return(value=Name(id='lines', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_background_style_defs', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='arg')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Name(id='prefix', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_css_prefix', ctx=Load()), args=[Name(id='arg', ctx=Load())], keywords=[])), Assign(targets=[Name(id='bg_color', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load()), attr='background_color', ctx=Load())), Assign(targets=[Name(id='hl_color', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load()), attr='highlight_color', ctx=Load())), Assign(targets=[Name(id='lines', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=BoolOp(op=And(), values=[Name(id='arg', ctx=Load()), UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='nobackground', ctx=Load())), Compare(left=Name(id='bg_color', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Name(id='text_style', ctx=Store())], value=Constant(value='')), If(test=Compare(left=Name(id='Text', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='ttype2class', ctx=Load())]), body=[Assign(targets=[Name(id='text_style', ctx=Store())], value=BinOp(left=Constant(value=' '), op=Add(), right=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='class2style', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='ttype2class', ctx=Load()), slice=Name(id='Text', ctx=Load()), ctx=Load()), ctx=Load()), slice=Constant(value=0), ctx=Load())))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='insert', ctx=Load()), args=[Constant(value=0), BinOp(left=Constant(value='%s{ background: %s;%s }'), op=Mod(), right=Tuple(elts=[Call(func=Name(id='prefix', ctx=Load()), args=[Constant(value='')], keywords=[]), Name(id='bg_color', ctx=Load()), Name(id='text_style', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='hl_color', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='insert', ctx=Load()), args=[Constant(value=0), BinOp(left=Constant(value='%s { background-color: %s }'), op=Mod(), right=Tuple(elts=[Call(func=Name(id='prefix', ctx=Load()), args=[Constant(value='hll')], keywords=[]), Name(id='hl_color', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[]), Return(value=Name(id='lines', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_linenos_style_defs', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='lines', ctx=Store())], value=List(elts=[BinOp(left=Constant(value='pre { %s }'), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_pre_style', ctx=Load())), BinOp(left=Constant(value='td.linenos .normal { %s }'), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_linenos_style', ctx=Load())), BinOp(left=Constant(value='span.linenos { %s }'), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_linenos_style', ctx=Load())), BinOp(left=Constant(value='td.linenos .special { %s }'), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_linenos_special_style', ctx=Load())), BinOp(left=Constant(value='span.linenos.special { %s }'), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_linenos_special_style', ctx=Load()))], ctx=Load())), Return(value=Name(id='lines', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_css_prefix', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='arg')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='arg', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='arg', ctx=Store())], value=BoolOp(op=Or(), values=[BoolOp(op=And(), values=[Compare(left=Constant(value='cssclass'), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())]), BinOp(left=Constant(value='.'), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='cssclass', ctx=Load()))]), Constant(value='')]))], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='arg', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='args', ctx=Store())], value=List(elts=[Name(id='arg', ctx=Load())], ctx=Load()))], orelse=[Assign(targets=[Name(id='args', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='arg', ctx=Load())], keywords=[]))]), FunctionDef(name='prefix', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Name(id='cls', ctx=Load()), body=[Assign(targets=[Name(id='cls', ctx=Store())], value=BinOp(left=Constant(value='.'), op=Add(), right=Name(id='cls', ctx=Load())))], orelse=[]), Assign(targets=[Name(id='tmp', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='arg', ctx=Store()), iter=Name(id='args', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='tmp', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=BoolOp(op=Or(), values=[BoolOp(op=And(), values=[Name(id='arg', ctx=Load()), BinOp(left=Name(id='arg', ctx=Load()), op=Add(), right=Constant(value=' '))]), Constant(value='')]), op=Add(), right=Name(id='cls', ctx=Load()))], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Name(id='tmp', ctx=Load())], keywords=[]))], decorator_list=[]), Return(value=Name(id='prefix', ctx=Load()))], decorator_list=[]), FunctionDef(name='_pre_style', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value='line-height: 125%;'))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='_linenos_style', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Constant(value='color: %s; background-color: %s; padding-left: 5px; padding-right: 5px;'), op=Mod(), right=Tuple(elts=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load()), attr='line_number_color', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load()), attr='line_number_background_color', ctx=Load())], ctx=Load())))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='_linenos_special_style', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Constant(value='color: %s; background-color: %s; padding-left: 5px; padding-right: 5px;'), op=Mod(), right=Tuple(elts=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load()), attr='line_number_special_color', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load()), attr='line_number_special_background_color', ctx=Load())], ctx=Load())))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='_decodeifneeded', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='bytes', ctx=Load())], keywords=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='encoding', ctx=Load()), body=[Return(value=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='decode', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='encoding', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='decode', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Name(id='value', ctx=Load()))], decorator_list=[]), FunctionDef(name='_wrap_full', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='inner'), arg(arg='outfile')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='cssfile', ctx=Load()), body=[If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isabs', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='cssfile', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='cssfilename', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='cssfile', ctx=Load()))], orelse=[Try(body=[Assign(targets=[Name(id='filename', ctx=Store())], value=Attribute(value=Name(id='outfile', ctx=Load()), attr='name', ctx=Load())), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Name(id='filename', ctx=Load())), Compare(left=Subscript(value=Name(id='filename', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Constant(value='<')])]), body=[Raise(exc=Name(id='AttributeError', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='cssfilename', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='cssfile', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='Note: Cannot determine output file name, using current directory as base for the CSS file name')], keywords=[keyword(arg='file', value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()))])), Assign(targets=[Name(id='cssfilename', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='cssfile', ctx=Load()))])], orelse=[], finalbody=[])]), Try(body=[If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='cssfilename', ctx=Load())], keywords=[])), UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='noclobber_cssfile', ctx=Load()))]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='cssfilename', ctx=Load()), Constant(value='w')], keywords=[keyword(arg='encoding', value=Constant(value='utf-8'))]), optional_vars=Name(id='cf', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='cf', ctx=Load()), attr='write', ctx=Load()), args=[BinOp(left=Name(id='CSSFILE_TEMPLATE', ctx=Load()), op=Mod(), right=Dict(keys=[Constant(value='styledefs')], values=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_style_defs', ctx=Load()), args=[Constant(value='body')], keywords=[])]))], keywords=[]))])], orelse=[])], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), name='err', body=[Assign(targets=[Attribute(value=Name(id='err', ctx=Load()), attr='strerror', ctx=Store())], value=BinOp(left=Constant(value='Error writing CSS file: '), op=Add(), right=Attribute(value=Name(id='err', ctx=Load()), attr='strerror', ctx=Load()))), Raise()])], orelse=[], finalbody=[]), Expr(value=Yield(value=Tuple(elts=[Constant(value=0), BinOp(left=Name(id='DOC_HEADER_EXTERNALCSS', ctx=Load()), op=Mod(), right=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='title', value=Attribute(value=Name(id='self', ctx=Load()), attr='title', ctx=Load())), keyword(arg='cssfile', value=Attribute(value=Name(id='self', ctx=Load()), attr='cssfile', ctx=Load())), keyword(arg='encoding', value=Attribute(value=Name(id='self', ctx=Load()), attr='encoding', ctx=Load()))]))], ctx=Load())))], orelse=[Expr(value=Yield(value=Tuple(elts=[Constant(value=0), BinOp(left=Name(id='DOC_HEADER', ctx=Load()), op=Mod(), right=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='title', value=Attribute(value=Name(id='self', ctx=Load()), attr='title', ctx=Load())), keyword(arg='styledefs', value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_style_defs', ctx=Load()), args=[Constant(value='body')], keywords=[])), keyword(arg='encoding', value=Attribute(value=Name(id='self', ctx=Load()), attr='encoding', ctx=Load()))]))], ctx=Load())))]), Expr(value=YieldFrom(value=Name(id='inner', ctx=Load()))), Expr(value=Yield(value=Tuple(elts=[Constant(value=0), Name(id='DOC_FOOTER', ctx=Load())], ctx=Load())))], decorator_list=[]), FunctionDef(name='_wrap_tablelinenos', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='inner')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='dummyoutfile', ctx=Store())], value=Call(func=Name(id='StringIO', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='lncount', ctx=Store())], value=Constant(value=0)), For(target=Tuple(elts=[Name(id='t', ctx=Store()), Name(id='line', ctx=Store())], ctx=Store()), iter=Name(id='inner', ctx=Load()), body=[If(test=Name(id='t', ctx=Load()), body=[AugAssign(target=Name(id='lncount', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='dummyoutfile', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='fl', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='linenostart', ctx=Load())), Assign(targets=[Name(id='mw', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='lncount', ctx=Load()), op=Add(), right=Name(id='fl', ctx=Load())), op=Sub(), right=Constant(value=1))], keywords=[])], keywords=[])), Assign(targets=[Name(id='sp', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='linenospecial', ctx=Load())), Assign(targets=[Name(id='st', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='linenostep', ctx=Load())), Assign(targets=[Name(id='anchor_name', ctx=Store())], value=BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='lineanchors', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='linespans', ctx=Load())])), Assign(targets=[Name(id='aln', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='anchorlinenos', ctx=Load())), Assign(targets=[Name(id='nocls', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='noclasses', ctx=Load())), Assign(targets=[Name(id='lines', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='fl', ctx=Load()), BinOp(left=Name(id='fl', ctx=Load()), op=Add(), right=Name(id='lncount', ctx=Load()))], keywords=[]), body=[Assign(targets=[Name(id='print_line', ctx=Store())], value=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Name(id='st', ctx=Load())), ops=[Eq()], comparators=[Constant(value=0)])), Assign(targets=[Name(id='special_line', ctx=Store())], value=BoolOp(op=And(), values=[Name(id='sp', ctx=Load()), Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Mod(), right=Name(id='sp', ctx=Load())), ops=[Eq()], comparators=[Constant(value=0)])])), If(test=Name(id='print_line', ctx=Load()), body=[Assign(targets=[Name(id='line', ctx=Store())], value=BinOp(left=Constant(value='%*d'), op=Mod(), right=Tuple(elts=[Name(id='mw', ctx=Load()), Name(id='i', ctx=Load())], ctx=Load()))), If(test=Name(id='aln', ctx=Load()), body=[Assign(targets=[Name(id='line', ctx=Store())], value=BinOp(left=Constant(value='<a href="#%s-%d">%s</a>'), op=Mod(), right=Tuple(elts=[Name(id='anchor_name', ctx=Load()), Name(id='i', ctx=Load()), Name(id='line', ctx=Load())], ctx=Load())))], orelse=[])], orelse=[Assign(targets=[Name(id='line', ctx=Store())], value=BinOp(left=Constant(value=' '), op=Mult(), right=Name(id='mw', ctx=Load())))]), If(test=Name(id='nocls', ctx=Load()), body=[If(test=Name(id='special_line', ctx=Load()), body=[Assign(targets=[Name(id='style', ctx=Store())], value=BinOp(left=Constant(value=' style="%s"'), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_linenos_special_style', ctx=Load())))], orelse=[Assign(targets=[Name(id='style', ctx=Store())], value=BinOp(left=Constant(value=' style="%s"'), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_linenos_style', ctx=Load())))])], orelse=[If(test=Name(id='special_line', ctx=Load()), body=[Assign(targets=[Name(id='style', ctx=Store())], value=Constant(value=' class="special"'))], orelse=[Assign(targets=[Name(id='style', ctx=Store())], value=Constant(value=' class="normal"'))])]), If(test=Name(id='style', ctx=Load()), body=[Assign(targets=[Name(id='line', ctx=Store())], value=BinOp(left=Constant(value='<span%s>%s</span>'), op=Mod(), right=Tuple(elts=[Name(id='style', ctx=Load()), Name(id='line', ctx=Load())], ctx=Load())))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='ls', ctx=Store())], value=Call(func=Attribute(value=Constant(value='\n'), attr='join', ctx=Load()), args=[Name(id='lines', ctx=Load())], keywords=[])), Assign(targets=[Name(id='filename_tr', ctx=Store())], value=Constant(value='')), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='filename', ctx=Load()), body=[Assign(targets=[Name(id='filename_tr', ctx=Store())], value=BinOp(left=BinOp(left=Constant(value='<tr><th colspan="2" class="filename"><span class="filename">'), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='filename', ctx=Load())), op=Add(), right=Constant(value='</span></th></tr>')))], orelse=[]), Expr(value=Yield(value=Tuple(elts=[Constant(value=0), BinOp(left=BinOp(left=BinOp(left=BinOp(left=JoinedStr(values=[Constant(value='<table class="'), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='cssclass', ctx=Load()), conversion=-1), Constant(value='table">')]), op=Add(), right=Name(id='filename_tr', ctx=Load())), op=Add(), right=Constant(value='<tr><td class="linenos"><div class="linenodiv"><pre>')), op=Add(), right=Name(id='ls', ctx=Load())), op=Add(), right=Constant(value='</pre></div></td><td class="code">'))], ctx=Load()))), Expr(value=Yield(value=Tuple(elts=[Constant(value=0), Constant(value='<div>')], ctx=Load()))), Expr(value=Yield(value=Tuple(elts=[Constant(value=0), Call(func=Attribute(value=Name(id='dummyoutfile', ctx=Load()), attr='getvalue', ctx=Load()), args=[], keywords=[])], ctx=Load()))), Expr(value=Yield(value=Tuple(elts=[Constant(value=0), Constant(value='</div>')], ctx=Load()))), Expr(value=Yield(value=Tuple(elts=[Constant(value=0), Constant(value='</td></tr></table>')], ctx=Load())))], decorator_list=[]), FunctionDef(name='_wrap_inlinelinenos', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='inner')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='inner_lines', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='inner', ctx=Load())], keywords=[])), Assign(targets=[Name(id='sp', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='linenospecial', ctx=Load())), Assign(targets=[Name(id='st', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='linenostep', ctx=Load())), Assign(targets=[Name(id='num', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='linenostart', ctx=Load())), Assign(targets=[Name(id='mw', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[BinOp(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='inner_lines', ctx=Load())], keywords=[]), op=Add(), right=Name(id='num', ctx=Load())), op=Sub(), right=Constant(value=1))], keywords=[])], keywords=[])), Assign(targets=[Name(id='anchor_name', ctx=Store())], value=BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='lineanchors', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='linespans', ctx=Load())])), Assign(targets=[Name(id='aln', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='anchorlinenos', ctx=Load())), Assign(targets=[Name(id='nocls', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='noclasses', ctx=Load())), For(target=Tuple(elts=[Name(id='_', ctx=Store()), Name(id='inner_line', ctx=Store())], ctx=Store()), iter=Name(id='inner_lines', ctx=Load()), body=[Assign(targets=[Name(id='print_line', ctx=Store())], value=Compare(left=BinOp(left=Name(id='num', ctx=Load()), op=Mod(), right=Name(id='st', ctx=Load())), ops=[Eq()], comparators=[Constant(value=0)])), Assign(targets=[Name(id='special_line', ctx=Store())], value=BoolOp(op=And(), values=[Name(id='sp', ctx=Load()), Compare(left=BinOp(left=Name(id='num', ctx=Load()), op=Mod(), right=Name(id='sp', ctx=Load())), ops=[Eq()], comparators=[Constant(value=0)])])), If(test=Name(id='print_line', ctx=Load()), body=[Assign(targets=[Name(id='line', ctx=Store())], value=BinOp(left=Constant(value='%*d'), op=Mod(), right=Tuple(elts=[Name(id='mw', ctx=Load()), Name(id='num', ctx=Load())], ctx=Load())))], orelse=[Assign(targets=[Name(id='line', ctx=Store())], value=BinOp(left=Constant(value=' '), op=Mult(), right=Name(id='mw', ctx=Load())))]), If(test=Name(id='nocls', ctx=Load()), body=[If(test=Name(id='special_line', ctx=Load()), body=[Assign(targets=[Name(id='style', ctx=Store())], value=BinOp(left=Constant(value=' style="%s"'), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_linenos_special_style', ctx=Load())))], orelse=[Assign(targets=[Name(id='style', ctx=Store())], value=BinOp(left=Constant(value=' style="%s"'), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_linenos_style', ctx=Load())))])], orelse=[If(test=Name(id='special_line', ctx=Load()), body=[Assign(targets=[Name(id='style', ctx=Store())], value=Constant(value=' class="linenos special"'))], orelse=[Assign(targets=[Name(id='style', ctx=Store())], value=Constant(value=' class="linenos"'))])]), If(test=Name(id='style', ctx=Load()), body=[Assign(targets=[Name(id='linenos', ctx=Store())], value=BinOp(left=Constant(value='<span%s>%s</span>'), op=Mod(), right=Tuple(elts=[Name(id='style', ctx=Load()), Name(id='line', ctx=Load())], ctx=Load())))], orelse=[Assign(targets=[Name(id='linenos', ctx=Store())], value=Name(id='line', ctx=Load()))]), If(test=Name(id='aln', ctx=Load()), body=[Expr(value=Yield(value=Tuple(elts=[Constant(value=1), BinOp(left=BinOp(left=Constant(value='<a href="#%s-%d">%s</a>'), op=Mod(), right=Tuple(elts=[Name(id='anchor_name', ctx=Load()), Name(id='num', ctx=Load()), Name(id='linenos', ctx=Load())], ctx=Load())), op=Add(), right=Name(id='inner_line', ctx=Load()))], ctx=Load())))], orelse=[Expr(value=Yield(value=Tuple(elts=[Constant(value=1), BinOp(left=Name(id='linenos', ctx=Load()), op=Add(), right=Name(id='inner_line', ctx=Load()))], ctx=Load())))]), AugAssign(target=Name(id='num', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], decorator_list=[]), FunctionDef(name='_wrap_lineanchors', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='inner')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='s', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='lineanchors', ctx=Load())), Assign(targets=[Name(id='i', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='linenostart', ctx=Load()), op=Sub(), right=Constant(value=1))), For(target=Tuple(elts=[Name(id='t', ctx=Store()), Name(id='line', ctx=Store())], ctx=Store()), iter=Name(id='inner', ctx=Load()), body=[If(test=Name(id='t', ctx=Load()), body=[AugAssign(target=Name(id='i', ctx=Store()), op=Add(), value=Constant(value=1)), Assign(targets=[Name(id='href', ctx=Store())], value=IfExp(test=Attribute(value=Name(id='self', ctx=Load()), attr='linenos', ctx=Load()), body=Constant(value=''), orelse=BinOp(left=Constant(value=' href="#%s-%d"'), op=Mod(), right=Tuple(elts=[Name(id='s', ctx=Load()), Name(id='i', ctx=Load())], ctx=Load())))), Expr(value=Yield(value=Tuple(elts=[Constant(value=1), BinOp(left=BinOp(left=Constant(value='<a id="%s-%d" name="%s-%d"%s></a>'), op=Mod(), right=Tuple(elts=[Name(id='s', ctx=Load()), Name(id='i', ctx=Load()), Name(id='s', ctx=Load()), Name(id='i', ctx=Load()), Name(id='href', ctx=Load())], ctx=Load())), op=Add(), right=Name(id='line', ctx=Load()))], ctx=Load())))], orelse=[Expr(value=Yield(value=Tuple(elts=[Constant(value=0), Name(id='line', ctx=Load())], ctx=Load())))])], orelse=[])], decorator_list=[]), FunctionDef(name='_wrap_linespans', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='inner')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='s', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='linespans', ctx=Load())), Assign(targets=[Name(id='i', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='linenostart', ctx=Load()), op=Sub(), right=Constant(value=1))), For(target=Tuple(elts=[Name(id='t', ctx=Store()), Name(id='line', ctx=Store())], ctx=Store()), iter=Name(id='inner', ctx=Load()), body=[If(test=Name(id='t', ctx=Load()), body=[AugAssign(target=Name(id='i', ctx=Store()), op=Add(), value=Constant(value=1)), Expr(value=Yield(value=Tuple(elts=[Constant(value=1), BinOp(left=Constant(value='<span id="%s-%d">%s</span>'), op=Mod(), right=Tuple(elts=[Name(id='s', ctx=Load()), Name(id='i', ctx=Load()), Name(id='line', ctx=Load())], ctx=Load()))], ctx=Load())))], orelse=[Expr(value=Yield(value=Tuple(elts=[Constant(value=0), Name(id='line', ctx=Load())], ctx=Load())))])], orelse=[])], decorator_list=[]), FunctionDef(name='_wrap_div', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='inner')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='style', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='noclasses', ctx=Load()), UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='nobackground', ctx=Load())), Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load()), attr='background_color', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Expr(value=Call(func=Attribute(value=Name(id='style', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Constant(value='background: %s'), op=Mod(), right=Tuple(elts=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load()), attr='background_color', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='cssstyles', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='style', ctx=Load()), attr='append', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='cssstyles', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='style', ctx=Store())], value=Call(func=Attribute(value=Constant(value='; '), attr='join', ctx=Load()), args=[Name(id='style', ctx=Load())], keywords=[])), Expr(value=Yield(value=Tuple(elts=[Constant(value=0), BinOp(left=BinOp(left=BinOp(left=Constant(value='<div'), op=Add(), right=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='cssclass', ctx=Load()), BinOp(left=Constant(value=' class="%s"'), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='cssclass', ctx=Load()))])), op=Add(), right=BoolOp(op=And(), values=[Name(id='style', ctx=Load()), BinOp(left=Constant(value=' style="%s"'), op=Mod(), right=Name(id='style', ctx=Load()))])), op=Add(), right=Constant(value='>'))], ctx=Load()))), Expr(value=YieldFrom(value=Name(id='inner', ctx=Load()))), Expr(value=Yield(value=Tuple(elts=[Constant(value=0), Constant(value='</div>\n')], ctx=Load())))], decorator_list=[]), FunctionDef(name='_wrap_pre', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='inner')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='style', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='prestyles', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='style', ctx=Load()), attr='append', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='prestyles', ctx=Load())], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='noclasses', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='style', ctx=Load()), attr='append', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_pre_style', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='style', ctx=Store())], value=Call(func=Attribute(value=Constant(value='; '), attr='join', ctx=Load()), args=[Name(id='style', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='filename', ctx=Load()), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='linenos', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=1)])]), body=[Expr(value=Yield(value=Tuple(elts=[Constant(value=0), BinOp(left=BinOp(left=Constant(value='<span class="filename">'), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='filename', ctx=Load())), op=Add(), right=Constant(value='</span>'))], ctx=Load())))], orelse=[]), Expr(value=Yield(value=Tuple(elts=[Constant(value=0), BinOp(left=BinOp(left=Constant(value='<pre'), op=Add(), right=BoolOp(op=And(), values=[Name(id='style', ctx=Load()), BinOp(left=Constant(value=' style="%s"'), op=Mod(), right=Name(id='style', ctx=Load()))])), op=Add(), right=Constant(value='><span></span>'))], ctx=Load()))), Expr(value=YieldFrom(value=Name(id='inner', ctx=Load()))), Expr(value=Yield(value=Tuple(elts=[Constant(value=0), Constant(value='</pre>')], ctx=Load())))], decorator_list=[]), FunctionDef(name='_wrap_code', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='inner')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Yield(value=Tuple(elts=[Constant(value=0), Constant(value='<code>')], ctx=Load()))), Expr(value=YieldFrom(value=Name(id='inner', ctx=Load()))), Expr(value=Yield(value=Tuple(elts=[Constant(value=0), Constant(value='</code>')], ctx=Load())))], decorator_list=[]), FunctionDef(name='_translate_parts', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='HTML-escape a value and split it by newlines.')), Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='translate', ctx=Load()), args=[Name(id='_escape_html_table', ctx=Load())], keywords=[]), attr='split', ctx=Load()), args=[Constant(value='\n')], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='lru_cache', ctx=Load()), args=[], keywords=[keyword(arg='maxsize', value=Constant(value=100))])]), FunctionDef(name='_format_lines', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='tokensource')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Just format the tokens, without any wrapping tags.\n        Yield individual lines.\n        ')), Assign(targets=[Name(id='nocls', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='noclasses', ctx=Load())), Assign(targets=[Name(id='lsep', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='lineseparator', ctx=Load())), Assign(targets=[Name(id='tagsfile', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='tagsfile', ctx=Load())), Assign(targets=[Name(id='lspan', ctx=Store())], value=Constant(value='')), Assign(targets=[Name(id='line', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='ttype', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Name(id='tokensource', ctx=Load()), body=[Try(body=[Assign(targets=[Name(id='cspan', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='span_element_openers', ctx=Load()), slice=Name(id='ttype', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Assign(targets=[Name(id='title', ctx=Store())], value=IfExp(test=Attribute(value=Name(id='self', ctx=Load()), attr='debug_token_types', ctx=Load()), body=BinOp(left=Constant(value=' title="%s"'), op=Mod(), right=Call(func=Attribute(value=Constant(value='.'), attr='join', ctx=Load()), args=[Name(id='ttype', ctx=Load())], keywords=[])), orelse=Constant(value=''))), If(test=Name(id='nocls', ctx=Load()), body=[Assign(targets=[Name(id='css_style', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_css_inline_styles', ctx=Load()), args=[Name(id='ttype', ctx=Load())], keywords=[])), If(test=Name(id='css_style', ctx=Load()), body=[Assign(targets=[Name(id='css_style', ctx=Store())], value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='class2style', ctx=Load()), slice=Name(id='css_style', ctx=Load()), ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='cspan', ctx=Store())], value=BinOp(left=Constant(value='<span style="%s"%s>'), op=Mod(), right=Tuple(elts=[Name(id='css_style', ctx=Load()), Name(id='title', ctx=Load())], ctx=Load())))], orelse=[Assign(targets=[Name(id='cspan', ctx=Store())], value=Constant(value=''))])], orelse=[Assign(targets=[Name(id='css_class', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_css_classes', ctx=Load()), args=[Name(id='ttype', ctx=Load())], keywords=[])), If(test=Name(id='css_class', ctx=Load()), body=[Assign(targets=[Name(id='cspan', ctx=Store())], value=BinOp(left=Constant(value='<span class="%s"%s>'), op=Mod(), right=Tuple(elts=[Name(id='css_class', ctx=Load()), Name(id='title', ctx=Load())], ctx=Load())))], orelse=[Assign(targets=[Name(id='cspan', ctx=Store())], value=Constant(value=''))])]), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='span_element_openers', ctx=Load()), slice=Name(id='ttype', ctx=Load()), ctx=Store())], value=Name(id='cspan', ctx=Load()))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='parts', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_translate_parts', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Name(id='tagsfile', ctx=Load()), Compare(left=Name(id='ttype', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='Token', ctx=Load()), attr='Name', ctx=Load())])]), body=[Assign(targets=[Tuple(elts=[Name(id='filename', ctx=Store()), Name(id='linenumber', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_lookup_ctag', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])), If(test=Name(id='linenumber', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='base', ctx=Store()), Name(id='filename', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='split', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[])), If(test=Name(id='base', ctx=Load()), body=[AugAssign(target=Name(id='base', ctx=Store()), op=Add(), value=Constant(value='/'))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='filename', ctx=Store()), Name(id='extension', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='splitext', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[])), Assign(targets=[Name(id='url', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='tagurlformat', ctx=Load()), op=Mod(), right=Dict(keys=[Constant(value='path'), Constant(value='fname'), Constant(value='fext')], values=[Name(id='base', ctx=Load()), Name(id='filename', ctx=Load()), Name(id='extension', ctx=Load())]))), Assign(targets=[Subscript(value=Name(id='parts', ctx=Load()), slice=Constant(value=0), ctx=Store())], value=BinOp(left=Constant(value='<a href="%s#%s-%d">%s'), op=Mod(), right=Tuple(elts=[Name(id='url', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='lineanchors', ctx=Load()), Name(id='linenumber', ctx=Load()), Subscript(value=Name(id='parts', ctx=Load()), slice=Constant(value=0), ctx=Load())], ctx=Load()))), Assign(targets=[Subscript(value=Name(id='parts', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Store())], value=BinOp(left=Subscript(value=Name(id='parts', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Add(), right=Constant(value='</a>')))], orelse=[])], orelse=[]), For(target=Name(id='part', ctx=Store()), iter=Subscript(value=Name(id='parts', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), body=[If(test=Name(id='line', ctx=Load()), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='lspan', ctx=Load()), ops=[NotEq()], comparators=[Name(id='cspan', ctx=Load())]), Name(id='part', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='extend', ctx=Load()), args=[Tuple(elts=[BoolOp(op=And(), values=[Name(id='lspan', ctx=Load()), Constant(value='</span>')]), Name(id='cspan', ctx=Load()), Name(id='part', ctx=Load()), BoolOp(op=And(), values=[Name(id='cspan', ctx=Load()), Constant(value='</span>')]), Name(id='lsep', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='extend', ctx=Load()), args=[Tuple(elts=[Name(id='part', ctx=Load()), BoolOp(op=And(), values=[Name(id='lspan', ctx=Load()), Constant(value='</span>')]), Name(id='lsep', ctx=Load())], ctx=Load())], keywords=[]))]), Expr(value=Yield(value=Tuple(elts=[Constant(value=1), Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[])], ctx=Load()))), Assign(targets=[Name(id='line', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[If(test=Name(id='part', ctx=Load()), body=[Expr(value=Yield(value=Tuple(elts=[Constant(value=1), Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Tuple(elts=[Name(id='cspan', ctx=Load()), Name(id='part', ctx=Load()), BoolOp(op=And(), values=[Name(id='cspan', ctx=Load()), Constant(value='</span>')]), Name(id='lsep', ctx=Load())], ctx=Load())], keywords=[])], ctx=Load())))], orelse=[Expr(value=Yield(value=Tuple(elts=[Constant(value=1), Name(id='lsep', ctx=Load())], ctx=Load())))])])], orelse=[]), If(test=BoolOp(op=And(), values=[Name(id='line', ctx=Load()), Subscript(value=Name(id='parts', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())]), body=[If(test=Compare(left=Name(id='lspan', ctx=Load()), ops=[NotEq()], comparators=[Name(id='cspan', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='extend', ctx=Load()), args=[Tuple(elts=[BoolOp(op=And(), values=[Name(id='lspan', ctx=Load()), Constant(value='</span>')]), Name(id='cspan', ctx=Load()), Subscript(value=Name(id='parts', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='lspan', ctx=Store())], value=Name(id='cspan', ctx=Load()))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='parts', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[]))])], orelse=[If(test=Subscript(value=Name(id='parts', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), body=[Assign(targets=[Name(id='line', ctx=Store())], value=List(elts=[Name(id='cspan', ctx=Load()), Subscript(value=Name(id='parts', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], ctx=Load())), Assign(targets=[Name(id='lspan', ctx=Store())], value=Name(id='cspan', ctx=Load()))], orelse=[])])], orelse=[]), If(test=Name(id='line', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='extend', ctx=Load()), args=[Tuple(elts=[BoolOp(op=And(), values=[Name(id='lspan', ctx=Load()), Constant(value='</span>')]), Name(id='lsep', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Yield(value=Tuple(elts=[Constant(value=1), Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[])], ctx=Load())))], orelse=[])], decorator_list=[]), FunctionDef(name='_lookup_ctag', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='token')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='entry', ctx=Store())], value=Call(func=Attribute(value=Name(id='ctags', ctx=Load()), attr='TagEntry', ctx=Load()), args=[], keywords=[])), If(test=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ctags', ctx=Load()), attr='find', ctx=Load()), args=[Name(id='entry', ctx=Load()), Call(func=Attribute(value=Name(id='token', ctx=Load()), attr='encode', ctx=Load()), args=[], keywords=[]), Constant(value=0)], keywords=[]), body=[Return(value=Tuple(elts=[Subscript(value=Name(id='entry', ctx=Load()), slice=Constant(value='file'), ctx=Load()), Subscript(value=Name(id='entry', ctx=Load()), slice=Constant(value='lineNumber'), ctx=Load())], ctx=Load()))], orelse=[Return(value=Tuple(elts=[Constant(value=None), Constant(value=None)], ctx=Load()))])], decorator_list=[]), FunctionDef(name='_highlight_lines', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='tokensource')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Highlighted the lines specified in the `hl_lines` option by\n        post-processing the token stream coming from `_format_lines`.\n        ')), Assign(targets=[Name(id='hls', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='hl_lines', ctx=Load())), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Tuple(elts=[Name(id='t', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='tokensource', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='t', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=1)]), body=[Expr(value=Yield(value=Tuple(elts=[Name(id='t', ctx=Load()), Name(id='value', ctx=Load())], ctx=Load())))], orelse=[]), If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1)), ops=[In()], comparators=[Name(id='hls', ctx=Load())]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='noclasses', ctx=Load()), body=[Assign(targets=[Name(id='style', ctx=Store())], value=Constant(value='')), If(test=Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load()), attr='highlight_color', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='style', ctx=Store())], value=BinOp(left=Constant(value=' style="background-color: %s"'), op=Mod(), right=Tuple(elts=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load()), attr='highlight_color', ctx=Load())], ctx=Load())))], orelse=[]), Expr(value=Yield(value=Tuple(elts=[Constant(value=1), BinOp(left=Constant(value='<span%s>%s</span>'), op=Mod(), right=Tuple(elts=[Name(id='style', ctx=Load()), Name(id='value', ctx=Load())], ctx=Load()))], ctx=Load())))], orelse=[Expr(value=Yield(value=Tuple(elts=[Constant(value=1), BinOp(left=Constant(value='<span class="hll">%s</span>'), op=Mod(), right=Name(id='value', ctx=Load()))], ctx=Load())))])], orelse=[Expr(value=Yield(value=Tuple(elts=[Constant(value=1), Name(id='value', ctx=Load())], ctx=Load())))])], orelse=[])], decorator_list=[]), FunctionDef(name='wrap', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='source')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Wrap the ``source``, which is a generator yielding\n        individual lines, in custom generators. See docstring\n        for `format`. Can be overridden.\n        ')), Assign(targets=[Name(id='output', ctx=Store())], value=Name(id='source', ctx=Load())), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='wrapcode', ctx=Load()), body=[Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_wrap_code', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_wrap_pre', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[])), Return(value=Name(id='output', ctx=Load()))], decorator_list=[]), FunctionDef(name='format_unencoded', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='tokensource'), arg(arg='outfile')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        The formatting process uses several nested generators; which of\n        them are used is determined by the user\'s options.\n\n        Each generator should take at least one argument, ``inner``,\n        and wrap the pieces of text generated by this.\n\n        Always yield 2-tuples: (code, text). If "code" is 1, the text\n        is part of the original tokensource being highlighted, if it\'s\n        0, the text is some piece of wrapping. This makes it possible to\n        use several different wrappers that process the original source\n        linewise, e.g. line number generators.\n        ')), Assign(targets=[Name(id='source', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_format_lines', ctx=Load()), args=[Name(id='tokensource', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='nowrap', ctx=Load())), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='linenos', ctx=Load()), ops=[Eq()], comparators=[Constant(value=2)])]), body=[Assign(targets=[Name(id='source', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_wrap_inlinelinenos', ctx=Load()), args=[Name(id='source', ctx=Load())], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='hl_lines', ctx=Load()), body=[Assign(targets=[Name(id='source', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_highlight_lines', ctx=Load()), args=[Name(id='source', ctx=Load())], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='nowrap', ctx=Load())), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='lineanchors', ctx=Load()), body=[Assign(targets=[Name(id='source', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_wrap_lineanchors', ctx=Load()), args=[Name(id='source', ctx=Load())], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='linespans', ctx=Load()), body=[Assign(targets=[Name(id='source', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_wrap_linespans', ctx=Load()), args=[Name(id='source', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='source', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='wrap', ctx=Load()), args=[Name(id='source', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='linenos', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='source', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_wrap_tablelinenos', ctx=Load()), args=[Name(id='source', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='source', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_wrap_div', ctx=Load()), args=[Name(id='source', ctx=Load())], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='full', ctx=Load()), body=[Assign(targets=[Name(id='source', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_wrap_full', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='outfile', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), For(target=Tuple(elts=[Name(id='t', ctx=Store()), Name(id='piece', ctx=Store())], ctx=Store()), iter=Name(id='source', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='outfile', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='piece', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[])], decorator_list=[])], type_ignores=[])