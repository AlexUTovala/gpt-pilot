Module(body=[Import(names=[alias(name='hashlib')]), Import(names=[alias(name='logging')]), Import(names=[alias(name='sys')]), ImportFrom(module='optparse', names=[alias(name='Values')], level=0), ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='pip._internal.cli.base_command', names=[alias(name='Command')], level=0), ImportFrom(module='pip._internal.cli.status_codes', names=[alias(name='ERROR'), alias(name='SUCCESS')], level=0), ImportFrom(module='pip._internal.utils.hashes', names=[alias(name='FAVORITE_HASH'), alias(name='STRONG_HASHES')], level=0), ImportFrom(module='pip._internal.utils.misc', names=[alias(name='read_chunks'), alias(name='write_output')], level=0), Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), ClassDef(name='HashCommand', bases=[Name(id='Command', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Compute a hash of a local package archive.\n\n    These can be used with --hash in a requirements file to do repeatable\n    installs.\n    ')), Assign(targets=[Name(id='usage', ctx=Store())], value=Constant(value='%prog [options] <file> ...')), Assign(targets=[Name(id='ignore_require_venv', ctx=Store())], value=Constant(value=True)), FunctionDef(name='add_options', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load()), attr='add_option', ctx=Load()), args=[Constant(value='-a'), Constant(value='--algorithm')], keywords=[keyword(arg='dest', value=Constant(value='algorithm')), keyword(arg='choices', value=Name(id='STRONG_HASHES', ctx=Load())), keyword(arg='action', value=Constant(value='store')), keyword(arg='default', value=Name(id='FAVORITE_HASH', ctx=Load())), keyword(arg='help', value=Call(func=Attribute(value=Constant(value='The hash algorithm to use: one of {}'), attr='format', ctx=Load()), args=[Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Name(id='STRONG_HASHES', ctx=Load())], keywords=[])], keywords=[]))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='parser', ctx=Load()), attr='insert_option_group', ctx=Load()), args=[Constant(value=0), Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='run', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='options', annotation=Name(id='Values', ctx=Load())), arg(arg='args', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='args', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='parser', ctx=Load()), attr='print_usage', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load())], keywords=[])), Return(value=Name(id='ERROR', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='algorithm', ctx=Store())], value=Attribute(value=Name(id='options', ctx=Load()), attr='algorithm', ctx=Load())), For(target=Name(id='path', ctx=Store()), iter=Name(id='args', ctx=Load()), body=[Expr(value=Call(func=Name(id='write_output', ctx=Load()), args=[Constant(value='%s:\n--hash=%s:%s'), Name(id='path', ctx=Load()), Name(id='algorithm', ctx=Load()), Call(func=Name(id='_hash_of_file', ctx=Load()), args=[Name(id='path', ctx=Load()), Name(id='algorithm', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Return(value=Name(id='SUCCESS', ctx=Load()))], decorator_list=[], returns=Name(id='int', ctx=Load()))], decorator_list=[]), FunctionDef(name='_hash_of_file', args=arguments(posonlyargs=[], args=[arg(arg='path', annotation=Name(id='str', ctx=Load())), arg(arg='algorithm', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the hash digest of a file.')), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='path', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='archive', ctx=Store()))], body=[Assign(targets=[Name(id='hash', ctx=Store())], value=Call(func=Attribute(value=Name(id='hashlib', ctx=Load()), attr='new', ctx=Load()), args=[Name(id='algorithm', ctx=Load())], keywords=[])), For(target=Name(id='chunk', ctx=Store()), iter=Call(func=Name(id='read_chunks', ctx=Load()), args=[Name(id='archive', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='hash', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='chunk', ctx=Load())], keywords=[]))], orelse=[])]), Return(value=Call(func=Attribute(value=Name(id='hash', ctx=Load()), attr='hexdigest', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], type_ignores=[])