Module(body=[Expr(value=Constant(value='Primary application entrypoint.\n')), Import(names=[alias(name='locale')]), Import(names=[alias(name='logging')]), Import(names=[alias(name='os')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='warnings')]), ImportFrom(module='typing', names=[alias(name='List'), alias(name='Optional')], level=0), ImportFrom(module='pip._internal.cli.autocompletion', names=[alias(name='autocomplete')], level=0), ImportFrom(module='pip._internal.cli.main_parser', names=[alias(name='parse_command')], level=0), ImportFrom(module='pip._internal.commands', names=[alias(name='create_command')], level=0), ImportFrom(module='pip._internal.exceptions', names=[alias(name='PipError')], level=0), ImportFrom(module='pip._internal.utils', names=[alias(name='deprecation')], level=0), Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), FunctionDef(name='main', args=arguments(posonlyargs=[], args=[arg(arg='args', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='args', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='args', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='argv', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='filterwarnings', ctx=Load()), args=[], keywords=[keyword(arg='action', value=Constant(value='ignore')), keyword(arg='category', value=Name(id='DeprecationWarning', ctx=Load())), keyword(arg='module', value=Constant(value='.*pkg_resources'))])), Expr(value=Call(func=Attribute(value=Name(id='deprecation', ctx=Load()), attr='install_warning_logger', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Name(id='autocomplete', ctx=Load()), args=[], keywords=[])), Try(body=[Assign(targets=[Tuple(elts=[Name(id='cmd_name', ctx=Store()), Name(id='cmd_args', ctx=Store())], ctx=Store())], value=Call(func=Name(id='parse_command', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='PipError', ctx=Load()), name='exc', body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()), attr='write', ctx=Load()), args=[JoinedStr(values=[Constant(value='ERROR: '), FormattedValue(value=Name(id='exc', ctx=Load()), conversion=-1)])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()), attr='write', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='linesep', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='sys', ctx=Load()), attr='exit', ctx=Load()), args=[Constant(value=1)], keywords=[]))])], orelse=[], finalbody=[]), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='locale', ctx=Load()), attr='setlocale', ctx=Load()), args=[Attribute(value=Name(id='locale', ctx=Load()), attr='LC_ALL', ctx=Load()), Constant(value='')], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='locale', ctx=Load()), attr='Error', ctx=Load()), name='e', body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Ignoring error %s when setting locale'), Name(id='e', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='command', ctx=Store())], value=Call(func=Name(id='create_command', ctx=Load()), args=[Name(id='cmd_name', ctx=Load())], keywords=[keyword(arg='isolated', value=Compare(left=Constant(value='--isolated'), ops=[In()], comparators=[Name(id='cmd_args', ctx=Load())]))])), Return(value=Call(func=Attribute(value=Name(id='command', ctx=Load()), attr='main', ctx=Load()), args=[Name(id='cmd_args', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='int', ctx=Load()))], type_ignores=[])