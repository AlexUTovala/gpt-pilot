Module(body=[Import(names=[alias(name='errno')]), Import(names=[alias(name='json')]), Import(names=[alias(name='operator')]), Import(names=[alias(name='os')]), Import(names=[alias(name='shutil')]), Import(names=[alias(name='site')]), ImportFrom(module='optparse', names=[alias(name='SUPPRESS_HELP'), alias(name='Values')], level=0), ImportFrom(module='typing', names=[alias(name='List'), alias(name='Optional')], level=0), ImportFrom(module='pip._vendor.rich', names=[alias(name='print_json')], level=0), ImportFrom(module='pip._internal.cache', names=[alias(name='WheelCache')], level=0), ImportFrom(module='pip._internal.cli', names=[alias(name='cmdoptions')], level=0), ImportFrom(module='pip._internal.cli.cmdoptions', names=[alias(name='make_target_python')], level=0), ImportFrom(module='pip._internal.cli.req_command', names=[alias(name='RequirementCommand'), alias(name='warn_if_run_as_root'), alias(name='with_cleanup')], level=0), ImportFrom(module='pip._internal.cli.status_codes', names=[alias(name='ERROR'), alias(name='SUCCESS')], level=0), ImportFrom(module='pip._internal.exceptions', names=[alias(name='CommandError'), alias(name='InstallationError')], level=0), ImportFrom(module='pip._internal.locations', names=[alias(name='get_scheme')], level=0), ImportFrom(module='pip._internal.metadata', names=[alias(name='get_environment')], level=0), ImportFrom(module='pip._internal.models.installation_report', names=[alias(name='InstallationReport')], level=0), ImportFrom(module='pip._internal.operations.build.build_tracker', names=[alias(name='get_build_tracker')], level=0), ImportFrom(module='pip._internal.operations.check', names=[alias(name='ConflictDetails'), alias(name='check_install_conflicts')], level=0), ImportFrom(module='pip._internal.req', names=[alias(name='install_given_reqs')], level=0), ImportFrom(module='pip._internal.req.req_install', names=[alias(name='InstallRequirement'), alias(name='check_legacy_setup_py_options')], level=0), ImportFrom(module='pip._internal.utils.compat', names=[alias(name='WINDOWS')], level=0), ImportFrom(module='pip._internal.utils.filesystem', names=[alias(name='test_writable_dir')], level=0), ImportFrom(module='pip._internal.utils.logging', names=[alias(name='getLogger')], level=0), ImportFrom(module='pip._internal.utils.misc', names=[alias(name='check_externally_managed'), alias(name='ensure_dir'), alias(name='get_pip_version'), alias(name='protect_pip_from_modification_on_windows'), alias(name='write_output')], level=0), ImportFrom(module='pip._internal.utils.temp_dir', names=[alias(name='TempDirectory')], level=0), ImportFrom(module='pip._internal.utils.virtualenv', names=[alias(name='running_under_virtualenv'), alias(name='virtualenv_no_global')], level=0), ImportFrom(module='pip._internal.wheel_builder', names=[alias(name='build'), alias(name='should_build_for_install_command')], level=0), Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Name(id='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), ClassDef(name='InstallCommand', bases=[Name(id='RequirementCommand', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Install packages from:\n\n    - PyPI (and other indexes) using requirement specifiers.\n    - VCS project urls.\n    - Local project directories.\n    - Local or remote source archives.\n\n    pip also supports installing from "requirements files", which provide\n    an easy way to specify a whole environment to be installed.\n    ')), Assign(targets=[Name(id='usage', ctx=Store())], value=Constant(value='\n      %prog [options] <requirement specifier> [package-index-options] ...\n      %prog [options] -r <requirements file> [package-index-options] ...\n      %prog [options] [-e] <vcs project url> ...\n      %prog [options] [-e] <local project path> ...\n      %prog [options] <archive url/path> ...')), FunctionDef(name='add_options', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load()), attr='add_option', ctx=Load()), args=[Call(func=Attribute(value=Name(id='cmdoptions', ctx=Load()), attr='requirements', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load()), attr='add_option', ctx=Load()), args=[Call(func=Attribute(value=Name(id='cmdoptions', ctx=Load()), attr='constraints', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load()), attr='add_option', ctx=Load()), args=[Call(func=Attribute(value=Name(id='cmdoptions', ctx=Load()), attr='no_deps', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load()), attr='add_option', ctx=Load()), args=[Call(func=Attribute(value=Name(id='cmdoptions', ctx=Load()), attr='pre', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load()), attr='add_option', ctx=Load()), args=[Call(func=Attribute(value=Name(id='cmdoptions', ctx=Load()), attr='editable', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load()), attr='add_option', ctx=Load()), args=[Constant(value='--dry-run')], keywords=[keyword(arg='action', value=Constant(value='store_true')), keyword(arg='dest', value=Constant(value='dry_run')), keyword(arg='default', value=Constant(value=False)), keyword(arg='help', value=Constant(value="Don't actually install anything, just print what would be. Can be used in combination with --ignore-installed to 'resolve' the requirements."))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load()), attr='add_option', ctx=Load()), args=[Constant(value='-t'), Constant(value='--target')], keywords=[keyword(arg='dest', value=Constant(value='target_dir')), keyword(arg='metavar', value=Constant(value='dir')), keyword(arg='default', value=Constant(value=None)), keyword(arg='help', value=Constant(value='Install packages into <dir>. By default this will not replace existing files/folders in <dir>. Use --upgrade to replace existing packages in <dir> with new versions.'))])), Expr(value=Call(func=Attribute(value=Name(id='cmdoptions', ctx=Load()), attr='add_target_python_options', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load()), attr='add_option', ctx=Load()), args=[Constant(value='--user')], keywords=[keyword(arg='dest', value=Constant(value='use_user_site')), keyword(arg='action', value=Constant(value='store_true')), keyword(arg='help', value=Constant(value='Install to the Python user install directory for your platform. Typically ~/.local/, or %APPDATA%\\Python on Windows. (See the Python documentation for site.USER_BASE for full details.)'))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load()), attr='add_option', ctx=Load()), args=[Constant(value='--no-user')], keywords=[keyword(arg='dest', value=Constant(value='use_user_site')), keyword(arg='action', value=Constant(value='store_false')), keyword(arg='help', value=Name(id='SUPPRESS_HELP', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load()), attr='add_option', ctx=Load()), args=[Constant(value='--root')], keywords=[keyword(arg='dest', value=Constant(value='root_path')), keyword(arg='metavar', value=Constant(value='dir')), keyword(arg='default', value=Constant(value=None)), keyword(arg='help', value=Constant(value='Install everything relative to this alternate root directory.'))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load()), attr='add_option', ctx=Load()), args=[Constant(value='--prefix')], keywords=[keyword(arg='dest', value=Constant(value='prefix_path')), keyword(arg='metavar', value=Constant(value='dir')), keyword(arg='default', value=Constant(value=None)), keyword(arg='help', value=Constant(value='Installation prefix where lib, bin and other top-level folders are placed. Note that the resulting installation may contain scripts and other resources which reference the Python interpreter of pip, and not that of ``--prefix``. See also the ``--python`` option if the intention is to install packages into another (possibly pip-free) environment.'))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load()), attr='add_option', ctx=Load()), args=[Call(func=Attribute(value=Name(id='cmdoptions', ctx=Load()), attr='src', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load()), attr='add_option', ctx=Load()), args=[Constant(value='-U'), Constant(value='--upgrade')], keywords=[keyword(arg='dest', value=Constant(value='upgrade')), keyword(arg='action', value=Constant(value='store_true')), keyword(arg='help', value=Constant(value='Upgrade all specified packages to the newest available version. The handling of dependencies depends on the upgrade-strategy used.'))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load()), attr='add_option', ctx=Load()), args=[Constant(value='--upgrade-strategy')], keywords=[keyword(arg='dest', value=Constant(value='upgrade_strategy')), keyword(arg='default', value=Constant(value='only-if-needed')), keyword(arg='choices', value=List(elts=[Constant(value='only-if-needed'), Constant(value='eager')], ctx=Load())), keyword(arg='help', value=Constant(value='Determines how dependency upgrading should be handled [default: %default]. "eager" - dependencies are upgraded regardless of whether the currently installed version satisfies the requirements of the upgraded package(s). "only-if-needed" -  are upgraded only when they do not satisfy the requirements of the upgraded package(s).'))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load()), attr='add_option', ctx=Load()), args=[Constant(value='--force-reinstall')], keywords=[keyword(arg='dest', value=Constant(value='force_reinstall')), keyword(arg='action', value=Constant(value='store_true')), keyword(arg='help', value=Constant(value='Reinstall all packages even if they are already up-to-date.'))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load()), attr='add_option', ctx=Load()), args=[Constant(value='-I'), Constant(value='--ignore-installed')], keywords=[keyword(arg='dest', value=Constant(value='ignore_installed')), keyword(arg='action', value=Constant(value='store_true')), keyword(arg='help', value=Constant(value='Ignore the installed packages, overwriting them. This can break your system if the existing package is of a different version or was installed with a different package manager!'))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load()), attr='add_option', ctx=Load()), args=[Call(func=Attribute(value=Name(id='cmdoptions', ctx=Load()), attr='ignore_requires_python', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load()), attr='add_option', ctx=Load()), args=[Call(func=Attribute(value=Name(id='cmdoptions', ctx=Load()), attr='no_build_isolation', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load()), attr='add_option', ctx=Load()), args=[Call(func=Attribute(value=Name(id='cmdoptions', ctx=Load()), attr='use_pep517', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load()), attr='add_option', ctx=Load()), args=[Call(func=Attribute(value=Name(id='cmdoptions', ctx=Load()), attr='no_use_pep517', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load()), attr='add_option', ctx=Load()), args=[Call(func=Attribute(value=Name(id='cmdoptions', ctx=Load()), attr='check_build_deps', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load()), attr='add_option', ctx=Load()), args=[Call(func=Attribute(value=Name(id='cmdoptions', ctx=Load()), attr='override_externally_managed', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load()), attr='add_option', ctx=Load()), args=[Call(func=Attribute(value=Name(id='cmdoptions', ctx=Load()), attr='config_settings', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load()), attr='add_option', ctx=Load()), args=[Call(func=Attribute(value=Name(id='cmdoptions', ctx=Load()), attr='global_options', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load()), attr='add_option', ctx=Load()), args=[Constant(value='--compile')], keywords=[keyword(arg='action', value=Constant(value='store_true')), keyword(arg='dest', value=Constant(value='compile')), keyword(arg='default', value=Constant(value=True)), keyword(arg='help', value=Constant(value='Compile Python source files to bytecode'))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load()), attr='add_option', ctx=Load()), args=[Constant(value='--no-compile')], keywords=[keyword(arg='action', value=Constant(value='store_false')), keyword(arg='dest', value=Constant(value='compile')), keyword(arg='help', value=Constant(value='Do not compile Python source files to bytecode'))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load()), attr='add_option', ctx=Load()), args=[Constant(value='--no-warn-script-location')], keywords=[keyword(arg='action', value=Constant(value='store_false')), keyword(arg='dest', value=Constant(value='warn_script_location')), keyword(arg='default', value=Constant(value=True)), keyword(arg='help', value=Constant(value='Do not warn when installing scripts outside PATH'))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load()), attr='add_option', ctx=Load()), args=[Constant(value='--no-warn-conflicts')], keywords=[keyword(arg='action', value=Constant(value='store_false')), keyword(arg='dest', value=Constant(value='warn_about_conflicts')), keyword(arg='default', value=Constant(value=True)), keyword(arg='help', value=Constant(value='Do not warn about broken dependencies'))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load()), attr='add_option', ctx=Load()), args=[Call(func=Attribute(value=Name(id='cmdoptions', ctx=Load()), attr='no_binary', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load()), attr='add_option', ctx=Load()), args=[Call(func=Attribute(value=Name(id='cmdoptions', ctx=Load()), attr='only_binary', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load()), attr='add_option', ctx=Load()), args=[Call(func=Attribute(value=Name(id='cmdoptions', ctx=Load()), attr='prefer_binary', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load()), attr='add_option', ctx=Load()), args=[Call(func=Attribute(value=Name(id='cmdoptions', ctx=Load()), attr='require_hashes', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load()), attr='add_option', ctx=Load()), args=[Call(func=Attribute(value=Name(id='cmdoptions', ctx=Load()), attr='progress_bar', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load()), attr='add_option', ctx=Load()), args=[Call(func=Attribute(value=Name(id='cmdoptions', ctx=Load()), attr='root_user_action', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='index_opts', ctx=Store())], value=Call(func=Attribute(value=Name(id='cmdoptions', ctx=Load()), attr='make_option_group', ctx=Load()), args=[Attribute(value=Name(id='cmdoptions', ctx=Load()), attr='index_group', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='parser', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='parser', ctx=Load()), attr='insert_option_group', ctx=Load()), args=[Constant(value=0), Name(id='index_opts', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='parser', ctx=Load()), attr='insert_option_group', ctx=Load()), args=[Constant(value=0), Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load()), attr='add_option', ctx=Load()), args=[Constant(value='--report')], keywords=[keyword(arg='dest', value=Constant(value='json_report_file')), keyword(arg='metavar', value=Constant(value='file')), keyword(arg='default', value=Constant(value=None)), keyword(arg='help', value=Constant(value="Generate a JSON file describing what pip did to install the provided requirements. Can be used in combination with --dry-run and --ignore-installed to 'resolve' the requirements. When - is used as file name it writes to stdout. When writing to stdout, please combine with the --quiet option to avoid mixing pip logging output with JSON output."))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='run', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='options', annotation=Name(id='Values', ctx=Load())), arg(arg='args', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='options', ctx=Load()), attr='use_user_site', ctx=Load()), Compare(left=Attribute(value=Name(id='options', ctx=Load()), attr='target_dir', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Raise(exc=Call(func=Name(id='CommandError', ctx=Load()), args=[Constant(value="Can not combine '--user' and '--target'")], keywords=[]))], orelse=[]), Assign(targets=[Name(id='installing_into_current_environment', ctx=Store())], value=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=BoolOp(op=And(), values=[Attribute(value=Name(id='options', ctx=Load()), attr='dry_run', ctx=Load()), Attribute(value=Name(id='options', ctx=Load()), attr='json_report_file', ctx=Load())])), Compare(left=Attribute(value=Name(id='options', ctx=Load()), attr='root_path', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='options', ctx=Load()), attr='target_dir', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='options', ctx=Load()), attr='prefix_path', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])])), If(test=BoolOp(op=And(), values=[Name(id='installing_into_current_environment', ctx=Load()), UnaryOp(op=Not(), operand=Attribute(value=Name(id='options', ctx=Load()), attr='override_externally_managed', ctx=Load()))]), body=[Expr(value=Call(func=Name(id='check_externally_managed', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='upgrade_strategy', ctx=Store())], value=Constant(value='to-satisfy-only')), If(test=Attribute(value=Name(id='options', ctx=Load()), attr='upgrade', ctx=Load()), body=[Assign(targets=[Name(id='upgrade_strategy', ctx=Store())], value=Attribute(value=Name(id='options', ctx=Load()), attr='upgrade_strategy', ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='cmdoptions', ctx=Load()), attr='check_dist_restriction', ctx=Load()), args=[Name(id='options', ctx=Load())], keywords=[keyword(arg='check_target', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='verbose', ctx=Load()), args=[Constant(value='Using %s'), Call(func=Name(id='get_pip_version', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Attribute(value=Name(id='options', ctx=Load()), attr='use_user_site', ctx=Store())], value=Call(func=Name(id='decide_user_install', ctx=Load()), args=[Attribute(value=Name(id='options', ctx=Load()), attr='use_user_site', ctx=Load())], keywords=[keyword(arg='prefix_path', value=Attribute(value=Name(id='options', ctx=Load()), attr='prefix_path', ctx=Load())), keyword(arg='target_dir', value=Attribute(value=Name(id='options', ctx=Load()), attr='target_dir', ctx=Load())), keyword(arg='root_path', value=Attribute(value=Name(id='options', ctx=Load()), attr='root_path', ctx=Load())), keyword(arg='isolated_mode', value=Attribute(value=Name(id='options', ctx=Load()), attr='isolated_mode', ctx=Load()))])), AnnAssign(target=Name(id='target_temp_dir', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TempDirectory', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=1), AnnAssign(target=Name(id='target_temp_dir_path', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=1), If(test=Attribute(value=Name(id='options', ctx=Load()), attr='target_dir', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='options', ctx=Load()), attr='ignore_installed', ctx=Store())], value=Constant(value=True)), Assign(targets=[Attribute(value=Name(id='options', ctx=Load()), attr='target_dir', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Attribute(value=Name(id='options', ctx=Load()), attr='target_dir', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Attribute(value=Name(id='options', ctx=Load()), attr='target_dir', ctx=Load())], keywords=[]), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isdir', ctx=Load()), args=[Attribute(value=Name(id='options', ctx=Load()), attr='target_dir', ctx=Load())], keywords=[]))]), body=[Raise(exc=Call(func=Name(id='CommandError', ctx=Load()), args=[Constant(value='Target path exists but is not a directory, will not continue.')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='target_temp_dir', ctx=Store())], value=Call(func=Name(id='TempDirectory', ctx=Load()), args=[], keywords=[keyword(arg='kind', value=Constant(value='target'))])), Assign(targets=[Name(id='target_temp_dir_path', ctx=Store())], value=Attribute(value=Name(id='target_temp_dir', ctx=Load()), attr='path', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='enter_context', ctx=Load()), args=[Name(id='target_temp_dir', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='global_options', ctx=Store())], value=BoolOp(op=Or(), values=[Attribute(value=Name(id='options', ctx=Load()), attr='global_options', ctx=Load()), List(elts=[], ctx=Load())])), Assign(targets=[Name(id='session', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_default_session', ctx=Load()), args=[Name(id='options', ctx=Load())], keywords=[])), Assign(targets=[Name(id='target_python', ctx=Store())], value=Call(func=Name(id='make_target_python', ctx=Load()), args=[Name(id='options', ctx=Load())], keywords=[])), Assign(targets=[Name(id='finder', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_build_package_finder', ctx=Load()), args=[], keywords=[keyword(arg='options', value=Name(id='options', ctx=Load())), keyword(arg='session', value=Name(id='session', ctx=Load())), keyword(arg='target_python', value=Name(id='target_python', ctx=Load())), keyword(arg='ignore_requires_python', value=Attribute(value=Name(id='options', ctx=Load()), attr='ignore_requires_python', ctx=Load()))])), Assign(targets=[Name(id='build_tracker', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='enter_context', ctx=Load()), args=[Call(func=Name(id='get_build_tracker', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='directory', ctx=Store())], value=Call(func=Name(id='TempDirectory', ctx=Load()), args=[], keywords=[keyword(arg='delete', value=UnaryOp(op=Not(), operand=Attribute(value=Name(id='options', ctx=Load()), attr='no_clean', ctx=Load()))), keyword(arg='kind', value=Constant(value='install')), keyword(arg='globally_managed', value=Constant(value=True))])), Try(body=[Assign(targets=[Name(id='reqs', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_requirements', ctx=Load()), args=[Name(id='args', ctx=Load()), Name(id='options', ctx=Load()), Name(id='finder', ctx=Load()), Name(id='session', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='check_legacy_setup_py_options', ctx=Load()), args=[Name(id='options', ctx=Load()), Name(id='reqs', ctx=Load())], keywords=[])), Assign(targets=[Name(id='wheel_cache', ctx=Store())], value=Call(func=Name(id='WheelCache', ctx=Load()), args=[Attribute(value=Name(id='options', ctx=Load()), attr='cache_dir', ctx=Load())], keywords=[])), For(target=Name(id='req', ctx=Store()), iter=Name(id='reqs', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='req', ctx=Load()), attr='permit_editable_wheels', ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='preparer', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='make_requirement_preparer', ctx=Load()), args=[], keywords=[keyword(arg='temp_build_dir', value=Name(id='directory', ctx=Load())), keyword(arg='options', value=Name(id='options', ctx=Load())), keyword(arg='build_tracker', value=Name(id='build_tracker', ctx=Load())), keyword(arg='session', value=Name(id='session', ctx=Load())), keyword(arg='finder', value=Name(id='finder', ctx=Load())), keyword(arg='use_user_site', value=Attribute(value=Name(id='options', ctx=Load()), attr='use_user_site', ctx=Load())), keyword(arg='verbosity', value=Attribute(value=Name(id='self', ctx=Load()), attr='verbosity', ctx=Load()))])), Assign(targets=[Name(id='resolver', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='make_resolver', ctx=Load()), args=[], keywords=[keyword(arg='preparer', value=Name(id='preparer', ctx=Load())), keyword(arg='finder', value=Name(id='finder', ctx=Load())), keyword(arg='options', value=Name(id='options', ctx=Load())), keyword(arg='wheel_cache', value=Name(id='wheel_cache', ctx=Load())), keyword(arg='use_user_site', value=Attribute(value=Name(id='options', ctx=Load()), attr='use_user_site', ctx=Load())), keyword(arg='ignore_installed', value=Attribute(value=Name(id='options', ctx=Load()), attr='ignore_installed', ctx=Load())), keyword(arg='ignore_requires_python', value=Attribute(value=Name(id='options', ctx=Load()), attr='ignore_requires_python', ctx=Load())), keyword(arg='force_reinstall', value=Attribute(value=Name(id='options', ctx=Load()), attr='force_reinstall', ctx=Load())), keyword(arg='upgrade_strategy', value=Name(id='upgrade_strategy', ctx=Load())), keyword(arg='use_pep517', value=Attribute(value=Name(id='options', ctx=Load()), attr='use_pep517', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='trace_basic_info', ctx=Load()), args=[Name(id='finder', ctx=Load())], keywords=[])), Assign(targets=[Name(id='requirement_set', ctx=Store())], value=Call(func=Attribute(value=Name(id='resolver', ctx=Load()), attr='resolve', ctx=Load()), args=[Name(id='reqs', ctx=Load())], keywords=[keyword(arg='check_supported_wheels', value=UnaryOp(op=Not(), operand=Attribute(value=Name(id='options', ctx=Load()), attr='target_dir', ctx=Load())))])), If(test=Attribute(value=Name(id='options', ctx=Load()), attr='json_report_file', ctx=Load()), body=[Assign(targets=[Name(id='report', ctx=Store())], value=Call(func=Name(id='InstallationReport', ctx=Load()), args=[Attribute(value=Name(id='requirement_set', ctx=Load()), attr='requirements_to_install', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='options', ctx=Load()), attr='json_report_file', ctx=Load()), ops=[Eq()], comparators=[Constant(value='-')]), body=[Expr(value=Call(func=Name(id='print_json', ctx=Load()), args=[], keywords=[keyword(arg='data', value=Call(func=Attribute(value=Name(id='report', ctx=Load()), attr='to_dict', ctx=Load()), args=[], keywords=[]))]))], orelse=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Attribute(value=Name(id='options', ctx=Load()), attr='json_report_file', ctx=Load()), Constant(value='w')], keywords=[keyword(arg='encoding', value=Constant(value='utf-8'))]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[Call(func=Attribute(value=Name(id='report', ctx=Load()), attr='to_dict', ctx=Load()), args=[], keywords=[]), Name(id='f', ctx=Load())], keywords=[keyword(arg='indent', value=Constant(value=2)), keyword(arg='ensure_ascii', value=Constant(value=False))]))])])], orelse=[]), If(test=Attribute(value=Name(id='options', ctx=Load()), attr='dry_run', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='requirement_set', ctx=Load()), attr='warn_legacy_versions_and_specifiers', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='would_install_items', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[GeneratorExp(elt=Tuple(elts=[Subscript(value=Attribute(value=Name(id='r', ctx=Load()), attr='metadata', ctx=Load()), slice=Constant(value='name'), ctx=Load()), Subscript(value=Attribute(value=Name(id='r', ctx=Load()), attr='metadata', ctx=Load()), slice=Constant(value='version'), ctx=Load())], ctx=Load()), generators=[comprehension(target=Name(id='r', ctx=Store()), iter=Attribute(value=Name(id='requirement_set', ctx=Load()), attr='requirements_to_install', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), If(test=Name(id='would_install_items', ctx=Load()), body=[Expr(value=Call(func=Name(id='write_output', ctx=Load()), args=[Constant(value='Would install %s'), Call(func=Attribute(value=Constant(value=' '), attr='join', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Constant(value='-'), attr='join', ctx=Load()), args=[Name(id='item', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='item', ctx=Store()), iter=Name(id='would_install_items', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], keywords=[]))], orelse=[]), Return(value=Name(id='SUCCESS', ctx=Load()))], orelse=[]), Try(body=[Assign(targets=[Name(id='pip_req', ctx=Store())], value=Call(func=Attribute(value=Name(id='requirement_set', ctx=Load()), attr='get_requirement', ctx=Load()), args=[Constant(value='pip')], keywords=[]))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Assign(targets=[Name(id='modifying_pip', ctx=Store())], value=Constant(value=False))])], orelse=[Assign(targets=[Name(id='modifying_pip', ctx=Store())], value=Compare(left=Attribute(value=Name(id='pip_req', ctx=Load()), attr='satisfied_by', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]))], finalbody=[]), Expr(value=Call(func=Name(id='protect_pip_from_modification_on_windows', ctx=Load()), args=[], keywords=[keyword(arg='modifying_pip', value=Name(id='modifying_pip', ctx=Load()))])), Assign(targets=[Name(id='reqs_to_build', ctx=Store())], value=ListComp(elt=Name(id='r', ctx=Load()), generators=[comprehension(target=Name(id='r', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='requirement_set', ctx=Load()), attr='requirements', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[]), ifs=[Call(func=Name(id='should_build_for_install_command', ctx=Load()), args=[Name(id='r', ctx=Load())], keywords=[])], is_async=0)])), Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='build_failures', ctx=Store())], ctx=Store())], value=Call(func=Name(id='build', ctx=Load()), args=[Name(id='reqs_to_build', ctx=Load())], keywords=[keyword(arg='wheel_cache', value=Name(id='wheel_cache', ctx=Load())), keyword(arg='verify', value=Constant(value=True)), keyword(arg='build_options', value=List(elts=[], ctx=Load())), keyword(arg='global_options', value=Name(id='global_options', ctx=Load()))])), If(test=Name(id='build_failures', ctx=Load()), body=[Raise(exc=Call(func=Name(id='InstallationError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Could not build wheels for {}, which is required to install pyproject.toml-based projects'), attr='format', ctx=Load()), args=[Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[GeneratorExp(elt=Attribute(value=Name(id='r', ctx=Load()), attr='name', ctx=Load()), generators=[comprehension(target=Name(id='r', ctx=Store()), iter=Name(id='build_failures', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='to_install', ctx=Store())], value=Call(func=Attribute(value=Name(id='resolver', ctx=Load()), attr='get_installation_order', ctx=Load()), args=[Name(id='requirement_set', ctx=Load())], keywords=[])), AnnAssign(target=Name(id='conflicts', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='ConflictDetails', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=1), Assign(targets=[Name(id='should_warn_about_conflicts', ctx=Store())], value=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Attribute(value=Name(id='options', ctx=Load()), attr='ignore_dependencies', ctx=Load())), Attribute(value=Name(id='options', ctx=Load()), attr='warn_about_conflicts', ctx=Load())])), If(test=Name(id='should_warn_about_conflicts', ctx=Load()), body=[Assign(targets=[Name(id='conflicts', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_determine_conflicts', ctx=Load()), args=[Name(id='to_install', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='warn_script_location', ctx=Store())], value=Attribute(value=Name(id='options', ctx=Load()), attr='warn_script_location', ctx=Load())), If(test=BoolOp(op=Or(), values=[Attribute(value=Name(id='options', ctx=Load()), attr='target_dir', ctx=Load()), Attribute(value=Name(id='options', ctx=Load()), attr='prefix_path', ctx=Load())]), body=[Assign(targets=[Name(id='warn_script_location', ctx=Store())], value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='installed', ctx=Store())], value=Call(func=Name(id='install_given_reqs', ctx=Load()), args=[Name(id='to_install', ctx=Load()), Name(id='global_options', ctx=Load())], keywords=[keyword(arg='root', value=Attribute(value=Name(id='options', ctx=Load()), attr='root_path', ctx=Load())), keyword(arg='home', value=Name(id='target_temp_dir_path', ctx=Load())), keyword(arg='prefix', value=Attribute(value=Name(id='options', ctx=Load()), attr='prefix_path', ctx=Load())), keyword(arg='warn_script_location', value=Name(id='warn_script_location', ctx=Load())), keyword(arg='use_user_site', value=Attribute(value=Name(id='options', ctx=Load()), attr='use_user_site', ctx=Load())), keyword(arg='pycompile', value=Attribute(value=Name(id='options', ctx=Load()), attr='compile', ctx=Load()))])), Assign(targets=[Name(id='lib_locations', ctx=Store())], value=Call(func=Name(id='get_lib_location_guesses', ctx=Load()), args=[], keywords=[keyword(arg='user', value=Attribute(value=Name(id='options', ctx=Load()), attr='use_user_site', ctx=Load())), keyword(arg='home', value=Name(id='target_temp_dir_path', ctx=Load())), keyword(arg='root', value=Attribute(value=Name(id='options', ctx=Load()), attr='root_path', ctx=Load())), keyword(arg='prefix', value=Attribute(value=Name(id='options', ctx=Load()), attr='prefix_path', ctx=Load())), keyword(arg='isolated', value=Attribute(value=Name(id='options', ctx=Load()), attr='isolated_mode', ctx=Load()))])), Assign(targets=[Name(id='env', ctx=Store())], value=Call(func=Name(id='get_environment', ctx=Load()), args=[Name(id='lib_locations', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='installed', ctx=Load()), attr='sort', ctx=Load()), args=[], keywords=[keyword(arg='key', value=Call(func=Attribute(value=Name(id='operator', ctx=Load()), attr='attrgetter', ctx=Load()), args=[Constant(value='name')], keywords=[]))])), Assign(targets=[Name(id='items', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='result', ctx=Store()), iter=Name(id='installed', ctx=Load()), body=[Assign(targets=[Name(id='item', ctx=Store())], value=Attribute(value=Name(id='result', ctx=Load()), attr='name', ctx=Load())), Try(body=[Assign(targets=[Name(id='installed_dist', ctx=Store())], value=Call(func=Attribute(value=Name(id='env', ctx=Load()), attr='get_distribution', ctx=Load()), args=[Name(id='item', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='installed_dist', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='item', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='item', ctx=Load()), conversion=-1), Constant(value='-'), FormattedValue(value=Attribute(value=Name(id='installed_dist', ctx=Load()), attr='version', ctx=Load()), conversion=-1)]))], orelse=[])], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[]), Expr(value=Call(func=Attribute(value=Name(id='items', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='item', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='conflicts', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_warn_about_conflicts', ctx=Load()), args=[Name(id='conflicts', ctx=Load())], keywords=[keyword(arg='resolver_variant', value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='determine_resolver_variant', ctx=Load()), args=[Name(id='options', ctx=Load())], keywords=[]))]))], orelse=[]), Assign(targets=[Name(id='installed_desc', ctx=Store())], value=Call(func=Attribute(value=Constant(value=' '), attr='join', ctx=Load()), args=[Name(id='items', ctx=Load())], keywords=[])), If(test=Name(id='installed_desc', ctx=Load()), body=[Expr(value=Call(func=Name(id='write_output', ctx=Load()), args=[Constant(value='Successfully installed %s'), Name(id='installed_desc', ctx=Load())], keywords=[]))], orelse=[])], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), name='error', body=[Assign(targets=[Name(id='show_traceback', ctx=Store())], value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='verbosity', ctx=Load()), ops=[GtE()], comparators=[Constant(value=1)])), Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Name(id='create_os_error_message', ctx=Load()), args=[Name(id='error', ctx=Load()), Name(id='show_traceback', ctx=Load()), Attribute(value=Name(id='options', ctx=Load()), attr='use_user_site', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='error', ctx=Load()), args=[Name(id='message', ctx=Load())], keywords=[keyword(arg='exc_info', value=Name(id='show_traceback', ctx=Load()))])), Return(value=Name(id='ERROR', ctx=Load()))])], orelse=[], finalbody=[]), If(test=Attribute(value=Name(id='options', ctx=Load()), attr='target_dir', ctx=Load()), body=[Assert(test=Name(id='target_temp_dir', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_handle_target_dir', ctx=Load()), args=[Attribute(value=Name(id='options', ctx=Load()), attr='target_dir', ctx=Load()), Name(id='target_temp_dir', ctx=Load()), Attribute(value=Name(id='options', ctx=Load()), attr='upgrade', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='options', ctx=Load()), attr='root_user_action', ctx=Load()), ops=[Eq()], comparators=[Constant(value='warn')]), body=[Expr(value=Call(func=Name(id='warn_if_run_as_root', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Name(id='SUCCESS', ctx=Load()))], decorator_list=[Name(id='with_cleanup', ctx=Load())], returns=Name(id='int', ctx=Load())), FunctionDef(name='_handle_target_dir', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='target_dir', annotation=Name(id='str', ctx=Load())), arg(arg='target_temp_dir', annotation=Name(id='TempDirectory', ctx=Load())), arg(arg='upgrade', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='ensure_dir', ctx=Load()), args=[Name(id='target_dir', ctx=Load())], keywords=[])), Assign(targets=[Name(id='lib_dir_list', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='scheme', ctx=Store())], value=Call(func=Name(id='get_scheme', ctx=Load()), args=[Constant(value='')], keywords=[keyword(arg='home', value=Attribute(value=Name(id='target_temp_dir', ctx=Load()), attr='path', ctx=Load()))])), Assign(targets=[Name(id='purelib_dir', ctx=Store())], value=Attribute(value=Name(id='scheme', ctx=Load()), attr='purelib', ctx=Load())), Assign(targets=[Name(id='platlib_dir', ctx=Store())], value=Attribute(value=Name(id='scheme', ctx=Load()), attr='platlib', ctx=Load())), Assign(targets=[Name(id='data_dir', ctx=Store())], value=Attribute(value=Name(id='scheme', ctx=Load()), attr='data', ctx=Load())), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='purelib_dir', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='lib_dir_list', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='purelib_dir', ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='platlib_dir', ctx=Load())], keywords=[]), Compare(left=Name(id='platlib_dir', ctx=Load()), ops=[NotEq()], comparators=[Name(id='purelib_dir', ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Name(id='lib_dir_list', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='platlib_dir', ctx=Load())], keywords=[]))], orelse=[]), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='data_dir', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='lib_dir_list', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='data_dir', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='lib_dir', ctx=Store()), iter=Name(id='lib_dir_list', ctx=Load()), body=[For(target=Name(id='item', ctx=Store()), iter=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='listdir', ctx=Load()), args=[Name(id='lib_dir', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='lib_dir', ctx=Load()), ops=[Eq()], comparators=[Name(id='data_dir', ctx=Load())]), body=[Assign(targets=[Name(id='ddir', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='data_dir', ctx=Load()), Name(id='item', ctx=Load())], keywords=[])), If(test=Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='startswith', ctx=Load()), args=[Name(id='ddir', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='s', ctx=Store()), iter=Subscript(value=Name(id='lib_dir_list', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), body=[Continue()], orelse=[])], orelse=[]), Assign(targets=[Name(id='target_item_dir', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='target_dir', ctx=Load()), Name(id='item', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='target_item_dir', ctx=Load())], keywords=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='upgrade', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='Target directory %s already exists. Specify --upgrade to force replacement.'), Name(id='target_item_dir', ctx=Load())], keywords=[])), Continue()], orelse=[]), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='islink', ctx=Load()), args=[Name(id='target_item_dir', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='Target directory %s already exists and is a link. pip will not automatically replace links, please remove if replacement is desired.'), Name(id='target_item_dir', ctx=Load())], keywords=[])), Continue()], orelse=[]), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isdir', ctx=Load()), args=[Name(id='target_item_dir', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='shutil', ctx=Load()), attr='rmtree', ctx=Load()), args=[Name(id='target_item_dir', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='target_item_dir', ctx=Load())], keywords=[]))])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='shutil', ctx=Load()), attr='move', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='lib_dir', ctx=Load()), Name(id='item', ctx=Load())], keywords=[]), Name(id='target_item_dir', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_determine_conflicts', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='to_install', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='InstallRequirement', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Return(value=Call(func=Name(id='check_install_conflicts', ctx=Load()), args=[Name(id='to_install', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='exception', ctx=Load()), args=[Constant(value="Error while checking for conflicts. Please file an issue on pip's issue tracker: https://github.com/pypa/pip/issues/new")], keywords=[])), Return(value=Constant(value=None))])], orelse=[], finalbody=[])], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='ConflictDetails', ctx=Load()), ctx=Load())), FunctionDef(name='_warn_about_conflicts', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='conflict_details', annotation=Name(id='ConflictDetails', ctx=Load())), arg(arg='resolver_variant', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='package_set', ctx=Store()), Tuple(elts=[Name(id='missing', ctx=Store()), Name(id='conflicting', ctx=Store())], ctx=Store())], ctx=Store())], value=Name(id='conflict_details', ctx=Load())), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Name(id='missing', ctx=Load())), UnaryOp(op=Not(), operand=Name(id='conflicting', ctx=Load()))]), body=[Return()], orelse=[]), AnnAssign(target=Name(id='parts', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), If(test=Compare(left=Name(id='resolver_variant', ctx=Load()), ops=[Eq()], comparators=[Constant(value='legacy')]), body=[Expr(value=Call(func=Attribute(value=Name(id='parts', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value="pip's legacy dependency resolver does not consider dependency conflicts when selecting packages. This behaviour is the source of the following dependency conflicts.")], keywords=[]))], orelse=[Assert(test=Compare(left=Name(id='resolver_variant', ctx=Load()), ops=[Eq()], comparators=[Constant(value='resolvelib')])), Expr(value=Call(func=Attribute(value=Name(id='parts', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value="pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.")], keywords=[]))]), For(target=Name(id='project_name', ctx=Store()), iter=Name(id='missing', ctx=Load()), body=[Assign(targets=[Name(id='version', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='package_set', ctx=Load()), slice=Name(id='project_name', ctx=Load()), ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Name(id='dependency', ctx=Store()), iter=Subscript(value=Name(id='missing', ctx=Load()), slice=Name(id='project_name', ctx=Load()), ctx=Load()), body=[Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Attribute(value=Constant(value='{name} {version} requires {requirement}, which is not installed.'), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Name(id='project_name', ctx=Load())), keyword(arg='version', value=Name(id='version', ctx=Load())), keyword(arg='requirement', value=Subscript(value=Name(id='dependency', ctx=Load()), slice=Constant(value=1), ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='parts', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='message', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), For(target=Name(id='project_name', ctx=Store()), iter=Name(id='conflicting', ctx=Load()), body=[Assign(targets=[Name(id='version', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='package_set', ctx=Load()), slice=Name(id='project_name', ctx=Load()), ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Tuple(elts=[Name(id='dep_name', ctx=Store()), Name(id='dep_version', ctx=Store()), Name(id='req', ctx=Store())], ctx=Store()), iter=Subscript(value=Name(id='conflicting', ctx=Load()), slice=Name(id='project_name', ctx=Load()), ctx=Load()), body=[Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Attribute(value=Constant(value='{name} {version} requires {requirement}, but {you} have {dep_name} {dep_version} which is incompatible.'), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Name(id='project_name', ctx=Load())), keyword(arg='version', value=Name(id='version', ctx=Load())), keyword(arg='requirement', value=Name(id='req', ctx=Load())), keyword(arg='dep_name', value=Name(id='dep_name', ctx=Load())), keyword(arg='dep_version', value=Name(id='dep_version', ctx=Load())), keyword(arg='you', value=IfExp(test=Compare(left=Name(id='resolver_variant', ctx=Load()), ops=[Eq()], comparators=[Constant(value='resolvelib')]), body=Constant(value='you'), orelse=Constant(value="you'll")))])), Expr(value=Call(func=Attribute(value=Name(id='parts', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='message', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='critical', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='\n'), attr='join', ctx=Load()), args=[Name(id='parts', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), FunctionDef(name='get_lib_location_guesses', args=arguments(posonlyargs=[], args=[arg(arg='user', annotation=Name(id='bool', ctx=Load())), arg(arg='home', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='root', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='isolated', annotation=Name(id='bool', ctx=Load())), arg(arg='prefix', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Constant(value=None), Constant(value=None), Constant(value=False), Constant(value=None)]), body=[Assign(targets=[Name(id='scheme', ctx=Store())], value=Call(func=Name(id='get_scheme', ctx=Load()), args=[Constant(value='')], keywords=[keyword(arg='user', value=Name(id='user', ctx=Load())), keyword(arg='home', value=Name(id='home', ctx=Load())), keyword(arg='root', value=Name(id='root', ctx=Load())), keyword(arg='isolated', value=Name(id='isolated', ctx=Load())), keyword(arg='prefix', value=Name(id='prefix', ctx=Load()))])), Return(value=List(elts=[Attribute(value=Name(id='scheme', ctx=Load()), attr='purelib', ctx=Load()), Attribute(value=Name(id='scheme', ctx=Load()), attr='platlib', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='site_packages_writable', args=arguments(posonlyargs=[], args=[arg(arg='root', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='isolated', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='all', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='test_writable_dir', ctx=Load()), args=[Name(id='d', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='d', ctx=Store()), iter=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Name(id='get_lib_location_guesses', ctx=Load()), args=[], keywords=[keyword(arg='root', value=Name(id='root', ctx=Load())), keyword(arg='isolated', value=Name(id='isolated', ctx=Load()))])], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='decide_user_install', args=arguments(posonlyargs=[], args=[arg(arg='use_user_site', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load())), arg(arg='prefix_path', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='target_dir', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='root_path', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='isolated_mode', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=False)]), body=[Expr(value=Constant(value='Determine whether to do a user install based on the input options.\n\n    If use_user_site is False, no additional checks are done.\n    If use_user_site is True, it is checked for compatibility with other\n    options.\n    If use_user_site is None, the default behaviour depends on the environment,\n    which is provided by the other arguments.\n    ')), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='use_user_site', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), UnaryOp(op=Not(), operand=Name(id='use_user_site', ctx=Load()))]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Non-user install by explicit request')], keywords=[])), Return(value=Constant(value=False))], orelse=[]), If(test=Name(id='use_user_site', ctx=Load()), body=[If(test=Name(id='prefix_path', ctx=Load()), body=[Raise(exc=Call(func=Name(id='CommandError', ctx=Load()), args=[Constant(value="Can not combine '--user' and '--prefix' as they imply different installation locations")], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='virtualenv_no_global', ctx=Load()), args=[], keywords=[]), body=[Raise(exc=Call(func=Name(id='InstallationError', ctx=Load()), args=[Constant(value="Can not perform a '--user' install. User site-packages are not visible in this virtualenv.")], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='User install by explicit request')], keywords=[])), Return(value=Constant(value=True))], orelse=[]), Assert(test=Compare(left=Name(id='use_user_site', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])), If(test=BoolOp(op=Or(), values=[Name(id='prefix_path', ctx=Load()), Name(id='target_dir', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Non-user install due to --prefix or --target option')], keywords=[])), Return(value=Constant(value=False))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='site', ctx=Load()), attr='ENABLE_USER_SITE', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Non-user install because user site-packages disabled')], keywords=[])), Return(value=Constant(value=False))], orelse=[]), If(test=Call(func=Name(id='site_packages_writable', ctx=Load()), args=[], keywords=[keyword(arg='root', value=Name(id='root_path', ctx=Load())), keyword(arg='isolated', value=Name(id='isolated_mode', ctx=Load()))]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Non-user install because site-packages writeable')], keywords=[])), Return(value=Constant(value=False))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Defaulting to user installation because normal site-packages is not writeable')], keywords=[])), Return(value=Constant(value=True))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='create_os_error_message', args=arguments(posonlyargs=[], args=[arg(arg='error', annotation=Name(id='OSError', ctx=Load())), arg(arg='show_traceback', annotation=Name(id='bool', ctx=Load())), arg(arg='using_user_site', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Format an error message for an OSError\n\n    It may occur anytime during the execution of the install command.\n    ')), Assign(targets=[Name(id='parts', ctx=Store())], value=List(elts=[], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='parts', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='Could not install packages due to an OSError')], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='show_traceback', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='parts', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value=': ')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='parts', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='parts', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='.')], keywords=[]))]), AugAssign(target=Subscript(value=Name(id='parts', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Store()), op=Add(), value=Constant(value='\n')), If(test=Compare(left=Attribute(value=Name(id='error', ctx=Load()), attr='errno', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='errno', ctx=Load()), attr='EACCES', ctx=Load())]), body=[Assign(targets=[Name(id='user_option_part', ctx=Store())], value=Constant(value='Consider using the `--user` option')), Assign(targets=[Name(id='permissions_part', ctx=Store())], value=Constant(value='Check the permissions')), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Call(func=Name(id='running_under_virtualenv', ctx=Load()), args=[], keywords=[])), UnaryOp(op=Not(), operand=Name(id='using_user_site', ctx=Load()))]), body=[Expr(value=Call(func=Attribute(value=Name(id='parts', ctx=Load()), attr='extend', ctx=Load()), args=[List(elts=[Name(id='user_option_part', ctx=Load()), Constant(value=' or '), Call(func=Attribute(value=Name(id='permissions_part', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])], ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='parts', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='permissions_part', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='parts', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='.\n')], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Name(id='WINDOWS', ctx=Load()), Compare(left=Attribute(value=Name(id='error', ctx=Load()), attr='errno', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='errno', ctx=Load()), attr='ENOENT', ctx=Load())]), Attribute(value=Name(id='error', ctx=Load()), attr='filename', ctx=Load()), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='error', ctx=Load()), attr='filename', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=260)])]), body=[Expr(value=Call(func=Attribute(value=Name(id='parts', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='HINT: This error might have occurred since this system does not have Windows Long Path support enabled. You can find information on how to enable this at https://pip.pypa.io/warnings/enable-long-paths\n')], keywords=[]))], orelse=[]), Return(value=BinOp(left=Call(func=Attribute(value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Name(id='parts', ctx=Load())], keywords=[]), attr='strip', ctx=Load()), args=[], keywords=[]), op=Add(), right=Constant(value='\n')))], decorator_list=[], returns=Name(id='str', ctx=Load()))], type_ignores=[])