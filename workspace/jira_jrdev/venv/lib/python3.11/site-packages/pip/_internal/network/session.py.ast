Module(body=[Expr(value=Constant(value='PipSession and supporting code, containing all pip-specific\nnetwork request configuration and behavior.\n')), Import(names=[alias(name='email.utils')]), Import(names=[alias(name='io')]), Import(names=[alias(name='ipaddress')]), Import(names=[alias(name='json')]), Import(names=[alias(name='logging')]), Import(names=[alias(name='mimetypes')]), Import(names=[alias(name='os')]), Import(names=[alias(name='platform')]), Import(names=[alias(name='shutil')]), Import(names=[alias(name='subprocess')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='urllib.parse')]), Import(names=[alias(name='warnings')]), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING'), alias(name='Any'), alias(name='Dict'), alias(name='Generator'), alias(name='List'), alias(name='Mapping'), alias(name='Optional'), alias(name='Sequence'), alias(name='Tuple'), alias(name='Union')], level=0), ImportFrom(module='pip._vendor', names=[alias(name='requests'), alias(name='urllib3')], level=0), ImportFrom(module='pip._vendor.cachecontrol', names=[alias(name='CacheControlAdapter', asname='_BaseCacheControlAdapter')], level=0), ImportFrom(module='pip._vendor.requests.adapters', names=[alias(name='DEFAULT_POOLBLOCK'), alias(name='BaseAdapter')], level=0), ImportFrom(module='pip._vendor.requests.adapters', names=[alias(name='HTTPAdapter', asname='_BaseHTTPAdapter')], level=0), ImportFrom(module='pip._vendor.requests.models', names=[alias(name='PreparedRequest'), alias(name='Response')], level=0), ImportFrom(module='pip._vendor.requests.structures', names=[alias(name='CaseInsensitiveDict')], level=0), ImportFrom(module='pip._vendor.urllib3.connectionpool', names=[alias(name='ConnectionPool')], level=0), ImportFrom(module='pip._vendor.urllib3.exceptions', names=[alias(name='InsecureRequestWarning')], level=0), ImportFrom(module='pip', names=[alias(name='__version__')], level=0), ImportFrom(module='pip._internal.metadata', names=[alias(name='get_default_environment')], level=0), ImportFrom(module='pip._internal.models.link', names=[alias(name='Link')], level=0), ImportFrom(module='pip._internal.network.auth', names=[alias(name='MultiDomainBasicAuth')], level=0), ImportFrom(module='pip._internal.network.cache', names=[alias(name='SafeFileCache')], level=0), ImportFrom(module='pip._internal.utils.compat', names=[alias(name='has_tls')], level=0), ImportFrom(module='pip._internal.utils.glibc', names=[alias(name='libc_ver')], level=0), ImportFrom(module='pip._internal.utils.misc', names=[alias(name='build_url_from_netloc'), alias(name='parse_netloc')], level=0), ImportFrom(module='pip._internal.utils.urls', names=[alias(name='url_to_path')], level=0), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='ssl', names=[alias(name='SSLContext')], level=0), ImportFrom(module='pip._vendor.urllib3.poolmanager', names=[alias(name='PoolManager')], level=0)], orelse=[]), Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), Assign(targets=[Name(id='SecureOrigin', ctx=Store())], value=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='filterwarnings', ctx=Load()), args=[Constant(value='ignore')], keywords=[keyword(arg='category', value=Name(id='InsecureRequestWarning', ctx=Load()))])), AnnAssign(target=Name(id='SECURE_ORIGINS', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='SecureOrigin', ctx=Load()), ctx=Load()), value=List(elts=[Tuple(elts=[Constant(value='https'), Constant(value='*'), Constant(value='*')], ctx=Load()), Tuple(elts=[Constant(value='*'), Constant(value='localhost'), Constant(value='*')], ctx=Load()), Tuple(elts=[Constant(value='*'), Constant(value='127.0.0.0/8'), Constant(value='*')], ctx=Load()), Tuple(elts=[Constant(value='*'), Constant(value='::1/128'), Constant(value='*')], ctx=Load()), Tuple(elts=[Constant(value='file'), Constant(value='*'), Constant(value=None)], ctx=Load()), Tuple(elts=[Constant(value='ssh'), Constant(value='*'), Constant(value='*')], ctx=Load())], ctx=Load()), simple=1), Assign(targets=[Name(id='CI_ENVIRONMENT_VARIABLES', ctx=Store())], value=Tuple(elts=[Constant(value='BUILD_BUILDID'), Constant(value='BUILD_ID'), Constant(value='CI'), Constant(value='PIP_IS_CI')], ctx=Load())), FunctionDef(name='looks_like_ci', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Return whether it looks like pip is running under CI.\n    ')), Return(value=Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=Compare(left=Name(id='name', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load())]), generators=[comprehension(target=Name(id='name', ctx=Store()), iter=Name(id='CI_ENVIRONMENT_VARIABLES', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='user_agent', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Return a string representing the user agent.\n    ')), AnnAssign(target=Name(id='data', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[Constant(value='installer'), Constant(value='python'), Constant(value='implementation')], values=[Dict(keys=[Constant(value='name'), Constant(value='version')], values=[Constant(value='pip'), Name(id='__version__', ctx=Load())]), Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='python_version', ctx=Load()), args=[], keywords=[]), Dict(keys=[Constant(value='name')], values=[Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='python_implementation', ctx=Load()), args=[], keywords=[])])]), simple=1), If(test=Compare(left=Subscript(value=Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='implementation'), ctx=Load()), slice=Constant(value='name'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='CPython')]), body=[Assign(targets=[Subscript(value=Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='implementation'), ctx=Load()), slice=Constant(value='version'), ctx=Store())], value=Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='python_version', ctx=Load()), args=[], keywords=[]))], orelse=[If(test=Compare(left=Subscript(value=Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='implementation'), ctx=Load()), slice=Constant(value='name'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='PyPy')]), body=[Assign(targets=[Name(id='pypy_version_info', ctx=Store())], value=Attribute(value=Name(id='sys', ctx=Load()), attr='pypy_version_info', ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='pypy_version_info', ctx=Load()), attr='releaselevel', ctx=Load()), ops=[Eq()], comparators=[Constant(value='final')]), body=[Assign(targets=[Name(id='pypy_version_info', ctx=Store())], value=Subscript(value=Name(id='pypy_version_info', ctx=Load()), slice=Slice(upper=Constant(value=3)), ctx=Load()))], orelse=[]), Assign(targets=[Subscript(value=Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='implementation'), ctx=Load()), slice=Constant(value='version'), ctx=Store())], value=Call(func=Attribute(value=Constant(value='.'), attr='join', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='str', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='pypy_version_info', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], orelse=[If(test=Compare(left=Subscript(value=Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='implementation'), ctx=Load()), slice=Constant(value='name'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='Jython')]), body=[Assign(targets=[Subscript(value=Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='implementation'), ctx=Load()), slice=Constant(value='version'), ctx=Store())], value=Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='python_version', ctx=Load()), args=[], keywords=[]))], orelse=[If(test=Compare(left=Subscript(value=Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='implementation'), ctx=Load()), slice=Constant(value='name'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='IronPython')]), body=[Assign(targets=[Subscript(value=Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='implementation'), ctx=Load()), slice=Constant(value='version'), ctx=Store())], value=Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='python_version', ctx=Load()), args=[], keywords=[]))], orelse=[])])])]), If(test=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='linux')], keywords=[]), body=[ImportFrom(module='pip._vendor', names=[alias(name='distro')], level=0), Assign(targets=[Name(id='linux_distribution', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='distro', ctx=Load()), attr='name', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='distro', ctx=Load()), attr='version', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='distro', ctx=Load()), attr='codename', ctx=Load()), args=[], keywords=[])], ctx=Load())), AnnAssign(target=Name(id='distro_infos', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), value=Call(func=Name(id='dict', ctx=Load()), args=[Call(func=Name(id='filter', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value=1), ctx=Load())), Call(func=Name(id='zip', ctx=Load()), args=[List(elts=[Constant(value='name'), Constant(value='version'), Constant(value='id')], ctx=Load()), Name(id='linux_distribution', ctx=Load())], keywords=[])], keywords=[])], keywords=[]), simple=1), Assign(targets=[Name(id='libc', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[Call(func=Name(id='filter', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value=1), ctx=Load())), Call(func=Name(id='zip', ctx=Load()), args=[List(elts=[Constant(value='lib'), Constant(value='version')], ctx=Load()), Call(func=Name(id='libc_ver', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])], keywords=[])), If(test=Name(id='libc', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='distro_infos', ctx=Load()), slice=Constant(value='libc'), ctx=Store())], value=Name(id='libc', ctx=Load()))], orelse=[]), If(test=Name(id='distro_infos', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='distro'), ctx=Store())], value=Name(id='distro_infos', ctx=Load()))], orelse=[])], orelse=[]), If(test=BoolOp(op=And(), values=[Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='darwin')], keywords=[]), Subscript(value=Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='mac_ver', ctx=Load()), args=[], keywords=[]), slice=Constant(value=0), ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='distro'), ctx=Store())], value=Dict(keys=[Constant(value='name'), Constant(value='version')], values=[Constant(value='macOS'), Subscript(value=Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='mac_ver', ctx=Load()), args=[], keywords=[]), slice=Constant(value=0), ctx=Load())]))], orelse=[]), If(test=Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='system', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Subscript(value=Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='setdefault', ctx=Load()), args=[Constant(value='system'), Dict(keys=[], values=[])], keywords=[]), slice=Constant(value='name'), ctx=Store())], value=Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='system', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='release', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Subscript(value=Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='setdefault', ctx=Load()), args=[Constant(value='system'), Dict(keys=[], values=[])], keywords=[]), slice=Constant(value='release'), ctx=Store())], value=Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='release', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='machine', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='cpu'), ctx=Store())], value=Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='machine', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='has_tls', ctx=Load()), args=[], keywords=[]), body=[Import(names=[alias(name='_ssl', asname='ssl')]), Assign(targets=[Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='openssl_version'), ctx=Store())], value=Attribute(value=Name(id='ssl', ctx=Load()), attr='OPENSSL_VERSION', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='setuptools_dist', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='get_default_environment', ctx=Load()), args=[], keywords=[]), attr='get_distribution', ctx=Load()), args=[Constant(value='setuptools')], keywords=[])), If(test=Compare(left=Name(id='setuptools_dist', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='setuptools_version'), ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='setuptools_dist', ctx=Load()), attr='version', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Call(func=Attribute(value=Name(id='shutil', ctx=Load()), attr='which', ctx=Load()), args=[Constant(value='rustc')], keywords=[]), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Try(body=[Assign(targets=[Name(id='rustc_output', ctx=Store())], value=Call(func=Attribute(value=Name(id='subprocess', ctx=Load()), attr='check_output', ctx=Load()), args=[List(elts=[Constant(value='rustc'), Constant(value='--version')], ctx=Load())], keywords=[keyword(arg='stderr', value=Attribute(value=Name(id='subprocess', ctx=Load()), attr='STDOUT', ctx=Load())), keyword(arg='timeout', value=Constant(value=0.5))]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Pass()])], orelse=[If(test=Call(func=Attribute(value=Name(id='rustc_output', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value=b'rustc ')], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='rustc_version'), ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Call(func=Attribute(value=Name(id='rustc_output', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=b' ')], keywords=[]), slice=Constant(value=1), ctx=Load()), attr='decode', ctx=Load()), args=[], keywords=[]))], orelse=[])], finalbody=[])], orelse=[]), Assign(targets=[Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='ci'), ctx=Store())], value=IfExp(test=Call(func=Name(id='looks_like_ci', ctx=Load()), args=[], keywords=[]), body=Constant(value=True), orelse=Constant(value=None))), Assign(targets=[Name(id='user_data', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='PIP_USER_AGENT_USER_DATA')], keywords=[])), If(test=Compare(left=Name(id='user_data', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='user_data'), ctx=Store())], value=Name(id='user_data', ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Constant(value='{data[installer][name]}/{data[installer][version]} {json}'), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='data', value=Name(id='data', ctx=Load())), keyword(arg='json', value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dumps', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[keyword(arg='separators', value=Tuple(elts=[Constant(value=','), Constant(value=':')], ctx=Load())), keyword(arg='sort_keys', value=Constant(value=True))]))]))], decorator_list=[], returns=Name(id='str', ctx=Load())), ClassDef(name='LocalFSAdapter', bases=[Name(id='BaseAdapter', ctx=Load())], keywords=[], body=[FunctionDef(name='send', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='request', annotation=Name(id='PreparedRequest', ctx=Load())), arg(arg='stream', annotation=Name(id='bool', ctx=Load())), arg(arg='timeout', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='float', ctx=Load()), Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='verify', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='bool', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='cert', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='proxies', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Mapping', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Constant(value=None), Constant(value=True), Constant(value=None), Constant(value=None)]), body=[Assign(targets=[Name(id='pathname', ctx=Store())], value=Call(func=Name(id='url_to_path', ctx=Load()), args=[Attribute(value=Name(id='request', ctx=Load()), attr='url', ctx=Load())], keywords=[])), Assign(targets=[Name(id='resp', ctx=Store())], value=Call(func=Name(id='Response', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='resp', ctx=Load()), attr='status_code', ctx=Store())], value=Constant(value=200)), Assign(targets=[Attribute(value=Name(id='resp', ctx=Load()), attr='url', ctx=Store())], value=Attribute(value=Name(id='request', ctx=Load()), attr='url', ctx=Load())), Try(body=[Assign(targets=[Name(id='stats', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='stat', ctx=Load()), args=[Name(id='pathname', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), name='exc', body=[Assign(targets=[Attribute(value=Name(id='resp', ctx=Load()), attr='status_code', ctx=Store())], value=Constant(value=404)), Assign(targets=[Attribute(value=Name(id='resp', ctx=Load()), attr='reason', ctx=Store())], value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='exc', ctx=Load())], keywords=[]), attr='__name__', ctx=Load())), Assign(targets=[Attribute(value=Name(id='resp', ctx=Load()), attr='raw', ctx=Store())], value=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='BytesIO', ctx=Load()), args=[Call(func=Attribute(value=JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='resp', ctx=Load()), attr='reason', ctx=Load()), conversion=-1), Constant(value=': '), FormattedValue(value=Name(id='exc', ctx=Load()), conversion=-1)]), attr='encode', ctx=Load()), args=[Constant(value='utf8')], keywords=[])], keywords=[]))])], orelse=[Assign(targets=[Name(id='modified', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='email', ctx=Load()), attr='utils', ctx=Load()), attr='formatdate', ctx=Load()), args=[Attribute(value=Name(id='stats', ctx=Load()), attr='st_mtime', ctx=Load())], keywords=[keyword(arg='usegmt', value=Constant(value=True))])), Assign(targets=[Name(id='content_type', ctx=Store())], value=BoolOp(op=Or(), values=[Subscript(value=Call(func=Attribute(value=Name(id='mimetypes', ctx=Load()), attr='guess_type', ctx=Load()), args=[Name(id='pathname', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load()), Constant(value='text/plain')])), Assign(targets=[Attribute(value=Name(id='resp', ctx=Load()), attr='headers', ctx=Store())], value=Call(func=Name(id='CaseInsensitiveDict', ctx=Load()), args=[Dict(keys=[Constant(value='Content-Type'), Constant(value='Content-Length'), Constant(value='Last-Modified')], values=[Name(id='content_type', ctx=Load()), Attribute(value=Name(id='stats', ctx=Load()), attr='st_size', ctx=Load()), Name(id='modified', ctx=Load())])], keywords=[])), Assign(targets=[Attribute(value=Name(id='resp', ctx=Load()), attr='raw', ctx=Store())], value=Call(func=Name(id='open', ctx=Load()), args=[Name(id='pathname', ctx=Load()), Constant(value='rb')], keywords=[])), Assign(targets=[Attribute(value=Name(id='resp', ctx=Load()), attr='close', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='resp', ctx=Load()), attr='raw', ctx=Load()), attr='close', ctx=Load()))], finalbody=[]), Return(value=Name(id='resp', ctx=Load()))], decorator_list=[], returns=Name(id='Response', ctx=Load())), FunctionDef(name='close', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='_SSLContextAdapterMixin', bases=[], keywords=[], body=[Expr(value=Constant(value='Mixin to add the ``ssl_context`` constructor argument to HTTP adapters.\n\n    The additional argument is forwarded directly to the pool manager. This allows us\n    to dynamically decide what SSL store to use at runtime, which is used to implement\n    the optional ``truststore`` backend.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[arg(arg='ssl_context', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='SSLContext'), ctx=Load()))], kw_defaults=[Constant(value=None)], kwarg=arg(arg='kwargs', annotation=Name(id='Any', ctx=Load())), defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_ssl_context', ctx=Store())], value=Name(id='ssl_context', ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='init_poolmanager', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='connections', annotation=Name(id='int', ctx=Load())), arg(arg='maxsize', annotation=Name(id='int', ctx=Load())), arg(arg='block', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='pool_kwargs', annotation=Name(id='Any', ctx=Load())), defaults=[Name(id='DEFAULT_POOLBLOCK', ctx=Load())]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_ssl_context', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='pool_kwargs', ctx=Load()), attr='setdefault', ctx=Load()), args=[Constant(value='ssl_context'), Attribute(value=Name(id='self', ctx=Load()), attr='_ssl_context', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='init_poolmanager', ctx=Load()), args=[], keywords=[keyword(arg='connections', value=Name(id='connections', ctx=Load())), keyword(arg='maxsize', value=Name(id='maxsize', ctx=Load())), keyword(arg='block', value=Name(id='block', ctx=Load())), keyword(value=Name(id='pool_kwargs', ctx=Load()))]))], decorator_list=[], returns=Constant(value='PoolManager'))], decorator_list=[]), ClassDef(name='HTTPAdapter', bases=[Name(id='_SSLContextAdapterMixin', ctx=Load()), Name(id='_BaseHTTPAdapter', ctx=Load())], keywords=[], body=[Pass()], decorator_list=[]), ClassDef(name='CacheControlAdapter', bases=[Name(id='_SSLContextAdapterMixin', ctx=Load()), Name(id='_BaseCacheControlAdapter', ctx=Load())], keywords=[], body=[Pass()], decorator_list=[]), ClassDef(name='InsecureHTTPAdapter', bases=[Name(id='HTTPAdapter', ctx=Load())], keywords=[], body=[FunctionDef(name='cert_verify', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='conn', annotation=Name(id='ConnectionPool', ctx=Load())), arg(arg='url', annotation=Name(id='str', ctx=Load())), arg(arg='verify', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='bool', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='cert', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='cert_verify', ctx=Load()), args=[], keywords=[keyword(arg='conn', value=Name(id='conn', ctx=Load())), keyword(arg='url', value=Name(id='url', ctx=Load())), keyword(arg='verify', value=Constant(value=False)), keyword(arg='cert', value=Name(id='cert', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='InsecureCacheControlAdapter', bases=[Name(id='CacheControlAdapter', ctx=Load())], keywords=[], body=[FunctionDef(name='cert_verify', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='conn', annotation=Name(id='ConnectionPool', ctx=Load())), arg(arg='url', annotation=Name(id='str', ctx=Load())), arg(arg='verify', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='bool', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='cert', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='cert_verify', ctx=Load()), args=[], keywords=[keyword(arg='conn', value=Name(id='conn', ctx=Load())), keyword(arg='url', value=Name(id='url', ctx=Load())), keyword(arg='verify', value=Constant(value=False)), keyword(arg='cert', value=Name(id='cert', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='PipSession', bases=[Attribute(value=Name(id='requests', ctx=Load()), attr='Session', ctx=Load())], keywords=[], body=[AnnAssign(target=Name(id='timeout', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=1), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args', annotation=Name(id='Any', ctx=Load())), kwonlyargs=[arg(arg='retries', annotation=Name(id='int', ctx=Load())), arg(arg='cache', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='trusted_hosts', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='index_urls', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='ssl_context', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='SSLContext'), ctx=Load()))], kw_defaults=[Constant(value=0), Constant(value=None), Tuple(elts=[], ctx=Load()), Constant(value=None), Constant(value=None)], kwarg=arg(arg='kwargs', annotation=Name(id='Any', ctx=Load())), defaults=[]), body=[Expr(value=Constant(value='\n        :param trusted_hosts: Domains not to emit warnings for when not using\n            HTTPS.\n        ')), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))])), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='pip_trusted_origins', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=0), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='headers', ctx=Load()), slice=Constant(value='User-Agent'), ctx=Store())], value=Call(func=Name(id='user_agent', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='auth', ctx=Store())], value=Call(func=Name(id='MultiDomainBasicAuth', ctx=Load()), args=[], keywords=[keyword(arg='index_urls', value=Name(id='index_urls', ctx=Load()))])), Assign(targets=[Name(id='retries', ctx=Store())], value=Call(func=Attribute(value=Name(id='urllib3', ctx=Load()), attr='Retry', ctx=Load()), args=[], keywords=[keyword(arg='total', value=Name(id='retries', ctx=Load())), keyword(arg='status_forcelist', value=List(elts=[Constant(value=500), Constant(value=503), Constant(value=520), Constant(value=527)], ctx=Load())), keyword(arg='backoff_factor', value=Constant(value=0.25))])), Assign(targets=[Name(id='insecure_adapter', ctx=Store())], value=Call(func=Name(id='InsecureHTTPAdapter', ctx=Load()), args=[], keywords=[keyword(arg='max_retries', value=Name(id='retries', ctx=Load()))])), If(test=Name(id='cache', ctx=Load()), body=[Assign(targets=[Name(id='secure_adapter', ctx=Store())], value=Call(func=Name(id='CacheControlAdapter', ctx=Load()), args=[], keywords=[keyword(arg='cache', value=Call(func=Name(id='SafeFileCache', ctx=Load()), args=[Name(id='cache', ctx=Load())], keywords=[])), keyword(arg='max_retries', value=Name(id='retries', ctx=Load())), keyword(arg='ssl_context', value=Name(id='ssl_context', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_trusted_host_adapter', ctx=Store())], value=Call(func=Name(id='InsecureCacheControlAdapter', ctx=Load()), args=[], keywords=[keyword(arg='cache', value=Call(func=Name(id='SafeFileCache', ctx=Load()), args=[Name(id='cache', ctx=Load())], keywords=[])), keyword(arg='max_retries', value=Name(id='retries', ctx=Load()))]))], orelse=[Assign(targets=[Name(id='secure_adapter', ctx=Store())], value=Call(func=Name(id='HTTPAdapter', ctx=Load()), args=[], keywords=[keyword(arg='max_retries', value=Name(id='retries', ctx=Load())), keyword(arg='ssl_context', value=Name(id='ssl_context', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_trusted_host_adapter', ctx=Store())], value=Name(id='insecure_adapter', ctx=Load()))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='mount', ctx=Load()), args=[Constant(value='https://'), Name(id='secure_adapter', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='mount', ctx=Load()), args=[Constant(value='http://'), Name(id='insecure_adapter', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='mount', ctx=Load()), args=[Constant(value='file://'), Call(func=Name(id='LocalFSAdapter', ctx=Load()), args=[], keywords=[])], keywords=[])), For(target=Name(id='host', ctx=Store()), iter=Name(id='trusted_hosts', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='add_trusted_host', ctx=Load()), args=[Name(id='host', ctx=Load())], keywords=[keyword(arg='suppress_logging', value=Constant(value=True))]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='update_index_urls', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='new_index_urls', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        :param new_index_urls: New index urls to update the authentication\n            handler with.\n        ')), Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='auth', ctx=Load()), attr='index_urls', ctx=Store())], value=Name(id='new_index_urls', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='add_trusted_host', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='host', annotation=Name(id='str', ctx=Load())), arg(arg='source', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='suppress_logging', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=False)]), body=[Expr(value=Constant(value='\n        :param host: It is okay to provide a host that has previously been\n            added.\n        :param source: An optional source string, for logging where the host\n            string came from.\n        ')), If(test=UnaryOp(op=Not(), operand=Name(id='suppress_logging', ctx=Load())), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=JoinedStr(values=[Constant(value='adding trusted host: '), FormattedValue(value=Name(id='host', ctx=Load()), conversion=114)])), If(test=Compare(left=Name(id='source', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[AugAssign(target=Name(id='msg', ctx=Store()), op=Add(), value=JoinedStr(values=[Constant(value=' (from '), FormattedValue(value=Name(id='source', ctx=Load()), conversion=-1), Constant(value=')')]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='parsed_host', ctx=Store()), Name(id='parsed_port', ctx=Store())], ctx=Store())], value=Call(func=Name(id='parse_netloc', ctx=Load()), args=[Name(id='host', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='parsed_host', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='Trusted host URL must include a host part: '), FormattedValue(value=Name(id='host', ctx=Load()), conversion=114)])], keywords=[]))], orelse=[]), If(test=Compare(left=Tuple(elts=[Name(id='parsed_host', ctx=Load()), Name(id='parsed_port', ctx=Load())], ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='pip_trusted_origins', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='pip_trusted_origins', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='parsed_host', ctx=Load()), Name(id='parsed_port', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='mount', ctx=Load()), args=[BinOp(left=Call(func=Name(id='build_url_from_netloc', ctx=Load()), args=[Name(id='host', ctx=Load())], keywords=[keyword(arg='scheme', value=Constant(value='http'))]), op=Add(), right=Constant(value='/')), Attribute(value=Name(id='self', ctx=Load()), attr='_trusted_host_adapter', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='mount', ctx=Load()), args=[BinOp(left=Call(func=Name(id='build_url_from_netloc', ctx=Load()), args=[Name(id='host', ctx=Load())], keywords=[]), op=Add(), right=Constant(value='/')), Attribute(value=Name(id='self', ctx=Load()), attr='_trusted_host_adapter', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='parsed_port', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='mount', ctx=Load()), args=[BinOp(left=Call(func=Name(id='build_url_from_netloc', ctx=Load()), args=[Name(id='host', ctx=Load())], keywords=[keyword(arg='scheme', value=Constant(value='http'))]), op=Add(), right=Constant(value=':')), Attribute(value=Name(id='self', ctx=Load()), attr='_trusted_host_adapter', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='mount', ctx=Load()), args=[BinOp(left=Call(func=Name(id='build_url_from_netloc', ctx=Load()), args=[Name(id='host', ctx=Load())], keywords=[]), op=Add(), right=Constant(value=':')), Attribute(value=Name(id='self', ctx=Load()), attr='_trusted_host_adapter', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='iter_secure_origins', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=YieldFrom(value=Name(id='SECURE_ORIGINS', ctx=Load()))), For(target=Tuple(elts=[Name(id='host', ctx=Store()), Name(id='port', ctx=Store())], ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='pip_trusted_origins', ctx=Load()), body=[Expr(value=Yield(value=Tuple(elts=[Constant(value='*'), Name(id='host', ctx=Load()), IfExp(test=Compare(left=Name(id='port', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Constant(value='*'), orelse=Name(id='port', ctx=Load()))], ctx=Load())))], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Name(id='SecureOrigin', ctx=Load()), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='is_secure_origin', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='location', annotation=Name(id='Link', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='parsed', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='urllib', ctx=Load()), attr='parse', ctx=Load()), attr='urlparse', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='location', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='origin_protocol', ctx=Store()), Name(id='origin_host', ctx=Store()), Name(id='origin_port', ctx=Store())], ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='parsed', ctx=Load()), attr='scheme', ctx=Load()), Attribute(value=Name(id='parsed', ctx=Load()), attr='hostname', ctx=Load()), Attribute(value=Name(id='parsed', ctx=Load()), attr='port', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='origin_protocol', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='origin_protocol', ctx=Load()), attr='rsplit', ctx=Load()), args=[Constant(value='+'), Constant(value=1)], keywords=[]), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())), For(target=Name(id='secure_origin', ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='iter_secure_origins', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='secure_protocol', ctx=Store()), Name(id='secure_host', ctx=Store()), Name(id='secure_port', ctx=Store())], ctx=Store())], value=Name(id='secure_origin', ctx=Load())), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='origin_protocol', ctx=Load()), ops=[NotEq()], comparators=[Name(id='secure_protocol', ctx=Load())]), Compare(left=Name(id='secure_protocol', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='*')])]), body=[Continue()], orelse=[]), Try(body=[Assign(targets=[Name(id='addr', ctx=Store())], value=Call(func=Attribute(value=Name(id='ipaddress', ctx=Load()), attr='ip_address', ctx=Load()), args=[BoolOp(op=Or(), values=[Name(id='origin_host', ctx=Load()), Constant(value='')])], keywords=[])), Assign(targets=[Name(id='network', ctx=Store())], value=Call(func=Attribute(value=Name(id='ipaddress', ctx=Load()), attr='ip_network', ctx=Load()), args=[Name(id='secure_host', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[If(test=BoolOp(op=And(), values=[Name(id='origin_host', ctx=Load()), Compare(left=Call(func=Attribute(value=Name(id='origin_host', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), ops=[NotEq()], comparators=[Call(func=Attribute(value=Name(id='secure_host', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])]), Compare(left=Name(id='secure_host', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='*')])]), body=[Continue()], orelse=[])])], orelse=[If(test=Compare(left=Name(id='addr', ctx=Load()), ops=[NotIn()], comparators=[Name(id='network', ctx=Load())]), body=[Continue()], orelse=[])], finalbody=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='origin_port', ctx=Load()), ops=[NotEq()], comparators=[Name(id='secure_port', ctx=Load())]), Compare(left=Name(id='secure_port', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='*')]), Compare(left=Name(id='secure_port', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Continue()], orelse=[]), Return(value=Constant(value=True))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value="The repository located at %s is not a trusted or secure host and is being ignored. If this repository is available via HTTPS we recommend you use HTTPS instead, otherwise you may silence this warning and allow it anyway with '--trusted-host %s'."), Name(id='origin_host', ctx=Load()), Name(id='origin_host', ctx=Load())], keywords=[])), Return(value=Constant(value=False))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='request', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='method', annotation=Name(id='str', ctx=Load())), arg(arg='url', annotation=Name(id='str', ctx=Load()))], vararg=arg(arg='args', annotation=Name(id='Any', ctx=Load())), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs', annotation=Name(id='Any', ctx=Load())), defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='kwargs', ctx=Load()), attr='setdefault', ctx=Load()), args=[Constant(value='timeout'), Attribute(value=Name(id='self', ctx=Load()), attr='timeout', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='kwargs', ctx=Load()), attr='setdefault', ctx=Load()), args=[Constant(value='proxies'), Attribute(value=Name(id='self', ctx=Load()), attr='proxies', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='request', ctx=Load()), args=[Name(id='method', ctx=Load()), Name(id='url', ctx=Load()), Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[], returns=Name(id='Response', ctx=Load()))], decorator_list=[])], type_ignores=[])