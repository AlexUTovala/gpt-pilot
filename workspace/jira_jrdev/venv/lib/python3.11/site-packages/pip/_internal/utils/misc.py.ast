Module(body=[Import(names=[alias(name='contextlib')]), Import(names=[alias(name='errno')]), Import(names=[alias(name='getpass')]), Import(names=[alias(name='hashlib')]), Import(names=[alias(name='io')]), Import(names=[alias(name='logging')]), Import(names=[alias(name='os')]), Import(names=[alias(name='posixpath')]), Import(names=[alias(name='shutil')]), Import(names=[alias(name='stat')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='sysconfig')]), Import(names=[alias(name='urllib.parse')]), ImportFrom(module='functools', names=[alias(name='partial')], level=0), ImportFrom(module='io', names=[alias(name='StringIO')], level=0), ImportFrom(module='itertools', names=[alias(name='filterfalse'), alias(name='tee'), alias(name='zip_longest')], level=0), ImportFrom(module='pathlib', names=[alias(name='Path')], level=0), ImportFrom(module='types', names=[alias(name='FunctionType'), alias(name='TracebackType')], level=0), ImportFrom(module='typing', names=[alias(name='Any'), alias(name='BinaryIO'), alias(name='Callable'), alias(name='ContextManager'), alias(name='Dict'), alias(name='Generator'), alias(name='Iterable'), alias(name='Iterator'), alias(name='List'), alias(name='Optional'), alias(name='TextIO'), alias(name='Tuple'), alias(name='Type'), alias(name='TypeVar'), alias(name='Union'), alias(name='cast')], level=0), ImportFrom(module='pip._vendor.packaging.requirements', names=[alias(name='Requirement')], level=0), ImportFrom(module='pip._vendor.pyproject_hooks', names=[alias(name='BuildBackendHookCaller')], level=0), ImportFrom(module='pip._vendor.tenacity', names=[alias(name='retry'), alias(name='stop_after_delay'), alias(name='wait_fixed')], level=0), ImportFrom(module='pip', names=[alias(name='__version__')], level=0), ImportFrom(module='pip._internal.exceptions', names=[alias(name='CommandError'), alias(name='ExternallyManagedEnvironment')], level=0), ImportFrom(module='pip._internal.locations', names=[alias(name='get_major_minor_version')], level=0), ImportFrom(module='pip._internal.utils.compat', names=[alias(name='WINDOWS')], level=0), ImportFrom(module='pip._internal.utils.virtualenv', names=[alias(name='running_under_virtualenv')], level=0), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='rmtree'), Constant(value='display_path'), Constant(value='backup_dir'), Constant(value='ask'), Constant(value='splitext'), Constant(value='format_size'), Constant(value='is_installable_dir'), Constant(value='normalize_path'), Constant(value='renames'), Constant(value='get_prog'), Constant(value='captured_stdout'), Constant(value='ensure_dir'), Constant(value='remove_auth_from_url'), Constant(value='check_externally_managed'), Constant(value='ConfiguredBuildBackendHookCaller')], ctx=Load())), Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), Assign(targets=[Name(id='T', ctx=Store())], value=Call(func=Name(id='TypeVar', ctx=Load()), args=[Constant(value='T')], keywords=[])), Assign(targets=[Name(id='ExcInfo', ctx=Store())], value=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Type', ctx=Load()), slice=Name(id='BaseException', ctx=Load()), ctx=Load()), Name(id='BaseException', ctx=Load()), Name(id='TracebackType', ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='VersionInfo', ctx=Store())], value=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='NetlocTuple', ctx=Store())], value=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='OnExc', ctx=Store())], value=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='FunctionType', ctx=Load()), Name(id='Path', ctx=Load()), Name(id='BaseException', ctx=Load())], ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='OnErr', ctx=Store())], value=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='FunctionType', ctx=Load()), Name(id='Path', ctx=Load()), Name(id='ExcInfo', ctx=Load())], ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='get_pip_version', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='pip_pkg_dir', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Name(id='__file__', ctx=Load())], keywords=[]), Constant(value='..'), Constant(value='..')], keywords=[])), Assign(targets=[Name(id='pip_pkg_dir', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Name(id='pip_pkg_dir', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Constant(value='pip {} from {} (python {})'), attr='format', ctx=Load()), args=[Name(id='__version__', ctx=Load()), Name(id='pip_pkg_dir', ctx=Load()), Call(func=Name(id='get_major_minor_version', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='normalize_version_info', args=arguments(posonlyargs=[], args=[arg(arg='py_version_info', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Convert a tuple of ints representing a Python version to one of length\n    three.\n\n    :param py_version_info: a tuple of ints representing a Python version,\n        or None to specify no version. The tuple can have any length.\n\n    :return: a tuple of length three if `py_version_info` is non-None.\n        Otherwise, return `py_version_info` unchanged (i.e. None).\n    ')), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='py_version_info', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Constant(value=3)]), body=[AugAssign(target=Name(id='py_version_info', ctx=Store()), op=Add(), value=BinOp(left=BinOp(left=Constant(value=3), op=Sub(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='py_version_info', ctx=Load())], keywords=[])), op=Mult(), right=Tuple(elts=[Constant(value=0)], ctx=Load())))], orelse=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='py_version_info', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=3)]), body=[Assign(targets=[Name(id='py_version_info', ctx=Store())], value=Subscript(value=Name(id='py_version_info', ctx=Load()), slice=Slice(upper=Constant(value=3)), ctx=Load()))], orelse=[])]), Return(value=Call(func=Name(id='cast', ctx=Load()), args=[Constant(value='VersionInfo'), Name(id='py_version_info', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='ensure_dir', args=arguments(posonlyargs=[], args=[arg(arg='path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='os.path.makedirs without EEXIST.')), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), name='e', body=[If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='e', ctx=Load()), attr='errno', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='errno', ctx=Load()), attr='EEXIST', ctx=Load())]), Compare(left=Attribute(value=Name(id='e', ctx=Load()), attr='errno', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='errno', ctx=Load()), attr='ENOTEMPTY', ctx=Load())])]), body=[Raise()], orelse=[])])], orelse=[], finalbody=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='get_prog', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Name(id='prog', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='basename', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='argv', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='prog', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='__main__.py'), Constant(value='-c')], ctx=Load())]), body=[Return(value=JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='sys', ctx=Load()), attr='executable', ctx=Load()), conversion=-1), Constant(value=' -m pip')]))], orelse=[Return(value=Name(id='prog', ctx=Load()))])], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='AttributeError', ctx=Load()), Name(id='TypeError', ctx=Load()), Name(id='IndexError', ctx=Load())], ctx=Load()), body=[Pass()])], orelse=[], finalbody=[]), Return(value=Constant(value='pip'))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='rmtree', args=arguments(posonlyargs=[], args=[arg(arg='dir', annotation=Name(id='str', ctx=Load())), arg(arg='ignore_errors', annotation=Name(id='bool', ctx=Load())), arg(arg='onexc', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='OnExc', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Constant(value=None)]), body=[If(test=Name(id='ignore_errors', ctx=Load()), body=[Assign(targets=[Name(id='onexc', ctx=Store())], value=Name(id='_onerror_ignore', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='onexc', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='onexc', ctx=Store())], value=Name(id='_onerror_reraise', ctx=Load()))], orelse=[]), AnnAssign(target=Name(id='handler', ctx=Store()), annotation=Name(id='OnErr', ctx=Load()), value=Call(func=Name(id='partial', ctx=Load()), args=[Call(func=Name(id='cast', ctx=Load()), args=[Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='OnExc', ctx=Load()), Name(id='OnErr', ctx=Load())], ctx=Load()), ctx=Load()), Name(id='rmtree_errorhandler', ctx=Load())], keywords=[])], keywords=[keyword(arg='onexc', value=Name(id='onexc', ctx=Load()))]), simple=1), If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), ops=[GtE()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=12)], ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='shutil', ctx=Load()), attr='rmtree', ctx=Load()), args=[Name(id='dir', ctx=Load())], keywords=[keyword(arg='onexc', value=Name(id='handler', ctx=Load()))]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='shutil', ctx=Load()), attr='rmtree', ctx=Load()), args=[Name(id='dir', ctx=Load())], keywords=[keyword(arg='onerror', value=Name(id='handler', ctx=Load()))]))])], decorator_list=[Call(func=Name(id='retry', ctx=Load()), args=[], keywords=[keyword(arg='reraise', value=Constant(value=True)), keyword(arg='stop', value=Call(func=Name(id='stop_after_delay', ctx=Load()), args=[Constant(value=3)], keywords=[])), keyword(arg='wait', value=Call(func=Name(id='wait_fixed', ctx=Load()), args=[Constant(value=0.5)], keywords=[]))])], returns=Constant(value=None)), FunctionDef(name='_onerror_ignore', args=arguments(posonlyargs=[], args=[], vararg=arg(arg='_args', annotation=Name(id='Any', ctx=Load())), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_onerror_reraise', args=arguments(posonlyargs=[], args=[], vararg=arg(arg='_args', annotation=Name(id='Any', ctx=Load())), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise()], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='rmtree_errorhandler', args=arguments(posonlyargs=[], args=[arg(arg='func', annotation=Name(id='FunctionType', ctx=Load())), arg(arg='path', annotation=Name(id='Path', ctx=Load())), arg(arg='exc_info', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='ExcInfo', ctx=Load()), Name(id='BaseException', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[arg(arg='onexc', annotation=Name(id='OnExc', ctx=Load()))], kw_defaults=[Name(id='_onerror_reraise', ctx=Load())], defaults=[]), body=[Expr(value=Constant(value='\n    `rmtree` error handler to \'force\' a file remove (i.e. like `rm -f`).\n\n    * If a file is readonly then it\'s write flag is set and operation is\n      retried.\n\n    * `onerror` is the original callback from `rmtree(... onerror=onerror)`\n      that is chained at the end if the "rm -f" still fails.\n    ')), Try(body=[Assign(targets=[Name(id='st_mode', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='stat', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), attr='st_mode', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), body=[Return()])], orelse=[], finalbody=[]), If(test=UnaryOp(op=Not(), operand=BinOp(left=Name(id='st_mode', ctx=Load()), op=BitAnd(), right=Attribute(value=Name(id='stat', ctx=Load()), attr='S_IWRITE', ctx=Load()))), body=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='chmod', ctx=Load()), args=[Name(id='path', ctx=Load()), BinOp(left=Name(id='st_mode', ctx=Load()), op=BitOr(), right=Attribute(value=Name(id='stat', ctx=Load()), attr='S_IWRITE', ctx=Load()))], keywords=[]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), body=[Pass()])], orelse=[Try(body=[Expr(value=Call(func=Name(id='func', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), Return()], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], finalbody=[])], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='exc_info', ctx=Load()), Name(id='BaseException', ctx=Load())], keywords=[])), body=[Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='exc_info', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Name(id='exc_info', ctx=Load()))], orelse=[]), Expr(value=Call(func=Name(id='onexc', ctx=Load()), args=[Name(id='func', ctx=Load()), Name(id='path', ctx=Load()), Name(id='exc_info', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='display_path', args=arguments(posonlyargs=[], args=[arg(arg='path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Gives the display value for a given path, making it relative to cwd\n    if possible.')), Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normcase', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])], keywords=[])), If(test=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='startswith', ctx=Load()), args=[BinOp(left=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getcwd', ctx=Load()), args=[], keywords=[]), op=Add(), right=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='sep', ctx=Load()))], keywords=[]), body=[Assign(targets=[Name(id='path', ctx=Store())], value=BinOp(left=Constant(value='.'), op=Add(), right=Subscript(value=Name(id='path', ctx=Load()), slice=Slice(lower=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getcwd', ctx=Load()), args=[], keywords=[])], keywords=[])), ctx=Load())))], orelse=[]), Return(value=Name(id='path', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='backup_dir', args=arguments(posonlyargs=[], args=[arg(arg='dir', annotation=Name(id='str', ctx=Load())), arg(arg='ext', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='.bak')]), body=[Expr(value=Constant(value='Figure out the name of a directory to back up the given dir to\n    (adding .bak, .bak2, etc)')), Assign(targets=[Name(id='n', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='extension', ctx=Store())], value=Name(id='ext', ctx=Load())), While(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[BinOp(left=Name(id='dir', ctx=Load()), op=Add(), right=Name(id='extension', ctx=Load()))], keywords=[]), body=[AugAssign(target=Name(id='n', ctx=Store()), op=Add(), value=Constant(value=1)), Assign(targets=[Name(id='extension', ctx=Store())], value=BinOp(left=Name(id='ext', ctx=Load()), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Name(id='n', ctx=Load())], keywords=[])))], orelse=[]), Return(value=BinOp(left=Name(id='dir', ctx=Load()), op=Add(), right=Name(id='extension', ctx=Load())))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='ask_path_exists', args=arguments(posonlyargs=[], args=[arg(arg='message', annotation=Name(id='str', ctx=Load())), arg(arg='options', annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='action', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='PIP_EXISTS_ACTION'), Constant(value='')], keywords=[]), attr='split', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Name(id='action', ctx=Load()), ops=[In()], comparators=[Name(id='options', ctx=Load())]), body=[Return(value=Name(id='action', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Call(func=Name(id='ask', ctx=Load()), args=[Name(id='message', ctx=Load()), Name(id='options', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='_check_no_input', args=arguments(posonlyargs=[], args=[arg(arg='message', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Raise an error if no input is allowed.')), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='PIP_NO_INPUT')], keywords=[]), body=[Raise(exc=Call(func=Name(id='Exception', ctx=Load()), args=[JoinedStr(values=[Constant(value='No input was expected ($PIP_NO_INPUT set); question: '), FormattedValue(value=Name(id='message', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='ask', args=arguments(posonlyargs=[], args=[arg(arg='message', annotation=Name(id='str', ctx=Load())), arg(arg='options', annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Ask the message interactively, with the given possible responses')), While(test=Constant(value=1), body=[Expr(value=Call(func=Name(id='_check_no_input', ctx=Load()), args=[Name(id='message', ctx=Load())], keywords=[])), Assign(targets=[Name(id='response', ctx=Store())], value=Call(func=Name(id='input', ctx=Load()), args=[Name(id='message', ctx=Load())], keywords=[])), Assign(targets=[Name(id='response', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='response', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]), attr='lower', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='response', ctx=Load()), ops=[NotIn()], comparators=[Name(id='options', ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Your response ({!r}) was not one of the expected responses: {}'), attr='format', ctx=Load()), args=[Name(id='response', ctx=Load()), Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Name(id='options', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], orelse=[Return(value=Name(id='response', ctx=Load()))])], orelse=[])], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='ask_input', args=arguments(posonlyargs=[], args=[arg(arg='message', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Ask for input interactively.')), Expr(value=Call(func=Name(id='_check_no_input', ctx=Load()), args=[Name(id='message', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='input', ctx=Load()), args=[Name(id='message', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='ask_password', args=arguments(posonlyargs=[], args=[arg(arg='message', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Ask for a password interactively.')), Expr(value=Call(func=Name(id='_check_no_input', ctx=Load()), args=[Name(id='message', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='getpass', ctx=Load()), attr='getpass', ctx=Load()), args=[Name(id='message', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='strtobool', args=arguments(posonlyargs=[], args=[arg(arg='val', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Convert a string representation of truth to true (1) or false (0).\n\n    True values are 'y', 'yes', 't', 'true', 'on', and '1'; false values\n    are 'n', 'no', 'f', 'false', 'off', and '0'.  Raises ValueError if\n    'val' is anything else.\n    ")), Assign(targets=[Name(id='val', ctx=Store())], value=Call(func=Attribute(value=Name(id='val', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='val', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='y'), Constant(value='yes'), Constant(value='t'), Constant(value='true'), Constant(value='on'), Constant(value='1')], ctx=Load())]), body=[Return(value=Constant(value=1))], orelse=[If(test=Compare(left=Name(id='val', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='n'), Constant(value='no'), Constant(value='f'), Constant(value='false'), Constant(value='off'), Constant(value='0')], ctx=Load())]), body=[Return(value=Constant(value=0))], orelse=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='invalid truth value '), FormattedValue(value=Name(id='val', ctx=Load()), conversion=114)])], keywords=[]))])])], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='format_size', args=arguments(posonlyargs=[], args=[arg(arg='bytes', annotation=Name(id='float', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='bytes', ctx=Load()), ops=[Gt()], comparators=[BinOp(left=Constant(value=1000), op=Mult(), right=Constant(value=1000))]), body=[Return(value=Call(func=Attribute(value=Constant(value='{:.1f} MB'), attr='format', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='bytes', ctx=Load()), op=Div(), right=Constant(value=1000.0)), op=Div(), right=Constant(value=1000))], keywords=[]))], orelse=[If(test=Compare(left=Name(id='bytes', ctx=Load()), ops=[Gt()], comparators=[BinOp(left=Constant(value=10), op=Mult(), right=Constant(value=1000))]), body=[Return(value=Call(func=Attribute(value=Constant(value='{} kB'), attr='format', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Name(id='bytes', ctx=Load()), op=Div(), right=Constant(value=1000))], keywords=[])], keywords=[]))], orelse=[If(test=Compare(left=Name(id='bytes', ctx=Load()), ops=[Gt()], comparators=[Constant(value=1000)]), body=[Return(value=Call(func=Attribute(value=Constant(value='{:.1f} kB'), attr='format', ctx=Load()), args=[BinOp(left=Name(id='bytes', ctx=Load()), op=Div(), right=Constant(value=1000.0))], keywords=[]))], orelse=[Return(value=Call(func=Attribute(value=Constant(value='{} bytes'), attr='format', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Name(id='bytes', ctx=Load())], keywords=[])], keywords=[]))])])])], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='tabulate', args=arguments(posonlyargs=[], args=[arg(arg='rows', annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Return a list of formatted rows and a list of column sizes.\n\n    For example::\n\n    >>> tabulate([['foobar', 2000], [0xdeadbeef]])\n    (['foobar     2000', '3735928559'], [10, 4])\n    ")), Assign(targets=[Name(id='rows', ctx=Store())], value=ListComp(elt=Call(func=Name(id='tuple', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Name(id='str', ctx=Load()), Name(id='row', ctx=Load())], keywords=[])], keywords=[]), generators=[comprehension(target=Name(id='row', ctx=Store()), iter=Name(id='rows', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='sizes', ctx=Store())], value=ListComp(elt=Call(func=Name(id='max', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Name(id='len', ctx=Load()), Name(id='col', ctx=Load())], keywords=[])], keywords=[]), generators=[comprehension(target=Name(id='col', ctx=Store()), iter=Call(func=Name(id='zip_longest', ctx=Load()), args=[Starred(value=Name(id='rows', ctx=Load()), ctx=Load())], keywords=[keyword(arg='fillvalue', value=Constant(value=''))]), ifs=[], is_async=0)])), Assign(targets=[Name(id='table', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Call(func=Attribute(value=Constant(value=' '), attr='join', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Attribute(value=Name(id='str', ctx=Load()), attr='ljust', ctx=Load()), Name(id='row', ctx=Load()), Name(id='sizes', ctx=Load())], keywords=[])], keywords=[]), attr='rstrip', ctx=Load()), args=[], keywords=[]), generators=[comprehension(target=Name(id='row', ctx=Store()), iter=Name(id='rows', ctx=Load()), ifs=[], is_async=0)])), Return(value=Tuple(elts=[Name(id='table', ctx=Load()), Name(id='sizes', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='is_installable_dir', args=arguments(posonlyargs=[], args=[arg(arg='path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Is path is a directory containing pyproject.toml or setup.py?\n\n    If pyproject.toml exists, this is a PEP 517 project. Otherwise we look for\n    a legacy setuptools layout by identifying setup.py. We don't check for the\n    setup.cfg because using it without setup.py is only available for PEP 517\n    projects, which are already covered by the pyproject.toml check.\n    ")), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isdir', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isfile', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='path', ctx=Load()), Constant(value='pyproject.toml')], keywords=[])], keywords=[]), body=[Return(value=Constant(value=True))], orelse=[]), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isfile', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='path', ctx=Load()), Constant(value='setup.py')], keywords=[])], keywords=[]), body=[Return(value=Constant(value=True))], orelse=[]), Return(value=Constant(value=False))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='read_chunks', args=arguments(posonlyargs=[], args=[arg(arg='file', annotation=Name(id='BinaryIO', ctx=Load())), arg(arg='size', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Attribute(value=Name(id='io', ctx=Load()), attr='DEFAULT_BUFFER_SIZE', ctx=Load())]), body=[Expr(value=Constant(value='Yield pieces of data from a file-like object until EOF.')), While(test=Constant(value=True), body=[Assign(targets=[Name(id='chunk', ctx=Store())], value=Call(func=Attribute(value=Name(id='file', ctx=Load()), attr='read', ctx=Load()), args=[Name(id='size', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='chunk', ctx=Load())), body=[Break()], orelse=[]), Expr(value=Yield(value=Name(id='chunk', ctx=Load())))], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Name(id='bytes', ctx=Load()), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='normalize_path', args=arguments(posonlyargs=[], args=[arg(arg='path', annotation=Name(id='str', ctx=Load())), arg(arg='resolve_symlinks', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Expr(value=Constant(value='\n    Convert a path to its canonical, case-normalized, absolute version.\n\n    ')), Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='expanduser', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), If(test=Name(id='resolve_symlinks', ctx=Load()), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='realpath', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))]), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normcase', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='splitext', args=arguments(posonlyargs=[], args=[arg(arg='path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Like os.path.splitext, but take off .tar too')), Assign(targets=[Tuple(elts=[Name(id='base', ctx=Store()), Name(id='ext', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='posixpath', ctx=Load()), attr='splitext', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='base', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), attr='endswith', ctx=Load()), args=[Constant(value='.tar')], keywords=[]), body=[Assign(targets=[Name(id='ext', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='base', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Constant(value=4))), ctx=Load()), op=Add(), right=Name(id='ext', ctx=Load()))), Assign(targets=[Name(id='base', ctx=Store())], value=Subscript(value=Name(id='base', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=4))), ctx=Load()))], orelse=[]), Return(value=Tuple(elts=[Name(id='base', ctx=Load()), Name(id='ext', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='renames', args=arguments(posonlyargs=[], args=[arg(arg='old', annotation=Name(id='str', ctx=Load())), arg(arg='new', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Like os.renames(), but handles renaming across devices.')), Assign(targets=[Tuple(elts=[Name(id='head', ctx=Store()), Name(id='tail', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='split', ctx=Load()), args=[Name(id='new', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Name(id='head', ctx=Load()), Name(id='tail', ctx=Load()), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='head', ctx=Load())], keywords=[]))]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Name(id='head', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='shutil', ctx=Load()), attr='move', ctx=Load()), args=[Name(id='old', ctx=Load()), Name(id='new', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='head', ctx=Store()), Name(id='tail', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='split', ctx=Load()), args=[Name(id='old', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Name(id='head', ctx=Load()), Name(id='tail', ctx=Load())]), body=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='removedirs', ctx=Load()), args=[Name(id='head', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='is_local', args=arguments(posonlyargs=[], args=[arg(arg='path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Return True if path is within sys.prefix, if we\'re running in a virtualenv.\n\n    If we\'re not in a virtualenv, all paths are considered "local."\n\n    Caution: this function assumes the head of path has been normalized\n    with normalize_path.\n    ')), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='running_under_virtualenv', ctx=Load()), args=[], keywords=[])), body=[Return(value=Constant(value=True))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='startswith', ctx=Load()), args=[Call(func=Name(id='normalize_path', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='prefix', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='write_output', args=arguments(posonlyargs=[], args=[arg(arg='msg', annotation=Name(id='Any', ctx=Load()))], vararg=arg(arg='args', annotation=Name(id='Any', ctx=Load())), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Name(id='msg', ctx=Load()), Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), ClassDef(name='StreamWrapper', bases=[Name(id='StringIO', ctx=Load())], keywords=[], body=[AnnAssign(target=Name(id='orig_stream', ctx=Store()), annotation=Name(id='TextIO', ctx=Load()), simple=1), FunctionDef(name='from_stream', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='orig_stream', annotation=Name(id='TextIO', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Name(id='cls', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='ret', ctx=Load()), attr='orig_stream', ctx=Store())], value=Name(id='orig_stream', ctx=Load())), Return(value=Name(id='ret', ctx=Load()))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Constant(value='StreamWrapper')), FunctionDef(name='encoding', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='orig_stream', ctx=Load()), attr='encoding', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load()))], decorator_list=[]), FunctionDef(name='captured_output', args=arguments(posonlyargs=[], args=[arg(arg='stream_name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return a context manager used by captured_stdout/stdin/stderr\n    that temporarily replaces the sys stream *stream_name* with a StringIO.\n\n    Taken from Lib/support/__init__.py in the CPython repo.\n    ')), Assign(targets=[Name(id='orig_stdout', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='sys', ctx=Load()), Name(id='stream_name', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='sys', ctx=Load()), Name(id='stream_name', ctx=Load()), Call(func=Attribute(value=Name(id='StreamWrapper', ctx=Load()), attr='from_stream', ctx=Load()), args=[Name(id='orig_stdout', ctx=Load())], keywords=[])], keywords=[])), Try(body=[Expr(value=Yield(value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='sys', ctx=Load()), Name(id='stream_name', ctx=Load())], keywords=[])))], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='sys', ctx=Load()), Name(id='stream_name', ctx=Load()), Name(id='orig_stdout', ctx=Load())], keywords=[]))])], decorator_list=[Attribute(value=Name(id='contextlib', ctx=Load()), attr='contextmanager', ctx=Load())], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Name(id='StreamWrapper', ctx=Load()), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='captured_stdout', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Capture the output of sys.stdout:\n\n       with captured_stdout() as stdout:\n           print('hello')\n       self.assertEqual(stdout.getvalue(), 'hello\n')\n\n    Taken from Lib/support/__init__.py in the CPython repo.\n    ")), Return(value=Call(func=Name(id='captured_output', ctx=Load()), args=[Constant(value='stdout')], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='ContextManager', ctx=Load()), slice=Name(id='StreamWrapper', ctx=Load()), ctx=Load())), FunctionDef(name='captured_stderr', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    See captured_stdout().\n    ')), Return(value=Call(func=Name(id='captured_output', ctx=Load()), args=[Constant(value='stderr')], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='ContextManager', ctx=Load()), slice=Name(id='StreamWrapper', ctx=Load()), ctx=Load())), FunctionDef(name='enum', args=arguments(posonlyargs=[], args=[], vararg=arg(arg='sequential', annotation=Name(id='Any', ctx=Load())), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='named', annotation=Name(id='Any', ctx=Load())), defaults=[]), body=[Assign(targets=[Name(id='enums', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[Call(func=Name(id='zip', ctx=Load()), args=[Name(id='sequential', ctx=Load()), Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='sequential', ctx=Load())], keywords=[])], keywords=[])], keywords=[])], keywords=[keyword(value=Name(id='named', ctx=Load()))])), Assign(targets=[Name(id='reverse', ctx=Store())], value=DictComp(key=Name(id='value', ctx=Load()), value=Name(id='key', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='enums', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Subscript(value=Name(id='enums', ctx=Load()), slice=Constant(value='reverse_mapping'), ctx=Store())], value=Name(id='reverse', ctx=Load())), Return(value=Call(func=Name(id='type', ctx=Load()), args=[Constant(value='Enum'), Tuple(elts=[], ctx=Load()), Name(id='enums', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Type', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load())), FunctionDef(name='build_netloc', args=arguments(posonlyargs=[], args=[arg(arg='host', annotation=Name(id='str', ctx=Load())), arg(arg='port', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Build a netloc from a host-port pair\n    ')), If(test=Compare(left=Name(id='port', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Name(id='host', ctx=Load()))], orelse=[]), If(test=Compare(left=Constant(value=':'), ops=[In()], comparators=[Name(id='host', ctx=Load())]), body=[Assign(targets=[Name(id='host', ctx=Store())], value=JoinedStr(values=[Constant(value='['), FormattedValue(value=Name(id='host', ctx=Load()), conversion=-1), Constant(value=']')]))], orelse=[]), Return(value=JoinedStr(values=[FormattedValue(value=Name(id='host', ctx=Load()), conversion=-1), Constant(value=':'), FormattedValue(value=Name(id='port', ctx=Load()), conversion=-1)]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='build_url_from_netloc', args=arguments(posonlyargs=[], args=[arg(arg='netloc', annotation=Name(id='str', ctx=Load())), arg(arg='scheme', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='https')]), body=[Expr(value=Constant(value='\n    Build a full URL from a netloc.\n    ')), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Attribute(value=Name(id='netloc', ctx=Load()), attr='count', ctx=Load()), args=[Constant(value=':')], keywords=[]), ops=[GtE()], comparators=[Constant(value=2)]), Compare(left=Constant(value='@'), ops=[NotIn()], comparators=[Name(id='netloc', ctx=Load())]), Compare(left=Constant(value='['), ops=[NotIn()], comparators=[Name(id='netloc', ctx=Load())])]), body=[Assign(targets=[Name(id='netloc', ctx=Store())], value=JoinedStr(values=[Constant(value='['), FormattedValue(value=Name(id='netloc', ctx=Load()), conversion=-1), Constant(value=']')]))], orelse=[]), Return(value=JoinedStr(values=[FormattedValue(value=Name(id='scheme', ctx=Load()), conversion=-1), Constant(value='://'), FormattedValue(value=Name(id='netloc', ctx=Load()), conversion=-1)]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='parse_netloc', args=arguments(posonlyargs=[], args=[arg(arg='netloc', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Return the host-port pair from a netloc.\n    ')), Assign(targets=[Name(id='url', ctx=Store())], value=Call(func=Name(id='build_url_from_netloc', ctx=Load()), args=[Name(id='netloc', ctx=Load())], keywords=[])), Assign(targets=[Name(id='parsed', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='urllib', ctx=Load()), attr='parse', ctx=Load()), attr='urlparse', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Attribute(value=Name(id='parsed', ctx=Load()), attr='hostname', ctx=Load()), Attribute(value=Name(id='parsed', ctx=Load()), attr='port', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='split_auth_from_netloc', args=arguments(posonlyargs=[], args=[arg(arg='netloc', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Parse out and remove the auth information from a netloc.\n\n    Returns: (netloc, (username, password)).\n    ')), If(test=Compare(left=Constant(value='@'), ops=[NotIn()], comparators=[Name(id='netloc', ctx=Load())]), body=[Return(value=Tuple(elts=[Name(id='netloc', ctx=Load()), Tuple(elts=[Constant(value=None), Constant(value=None)], ctx=Load())], ctx=Load()))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='auth', ctx=Store()), Name(id='netloc', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='netloc', ctx=Load()), attr='rsplit', ctx=Load()), args=[Constant(value='@'), Constant(value=1)], keywords=[])), AnnAssign(target=Name(id='pw', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=1), If(test=Compare(left=Constant(value=':'), ops=[In()], comparators=[Name(id='auth', ctx=Load())]), body=[Assign(targets=[Tuple(elts=[Name(id='user', ctx=Store()), Name(id='pw', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='auth', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=':'), Constant(value=1)], keywords=[]))], orelse=[Assign(targets=[Tuple(elts=[Name(id='user', ctx=Store()), Name(id='pw', ctx=Store())], ctx=Store())], value=Tuple(elts=[Name(id='auth', ctx=Load()), Constant(value=None)], ctx=Load()))]), Assign(targets=[Name(id='user', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='urllib', ctx=Load()), attr='parse', ctx=Load()), attr='unquote', ctx=Load()), args=[Name(id='user', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='pw', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='pw', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='urllib', ctx=Load()), attr='parse', ctx=Load()), attr='unquote', ctx=Load()), args=[Name(id='pw', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Tuple(elts=[Name(id='netloc', ctx=Load()), Tuple(elts=[Name(id='user', ctx=Load()), Name(id='pw', ctx=Load())], ctx=Load())], ctx=Load()))], decorator_list=[], returns=Name(id='NetlocTuple', ctx=Load())), FunctionDef(name='redact_netloc', args=arguments(posonlyargs=[], args=[arg(arg='netloc', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Replace the sensitive data in a netloc with "****", if it exists.\n\n    For example:\n        - "user:pass@example.com" returns "user:****@example.com"\n        - "accesstoken@example.com" returns "****@example.com"\n    ')), Assign(targets=[Tuple(elts=[Name(id='netloc', ctx=Store()), Tuple(elts=[Name(id='user', ctx=Store()), Name(id='password', ctx=Store())], ctx=Store())], ctx=Store())], value=Call(func=Name(id='split_auth_from_netloc', ctx=Load()), args=[Name(id='netloc', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='user', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Name(id='netloc', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='password', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='user', ctx=Store())], value=Constant(value='****')), Assign(targets=[Name(id='password', ctx=Store())], value=Constant(value=''))], orelse=[Assign(targets=[Name(id='user', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='urllib', ctx=Load()), attr='parse', ctx=Load()), attr='quote', ctx=Load()), args=[Name(id='user', ctx=Load())], keywords=[])), Assign(targets=[Name(id='password', ctx=Store())], value=Constant(value=':****'))]), Return(value=Call(func=Attribute(value=Constant(value='{user}{password}@{netloc}'), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='user', value=Name(id='user', ctx=Load())), keyword(arg='password', value=Name(id='password', ctx=Load())), keyword(arg='netloc', value=Name(id='netloc', ctx=Load()))]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='_transform_url', args=arguments(posonlyargs=[], args=[arg(arg='url', annotation=Name(id='str', ctx=Load())), arg(arg='transform_netloc', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='str', ctx=Load())], ctx=Load()), Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='Any', ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Transform and replace netloc in a url.\n\n    transform_netloc is a function taking the netloc and returning a\n    tuple. The first element of this tuple is the new netloc. The\n    entire tuple is returned.\n\n    Returns a tuple containing the transformed url as item 0 and the\n    original tuple returned by transform_netloc as item 1.\n    ')), Assign(targets=[Name(id='purl', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='urllib', ctx=Load()), attr='parse', ctx=Load()), attr='urlsplit', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[])), Assign(targets=[Name(id='netloc_tuple', ctx=Store())], value=Call(func=Name(id='transform_netloc', ctx=Load()), args=[Attribute(value=Name(id='purl', ctx=Load()), attr='netloc', ctx=Load())], keywords=[])), Assign(targets=[Name(id='url_pieces', ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='purl', ctx=Load()), attr='scheme', ctx=Load()), Subscript(value=Name(id='netloc_tuple', ctx=Load()), slice=Constant(value=0), ctx=Load()), Attribute(value=Name(id='purl', ctx=Load()), attr='path', ctx=Load()), Attribute(value=Name(id='purl', ctx=Load()), attr='query', ctx=Load()), Attribute(value=Name(id='purl', ctx=Load()), attr='fragment', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='surl', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='urllib', ctx=Load()), attr='parse', ctx=Load()), attr='urlunsplit', ctx=Load()), args=[Name(id='url_pieces', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Name(id='surl', ctx=Load()), Call(func=Name(id='cast', ctx=Load()), args=[Constant(value='NetlocTuple'), Name(id='netloc_tuple', ctx=Load())], keywords=[])], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='NetlocTuple', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='_get_netloc', args=arguments(posonlyargs=[], args=[arg(arg='netloc', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='split_auth_from_netloc', ctx=Load()), args=[Name(id='netloc', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='NetlocTuple', ctx=Load())), FunctionDef(name='_redact_netloc', args=arguments(posonlyargs=[], args=[arg(arg='netloc', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Tuple(elts=[Call(func=Name(id='redact_netloc', ctx=Load()), args=[Name(id='netloc', ctx=Load())], keywords=[])], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='split_auth_netloc_from_url', args=arguments(posonlyargs=[], args=[arg(arg='url', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Parse a url into separate netloc, auth, and url with no auth.\n\n    Returns: (url_without_auth, netloc, (username, password))\n    ')), Assign(targets=[Tuple(elts=[Name(id='url_without_auth', ctx=Store()), Tuple(elts=[Name(id='netloc', ctx=Store()), Name(id='auth', ctx=Store())], ctx=Store())], ctx=Store())], value=Call(func=Name(id='_transform_url', ctx=Load()), args=[Name(id='url', ctx=Load()), Name(id='_get_netloc', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Name(id='url_without_auth', ctx=Load()), Name(id='netloc', ctx=Load()), Name(id='auth', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load()), Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='remove_auth_from_url', args=arguments(posonlyargs=[], args=[arg(arg='url', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Return a copy of url with 'username:password@' removed.")), Return(value=Subscript(value=Call(func=Name(id='_transform_url', ctx=Load()), args=[Name(id='url', ctx=Load()), Name(id='_get_netloc', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='redact_auth_from_url', args=arguments(posonlyargs=[], args=[arg(arg='url', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Replace the password in a given url with ****.')), Return(value=Subscript(value=Call(func=Name(id='_transform_url', ctx=Load()), args=[Name(id='url', ctx=Load()), Name(id='_redact_netloc', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='redact_auth_from_requirement', args=arguments(posonlyargs=[], args=[arg(arg='req', annotation=Name(id='Requirement', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Replace the password in a given requirement url with ****.')), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='req', ctx=Load()), attr='url', ctx=Load())), body=[Return(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='req', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='req', ctx=Load())], keywords=[]), attr='replace', ctx=Load()), args=[Attribute(value=Name(id='req', ctx=Load()), attr='url', ctx=Load()), Call(func=Name(id='redact_auth_from_url', ctx=Load()), args=[Attribute(value=Name(id='req', ctx=Load()), attr='url', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), ClassDef(name='HiddenText', bases=[], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='secret', annotation=Name(id='str', ctx=Load())), arg(arg='redacted', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='secret', ctx=Store())], value=Name(id='secret', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='redacted', ctx=Store())], value=Name(id='redacted', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value='<HiddenText {!r}>'), attr='format', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='__str__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='redacted', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='__eq__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other', annotation=Name(id='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='type', ctx=Load()), args=[Name(id='other', ctx=Load())], keywords=[])]), body=[Return(value=Constant(value=False))], orelse=[]), Return(value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='secret', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='other', ctx=Load()), attr='secret', ctx=Load())]))], decorator_list=[], returns=Name(id='bool', ctx=Load()))], decorator_list=[]), FunctionDef(name='hide_value', args=arguments(posonlyargs=[], args=[arg(arg='value', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='HiddenText', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[keyword(arg='redacted', value=Constant(value='****'))]))], decorator_list=[], returns=Name(id='HiddenText', ctx=Load())), FunctionDef(name='hide_url', args=arguments(posonlyargs=[], args=[arg(arg='url', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='redacted', ctx=Store())], value=Call(func=Name(id='redact_auth_from_url', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='HiddenText', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[keyword(arg='redacted', value=Name(id='redacted', ctx=Load()))]))], decorator_list=[], returns=Name(id='HiddenText', ctx=Load())), FunctionDef(name='protect_pip_from_modification_on_windows', args=arguments(posonlyargs=[], args=[arg(arg='modifying_pip', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Protection of pip.exe from modification on Windows\n\n    On Windows, any operation modifying pip should be run as:\n        python -m pip ...\n    ')), Assign(targets=[Name(id='pip_names', ctx=Store())], value=List(elts=[Constant(value='pip'), JoinedStr(values=[Constant(value='pip'), FormattedValue(value=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), attr='major', ctx=Load()), conversion=-1)]), JoinedStr(values=[Constant(value='pip'), FormattedValue(value=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), attr='major', ctx=Load()), conversion=-1), Constant(value='.'), FormattedValue(value=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), attr='minor', ctx=Load()), conversion=-1)])], ctx=Load())), Assign(targets=[Name(id='should_show_use_python_msg', ctx=Store())], value=BoolOp(op=And(), values=[Name(id='modifying_pip', ctx=Load()), Name(id='WINDOWS', ctx=Load()), Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='basename', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='argv', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]), ops=[In()], comparators=[Name(id='pip_names', ctx=Load())])])), If(test=Name(id='should_show_use_python_msg', ctx=Load()), body=[Assign(targets=[Name(id='new_command', ctx=Store())], value=BinOp(left=List(elts=[Attribute(value=Name(id='sys', ctx=Load()), attr='executable', ctx=Load()), Constant(value='-m'), Constant(value='pip')], ctx=Load()), op=Add(), right=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='argv', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()))), Raise(exc=Call(func=Name(id='CommandError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='To modify pip, please run the following command:\n{}'), attr='format', ctx=Load()), args=[Call(func=Attribute(value=Constant(value=' '), attr='join', ctx=Load()), args=[Name(id='new_command', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='check_externally_managed', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check whether the current environment is externally managed.\n\n    If the ``EXTERNALLY-MANAGED`` config file is found, the current environment\n    is considered externally managed, and an ExternallyManagedEnvironment is\n    raised.\n    ')), If(test=Call(func=Name(id='running_under_virtualenv', ctx=Load()), args=[], keywords=[]), body=[Return()], orelse=[]), Assign(targets=[Name(id='marker', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Call(func=Attribute(value=Name(id='sysconfig', ctx=Load()), attr='get_path', ctx=Load()), args=[Constant(value='stdlib')], keywords=[]), Constant(value='EXTERNALLY-MANAGED')], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isfile', ctx=Load()), args=[Name(id='marker', ctx=Load())], keywords=[])), body=[Return()], orelse=[]), Raise(exc=Call(func=Attribute(value=Name(id='ExternallyManagedEnvironment', ctx=Load()), attr='from_config', ctx=Load()), args=[Name(id='marker', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='is_console_interactive', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Is this console interactive?')), Return(value=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='stdin', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stdin', ctx=Load()), attr='isatty', ctx=Load()), args=[], keywords=[])]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='hash_file', args=arguments(posonlyargs=[], args=[arg(arg='path', annotation=Name(id='str', ctx=Load())), arg(arg='blocksize', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[BinOp(left=Constant(value=1), op=LShift(), right=Constant(value=20))]), body=[Expr(value=Constant(value='Return (hash, length) for path using hashlib.sha256()')), Assign(targets=[Name(id='h', ctx=Store())], value=Call(func=Attribute(value=Name(id='hashlib', ctx=Load()), attr='sha256', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='length', ctx=Store())], value=Constant(value=0)), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='path', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[For(target=Name(id='block', ctx=Store()), iter=Call(func=Name(id='read_chunks', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[keyword(arg='size', value=Name(id='blocksize', ctx=Load()))]), body=[AugAssign(target=Name(id='length', ctx=Store()), op=Add(), value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='block', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='h', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='block', ctx=Load())], keywords=[]))], orelse=[])]), Return(value=Tuple(elts=[Name(id='h', ctx=Load()), Name(id='length', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='Any', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='pairwise', args=arguments(posonlyargs=[], args=[arg(arg='iterable', annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Return paired elements.\n\n    For example:\n        s -> (s0, s1), (s2, s3), (s4, s5), ...\n    ')), Assign(targets=[Name(id='iterable', ctx=Store())], value=Call(func=Name(id='iter', ctx=Load()), args=[Name(id='iterable', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='zip_longest', ctx=Load()), args=[Name(id='iterable', ctx=Load()), Name(id='iterable', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='Any', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='partition', args=arguments(posonlyargs=[], args=[arg(arg='pred', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='T', ctx=Load())], ctx=Load()), Name(id='bool', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='iterable', annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='T', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Use a predicate to partition entries into false entries and true entries,\n    like\n\n        partition(is_odd, range(10)) --> 0 2 4 6 8   and  1 3 5 7 9\n    ')), Assign(targets=[Tuple(elts=[Name(id='t1', ctx=Store()), Name(id='t2', ctx=Store())], ctx=Store())], value=Call(func=Name(id='tee', ctx=Load()), args=[Name(id='iterable', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Call(func=Name(id='filterfalse', ctx=Load()), args=[Name(id='pred', ctx=Load()), Name(id='t1', ctx=Load())], keywords=[]), Call(func=Name(id='filter', ctx=Load()), args=[Name(id='pred', ctx=Load()), Name(id='t2', ctx=Load())], keywords=[])], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='T', ctx=Load()), ctx=Load()), Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='T', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), ClassDef(name='ConfiguredBuildBackendHookCaller', bases=[Name(id='BuildBackendHookCaller', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='config_holder', annotation=Name(id='Any', ctx=Load())), arg(arg='source_dir', annotation=Name(id='str', ctx=Load())), arg(arg='build_backend', annotation=Name(id='str', ctx=Load())), arg(arg='backend_path', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='runner', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Constant(value=None)], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='python_executable', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Name(id='source_dir', ctx=Load()), Name(id='build_backend', ctx=Load()), Name(id='backend_path', ctx=Load()), Name(id='runner', ctx=Load()), Name(id='python_executable', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='config_holder', ctx=Store())], value=Name(id='config_holder', ctx=Load()))], decorator_list=[]), FunctionDef(name='build_wheel', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='wheel_directory', annotation=Name(id='str', ctx=Load())), arg(arg='config_settings', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='metadata_directory', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Assign(targets=[Name(id='cs', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config_holder', ctx=Load()), attr='config_settings', ctx=Load())), Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='build_wheel', ctx=Load()), args=[Name(id='wheel_directory', ctx=Load())], keywords=[keyword(arg='config_settings', value=Name(id='cs', ctx=Load())), keyword(arg='metadata_directory', value=Name(id='metadata_directory', ctx=Load()))]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='build_sdist', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='sdist_directory', annotation=Name(id='str', ctx=Load())), arg(arg='config_settings', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Name(id='cs', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config_holder', ctx=Load()), attr='config_settings', ctx=Load())), Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='build_sdist', ctx=Load()), args=[Name(id='sdist_directory', ctx=Load())], keywords=[keyword(arg='config_settings', value=Name(id='cs', ctx=Load()))]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='build_editable', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='wheel_directory', annotation=Name(id='str', ctx=Load())), arg(arg='config_settings', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='metadata_directory', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Assign(targets=[Name(id='cs', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config_holder', ctx=Load()), attr='config_settings', ctx=Load())), Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='build_editable', ctx=Load()), args=[Name(id='wheel_directory', ctx=Load())], keywords=[keyword(arg='config_settings', value=Name(id='cs', ctx=Load())), keyword(arg='metadata_directory', value=Name(id='metadata_directory', ctx=Load()))]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='get_requires_for_build_wheel', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='config_settings', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Name(id='cs', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config_holder', ctx=Load()), attr='config_settings', ctx=Load())), Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='get_requires_for_build_wheel', ctx=Load()), args=[], keywords=[keyword(arg='config_settings', value=Name(id='cs', ctx=Load()))]))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='get_requires_for_build_sdist', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='config_settings', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Name(id='cs', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config_holder', ctx=Load()), attr='config_settings', ctx=Load())), Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='get_requires_for_build_sdist', ctx=Load()), args=[], keywords=[keyword(arg='config_settings', value=Name(id='cs', ctx=Load()))]))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='get_requires_for_build_editable', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='config_settings', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Name(id='cs', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config_holder', ctx=Load()), attr='config_settings', ctx=Load())), Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='get_requires_for_build_editable', ctx=Load()), args=[], keywords=[keyword(arg='config_settings', value=Name(id='cs', ctx=Load()))]))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='prepare_metadata_for_build_wheel', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='metadata_directory', annotation=Name(id='str', ctx=Load())), arg(arg='config_settings', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='_allow_fallback', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=True)]), body=[Assign(targets=[Name(id='cs', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config_holder', ctx=Load()), attr='config_settings', ctx=Load())), Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='prepare_metadata_for_build_wheel', ctx=Load()), args=[], keywords=[keyword(arg='metadata_directory', value=Name(id='metadata_directory', ctx=Load())), keyword(arg='config_settings', value=Name(id='cs', ctx=Load())), keyword(arg='_allow_fallback', value=Name(id='_allow_fallback', ctx=Load()))]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='prepare_metadata_for_build_editable', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='metadata_directory', annotation=Name(id='str', ctx=Load())), arg(arg='config_settings', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='_allow_fallback', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=True)]), body=[Assign(targets=[Name(id='cs', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config_holder', ctx=Load()), attr='config_settings', ctx=Load())), Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='prepare_metadata_for_build_editable', ctx=Load()), args=[], keywords=[keyword(arg='metadata_directory', value=Name(id='metadata_directory', ctx=Load())), keyword(arg='config_settings', value=Name(id='cs', ctx=Load())), keyword(arg='_allow_fallback', value=Name(id='_allow_fallback', ctx=Load()))]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[])], type_ignores=[])