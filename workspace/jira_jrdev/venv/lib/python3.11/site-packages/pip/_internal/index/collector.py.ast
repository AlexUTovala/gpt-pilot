Module(body=[Expr(value=Constant(value='\nThe main purpose of this module is to expose LinkCollector.collect_sources().\n')), Import(names=[alias(name='collections')]), Import(names=[alias(name='email.message')]), Import(names=[alias(name='functools')]), Import(names=[alias(name='itertools')]), Import(names=[alias(name='json')]), Import(names=[alias(name='logging')]), Import(names=[alias(name='os')]), Import(names=[alias(name='urllib.parse')]), Import(names=[alias(name='urllib.request')]), ImportFrom(module='html.parser', names=[alias(name='HTMLParser')], level=0), ImportFrom(module='optparse', names=[alias(name='Values')], level=0), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING'), alias(name='Callable'), alias(name='Dict'), alias(name='Iterable'), alias(name='List'), alias(name='MutableMapping'), alias(name='NamedTuple'), alias(name='Optional'), alias(name='Sequence'), alias(name='Tuple'), alias(name='Union')], level=0), ImportFrom(module='pip._vendor', names=[alias(name='requests')], level=0), ImportFrom(module='pip._vendor.requests', names=[alias(name='Response')], level=0), ImportFrom(module='pip._vendor.requests.exceptions', names=[alias(name='RetryError'), alias(name='SSLError')], level=0), ImportFrom(module='pip._internal.exceptions', names=[alias(name='NetworkConnectionError')], level=0), ImportFrom(module='pip._internal.models.link', names=[alias(name='Link')], level=0), ImportFrom(module='pip._internal.models.search_scope', names=[alias(name='SearchScope')], level=0), ImportFrom(module='pip._internal.network.session', names=[alias(name='PipSession')], level=0), ImportFrom(module='pip._internal.network.utils', names=[alias(name='raise_for_status')], level=0), ImportFrom(module='pip._internal.utils.filetypes', names=[alias(name='is_archive_file')], level=0), ImportFrom(module='pip._internal.utils.misc', names=[alias(name='redact_auth_from_url')], level=0), ImportFrom(module='pip._internal.vcs', names=[alias(name='vcs')], level=0), ImportFrom(module='sources', names=[alias(name='CandidatesFromPage'), alias(name='LinkSource'), alias(name='build_source')], level=1), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='typing', names=[alias(name='Protocol')], level=0)], orelse=[Assign(targets=[Name(id='Protocol', ctx=Store())], value=Name(id='object', ctx=Load()))]), Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ResponseHeaders', ctx=Store())], value=Subscript(value=Name(id='MutableMapping', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='_match_vcs_scheme', args=arguments(posonlyargs=[], args=[arg(arg='url', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Look for VCS schemes in the URL.\n\n    Returns the matched VCS scheme, or None if there's no match.\n    ")), For(target=Name(id='scheme', ctx=Store()), iter=Attribute(value=Name(id='vcs', ctx=Load()), attr='schemes', ctx=Load()), body=[If(test=BoolOp(op=And(), values=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='url', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), attr='startswith', ctx=Load()), args=[Name(id='scheme', ctx=Load())], keywords=[]), Compare(left=Subscript(value=Name(id='url', ctx=Load()), slice=Call(func=Name(id='len', ctx=Load()), args=[Name(id='scheme', ctx=Load())], keywords=[]), ctx=Load()), ops=[In()], comparators=[Constant(value='+:')])]), body=[Return(value=Name(id='scheme', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Constant(value=None))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), ClassDef(name='_NotAPIContent', bases=[Name(id='Exception', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='content_type', annotation=Name(id='str', ctx=Load())), arg(arg='request_desc', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Name(id='content_type', ctx=Load()), Name(id='request_desc', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='content_type', ctx=Store())], value=Name(id='content_type', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='request_desc', ctx=Store())], value=Name(id='request_desc', ctx=Load()))], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), FunctionDef(name='_ensure_api_header', args=arguments(posonlyargs=[], args=[arg(arg='response', annotation=Name(id='Response', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Check the Content-Type header to ensure the response contains a Simple\n    API Response.\n\n    Raises `_NotAPIContent` if the content type is not a valid content-type.\n    ')), Assign(targets=[Name(id='content_type', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='response', ctx=Load()), attr='headers', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='Content-Type'), Constant(value='Unknown')], keywords=[])), Assign(targets=[Name(id='content_type_l', ctx=Store())], value=Call(func=Attribute(value=Name(id='content_type', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])), If(test=Call(func=Attribute(value=Name(id='content_type_l', ctx=Load()), attr='startswith', ctx=Load()), args=[Tuple(elts=[Constant(value='text/html'), Constant(value='application/vnd.pypi.simple.v1+html'), Constant(value='application/vnd.pypi.simple.v1+json')], ctx=Load())], keywords=[]), body=[Return()], orelse=[]), Raise(exc=Call(func=Name(id='_NotAPIContent', ctx=Load()), args=[Name(id='content_type', ctx=Load()), Attribute(value=Attribute(value=Name(id='response', ctx=Load()), attr='request', ctx=Load()), attr='method', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), ClassDef(name='_NotHTTP', bases=[Name(id='Exception', ctx=Load())], keywords=[], body=[Pass()], decorator_list=[]), FunctionDef(name='_ensure_api_response', args=arguments(posonlyargs=[], args=[arg(arg='url', annotation=Name(id='str', ctx=Load())), arg(arg='session', annotation=Name(id='PipSession', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Send a HEAD request to the URL, and ensure the response contains a simple\n    API Response.\n\n    Raises `_NotHTTP` if the URL is not available for a HEAD request, or\n    `_NotAPIContent` if the content type is not a valid content type.\n    ')), Assign(targets=[Tuple(elts=[Name(id='scheme', ctx=Store()), Name(id='netloc', ctx=Store()), Name(id='path', ctx=Store()), Name(id='query', ctx=Store()), Name(id='fragment', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='urllib', ctx=Load()), attr='parse', ctx=Load()), attr='urlsplit', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='scheme', ctx=Load()), ops=[NotIn()], comparators=[Set(elts=[Constant(value='http'), Constant(value='https')])]), body=[Raise(exc=Call(func=Name(id='_NotHTTP', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='resp', ctx=Store())], value=Call(func=Attribute(value=Name(id='session', ctx=Load()), attr='head', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[keyword(arg='allow_redirects', value=Constant(value=True))])), Expr(value=Call(func=Name(id='raise_for_status', ctx=Load()), args=[Name(id='resp', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='_ensure_api_header', ctx=Load()), args=[Name(id='resp', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_get_simple_response', args=arguments(posonlyargs=[], args=[arg(arg='url', annotation=Name(id='str', ctx=Load())), arg(arg='session', annotation=Name(id='PipSession', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Access an Simple API response with GET, and return the response.\n\n    This consists of three parts:\n\n    1. If the URL looks suspiciously like an archive, send a HEAD first to\n       check the Content-Type is HTML or Simple API, to avoid downloading a\n       large file. Raise `_NotHTTP` if the content type cannot be determined, or\n       `_NotAPIContent` if it is not HTML or a Simple API.\n    2. Actually perform the request. Raise HTTP exceptions on network failures.\n    3. Check the Content-Type header to make sure we got a Simple API response,\n       and raise `_NotAPIContent` otherwise.\n    ')), If(test=Call(func=Name(id='is_archive_file', ctx=Load()), args=[Attribute(value=Call(func=Name(id='Link', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[]), attr='filename', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Name(id='_ensure_api_response', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[keyword(arg='session', value=Name(id='session', ctx=Load()))]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Getting page %s'), Call(func=Name(id='redact_auth_from_url', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='resp', ctx=Store())], value=Call(func=Attribute(value=Name(id='session', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[keyword(arg='headers', value=Dict(keys=[Constant(value='Accept'), Constant(value='Cache-Control')], values=[Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[List(elts=[Constant(value='application/vnd.pypi.simple.v1+json'), Constant(value='application/vnd.pypi.simple.v1+html; q=0.1'), Constant(value='text/html; q=0.01')], ctx=Load())], keywords=[]), Constant(value='max-age=0')]))])), Expr(value=Call(func=Name(id='raise_for_status', ctx=Load()), args=[Name(id='resp', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='_ensure_api_header', ctx=Load()), args=[Name(id='resp', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Fetched page %s as %s'), Call(func=Name(id='redact_auth_from_url', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='resp', ctx=Load()), attr='headers', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='Content-Type'), Constant(value='Unknown')], keywords=[])], keywords=[])), Return(value=Name(id='resp', ctx=Load()))], decorator_list=[], returns=Name(id='Response', ctx=Load())), FunctionDef(name='_get_encoding_from_headers', args=arguments(posonlyargs=[], args=[arg(arg='headers', annotation=Name(id='ResponseHeaders', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Determine if we have any encoding information in our headers.')), If(test=BoolOp(op=And(), values=[Name(id='headers', ctx=Load()), Compare(left=Constant(value='Content-Type'), ops=[In()], comparators=[Name(id='headers', ctx=Load())])]), body=[Assign(targets=[Name(id='m', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='email', ctx=Load()), attr='message', ctx=Load()), attr='Message', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Name(id='m', ctx=Load()), slice=Constant(value='content-type'), ctx=Store())], value=Subscript(value=Name(id='headers', ctx=Load()), slice=Constant(value='Content-Type'), ctx=Load())), Assign(targets=[Name(id='charset', ctx=Store())], value=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='get_param', ctx=Load()), args=[Constant(value='charset')], keywords=[])), If(test=Name(id='charset', ctx=Load()), body=[Return(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='charset', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Constant(value=None))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), ClassDef(name='CacheablePageContent', bases=[], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='page', annotation=Constant(value='IndexContent'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Attribute(value=Name(id='page', ctx=Load()), attr='cache_link_parsing', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='page', ctx=Store())], value=Name(id='page', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__eq__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other', annotation=Name(id='object', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='other', ctx=Load()), Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])], keywords=[]), Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='page', ctx=Load()), attr='url', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Attribute(value=Name(id='other', ctx=Load()), attr='page', ctx=Load()), attr='url', ctx=Load())])]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='__hash__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='hash', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='page', ctx=Load()), attr='url', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='int', ctx=Load()))], decorator_list=[]), ClassDef(name='ParseLinks', bases=[Name(id='Protocol', ctx=Load())], keywords=[], body=[FunctionDef(name='__call__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='page', annotation=Constant(value='IndexContent'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=Ellipsis))], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='Link', ctx=Load()), ctx=Load()))], decorator_list=[]), FunctionDef(name='with_cached_index_content', args=arguments(posonlyargs=[], args=[arg(arg='fn', annotation=Name(id='ParseLinks', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    Given a function that parses an Iterable[Link] from an IndexContent, cache the\n    function's result (keyed by CacheablePageContent), unless the IndexContent\n    `page` has `page.cache_link_parsing == False`.\n    ")), FunctionDef(name='wrapper', args=arguments(posonlyargs=[], args=[arg(arg='cacheable_page', annotation=Name(id='CacheablePageContent', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='fn', ctx=Load()), args=[Attribute(value=Name(id='cacheable_page', ctx=Load()), attr='page', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='lru_cache', ctx=Load()), args=[], keywords=[keyword(arg='maxsize', value=Constant(value=None))])], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Link', ctx=Load()), ctx=Load())), FunctionDef(name='wrapper_wrapper', args=arguments(posonlyargs=[], args=[arg(arg='page', annotation=Constant(value='IndexContent'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='page', ctx=Load()), attr='cache_link_parsing', ctx=Load()), body=[Return(value=Call(func=Name(id='wrapper', ctx=Load()), args=[Call(func=Name(id='CacheablePageContent', ctx=Load()), args=[Name(id='page', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='fn', ctx=Load()), args=[Name(id='page', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='wraps', ctx=Load()), args=[Name(id='fn', ctx=Load())], keywords=[])], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Link', ctx=Load()), ctx=Load())), Return(value=Name(id='wrapper_wrapper', ctx=Load()))], decorator_list=[], returns=Name(id='ParseLinks', ctx=Load())), FunctionDef(name='parse_links', args=arguments(posonlyargs=[], args=[arg(arg='page', annotation=Constant(value='IndexContent'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    Parse a Simple API's Index Content, and yield its anchor elements as Link objects.\n    ")), Assign(targets=[Name(id='content_type_l', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='page', ctx=Load()), attr='content_type', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])), If(test=Call(func=Attribute(value=Name(id='content_type_l', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='application/vnd.pypi.simple.v1+json')], keywords=[]), body=[Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='loads', ctx=Load()), args=[Attribute(value=Name(id='page', ctx=Load()), attr='content', ctx=Load())], keywords=[])), For(target=Name(id='file', ctx=Store()), iter=Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='files'), List(elts=[], ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='link', ctx=Store())], value=Call(func=Attribute(value=Name(id='Link', ctx=Load()), attr='from_json', ctx=Load()), args=[Name(id='file', ctx=Load()), Attribute(value=Name(id='page', ctx=Load()), attr='url', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='link', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Continue()], orelse=[]), Expr(value=Yield(value=Name(id='link', ctx=Load())))], orelse=[]), Return()], orelse=[]), Assign(targets=[Name(id='parser', ctx=Store())], value=Call(func=Name(id='HTMLLinkParser', ctx=Load()), args=[Attribute(value=Name(id='page', ctx=Load()), attr='url', ctx=Load())], keywords=[])), Assign(targets=[Name(id='encoding', ctx=Store())], value=BoolOp(op=Or(), values=[Attribute(value=Name(id='page', ctx=Load()), attr='encoding', ctx=Load()), Constant(value='utf-8')])), Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='feed', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='page', ctx=Load()), attr='content', ctx=Load()), attr='decode', ctx=Load()), args=[Name(id='encoding', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='url', ctx=Store())], value=Attribute(value=Name(id='page', ctx=Load()), attr='url', ctx=Load())), Assign(targets=[Name(id='base_url', ctx=Store())], value=BoolOp(op=Or(), values=[Attribute(value=Name(id='parser', ctx=Load()), attr='base_url', ctx=Load()), Name(id='url', ctx=Load())])), For(target=Name(id='anchor', ctx=Store()), iter=Attribute(value=Name(id='parser', ctx=Load()), attr='anchors', ctx=Load()), body=[Assign(targets=[Name(id='link', ctx=Store())], value=Call(func=Attribute(value=Name(id='Link', ctx=Load()), attr='from_element', ctx=Load()), args=[Name(id='anchor', ctx=Load())], keywords=[keyword(arg='page_url', value=Name(id='url', ctx=Load())), keyword(arg='base_url', value=Name(id='base_url', ctx=Load()))])), If(test=Compare(left=Name(id='link', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Continue()], orelse=[]), Expr(value=Yield(value=Name(id='link', ctx=Load())))], orelse=[])], decorator_list=[Name(id='with_cached_index_content', ctx=Load())], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='Link', ctx=Load()), ctx=Load())), ClassDef(name='IndexContent', bases=[], keywords=[], body=[Expr(value=Constant(value='Represents one response (or page), along with its URL')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='content', annotation=Name(id='bytes', ctx=Load())), arg(arg='content_type', annotation=Name(id='str', ctx=Load())), arg(arg='encoding', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='url', annotation=Name(id='str', ctx=Load())), arg(arg='cache_link_parsing', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Expr(value=Constant(value="\n        :param encoding: the encoding to decode the given content.\n        :param url: the URL from which the HTML was downloaded.\n        :param cache_link_parsing: whether links parsed from this page's url\n                                   should be cached. PyPI index urls should\n                                   have this set to False, for example.\n        ")), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='content', ctx=Store())], value=Name(id='content', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='content_type', ctx=Store())], value=Name(id='content_type', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='encoding', ctx=Store())], value=Name(id='encoding', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='url', ctx=Store())], value=Name(id='url', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='cache_link_parsing', ctx=Store())], value=Name(id='cache_link_parsing', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__str__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='redact_auth_from_url', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='url', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[]), ClassDef(name='HTMLLinkParser', bases=[Name(id='HTMLParser', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="\n    HTMLParser that keeps the first base HREF and a list of all anchor\n    elements' attributes.\n    ")), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='url', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='convert_charrefs', value=Constant(value=True))])), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='url', ctx=Store()), annotation=Name(id='str', ctx=Load()), value=Name(id='url', ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='base_url', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='anchors', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=0)], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='handle_starttag', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='tag', annotation=Name(id='str', ctx=Load())), arg(arg='attrs', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='tag', ctx=Load()), ops=[Eq()], comparators=[Constant(value='base')]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='base_url', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Name(id='href', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_href', ctx=Load()), args=[Name(id='attrs', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='href', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='base_url', ctx=Store())], value=Name(id='href', ctx=Load()))], orelse=[])], orelse=[If(test=Compare(left=Name(id='tag', ctx=Load()), ops=[Eq()], comparators=[Constant(value='a')]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='anchors', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='dict', ctx=Load()), args=[Name(id='attrs', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='get_href', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='attrs', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Name(id='attrs', ctx=Load()), body=[If(test=Compare(left=Name(id='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='href')]), body=[Return(value=Name(id='value', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Constant(value=None))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], decorator_list=[]), FunctionDef(name='_handle_get_simple_fail', args=arguments(posonlyargs=[], args=[arg(arg='link', annotation=Name(id='Link', ctx=Load())), arg(arg='reason', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Exception', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='meth', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Constant(value=None)], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='meth', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='meth', ctx=Store())], value=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()))], orelse=[]), Expr(value=Call(func=Name(id='meth', ctx=Load()), args=[Constant(value='Could not fetch URL %s: %s - skipping'), Name(id='link', ctx=Load()), Name(id='reason', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_make_index_content', args=arguments(posonlyargs=[], args=[arg(arg='response', annotation=Name(id='Response', ctx=Load())), arg(arg='cache_link_parsing', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Assign(targets=[Name(id='encoding', ctx=Store())], value=Call(func=Name(id='_get_encoding_from_headers', ctx=Load()), args=[Attribute(value=Name(id='response', ctx=Load()), attr='headers', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='IndexContent', ctx=Load()), args=[Attribute(value=Name(id='response', ctx=Load()), attr='content', ctx=Load()), Subscript(value=Attribute(value=Name(id='response', ctx=Load()), attr='headers', ctx=Load()), slice=Constant(value='Content-Type'), ctx=Load())], keywords=[keyword(arg='encoding', value=Name(id='encoding', ctx=Load())), keyword(arg='url', value=Attribute(value=Name(id='response', ctx=Load()), attr='url', ctx=Load())), keyword(arg='cache_link_parsing', value=Name(id='cache_link_parsing', ctx=Load()))]))], decorator_list=[], returns=Name(id='IndexContent', ctx=Load())), FunctionDef(name='_get_index_content', args=arguments(posonlyargs=[], args=[arg(arg='link', annotation=Name(id='Link', ctx=Load()))], kwonlyargs=[arg(arg='session', annotation=Name(id='PipSession', ctx=Load()))], kw_defaults=[None], defaults=[]), body=[Assign(targets=[Name(id='url', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Attribute(value=Name(id='link', ctx=Load()), attr='url', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='#'), Constant(value=1)], keywords=[]), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='vcs_scheme', ctx=Store())], value=Call(func=Name(id='_match_vcs_scheme', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[])), If(test=Name(id='vcs_scheme', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='Cannot look at %s URL %s because it does not support lookup as web pages.'), Name(id='vcs_scheme', ctx=Load()), Name(id='link', ctx=Load())], keywords=[])), Return(value=Constant(value=None))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='scheme', ctx=Store()), Name(id='_', ctx=Store()), Name(id='path', ctx=Store()), Name(id='_', ctx=Store()), Name(id='_', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='urllib', ctx=Load()), attr='parse', ctx=Load()), attr='urlparse', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='scheme', ctx=Load()), ops=[Eq()], comparators=[Constant(value='file')]), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isdir', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='urllib', ctx=Load()), attr='request', ctx=Load()), attr='url2pathname', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])], keywords=[])]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='url', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='/')], keywords=[])), body=[AugAssign(target=Name(id='url', ctx=Store()), op=Add(), value=Constant(value='/'))], orelse=[]), Assign(targets=[Name(id='url', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='urllib', ctx=Load()), attr='parse', ctx=Load()), attr='urljoin', ctx=Load()), args=[Name(id='url', ctx=Load()), Constant(value='index.html')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value=' file: URL is directory, getting %s'), Name(id='url', ctx=Load())], keywords=[]))], orelse=[]), Try(body=[Assign(targets=[Name(id='resp', ctx=Store())], value=Call(func=Name(id='_get_simple_response', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[keyword(arg='session', value=Name(id='session', ctx=Load()))]))], handlers=[ExceptHandler(type=Name(id='_NotHTTP', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='Skipping page %s because it looks like an archive, and cannot be checked by a HTTP HEAD request.'), Name(id='link', ctx=Load())], keywords=[]))]), ExceptHandler(type=Name(id='_NotAPIContent', ctx=Load()), name='exc', body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='Skipping page %s because the %s request got Content-Type: %s. The only supported Content-Types are application/vnd.pypi.simple.v1+json, application/vnd.pypi.simple.v1+html, and text/html'), Name(id='link', ctx=Load()), Attribute(value=Name(id='exc', ctx=Load()), attr='request_desc', ctx=Load()), Attribute(value=Name(id='exc', ctx=Load()), attr='content_type', ctx=Load())], keywords=[]))]), ExceptHandler(type=Name(id='NetworkConnectionError', ctx=Load()), name='exc', body=[Expr(value=Call(func=Name(id='_handle_get_simple_fail', ctx=Load()), args=[Name(id='link', ctx=Load()), Name(id='exc', ctx=Load())], keywords=[]))]), ExceptHandler(type=Name(id='RetryError', ctx=Load()), name='exc', body=[Expr(value=Call(func=Name(id='_handle_get_simple_fail', ctx=Load()), args=[Name(id='link', ctx=Load()), Name(id='exc', ctx=Load())], keywords=[]))]), ExceptHandler(type=Name(id='SSLError', ctx=Load()), name='exc', body=[Assign(targets=[Name(id='reason', ctx=Store())], value=Constant(value='There was a problem confirming the ssl certificate: ')), AugAssign(target=Name(id='reason', ctx=Store()), op=Add(), value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='exc', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='_handle_get_simple_fail', ctx=Load()), args=[Name(id='link', ctx=Load()), Name(id='reason', ctx=Load())], keywords=[keyword(arg='meth', value=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()))]))]), ExceptHandler(type=Attribute(value=Name(id='requests', ctx=Load()), attr='ConnectionError', ctx=Load()), name='exc', body=[Expr(value=Call(func=Name(id='_handle_get_simple_fail', ctx=Load()), args=[Name(id='link', ctx=Load()), JoinedStr(values=[Constant(value='connection error: '), FormattedValue(value=Name(id='exc', ctx=Load()), conversion=-1)])], keywords=[]))]), ExceptHandler(type=Attribute(value=Name(id='requests', ctx=Load()), attr='Timeout', ctx=Load()), body=[Expr(value=Call(func=Name(id='_handle_get_simple_fail', ctx=Load()), args=[Name(id='link', ctx=Load()), Constant(value='timed out')], keywords=[]))])], orelse=[Return(value=Call(func=Name(id='_make_index_content', ctx=Load()), args=[Name(id='resp', ctx=Load())], keywords=[keyword(arg='cache_link_parsing', value=Attribute(value=Name(id='link', ctx=Load()), attr='cache_link_parsing', ctx=Load()))]))], finalbody=[]), Return(value=Constant(value=None))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='IndexContent'), ctx=Load())), ClassDef(name='CollectedSources', bases=[Name(id='NamedTuple', ctx=Load())], keywords=[], body=[AnnAssign(target=Name(id='find_links', ctx=Store()), annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='LinkSource', ctx=Load()), ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='index_urls', ctx=Store()), annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='LinkSource', ctx=Load()), ctx=Load()), ctx=Load()), simple=1)], decorator_list=[]), ClassDef(name='LinkCollector', bases=[], keywords=[], body=[Expr(value=Constant(value="\n    Responsible for collecting Link objects from all configured locations,\n    making network requests as needed.\n\n    The class's main method is its collect_sources() method.\n    ")), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='session', annotation=Name(id='PipSession', ctx=Load())), arg(arg='search_scope', annotation=Name(id='SearchScope', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='search_scope', ctx=Store())], value=Name(id='search_scope', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='session', ctx=Store())], value=Name(id='session', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='create', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='session', annotation=Name(id='PipSession', ctx=Load())), arg(arg='options', annotation=Name(id='Values', ctx=Load())), arg(arg='suppress_no_index', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value='\n        :param session: The Session to use to make requests.\n        :param suppress_no_index: Whether to ignore the --no-index option\n            when constructing the SearchScope object.\n        ')), Assign(targets=[Name(id='index_urls', ctx=Store())], value=BinOp(left=List(elts=[Attribute(value=Name(id='options', ctx=Load()), attr='index_url', ctx=Load())], ctx=Load()), op=Add(), right=Attribute(value=Name(id='options', ctx=Load()), attr='extra_index_urls', ctx=Load()))), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='options', ctx=Load()), attr='no_index', ctx=Load()), UnaryOp(op=Not(), operand=Name(id='suppress_no_index', ctx=Load()))]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Ignoring indexes: %s'), Call(func=Attribute(value=Constant(value=','), attr='join', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='redact_auth_from_url', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='url', ctx=Store()), iter=Name(id='index_urls', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], keywords=[])), Assign(targets=[Name(id='index_urls', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='find_links', ctx=Store())], value=BoolOp(op=Or(), values=[Attribute(value=Name(id='options', ctx=Load()), attr='find_links', ctx=Load()), List(elts=[], ctx=Load())])), Assign(targets=[Name(id='search_scope', ctx=Store())], value=Call(func=Attribute(value=Name(id='SearchScope', ctx=Load()), attr='create', ctx=Load()), args=[], keywords=[keyword(arg='find_links', value=Name(id='find_links', ctx=Load())), keyword(arg='index_urls', value=Name(id='index_urls', ctx=Load())), keyword(arg='no_index', value=Attribute(value=Name(id='options', ctx=Load()), attr='no_index', ctx=Load()))])), Assign(targets=[Name(id='link_collector', ctx=Store())], value=Call(func=Name(id='LinkCollector', ctx=Load()), args=[], keywords=[keyword(arg='session', value=Name(id='session', ctx=Load())), keyword(arg='search_scope', value=Name(id='search_scope', ctx=Load()))])), Return(value=Name(id='link_collector', ctx=Load()))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Constant(value='LinkCollector')), FunctionDef(name='find_links', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='search_scope', ctx=Load()), attr='find_links', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='fetch_response', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='location', annotation=Name(id='Link', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Fetch an HTML page containing package links.\n        ')), Return(value=Call(func=Name(id='_get_index_content', ctx=Load()), args=[Name(id='location', ctx=Load())], keywords=[keyword(arg='session', value=Attribute(value=Name(id='self', ctx=Load()), attr='session', ctx=Load()))]))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='IndexContent', ctx=Load()), ctx=Load())), FunctionDef(name='collect_sources', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='project_name', annotation=Name(id='str', ctx=Load())), arg(arg='candidates_from_page', annotation=Name(id='CandidatesFromPage', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='index_url_sources', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='collections', ctx=Load()), attr='OrderedDict', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='build_source', ctx=Load()), args=[Name(id='loc', ctx=Load())], keywords=[keyword(arg='candidates_from_page', value=Name(id='candidates_from_page', ctx=Load())), keyword(arg='page_validator', value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='session', ctx=Load()), attr='is_secure_origin', ctx=Load())), keyword(arg='expand_dir', value=Constant(value=False)), keyword(arg='cache_link_parsing', value=Constant(value=False))]), generators=[comprehension(target=Name(id='loc', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='search_scope', ctx=Load()), attr='get_index_urls_locations', ctx=Load()), args=[Name(id='project_name', ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[]), attr='values', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='find_links_sources', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='collections', ctx=Load()), attr='OrderedDict', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='build_source', ctx=Load()), args=[Name(id='loc', ctx=Load())], keywords=[keyword(arg='candidates_from_page', value=Name(id='candidates_from_page', ctx=Load())), keyword(arg='page_validator', value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='session', ctx=Load()), attr='is_secure_origin', ctx=Load())), keyword(arg='expand_dir', value=Constant(value=True)), keyword(arg='cache_link_parsing', value=Constant(value=True))]), generators=[comprehension(target=Name(id='loc', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='find_links', ctx=Load()), ifs=[], is_async=0)])], keywords=[]), attr='values', ctx=Load()), args=[], keywords=[])), If(test=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='isEnabledFor', ctx=Load()), args=[Attribute(value=Name(id='logging', ctx=Load()), attr='DEBUG', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='lines', ctx=Store())], value=ListComp(elt=JoinedStr(values=[Constant(value='* '), FormattedValue(value=Attribute(value=Name(id='s', ctx=Load()), attr='link', ctx=Load()), conversion=-1)]), generators=[comprehension(target=Name(id='s', ctx=Store()), iter=Call(func=Attribute(value=Name(id='itertools', ctx=Load()), attr='chain', ctx=Load()), args=[Name(id='find_links_sources', ctx=Load()), Name(id='index_url_sources', ctx=Load())], keywords=[]), ifs=[BoolOp(op=And(), values=[Compare(left=Name(id='s', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='s', ctx=Load()), attr='link', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])])], is_async=0)])), Assign(targets=[Name(id='lines', ctx=Store())], value=BinOp(left=List(elts=[JoinedStr(values=[FormattedValue(value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='lines', ctx=Load())], keywords=[]), conversion=-1), Constant(value=' location(s) to search for versions of '), FormattedValue(value=Name(id='project_name', ctx=Load()), conversion=-1), Constant(value=':')])], ctx=Load()), op=Add(), right=Name(id='lines', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='\n'), attr='join', ctx=Load()), args=[Name(id='lines', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='CollectedSources', ctx=Load()), args=[], keywords=[keyword(arg='find_links', value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='find_links_sources', ctx=Load())], keywords=[])), keyword(arg='index_urls', value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='index_url_sources', ctx=Load())], keywords=[]))]))], decorator_list=[], returns=Name(id='CollectedSources', ctx=Load()))], decorator_list=[])], type_ignores=[])