Module(body=[Import(names=[alias(name='contextlib')]), Import(names=[alias(name='functools')]), Import(names=[alias(name='logging')]), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING'), alias(name='Dict'), alias(name='FrozenSet'), alias(name='Iterable'), alias(name='Iterator'), alias(name='List'), alias(name='Mapping'), alias(name='NamedTuple'), alias(name='Optional'), alias(name='Sequence'), alias(name='Set'), alias(name='Tuple'), alias(name='TypeVar'), alias(name='cast')], level=0), ImportFrom(module='pip._vendor.packaging.requirements', names=[alias(name='InvalidRequirement')], level=0), ImportFrom(module='pip._vendor.packaging.specifiers', names=[alias(name='SpecifierSet')], level=0), ImportFrom(module='pip._vendor.packaging.utils', names=[alias(name='NormalizedName'), alias(name='canonicalize_name')], level=0), ImportFrom(module='pip._vendor.resolvelib', names=[alias(name='ResolutionImpossible')], level=0), ImportFrom(module='pip._internal.cache', names=[alias(name='CacheEntry'), alias(name='WheelCache')], level=0), ImportFrom(module='pip._internal.exceptions', names=[alias(name='DistributionNotFound'), alias(name='InstallationError'), alias(name='MetadataInconsistent'), alias(name='UnsupportedPythonVersion'), alias(name='UnsupportedWheel')], level=0), ImportFrom(module='pip._internal.index.package_finder', names=[alias(name='PackageFinder')], level=0), ImportFrom(module='pip._internal.metadata', names=[alias(name='BaseDistribution'), alias(name='get_default_environment')], level=0), ImportFrom(module='pip._internal.models.link', names=[alias(name='Link')], level=0), ImportFrom(module='pip._internal.models.wheel', names=[alias(name='Wheel')], level=0), ImportFrom(module='pip._internal.operations.prepare', names=[alias(name='RequirementPreparer')], level=0), ImportFrom(module='pip._internal.req.constructors', names=[alias(name='install_req_from_link_and_ireq')], level=0), ImportFrom(module='pip._internal.req.req_install', names=[alias(name='InstallRequirement'), alias(name='check_invalid_constraint_type')], level=0), ImportFrom(module='pip._internal.resolution.base', names=[alias(name='InstallRequirementProvider')], level=0), ImportFrom(module='pip._internal.utils.compatibility_tags', names=[alias(name='get_supported')], level=0), ImportFrom(module='pip._internal.utils.hashes', names=[alias(name='Hashes')], level=0), ImportFrom(module='pip._internal.utils.packaging', names=[alias(name='get_requirement')], level=0), ImportFrom(module='pip._internal.utils.virtualenv', names=[alias(name='running_under_virtualenv')], level=0), ImportFrom(module='base', names=[alias(name='Candidate'), alias(name='CandidateVersion'), alias(name='Constraint'), alias(name='Requirement')], level=1), ImportFrom(module='candidates', names=[alias(name='AlreadyInstalledCandidate'), alias(name='BaseCandidate'), alias(name='EditableCandidate'), alias(name='ExtrasCandidate'), alias(name='LinkCandidate'), alias(name='RequiresPythonCandidate'), alias(name='as_base_candidate')], level=1), ImportFrom(module='found_candidates', names=[alias(name='FoundCandidates'), alias(name='IndexCandidateInfo')], level=1), ImportFrom(module='requirements', names=[alias(name='ExplicitRequirement'), alias(name='RequiresPythonRequirement'), alias(name='SpecifierRequirement'), alias(name='SpecifierWithoutExtrasRequirement'), alias(name='UnsatisfiableRequirement')], level=1), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='typing', names=[alias(name='Protocol')], level=0), ClassDef(name='ConflictCause', bases=[Name(id='Protocol', ctx=Load())], keywords=[], body=[AnnAssign(target=Name(id='requirement', ctx=Store()), annotation=Name(id='RequiresPythonRequirement', ctx=Load()), simple=1), AnnAssign(target=Name(id='parent', ctx=Store()), annotation=Name(id='Candidate', ctx=Load()), simple=1)], decorator_list=[])], orelse=[]), Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), Assign(targets=[Name(id='C', ctx=Store())], value=Call(func=Name(id='TypeVar', ctx=Load()), args=[Constant(value='C')], keywords=[])), Assign(targets=[Name(id='Cache', ctx=Store())], value=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='Link', ctx=Load()), Name(id='C', ctx=Load())], ctx=Load()), ctx=Load())), ClassDef(name='CollectedRootRequirements', bases=[Name(id='NamedTuple', ctx=Load())], keywords=[], body=[AnnAssign(target=Name(id='requirements', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Requirement', ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='constraints', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Constraint', ctx=Load())], ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='user_requested', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()), simple=1)], decorator_list=[]), ClassDef(name='Factory', bases=[], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='finder', annotation=Name(id='PackageFinder', ctx=Load())), arg(arg='preparer', annotation=Name(id='RequirementPreparer', ctx=Load())), arg(arg='make_install_req', annotation=Name(id='InstallRequirementProvider', ctx=Load())), arg(arg='wheel_cache', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='WheelCache', ctx=Load()), ctx=Load())), arg(arg='use_user_site', annotation=Name(id='bool', ctx=Load())), arg(arg='force_reinstall', annotation=Name(id='bool', ctx=Load())), arg(arg='ignore_installed', annotation=Name(id='bool', ctx=Load())), arg(arg='ignore_requires_python', annotation=Name(id='bool', ctx=Load())), arg(arg='py_version_info', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_finder', ctx=Store())], value=Name(id='finder', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='preparer', ctx=Store())], value=Name(id='preparer', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_wheel_cache', ctx=Store())], value=Name(id='wheel_cache', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_python_candidate', ctx=Store())], value=Call(func=Name(id='RequiresPythonCandidate', ctx=Load()), args=[Name(id='py_version_info', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_make_install_req_from_spec', ctx=Store())], value=Name(id='make_install_req', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_use_user_site', ctx=Store())], value=Name(id='use_user_site', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_force_reinstall', ctx=Store())], value=Name(id='force_reinstall', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_ignore_requires_python', ctx=Store())], value=Name(id='ignore_requires_python', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_build_failures', ctx=Store()), annotation=Subscript(value=Name(id='Cache', ctx=Load()), slice=Name(id='InstallationError', ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_link_candidate_cache', ctx=Store()), annotation=Subscript(value=Name(id='Cache', ctx=Load()), slice=Name(id='LinkCandidate', ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_editable_candidate_cache', ctx=Store()), annotation=Subscript(value=Name(id='Cache', ctx=Load()), slice=Name(id='EditableCandidate', ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_installed_candidate_cache', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='AlreadyInstalledCandidate', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_extras_candidate_cache', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Subscript(value=Name(id='FrozenSet', ctx=Load()), slice=Name(id='NormalizedName', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), Name(id='ExtrasCandidate', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=0), If(test=UnaryOp(op=Not(), operand=Name(id='ignore_installed', ctx=Load())), body=[Assign(targets=[Name(id='env', ctx=Store())], value=Call(func=Name(id='get_default_environment', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_installed_dists', ctx=Store())], value=DictComp(key=Attribute(value=Name(id='dist', ctx=Load()), attr='canonical_name', ctx=Load()), value=Name(id='dist', ctx=Load()), generators=[comprehension(target=Name(id='dist', ctx=Store()), iter=Call(func=Attribute(value=Name(id='env', ctx=Load()), attr='iter_installed_distributions', ctx=Load()), args=[], keywords=[keyword(arg='local_only', value=Constant(value=False))]), ifs=[], is_async=0)]))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_installed_dists', ctx=Store())], value=Dict(keys=[], values=[]))])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='force_reinstall', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_force_reinstall', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='_fail_if_link_is_unsupported_wheel', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='link', annotation=Name(id='Link', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='link', ctx=Load()), attr='is_wheel', ctx=Load())), body=[Return()], orelse=[]), Assign(targets=[Name(id='wheel', ctx=Store())], value=Call(func=Name(id='Wheel', ctx=Load()), args=[Attribute(value=Name(id='link', ctx=Load()), attr='filename', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Name(id='wheel', ctx=Load()), attr='supported', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_finder', ctx=Load()), attr='target_python', ctx=Load()), attr='get_unsorted_tags', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Return()], orelse=[]), Assign(targets=[Name(id='msg', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='link', ctx=Load()), attr='filename', ctx=Load()), conversion=-1), Constant(value=' is not a supported wheel on this platform.')])), Raise(exc=Call(func=Name(id='UnsupportedWheel', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_make_extras_candidate', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='base', annotation=Name(id='BaseCandidate', ctx=Load())), arg(arg='extras', annotation=Subscript(value=Name(id='FrozenSet', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[arg(arg='comes_from', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='InstallRequirement', ctx=Load()), ctx=Load()))], kw_defaults=[Constant(value=None)], defaults=[]), body=[Assign(targets=[Name(id='cache_key', ctx=Store())], value=Tuple(elts=[Call(func=Name(id='id', ctx=Load()), args=[Name(id='base', ctx=Load())], keywords=[]), Call(func=Name(id='frozenset', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='canonicalize_name', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='e', ctx=Store()), iter=Name(id='extras', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())), Try(body=[Assign(targets=[Name(id='candidate', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_extras_candidate_cache', ctx=Load()), slice=Name(id='cache_key', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Assign(targets=[Name(id='candidate', ctx=Store())], value=Call(func=Name(id='ExtrasCandidate', ctx=Load()), args=[Name(id='base', ctx=Load()), Name(id='extras', ctx=Load())], keywords=[keyword(arg='comes_from', value=Name(id='comes_from', ctx=Load()))])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_extras_candidate_cache', ctx=Load()), slice=Name(id='cache_key', ctx=Load()), ctx=Store())], value=Name(id='candidate', ctx=Load()))])], orelse=[], finalbody=[]), Return(value=Name(id='candidate', ctx=Load()))], decorator_list=[], returns=Name(id='ExtrasCandidate', ctx=Load())), FunctionDef(name='_make_candidate_from_dist', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dist', annotation=Name(id='BaseDistribution', ctx=Load())), arg(arg='extras', annotation=Subscript(value=Name(id='FrozenSet', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='template', annotation=Name(id='InstallRequirement', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Name(id='base', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_installed_candidate_cache', ctx=Load()), slice=Attribute(value=Name(id='dist', ctx=Load()), attr='canonical_name', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Assign(targets=[Name(id='base', ctx=Store())], value=Call(func=Name(id='AlreadyInstalledCandidate', ctx=Load()), args=[Name(id='dist', ctx=Load()), Name(id='template', ctx=Load())], keywords=[keyword(arg='factory', value=Name(id='self', ctx=Load()))])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_installed_candidate_cache', ctx=Load()), slice=Attribute(value=Name(id='dist', ctx=Load()), attr='canonical_name', ctx=Load()), ctx=Store())], value=Name(id='base', ctx=Load()))])], orelse=[], finalbody=[]), If(test=UnaryOp(op=Not(), operand=Name(id='extras', ctx=Load())), body=[Return(value=Name(id='base', ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_make_extras_candidate', ctx=Load()), args=[Name(id='base', ctx=Load()), Name(id='extras', ctx=Load())], keywords=[keyword(arg='comes_from', value=Name(id='template', ctx=Load()))]))], decorator_list=[], returns=Name(id='Candidate', ctx=Load())), FunctionDef(name='_make_candidate_from_link', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='link', annotation=Name(id='Link', ctx=Load())), arg(arg='extras', annotation=Subscript(value=Name(id='FrozenSet', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='template', annotation=Name(id='InstallRequirement', ctx=Load())), arg(arg='name', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='NormalizedName', ctx=Load()), ctx=Load())), arg(arg='version', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='CandidateVersion', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='link', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_build_failures', ctx=Load())]), body=[Return(value=Constant(value=None))], orelse=[]), If(test=Attribute(value=Name(id='template', ctx=Load()), attr='editable', ctx=Load()), body=[If(test=Compare(left=Name(id='link', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_editable_candidate_cache', ctx=Load())]), body=[Try(body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_editable_candidate_cache', ctx=Load()), slice=Name(id='link', ctx=Load()), ctx=Store())], value=Call(func=Name(id='EditableCandidate', ctx=Load()), args=[Name(id='link', ctx=Load()), Name(id='template', ctx=Load())], keywords=[keyword(arg='factory', value=Name(id='self', ctx=Load())), keyword(arg='name', value=Name(id='name', ctx=Load())), keyword(arg='version', value=Name(id='version', ctx=Load()))]))], handlers=[ExceptHandler(type=Name(id='MetadataInconsistent', ctx=Load()), name='e', body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Discarding [blue underline]%s[/]: [yellow]%s[reset]'), Name(id='link', ctx=Load()), Name(id='e', ctx=Load())], keywords=[keyword(arg='extra', value=Dict(keys=[Constant(value='markup')], values=[Constant(value=True)]))])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_build_failures', ctx=Load()), slice=Name(id='link', ctx=Load()), ctx=Store())], value=Name(id='e', ctx=Load())), Return(value=Constant(value=None))])], orelse=[], finalbody=[])], orelse=[]), AnnAssign(target=Name(id='base', ctx=Store()), annotation=Name(id='BaseCandidate', ctx=Load()), value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_editable_candidate_cache', ctx=Load()), slice=Name(id='link', ctx=Load()), ctx=Load()), simple=1)], orelse=[If(test=Compare(left=Name(id='link', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_link_candidate_cache', ctx=Load())]), body=[Try(body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_link_candidate_cache', ctx=Load()), slice=Name(id='link', ctx=Load()), ctx=Store())], value=Call(func=Name(id='LinkCandidate', ctx=Load()), args=[Name(id='link', ctx=Load()), Name(id='template', ctx=Load())], keywords=[keyword(arg='factory', value=Name(id='self', ctx=Load())), keyword(arg='name', value=Name(id='name', ctx=Load())), keyword(arg='version', value=Name(id='version', ctx=Load()))]))], handlers=[ExceptHandler(type=Name(id='MetadataInconsistent', ctx=Load()), name='e', body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Discarding [blue underline]%s[/]: [yellow]%s[reset]'), Name(id='link', ctx=Load()), Name(id='e', ctx=Load())], keywords=[keyword(arg='extra', value=Dict(keys=[Constant(value='markup')], values=[Constant(value=True)]))])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_build_failures', ctx=Load()), slice=Name(id='link', ctx=Load()), ctx=Store())], value=Name(id='e', ctx=Load())), Return(value=Constant(value=None))])], orelse=[], finalbody=[])], orelse=[]), Assign(targets=[Name(id='base', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_link_candidate_cache', ctx=Load()), slice=Name(id='link', ctx=Load()), ctx=Load()))]), If(test=UnaryOp(op=Not(), operand=Name(id='extras', ctx=Load())), body=[Return(value=Name(id='base', ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_make_extras_candidate', ctx=Load()), args=[Name(id='base', ctx=Load()), Name(id='extras', ctx=Load())], keywords=[keyword(arg='comes_from', value=Name(id='template', ctx=Load()))]))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Candidate', ctx=Load()), ctx=Load())), FunctionDef(name='_iter_found_candidates', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ireqs', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='InstallRequirement', ctx=Load()), ctx=Load())), arg(arg='specifier', annotation=Name(id='SpecifierSet', ctx=Load())), arg(arg='hashes', annotation=Name(id='Hashes', ctx=Load())), arg(arg='prefers_installed', annotation=Name(id='bool', ctx=Load())), arg(arg='incompatible_ids', annotation=Subscript(value=Name(id='Set', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='ireqs', ctx=Load())), body=[Return(value=Tuple(elts=[], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='template', ctx=Store())], value=Subscript(value=Name(id='ireqs', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assert(test=Attribute(value=Name(id='template', ctx=Load()), attr='req', ctx=Load()), msg=Constant(value='Candidates found on index must be PEP 508')), Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Name(id='canonicalize_name', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='template', ctx=Load()), attr='req', ctx=Load()), attr='name', ctx=Load())], keywords=[])), AnnAssign(target=Name(id='extras', ctx=Store()), annotation=Subscript(value=Name(id='FrozenSet', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Call(func=Name(id='frozenset', ctx=Load()), args=[], keywords=[]), simple=1), For(target=Name(id='ireq', ctx=Store()), iter=Name(id='ireqs', ctx=Load()), body=[Assert(test=Attribute(value=Name(id='ireq', ctx=Load()), attr='req', ctx=Load()), msg=Constant(value='Candidates found on index must be PEP 508')), AugAssign(target=Name(id='specifier', ctx=Store()), op=BitAnd(), value=Attribute(value=Attribute(value=Name(id='ireq', ctx=Load()), attr='req', ctx=Load()), attr='specifier', ctx=Load())), AugAssign(target=Name(id='hashes', ctx=Store()), op=BitAnd(), value=Call(func=Attribute(value=Name(id='ireq', ctx=Load()), attr='hashes', ctx=Load()), args=[], keywords=[keyword(arg='trust_internet', value=Constant(value=False))])), AugAssign(target=Name(id='extras', ctx=Store()), op=BitOr(), value=Call(func=Name(id='frozenset', ctx=Load()), args=[Attribute(value=Name(id='ireq', ctx=Load()), attr='extras', ctx=Load())], keywords=[]))], orelse=[]), FunctionDef(name='_get_installed_candidate', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get the candidate for the currently-installed version.')), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_force_reinstall', ctx=Load()), body=[Return(value=Constant(value=None))], orelse=[]), Try(body=[Assign(targets=[Name(id='installed_dist', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_installed_dists', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Return(value=Constant(value=None))])], orelse=[], finalbody=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='specifier', ctx=Load()), attr='contains', ctx=Load()), args=[Attribute(value=Name(id='installed_dist', ctx=Load()), attr='version', ctx=Load())], keywords=[keyword(arg='prereleases', value=Constant(value=True))])), body=[Return(value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='candidate', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_make_candidate_from_dist', ctx=Load()), args=[], keywords=[keyword(arg='dist', value=Name(id='installed_dist', ctx=Load())), keyword(arg='extras', value=Name(id='extras', ctx=Load())), keyword(arg='template', value=Name(id='template', ctx=Load()))])), If(test=Compare(left=Call(func=Name(id='id', ctx=Load()), args=[Name(id='candidate', ctx=Load())], keywords=[]), ops=[In()], comparators=[Name(id='incompatible_ids', ctx=Load())]), body=[Return(value=Constant(value=None))], orelse=[]), Return(value=Name(id='candidate', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Candidate', ctx=Load()), ctx=Load())), FunctionDef(name='iter_index_candidate_infos', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_finder', ctx=Load()), attr='find_best_candidate', ctx=Load()), args=[], keywords=[keyword(arg='project_name', value=Name(id='name', ctx=Load())), keyword(arg='specifier', value=Name(id='specifier', ctx=Load())), keyword(arg='hashes', value=Name(id='hashes', ctx=Load()))])), Assign(targets=[Name(id='icans', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='iter_applicable', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='all_yanked', ctx=Store())], value=Call(func=Name(id='all', ctx=Load()), args=[GeneratorExp(elt=Attribute(value=Attribute(value=Name(id='ican', ctx=Load()), attr='link', ctx=Load()), attr='is_yanked', ctx=Load()), generators=[comprehension(target=Name(id='ican', ctx=Store()), iter=Name(id='icans', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), FunctionDef(name='is_pinned', args=arguments(posonlyargs=[], args=[arg(arg='specifier', annotation=Name(id='SpecifierSet', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='sp', ctx=Store()), iter=Name(id='specifier', ctx=Load()), body=[If(test=Compare(left=Attribute(value=Name(id='sp', ctx=Load()), attr='operator', ctx=Load()), ops=[Eq()], comparators=[Constant(value='===')]), body=[Return(value=Constant(value=True))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='sp', ctx=Load()), attr='operator', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='==')]), body=[Continue()], orelse=[]), If(test=Call(func=Attribute(value=Attribute(value=Name(id='sp', ctx=Load()), attr='version', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='.*')], keywords=[]), body=[Continue()], orelse=[]), Return(value=Constant(value=True))], orelse=[]), Return(value=Constant(value=False))], decorator_list=[], returns=Name(id='bool', ctx=Load())), Assign(targets=[Name(id='pinned', ctx=Store())], value=Call(func=Name(id='is_pinned', ctx=Load()), args=[Name(id='specifier', ctx=Load())], keywords=[])), For(target=Name(id='ican', ctx=Store()), iter=Call(func=Name(id='reversed', ctx=Load()), args=[Name(id='icans', ctx=Load())], keywords=[]), body=[If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=BoolOp(op=And(), values=[Name(id='all_yanked', ctx=Load()), Name(id='pinned', ctx=Load())])), Attribute(value=Attribute(value=Name(id='ican', ctx=Load()), attr='link', ctx=Load()), attr='is_yanked', ctx=Load())]), body=[Continue()], orelse=[]), Assign(targets=[Name(id='func', ctx=Store())], value=Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='partial', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_make_candidate_from_link', ctx=Load())], keywords=[keyword(arg='link', value=Attribute(value=Name(id='ican', ctx=Load()), attr='link', ctx=Load())), keyword(arg='extras', value=Name(id='extras', ctx=Load())), keyword(arg='template', value=Name(id='template', ctx=Load())), keyword(arg='name', value=Name(id='name', ctx=Load())), keyword(arg='version', value=Attribute(value=Name(id='ican', ctx=Load()), attr='version', ctx=Load()))])), Expr(value=Yield(value=Tuple(elts=[Attribute(value=Name(id='ican', ctx=Load()), attr='version', ctx=Load()), Name(id='func', ctx=Load())], ctx=Load())))], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Name(id='IndexCandidateInfo', ctx=Load()), ctx=Load())), Return(value=Call(func=Name(id='FoundCandidates', ctx=Load()), args=[Name(id='iter_index_candidate_infos', ctx=Load()), Call(func=Name(id='_get_installed_candidate', ctx=Load()), args=[], keywords=[]), Name(id='prefers_installed', ctx=Load()), Name(id='incompatible_ids', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='Candidate', ctx=Load()), ctx=Load())), FunctionDef(name='_iter_explicit_candidates_from_base', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='base_requirements', annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='Requirement', ctx=Load()), ctx=Load())), arg(arg='extras', annotation=Subscript(value=Name(id='FrozenSet', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Produce explicit candidates from the base given an extra-ed package.\n\n        :param base_requirements: Requirements known to the resolver. The\n            requirements are guaranteed to not have extras.\n        :param extras: The extras to inject into the explicit requirements'\n            candidates.\n        ")), For(target=Name(id='req', ctx=Store()), iter=Name(id='base_requirements', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='lookup_cand', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='req', ctx=Load()), attr='get_candidate_lookup', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='lookup_cand', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Continue()], orelse=[]), Assign(targets=[Name(id='base_cand', ctx=Store())], value=Call(func=Name(id='as_base_candidate', ctx=Load()), args=[Name(id='lookup_cand', ctx=Load())], keywords=[])), Assert(test=Compare(left=Name(id='base_cand', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), msg=Constant(value='no extras here')), Expr(value=Yield(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_make_extras_candidate', ctx=Load()), args=[Name(id='base_cand', ctx=Load()), Name(id='extras', ctx=Load())], keywords=[])))], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Name(id='Candidate', ctx=Load()), ctx=Load())), FunctionDef(name='_iter_candidates_from_constraints', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='identifier', annotation=Name(id='str', ctx=Load())), arg(arg='constraint', annotation=Name(id='Constraint', ctx=Load())), arg(arg='template', annotation=Name(id='InstallRequirement', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Produce explicit candidates from constraints.\n\n        This creates "fake" InstallRequirement objects that are basically clones\n        of what "should" be the template, but with original_link set to link.\n        ')), For(target=Name(id='link', ctx=Store()), iter=Attribute(value=Name(id='constraint', ctx=Load()), attr='links', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_fail_if_link_is_unsupported_wheel', ctx=Load()), args=[Name(id='link', ctx=Load())], keywords=[])), Assign(targets=[Name(id='candidate', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_make_candidate_from_link', ctx=Load()), args=[Name(id='link', ctx=Load())], keywords=[keyword(arg='extras', value=Call(func=Name(id='frozenset', ctx=Load()), args=[], keywords=[])), keyword(arg='template', value=Call(func=Name(id='install_req_from_link_and_ireq', ctx=Load()), args=[Name(id='link', ctx=Load()), Name(id='template', ctx=Load())], keywords=[])), keyword(arg='name', value=Call(func=Name(id='canonicalize_name', ctx=Load()), args=[Name(id='identifier', ctx=Load())], keywords=[])), keyword(arg='version', value=Constant(value=None))])), If(test=Name(id='candidate', ctx=Load()), body=[Expr(value=Yield(value=Name(id='candidate', ctx=Load())))], orelse=[])], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Name(id='Candidate', ctx=Load()), ctx=Load())), FunctionDef(name='find_candidates', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='identifier', annotation=Name(id='str', ctx=Load())), arg(arg='requirements', annotation=Subscript(value=Name(id='Mapping', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='Requirement', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='incompatibilities', annotation=Subscript(value=Name(id='Mapping', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Iterator', ctx=Load()), slice=Name(id='Candidate', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='constraint', annotation=Name(id='Constraint', ctx=Load())), arg(arg='prefers_installed', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Name(id='explicit_candidates', ctx=Store()), annotation=Subscript(value=Name(id='Set', ctx=Load()), slice=Name(id='Candidate', ctx=Load()), ctx=Load()), value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[]), simple=1), AnnAssign(target=Name(id='ireqs', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='InstallRequirement', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), For(target=Name(id='req', ctx=Store()), iter=Subscript(value=Name(id='requirements', ctx=Load()), slice=Name(id='identifier', ctx=Load()), ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='cand', ctx=Store()), Name(id='ireq', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='req', ctx=Load()), attr='get_candidate_lookup', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='cand', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='explicit_candidates', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='cand', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='ireq', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='ireqs', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='ireq', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='contextlib', ctx=Load()), attr='suppress', ctx=Load()), args=[Name(id='InvalidRequirement', ctx=Load())], keywords=[]))], body=[Assign(targets=[Name(id='parsed_requirement', ctx=Store())], value=Call(func=Name(id='get_requirement', ctx=Load()), args=[Name(id='identifier', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='parsed_requirement', ctx=Load()), attr='name', ctx=Load()), ops=[NotEq()], comparators=[Name(id='identifier', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='explicit_candidates', ctx=Load()), attr='update', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_iter_explicit_candidates_from_base', ctx=Load()), args=[Call(func=Attribute(value=Name(id='requirements', ctx=Load()), attr='get', ctx=Load()), args=[Attribute(value=Name(id='parsed_requirement', ctx=Load()), attr='name', ctx=Load()), Tuple(elts=[], ctx=Load())], keywords=[]), Call(func=Name(id='frozenset', ctx=Load()), args=[Attribute(value=Name(id='parsed_requirement', ctx=Load()), attr='extras', ctx=Load())], keywords=[])], keywords=[])], keywords=[])), For(target=Name(id='req', ctx=Store()), iter=Call(func=Attribute(value=Name(id='requirements', ctx=Load()), attr='get', ctx=Load()), args=[Attribute(value=Name(id='parsed_requirement', ctx=Load()), attr='name', ctx=Load()), List(elts=[], ctx=Load())], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='ireq', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='req', ctx=Load()), attr='get_candidate_lookup', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='ireq', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='ireqs', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='ireq', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[])]), If(test=Name(id='ireqs', ctx=Load()), body=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='explicit_candidates', ctx=Load()), attr='update', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_iter_candidates_from_constraints', ctx=Load()), args=[Name(id='identifier', ctx=Load()), Name(id='constraint', ctx=Load())], keywords=[keyword(arg='template', value=Subscript(value=Name(id='ireqs', ctx=Load()), slice=Constant(value=0), ctx=Load()))])], keywords=[]))], handlers=[ExceptHandler(type=Name(id='UnsupportedWheel', ctx=Load()), body=[Return(value=Tuple(elts=[], ctx=Load()))])], orelse=[], finalbody=[])], orelse=[]), Assign(targets=[Name(id='incompat_ids', ctx=Store())], value=SetComp(elt=Call(func=Name(id='id', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Call(func=Attribute(value=Name(id='incompatibilities', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='identifier', ctx=Load()), Tuple(elts=[], ctx=Load())], keywords=[]), ifs=[], is_async=0)])), If(test=UnaryOp(op=Not(), operand=Name(id='explicit_candidates', ctx=Load())), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_iter_found_candidates', ctx=Load()), args=[Name(id='ireqs', ctx=Load()), Attribute(value=Name(id='constraint', ctx=Load()), attr='specifier', ctx=Load()), Attribute(value=Name(id='constraint', ctx=Load()), attr='hashes', ctx=Load()), Name(id='prefers_installed', ctx=Load()), Name(id='incompat_ids', ctx=Load())], keywords=[]))], orelse=[]), Return(value=GeneratorExp(elt=Name(id='c', ctx=Load()), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Name(id='explicit_candidates', ctx=Load()), ifs=[BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='id', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[]), ops=[NotIn()], comparators=[Name(id='incompat_ids', ctx=Load())]), Call(func=Attribute(value=Name(id='constraint', ctx=Load()), attr='is_satisfied_by', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[]), Call(func=Name(id='all', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='req', ctx=Load()), attr='is_satisfied_by', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='req', ctx=Store()), iter=Subscript(value=Name(id='requirements', ctx=Load()), slice=Name(id='identifier', ctx=Load()), ctx=Load()), ifs=[], is_async=0)])], keywords=[])])], is_async=0)]))], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='Candidate', ctx=Load()), ctx=Load())), FunctionDef(name='_make_requirements_from_install_req', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ireq', annotation=Name(id='InstallRequirement', ctx=Load())), arg(arg='requested_extras', annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Returns requirement objects associated with the given InstallRequirement. In\n        most cases this will be a single object but the following special cases exist:\n            - the InstallRequirement has markers that do not apply -> result is empty\n            - the InstallRequirement has both a constraint and extras -> result is split\n                in two requirement objects: one with the constraint and one with the\n                extra. This allows centralized constraint handling for the base,\n                resulting in fewer candidate rejections.\n        ')), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='ireq', ctx=Load()), attr='match_markers', ctx=Load()), args=[Name(id='requested_extras', ctx=Load())], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value="Ignoring %s: markers '%s' don't match your environment"), Attribute(value=Name(id='ireq', ctx=Load()), attr='name', ctx=Load()), Attribute(value=Name(id='ireq', ctx=Load()), attr='markers', ctx=Load())], keywords=[]))], orelse=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='ireq', ctx=Load()), attr='link', ctx=Load())), body=[If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='ireq', ctx=Load()), attr='extras', ctx=Load()), Compare(left=Attribute(value=Name(id='ireq', ctx=Load()), attr='req', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Attribute(value=Attribute(value=Name(id='ireq', ctx=Load()), attr='req', ctx=Load()), attr='specifier', ctx=Load())]), body=[Expr(value=Yield(value=Call(func=Name(id='SpecifierWithoutExtrasRequirement', ctx=Load()), args=[Name(id='ireq', ctx=Load())], keywords=[])))], orelse=[]), Expr(value=Yield(value=Call(func=Name(id='SpecifierRequirement', ctx=Load()), args=[Name(id='ireq', ctx=Load())], keywords=[])))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_fail_if_link_is_unsupported_wheel', ctx=Load()), args=[Attribute(value=Name(id='ireq', ctx=Load()), attr='link', ctx=Load())], keywords=[])), Assign(targets=[Name(id='cand', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_make_candidate_from_link', ctx=Load()), args=[Attribute(value=Name(id='ireq', ctx=Load()), attr='link', ctx=Load())], keywords=[keyword(arg='extras', value=Call(func=Name(id='frozenset', ctx=Load()), args=[Attribute(value=Name(id='ireq', ctx=Load()), attr='extras', ctx=Load())], keywords=[])), keyword(arg='template', value=Name(id='ireq', ctx=Load())), keyword(arg='name', value=IfExp(test=Attribute(value=Name(id='ireq', ctx=Load()), attr='name', ctx=Load()), body=Call(func=Name(id='canonicalize_name', ctx=Load()), args=[Attribute(value=Name(id='ireq', ctx=Load()), attr='name', ctx=Load())], keywords=[]), orelse=Constant(value=None))), keyword(arg='version', value=Constant(value=None))])), If(test=Compare(left=Name(id='cand', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='ireq', ctx=Load()), attr='name', ctx=Load())), body=[Raise(exc=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_build_failures', ctx=Load()), slice=Attribute(value=Name(id='ireq', ctx=Load()), attr='link', ctx=Load()), ctx=Load()))], orelse=[]), Expr(value=Yield(value=Call(func=Name(id='UnsatisfiableRequirement', ctx=Load()), args=[Call(func=Name(id='canonicalize_name', ctx=Load()), args=[Attribute(value=Name(id='ireq', ctx=Load()), attr='name', ctx=Load())], keywords=[])], keywords=[])))], orelse=[Expr(value=Yield(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='make_requirement_from_candidate', ctx=Load()), args=[Name(id='cand', ctx=Load())], keywords=[])))])])])], decorator_list=[], returns=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Name(id='Requirement', ctx=Load()), ctx=Load())), FunctionDef(name='collect_root_requirements', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='root_ireqs', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='InstallRequirement', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='collected', ctx=Store())], value=Call(func=Name(id='CollectedRootRequirements', ctx=Load()), args=[List(elts=[], ctx=Load()), Dict(keys=[], values=[]), Dict(keys=[], values=[])], keywords=[])), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='ireq', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='root_ireqs', ctx=Load())], keywords=[]), body=[If(test=Attribute(value=Name(id='ireq', ctx=Load()), attr='constraint', ctx=Load()), body=[Assign(targets=[Name(id='problem', ctx=Store())], value=Call(func=Name(id='check_invalid_constraint_type', ctx=Load()), args=[Name(id='ireq', ctx=Load())], keywords=[])), If(test=Name(id='problem', ctx=Load()), body=[Raise(exc=Call(func=Name(id='InstallationError', ctx=Load()), args=[Name(id='problem', ctx=Load())], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='ireq', ctx=Load()), attr='match_markers', ctx=Load()), args=[], keywords=[])), body=[Continue()], orelse=[]), Assert(test=Attribute(value=Name(id='ireq', ctx=Load()), attr='name', ctx=Load()), msg=Constant(value='Constraint must be named')), Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Name(id='canonicalize_name', ctx=Load()), args=[Attribute(value=Name(id='ireq', ctx=Load()), attr='name', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='name', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='collected', ctx=Load()), attr='constraints', ctx=Load())]), body=[AugAssign(target=Subscript(value=Attribute(value=Name(id='collected', ctx=Load()), attr='constraints', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store()), op=BitAnd(), value=Name(id='ireq', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Attribute(value=Name(id='collected', ctx=Load()), attr='constraints', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Name(id='Constraint', ctx=Load()), attr='from_ireq', ctx=Load()), args=[Name(id='ireq', ctx=Load())], keywords=[]))])], orelse=[Assign(targets=[Name(id='reqs', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_make_requirements_from_install_req', ctx=Load()), args=[Name(id='ireq', ctx=Load())], keywords=[keyword(arg='requested_extras', value=Tuple(elts=[], ctx=Load()))])], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='reqs', ctx=Load())), body=[Continue()], orelse=[]), Assign(targets=[Name(id='template', ctx=Store())], value=Subscript(value=Name(id='reqs', ctx=Load()), slice=Constant(value=0), ctx=Load())), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='ireq', ctx=Load()), attr='user_supplied', ctx=Load()), Compare(left=Attribute(value=Name(id='template', ctx=Load()), attr='name', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='collected', ctx=Load()), attr='user_requested', ctx=Load())])]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='collected', ctx=Load()), attr='user_requested', ctx=Load()), slice=Attribute(value=Name(id='template', ctx=Load()), attr='name', ctx=Load()), ctx=Store())], value=Name(id='i', ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='collected', ctx=Load()), attr='requirements', ctx=Load()), attr='extend', ctx=Load()), args=[Name(id='reqs', ctx=Load())], keywords=[]))])], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='collected', ctx=Load()), attr='requirements', ctx=Load()), attr='sort', ctx=Load()), args=[], keywords=[keyword(arg='key', value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='r')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Attribute(value=Name(id='r', ctx=Load()), attr='name', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='r', ctx=Load()), attr='project_name', ctx=Load())])))])), Return(value=Name(id='collected', ctx=Load()))], decorator_list=[], returns=Name(id='CollectedRootRequirements', ctx=Load())), FunctionDef(name='make_requirement_from_candidate', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='candidate', annotation=Name(id='Candidate', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='ExplicitRequirement', ctx=Load()), args=[Name(id='candidate', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='ExplicitRequirement', ctx=Load())), FunctionDef(name='make_requirements_from_spec', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='specifier', annotation=Name(id='str', ctx=Load())), arg(arg='comes_from', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='InstallRequirement', ctx=Load()), ctx=Load())), arg(arg='requested_extras', annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Tuple(elts=[], ctx=Load())]), body=[Expr(value=Constant(value='\n        Returns requirement objects associated with the given specifier. In most cases\n        this will be a single object but the following special cases exist:\n            - the specifier has markers that do not apply -> result is empty\n            - the specifier has both a constraint and extras -> result is split\n                in two requirement objects: one with the constraint and one with the\n                extra. This allows centralized constraint handling for the base,\n                resulting in fewer candidate rejections.\n        ')), Assign(targets=[Name(id='ireq', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_make_install_req_from_spec', ctx=Load()), args=[Name(id='specifier', ctx=Load()), Name(id='comes_from', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_make_requirements_from_install_req', ctx=Load()), args=[Name(id='ireq', ctx=Load()), Name(id='requested_extras', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Name(id='Requirement', ctx=Load()), ctx=Load())), FunctionDef(name='make_requires_python_requirement', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='specifier', annotation=Name(id='SpecifierSet', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_ignore_requires_python', ctx=Load()), body=[Return(value=Constant(value=None))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='str', ctx=Load()), args=[Name(id='specifier', ctx=Load())], keywords=[])), body=[Return(value=Constant(value=None))], orelse=[]), Return(value=Call(func=Name(id='RequiresPythonRequirement', ctx=Load()), args=[Name(id='specifier', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_python_candidate', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Requirement', ctx=Load()), ctx=Load())), FunctionDef(name='get_wheel_cache_entry', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='link', annotation=Name(id='Link', ctx=Load())), arg(arg='name', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Look up the link in the wheel cache.\n\n        If ``preparer.require_hashes`` is True, don't use the wheel cache,\n        because cached wheels, always built locally, have different hashes\n        than the files downloaded from the index server and thus throw false\n        hash mismatches. Furthermore, cached wheels at present have\n        nondeterministic contents due to file modification times.\n        ")), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_wheel_cache', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=None))], orelse=[]), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_wheel_cache', ctx=Load()), attr='get_cache_entry', ctx=Load()), args=[], keywords=[keyword(arg='link', value=Name(id='link', ctx=Load())), keyword(arg='package_name', value=Name(id='name', ctx=Load())), keyword(arg='supported_tags', value=Call(func=Name(id='get_supported', ctx=Load()), args=[], keywords=[]))]))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='CacheEntry', ctx=Load()), ctx=Load())), FunctionDef(name='get_dist_to_uninstall', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='candidate', annotation=Name(id='Candidate', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='dist', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_installed_dists', ctx=Load()), attr='get', ctx=Load()), args=[Attribute(value=Name(id='candidate', ctx=Load()), attr='project_name', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='dist', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=None))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='_use_user_site', ctx=Load())), body=[Return(value=Name(id='dist', ctx=Load()))], orelse=[]), If(test=Attribute(value=Name(id='dist', ctx=Load()), attr='in_usersite', ctx=Load()), body=[Return(value=Name(id='dist', ctx=Load()))], orelse=[]), If(test=BoolOp(op=And(), values=[Call(func=Name(id='running_under_virtualenv', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='dist', ctx=Load()), attr='in_site_packages', ctx=Load())]), body=[Assign(targets=[Name(id='message', ctx=Store())], value=JoinedStr(values=[Constant(value='Will not install to the user site because it will lack sys.path precedence to '), FormattedValue(value=Attribute(value=Name(id='dist', ctx=Load()), attr='raw_name', ctx=Load()), conversion=-1), Constant(value=' in '), FormattedValue(value=Attribute(value=Name(id='dist', ctx=Load()), attr='location', ctx=Load()), conversion=-1)])), Raise(exc=Call(func=Name(id='InstallationError', ctx=Load()), args=[Name(id='message', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Constant(value=None))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='BaseDistribution', ctx=Load()), ctx=Load())), FunctionDef(name='_report_requires_python_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='causes', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Constant(value='ConflictCause'), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Name(id='causes', ctx=Load()), msg=Constant(value='Requires-Python error reported with no cause')), Assign(targets=[Name(id='version', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_python_candidate', ctx=Load()), attr='version', ctx=Load())), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='causes', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='specifier', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Attribute(value=Subscript(value=Name(id='causes', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='requirement', ctx=Load()), attr='specifier', ctx=Load())], keywords=[])), Assign(targets=[Name(id='message', ctx=Store())], value=JoinedStr(values=[Constant(value='Package '), FormattedValue(value=Attribute(value=Attribute(value=Subscript(value=Name(id='causes', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='parent', ctx=Load()), attr='name', ctx=Load()), conversion=114), Constant(value=' requires a different Python: '), FormattedValue(value=Name(id='version', ctx=Load()), conversion=-1), Constant(value=' not in '), FormattedValue(value=Name(id='specifier', ctx=Load()), conversion=114)])), Return(value=Call(func=Name(id='UnsupportedPythonVersion', ctx=Load()), args=[Name(id='message', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='message', ctx=Store())], value=JoinedStr(values=[Constant(value='Packages require a different Python. '), FormattedValue(value=Name(id='version', ctx=Load()), conversion=-1), Constant(value=' not in:')])), For(target=Name(id='cause', ctx=Store()), iter=Name(id='causes', ctx=Load()), body=[Assign(targets=[Name(id='package', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='cause', ctx=Load()), attr='parent', ctx=Load()), attr='format_for_error', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='specifier', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='cause', ctx=Load()), attr='requirement', ctx=Load()), attr='specifier', ctx=Load())], keywords=[])), AugAssign(target=Name(id='message', ctx=Store()), op=Add(), value=JoinedStr(values=[Constant(value='\n'), FormattedValue(value=Name(id='specifier', ctx=Load()), conversion=114), Constant(value=' (required by '), FormattedValue(value=Name(id='package', ctx=Load()), conversion=-1), Constant(value=')')]))], orelse=[]), Return(value=Call(func=Name(id='UnsupportedPythonVersion', ctx=Load()), args=[Name(id='message', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='UnsupportedPythonVersion', ctx=Load())), FunctionDef(name='_report_single_requirement_conflict', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='req', annotation=Name(id='Requirement', ctx=Load())), arg(arg='parent', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Candidate', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='parent', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='req_disp', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='req', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='req_disp', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='req', ctx=Load()), conversion=-1), Constant(value=' (from '), FormattedValue(value=Attribute(value=Name(id='parent', ctx=Load()), attr='name', ctx=Load()), conversion=-1), Constant(value=')')]))]), Assign(targets=[Name(id='cands', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_finder', ctx=Load()), attr='find_all_candidates', ctx=Load()), args=[Attribute(value=Name(id='req', ctx=Load()), attr='project_name', ctx=Load())], keywords=[])), Assign(targets=[Name(id='skipped_by_requires_python', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_finder', ctx=Load()), attr='requires_python_skipped_reasons', ctx=Load()), args=[], keywords=[])), AnnAssign(target=Name(id='versions_set', ctx=Store()), annotation=Subscript(value=Name(id='Set', ctx=Load()), slice=Name(id='CandidateVersion', ctx=Load()), ctx=Load()), value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[]), simple=1), AnnAssign(target=Name(id='yanked_versions_set', ctx=Store()), annotation=Subscript(value=Name(id='Set', ctx=Load()), slice=Name(id='CandidateVersion', ctx=Load()), ctx=Load()), value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[]), simple=1), For(target=Name(id='c', ctx=Store()), iter=Name(id='cands', ctx=Load()), body=[Assign(targets=[Name(id='is_yanked', ctx=Store())], value=IfExp(test=Attribute(value=Name(id='c', ctx=Load()), attr='link', ctx=Load()), body=Attribute(value=Attribute(value=Name(id='c', ctx=Load()), attr='link', ctx=Load()), attr='is_yanked', ctx=Load()), orelse=Constant(value=False))), If(test=Name(id='is_yanked', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='yanked_versions_set', ctx=Load()), attr='add', ctx=Load()), args=[Attribute(value=Name(id='c', ctx=Load()), attr='version', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='versions_set', ctx=Load()), attr='add', ctx=Load()), args=[Attribute(value=Name(id='c', ctx=Load()), attr='version', ctx=Load())], keywords=[]))])], orelse=[]), Assign(targets=[Name(id='versions', ctx=Store())], value=ListComp(elt=Call(func=Name(id='str', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='v', ctx=Store()), iter=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='versions_set', ctx=Load())], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='yanked_versions', ctx=Store())], value=ListComp(elt=Call(func=Name(id='str', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='v', ctx=Store()), iter=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='yanked_versions_set', ctx=Load())], keywords=[]), ifs=[], is_async=0)])), If(test=Name(id='yanked_versions', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='critical', ctx=Load()), args=[Constant(value='Ignored the following yanked versions: %s'), BoolOp(op=Or(), values=[Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Name(id='yanked_versions', ctx=Load())], keywords=[]), Constant(value='none')])], keywords=[]))], orelse=[]), If(test=Name(id='skipped_by_requires_python', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='critical', ctx=Load()), args=[Constant(value='Ignored the following versions that require a different python version: %s'), BoolOp(op=Or(), values=[Call(func=Attribute(value=Constant(value='; '), attr='join', ctx=Load()), args=[Name(id='skipped_by_requires_python', ctx=Load())], keywords=[]), Constant(value='none')])], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='critical', ctx=Load()), args=[Constant(value='Could not find a version that satisfies the requirement %s (from versions: %s)'), Name(id='req_disp', ctx=Load()), BoolOp(op=Or(), values=[Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Name(id='versions', ctx=Load())], keywords=[]), Constant(value='none')])], keywords=[])), If(test=Compare(left=Call(func=Name(id='str', ctx=Load()), args=[Name(id='req', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value='requirements.txt')]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='HINT: You are attempting to install a package literally named "requirements.txt" (which cannot exist). Consider using the \'-r\' flag to install the packages listed in requirements.txt')], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='DistributionNotFound', ctx=Load()), args=[JoinedStr(values=[Constant(value='No matching distribution found for '), FormattedValue(value=Name(id='req', ctx=Load()), conversion=-1)])], keywords=[]))], decorator_list=[], returns=Name(id='DistributionNotFound', ctx=Load())), FunctionDef(name='get_installation_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='e', annotation=Constant(value='ResolutionImpossible[Requirement, Candidate]')), arg(arg='constraints', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Constraint', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Attribute(value=Name(id='e', ctx=Load()), attr='causes', ctx=Load()), msg=Constant(value='Installation error reported with no cause')), Assign(targets=[Name(id='requires_python_causes', ctx=Store())], value=ListComp(elt=Name(id='cause', ctx=Load()), generators=[comprehension(target=Name(id='cause', ctx=Store()), iter=Attribute(value=Name(id='e', ctx=Load()), attr='causes', ctx=Load()), ifs=[BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='cause', ctx=Load()), attr='requirement', ctx=Load()), Name(id='RequiresPythonRequirement', ctx=Load())], keywords=[]), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='cause', ctx=Load()), attr='requirement', ctx=Load()), attr='is_satisfied_by', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_python_candidate', ctx=Load())], keywords=[]))])], is_async=0)])), If(test=Name(id='requires_python_causes', ctx=Load()), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_report_requires_python_error', ctx=Load()), args=[Call(func=Name(id='cast', ctx=Load()), args=[Constant(value='Sequence[ConflictCause]'), Name(id='requires_python_causes', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='e', ctx=Load()), attr='causes', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Assign(targets=[Tuple(elts=[Name(id='req', ctx=Store()), Name(id='parent', ctx=Store())], ctx=Store())], value=Subscript(value=Attribute(value=Name(id='e', ctx=Load()), attr='causes', ctx=Load()), slice=Constant(value=0), ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='req', ctx=Load()), attr='name', ctx=Load()), ops=[NotIn()], comparators=[Name(id='constraints', ctx=Load())]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_report_single_requirement_conflict', ctx=Load()), args=[Name(id='req', ctx=Load()), Name(id='parent', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), FunctionDef(name='text_join', args=arguments(posonlyargs=[], args=[arg(arg='parts', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='parts', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='parts', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=BinOp(left=BinOp(left=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Subscript(value=Name(id='parts', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]), op=Add(), right=Constant(value=' and ')), op=Add(), right=Subscript(value=Name(id='parts', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='describe_trigger', args=arguments(posonlyargs=[], args=[arg(arg='parent', annotation=Name(id='Candidate', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ireq', ctx=Store())], value=Call(func=Attribute(value=Name(id='parent', ctx=Load()), attr='get_install_requirement', ctx=Load()), args=[], keywords=[])), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Name(id='ireq', ctx=Load())), UnaryOp(op=Not(), operand=Attribute(value=Name(id='ireq', ctx=Load()), attr='comes_from', ctx=Load()))]), body=[Return(value=JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='parent', ctx=Load()), attr='name', ctx=Load()), conversion=-1), Constant(value='=='), FormattedValue(value=Attribute(value=Name(id='parent', ctx=Load()), attr='version', ctx=Load()), conversion=-1)]))], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='ireq', ctx=Load()), attr='comes_from', ctx=Load()), Name(id='InstallRequirement', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='ireq', ctx=Load()), attr='comes_from', ctx=Load()), attr='name', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='ireq', ctx=Load()), attr='comes_from', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), Assign(targets=[Name(id='triggers', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='req', ctx=Store()), Name(id='parent', ctx=Store())], ctx=Store()), iter=Attribute(value=Name(id='e', ctx=Load()), attr='causes', ctx=Load()), body=[If(test=Compare(left=Name(id='parent', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='trigger', ctx=Store())], value=Call(func=Attribute(value=Name(id='req', ctx=Load()), attr='format_for_error', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Name(id='trigger', ctx=Store())], value=Call(func=Name(id='describe_trigger', ctx=Load()), args=[Name(id='parent', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='triggers', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='trigger', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='triggers', ctx=Load()), body=[Assign(targets=[Name(id='info', ctx=Store())], value=Call(func=Name(id='text_join', ctx=Load()), args=[Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='triggers', ctx=Load())], keywords=[])], keywords=[]))], orelse=[Assign(targets=[Name(id='info', ctx=Store())], value=Constant(value='the requested packages'))]), Assign(targets=[Name(id='msg', ctx=Store())], value=Call(func=Attribute(value=Constant(value='Cannot install {} because these package versions have conflicting dependencies.'), attr='format', ctx=Load()), args=[Name(id='info', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='critical', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[])), Assign(targets=[Name(id='msg', ctx=Store())], value=Constant(value='\nThe conflict is caused by:')), Assign(targets=[Name(id='relevant_constraints', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='req', ctx=Store()), Name(id='parent', ctx=Store())], ctx=Store()), iter=Attribute(value=Name(id='e', ctx=Load()), attr='causes', ctx=Load()), body=[If(test=Compare(left=Attribute(value=Name(id='req', ctx=Load()), attr='name', ctx=Load()), ops=[In()], comparators=[Name(id='constraints', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='relevant_constraints', ctx=Load()), attr='add', ctx=Load()), args=[Attribute(value=Name(id='req', ctx=Load()), attr='name', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='msg', ctx=Store())], value=BinOp(left=Name(id='msg', ctx=Load()), op=Add(), right=Constant(value='\n    '))), If(test=Name(id='parent', ctx=Load()), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=BinOp(left=Name(id='msg', ctx=Load()), op=Add(), right=JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='parent', ctx=Load()), attr='name', ctx=Load()), conversion=-1), Constant(value=' '), FormattedValue(value=Attribute(value=Name(id='parent', ctx=Load()), attr='version', ctx=Load()), conversion=-1), Constant(value=' depends on ')])))], orelse=[Assign(targets=[Name(id='msg', ctx=Store())], value=BinOp(left=Name(id='msg', ctx=Load()), op=Add(), right=Constant(value='The user requested ')))]), Assign(targets=[Name(id='msg', ctx=Store())], value=BinOp(left=Name(id='msg', ctx=Load()), op=Add(), right=Call(func=Attribute(value=Name(id='req', ctx=Load()), attr='format_for_error', ctx=Load()), args=[], keywords=[])))], orelse=[]), For(target=Name(id='key', ctx=Store()), iter=Name(id='relevant_constraints', ctx=Load()), body=[Assign(targets=[Name(id='spec', ctx=Store())], value=Attribute(value=Subscript(value=Name(id='constraints', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()), attr='specifier', ctx=Load())), AugAssign(target=Name(id='msg', ctx=Store()), op=Add(), value=JoinedStr(values=[Constant(value='\n    The user requested (constraint) '), FormattedValue(value=Name(id='key', ctx=Load()), conversion=-1), FormattedValue(value=Name(id='spec', ctx=Load()), conversion=-1)]))], orelse=[]), Assign(targets=[Name(id='msg', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='msg', ctx=Load()), op=Add(), right=Constant(value='\n\n')), op=Add(), right=Constant(value='To fix this you could try to:\n')), op=Add(), right=Constant(value="1. loosen the range of package versions you've specified\n")), op=Add(), right=Constant(value='2. remove package versions to allow pip attempt to solve ')), op=Add(), right=Constant(value='the dependency conflict\n'))), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='DistributionNotFound', ctx=Load()), args=[Constant(value='ResolutionImpossible: for help visit https://pip.pypa.io/en/latest/topics/dependency-resolution/#dealing-with-dependency-conflicts')], keywords=[]))], decorator_list=[], returns=Name(id='InstallationError', ctx=Load()))], decorator_list=[])], type_ignores=[])