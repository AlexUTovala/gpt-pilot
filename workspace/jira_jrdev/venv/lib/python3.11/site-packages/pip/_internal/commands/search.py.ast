Module(body=[Import(names=[alias(name='logging')]), Import(names=[alias(name='shutil')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='textwrap')]), Import(names=[alias(name='xmlrpc.client')]), ImportFrom(module='collections', names=[alias(name='OrderedDict')], level=0), ImportFrom(module='optparse', names=[alias(name='Values')], level=0), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING'), alias(name='Dict'), alias(name='List'), alias(name='Optional')], level=0), ImportFrom(module='pip._vendor.packaging.version', names=[alias(name='parse', asname='parse_version')], level=0), ImportFrom(module='pip._internal.cli.base_command', names=[alias(name='Command')], level=0), ImportFrom(module='pip._internal.cli.req_command', names=[alias(name='SessionCommandMixin')], level=0), ImportFrom(module='pip._internal.cli.status_codes', names=[alias(name='NO_MATCHES_FOUND'), alias(name='SUCCESS')], level=0), ImportFrom(module='pip._internal.exceptions', names=[alias(name='CommandError')], level=0), ImportFrom(module='pip._internal.metadata', names=[alias(name='get_default_environment')], level=0), ImportFrom(module='pip._internal.models.index', names=[alias(name='PyPI')], level=0), ImportFrom(module='pip._internal.network.xmlrpc', names=[alias(name='PipXmlrpcTransport')], level=0), ImportFrom(module='pip._internal.utils.logging', names=[alias(name='indent_log')], level=0), ImportFrom(module='pip._internal.utils.misc', names=[alias(name='write_output')], level=0), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='typing', names=[alias(name='TypedDict')], level=0), ClassDef(name='TransformedHit', bases=[Name(id='TypedDict', ctx=Load())], keywords=[], body=[AnnAssign(target=Name(id='name', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='summary', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='versions', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), simple=1)], decorator_list=[])], orelse=[]), Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), ClassDef(name='SearchCommand', bases=[Name(id='Command', ctx=Load()), Name(id='SessionCommandMixin', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Search for PyPI packages whose name or summary contains <query>.')), Assign(targets=[Name(id='usage', ctx=Store())], value=Constant(value='\n      %prog [options] <query>')), Assign(targets=[Name(id='ignore_require_venv', ctx=Store())], value=Constant(value=True)), FunctionDef(name='add_options', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load()), attr='add_option', ctx=Load()), args=[Constant(value='-i'), Constant(value='--index')], keywords=[keyword(arg='dest', value=Constant(value='index')), keyword(arg='metavar', value=Constant(value='URL')), keyword(arg='default', value=Attribute(value=Name(id='PyPI', ctx=Load()), attr='pypi_url', ctx=Load())), keyword(arg='help', value=Constant(value='Base URL of Python Package Index (default %default)'))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='parser', ctx=Load()), attr='insert_option_group', ctx=Load()), args=[Constant(value=0), Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='run', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='options', annotation=Name(id='Values', ctx=Load())), arg(arg='args', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='args', ctx=Load())), body=[Raise(exc=Call(func=Name(id='CommandError', ctx=Load()), args=[Constant(value='Missing required argument (search query).')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='query', ctx=Store())], value=Name(id='args', ctx=Load())), Assign(targets=[Name(id='pypi_hits', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='search', ctx=Load()), args=[Name(id='query', ctx=Load()), Name(id='options', ctx=Load())], keywords=[])), Assign(targets=[Name(id='hits', ctx=Store())], value=Call(func=Name(id='transform_hits', ctx=Load()), args=[Name(id='pypi_hits', ctx=Load())], keywords=[])), Assign(targets=[Name(id='terminal_width', ctx=Store())], value=Constant(value=None)), If(test=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load()), attr='isatty', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='terminal_width', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='shutil', ctx=Load()), attr='get_terminal_size', ctx=Load()), args=[], keywords=[]), slice=Constant(value=0), ctx=Load()))], orelse=[]), Expr(value=Call(func=Name(id='print_results', ctx=Load()), args=[Name(id='hits', ctx=Load())], keywords=[keyword(arg='terminal_width', value=Name(id='terminal_width', ctx=Load()))])), If(test=Name(id='pypi_hits', ctx=Load()), body=[Return(value=Name(id='SUCCESS', ctx=Load()))], orelse=[]), Return(value=Name(id='NO_MATCHES_FOUND', ctx=Load()))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='query', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='options', annotation=Name(id='Values', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='index_url', ctx=Store())], value=Attribute(value=Name(id='options', ctx=Load()), attr='index', ctx=Load())), Assign(targets=[Name(id='session', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_default_session', ctx=Load()), args=[Name(id='options', ctx=Load())], keywords=[])), Assign(targets=[Name(id='transport', ctx=Store())], value=Call(func=Name(id='PipXmlrpcTransport', ctx=Load()), args=[Name(id='index_url', ctx=Load()), Name(id='session', ctx=Load())], keywords=[])), Assign(targets=[Name(id='pypi', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='xmlrpc', ctx=Load()), attr='client', ctx=Load()), attr='ServerProxy', ctx=Load()), args=[Name(id='index_url', ctx=Load()), Name(id='transport', ctx=Load())], keywords=[])), Try(body=[Assign(targets=[Name(id='hits', ctx=Store())], value=Call(func=Attribute(value=Name(id='pypi', ctx=Load()), attr='search', ctx=Load()), args=[Dict(keys=[Constant(value='name'), Constant(value='summary')], values=[Name(id='query', ctx=Load()), Name(id='query', ctx=Load())]), Constant(value='or')], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Attribute(value=Name(id='xmlrpc', ctx=Load()), attr='client', ctx=Load()), attr='Fault', ctx=Load()), name='fault', body=[Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Attribute(value=Constant(value='XMLRPC request failed [code: {code}]\n{string}'), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='code', value=Attribute(value=Name(id='fault', ctx=Load()), attr='faultCode', ctx=Load())), keyword(arg='string', value=Attribute(value=Name(id='fault', ctx=Load()), attr='faultString', ctx=Load()))])), Raise(exc=Call(func=Name(id='CommandError', ctx=Load()), args=[Name(id='message', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[]), Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='hits', ctx=Load()), Name(id='list', ctx=Load())], keywords=[])), Return(value=Name(id='hits', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], decorator_list=[]), FunctionDef(name='transform_hits', args=arguments(posonlyargs=[], args=[arg(arg='hits', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    The list from pypi is really a list of versions. We want a list of\n    packages with the list of versions stored inline. This converts the\n    list from pypi into one we can use.\n    ')), AnnAssign(target=Name(id='packages', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Constant(value='TransformedHit')], ctx=Load()), ctx=Load()), value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[], keywords=[]), simple=1), For(target=Name(id='hit', ctx=Store()), iter=Name(id='hits', ctx=Load()), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Subscript(value=Name(id='hit', ctx=Load()), slice=Constant(value='name'), ctx=Load())), Assign(targets=[Name(id='summary', ctx=Store())], value=Subscript(value=Name(id='hit', ctx=Load()), slice=Constant(value='summary'), ctx=Load())), Assign(targets=[Name(id='version', ctx=Store())], value=Subscript(value=Name(id='hit', ctx=Load()), slice=Constant(value='version'), ctx=Load())), If(test=Compare(left=Name(id='name', ctx=Load()), ops=[NotIn()], comparators=[Call(func=Attribute(value=Name(id='packages', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='packages', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Dict(keys=[Constant(value='name'), Constant(value='summary'), Constant(value='versions')], values=[Name(id='name', ctx=Load()), Name(id='summary', ctx=Load()), List(elts=[Name(id='version', ctx=Load())], ctx=Load())]))], orelse=[Expr(value=Call(func=Attribute(value=Subscript(value=Subscript(value=Name(id='packages', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load()), slice=Constant(value='versions'), ctx=Load()), attr='append', ctx=Load()), args=[Name(id='version', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='version', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='highest_version', ctx=Load()), args=[Subscript(value=Subscript(value=Name(id='packages', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load()), slice=Constant(value='versions'), ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Subscript(value=Name(id='packages', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load()), slice=Constant(value='summary'), ctx=Store())], value=Name(id='summary', ctx=Load()))], orelse=[])])], orelse=[]), Return(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='packages', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Constant(value='TransformedHit'), ctx=Load())), FunctionDef(name='print_dist_installation_info', args=arguments(posonlyargs=[], args=[arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='latest', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='env', ctx=Store())], value=Call(func=Name(id='get_default_environment', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='dist', ctx=Store())], value=Call(func=Attribute(value=Name(id='env', ctx=Load()), attr='get_distribution', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='dist', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[With(items=[withitem(context_expr=Call(func=Name(id='indent_log', ctx=Load()), args=[], keywords=[]))], body=[If(test=Compare(left=Attribute(value=Name(id='dist', ctx=Load()), attr='version', ctx=Load()), ops=[Eq()], comparators=[Name(id='latest', ctx=Load())]), body=[Expr(value=Call(func=Name(id='write_output', ctx=Load()), args=[Constant(value='INSTALLED: %s (latest)'), Attribute(value=Name(id='dist', ctx=Load()), attr='version', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='write_output', ctx=Load()), args=[Constant(value='INSTALLED: %s'), Attribute(value=Name(id='dist', ctx=Load()), attr='version', ctx=Load())], keywords=[])), If(test=Attribute(value=Call(func=Name(id='parse_version', ctx=Load()), args=[Name(id='latest', ctx=Load())], keywords=[]), attr='pre', ctx=Load()), body=[Expr(value=Call(func=Name(id='write_output', ctx=Load()), args=[Constant(value='LATEST:    %s (pre-release; install with `pip install --pre`)'), Name(id='latest', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='write_output', ctx=Load()), args=[Constant(value='LATEST:    %s'), Name(id='latest', ctx=Load())], keywords=[]))])])])], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='print_results', args=arguments(posonlyargs=[], args=[arg(arg='hits', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Constant(value='TransformedHit'), ctx=Load())), arg(arg='name_column_width', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='terminal_width', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='hits', ctx=Load())), body=[Return()], orelse=[]), If(test=Compare(left=Name(id='name_column_width', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='name_column_width', ctx=Store())], value=BinOp(left=Call(func=Name(id='max', ctx=Load()), args=[ListComp(elt=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='hit', ctx=Load()), slice=Constant(value='name'), ctx=Load())], keywords=[]), op=Add(), right=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Name(id='highest_version', ctx=Load()), args=[Call(func=Attribute(value=Name(id='hit', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='versions'), List(elts=[Constant(value='-')], ctx=Load())], keywords=[])], keywords=[])], keywords=[])), generators=[comprehension(target=Name(id='hit', ctx=Store()), iter=Name(id='hits', ctx=Load()), ifs=[], is_async=0)])], keywords=[]), op=Add(), right=Constant(value=4)))], orelse=[]), For(target=Name(id='hit', ctx=Store()), iter=Name(id='hits', ctx=Load()), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Subscript(value=Name(id='hit', ctx=Load()), slice=Constant(value='name'), ctx=Load())), Assign(targets=[Name(id='summary', ctx=Store())], value=BoolOp(op=Or(), values=[Subscript(value=Name(id='hit', ctx=Load()), slice=Constant(value='summary'), ctx=Load()), Constant(value='')])), Assign(targets=[Name(id='latest', ctx=Store())], value=Call(func=Name(id='highest_version', ctx=Load()), args=[Call(func=Attribute(value=Name(id='hit', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='versions'), List(elts=[Constant(value='-')], ctx=Load())], keywords=[])], keywords=[])), If(test=Compare(left=Name(id='terminal_width', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='target_width', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='terminal_width', ctx=Load()), op=Sub(), right=Name(id='name_column_width', ctx=Load())), op=Sub(), right=Constant(value=5))), If(test=Compare(left=Name(id='target_width', ctx=Load()), ops=[Gt()], comparators=[Constant(value=10)]), body=[Assign(targets=[Name(id='summary_lines', ctx=Store())], value=Call(func=Attribute(value=Name(id='textwrap', ctx=Load()), attr='wrap', ctx=Load()), args=[Name(id='summary', ctx=Load()), Name(id='target_width', ctx=Load())], keywords=[])), Assign(targets=[Name(id='summary', ctx=Store())], value=Call(func=Attribute(value=BinOp(left=Constant(value='\n'), op=Add(), right=BinOp(left=Constant(value=' '), op=Mult(), right=BinOp(left=Name(id='name_column_width', ctx=Load()), op=Add(), right=Constant(value=3)))), attr='join', ctx=Load()), args=[Name(id='summary_lines', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='name_latest', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1), Constant(value=' ('), FormattedValue(value=Name(id='latest', ctx=Load()), conversion=-1), Constant(value=')')])), Assign(targets=[Name(id='line', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='name_latest', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[FormattedValue(value=Name(id='name_column_width', ctx=Load()), conversion=-1)])), Constant(value=' - '), FormattedValue(value=Name(id='summary', ctx=Load()), conversion=-1)])), Try(body=[Expr(value=Call(func=Name(id='write_output', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='print_dist_installation_info', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='latest', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='UnicodeEncodeError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='highest_version', args=arguments(posonlyargs=[], args=[arg(arg='versions', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='max', ctx=Load()), args=[Name(id='versions', ctx=Load())], keywords=[keyword(arg='key', value=Name(id='parse_version', ctx=Load()))]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], type_ignores=[])