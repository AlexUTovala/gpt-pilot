Module(body=[Expr(value=Constant(value='Build Environment used for isolation during sdist building\n')), Import(names=[alias(name='logging')]), Import(names=[alias(name='os')]), Import(names=[alias(name='pathlib')]), Import(names=[alias(name='site')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='textwrap')]), ImportFrom(module='collections', names=[alias(name='OrderedDict')], level=0), ImportFrom(module='types', names=[alias(name='TracebackType')], level=0), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING'), alias(name='Iterable'), alias(name='List'), alias(name='Optional'), alias(name='Set'), alias(name='Tuple'), alias(name='Type'), alias(name='Union')], level=0), ImportFrom(module='pip._vendor.certifi', names=[alias(name='where')], level=0), ImportFrom(module='pip._vendor.packaging.requirements', names=[alias(name='Requirement')], level=0), ImportFrom(module='pip._vendor.packaging.version', names=[alias(name='Version')], level=0), ImportFrom(module='pip', names=[alias(name='__file__', asname='pip_location')], level=0), ImportFrom(module='pip._internal.cli.spinners', names=[alias(name='open_spinner')], level=0), ImportFrom(module='pip._internal.locations', names=[alias(name='get_platlib'), alias(name='get_purelib'), alias(name='get_scheme')], level=0), ImportFrom(module='pip._internal.metadata', names=[alias(name='get_default_environment'), alias(name='get_environment')], level=0), ImportFrom(module='pip._internal.utils.subprocess', names=[alias(name='call_subprocess')], level=0), ImportFrom(module='pip._internal.utils.temp_dir', names=[alias(name='TempDirectory'), alias(name='tempdir_kinds')], level=0), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='pip._internal.index.package_finder', names=[alias(name='PackageFinder')], level=0)], orelse=[]), Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), FunctionDef(name='_dedup', args=arguments(posonlyargs=[], args=[arg(arg='a', annotation=Name(id='str', ctx=Load())), arg(arg='b', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=IfExp(test=Compare(left=Name(id='a', ctx=Load()), ops=[NotEq()], comparators=[Name(id='b', ctx=Load())]), body=Tuple(elts=[Name(id='a', ctx=Load()), Name(id='b', ctx=Load())], ctx=Load()), orelse=Tuple(elts=[Name(id='a', ctx=Load())], ctx=Load())))], decorator_list=[], returns=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Tuple', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), ClassDef(name='_Prefix', bases=[], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='path', ctx=Store())], value=Name(id='path', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='setup', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='scheme', ctx=Store())], value=Call(func=Name(id='get_scheme', ctx=Load()), args=[Constant(value='')], keywords=[keyword(arg='prefix', value=Name(id='path', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='bin_dir', ctx=Store())], value=Attribute(value=Name(id='scheme', ctx=Load()), attr='scripts', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='lib_dirs', ctx=Store())], value=Call(func=Name(id='_dedup', ctx=Load()), args=[Attribute(value=Name(id='scheme', ctx=Load()), attr='purelib', ctx=Load()), Attribute(value=Name(id='scheme', ctx=Load()), attr='platlib', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), FunctionDef(name='get_runnable_pip', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get a file to pass to a Python executable, to run the currently-running pip.\n\n    This is used to run a pip subprocess, for installing requirements into the build\n    environment.\n    ')), Assign(targets=[Name(id='source', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='pathlib', ctx=Load()), attr='Path', ctx=Load()), args=[Name(id='pip_location', ctx=Load())], keywords=[]), attr='resolve', ctx=Load()), args=[], keywords=[]), attr='parent', ctx=Load())), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='is_dir', ctx=Load()), args=[], keywords=[])), body=[Return(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='source', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='fsdecode', ctx=Load()), args=[BinOp(left=Name(id='source', ctx=Load()), op=Div(), right=Constant(value='__pip-runner__.py'))], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='_get_system_sitepackages', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get system site packages\n\n    Usually from site.getsitepackages,\n    but fallback on `get_purelib()/get_platlib()` if unavailable\n    (e.g. in a virtualenv created by virtualenv<20)\n\n    Returns normalized set of strings.\n    ')), If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='site', ctx=Load()), Constant(value='getsitepackages')], keywords=[]), body=[Assign(targets=[Name(id='system_sites', ctx=Store())], value=Call(func=Attribute(value=Name(id='site', ctx=Load()), attr='getsitepackages', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Name(id='system_sites', ctx=Store())], value=List(elts=[Call(func=Name(id='get_purelib', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='get_platlib', ctx=Load()), args=[], keywords=[])], ctx=Load()))]), Return(value=SetComp(elt=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normcase', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='path', ctx=Store()), iter=Name(id='system_sites', ctx=Load()), ifs=[], is_async=0)]))], decorator_list=[], returns=Subscript(value=Name(id='Set', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), ClassDef(name='BuildEnvironment', bases=[], keywords=[], body=[Expr(value=Constant(value='Creates and manages an isolated environment to install build deps')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='temp_dir', ctx=Store())], value=Call(func=Name(id='TempDirectory', ctx=Load()), args=[], keywords=[keyword(arg='kind', value=Attribute(value=Name(id='tempdir_kinds', ctx=Load()), attr='BUILD_ENV', ctx=Load())), keyword(arg='globally_managed', value=Constant(value=True))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_prefixes', ctx=Store())], value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[GeneratorExp(elt=Tuple(elts=[Name(id='name', ctx=Load()), Call(func=Name(id='_Prefix', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='temp_dir', ctx=Load()), attr='path', ctx=Load()), Name(id='name', ctx=Load())], keywords=[])], keywords=[])], ctx=Load()), generators=[comprehension(target=Name(id='name', ctx=Store()), iter=Tuple(elts=[Constant(value='normal'), Constant(value='overlay')], ctx=Load()), ifs=[], is_async=0)])], keywords=[])), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_bin_dirs', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_lib_dirs', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=0), For(target=Name(id='prefix', ctx=Store()), iter=Call(func=Name(id='reversed', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_prefixes', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_bin_dirs', ctx=Load()), attr='append', ctx=Load()), args=[Attribute(value=Name(id='prefix', ctx=Load()), attr='bin_dir', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_lib_dirs', ctx=Load()), attr='extend', ctx=Load()), args=[Attribute(value=Name(id='prefix', ctx=Load()), attr='lib_dirs', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='system_sites', ctx=Store())], value=Call(func=Name(id='_get_system_sitepackages', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_site_dir', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='temp_dir', ctx=Load()), attr='path', ctx=Load()), Constant(value='site')], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_site_dir', ctx=Load())], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='mkdir', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_site_dir', ctx=Load())], keywords=[]))], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_site_dir', ctx=Load()), Constant(value='sitecustomize.py')], keywords=[]), Constant(value='w')], keywords=[keyword(arg='encoding', value=Constant(value='utf-8'))]), optional_vars=Name(id='fp', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='fp', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='textwrap', ctx=Load()), attr='dedent', ctx=Load()), args=[Constant(value='\n                import os, site, sys\n\n                # First, drop system-sites related paths.\n                original_sys_path = sys.path[:]\n                known_paths = set()\n                for path in {system_sites!r}:\n                    site.addsitedir(path, known_paths=known_paths)\n                system_paths = set(\n                    os.path.normcase(path)\n                    for path in sys.path[len(original_sys_path):]\n                )\n                original_sys_path = [\n                    path for path in original_sys_path\n                    if os.path.normcase(path) not in system_paths\n                ]\n                sys.path = original_sys_path\n\n                # Second, add lib directories.\n                # ensuring .pth file are processed.\n                for path in {lib_dirs!r}:\n                    assert not path in sys.path\n                    site.addsitedir(path)\n                ')], keywords=[]), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='system_sites', value=Name(id='system_sites', ctx=Load())), keyword(arg='lib_dirs', value=Attribute(value=Name(id='self', ctx=Load()), attr='_lib_dirs', ctx=Load()))])], keywords=[]))])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__enter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_save_env', ctx=Store())], value=DictComp(key=Name(id='name', ctx=Load()), value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='name', ctx=Load()), Constant(value=None)], keywords=[]), generators=[comprehension(target=Name(id='name', ctx=Store()), iter=Tuple(elts=[Constant(value='PATH'), Constant(value='PYTHONNOUSERSITE'), Constant(value='PYTHONPATH')], ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='path', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_bin_dirs', ctx=Load()), slice=Slice(), ctx=Load())), Assign(targets=[Name(id='old_path', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_save_env', ctx=Load()), slice=Constant(value='PATH'), ctx=Load())), If(test=Name(id='old_path', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Attribute(value=Name(id='old_path', ctx=Load()), attr='split', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='pathsep', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='pythonpath', ctx=Store())], value=List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_site_dir', ctx=Load())], ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='update', ctx=Load()), args=[Dict(keys=[Constant(value='PATH'), Constant(value='PYTHONNOUSERSITE'), Constant(value='PYTHONPATH')], values=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='pathsep', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), Constant(value='1'), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='pathsep', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='pythonpath', ctx=Load())], keywords=[])])], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__exit__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='exc_type', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Type', ctx=Load()), slice=Name(id='BaseException', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='exc_val', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='BaseException', ctx=Load()), ctx=Load())), arg(arg='exc_tb', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TracebackType', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Tuple(elts=[Name(id='varname', ctx=Store()), Name(id='old_value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_save_env', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Name(id='old_value', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='varname', ctx=Load()), Constant(value=None)], keywords=[]))], orelse=[Assign(targets=[Subscript(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), slice=Name(id='varname', ctx=Load()), ctx=Store())], value=Name(id='old_value', ctx=Load()))])], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='check_requirements', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='reqs', annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return 2 sets:\n        - conflicting requirements: set of (installed, wanted) reqs tuples\n        - missing requirements: set of reqs\n        ')), Assign(targets=[Name(id='missing', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='conflicting', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), If(test=Name(id='reqs', ctx=Load()), body=[Assign(targets=[Name(id='env', ctx=Store())], value=IfExp(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Constant(value='_lib_dirs')], keywords=[]), body=Call(func=Name(id='get_environment', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_lib_dirs', ctx=Load())], keywords=[]), orelse=Call(func=Name(id='get_default_environment', ctx=Load()), args=[], keywords=[]))), For(target=Name(id='req_str', ctx=Store()), iter=Name(id='reqs', ctx=Load()), body=[Assign(targets=[Name(id='req', ctx=Store())], value=Call(func=Name(id='Requirement', ctx=Load()), args=[Name(id='req_str', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='req', ctx=Load()), attr='marker', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='req', ctx=Load()), attr='marker', ctx=Load()), attr='evaluate', ctx=Load()), args=[Dict(keys=[Constant(value='extra')], values=[Constant(value='')])], keywords=[]))]), body=[Continue()], orelse=[]), Assign(targets=[Name(id='dist', ctx=Store())], value=Call(func=Attribute(value=Name(id='env', ctx=Load()), attr='get_distribution', ctx=Load()), args=[Attribute(value=Name(id='req', ctx=Load()), attr='name', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='dist', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='missing', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='req_str', ctx=Load())], keywords=[])), Continue()], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='dist', ctx=Load()), attr='version', ctx=Load()), Name(id='Version', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='installed_req_str', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='req', ctx=Load()), attr='name', ctx=Load()), conversion=-1), Constant(value='=='), FormattedValue(value=Attribute(value=Name(id='dist', ctx=Load()), attr='version', ctx=Load()), conversion=-1)]))], orelse=[Assign(targets=[Name(id='installed_req_str', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='req', ctx=Load()), attr='name', ctx=Load()), conversion=-1), Constant(value='==='), FormattedValue(value=Attribute(value=Name(id='dist', ctx=Load()), attr='version', ctx=Load()), conversion=-1)]))]), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='req', ctx=Load()), attr='specifier', ctx=Load()), attr='contains', ctx=Load()), args=[Attribute(value=Name(id='dist', ctx=Load()), attr='version', ctx=Load())], keywords=[keyword(arg='prereleases', value=Constant(value=True))])), body=[Expr(value=Call(func=Attribute(value=Name(id='conflicting', ctx=Load()), attr='add', ctx=Load()), args=[Tuple(elts=[Name(id='installed_req_str', ctx=Load()), Name(id='req_str', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[]), Return(value=Tuple(elts=[Name(id='conflicting', ctx=Load()), Name(id='missing', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Set', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), Subscript(value=Name(id='Set', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='install_requirements', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='finder', annotation=Constant(value='PackageFinder')), arg(arg='requirements', annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='prefix_as_string', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[arg(arg='kind', annotation=Name(id='str', ctx=Load()))], kw_defaults=[None], defaults=[]), body=[Assign(targets=[Name(id='prefix', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_prefixes', ctx=Load()), slice=Name(id='prefix_as_string', ctx=Load()), ctx=Load())), Assert(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='prefix', ctx=Load()), attr='setup', ctx=Load()))), Assign(targets=[Attribute(value=Name(id='prefix', ctx=Load()), attr='setup', ctx=Store())], value=Constant(value=True)), If(test=UnaryOp(op=Not(), operand=Name(id='requirements', ctx=Load())), body=[Return()], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_install_requirements', ctx=Load()), args=[Call(func=Name(id='get_runnable_pip', ctx=Load()), args=[], keywords=[]), Name(id='finder', ctx=Load()), Name(id='requirements', ctx=Load()), Name(id='prefix', ctx=Load())], keywords=[keyword(arg='kind', value=Name(id='kind', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_install_requirements', args=arguments(posonlyargs=[], args=[arg(arg='pip_runnable', annotation=Name(id='str', ctx=Load())), arg(arg='finder', annotation=Constant(value='PackageFinder')), arg(arg='requirements', annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='prefix', annotation=Name(id='_Prefix', ctx=Load()))], kwonlyargs=[arg(arg='kind', annotation=Name(id='str', ctx=Load()))], kw_defaults=[None], defaults=[]), body=[AnnAssign(target=Name(id='args', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=List(elts=[Attribute(value=Name(id='sys', ctx=Load()), attr='executable', ctx=Load()), Name(id='pip_runnable', ctx=Load()), Constant(value='install'), Constant(value='--ignore-installed'), Constant(value='--no-user'), Constant(value='--prefix'), Attribute(value=Name(id='prefix', ctx=Load()), attr='path', ctx=Load()), Constant(value='--no-warn-script-location')], ctx=Load()), simple=1), If(test=Compare(left=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='getEffectiveLevel', ctx=Load()), args=[], keywords=[]), ops=[LtE()], comparators=[Attribute(value=Name(id='logging', ctx=Load()), attr='DEBUG', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='args', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='-v')], keywords=[]))], orelse=[]), For(target=Name(id='format_control', ctx=Store()), iter=Tuple(elts=[Constant(value='no_binary'), Constant(value='only_binary')], ctx=Load()), body=[Assign(targets=[Name(id='formats', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Attribute(value=Name(id='finder', ctx=Load()), attr='format_control', ctx=Load()), Name(id='format_control', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='args', ctx=Load()), attr='extend', ctx=Load()), args=[Tuple(elts=[BinOp(left=Constant(value='--'), op=Add(), right=Call(func=Attribute(value=Name(id='format_control', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='_'), Constant(value='-')], keywords=[])), Call(func=Attribute(value=Constant(value=','), attr='join', ctx=Load()), args=[Call(func=Name(id='sorted', ctx=Load()), args=[BoolOp(op=Or(), values=[Name(id='formats', ctx=Load()), Set(elts=[Constant(value=':none:')])])], keywords=[])], keywords=[])], ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='index_urls', ctx=Store())], value=Attribute(value=Name(id='finder', ctx=Load()), attr='index_urls', ctx=Load())), If(test=Name(id='index_urls', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='args', ctx=Load()), attr='extend', ctx=Load()), args=[List(elts=[Constant(value='-i'), Subscript(value=Name(id='index_urls', ctx=Load()), slice=Constant(value=0), ctx=Load())], ctx=Load())], keywords=[])), For(target=Name(id='extra_index', ctx=Store()), iter=Subscript(value=Name(id='index_urls', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='args', ctx=Load()), attr='extend', ctx=Load()), args=[List(elts=[Constant(value='--extra-index-url'), Name(id='extra_index', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[])], orelse=[Expr(value=Call(func=Attribute(value=Name(id='args', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='--no-index')], keywords=[]))]), For(target=Name(id='link', ctx=Store()), iter=Attribute(value=Name(id='finder', ctx=Load()), attr='find_links', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='args', ctx=Load()), attr='extend', ctx=Load()), args=[List(elts=[Constant(value='--find-links'), Name(id='link', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='host', ctx=Store()), iter=Attribute(value=Name(id='finder', ctx=Load()), attr='trusted_hosts', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='args', ctx=Load()), attr='extend', ctx=Load()), args=[List(elts=[Constant(value='--trusted-host'), Name(id='host', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='finder', ctx=Load()), attr='allow_all_prereleases', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='args', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='--pre')], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='finder', ctx=Load()), attr='prefer_binary', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='args', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='--prefer-binary')], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='args', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='--')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='args', ctx=Load()), attr='extend', ctx=Load()), args=[Name(id='requirements', ctx=Load())], keywords=[])), Assign(targets=[Name(id='extra_environ', ctx=Store())], value=Dict(keys=[Constant(value='_PIP_STANDALONE_CERT')], values=[Call(func=Name(id='where', ctx=Load()), args=[], keywords=[])])), With(items=[withitem(context_expr=Call(func=Name(id='open_spinner', ctx=Load()), args=[JoinedStr(values=[Constant(value='Installing '), FormattedValue(value=Name(id='kind', ctx=Load()), conversion=-1)])], keywords=[]), optional_vars=Name(id='spinner', ctx=Store()))], body=[Expr(value=Call(func=Name(id='call_subprocess', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[keyword(arg='command_desc', value=JoinedStr(values=[Constant(value='pip subprocess to install '), FormattedValue(value=Name(id='kind', ctx=Load()), conversion=-1)])), keyword(arg='spinner', value=Name(id='spinner', ctx=Load())), keyword(arg='extra_environ', value=Name(id='extra_environ', ctx=Load()))]))])], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='NoOpBuildEnvironment', bases=[Name(id='BuildEnvironment', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A no-op drop-in replacement for BuildEnvironment')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__enter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__exit__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='exc_type', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Type', ctx=Load()), slice=Name(id='BaseException', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='exc_val', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='BaseException', ctx=Load()), ctx=Load())), arg(arg='exc_tb', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TracebackType', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='cleanup', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='install_requirements', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='finder', annotation=Constant(value='PackageFinder')), arg(arg='requirements', annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='prefix_as_string', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[arg(arg='kind', annotation=Name(id='str', ctx=Load()))], kw_defaults=[None], defaults=[]), body=[Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None))], decorator_list=[])], type_ignores=[])