Module(body=[ImportFrom(module='pip._vendor.packaging.specifiers', names=[alias(name='SpecifierSet')], level=0), ImportFrom(module='pip._vendor.packaging.utils', names=[alias(name='NormalizedName'), alias(name='canonicalize_name')], level=0), ImportFrom(module='pip._internal.req.constructors', names=[alias(name='install_req_drop_extras')], level=0), ImportFrom(module='pip._internal.req.req_install', names=[alias(name='InstallRequirement')], level=0), ImportFrom(module='base', names=[alias(name='Candidate'), alias(name='CandidateLookup'), alias(name='Requirement'), alias(name='format_name')], level=1), ClassDef(name='ExplicitRequirement', bases=[Name(id='Requirement', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='candidate', annotation=Name(id='Candidate', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='candidate', ctx=Store())], value=Name(id='candidate', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__str__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='candidate', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value='{class_name}({candidate!r})'), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='class_name', value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load())), keyword(arg='candidate', value=Attribute(value=Name(id='self', ctx=Load()), attr='candidate', ctx=Load()))]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='project_name', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='candidate', ctx=Load()), attr='project_name', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='NormalizedName', ctx=Load())), FunctionDef(name='name', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='candidate', ctx=Load()), attr='name', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='format_for_error', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='candidate', ctx=Load()), attr='format_for_error', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='get_candidate_lookup', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='candidate', ctx=Load()), Constant(value=None)], ctx=Load()))], decorator_list=[], returns=Name(id='CandidateLookup', ctx=Load())), FunctionDef(name='is_satisfied_by', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='candidate', annotation=Name(id='Candidate', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Compare(left=Name(id='candidate', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='candidate', ctx=Load())]))], decorator_list=[], returns=Name(id='bool', ctx=Load()))], decorator_list=[]), ClassDef(name='SpecifierRequirement', bases=[Name(id='Requirement', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ireq', annotation=Name(id='InstallRequirement', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Compare(left=Attribute(value=Name(id='ireq', ctx=Load()), attr='link', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), msg=Constant(value='This is a link, not a specifier')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_ireq', ctx=Store())], value=Name(id='ireq', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_extras', ctx=Store())], value=Call(func=Name(id='frozenset', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='canonicalize_name', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='e', ctx=Store()), iter=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ireq', ctx=Load()), attr='extras', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__str__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ireq', ctx=Load()), attr='req', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value='{class_name}({requirement!r})'), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='class_name', value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load())), keyword(arg='requirement', value=Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ireq', ctx=Load()), attr='req', ctx=Load())], keywords=[]))]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='project_name', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ireq', ctx=Load()), attr='req', ctx=Load()), msg=Constant(value='Specifier-backed ireq is always PEP 508')), Return(value=Call(func=Name(id='canonicalize_name', ctx=Load()), args=[Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ireq', ctx=Load()), attr='req', ctx=Load()), attr='name', ctx=Load())], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='NormalizedName', ctx=Load())), FunctionDef(name='name', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='format_name', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='project_name', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_extras', ctx=Load())], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='format_for_error', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='parts', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]), generators=[comprehension(target=Name(id='s', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='split', ctx=Load()), args=[Constant(value=',')], keywords=[]), ifs=[], is_async=0)])), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='parts', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=''))], orelse=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='parts', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='parts', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[])]), Return(value=BinOp(left=BinOp(left=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Subscript(value=Name(id='parts', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]), op=Add(), right=Constant(value=' and ')), op=Add(), right=Subscript(value=Name(id='parts', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='get_candidate_lookup', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Tuple(elts=[Constant(value=None), Attribute(value=Name(id='self', ctx=Load()), attr='_ireq', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Name(id='CandidateLookup', ctx=Load())), FunctionDef(name='is_satisfied_by', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='candidate', annotation=Name(id='Candidate', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Compare(left=Attribute(value=Name(id='candidate', ctx=Load()), attr='name', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())]), msg=JoinedStr(values=[Constant(value='Internal issue: Candidate is not for this requirement '), FormattedValue(value=Attribute(value=Name(id='candidate', ctx=Load()), attr='name', ctx=Load()), conversion=-1), Constant(value=' vs '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), conversion=-1)])), Assert(test=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ireq', ctx=Load()), attr='req', ctx=Load()), msg=Constant(value='Specifier-backed ireq is always PEP 508')), Assign(targets=[Name(id='spec', ctx=Store())], value=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ireq', ctx=Load()), attr='req', ctx=Load()), attr='specifier', ctx=Load())), Return(value=Call(func=Attribute(value=Name(id='spec', ctx=Load()), attr='contains', ctx=Load()), args=[Attribute(value=Name(id='candidate', ctx=Load()), attr='version', ctx=Load())], keywords=[keyword(arg='prereleases', value=Constant(value=True))]))], decorator_list=[], returns=Name(id='bool', ctx=Load()))], decorator_list=[]), ClassDef(name='SpecifierWithoutExtrasRequirement', bases=[Name(id='SpecifierRequirement', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Requirement backed by an install requirement on a base package.\n    Trims extras from its install requirement if there are any.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ireq', annotation=Name(id='InstallRequirement', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Compare(left=Attribute(value=Name(id='ireq', ctx=Load()), attr='link', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), msg=Constant(value='This is a link, not a specifier')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_ireq', ctx=Store())], value=Call(func=Name(id='install_req_drop_extras', ctx=Load()), args=[Name(id='ireq', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_extras', ctx=Store())], value=Call(func=Name(id='frozenset', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='canonicalize_name', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='e', ctx=Store()), iter=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ireq', ctx=Load()), attr='extras', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='RequiresPythonRequirement', bases=[Name(id='Requirement', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A requirement representing Requires-Python metadata.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='specifier', annotation=Name(id='SpecifierSet', ctx=Load())), arg(arg='match', annotation=Name(id='Candidate', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='specifier', ctx=Store())], value=Name(id='specifier', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_candidate', ctx=Store())], value=Name(id='match', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__str__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[Constant(value='Python '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='specifier', ctx=Load()), conversion=-1)]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value='{class_name}({specifier!r})'), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='class_name', value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load())), keyword(arg='specifier', value=Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='specifier', ctx=Load())], keywords=[]))]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='project_name', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_candidate', ctx=Load()), attr='project_name', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='NormalizedName', ctx=Load())), FunctionDef(name='name', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_candidate', ctx=Load()), attr='name', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='format_for_error', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='get_candidate_lookup', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='specifier', ctx=Load()), attr='contains', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_candidate', ctx=Load()), attr='version', ctx=Load())], keywords=[keyword(arg='prereleases', value=Constant(value=True))]), body=[Return(value=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_candidate', ctx=Load()), Constant(value=None)], ctx=Load()))], orelse=[]), Return(value=Tuple(elts=[Constant(value=None), Constant(value=None)], ctx=Load()))], decorator_list=[], returns=Name(id='CandidateLookup', ctx=Load())), FunctionDef(name='is_satisfied_by', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='candidate', annotation=Name(id='Candidate', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Compare(left=Attribute(value=Name(id='candidate', ctx=Load()), attr='name', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_candidate', ctx=Load()), attr='name', ctx=Load())]), msg=Constant(value='Not Python candidate')), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='specifier', ctx=Load()), attr='contains', ctx=Load()), args=[Attribute(value=Name(id='candidate', ctx=Load()), attr='version', ctx=Load())], keywords=[keyword(arg='prereleases', value=Constant(value=True))]))], decorator_list=[], returns=Name(id='bool', ctx=Load()))], decorator_list=[]), ClassDef(name='UnsatisfiableRequirement', bases=[Name(id='Requirement', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A requirement that cannot be satisfied.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='NormalizedName', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_name', ctx=Store())], value=Name(id='name', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__str__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='_name', ctx=Load()), conversion=-1), Constant(value=' (unavailable)')]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value='{class_name}({name!r})'), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='class_name', value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load())), keyword(arg='name', value=Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_name', ctx=Load())], keywords=[]))]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='project_name', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_name', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='NormalizedName', ctx=Load())), FunctionDef(name='name', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_name', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='format_for_error', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='get_candidate_lookup', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Tuple(elts=[Constant(value=None), Constant(value=None)], ctx=Load()))], decorator_list=[], returns=Name(id='CandidateLookup', ctx=Load())), FunctionDef(name='is_satisfied_by', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='candidate', annotation=Name(id='Candidate', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=False))], decorator_list=[], returns=Name(id='bool', ctx=Load()))], decorator_list=[])], type_ignores=[])