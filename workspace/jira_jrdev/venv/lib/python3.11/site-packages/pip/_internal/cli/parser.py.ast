Module(body=[Expr(value=Constant(value='Base option parser setup')), Import(names=[alias(name='logging')]), Import(names=[alias(name='optparse')]), Import(names=[alias(name='shutil')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='textwrap')]), ImportFrom(module='contextlib', names=[alias(name='suppress')], level=0), ImportFrom(module='typing', names=[alias(name='Any'), alias(name='Dict'), alias(name='Generator'), alias(name='List'), alias(name='Tuple')], level=0), ImportFrom(module='pip._internal.cli.status_codes', names=[alias(name='UNKNOWN_ERROR')], level=0), ImportFrom(module='pip._internal.configuration', names=[alias(name='Configuration'), alias(name='ConfigurationError')], level=0), ImportFrom(module='pip._internal.utils.misc', names=[alias(name='redact_auth_from_url'), alias(name='strtobool')], level=0), Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), ClassDef(name='PrettyHelpFormatter', bases=[Attribute(value=Name(id='optparse', ctx=Load()), attr='IndentedHelpFormatter', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A prettier/less verbose help formatter for optparse.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args', annotation=Name(id='Any', ctx=Load())), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs', annotation=Name(id='Any', ctx=Load())), defaults=[]), body=[Assign(targets=[Subscript(value=Name(id='kwargs', ctx=Load()), slice=Constant(value='max_help_position'), ctx=Store())], value=Constant(value=30)), Assign(targets=[Subscript(value=Name(id='kwargs', ctx=Load()), slice=Constant(value='indent_increment'), ctx=Store())], value=Constant(value=1)), Assign(targets=[Subscript(value=Name(id='kwargs', ctx=Load()), slice=Constant(value='width'), ctx=Store())], value=BinOp(left=Subscript(value=Call(func=Attribute(value=Name(id='shutil', ctx=Load()), attr='get_terminal_size', ctx=Load()), args=[], keywords=[]), slice=Constant(value=0), ctx=Load()), op=Sub(), right=Constant(value=2))), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='format_option_strings', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='option', annotation=Attribute(value=Name(id='optparse', ctx=Load()), attr='Option', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_format_option_strings', ctx=Load()), args=[Name(id='option', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='_format_option_strings', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='option', annotation=Attribute(value=Name(id='optparse', ctx=Load()), attr='Option', ctx=Load())), arg(arg='mvarfmt', annotation=Name(id='str', ctx=Load())), arg(arg='optsep', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=' <{}>'), Constant(value=', ')]), body=[Expr(value=Constant(value="\n        Return a comma-separated list of option strings and metavars.\n\n        :param option:  tuple of (short opt, long opt), e.g: ('-f', '--format')\n        :param mvarfmt: metavar format string\n        :param optsep:  separator\n        ")), Assign(targets=[Name(id='opts', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=Attribute(value=Name(id='option', ctx=Load()), attr='_short_opts', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='opts', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='option', ctx=Load()), attr='_short_opts', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='option', ctx=Load()), attr='_long_opts', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='opts', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='option', ctx=Load()), attr='_long_opts', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='opts', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Attribute(value=Name(id='opts', ctx=Load()), attr='insert', ctx=Load()), args=[Constant(value=1), Name(id='optsep', ctx=Load())], keywords=[]))], orelse=[]), If(test=Call(func=Attribute(value=Name(id='option', ctx=Load()), attr='takes_value', ctx=Load()), args=[], keywords=[]), body=[Assert(test=Compare(left=Attribute(value=Name(id='option', ctx=Load()), attr='dest', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Name(id='metavar', ctx=Store())], value=BoolOp(op=Or(), values=[Attribute(value=Name(id='option', ctx=Load()), attr='metavar', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='option', ctx=Load()), attr='dest', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])])), Expr(value=Call(func=Attribute(value=Name(id='opts', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='mvarfmt', ctx=Load()), attr='format', ctx=Load()), args=[Call(func=Attribute(value=Name(id='metavar', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Name(id='opts', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='format_heading', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='heading', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='heading', ctx=Load()), ops=[Eq()], comparators=[Constant(value='Options')]), body=[Return(value=Constant(value=''))], orelse=[]), Return(value=BinOp(left=Name(id='heading', ctx=Load()), op=Add(), right=Constant(value=':\n')))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='format_usage', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='usage', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Ensure there is only one newline between usage and the first heading\n        if there is no description.\n        ')), Assign(targets=[Name(id='msg', ctx=Store())], value=Call(func=Attribute(value=Constant(value='\nUsage: {}\n'), attr='format', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='indent_lines', ctx=Load()), args=[Call(func=Attribute(value=Name(id='textwrap', ctx=Load()), attr='dedent', ctx=Load()), args=[Name(id='usage', ctx=Load())], keywords=[]), Constant(value='  ')], keywords=[])], keywords=[])), Return(value=Name(id='msg', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='format_description', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='description', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Name(id='description', ctx=Load()), body=[If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='parser', ctx=Load()), Constant(value='main')], keywords=[]), body=[Assign(targets=[Name(id='label', ctx=Store())], value=Constant(value='Commands'))], orelse=[Assign(targets=[Name(id='label', ctx=Store())], value=Constant(value='Description'))]), Assign(targets=[Name(id='description', ctx=Store())], value=Call(func=Attribute(value=Name(id='description', ctx=Load()), attr='lstrip', ctx=Load()), args=[Constant(value='\n')], keywords=[])), Assign(targets=[Name(id='description', ctx=Store())], value=Call(func=Attribute(value=Name(id='description', ctx=Load()), attr='rstrip', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='description', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='indent_lines', ctx=Load()), args=[Call(func=Attribute(value=Name(id='textwrap', ctx=Load()), attr='dedent', ctx=Load()), args=[Name(id='description', ctx=Load())], keywords=[]), Constant(value='  ')], keywords=[])), Assign(targets=[Name(id='description', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='label', ctx=Load()), conversion=-1), Constant(value=':\n'), FormattedValue(value=Name(id='description', ctx=Load()), conversion=-1), Constant(value='\n')])), Return(value=Name(id='description', ctx=Load()))], orelse=[Return(value=Constant(value=''))])], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='format_epilog', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='epilog', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Name(id='epilog', ctx=Load()), body=[Return(value=Name(id='epilog', ctx=Load()))], orelse=[Return(value=Constant(value=''))])], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='indent_lines', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='text', annotation=Name(id='str', ctx=Load())), arg(arg='indent', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='new_lines', ctx=Store())], value=ListComp(elt=BinOp(left=Name(id='indent', ctx=Load()), op=Add(), right=Name(id='line', ctx=Load())), generators=[comprehension(target=Name(id='line', ctx=Store()), iter=Call(func=Attribute(value=Name(id='text', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='\n')], keywords=[]), ifs=[], is_async=0)])), Return(value=Call(func=Attribute(value=Constant(value='\n'), attr='join', ctx=Load()), args=[Name(id='new_lines', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[]), ClassDef(name='UpdatingDefaultsHelpFormatter', bases=[Name(id='PrettyHelpFormatter', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Custom help formatter for use in ConfigOptionParser.\n\n    This is updates the defaults before expanding them, allowing\n    them to show up correctly in the help listing.\n\n    Also redact auth from url type options\n    ')), FunctionDef(name='expand_default', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='option', annotation=Attribute(value=Name(id='optparse', ctx=Load()), attr='Option', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='default_values', ctx=Store())], value=Constant(value=None)), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='parser', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='parser', ctx=Load()), Name(id='ConfigOptionParser', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='parser', ctx=Load()), attr='_update_defaults', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='parser', ctx=Load()), attr='defaults', ctx=Load())], keywords=[])), Assert(test=Compare(left=Attribute(value=Name(id='option', ctx=Load()), attr='dest', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Name(id='default_values', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='parser', ctx=Load()), attr='defaults', ctx=Load()), attr='get', ctx=Load()), args=[Attribute(value=Name(id='option', ctx=Load()), attr='dest', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='help_text', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='expand_default', ctx=Load()), args=[Name(id='option', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Name(id='default_values', ctx=Load()), Compare(left=Attribute(value=Name(id='option', ctx=Load()), attr='metavar', ctx=Load()), ops=[Eq()], comparators=[Constant(value='URL')])]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='default_values', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='default_values', ctx=Store())], value=List(elts=[Name(id='default_values', ctx=Load())], ctx=Load()))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='default_values', ctx=Load()), Name(id='list', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='default_values', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[]), For(target=Name(id='val', ctx=Store()), iter=Name(id='default_values', ctx=Load()), body=[Assign(targets=[Name(id='help_text', ctx=Store())], value=Call(func=Attribute(value=Name(id='help_text', ctx=Load()), attr='replace', ctx=Load()), args=[Name(id='val', ctx=Load()), Call(func=Name(id='redact_auth_from_url', ctx=Load()), args=[Name(id='val', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='help_text', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[]), ClassDef(name='CustomOptionParser', bases=[Attribute(value=Name(id='optparse', ctx=Load()), attr='OptionParser', ctx=Load())], keywords=[], body=[FunctionDef(name='insert_option_group', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='idx', annotation=Name(id='int', ctx=Load()))], vararg=arg(arg='args', annotation=Name(id='Any', ctx=Load())), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs', annotation=Name(id='Any', ctx=Load())), defaults=[]), body=[Expr(value=Constant(value='Insert an OptionGroup at a given position.')), Assign(targets=[Name(id='group', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='add_option_group', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='option_groups', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='option_groups', ctx=Load()), attr='insert', ctx=Load()), args=[Name(id='idx', ctx=Load()), Name(id='group', ctx=Load())], keywords=[])), Return(value=Name(id='group', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='optparse', ctx=Load()), attr='OptionGroup', ctx=Load())), FunctionDef(name='option_list_all', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get a list of all options, including those in option groups.')), Assign(targets=[Name(id='res', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='option_list', ctx=Load()), slice=Slice(), ctx=Load())), For(target=Name(id='i', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='option_groups', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='res', ctx=Load()), attr='extend', ctx=Load()), args=[Attribute(value=Name(id='i', ctx=Load()), attr='option_list', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='res', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Attribute(value=Name(id='optparse', ctx=Load()), attr='Option', ctx=Load()), ctx=Load()))], decorator_list=[]), ClassDef(name='ConfigOptionParser', bases=[Name(id='CustomOptionParser', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Custom option parser which updates its defaults by checking the\n    configuration files and environmental variables')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args', annotation=Name(id='Any', ctx=Load())), kwonlyargs=[arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='isolated', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[None, Constant(value=False)], kwarg=arg(arg='kwargs', annotation=Name(id='Any', ctx=Load())), defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Store())], value=Name(id='name', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Store())], value=Call(func=Name(id='Configuration', ctx=Load()), args=[Name(id='isolated', ctx=Load())], keywords=[])), Assert(test=Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='check_default', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='option', annotation=Attribute(value=Name(id='optparse', ctx=Load()), attr='Option', ctx=Load())), arg(arg='key', annotation=Name(id='str', ctx=Load())), arg(arg='val', annotation=Name(id='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Return(value=Call(func=Attribute(value=Name(id='option', ctx=Load()), attr='check_value', ctx=Load()), args=[Name(id='key', ctx=Load()), Name(id='val', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='optparse', ctx=Load()), attr='OptionValueError', ctx=Load()), name='exc', body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[JoinedStr(values=[Constant(value='An error occurred during configuration: '), FormattedValue(value=Name(id='exc', ctx=Load()), conversion=-1)])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='sys', ctx=Load()), attr='exit', ctx=Load()), args=[Constant(value=3)], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[], returns=Name(id='Any', ctx=Load())), FunctionDef(name='_get_ordered_configuration_items', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='override_order', ctx=Store())], value=List(elts=[Constant(value='global'), Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), Constant(value=':env:')], ctx=Load())), AnnAssign(target=Name(id='section_items', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=DictComp(key=Name(id='name', ctx=Load()), value=List(elts=[], ctx=Load()), generators=[comprehension(target=Name(id='name', ctx=Store()), iter=Name(id='override_order', ctx=Load()), ifs=[], is_async=0)]), simple=1), For(target=Tuple(elts=[Name(id='section_key', ctx=Store()), Name(id='val', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='val', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value="Ignoring configuration key '%s' as it's value is empty."), Name(id='section_key', ctx=Load())], keywords=[])), Continue()], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='section', ctx=Store()), Name(id='key', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='section_key', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='.'), Constant(value=1)], keywords=[])), If(test=Compare(left=Name(id='section', ctx=Load()), ops=[In()], comparators=[Name(id='override_order', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='section_items', ctx=Load()), slice=Name(id='section', ctx=Load()), ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='key', ctx=Load()), Name(id='val', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), For(target=Name(id='section', ctx=Store()), iter=Name(id='override_order', ctx=Load()), body=[For(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='val', ctx=Store())], ctx=Store()), iter=Subscript(value=Name(id='section_items', ctx=Load()), slice=Name(id='section', ctx=Load()), ctx=Load()), body=[Expr(value=Yield(value=Tuple(elts=[Name(id='key', ctx=Load()), Name(id='val', ctx=Load())], ctx=Load())))], orelse=[])], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='_update_defaults', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='defaults', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Updates the given defaults with values from the config files and\n        the environ. Does a little special handling for certain types of\n        options (lists).')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='values', ctx=Store())], value=Call(func=Attribute(value=Name(id='optparse', ctx=Load()), attr='Values', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='defaults', ctx=Load())], keywords=[])), Assign(targets=[Name(id='late_eval', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='val', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_ordered_configuration_items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='option', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_option', ctx=Load()), args=[BinOp(left=Constant(value='--'), op=Add(), right=Name(id='key', ctx=Load()))], keywords=[])), If(test=Compare(left=Name(id='option', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Continue()], orelse=[]), Assert(test=Compare(left=Attribute(value=Name(id='option', ctx=Load()), attr='dest', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), If(test=Compare(left=Attribute(value=Name(id='option', ctx=Load()), attr='action', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='store_true'), Constant(value='store_false')], ctx=Load())]), body=[Try(body=[Assign(targets=[Name(id='val', ctx=Store())], value=Call(func=Name(id='strtobool', ctx=Load()), args=[Name(id='val', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='error', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='{} is not a valid value for {} option, please specify a boolean value like yes/no, true/false or 1/0 instead.'), attr='format', ctx=Load()), args=[Name(id='val', ctx=Load()), Name(id='key', ctx=Load())], keywords=[])], keywords=[]))])], orelse=[], finalbody=[])], orelse=[If(test=Compare(left=Attribute(value=Name(id='option', ctx=Load()), attr='action', ctx=Load()), ops=[Eq()], comparators=[Constant(value='count')]), body=[With(items=[withitem(context_expr=Call(func=Name(id='suppress', ctx=Load()), args=[Name(id='ValueError', ctx=Load())], keywords=[]))], body=[Assign(targets=[Name(id='val', ctx=Store())], value=Call(func=Name(id='strtobool', ctx=Load()), args=[Name(id='val', ctx=Load())], keywords=[]))]), With(items=[withitem(context_expr=Call(func=Name(id='suppress', ctx=Load()), args=[Name(id='ValueError', ctx=Load())], keywords=[]))], body=[Assign(targets=[Name(id='val', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Name(id='val', ctx=Load())], keywords=[]))]), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='val', ctx=Load()), Name(id='int', ctx=Load())], keywords=[])), Compare(left=Name(id='val', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0)])]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='error', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='{} is not a valid value for {} option, please instead specify either a non-negative integer or a boolean value like yes/no or false/true which is equivalent to 1/0.'), attr='format', ctx=Load()), args=[Name(id='val', ctx=Load()), Name(id='key', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], orelse=[If(test=Compare(left=Attribute(value=Name(id='option', ctx=Load()), attr='action', ctx=Load()), ops=[Eq()], comparators=[Constant(value='append')]), body=[Assign(targets=[Name(id='val', ctx=Store())], value=Call(func=Attribute(value=Name(id='val', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='val', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='check_default', ctx=Load()), args=[Name(id='option', ctx=Load()), Name(id='key', ctx=Load()), Name(id='v', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='v', ctx=Store()), iter=Name(id='val', ctx=Load()), ifs=[], is_async=0)]))], orelse=[If(test=Compare(left=Attribute(value=Name(id='option', ctx=Load()), attr='action', ctx=Load()), ops=[Eq()], comparators=[Constant(value='callback')]), body=[Assert(test=Compare(left=Attribute(value=Name(id='option', ctx=Load()), attr='callback', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Expr(value=Call(func=Attribute(value=Name(id='late_eval', ctx=Load()), attr='add', ctx=Load()), args=[Attribute(value=Name(id='option', ctx=Load()), attr='dest', ctx=Load())], keywords=[])), Assign(targets=[Name(id='opt_str', ctx=Store())], value=Call(func=Attribute(value=Name(id='option', ctx=Load()), attr='get_opt_string', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='val', ctx=Store())], value=Call(func=Attribute(value=Name(id='option', ctx=Load()), attr='convert_value', ctx=Load()), args=[Name(id='opt_str', ctx=Load()), Name(id='val', ctx=Load())], keywords=[])), Assign(targets=[Name(id='args', ctx=Store())], value=BoolOp(op=Or(), values=[Attribute(value=Name(id='option', ctx=Load()), attr='callback_args', ctx=Load()), Tuple(elts=[], ctx=Load())])), Assign(targets=[Name(id='kwargs', ctx=Store())], value=BoolOp(op=Or(), values=[Attribute(value=Name(id='option', ctx=Load()), attr='callback_kwargs', ctx=Load()), Dict(keys=[], values=[])])), Expr(value=Call(func=Attribute(value=Name(id='option', ctx=Load()), attr='callback', ctx=Load()), args=[Name(id='option', ctx=Load()), Name(id='opt_str', ctx=Load()), Name(id='val', ctx=Load()), Name(id='self', ctx=Load()), Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], orelse=[Assign(targets=[Name(id='val', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='check_default', ctx=Load()), args=[Name(id='option', ctx=Load()), Name(id='key', ctx=Load()), Name(id='val', ctx=Load())], keywords=[]))])])])]), Assign(targets=[Subscript(value=Name(id='defaults', ctx=Load()), slice=Attribute(value=Name(id='option', ctx=Load()), attr='dest', ctx=Load()), ctx=Store())], value=Name(id='val', ctx=Load()))], orelse=[]), For(target=Name(id='key', ctx=Store()), iter=Name(id='late_eval', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='defaults', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='values', ctx=Load()), Name(id='key', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='values', ctx=Store())], value=Constant(value=None)), Return(value=Name(id='defaults', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='get_default_values', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Overriding to make updating the defaults after instantiation of\n        the option parser possible, _update_defaults() does the dirty work.')), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='process_default_values', ctx=Load())), body=[Return(value=Call(func=Attribute(value=Name(id='optparse', ctx=Load()), attr='Values', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='defaults', ctx=Load())], keywords=[]))], orelse=[]), Try(body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='load', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ConfigurationError', ctx=Load()), name='err', body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='exit', ctx=Load()), args=[Name(id='UNKNOWN_ERROR', ctx=Load()), Call(func=Name(id='str', ctx=Load()), args=[Name(id='err', ctx=Load())], keywords=[])], keywords=[]))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='defaults', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_update_defaults', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='defaults', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])], keywords=[])), For(target=Name(id='option', ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_all_options', ctx=Load()), args=[], keywords=[]), body=[Assert(test=Compare(left=Attribute(value=Name(id='option', ctx=Load()), attr='dest', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Name(id='default', ctx=Store())], value=Call(func=Attribute(value=Name(id='defaults', ctx=Load()), attr='get', ctx=Load()), args=[Attribute(value=Name(id='option', ctx=Load()), attr='dest', ctx=Load())], keywords=[])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='default', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='opt_str', ctx=Store())], value=Call(func=Attribute(value=Name(id='option', ctx=Load()), attr='get_opt_string', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Name(id='defaults', ctx=Load()), slice=Attribute(value=Name(id='option', ctx=Load()), attr='dest', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Name(id='option', ctx=Load()), attr='check_value', ctx=Load()), args=[Name(id='opt_str', ctx=Load()), Name(id='default', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='optparse', ctx=Load()), attr='Values', ctx=Load()), args=[Name(id='defaults', ctx=Load())], keywords=[]))], decorator_list=[], returns=Attribute(value=Name(id='optparse', ctx=Load()), attr='Values', ctx=Load())), FunctionDef(name='error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='msg', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='print_usage', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='exit', ctx=Load()), args=[Name(id='UNKNOWN_ERROR', ctx=Load()), JoinedStr(values=[FormattedValue(value=Name(id='msg', ctx=Load()), conversion=-1), Constant(value='\n')])], keywords=[]))], decorator_list=[], returns=Constant(value=None))], decorator_list=[])], type_ignores=[])