Module(body=[Import(names=[alias(name='logging')]), ImportFrom(module='typing', names=[alias(name='Iterable'), alias(name='Optional'), alias(name='Set'), alias(name='Tuple')], level=0), ImportFrom(module='pip._internal.build_env', names=[alias(name='BuildEnvironment')], level=0), ImportFrom(module='pip._internal.distributions.base', names=[alias(name='AbstractDistribution')], level=0), ImportFrom(module='pip._internal.exceptions', names=[alias(name='InstallationError')], level=0), ImportFrom(module='pip._internal.index.package_finder', names=[alias(name='PackageFinder')], level=0), ImportFrom(module='pip._internal.metadata', names=[alias(name='BaseDistribution')], level=0), ImportFrom(module='pip._internal.utils.subprocess', names=[alias(name='runner_with_spinner_message')], level=0), Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), ClassDef(name='SourceDistribution', bases=[Name(id='AbstractDistribution', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Represents a source distribution.\n\n    The preparation step for these needs metadata for the packages to be\n    generated, either using PEP 517 or using the legacy `setup.py egg_info`.\n    ')), FunctionDef(name='build_tracker_id', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Identify this requirement uniquely by its link.')), Assert(test=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='req', ctx=Load()), attr='link', ctx=Load())), Return(value=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='req', ctx=Load()), attr='link', ctx=Load()), attr='url_without_fragment', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='get_metadata_distribution', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='req', ctx=Load()), attr='get_dist', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='BaseDistribution', ctx=Load())), FunctionDef(name='prepare_distribution_metadata', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='finder', annotation=Name(id='PackageFinder', ctx=Load())), arg(arg='build_isolation', annotation=Name(id='bool', ctx=Load())), arg(arg='check_build_deps', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='req', ctx=Load()), attr='load_pyproject_toml', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='should_isolate', ctx=Store())], value=BoolOp(op=And(), values=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='req', ctx=Load()), attr='use_pep517', ctx=Load()), Name(id='build_isolation', ctx=Load())])), If(test=Name(id='should_isolate', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_prepare_build_backend', ctx=Load()), args=[Name(id='finder', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='req', ctx=Load()), attr='isolated_editable_sanity_check', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_install_build_reqs', ctx=Load()), args=[Name(id='finder', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='should_check_deps', ctx=Store())], value=BoolOp(op=And(), values=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='req', ctx=Load()), attr='use_pep517', ctx=Load()), Name(id='check_build_deps', ctx=Load())])), If(test=Name(id='should_check_deps', ctx=Load()), body=[Assign(targets=[Name(id='pyproject_requires', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='req', ctx=Load()), attr='pyproject_requires', ctx=Load())), Assert(test=Compare(left=Name(id='pyproject_requires', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Tuple(elts=[Name(id='conflicting', ctx=Store()), Name(id='missing', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='req', ctx=Load()), attr='build_env', ctx=Load()), attr='check_requirements', ctx=Load()), args=[Name(id='pyproject_requires', ctx=Load())], keywords=[])), If(test=Name(id='conflicting', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_raise_conflicts', ctx=Load()), args=[Constant(value='the backend dependencies'), Name(id='conflicting', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='missing', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_raise_missing_reqs', ctx=Load()), args=[Name(id='missing', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='req', ctx=Load()), attr='prepare_metadata', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_prepare_build_backend', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='finder', annotation=Name(id='PackageFinder', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='pyproject_requires', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='req', ctx=Load()), attr='pyproject_requires', ctx=Load())), Assert(test=Compare(left=Name(id='pyproject_requires', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='req', ctx=Load()), attr='build_env', ctx=Store())], value=Call(func=Name(id='BuildEnvironment', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='req', ctx=Load()), attr='build_env', ctx=Load()), attr='install_requirements', ctx=Load()), args=[Name(id='finder', ctx=Load()), Name(id='pyproject_requires', ctx=Load()), Constant(value='overlay')], keywords=[keyword(arg='kind', value=Constant(value='build dependencies'))])), Assign(targets=[Tuple(elts=[Name(id='conflicting', ctx=Store()), Name(id='missing', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='req', ctx=Load()), attr='build_env', ctx=Load()), attr='check_requirements', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='req', ctx=Load()), attr='requirements_to_check', ctx=Load())], keywords=[])), If(test=Name(id='conflicting', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_raise_conflicts', ctx=Load()), args=[Constant(value='PEP 517/518 supported requirements'), Name(id='conflicting', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='missing', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='Missing build requirements in pyproject.toml for %s.'), Attribute(value=Name(id='self', ctx=Load()), attr='req', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='The project does not specify a build backend, and pip cannot fall back to setuptools without %s.'), Call(func=Attribute(value=Constant(value=' and '), attr='join', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Name(id='repr', ctx=Load()), Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='missing', ctx=Load())], keywords=[])], keywords=[])], keywords=[])], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_get_build_requires_wheel', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='req', ctx=Load()), attr='build_env', ctx=Load()))], body=[Assign(targets=[Name(id='runner', ctx=Store())], value=Call(func=Name(id='runner_with_spinner_message', ctx=Load()), args=[Constant(value='Getting requirements to build wheel')], keywords=[])), Assign(targets=[Name(id='backend', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='req', ctx=Load()), attr='pep517_backend', ctx=Load())), Assert(test=Compare(left=Name(id='backend', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='backend', ctx=Load()), attr='subprocess_runner', ctx=Load()), args=[Name(id='runner', ctx=Load())], keywords=[]))], body=[Return(value=Call(func=Attribute(value=Name(id='backend', ctx=Load()), attr='get_requires_for_build_wheel', ctx=Load()), args=[], keywords=[]))])])], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='_get_build_requires_editable', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='req', ctx=Load()), attr='build_env', ctx=Load()))], body=[Assign(targets=[Name(id='runner', ctx=Store())], value=Call(func=Name(id='runner_with_spinner_message', ctx=Load()), args=[Constant(value='Getting requirements to build editable')], keywords=[])), Assign(targets=[Name(id='backend', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='req', ctx=Load()), attr='pep517_backend', ctx=Load())), Assert(test=Compare(left=Name(id='backend', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='backend', ctx=Load()), attr='subprocess_runner', ctx=Load()), args=[Name(id='runner', ctx=Load())], keywords=[]))], body=[Return(value=Call(func=Attribute(value=Name(id='backend', ctx=Load()), attr='get_requires_for_build_editable', ctx=Load()), args=[], keywords=[]))])])], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='_install_build_reqs', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='finder', annotation=Name(id='PackageFinder', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='req', ctx=Load()), attr='editable', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='req', ctx=Load()), attr='permit_editable_wheels', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='req', ctx=Load()), attr='supports_pyproject_editable', ctx=Load()), args=[], keywords=[])]), body=[Assign(targets=[Name(id='build_reqs', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_build_requires_editable', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Name(id='build_reqs', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_build_requires_wheel', ctx=Load()), args=[], keywords=[]))]), Assign(targets=[Tuple(elts=[Name(id='conflicting', ctx=Store()), Name(id='missing', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='req', ctx=Load()), attr='build_env', ctx=Load()), attr='check_requirements', ctx=Load()), args=[Name(id='build_reqs', ctx=Load())], keywords=[])), If(test=Name(id='conflicting', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_raise_conflicts', ctx=Load()), args=[Constant(value='the backend dependencies'), Name(id='conflicting', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='req', ctx=Load()), attr='build_env', ctx=Load()), attr='install_requirements', ctx=Load()), args=[Name(id='finder', ctx=Load()), Name(id='missing', ctx=Load()), Constant(value='normal')], keywords=[keyword(arg='kind', value=Constant(value='backend dependencies'))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_raise_conflicts', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='conflicting_with', annotation=Name(id='str', ctx=Load())), arg(arg='conflicting_reqs', annotation=Subscript(value=Name(id='Set', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='format_string', ctx=Store())], value=Constant(value='Some build dependencies for {requirement} conflict with {conflicting_with}: {description}.')), Assign(targets=[Name(id='error_message', ctx=Store())], value=Call(func=Attribute(value=Name(id='format_string', ctx=Load()), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='requirement', value=Attribute(value=Name(id='self', ctx=Load()), attr='req', ctx=Load())), keyword(arg='conflicting_with', value=Name(id='conflicting_with', ctx=Load())), keyword(arg='description', value=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[GeneratorExp(elt=JoinedStr(values=[FormattedValue(value=Name(id='installed', ctx=Load()), conversion=-1), Constant(value=' is incompatible with '), FormattedValue(value=Name(id='wanted', ctx=Load()), conversion=-1)]), generators=[comprehension(target=Tuple(elts=[Name(id='installed', ctx=Store()), Name(id='wanted', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='conflicting_reqs', ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[]))])), Raise(exc=Call(func=Name(id='InstallationError', ctx=Load()), args=[Name(id='error_message', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_raise_missing_reqs', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='missing', annotation=Subscript(value=Name(id='Set', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='format_string', ctx=Store())], value=Constant(value='Some build dependencies for {requirement} are missing: {missing}.')), Assign(targets=[Name(id='error_message', ctx=Store())], value=Call(func=Attribute(value=Name(id='format_string', ctx=Load()), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='requirement', value=Attribute(value=Name(id='self', ctx=Load()), attr='req', ctx=Load())), keyword(arg='missing', value=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Name(id='repr', ctx=Load()), Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='missing', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))])), Raise(exc=Call(func=Name(id='InstallationError', ctx=Load()), args=[Name(id='error_message', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None))], decorator_list=[])], type_ignores=[])