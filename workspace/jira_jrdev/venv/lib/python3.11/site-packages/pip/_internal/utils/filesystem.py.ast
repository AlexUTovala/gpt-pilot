Module(body=[Import(names=[alias(name='fnmatch')]), Import(names=[alias(name='os')]), Import(names=[alias(name='os.path')]), Import(names=[alias(name='random')]), Import(names=[alias(name='sys')]), ImportFrom(module='contextlib', names=[alias(name='contextmanager')], level=0), ImportFrom(module='tempfile', names=[alias(name='NamedTemporaryFile')], level=0), ImportFrom(module='typing', names=[alias(name='Any'), alias(name='BinaryIO'), alias(name='Generator'), alias(name='List'), alias(name='Union'), alias(name='cast')], level=0), ImportFrom(module='pip._vendor.tenacity', names=[alias(name='retry'), alias(name='stop_after_delay'), alias(name='wait_fixed')], level=0), ImportFrom(module='pip._internal.utils.compat', names=[alias(name='get_path_uid')], level=0), ImportFrom(module='pip._internal.utils.misc', names=[alias(name='format_size')], level=0), FunctionDef(name='check_path_owner', args=arguments(posonlyargs=[], args=[arg(arg='path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), ops=[Eq()], comparators=[Constant(value='win32')]), UnaryOp(op=Not(), operand=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='os', ctx=Load()), Constant(value='geteuid')], keywords=[]))]), body=[Return(value=Constant(value=True))], orelse=[]), Assert(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isabs', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), Assign(targets=[Name(id='previous', ctx=Store())], value=Constant(value=None)), While(test=Compare(left=Name(id='path', ctx=Load()), ops=[NotEq()], comparators=[Name(id='previous', ctx=Load())]), body=[If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='lexists', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='geteuid', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Try(body=[Assign(targets=[Name(id='path_uid', ctx=Store())], value=Call(func=Name(id='get_path_uid', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), body=[Return(value=Constant(value=False))])], orelse=[], finalbody=[]), Return(value=Compare(left=Name(id='path_uid', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]))], orelse=[Return(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='access', ctx=Load()), args=[Name(id='path', ctx=Load()), Attribute(value=Name(id='os', ctx=Load()), attr='W_OK', ctx=Load())], keywords=[]))])], orelse=[Assign(targets=[Tuple(elts=[Name(id='previous', ctx=Store()), Name(id='path', ctx=Store())], ctx=Store())], value=Tuple(elts=[Name(id='path', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])], ctx=Load()))])], orelse=[]), Return(value=Constant(value=False))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='adjacent_tmp_file', args=arguments(posonlyargs=[], args=[arg(arg='path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs', annotation=Name(id='Any', ctx=Load())), defaults=[]), body=[Expr(value=Constant(value='Return a file-like object pointing to a tmp file next to path.\n\n    The file is created securely and is ensured to be written to disk\n    after the context reaches its end.\n\n    kwargs will be passed to tempfile.NamedTemporaryFile to control\n    the way the temporary file will be opened.\n    ')), With(items=[withitem(context_expr=Call(func=Name(id='NamedTemporaryFile', ctx=Load()), args=[], keywords=[keyword(arg='delete', value=Constant(value=False)), keyword(arg='dir', value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), keyword(arg='prefix', value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='basename', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), keyword(arg='suffix', value=Constant(value='.tmp')), keyword(value=Name(id='kwargs', ctx=Load()))]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='cast', ctx=Load()), args=[Name(id='BinaryIO', ctx=Load()), Name(id='f', ctx=Load())], keywords=[])), Try(body=[Expr(value=Yield(value=Name(id='result', ctx=Load())))], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='flush', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='fsync', ctx=Load()), args=[Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='fileno', ctx=Load()), args=[], keywords=[])], keywords=[]))])])], decorator_list=[Name(id='contextmanager', ctx=Load())], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Name(id='BinaryIO', ctx=Load()), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='_replace_retry', ctx=Store())], value=Call(func=Name(id='retry', ctx=Load()), args=[], keywords=[keyword(arg='reraise', value=Constant(value=True)), keyword(arg='stop', value=Call(func=Name(id='stop_after_delay', ctx=Load()), args=[Constant(value=1)], keywords=[])), keyword(arg='wait', value=Call(func=Name(id='wait_fixed', ctx=Load()), args=[Constant(value=0.25)], keywords=[]))])), Assign(targets=[Name(id='replace', ctx=Store())], value=Call(func=Name(id='_replace_retry', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='replace', ctx=Load())], keywords=[])), FunctionDef(name='test_writable_dir', args=arguments(posonlyargs=[], args=[arg(arg='path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check if a directory is writable.\n\n    Uses os.access() on POSIX, tries creating files on Windows.\n    ')), While(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isdir', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='parent', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='parent', ctx=Load()), ops=[Eq()], comparators=[Name(id='path', ctx=Load())]), body=[Break()], orelse=[]), Assign(targets=[Name(id='path', ctx=Store())], value=Name(id='parent', ctx=Load()))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='os', ctx=Load()), attr='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='posix')]), body=[Return(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='access', ctx=Load()), args=[Name(id='path', ctx=Load()), Attribute(value=Name(id='os', ctx=Load()), attr='W_OK', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='_test_writable_dir_win', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='_test_writable_dir_win', args=arguments(posonlyargs=[], args=[arg(arg='path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='basename', ctx=Store())], value=Constant(value='accesstest_deleteme_fishfingers_custard_')), Assign(targets=[Name(id='alphabet', ctx=Store())], value=Constant(value='abcdefghijklmnopqrstuvwxyz0123456789')), For(target=Name(id='_', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=10)], keywords=[]), body=[Assign(targets=[Name(id='name', ctx=Store())], value=BinOp(left=Name(id='basename', ctx=Load()), op=Add(), right=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='random', ctx=Load()), attr='choice', ctx=Load()), args=[Name(id='alphabet', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='_', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=6)], keywords=[]), ifs=[], is_async=0)])], keywords=[]))), Assign(targets=[Name(id='file', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='path', ctx=Load()), Name(id='name', ctx=Load())], keywords=[])), Try(body=[Assign(targets=[Name(id='fd', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='open', ctx=Load()), args=[Name(id='file', ctx=Load()), BinOp(left=BinOp(left=Attribute(value=Name(id='os', ctx=Load()), attr='O_RDWR', ctx=Load()), op=BitOr(), right=Attribute(value=Name(id='os', ctx=Load()), attr='O_CREAT', ctx=Load())), op=BitOr(), right=Attribute(value=Name(id='os', ctx=Load()), attr='O_EXCL', ctx=Load()))], keywords=[]))], handlers=[ExceptHandler(type=Name(id='FileExistsError', ctx=Load()), body=[Pass()]), ExceptHandler(type=Name(id='PermissionError', ctx=Load()), body=[Return(value=Constant(value=False))])], orelse=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='close', ctx=Load()), args=[Name(id='fd', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='unlink', ctx=Load()), args=[Name(id='file', ctx=Load())], keywords=[])), Return(value=Constant(value=True))], finalbody=[])], orelse=[]), Raise(exc=Call(func=Name(id='OSError', ctx=Load()), args=[Constant(value='Unexpected condition testing for writable directory')], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='find_files', args=arguments(posonlyargs=[], args=[arg(arg='path', annotation=Name(id='str', ctx=Load())), arg(arg='pattern', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Returns a list of absolute paths of files beneath path, recursively,\n    with filenames which match the UNIX-style shell glob pattern.')), AnnAssign(target=Name(id='result', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), For(target=Tuple(elts=[Name(id='root', ctx=Store()), Name(id='_', ctx=Store()), Name(id='files', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='walk', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='matches', ctx=Store())], value=Call(func=Attribute(value=Name(id='fnmatch', ctx=Load()), attr='filter', ctx=Load()), args=[Name(id='files', ctx=Load()), Name(id='pattern', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='extend', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='root', ctx=Load()), Name(id='f', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='f', ctx=Store()), iter=Name(id='matches', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='file_size', args=arguments(posonlyargs=[], args=[arg(arg='path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='islink', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), body=[Return(value=Constant(value=0))], orelse=[]), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='getsize', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='format_file_size', args=arguments(posonlyargs=[], args=[arg(arg='path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='format_size', ctx=Load()), args=[Call(func=Name(id='file_size', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='directory_size', args=arguments(posonlyargs=[], args=[arg(arg='path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='size', ctx=Store())], value=Constant(value=0.0)), For(target=Tuple(elts=[Name(id='root', ctx=Store()), Name(id='_dirs', ctx=Store()), Name(id='files', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='walk', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), body=[For(target=Name(id='filename', ctx=Store()), iter=Name(id='files', ctx=Load()), body=[Assign(targets=[Name(id='file_path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='root', ctx=Load()), Name(id='filename', ctx=Load())], keywords=[])), AugAssign(target=Name(id='size', ctx=Store()), op=Add(), value=Call(func=Name(id='file_size', ctx=Load()), args=[Name(id='file_path', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='size', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='format_directory_size', args=arguments(posonlyargs=[], args=[arg(arg='path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='format_size', ctx=Load()), args=[Call(func=Name(id='directory_size', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], type_ignores=[])