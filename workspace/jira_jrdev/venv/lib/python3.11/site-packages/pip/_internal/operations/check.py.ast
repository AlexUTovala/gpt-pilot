Module(body=[Expr(value=Constant(value='Validation of dependencies of packages\n')), Import(names=[alias(name='logging')]), ImportFrom(module='typing', names=[alias(name='Callable'), alias(name='Dict'), alias(name='List'), alias(name='NamedTuple'), alias(name='Optional'), alias(name='Set'), alias(name='Tuple')], level=0), ImportFrom(module='pip._vendor.packaging.requirements', names=[alias(name='Requirement')], level=0), ImportFrom(module='pip._vendor.packaging.specifiers', names=[alias(name='LegacySpecifier')], level=0), ImportFrom(module='pip._vendor.packaging.utils', names=[alias(name='NormalizedName'), alias(name='canonicalize_name')], level=0), ImportFrom(module='pip._vendor.packaging.version', names=[alias(name='LegacyVersion')], level=0), ImportFrom(module='pip._internal.distributions', names=[alias(name='make_distribution_for_install_requirement')], level=0), ImportFrom(module='pip._internal.metadata', names=[alias(name='get_default_environment')], level=0), ImportFrom(module='pip._internal.metadata.base', names=[alias(name='DistributionVersion')], level=0), ImportFrom(module='pip._internal.req.req_install', names=[alias(name='InstallRequirement')], level=0), ImportFrom(module='pip._internal.utils.deprecation', names=[alias(name='deprecated')], level=0), Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), ClassDef(name='PackageDetails', bases=[Name(id='NamedTuple', ctx=Load())], keywords=[], body=[AnnAssign(target=Name(id='version', ctx=Store()), annotation=Name(id='DistributionVersion', ctx=Load()), simple=1), AnnAssign(target=Name(id='dependencies', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Requirement', ctx=Load()), ctx=Load()), simple=1)], decorator_list=[]), Assign(targets=[Name(id='PackageSet', ctx=Store())], value=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='NormalizedName', ctx=Load()), Name(id='PackageDetails', ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='Missing', ctx=Store())], value=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='NormalizedName', ctx=Load()), Name(id='Requirement', ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='Conflicting', ctx=Store())], value=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='NormalizedName', ctx=Load()), Name(id='DistributionVersion', ctx=Load()), Name(id='Requirement', ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='MissingDict', ctx=Store())], value=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='NormalizedName', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Missing', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='ConflictingDict', ctx=Store())], value=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='NormalizedName', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Conflicting', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='CheckResult', ctx=Store())], value=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='MissingDict', ctx=Load()), Name(id='ConflictingDict', ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='ConflictDetails', ctx=Store())], value=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='PackageSet', ctx=Load()), Name(id='CheckResult', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='create_package_set_from_installed', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Converts a list of distributions into a PackageSet.')), Assign(targets=[Name(id='package_set', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='problems', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='env', ctx=Store())], value=Call(func=Name(id='get_default_environment', ctx=Load()), args=[], keywords=[])), For(target=Name(id='dist', ctx=Store()), iter=Call(func=Attribute(value=Name(id='env', ctx=Load()), attr='iter_installed_distributions', ctx=Load()), args=[], keywords=[keyword(arg='local_only', value=Constant(value=False)), keyword(arg='skip', value=Tuple(elts=[], ctx=Load()))]), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Attribute(value=Name(id='dist', ctx=Load()), attr='canonical_name', ctx=Load())), Try(body=[Assign(targets=[Name(id='dependencies', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='dist', ctx=Load()), attr='iter_dependencies', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Name(id='package_set', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Call(func=Name(id='PackageDetails', ctx=Load()), args=[Attribute(value=Name(id='dist', ctx=Load()), attr='version', ctx=Load()), Name(id='dependencies', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='OSError', ctx=Load()), Name(id='ValueError', ctx=Load())], ctx=Load()), name='e', body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='Error parsing requirements for %s: %s'), Name(id='name', ctx=Load()), Name(id='e', ctx=Load())], keywords=[])), Assign(targets=[Name(id='problems', ctx=Store())], value=Constant(value=True))])], orelse=[], finalbody=[])], orelse=[]), Return(value=Tuple(elts=[Name(id='package_set', ctx=Load()), Name(id='problems', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='PackageSet', ctx=Load()), Name(id='bool', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='check_package_set', args=arguments(posonlyargs=[], args=[arg(arg='package_set', annotation=Name(id='PackageSet', ctx=Load())), arg(arg='should_ignore', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='str', ctx=Load())], ctx=Load()), Name(id='bool', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Check if a package set is consistent\n\n    If should_ignore is passed, it should be a callable that takes a\n    package name and returns a boolean.\n    ')), Expr(value=Call(func=Name(id='warn_legacy_versions_and_specifiers', ctx=Load()), args=[Name(id='package_set', ctx=Load())], keywords=[])), Assign(targets=[Name(id='missing', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='conflicting', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='package_name', ctx=Store()), Name(id='package_detail', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='package_set', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[AnnAssign(target=Name(id='missing_deps', ctx=Store()), annotation=Subscript(value=Name(id='Set', ctx=Load()), slice=Name(id='Missing', ctx=Load()), ctx=Load()), value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[]), simple=1), AnnAssign(target=Name(id='conflicting_deps', ctx=Store()), annotation=Subscript(value=Name(id='Set', ctx=Load()), slice=Name(id='Conflicting', ctx=Load()), ctx=Load()), value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[]), simple=1), If(test=BoolOp(op=And(), values=[Name(id='should_ignore', ctx=Load()), Call(func=Name(id='should_ignore', ctx=Load()), args=[Name(id='package_name', ctx=Load())], keywords=[])]), body=[Continue()], orelse=[]), For(target=Name(id='req', ctx=Store()), iter=Attribute(value=Name(id='package_detail', ctx=Load()), attr='dependencies', ctx=Load()), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Name(id='canonicalize_name', ctx=Load()), args=[Attribute(value=Name(id='req', ctx=Load()), attr='name', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='name', ctx=Load()), ops=[NotIn()], comparators=[Name(id='package_set', ctx=Load())]), body=[Assign(targets=[Name(id='missed', ctx=Store())], value=Constant(value=True)), If(test=Compare(left=Attribute(value=Name(id='req', ctx=Load()), attr='marker', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='missed', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='req', ctx=Load()), attr='marker', ctx=Load()), attr='evaluate', ctx=Load()), args=[Dict(keys=[Constant(value='extra')], values=[Constant(value='')])], keywords=[]))], orelse=[]), If(test=Name(id='missed', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='missing_deps', ctx=Load()), attr='add', ctx=Load()), args=[Tuple(elts=[Name(id='name', ctx=Load()), Name(id='req', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), Continue()], orelse=[]), Assign(targets=[Name(id='version', ctx=Store())], value=Attribute(value=Subscript(value=Name(id='package_set', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load()), attr='version', ctx=Load())), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='req', ctx=Load()), attr='specifier', ctx=Load()), attr='contains', ctx=Load()), args=[Name(id='version', ctx=Load())], keywords=[keyword(arg='prereleases', value=Constant(value=True))])), body=[Expr(value=Call(func=Attribute(value=Name(id='conflicting_deps', ctx=Load()), attr='add', ctx=Load()), args=[Tuple(elts=[Name(id='name', ctx=Load()), Name(id='version', ctx=Load()), Name(id='req', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), If(test=Name(id='missing_deps', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='missing', ctx=Load()), slice=Name(id='package_name', ctx=Load()), ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='missing_deps', ctx=Load())], keywords=[keyword(arg='key', value=Name(id='str', ctx=Load()))]))], orelse=[]), If(test=Name(id='conflicting_deps', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='conflicting', ctx=Load()), slice=Name(id='package_name', ctx=Load()), ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='conflicting_deps', ctx=Load())], keywords=[keyword(arg='key', value=Name(id='str', ctx=Load()))]))], orelse=[])], orelse=[]), Return(value=Tuple(elts=[Name(id='missing', ctx=Load()), Name(id='conflicting', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Name(id='CheckResult', ctx=Load())), FunctionDef(name='check_install_conflicts', args=arguments(posonlyargs=[], args=[arg(arg='to_install', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='InstallRequirement', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='For checking if the dependency graph would be consistent after     installing given requirements\n    ')), Assign(targets=[Tuple(elts=[Name(id='package_set', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Name(id='create_package_set_from_installed', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='would_be_installed', ctx=Store())], value=Call(func=Name(id='_simulate_installation_of', ctx=Load()), args=[Name(id='to_install', ctx=Load()), Name(id='package_set', ctx=Load())], keywords=[])), Assign(targets=[Name(id='whitelist', ctx=Store())], value=Call(func=Name(id='_create_whitelist', ctx=Load()), args=[Name(id='would_be_installed', ctx=Load()), Name(id='package_set', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Name(id='package_set', ctx=Load()), Call(func=Name(id='check_package_set', ctx=Load()), args=[Name(id='package_set', ctx=Load())], keywords=[keyword(arg='should_ignore', value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Name(id='name', ctx=Load()), ops=[NotIn()], comparators=[Name(id='whitelist', ctx=Load())])))])], ctx=Load()))], decorator_list=[], returns=Name(id='ConflictDetails', ctx=Load())), FunctionDef(name='_simulate_installation_of', args=arguments(posonlyargs=[], args=[arg(arg='to_install', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='InstallRequirement', ctx=Load()), ctx=Load())), arg(arg='package_set', annotation=Name(id='PackageSet', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Computes the version of packages after installing to_install.')), Assign(targets=[Name(id='installed', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), For(target=Name(id='inst_req', ctx=Store()), iter=Name(id='to_install', ctx=Load()), body=[Assign(targets=[Name(id='abstract_dist', ctx=Store())], value=Call(func=Name(id='make_distribution_for_install_requirement', ctx=Load()), args=[Name(id='inst_req', ctx=Load())], keywords=[])), Assign(targets=[Name(id='dist', ctx=Store())], value=Call(func=Attribute(value=Name(id='abstract_dist', ctx=Load()), attr='get_metadata_distribution', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='name', ctx=Store())], value=Attribute(value=Name(id='dist', ctx=Load()), attr='canonical_name', ctx=Load())), Assign(targets=[Subscript(value=Name(id='package_set', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Call(func=Name(id='PackageDetails', ctx=Load()), args=[Attribute(value=Name(id='dist', ctx=Load()), attr='version', ctx=Load()), Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='dist', ctx=Load()), attr='iter_dependencies', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='installed', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='installed', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Set', ctx=Load()), slice=Name(id='NormalizedName', ctx=Load()), ctx=Load())), FunctionDef(name='_create_whitelist', args=arguments(posonlyargs=[], args=[arg(arg='would_be_installed', annotation=Subscript(value=Name(id='Set', ctx=Load()), slice=Name(id='NormalizedName', ctx=Load()), ctx=Load())), arg(arg='package_set', annotation=Name(id='PackageSet', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='packages_affected', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Name(id='would_be_installed', ctx=Load())], keywords=[])), For(target=Name(id='package_name', ctx=Store()), iter=Name(id='package_set', ctx=Load()), body=[If(test=Compare(left=Name(id='package_name', ctx=Load()), ops=[In()], comparators=[Name(id='packages_affected', ctx=Load())]), body=[Continue()], orelse=[]), For(target=Name(id='req', ctx=Store()), iter=Attribute(value=Subscript(value=Name(id='package_set', ctx=Load()), slice=Name(id='package_name', ctx=Load()), ctx=Load()), attr='dependencies', ctx=Load()), body=[If(test=Compare(left=Call(func=Name(id='canonicalize_name', ctx=Load()), args=[Attribute(value=Name(id='req', ctx=Load()), attr='name', ctx=Load())], keywords=[]), ops=[In()], comparators=[Name(id='packages_affected', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='packages_affected', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='package_name', ctx=Load())], keywords=[])), Break()], orelse=[])], orelse=[])], orelse=[]), Return(value=Name(id='packages_affected', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Set', ctx=Load()), slice=Name(id='NormalizedName', ctx=Load()), ctx=Load())), FunctionDef(name='warn_legacy_versions_and_specifiers', args=arguments(posonlyargs=[], args=[arg(arg='package_set', annotation=Name(id='PackageSet', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Tuple(elts=[Name(id='project_name', ctx=Store()), Name(id='package_details', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='package_set', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='package_details', ctx=Load()), attr='version', ctx=Load()), Name(id='LegacyVersion', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Name(id='deprecated', ctx=Load()), args=[], keywords=[keyword(arg='reason', value=JoinedStr(values=[FormattedValue(value=Name(id='project_name', ctx=Load()), conversion=-1), Constant(value=' '), FormattedValue(value=Attribute(value=Name(id='package_details', ctx=Load()), attr='version', ctx=Load()), conversion=-1), Constant(value=' has a non-standard version number.')])), keyword(arg='replacement', value=JoinedStr(values=[Constant(value='to upgrade to a newer version of '), FormattedValue(value=Name(id='project_name', ctx=Load()), conversion=-1), Constant(value=' or contact the author to suggest that they release a version with a conforming version number')])), keyword(arg='issue', value=Constant(value=12063)), keyword(arg='gone_in', value=Constant(value='24.0'))]))], orelse=[]), For(target=Name(id='dep', ctx=Store()), iter=Attribute(value=Name(id='package_details', ctx=Load()), attr='dependencies', ctx=Load()), body=[If(test=Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='spec', ctx=Load()), Name(id='LegacySpecifier', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='spec', ctx=Store()), iter=Attribute(value=Name(id='dep', ctx=Load()), attr='specifier', ctx=Load()), ifs=[], is_async=0)])], keywords=[]), body=[Expr(value=Call(func=Name(id='deprecated', ctx=Load()), args=[], keywords=[keyword(arg='reason', value=JoinedStr(values=[FormattedValue(value=Name(id='project_name', ctx=Load()), conversion=-1), Constant(value=' '), FormattedValue(value=Attribute(value=Name(id='package_details', ctx=Load()), attr='version', ctx=Load()), conversion=-1), Constant(value=' has a non-standard dependency specifier '), FormattedValue(value=Name(id='dep', ctx=Load()), conversion=-1), Constant(value='.')])), keyword(arg='replacement', value=JoinedStr(values=[Constant(value='to upgrade to a newer version of '), FormattedValue(value=Name(id='project_name', ctx=Load()), conversion=-1), Constant(value=' or contact the author to suggest that they release a version with a conforming dependency specifiers')])), keyword(arg='issue', value=Constant(value=12063)), keyword(arg='gone_in', value=Constant(value='24.0'))]))], orelse=[])], orelse=[])], orelse=[])], decorator_list=[], returns=Constant(value=None))], type_ignores=[])