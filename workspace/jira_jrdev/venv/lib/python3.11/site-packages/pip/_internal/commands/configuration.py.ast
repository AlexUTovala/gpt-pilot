Module(body=[Import(names=[alias(name='logging')]), Import(names=[alias(name='os')]), Import(names=[alias(name='subprocess')]), ImportFrom(module='optparse', names=[alias(name='Values')], level=0), ImportFrom(module='typing', names=[alias(name='Any'), alias(name='List'), alias(name='Optional')], level=0), ImportFrom(module='pip._internal.cli.base_command', names=[alias(name='Command')], level=0), ImportFrom(module='pip._internal.cli.status_codes', names=[alias(name='ERROR'), alias(name='SUCCESS')], level=0), ImportFrom(module='pip._internal.configuration', names=[alias(name='Configuration'), alias(name='Kind'), alias(name='get_configuration_files'), alias(name='kinds')], level=0), ImportFrom(module='pip._internal.exceptions', names=[alias(name='PipError')], level=0), ImportFrom(module='pip._internal.utils.logging', names=[alias(name='indent_log')], level=0), ImportFrom(module='pip._internal.utils.misc', names=[alias(name='get_prog'), alias(name='write_output')], level=0), Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), ClassDef(name='ConfigurationCommand', bases=[Name(id='Command', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Manage local and global configuration.\n\n    Subcommands:\n\n    - list: List the active configuration (or from the file specified)\n    - edit: Edit the configuration file in an editor\n    - get: Get the value associated with command.option\n    - set: Set the command.option=value\n    - unset: Unset the value associated with command.option\n    - debug: List the configuration files and values defined under them\n\n    Configuration keys should be dot separated command and option name,\n    with the special prefix "global" affecting any command. For example,\n    "pip config set global.index-url https://example.org/" would configure\n    the index url for all commands, but "pip config set download.timeout 10"\n    would configure a 10 second timeout only for "pip download" commands.\n\n    If none of --user, --global and --site are passed, a virtual\n    environment configuration file is used if one is active and the file\n    exists. Otherwise, all modifications happen to the user file by\n    default.\n    ')), Assign(targets=[Name(id='ignore_require_venv', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='usage', ctx=Store())], value=Constant(value='\n        %prog [<file-option>] list\n        %prog [<file-option>] [--editor <editor-path>] edit\n\n        %prog [<file-option>] get command.option\n        %prog [<file-option>] set command.option value\n        %prog [<file-option>] unset command.option\n        %prog [<file-option>] debug\n    ')), FunctionDef(name='add_options', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load()), attr='add_option', ctx=Load()), args=[Constant(value='--editor')], keywords=[keyword(arg='dest', value=Constant(value='editor')), keyword(arg='action', value=Constant(value='store')), keyword(arg='default', value=Constant(value=None)), keyword(arg='help', value=Constant(value='Editor to use to edit the file. Uses VISUAL or EDITOR environment variables if not provided.'))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load()), attr='add_option', ctx=Load()), args=[Constant(value='--global')], keywords=[keyword(arg='dest', value=Constant(value='global_file')), keyword(arg='action', value=Constant(value='store_true')), keyword(arg='default', value=Constant(value=False)), keyword(arg='help', value=Constant(value='Use the system-wide configuration file only'))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load()), attr='add_option', ctx=Load()), args=[Constant(value='--user')], keywords=[keyword(arg='dest', value=Constant(value='user_file')), keyword(arg='action', value=Constant(value='store_true')), keyword(arg='default', value=Constant(value=False)), keyword(arg='help', value=Constant(value='Use the user configuration file only'))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load()), attr='add_option', ctx=Load()), args=[Constant(value='--site')], keywords=[keyword(arg='dest', value=Constant(value='site_file')), keyword(arg='action', value=Constant(value='store_true')), keyword(arg='default', value=Constant(value=False)), keyword(arg='help', value=Constant(value='Use the current environment configuration file only'))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='parser', ctx=Load()), attr='insert_option_group', ctx=Load()), args=[Constant(value=0), Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='run', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='options', annotation=Name(id='Values', ctx=Load())), arg(arg='args', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='handlers', ctx=Store())], value=Dict(keys=[Constant(value='list'), Constant(value='edit'), Constant(value='get'), Constant(value='set'), Constant(value='unset'), Constant(value='debug')], values=[Attribute(value=Name(id='self', ctx=Load()), attr='list_values', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='open_in_editor', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='get_name', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='set_name_value', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='unset_name', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='list_config_values', ctx=Load())])), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Name(id='args', ctx=Load())), Compare(left=Subscript(value=Name(id='args', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[NotIn()], comparators=[Name(id='handlers', ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='error', ctx=Load()), args=[Constant(value='Need an action (%s) to perform.'), Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='handlers', ctx=Load())], keywords=[])], keywords=[])], keywords=[])), Return(value=Name(id='ERROR', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='action', ctx=Store())], value=Subscript(value=Name(id='args', ctx=Load()), slice=Constant(value=0), ctx=Load())), Try(body=[Assign(targets=[Name(id='load_only', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_determine_file', ctx=Load()), args=[Name(id='options', ctx=Load())], keywords=[keyword(arg='need_value', value=Compare(left=Name(id='action', ctx=Load()), ops=[In()], comparators=[List(elts=[Constant(value='get'), Constant(value='set'), Constant(value='unset'), Constant(value='edit')], ctx=Load())]))]))], handlers=[ExceptHandler(type=Name(id='PipError', ctx=Load()), name='e', body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='error', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='e', ctx=Load()), attr='args', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])), Return(value=Name(id='ERROR', ctx=Load()))])], orelse=[], finalbody=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='configuration', ctx=Store())], value=Call(func=Name(id='Configuration', ctx=Load()), args=[], keywords=[keyword(arg='isolated', value=Attribute(value=Name(id='options', ctx=Load()), attr='isolated_mode', ctx=Load())), keyword(arg='load_only', value=Name(id='load_only', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='configuration', ctx=Load()), attr='load', ctx=Load()), args=[], keywords=[])), Try(body=[Expr(value=Call(func=Subscript(value=Name(id='handlers', ctx=Load()), slice=Name(id='action', ctx=Load()), ctx=Load()), args=[Name(id='options', ctx=Load()), Subscript(value=Name(id='args', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='PipError', ctx=Load()), name='e', body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='error', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='e', ctx=Load()), attr='args', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])), Return(value=Name(id='ERROR', ctx=Load()))])], orelse=[], finalbody=[]), Return(value=Name(id='SUCCESS', ctx=Load()))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='_determine_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='options', annotation=Name(id='Values', ctx=Load())), arg(arg='need_value', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='file_options', ctx=Store())], value=ListComp(elt=Name(id='key', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Tuple(elts=[Tuple(elts=[Attribute(value=Name(id='kinds', ctx=Load()), attr='USER', ctx=Load()), Attribute(value=Name(id='options', ctx=Load()), attr='user_file', ctx=Load())], ctx=Load()), Tuple(elts=[Attribute(value=Name(id='kinds', ctx=Load()), attr='GLOBAL', ctx=Load()), Attribute(value=Name(id='options', ctx=Load()), attr='global_file', ctx=Load())], ctx=Load()), Tuple(elts=[Attribute(value=Name(id='kinds', ctx=Load()), attr='SITE', ctx=Load()), Attribute(value=Name(id='options', ctx=Load()), attr='site_file', ctx=Load())], ctx=Load())], ctx=Load()), ifs=[Name(id='value', ctx=Load())], is_async=0)])), If(test=UnaryOp(op=Not(), operand=Name(id='file_options', ctx=Load())), body=[If(test=UnaryOp(op=Not(), operand=Name(id='need_value', ctx=Load())), body=[Return(value=Constant(value=None))], orelse=[If(test=Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='site_config_file', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='site_config_file', ctx=Store()), iter=Subscript(value=Call(func=Name(id='get_configuration_files', ctx=Load()), args=[], keywords=[]), slice=Attribute(value=Name(id='kinds', ctx=Load()), attr='SITE', ctx=Load()), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), body=[Return(value=Attribute(value=Name(id='kinds', ctx=Load()), attr='SITE', ctx=Load()))], orelse=[Return(value=Attribute(value=Name(id='kinds', ctx=Load()), attr='USER', ctx=Load()))])])], orelse=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='file_options', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='file_options', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[])]), Raise(exc=Call(func=Name(id='PipError', ctx=Load()), args=[Constant(value='Need exactly one file to operate upon (--user, --site, --global) to perform.')], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Kind', ctx=Load()), ctx=Load())), FunctionDef(name='list_values', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='options', annotation=Name(id='Values', ctx=Load())), arg(arg='args', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_n_args', ctx=Load()), args=[Name(id='args', ctx=Load()), Constant(value='list')], keywords=[keyword(arg='n', value=Constant(value=0))])), For(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='configuration', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Name(id='write_output', ctx=Load()), args=[Constant(value='%s=%r'), Name(id='key', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='get_name', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='options', annotation=Name(id='Values', ctx=Load())), arg(arg='args', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='key', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_n_args', ctx=Load()), args=[Name(id='args', ctx=Load()), Constant(value='get [name]')], keywords=[keyword(arg='n', value=Constant(value=1))])), Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='configuration', ctx=Load()), attr='get_value', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='write_output', ctx=Load()), args=[Constant(value='%s'), Name(id='value', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='set_name_value', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='options', annotation=Name(id='Values', ctx=Load())), arg(arg='args', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_n_args', ctx=Load()), args=[Name(id='args', ctx=Load()), Constant(value='set [name] [value]')], keywords=[keyword(arg='n', value=Constant(value=2))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='configuration', ctx=Load()), attr='set_value', ctx=Load()), args=[Name(id='key', ctx=Load()), Name(id='value', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_save_configuration', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='unset_name', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='options', annotation=Name(id='Values', ctx=Load())), arg(arg='args', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='key', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_n_args', ctx=Load()), args=[Name(id='args', ctx=Load()), Constant(value='unset [name]')], keywords=[keyword(arg='n', value=Constant(value=1))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='configuration', ctx=Load()), attr='unset_value', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_save_configuration', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='list_config_values', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='options', annotation=Name(id='Values', ctx=Load())), arg(arg='args', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='List config key-value pairs across different config files')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_n_args', ctx=Load()), args=[Name(id='args', ctx=Load()), Constant(value='debug')], keywords=[keyword(arg='n', value=Constant(value=0))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='print_env_var_values', ctx=Load()), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='variant', ctx=Store()), Name(id='files', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='configuration', ctx=Load()), attr='iter_config_files', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Name(id='write_output', ctx=Load()), args=[Constant(value='%s:'), Name(id='variant', ctx=Load())], keywords=[])), For(target=Name(id='fname', ctx=Store()), iter=Name(id='files', ctx=Load()), body=[With(items=[withitem(context_expr=Call(func=Name(id='indent_log', ctx=Load()), args=[], keywords=[]))], body=[Assign(targets=[Name(id='file_exists', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='fname', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='write_output', ctx=Load()), args=[Constant(value='%s, exists: %r'), Name(id='fname', ctx=Load()), Name(id='file_exists', ctx=Load())], keywords=[])), If(test=Name(id='file_exists', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='print_config_file_values', ctx=Load()), args=[Name(id='variant', ctx=Load())], keywords=[]))], orelse=[])])], orelse=[])], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='print_config_file_values', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='variant', annotation=Name(id='Kind', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get key-value pairs from the file of a variant')), For(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='configuration', ctx=Load()), attr='get_values_in_config', ctx=Load()), args=[Name(id='variant', ctx=Load())], keywords=[]), attr='items', ctx=Load()), args=[], keywords=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='indent_log', ctx=Load()), args=[], keywords=[]))], body=[Expr(value=Call(func=Name(id='write_output', ctx=Load()), args=[Constant(value='%s: %s'), Name(id='name', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]))])], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='print_env_var_values', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get key-values pairs present as environment variables')), Expr(value=Call(func=Name(id='write_output', ctx=Load()), args=[Constant(value='%s:'), Constant(value='env_var')], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='indent_log', ctx=Load()), args=[], keywords=[]))], body=[For(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='configuration', ctx=Load()), attr='get_environ_vars', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='env_var', ctx=Store())], value=JoinedStr(values=[Constant(value='PIP_'), FormattedValue(value=Call(func=Attribute(value=Name(id='key', ctx=Load()), attr='upper', ctx=Load()), args=[], keywords=[]), conversion=-1)])), Expr(value=Call(func=Name(id='write_output', ctx=Load()), args=[Constant(value='%s=%r'), Name(id='env_var', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]))], orelse=[])])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='open_in_editor', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='options', annotation=Name(id='Values', ctx=Load())), arg(arg='args', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='editor', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_determine_editor', ctx=Load()), args=[Name(id='options', ctx=Load())], keywords=[])), Assign(targets=[Name(id='fname', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='configuration', ctx=Load()), attr='get_file_to_edit', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='fname', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='PipError', ctx=Load()), args=[Constant(value='Could not determine appropriate file.')], keywords=[]))], orelse=[If(test=Compare(left=Constant(value='"'), ops=[In()], comparators=[Name(id='fname', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='PipError', ctx=Load()), args=[JoinedStr(values=[Constant(value='Can not open an editor for a file name containing "\n'), FormattedValue(value=Name(id='fname', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[])]), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='subprocess', ctx=Load()), attr='check_call', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='editor', ctx=Load()), conversion=-1), Constant(value=' "'), FormattedValue(value=Name(id='fname', ctx=Load()), conversion=-1), Constant(value='"')])], keywords=[keyword(arg='shell', value=Constant(value=True))]))], handlers=[ExceptHandler(type=Name(id='FileNotFoundError', ctx=Load()), name='e', body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='e', ctx=Load()), attr='filename', ctx=Load())), body=[Assign(targets=[Attribute(value=Name(id='e', ctx=Load()), attr='filename', ctx=Store())], value=Name(id='editor', ctx=Load()))], orelse=[]), Raise()]), ExceptHandler(type=Attribute(value=Name(id='subprocess', ctx=Load()), attr='CalledProcessError', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='PipError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Editor Subprocess exited with exit code {}'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='e', ctx=Load()), attr='returncode', ctx=Load())], keywords=[])], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_get_n_args', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='args', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='example', annotation=Name(id='str', ctx=Load())), arg(arg='n', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Helper to make sure the command got the right number of arguments')), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Name(id='n', ctx=Load())]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Call(func=Attribute(value=Constant(value='Got unexpected number of arguments, expected {}. (example: "{} config {}")'), attr='format', ctx=Load()), args=[Name(id='n', ctx=Load()), Call(func=Name(id='get_prog', ctx=Load()), args=[], keywords=[]), Name(id='example', ctx=Load())], keywords=[])), Raise(exc=Call(func=Name(id='PipError', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='n', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='args', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Name(id='args', ctx=Load()))])], decorator_list=[], returns=Name(id='Any', ctx=Load())), FunctionDef(name='_save_configuration', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='configuration', ctx=Load()), attr='save', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='exception', ctx=Load()), args=[Constant(value='Unable to save configuration. Please report this as a bug.')], keywords=[])), Raise(exc=Call(func=Name(id='PipError', ctx=Load()), args=[Constant(value='Internal Error.')], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_determine_editor', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='options', annotation=Name(id='Values', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='options', ctx=Load()), attr='editor', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=Attribute(value=Name(id='options', ctx=Load()), attr='editor', ctx=Load()))], orelse=[If(test=Compare(left=Constant(value='VISUAL'), ops=[In()], comparators=[Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load())]), body=[Return(value=Subscript(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), slice=Constant(value='VISUAL'), ctx=Load()))], orelse=[If(test=Compare(left=Constant(value='EDITOR'), ops=[In()], comparators=[Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load())]), body=[Return(value=Subscript(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), slice=Constant(value='EDITOR'), ctx=Load()))], orelse=[Raise(exc=Call(func=Name(id='PipError', ctx=Load()), args=[Constant(value='Could not determine editor to use.')], keywords=[]))])])])], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[])], type_ignores=[])