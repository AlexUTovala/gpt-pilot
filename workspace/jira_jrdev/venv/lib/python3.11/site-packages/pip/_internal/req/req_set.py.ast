Module(body=[Import(names=[alias(name='logging')]), ImportFrom(module='collections', names=[alias(name='OrderedDict')], level=0), ImportFrom(module='typing', names=[alias(name='Dict'), alias(name='List')], level=0), ImportFrom(module='pip._vendor.packaging.specifiers', names=[alias(name='LegacySpecifier')], level=0), ImportFrom(module='pip._vendor.packaging.utils', names=[alias(name='canonicalize_name')], level=0), ImportFrom(module='pip._vendor.packaging.version', names=[alias(name='LegacyVersion')], level=0), ImportFrom(module='pip._internal.req.req_install', names=[alias(name='InstallRequirement')], level=0), ImportFrom(module='pip._internal.utils.deprecation', names=[alias(name='deprecated')], level=0), Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), ClassDef(name='RequirementSet', bases=[], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='check_supported_wheels', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Expr(value=Constant(value='Create a RequirementSet.')), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='requirements', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='InstallRequirement', ctx=Load())], ctx=Load()), ctx=Load()), value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[], keywords=[]), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='check_supported_wheels', ctx=Store())], value=Name(id='check_supported_wheels', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='unnamed_requirements', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='InstallRequirement', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=0)], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__str__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='requirements', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[GeneratorExp(elt=Name(id='req', ctx=Load()), generators=[comprehension(target=Name(id='req', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='requirements', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[]), ifs=[UnaryOp(op=Not(), operand=Attribute(value=Name(id='req', ctx=Load()), attr='comes_from', ctx=Load()))], is_async=0)])], keywords=[keyword(arg='key', value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='req')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='canonicalize_name', ctx=Load()), args=[BoolOp(op=Or(), values=[Attribute(value=Name(id='req', ctx=Load()), attr='name', ctx=Load()), Constant(value='')])], keywords=[])))])), Return(value=Call(func=Attribute(value=Constant(value=' '), attr='join', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='req', ctx=Load()), attr='req', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='req', ctx=Store()), iter=Name(id='requirements', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='requirements', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='requirements', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[keyword(arg='key', value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='req')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='canonicalize_name', ctx=Load()), args=[BoolOp(op=Or(), values=[Attribute(value=Name(id='req', ctx=Load()), attr='name', ctx=Load()), Constant(value='')])], keywords=[])))])), Assign(targets=[Name(id='format_string', ctx=Store())], value=Constant(value='<{classname} object; {count} requirement(s): {reqs}>')), Return(value=Call(func=Attribute(value=Name(id='format_string', ctx=Load()), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='classname', value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load())), keyword(arg='count', value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='requirements', ctx=Load())], keywords=[])), keyword(arg='reqs', value=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='req', ctx=Load()), attr='req', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='req', ctx=Store()), iter=Name(id='requirements', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='add_unnamed_requirement', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='install_req', annotation=Name(id='InstallRequirement', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='install_req', ctx=Load()), attr='name', ctx=Load()))), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='unnamed_requirements', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='install_req', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='add_named_requirement', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='install_req', annotation=Name(id='InstallRequirement', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Attribute(value=Name(id='install_req', ctx=Load()), attr='name', ctx=Load())), Assign(targets=[Name(id='project_name', ctx=Store())], value=Call(func=Name(id='canonicalize_name', ctx=Load()), args=[Attribute(value=Name(id='install_req', ctx=Load()), attr='name', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='requirements', ctx=Load()), slice=Name(id='project_name', ctx=Load()), ctx=Store())], value=Name(id='install_req', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='has_requirement', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='project_name', ctx=Store())], value=Call(func=Name(id='canonicalize_name', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), Return(value=BoolOp(op=And(), values=[Compare(left=Name(id='project_name', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='requirements', ctx=Load())]), UnaryOp(op=Not(), operand=Attribute(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='requirements', ctx=Load()), slice=Name(id='project_name', ctx=Load()), ctx=Load()), attr='constraint', ctx=Load()))]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='get_requirement', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='project_name', ctx=Store())], value=Call(func=Name(id='canonicalize_name', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='project_name', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='requirements', ctx=Load())]), body=[Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='requirements', ctx=Load()), slice=Name(id='project_name', ctx=Load()), ctx=Load()))], orelse=[]), Raise(exc=Call(func=Name(id='KeyError', ctx=Load()), args=[JoinedStr(values=[Constant(value='No project with the name '), FormattedValue(value=Name(id='name', ctx=Load()), conversion=114)])], keywords=[]))], decorator_list=[], returns=Name(id='InstallRequirement', ctx=Load())), FunctionDef(name='all_requirements', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='unnamed_requirements', ctx=Load()), op=Add(), right=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='requirements', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='InstallRequirement', ctx=Load()), ctx=Load())), FunctionDef(name='requirements_to_install', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the list of requirements that need to be installed.\n\n        TODO remove this property together with the legacy resolver, since the new\n             resolver only returns requirements that need to be installed.\n        ')), Return(value=ListComp(elt=Name(id='install_req', ctx=Load()), generators=[comprehension(target=Name(id='install_req', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='all_requirements', ctx=Load()), ifs=[BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Attribute(value=Name(id='install_req', ctx=Load()), attr='constraint', ctx=Load())), UnaryOp(op=Not(), operand=Attribute(value=Name(id='install_req', ctx=Load()), attr='satisfied_by', ctx=Load()))])], is_async=0)]))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='InstallRequirement', ctx=Load()), ctx=Load())), FunctionDef(name='warn_legacy_versions_and_specifiers', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='req', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='requirements_to_install', ctx=Load()), body=[Assign(targets=[Name(id='version', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Name(id='req', ctx=Load()), attr='get_dist', ctx=Load()), args=[], keywords=[]), attr='version', ctx=Load())), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='version', ctx=Load()), Name(id='LegacyVersion', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Name(id='deprecated', ctx=Load()), args=[], keywords=[keyword(arg='reason', value=JoinedStr(values=[Constant(value='pip has selected the non standard version '), FormattedValue(value=Name(id='version', ctx=Load()), conversion=-1), Constant(value=' of '), FormattedValue(value=Name(id='req', ctx=Load()), conversion=-1), Constant(value=". In the future this version will be ignored as it isn't standard compliant.")])), keyword(arg='replacement', value=Constant(value='set or update constraints to select another version or contact the package author to fix the version number')), keyword(arg='issue', value=Constant(value=12063)), keyword(arg='gone_in', value=Constant(value='24.0'))]))], orelse=[]), For(target=Name(id='dep', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='req', ctx=Load()), attr='get_dist', ctx=Load()), args=[], keywords=[]), attr='iter_dependencies', ctx=Load()), args=[], keywords=[]), body=[If(test=Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='spec', ctx=Load()), Name(id='LegacySpecifier', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='spec', ctx=Store()), iter=Attribute(value=Name(id='dep', ctx=Load()), attr='specifier', ctx=Load()), ifs=[], is_async=0)])], keywords=[]), body=[Expr(value=Call(func=Name(id='deprecated', ctx=Load()), args=[], keywords=[keyword(arg='reason', value=JoinedStr(values=[Constant(value='pip has selected '), FormattedValue(value=Name(id='req', ctx=Load()), conversion=-1), Constant(value=' '), FormattedValue(value=Name(id='version', ctx=Load()), conversion=-1), Constant(value=' which has non standard dependency specifier '), FormattedValue(value=Name(id='dep', ctx=Load()), conversion=-1), Constant(value='. In the future this version of '), FormattedValue(value=Name(id='req', ctx=Load()), conversion=-1), Constant(value=" will be ignored as it isn't standard compliant.")])), keyword(arg='replacement', value=Constant(value='set or update constraints to select another version or contact the package author to fix the version number')), keyword(arg='issue', value=Constant(value=12063)), keyword(arg='gone_in', value=Constant(value='24.0'))]))], orelse=[])], orelse=[])], orelse=[])], decorator_list=[], returns=Constant(value=None))], decorator_list=[])], type_ignores=[])