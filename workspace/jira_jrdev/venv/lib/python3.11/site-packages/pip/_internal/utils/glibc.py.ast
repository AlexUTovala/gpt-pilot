Module(body=[Import(names=[alias(name='os')]), Import(names=[alias(name='sys')]), ImportFrom(module='typing', names=[alias(name='Optional'), alias(name='Tuple')], level=0), FunctionDef(name='glibc_version_string', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Returns glibc version string, or None if not using glibc.')), Return(value=BoolOp(op=Or(), values=[Call(func=Name(id='glibc_version_string_confstr', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='glibc_version_string_ctypes', ctx=Load()), args=[], keywords=[])]))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='glibc_version_string_confstr', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Primary implementation of glibc_version_string using os.confstr.')), If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), ops=[Eq()], comparators=[Constant(value='win32')]), body=[Return(value=Constant(value=None))], orelse=[]), Try(body=[Assign(targets=[Name(id='gnu_libc_version', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='confstr', ctx=Load()), args=[Constant(value='CS_GNU_LIBC_VERSION')], keywords=[])), If(test=Compare(left=Name(id='gnu_libc_version', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=None))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='version', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='gnu_libc_version', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='AttributeError', ctx=Load()), Name(id='OSError', ctx=Load()), Name(id='ValueError', ctx=Load())], ctx=Load()), body=[Return(value=Constant(value=None))])], orelse=[], finalbody=[]), Return(value=Name(id='version', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='glibc_version_string_ctypes', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Fallback implementation of glibc_version_string using ctypes.')), Try(body=[Import(names=[alias(name='ctypes')])], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Return(value=Constant(value=None))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='process_namespace', ctx=Store())], value=Call(func=Attribute(value=Name(id='ctypes', ctx=Load()), attr='CDLL', ctx=Load()), args=[Constant(value=None)], keywords=[])), Try(body=[Assign(targets=[Name(id='gnu_get_libc_version', ctx=Store())], value=Attribute(value=Name(id='process_namespace', ctx=Load()), attr='gnu_get_libc_version', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Return(value=Constant(value=None))])], orelse=[], finalbody=[]), Assign(targets=[Attribute(value=Name(id='gnu_get_libc_version', ctx=Load()), attr='restype', ctx=Store())], value=Attribute(value=Name(id='ctypes', ctx=Load()), attr='c_char_p', ctx=Load())), Assign(targets=[Name(id='version_str', ctx=Store())], value=Call(func=Name(id='gnu_get_libc_version', ctx=Load()), args=[], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='version_str', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='version_str', ctx=Store())], value=Call(func=Attribute(value=Name(id='version_str', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]))], orelse=[]), Return(value=Name(id='version_str', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='libc_ver', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Try to determine the glibc version\n\n    Returns a tuple of strings (lib, version) which default to empty strings\n    in case the lookup fails.\n    ')), Assign(targets=[Name(id='glibc_version', ctx=Store())], value=Call(func=Name(id='glibc_version_string', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='glibc_version', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Tuple(elts=[Constant(value=''), Constant(value='')], ctx=Load()))], orelse=[Return(value=Tuple(elts=[Constant(value='glibc'), Name(id='glibc_version', ctx=Load())], ctx=Load()))])], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()))], type_ignores=[])