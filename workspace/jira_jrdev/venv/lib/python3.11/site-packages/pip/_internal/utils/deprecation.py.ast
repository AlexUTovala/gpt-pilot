Module(body=[Expr(value=Constant(value='\nA module that implements tooling to enable easy warnings about deprecations.\n')), Import(names=[alias(name='logging')]), Import(names=[alias(name='warnings')]), ImportFrom(module='typing', names=[alias(name='Any'), alias(name='Optional'), alias(name='TextIO'), alias(name='Type'), alias(name='Union')], level=0), ImportFrom(module='pip._vendor.packaging.version', names=[alias(name='parse')], level=0), ImportFrom(module='pip', names=[alias(name='__version__', asname='current_version')], level=0), Assign(targets=[Name(id='DEPRECATION_MSG_PREFIX', ctx=Store())], value=Constant(value='DEPRECATION: ')), ClassDef(name='PipDeprecationWarning', bases=[Name(id='Warning', ctx=Load())], keywords=[], body=[Pass()], decorator_list=[]), AnnAssign(target=Name(id='_original_showwarning', ctx=Store()), annotation=Name(id='Any', ctx=Load()), value=Constant(value=None), simple=1), FunctionDef(name='_showwarning', args=arguments(posonlyargs=[], args=[arg(arg='message', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='Warning', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='category', annotation=Subscript(value=Name(id='Type', ctx=Load()), slice=Name(id='Warning', ctx=Load()), ctx=Load())), arg(arg='filename', annotation=Name(id='str', ctx=Load())), arg(arg='lineno', annotation=Name(id='int', ctx=Load())), arg(arg='file', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TextIO', ctx=Load()), ctx=Load())), arg(arg='line', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[If(test=Compare(left=Name(id='file', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='_original_showwarning', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Name(id='_original_showwarning', ctx=Load()), args=[Name(id='message', ctx=Load()), Name(id='category', ctx=Load()), Name(id='filename', ctx=Load()), Name(id='lineno', ctx=Load()), Name(id='file', ctx=Load()), Name(id='line', ctx=Load())], keywords=[]))], orelse=[])], orelse=[If(test=Call(func=Name(id='issubclass', ctx=Load()), args=[Name(id='category', ctx=Load()), Name(id='PipDeprecationWarning', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Constant(value='pip._internal.deprecations')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Name(id='message', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='_original_showwarning', ctx=Load()), args=[Name(id='message', ctx=Load()), Name(id='category', ctx=Load()), Name(id='filename', ctx=Load()), Name(id='lineno', ctx=Load()), Name(id='file', ctx=Load()), Name(id='line', ctx=Load())], keywords=[]))])])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='install_warning_logger', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='simplefilter', ctx=Load()), args=[Constant(value='default'), Name(id='PipDeprecationWarning', ctx=Load())], keywords=[keyword(arg='append', value=Constant(value=True))])), Global(names=['_original_showwarning']), If(test=Compare(left=Name(id='_original_showwarning', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='_original_showwarning', ctx=Store())], value=Attribute(value=Name(id='warnings', ctx=Load()), attr='showwarning', ctx=Load())), Assign(targets=[Attribute(value=Name(id='warnings', ctx=Load()), attr='showwarning', ctx=Store())], value=Name(id='_showwarning', ctx=Load()))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='deprecated', args=arguments(posonlyargs=[], args=[], kwonlyargs=[arg(arg='reason', annotation=Name(id='str', ctx=Load())), arg(arg='replacement', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='gone_in', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='feature_flag', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='issue', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()))], kw_defaults=[None, None, None, Constant(value=None), Constant(value=None)], defaults=[]), body=[Expr(value=Constant(value="Helper to deprecate existing functionality.\n\n    reason:\n        Textual reason shown to the user about why this functionality has\n        been deprecated. Should be a complete sentence.\n    replacement:\n        Textual suggestion shown to the user about what alternative\n        functionality they can use.\n    gone_in:\n        The version of pip does this functionality should get removed in.\n        Raises an error if pip's current version is greater than or equal to\n        this.\n    feature_flag:\n        Command-line flag of the form --use-feature={feature_flag} for testing\n        upcoming functionality.\n    issue:\n        Issue number on the tracker that would serve as a useful place for\n        users to find related discussion and provide feedback.\n    ")), Assign(targets=[Name(id='is_gone', ctx=Store())], value=BoolOp(op=And(), values=[Compare(left=Name(id='gone_in', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Call(func=Name(id='parse', ctx=Load()), args=[Name(id='current_version', ctx=Load())], keywords=[]), ops=[GtE()], comparators=[Call(func=Name(id='parse', ctx=Load()), args=[Name(id='gone_in', ctx=Load())], keywords=[])])])), Assign(targets=[Name(id='message_parts', ctx=Store())], value=List(elts=[Tuple(elts=[Name(id='reason', ctx=Load()), JoinedStr(values=[FormattedValue(value=Name(id='DEPRECATION_MSG_PREFIX', ctx=Load()), conversion=-1), Constant(value='{}')])], ctx=Load()), Tuple(elts=[Name(id='gone_in', ctx=Load()), IfExp(test=UnaryOp(op=Not(), operand=Name(id='is_gone', ctx=Load())), body=Constant(value='pip {} will enforce this behaviour change.'), orelse=Constant(value='Since pip {}, this is no longer supported.'))], ctx=Load()), Tuple(elts=[Name(id='replacement', ctx=Load()), Constant(value='A possible replacement is {}.')], ctx=Load()), Tuple(elts=[Name(id='feature_flag', ctx=Load()), IfExp(test=UnaryOp(op=Not(), operand=Name(id='is_gone', ctx=Load())), body=Constant(value='You can use the flag --use-feature={} to test the upcoming behaviour.'), orelse=Constant(value=None))], ctx=Load()), Tuple(elts=[Name(id='issue', ctx=Load()), Constant(value='Discussion can be found at https://github.com/pypa/pip/issues/{}')], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Attribute(value=Constant(value=' '), attr='join', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='format_str', ctx=Load()), attr='format', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]), generators=[comprehension(target=Tuple(elts=[Name(id='value', ctx=Store()), Name(id='format_str', ctx=Store())], ctx=Store()), iter=Name(id='message_parts', ctx=Load()), ifs=[BoolOp(op=And(), values=[Compare(left=Name(id='format_str', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='value', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])])], is_async=0)])], keywords=[])), If(test=Name(id='is_gone', ctx=Load()), body=[Raise(exc=Call(func=Name(id='PipDeprecationWarning', ctx=Load()), args=[Name(id='message', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Name(id='message', ctx=Load())], keywords=[keyword(arg='category', value=Name(id='PipDeprecationWarning', ctx=Load())), keyword(arg='stacklevel', value=Constant(value=2))]))], decorator_list=[], returns=Constant(value=None))], type_ignores=[])