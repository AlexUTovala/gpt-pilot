Module(body=[Import(names=[alias(name='contextlib')]), Import(names=[alias(name='errno')]), Import(names=[alias(name='logging')]), Import(names=[alias(name='logging.handlers')]), Import(names=[alias(name='os')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='threading')]), ImportFrom(module='dataclasses', names=[alias(name='dataclass')], level=0), ImportFrom(module='io', names=[alias(name='TextIOWrapper')], level=0), ImportFrom(module='logging', names=[alias(name='Filter')], level=0), ImportFrom(module='typing', names=[alias(name='Any'), alias(name='ClassVar'), alias(name='Generator'), alias(name='List'), alias(name='Optional'), alias(name='TextIO'), alias(name='Type')], level=0), ImportFrom(module='pip._vendor.rich.console', names=[alias(name='Console'), alias(name='ConsoleOptions'), alias(name='ConsoleRenderable'), alias(name='RenderableType'), alias(name='RenderResult'), alias(name='RichCast')], level=0), ImportFrom(module='pip._vendor.rich.highlighter', names=[alias(name='NullHighlighter')], level=0), ImportFrom(module='pip._vendor.rich.logging', names=[alias(name='RichHandler')], level=0), ImportFrom(module='pip._vendor.rich.segment', names=[alias(name='Segment')], level=0), ImportFrom(module='pip._vendor.rich.style', names=[alias(name='Style')], level=0), ImportFrom(module='pip._internal.utils._log', names=[alias(name='VERBOSE'), alias(name='getLogger')], level=0), ImportFrom(module='pip._internal.utils.compat', names=[alias(name='WINDOWS')], level=0), ImportFrom(module='pip._internal.utils.deprecation', names=[alias(name='DEPRECATION_MSG_PREFIX')], level=0), ImportFrom(module='pip._internal.utils.misc', names=[alias(name='ensure_dir')], level=0), Assign(targets=[Name(id='_log_state', ctx=Store())], value=Call(func=Attribute(value=Name(id='threading', ctx=Load()), attr='local', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='subprocess_logger', ctx=Store())], value=Call(func=Name(id='getLogger', ctx=Load()), args=[Constant(value='pip.subprocessor')], keywords=[])), ClassDef(name='BrokenStdoutLoggingError', bases=[Name(id='Exception', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Raised if BrokenPipeError occurs for the stdout stream while logging.\n    '))], decorator_list=[]), FunctionDef(name='_is_broken_pipe_error', args=arguments(posonlyargs=[], args=[arg(arg='exc_class', annotation=Subscript(value=Name(id='Type', ctx=Load()), slice=Name(id='BaseException', ctx=Load()), ctx=Load())), arg(arg='exc', annotation=Name(id='BaseException', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='exc_class', ctx=Load()), ops=[Is()], comparators=[Name(id='BrokenPipeError', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='WINDOWS', ctx=Load())), body=[Return(value=Constant(value=False))], orelse=[]), Return(value=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='exc', ctx=Load()), Name(id='OSError', ctx=Load())], keywords=[]), Compare(left=Attribute(value=Name(id='exc', ctx=Load()), attr='errno', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Attribute(value=Name(id='errno', ctx=Load()), attr='EINVAL', ctx=Load()), Attribute(value=Name(id='errno', ctx=Load()), attr='EPIPE', ctx=Load())], ctx=Load())])]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='indent_log', args=arguments(posonlyargs=[], args=[arg(arg='num', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=2)]), body=[Expr(value=Constant(value='\n    A context manager which will cause the log output to be indented for any\n    log messages emitted inside it.\n    ')), Assign(targets=[Attribute(value=Name(id='_log_state', ctx=Load()), attr='indentation', ctx=Store())], value=Call(func=Name(id='get_indentation', ctx=Load()), args=[], keywords=[])), AugAssign(target=Attribute(value=Name(id='_log_state', ctx=Load()), attr='indentation', ctx=Store()), op=Add(), value=Name(id='num', ctx=Load())), Try(body=[Expr(value=Yield())], handlers=[], orelse=[], finalbody=[AugAssign(target=Attribute(value=Name(id='_log_state', ctx=Load()), attr='indentation', ctx=Store()), op=Sub(), value=Name(id='num', ctx=Load()))])], decorator_list=[Attribute(value=Name(id='contextlib', ctx=Load()), attr='contextmanager', ctx=Load())], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='get_indentation', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='_log_state', ctx=Load()), Constant(value='indentation'), Constant(value=0)], keywords=[]))], decorator_list=[], returns=Name(id='int', ctx=Load())), ClassDef(name='IndentingFormatter', bases=[Attribute(value=Name(id='logging', ctx=Load()), attr='Formatter', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='default_time_format', ctx=Store())], value=Constant(value='%Y-%m-%dT%H:%M:%S')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args', annotation=Name(id='Any', ctx=Load())), kwonlyargs=[arg(arg='add_timestamp', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=False)], kwarg=arg(arg='kwargs', annotation=Name(id='Any', ctx=Load())), defaults=[]), body=[Expr(value=Constant(value="\n        A logging.Formatter that obeys the indent_log() context manager.\n\n        :param add_timestamp: A bool indicating output lines should be prefixed\n            with their record's timestamp.\n        ")), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='add_timestamp', ctx=Store())], value=Name(id='add_timestamp', ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='get_message_start', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='formatted', annotation=Name(id='str', ctx=Load())), arg(arg='levelno', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return the start of the formatted log message (not counting the\n        prefix to add to each line).\n        ')), If(test=Compare(left=Name(id='levelno', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Name(id='logging', ctx=Load()), attr='WARNING', ctx=Load())]), body=[Return(value=Constant(value=''))], orelse=[]), If(test=Call(func=Attribute(value=Name(id='formatted', ctx=Load()), attr='startswith', ctx=Load()), args=[Name(id='DEPRECATION_MSG_PREFIX', ctx=Load())], keywords=[]), body=[Return(value=Constant(value=''))], orelse=[]), If(test=Compare(left=Name(id='levelno', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Name(id='logging', ctx=Load()), attr='ERROR', ctx=Load())]), body=[Return(value=Constant(value='WARNING: '))], orelse=[]), Return(value=Constant(value='ERROR: '))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='format', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='record', annotation=Attribute(value=Name(id='logging', ctx=Load()), attr='LogRecord', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Calls the standard formatter, but will indent all of the log message\n        lines by our current indentation level.\n        ')), Assign(targets=[Name(id='formatted', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='format', ctx=Load()), args=[Name(id='record', ctx=Load())], keywords=[])), Assign(targets=[Name(id='message_start', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_message_start', ctx=Load()), args=[Name(id='formatted', ctx=Load()), Attribute(value=Name(id='record', ctx=Load()), attr='levelno', ctx=Load())], keywords=[])), Assign(targets=[Name(id='formatted', ctx=Store())], value=BinOp(left=Name(id='message_start', ctx=Load()), op=Add(), right=Name(id='formatted', ctx=Load()))), Assign(targets=[Name(id='prefix', ctx=Store())], value=Constant(value='')), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='add_timestamp', ctx=Load()), body=[Assign(targets=[Name(id='prefix', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='formatTime', ctx=Load()), args=[Name(id='record', ctx=Load())], keywords=[]), conversion=-1), Constant(value=' ')]))], orelse=[]), AugAssign(target=Name(id='prefix', ctx=Store()), op=Add(), value=BinOp(left=Constant(value=' '), op=Mult(), right=Call(func=Name(id='get_indentation', ctx=Load()), args=[], keywords=[]))), Assign(targets=[Name(id='formatted', ctx=Store())], value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[ListComp(elt=BinOp(left=Name(id='prefix', ctx=Load()), op=Add(), right=Name(id='line', ctx=Load())), generators=[comprehension(target=Name(id='line', ctx=Store()), iter=Call(func=Attribute(value=Name(id='formatted', ctx=Load()), attr='splitlines', ctx=Load()), args=[Constant(value=True)], keywords=[]), ifs=[], is_async=0)])], keywords=[])), Return(value=Name(id='formatted', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[]), ClassDef(name='IndentedRenderable', bases=[], keywords=[], body=[AnnAssign(target=Name(id='renderable', ctx=Store()), annotation=Name(id='RenderableType', ctx=Load()), simple=1), AnnAssign(target=Name(id='indent', ctx=Store()), annotation=Name(id='int', ctx=Load()), simple=1), FunctionDef(name='__rich_console__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='console', annotation=Name(id='Console', ctx=Load())), arg(arg='options', annotation=Name(id='ConsoleOptions', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='segments', ctx=Store())], value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='render', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='renderable', ctx=Load()), Name(id='options', ctx=Load())], keywords=[])), Assign(targets=[Name(id='lines', ctx=Store())], value=Call(func=Attribute(value=Name(id='Segment', ctx=Load()), attr='split_lines', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[])), For(target=Name(id='line', ctx=Store()), iter=Name(id='lines', ctx=Load()), body=[Expr(value=Yield(value=Call(func=Name(id='Segment', ctx=Load()), args=[BinOp(left=Constant(value=' '), op=Mult(), right=Attribute(value=Name(id='self', ctx=Load()), attr='indent', ctx=Load()))], keywords=[]))), Expr(value=YieldFrom(value=Name(id='line', ctx=Load()))), Expr(value=Yield(value=Call(func=Name(id='Segment', ctx=Load()), args=[Constant(value='\n')], keywords=[])))], orelse=[])], decorator_list=[], returns=Name(id='RenderResult', ctx=Load()))], decorator_list=[Name(id='dataclass', ctx=Load())]), ClassDef(name='RichPipStreamHandler', bases=[Name(id='RichHandler', ctx=Load())], keywords=[], body=[AnnAssign(target=Name(id='KEYWORDS', ctx=Store()), annotation=Subscript(value=Name(id='ClassVar', ctx=Load()), slice=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='stream', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TextIO', ctx=Load()), ctx=Load())), arg(arg='no_color', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='console', value=Call(func=Name(id='Console', ctx=Load()), args=[], keywords=[keyword(arg='file', value=Name(id='stream', ctx=Load())), keyword(arg='no_color', value=Name(id='no_color', ctx=Load())), keyword(arg='soft_wrap', value=Constant(value=True))])), keyword(arg='show_time', value=Constant(value=False)), keyword(arg='show_level', value=Constant(value=False)), keyword(arg='show_path', value=Constant(value=False)), keyword(arg='highlighter', value=Call(func=Name(id='NullHighlighter', ctx=Load()), args=[], keywords=[]))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='emit', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='record', annotation=Attribute(value=Name(id='logging', ctx=Load()), attr='LogRecord', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Name(id='style', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Style', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=1), Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='record', ctx=Load()), attr='args', ctx=Load()), Name(id='tuple', ctx=Load())], keywords=[])), If(test=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='record', ctx=Load()), Constant(value='rich'), Constant(value=False)], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='rich_renderable', ctx=Store())], ctx=Store())], value=Attribute(value=Name(id='record', ctx=Load()), attr='args', ctx=Load())), Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='rich_renderable', ctx=Load()), Tuple(elts=[Name(id='ConsoleRenderable', ctx=Load()), Name(id='RichCast', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load())], keywords=[]), msg=JoinedStr(values=[FormattedValue(value=Name(id='rich_renderable', ctx=Load()), conversion=-1), Constant(value=' is not rich-console-renderable')])), AnnAssign(target=Name(id='renderable', ctx=Store()), annotation=Name(id='RenderableType', ctx=Load()), value=Call(func=Name(id='IndentedRenderable', ctx=Load()), args=[Name(id='rich_renderable', ctx=Load())], keywords=[keyword(arg='indent', value=Call(func=Name(id='get_indentation', ctx=Load()), args=[], keywords=[]))]), simple=1)], orelse=[Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='format', ctx=Load()), args=[Name(id='record', ctx=Load())], keywords=[])), Assign(targets=[Name(id='renderable', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='render_message', ctx=Load()), args=[Name(id='record', ctx=Load()), Name(id='message', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='record', ctx=Load()), attr='levelno', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[If(test=Compare(left=Attribute(value=Name(id='record', ctx=Load()), attr='levelno', ctx=Load()), ops=[GtE()], comparators=[Attribute(value=Name(id='logging', ctx=Load()), attr='ERROR', ctx=Load())]), body=[Assign(targets=[Name(id='style', ctx=Store())], value=Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='color', value=Constant(value='red'))]))], orelse=[If(test=Compare(left=Attribute(value=Name(id='record', ctx=Load()), attr='levelno', ctx=Load()), ops=[GtE()], comparators=[Attribute(value=Name(id='logging', ctx=Load()), attr='WARNING', ctx=Load())]), body=[Assign(targets=[Name(id='style', ctx=Store())], value=Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='color', value=Constant(value='yellow'))]))], orelse=[])])], orelse=[])]), Try(body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='console', ctx=Load()), attr='print', ctx=Load()), args=[Name(id='renderable', ctx=Load())], keywords=[keyword(arg='overflow', value=Constant(value='ignore')), keyword(arg='crop', value=Constant(value=False)), keyword(arg='style', value=Name(id='style', ctx=Load()))]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='handleError', ctx=Load()), args=[Name(id='record', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='handleError', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='record', annotation=Attribute(value=Name(id='logging', ctx=Load()), attr='LogRecord', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Called when logging is unable to log some output.')), Assign(targets=[Tuple(elts=[Name(id='exc_class', ctx=Store()), Name(id='exc', ctx=Store())], ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='sys', ctx=Load()), attr='exc_info', ctx=Load()), args=[], keywords=[]), slice=Slice(upper=Constant(value=2)), ctx=Load())), If(test=BoolOp(op=And(), values=[Name(id='exc_class', ctx=Load()), Name(id='exc', ctx=Load()), Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='console', ctx=Load()), attr='file', ctx=Load()), ops=[Is()], comparators=[Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load())]), Call(func=Name(id='_is_broken_pipe_error', ctx=Load()), args=[Name(id='exc_class', ctx=Load()), Name(id='exc', ctx=Load())], keywords=[])]), body=[Raise(exc=Call(func=Name(id='BrokenStdoutLoggingError', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='handleError', ctx=Load()), args=[Name(id='record', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='BetterRotatingFileHandler', bases=[Attribute(value=Attribute(value=Name(id='logging', ctx=Load()), attr='handlers', ctx=Load()), attr='RotatingFileHandler', ctx=Load())], keywords=[], body=[FunctionDef(name='_open', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='ensure_dir', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='baseFilename', ctx=Load())], keywords=[])], keywords=[])), Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='_open', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='TextIOWrapper', ctx=Load()))], decorator_list=[]), ClassDef(name='MaxLevelFilter', bases=[Name(id='Filter', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='level', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='level', ctx=Store())], value=Name(id='level', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='filter', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='record', annotation=Attribute(value=Name(id='logging', ctx=Load()), attr='LogRecord', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Compare(left=Attribute(value=Name(id='record', ctx=Load()), attr='levelno', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='level', ctx=Load())]))], decorator_list=[], returns=Name(id='bool', ctx=Load()))], decorator_list=[]), ClassDef(name='ExcludeLoggerFilter', bases=[Name(id='Filter', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    A logging Filter that excludes records from a logger (or its children).\n    ')), FunctionDef(name='filter', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='record', annotation=Attribute(value=Name(id='logging', ctx=Load()), attr='LogRecord', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='filter', ctx=Load()), args=[Name(id='record', ctx=Load())], keywords=[])))], decorator_list=[], returns=Name(id='bool', ctx=Load()))], decorator_list=[]), FunctionDef(name='setup_logging', args=arguments(posonlyargs=[], args=[arg(arg='verbosity', annotation=Name(id='int', ctx=Load())), arg(arg='no_color', annotation=Name(id='bool', ctx=Load())), arg(arg='user_log_file', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Configures and sets up all of the logging\n\n    Returns the requested logging level, as its integer value.\n    ')), If(test=Compare(left=Name(id='verbosity', ctx=Load()), ops=[GtE()], comparators=[Constant(value=2)]), body=[Assign(targets=[Name(id='level_number', ctx=Store())], value=Attribute(value=Name(id='logging', ctx=Load()), attr='DEBUG', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='verbosity', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='level_number', ctx=Store())], value=Name(id='VERBOSE', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='verbosity', ctx=Load()), ops=[Eq()], comparators=[UnaryOp(op=USub(), operand=Constant(value=1))]), body=[Assign(targets=[Name(id='level_number', ctx=Store())], value=Attribute(value=Name(id='logging', ctx=Load()), attr='WARNING', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='verbosity', ctx=Load()), ops=[Eq()], comparators=[UnaryOp(op=USub(), operand=Constant(value=2))]), body=[Assign(targets=[Name(id='level_number', ctx=Store())], value=Attribute(value=Name(id='logging', ctx=Load()), attr='ERROR', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='verbosity', ctx=Load()), ops=[LtE()], comparators=[UnaryOp(op=USub(), operand=Constant(value=3))]), body=[Assign(targets=[Name(id='level_number', ctx=Store())], value=Attribute(value=Name(id='logging', ctx=Load()), attr='CRITICAL', ctx=Load()))], orelse=[Assign(targets=[Name(id='level_number', ctx=Store())], value=Attribute(value=Name(id='logging', ctx=Load()), attr='INFO', ctx=Load()))])])])])]), Assign(targets=[Name(id='level', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLevelName', ctx=Load()), args=[Name(id='level_number', ctx=Load())], keywords=[])), Assign(targets=[Name(id='include_user_log', ctx=Store())], value=Compare(left=Name(id='user_log_file', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), If(test=Name(id='include_user_log', ctx=Load()), body=[Assign(targets=[Name(id='additional_log_file', ctx=Store())], value=Name(id='user_log_file', ctx=Load())), Assign(targets=[Name(id='root_level', ctx=Store())], value=Constant(value='DEBUG'))], orelse=[Assign(targets=[Name(id='additional_log_file', ctx=Store())], value=Constant(value='/dev/null')), Assign(targets=[Name(id='root_level', ctx=Store())], value=Name(id='level', ctx=Load()))]), Assign(targets=[Name(id='vendored_log_level', ctx=Store())], value=IfExp(test=Compare(left=Name(id='level', ctx=Load()), ops=[In()], comparators=[List(elts=[Constant(value='INFO'), Constant(value='ERROR')], ctx=Load())]), body=Constant(value='WARNING'), orelse=Constant(value='DEBUG'))), Assign(targets=[Name(id='log_streams', ctx=Store())], value=Dict(keys=[Constant(value='stdout'), Constant(value='stderr')], values=[Constant(value='ext://sys.stdout'), Constant(value='ext://sys.stderr')])), Assign(targets=[Name(id='handler_classes', ctx=Store())], value=Dict(keys=[Constant(value='stream'), Constant(value='file')], values=[Constant(value='pip._internal.utils.logging.RichPipStreamHandler'), Constant(value='pip._internal.utils.logging.BetterRotatingFileHandler')])), Assign(targets=[Name(id='handlers', ctx=Store())], value=BinOp(left=List(elts=[Constant(value='console'), Constant(value='console_errors'), Constant(value='console_subprocess')], ctx=Load()), op=Add(), right=IfExp(test=Name(id='include_user_log', ctx=Load()), body=List(elts=[Constant(value='user_log')], ctx=Load()), orelse=List(elts=[], ctx=Load())))), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='logging', ctx=Load()), attr='config', ctx=Load()), attr='dictConfig', ctx=Load()), args=[Dict(keys=[Constant(value='version'), Constant(value='disable_existing_loggers'), Constant(value='filters'), Constant(value='formatters'), Constant(value='handlers'), Constant(value='root'), Constant(value='loggers')], values=[Constant(value=1), Constant(value=False), Dict(keys=[Constant(value='exclude_warnings'), Constant(value='restrict_to_subprocess'), Constant(value='exclude_subprocess')], values=[Dict(keys=[Constant(value='()'), Constant(value='level')], values=[Constant(value='pip._internal.utils.logging.MaxLevelFilter'), Attribute(value=Name(id='logging', ctx=Load()), attr='WARNING', ctx=Load())]), Dict(keys=[Constant(value='()'), Constant(value='name')], values=[Constant(value='logging.Filter'), Attribute(value=Name(id='subprocess_logger', ctx=Load()), attr='name', ctx=Load())]), Dict(keys=[Constant(value='()'), Constant(value='name')], values=[Constant(value='pip._internal.utils.logging.ExcludeLoggerFilter'), Attribute(value=Name(id='subprocess_logger', ctx=Load()), attr='name', ctx=Load())])]), Dict(keys=[Constant(value='indent'), Constant(value='indent_with_timestamp')], values=[Dict(keys=[Constant(value='()'), Constant(value='format')], values=[Name(id='IndentingFormatter', ctx=Load()), Constant(value='%(message)s')]), Dict(keys=[Constant(value='()'), Constant(value='format'), Constant(value='add_timestamp')], values=[Name(id='IndentingFormatter', ctx=Load()), Constant(value='%(message)s'), Constant(value=True)])]), Dict(keys=[Constant(value='console'), Constant(value='console_errors'), Constant(value='console_subprocess'), Constant(value='user_log')], values=[Dict(keys=[Constant(value='level'), Constant(value='class'), Constant(value='no_color'), Constant(value='stream'), Constant(value='filters'), Constant(value='formatter')], values=[Name(id='level', ctx=Load()), Subscript(value=Name(id='handler_classes', ctx=Load()), slice=Constant(value='stream'), ctx=Load()), Name(id='no_color', ctx=Load()), Subscript(value=Name(id='log_streams', ctx=Load()), slice=Constant(value='stdout'), ctx=Load()), List(elts=[Constant(value='exclude_subprocess'), Constant(value='exclude_warnings')], ctx=Load()), Constant(value='indent')]), Dict(keys=[Constant(value='level'), Constant(value='class'), Constant(value='no_color'), Constant(value='stream'), Constant(value='filters'), Constant(value='formatter')], values=[Constant(value='WARNING'), Subscript(value=Name(id='handler_classes', ctx=Load()), slice=Constant(value='stream'), ctx=Load()), Name(id='no_color', ctx=Load()), Subscript(value=Name(id='log_streams', ctx=Load()), slice=Constant(value='stderr'), ctx=Load()), List(elts=[Constant(value='exclude_subprocess')], ctx=Load()), Constant(value='indent')]), Dict(keys=[Constant(value='level'), Constant(value='class'), Constant(value='stream'), Constant(value='no_color'), Constant(value='filters'), Constant(value='formatter')], values=[Name(id='level', ctx=Load()), Subscript(value=Name(id='handler_classes', ctx=Load()), slice=Constant(value='stream'), ctx=Load()), Subscript(value=Name(id='log_streams', ctx=Load()), slice=Constant(value='stderr'), ctx=Load()), Name(id='no_color', ctx=Load()), List(elts=[Constant(value='restrict_to_subprocess')], ctx=Load()), Constant(value='indent')]), Dict(keys=[Constant(value='level'), Constant(value='class'), Constant(value='filename'), Constant(value='encoding'), Constant(value='delay'), Constant(value='formatter')], values=[Constant(value='DEBUG'), Subscript(value=Name(id='handler_classes', ctx=Load()), slice=Constant(value='file'), ctx=Load()), Name(id='additional_log_file', ctx=Load()), Constant(value='utf-8'), Constant(value=True), Constant(value='indent_with_timestamp')])]), Dict(keys=[Constant(value='level'), Constant(value='handlers')], values=[Name(id='root_level', ctx=Load()), Name(id='handlers', ctx=Load())]), Dict(keys=[Constant(value='pip._vendor')], values=[Dict(keys=[Constant(value='level')], values=[Name(id='vendored_log_level', ctx=Load())])])])], keywords=[])), Return(value=Name(id='level_number', ctx=Load()))], decorator_list=[], returns=Name(id='int', ctx=Load()))], type_ignores=[])