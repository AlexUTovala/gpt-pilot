Module(body=[Import(names=[alias(name='functools')]), ImportFrom(module='typing', names=[alias(name='Callable'), alias(name='Generator'), alias(name='Iterable'), alias(name='Iterator'), alias(name='Optional'), alias(name='Tuple')], level=0), ImportFrom(module='pip._vendor.rich.progress', names=[alias(name='BarColumn'), alias(name='DownloadColumn'), alias(name='FileSizeColumn'), alias(name='Progress'), alias(name='ProgressColumn'), alias(name='SpinnerColumn'), alias(name='TextColumn'), alias(name='TimeElapsedColumn'), alias(name='TimeRemainingColumn'), alias(name='TransferSpeedColumn')], level=0), ImportFrom(module='pip._internal.utils.logging', names=[alias(name='get_indentation')], level=0), Assign(targets=[Name(id='DownloadProgressRenderer', ctx=Store())], value=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='bytes', ctx=Load()), ctx=Load())], ctx=Load()), Subscript(value=Name(id='Iterator', ctx=Load()), slice=Name(id='bytes', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='_rich_progress_bar', args=arguments(posonlyargs=[], args=[arg(arg='iterable', annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='bytes', ctx=Load()), ctx=Load()))], kwonlyargs=[arg(arg='bar_type', annotation=Name(id='str', ctx=Load())), arg(arg='size', annotation=Name(id='int', ctx=Load()))], kw_defaults=[None, None], defaults=[]), body=[Assert(test=Compare(left=Name(id='bar_type', ctx=Load()), ops=[Eq()], comparators=[Constant(value='on')]), msg=Constant(value='This should only be used in the default mode.')), If(test=UnaryOp(op=Not(), operand=Name(id='size', ctx=Load())), body=[Assign(targets=[Name(id='total', ctx=Store())], value=Call(func=Name(id='float', ctx=Load()), args=[Constant(value='inf')], keywords=[])), AnnAssign(target=Name(id='columns', ctx=Store()), annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='ProgressColumn', ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load()), value=Tuple(elts=[Call(func=Name(id='TextColumn', ctx=Load()), args=[Constant(value='[progress.description]{task.description}')], keywords=[]), Call(func=Name(id='SpinnerColumn', ctx=Load()), args=[Constant(value='line')], keywords=[keyword(arg='speed', value=Constant(value=1.5))]), Call(func=Name(id='FileSizeColumn', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='TransferSpeedColumn', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='TimeElapsedColumn', ctx=Load()), args=[], keywords=[])], ctx=Load()), simple=1)], orelse=[Assign(targets=[Name(id='total', ctx=Store())], value=Name(id='size', ctx=Load())), Assign(targets=[Name(id='columns', ctx=Store())], value=Tuple(elts=[Call(func=Name(id='TextColumn', ctx=Load()), args=[Constant(value='[progress.description]{task.description}')], keywords=[]), Call(func=Name(id='BarColumn', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='DownloadColumn', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='TransferSpeedColumn', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='TextColumn', ctx=Load()), args=[Constant(value='eta')], keywords=[]), Call(func=Name(id='TimeRemainingColumn', ctx=Load()), args=[], keywords=[])], ctx=Load()))]), Assign(targets=[Name(id='progress', ctx=Store())], value=Call(func=Name(id='Progress', ctx=Load()), args=[Starred(value=Name(id='columns', ctx=Load()), ctx=Load())], keywords=[keyword(arg='refresh_per_second', value=Constant(value=30))])), Assign(targets=[Name(id='task_id', ctx=Store())], value=Call(func=Attribute(value=Name(id='progress', ctx=Load()), attr='add_task', ctx=Load()), args=[BinOp(left=Constant(value=' '), op=Mult(), right=BinOp(left=Call(func=Name(id='get_indentation', ctx=Load()), args=[], keywords=[]), op=Add(), right=Constant(value=2)))], keywords=[keyword(arg='total', value=Name(id='total', ctx=Load()))])), With(items=[withitem(context_expr=Name(id='progress', ctx=Load()))], body=[For(target=Name(id='chunk', ctx=Store()), iter=Name(id='iterable', ctx=Load()), body=[Expr(value=Yield(value=Name(id='chunk', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='progress', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='task_id', ctx=Load())], keywords=[keyword(arg='advance', value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='chunk', ctx=Load())], keywords=[]))]))], orelse=[])])], decorator_list=[], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Name(id='bytes', ctx=Load()), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='get_download_progress_renderer', args=arguments(posonlyargs=[], args=[], kwonlyargs=[arg(arg='bar_type', annotation=Name(id='str', ctx=Load())), arg(arg='size', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()))], kw_defaults=[None, Constant(value=None)], defaults=[]), body=[Expr(value=Constant(value='Get an object that can be used to render the download progress.\n\n    Returns a callable, that takes an iterable to "wrap".\n    ')), If(test=Compare(left=Name(id='bar_type', ctx=Load()), ops=[Eq()], comparators=[Constant(value='on')]), body=[Return(value=Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='partial', ctx=Load()), args=[Name(id='_rich_progress_bar', ctx=Load())], keywords=[keyword(arg='bar_type', value=Name(id='bar_type', ctx=Load())), keyword(arg='size', value=Name(id='size', ctx=Load()))]))], orelse=[Return(value=Name(id='iter', ctx=Load()))])], decorator_list=[], returns=Name(id='DownloadProgressRenderer', ctx=Load()))], type_ignores=[])