Module(body=[Import(names=[alias(name='email.message')]), Import(names=[alias(name='importlib.metadata')]), Import(names=[alias(name='os')]), Import(names=[alias(name='pathlib')]), Import(names=[alias(name='zipfile')]), ImportFrom(module='typing', names=[alias(name='Collection'), alias(name='Dict'), alias(name='Iterable'), alias(name='Iterator'), alias(name='Mapping'), alias(name='Optional'), alias(name='Sequence'), alias(name='cast')], level=0), ImportFrom(module='pip._vendor.packaging.requirements', names=[alias(name='Requirement')], level=0), ImportFrom(module='pip._vendor.packaging.utils', names=[alias(name='NormalizedName'), alias(name='canonicalize_name')], level=0), ImportFrom(module='pip._vendor.packaging.version', names=[alias(name='parse', asname='parse_version')], level=0), ImportFrom(module='pip._internal.exceptions', names=[alias(name='InvalidWheel'), alias(name='UnsupportedWheel')], level=0), ImportFrom(module='pip._internal.metadata.base', names=[alias(name='BaseDistribution'), alias(name='BaseEntryPoint'), alias(name='DistributionVersion'), alias(name='InfoPath'), alias(name='Wheel')], level=0), ImportFrom(module='pip._internal.utils.misc', names=[alias(name='normalize_path')], level=0), ImportFrom(module='pip._internal.utils.temp_dir', names=[alias(name='TempDirectory')], level=0), ImportFrom(module='pip._internal.utils.wheel', names=[alias(name='parse_wheel'), alias(name='read_wheel_metadata_file')], level=0), ImportFrom(module='_compat', names=[alias(name='BasePath'), alias(name='get_dist_name')], level=1), ClassDef(name='WheelDistribution', bases=[Attribute(value=Attribute(value=Name(id='importlib', ctx=Load()), attr='metadata', ctx=Load()), attr='Distribution', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='An ``importlib.metadata.Distribution`` read from a wheel.\n\n    Although ``importlib.metadata.PathDistribution`` accepts ``zipfile.Path``,\n    its implementation is too "lazy" for pip\'s needs (we can\'t keep the ZipFile\n    handle open for the entire lifetime of the distribution object).\n\n    This implementation eagerly reads the entire metadata directory into the\n    memory instead, and operates from that.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='files', annotation=Subscript(value=Name(id='Mapping', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='pathlib', ctx=Load()), attr='PurePosixPath', ctx=Load()), Name(id='bytes', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='info_location', annotation=Attribute(value=Name(id='pathlib', ctx=Load()), attr='PurePosixPath', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_files', ctx=Store())], value=Name(id='files', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='info_location', ctx=Store())], value=Name(id='info_location', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='from_zipfile', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='zf', annotation=Attribute(value=Name(id='zipfile', ctx=Load()), attr='ZipFile', ctx=Load())), arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='location', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='info_dir', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Name(id='parse_wheel', ctx=Load()), args=[Name(id='zf', ctx=Load()), Name(id='name', ctx=Load())], keywords=[])), Assign(targets=[Name(id='paths', ctx=Store())], value=GeneratorExp(elt=Tuple(elts=[Name(id='name', ctx=Load()), Call(func=Attribute(value=Name(id='pathlib', ctx=Load()), attr='PurePosixPath', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='/'), Constant(value=1)], keywords=[]), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[])], ctx=Load()), generators=[comprehension(target=Name(id='name', ctx=Store()), iter=Call(func=Attribute(value=Name(id='zf', ctx=Load()), attr='namelist', ctx=Load()), args=[], keywords=[]), ifs=[Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='startswith', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='info_dir', ctx=Load()), conversion=-1), Constant(value='/')])], keywords=[])], is_async=0)])), Assign(targets=[Name(id='files', ctx=Store())], value=DictComp(key=Name(id='relpath', ctx=Load()), value=Call(func=Name(id='read_wheel_metadata_file', ctx=Load()), args=[Name(id='zf', ctx=Load()), Name(id='fullpath', ctx=Load())], keywords=[]), generators=[comprehension(target=Tuple(elts=[Name(id='fullpath', ctx=Store()), Name(id='relpath', ctx=Store())], ctx=Store()), iter=Name(id='paths', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='info_location', ctx=Store())], value=Call(func=Attribute(value=Name(id='pathlib', ctx=Load()), attr='PurePosixPath', ctx=Load()), args=[Name(id='location', ctx=Load()), Name(id='info_dir', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='cls', ctx=Load()), args=[Name(id='files', ctx=Load()), Name(id='info_location', ctx=Load())], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Constant(value='WheelDistribution')), FunctionDef(name='iterdir', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='path', annotation=Name(id='InfoPath', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='pathlib', ctx=Load()), attr='PurePosixPath', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])], keywords=[]), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_files', ctx=Load())]), body=[Return(value=Call(func=Name(id='iter', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_files', ctx=Load())], keywords=[]))], orelse=[]), Raise(exc=Call(func=Name(id='FileNotFoundError', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Attribute(value=Name(id='pathlib', ctx=Load()), attr='PurePosixPath', ctx=Load()), ctx=Load())), FunctionDef(name='read_text', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='filename', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Name(id='data', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_files', ctx=Load()), slice=Call(func=Attribute(value=Name(id='pathlib', ctx=Load()), attr='PurePosixPath', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[]), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Return(value=Constant(value=None))])], orelse=[], finalbody=[]), Try(body=[Assign(targets=[Name(id='text', ctx=Store())], value=Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[]))], handlers=[ExceptHandler(type=Name(id='UnicodeDecodeError', ctx=Load()), name='e', body=[Assign(targets=[Name(id='wheel', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='info_location', ctx=Load()), attr='parent', ctx=Load())), Assign(targets=[Name(id='error', ctx=Store())], value=JoinedStr(values=[Constant(value='Error decoding metadata for '), FormattedValue(value=Name(id='wheel', ctx=Load()), conversion=-1), Constant(value=': '), FormattedValue(value=Name(id='e', ctx=Load()), conversion=-1), Constant(value=' in '), FormattedValue(value=Name(id='filename', ctx=Load()), conversion=-1), Constant(value=' file')])), Raise(exc=Call(func=Name(id='UnsupportedWheel', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[]), Return(value=Name(id='text', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], decorator_list=[]), ClassDef(name='Distribution', bases=[Name(id='BaseDistribution', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dist', annotation=Attribute(value=Attribute(value=Name(id='importlib', ctx=Load()), attr='metadata', ctx=Load()), attr='Distribution', ctx=Load())), arg(arg='info_location', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='BasePath', ctx=Load()), ctx=Load())), arg(arg='installed_location', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='BasePath', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_dist', ctx=Store())], value=Name(id='dist', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_info_location', ctx=Store())], value=Name(id='info_location', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_installed_location', ctx=Store())], value=Name(id='installed_location', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='from_directory', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='directory', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='info_location', ctx=Store())], value=Call(func=Attribute(value=Name(id='pathlib', ctx=Load()), attr='Path', ctx=Load()), args=[Name(id='directory', ctx=Load())], keywords=[])), Assign(targets=[Name(id='dist', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='importlib', ctx=Load()), attr='metadata', ctx=Load()), attr='Distribution', ctx=Load()), attr='at', ctx=Load()), args=[Name(id='info_location', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='cls', ctx=Load()), args=[Name(id='dist', ctx=Load()), Name(id='info_location', ctx=Load()), Attribute(value=Name(id='info_location', ctx=Load()), attr='parent', ctx=Load())], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Name(id='BaseDistribution', ctx=Load())), FunctionDef(name='from_metadata_file_contents', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='metadata_contents', annotation=Name(id='bytes', ctx=Load())), arg(arg='filename', annotation=Name(id='str', ctx=Load())), arg(arg='project_name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='temp_dir', ctx=Store())], value=Call(func=Attribute(value=Name(id='pathlib', ctx=Load()), attr='Path', ctx=Load()), args=[Attribute(value=Call(func=Name(id='TempDirectory', ctx=Load()), args=[], keywords=[keyword(arg='kind', value=Constant(value='metadata')), keyword(arg='globally_managed', value=Constant(value=True))]), attr='path', ctx=Load())], keywords=[])), Assign(targets=[Name(id='metadata_path', ctx=Store())], value=BinOp(left=Name(id='temp_dir', ctx=Load()), op=Div(), right=Constant(value='METADATA'))), Expr(value=Call(func=Attribute(value=Name(id='metadata_path', ctx=Load()), attr='write_bytes', ctx=Load()), args=[Name(id='metadata_contents', ctx=Load())], keywords=[])), Assign(targets=[Name(id='dist', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='importlib', ctx=Load()), attr='metadata', ctx=Load()), attr='Distribution', ctx=Load()), attr='at', ctx=Load()), args=[Attribute(value=Name(id='metadata_path', ctx=Load()), attr='parent', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='cls', ctx=Load()), args=[Name(id='dist', ctx=Load()), Attribute(value=Name(id='metadata_path', ctx=Load()), attr='parent', ctx=Load()), Constant(value=None)], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Name(id='BaseDistribution', ctx=Load())), FunctionDef(name='from_wheel', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='wheel', annotation=Name(id='Wheel', ctx=Load())), arg(arg='name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='wheel', ctx=Load()), attr='as_zipfile', ctx=Load()), args=[], keywords=[]), optional_vars=Name(id='zf', ctx=Store()))], body=[Assign(targets=[Name(id='dist', ctx=Store())], value=Call(func=Attribute(value=Name(id='WheelDistribution', ctx=Load()), attr='from_zipfile', ctx=Load()), args=[Name(id='zf', ctx=Load()), Name(id='name', ctx=Load()), Attribute(value=Name(id='wheel', ctx=Load()), attr='location', ctx=Load())], keywords=[]))])], handlers=[ExceptHandler(type=Attribute(value=Name(id='zipfile', ctx=Load()), attr='BadZipFile', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='InvalidWheel', ctx=Load()), args=[Attribute(value=Name(id='wheel', ctx=Load()), attr='location', ctx=Load()), Name(id='name', ctx=Load())], keywords=[]), cause=Name(id='e', ctx=Load()))]), ExceptHandler(type=Name(id='UnsupportedWheel', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='UnsupportedWheel', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1), Constant(value=' has an invalid wheel, '), FormattedValue(value=Name(id='e', ctx=Load()), conversion=-1)])], keywords=[]))])], orelse=[], finalbody=[]), Return(value=Call(func=Name(id='cls', ctx=Load()), args=[Name(id='dist', ctx=Load()), Attribute(value=Name(id='dist', ctx=Load()), attr='info_location', ctx=Load()), Call(func=Attribute(value=Name(id='pathlib', ctx=Load()), attr='PurePosixPath', ctx=Load()), args=[Attribute(value=Name(id='wheel', ctx=Load()), attr='location', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Name(id='BaseDistribution', ctx=Load())), FunctionDef(name='location', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_info_location', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=None))], orelse=[]), Return(value=Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_info_location', ctx=Load()), attr='parent', ctx=Load())], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='info_location', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_info_location', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=None))], orelse=[]), Return(value=Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_info_location', ctx=Load())], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='installed_location', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_installed_location', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=None))], orelse=[]), Return(value=Call(func=Name(id='normalize_path', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_installed_location', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='_get_dist_name_from_location', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Try to get the name from the metadata directory name.\n\n        This is much faster than reading metadata.\n        ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_info_location', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=None))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='stem', ctx=Store()), Name(id='suffix', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='splitext', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_info_location', ctx=Load()), attr='name', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='suffix', ctx=Load()), ops=[NotIn()], comparators=[Tuple(elts=[Constant(value='.dist-info'), Constant(value='.egg-info')], ctx=Load())]), body=[Return(value=Constant(value=None))], orelse=[]), Return(value=Subscript(value=Call(func=Attribute(value=Name(id='stem', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='-'), Constant(value=1)], keywords=[]), slice=Constant(value=0), ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='canonical_name', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='name', ctx=Store())], value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_dist_name_from_location', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='get_dist_name', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_dist', ctx=Load())], keywords=[])])), Return(value=Call(func=Name(id='canonicalize_name', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='NormalizedName', ctx=Load())), FunctionDef(name='version', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='parse_version', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_dist', ctx=Load()), attr='version', ctx=Load())], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='DistributionVersion', ctx=Load())), FunctionDef(name='is_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='path', annotation=Name(id='InfoPath', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_dist', ctx=Load()), attr='read_text', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])], keywords=[]), ops=[IsNot()], comparators=[Constant(value=None)]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='iter_distutils_script_names', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_info_location', ctx=Load()), Attribute(value=Name(id='pathlib', ctx=Load()), attr='Path', ctx=Load())], keywords=[])), body=[Return()], orelse=[]), For(target=Name(id='child', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_info_location', ctx=Load()), attr='joinpath', ctx=Load()), args=[Constant(value='scripts')], keywords=[]), attr='iterdir', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Yield(value=Attribute(value=Name(id='child', ctx=Load()), attr='name', ctx=Load())))], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='read_text', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='path', annotation=Name(id='InfoPath', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='content', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_dist', ctx=Load()), attr='read_text', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])], keywords=[])), If(test=Compare(left=Name(id='content', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='FileNotFoundError', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='content', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='iter_entry_points', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_dist', ctx=Load()), attr='entry_points', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='BaseEntryPoint', ctx=Load()), ctx=Load())), FunctionDef(name='_metadata_impl', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='cast', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='email', ctx=Load()), attr='message', ctx=Load()), attr='Message', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_dist', ctx=Load()), attr='metadata', ctx=Load())], keywords=[]))], decorator_list=[], returns=Attribute(value=Attribute(value=Name(id='email', ctx=Load()), attr='message', ctx=Load()), attr='Message', ctx=Load())), FunctionDef(name='iter_provided_extras', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='metadata', ctx=Load()), attr='get_all', ctx=Load()), args=[Constant(value='Provides-Extra'), List(elts=[], ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='is_extra_provided', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='extra', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=Compare(left=Call(func=Name(id='canonicalize_name', ctx=Load()), args=[Name(id='provided_extra', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='canonicalize_name', ctx=Load()), args=[Name(id='extra', ctx=Load())], keywords=[])]), generators=[comprehension(target=Name(id='provided_extra', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='metadata', ctx=Load()), attr='get_all', ctx=Load()), args=[Constant(value='Provides-Extra'), List(elts=[], ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='iter_dependencies', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='extras', annotation=Subscript(value=Name(id='Collection', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Tuple(elts=[], ctx=Load())]), body=[AnnAssign(target=Name(id='contexts', ctx=Store()), annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), value=ListComp(elt=Dict(keys=[Constant(value='extra')], values=[Name(id='e', ctx=Load())]), generators=[comprehension(target=Name(id='e', ctx=Store()), iter=Name(id='extras', ctx=Load()), ifs=[], is_async=0)]), simple=1), For(target=Name(id='req_string', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='metadata', ctx=Load()), attr='get_all', ctx=Load()), args=[Constant(value='Requires-Dist'), List(elts=[], ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='req', ctx=Store())], value=Call(func=Name(id='Requirement', ctx=Load()), args=[Name(id='req_string', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='req', ctx=Load()), attr='marker', ctx=Load())), body=[Expr(value=Yield(value=Name(id='req', ctx=Load())))], orelse=[If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Name(id='extras', ctx=Load())), Call(func=Attribute(value=Attribute(value=Name(id='req', ctx=Load()), attr='marker', ctx=Load()), attr='evaluate', ctx=Load()), args=[Dict(keys=[Constant(value='extra')], values=[Constant(value='')])], keywords=[])]), body=[Expr(value=Yield(value=Name(id='req', ctx=Load())))], orelse=[If(test=Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Attribute(value=Name(id='req', ctx=Load()), attr='marker', ctx=Load()), attr='evaluate', ctx=Load()), args=[Name(id='context', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='context', ctx=Store()), iter=Name(id='contexts', ctx=Load()), ifs=[], is_async=0)])], keywords=[]), body=[Expr(value=Yield(value=Name(id='req', ctx=Load())))], orelse=[])])])], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='Requirement', ctx=Load()), ctx=Load()))], decorator_list=[])], type_ignores=[])