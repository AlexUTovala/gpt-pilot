Module(body=[Import(names=[alias(name='logging')]), Import(names=[alias(name='os')]), Import(names=[alias(name='shlex')]), Import(names=[alias(name='subprocess')]), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING'), alias(name='Any'), alias(name='Callable'), alias(name='Iterable'), alias(name='List'), alias(name='Mapping'), alias(name='Optional'), alias(name='Union')], level=0), ImportFrom(module='pip._vendor.rich.markup', names=[alias(name='escape')], level=0), ImportFrom(module='pip._internal.cli.spinners', names=[alias(name='SpinnerInterface'), alias(name='open_spinner')], level=0), ImportFrom(module='pip._internal.exceptions', names=[alias(name='InstallationSubprocessError')], level=0), ImportFrom(module='pip._internal.utils.logging', names=[alias(name='VERBOSE'), alias(name='subprocess_logger')], level=0), ImportFrom(module='pip._internal.utils.misc', names=[alias(name='HiddenText')], level=0), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='typing', names=[alias(name='Literal')], level=0)], orelse=[]), Assign(targets=[Name(id='CommandArgs', ctx=Store())], value=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='HiddenText', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='make_command', args=arguments(posonlyargs=[], args=[], vararg=arg(arg='args', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='HiddenText', ctx=Load()), Name(id='CommandArgs', ctx=Load())], ctx=Load()), ctx=Load())), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Create a CommandArgs object.\n    ')), AnnAssign(target=Name(id='command_args', ctx=Store()), annotation=Name(id='CommandArgs', ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), For(target=Name(id='arg', ctx=Store()), iter=Name(id='args', ctx=Load()), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='arg', ctx=Load()), Name(id='list', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='command_args', ctx=Load()), attr='extend', ctx=Load()), args=[Name(id='arg', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='command_args', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='arg', ctx=Load())], keywords=[]))])], orelse=[]), Return(value=Name(id='command_args', ctx=Load()))], decorator_list=[], returns=Name(id='CommandArgs', ctx=Load())), FunctionDef(name='format_command_args', args=arguments(posonlyargs=[], args=[arg(arg='args', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), Name(id='CommandArgs', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Format command arguments for display.\n    ')), Return(value=Call(func=Attribute(value=Constant(value=' '), attr='join', ctx=Load()), args=[GeneratorExp(elt=IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='arg', ctx=Load()), Name(id='HiddenText', ctx=Load())], keywords=[]), body=Call(func=Attribute(value=Name(id='shlex', ctx=Load()), attr='quote', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='arg', ctx=Load())], keywords=[])], keywords=[]), orelse=Call(func=Attribute(value=Name(id='shlex', ctx=Load()), attr='quote', ctx=Load()), args=[Name(id='arg', ctx=Load())], keywords=[])), generators=[comprehension(target=Name(id='arg', ctx=Store()), iter=Name(id='args', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='reveal_command_args', args=arguments(posonlyargs=[], args=[arg(arg='args', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), Name(id='CommandArgs', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Return the arguments in their raw, unredacted form.\n    ')), Return(value=ListComp(elt=IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='arg', ctx=Load()), Name(id='HiddenText', ctx=Load())], keywords=[]), body=Attribute(value=Name(id='arg', ctx=Load()), attr='secret', ctx=Load()), orelse=Name(id='arg', ctx=Load())), generators=[comprehension(target=Name(id='arg', ctx=Store()), iter=Name(id='args', ctx=Load()), ifs=[], is_async=0)]))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='call_subprocess', args=arguments(posonlyargs=[], args=[arg(arg='cmd', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), Name(id='CommandArgs', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='show_stdout', annotation=Name(id='bool', ctx=Load())), arg(arg='cwd', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='on_returncode', annotation=Constant(value='Literal["raise", "warn", "ignore"]')), arg(arg='extra_ok_returncodes', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='extra_environ', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Mapping', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='unset_environ', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='spinner', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='SpinnerInterface', ctx=Load()), ctx=Load())), arg(arg='log_failed_cmd', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load())), arg(arg='stdout_only', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load()))], kwonlyargs=[arg(arg='command_desc', annotation=Name(id='str', ctx=Load()))], kw_defaults=[None], defaults=[Constant(value=False), Constant(value=None), Constant(value='raise'), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=True), Constant(value=False)]), body=[Expr(value=Constant(value="\n    Args:\n      show_stdout: if true, use INFO to log the subprocess's stderr and\n        stdout streams.  Otherwise, use DEBUG.  Defaults to False.\n      extra_ok_returncodes: an iterable of integer return codes that are\n        acceptable, in addition to 0. Defaults to None, which means [].\n      unset_environ: an iterable of environment variable names to unset\n        prior to calling subprocess.Popen().\n      log_failed_cmd: if false, failed commands are not logged, only raised.\n      stdout_only: if true, return only stdout, else return both. When true,\n        logging of both stdout and stderr occurs when the subprocess has\n        terminated, else logging occurs as subprocess output is produced.\n    ")), If(test=Compare(left=Name(id='extra_ok_returncodes', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='extra_ok_returncodes', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='unset_environ', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='unset_environ', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[]), If(test=Name(id='show_stdout', ctx=Load()), body=[AnnAssign(target=Name(id='log_subprocess', ctx=Store()), annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Constant(value=None)], ctx=Load()), ctx=Load()), value=Attribute(value=Name(id='subprocess_logger', ctx=Load()), attr='info', ctx=Load()), simple=1), Assign(targets=[Name(id='used_level', ctx=Store())], value=Attribute(value=Name(id='logging', ctx=Load()), attr='INFO', ctx=Load()))], orelse=[Assign(targets=[Name(id='log_subprocess', ctx=Store())], value=Attribute(value=Name(id='subprocess_logger', ctx=Load()), attr='verbose', ctx=Load())), Assign(targets=[Name(id='used_level', ctx=Store())], value=Name(id='VERBOSE', ctx=Load()))]), Assign(targets=[Name(id='showing_subprocess', ctx=Store())], value=Compare(left=Call(func=Attribute(value=Name(id='subprocess_logger', ctx=Load()), attr='getEffectiveLevel', ctx=Load()), args=[], keywords=[]), ops=[LtE()], comparators=[Name(id='used_level', ctx=Load())])), Assign(targets=[Name(id='use_spinner', ctx=Store())], value=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Name(id='showing_subprocess', ctx=Load())), Compare(left=Name(id='spinner', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])])), Expr(value=Call(func=Name(id='log_subprocess', ctx=Load()), args=[Constant(value='Running command %s'), Name(id='command_desc', ctx=Load())], keywords=[])), Assign(targets=[Name(id='env', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), If(test=Name(id='extra_environ', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='env', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='extra_environ', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='name', ctx=Store()), iter=Name(id='unset_environ', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='env', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='name', ctx=Load()), Constant(value=None)], keywords=[]))], orelse=[]), Try(body=[Assign(targets=[Name(id='proc', ctx=Store())], value=Call(func=Attribute(value=Name(id='subprocess', ctx=Load()), attr='Popen', ctx=Load()), args=[Call(func=Name(id='reveal_command_args', ctx=Load()), args=[Name(id='cmd', ctx=Load())], keywords=[])], keywords=[keyword(arg='stdin', value=Attribute(value=Name(id='subprocess', ctx=Load()), attr='PIPE', ctx=Load())), keyword(arg='stdout', value=Attribute(value=Name(id='subprocess', ctx=Load()), attr='PIPE', ctx=Load())), keyword(arg='stderr', value=IfExp(test=UnaryOp(op=Not(), operand=Name(id='stdout_only', ctx=Load())), body=Attribute(value=Name(id='subprocess', ctx=Load()), attr='STDOUT', ctx=Load()), orelse=Attribute(value=Name(id='subprocess', ctx=Load()), attr='PIPE', ctx=Load()))), keyword(arg='cwd', value=Name(id='cwd', ctx=Load())), keyword(arg='env', value=Name(id='env', ctx=Load())), keyword(arg='errors', value=Constant(value='backslashreplace'))]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='exc', body=[If(test=Name(id='log_failed_cmd', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='subprocess_logger', ctx=Load()), attr='critical', ctx=Load()), args=[Constant(value='Error %s while executing command %s'), Name(id='exc', ctx=Load()), Name(id='command_desc', ctx=Load())], keywords=[]))], orelse=[]), Raise()])], orelse=[], finalbody=[]), Assign(targets=[Name(id='all_output', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=UnaryOp(op=Not(), operand=Name(id='stdout_only', ctx=Load())), body=[Assert(test=Attribute(value=Name(id='proc', ctx=Load()), attr='stdout', ctx=Load())), Assert(test=Attribute(value=Name(id='proc', ctx=Load()), attr='stdin', ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='proc', ctx=Load()), attr='stdin', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), While(test=Constant(value=True), body=[AnnAssign(target=Name(id='line', ctx=Store()), annotation=Name(id='str', ctx=Load()), value=Call(func=Attribute(value=Attribute(value=Name(id='proc', ctx=Load()), attr='stdout', ctx=Load()), attr='readline', ctx=Load()), args=[], keywords=[]), simple=1), If(test=UnaryOp(op=Not(), operand=Name(id='line', ctx=Load())), body=[Break()], orelse=[]), Assign(targets=[Name(id='line', ctx=Store())], value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='rstrip', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='all_output', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Name(id='line', ctx=Load()), op=Add(), right=Constant(value='\n'))], keywords=[])), Expr(value=Call(func=Name(id='log_subprocess', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[])), If(test=Name(id='use_spinner', ctx=Load()), body=[Assert(test=Name(id='spinner', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='spinner', ctx=Load()), attr='spin', ctx=Load()), args=[], keywords=[]))], orelse=[])], orelse=[]), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='proc', ctx=Load()), attr='wait', ctx=Load()), args=[], keywords=[]))], handlers=[], orelse=[], finalbody=[If(test=Attribute(value=Name(id='proc', ctx=Load()), attr='stdout', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='proc', ctx=Load()), attr='stdout', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))], orelse=[])]), Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Name(id='all_output', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Tuple(elts=[Name(id='out', ctx=Store()), Name(id='err', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='proc', ctx=Load()), attr='communicate', ctx=Load()), args=[], keywords=[])), For(target=Name(id='out_line', ctx=Store()), iter=Call(func=Attribute(value=Name(id='out', ctx=Load()), attr='splitlines', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Name(id='log_subprocess', ctx=Load()), args=[Name(id='out_line', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='all_output', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='out', ctx=Load())], keywords=[])), For(target=Name(id='err_line', ctx=Store()), iter=Call(func=Attribute(value=Name(id='err', ctx=Load()), attr='splitlines', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Name(id='log_subprocess', ctx=Load()), args=[Name(id='err_line', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='all_output', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='err', ctx=Load())], keywords=[])), Assign(targets=[Name(id='output', ctx=Store())], value=Name(id='out', ctx=Load()))]), Assign(targets=[Name(id='proc_had_error', ctx=Store())], value=BoolOp(op=And(), values=[Attribute(value=Name(id='proc', ctx=Load()), attr='returncode', ctx=Load()), Compare(left=Attribute(value=Name(id='proc', ctx=Load()), attr='returncode', ctx=Load()), ops=[NotIn()], comparators=[Name(id='extra_ok_returncodes', ctx=Load())])])), If(test=Name(id='use_spinner', ctx=Load()), body=[Assert(test=Name(id='spinner', ctx=Load())), If(test=Name(id='proc_had_error', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='spinner', ctx=Load()), attr='finish', ctx=Load()), args=[Constant(value='error')], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='spinner', ctx=Load()), attr='finish', ctx=Load()), args=[Constant(value='done')], keywords=[]))])], orelse=[]), If(test=Name(id='proc_had_error', ctx=Load()), body=[If(test=Compare(left=Name(id='on_returncode', ctx=Load()), ops=[Eq()], comparators=[Constant(value='raise')]), body=[Assign(targets=[Name(id='error', ctx=Store())], value=Call(func=Name(id='InstallationSubprocessError', ctx=Load()), args=[], keywords=[keyword(arg='command_description', value=Name(id='command_desc', ctx=Load())), keyword(arg='exit_code', value=Attribute(value=Name(id='proc', ctx=Load()), attr='returncode', ctx=Load())), keyword(arg='output_lines', value=IfExp(test=UnaryOp(op=Not(), operand=Name(id='showing_subprocess', ctx=Load())), body=Name(id='all_output', ctx=Load()), orelse=Constant(value=None)))])), If(test=Name(id='log_failed_cmd', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='subprocess_logger', ctx=Load()), attr='error', ctx=Load()), args=[Constant(value='%s'), Name(id='error', ctx=Load())], keywords=[keyword(arg='extra', value=Dict(keys=[Constant(value='rich')], values=[Constant(value=True)]))])), Expr(value=Call(func=Attribute(value=Name(id='subprocess_logger', ctx=Load()), attr='verbose', ctx=Load()), args=[Constant(value='[bold magenta]full command[/]: [blue]%s[/]'), Call(func=Name(id='escape', ctx=Load()), args=[Call(func=Name(id='format_command_args', ctx=Load()), args=[Name(id='cmd', ctx=Load())], keywords=[])], keywords=[])], keywords=[keyword(arg='extra', value=Dict(keys=[Constant(value='markup')], values=[Constant(value=True)]))])), Expr(value=Call(func=Attribute(value=Name(id='subprocess_logger', ctx=Load()), attr='verbose', ctx=Load()), args=[Constant(value='[bold magenta]cwd[/]: %s'), Call(func=Name(id='escape', ctx=Load()), args=[BoolOp(op=Or(), values=[Name(id='cwd', ctx=Load()), Constant(value='[inherit]')])], keywords=[])], keywords=[keyword(arg='extra', value=Dict(keys=[Constant(value='markup')], values=[Constant(value=True)]))]))], orelse=[]), Raise(exc=Name(id='error', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='on_returncode', ctx=Load()), ops=[Eq()], comparators=[Constant(value='warn')]), body=[Expr(value=Call(func=Attribute(value=Name(id='subprocess_logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='Command "%s" had error code %s in %s'), Name(id='command_desc', ctx=Load()), Attribute(value=Name(id='proc', ctx=Load()), attr='returncode', ctx=Load()), Name(id='cwd', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='on_returncode', ctx=Load()), ops=[Eq()], comparators=[Constant(value='ignore')]), body=[Pass()], orelse=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='Invalid value: on_returncode='), FormattedValue(value=Name(id='on_returncode', ctx=Load()), conversion=114)])], keywords=[]))])])])], orelse=[]), Return(value=Name(id='output', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='runner_with_spinner_message', args=arguments(posonlyargs=[], args=[arg(arg='message', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Provide a subprocess_runner that shows a spinner message.\n\n    Intended for use with for BuildBackendHookCaller. Thus, the runner has\n    an API that matches what's expected by BuildBackendHookCaller.subprocess_runner.\n    ")), FunctionDef(name='runner', args=arguments(posonlyargs=[], args=[arg(arg='cmd', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='cwd', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='extra_environ', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Mapping', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open_spinner', ctx=Load()), args=[Name(id='message', ctx=Load())], keywords=[]), optional_vars=Name(id='spinner', ctx=Store()))], body=[Expr(value=Call(func=Name(id='call_subprocess', ctx=Load()), args=[Name(id='cmd', ctx=Load())], keywords=[keyword(arg='command_desc', value=Name(id='message', ctx=Load())), keyword(arg='cwd', value=Name(id='cwd', ctx=Load())), keyword(arg='extra_environ', value=Name(id='extra_environ', ctx=Load())), keyword(arg='spinner', value=Name(id='spinner', ctx=Load()))]))])], decorator_list=[], returns=Constant(value=None)), Return(value=Name(id='runner', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Constant(value=None)], ctx=Load()), ctx=Load()))], type_ignores=[])