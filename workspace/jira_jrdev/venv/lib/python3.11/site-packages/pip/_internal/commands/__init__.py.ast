Module(body=[Expr(value=Constant(value='\nPackage containing all pip commands\n')), Import(names=[alias(name='importlib')]), ImportFrom(module='collections', names=[alias(name='namedtuple')], level=0), ImportFrom(module='typing', names=[alias(name='Any'), alias(name='Dict'), alias(name='Optional')], level=0), ImportFrom(module='pip._internal.cli.base_command', names=[alias(name='Command')], level=0), Assign(targets=[Name(id='CommandInfo', ctx=Store())], value=Call(func=Name(id='namedtuple', ctx=Load()), args=[Constant(value='CommandInfo'), Constant(value='module_path, class_name, summary')], keywords=[])), AnnAssign(target=Name(id='commands_dict', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='CommandInfo', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[Constant(value='install'), Constant(value='download'), Constant(value='uninstall'), Constant(value='freeze'), Constant(value='inspect'), Constant(value='list'), Constant(value='show'), Constant(value='check'), Constant(value='config'), Constant(value='search'), Constant(value='cache'), Constant(value='index'), Constant(value='wheel'), Constant(value='hash'), Constant(value='completion'), Constant(value='debug'), Constant(value='help')], values=[Call(func=Name(id='CommandInfo', ctx=Load()), args=[Constant(value='pip._internal.commands.install'), Constant(value='InstallCommand'), Constant(value='Install packages.')], keywords=[]), Call(func=Name(id='CommandInfo', ctx=Load()), args=[Constant(value='pip._internal.commands.download'), Constant(value='DownloadCommand'), Constant(value='Download packages.')], keywords=[]), Call(func=Name(id='CommandInfo', ctx=Load()), args=[Constant(value='pip._internal.commands.uninstall'), Constant(value='UninstallCommand'), Constant(value='Uninstall packages.')], keywords=[]), Call(func=Name(id='CommandInfo', ctx=Load()), args=[Constant(value='pip._internal.commands.freeze'), Constant(value='FreezeCommand'), Constant(value='Output installed packages in requirements format.')], keywords=[]), Call(func=Name(id='CommandInfo', ctx=Load()), args=[Constant(value='pip._internal.commands.inspect'), Constant(value='InspectCommand'), Constant(value='Inspect the python environment.')], keywords=[]), Call(func=Name(id='CommandInfo', ctx=Load()), args=[Constant(value='pip._internal.commands.list'), Constant(value='ListCommand'), Constant(value='List installed packages.')], keywords=[]), Call(func=Name(id='CommandInfo', ctx=Load()), args=[Constant(value='pip._internal.commands.show'), Constant(value='ShowCommand'), Constant(value='Show information about installed packages.')], keywords=[]), Call(func=Name(id='CommandInfo', ctx=Load()), args=[Constant(value='pip._internal.commands.check'), Constant(value='CheckCommand'), Constant(value='Verify installed packages have compatible dependencies.')], keywords=[]), Call(func=Name(id='CommandInfo', ctx=Load()), args=[Constant(value='pip._internal.commands.configuration'), Constant(value='ConfigurationCommand'), Constant(value='Manage local and global configuration.')], keywords=[]), Call(func=Name(id='CommandInfo', ctx=Load()), args=[Constant(value='pip._internal.commands.search'), Constant(value='SearchCommand'), Constant(value='Search PyPI for packages.')], keywords=[]), Call(func=Name(id='CommandInfo', ctx=Load()), args=[Constant(value='pip._internal.commands.cache'), Constant(value='CacheCommand'), Constant(value="Inspect and manage pip's wheel cache.")], keywords=[]), Call(func=Name(id='CommandInfo', ctx=Load()), args=[Constant(value='pip._internal.commands.index'), Constant(value='IndexCommand'), Constant(value='Inspect information available from package indexes.')], keywords=[]), Call(func=Name(id='CommandInfo', ctx=Load()), args=[Constant(value='pip._internal.commands.wheel'), Constant(value='WheelCommand'), Constant(value='Build wheels from your requirements.')], keywords=[]), Call(func=Name(id='CommandInfo', ctx=Load()), args=[Constant(value='pip._internal.commands.hash'), Constant(value='HashCommand'), Constant(value='Compute hashes of package archives.')], keywords=[]), Call(func=Name(id='CommandInfo', ctx=Load()), args=[Constant(value='pip._internal.commands.completion'), Constant(value='CompletionCommand'), Constant(value='A helper command used for command completion.')], keywords=[]), Call(func=Name(id='CommandInfo', ctx=Load()), args=[Constant(value='pip._internal.commands.debug'), Constant(value='DebugCommand'), Constant(value='Show information useful for debugging.')], keywords=[]), Call(func=Name(id='CommandInfo', ctx=Load()), args=[Constant(value='pip._internal.commands.help'), Constant(value='HelpCommand'), Constant(value='Show help for commands.')], keywords=[])]), simple=1), FunctionDef(name='create_command', args=arguments(posonlyargs=[], args=[arg(arg='name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs', annotation=Name(id='Any', ctx=Load())), defaults=[]), body=[Expr(value=Constant(value='\n    Create an instance of the Command class with the given name.\n    ')), Assign(targets=[Tuple(elts=[Name(id='module_path', ctx=Store()), Name(id='class_name', ctx=Store()), Name(id='summary', ctx=Store())], ctx=Store())], value=Subscript(value=Name(id='commands_dict', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='module', ctx=Store())], value=Call(func=Attribute(value=Name(id='importlib', ctx=Load()), attr='import_module', ctx=Load()), args=[Name(id='module_path', ctx=Load())], keywords=[])), Assign(targets=[Name(id='command_class', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='module', ctx=Load()), Name(id='class_name', ctx=Load())], keywords=[])), Assign(targets=[Name(id='command', ctx=Store())], value=Call(func=Name(id='command_class', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Name(id='name', ctx=Load())), keyword(arg='summary', value=Name(id='summary', ctx=Load())), keyword(value=Name(id='kwargs', ctx=Load()))])), Return(value=Name(id='command', ctx=Load()))], decorator_list=[], returns=Name(id='Command', ctx=Load())), FunctionDef(name='get_similar_commands', args=arguments(posonlyargs=[], args=[arg(arg='name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Command name auto-correct.')), ImportFrom(module='difflib', names=[alias(name='get_close_matches')], level=0), Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='close_commands', ctx=Store())], value=Call(func=Name(id='get_close_matches', ctx=Load()), args=[Name(id='name', ctx=Load()), Call(func=Attribute(value=Name(id='commands_dict', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])), If(test=Name(id='close_commands', ctx=Load()), body=[Return(value=Subscript(value=Name(id='close_commands', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Constant(value=None))])], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], type_ignores=[])