Module(body=[Import(names=[alias(name='logging')]), Import(names=[alias(name='os.path')]), Import(names=[alias(name='pathlib')]), Import(names=[alias(name='re')]), Import(names=[alias(name='urllib.parse')]), Import(names=[alias(name='urllib.request')]), ImportFrom(module='typing', names=[alias(name='List'), alias(name='Optional'), alias(name='Tuple')], level=0), ImportFrom(module='pip._internal.exceptions', names=[alias(name='BadCommand'), alias(name='InstallationError')], level=0), ImportFrom(module='pip._internal.utils.misc', names=[alias(name='HiddenText'), alias(name='display_path'), alias(name='hide_url')], level=0), ImportFrom(module='pip._internal.utils.subprocess', names=[alias(name='make_command')], level=0), ImportFrom(module='pip._internal.vcs.versioncontrol', names=[alias(name='AuthInfo'), alias(name='RemoteNotFoundError'), alias(name='RemoteNotValidError'), alias(name='RevOptions'), alias(name='VersionControl'), alias(name='find_path_to_project_root_from_repo_root'), alias(name='vcs')], level=0), Assign(targets=[Name(id='urlsplit', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='urllib', ctx=Load()), attr='parse', ctx=Load()), attr='urlsplit', ctx=Load())), Assign(targets=[Name(id='urlunsplit', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='urllib', ctx=Load()), attr='parse', ctx=Load()), attr='urlunsplit', ctx=Load())), Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), Assign(targets=[Name(id='GIT_VERSION_REGEX', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='^git version (\\d+)\\.(\\d+)(?:\\.(\\d+))?.*$')], keywords=[])), Assign(targets=[Name(id='HASH_REGEX', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='^[a-fA-F0-9]{40}$')], keywords=[])), Assign(targets=[Name(id='SCP_REGEX', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value="^\n    # Optional user, e.g. 'git@'\n    (\\w+@)?\n    # Server, e.g. 'github.com'.\n    ([^/:]+):\n    # The server-side path. e.g. 'user/project.git'. Must start with an\n    # alphanumeric character so as not to be confusable with a Windows paths\n    # like 'C:/foo/bar' or 'C:\\foo\\bar'.\n    (\\w[^:]*)\n    $"), Attribute(value=Name(id='re', ctx=Load()), attr='VERBOSE', ctx=Load())], keywords=[])), FunctionDef(name='looks_like_hash', args=arguments(posonlyargs=[], args=[arg(arg='sha', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='bool', ctx=Load()), args=[Call(func=Attribute(value=Name(id='HASH_REGEX', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='sha', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), ClassDef(name='Git', bases=[Name(id='VersionControl', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='name', ctx=Store())], value=Constant(value='git')), Assign(targets=[Name(id='dirname', ctx=Store())], value=Constant(value='.git')), Assign(targets=[Name(id='repo_name', ctx=Store())], value=Constant(value='clone')), Assign(targets=[Name(id='schemes', ctx=Store())], value=Tuple(elts=[Constant(value='git+http'), Constant(value='git+https'), Constant(value='git+ssh'), Constant(value='git+git'), Constant(value='git+file')], ctx=Load())), Assign(targets=[Name(id='unset_environ', ctx=Store())], value=Tuple(elts=[Constant(value='GIT_DIR'), Constant(value='GIT_WORK_TREE')], ctx=Load())), Assign(targets=[Name(id='default_arg_rev', ctx=Store())], value=Constant(value='HEAD')), FunctionDef(name='get_base_rev_args', args=arguments(posonlyargs=[], args=[arg(arg='rev', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=List(elts=[Name(id='rev', ctx=Load())], ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='is_immutable_rev_checkout', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='url', annotation=Name(id='str', ctx=Load())), arg(arg='dest', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='rev_options', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_url_rev_options', ctx=Load()), args=[Call(func=Name(id='hide_url', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[])], keywords=[])), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='rev_options', ctx=Load()), attr='rev', ctx=Load())), body=[Return(value=Constant(value=False))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='is_commit_id_equal', ctx=Load()), args=[Name(id='dest', ctx=Load()), Attribute(value=Name(id='rev_options', ctx=Load()), attr='rev', ctx=Load())], keywords=[])), body=[Return(value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='is_tag_or_branch', ctx=Store())], value=Call(func=Name(id='bool', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_revision_sha', ctx=Load()), args=[Name(id='dest', ctx=Load()), Attribute(value=Name(id='rev_options', ctx=Load()), attr='rev', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())], keywords=[])), Return(value=UnaryOp(op=Not(), operand=Name(id='is_tag_or_branch', ctx=Load())))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='get_git_version', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='version', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='run_command', ctx=Load()), args=[List(elts=[Constant(value='version')], ctx=Load())], keywords=[keyword(arg='command_desc', value=Constant(value='git version')), keyword(arg='show_stdout', value=Constant(value=False)), keyword(arg='stdout_only', value=Constant(value=True))])), Assign(targets=[Name(id='match', ctx=Store())], value=Call(func=Attribute(value=Name(id='GIT_VERSION_REGEX', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='version', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='match', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value="Can't parse git version: %s"), Name(id='version', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[], ctx=Load()))], orelse=[]), Return(value=Tuple(elts=[Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value=1)], keywords=[])], keywords=[]), Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value=2)], keywords=[])], keywords=[])], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load())), FunctionDef(name='get_current_branch', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='location', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Return the current branch, or None if HEAD isn't at a branch\n        (e.g. detached HEAD).\n        ")), Assign(targets=[Name(id='args', ctx=Store())], value=List(elts=[Constant(value='symbolic-ref'), Constant(value='-q'), Constant(value='HEAD')], ctx=Load())), Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='run_command', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[keyword(arg='extra_ok_returncodes', value=Tuple(elts=[Constant(value=1)], ctx=Load())), keyword(arg='show_stdout', value=Constant(value=False)), keyword(arg='stdout_only', value=Constant(value=True)), keyword(arg='cwd', value=Name(id='location', ctx=Load()))])), Assign(targets=[Name(id='ref', ctx=Store())], value=Call(func=Attribute(value=Name(id='output', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[])), If(test=Call(func=Attribute(value=Name(id='ref', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='refs/heads/')], keywords=[]), body=[Return(value=Subscript(value=Name(id='ref', ctx=Load()), slice=Slice(lower=Call(func=Name(id='len', ctx=Load()), args=[Constant(value='refs/heads/')], keywords=[])), ctx=Load()))], orelse=[]), Return(value=Constant(value=None))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='get_revision_sha', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='dest', annotation=Name(id='str', ctx=Load())), arg(arg='rev', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return (sha_or_none, is_branch), where sha_or_none is a commit hash\n        if the revision names a remote branch or tag, otherwise None.\n\n        Args:\n          dest: the repository directory.\n          rev: the revision name.\n        ')), Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='run_command', ctx=Load()), args=[List(elts=[Constant(value='show-ref'), Name(id='rev', ctx=Load())], ctx=Load())], keywords=[keyword(arg='cwd', value=Name(id='dest', ctx=Load())), keyword(arg='show_stdout', value=Constant(value=False)), keyword(arg='stdout_only', value=Constant(value=True)), keyword(arg='on_returncode', value=Constant(value='ignore'))])), Assign(targets=[Name(id='refs', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='line', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='output', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]), attr='split', ctx=Load()), args=[Constant(value='\n')], keywords=[]), body=[Assign(targets=[Name(id='line', ctx=Store())], value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='rstrip', ctx=Load()), args=[Constant(value='\r')], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='line', ctx=Load())), body=[Continue()], orelse=[]), Try(body=[Assign(targets=[Tuple(elts=[Name(id='ref_sha', ctx=Store()), Name(id='ref_name', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=' ')], keywords=[keyword(arg='maxsplit', value=Constant(value=2))]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='unexpected show-ref line: '), FormattedValue(value=Name(id='line', ctx=Load()), conversion=114)])], keywords=[]))])], orelse=[], finalbody=[]), Assign(targets=[Subscript(value=Name(id='refs', ctx=Load()), slice=Name(id='ref_name', ctx=Load()), ctx=Store())], value=Name(id='ref_sha', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='branch_ref', ctx=Store())], value=JoinedStr(values=[Constant(value='refs/remotes/origin/'), FormattedValue(value=Name(id='rev', ctx=Load()), conversion=-1)])), Assign(targets=[Name(id='tag_ref', ctx=Store())], value=JoinedStr(values=[Constant(value='refs/tags/'), FormattedValue(value=Name(id='rev', ctx=Load()), conversion=-1)])), Assign(targets=[Name(id='sha', ctx=Store())], value=Call(func=Attribute(value=Name(id='refs', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='branch_ref', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='sha', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=Tuple(elts=[Name(id='sha', ctx=Load()), Constant(value=True)], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='sha', ctx=Store())], value=Call(func=Attribute(value=Name(id='refs', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='tag_ref', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Name(id='sha', ctx=Load()), Constant(value=False)], ctx=Load()))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), Name(id='bool', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='_should_fetch', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='dest', annotation=Name(id='str', ctx=Load())), arg(arg='rev', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Return true if rev is a ref or is a commit that we don't have locally.\n\n        Branches and tags are not considered in this method because they are\n        assumed to be always available locally (which is a normal outcome of\n        ``git clone`` and ``git fetch --tags``).\n        ")), If(test=Call(func=Attribute(value=Name(id='rev', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='refs/')], keywords=[]), body=[Return(value=Constant(value=True))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='looks_like_hash', ctx=Load()), args=[Name(id='rev', ctx=Load())], keywords=[])), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='has_commit', ctx=Load()), args=[Name(id='dest', ctx=Load()), Name(id='rev', ctx=Load())], keywords=[]), body=[Return(value=Constant(value=False))], orelse=[]), Return(value=Constant(value=True))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='resolve_revision', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='dest', annotation=Name(id='str', ctx=Load())), arg(arg='url', annotation=Name(id='HiddenText', ctx=Load())), arg(arg='rev_options', annotation=Name(id='RevOptions', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Resolve a revision to a new RevOptions object with the SHA1 of the\n        branch, tag, or ref if found.\n\n        Args:\n          rev_options: a RevOptions object.\n        ')), Assign(targets=[Name(id='rev', ctx=Store())], value=Attribute(value=Name(id='rev_options', ctx=Load()), attr='arg_rev', ctx=Load())), Assert(test=Compare(left=Name(id='rev', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Tuple(elts=[Name(id='sha', ctx=Store()), Name(id='is_branch', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='get_revision_sha', ctx=Load()), args=[Name(id='dest', ctx=Load()), Name(id='rev', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='sha', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='rev_options', ctx=Store())], value=Call(func=Attribute(value=Name(id='rev_options', ctx=Load()), attr='make_new', ctx=Load()), args=[Name(id='sha', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='rev_options', ctx=Load()), attr='branch_name', ctx=Store())], value=IfExp(test=Name(id='is_branch', ctx=Load()), body=Name(id='rev', ctx=Load()), orelse=Constant(value=None))), Return(value=Name(id='rev_options', ctx=Load()))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='looks_like_hash', ctx=Load()), args=[Name(id='rev', ctx=Load())], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value="Did not find branch or tag '%s', assuming revision or ref."), Name(id='rev', ctx=Load())], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='_should_fetch', ctx=Load()), args=[Name(id='dest', ctx=Load()), Name(id='rev', ctx=Load())], keywords=[])), body=[Return(value=Name(id='rev_options', ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='run_command', ctx=Load()), args=[Call(func=Name(id='make_command', ctx=Load()), args=[Constant(value='fetch'), Constant(value='-q'), Name(id='url', ctx=Load()), Call(func=Attribute(value=Name(id='rev_options', ctx=Load()), attr='to_args', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='cwd', value=Name(id='dest', ctx=Load()))])), Assign(targets=[Name(id='sha', ctx=Store())], value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='get_revision', ctx=Load()), args=[Name(id='dest', ctx=Load())], keywords=[keyword(arg='rev', value=Constant(value='FETCH_HEAD'))])), Assign(targets=[Name(id='rev_options', ctx=Store())], value=Call(func=Attribute(value=Name(id='rev_options', ctx=Load()), attr='make_new', ctx=Load()), args=[Name(id='sha', ctx=Load())], keywords=[])), Return(value=Name(id='rev_options', ctx=Load()))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Name(id='RevOptions', ctx=Load())), FunctionDef(name='is_commit_id_equal', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='dest', annotation=Name(id='str', ctx=Load())), arg(arg='name', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return whether the current commit hash equals the given name.\n\n        Args:\n          dest: the repository directory.\n          name: a string name.\n        ')), If(test=UnaryOp(op=Not(), operand=Name(id='name', ctx=Load())), body=[Return(value=Constant(value=False))], orelse=[]), Return(value=Compare(left=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='get_revision', ctx=Load()), args=[Name(id='dest', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Name(id='name', ctx=Load())]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='fetch_new', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dest', annotation=Name(id='str', ctx=Load())), arg(arg='url', annotation=Name(id='HiddenText', ctx=Load())), arg(arg='rev_options', annotation=Name(id='RevOptions', ctx=Load())), arg(arg='verbosity', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='rev_display', ctx=Store())], value=Call(func=Attribute(value=Name(id='rev_options', ctx=Load()), attr='to_display', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Cloning %s%s to %s'), Name(id='url', ctx=Load()), Name(id='rev_display', ctx=Load()), Call(func=Name(id='display_path', ctx=Load()), args=[Name(id='dest', ctx=Load())], keywords=[])], keywords=[])), If(test=Compare(left=Name(id='verbosity', ctx=Load()), ops=[LtE()], comparators=[Constant(value=0)]), body=[AnnAssign(target=Name(id='flags', ctx=Store()), annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load()), value=Tuple(elts=[Constant(value='--quiet')], ctx=Load()), simple=1)], orelse=[If(test=Compare(left=Name(id='verbosity', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='flags', ctx=Store())], value=Tuple(elts=[], ctx=Load()))], orelse=[Assign(targets=[Name(id='flags', ctx=Store())], value=Tuple(elts=[Constant(value='--verbose'), Constant(value='--progress')], ctx=Load()))])]), If(test=Compare(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_git_version', ctx=Load()), args=[], keywords=[]), ops=[GtE()], comparators=[Tuple(elts=[Constant(value=2), Constant(value=17)], ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='run_command', ctx=Load()), args=[Call(func=Name(id='make_command', ctx=Load()), args=[Constant(value='clone'), Constant(value='--filter=blob:none'), Starred(value=Name(id='flags', ctx=Load()), ctx=Load()), Name(id='url', ctx=Load()), Name(id='dest', ctx=Load())], keywords=[])], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='run_command', ctx=Load()), args=[Call(func=Name(id='make_command', ctx=Load()), args=[Constant(value='clone'), Starred(value=Name(id='flags', ctx=Load()), ctx=Load()), Name(id='url', ctx=Load()), Name(id='dest', ctx=Load())], keywords=[])], keywords=[]))]), If(test=Attribute(value=Name(id='rev_options', ctx=Load()), attr='rev', ctx=Load()), body=[Assign(targets=[Name(id='rev_options', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='resolve_revision', ctx=Load()), args=[Name(id='dest', ctx=Load()), Name(id='url', ctx=Load()), Name(id='rev_options', ctx=Load())], keywords=[])), Assign(targets=[Name(id='branch_name', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='rev_options', ctx=Load()), Constant(value='branch_name'), Constant(value=None)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Rev options %s, branch_name %s'), Name(id='rev_options', ctx=Load()), Name(id='branch_name', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='branch_name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='is_commit_id_equal', ctx=Load()), args=[Name(id='dest', ctx=Load()), Attribute(value=Name(id='rev_options', ctx=Load()), attr='rev', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='cmd_args', ctx=Store())], value=Call(func=Name(id='make_command', ctx=Load()), args=[Constant(value='checkout'), Constant(value='-q'), Call(func=Attribute(value=Name(id='rev_options', ctx=Load()), attr='to_args', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='run_command', ctx=Load()), args=[Name(id='cmd_args', ctx=Load())], keywords=[keyword(arg='cwd', value=Name(id='dest', ctx=Load()))]))], orelse=[])], orelse=[If(test=Compare(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_current_branch', ctx=Load()), args=[Name(id='dest', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Name(id='branch_name', ctx=Load())]), body=[Assign(targets=[Name(id='track_branch', ctx=Store())], value=JoinedStr(values=[Constant(value='origin/'), FormattedValue(value=Name(id='branch_name', ctx=Load()), conversion=-1)])), Assign(targets=[Name(id='cmd_args', ctx=Store())], value=List(elts=[Constant(value='checkout'), Constant(value='-b'), Name(id='branch_name', ctx=Load()), Constant(value='--track'), Name(id='track_branch', ctx=Load())], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='run_command', ctx=Load()), args=[Name(id='cmd_args', ctx=Load())], keywords=[keyword(arg='cwd', value=Name(id='dest', ctx=Load()))]))], orelse=[])])], orelse=[Assign(targets=[Name(id='sha', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_revision', ctx=Load()), args=[Name(id='dest', ctx=Load())], keywords=[])), Assign(targets=[Name(id='rev_options', ctx=Store())], value=Call(func=Attribute(value=Name(id='rev_options', ctx=Load()), attr='make_new', ctx=Load()), args=[Name(id='sha', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Resolved %s to commit %s'), Name(id='url', ctx=Load()), Attribute(value=Name(id='rev_options', ctx=Load()), attr='rev', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='update_submodules', ctx=Load()), args=[Name(id='dest', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='switch', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dest', annotation=Name(id='str', ctx=Load())), arg(arg='url', annotation=Name(id='HiddenText', ctx=Load())), arg(arg='rev_options', annotation=Name(id='RevOptions', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='run_command', ctx=Load()), args=[Call(func=Name(id='make_command', ctx=Load()), args=[Constant(value='config'), Constant(value='remote.origin.url'), Name(id='url', ctx=Load())], keywords=[])], keywords=[keyword(arg='cwd', value=Name(id='dest', ctx=Load()))])), Assign(targets=[Name(id='cmd_args', ctx=Store())], value=Call(func=Name(id='make_command', ctx=Load()), args=[Constant(value='checkout'), Constant(value='-q'), Call(func=Attribute(value=Name(id='rev_options', ctx=Load()), attr='to_args', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='run_command', ctx=Load()), args=[Name(id='cmd_args', ctx=Load())], keywords=[keyword(arg='cwd', value=Name(id='dest', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='update_submodules', ctx=Load()), args=[Name(id='dest', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='update', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dest', annotation=Name(id='str', ctx=Load())), arg(arg='url', annotation=Name(id='HiddenText', ctx=Load())), arg(arg='rev_options', annotation=Name(id='RevOptions', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_git_version', ctx=Load()), args=[], keywords=[]), ops=[GtE()], comparators=[Tuple(elts=[Constant(value=1), Constant(value=9)], ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='run_command', ctx=Load()), args=[List(elts=[Constant(value='fetch'), Constant(value='-q'), Constant(value='--tags')], ctx=Load())], keywords=[keyword(arg='cwd', value=Name(id='dest', ctx=Load()))]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='run_command', ctx=Load()), args=[List(elts=[Constant(value='fetch'), Constant(value='-q')], ctx=Load())], keywords=[keyword(arg='cwd', value=Name(id='dest', ctx=Load()))]))]), Assign(targets=[Name(id='rev_options', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='resolve_revision', ctx=Load()), args=[Name(id='dest', ctx=Load()), Name(id='url', ctx=Load()), Name(id='rev_options', ctx=Load())], keywords=[])), Assign(targets=[Name(id='cmd_args', ctx=Store())], value=Call(func=Name(id='make_command', ctx=Load()), args=[Constant(value='reset'), Constant(value='--hard'), Constant(value='-q'), Call(func=Attribute(value=Name(id='rev_options', ctx=Load()), attr='to_args', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='run_command', ctx=Load()), args=[Name(id='cmd_args', ctx=Load())], keywords=[keyword(arg='cwd', value=Name(id='dest', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='update_submodules', ctx=Load()), args=[Name(id='dest', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='get_remote_url', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='location', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return URL of the first remote encountered.\n\n        Raises RemoteNotFoundError if the repository does not have a remote\n        url configured.\n        ')), Assign(targets=[Name(id='stdout', ctx=Store())], value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='run_command', ctx=Load()), args=[List(elts=[Constant(value='config'), Constant(value='--get-regexp'), Constant(value='remote\\..*\\.url')], ctx=Load())], keywords=[keyword(arg='extra_ok_returncodes', value=Tuple(elts=[Constant(value=1)], ctx=Load())), keyword(arg='show_stdout', value=Constant(value=False)), keyword(arg='stdout_only', value=Constant(value=True)), keyword(arg='cwd', value=Name(id='location', ctx=Load()))])), Assign(targets=[Name(id='remotes', ctx=Store())], value=Call(func=Attribute(value=Name(id='stdout', ctx=Load()), attr='splitlines', ctx=Load()), args=[], keywords=[])), Try(body=[Assign(targets=[Name(id='found_remote', ctx=Store())], value=Subscript(value=Name(id='remotes', ctx=Load()), slice=Constant(value=0), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='IndexError', ctx=Load()), body=[Raise(exc=Name(id='RemoteNotFoundError', ctx=Load()))])], orelse=[], finalbody=[]), For(target=Name(id='remote', ctx=Store()), iter=Name(id='remotes', ctx=Load()), body=[If(test=Call(func=Attribute(value=Name(id='remote', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='remote.origin.url ')], keywords=[]), body=[Assign(targets=[Name(id='found_remote', ctx=Store())], value=Name(id='remote', ctx=Load())), Break()], orelse=[])], orelse=[]), Assign(targets=[Name(id='url', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='found_remote', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=' ')], keywords=[]), slice=Constant(value=1), ctx=Load())), Return(value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='_git_remote_to_pip_url', ctx=Load()), args=[Call(func=Attribute(value=Name(id='url', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='_git_remote_to_pip_url', args=arguments(posonlyargs=[], args=[arg(arg='url', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Convert a remote url from what git uses to what pip accepts.\n\n        There are 3 legal forms **url** may take:\n\n            1. A fully qualified url: ssh://git@example.com/foo/bar.git\n            2. A local project.git folder: /path/to/bare/repository.git\n            3. SCP shorthand for form 1: git@example.com:foo/bar.git\n\n        Form 1 is output as-is. Form 2 must be converted to URI and form 3 must\n        be converted to form 1.\n\n        See the corresponding test test_git_remote_url_to_pip() for examples of\n        sample inputs/outputs.\n        ')), If(test=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='match', ctx=Load()), args=[Constant(value='\\w+://'), Name(id='url', ctx=Load())], keywords=[]), body=[Return(value=Name(id='url', ctx=Load()))], orelse=[]), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='pathlib', ctx=Load()), attr='PurePath', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[]), attr='as_uri', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='scp_match', ctx=Store())], value=Call(func=Attribute(value=Name(id='SCP_REGEX', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[])), If(test=Name(id='scp_match', ctx=Load()), body=[Return(value=Call(func=Attribute(value=Name(id='scp_match', ctx=Load()), attr='expand', ctx=Load()), args=[Constant(value='ssh://\\1\\2/\\3')], keywords=[]))], orelse=[]), Raise(exc=Call(func=Name(id='RemoteNotValidError', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[]))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='has_commit', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='location', annotation=Name(id='str', ctx=Load())), arg(arg='rev', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Check if rev is a commit that is available in the local repository.\n        ')), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='run_command', ctx=Load()), args=[List(elts=[Constant(value='rev-parse'), Constant(value='-q'), Constant(value='--verify'), BinOp(left=Constant(value='sha^'), op=Add(), right=Name(id='rev', ctx=Load()))], ctx=Load())], keywords=[keyword(arg='cwd', value=Name(id='location', ctx=Load())), keyword(arg='log_failed_cmd', value=Constant(value=False))]))], handlers=[ExceptHandler(type=Name(id='InstallationError', ctx=Load()), body=[Return(value=Constant(value=False))])], orelse=[Return(value=Constant(value=True))], finalbody=[])], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='get_revision', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='location', annotation=Name(id='str', ctx=Load())), arg(arg='rev', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='rev', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='rev', ctx=Store())], value=Constant(value='HEAD'))], orelse=[]), Assign(targets=[Name(id='current_rev', ctx=Store())], value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='run_command', ctx=Load()), args=[List(elts=[Constant(value='rev-parse'), Name(id='rev', ctx=Load())], ctx=Load())], keywords=[keyword(arg='show_stdout', value=Constant(value=False)), keyword(arg='stdout_only', value=Constant(value=True)), keyword(arg='cwd', value=Name(id='location', ctx=Load()))])), Return(value=Call(func=Attribute(value=Name(id='current_rev', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='get_subdirectory', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='location', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return the path to Python project root, relative to the repo root.\n        Return None if the project root is in the repo root.\n        ')), Assign(targets=[Name(id='git_dir', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='run_command', ctx=Load()), args=[List(elts=[Constant(value='rev-parse'), Constant(value='--git-dir')], ctx=Load())], keywords=[keyword(arg='show_stdout', value=Constant(value=False)), keyword(arg='stdout_only', value=Constant(value=True)), keyword(arg='cwd', value=Name(id='location', ctx=Load()))]), attr='strip', ctx=Load()), args=[], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isabs', ctx=Load()), args=[Name(id='git_dir', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='git_dir', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='location', ctx=Load()), Name(id='git_dir', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='repo_root', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='git_dir', ctx=Load()), Constant(value='..')], keywords=[])], keywords=[])), Return(value=Call(func=Name(id='find_path_to_project_root_from_repo_root', ctx=Load()), args=[Name(id='location', ctx=Load()), Name(id='repo_root', ctx=Load())], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='get_url_rev_and_auth', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='url', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Prefixes stub URLs like 'user@hostname:user/repo.git' with 'ssh://'.\n        That's required because although they use SSH they sometimes don't\n        work with a ssh:// scheme (e.g. GitHub). But we need a scheme for\n        parsing. Hence we remove it again afterwards and return it as a stub.\n        ")), Assign(targets=[Tuple(elts=[Name(id='scheme', ctx=Store()), Name(id='netloc', ctx=Store()), Name(id='path', ctx=Store()), Name(id='query', ctx=Store()), Name(id='fragment', ctx=Store())], ctx=Store())], value=Call(func=Name(id='urlsplit', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Name(id='scheme', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='file')], keywords=[]), body=[Assign(targets=[Name(id='initial_slashes', ctx=Store())], value=Subscript(value=Name(id='path', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='lstrip', ctx=Load()), args=[Constant(value='/')], keywords=[])], keywords=[]))), ctx=Load())), Assign(targets=[Name(id='newpath', ctx=Store())], value=BinOp(left=Name(id='initial_slashes', ctx=Load()), op=Add(), right=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='urllib', ctx=Load()), attr='request', ctx=Load()), attr='url2pathname', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value='\\'), Constant(value='/')], keywords=[]), attr='lstrip', ctx=Load()), args=[Constant(value='/')], keywords=[]))), Assign(targets=[Name(id='after_plus', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='scheme', ctx=Load()), attr='find', ctx=Load()), args=[Constant(value='+')], keywords=[]), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='url', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='scheme', ctx=Load()), slice=Slice(upper=Name(id='after_plus', ctx=Load())), ctx=Load()), op=Add(), right=Call(func=Name(id='urlunsplit', ctx=Load()), args=[Tuple(elts=[Subscript(value=Name(id='scheme', ctx=Load()), slice=Slice(lower=Name(id='after_plus', ctx=Load())), ctx=Load()), Name(id='netloc', ctx=Load()), Name(id='newpath', ctx=Load()), Name(id='query', ctx=Load()), Name(id='fragment', ctx=Load())], ctx=Load())], keywords=[])))], orelse=[]), If(test=Compare(left=Constant(value='://'), ops=[NotIn()], comparators=[Name(id='url', ctx=Load())]), body=[Assert(test=Compare(left=Constant(value='file:'), ops=[NotIn()], comparators=[Name(id='url', ctx=Load())])), Assign(targets=[Name(id='url', ctx=Store())], value=Call(func=Attribute(value=Name(id='url', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='git+'), Constant(value='git+ssh://')], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='url', ctx=Store()), Name(id='rev', ctx=Store()), Name(id='user_pass', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='get_url_rev_and_auth', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[])), Assign(targets=[Name(id='url', ctx=Store())], value=Call(func=Attribute(value=Name(id='url', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='ssh://'), Constant(value='')], keywords=[]))], orelse=[Assign(targets=[Tuple(elts=[Name(id='url', ctx=Store()), Name(id='rev', ctx=Store()), Name(id='user_pass', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='get_url_rev_and_auth', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[]))]), Return(value=Tuple(elts=[Name(id='url', ctx=Load()), Name(id='rev', ctx=Load()), Name(id='user_pass', ctx=Load())], ctx=Load()))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), Name(id='AuthInfo', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='update_submodules', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='location', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='location', ctx=Load()), Constant(value='.gitmodules')], keywords=[])], keywords=[])), body=[Return()], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='run_command', ctx=Load()), args=[List(elts=[Constant(value='submodule'), Constant(value='update'), Constant(value='--init'), Constant(value='--recursive'), Constant(value='-q')], ctx=Load())], keywords=[keyword(arg='cwd', value=Name(id='location', ctx=Load()))]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='get_repository_root', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='location', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='loc', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='get_repository_root', ctx=Load()), args=[Name(id='location', ctx=Load())], keywords=[])), If(test=Name(id='loc', ctx=Load()), body=[Return(value=Name(id='loc', ctx=Load()))], orelse=[]), Try(body=[Assign(targets=[Name(id='r', ctx=Store())], value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='run_command', ctx=Load()), args=[List(elts=[Constant(value='rev-parse'), Constant(value='--show-toplevel')], ctx=Load())], keywords=[keyword(arg='cwd', value=Name(id='location', ctx=Load())), keyword(arg='show_stdout', value=Constant(value=False)), keyword(arg='stdout_only', value=Constant(value=True)), keyword(arg='on_returncode', value=Constant(value='raise')), keyword(arg='log_failed_cmd', value=Constant(value=False))]))], handlers=[ExceptHandler(type=Name(id='BadCommand', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='could not determine if %s is under git control because git is not available'), Name(id='location', ctx=Load())], keywords=[])), Return(value=Constant(value=None))]), ExceptHandler(type=Name(id='InstallationError', ctx=Load()), body=[Return(value=Constant(value=None))])], orelse=[], finalbody=[]), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normpath', ctx=Load()), args=[Call(func=Attribute(value=Name(id='r', ctx=Load()), attr='rstrip', ctx=Load()), args=[Constant(value='\r\n')], keywords=[])], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='should_add_vcs_url_prefix', args=arguments(posonlyargs=[], args=[arg(arg='repo_url', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='In either https or ssh form, requirements must be prefixed with git+.')), Return(value=Constant(value=True))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Name(id='bool', ctx=Load()))], decorator_list=[]), Expr(value=Call(func=Attribute(value=Name(id='vcs', ctx=Load()), attr='register', ctx=Load()), args=[Name(id='Git', ctx=Load())], keywords=[]))], type_ignores=[])