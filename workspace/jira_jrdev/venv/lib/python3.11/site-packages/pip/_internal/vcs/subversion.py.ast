Module(body=[Import(names=[alias(name='logging')]), Import(names=[alias(name='os')]), Import(names=[alias(name='re')]), ImportFrom(module='typing', names=[alias(name='List'), alias(name='Optional'), alias(name='Tuple')], level=0), ImportFrom(module='pip._internal.utils.misc', names=[alias(name='HiddenText'), alias(name='display_path'), alias(name='is_console_interactive'), alias(name='is_installable_dir'), alias(name='split_auth_from_netloc')], level=0), ImportFrom(module='pip._internal.utils.subprocess', names=[alias(name='CommandArgs'), alias(name='make_command')], level=0), ImportFrom(module='pip._internal.vcs.versioncontrol', names=[alias(name='AuthInfo'), alias(name='RemoteNotFoundError'), alias(name='RevOptions'), alias(name='VersionControl'), alias(name='vcs')], level=0), Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), Assign(targets=[Name(id='_svn_xml_url_re', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='url="([^"]+)"')], keywords=[])), Assign(targets=[Name(id='_svn_rev_re', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='committed-rev="(\\d+)"')], keywords=[])), Assign(targets=[Name(id='_svn_info_xml_rev_re', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='\\s*revision="(\\d+)"')], keywords=[])), Assign(targets=[Name(id='_svn_info_xml_url_re', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='<url>(.*)</url>')], keywords=[])), ClassDef(name='Subversion', bases=[Name(id='VersionControl', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='name', ctx=Store())], value=Constant(value='svn')), Assign(targets=[Name(id='dirname', ctx=Store())], value=Constant(value='.svn')), Assign(targets=[Name(id='repo_name', ctx=Store())], value=Constant(value='checkout')), Assign(targets=[Name(id='schemes', ctx=Store())], value=Tuple(elts=[Constant(value='svn+ssh'), Constant(value='svn+http'), Constant(value='svn+https'), Constant(value='svn+svn'), Constant(value='svn+file')], ctx=Load())), FunctionDef(name='should_add_vcs_url_prefix', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='remote_url', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=True))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='get_base_rev_args', args=arguments(posonlyargs=[], args=[arg(arg='rev', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=List(elts=[Constant(value='-r'), Name(id='rev', ctx=Load())], ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='get_revision', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='location', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return the maximum revision for all files under a given location\n        ')), Assign(targets=[Name(id='revision', ctx=Store())], value=Constant(value=0)), For(target=Tuple(elts=[Name(id='base', ctx=Store()), Name(id='dirs', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='walk', ctx=Load()), args=[Name(id='location', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Attribute(value=Name(id='cls', ctx=Load()), attr='dirname', ctx=Load()), ops=[NotIn()], comparators=[Name(id='dirs', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='dirs', ctx=Load()), slice=Slice(), ctx=Store())], value=List(elts=[], ctx=Load())), Continue()], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='dirs', ctx=Load()), attr='remove', ctx=Load()), args=[Attribute(value=Name(id='cls', ctx=Load()), attr='dirname', ctx=Load())], keywords=[])), Assign(targets=[Name(id='entries_fn', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='base', ctx=Load()), Attribute(value=Name(id='cls', ctx=Load()), attr='dirname', ctx=Load()), Constant(value='entries')], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='entries_fn', ctx=Load())], keywords=[])), body=[Continue()], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='dirurl', ctx=Store()), Name(id='localrev', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='_get_svn_url_rev', ctx=Load()), args=[Name(id='base', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='base', ctx=Load()), ops=[Eq()], comparators=[Name(id='location', ctx=Load())]), body=[Assert(test=Compare(left=Name(id='dirurl', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Name(id='base', ctx=Store())], value=BinOp(left=Name(id='dirurl', ctx=Load()), op=Add(), right=Constant(value='/')))], orelse=[If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Name(id='dirurl', ctx=Load())), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='dirurl', ctx=Load()), attr='startswith', ctx=Load()), args=[Name(id='base', ctx=Load())], keywords=[]))]), body=[Assign(targets=[Subscript(value=Name(id='dirs', ctx=Load()), slice=Slice(), ctx=Store())], value=List(elts=[], ctx=Load())), Continue()], orelse=[])]), Assign(targets=[Name(id='revision', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Name(id='revision', ctx=Load()), Name(id='localrev', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='revision', ctx=Load())], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='get_netloc_and_auth', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='netloc', annotation=Name(id='str', ctx=Load())), arg(arg='scheme', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        This override allows the auth information to be passed to svn via the\n        --username and --password options instead of via the URL.\n        ')), If(test=Compare(left=Name(id='scheme', ctx=Load()), ops=[Eq()], comparators=[Constant(value='ssh')]), body=[Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='get_netloc_and_auth', ctx=Load()), args=[Name(id='netloc', ctx=Load()), Name(id='scheme', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='split_auth_from_netloc', ctx=Load()), args=[Name(id='netloc', ctx=Load())], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='get_url_rev_and_auth', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='url', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='url', ctx=Store()), Name(id='rev', ctx=Store()), Name(id='user_pass', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='get_url_rev_and_auth', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Name(id='url', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='ssh://')], keywords=[]), body=[Assign(targets=[Name(id='url', ctx=Store())], value=BinOp(left=Constant(value='svn+'), op=Add(), right=Name(id='url', ctx=Load())))], orelse=[]), Return(value=Tuple(elts=[Name(id='url', ctx=Load()), Name(id='rev', ctx=Load()), Name(id='user_pass', ctx=Load())], ctx=Load()))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), Name(id='AuthInfo', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='make_rev_args', args=arguments(posonlyargs=[], args=[arg(arg='username', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='password', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='HiddenText', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Name(id='extra_args', ctx=Store()), annotation=Name(id='CommandArgs', ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), If(test=Name(id='username', ctx=Load()), body=[AugAssign(target=Name(id='extra_args', ctx=Store()), op=Add(), value=List(elts=[Constant(value='--username'), Name(id='username', ctx=Load())], ctx=Load()))], orelse=[]), If(test=Name(id='password', ctx=Load()), body=[AugAssign(target=Name(id='extra_args', ctx=Store()), op=Add(), value=List(elts=[Constant(value='--password'), Name(id='password', ctx=Load())], ctx=Load()))], orelse=[]), Return(value=Name(id='extra_args', ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Name(id='CommandArgs', ctx=Load())), FunctionDef(name='get_remote_url', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='location', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='orig_location', ctx=Store())], value=Name(id='location', ctx=Load())), While(test=UnaryOp(op=Not(), operand=Call(func=Name(id='is_installable_dir', ctx=Load()), args=[Name(id='location', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='last_location', ctx=Store())], value=Name(id='location', ctx=Load())), Assign(targets=[Name(id='location', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Name(id='location', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='location', ctx=Load()), ops=[Eq()], comparators=[Name(id='last_location', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='Could not find Python project for directory %s (tried all parent directories)'), Name(id='orig_location', ctx=Load())], keywords=[])), Raise(exc=Name(id='RemoteNotFoundError', ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='url', ctx=Store()), Name(id='_rev', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='_get_svn_url_rev', ctx=Load()), args=[Name(id='location', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='url', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Name(id='RemoteNotFoundError', ctx=Load()))], orelse=[]), Return(value=Name(id='url', ctx=Load()))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='_get_svn_url_rev', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='location', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[ImportFrom(module='pip._internal.exceptions', names=[alias(name='InstallationError')], level=0), Assign(targets=[Name(id='entries_path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='location', ctx=Load()), Attribute(value=Name(id='cls', ctx=Load()), attr='dirname', ctx=Load()), Constant(value='entries')], keywords=[])), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='entries_path', ctx=Load())], keywords=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='entries_path', ctx=Load())], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]))])], orelse=[Assign(targets=[Name(id='data', ctx=Store())], value=Constant(value=''))]), Assign(targets=[Name(id='url', ctx=Store())], value=Constant(value=None)), If(test=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='8')], keywords=[]), Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='9')], keywords=[]), Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='10')], keywords=[])]), body=[Assign(targets=[Name(id='entries', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Attribute(value=Name(id='str', ctx=Load()), attr='splitlines', ctx=Load()), Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='\n\x0c\n')], keywords=[])], keywords=[])], keywords=[])), Delete(targets=[Subscript(value=Subscript(value=Name(id='entries', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value=0), ctx=Del())]), Assign(targets=[Name(id='url', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='entries', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value=3), ctx=Load())), Assign(targets=[Name(id='revs', ctx=Store())], value=BinOp(left=ListComp(elt=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='d', ctx=Load()), slice=Constant(value=9), ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='d', ctx=Store()), iter=Name(id='entries', ctx=Load()), ifs=[BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='d', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=9)]), Subscript(value=Name(id='d', ctx=Load()), slice=Constant(value=9), ctx=Load())])], is_async=0)]), op=Add(), right=List(elts=[Constant(value=0)], ctx=Load())))], orelse=[If(test=Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='<?xml')], keywords=[]), body=[Assign(targets=[Name(id='match', ctx=Store())], value=Call(func=Attribute(value=Name(id='_svn_xml_url_re', ctx=Load()), attr='search', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='match', ctx=Load())), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='Badly formatted data: '), FormattedValue(value=Name(id='data', ctx=Load()), conversion=114)])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='url', ctx=Store())], value=Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value=1)], keywords=[])), Assign(targets=[Name(id='revs', ctx=Store())], value=BinOp(left=ListComp(elt=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value=1)], keywords=[])], keywords=[]), generators=[comprehension(target=Name(id='m', ctx=Store()), iter=Call(func=Attribute(value=Name(id='_svn_rev_re', ctx=Load()), attr='finditer', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]), ifs=[], is_async=0)]), op=Add(), right=List(elts=[Constant(value=0)], ctx=Load())))], orelse=[Try(body=[Assign(targets=[Name(id='xml', ctx=Store())], value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='run_command', ctx=Load()), args=[List(elts=[Constant(value='info'), Constant(value='--xml'), Name(id='location', ctx=Load())], ctx=Load())], keywords=[keyword(arg='show_stdout', value=Constant(value=False)), keyword(arg='stdout_only', value=Constant(value=True))])), Assign(targets=[Name(id='match', ctx=Store())], value=Call(func=Attribute(value=Name(id='_svn_info_xml_url_re', ctx=Load()), attr='search', ctx=Load()), args=[Name(id='xml', ctx=Load())], keywords=[])), Assert(test=Compare(left=Name(id='match', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Name(id='url', ctx=Store())], value=Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value=1)], keywords=[])), Assign(targets=[Name(id='revs', ctx=Store())], value=ListComp(elt=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value=1)], keywords=[])], keywords=[]), generators=[comprehension(target=Name(id='m', ctx=Store()), iter=Call(func=Attribute(value=Name(id='_svn_info_xml_rev_re', ctx=Load()), attr='finditer', ctx=Load()), args=[Name(id='xml', ctx=Load())], keywords=[]), ifs=[], is_async=0)]))], handlers=[ExceptHandler(type=Name(id='InstallationError', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='url', ctx=Store()), Name(id='revs', ctx=Store())], ctx=Store())], value=Tuple(elts=[Constant(value=None), List(elts=[], ctx=Load())], ctx=Load()))])], orelse=[], finalbody=[])])]), If(test=Name(id='revs', ctx=Load()), body=[Assign(targets=[Name(id='rev', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Name(id='revs', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='rev', ctx=Store())], value=Constant(value=0))]), Return(value=Tuple(elts=[Name(id='url', ctx=Load()), Name(id='rev', ctx=Load())], ctx=Load()))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='is_commit_id_equal', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='dest', annotation=Name(id='str', ctx=Load())), arg(arg='name', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Always assume the versions don't match")), Return(value=Constant(value=False))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='use_interactive', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='use_interactive', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='use_interactive', ctx=Store())], value=Call(func=Name(id='is_console_interactive', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='use_interactive', ctx=Store())], value=Name(id='use_interactive', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_vcs_version', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='call_vcs_version', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Query the version of the currently installed Subversion client.\n\n        :return: A tuple containing the parts of the version information or\n            ``()`` if the version returned from ``svn`` could not be parsed.\n        :raises: BadCommand: If ``svn`` is not installed.\n        ')), Assign(targets=[Name(id='version_prefix', ctx=Store())], value=Constant(value='svn, version ')), Assign(targets=[Name(id='version', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='run_command', ctx=Load()), args=[List(elts=[Constant(value='--version')], ctx=Load())], keywords=[keyword(arg='show_stdout', value=Constant(value=False)), keyword(arg='stdout_only', value=Constant(value=True))])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='version', ctx=Load()), attr='startswith', ctx=Load()), args=[Name(id='version_prefix', ctx=Load())], keywords=[])), body=[Return(value=Tuple(elts=[], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='version', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Subscript(value=Name(id='version', ctx=Load()), slice=Slice(lower=Call(func=Name(id='len', ctx=Load()), args=[Name(id='version_prefix', ctx=Load())], keywords=[])), ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[]), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='version_list', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Call(func=Attribute(value=Name(id='version', ctx=Load()), attr='partition', ctx=Load()), args=[Constant(value='-')], keywords=[]), slice=Constant(value=0), ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[])), Try(body=[Assign(targets=[Name(id='parsed_version', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Name(id='int', ctx=Load()), Name(id='version_list', ctx=Load())], keywords=[])], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Return(value=Tuple(elts=[], ctx=Load()))])], orelse=[], finalbody=[]), Return(value=Name(id='parsed_version', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load())), FunctionDef(name='get_vcs_version', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the version of the currently installed Subversion client.\n\n        If the version of the Subversion client has already been queried,\n        a cached value will be used.\n\n        :return: A tuple containing the parts of the version information or\n            ``()`` if the version returned from ``svn`` could not be parsed.\n        :raises: BadCommand: If ``svn`` is not installed.\n        ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_vcs_version', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_vcs_version', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='vcs_version', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='call_vcs_version', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_vcs_version', ctx=Store())], value=Name(id='vcs_version', ctx=Load())), Return(value=Name(id='vcs_version', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load())), FunctionDef(name='get_remote_call_options', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return options to be used on calls to Subversion that contact the server.\n\n        These options are applicable for the following ``svn`` subcommands used\n        in this class.\n\n            - checkout\n            - switch\n            - update\n\n        :return: A list of command line arguments to pass to ``svn``.\n        ')), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='use_interactive', ctx=Load())), body=[Return(value=List(elts=[Constant(value='--non-interactive')], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='svn_version', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_vcs_version', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='svn_version', ctx=Load()), ops=[GtE()], comparators=[Tuple(elts=[Constant(value=1), Constant(value=8)], ctx=Load())]), body=[Return(value=List(elts=[Constant(value='--force-interactive')], ctx=Load()))], orelse=[]), Return(value=List(elts=[], ctx=Load()))], decorator_list=[], returns=Name(id='CommandArgs', ctx=Load())), FunctionDef(name='fetch_new', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dest', annotation=Name(id='str', ctx=Load())), arg(arg='url', annotation=Name(id='HiddenText', ctx=Load())), arg(arg='rev_options', annotation=Name(id='RevOptions', ctx=Load())), arg(arg='verbosity', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='rev_display', ctx=Store())], value=Call(func=Attribute(value=Name(id='rev_options', ctx=Load()), attr='to_display', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Checking out %s%s to %s'), Name(id='url', ctx=Load()), Name(id='rev_display', ctx=Load()), Call(func=Name(id='display_path', ctx=Load()), args=[Name(id='dest', ctx=Load())], keywords=[])], keywords=[])), If(test=Compare(left=Name(id='verbosity', ctx=Load()), ops=[LtE()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='flag', ctx=Store())], value=Constant(value='--quiet'))], orelse=[Assign(targets=[Name(id='flag', ctx=Store())], value=Constant(value=''))]), Assign(targets=[Name(id='cmd_args', ctx=Store())], value=Call(func=Name(id='make_command', ctx=Load()), args=[Constant(value='checkout'), Name(id='flag', ctx=Load()), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_remote_call_options', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='rev_options', ctx=Load()), attr='to_args', ctx=Load()), args=[], keywords=[]), Name(id='url', ctx=Load()), Name(id='dest', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='run_command', ctx=Load()), args=[Name(id='cmd_args', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='switch', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dest', annotation=Name(id='str', ctx=Load())), arg(arg='url', annotation=Name(id='HiddenText', ctx=Load())), arg(arg='rev_options', annotation=Name(id='RevOptions', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='cmd_args', ctx=Store())], value=Call(func=Name(id='make_command', ctx=Load()), args=[Constant(value='switch'), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_remote_call_options', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='rev_options', ctx=Load()), attr='to_args', ctx=Load()), args=[], keywords=[]), Name(id='url', ctx=Load()), Name(id='dest', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='run_command', ctx=Load()), args=[Name(id='cmd_args', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='update', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dest', annotation=Name(id='str', ctx=Load())), arg(arg='url', annotation=Name(id='HiddenText', ctx=Load())), arg(arg='rev_options', annotation=Name(id='RevOptions', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='cmd_args', ctx=Store())], value=Call(func=Name(id='make_command', ctx=Load()), args=[Constant(value='update'), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_remote_call_options', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='rev_options', ctx=Load()), attr='to_args', ctx=Load()), args=[], keywords=[]), Name(id='dest', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='run_command', ctx=Load()), args=[Name(id='cmd_args', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), Expr(value=Call(func=Attribute(value=Name(id='vcs', ctx=Load()), attr='register', ctx=Load()), args=[Name(id='Subversion', ctx=Load())], keywords=[]))], type_ignores=[])