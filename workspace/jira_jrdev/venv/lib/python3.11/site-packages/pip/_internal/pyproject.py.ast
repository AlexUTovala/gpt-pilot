Module(body=[Import(names=[alias(name='importlib.util')]), Import(names=[alias(name='os')]), ImportFrom(module='collections', names=[alias(name='namedtuple')], level=0), ImportFrom(module='typing', names=[alias(name='Any'), alias(name='List'), alias(name='Optional')], level=0), ImportFrom(module='pip._vendor', names=[alias(name='tomli')], level=0), ImportFrom(module='pip._vendor.packaging.requirements', names=[alias(name='InvalidRequirement'), alias(name='Requirement')], level=0), ImportFrom(module='pip._internal.exceptions', names=[alias(name='InstallationError'), alias(name='InvalidPyProjectBuildRequires'), alias(name='MissingPyProjectBuildRequires')], level=0), FunctionDef(name='_is_list_of_str', args=arguments(posonlyargs=[], args=[arg(arg='obj', annotation=Name(id='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='obj', ctx=Load()), Name(id='list', ctx=Load())], keywords=[]), Call(func=Name(id='all', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='item', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='item', ctx=Store()), iter=Name(id='obj', ctx=Load()), ifs=[], is_async=0)])], keywords=[])]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='make_pyproject_path', args=arguments(posonlyargs=[], args=[arg(arg='unpacked_source_directory', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='unpacked_source_directory', ctx=Load()), Constant(value='pyproject.toml')], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), Assign(targets=[Name(id='BuildSystemDetails', ctx=Store())], value=Call(func=Name(id='namedtuple', ctx=Load()), args=[Constant(value='BuildSystemDetails'), List(elts=[Constant(value='requires'), Constant(value='backend'), Constant(value='check'), Constant(value='backend_path')], ctx=Load())], keywords=[])), FunctionDef(name='load_pyproject_toml', args=arguments(posonlyargs=[], args=[arg(arg='use_pep517', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load())), arg(arg='pyproject_toml', annotation=Name(id='str', ctx=Load())), arg(arg='setup_py', annotation=Name(id='str', ctx=Load())), arg(arg='req_name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Load the pyproject.toml file.\n\n    Parameters:\n        use_pep517 - Has the user requested PEP 517 processing? None\n                     means the user hasn't explicitly specified.\n        pyproject_toml - Location of the project's pyproject.toml file\n        setup_py - Location of the project's setup.py file\n        req_name - The name of the requirement we're processing (for\n                   error reporting)\n\n    Returns:\n        None if we should use the legacy code path, otherwise a tuple\n        (\n            requirements from pyproject.toml,\n            name of PEP 517 backend,\n            requirements we should check are installed after setting\n                up the build environment\n            directory paths to import the backend from (backend-path),\n                relative to the project root.\n        )\n    ")), Assign(targets=[Name(id='has_pyproject', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isfile', ctx=Load()), args=[Name(id='pyproject_toml', ctx=Load())], keywords=[])), Assign(targets=[Name(id='has_setup', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isfile', ctx=Load()), args=[Name(id='setup_py', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Name(id='has_pyproject', ctx=Load())), UnaryOp(op=Not(), operand=Name(id='has_setup', ctx=Load()))]), body=[Raise(exc=Call(func=Name(id='InstallationError', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='req_name', ctx=Load()), conversion=-1), Constant(value=" does not appear to be a Python project: neither 'setup.py' nor 'pyproject.toml' found.")])], keywords=[]))], orelse=[]), If(test=Name(id='has_pyproject', ctx=Load()), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='pyproject_toml', ctx=Load())], keywords=[keyword(arg='encoding', value=Constant(value='utf-8'))]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='pp_toml', ctx=Store())], value=Call(func=Attribute(value=Name(id='tomli', ctx=Load()), attr='loads', ctx=Load()), args=[Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[])], keywords=[]))]), Assign(targets=[Name(id='build_system', ctx=Store())], value=Call(func=Attribute(value=Name(id='pp_toml', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='build-system')], keywords=[]))], orelse=[Assign(targets=[Name(id='build_system', ctx=Store())], value=Constant(value=None))]), If(test=BoolOp(op=And(), values=[Name(id='has_pyproject', ctx=Load()), UnaryOp(op=Not(), operand=Name(id='has_setup', ctx=Load()))]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='use_pep517', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), UnaryOp(op=Not(), operand=Name(id='use_pep517', ctx=Load()))]), body=[Raise(exc=Call(func=Name(id='InstallationError', ctx=Load()), args=[Constant(value='Disabling PEP 517 processing is invalid: project does not have a setup.py')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='use_pep517', ctx=Store())], value=Constant(value=True))], orelse=[If(test=BoolOp(op=And(), values=[Name(id='build_system', ctx=Load()), Compare(left=Constant(value='build-backend'), ops=[In()], comparators=[Name(id='build_system', ctx=Load())])]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='use_pep517', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), UnaryOp(op=Not(), operand=Name(id='use_pep517', ctx=Load()))]), body=[Raise(exc=Call(func=Name(id='InstallationError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Disabling PEP 517 processing is invalid: project specifies a build backend of {} in pyproject.toml'), attr='format', ctx=Load()), args=[Subscript(value=Name(id='build_system', ctx=Load()), slice=Constant(value='build-backend'), ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='use_pep517', ctx=Store())], value=Constant(value=True))], orelse=[If(test=Compare(left=Name(id='use_pep517', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='use_pep517', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='has_pyproject', ctx=Load()), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='importlib', ctx=Load()), attr='util', ctx=Load()), attr='find_spec', ctx=Load()), args=[Constant(value='setuptools')], keywords=[])), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='importlib', ctx=Load()), attr='util', ctx=Load()), attr='find_spec', ctx=Load()), args=[Constant(value='wheel')], keywords=[]))]))], orelse=[])])]), Assert(test=Compare(left=Name(id='use_pep517', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), If(test=UnaryOp(op=Not(), operand=Name(id='use_pep517', ctx=Load())), body=[Return(value=Constant(value=None))], orelse=[]), If(test=Compare(left=Name(id='build_system', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='build_system', ctx=Store())], value=Dict(keys=[Constant(value='requires'), Constant(value='build-backend')], values=[List(elts=[Constant(value='setuptools>=40.8.0'), Constant(value='wheel')], ctx=Load()), Constant(value='setuptools.build_meta:__legacy__')]))], orelse=[]), Assert(test=Compare(left=Name(id='build_system', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), If(test=Compare(left=Constant(value='requires'), ops=[NotIn()], comparators=[Name(id='build_system', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='MissingPyProjectBuildRequires', ctx=Load()), args=[], keywords=[keyword(arg='package', value=Name(id='req_name', ctx=Load()))]))], orelse=[]), Assign(targets=[Name(id='requires', ctx=Store())], value=Subscript(value=Name(id='build_system', ctx=Load()), slice=Constant(value='requires'), ctx=Load())), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='_is_list_of_str', ctx=Load()), args=[Name(id='requires', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='InvalidPyProjectBuildRequires', ctx=Load()), args=[], keywords=[keyword(arg='package', value=Name(id='req_name', ctx=Load())), keyword(arg='reason', value=Constant(value='It is not a list of strings.'))]))], orelse=[]), For(target=Name(id='requirement', ctx=Store()), iter=Name(id='requires', ctx=Load()), body=[Try(body=[Expr(value=Call(func=Name(id='Requirement', ctx=Load()), args=[Name(id='requirement', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='InvalidRequirement', ctx=Load()), name='error', body=[Raise(exc=Call(func=Name(id='InvalidPyProjectBuildRequires', ctx=Load()), args=[], keywords=[keyword(arg='package', value=Name(id='req_name', ctx=Load())), keyword(arg='reason', value=JoinedStr(values=[Constant(value='It contains an invalid requirement: '), FormattedValue(value=Name(id='requirement', ctx=Load()), conversion=114)]))]), cause=Name(id='error', ctx=Load()))])], orelse=[], finalbody=[])], orelse=[]), Assign(targets=[Name(id='backend', ctx=Store())], value=Call(func=Attribute(value=Name(id='build_system', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='build-backend')], keywords=[])), Assign(targets=[Name(id='backend_path', ctx=Store())], value=Call(func=Attribute(value=Name(id='build_system', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='backend-path'), List(elts=[], ctx=Load())], keywords=[])), AnnAssign(target=Name(id='check', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), If(test=Compare(left=Name(id='backend', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='backend', ctx=Store())], value=Constant(value='setuptools.build_meta:__legacy__')), Assign(targets=[Name(id='check', ctx=Store())], value=List(elts=[Constant(value='setuptools>=40.8.0')], ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='BuildSystemDetails', ctx=Load()), args=[Name(id='requires', ctx=Load()), Name(id='backend', ctx=Load()), Name(id='check', ctx=Load()), Name(id='backend_path', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='BuildSystemDetails', ctx=Load()), ctx=Load()))], type_ignores=[])