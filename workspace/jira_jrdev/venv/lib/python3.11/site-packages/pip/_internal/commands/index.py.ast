Module(body=[Import(names=[alias(name='logging')]), ImportFrom(module='optparse', names=[alias(name='Values')], level=0), ImportFrom(module='typing', names=[alias(name='Any'), alias(name='Iterable'), alias(name='List'), alias(name='Optional'), alias(name='Union')], level=0), ImportFrom(module='pip._vendor.packaging.version', names=[alias(name='LegacyVersion'), alias(name='Version')], level=0), ImportFrom(module='pip._internal.cli', names=[alias(name='cmdoptions')], level=0), ImportFrom(module='pip._internal.cli.req_command', names=[alias(name='IndexGroupCommand')], level=0), ImportFrom(module='pip._internal.cli.status_codes', names=[alias(name='ERROR'), alias(name='SUCCESS')], level=0), ImportFrom(module='pip._internal.commands.search', names=[alias(name='print_dist_installation_info')], level=0), ImportFrom(module='pip._internal.exceptions', names=[alias(name='CommandError'), alias(name='DistributionNotFound'), alias(name='PipError')], level=0), ImportFrom(module='pip._internal.index.collector', names=[alias(name='LinkCollector')], level=0), ImportFrom(module='pip._internal.index.package_finder', names=[alias(name='PackageFinder')], level=0), ImportFrom(module='pip._internal.models.selection_prefs', names=[alias(name='SelectionPreferences')], level=0), ImportFrom(module='pip._internal.models.target_python', names=[alias(name='TargetPython')], level=0), ImportFrom(module='pip._internal.network.session', names=[alias(name='PipSession')], level=0), ImportFrom(module='pip._internal.utils.misc', names=[alias(name='write_output')], level=0), Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), ClassDef(name='IndexCommand', bases=[Name(id='IndexGroupCommand', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Inspect information available from package indexes.\n    ')), Assign(targets=[Name(id='ignore_require_venv', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='usage', ctx=Store())], value=Constant(value='\n        %prog versions <package>\n    ')), FunctionDef(name='add_options', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='cmdoptions', ctx=Load()), attr='add_target_python_options', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load()), attr='add_option', ctx=Load()), args=[Call(func=Attribute(value=Name(id='cmdoptions', ctx=Load()), attr='ignore_requires_python', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load()), attr='add_option', ctx=Load()), args=[Call(func=Attribute(value=Name(id='cmdoptions', ctx=Load()), attr='pre', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load()), attr='add_option', ctx=Load()), args=[Call(func=Attribute(value=Name(id='cmdoptions', ctx=Load()), attr='no_binary', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load()), attr='add_option', ctx=Load()), args=[Call(func=Attribute(value=Name(id='cmdoptions', ctx=Load()), attr='only_binary', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='index_opts', ctx=Store())], value=Call(func=Attribute(value=Name(id='cmdoptions', ctx=Load()), attr='make_option_group', ctx=Load()), args=[Attribute(value=Name(id='cmdoptions', ctx=Load()), attr='index_group', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='parser', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='parser', ctx=Load()), attr='insert_option_group', ctx=Load()), args=[Constant(value=0), Name(id='index_opts', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='parser', ctx=Load()), attr='insert_option_group', ctx=Load()), args=[Constant(value=0), Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='run', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='options', annotation=Name(id='Values', ctx=Load())), arg(arg='args', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='handlers', ctx=Store())], value=Dict(keys=[Constant(value='versions')], values=[Attribute(value=Name(id='self', ctx=Load()), attr='get_available_package_versions', ctx=Load())])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='pip index is currently an experimental command. It may be removed/changed in a future release without prior warning.')], keywords=[])), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Name(id='args', ctx=Load())), Compare(left=Subscript(value=Name(id='args', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[NotIn()], comparators=[Name(id='handlers', ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='error', ctx=Load()), args=[Constant(value='Need an action (%s) to perform.'), Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='handlers', ctx=Load())], keywords=[])], keywords=[])], keywords=[])), Return(value=Name(id='ERROR', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='action', ctx=Store())], value=Subscript(value=Name(id='args', ctx=Load()), slice=Constant(value=0), ctx=Load())), Try(body=[Expr(value=Call(func=Subscript(value=Name(id='handlers', ctx=Load()), slice=Name(id='action', ctx=Load()), ctx=Load()), args=[Name(id='options', ctx=Load()), Subscript(value=Name(id='args', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='PipError', ctx=Load()), name='e', body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='error', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='e', ctx=Load()), attr='args', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])), Return(value=Name(id='ERROR', ctx=Load()))])], orelse=[], finalbody=[]), Return(value=Name(id='SUCCESS', ctx=Load()))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='_build_package_finder', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='options', annotation=Name(id='Values', ctx=Load())), arg(arg='session', annotation=Name(id='PipSession', ctx=Load())), arg(arg='target_python', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TargetPython', ctx=Load()), ctx=Load())), arg(arg='ignore_requires_python', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='\n        Create a package finder appropriate to the index command.\n        ')), Assign(targets=[Name(id='link_collector', ctx=Store())], value=Call(func=Attribute(value=Name(id='LinkCollector', ctx=Load()), attr='create', ctx=Load()), args=[Name(id='session', ctx=Load())], keywords=[keyword(arg='options', value=Name(id='options', ctx=Load()))])), Assign(targets=[Name(id='selection_prefs', ctx=Store())], value=Call(func=Name(id='SelectionPreferences', ctx=Load()), args=[], keywords=[keyword(arg='allow_yanked', value=Constant(value=False)), keyword(arg='allow_all_prereleases', value=Attribute(value=Name(id='options', ctx=Load()), attr='pre', ctx=Load())), keyword(arg='ignore_requires_python', value=Name(id='ignore_requires_python', ctx=Load()))])), Return(value=Call(func=Attribute(value=Name(id='PackageFinder', ctx=Load()), attr='create', ctx=Load()), args=[], keywords=[keyword(arg='link_collector', value=Name(id='link_collector', ctx=Load())), keyword(arg='selection_prefs', value=Name(id='selection_prefs', ctx=Load())), keyword(arg='target_python', value=Name(id='target_python', ctx=Load()))]))], decorator_list=[], returns=Name(id='PackageFinder', ctx=Load())), FunctionDef(name='get_available_package_versions', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='options', annotation=Name(id='Values', ctx=Load())), arg(arg='args', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Constant(value=1)]), body=[Raise(exc=Call(func=Name(id='CommandError', ctx=Load()), args=[Constant(value='You need to specify exactly one argument')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='target_python', ctx=Store())], value=Call(func=Attribute(value=Name(id='cmdoptions', ctx=Load()), attr='make_target_python', ctx=Load()), args=[Name(id='options', ctx=Load())], keywords=[])), Assign(targets=[Name(id='query', ctx=Store())], value=Subscript(value=Name(id='args', ctx=Load()), slice=Constant(value=0), ctx=Load())), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_build_session', ctx=Load()), args=[Name(id='options', ctx=Load())], keywords=[]), optional_vars=Name(id='session', ctx=Store()))], body=[Assign(targets=[Name(id='finder', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_build_package_finder', ctx=Load()), args=[], keywords=[keyword(arg='options', value=Name(id='options', ctx=Load())), keyword(arg='session', value=Name(id='session', ctx=Load())), keyword(arg='target_python', value=Name(id='target_python', ctx=Load())), keyword(arg='ignore_requires_python', value=Attribute(value=Name(id='options', ctx=Load()), attr='ignore_requires_python', ctx=Load()))])), AnnAssign(target=Name(id='versions', ctx=Store()), annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='LegacyVersion', ctx=Load()), Name(id='Version', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), value=GeneratorExp(elt=Attribute(value=Name(id='candidate', ctx=Load()), attr='version', ctx=Load()), generators=[comprehension(target=Name(id='candidate', ctx=Store()), iter=Call(func=Attribute(value=Name(id='finder', ctx=Load()), attr='find_all_candidates', ctx=Load()), args=[Name(id='query', ctx=Load())], keywords=[]), ifs=[], is_async=0)]), simple=1), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='options', ctx=Load()), attr='pre', ctx=Load())), body=[Assign(targets=[Name(id='versions', ctx=Store())], value=GeneratorExp(elt=Name(id='version', ctx=Load()), generators=[comprehension(target=Name(id='version', ctx=Store()), iter=Name(id='versions', ctx=Load()), ifs=[UnaryOp(op=Not(), operand=Attribute(value=Name(id='version', ctx=Load()), attr='is_prerelease', ctx=Load()))], is_async=0)]))], orelse=[]), Assign(targets=[Name(id='versions', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Name(id='versions', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='versions', ctx=Load())), body=[Raise(exc=Call(func=Name(id='DistributionNotFound', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='No matching distribution found for {}'), attr='format', ctx=Load()), args=[Name(id='query', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='formatted_versions', ctx=Store())], value=ListComp(elt=Call(func=Name(id='str', ctx=Load()), args=[Name(id='ver', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='ver', ctx=Store()), iter=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='versions', ctx=Load())], keywords=[keyword(arg='reverse', value=Constant(value=True))]), ifs=[], is_async=0)])), Assign(targets=[Name(id='latest', ctx=Store())], value=Subscript(value=Name(id='formatted_versions', ctx=Load()), slice=Constant(value=0), ctx=Load()))]), Expr(value=Call(func=Name(id='write_output', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='{} ({})'), attr='format', ctx=Load()), args=[Name(id='query', ctx=Load()), Name(id='latest', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Name(id='write_output', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Available versions: {}'), attr='format', ctx=Load()), args=[Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Name(id='formatted_versions', ctx=Load())], keywords=[])], keywords=[])], keywords=[])), Expr(value=Call(func=Name(id='print_dist_installation_info', ctx=Load()), args=[Name(id='query', ctx=Load()), Name(id='latest', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None))], decorator_list=[])], type_ignores=[])