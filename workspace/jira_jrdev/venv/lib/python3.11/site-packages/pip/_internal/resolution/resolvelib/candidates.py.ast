Module(body=[Import(names=[alias(name='logging')]), Import(names=[alias(name='sys')]), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING'), alias(name='Any'), alias(name='FrozenSet'), alias(name='Iterable'), alias(name='Optional'), alias(name='Tuple'), alias(name='Union'), alias(name='cast')], level=0), ImportFrom(module='pip._vendor.packaging.utils', names=[alias(name='NormalizedName'), alias(name='canonicalize_name')], level=0), ImportFrom(module='pip._vendor.packaging.version', names=[alias(name='Version')], level=0), ImportFrom(module='pip._internal.exceptions', names=[alias(name='HashError'), alias(name='InstallationSubprocessError'), alias(name='MetadataInconsistent')], level=0), ImportFrom(module='pip._internal.metadata', names=[alias(name='BaseDistribution')], level=0), ImportFrom(module='pip._internal.models.link', names=[alias(name='Link'), alias(name='links_equivalent')], level=0), ImportFrom(module='pip._internal.models.wheel', names=[alias(name='Wheel')], level=0), ImportFrom(module='pip._internal.req.constructors', names=[alias(name='install_req_from_editable'), alias(name='install_req_from_line')], level=0), ImportFrom(module='pip._internal.req.req_install', names=[alias(name='InstallRequirement')], level=0), ImportFrom(module='pip._internal.utils.direct_url_helpers', names=[alias(name='direct_url_from_link')], level=0), ImportFrom(module='pip._internal.utils.misc', names=[alias(name='normalize_version_info')], level=0), ImportFrom(module='base', names=[alias(name='Candidate'), alias(name='CandidateVersion'), alias(name='Requirement'), alias(name='format_name')], level=1), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='factory', names=[alias(name='Factory')], level=1)], orelse=[]), Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), Assign(targets=[Name(id='BaseCandidate', ctx=Store())], value=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Constant(value='AlreadyInstalledCandidate'), Constant(value='EditableCandidate'), Constant(value='LinkCandidate')], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='REQUIRES_PYTHON_IDENTIFIER', ctx=Store())], value=Call(func=Name(id='cast', ctx=Load()), args=[Name(id='NormalizedName', ctx=Load()), Constant(value='<Python from Requires-Python>')], keywords=[])), FunctionDef(name='as_base_candidate', args=arguments(posonlyargs=[], args=[arg(arg='candidate', annotation=Name(id='Candidate', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='The runtime version of BaseCandidate.')), Assign(targets=[Name(id='base_candidate_classes', ctx=Store())], value=Tuple(elts=[Name(id='AlreadyInstalledCandidate', ctx=Load()), Name(id='EditableCandidate', ctx=Load()), Name(id='LinkCandidate', ctx=Load())], ctx=Load())), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='candidate', ctx=Load()), Name(id='base_candidate_classes', ctx=Load())], keywords=[]), body=[Return(value=Name(id='candidate', ctx=Load()))], orelse=[]), Return(value=Constant(value=None))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='BaseCandidate', ctx=Load()), ctx=Load())), FunctionDef(name='make_install_req_from_link', args=arguments(posonlyargs=[], args=[arg(arg='link', annotation=Name(id='Link', ctx=Load())), arg(arg='template', annotation=Name(id='InstallRequirement', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='template', ctx=Load()), attr='editable', ctx=Load())), msg=Constant(value='template is editable')), If(test=Attribute(value=Name(id='template', ctx=Load()), attr='req', ctx=Load()), body=[Assign(targets=[Name(id='line', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='template', ctx=Load()), attr='req', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='line', ctx=Store())], value=Attribute(value=Name(id='link', ctx=Load()), attr='url', ctx=Load()))]), Assign(targets=[Name(id='ireq', ctx=Store())], value=Call(func=Name(id='install_req_from_line', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[keyword(arg='user_supplied', value=Attribute(value=Name(id='template', ctx=Load()), attr='user_supplied', ctx=Load())), keyword(arg='comes_from', value=Attribute(value=Name(id='template', ctx=Load()), attr='comes_from', ctx=Load())), keyword(arg='use_pep517', value=Attribute(value=Name(id='template', ctx=Load()), attr='use_pep517', ctx=Load())), keyword(arg='isolated', value=Attribute(value=Name(id='template', ctx=Load()), attr='isolated', ctx=Load())), keyword(arg='constraint', value=Attribute(value=Name(id='template', ctx=Load()), attr='constraint', ctx=Load())), keyword(arg='global_options', value=Attribute(value=Name(id='template', ctx=Load()), attr='global_options', ctx=Load())), keyword(arg='hash_options', value=Attribute(value=Name(id='template', ctx=Load()), attr='hash_options', ctx=Load())), keyword(arg='config_settings', value=Attribute(value=Name(id='template', ctx=Load()), attr='config_settings', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='ireq', ctx=Load()), attr='original_link', ctx=Store())], value=Attribute(value=Name(id='template', ctx=Load()), attr='original_link', ctx=Load())), Assign(targets=[Attribute(value=Name(id='ireq', ctx=Load()), attr='link', ctx=Store())], value=Name(id='link', ctx=Load())), Assign(targets=[Attribute(value=Name(id='ireq', ctx=Load()), attr='extras', ctx=Store())], value=Attribute(value=Name(id='template', ctx=Load()), attr='extras', ctx=Load())), Return(value=Name(id='ireq', ctx=Load()))], decorator_list=[], returns=Name(id='InstallRequirement', ctx=Load())), FunctionDef(name='make_install_req_from_editable', args=arguments(posonlyargs=[], args=[arg(arg='link', annotation=Name(id='Link', ctx=Load())), arg(arg='template', annotation=Name(id='InstallRequirement', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Attribute(value=Name(id='template', ctx=Load()), attr='editable', ctx=Load()), msg=Constant(value='template not editable')), Assign(targets=[Name(id='ireq', ctx=Store())], value=Call(func=Name(id='install_req_from_editable', ctx=Load()), args=[Attribute(value=Name(id='link', ctx=Load()), attr='url', ctx=Load())], keywords=[keyword(arg='user_supplied', value=Attribute(value=Name(id='template', ctx=Load()), attr='user_supplied', ctx=Load())), keyword(arg='comes_from', value=Attribute(value=Name(id='template', ctx=Load()), attr='comes_from', ctx=Load())), keyword(arg='use_pep517', value=Attribute(value=Name(id='template', ctx=Load()), attr='use_pep517', ctx=Load())), keyword(arg='isolated', value=Attribute(value=Name(id='template', ctx=Load()), attr='isolated', ctx=Load())), keyword(arg='constraint', value=Attribute(value=Name(id='template', ctx=Load()), attr='constraint', ctx=Load())), keyword(arg='permit_editable_wheels', value=Attribute(value=Name(id='template', ctx=Load()), attr='permit_editable_wheels', ctx=Load())), keyword(arg='global_options', value=Attribute(value=Name(id='template', ctx=Load()), attr='global_options', ctx=Load())), keyword(arg='hash_options', value=Attribute(value=Name(id='template', ctx=Load()), attr='hash_options', ctx=Load())), keyword(arg='config_settings', value=Attribute(value=Name(id='template', ctx=Load()), attr='config_settings', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='ireq', ctx=Load()), attr='extras', ctx=Store())], value=Attribute(value=Name(id='template', ctx=Load()), attr='extras', ctx=Load())), Return(value=Name(id='ireq', ctx=Load()))], decorator_list=[], returns=Name(id='InstallRequirement', ctx=Load())), FunctionDef(name='_make_install_req_from_dist', args=arguments(posonlyargs=[], args=[arg(arg='dist', annotation=Name(id='BaseDistribution', ctx=Load())), arg(arg='template', annotation=Name(id='InstallRequirement', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='template', ctx=Load()), attr='req', ctx=Load()), body=[Assign(targets=[Name(id='line', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='template', ctx=Load()), attr='req', ctx=Load())], keywords=[]))], orelse=[If(test=Attribute(value=Name(id='template', ctx=Load()), attr='link', ctx=Load()), body=[Assign(targets=[Name(id='line', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='dist', ctx=Load()), attr='canonical_name', ctx=Load()), conversion=-1), Constant(value=' @ '), FormattedValue(value=Attribute(value=Attribute(value=Name(id='template', ctx=Load()), attr='link', ctx=Load()), attr='url', ctx=Load()), conversion=-1)]))], orelse=[Assign(targets=[Name(id='line', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='dist', ctx=Load()), attr='canonical_name', ctx=Load()), conversion=-1), Constant(value='=='), FormattedValue(value=Attribute(value=Name(id='dist', ctx=Load()), attr='version', ctx=Load()), conversion=-1)]))])]), Assign(targets=[Name(id='ireq', ctx=Store())], value=Call(func=Name(id='install_req_from_line', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[keyword(arg='user_supplied', value=Attribute(value=Name(id='template', ctx=Load()), attr='user_supplied', ctx=Load())), keyword(arg='comes_from', value=Attribute(value=Name(id='template', ctx=Load()), attr='comes_from', ctx=Load())), keyword(arg='use_pep517', value=Attribute(value=Name(id='template', ctx=Load()), attr='use_pep517', ctx=Load())), keyword(arg='isolated', value=Attribute(value=Name(id='template', ctx=Load()), attr='isolated', ctx=Load())), keyword(arg='constraint', value=Attribute(value=Name(id='template', ctx=Load()), attr='constraint', ctx=Load())), keyword(arg='global_options', value=Attribute(value=Name(id='template', ctx=Load()), attr='global_options', ctx=Load())), keyword(arg='hash_options', value=Attribute(value=Name(id='template', ctx=Load()), attr='hash_options', ctx=Load())), keyword(arg='config_settings', value=Attribute(value=Name(id='template', ctx=Load()), attr='config_settings', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='ireq', ctx=Load()), attr='satisfied_by', ctx=Store())], value=Name(id='dist', ctx=Load())), Return(value=Name(id='ireq', ctx=Load()))], decorator_list=[], returns=Name(id='InstallRequirement', ctx=Load())), ClassDef(name='_InstallRequirementBackedCandidate', bases=[Name(id='Candidate', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A candidate backed by an ``InstallRequirement``.\n\n    This represents a package request with the target not being already\n    in the environment, and needs to be fetched and installed. The backing\n    ``InstallRequirement`` is responsible for most of the leg work; this\n    class exposes appropriate information to the resolver.\n\n    :param link: The link passed to the ``InstallRequirement``. The backing\n        ``InstallRequirement`` will use this link to fetch the distribution.\n    :param source_link: The link this candidate "originates" from. This is\n        different from ``link`` when the link is found in the wheel cache.\n        ``link`` would point to the wheel cache, while this points to the\n        found remote link (e.g. from pypi.org).\n    ')), AnnAssign(target=Name(id='dist', ctx=Store()), annotation=Name(id='BaseDistribution', ctx=Load()), simple=1), Assign(targets=[Name(id='is_installed', ctx=Store())], value=Constant(value=False)), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='link', annotation=Name(id='Link', ctx=Load())), arg(arg='source_link', annotation=Name(id='Link', ctx=Load())), arg(arg='ireq', annotation=Name(id='InstallRequirement', ctx=Load())), arg(arg='factory', annotation=Constant(value='Factory')), arg(arg='name', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='NormalizedName', ctx=Load()), ctx=Load())), arg(arg='version', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='CandidateVersion', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_link', ctx=Store())], value=Name(id='link', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_source_link', ctx=Store())], value=Name(id='source_link', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_factory', ctx=Store())], value=Name(id='factory', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_ireq', ctx=Store())], value=Name(id='ireq', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_name', ctx=Store())], value=Name(id='name', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_version', ctx=Store())], value=Name(id='version', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='dist', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_prepare', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__str__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), conversion=-1), Constant(value=' '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='version', ctx=Load()), conversion=-1)]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value='{class_name}({link!r})'), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='class_name', value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load())), keyword(arg='link', value=Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_link', ctx=Load())], keywords=[]))]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='__hash__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='hash', ctx=Load()), args=[Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_link', ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='__eq__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other', annotation=Name(id='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='other', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Name(id='links_equivalent', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_link', ctx=Load()), Attribute(value=Name(id='other', ctx=Load()), attr='_link', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Constant(value=False))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='source_link', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_source_link', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Link', ctx=Load()), ctx=Load())), FunctionDef(name='project_name', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='The normalised name of the project the candidate refers to')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_name', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='dist', ctx=Load()), attr='canonical_name', ctx=Load()))], orelse=[]), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_name', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='NormalizedName', ctx=Load())), FunctionDef(name='name', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='project_name', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='version', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_version', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_version', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='dist', ctx=Load()), attr='version', ctx=Load()))], orelse=[]), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_version', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='CandidateVersion', ctx=Load())), FunctionDef(name='format_for_error', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value='{} {} (from {})'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='version', ctx=Load()), IfExp(test=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_link', ctx=Load()), attr='is_file', ctx=Load()), body=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_link', ctx=Load()), attr='file_path', ctx=Load()), orelse=Attribute(value=Name(id='self', ctx=Load()), attr='_link', ctx=Load()))], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='_prepare_distribution', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[Constant(value='Override in subclass')], keywords=[]))], decorator_list=[], returns=Name(id='BaseDistribution', ctx=Load())), FunctionDef(name='_check_metadata_consistency', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dist', annotation=Name(id='BaseDistribution', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check for consistency of project name and version of dist.')), If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_name', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_name', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='dist', ctx=Load()), attr='canonical_name', ctx=Load())])]), body=[Raise(exc=Call(func=Name(id='MetadataInconsistent', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_ireq', ctx=Load()), Constant(value='name'), Attribute(value=Name(id='self', ctx=Load()), attr='_name', ctx=Load()), Attribute(value=Name(id='dist', ctx=Load()), attr='canonical_name', ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_version', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_version', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='dist', ctx=Load()), attr='version', ctx=Load())])]), body=[Raise(exc=Call(func=Name(id='MetadataInconsistent', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_ireq', ctx=Load()), Constant(value='version'), Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_version', ctx=Load())], keywords=[]), Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='dist', ctx=Load()), attr='version', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_prepare', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Name(id='dist', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_prepare_distribution', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Name(id='HashError', ctx=Load()), name='e', body=[Assign(targets=[Attribute(value=Name(id='e', ctx=Load()), attr='req', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_ireq', ctx=Load())), Raise()]), ExceptHandler(type=Name(id='InstallationSubprocessError', ctx=Load()), name='exc', body=[Assign(targets=[Attribute(value=Name(id='exc', ctx=Load()), attr='context', ctx=Store())], value=Constant(value='See above for output.')), Raise()])], orelse=[], finalbody=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_check_metadata_consistency', ctx=Load()), args=[Name(id='dist', ctx=Load())], keywords=[])), Return(value=Name(id='dist', ctx=Load()))], decorator_list=[], returns=Name(id='BaseDistribution', ctx=Load())), FunctionDef(name='iter_dependencies', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='with_requires', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='requires', ctx=Store())], value=IfExp(test=Name(id='with_requires', ctx=Load()), body=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='dist', ctx=Load()), attr='iter_dependencies', ctx=Load()), args=[], keywords=[]), orelse=Tuple(elts=[], ctx=Load()))), For(target=Name(id='r', ctx=Store()), iter=Name(id='requires', ctx=Load()), body=[Expr(value=YieldFrom(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_factory', ctx=Load()), attr='make_requirements_from_spec', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='r', ctx=Load())], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='_ireq', ctx=Load())], keywords=[])))], orelse=[]), Expr(value=Yield(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_factory', ctx=Load()), attr='make_requires_python_requirement', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='dist', ctx=Load()), attr='requires_python', ctx=Load())], keywords=[])))], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Requirement', ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='get_install_requirement', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ireq', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='InstallRequirement', ctx=Load()), ctx=Load()))], decorator_list=[]), ClassDef(name='LinkCandidate', bases=[Name(id='_InstallRequirementBackedCandidate', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='is_editable', ctx=Store())], value=Constant(value=False)), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='link', annotation=Name(id='Link', ctx=Load())), arg(arg='template', annotation=Name(id='InstallRequirement', ctx=Load())), arg(arg='factory', annotation=Constant(value='Factory')), arg(arg='name', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='NormalizedName', ctx=Load()), ctx=Load())), arg(arg='version', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='CandidateVersion', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Assign(targets=[Name(id='source_link', ctx=Store())], value=Name(id='link', ctx=Load())), Assign(targets=[Name(id='cache_entry', ctx=Store())], value=Call(func=Attribute(value=Name(id='factory', ctx=Load()), attr='get_wheel_cache_entry', ctx=Load()), args=[Name(id='source_link', ctx=Load()), Name(id='name', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='cache_entry', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Using cached wheel link: %s'), Attribute(value=Name(id='cache_entry', ctx=Load()), attr='link', ctx=Load())], keywords=[])), Assign(targets=[Name(id='link', ctx=Store())], value=Attribute(value=Name(id='cache_entry', ctx=Load()), attr='link', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='ireq', ctx=Store())], value=Call(func=Name(id='make_install_req_from_link', ctx=Load()), args=[Name(id='link', ctx=Load()), Name(id='template', ctx=Load())], keywords=[])), Assert(test=Compare(left=Attribute(value=Name(id='ireq', ctx=Load()), attr='link', ctx=Load()), ops=[Eq()], comparators=[Name(id='link', ctx=Load())])), If(test=BoolOp(op=And(), values=[Attribute(value=Attribute(value=Name(id='ireq', ctx=Load()), attr='link', ctx=Load()), attr='is_wheel', ctx=Load()), UnaryOp(op=Not(), operand=Attribute(value=Attribute(value=Name(id='ireq', ctx=Load()), attr='link', ctx=Load()), attr='is_file', ctx=Load()))]), body=[Assign(targets=[Name(id='wheel', ctx=Store())], value=Call(func=Name(id='Wheel', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='ireq', ctx=Load()), attr='link', ctx=Load()), attr='filename', ctx=Load())], keywords=[])), Assign(targets=[Name(id='wheel_name', ctx=Store())], value=Call(func=Name(id='canonicalize_name', ctx=Load()), args=[Attribute(value=Name(id='wheel', ctx=Load()), attr='name', ctx=Load())], keywords=[])), Assert(test=Compare(left=Name(id='name', ctx=Load()), ops=[Eq()], comparators=[Name(id='wheel_name', ctx=Load())]), msg=JoinedStr(values=[FormattedValue(value=Name(id='name', ctx=Load()), conversion=114), Constant(value=' != '), FormattedValue(value=Name(id='wheel_name', ctx=Load()), conversion=114), Constant(value=' for wheel')])), If(test=Compare(left=Name(id='version', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='wheel_version', ctx=Store())], value=Call(func=Name(id='Version', ctx=Load()), args=[Attribute(value=Name(id='wheel', ctx=Load()), attr='version', ctx=Load())], keywords=[])), Assert(test=Compare(left=Name(id='version', ctx=Load()), ops=[Eq()], comparators=[Name(id='wheel_version', ctx=Load())]), msg=Call(func=Attribute(value=Constant(value='{!r} != {!r} for wheel {}'), attr='format', ctx=Load()), args=[Name(id='version', ctx=Load()), Name(id='wheel_version', ctx=Load()), Name(id='name', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), If(test=Compare(left=Name(id='cache_entry', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assert(test=Attribute(value=Attribute(value=Name(id='ireq', ctx=Load()), attr='link', ctx=Load()), attr='is_wheel', ctx=Load())), Assert(test=Attribute(value=Attribute(value=Name(id='ireq', ctx=Load()), attr='link', ctx=Load()), attr='is_file', ctx=Load())), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='cache_entry', ctx=Load()), attr='persistent', ctx=Load()), Compare(left=Attribute(value=Name(id='template', ctx=Load()), attr='link', ctx=Load()), ops=[Is()], comparators=[Attribute(value=Name(id='template', ctx=Load()), attr='original_link', ctx=Load())])]), body=[Assign(targets=[Attribute(value=Name(id='ireq', ctx=Load()), attr='cached_wheel_source_link', ctx=Store())], value=Name(id='source_link', ctx=Load()))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='cache_entry', ctx=Load()), attr='origin', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='ireq', ctx=Load()), attr='download_info', ctx=Store())], value=Attribute(value=Name(id='cache_entry', ctx=Load()), attr='origin', ctx=Load()))], orelse=[Assign(targets=[Attribute(value=Name(id='ireq', ctx=Load()), attr='download_info', ctx=Store())], value=Call(func=Name(id='direct_url_from_link', ctx=Load()), args=[Name(id='source_link', ctx=Load())], keywords=[keyword(arg='link_is_in_wheel_cache', value=Attribute(value=Name(id='cache_entry', ctx=Load()), attr='persistent', ctx=Load()))]))])], orelse=[]), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='link', value=Name(id='link', ctx=Load())), keyword(arg='source_link', value=Name(id='source_link', ctx=Load())), keyword(arg='ireq', value=Name(id='ireq', ctx=Load())), keyword(arg='factory', value=Name(id='factory', ctx=Load())), keyword(arg='name', value=Name(id='name', ctx=Load())), keyword(arg='version', value=Name(id='version', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_prepare_distribution', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='preparer', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_factory', ctx=Load()), attr='preparer', ctx=Load())), Return(value=Call(func=Attribute(value=Name(id='preparer', ctx=Load()), attr='prepare_linked_requirement', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_ireq', ctx=Load())], keywords=[keyword(arg='parallel_builds', value=Constant(value=True))]))], decorator_list=[], returns=Name(id='BaseDistribution', ctx=Load()))], decorator_list=[]), ClassDef(name='EditableCandidate', bases=[Name(id='_InstallRequirementBackedCandidate', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='is_editable', ctx=Store())], value=Constant(value=True)), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='link', annotation=Name(id='Link', ctx=Load())), arg(arg='template', annotation=Name(id='InstallRequirement', ctx=Load())), arg(arg='factory', annotation=Constant(value='Factory')), arg(arg='name', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='NormalizedName', ctx=Load()), ctx=Load())), arg(arg='version', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='CandidateVersion', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='link', value=Name(id='link', ctx=Load())), keyword(arg='source_link', value=Name(id='link', ctx=Load())), keyword(arg='ireq', value=Call(func=Name(id='make_install_req_from_editable', ctx=Load()), args=[Name(id='link', ctx=Load()), Name(id='template', ctx=Load())], keywords=[])), keyword(arg='factory', value=Name(id='factory', ctx=Load())), keyword(arg='name', value=Name(id='name', ctx=Load())), keyword(arg='version', value=Name(id='version', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_prepare_distribution', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_factory', ctx=Load()), attr='preparer', ctx=Load()), attr='prepare_editable_requirement', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_ireq', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='BaseDistribution', ctx=Load()))], decorator_list=[]), ClassDef(name='AlreadyInstalledCandidate', bases=[Name(id='Candidate', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='is_installed', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='source_link', ctx=Store())], value=Constant(value=None)), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dist', annotation=Name(id='BaseDistribution', ctx=Load())), arg(arg='template', annotation=Name(id='InstallRequirement', ctx=Load())), arg(arg='factory', annotation=Constant(value='Factory'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='dist', ctx=Store())], value=Name(id='dist', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_ireq', ctx=Store())], value=Call(func=Name(id='_make_install_req_from_dist', ctx=Load()), args=[Name(id='dist', ctx=Load()), Name(id='template', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_factory', ctx=Store())], value=Name(id='factory', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_version', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='skip_reason', ctx=Store())], value=Constant(value='already satisfied')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='factory', ctx=Load()), attr='preparer', ctx=Load()), attr='prepare_installed_requirement', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_ireq', ctx=Load()), Name(id='skip_reason', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__str__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='dist', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value='{class_name}({distribution!r})'), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='class_name', value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load())), keyword(arg='distribution', value=Attribute(value=Name(id='self', ctx=Load()), attr='dist', ctx=Load()))]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='__hash__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='hash', ctx=Load()), args=[Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='version', ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='__eq__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other', annotation=Name(id='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='other', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load())], keywords=[]), body=[Return(value=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='other', ctx=Load()), attr='name', ctx=Load())]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='version', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='other', ctx=Load()), attr='version', ctx=Load())])]))], orelse=[]), Return(value=Constant(value=False))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='project_name', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='dist', ctx=Load()), attr='canonical_name', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='NormalizedName', ctx=Load())), FunctionDef(name='name', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='project_name', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='version', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_version', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_version', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='dist', ctx=Load()), attr='version', ctx=Load()))], orelse=[]), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_version', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='CandidateVersion', ctx=Load())), FunctionDef(name='is_editable', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='dist', ctx=Load()), attr='editable', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='format_for_error', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), conversion=-1), Constant(value=' '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='version', ctx=Load()), conversion=-1), Constant(value=' (Installed)')]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='iter_dependencies', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='with_requires', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='with_requires', ctx=Load())), body=[Return()], orelse=[]), For(target=Name(id='r', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='dist', ctx=Load()), attr='iter_dependencies', ctx=Load()), args=[], keywords=[]), body=[Expr(value=YieldFrom(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_factory', ctx=Load()), attr='make_requirements_from_spec', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='r', ctx=Load())], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='_ireq', ctx=Load())], keywords=[])))], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Requirement', ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='get_install_requirement', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=None))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='InstallRequirement', ctx=Load()), ctx=Load()))], decorator_list=[]), ClassDef(name='ExtrasCandidate', bases=[Name(id='Candidate', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A candidate that has \'extras\', indicating additional dependencies.\n\n    Requirements can be for a project with dependencies, something like\n    foo[extra].  The extras don\'t affect the project/version being installed\n    directly, but indicate that we need additional dependencies. We model that\n    by having an artificial ExtrasCandidate that wraps the "base" candidate.\n\n    The ExtrasCandidate differs from the base in the following ways:\n\n    1. It has a unique name, of the form foo[extra]. This causes the resolver\n       to treat it as a separate node in the dependency graph.\n    2. When we\'re getting the candidate\'s dependencies,\n       a) We specify that we want the extra dependencies as well.\n       b) We add a dependency on the base candidate.\n          See below for why this is needed.\n    3. We return None for the underlying InstallRequirement, as the base\n       candidate will provide it, and we don\'t want to end up with duplicates.\n\n    The dependency on the base candidate is needed so that the resolver can\'t\n    decide that it should recommend foo[extra1] version 1.0 and foo[extra2]\n    version 2.0. Having those candidates depend on foo=1.0 and foo=2.0\n    respectively forces the resolver to recognise that this is a conflict.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='base', annotation=Name(id='BaseCandidate', ctx=Load())), arg(arg='extras', annotation=Subscript(value=Name(id='FrozenSet', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[arg(arg='comes_from', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='InstallRequirement', ctx=Load()), ctx=Load()))], kw_defaults=[Constant(value=None)], defaults=[]), body=[Expr(value=Constant(value="\n        :param comes_from: the InstallRequirement that led to this candidate if it\n            differs from the base's InstallRequirement. This will often be the\n            case in the sense that this candidate's requirement has the extras\n            while the base's does not. Unlike the InstallRequirement backed\n            candidates, this requirement is used solely for reporting purposes,\n            it does not do any leg work.\n        ")), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='base', ctx=Store())], value=Name(id='base', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='extras', ctx=Store())], value=Call(func=Name(id='frozenset', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='canonicalize_name', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='e', ctx=Store()), iter=Name(id='extras', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_unnormalized_extras', ctx=Store())], value=Call(func=Attribute(value=Name(id='extras', ctx=Load()), attr='difference', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='extras', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_comes_from', ctx=Store())], value=IfExp(test=Compare(left=Name(id='comes_from', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Name(id='comes_from', ctx=Load()), orelse=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='base', ctx=Load()), attr='_ireq', ctx=Load())))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__str__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='name', ctx=Store()), Name(id='rest', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='base', ctx=Load())], keywords=[]), attr='split', ctx=Load()), args=[Constant(value=' '), Constant(value=1)], keywords=[])), Return(value=Call(func=Attribute(value=Constant(value='{}[{}] {}'), attr='format', ctx=Load()), args=[Name(id='name', ctx=Load()), Call(func=Attribute(value=Constant(value=','), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='extras', ctx=Load())], keywords=[]), Name(id='rest', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value='{class_name}(base={base!r}, extras={extras!r})'), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='class_name', value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load())), keyword(arg='base', value=Attribute(value=Name(id='self', ctx=Load()), attr='base', ctx=Load())), keyword(arg='extras', value=Attribute(value=Name(id='self', ctx=Load()), attr='extras', ctx=Load()))]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='__hash__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='hash', ctx=Load()), args=[Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='base', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='extras', ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='__eq__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other', annotation=Name(id='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='other', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load())], keywords=[]), body=[Return(value=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='base', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='other', ctx=Load()), attr='base', ctx=Load())]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='extras', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='other', ctx=Load()), attr='extras', ctx=Load())])]))], orelse=[]), Return(value=Constant(value=False))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='project_name', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='base', ctx=Load()), attr='project_name', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='NormalizedName', ctx=Load())), FunctionDef(name='name', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='The normalised name of the project the candidate refers to')), Return(value=Call(func=Name(id='format_name', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='base', ctx=Load()), attr='project_name', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='extras', ctx=Load())], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='version', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='base', ctx=Load()), attr='version', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='CandidateVersion', ctx=Load())), FunctionDef(name='format_for_error', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value='{} [{}]'), attr='format', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='base', ctx=Load()), attr='format_for_error', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Call(func=Name(id='sorted', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='extras', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='is_installed', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='base', ctx=Load()), attr='is_installed', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='is_editable', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='base', ctx=Load()), attr='is_editable', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='source_link', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='base', ctx=Load()), attr='source_link', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Link', ctx=Load()), ctx=Load())), FunctionDef(name='_warn_invalid_extras', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='requested', annotation=Subscript(value=Name(id='FrozenSet', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='valid', annotation=Subscript(value=Name(id='FrozenSet', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Emit warnings for invalid extras being requested.\n\n        This emits a warning for each requested extra that is not in the\n        candidate's ``Provides-Extra`` list.\n        ")), Assign(targets=[Name(id='invalid_extras_to_warn', ctx=Store())], value=Call(func=Name(id='frozenset', ctx=Load()), args=[GeneratorExp(elt=Name(id='extra', ctx=Load()), generators=[comprehension(target=Name(id='extra', ctx=Store()), iter=Name(id='requested', ctx=Load()), ifs=[BoolOp(op=And(), values=[Compare(left=Name(id='extra', ctx=Load()), ops=[NotIn()], comparators=[Name(id='valid', ctx=Load())]), Compare(left=Name(id='extra', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='extras', ctx=Load())])])], is_async=0)])], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='invalid_extras_to_warn', ctx=Load())), body=[Return()], orelse=[]), For(target=Name(id='extra', ctx=Store()), iter=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='invalid_extras_to_warn', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value="%s %s does not provide the extra '%s'"), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='base', ctx=Load()), attr='name', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='version', ctx=Load()), Name(id='extra', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_calculate_valid_requested_extras', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Get a list of valid extras requested by this candidate.\n\n        The user (or upstream dependant) may have specified extras that the\n        candidate doesn't support. Any unsupported extras are dropped, and each\n        cause a warning to be logged here.\n        ")), Assign(targets=[Name(id='requested_extras', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='extras', ctx=Load()), attr='union', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_unnormalized_extras', ctx=Load())], keywords=[])), Assign(targets=[Name(id='valid_extras', ctx=Store())], value=Call(func=Name(id='frozenset', ctx=Load()), args=[GeneratorExp(elt=Name(id='extra', ctx=Load()), generators=[comprehension(target=Name(id='extra', ctx=Store()), iter=Name(id='requested_extras', ctx=Load()), ifs=[Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='base', ctx=Load()), attr='dist', ctx=Load()), attr='is_extra_provided', ctx=Load()), args=[Name(id='extra', ctx=Load())], keywords=[])], is_async=0)])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_warn_invalid_extras', ctx=Load()), args=[Name(id='requested_extras', ctx=Load()), Name(id='valid_extras', ctx=Load())], keywords=[])), Return(value=Name(id='valid_extras', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='FrozenSet', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='iter_dependencies', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='with_requires', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='factory', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='base', ctx=Load()), attr='_factory', ctx=Load())), Expr(value=Yield(value=Call(func=Attribute(value=Name(id='factory', ctx=Load()), attr='make_requirement_from_candidate', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='base', ctx=Load())], keywords=[]))), If(test=UnaryOp(op=Not(), operand=Name(id='with_requires', ctx=Load())), body=[Return()], orelse=[]), Assign(targets=[Name(id='valid_extras', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_calculate_valid_requested_extras', ctx=Load()), args=[], keywords=[])), For(target=Name(id='r', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='base', ctx=Load()), attr='dist', ctx=Load()), attr='iter_dependencies', ctx=Load()), args=[Name(id='valid_extras', ctx=Load())], keywords=[]), body=[Expr(value=YieldFrom(value=Call(func=Attribute(value=Name(id='factory', ctx=Load()), attr='make_requirements_from_spec', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='r', ctx=Load())], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='_comes_from', ctx=Load()), Name(id='valid_extras', ctx=Load())], keywords=[])))], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Requirement', ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='get_install_requirement', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=None))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='InstallRequirement', ctx=Load()), ctx=Load()))], decorator_list=[]), ClassDef(name='RequiresPythonCandidate', bases=[Name(id='Candidate', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='is_installed', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='source_link', ctx=Store())], value=Constant(value=None)), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='py_version_info', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='py_version_info', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='version_info', ctx=Store())], value=Call(func=Name(id='normalize_version_info', ctx=Load()), args=[Name(id='py_version_info', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='version_info', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), slice=Slice(upper=Constant(value=3)), ctx=Load()))]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_version', ctx=Store())], value=Call(func=Name(id='Version', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='.'), attr='join', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='str', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Name(id='version_info', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__str__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[Constant(value='Python '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='_version', ctx=Load()), conversion=-1)]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='project_name', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Name(id='REQUIRES_PYTHON_IDENTIFIER', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='NormalizedName', ctx=Load())), FunctionDef(name='name', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Name(id='REQUIRES_PYTHON_IDENTIFIER', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='version', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_version', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='CandidateVersion', ctx=Load())), FunctionDef(name='format_for_error', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[Constant(value='Python '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='version', ctx=Load()), conversion=-1)]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='iter_dependencies', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='with_requires', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Tuple(elts=[], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Requirement', ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='get_install_requirement', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=None))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='InstallRequirement', ctx=Load()), ctx=Load()))], decorator_list=[])], type_ignores=[])