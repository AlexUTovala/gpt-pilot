Module(body=[Import(names=[alias(name='logging')]), Import(names=[alias(name='mimetypes')]), Import(names=[alias(name='os')]), Import(names=[alias(name='pathlib')]), ImportFrom(module='typing', names=[alias(name='Callable'), alias(name='Iterable'), alias(name='Optional'), alias(name='Tuple')], level=0), ImportFrom(module='pip._internal.models.candidate', names=[alias(name='InstallationCandidate')], level=0), ImportFrom(module='pip._internal.models.link', names=[alias(name='Link')], level=0), ImportFrom(module='pip._internal.utils.urls', names=[alias(name='path_to_url'), alias(name='url_to_path')], level=0), ImportFrom(module='pip._internal.vcs', names=[alias(name='is_url')], level=0), Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), Assign(targets=[Name(id='FoundCandidates', ctx=Store())], value=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='InstallationCandidate', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='FoundLinks', ctx=Store())], value=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='Link', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='CandidatesFromPage', ctx=Store())], value=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='Link', ctx=Load())], ctx=Load()), Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='InstallationCandidate', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='PageValidator', ctx=Store())], value=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='Link', ctx=Load())], ctx=Load()), Name(id='bool', ctx=Load())], ctx=Load()), ctx=Load())), ClassDef(name='LinkSource', bases=[], keywords=[], body=[FunctionDef(name='link', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Returns the underlying link, if there's one.")), Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Link', ctx=Load()), ctx=Load())), FunctionDef(name='page_candidates', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Candidates found by parsing an archive listing HTML file.')), Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='FoundCandidates', ctx=Load())), FunctionDef(name='file_links', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Links found by specifying archives directly.')), Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='FoundLinks', ctx=Load()))], decorator_list=[]), FunctionDef(name='_is_html_file', args=arguments(posonlyargs=[], args=[arg(arg='file_url', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Compare(left=Subscript(value=Call(func=Attribute(value=Name(id='mimetypes', ctx=Load()), attr='guess_type', ctx=Load()), args=[Name(id='file_url', ctx=Load())], keywords=[keyword(arg='strict', value=Constant(value=False))]), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Constant(value='text/html')]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), ClassDef(name='_FlatDirectorySource', bases=[Name(id='LinkSource', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Link source specified by ``--find-links=<path-to-dir>``.\n\n    This looks the content of the directory, and returns:\n\n    * ``page_candidates``: Links listed on each HTML file in the directory.\n    * ``file_candidates``: Archives in the directory.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='candidates_from_page', annotation=Name(id='CandidatesFromPage', ctx=Load())), arg(arg='path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_candidates_from_page', ctx=Store())], value=Name(id='candidates_from_page', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_path', ctx=Store())], value=Call(func=Attribute(value=Name(id='pathlib', ctx=Load()), attr='Path', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='realpath', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='link', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=None))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Link', ctx=Load()), ctx=Load())), FunctionDef(name='page_candidates', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='path', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_path', ctx=Load()), attr='iterdir', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='url', ctx=Store())], value=Call(func=Name(id='path_to_url', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='_is_html_file', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[])), body=[Continue()], orelse=[]), Expr(value=YieldFrom(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_candidates_from_page', ctx=Load()), args=[Call(func=Name(id='Link', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[])], keywords=[])))], orelse=[])], decorator_list=[], returns=Name(id='FoundCandidates', ctx=Load())), FunctionDef(name='file_links', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='path', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_path', ctx=Load()), attr='iterdir', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='url', ctx=Store())], value=Call(func=Name(id='path_to_url', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])], keywords=[])), If(test=Call(func=Name(id='_is_html_file', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[]), body=[Continue()], orelse=[]), Expr(value=Yield(value=Call(func=Name(id='Link', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[])))], orelse=[])], decorator_list=[], returns=Name(id='FoundLinks', ctx=Load()))], decorator_list=[]), ClassDef(name='_LocalFileSource', bases=[Name(id='LinkSource', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='``--find-links=<path-or-url>`` or ``--[extra-]index-url=<path-or-url>``.\n\n    If a URL is supplied, it must be a ``file:`` URL. If a path is supplied to\n    the option, it is converted to a URL first. This returns:\n\n    * ``page_candidates``: Links listed on an HTML file.\n    * ``file_candidates``: The non-HTML file.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='candidates_from_page', annotation=Name(id='CandidatesFromPage', ctx=Load())), arg(arg='link', annotation=Name(id='Link', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_candidates_from_page', ctx=Store())], value=Name(id='candidates_from_page', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_link', ctx=Store())], value=Name(id='link', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='link', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_link', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Link', ctx=Load()), ctx=Load())), FunctionDef(name='page_candidates', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='_is_html_file', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_link', ctx=Load()), attr='url', ctx=Load())], keywords=[])), body=[Return()], orelse=[]), Expr(value=YieldFrom(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_candidates_from_page', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_link', ctx=Load())], keywords=[])))], decorator_list=[], returns=Name(id='FoundCandidates', ctx=Load())), FunctionDef(name='file_links', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='_is_html_file', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_link', ctx=Load()), attr='url', ctx=Load())], keywords=[]), body=[Return()], orelse=[]), Expr(value=Yield(value=Attribute(value=Name(id='self', ctx=Load()), attr='_link', ctx=Load())))], decorator_list=[], returns=Name(id='FoundLinks', ctx=Load()))], decorator_list=[]), ClassDef(name='_RemoteFileSource', bases=[Name(id='LinkSource', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='``--find-links=<url>`` or ``--[extra-]index-url=<url>``.\n\n    This returns:\n\n    * ``page_candidates``: Links listed on an HTML file.\n    * ``file_candidates``: The non-HTML file.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='candidates_from_page', annotation=Name(id='CandidatesFromPage', ctx=Load())), arg(arg='page_validator', annotation=Name(id='PageValidator', ctx=Load())), arg(arg='link', annotation=Name(id='Link', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_candidates_from_page', ctx=Store())], value=Name(id='candidates_from_page', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_page_validator', ctx=Store())], value=Name(id='page_validator', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_link', ctx=Store())], value=Name(id='link', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='link', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_link', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Link', ctx=Load()), ctx=Load())), FunctionDef(name='page_candidates', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_page_validator', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_link', ctx=Load())], keywords=[])), body=[Return()], orelse=[]), Expr(value=YieldFrom(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_candidates_from_page', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_link', ctx=Load())], keywords=[])))], decorator_list=[], returns=Name(id='FoundCandidates', ctx=Load())), FunctionDef(name='file_links', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Yield(value=Attribute(value=Name(id='self', ctx=Load()), attr='_link', ctx=Load())))], decorator_list=[], returns=Name(id='FoundLinks', ctx=Load()))], decorator_list=[]), ClassDef(name='_IndexDirectorySource', bases=[Name(id='LinkSource', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='``--[extra-]index-url=<path-to-directory>``.\n\n    This is treated like a remote URL; ``candidates_from_page`` contains logic\n    for this by appending ``index.html`` to the link.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='candidates_from_page', annotation=Name(id='CandidatesFromPage', ctx=Load())), arg(arg='link', annotation=Name(id='Link', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_candidates_from_page', ctx=Store())], value=Name(id='candidates_from_page', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_link', ctx=Store())], value=Name(id='link', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='link', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_link', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Link', ctx=Load()), ctx=Load())), FunctionDef(name='page_candidates', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=YieldFrom(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_candidates_from_page', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_link', ctx=Load())], keywords=[])))], decorator_list=[], returns=Name(id='FoundCandidates', ctx=Load())), FunctionDef(name='file_links', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Tuple(elts=[], ctx=Load()))], decorator_list=[], returns=Name(id='FoundLinks', ctx=Load()))], decorator_list=[]), FunctionDef(name='build_source', args=arguments(posonlyargs=[], args=[arg(arg='location', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[arg(arg='candidates_from_page', annotation=Name(id='CandidatesFromPage', ctx=Load())), arg(arg='page_validator', annotation=Name(id='PageValidator', ctx=Load())), arg(arg='expand_dir', annotation=Name(id='bool', ctx=Load())), arg(arg='cache_link_parsing', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[None, None, None, None], defaults=[]), body=[AnnAssign(target=Name(id='path', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=1), AnnAssign(target=Name(id='url', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=1), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='location', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='url', ctx=Store())], value=Call(func=Name(id='path_to_url', ctx=Load()), args=[Name(id='location', ctx=Load())], keywords=[])), Assign(targets=[Name(id='path', ctx=Store())], value=Name(id='location', ctx=Load()))], orelse=[If(test=Call(func=Attribute(value=Name(id='location', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='file:')], keywords=[]), body=[Assign(targets=[Name(id='url', ctx=Store())], value=Name(id='location', ctx=Load())), Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Name(id='url_to_path', ctx=Load()), args=[Name(id='location', ctx=Load())], keywords=[]))], orelse=[If(test=Call(func=Name(id='is_url', ctx=Load()), args=[Name(id='location', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='url', ctx=Store())], value=Name(id='location', ctx=Load()))], orelse=[])])]), If(test=Compare(left=Name(id='url', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Constant(value="Location '%s' is ignored: it is either a non-existing path or lacks a specific scheme.")), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Name(id='msg', ctx=Load()), Name(id='location', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Constant(value=None), Constant(value=None)], ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='path', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[AnnAssign(target=Name(id='source', ctx=Store()), annotation=Name(id='LinkSource', ctx=Load()), value=Call(func=Name(id='_RemoteFileSource', ctx=Load()), args=[], keywords=[keyword(arg='candidates_from_page', value=Name(id='candidates_from_page', ctx=Load())), keyword(arg='page_validator', value=Name(id='page_validator', ctx=Load())), keyword(arg='link', value=Call(func=Name(id='Link', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[keyword(arg='cache_link_parsing', value=Name(id='cache_link_parsing', ctx=Load()))]))]), simple=1), Return(value=Tuple(elts=[Name(id='url', ctx=Load()), Name(id='source', ctx=Load())], ctx=Load()))], orelse=[]), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isdir', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), body=[If(test=Name(id='expand_dir', ctx=Load()), body=[Assign(targets=[Name(id='source', ctx=Store())], value=Call(func=Name(id='_FlatDirectorySource', ctx=Load()), args=[], keywords=[keyword(arg='candidates_from_page', value=Name(id='candidates_from_page', ctx=Load())), keyword(arg='path', value=Name(id='path', ctx=Load()))]))], orelse=[Assign(targets=[Name(id='source', ctx=Store())], value=Call(func=Name(id='_IndexDirectorySource', ctx=Load()), args=[], keywords=[keyword(arg='candidates_from_page', value=Name(id='candidates_from_page', ctx=Load())), keyword(arg='link', value=Call(func=Name(id='Link', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[keyword(arg='cache_link_parsing', value=Name(id='cache_link_parsing', ctx=Load()))]))]))]), Return(value=Tuple(elts=[Name(id='url', ctx=Load()), Name(id='source', ctx=Load())], ctx=Load()))], orelse=[If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isfile', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='source', ctx=Store())], value=Call(func=Name(id='_LocalFileSource', ctx=Load()), args=[], keywords=[keyword(arg='candidates_from_page', value=Name(id='candidates_from_page', ctx=Load())), keyword(arg='link', value=Call(func=Name(id='Link', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[keyword(arg='cache_link_parsing', value=Name(id='cache_link_parsing', ctx=Load()))]))])), Return(value=Tuple(elts=[Name(id='url', ctx=Load()), Name(id='source', ctx=Load())], ctx=Load()))], orelse=[])]), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value="Location '%s' is ignored: it is neither a file nor a directory."), Name(id='location', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Name(id='url', ctx=Load()), Constant(value=None)], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='LinkSource', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], type_ignores=[])