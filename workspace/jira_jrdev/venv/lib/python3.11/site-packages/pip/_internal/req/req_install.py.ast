Module(body=[Import(names=[alias(name='functools')]), Import(names=[alias(name='logging')]), Import(names=[alias(name='os')]), Import(names=[alias(name='shutil')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='uuid')]), Import(names=[alias(name='zipfile')]), ImportFrom(module='optparse', names=[alias(name='Values')], level=0), ImportFrom(module='pathlib', names=[alias(name='Path')], level=0), ImportFrom(module='typing', names=[alias(name='Any'), alias(name='Collection'), alias(name='Dict'), alias(name='Iterable'), alias(name='List'), alias(name='Optional'), alias(name='Sequence'), alias(name='Union')], level=0), ImportFrom(module='pip._vendor.packaging.markers', names=[alias(name='Marker')], level=0), ImportFrom(module='pip._vendor.packaging.requirements', names=[alias(name='Requirement')], level=0), ImportFrom(module='pip._vendor.packaging.specifiers', names=[alias(name='SpecifierSet')], level=0), ImportFrom(module='pip._vendor.packaging.utils', names=[alias(name='canonicalize_name')], level=0), ImportFrom(module='pip._vendor.packaging.version', names=[alias(name='Version')], level=0), ImportFrom(module='pip._vendor.packaging.version', names=[alias(name='parse', asname='parse_version')], level=0), ImportFrom(module='pip._vendor.pyproject_hooks', names=[alias(name='BuildBackendHookCaller')], level=0), ImportFrom(module='pip._internal.build_env', names=[alias(name='BuildEnvironment'), alias(name='NoOpBuildEnvironment')], level=0), ImportFrom(module='pip._internal.exceptions', names=[alias(name='InstallationError'), alias(name='PreviousBuildDirError')], level=0), ImportFrom(module='pip._internal.locations', names=[alias(name='get_scheme')], level=0), ImportFrom(module='pip._internal.metadata', names=[alias(name='BaseDistribution'), alias(name='get_default_environment'), alias(name='get_directory_distribution'), alias(name='get_wheel_distribution')], level=0), ImportFrom(module='pip._internal.metadata.base', names=[alias(name='FilesystemWheel')], level=0), ImportFrom(module='pip._internal.models.direct_url', names=[alias(name='DirectUrl')], level=0), ImportFrom(module='pip._internal.models.link', names=[alias(name='Link')], level=0), ImportFrom(module='pip._internal.operations.build.metadata', names=[alias(name='generate_metadata')], level=0), ImportFrom(module='pip._internal.operations.build.metadata_editable', names=[alias(name='generate_editable_metadata')], level=0), ImportFrom(module='pip._internal.operations.build.metadata_legacy', names=[alias(name='generate_metadata', asname='generate_metadata_legacy')], level=0), ImportFrom(module='pip._internal.operations.install.editable_legacy', names=[alias(name='install_editable', asname='install_editable_legacy')], level=0), ImportFrom(module='pip._internal.operations.install.wheel', names=[alias(name='install_wheel')], level=0), ImportFrom(module='pip._internal.pyproject', names=[alias(name='load_pyproject_toml'), alias(name='make_pyproject_path')], level=0), ImportFrom(module='pip._internal.req.req_uninstall', names=[alias(name='UninstallPathSet')], level=0), ImportFrom(module='pip._internal.utils.deprecation', names=[alias(name='deprecated')], level=0), ImportFrom(module='pip._internal.utils.hashes', names=[alias(name='Hashes')], level=0), ImportFrom(module='pip._internal.utils.misc', names=[alias(name='ConfiguredBuildBackendHookCaller'), alias(name='ask_path_exists'), alias(name='backup_dir'), alias(name='display_path'), alias(name='hide_url'), alias(name='is_installable_dir'), alias(name='redact_auth_from_requirement'), alias(name='redact_auth_from_url')], level=0), ImportFrom(module='pip._internal.utils.packaging', names=[alias(name='safe_extra')], level=0), ImportFrom(module='pip._internal.utils.subprocess', names=[alias(name='runner_with_spinner_message')], level=0), ImportFrom(module='pip._internal.utils.temp_dir', names=[alias(name='TempDirectory'), alias(name='tempdir_kinds')], level=0), ImportFrom(module='pip._internal.utils.unpacking', names=[alias(name='unpack_file')], level=0), ImportFrom(module='pip._internal.utils.virtualenv', names=[alias(name='running_under_virtualenv')], level=0), ImportFrom(module='pip._internal.vcs', names=[alias(name='vcs')], level=0), Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), ClassDef(name='InstallRequirement', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    Represents something that may be installed later on, may have information\n    about where to fetch the relevant requirement and also contains logic for\n    installing the said requirement.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='req', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Requirement', ctx=Load()), ctx=Load())), arg(arg='comes_from', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Constant(value='InstallRequirement')], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='editable', annotation=Name(id='bool', ctx=Load())), arg(arg='link', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Link', ctx=Load()), ctx=Load())), arg(arg='markers', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Marker', ctx=Load()), ctx=Load())), arg(arg='use_pep517', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load())), arg(arg='isolated', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[arg(arg='global_options', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='hash_options', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='config_settings', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='constraint', annotation=Name(id='bool', ctx=Load())), arg(arg='extras', annotation=Subscript(value=Name(id='Collection', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='user_supplied', annotation=Name(id='bool', ctx=Load())), arg(arg='permit_editable_wheels', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=False), Tuple(elts=[], ctx=Load()), Constant(value=False), Constant(value=False)], defaults=[Constant(value=False), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=False)]), body=[Assert(test=BoolOp(op=Or(), values=[Compare(left=Name(id='req', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='req', ctx=Load()), Name(id='Requirement', ctx=Load())], keywords=[])]), msg=Name(id='req', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='req', ctx=Store())], value=Name(id='req', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='comes_from', ctx=Store())], value=Name(id='comes_from', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='constraint', ctx=Store())], value=Name(id='constraint', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='editable', ctx=Store())], value=Name(id='editable', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='permit_editable_wheels', ctx=Store())], value=Name(id='permit_editable_wheels', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='source_dir', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='editable', ctx=Load()), body=[Assert(test=Name(id='link', ctx=Load())), If(test=Attribute(value=Name(id='link', ctx=Load()), attr='is_file', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='source_dir', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normpath', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Attribute(value=Name(id='link', ctx=Load()), attr='file_path', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='link', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Name(id='req', ctx=Load()), Attribute(value=Name(id='req', ctx=Load()), attr='url', ctx=Load())]), body=[Assign(targets=[Name(id='link', ctx=Store())], value=Call(func=Name(id='Link', ctx=Load()), args=[Attribute(value=Name(id='req', ctx=Load()), attr='url', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='link', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='original_link', ctx=Store())], value=Name(id='link', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='cached_wheel_source_link', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Link', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='download_info', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='DirectUrl', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='local_file_path', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='link', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='link', ctx=Load()), attr='is_file', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='local_file_path', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='link', ctx=Load()), attr='file_path', ctx=Load()))], orelse=[]), If(test=Name(id='extras', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='extras', ctx=Store())], value=Name(id='extras', ctx=Load()))], orelse=[If(test=Name(id='req', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='extras', ctx=Store())], value=Attribute(value=Name(id='req', ctx=Load()), attr='extras', ctx=Load()))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='extras', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[]))])]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='markers', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Name(id='req', ctx=Load())]), body=[Assign(targets=[Name(id='markers', ctx=Store())], value=Attribute(value=Name(id='req', ctx=Load()), attr='marker', ctx=Load()))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='markers', ctx=Store())], value=Name(id='markers', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='satisfied_by', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='BaseDistribution', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='should_reinstall', ctx=Store())], value=Constant(value=False)), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_temp_build_dir', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TempDirectory', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='install_succeeded', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='global_options', ctx=Store())], value=IfExp(test=Name(id='global_options', ctx=Load()), body=Name(id='global_options', ctx=Load()), orelse=List(elts=[], ctx=Load()))), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='hash_options', ctx=Store())], value=IfExp(test=Name(id='hash_options', ctx=Load()), body=Name(id='hash_options', ctx=Load()), orelse=Dict(keys=[], values=[]))), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='config_settings', ctx=Store())], value=Name(id='config_settings', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='prepared', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='user_supplied', ctx=Store())], value=Name(id='user_supplied', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='isolated', ctx=Store())], value=Name(id='isolated', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='build_env', ctx=Store()), annotation=Name(id='BuildEnvironment', ctx=Load()), value=Call(func=Name(id='NoOpBuildEnvironment', ctx=Load()), args=[], keywords=[]), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='metadata_directory', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='pyproject_requires', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='requirements_to_check', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='pep517_backend', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='BuildBackendHookCaller', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='use_pep517', ctx=Store())], value=Name(id='use_pep517', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='needs_more_preparation', ctx=Store())], value=Constant(value=False)), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_archive_source', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Path', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0)], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__str__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='req', ctx=Load()), body=[Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Name(id='redact_auth_from_requirement', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='req', ctx=Load())], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='link', ctx=Load()), body=[AugAssign(target=Name(id='s', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Constant(value=' from {}'), attr='format', ctx=Load()), args=[Call(func=Name(id='redact_auth_from_url', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='link', ctx=Load()), attr='url', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], orelse=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='link', ctx=Load()), body=[Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Name(id='redact_auth_from_url', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='link', ctx=Load()), attr='url', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='s', ctx=Store())], value=Constant(value='<InstallRequirement>'))])]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='satisfied_by', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[If(test=Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='satisfied_by', ctx=Load()), attr='location', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='location', ctx=Store())], value=Call(func=Name(id='display_path', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='satisfied_by', ctx=Load()), attr='location', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='location', ctx=Store())], value=Constant(value='<memory>'))]), AugAssign(target=Name(id='s', ctx=Store()), op=Add(), value=JoinedStr(values=[Constant(value=' in '), FormattedValue(value=Name(id='location', ctx=Load()), conversion=-1)]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='comes_from', ctx=Load()), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='comes_from', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[AnnAssign(target=Name(id='comes_from', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Attribute(value=Name(id='self', ctx=Load()), attr='comes_from', ctx=Load()), simple=1)], orelse=[Assign(targets=[Name(id='comes_from', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='comes_from', ctx=Load()), attr='from_path', ctx=Load()), args=[], keywords=[]))]), If(test=Name(id='comes_from', ctx=Load()), body=[AugAssign(target=Name(id='s', ctx=Store()), op=Add(), value=JoinedStr(values=[Constant(value=' (from '), FormattedValue(value=Name(id='comes_from', ctx=Load()), conversion=-1), Constant(value=')')]))], orelse=[])], orelse=[]), Return(value=Name(id='s', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value='<{} object: {} editable={!r}>'), attr='format', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), Call(func=Name(id='str', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='editable', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='format_debug', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='An un-tested helper for getting state, for debugging.')), Assign(targets=[Name(id='attributes', ctx=Store())], value=Call(func=Name(id='vars', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), Assign(targets=[Name(id='names', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='attributes', ctx=Load())], keywords=[])), Assign(targets=[Name(id='state', ctx=Store())], value=GeneratorExp(elt=Call(func=Attribute(value=Constant(value='{}={!r}'), attr='format', ctx=Load()), args=[Name(id='attr', ctx=Load()), Subscript(value=Name(id='attributes', ctx=Load()), slice=Name(id='attr', ctx=Load()), ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='attr', ctx=Store()), iter=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='names', ctx=Load())], keywords=[]), ifs=[], is_async=0)])), Return(value=Call(func=Attribute(value=Constant(value='<{name} object: {{{state}}}>'), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load())), keyword(arg='state', value=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Name(id='state', ctx=Load())], keywords=[]))]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='name', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='req', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=None))], orelse=[]), Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='req', ctx=Load()), attr='name', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='supports_pyproject_editable', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='use_pep517', ctx=Load())), body=[Return(value=Constant(value=False))], orelse=[]), Assert(test=Attribute(value=Name(id='self', ctx=Load()), attr='pep517_backend', ctx=Load())), With(items=[withitem(context_expr=Attribute(value=Name(id='self', ctx=Load()), attr='build_env', ctx=Load()))], body=[Assign(targets=[Name(id='runner', ctx=Store())], value=Call(func=Name(id='runner_with_spinner_message', ctx=Load()), args=[Constant(value='Checking if build backend supports build_editable')], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='pep517_backend', ctx=Load()), attr='subprocess_runner', ctx=Load()), args=[Name(id='runner', ctx=Load())], keywords=[]))], body=[Return(value=Compare(left=Constant(value='build_editable'), ops=[In()], comparators=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='pep517_backend', ctx=Load()), attr='_supported_features', ctx=Load()), args=[], keywords=[])]))])])], decorator_list=[Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='lru_cache', ctx=Load()), args=[], keywords=[])], returns=Name(id='bool', ctx=Load())), FunctionDef(name='specifier', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='req', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='req', ctx=Load()), attr='specifier', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='SpecifierSet', ctx=Load())), FunctionDef(name='is_direct', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Whether this requirement was specified as a direct URL.')), Return(value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='original_link', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='is_pinned', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return whether I am pinned to an exact version.\n\n        For example, some-package==1.2 is pinned; some-package>1.2 is not.\n        ')), Assert(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='req', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Name(id='specifiers', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='req', ctx=Load()), attr='specifier', ctx=Load())), Return(value=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='specifiers', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Attribute(value=Call(func=Name(id='next', ctx=Load()), args=[Call(func=Name(id='iter', ctx=Load()), args=[Name(id='specifiers', ctx=Load())], keywords=[])], keywords=[]), attr='operator', ctx=Load()), ops=[In()], comparators=[Set(elts=[Constant(value='=='), Constant(value='===')])])]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='match_markers', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='extras_requested', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='extras_requested', ctx=Load())), body=[Assign(targets=[Name(id='extras_requested', ctx=Store())], value=Tuple(elts=[Constant(value='')], ctx=Load()))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='markers', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=BoolOp(op=Or(), values=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='markers', ctx=Load()), attr='evaluate', ctx=Load()), args=[Dict(keys=[Constant(value='extra')], values=[Name(id='extra', ctx=Load())])], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='markers', ctx=Load()), attr='evaluate', ctx=Load()), args=[Dict(keys=[Constant(value='extra')], values=[Call(func=Name(id='safe_extra', ctx=Load()), args=[Name(id='extra', ctx=Load())], keywords=[])])], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='markers', ctx=Load()), attr='evaluate', ctx=Load()), args=[Dict(keys=[Constant(value='extra')], values=[Call(func=Name(id='canonicalize_name', ctx=Load()), args=[Name(id='extra', ctx=Load())], keywords=[])])], keywords=[])]), generators=[comprehension(target=Name(id='extra', ctx=Store()), iter=Name(id='extras_requested', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], orelse=[Return(value=Constant(value=True))])], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='has_hash_options', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return whether any known-good hashes are specified as options.\n\n        These activate --require-hashes mode; hashes specified as part of a\n        URL do not.\n\n        ')), Return(value=Call(func=Name(id='bool', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='hash_options', ctx=Load())], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='hashes', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='trust_internet', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Expr(value=Constant(value='Return a hash-comparer that considers my option- and URL-based\n        hashes to be known-good.\n\n        Hashes in URLs--ones embedded in the requirements file, not ones\n        downloaded from an index server--are almost peers with ones from\n        flags. They satisfy --require-hashes (whether it was implicitly or\n        explicitly activated) but do not activate it. md5 and sha224 are not\n        allowed in flags, which should nudge people toward good algos. We\n        always OR all hashes together, even ones from URLs.\n\n        :param trust_internet: Whether to trust URL-based (#md5=...) hashes\n            downloaded from the internet, as by populate_link()\n\n        ')), Assign(targets=[Name(id='good_hashes', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='hash_options', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), If(test=Name(id='trust_internet', ctx=Load()), body=[Assign(targets=[Name(id='link', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='link', ctx=Load()))], orelse=[If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='is_direct', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='user_supplied', ctx=Load())]), body=[Assign(targets=[Name(id='link', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='original_link', ctx=Load()))], orelse=[Assign(targets=[Name(id='link', ctx=Store())], value=Constant(value=None))])]), If(test=BoolOp(op=And(), values=[Name(id='link', ctx=Load()), Attribute(value=Name(id='link', ctx=Load()), attr='hash', ctx=Load())]), body=[Assert(test=Compare(left=Attribute(value=Name(id='link', ctx=Load()), attr='hash_name', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='good_hashes', ctx=Load()), attr='setdefault', ctx=Load()), args=[Attribute(value=Name(id='link', ctx=Load()), attr='hash_name', ctx=Load()), List(elts=[], ctx=Load())], keywords=[]), attr='append', ctx=Load()), args=[Attribute(value=Name(id='link', ctx=Load()), attr='hash', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='Hashes', ctx=Load()), args=[Name(id='good_hashes', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='Hashes', ctx=Load())), FunctionDef(name='from_path', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Format a nice indicator to show where this "comes from" ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='req', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='req', ctx=Load())], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='comes_from', ctx=Load()), body=[AnnAssign(target=Name(id='comes_from', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), simple=1), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='comes_from', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='comes_from', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='comes_from', ctx=Load()))], orelse=[Assign(targets=[Name(id='comes_from', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='comes_from', ctx=Load()), attr='from_path', ctx=Load()), args=[], keywords=[]))]), If(test=Name(id='comes_from', ctx=Load()), body=[AugAssign(target=Name(id='s', ctx=Store()), op=Add(), value=BinOp(left=Constant(value='->'), op=Add(), right=Name(id='comes_from', ctx=Load())))], orelse=[])], orelse=[]), Return(value=Name(id='s', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='ensure_build_location', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='build_dir', annotation=Name(id='str', ctx=Load())), arg(arg='autodelete', annotation=Name(id='bool', ctx=Load())), arg(arg='parallel_builds', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Compare(left=Name(id='build_dir', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_temp_build_dir', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assert(test=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_temp_build_dir', ctx=Load()), attr='path', ctx=Load())), Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_temp_build_dir', ctx=Load()), attr='path', ctx=Load()))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='req', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_temp_build_dir', ctx=Store())], value=Call(func=Name(id='TempDirectory', ctx=Load()), args=[], keywords=[keyword(arg='kind', value=Attribute(value=Name(id='tempdir_kinds', ctx=Load()), attr='REQ_BUILD', ctx=Load())), keyword(arg='globally_managed', value=Constant(value=True))])), Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_temp_build_dir', ctx=Load()), attr='path', ctx=Load()))], orelse=[]), AnnAssign(target=Name(id='dir_name', ctx=Store()), annotation=Name(id='str', ctx=Load()), value=Call(func=Name(id='canonicalize_name', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='req', ctx=Load()), attr='name', ctx=Load())], keywords=[]), simple=1), If(test=Name(id='parallel_builds', ctx=Load()), body=[Assign(targets=[Name(id='dir_name', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='dir_name', ctx=Load()), conversion=-1), Constant(value='_'), FormattedValue(value=Attribute(value=Call(func=Attribute(value=Name(id='uuid', ctx=Load()), attr='uuid4', ctx=Load()), args=[], keywords=[]), attr='hex', ctx=Load()), conversion=-1)]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='build_dir', ctx=Load())], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Creating directory %s'), Name(id='build_dir', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Name(id='build_dir', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='actual_build_dir', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='build_dir', ctx=Load()), Name(id='dir_name', ctx=Load())], keywords=[])), Assign(targets=[Name(id='delete_arg', ctx=Store())], value=IfExp(test=Name(id='autodelete', ctx=Load()), body=Constant(value=None), orelse=Constant(value=False))), Return(value=Attribute(value=Call(func=Name(id='TempDirectory', ctx=Load()), args=[], keywords=[keyword(arg='path', value=Name(id='actual_build_dir', ctx=Load())), keyword(arg='delete', value=Name(id='delete_arg', ctx=Load())), keyword(arg='kind', value=Attribute(value=Name(id='tempdir_kinds', ctx=Load()), attr='REQ_BUILD', ctx=Load())), keyword(arg='globally_managed', value=Constant(value=True))]), attr='path', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='_set_requirement', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Set requirement after generating metadata.')), Assert(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='req', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])), Assert(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='metadata', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assert(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='source_dir', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Call(func=Name(id='parse_version', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='metadata', ctx=Load()), slice=Constant(value='Version'), ctx=Load())], keywords=[]), Name(id='Version', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='op', ctx=Store())], value=Constant(value='=='))], orelse=[Assign(targets=[Name(id='op', ctx=Store())], value=Constant(value='==='))]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='req', ctx=Store())], value=Call(func=Name(id='Requirement', ctx=Load()), args=[Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[List(elts=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='metadata', ctx=Load()), slice=Constant(value='Name'), ctx=Load()), Name(id='op', ctx=Load()), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='metadata', ctx=Load()), slice=Constant(value='Version'), ctx=Load())], ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='warn_on_mismatching_name', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='req', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Name(id='metadata_name', ctx=Store())], value=Call(func=Name(id='canonicalize_name', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='metadata', ctx=Load()), slice=Constant(value='Name'), ctx=Load())], keywords=[])), If(test=Compare(left=Call(func=Name(id='canonicalize_name', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='req', ctx=Load()), attr='name', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Name(id='metadata_name', ctx=Load())]), body=[Return()], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='Generating metadata for package %s produced metadata for project name %s. Fix your #egg=%s fragments.'), Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), Name(id='metadata_name', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='req', ctx=Store())], value=Call(func=Name(id='Requirement', ctx=Load()), args=[Name(id='metadata_name', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='check_if_exists', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='use_user_site', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Find an installed distribution that satisfies or conflicts\n        with this requirement, and set self.satisfied_by or\n        self.should_reinstall appropriately.\n        ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='req', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return()], orelse=[]), Assign(targets=[Name(id='existing_dist', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='get_default_environment', ctx=Load()), args=[], keywords=[]), attr='get_distribution', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='req', ctx=Load()), attr='name', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='existing_dist', ctx=Load())), body=[Return()], orelse=[]), Assign(targets=[Name(id='version_compatible', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='req', ctx=Load()), attr='specifier', ctx=Load()), attr='contains', ctx=Load()), args=[Attribute(value=Name(id='existing_dist', ctx=Load()), attr='version', ctx=Load())], keywords=[keyword(arg='prereleases', value=Constant(value=True))])), If(test=UnaryOp(op=Not(), operand=Name(id='version_compatible', ctx=Load())), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='satisfied_by', ctx=Store())], value=Constant(value=None)), If(test=Name(id='use_user_site', ctx=Load()), body=[If(test=Attribute(value=Name(id='existing_dist', ctx=Load()), attr='in_usersite', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='should_reinstall', ctx=Store())], value=Constant(value=True))], orelse=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='running_under_virtualenv', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='existing_dist', ctx=Load()), attr='in_site_packages', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='InstallationError', ctx=Load()), args=[JoinedStr(values=[Constant(value='Will not install to the user site because it will lack sys.path precedence to '), FormattedValue(value=Attribute(value=Name(id='existing_dist', ctx=Load()), attr='raw_name', ctx=Load()), conversion=-1), Constant(value=' in '), FormattedValue(value=Attribute(value=Name(id='existing_dist', ctx=Load()), attr='location', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[])])], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='should_reinstall', ctx=Store())], value=Constant(value=True))])], orelse=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='editable', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='should_reinstall', ctx=Store())], value=Constant(value=True)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='satisfied_by', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='satisfied_by', ctx=Store())], value=Name(id='existing_dist', ctx=Load()))])])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='is_wheel', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='link', ctx=Load())), body=[Return(value=Constant(value=False))], orelse=[]), Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='link', ctx=Load()), attr='is_wheel', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='is_wheel_from_cache', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='cached_wheel_source_link', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='unpacked_source_directory', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Attribute(value=Name(id='self', ctx=Load()), attr='source_dir', ctx=Load()), msg=JoinedStr(values=[Constant(value='No source dir for '), FormattedValue(value=Name(id='self', ctx=Load()), conversion=-1)])), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='source_dir', ctx=Load()), BoolOp(op=Or(), values=[BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='link', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='link', ctx=Load()), attr='subdirectory_fragment', ctx=Load())]), Constant(value='')])], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='setup_py_path', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Attribute(value=Name(id='self', ctx=Load()), attr='source_dir', ctx=Load()), msg=JoinedStr(values=[Constant(value='No source dir for '), FormattedValue(value=Name(id='self', ctx=Load()), conversion=-1)])), Assign(targets=[Name(id='setup_py', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='unpacked_source_directory', ctx=Load()), Constant(value='setup.py')], keywords=[])), Return(value=Name(id='setup_py', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='setup_cfg_path', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Attribute(value=Name(id='self', ctx=Load()), attr='source_dir', ctx=Load()), msg=JoinedStr(values=[Constant(value='No source dir for '), FormattedValue(value=Name(id='self', ctx=Load()), conversion=-1)])), Assign(targets=[Name(id='setup_cfg', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='unpacked_source_directory', ctx=Load()), Constant(value='setup.cfg')], keywords=[])), Return(value=Name(id='setup_cfg', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='pyproject_toml_path', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Attribute(value=Name(id='self', ctx=Load()), attr='source_dir', ctx=Load()), msg=JoinedStr(values=[Constant(value='No source dir for '), FormattedValue(value=Name(id='self', ctx=Load()), conversion=-1)])), Return(value=Call(func=Name(id='make_pyproject_path', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='unpacked_source_directory', ctx=Load())], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='load_pyproject_toml', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Load the pyproject.toml file.\n\n        After calling this routine, all of the attributes related to PEP 517\n        processing for this requirement have been set. In particular, the\n        use_pep517 attribute can be used to determine whether we should\n        follow the PEP 517 or legacy (setup.py) code path.\n        ')), Assign(targets=[Name(id='pyproject_toml_data', ctx=Store())], value=Call(func=Name(id='load_pyproject_toml', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='use_pep517', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='pyproject_toml_path', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='setup_py_path', ctx=Load()), Call(func=Name(id='str', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])], keywords=[])), If(test=Compare(left=Name(id='pyproject_toml_data', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='config_settings', ctx=Load()), body=[Expr(value=Call(func=Name(id='deprecated', ctx=Load()), args=[], keywords=[keyword(arg='reason', value=JoinedStr(values=[Constant(value='Config settings are ignored for project '), FormattedValue(value=Name(id='self', ctx=Load()), conversion=-1), Constant(value='.')])), keyword(arg='replacement', value=Constant(value='to use --use-pep517 or add a pyproject.toml file to the project')), keyword(arg='gone_in', value=Constant(value='24.0'))]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='use_pep517', ctx=Store())], value=Constant(value=False)), Return()], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='use_pep517', ctx=Store())], value=Constant(value=True)), Assign(targets=[Tuple(elts=[Name(id='requires', ctx=Store()), Name(id='backend', ctx=Store()), Name(id='check', ctx=Store()), Name(id='backend_path', ctx=Store())], ctx=Store())], value=Name(id='pyproject_toml_data', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='requirements_to_check', ctx=Store())], value=Name(id='check', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='pyproject_requires', ctx=Store())], value=Name(id='requires', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='pep517_backend', ctx=Store())], value=Call(func=Name(id='ConfiguredBuildBackendHookCaller', ctx=Load()), args=[Name(id='self', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='unpacked_source_directory', ctx=Load()), Name(id='backend', ctx=Load())], keywords=[keyword(arg='backend_path', value=Name(id='backend_path', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='isolated_editable_sanity_check', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check that an editable requirement if valid for use with PEP 517/518.\n\n        This verifies that an editable that has a pyproject.toml either supports PEP 660\n        or as a setup.py or a setup.cfg\n        ')), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='editable', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='use_pep517', ctx=Load()), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='supports_pyproject_editable', ctx=Load()), args=[], keywords=[])), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isfile', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='setup_py_path', ctx=Load())], keywords=[])), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isfile', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='setup_cfg_path', ctx=Load())], keywords=[]))]), body=[Raise(exc=Call(func=Name(id='InstallationError', ctx=Load()), args=[JoinedStr(values=[Constant(value='Project '), FormattedValue(value=Name(id='self', ctx=Load()), conversion=-1), Constant(value=" has a 'pyproject.toml' and its build backend is missing the 'build_editable' hook. Since it does not have a 'setup.py' nor a 'setup.cfg', it cannot be installed in editable mode. Consider using a build backend that supports PEP 660.")])], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='prepare_metadata', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Ensure that project metadata is available.\n\n        Under PEP 517 and PEP 660, call the backend hook to prepare the metadata.\n        Under legacy processing, call setup.py egg-info.\n        ')), Assert(test=Attribute(value=Name(id='self', ctx=Load()), attr='source_dir', ctx=Load()), msg=JoinedStr(values=[Constant(value='No source dir for '), FormattedValue(value=Name(id='self', ctx=Load()), conversion=-1)])), Assign(targets=[Name(id='details', ctx=Store())], value=BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), JoinedStr(values=[Constant(value='from '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='link', ctx=Load()), conversion=-1)])])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='use_pep517', ctx=Load()), body=[Assert(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='pep517_backend', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='editable', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='permit_editable_wheels', ctx=Load()), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='supports_pyproject_editable', ctx=Load()), args=[], keywords=[])]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='metadata_directory', ctx=Store())], value=Call(func=Name(id='generate_editable_metadata', ctx=Load()), args=[], keywords=[keyword(arg='build_env', value=Attribute(value=Name(id='self', ctx=Load()), attr='build_env', ctx=Load())), keyword(arg='backend', value=Attribute(value=Name(id='self', ctx=Load()), attr='pep517_backend', ctx=Load())), keyword(arg='details', value=Name(id='details', ctx=Load()))]))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='metadata_directory', ctx=Store())], value=Call(func=Name(id='generate_metadata', ctx=Load()), args=[], keywords=[keyword(arg='build_env', value=Attribute(value=Name(id='self', ctx=Load()), attr='build_env', ctx=Load())), keyword(arg='backend', value=Attribute(value=Name(id='self', ctx=Load()), attr='pep517_backend', ctx=Load())), keyword(arg='details', value=Name(id='details', ctx=Load()))]))])], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='metadata_directory', ctx=Store())], value=Call(func=Name(id='generate_metadata_legacy', ctx=Load()), args=[], keywords=[keyword(arg='build_env', value=Attribute(value=Name(id='self', ctx=Load()), attr='build_env', ctx=Load())), keyword(arg='setup_py_path', value=Attribute(value=Name(id='self', ctx=Load()), attr='setup_py_path', ctx=Load())), keyword(arg='source_dir', value=Attribute(value=Name(id='self', ctx=Load()), attr='unpacked_source_directory', ctx=Load())), keyword(arg='isolated', value=Attribute(value=Name(id='self', ctx=Load()), attr='isolated', ctx=Load())), keyword(arg='details', value=Name(id='details', ctx=Load()))]))]), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_set_requirement', ctx=Load()), args=[], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='warn_on_mismatching_name', ctx=Load()), args=[], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assert_source_matches_version', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='metadata', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Constant(value='_metadata')], keywords=[])), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_metadata', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_dist', ctx=Load()), args=[], keywords=[]), attr='metadata', ctx=Load()))], orelse=[]), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_metadata', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='Any', ctx=Load())), FunctionDef(name='get_dist', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='metadata_directory', ctx=Load()), body=[Return(value=Call(func=Name(id='get_directory_distribution', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='metadata_directory', ctx=Load())], keywords=[]))], orelse=[If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='local_file_path', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='is_wheel', ctx=Load())]), body=[Assert(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='req', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Return(value=Call(func=Name(id='get_wheel_distribution', ctx=Load()), args=[Call(func=Name(id='FilesystemWheel', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='local_file_path', ctx=Load())], keywords=[]), Call(func=Name(id='canonicalize_name', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='req', ctx=Load()), attr='name', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])]), Raise(exc=Call(func=Name(id='AssertionError', ctx=Load()), args=[JoinedStr(values=[Constant(value='InstallRequirement '), FormattedValue(value=Name(id='self', ctx=Load()), conversion=-1), Constant(value=" has no metadata directory and no wheel: can't make a distribution.")])], keywords=[]))], decorator_list=[], returns=Name(id='BaseDistribution', ctx=Load())), FunctionDef(name='assert_source_matches_version', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Attribute(value=Name(id='self', ctx=Load()), attr='source_dir', ctx=Load()), msg=JoinedStr(values=[Constant(value='No source dir for '), FormattedValue(value=Name(id='self', ctx=Load()), conversion=-1)])), Assign(targets=[Name(id='version', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='metadata', ctx=Load()), slice=Constant(value='version'), ctx=Load())), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='req', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='req', ctx=Load()), attr='specifier', ctx=Load()), Compare(left=Name(id='version', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='req', ctx=Load()), attr='specifier', ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='Requested %s, but installing version %s'), Name(id='self', ctx=Load()), Name(id='version', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Source in %s has version %s, which satisfies requirement %s'), Call(func=Name(id='display_path', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='source_dir', ctx=Load())], keywords=[]), Name(id='version', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='ensure_has_source_dir', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='parent_dir', annotation=Name(id='str', ctx=Load())), arg(arg='autodelete', annotation=Name(id='bool', ctx=Load())), arg(arg='parallel_builds', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Constant(value=False)]), body=[Expr(value=Constant(value="Ensure that a source_dir is set.\n\n        This will create a temporary build dir if the name of the requirement\n        isn't known yet.\n\n        :param parent_dir: The ideal pip parent_dir for the source_dir.\n            Generally src_dir for editables and build_dir for sdists.\n        :return: self.source_dir\n        ")), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='source_dir', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='source_dir', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='ensure_build_location', ctx=Load()), args=[Name(id='parent_dir', ctx=Load())], keywords=[keyword(arg='autodelete', value=Name(id='autodelete', ctx=Load())), keyword(arg='parallel_builds', value=Name(id='parallel_builds', ctx=Load()))]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='needs_unpacked_archive', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='archive_source', annotation=Name(id='Path', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_archive_source', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_archive_source', ctx=Store())], value=Name(id='archive_source', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='ensure_pristine_source_checkout', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Ensure the source directory has not yet been built in.')), Assert(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='source_dir', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_archive_source', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Name(id='unpack_file', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_archive_source', ctx=Load())], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='source_dir', ctx=Load())], keywords=[]))], orelse=[If(test=Call(func=Name(id='is_installable_dir', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='source_dir', ctx=Load())], keywords=[]), body=[Raise(exc=Call(func=Name(id='PreviousBuildDirError', ctx=Load()), args=[JoinedStr(values=[Constant(value="pip can't proceed with requirements '"), FormattedValue(value=Name(id='self', ctx=Load()), conversion=-1), Constant(value="' due to a pre-existing build directory ("), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='source_dir', ctx=Load()), conversion=-1), Constant(value='). This is likely due to a previous installation that failed . pip is being responsible and not assuming it can delete this. Please delete it and try again.')])], keywords=[]))], orelse=[])])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='update_editable', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='link', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Cannot update repository at %s; repository location is unknown'), Attribute(value=Name(id='self', ctx=Load()), attr='source_dir', ctx=Load())], keywords=[])), Return()], orelse=[]), Assert(test=Attribute(value=Name(id='self', ctx=Load()), attr='editable', ctx=Load())), Assert(test=Attribute(value=Name(id='self', ctx=Load()), attr='source_dir', ctx=Load())), If(test=Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='link', ctx=Load()), attr='scheme', ctx=Load()), ops=[Eq()], comparators=[Constant(value='file')]), body=[Return()], orelse=[]), Assign(targets=[Name(id='vcs_backend', ctx=Store())], value=Call(func=Attribute(value=Name(id='vcs', ctx=Load()), attr='get_backend_for_scheme', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='link', ctx=Load()), attr='scheme', ctx=Load())], keywords=[])), Assert(test=Name(id='vcs_backend', ctx=Load()), msg=JoinedStr(values=[Constant(value='Unsupported VCS URL '), FormattedValue(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='link', ctx=Load()), attr='url', ctx=Load()), conversion=-1)])), Assign(targets=[Name(id='hidden_url', ctx=Store())], value=Call(func=Name(id='hide_url', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='link', ctx=Load()), attr='url', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='vcs_backend', ctx=Load()), attr='obtain', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='source_dir', ctx=Load())], keywords=[keyword(arg='url', value=Name(id='hidden_url', ctx=Load())), keyword(arg='verbosity', value=Constant(value=0))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='uninstall', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='auto_confirm', annotation=Name(id='bool', ctx=Load())), arg(arg='verbose', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Constant(value=False)]), body=[Expr(value=Constant(value='\n        Uninstall the distribution currently satisfying this requirement.\n\n        Prompts before removing or modifying files unless\n        ``auto_confirm`` is True.\n\n        Refuses to delete or modify files outside of ``sys.prefix`` -\n        thus uninstallation within a virtual environment can only\n        modify that virtual environment, even if the virtualenv is\n        linked to global site-packages.\n\n        ')), Assert(test=Attribute(value=Name(id='self', ctx=Load()), attr='req', ctx=Load())), Assign(targets=[Name(id='dist', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='get_default_environment', ctx=Load()), args=[], keywords=[]), attr='get_distribution', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='req', ctx=Load()), attr='name', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='dist', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='Skipping %s as it is not installed.'), Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())], keywords=[])), Return(value=Constant(value=None))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Found existing installation: %s'), Name(id='dist', ctx=Load())], keywords=[])), Assign(targets=[Name(id='uninstalled_pathset', ctx=Store())], value=Call(func=Attribute(value=Name(id='UninstallPathSet', ctx=Load()), attr='from_dist', ctx=Load()), args=[Name(id='dist', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='uninstalled_pathset', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='auto_confirm', ctx=Load()), Name(id='verbose', ctx=Load())], keywords=[])), Return(value=Name(id='uninstalled_pathset', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='UninstallPathSet', ctx=Load()), ctx=Load())), FunctionDef(name='_get_archive_name', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='path', annotation=Name(id='str', ctx=Load())), arg(arg='parentdir', annotation=Name(id='str', ctx=Load())), arg(arg='rootdir', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='_clean_zip_name', args=arguments(posonlyargs=[], args=[arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='prefix', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='startswith', ctx=Load()), args=[BinOp(left=Name(id='prefix', ctx=Load()), op=Add(), right=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='sep', ctx=Load()))], keywords=[]), msg=JoinedStr(values=[Constant(value='name '), FormattedValue(value=Name(id='name', ctx=Load()), conversion=114), Constant(value=" doesn't start with prefix "), FormattedValue(value=Name(id='prefix', ctx=Load()), conversion=114)])), Assign(targets=[Name(id='name', ctx=Store())], value=Subscript(value=Name(id='name', ctx=Load()), slice=Slice(lower=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='prefix', ctx=Load())], keywords=[]), op=Add(), right=Constant(value=1))), ctx=Load())), Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='replace', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='sep', ctx=Load()), Constant(value='/')], keywords=[])), Return(value=Name(id='name', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), Assert(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='req', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='parentdir', ctx=Load()), Name(id='path', ctx=Load())], keywords=[])), Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Name(id='_clean_zip_name', ctx=Load()), args=[Name(id='path', ctx=Load()), Name(id='rootdir', ctx=Load())], keywords=[])), Return(value=BinOp(left=BinOp(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='req', ctx=Load()), attr='name', ctx=Load()), op=Add(), right=Constant(value='/')), op=Add(), right=Name(id='name', ctx=Load())))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='archive', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='build_dir', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Saves archive to provided build_dir.\n\n        Used for saving downloaded VCS requirements as part of `pip download`.\n        ')), Assert(test=Attribute(value=Name(id='self', ctx=Load()), attr='source_dir', ctx=Load())), If(test=Compare(left=Name(id='build_dir', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return()], orelse=[]), Assign(targets=[Name(id='create_archive', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='archive_name', ctx=Store())], value=Call(func=Attribute(value=Constant(value='{}-{}.zip'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='metadata', ctx=Load()), slice=Constant(value='version'), ctx=Load())], keywords=[])), Assign(targets=[Name(id='archive_path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='build_dir', ctx=Load()), Name(id='archive_name', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='archive_path', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='response', ctx=Store())], value=Call(func=Name(id='ask_path_exists', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='The file {} exists. (i)gnore, (w)ipe, (b)ackup, (a)bort '), attr='format', ctx=Load()), args=[Call(func=Name(id='display_path', ctx=Load()), args=[Name(id='archive_path', ctx=Load())], keywords=[])], keywords=[]), Tuple(elts=[Constant(value='i'), Constant(value='w'), Constant(value='b'), Constant(value='a')], ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='response', ctx=Load()), ops=[Eq()], comparators=[Constant(value='i')]), body=[Assign(targets=[Name(id='create_archive', ctx=Store())], value=Constant(value=False))], orelse=[If(test=Compare(left=Name(id='response', ctx=Load()), ops=[Eq()], comparators=[Constant(value='w')]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='Deleting %s'), Call(func=Name(id='display_path', ctx=Load()), args=[Name(id='archive_path', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='archive_path', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='response', ctx=Load()), ops=[Eq()], comparators=[Constant(value='b')]), body=[Assign(targets=[Name(id='dest_file', ctx=Store())], value=Call(func=Name(id='backup_dir', ctx=Load()), args=[Name(id='archive_path', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='Backing up %s to %s'), Call(func=Name(id='display_path', ctx=Load()), args=[Name(id='archive_path', ctx=Load())], keywords=[]), Call(func=Name(id='display_path', ctx=Load()), args=[Name(id='dest_file', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='shutil', ctx=Load()), attr='move', ctx=Load()), args=[Name(id='archive_path', ctx=Load()), Name(id='dest_file', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='response', ctx=Load()), ops=[Eq()], comparators=[Constant(value='a')]), body=[Expr(value=Call(func=Attribute(value=Name(id='sys', ctx=Load()), attr='exit', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]))], orelse=[])])])])], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='create_archive', ctx=Load())), body=[Return()], orelse=[]), Assign(targets=[Name(id='zip_output', ctx=Store())], value=Call(func=Attribute(value=Name(id='zipfile', ctx=Load()), attr='ZipFile', ctx=Load()), args=[Name(id='archive_path', ctx=Load()), Constant(value='w'), Attribute(value=Name(id='zipfile', ctx=Load()), attr='ZIP_DEFLATED', ctx=Load())], keywords=[keyword(arg='allowZip64', value=Constant(value=True))])), With(items=[withitem(context_expr=Name(id='zip_output', ctx=Load()))], body=[Assign(targets=[Name(id='dir', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normcase', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='unpacked_source_directory', ctx=Load())], keywords=[])], keywords=[])), For(target=Tuple(elts=[Name(id='dirpath', ctx=Store()), Name(id='dirnames', ctx=Store()), Name(id='filenames', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='walk', ctx=Load()), args=[Name(id='dir', ctx=Load())], keywords=[]), body=[For(target=Name(id='dirname', ctx=Store()), iter=Name(id='dirnames', ctx=Load()), body=[Assign(targets=[Name(id='dir_arcname', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_archive_name', ctx=Load()), args=[Name(id='dirname', ctx=Load())], keywords=[keyword(arg='parentdir', value=Name(id='dirpath', ctx=Load())), keyword(arg='rootdir', value=Name(id='dir', ctx=Load()))])), Assign(targets=[Name(id='zipdir', ctx=Store())], value=Call(func=Attribute(value=Name(id='zipfile', ctx=Load()), attr='ZipInfo', ctx=Load()), args=[BinOp(left=Name(id='dir_arcname', ctx=Load()), op=Add(), right=Constant(value='/'))], keywords=[])), Assign(targets=[Attribute(value=Name(id='zipdir', ctx=Load()), attr='external_attr', ctx=Store())], value=BinOp(left=Constant(value=493), op=LShift(), right=Constant(value=16))), Expr(value=Call(func=Attribute(value=Name(id='zip_output', ctx=Load()), attr='writestr', ctx=Load()), args=[Name(id='zipdir', ctx=Load()), Constant(value='')], keywords=[]))], orelse=[]), For(target=Name(id='filename', ctx=Store()), iter=Name(id='filenames', ctx=Load()), body=[Assign(targets=[Name(id='file_arcname', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_archive_name', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[keyword(arg='parentdir', value=Name(id='dirpath', ctx=Load())), keyword(arg='rootdir', value=Name(id='dir', ctx=Load()))])), Assign(targets=[Name(id='filename', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='dirpath', ctx=Load()), Name(id='filename', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='zip_output', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='filename', ctx=Load()), Name(id='file_arcname', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])]), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Saved %s'), Call(func=Name(id='display_path', ctx=Load()), args=[Name(id='archive_path', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='install', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='global_options', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='root', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='home', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='prefix', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='warn_script_location', annotation=Name(id='bool', ctx=Load())), arg(arg='use_user_site', annotation=Name(id='bool', ctx=Load())), arg(arg='pycompile', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=True), Constant(value=False), Constant(value=True)]), body=[Assert(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='req', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Name(id='scheme', ctx=Store())], value=Call(func=Name(id='get_scheme', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='req', ctx=Load()), attr='name', ctx=Load())], keywords=[keyword(arg='user', value=Name(id='use_user_site', ctx=Load())), keyword(arg='home', value=Name(id='home', ctx=Load())), keyword(arg='root', value=Name(id='root', ctx=Load())), keyword(arg='isolated', value=Attribute(value=Name(id='self', ctx=Load()), attr='isolated', ctx=Load())), keyword(arg='prefix', value=Name(id='prefix', ctx=Load()))])), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='editable', ctx=Load()), UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='is_wheel', ctx=Load()))]), body=[Expr(value=Call(func=Name(id='install_editable_legacy', ctx=Load()), args=[], keywords=[keyword(arg='global_options', value=IfExp(test=Compare(left=Name(id='global_options', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Name(id='global_options', ctx=Load()), orelse=List(elts=[], ctx=Load()))), keyword(arg='prefix', value=Name(id='prefix', ctx=Load())), keyword(arg='home', value=Name(id='home', ctx=Load())), keyword(arg='use_user_site', value=Name(id='use_user_site', ctx=Load())), keyword(arg='name', value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='req', ctx=Load()), attr='name', ctx=Load())), keyword(arg='setup_py_path', value=Attribute(value=Name(id='self', ctx=Load()), attr='setup_py_path', ctx=Load())), keyword(arg='isolated', value=Attribute(value=Name(id='self', ctx=Load()), attr='isolated', ctx=Load())), keyword(arg='build_env', value=Attribute(value=Name(id='self', ctx=Load()), attr='build_env', ctx=Load())), keyword(arg='unpacked_source_directory', value=Attribute(value=Name(id='self', ctx=Load()), attr='unpacked_source_directory', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='install_succeeded', ctx=Store())], value=Constant(value=True)), Return()], orelse=[]), Assert(test=Attribute(value=Name(id='self', ctx=Load()), attr='is_wheel', ctx=Load())), Assert(test=Attribute(value=Name(id='self', ctx=Load()), attr='local_file_path', ctx=Load())), Expr(value=Call(func=Name(id='install_wheel', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='req', ctx=Load()), attr='name', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='local_file_path', ctx=Load())], keywords=[keyword(arg='scheme', value=Name(id='scheme', ctx=Load())), keyword(arg='req_description', value=Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='req', ctx=Load())], keywords=[])), keyword(arg='pycompile', value=Name(id='pycompile', ctx=Load())), keyword(arg='warn_script_location', value=Name(id='warn_script_location', ctx=Load())), keyword(arg='direct_url', value=IfExp(test=Attribute(value=Name(id='self', ctx=Load()), attr='is_direct', ctx=Load()), body=Attribute(value=Name(id='self', ctx=Load()), attr='download_info', ctx=Load()), orelse=Constant(value=None))), keyword(arg='requested', value=Attribute(value=Name(id='self', ctx=Load()), attr='user_supplied', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='install_succeeded', ctx=Store())], value=Constant(value=True))], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), FunctionDef(name='check_invalid_constraint_type', args=arguments(posonlyargs=[], args=[arg(arg='req', annotation=Name(id='InstallRequirement', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='problem', ctx=Store())], value=Constant(value='')), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='req', ctx=Load()), attr='name', ctx=Load())), body=[Assign(targets=[Name(id='problem', ctx=Store())], value=Constant(value='Unnamed requirements are not allowed as constraints'))], orelse=[If(test=Attribute(value=Name(id='req', ctx=Load()), attr='editable', ctx=Load()), body=[Assign(targets=[Name(id='problem', ctx=Store())], value=Constant(value='Editable requirements are not allowed as constraints'))], orelse=[If(test=Attribute(value=Name(id='req', ctx=Load()), attr='extras', ctx=Load()), body=[Assign(targets=[Name(id='problem', ctx=Store())], value=Constant(value='Constraints cannot have extras'))], orelse=[])])]), If(test=Name(id='problem', ctx=Load()), body=[Expr(value=Call(func=Name(id='deprecated', ctx=Load()), args=[], keywords=[keyword(arg='reason', value=Constant(value='Constraints are only allowed to take the form of a package name and a version specifier. Other forms were originally permitted as an accident of the implementation, but were undocumented. The new implementation of the resolver no longer supports these forms.')), keyword(arg='replacement', value=Constant(value='replacing the constraint with a requirement')), keyword(arg='gone_in', value=Constant(value=None)), keyword(arg='issue', value=Constant(value=8210))]))], orelse=[]), Return(value=Name(id='problem', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='_has_option', args=arguments(posonlyargs=[], args=[arg(arg='options', annotation=Name(id='Values', ctx=Load())), arg(arg='reqs', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='InstallRequirement', ctx=Load()), ctx=Load())), arg(arg='option', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='options', ctx=Load()), Name(id='option', ctx=Load()), Constant(value=None)], keywords=[]), body=[Return(value=Constant(value=True))], orelse=[]), For(target=Name(id='req', ctx=Store()), iter=Name(id='reqs', ctx=Load()), body=[If(test=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='req', ctx=Load()), Name(id='option', ctx=Load()), Constant(value=None)], keywords=[]), body=[Return(value=Constant(value=True))], orelse=[])], orelse=[]), Return(value=Constant(value=False))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='check_legacy_setup_py_options', args=arguments(posonlyargs=[], args=[arg(arg='options', annotation=Name(id='Values', ctx=Load())), arg(arg='reqs', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='InstallRequirement', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='has_build_options', ctx=Store())], value=Call(func=Name(id='_has_option', ctx=Load()), args=[Name(id='options', ctx=Load()), Name(id='reqs', ctx=Load()), Constant(value='build_options')], keywords=[])), Assign(targets=[Name(id='has_global_options', ctx=Store())], value=Call(func=Name(id='_has_option', ctx=Load()), args=[Name(id='options', ctx=Load()), Name(id='reqs', ctx=Load()), Constant(value='global_options')], keywords=[])), If(test=BoolOp(op=Or(), values=[Name(id='has_build_options', ctx=Load()), Name(id='has_global_options', ctx=Load())]), body=[Expr(value=Call(func=Name(id='deprecated', ctx=Load()), args=[], keywords=[keyword(arg='reason', value=Constant(value='--build-option and --global-option are deprecated.')), keyword(arg='issue', value=Constant(value=11859)), keyword(arg='replacement', value=Constant(value='to use --config-settings')), keyword(arg='gone_in', value=Constant(value='24.0'))])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='Implying --no-binary=:all: due to the presence of --build-option / --global-option. ')], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='options', ctx=Load()), attr='format_control', ctx=Load()), attr='disallow_binaries', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None))], type_ignores=[])