Module(body=[ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='pip._internal.models.format_control', names=[alias(name='FormatControl')], level=0), ClassDef(name='SelectionPreferences', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    Encapsulates the candidate selection preferences for downloading\n    and installing files.\n    ')), Assign(targets=[Name(id='__slots__', ctx=Store())], value=List(elts=[Constant(value='allow_yanked'), Constant(value='allow_all_prereleases'), Constant(value='format_control'), Constant(value='prefer_binary'), Constant(value='ignore_requires_python')], ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='allow_yanked', annotation=Name(id='bool', ctx=Load())), arg(arg='allow_all_prereleases', annotation=Name(id='bool', ctx=Load())), arg(arg='format_control', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='FormatControl', ctx=Load()), ctx=Load())), arg(arg='prefer_binary', annotation=Name(id='bool', ctx=Load())), arg(arg='ignore_requires_python', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Constant(value=None), Constant(value=False), Constant(value=None)]), body=[Expr(value=Constant(value='Create a SelectionPreferences object.\n\n        :param allow_yanked: Whether files marked as yanked (in the sense\n            of PEP 592) are permitted to be candidates for install.\n        :param format_control: A FormatControl object or None. Used to control\n            the selection of source packages / binary packages when consulting\n            the index and links.\n        :param prefer_binary: Whether to prefer an old, but valid, binary\n            dist over a new source dist.\n        :param ignore_requires_python: Whether to ignore incompatible\n            "Requires-Python" values in links. Defaults to False.\n        ')), If(test=Compare(left=Name(id='ignore_requires_python', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='ignore_requires_python', ctx=Store())], value=Constant(value=False))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='allow_yanked', ctx=Store())], value=Name(id='allow_yanked', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='allow_all_prereleases', ctx=Store())], value=Name(id='allow_all_prereleases', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='format_control', ctx=Store())], value=Name(id='format_control', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='prefer_binary', ctx=Store())], value=Name(id='prefer_binary', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='ignore_requires_python', ctx=Store())], value=Name(id='ignore_requires_python', ctx=Load()))], decorator_list=[], returns=Constant(value=None))], decorator_list=[])], type_ignores=[])