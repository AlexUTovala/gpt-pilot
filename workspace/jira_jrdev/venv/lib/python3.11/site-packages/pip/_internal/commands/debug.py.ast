Module(body=[Import(names=[alias(name='importlib.resources')]), Import(names=[alias(name='locale')]), Import(names=[alias(name='logging')]), Import(names=[alias(name='os')]), Import(names=[alias(name='sys')]), ImportFrom(module='optparse', names=[alias(name='Values')], level=0), ImportFrom(module='types', names=[alias(name='ModuleType')], level=0), ImportFrom(module='typing', names=[alias(name='Any'), alias(name='Dict'), alias(name='List'), alias(name='Optional')], level=0), Import(names=[alias(name='pip._vendor')]), ImportFrom(module='pip._vendor.certifi', names=[alias(name='where')], level=0), ImportFrom(module='pip._vendor.packaging.version', names=[alias(name='parse', asname='parse_version')], level=0), ImportFrom(module='pip._internal.cli', names=[alias(name='cmdoptions')], level=0), ImportFrom(module='pip._internal.cli.base_command', names=[alias(name='Command')], level=0), ImportFrom(module='pip._internal.cli.cmdoptions', names=[alias(name='make_target_python')], level=0), ImportFrom(module='pip._internal.cli.status_codes', names=[alias(name='SUCCESS')], level=0), ImportFrom(module='pip._internal.configuration', names=[alias(name='Configuration')], level=0), ImportFrom(module='pip._internal.metadata', names=[alias(name='get_environment')], level=0), ImportFrom(module='pip._internal.utils.logging', names=[alias(name='indent_log')], level=0), ImportFrom(module='pip._internal.utils.misc', names=[alias(name='get_pip_version')], level=0), Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), FunctionDef(name='show_value', args=arguments(posonlyargs=[], args=[arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='value', annotation=Name(id='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='%s: %s'), Name(id='name', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='show_sys_implementation', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='sys.implementation:')], keywords=[])), Assign(targets=[Name(id='implementation_name', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='implementation', ctx=Load()), attr='name', ctx=Load())), With(items=[withitem(context_expr=Call(func=Name(id='indent_log', ctx=Load()), args=[], keywords=[]))], body=[Expr(value=Call(func=Name(id='show_value', ctx=Load()), args=[Constant(value='name'), Name(id='implementation_name', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='create_vendor_txt_map', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Attribute(value=Name(id='importlib', ctx=Load()), attr='resources', ctx=Load()), attr='open_text', ctx=Load()), args=[Constant(value='pip._vendor'), Constant(value='vendor.txt')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='lines', ctx=Store())], value=ListComp(elt=Subscript(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]), attr='split', ctx=Load()), args=[Constant(value=' '), Constant(value=1)], keywords=[]), slice=Constant(value=0), ctx=Load()), generators=[comprehension(target=Name(id='line', ctx=Store()), iter=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='readlines', ctx=Load()), args=[], keywords=[]), ifs=[Compare(left=Constant(value='=='), ops=[In()], comparators=[Name(id='line', ctx=Load())])], is_async=0)]))]), Return(value=Call(func=Name(id='dict', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='=='), Constant(value=1)], keywords=[]), generators=[comprehension(target=Name(id='line', ctx=Store()), iter=Name(id='lines', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='get_module_from_module_name', args=arguments(posonlyargs=[], args=[arg(arg='module_name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='module_name', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='module_name', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value='-'), Constant(value='_')], keywords=[])), If(test=Compare(left=Name(id='module_name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='setuptools')]), body=[Assign(targets=[Name(id='module_name', ctx=Store())], value=Constant(value='pkg_resources'))], orelse=[]), Try(body=[Expr(value=Call(func=Name(id='__import__', ctx=Load()), args=[JoinedStr(values=[Constant(value='pip._vendor.'), FormattedValue(value=Name(id='module_name', ctx=Load()), conversion=-1)]), Call(func=Name(id='globals', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='locals', ctx=Load()), args=[], keywords=[])], keywords=[keyword(arg='level', value=Constant(value=0))])), Return(value=Call(func=Name(id='getattr', ctx=Load()), args=[Attribute(value=Name(id='pip', ctx=Load()), attr='_vendor', ctx=Load()), Name(id='module_name', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='module_name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='truststore')]), Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), ops=[Lt()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=10)], ctx=Load())])]), body=[Return(value=Constant(value=None))], orelse=[]), Raise()])], orelse=[], finalbody=[])], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='ModuleType', ctx=Load()), ctx=Load())), FunctionDef(name='get_vendor_version_from_module', args=arguments(posonlyargs=[], args=[arg(arg='module_name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='module', ctx=Store())], value=Call(func=Name(id='get_module_from_module_name', ctx=Load()), args=[Name(id='module_name', ctx=Load())], keywords=[])), Assign(targets=[Name(id='version', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='module', ctx=Load()), Constant(value='__version__'), Constant(value=None)], keywords=[])), If(test=BoolOp(op=And(), values=[Name(id='module', ctx=Load()), UnaryOp(op=Not(), operand=Name(id='version', ctx=Load()))]), body=[Assert(test=Compare(left=Attribute(value=Name(id='module', ctx=Load()), attr='__file__', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Name(id='env', ctx=Store())], value=Call(func=Name(id='get_environment', ctx=Load()), args=[List(elts=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Attribute(value=Name(id='module', ctx=Load()), attr='__file__', ctx=Load())], keywords=[])], ctx=Load())], keywords=[])), Assign(targets=[Name(id='dist', ctx=Store())], value=Call(func=Attribute(value=Name(id='env', ctx=Load()), attr='get_distribution', ctx=Load()), args=[Name(id='module_name', ctx=Load())], keywords=[])), If(test=Name(id='dist', ctx=Load()), body=[Assign(targets=[Name(id='version', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='dist', ctx=Load()), attr='version', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='version', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='show_actual_vendor_versions', args=arguments(posonlyargs=[], args=[arg(arg='vendor_txt_versions', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Log the actual version and print extra info if there is\n    a conflict or if the actual version could not be imported.\n    ')), For(target=Tuple(elts=[Name(id='module_name', ctx=Store()), Name(id='expected_version', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='vendor_txt_versions', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='extra_message', ctx=Store())], value=Constant(value='')), Assign(targets=[Name(id='actual_version', ctx=Store())], value=Call(func=Name(id='get_vendor_version_from_module', ctx=Load()), args=[Name(id='module_name', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='actual_version', ctx=Load())), body=[Assign(targets=[Name(id='extra_message', ctx=Store())], value=Constant(value=' (Unable to locate actual module version, using vendor.txt specified version)')), Assign(targets=[Name(id='actual_version', ctx=Store())], value=Name(id='expected_version', ctx=Load()))], orelse=[If(test=Compare(left=Call(func=Name(id='parse_version', ctx=Load()), args=[Name(id='actual_version', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='parse_version', ctx=Load()), args=[Name(id='expected_version', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='extra_message', ctx=Store())], value=Call(func=Attribute(value=Constant(value=' (CONFLICT: vendor.txt suggests version should be {})'), attr='format', ctx=Load()), args=[Name(id='expected_version', ctx=Load())], keywords=[]))], orelse=[])]), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='%s==%s%s'), Name(id='module_name', ctx=Load()), Name(id='actual_version', ctx=Load()), Name(id='extra_message', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='show_vendor_versions', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='vendored library versions:')], keywords=[])), Assign(targets=[Name(id='vendor_txt_versions', ctx=Store())], value=Call(func=Name(id='create_vendor_txt_map', ctx=Load()), args=[], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='indent_log', ctx=Load()), args=[], keywords=[]))], body=[Expr(value=Call(func=Name(id='show_actual_vendor_versions', ctx=Load()), args=[Name(id='vendor_txt_versions', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='show_tags', args=arguments(posonlyargs=[], args=[arg(arg='options', annotation=Name(id='Values', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='tag_limit', ctx=Store())], value=Constant(value=10)), Assign(targets=[Name(id='target_python', ctx=Store())], value=Call(func=Name(id='make_target_python', ctx=Load()), args=[Name(id='options', ctx=Load())], keywords=[])), Assign(targets=[Name(id='tags', ctx=Store())], value=Call(func=Attribute(value=Name(id='target_python', ctx=Load()), attr='get_sorted_tags', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='formatted_target', ctx=Store())], value=Call(func=Attribute(value=Name(id='target_python', ctx=Load()), attr='format_given', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='suffix', ctx=Store())], value=Constant(value='')), If(test=Name(id='formatted_target', ctx=Load()), body=[Assign(targets=[Name(id='suffix', ctx=Store())], value=JoinedStr(values=[Constant(value=' (target: '), FormattedValue(value=Name(id='formatted_target', ctx=Load()), conversion=-1), Constant(value=')')]))], orelse=[]), Assign(targets=[Name(id='msg', ctx=Store())], value=Call(func=Attribute(value=Constant(value='Compatible tags: {}{}'), attr='format', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='tags', ctx=Load())], keywords=[]), Name(id='suffix', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='options', ctx=Load()), attr='verbose', ctx=Load()), ops=[Lt()], comparators=[Constant(value=1)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='tags', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Name(id='tag_limit', ctx=Load())])]), body=[Assign(targets=[Name(id='tags_limited', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='tags', ctx=Store())], value=Subscript(value=Name(id='tags', ctx=Load()), slice=Slice(upper=Name(id='tag_limit', ctx=Load())), ctx=Load()))], orelse=[Assign(targets=[Name(id='tags_limited', ctx=Store())], value=Constant(value=False))]), With(items=[withitem(context_expr=Call(func=Name(id='indent_log', ctx=Load()), args=[], keywords=[]))], body=[For(target=Name(id='tag', ctx=Store()), iter=Name(id='tags', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='tag', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Name(id='tags_limited', ctx=Load()), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Call(func=Attribute(value=Constant(value='...\n[First {tag_limit} tags shown. Pass --verbose to show all.]'), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='tag_limit', value=Name(id='tag_limit', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))], orelse=[])])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='ca_bundle_info', args=arguments(posonlyargs=[], args=[arg(arg='config', annotation=Name(id='Configuration', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='levels', ctx=Store())], value=SetComp(elt=Subscript(value=Call(func=Attribute(value=Name(id='key', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='.'), Constant(value=1)], keywords=[]), slice=Constant(value=0), ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])), If(test=UnaryOp(op=Not(), operand=Name(id='levels', ctx=Load())), body=[Return(value=Constant(value='Not specified'))], orelse=[]), Assign(targets=[Name(id='levels_that_override_global', ctx=Store())], value=List(elts=[Constant(value='install'), Constant(value='wheel'), Constant(value='download')], ctx=Load())), Assign(targets=[Name(id='global_overriding_level', ctx=Store())], value=ListComp(elt=Name(id='level', ctx=Load()), generators=[comprehension(target=Name(id='level', ctx=Store()), iter=Name(id='levels', ctx=Load()), ifs=[Compare(left=Name(id='level', ctx=Load()), ops=[In()], comparators=[Name(id='levels_that_override_global', ctx=Load())])], is_async=0)])), If(test=UnaryOp(op=Not(), operand=Name(id='global_overriding_level', ctx=Load())), body=[Return(value=Constant(value='global'))], orelse=[]), If(test=Compare(left=Constant(value='global'), ops=[In()], comparators=[Name(id='levels', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='levels', ctx=Load()), attr='remove', ctx=Load()), args=[Constant(value='global')], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Name(id='levels', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), ClassDef(name='DebugCommand', bases=[Name(id='Command', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Display debug information.\n    ')), Assign(targets=[Name(id='usage', ctx=Store())], value=Constant(value='\n      %prog <options>')), Assign(targets=[Name(id='ignore_require_venv', ctx=Store())], value=Constant(value=True)), FunctionDef(name='add_options', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='cmdoptions', ctx=Load()), attr='add_target_python_options', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='parser', ctx=Load()), attr='insert_option_group', ctx=Load()), args=[Constant(value=0), Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='parser', ctx=Load()), attr='config', ctx=Load()), attr='load', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='run', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='options', annotation=Name(id='Values', ctx=Load())), arg(arg='args', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='This command is only meant for debugging. Do not use this with automation for parsing and getting these details, since the output and options of this command may change without notice.')], keywords=[])), Expr(value=Call(func=Name(id='show_value', ctx=Load()), args=[Constant(value='pip version'), Call(func=Name(id='get_pip_version', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Name(id='show_value', ctx=Load()), args=[Constant(value='sys.version'), Attribute(value=Name(id='sys', ctx=Load()), attr='version', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='show_value', ctx=Load()), args=[Constant(value='sys.executable'), Attribute(value=Name(id='sys', ctx=Load()), attr='executable', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='show_value', ctx=Load()), args=[Constant(value='sys.getdefaultencoding'), Call(func=Attribute(value=Name(id='sys', ctx=Load()), attr='getdefaultencoding', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Name(id='show_value', ctx=Load()), args=[Constant(value='sys.getfilesystemencoding'), Call(func=Attribute(value=Name(id='sys', ctx=Load()), attr='getfilesystemencoding', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Name(id='show_value', ctx=Load()), args=[Constant(value='locale.getpreferredencoding'), Call(func=Attribute(value=Name(id='locale', ctx=Load()), attr='getpreferredencoding', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Name(id='show_value', ctx=Load()), args=[Constant(value='sys.platform'), Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='show_sys_implementation', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Name(id='show_value', ctx=Load()), args=[Constant(value="'cert' config value"), Call(func=Name(id='ca_bundle_info', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='parser', ctx=Load()), attr='config', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Name(id='show_value', ctx=Load()), args=[Constant(value='REQUESTS_CA_BUNDLE'), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='REQUESTS_CA_BUNDLE')], keywords=[])], keywords=[])), Expr(value=Call(func=Name(id='show_value', ctx=Load()), args=[Constant(value='CURL_CA_BUNDLE'), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='CURL_CA_BUNDLE')], keywords=[])], keywords=[])), Expr(value=Call(func=Name(id='show_value', ctx=Load()), args=[Constant(value='pip._vendor.certifi.where()'), Call(func=Name(id='where', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Name(id='show_value', ctx=Load()), args=[Constant(value='pip._vendor.DEBUNDLED'), Attribute(value=Attribute(value=Name(id='pip', ctx=Load()), attr='_vendor', ctx=Load()), attr='DEBUNDLED', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='show_vendor_versions', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Name(id='show_tags', ctx=Load()), args=[Name(id='options', ctx=Load())], keywords=[])), Return(value=Name(id='SUCCESS', ctx=Load()))], decorator_list=[], returns=Name(id='int', ctx=Load()))], decorator_list=[])], type_ignores=[])