Module(body=[Expr(value=Constant(value="Execute exactly this copy of pip, within a different environment.\n\nThis file is named as it is, to ensure that this module can't be imported via\nan import statement.\n")), Import(names=[alias(name='sys')]), Assign(targets=[Name(id='PYTHON_REQUIRES', ctx=Store())], value=Tuple(elts=[Constant(value=3), Constant(value=7)], ctx=Load())), FunctionDef(name='version_str', args=arguments(posonlyargs=[], args=[arg(arg='version')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value='.'), attr='join', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='str', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='v', ctx=Store()), iter=Name(id='version', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[]), If(test=Compare(left=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), slice=Slice(upper=Constant(value=2)), ctx=Load()), ops=[Lt()], comparators=[Name(id='PYTHON_REQUIRES', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='SystemExit', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='This version of pip does not support python {} (requires >={}).'), attr='format', ctx=Load()), args=[Call(func=Name(id='version_str', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), slice=Slice(upper=Constant(value=2)), ctx=Load())], keywords=[]), Call(func=Name(id='version_str', ctx=Load()), args=[Name(id='PYTHON_REQUIRES', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], orelse=[]), Import(names=[alias(name='runpy')]), ImportFrom(module='importlib.machinery', names=[alias(name='PathFinder')], level=0), ImportFrom(module='os.path', names=[alias(name='dirname')], level=0), Assign(targets=[Name(id='PIP_SOURCES_ROOT', ctx=Store())], value=Call(func=Name(id='dirname', ctx=Load()), args=[Call(func=Name(id='dirname', ctx=Load()), args=[Name(id='__file__', ctx=Load())], keywords=[])], keywords=[])), ClassDef(name='PipImportRedirectingFinder', bases=[], keywords=[], body=[FunctionDef(name='find_spec', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='fullname'), arg(arg='path'), arg(arg='target')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[If(test=Compare(left=Name(id='fullname', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='pip')]), body=[Return(value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='spec', ctx=Store())], value=Call(func=Attribute(value=Name(id='PathFinder', ctx=Load()), attr='find_spec', ctx=Load()), args=[Name(id='fullname', ctx=Load()), List(elts=[Name(id='PIP_SOURCES_ROOT', ctx=Load())], ctx=Load()), Name(id='target', ctx=Load())], keywords=[])), Assert(test=Name(id='spec', ctx=Load()), msg=Tuple(elts=[Name(id='PIP_SOURCES_ROOT', ctx=Load()), Name(id='fullname', ctx=Load())], ctx=Load())), Return(value=Name(id='spec', ctx=Load()))], decorator_list=[Name(id='classmethod', ctx=Load())])], decorator_list=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='meta_path', ctx=Load()), attr='insert', ctx=Load()), args=[Constant(value=0), Call(func=Name(id='PipImportRedirectingFinder', ctx=Load()), args=[], keywords=[])], keywords=[])), Assert(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__')]), msg=Constant(value='Cannot run __pip-runner__.py as a non-main module')), Expr(value=Call(func=Attribute(value=Name(id='runpy', ctx=Load()), attr='run_module', ctx=Load()), args=[Constant(value='pip')], keywords=[keyword(arg='run_name', value=Constant(value='__main__')), keyword(arg='alter_sys', value=Constant(value=True))]))], type_ignores=[])