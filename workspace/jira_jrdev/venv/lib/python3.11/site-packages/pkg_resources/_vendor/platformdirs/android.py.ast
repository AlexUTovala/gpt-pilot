Module(body=[ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), Import(names=[alias(name='os')]), Import(names=[alias(name='re')]), Import(names=[alias(name='sys')]), ImportFrom(module='functools', names=[alias(name='lru_cache')], level=0), ImportFrom(module='typing', names=[alias(name='cast')], level=0), ImportFrom(module='api', names=[alias(name='PlatformDirsABC')], level=1), ClassDef(name='Android', bases=[Name(id='PlatformDirsABC', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Follows the guidance `from here <https://android.stackexchange.com/a/216132>`_. Makes use of the\n    `appname <platformdirs.api.PlatformDirsABC.appname>` and\n    `version <platformdirs.api.PlatformDirsABC.version>`.\n    ')), FunctionDef(name='user_data_dir', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=':return: data directory tied to the user, e.g. ``/data/user/<userid>/<packagename>/files/<AppName>``')), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_append_app_name_and_version', ctx=Load()), args=[Call(func=Name(id='cast', ctx=Load()), args=[Name(id='str', ctx=Load()), Call(func=Name(id='_android_folder', ctx=Load()), args=[], keywords=[])], keywords=[]), Constant(value='files')], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='site_data_dir', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=':return: data directory shared by users, same as `user_data_dir`')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='user_data_dir', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='user_config_dir', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        :return: config directory tied to the user, e.g. ``/data/user/<userid>/<packagename>/shared_prefs/<AppName>``\n        ')), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_append_app_name_and_version', ctx=Load()), args=[Call(func=Name(id='cast', ctx=Load()), args=[Name(id='str', ctx=Load()), Call(func=Name(id='_android_folder', ctx=Load()), args=[], keywords=[])], keywords=[]), Constant(value='shared_prefs')], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='site_config_dir', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=':return: config directory shared by the users, same as `user_config_dir`')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='user_config_dir', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='user_cache_dir', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=':return: cache directory tied to the user, e.g. e.g. ``/data/user/<userid>/<packagename>/cache/<AppName>``')), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_append_app_name_and_version', ctx=Load()), args=[Call(func=Name(id='cast', ctx=Load()), args=[Name(id='str', ctx=Load()), Call(func=Name(id='_android_folder', ctx=Load()), args=[], keywords=[])], keywords=[]), Constant(value='cache')], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='user_state_dir', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=':return: state directory tied to the user, same as `user_data_dir`')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='user_data_dir', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='user_log_dir', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        :return: log directory tied to the user, same as `user_cache_dir` if not opinionated else ``log`` in it,\n          e.g. ``/data/user/<userid>/<packagename>/cache/<AppName>/log``\n        ')), Assign(targets=[Name(id='path', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='user_cache_dir', ctx=Load())), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='opinion', ctx=Load()), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='path', ctx=Load()), Constant(value='log')], keywords=[]))], orelse=[]), Return(value=Name(id='path', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='user_documents_dir', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        :return: documents directory tied to the user e.g. ``/storage/emulated/0/Documents``\n        ')), Return(value=Call(func=Name(id='_android_documents_folder', ctx=Load()), args=[], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='user_runtime_dir', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        :return: runtime directory tied to the user, same as `user_cache_dir` if not opinionated else ``tmp`` in it,\n          e.g. ``/data/user/<userid>/<packagename>/cache/<AppName>/tmp``\n        ')), Assign(targets=[Name(id='path', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='user_cache_dir', ctx=Load())), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='opinion', ctx=Load()), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='path', ctx=Load()), Constant(value='tmp')], keywords=[]))], orelse=[]), Return(value=Name(id='path', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load()))], decorator_list=[]), FunctionDef(name='_android_folder', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=':return: base folder for the Android OS or None if cannot be found')), Try(body=[ImportFrom(module='jnius', names=[alias(name='autoclass')], level=0), Assign(targets=[Name(id='Context', ctx=Store())], value=Call(func=Name(id='autoclass', ctx=Load()), args=[Constant(value='android.content.Context')], keywords=[])), AnnAssign(target=Name(id='result', ctx=Store()), annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None)), value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='Context', ctx=Load()), attr='getFilesDir', ctx=Load()), args=[], keywords=[]), attr='getParentFile', ctx=Load()), args=[], keywords=[]), attr='getAbsolutePath', ctx=Load()), args=[], keywords=[]), simple=1)], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Assign(targets=[Name(id='pattern', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='/data/(data|user/\\d+)/(.+)/files')], keywords=[])), For(target=Name(id='path', ctx=Store()), iter=Attribute(value=Name(id='sys', ctx=Load()), attr='path', ctx=Load()), body=[If(test=Call(func=Attribute(value=Name(id='pattern', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='/files')], keywords=[]), slice=Constant(value=0), ctx=Load())), Break()], orelse=[])], orelse=[Assign(targets=[Name(id='result', ctx=Store())], value=Constant(value=None))])])], orelse=[], finalbody=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[Call(func=Name(id='lru_cache', ctx=Load()), args=[], keywords=[keyword(arg='maxsize', value=Constant(value=1))])], returns=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None))), FunctionDef(name='_android_documents_folder', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=':return: documents folder for the Android OS')), Try(body=[ImportFrom(module='jnius', names=[alias(name='autoclass')], level=0), Assign(targets=[Name(id='Context', ctx=Store())], value=Call(func=Name(id='autoclass', ctx=Load()), args=[Constant(value='android.content.Context')], keywords=[])), Assign(targets=[Name(id='Environment', ctx=Store())], value=Call(func=Name(id='autoclass', ctx=Load()), args=[Constant(value='android.os.Environment')], keywords=[])), AnnAssign(target=Name(id='documents_dir', ctx=Store()), annotation=Name(id='str', ctx=Load()), value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='Context', ctx=Load()), attr='getExternalFilesDir', ctx=Load()), args=[Attribute(value=Name(id='Environment', ctx=Load()), attr='DIRECTORY_DOCUMENTS', ctx=Load())], keywords=[]), attr='getAbsolutePath', ctx=Load()), args=[], keywords=[]), simple=1)], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Assign(targets=[Name(id='documents_dir', ctx=Store())], value=Constant(value='/storage/emulated/0/Documents'))])], orelse=[], finalbody=[]), Return(value=Name(id='documents_dir', ctx=Load()))], decorator_list=[Call(func=Name(id='lru_cache', ctx=Load()), args=[], keywords=[keyword(arg='maxsize', value=Constant(value=1))])], returns=Name(id='str', ctx=Load())), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='Android')], ctx=Load()))], type_ignores=[])