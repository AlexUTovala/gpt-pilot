Module(body=[Import(names=[alias(name='abc')]), Import(names=[alias(name='os')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='pathlib')]), ImportFrom(module='contextlib', names=[alias(name='suppress')], level=0), ImportFrom(module='typing', names=[alias(name='Union')], level=0), If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), ops=[GtE()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=10)], ctx=Load())]), body=[ImportFrom(module='zipfile', names=[alias(name='Path', asname='ZipPath')], level=0)], orelse=[ImportFrom(module='zipp', names=[alias(name='Path', asname='ZipPath')], level=2)]), Try(body=[ImportFrom(module='typing', names=[alias(name='runtime_checkable')], level=0)], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[FunctionDef(name='runtime_checkable', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Name(id='cls', ctx=Load()))], decorator_list=[])])], orelse=[], finalbody=[]), Try(body=[ImportFrom(module='typing', names=[alias(name='Protocol')], level=0)], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Assign(targets=[Name(id='Protocol', ctx=Store())], value=Attribute(value=Name(id='abc', ctx=Load()), attr='ABC', ctx=Load()))])], orelse=[], finalbody=[]), ClassDef(name='TraversableResourcesLoader', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    Adapt loaders to provide TraversableResources and other\n    compatibility.\n\n    Used primarily for Python 3.9 and earlier where the native\n    loaders do not yet implement TraversableResources.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='spec')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='spec', ctx=Store())], value=Name(id='spec', ctx=Load()))], decorator_list=[]), FunctionDef(name='path', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='spec', ctx=Load()), attr='origin', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='get_resource_reader', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[ImportFrom(names=[alias(name='readers'), alias(name='_adapters')], level=1), FunctionDef(name='_zip_reader', args=arguments(posonlyargs=[], args=[arg(arg='spec')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='suppress', ctx=Load()), args=[Name(id='AttributeError', ctx=Load())], keywords=[]))], body=[Return(value=Call(func=Attribute(value=Name(id='readers', ctx=Load()), attr='ZipReader', ctx=Load()), args=[Attribute(value=Name(id='spec', ctx=Load()), attr='loader', ctx=Load()), Attribute(value=Name(id='spec', ctx=Load()), attr='name', ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='_namespace_reader', args=arguments(posonlyargs=[], args=[arg(arg='spec')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='suppress', ctx=Load()), args=[Name(id='AttributeError', ctx=Load()), Name(id='ValueError', ctx=Load())], keywords=[]))], body=[Return(value=Call(func=Attribute(value=Name(id='readers', ctx=Load()), attr='NamespaceReader', ctx=Load()), args=[Attribute(value=Name(id='spec', ctx=Load()), attr='submodule_search_locations', ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='_available_reader', args=arguments(posonlyargs=[], args=[arg(arg='spec')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='suppress', ctx=Load()), args=[Name(id='AttributeError', ctx=Load())], keywords=[]))], body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='spec', ctx=Load()), attr='loader', ctx=Load()), attr='get_resource_reader', ctx=Load()), args=[Attribute(value=Name(id='spec', ctx=Load()), attr='name', ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='_native_reader', args=arguments(posonlyargs=[], args=[arg(arg='spec')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='reader', ctx=Store())], value=Call(func=Name(id='_available_reader', ctx=Load()), args=[Name(id='spec', ctx=Load())], keywords=[])), Return(value=IfExp(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='reader', ctx=Load()), Constant(value='files')], keywords=[]), body=Name(id='reader', ctx=Load()), orelse=Constant(value=None)))], decorator_list=[]), FunctionDef(name='_file_reader', args=arguments(posonlyargs=[], args=[arg(arg='spec')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Name(id='pathlib', ctx=Load()), attr='Path', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='path', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='TypeError', ctx=Load()), body=[Return(value=Constant(value=None))])], orelse=[], finalbody=[]), If(test=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='exists', ctx=Load()), args=[], keywords=[]), body=[Return(value=Call(func=Attribute(value=Name(id='readers', ctx=Load()), attr='FileReader', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), Return(value=BoolOp(op=Or(), values=[Call(func=Name(id='_native_reader', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='spec', ctx=Load())], keywords=[]), Call(func=Name(id='_zip_reader', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='spec', ctx=Load())], keywords=[]), Call(func=Name(id='_namespace_reader', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='spec', ctx=Load())], keywords=[]), Call(func=Name(id='_file_reader', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='spec', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='_adapters', ctx=Load()), attr='CompatibilityFiles', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='spec', ctx=Load())], keywords=[])]))], decorator_list=[])], decorator_list=[]), FunctionDef(name='wrap_spec', args=arguments(posonlyargs=[], args=[arg(arg='package')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Construct a package spec with traversable compatibility\n    on the spec/loader/reader.\n\n    Supersedes _adapters.wrap_spec to use TraversableResourcesLoader\n    from above for older Python compatibility (<3.10).\n    ')), ImportFrom(names=[alias(name='_adapters')], level=1), Return(value=Call(func=Attribute(value=Name(id='_adapters', ctx=Load()), attr='SpecLoaderAdapter', ctx=Load()), args=[Attribute(value=Name(id='package', ctx=Load()), attr='__spec__', ctx=Load()), Name(id='TraversableResourcesLoader', ctx=Load())], keywords=[]))], decorator_list=[]), If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), ops=[GtE()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=9)], ctx=Load())]), body=[Assign(targets=[Name(id='StrPath', ctx=Store())], value=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Attribute(value=Name(id='os', ctx=Load()), attr='PathLike', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], orelse=[Assign(targets=[Name(id='StrPath', ctx=Store())], value=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Constant(value='os.PathLike[str]')], ctx=Load()), ctx=Load()))])], type_ignores=[])