Module(body=[ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), Import(names=[alias(name='os')]), Import(names=[alias(name='sys')]), ImportFrom(module='configparser', names=[alias(name='ConfigParser')], level=0), ImportFrom(module='pathlib', names=[alias(name='Path')], level=0), ImportFrom(module='api', names=[alias(name='PlatformDirsABC')], level=1), If(test=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='linux')], keywords=[]), body=[ImportFrom(module='os', names=[alias(name='getuid')], level=0)], orelse=[FunctionDef(name='getuid', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Call(func=Name(id='RuntimeError', ctx=Load()), args=[Constant(value='should only be used on Linux')], keywords=[]))], decorator_list=[], returns=Name(id='int', ctx=Load()))]), ClassDef(name='Unix', bases=[Name(id='PlatformDirsABC', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    On Unix/Linux, we follow the\n    `XDG Basedir Spec <https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html>`_. The spec allows\n    overriding directories with environment variables. The examples show are the default values, alongside the name of\n    the environment variable that overrides them. Makes use of the\n    `appname <platformdirs.api.PlatformDirsABC.appname>`,\n    `version <platformdirs.api.PlatformDirsABC.version>`,\n    `multipath <platformdirs.api.PlatformDirsABC.multipath>`,\n    `opinion <platformdirs.api.PlatformDirsABC.opinion>`.\n    ')), FunctionDef(name='user_data_dir', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        :return: data directory tied to the user, e.g. ``~/.local/share/$appname/$version`` or\n         ``$XDG_DATA_HOME/$appname/$version``\n        ')), Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='XDG_DATA_HOME'), Constant(value='')], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[])), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='expanduser', ctx=Load()), args=[Constant(value='~/.local/share')], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_append_app_name_and_version', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='site_data_dir', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        :return: data directories shared by users (if `multipath <platformdirs.api.PlatformDirsABC.multipath>` is\n         enabled and ``XDG_DATA_DIR`` is set and a multi path the response is also a multi path separated by the OS\n         path separator), e.g. ``/usr/local/share/$appname/$version`` or ``/usr/share/$appname/$version``\n        ')), Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='XDG_DATA_DIRS'), Constant(value='')], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[])), body=[Assign(targets=[Name(id='path', ctx=Store())], value=JoinedStr(values=[Constant(value='/usr/local/share'), FormattedValue(value=Attribute(value=Name(id='os', ctx=Load()), attr='pathsep', ctx=Load()), conversion=-1), Constant(value='/usr/share')]))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_with_multi_path', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='_with_multi_path', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='path_list', ctx=Store())], value=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='split', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='pathsep', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='multipath', ctx=Load())), body=[Assign(targets=[Name(id='path_list', ctx=Store())], value=Subscript(value=Name(id='path_list', ctx=Load()), slice=Slice(lower=Constant(value=0), upper=Constant(value=1)), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='path_list', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_append_app_name_and_version', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='expanduser', ctx=Load()), args=[Name(id='p', ctx=Load())], keywords=[])], keywords=[]), generators=[comprehension(target=Name(id='p', ctx=Store()), iter=Name(id='path_list', ctx=Load()), ifs=[], is_async=0)])), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='pathsep', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='path_list', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='user_config_dir', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        :return: config directory tied to the user, e.g. ``~/.config/$appname/$version`` or\n         ``$XDG_CONFIG_HOME/$appname/$version``\n        ')), Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='XDG_CONFIG_HOME'), Constant(value='')], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[])), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='expanduser', ctx=Load()), args=[Constant(value='~/.config')], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_append_app_name_and_version', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='site_config_dir', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        :return: config directories shared by users (if `multipath <platformdirs.api.PlatformDirsABC.multipath>`\n         is enabled and ``XDG_DATA_DIR`` is set and a multi path the response is also a multi path separated by the OS\n         path separator), e.g. ``/etc/xdg/$appname/$version``\n        ')), Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='XDG_CONFIG_DIRS'), Constant(value='')], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[])), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Constant(value='/etc/xdg'))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_with_multi_path', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='user_cache_dir', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        :return: cache directory tied to the user, e.g. ``~/.cache/$appname/$version`` or\n         ``~/$XDG_CACHE_HOME/$appname/$version``\n        ')), Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='XDG_CACHE_HOME'), Constant(value='')], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[])), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='expanduser', ctx=Load()), args=[Constant(value='~/.cache')], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_append_app_name_and_version', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='user_state_dir', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        :return: state directory tied to the user, e.g. ``~/.local/state/$appname/$version`` or\n         ``$XDG_STATE_HOME/$appname/$version``\n        ')), Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='XDG_STATE_HOME'), Constant(value='')], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[])), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='expanduser', ctx=Load()), args=[Constant(value='~/.local/state')], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_append_app_name_and_version', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='user_log_dir', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        :return: log directory tied to the user, same as `user_state_dir` if not opinionated else ``log`` in it\n        ')), Assign(targets=[Name(id='path', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='user_state_dir', ctx=Load())), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='opinion', ctx=Load()), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='path', ctx=Load()), Constant(value='log')], keywords=[]))], orelse=[]), Return(value=Name(id='path', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='user_documents_dir', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        :return: documents directory tied to the user, e.g. ``~/Documents``\n        ')), Assign(targets=[Name(id='documents_dir', ctx=Store())], value=Call(func=Name(id='_get_user_dirs_folder', ctx=Load()), args=[Constant(value='XDG_DOCUMENTS_DIR')], keywords=[])), If(test=Compare(left=Name(id='documents_dir', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='documents_dir', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='XDG_DOCUMENTS_DIR'), Constant(value='')], keywords=[]), attr='strip', ctx=Load()), args=[], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='documents_dir', ctx=Load())), body=[Assign(targets=[Name(id='documents_dir', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='expanduser', ctx=Load()), args=[Constant(value='~/Documents')], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='documents_dir', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='user_runtime_dir', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        :return: runtime directory tied to the user, e.g. ``/run/user/$(id -u)/$appname/$version`` or\n         ``$XDG_RUNTIME_DIR/$appname/$version``\n        ')), Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='XDG_RUNTIME_DIR'), Constant(value='')], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[])), body=[Assign(targets=[Name(id='path', ctx=Store())], value=JoinedStr(values=[Constant(value='/run/user/'), FormattedValue(value=Call(func=Name(id='getuid', ctx=Load()), args=[], keywords=[]), conversion=-1)]))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_append_app_name_and_version', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='site_data_path', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=':return: data path shared by users. Only return first item, even if ``multipath`` is set to ``True``')), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_first_item_as_path_if_multipath', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='site_data_dir', ctx=Load())], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='Path', ctx=Load())), FunctionDef(name='site_config_path', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=':return: config path shared by the users. Only return first item, even if ``multipath`` is set to ``True``')), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_first_item_as_path_if_multipath', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='site_config_dir', ctx=Load())], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='Path', ctx=Load())), FunctionDef(name='_first_item_as_path_if_multipath', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='directory', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='multipath', ctx=Load()), body=[Assign(targets=[Name(id='directory', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='directory', ctx=Load()), attr='split', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='pathsep', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='Path', ctx=Load()), args=[Name(id='directory', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='Path', ctx=Load()))], decorator_list=[]), FunctionDef(name='_get_user_dirs_folder', args=arguments(posonlyargs=[], args=[arg(arg='key', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return directory from user-dirs.dirs config file. See https://freedesktop.org/wiki/Software/xdg-user-dirs/')), Assign(targets=[Name(id='user_dirs_config_path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Call(func=Name(id='Unix', ctx=Load()), args=[], keywords=[]), attr='user_config_dir', ctx=Load()), Constant(value='user-dirs.dirs')], keywords=[])), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='user_dirs_config_path', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='parser', ctx=Store())], value=Call(func=Name(id='ConfigParser', ctx=Load()), args=[], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='user_dirs_config_path', ctx=Load())], keywords=[]), optional_vars=Name(id='stream', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='read_string', ctx=Load()), args=[JoinedStr(values=[Constant(value='[top]\n'), FormattedValue(value=Call(func=Attribute(value=Name(id='stream', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]), conversion=-1)])], keywords=[]))]), If(test=Compare(left=Name(id='key', ctx=Load()), ops=[NotIn()], comparators=[Subscript(value=Name(id='parser', ctx=Load()), slice=Constant(value='top'), ctx=Load())]), body=[Return(value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Subscript(value=Name(id='parser', ctx=Load()), slice=Constant(value='top'), ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()), attr='strip', ctx=Load()), args=[Constant(value='"')], keywords=[])), Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='$HOME'), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='expanduser', ctx=Load()), args=[Constant(value='~')], keywords=[])], keywords=[])), Return(value=Name(id='path', ctx=Load()))], orelse=[]), Return(value=Constant(value=None))], decorator_list=[], returns=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None))), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='Unix')], ctx=Load()))], type_ignores=[])