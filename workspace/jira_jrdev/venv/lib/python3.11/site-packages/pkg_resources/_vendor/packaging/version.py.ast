Module(body=[Expr(value=Constant(value='\n.. testsetup::\n\n    from packaging.version import parse, Version\n')), Import(names=[alias(name='collections')]), Import(names=[alias(name='itertools')]), Import(names=[alias(name='re')]), ImportFrom(module='typing', names=[alias(name='Any'), alias(name='Callable'), alias(name='Optional'), alias(name='SupportsInt'), alias(name='Tuple'), alias(name='Union')], level=0), ImportFrom(module='_structures', names=[alias(name='Infinity'), alias(name='InfinityType'), alias(name='NegativeInfinity'), alias(name='NegativeInfinityType')], level=1), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='VERSION_PATTERN'), Constant(value='parse'), Constant(value='Version'), Constant(value='InvalidVersion')], ctx=Load())), Assign(targets=[Name(id='InfiniteTypes', ctx=Store())], value=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='InfinityType', ctx=Load()), Name(id='NegativeInfinityType', ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='PrePostDevType', ctx=Store())], value=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='InfiniteTypes', ctx=Load()), Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='SubLocalType', ctx=Store())], value=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='InfiniteTypes', ctx=Load()), Name(id='int', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='LocalType', ctx=Store())], value=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='NegativeInfinityType', ctx=Load()), Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='SubLocalType', ctx=Load()), Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='SubLocalType', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='NegativeInfinityType', ctx=Load()), Name(id='SubLocalType', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='CmpKey', ctx=Store())], value=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load()), Name(id='PrePostDevType', ctx=Load()), Name(id='PrePostDevType', ctx=Load()), Name(id='PrePostDevType', ctx=Load()), Name(id='LocalType', ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='VersionComparisonMethod', ctx=Store())], value=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='CmpKey', ctx=Load()), Name(id='CmpKey', ctx=Load())], ctx=Load()), Name(id='bool', ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='_Version', ctx=Store())], value=Call(func=Attribute(value=Name(id='collections', ctx=Load()), attr='namedtuple', ctx=Load()), args=[Constant(value='_Version'), List(elts=[Constant(value='epoch'), Constant(value='release'), Constant(value='dev'), Constant(value='pre'), Constant(value='post'), Constant(value='local')], ctx=Load())], keywords=[])), FunctionDef(name='parse', args=arguments(posonlyargs=[], args=[arg(arg='version', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Parse the given version string.\n\n    >>> parse('1.0.dev1')\n    <Version('1.0.dev1')>\n\n    :param version: The version string to parse.\n    :raises InvalidVersion: When the version string is not a valid version.\n    ")), Return(value=Call(func=Name(id='Version', ctx=Load()), args=[Name(id='version', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value='Version')), ClassDef(name='InvalidVersion', bases=[Name(id='ValueError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Raised when a version string is not a valid version.\n\n    >>> Version("invalid")\n    Traceback (most recent call last):\n        ...\n    packaging.version.InvalidVersion: Invalid version: \'invalid\'\n    '))], decorator_list=[]), ClassDef(name='_BaseVersion', bases=[], keywords=[], body=[AnnAssign(target=Name(id='_key', ctx=Store()), annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='Any', ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load()), simple=1), FunctionDef(name='__hash__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='hash', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_key', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='__lt__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other', annotation=Constant(value='_BaseVersion'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='other', ctx=Load()), Name(id='_BaseVersion', ctx=Load())], keywords=[])), body=[Return(value=Name(id='NotImplemented', ctx=Load()))], orelse=[]), Return(value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_key', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Name(id='other', ctx=Load()), attr='_key', ctx=Load())]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='__le__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other', annotation=Constant(value='_BaseVersion'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='other', ctx=Load()), Name(id='_BaseVersion', ctx=Load())], keywords=[])), body=[Return(value=Name(id='NotImplemented', ctx=Load()))], orelse=[]), Return(value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_key', ctx=Load()), ops=[LtE()], comparators=[Attribute(value=Name(id='other', ctx=Load()), attr='_key', ctx=Load())]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='__eq__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other', annotation=Name(id='object', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='other', ctx=Load()), Name(id='_BaseVersion', ctx=Load())], keywords=[])), body=[Return(value=Name(id='NotImplemented', ctx=Load()))], orelse=[]), Return(value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_key', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='other', ctx=Load()), attr='_key', ctx=Load())]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='__ge__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other', annotation=Constant(value='_BaseVersion'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='other', ctx=Load()), Name(id='_BaseVersion', ctx=Load())], keywords=[])), body=[Return(value=Name(id='NotImplemented', ctx=Load()))], orelse=[]), Return(value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_key', ctx=Load()), ops=[GtE()], comparators=[Attribute(value=Name(id='other', ctx=Load()), attr='_key', ctx=Load())]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='__gt__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other', annotation=Constant(value='_BaseVersion'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='other', ctx=Load()), Name(id='_BaseVersion', ctx=Load())], keywords=[])), body=[Return(value=Name(id='NotImplemented', ctx=Load()))], orelse=[]), Return(value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_key', ctx=Load()), ops=[Gt()], comparators=[Attribute(value=Name(id='other', ctx=Load()), attr='_key', ctx=Load())]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='__ne__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other', annotation=Name(id='object', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='other', ctx=Load()), Name(id='_BaseVersion', ctx=Load())], keywords=[])), body=[Return(value=Name(id='NotImplemented', ctx=Load()))], orelse=[]), Return(value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_key', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='other', ctx=Load()), attr='_key', ctx=Load())]))], decorator_list=[], returns=Name(id='bool', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='_VERSION_PATTERN', ctx=Store())], value=Constant(value='\n    v?\n    (?:\n        (?:(?P<epoch>[0-9]+)!)?                           # epoch\n        (?P<release>[0-9]+(?:\\.[0-9]+)*)                  # release segment\n        (?P<pre>                                          # pre-release\n            [-_\\.]?\n            (?P<pre_l>(a|b|c|rc|alpha|beta|pre|preview))\n            [-_\\.]?\n            (?P<pre_n>[0-9]+)?\n        )?\n        (?P<post>                                         # post release\n            (?:-(?P<post_n1>[0-9]+))\n            |\n            (?:\n                [-_\\.]?\n                (?P<post_l>post|rev|r)\n                [-_\\.]?\n                (?P<post_n2>[0-9]+)?\n            )\n        )?\n        (?P<dev>                                          # dev release\n            [-_\\.]?\n            (?P<dev_l>dev)\n            [-_\\.]?\n            (?P<dev_n>[0-9]+)?\n        )?\n    )\n    (?:\\+(?P<local>[a-z0-9]+(?:[-_\\.][a-z0-9]+)*))?       # local version\n')), Assign(targets=[Name(id='VERSION_PATTERN', ctx=Store())], value=Name(id='_VERSION_PATTERN', ctx=Load())), Expr(value=Constant(value='\nA string containing the regular expression used to match a valid version.\n\nThe pattern is not anchored at either end, and is intended for embedding in larger\nexpressions (for example, matching a version number as part of a file name). The\nregular expression should be compiled with the ``re.VERBOSE`` and ``re.IGNORECASE``\nflags set.\n\n:meta hide-value:\n')), ClassDef(name='Version', bases=[Name(id='_BaseVersion', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='This class abstracts handling of a project\'s versions.\n\n    A :class:`Version` instance is comparison aware and can be compared and\n    sorted using the standard Python interfaces.\n\n    >>> v1 = Version("1.0a5")\n    >>> v2 = Version("1.0")\n    >>> v1\n    <Version(\'1.0a5\')>\n    >>> v2\n    <Version(\'1.0\')>\n    >>> v1 < v2\n    True\n    >>> v1 == v2\n    False\n    >>> v1 > v2\n    False\n    >>> v1 >= v2\n    False\n    >>> v1 <= v2\n    True\n    ')), Assign(targets=[Name(id='_regex', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[BinOp(left=BinOp(left=Constant(value='^\\s*'), op=Add(), right=Name(id='VERSION_PATTERN', ctx=Load())), op=Add(), right=Constant(value='\\s*$')), BinOp(left=Attribute(value=Name(id='re', ctx=Load()), attr='VERBOSE', ctx=Load()), op=BitOr(), right=Attribute(value=Name(id='re', ctx=Load()), attr='IGNORECASE', ctx=Load()))], keywords=[])), AnnAssign(target=Name(id='_key', ctx=Store()), annotation=Name(id='CmpKey', ctx=Load()), simple=1), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='version', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Initialize a Version object.\n\n        :param version:\n            The string representation of a version which will be parsed and normalized\n            before use.\n        :raises InvalidVersion:\n            If the ``version`` does not conform to PEP 440 in any way then this\n            exception will be raised.\n        ')), Assign(targets=[Name(id='match', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_regex', ctx=Load()), attr='search', ctx=Load()), args=[Name(id='version', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='match', ctx=Load())), body=[Raise(exc=Call(func=Name(id='InvalidVersion', ctx=Load()), args=[JoinedStr(values=[Constant(value="Invalid version: '"), FormattedValue(value=Name(id='version', ctx=Load()), conversion=-1), Constant(value="'")])], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_version', ctx=Store())], value=Call(func=Name(id='_Version', ctx=Load()), args=[], keywords=[keyword(arg='epoch', value=IfExp(test=Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value='epoch')], keywords=[]), body=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value='epoch')], keywords=[])], keywords=[]), orelse=Constant(value=0))), keyword(arg='release', value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='int', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value='release')], keywords=[]), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[]), ifs=[], is_async=0)])], keywords=[])), keyword(arg='pre', value=Call(func=Name(id='_parse_letter_version', ctx=Load()), args=[Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value='pre_l')], keywords=[]), Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value='pre_n')], keywords=[])], keywords=[])), keyword(arg='post', value=Call(func=Name(id='_parse_letter_version', ctx=Load()), args=[Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value='post_l')], keywords=[]), BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value='post_n1')], keywords=[]), Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value='post_n2')], keywords=[])])], keywords=[])), keyword(arg='dev', value=Call(func=Name(id='_parse_letter_version', ctx=Load()), args=[Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value='dev_l')], keywords=[]), Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value='dev_n')], keywords=[])], keywords=[])), keyword(arg='local', value=Call(func=Name(id='_parse_local_version', ctx=Load()), args=[Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value='local')], keywords=[])], keywords=[]))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_key', ctx=Store())], value=Call(func=Name(id='_cmpkey', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_version', ctx=Load()), attr='epoch', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_version', ctx=Load()), attr='release', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_version', ctx=Load()), attr='pre', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_version', ctx=Load()), attr='post', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_version', ctx=Load()), attr='dev', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_version', ctx=Load()), attr='local', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="A representation of the Version that shows all internal state.\n\n        >>> Version('1.0.0')\n        <Version('1.0.0')>\n        ")), Return(value=JoinedStr(values=[Constant(value="<Version('"), FormattedValue(value=Name(id='self', ctx=Load()), conversion=-1), Constant(value="')>")]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='__str__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='A string representation of the version that can be rounded-tripped.\n\n        >>> str(Version("1.0a5"))\n        \'1.0a5\'\n        ')), Assign(targets=[Name(id='parts', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='epoch', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='parts', ctx=Load()), attr='append', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='epoch', ctx=Load()), conversion=-1), Constant(value='!')])], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='parts', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='.'), attr='join', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='str', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='release', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='pre', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='parts', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='str', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='pre', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='post', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='parts', ctx=Load()), attr='append', ctx=Load()), args=[JoinedStr(values=[Constant(value='.post'), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='post', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='dev', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='parts', ctx=Load()), attr='append', ctx=Load()), args=[JoinedStr(values=[Constant(value='.dev'), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='dev', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='local', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='parts', ctx=Load()), attr='append', ctx=Load()), args=[JoinedStr(values=[Constant(value='+'), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='local', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Name(id='parts', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='epoch', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='The epoch of the version.\n\n        >>> Version("2.0.0").epoch\n        0\n        >>> Version("1!2.0.0").epoch\n        1\n        ')), AnnAssign(target=Name(id='_epoch', ctx=Store()), annotation=Name(id='int', ctx=Load()), value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_version', ctx=Load()), attr='epoch', ctx=Load()), simple=1), Return(value=Name(id='_epoch', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load())), FunctionDef(name='release', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='The components of the "release" segment of the version.\n\n        >>> Version("1.2.3").release\n        (1, 2, 3)\n        >>> Version("2.0.0").release\n        (2, 0, 0)\n        >>> Version("1!2.0.0.post0").release\n        (2, 0, 0)\n\n        Includes trailing zeroes but not the epoch or any pre-release / development /\n        post-release suffixes.\n        ')), AnnAssign(target=Name(id='_release', ctx=Store()), annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load()), value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_version', ctx=Load()), attr='release', ctx=Load()), simple=1), Return(value=Name(id='_release', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load())), FunctionDef(name='pre', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='The pre-release segment of the version.\n\n        >>> print(Version("1.2.3").pre)\n        None\n        >>> Version("1.2.3a1").pre\n        (\'a\', 1)\n        >>> Version("1.2.3b1").pre\n        (\'b\', 1)\n        >>> Version("1.2.3rc1").pre\n        (\'rc\', 1)\n        ')), AnnAssign(target=Name(id='_pre', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_version', ctx=Load()), attr='pre', ctx=Load()), simple=1), Return(value=Name(id='_pre', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='post', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='The post-release number of the version.\n\n        >>> print(Version("1.2.3").post)\n        None\n        >>> Version("1.2.3.post1").post\n        1\n        ')), Return(value=IfExp(test=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_version', ctx=Load()), attr='post', ctx=Load()), body=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_version', ctx=Load()), attr='post', ctx=Load()), slice=Constant(value=1), ctx=Load()), orelse=Constant(value=None)))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), FunctionDef(name='dev', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='The development number of the version.\n\n        >>> print(Version("1.2.3").dev)\n        None\n        >>> Version("1.2.3.dev1").dev\n        1\n        ')), Return(value=IfExp(test=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_version', ctx=Load()), attr='dev', ctx=Load()), body=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_version', ctx=Load()), attr='dev', ctx=Load()), slice=Constant(value=1), ctx=Load()), orelse=Constant(value=None)))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), FunctionDef(name='local', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='The local version segment of the version.\n\n        >>> print(Version("1.2.3").local)\n        None\n        >>> Version("1.2.3+abc").local\n        \'abc\'\n        ')), If(test=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_version', ctx=Load()), attr='local', ctx=Load()), body=[Return(value=Call(func=Attribute(value=Constant(value='.'), attr='join', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='str', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_version', ctx=Load()), attr='local', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], orelse=[Return(value=Constant(value=None))])], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='public', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='The public portion of the version.\n\n        >>> Version("1.2.3").public\n        \'1.2.3\'\n        >>> Version("1.2.3+abc").public\n        \'1.2.3\'\n        >>> Version("1.2.3+abc.dev1").public\n        \'1.2.3\'\n        ')), Return(value=Subscript(value=Call(func=Attribute(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='split', ctx=Load()), args=[Constant(value='+'), Constant(value=1)], keywords=[]), slice=Constant(value=0), ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='base_version', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='The "base version" of the version.\n\n        >>> Version("1.2.3").base_version\n        \'1.2.3\'\n        >>> Version("1.2.3+abc").base_version\n        \'1.2.3\'\n        >>> Version("1!1.2.3+abc.dev1").base_version\n        \'1!1.2.3\'\n\n        The "base version" is the public version of the project without any pre or post\n        release markers.\n        ')), Assign(targets=[Name(id='parts', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='epoch', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='parts', ctx=Load()), attr='append', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='epoch', ctx=Load()), conversion=-1), Constant(value='!')])], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='parts', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='.'), attr='join', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='str', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='release', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], keywords=[])), Return(value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Name(id='parts', ctx=Load())], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='is_prerelease', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Whether this version is a pre-release.\n\n        >>> Version("1.2.3").is_prerelease\n        False\n        >>> Version("1.2.3a1").is_prerelease\n        True\n        >>> Version("1.2.3b1").is_prerelease\n        True\n        >>> Version("1.2.3rc1").is_prerelease\n        True\n        >>> Version("1.2.3dev1").is_prerelease\n        True\n        ')), Return(value=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='dev', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='pre', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='is_postrelease', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Whether this version is a post-release.\n\n        >>> Version("1.2.3").is_postrelease\n        False\n        >>> Version("1.2.3.post1").is_postrelease\n        True\n        ')), Return(value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='post', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='is_devrelease', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Whether this version is a development release.\n\n        >>> Version("1.2.3").is_devrelease\n        False\n        >>> Version("1.2.3.dev1").is_devrelease\n        True\n        ')), Return(value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='dev', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='major', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='The first item of :attr:`release` or ``0`` if unavailable.\n\n        >>> Version("1.2.3").major\n        1\n        ')), Return(value=IfExp(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='release', ctx=Load())], keywords=[]), ops=[GtE()], comparators=[Constant(value=1)]), body=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='release', ctx=Load()), slice=Constant(value=0), ctx=Load()), orelse=Constant(value=0)))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load())), FunctionDef(name='minor', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='The second item of :attr:`release` or ``0`` if unavailable.\n\n        >>> Version("1.2.3").minor\n        2\n        >>> Version("1").minor\n        0\n        ')), Return(value=IfExp(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='release', ctx=Load())], keywords=[]), ops=[GtE()], comparators=[Constant(value=2)]), body=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='release', ctx=Load()), slice=Constant(value=1), ctx=Load()), orelse=Constant(value=0)))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load())), FunctionDef(name='micro', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='The third item of :attr:`release` or ``0`` if unavailable.\n\n        >>> Version("1.2.3").micro\n        3\n        >>> Version("1").micro\n        0\n        ')), Return(value=IfExp(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='release', ctx=Load())], keywords=[]), ops=[GtE()], comparators=[Constant(value=3)]), body=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='release', ctx=Load()), slice=Constant(value=2), ctx=Load()), orelse=Constant(value=0)))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load()))], decorator_list=[]), FunctionDef(name='_parse_letter_version', args=arguments(posonlyargs=[], args=[arg(arg='letter', annotation=Name(id='str', ctx=Load())), arg(arg='number', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='bytes', ctx=Load()), Name(id='SupportsInt', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Name(id='letter', ctx=Load()), body=[If(test=Compare(left=Name(id='number', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='number', ctx=Store())], value=Constant(value=0))], orelse=[]), Assign(targets=[Name(id='letter', ctx=Store())], value=Call(func=Attribute(value=Name(id='letter', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='letter', ctx=Load()), ops=[Eq()], comparators=[Constant(value='alpha')]), body=[Assign(targets=[Name(id='letter', ctx=Store())], value=Constant(value='a'))], orelse=[If(test=Compare(left=Name(id='letter', ctx=Load()), ops=[Eq()], comparators=[Constant(value='beta')]), body=[Assign(targets=[Name(id='letter', ctx=Store())], value=Constant(value='b'))], orelse=[If(test=Compare(left=Name(id='letter', ctx=Load()), ops=[In()], comparators=[List(elts=[Constant(value='c'), Constant(value='pre'), Constant(value='preview')], ctx=Load())]), body=[Assign(targets=[Name(id='letter', ctx=Store())], value=Constant(value='rc'))], orelse=[If(test=Compare(left=Name(id='letter', ctx=Load()), ops=[In()], comparators=[List(elts=[Constant(value='rev'), Constant(value='r')], ctx=Load())]), body=[Assign(targets=[Name(id='letter', ctx=Store())], value=Constant(value='post'))], orelse=[])])])]), Return(value=Tuple(elts=[Name(id='letter', ctx=Load()), Call(func=Name(id='int', ctx=Load()), args=[Name(id='number', ctx=Load())], keywords=[])], ctx=Load()))], orelse=[]), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Name(id='letter', ctx=Load())), Name(id='number', ctx=Load())]), body=[Assign(targets=[Name(id='letter', ctx=Store())], value=Constant(value='post')), Return(value=Tuple(elts=[Name(id='letter', ctx=Load()), Call(func=Name(id='int', ctx=Load()), args=[Name(id='number', ctx=Load())], keywords=[])], ctx=Load()))], orelse=[]), Return(value=Constant(value=None))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), Assign(targets=[Name(id='_local_version_separators', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='[\\._-]')], keywords=[])), FunctionDef(name='_parse_local_version', args=arguments(posonlyargs=[], args=[arg(arg='local', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Takes a string like abc.1.twelve and turns it into ("abc", 1, "twelve").\n    ')), If(test=Compare(left=Name(id='local', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=IfExp(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='part', ctx=Load()), attr='isdigit', ctx=Load()), args=[], keywords=[])), body=Call(func=Attribute(value=Name(id='part', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), orelse=Call(func=Name(id='int', ctx=Load()), args=[Name(id='part', ctx=Load())], keywords=[])), generators=[comprehension(target=Name(id='part', ctx=Store()), iter=Call(func=Attribute(value=Name(id='_local_version_separators', ctx=Load()), attr='split', ctx=Load()), args=[Name(id='local', ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], orelse=[]), Return(value=Constant(value=None))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='LocalType', ctx=Load()), ctx=Load())), FunctionDef(name='_cmpkey', args=arguments(posonlyargs=[], args=[arg(arg='epoch', annotation=Name(id='int', ctx=Load())), arg(arg='release', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load())), arg(arg='pre', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='post', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='dev', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='local', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Name(id='SubLocalType', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='_release', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[Call(func=Name(id='reversed', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='itertools', ctx=Load()), attr='dropwhile', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Name(id='x', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])), Call(func=Name(id='reversed', ctx=Load()), args=[Name(id='release', ctx=Load())], keywords=[])], keywords=[])], keywords=[])], keywords=[])], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='pre', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Name(id='post', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Name(id='dev', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[AnnAssign(target=Name(id='_pre', ctx=Store()), annotation=Name(id='PrePostDevType', ctx=Load()), value=Name(id='NegativeInfinity', ctx=Load()), simple=1)], orelse=[If(test=Compare(left=Name(id='pre', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='_pre', ctx=Store())], value=Name(id='Infinity', ctx=Load()))], orelse=[Assign(targets=[Name(id='_pre', ctx=Store())], value=Name(id='pre', ctx=Load()))])]), If(test=Compare(left=Name(id='post', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[AnnAssign(target=Name(id='_post', ctx=Store()), annotation=Name(id='PrePostDevType', ctx=Load()), value=Name(id='NegativeInfinity', ctx=Load()), simple=1)], orelse=[Assign(targets=[Name(id='_post', ctx=Store())], value=Name(id='post', ctx=Load()))]), If(test=Compare(left=Name(id='dev', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[AnnAssign(target=Name(id='_dev', ctx=Store()), annotation=Name(id='PrePostDevType', ctx=Load()), value=Name(id='Infinity', ctx=Load()), simple=1)], orelse=[Assign(targets=[Name(id='_dev', ctx=Store())], value=Name(id='dev', ctx=Load()))]), If(test=Compare(left=Name(id='local', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[AnnAssign(target=Name(id='_local', ctx=Store()), annotation=Name(id='LocalType', ctx=Load()), value=Name(id='NegativeInfinity', ctx=Load()), simple=1)], orelse=[Assign(targets=[Name(id='_local', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='i', ctx=Load()), Name(id='int', ctx=Load())], keywords=[]), body=Tuple(elts=[Name(id='i', ctx=Load()), Constant(value='')], ctx=Load()), orelse=Tuple(elts=[Name(id='NegativeInfinity', ctx=Load()), Name(id='i', ctx=Load())], ctx=Load())), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Name(id='local', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))]), Return(value=Tuple(elts=[Name(id='epoch', ctx=Load()), Name(id='_release', ctx=Load()), Name(id='_pre', ctx=Load()), Name(id='_post', ctx=Load()), Name(id='_dev', ctx=Load()), Name(id='_local', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Name(id='CmpKey', ctx=Load()))], type_ignores=[])