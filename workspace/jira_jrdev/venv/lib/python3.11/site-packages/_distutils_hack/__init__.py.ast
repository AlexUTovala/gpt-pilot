Module(body=[Import(names=[alias(name='sys')]), Import(names=[alias(name='os')]), Assign(targets=[Name(id='is_pypy', ctx=Store())], value=Compare(left=Constant(value='__pypy__'), ops=[In()], comparators=[Attribute(value=Name(id='sys', ctx=Load()), attr='builtin_module_names', ctx=Load())])), FunctionDef(name='warn_distutils_present', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Constant(value='distutils'), ops=[NotIn()], comparators=[Attribute(value=Name(id='sys', ctx=Load()), attr='modules', ctx=Load())]), body=[Return()], orelse=[]), If(test=BoolOp(op=And(), values=[Name(id='is_pypy', ctx=Load()), Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), ops=[Lt()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=7)], ctx=Load())])]), body=[Return()], orelse=[]), Import(names=[alias(name='warnings')]), Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value='Distutils was imported before Setuptools, but importing Setuptools also replaces the `distutils` module in `sys.modules`. This may lead to undesirable behaviors or errors. To avoid these issues, avoid using distutils directly, ensure that setuptools is installed in the traditional way (e.g. not an editable install), and/or make sure that setuptools is always imported before distutils.')], keywords=[]))], decorator_list=[]), FunctionDef(name='clear_distutils', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Constant(value='distutils'), ops=[NotIn()], comparators=[Attribute(value=Name(id='sys', ctx=Load()), attr='modules', ctx=Load())]), body=[Return()], orelse=[]), Import(names=[alias(name='warnings')]), Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value='Setuptools is replacing distutils.')], keywords=[])), Assign(targets=[Name(id='mods', ctx=Store())], value=ListComp(elt=Name(id='name', ctx=Load()), generators=[comprehension(target=Name(id='name', ctx=Store()), iter=Attribute(value=Name(id='sys', ctx=Load()), attr='modules', ctx=Load()), ifs=[BoolOp(op=Or(), values=[Compare(left=Name(id='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='distutils')]), Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='distutils.')], keywords=[])])], is_async=0)])), For(target=Name(id='name', ctx=Store()), iter=Name(id='mods', ctx=Load()), body=[Delete(targets=[Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='modules', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Del())])], orelse=[])], decorator_list=[]), FunctionDef(name='enabled', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Allow selection of distutils by environment variable.\n    ')), Assign(targets=[Name(id='which', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='SETUPTOOLS_USE_DISTUTILS'), Constant(value='local')], keywords=[])), Return(value=Compare(left=Name(id='which', ctx=Load()), ops=[Eq()], comparators=[Constant(value='local')]))], decorator_list=[]), FunctionDef(name='ensure_local_distutils', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Import(names=[alias(name='importlib')]), Expr(value=Call(func=Name(id='clear_distutils', ctx=Load()), args=[], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='shim', ctx=Load()), args=[], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='importlib', ctx=Load()), attr='import_module', ctx=Load()), args=[Constant(value='distutils')], keywords=[]))]), Assign(targets=[Name(id='core', ctx=Store())], value=Call(func=Attribute(value=Name(id='importlib', ctx=Load()), attr='import_module', ctx=Load()), args=[Constant(value='distutils.core')], keywords=[])), Assert(test=Compare(left=Constant(value='_distutils'), ops=[In()], comparators=[Attribute(value=Name(id='core', ctx=Load()), attr='__file__', ctx=Load())]), msg=Attribute(value=Name(id='core', ctx=Load()), attr='__file__', ctx=Load())), Assert(test=Compare(left=Constant(value='setuptools._distutils.log'), ops=[NotIn()], comparators=[Attribute(value=Name(id='sys', ctx=Load()), attr='modules', ctx=Load())]))], decorator_list=[]), FunctionDef(name='do_override', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Ensure that the local copy of distutils is preferred over stdlib.\n\n    See https://github.com/pypa/setuptools/issues/417#issuecomment-392298401\n    for more motivation.\n    ')), If(test=Call(func=Name(id='enabled', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Name(id='warn_distutils_present', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Name(id='ensure_local_distutils', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[]), ClassDef(name='_TrivialRe', bases=[], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='patterns'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_patterns', ctx=Store())], value=Name(id='patterns', ctx=Load()))], decorator_list=[]), FunctionDef(name='match', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='string')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='all', ctx=Load()), args=[GeneratorExp(elt=Compare(left=Name(id='pat', ctx=Load()), ops=[In()], comparators=[Name(id='string', ctx=Load())]), generators=[comprehension(target=Name(id='pat', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_patterns', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='DistutilsMetaFinder', bases=[], keywords=[], body=[FunctionDef(name='find_spec', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='fullname'), arg(arg='path'), arg(arg='target')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='fullname', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='test.')], keywords=[]))]), body=[Return()], orelse=[]), Assign(targets=[Name(id='method_name', ctx=Store())], value=Call(func=Attribute(value=Constant(value='spec_for_{fullname}'), attr='format', ctx=Load()), args=[], keywords=[keyword(value=Call(func=Name(id='locals', ctx=Load()), args=[], keywords=[]))])), Assign(targets=[Name(id='method', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='method_name', ctx=Load()), Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Constant(value=None))], keywords=[])), Return(value=Call(func=Name(id='method', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='spec_for_distutils', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='is_cpython', ctx=Load()), args=[], keywords=[]), body=[Return()], orelse=[]), Import(names=[alias(name='importlib')]), Import(names=[alias(name='importlib.abc')]), Import(names=[alias(name='importlib.util')]), Try(body=[Assign(targets=[Name(id='mod', ctx=Store())], value=Call(func=Attribute(value=Name(id='importlib', ctx=Load()), attr='import_module', ctx=Load()), args=[Constant(value='setuptools._distutils')], keywords=[]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Return()])], orelse=[], finalbody=[]), ClassDef(name='DistutilsLoader', bases=[Attribute(value=Attribute(value=Name(id='importlib', ctx=Load()), attr='abc', ctx=Load()), attr='Loader', ctx=Load())], keywords=[], body=[FunctionDef(name='create_module', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='spec')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='mod', ctx=Load()), attr='__name__', ctx=Store())], value=Constant(value='distutils')), Return(value=Name(id='mod', ctx=Load()))], decorator_list=[]), FunctionDef(name='exec_module', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='module')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[])], decorator_list=[]), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='importlib', ctx=Load()), attr='util', ctx=Load()), attr='spec_from_loader', ctx=Load()), args=[Constant(value='distutils'), Call(func=Name(id='DistutilsLoader', ctx=Load()), args=[], keywords=[])], keywords=[keyword(arg='origin', value=Attribute(value=Name(id='mod', ctx=Load()), attr='__file__', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='is_cpython', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Suppress supplying distutils for CPython (build and tests).\n        Ref #2965 and #3007.\n        ')), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isfile', ctx=Load()), args=[Constant(value='pybuilddir.txt')], keywords=[]))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='spec_for_pip', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Ensure stdlib distutils when running under pip.\n        See pypa/pip#8761 for rationale.\n        ')), If(test=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), ops=[GtE()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=12)], ctx=Load())]), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='pip_imported_during_build', ctx=Load()), args=[], keywords=[])]), body=[Return()], orelse=[]), Expr(value=Call(func=Name(id='clear_distutils', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='spec_for_distutils', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Constant(value=None)))], decorator_list=[]), FunctionDef(name='pip_imported_during_build', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Detect if pip is being imported in a build script. Ref #2355.\n        ')), Import(names=[alias(name='traceback')]), Return(value=Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='frame_file_is_setup', ctx=Load()), args=[Name(id='frame', ctx=Load())], keywords=[]), generators=[comprehension(target=Tuple(elts=[Name(id='frame', ctx=Store()), Name(id='line', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='traceback', ctx=Load()), attr='walk_stack', ctx=Load()), args=[Constant(value=None)], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='frame_file_is_setup', args=arguments(posonlyargs=[], args=[arg(arg='frame')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return True if the indicated frame suggests a setup.py file.\n        ')), Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='frame', ctx=Load()), attr='f_globals', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='__file__'), Constant(value='')], keywords=[]), attr='endswith', ctx=Load()), args=[Constant(value='setup.py')], keywords=[]))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='spec_for_sensitive_tests', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Ensure stdlib distutils when running select tests under CPython.\n\n        python/cpython#91169\n        ')), Expr(value=Call(func=Name(id='clear_distutils', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='spec_for_distutils', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Constant(value=None)))], decorator_list=[]), Assign(targets=[Name(id='sensitive_tests', ctx=Store())], value=IfExp(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), ops=[Lt()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=10)], ctx=Load())]), body=List(elts=[Constant(value='test.test_distutils'), Constant(value='test.test_peg_generator'), Constant(value='test.test_importlib')], ctx=Load()), orelse=List(elts=[Constant(value='test.test_distutils')], ctx=Load())))], decorator_list=[]), For(target=Name(id='name', ctx=Store()), iter=Attribute(value=Name(id='DistutilsMetaFinder', ctx=Load()), attr='sensitive_tests', ctx=Load()), body=[Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='DistutilsMetaFinder', ctx=Load()), JoinedStr(values=[Constant(value='spec_for_'), FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1)]), Attribute(value=Name(id='DistutilsMetaFinder', ctx=Load()), attr='spec_for_sensitive_tests', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='DISTUTILS_FINDER', ctx=Store())], value=Call(func=Name(id='DistutilsMetaFinder', ctx=Load()), args=[], keywords=[])), FunctionDef(name='add_shim', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=BoolOp(op=Or(), values=[Compare(left=Name(id='DISTUTILS_FINDER', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='sys', ctx=Load()), attr='meta_path', ctx=Load())]), Call(func=Name(id='insert_shim', ctx=Load()), args=[], keywords=[])]))], decorator_list=[]), ClassDef(name='shim', bases=[], keywords=[], body=[FunctionDef(name='__enter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='insert_shim', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='__exit__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='exc'), arg(arg='value'), arg(arg='tb')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='_remove_shim', ctx=Load()), args=[], keywords=[]))], decorator_list=[])], decorator_list=[]), FunctionDef(name='insert_shim', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='meta_path', ctx=Load()), attr='insert', ctx=Load()), args=[Constant(value=0), Name(id='DISTUTILS_FINDER', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_remove_shim', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='meta_path', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='DISTUTILS_FINDER', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], decorator_list=[]), If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), ops=[Lt()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=12)], ctx=Load())]), body=[Assign(targets=[Name(id='remove_shim', ctx=Store())], value=Name(id='_remove_shim', ctx=Load()))], orelse=[])], type_ignores=[])