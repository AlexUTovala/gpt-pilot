Module(body=[Import(names=[alias(name='os')]), ImportFrom(module='distutils', names=[alias(name='log')], level=0), Import(names=[alias(name='itertools')]), Assign(targets=[Name(id='flatten', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='itertools', ctx=Load()), attr='chain', ctx=Load()), attr='from_iterable', ctx=Load())), ClassDef(name='Installer', bases=[], keywords=[], body=[Assign(targets=[Name(id='nspkg_ext', ctx=Store())], value=Constant(value='-nspkg.pth')), FunctionDef(name='install_namespaces', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='nsp', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_all_ns_packages', ctx=Load()), args=[], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='nsp', ctx=Load())), body=[Return()], orelse=[]), Assign(targets=[Name(id='filename', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_nspkg_file', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='outputs', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Installing %s'), Name(id='filename', ctx=Load())], keywords=[])), Assign(targets=[Name(id='lines', ctx=Store())], value=Call(func=Name(id='map', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_gen_nspkg_line', ctx=Load()), Name(id='nsp', ctx=Load())], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='dry_run', ctx=Load()), body=[Expr(value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='lines', ctx=Load())], keywords=[])), Return()], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='filename', ctx=Load()), Constant(value='wt')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='writelines', ctx=Load()), args=[Name(id='lines', ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='uninstall_namespaces', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='filename', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_nspkg_file', ctx=Load()), args=[], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[])), body=[Return()], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Removing %s'), Name(id='filename', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_get_nspkg_file', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='filename', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='splitext', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_target', ctx=Load()), args=[], keywords=[])], keywords=[])), Return(value=BinOp(left=Name(id='filename', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='nspkg_ext', ctx=Load())))], decorator_list=[]), FunctionDef(name='_get_target', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='target', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='_nspkg_tmpl', ctx=Store())], value=Tuple(elts=[Constant(value='import sys, types, os'), Constant(value='has_mfs = sys.version_info > (3, 5)'), Constant(value='p = os.path.join(%(root)s, *%(pth)r)'), Constant(value="importlib = has_mfs and __import__('importlib.util')"), Constant(value="has_mfs and __import__('importlib.machinery')"), Constant(value='m = has_mfs and sys.modules.setdefault(%(pkg)r, importlib.util.module_from_spec(importlib.machinery.PathFinder.find_spec(%(pkg)r, [os.path.dirname(p)])))'), Constant(value='m = m or sys.modules.setdefault(%(pkg)r, types.ModuleType(%(pkg)r))'), Constant(value="mp = (m or []) and m.__dict__.setdefault('__path__',[])"), Constant(value='(p not in mp) and mp.append(p)')], ctx=Load())), Expr(value=Constant(value='lines for the namespace installer')), Assign(targets=[Name(id='_nspkg_tmpl_multi', ctx=Store())], value=Tuple(elts=[Constant(value='m and setattr(sys.modules[%(parent)r], %(child)r, m)')], ctx=Load())), Expr(value=Constant(value='additional line(s) when a parent package is indicated')), FunctionDef(name='_get_root', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value="sys._getframe(1).f_locals['sitedir']"))], decorator_list=[]), FunctionDef(name='_gen_nspkg_line', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='pkg')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='pth', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[Call(func=Attribute(value=Name(id='pkg', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[])], keywords=[])), Assign(targets=[Name(id='root', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_root', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='tmpl_lines', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_nspkg_tmpl', ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='parent', ctx=Store()), Name(id='sep', ctx=Store()), Name(id='child', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='pkg', ctx=Load()), attr='rpartition', ctx=Load()), args=[Constant(value='.')], keywords=[])), If(test=Name(id='parent', ctx=Load()), body=[AugAssign(target=Name(id='tmpl_lines', ctx=Store()), op=Add(), value=Attribute(value=Name(id='self', ctx=Load()), attr='_nspkg_tmpl_multi', ctx=Load()))], orelse=[]), Return(value=BinOp(left=BinOp(left=Call(func=Attribute(value=Constant(value=';'), attr='join', ctx=Load()), args=[Name(id='tmpl_lines', ctx=Load())], keywords=[]), op=Mod(), right=Call(func=Name(id='locals', ctx=Load()), args=[], keywords=[])), op=Add(), right=Constant(value='\n')))], decorator_list=[]), FunctionDef(name='_get_all_ns_packages', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return sorted list of all package namespaces')), Assign(targets=[Name(id='pkgs', ctx=Store())], value=BoolOp(op=Or(), values=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='namespace_packages', ctx=Load()), List(elts=[], ctx=Load())])), Return(value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Call(func=Name(id='flatten', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_pkg_names', ctx=Load()), Name(id='pkgs', ctx=Load())], keywords=[])], keywords=[])], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='_pkg_names', args=arguments(posonlyargs=[], args=[arg(arg='pkg')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Given a namespace package, yield the components of that\n        package.\n\n        >>> names = Installer._pkg_names('a.b.c')\n        >>> set(names) == set(['a', 'a.b', 'a.b.c'])\n        True\n        ")), Assign(targets=[Name(id='parts', ctx=Store())], value=Call(func=Attribute(value=Name(id='pkg', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[])), While(test=Name(id='parts', ctx=Load()), body=[Expr(value=Yield(value=Call(func=Attribute(value=Constant(value='.'), attr='join', ctx=Load()), args=[Name(id='parts', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='parts', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[Name(id='staticmethod', ctx=Load())])], decorator_list=[]), ClassDef(name='DevelopInstaller', bases=[Name(id='Installer', ctx=Load())], keywords=[], body=[FunctionDef(name='_get_root', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='repr', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='egg_path', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='_get_target', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='egg_link', ctx=Load()))], decorator_list=[])], decorator_list=[])], type_ignores=[])