Module(body=[ImportFrom(module='functools', names=[alias(name='lru_cache')], level=0), ImportFrom(module='typing', names=[alias(name='Callable'), alias(name='Iterable'), alias(name='Iterator'), alias(name='TypeVar'), alias(name='Union'), alias(name='overload')], level=0), Import(names=[alias(name='setuptools.extern.jaraco.text', asname='text')]), ImportFrom(module='setuptools.extern.packaging.requirements', names=[alias(name='Requirement')], level=0), Assign(targets=[Name(id='_T', ctx=Store())], value=Call(func=Name(id='TypeVar', ctx=Load()), args=[Constant(value='_T')], keywords=[])), Assign(targets=[Name(id='_StrOrIter', ctx=Store())], value=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), AnnAssign(target=Name(id='parse_req', ctx=Store()), annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='str', ctx=Load())], ctx=Load()), Name(id='Requirement', ctx=Load())], ctx=Load()), ctx=Load()), value=Call(func=Call(func=Name(id='lru_cache', ctx=Load()), args=[], keywords=[]), args=[Name(id='Requirement', ctx=Load())], keywords=[]), simple=1), FunctionDef(name='parse_strings', args=arguments(posonlyargs=[], args=[arg(arg='strs', annotation=Name(id='_StrOrIter', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Yield requirement strings for each specification in `strs`.\n\n    `strs` must be a string, or a (possibly-nested) iterable thereof.\n    ')), Return(value=Call(func=Attribute(value=Name(id='text', ctx=Load()), attr='join_continuation', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Attribute(value=Name(id='text', ctx=Load()), attr='drop_comment', ctx=Load()), Call(func=Attribute(value=Name(id='text', ctx=Load()), attr='yield_lines', ctx=Load()), args=[Name(id='strs', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='parse', args=arguments(posonlyargs=[], args=[arg(arg='strs', annotation=Name(id='_StrOrIter', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=Ellipsis))], decorator_list=[Name(id='overload', ctx=Load())], returns=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Name(id='Requirement', ctx=Load()), ctx=Load())), FunctionDef(name='parse', args=arguments(posonlyargs=[], args=[arg(arg='strs', annotation=Name(id='_StrOrIter', ctx=Load())), arg(arg='parser', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='str', ctx=Load())], ctx=Load()), Name(id='_T', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=Ellipsis))], decorator_list=[Name(id='overload', ctx=Load())], returns=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Name(id='_T', ctx=Load()), ctx=Load())), FunctionDef(name='parse', args=arguments(posonlyargs=[], args=[arg(arg='strs'), arg(arg='parser')], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='parse_req', ctx=Load())]), body=[Expr(value=Constant(value='\n    Replacement for ``pkg_resources.parse_requirements`` that uses ``packaging``.\n    ')), Return(value=Call(func=Name(id='map', ctx=Load()), args=[Name(id='parser', ctx=Load()), Call(func=Name(id='parse_strings', ctx=Load()), args=[Name(id='strs', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[])], type_ignores=[])