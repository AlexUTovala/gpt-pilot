Module(body=[Import(names=[alias(name='collections')]), Import(names=[alias(name='functools')]), Import(names=[alias(name='itertools')]), Import(names=[alias(name='operator')]), ClassDef(name='DictStack', bases=[Name(id='list', ctx=Load()), Attribute(value=Attribute(value=Name(id='collections', ctx=Load()), attr='abc', ctx=Load()), attr='Mapping', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="\n    A stack of dictionaries that behaves as a view on those dictionaries,\n    giving preference to the last.\n\n    >>> stack = DictStack([dict(a=1, c=2), dict(b=2, a=2)])\n    >>> stack['a']\n    2\n    >>> stack['b']\n    2\n    >>> stack['c']\n    2\n    >>> len(stack)\n    3\n    >>> stack.push(dict(a=3))\n    >>> stack['a']\n    3\n    >>> set(stack.keys()) == set(['a', 'b', 'c'])\n    True\n    >>> set(stack.items()) == set([('a', 3), ('b', 2), ('c', 2)])\n    True\n    >>> dict(**stack) == dict(stack) == dict(a=3, c=2, b=2)\n    True\n    >>> d = stack.pop()\n    >>> stack['a']\n    2\n    >>> d = stack.pop()\n    >>> stack['a']\n    1\n    >>> stack.get('b', None)\n    >>> 'c' in stack\n    True\n    ")), FunctionDef(name='__iter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='dicts', ctx=Store())], value=Call(func=Attribute(value=Name(id='list', ctx=Load()), attr='__iter__', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='iter', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='itertools', ctx=Load()), attr='chain', ctx=Load()), attr='from_iterable', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='c', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[]), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Name(id='dicts', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='__getitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='scope', ctx=Store()), iter=Call(func=Name(id='reversed', ctx=Load()), args=[Call(func=Name(id='tuple', ctx=Load()), args=[Call(func=Attribute(value=Name(id='list', ctx=Load()), attr='__iter__', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='key', ctx=Load()), ops=[In()], comparators=[Name(id='scope', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='scope', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Raise(exc=Call(func=Name(id='KeyError', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[]))], decorator_list=[]), Assign(targets=[Name(id='push', ctx=Store())], value=Attribute(value=Name(id='list', ctx=Load()), attr='append', ctx=Load())), FunctionDef(name='__contains__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='collections', ctx=Load()), attr='abc', ctx=Load()), attr='Mapping', ctx=Load()), attr='__contains__', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='other', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='__len__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='iter', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='RangeMap', bases=[Name(id='dict', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="\n    A dictionary-like object that uses the keys as bounds for a range.\n    Inclusion of the value for that range is determined by the\n    key_match_comparator, which defaults to less-than-or-equal.\n    A value is returned for a key if it is the first key that matches in\n    the sorted list of keys.\n\n    One may supply keyword parameters to be passed to the sort function used\n    to sort keys (i.e. key, reverse) as sort_params.\n\n    Let's create a map that maps 1-3 -> 'a', 4-6 -> 'b'\n\n    >>> r = RangeMap({3: 'a', 6: 'b'})  # boy, that was easy\n    >>> r[1], r[2], r[3], r[4], r[5], r[6]\n    ('a', 'a', 'a', 'b', 'b', 'b')\n\n    Even float values should work so long as the comparison operator\n    supports it.\n\n    >>> r[4.5]\n    'b'\n\n    But you'll notice that the way rangemap is defined, it must be open-ended\n    on one side.\n\n    >>> r[0]\n    'a'\n    >>> r[-1]\n    'a'\n\n    One can close the open-end of the RangeMap by using undefined_value\n\n    >>> r = RangeMap({0: RangeMap.undefined_value, 3: 'a', 6: 'b'})\n    >>> r[0]\n    Traceback (most recent call last):\n    ...\n    KeyError: 0\n\n    One can get the first or last elements in the range by using RangeMap.Item\n\n    >>> last_item = RangeMap.Item(-1)\n    >>> r[last_item]\n    'b'\n\n    .last_item is a shortcut for Item(-1)\n\n    >>> r[RangeMap.last_item]\n    'b'\n\n    Sometimes it's useful to find the bounds for a RangeMap\n\n    >>> r.bounds()\n    (0, 6)\n\n    RangeMap supports .get(key, default)\n\n    >>> r.get(0, 'not found')\n    'not found'\n\n    >>> r.get(7, 'not found')\n    'not found'\n\n    One often wishes to define the ranges by their left-most values,\n    which requires use of sort params and a key_match_comparator.\n\n    >>> r = RangeMap({1: 'a', 4: 'b'},\n    ...     sort_params=dict(reverse=True),\n    ...     key_match_comparator=operator.ge)\n    >>> r[1], r[2], r[3], r[4], r[5], r[6]\n    ('a', 'a', 'a', 'b', 'b', 'b')\n\n    That wasn't nearly as easy as before, so an alternate constructor\n    is provided:\n\n    >>> r = RangeMap.left({1: 'a', 4: 'b', 7: RangeMap.undefined_value})\n    >>> r[1], r[2], r[3], r[4], r[5], r[6]\n    ('a', 'a', 'a', 'b', 'b', 'b')\n\n    ")), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='source'), arg(arg='sort_params'), arg(arg='key_match_comparator')], kwonlyargs=[], kw_defaults=[], defaults=[Dict(keys=[], values=[]), Attribute(value=Name(id='operator', ctx=Load()), attr='le', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='dict', ctx=Load()), attr='__init__', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='source', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='sort_params', ctx=Store())], value=Name(id='sort_params', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='match', ctx=Store())], value=Name(id='key_match_comparator', ctx=Load()))], decorator_list=[]), FunctionDef(name='left', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='source')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='cls', ctx=Load()), args=[Name(id='source', ctx=Load())], keywords=[keyword(arg='sort_params', value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='reverse', value=Constant(value=True))])), keyword(arg='key_match_comparator', value=Attribute(value=Name(id='operator', ctx=Load()), attr='ge', ctx=Load()))]))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='__getitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='item')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='sorted_keys', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[keyword(value=Attribute(value=Name(id='self', ctx=Load()), attr='sort_params', ctx=Load()))])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='item', ctx=Load()), Attribute(value=Name(id='RangeMap', ctx=Load()), attr='Item', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='__getitem__', ctx=Load()), args=[Subscript(value=Name(id='sorted_keys', ctx=Load()), slice=Name(id='item', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='key', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_find_first_match_', ctx=Load()), args=[Name(id='sorted_keys', ctx=Load()), Name(id='item', ctx=Load())], keywords=[])), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='dict', ctx=Load()), attr='__getitem__', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='key', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='result', ctx=Load()), ops=[Is()], comparators=[Attribute(value=Name(id='RangeMap', ctx=Load()), attr='undefined_value', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='KeyError', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[]))], orelse=[])]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[]), FunctionDef(name='get', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key'), arg(arg='default')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='\n        Return the value for key if key is in the dictionary, else default.\n        If default is not given, it defaults to None, so that this method\n        never raises a KeyError.\n        ')), Try(body=[Return(value=Subscript(value=Name(id='self', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Return(value=Name(id='default', ctx=Load()))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='_find_first_match_', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='keys'), arg(arg='item')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='is_match', ctx=Store())], value=Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='partial', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='match', ctx=Load()), Name(id='item', ctx=Load())], keywords=[])), Assign(targets=[Name(id='matches', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='filter', ctx=Load()), args=[Name(id='is_match', ctx=Load()), Name(id='keys', ctx=Load())], keywords=[])], keywords=[])), If(test=Name(id='matches', ctx=Load()), body=[Return(value=Subscript(value=Name(id='matches', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Raise(exc=Call(func=Name(id='KeyError', ctx=Load()), args=[Name(id='item', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='bounds', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='sorted_keys', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[keyword(value=Attribute(value=Name(id='self', ctx=Load()), attr='sort_params', ctx=Load()))])), Return(value=Tuple(elts=[Subscript(value=Name(id='sorted_keys', ctx=Load()), slice=Attribute(value=Name(id='RangeMap', ctx=Load()), attr='first_item', ctx=Load()), ctx=Load()), Subscript(value=Name(id='sorted_keys', ctx=Load()), slice=Attribute(value=Name(id='RangeMap', ctx=Load()), attr='last_item', ctx=Load()), ctx=Load())], ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='undefined_value', ctx=Store())], value=Call(func=Call(func=Name(id='type', ctx=Load()), args=[Constant(value='RangeValueUndefined'), Tuple(elts=[], ctx=Load()), Dict(keys=[], values=[])], keywords=[]), args=[], keywords=[])), ClassDef(name='Item', bases=[Name(id='int', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='RangeMap Item'))], decorator_list=[]), Assign(targets=[Name(id='first_item', ctx=Store())], value=Call(func=Name(id='Item', ctx=Load()), args=[Constant(value=0)], keywords=[])), Assign(targets=[Name(id='last_item', ctx=Store())], value=Call(func=Name(id='Item', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]))], decorator_list=[])], type_ignores=[])