Module(body=[Expr(value=Constant(value='text_file\n\nprovides the TextFile class, which gives an interface to text files\nthat (optionally) takes care of stripping comments, ignoring blank\nlines, and joining lines with backslashes.')), Import(names=[alias(name='sys')]), ClassDef(name='TextFile', bases=[], keywords=[], body=[Expr(value=Constant(value='Provides a file-like object that takes care of all the things you\n    commonly want to do when processing a text file that has some\n    line-by-line syntax: strip comments (as long as "#" is your\n    comment character), skip blank lines, join adjacent lines by\n    escaping the newline (ie. backslash at end of line), strip\n    leading and/or trailing whitespace.  All of these are optional\n    and independently controllable.\n\n    Provides a \'warn()\' method so you can generate warning messages that\n    report physical line number, even if the logical line in question\n    spans multiple physical lines.  Also provides \'unreadline()\' for\n    implementing line-at-a-time lookahead.\n\n    Constructor is called as:\n\n        TextFile (filename=None, file=None, **options)\n\n    It bombs (RuntimeError) if both \'filename\' and \'file\' are None;\n    \'filename\' should be a string, and \'file\' a file object (or\n    something that provides \'readline()\' and \'close()\' methods).  It is\n    recommended that you supply at least \'filename\', so that TextFile\n    can include it in warning messages.  If \'file\' is not supplied,\n    TextFile creates its own using \'io.open()\'.\n\n    The options are all boolean, and affect the value returned by\n    \'readline()\':\n      strip_comments [default: true]\n        strip from "#" to end-of-line, as well as any whitespace\n        leading up to the "#" -- unless it is escaped by a backslash\n      lstrip_ws [default: false]\n        strip leading whitespace from each line before returning it\n      rstrip_ws [default: true]\n        strip trailing whitespace (including line terminator!) from\n        each line before returning it\n      skip_blanks [default: true}\n        skip lines that are empty *after* stripping comments and\n        whitespace.  (If both lstrip_ws and rstrip_ws are false,\n        then some lines may consist of solely whitespace: these will\n        *not* be skipped, even if \'skip_blanks\' is true.)\n      join_lines [default: false]\n        if a backslash is the last non-newline character on a line\n        after stripping comments and whitespace, join the following line\n        to it to form one "logical line"; if N consecutive lines end\n        with a backslash, then N+1 physical lines will be joined to\n        form one logical line.\n      collapse_join [default: false]\n        strip leading whitespace from lines that are joined to their\n        predecessor; only matters if (join_lines and not lstrip_ws)\n      errors [default: \'strict\']\n        error handler used to decode the file content\n\n    Note that since \'rstrip_ws\' can strip the trailing newline, the\n    semantics of \'readline()\' must differ from those of the builtin file\n    object\'s \'readline()\' method!  In particular, \'readline()\' returns\n    None for end-of-file: an empty string might just be a blank line (or\n    an all-whitespace line), if \'rstrip_ws\' is true but \'skip_blanks\' is\n    not.')), Assign(targets=[Name(id='default_options', ctx=Store())], value=Dict(keys=[Constant(value='strip_comments'), Constant(value='skip_blanks'), Constant(value='lstrip_ws'), Constant(value='rstrip_ws'), Constant(value='join_lines'), Constant(value='collapse_join'), Constant(value='errors')], values=[Constant(value=1), Constant(value=1), Constant(value=0), Constant(value=1), Constant(value=0), Constant(value=0), Constant(value='strict')])), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='filename'), arg(arg='file')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='options'), defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value="Construct a new TextFile object.  At least one of 'filename'\n        (a string) and 'file' (a file-like object) must be supplied.\n        They keyword argument options are described above and affect\n        the values returned by 'readline()'.")), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='filename', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Name(id='file', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])]), body=[Raise(exc=Call(func=Name(id='RuntimeError', ctx=Load()), args=[Constant(value="you must supply either or both of 'filename' and 'file'")], keywords=[]))], orelse=[]), For(target=Name(id='opt', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='default_options', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Name(id='opt', ctx=Load()), ops=[In()], comparators=[Name(id='options', ctx=Load())]), body=[Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='opt', ctx=Load()), Subscript(value=Name(id='options', ctx=Load()), slice=Name(id='opt', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='opt', ctx=Load()), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='default_options', ctx=Load()), slice=Name(id='opt', ctx=Load()), ctx=Load())], keywords=[]))])], orelse=[]), For(target=Name(id='opt', ctx=Store()), iter=Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Name(id='opt', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='default_options', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='KeyError', ctx=Load()), args=[BinOp(left=Constant(value="invalid TextFile option '%s'"), op=Mod(), right=Name(id='opt', ctx=Load()))], keywords=[]))], orelse=[])], orelse=[]), If(test=Compare(left=Name(id='file', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='open', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='filename', ctx=Store())], value=Name(id='filename', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='file', ctx=Store())], value=Name(id='file', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='current_line', ctx=Store())], value=Constant(value=0))]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='linebuf', ctx=Store())], value=List(elts=[], ctx=Load()))], decorator_list=[]), FunctionDef(name='open', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='filename')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Open a new file named 'filename'.  This overrides both the\n        'filename' and 'file' arguments to the constructor.")), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='filename', ctx=Store())], value=Name(id='filename', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='file', ctx=Store())], value=Call(func=Name(id='open', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='filename', ctx=Load())], keywords=[keyword(arg='errors', value=Attribute(value=Name(id='self', ctx=Load()), attr='errors', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='current_line', ctx=Store())], value=Constant(value=0))], decorator_list=[]), FunctionDef(name='close', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Close the current file and forget everything we know about it\n        (filename, current line number).')), Assign(targets=[Name(id='file', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='file', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='file', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='filename', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='current_line', ctx=Store())], value=Constant(value=None)), Expr(value=Call(func=Attribute(value=Name(id='file', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='gen_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='msg'), arg(arg='line')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Name(id='outmsg', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=Compare(left=Name(id='line', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='line', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='current_line', ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='outmsg', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='filename', ctx=Load()), op=Add(), right=Constant(value=', '))], keywords=[])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='line', ctx=Load()), Tuple(elts=[Name(id='list', ctx=Load()), Name(id='tuple', ctx=Load())], ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='outmsg', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Constant(value='lines %d-%d: '), op=Mod(), right=Call(func=Name(id='tuple', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[]))], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='outmsg', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Constant(value='line %d: '), op=Mod(), right=Name(id='line', ctx=Load()))], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='outmsg', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[])], keywords=[])), Return(value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Name(id='outmsg', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='msg'), arg(arg='line')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='error: '), op=Add(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='gen_error', ctx=Load()), args=[Name(id='msg', ctx=Load()), Name(id='line', ctx=Load())], keywords=[]))], keywords=[]))], decorator_list=[]), FunctionDef(name='warn', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='msg'), arg(arg='line')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Print (to stderr) a warning message tied to the current logical\n        line in the current file.  If the current logical line in the\n        file spans multiple physical lines, the warning refers to the\n        whole range, eg. "lines 3-5".  If \'line\' supplied, it overrides\n        the current line number; it may be a list or tuple to indicate a\n        range of physical lines, or an integer for a single physical\n        line.')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()), attr='write', ctx=Load()), args=[BinOp(left=BinOp(left=Constant(value='warning: '), op=Add(), right=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='gen_error', ctx=Load()), args=[Name(id='msg', ctx=Load()), Name(id='line', ctx=Load())], keywords=[])), op=Add(), right=Constant(value='\n'))], keywords=[]))], decorator_list=[]), FunctionDef(name='readline', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Read and return a single logical line from the current file (or\n        from an internal buffer if lines have previously been "unread"\n        with \'unreadline()\').  If the \'join_lines\' option is true, this\n        may involve reading multiple physical lines concatenated into a\n        single string.  Updates the current line number, so calling\n        \'warn()\' after \'readline()\' emits a warning about the physical\n        line(s) just read.  Returns None on end-of-file, since the empty\n        string can occur if \'rstrip_ws\' is true but \'strip_blanks\' is\n        not.')), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='linebuf', ctx=Load()), body=[Assign(targets=[Name(id='line', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='linebuf', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())), Delete(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='linebuf', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Del())]), Return(value=Name(id='line', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='buildup_line', ctx=Store())], value=Constant(value='')), While(test=Constant(value=True), body=[Assign(targets=[Name(id='line', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='file', ctx=Load()), attr='readline', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='line', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Assign(targets=[Name(id='line', ctx=Store())], value=Constant(value=None))], orelse=[]), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='strip_comments', ctx=Load()), Name(id='line', ctx=Load())]), body=[Assign(targets=[Name(id='pos', ctx=Store())], value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='find', ctx=Load()), args=[Constant(value='#')], keywords=[])), If(test=Compare(left=Name(id='pos', ctx=Load()), ops=[Eq()], comparators=[UnaryOp(op=USub(), operand=Constant(value=1))]), body=[Pass()], orelse=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='pos', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Subscript(value=Name(id='line', ctx=Load()), slice=BinOp(left=Name(id='pos', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), ops=[NotEq()], comparators=[Constant(value='\\')])]), body=[Assign(targets=[Name(id='eol', ctx=Store())], value=BoolOp(op=Or(), values=[BoolOp(op=And(), values=[Compare(left=Subscript(value=Name(id='line', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), ops=[Eq()], comparators=[Constant(value='\n')]), Constant(value='\n')]), Constant(value='')])), Assign(targets=[Name(id='line', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='line', ctx=Load()), slice=Slice(lower=Constant(value=0), upper=Name(id='pos', ctx=Load())), ctx=Load()), op=Add(), right=Name(id='eol', ctx=Load()))), If(test=Compare(left=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Constant(value='')]), body=[Continue()], orelse=[])], orelse=[Assign(targets=[Name(id='line', ctx=Store())], value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='\\#'), Constant(value='#')], keywords=[]))])])], orelse=[]), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='join_lines', ctx=Load()), Name(id='buildup_line', ctx=Load())]), body=[If(test=Compare(left=Name(id='line', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value='continuation line immediately precedes end-of-file')], keywords=[])), Return(value=Name(id='buildup_line', ctx=Load()))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='collapse_join', ctx=Load()), body=[Assign(targets=[Name(id='line', ctx=Store())], value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='lstrip', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='line', ctx=Store())], value=BinOp(left=Name(id='buildup_line', ctx=Load()), op=Add(), right=Name(id='line', ctx=Load()))), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='current_line', ctx=Load()), Name(id='list', ctx=Load())], keywords=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='current_line', ctx=Load()), slice=Constant(value=1), ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='current_line', ctx=Load()), slice=Constant(value=1), ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='current_line', ctx=Store())], value=List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='current_line', ctx=Load()), BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='current_line', ctx=Load()), op=Add(), right=Constant(value=1))], ctx=Load()))])], orelse=[If(test=Compare(left=Name(id='line', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=None))], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='current_line', ctx=Load()), Name(id='list', ctx=Load())], keywords=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='current_line', ctx=Store())], value=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='current_line', ctx=Load()), slice=Constant(value=1), ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='current_line', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='current_line', ctx=Load()), op=Add(), right=Constant(value=1)))])]), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='lstrip_ws', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='rstrip_ws', ctx=Load())]), body=[Assign(targets=[Name(id='line', ctx=Store())], value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]))], orelse=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='lstrip_ws', ctx=Load()), body=[Assign(targets=[Name(id='line', ctx=Store())], value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='lstrip', ctx=Load()), args=[], keywords=[]))], orelse=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='rstrip_ws', ctx=Load()), body=[Assign(targets=[Name(id='line', ctx=Store())], value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='rstrip', ctx=Load()), args=[], keywords=[]))], orelse=[])])]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='line', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value=''), Constant(value='\n')], ctx=Load())]), Attribute(value=Name(id='self', ctx=Load()), attr='skip_blanks', ctx=Load())]), body=[Continue()], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='join_lines', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='line', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), ops=[Eq()], comparators=[Constant(value='\\')]), body=[Assign(targets=[Name(id='buildup_line', ctx=Store())], value=Subscript(value=Name(id='line', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())), Continue()], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='line', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Constant(value=2))), ctx=Load()), ops=[Eq()], comparators=[Constant(value='\\\n')]), body=[Assign(targets=[Name(id='buildup_line', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='line', ctx=Load()), slice=Slice(lower=Constant(value=0), upper=UnaryOp(op=USub(), operand=Constant(value=2))), ctx=Load()), op=Add(), right=Constant(value='\n'))), Continue()], orelse=[])], orelse=[]), Return(value=Name(id='line', ctx=Load()))], orelse=[])], decorator_list=[]), FunctionDef(name='readlines', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Read and return the list of all logical lines remaining in the\n        current file.')), Assign(targets=[Name(id='lines', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Constant(value=True), body=[Assign(targets=[Name(id='line', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='readline', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='line', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Name(id='lines', ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='unreadline', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='line')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Push 'line' (a string) onto an internal buffer that will be\n        checked by future 'readline()' calls.  Handy for implementing\n        a parser with line-at-a-time lookahead.")), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='linebuf', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[])], type_ignores=[])