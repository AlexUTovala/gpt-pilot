Module(body=[Expr(value=Constant(value="distutils.command.install_lib\n\nImplements the Distutils 'install_lib' command\n(install all Python modules).")), Import(names=[alias(name='os')]), Import(names=[alias(name='importlib.util')]), Import(names=[alias(name='sys')]), ImportFrom(module='core', names=[alias(name='Command')], level=2), ImportFrom(module='errors', names=[alias(name='DistutilsOptionError')], level=2), Assign(targets=[Name(id='PYTHON_SOURCE_EXTENSION', ctx=Store())], value=Constant(value='.py')), ClassDef(name='install_lib', bases=[Name(id='Command', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='description', ctx=Store())], value=Constant(value='install all Python modules (extensions and pure Python)')), Assign(targets=[Name(id='user_options', ctx=Store())], value=List(elts=[Tuple(elts=[Constant(value='install-dir='), Constant(value='d'), Constant(value='directory to install to')], ctx=Load()), Tuple(elts=[Constant(value='build-dir='), Constant(value='b'), Constant(value='build directory (where to install from)')], ctx=Load()), Tuple(elts=[Constant(value='force'), Constant(value='f'), Constant(value='force installation (overwrite existing files)')], ctx=Load()), Tuple(elts=[Constant(value='compile'), Constant(value='c'), Constant(value='compile .py to .pyc [default]')], ctx=Load()), Tuple(elts=[Constant(value='no-compile'), Constant(value=None), Constant(value="don't compile .py files")], ctx=Load()), Tuple(elts=[Constant(value='optimize='), Constant(value='O'), Constant(value='also compile with optimization: -O1 for "python -O", -O2 for "python -OO", and -O0 to disable [default: -O0]')], ctx=Load()), Tuple(elts=[Constant(value='skip-build'), Constant(value=None), Constant(value='skip the build steps')], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='boolean_options', ctx=Store())], value=List(elts=[Constant(value='force'), Constant(value='compile'), Constant(value='skip-build')], ctx=Load())), Assign(targets=[Name(id='negative_opt', ctx=Store())], value=Dict(keys=[Constant(value='no-compile')], values=[Constant(value='compile')])), FunctionDef(name='initialize_options', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='install_dir', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='build_dir', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='force', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='compile', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='optimize', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='skip_build', ctx=Store())], value=Constant(value=None))], decorator_list=[]), FunctionDef(name='finalize_options', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_undefined_options', ctx=Load()), args=[Constant(value='install'), Tuple(elts=[Constant(value='build_lib'), Constant(value='build_dir')], ctx=Load()), Tuple(elts=[Constant(value='install_lib'), Constant(value='install_dir')], ctx=Load()), Tuple(elts=[Constant(value='force'), Constant(value='force')], ctx=Load()), Tuple(elts=[Constant(value='compile'), Constant(value='compile')], ctx=Load()), Tuple(elts=[Constant(value='optimize'), Constant(value='optimize')], ctx=Load()), Tuple(elts=[Constant(value='skip_build'), Constant(value='skip_build')], ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='compile', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='compile', ctx=Store())], value=Constant(value=True))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='optimize', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='optimize', ctx=Store())], value=Constant(value=False))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='optimize', ctx=Load()), Name(id='int', ctx=Load())], keywords=[])), body=[Try(body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='optimize', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='optimize', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='optimize', ctx=Load()), ops=[NotIn()], comparators=[Tuple(elts=[Constant(value=0), Constant(value=1), Constant(value=2)], ctx=Load())]), body=[Raise(exc=Name(id='AssertionError', ctx=Load()))], orelse=[])], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='ValueError', ctx=Load()), Name(id='AssertionError', ctx=Load())], ctx=Load()), body=[Raise(exc=Call(func=Name(id='DistutilsOptionError', ctx=Load()), args=[Constant(value='optimize must be 0, 1, or 2')], keywords=[]))])], orelse=[], finalbody=[])], orelse=[])], decorator_list=[]), FunctionDef(name='run', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='build', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='outfiles', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='install', ctx=Load()), args=[], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='outfiles', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='has_pure_modules', ctx=Load()), args=[], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='byte_compile', ctx=Load()), args=[Name(id='outfiles', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='build', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='skip_build', ctx=Load())), body=[If(test=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='has_pure_modules', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='run_command', ctx=Load()), args=[Constant(value='build_py')], keywords=[]))], orelse=[]), If(test=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='has_ext_modules', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='run_command', ctx=Load()), args=[Constant(value='build_ext')], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='install', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isdir', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='build_dir', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='outfiles', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='copy_tree', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='build_dir', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='install_dir', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='warn', ctx=Load()), args=[BinOp(left=Constant(value="'%s' does not exist -- no Python modules to install"), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='build_dir', ctx=Load()))], keywords=[])), Return()]), Return(value=Name(id='outfiles', ctx=Load()))], decorator_list=[]), FunctionDef(name='byte_compile', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='files')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='sys', ctx=Load()), attr='dont_write_bytecode', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value='byte-compiling is disabled, skipping.')], keywords=[])), Return()], orelse=[]), ImportFrom(module='util', names=[alias(name='byte_compile')], level=2), Assign(targets=[Name(id='install_root', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_finalized_command', ctx=Load()), args=[Constant(value='install')], keywords=[]), attr='root', ctx=Load())), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='compile', ctx=Load()), body=[Expr(value=Call(func=Name(id='byte_compile', ctx=Load()), args=[Name(id='files', ctx=Load())], keywords=[keyword(arg='optimize', value=Constant(value=0)), keyword(arg='force', value=Attribute(value=Name(id='self', ctx=Load()), attr='force', ctx=Load())), keyword(arg='prefix', value=Name(id='install_root', ctx=Load())), keyword(arg='dry_run', value=Attribute(value=Name(id='self', ctx=Load()), attr='dry_run', ctx=Load()))]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='optimize', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Name(id='byte_compile', ctx=Load()), args=[Name(id='files', ctx=Load())], keywords=[keyword(arg='optimize', value=Attribute(value=Name(id='self', ctx=Load()), attr='optimize', ctx=Load())), keyword(arg='force', value=Attribute(value=Name(id='self', ctx=Load()), attr='force', ctx=Load())), keyword(arg='prefix', value=Name(id='install_root', ctx=Load())), keyword(arg='verbose', value=Attribute(value=Name(id='self', ctx=Load()), attr='verbose', ctx=Load())), keyword(arg='dry_run', value=Attribute(value=Name(id='self', ctx=Load()), attr='dry_run', ctx=Load()))]))], orelse=[])], decorator_list=[]), FunctionDef(name='_mutate_outputs', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='has_any'), arg(arg='build_cmd'), arg(arg='cmd_option'), arg(arg='output_dir')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='has_any', ctx=Load())), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='build_cmd', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_finalized_command', ctx=Load()), args=[Name(id='build_cmd', ctx=Load())], keywords=[])), Assign(targets=[Name(id='build_files', ctx=Store())], value=Call(func=Attribute(value=Name(id='build_cmd', ctx=Load()), attr='get_outputs', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='build_dir', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='build_cmd', ctx=Load()), Name(id='cmd_option', ctx=Load())], keywords=[])), Assign(targets=[Name(id='prefix_len', ctx=Store())], value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='build_dir', ctx=Load())], keywords=[]), op=Add(), right=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='sep', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='outputs', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='file', ctx=Store()), iter=Name(id='build_files', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='outputs', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='output_dir', ctx=Load()), Subscript(value=Name(id='file', ctx=Load()), slice=Slice(lower=Name(id='prefix_len', ctx=Load())), ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Return(value=Name(id='outputs', ctx=Load()))], decorator_list=[]), FunctionDef(name='_bytecode_filenames', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='py_filenames')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='bytecode_files', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='py_file', ctx=Store()), iter=Name(id='py_filenames', ctx=Load()), body=[Assign(targets=[Name(id='ext', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='splitext', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normcase', ctx=Load()), args=[Name(id='py_file', ctx=Load())], keywords=[])], keywords=[]), slice=Constant(value=1), ctx=Load())), If(test=Compare(left=Name(id='ext', ctx=Load()), ops=[NotEq()], comparators=[Name(id='PYTHON_SOURCE_EXTENSION', ctx=Load())]), body=[Continue()], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='compile', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='bytecode_files', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='importlib', ctx=Load()), attr='util', ctx=Load()), attr='cache_from_source', ctx=Load()), args=[Name(id='py_file', ctx=Load())], keywords=[keyword(arg='optimization', value=Constant(value=''))])], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='optimize', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='bytecode_files', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='importlib', ctx=Load()), attr='util', ctx=Load()), attr='cache_from_source', ctx=Load()), args=[Name(id='py_file', ctx=Load())], keywords=[keyword(arg='optimization', value=Attribute(value=Name(id='self', ctx=Load()), attr='optimize', ctx=Load()))])], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='bytecode_files', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_outputs', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the list of files that would be installed if this command\n        were actually run.  Not affected by the "dry-run" flag or whether\n        modules have actually been built yet.\n        ')), Assign(targets=[Name(id='pure_outputs', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_mutate_outputs', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='has_pure_modules', ctx=Load()), args=[], keywords=[]), Constant(value='build_py'), Constant(value='build_lib'), Attribute(value=Name(id='self', ctx=Load()), attr='install_dir', ctx=Load())], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='compile', ctx=Load()), body=[Assign(targets=[Name(id='bytecode_outputs', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_bytecode_filenames', ctx=Load()), args=[Name(id='pure_outputs', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='bytecode_outputs', ctx=Store())], value=List(elts=[], ctx=Load()))]), Assign(targets=[Name(id='ext_outputs', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_mutate_outputs', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='has_ext_modules', ctx=Load()), args=[], keywords=[]), Constant(value='build_ext'), Constant(value='build_lib'), Attribute(value=Name(id='self', ctx=Load()), attr='install_dir', ctx=Load())], keywords=[])), Return(value=BinOp(left=BinOp(left=Name(id='pure_outputs', ctx=Load()), op=Add(), right=Name(id='bytecode_outputs', ctx=Load())), op=Add(), right=Name(id='ext_outputs', ctx=Load())))], decorator_list=[]), FunctionDef(name='get_inputs', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Get the list of files that are input to this command, ie. the\n        files that get installed as they are named in the build tree.\n        The files in this list correspond one-to-one to the output\n        filenames returned by 'get_outputs()'.\n        ")), Assign(targets=[Name(id='inputs', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='has_pure_modules', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='build_py', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_finalized_command', ctx=Load()), args=[Constant(value='build_py')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='inputs', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Attribute(value=Name(id='build_py', ctx=Load()), attr='get_outputs', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[]), If(test=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='has_ext_modules', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='build_ext', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_finalized_command', ctx=Load()), args=[Constant(value='build_ext')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='inputs', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Attribute(value=Name(id='build_ext', ctx=Load()), attr='get_outputs', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[]), Return(value=Name(id='inputs', ctx=Load()))], decorator_list=[])], decorator_list=[])], type_ignores=[])