Module(body=[Expr(value=Constant(value='distutils.archive_util\n\nUtility functions for creating archive files (tarballs, zip files,\nthat sort of thing).')), Import(names=[alias(name='os')]), ImportFrom(module='warnings', names=[alias(name='warn')], level=0), Import(names=[alias(name='sys')]), Try(body=[Import(names=[alias(name='zipfile')])], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Assign(targets=[Name(id='zipfile', ctx=Store())], value=Constant(value=None))])], orelse=[], finalbody=[]), ImportFrom(module='errors', names=[alias(name='DistutilsExecError')], level=1), ImportFrom(module='spawn', names=[alias(name='spawn')], level=1), ImportFrom(module='dir_util', names=[alias(name='mkpath')], level=1), ImportFrom(module='_log', names=[alias(name='log')], level=1), Try(body=[ImportFrom(module='pwd', names=[alias(name='getpwnam')], level=0)], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Assign(targets=[Name(id='getpwnam', ctx=Store())], value=Constant(value=None))])], orelse=[], finalbody=[]), Try(body=[ImportFrom(module='grp', names=[alias(name='getgrnam')], level=0)], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Assign(targets=[Name(id='getgrnam', ctx=Store())], value=Constant(value=None))])], orelse=[], finalbody=[]), FunctionDef(name='_get_gid', args=arguments(posonlyargs=[], args=[arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Returns a gid, given a group name.')), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='getgrnam', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Name(id='name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])]), body=[Return(value=Constant(value=None))], orelse=[]), Try(body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='getgrnam', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Constant(value=None))])], orelse=[], finalbody=[]), If(test=Compare(left=Name(id='result', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value=2), ctx=Load()))], orelse=[]), Return(value=Constant(value=None))], decorator_list=[]), FunctionDef(name='_get_uid', args=arguments(posonlyargs=[], args=[arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Returns an uid, given a user name.')), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='getpwnam', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Name(id='name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])]), body=[Return(value=Constant(value=None))], orelse=[]), Try(body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='getpwnam', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Constant(value=None))])], orelse=[], finalbody=[]), If(test=Compare(left=Name(id='result', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value=2), ctx=Load()))], orelse=[]), Return(value=Constant(value=None))], decorator_list=[]), FunctionDef(name='make_tarball', args=arguments(posonlyargs=[], args=[arg(arg='base_name'), arg(arg='base_dir'), arg(arg='compress'), arg(arg='verbose'), arg(arg='dry_run'), arg(arg='owner'), arg(arg='group')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='gzip'), Constant(value=0), Constant(value=0), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='Create a (possibly compressed) tar file from all the files under\n    \'base_dir\'.\n\n    \'compress\' must be "gzip" (the default), "bzip2", "xz", "compress", or\n    None.  ("compress" will be deprecated in Python 3.2)\n\n    \'owner\' and \'group\' can be used to define an owner and a group for the\n    archive that is being built. If not provided, the current owner and group\n    will be used.\n\n    The output tar file will be named \'base_dir\' +  ".tar", possibly plus\n    the appropriate compression extension (".gz", ".bz2", ".xz" or ".Z").\n\n    Returns the output filename.\n    ')), Assign(targets=[Name(id='tar_compression', ctx=Store())], value=Dict(keys=[Constant(value='gzip'), Constant(value='bzip2'), Constant(value='xz'), Constant(value=None), Constant(value='compress')], values=[Constant(value='gz'), Constant(value='bz2'), Constant(value='xz'), Constant(value=''), Constant(value='')])), Assign(targets=[Name(id='compress_ext', ctx=Store())], value=Dict(keys=[Constant(value='gzip'), Constant(value='bzip2'), Constant(value='xz'), Constant(value='compress')], values=[Constant(value='.gz'), Constant(value='.bz2'), Constant(value='.xz'), Constant(value='.Z')])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='compress', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='compress', ctx=Load()), ops=[NotIn()], comparators=[Call(func=Attribute(value=Name(id='compress_ext', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value="bad value for 'compress': must be None, 'gzip', 'bzip2', 'xz' or 'compress'")], keywords=[]))], orelse=[]), Assign(targets=[Name(id='archive_name', ctx=Store())], value=BinOp(left=Name(id='base_name', ctx=Load()), op=Add(), right=Constant(value='.tar'))), If(test=Compare(left=Name(id='compress', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='compress')]), body=[AugAssign(target=Name(id='archive_name', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='compress_ext', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='compress', ctx=Load()), Constant(value='')], keywords=[]))], orelse=[]), Expr(value=Call(func=Name(id='mkpath', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Name(id='archive_name', ctx=Load())], keywords=[])], keywords=[keyword(arg='dry_run', value=Name(id='dry_run', ctx=Load()))])), Import(names=[alias(name='tarfile')]), Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Creating tar archive')], keywords=[])), Assign(targets=[Name(id='uid', ctx=Store())], value=Call(func=Name(id='_get_uid', ctx=Load()), args=[Name(id='owner', ctx=Load())], keywords=[])), Assign(targets=[Name(id='gid', ctx=Store())], value=Call(func=Name(id='_get_gid', ctx=Load()), args=[Name(id='group', ctx=Load())], keywords=[])), FunctionDef(name='_set_uid_gid', args=arguments(posonlyargs=[], args=[arg(arg='tarinfo')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='gid', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='tarinfo', ctx=Load()), attr='gid', ctx=Store())], value=Name(id='gid', ctx=Load())), Assign(targets=[Attribute(value=Name(id='tarinfo', ctx=Load()), attr='gname', ctx=Store())], value=Name(id='group', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='uid', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='tarinfo', ctx=Load()), attr='uid', ctx=Store())], value=Name(id='uid', ctx=Load())), Assign(targets=[Attribute(value=Name(id='tarinfo', ctx=Load()), attr='uname', ctx=Store())], value=Name(id='owner', ctx=Load()))], orelse=[]), Return(value=Name(id='tarinfo', ctx=Load()))], decorator_list=[]), If(test=UnaryOp(op=Not(), operand=Name(id='dry_run', ctx=Load())), body=[Assign(targets=[Name(id='tar', ctx=Store())], value=Call(func=Attribute(value=Name(id='tarfile', ctx=Load()), attr='open', ctx=Load()), args=[Name(id='archive_name', ctx=Load()), BinOp(left=Constant(value='w|%s'), op=Mod(), right=Subscript(value=Name(id='tar_compression', ctx=Load()), slice=Name(id='compress', ctx=Load()), ctx=Load()))], keywords=[])), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='tar', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='base_dir', ctx=Load())], keywords=[keyword(arg='filter', value=Name(id='_set_uid_gid', ctx=Load()))]))], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='tar', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))])], orelse=[]), If(test=Compare(left=Name(id='compress', ctx=Load()), ops=[Eq()], comparators=[Constant(value='compress')]), body=[Expr(value=Call(func=Name(id='warn', ctx=Load()), args=[Constant(value="'compress' is deprecated."), Name(id='DeprecationWarning', ctx=Load())], keywords=[])), Assign(targets=[Name(id='compressed_name', ctx=Store())], value=BinOp(left=Name(id='archive_name', ctx=Load()), op=Add(), right=Subscript(value=Name(id='compress_ext', ctx=Load()), slice=Name(id='compress', ctx=Load()), ctx=Load()))), If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), ops=[Eq()], comparators=[Constant(value='win32')]), body=[Assign(targets=[Name(id='cmd', ctx=Store())], value=List(elts=[Name(id='compress', ctx=Load()), Name(id='archive_name', ctx=Load()), Name(id='compressed_name', ctx=Load())], ctx=Load()))], orelse=[Assign(targets=[Name(id='cmd', ctx=Store())], value=List(elts=[Name(id='compress', ctx=Load()), Constant(value='-f'), Name(id='archive_name', ctx=Load())], ctx=Load()))]), Expr(value=Call(func=Name(id='spawn', ctx=Load()), args=[Name(id='cmd', ctx=Load())], keywords=[keyword(arg='dry_run', value=Name(id='dry_run', ctx=Load()))])), Return(value=Name(id='compressed_name', ctx=Load()))], orelse=[]), Return(value=Name(id='archive_name', ctx=Load()))], decorator_list=[]), FunctionDef(name='make_zipfile', args=arguments(posonlyargs=[], args=[arg(arg='base_name'), arg(arg='base_dir'), arg(arg='verbose'), arg(arg='dry_run')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0), Constant(value=0)]), body=[Expr(value=Constant(value='Create a zip file from all the files under \'base_dir\'.\n\n    The output zip file will be named \'base_name\' + ".zip".  Uses either the\n    "zipfile" Python module (if available) or the InfoZIP "zip" utility\n    (if installed and found on the default search path).  If neither tool is\n    available, raises DistutilsExecError.  Returns the name of the output zip\n    file.\n    ')), Assign(targets=[Name(id='zip_filename', ctx=Store())], value=BinOp(left=Name(id='base_name', ctx=Load()), op=Add(), right=Constant(value='.zip'))), Expr(value=Call(func=Name(id='mkpath', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Name(id='zip_filename', ctx=Load())], keywords=[])], keywords=[keyword(arg='dry_run', value=Name(id='dry_run', ctx=Load()))])), If(test=Compare(left=Name(id='zipfile', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[If(test=Name(id='verbose', ctx=Load()), body=[Assign(targets=[Name(id='zipoptions', ctx=Store())], value=Constant(value='-r'))], orelse=[Assign(targets=[Name(id='zipoptions', ctx=Store())], value=Constant(value='-rq'))]), Try(body=[Expr(value=Call(func=Name(id='spawn', ctx=Load()), args=[List(elts=[Constant(value='zip'), Name(id='zipoptions', ctx=Load()), Name(id='zip_filename', ctx=Load()), Name(id='base_dir', ctx=Load())], ctx=Load())], keywords=[keyword(arg='dry_run', value=Name(id='dry_run', ctx=Load()))]))], handlers=[ExceptHandler(type=Name(id='DistutilsExecError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='DistutilsExecError', ctx=Load()), args=[BinOp(left=Constant(value="unable to create zip file '%s': could neither import the 'zipfile' module nor find a standalone zip utility"), op=Mod(), right=Name(id='zip_filename', ctx=Load()))], keywords=[]))])], orelse=[], finalbody=[])], orelse=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value="creating '%s' and adding '%s' to it"), Name(id='zip_filename', ctx=Load()), Name(id='base_dir', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='dry_run', ctx=Load())), body=[Try(body=[Assign(targets=[Name(id='zip', ctx=Store())], value=Call(func=Attribute(value=Name(id='zipfile', ctx=Load()), attr='ZipFile', ctx=Load()), args=[Name(id='zip_filename', ctx=Load()), Constant(value='w')], keywords=[keyword(arg='compression', value=Attribute(value=Name(id='zipfile', ctx=Load()), attr='ZIP_DEFLATED', ctx=Load()))]))], handlers=[ExceptHandler(type=Name(id='RuntimeError', ctx=Load()), body=[Assign(targets=[Name(id='zip', ctx=Store())], value=Call(func=Attribute(value=Name(id='zipfile', ctx=Load()), attr='ZipFile', ctx=Load()), args=[Name(id='zip_filename', ctx=Load()), Constant(value='w')], keywords=[keyword(arg='compression', value=Attribute(value=Name(id='zipfile', ctx=Load()), attr='ZIP_STORED', ctx=Load()))]))])], orelse=[], finalbody=[]), With(items=[withitem(context_expr=Name(id='zip', ctx=Load()))], body=[If(test=Compare(left=Name(id='base_dir', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='os', ctx=Load()), attr='curdir', ctx=Load())]), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normpath', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='base_dir', ctx=Load()), Constant(value='')], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='zip', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='path', ctx=Load()), Name(id='path', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value="adding '%s'"), Name(id='path', ctx=Load())], keywords=[]))], orelse=[]), For(target=Tuple(elts=[Name(id='dirpath', ctx=Store()), Name(id='dirnames', ctx=Store()), Name(id='filenames', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='walk', ctx=Load()), args=[Name(id='base_dir', ctx=Load())], keywords=[]), body=[For(target=Name(id='name', ctx=Store()), iter=Name(id='dirnames', ctx=Load()), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normpath', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='dirpath', ctx=Load()), Name(id='name', ctx=Load()), Constant(value='')], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='zip', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='path', ctx=Load()), Name(id='path', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value="adding '%s'"), Name(id='path', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='name', ctx=Store()), iter=Name(id='filenames', ctx=Load()), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normpath', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='dirpath', ctx=Load()), Name(id='name', ctx=Load())], keywords=[])], keywords=[])), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isfile', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='zip', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='path', ctx=Load()), Name(id='path', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value="adding '%s'"), Name(id='path', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[])])], orelse=[])]), Return(value=Name(id='zip_filename', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='ARCHIVE_FORMATS', ctx=Store())], value=Dict(keys=[Constant(value='gztar'), Constant(value='bztar'), Constant(value='xztar'), Constant(value='ztar'), Constant(value='tar'), Constant(value='zip')], values=[Tuple(elts=[Name(id='make_tarball', ctx=Load()), List(elts=[Tuple(elts=[Constant(value='compress'), Constant(value='gzip')], ctx=Load())], ctx=Load()), Constant(value="gzip'ed tar-file")], ctx=Load()), Tuple(elts=[Name(id='make_tarball', ctx=Load()), List(elts=[Tuple(elts=[Constant(value='compress'), Constant(value='bzip2')], ctx=Load())], ctx=Load()), Constant(value="bzip2'ed tar-file")], ctx=Load()), Tuple(elts=[Name(id='make_tarball', ctx=Load()), List(elts=[Tuple(elts=[Constant(value='compress'), Constant(value='xz')], ctx=Load())], ctx=Load()), Constant(value="xz'ed tar-file")], ctx=Load()), Tuple(elts=[Name(id='make_tarball', ctx=Load()), List(elts=[Tuple(elts=[Constant(value='compress'), Constant(value='compress')], ctx=Load())], ctx=Load()), Constant(value='compressed tar file')], ctx=Load()), Tuple(elts=[Name(id='make_tarball', ctx=Load()), List(elts=[Tuple(elts=[Constant(value='compress'), Constant(value=None)], ctx=Load())], ctx=Load()), Constant(value='uncompressed tar file')], ctx=Load()), Tuple(elts=[Name(id='make_zipfile', ctx=Load()), List(elts=[], ctx=Load()), Constant(value='ZIP file')], ctx=Load())])), FunctionDef(name='check_archive_formats', args=arguments(posonlyargs=[], args=[arg(arg='formats')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Returns the first format from the 'format' list that is unknown.\n\n    If all formats are known, returns None\n    ")), For(target=Name(id='format', ctx=Store()), iter=Name(id='formats', ctx=Load()), body=[If(test=Compare(left=Name(id='format', ctx=Load()), ops=[NotIn()], comparators=[Name(id='ARCHIVE_FORMATS', ctx=Load())]), body=[Return(value=Name(id='format', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Constant(value=None))], decorator_list=[]), FunctionDef(name='make_archive', args=arguments(posonlyargs=[], args=[arg(arg='base_name'), arg(arg='format'), arg(arg='root_dir'), arg(arg='base_dir'), arg(arg='verbose'), arg(arg='dry_run'), arg(arg='owner'), arg(arg='group')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=0), Constant(value=0), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='Create an archive file (eg. zip or tar).\n\n    \'base_name\' is the name of the file to create, minus any format-specific\n    extension; \'format\' is the archive format: one of "zip", "tar", "gztar",\n    "bztar", "xztar", or "ztar".\n\n    \'root_dir\' is a directory that will be the root directory of the\n    archive; ie. we typically chdir into \'root_dir\' before creating the\n    archive.  \'base_dir\' is the directory where we start archiving from;\n    ie. \'base_dir\' will be the common prefix of all files and\n    directories in the archive.  \'root_dir\' and \'base_dir\' both default\n    to the current directory.  Returns the name of the archive file.\n\n    \'owner\' and \'group\' are used when creating a tar archive. By default,\n    uses the current owner and group.\n    ')), Assign(targets=[Name(id='save_cwd', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getcwd', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='root_dir', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value="changing into '%s'"), Name(id='root_dir', ctx=Load())], keywords=[])), Assign(targets=[Name(id='base_name', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Name(id='base_name', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='dry_run', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='chdir', ctx=Load()), args=[Name(id='root_dir', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), If(test=Compare(left=Name(id='base_dir', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='base_dir', ctx=Store())], value=Attribute(value=Name(id='os', ctx=Load()), attr='curdir', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='kwargs', ctx=Store())], value=Dict(keys=[Constant(value='dry_run')], values=[Name(id='dry_run', ctx=Load())])), Try(body=[Assign(targets=[Name(id='format_info', ctx=Store())], value=Subscript(value=Name(id='ARCHIVE_FORMATS', ctx=Load()), slice=Name(id='format', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value="unknown archive format '%s'"), op=Mod(), right=Name(id='format', ctx=Load()))], keywords=[]))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='func', ctx=Store())], value=Subscript(value=Name(id='format_info', ctx=Load()), slice=Constant(value=0), ctx=Load())), For(target=Tuple(elts=[Name(id='arg', ctx=Store()), Name(id='val', ctx=Store())], ctx=Store()), iter=Subscript(value=Name(id='format_info', ctx=Load()), slice=Constant(value=1), ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='kwargs', ctx=Load()), slice=Name(id='arg', ctx=Load()), ctx=Store())], value=Name(id='val', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='format', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='zip')]), body=[Assign(targets=[Subscript(value=Name(id='kwargs', ctx=Load()), slice=Constant(value='owner'), ctx=Store())], value=Name(id='owner', ctx=Load())), Assign(targets=[Subscript(value=Name(id='kwargs', ctx=Load()), slice=Constant(value='group'), ctx=Store())], value=Name(id='group', ctx=Load()))], orelse=[]), Try(body=[Assign(targets=[Name(id='filename', ctx=Store())], value=Call(func=Name(id='func', ctx=Load()), args=[Name(id='base_name', ctx=Load()), Name(id='base_dir', ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], handlers=[], orelse=[], finalbody=[If(test=Compare(left=Name(id='root_dir', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value="changing back to '%s'"), Name(id='save_cwd', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='chdir', ctx=Load()), args=[Name(id='save_cwd', ctx=Load())], keywords=[]))], orelse=[])]), Return(value=Name(id='filename', ctx=Load()))], decorator_list=[])], type_ignores=[])