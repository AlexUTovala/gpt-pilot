Module(body=[Expr(value=Constant(value='distutils.errors\n\nProvides exceptions used by the Distutils modules.  Note that Distutils\nmodules may raise standard exceptions; in particular, SystemExit is\nusually raised for errors that are obviously the end-user\'s fault\n(eg. bad command-line arguments).\n\nThis module is safe to use in "from ... import *" mode; it only exports\nsymbols whose names start with "Distutils" and end with "Error".')), ClassDef(name='DistutilsError', bases=[Name(id='Exception', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='The root of all Distutils evil.')), Pass()], decorator_list=[]), ClassDef(name='DistutilsModuleError', bases=[Name(id='DistutilsError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Unable to load an expected module, or to find an expected class\n    within some module (in particular, command modules and classes).')), Pass()], decorator_list=[]), ClassDef(name='DistutilsClassError', bases=[Name(id='DistutilsError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Some command class (or possibly distribution class, if anyone\n    feels a need to subclass Distribution) is found not to be holding\n    up its end of the bargain, ie. implementing some part of the\n    "command "interface.')), Pass()], decorator_list=[]), ClassDef(name='DistutilsGetoptError', bases=[Name(id='DistutilsError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="The option table provided to 'fancy_getopt()' is bogus.")), Pass()], decorator_list=[]), ClassDef(name='DistutilsArgError', bases=[Name(id='DistutilsError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Raised by fancy_getopt in response to getopt.error -- ie. an\n    error in the command line usage.')), Pass()], decorator_list=[]), ClassDef(name='DistutilsFileError', bases=[Name(id='DistutilsError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Any problems in the filesystem: expected file not found, etc.\n    Typically this is for problems that we detect before OSError\n    could be raised.')), Pass()], decorator_list=[]), ClassDef(name='DistutilsOptionError', bases=[Name(id='DistutilsError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="Syntactic/semantic errors in command options, such as use of\n    mutually conflicting options, or inconsistent options,\n    badly-spelled values, etc.  No distinction is made between option\n    values originating in the setup script, the command line, config\n    files, or what-have-you -- but if we *know* something originated in\n    the setup script, we'll raise DistutilsSetupError instead.")), Pass()], decorator_list=[]), ClassDef(name='DistutilsSetupError', bases=[Name(id='DistutilsError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="For errors that can be definitely blamed on the setup script,\n    such as invalid keyword arguments to 'setup()'.")), Pass()], decorator_list=[]), ClassDef(name='DistutilsPlatformError', bases=[Name(id='DistutilsError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="We don't know how to do something on the current platform (but\n    we do know how to do it on some platform) -- eg. trying to compile\n    C files on a platform not supported by a CCompiler subclass.")), Pass()], decorator_list=[]), ClassDef(name='DistutilsExecError', bases=[Name(id='DistutilsError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Any problems executing an external program (such as the C\n    compiler, when compiling C files).')), Pass()], decorator_list=[]), ClassDef(name='DistutilsInternalError', bases=[Name(id='DistutilsError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Internal inconsistencies or impossibilities (obviously, this\n    should never be seen if the code is working!).')), Pass()], decorator_list=[]), ClassDef(name='DistutilsTemplateError', bases=[Name(id='DistutilsError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Syntax error in a file list template.'))], decorator_list=[]), ClassDef(name='DistutilsByteCompileError', bases=[Name(id='DistutilsError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Byte compile error.'))], decorator_list=[]), ClassDef(name='CCompilerError', bases=[Name(id='Exception', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Some compile/link operation failed.'))], decorator_list=[]), ClassDef(name='PreprocessError', bases=[Name(id='CCompilerError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Failure to preprocess one or more C/C++ files.'))], decorator_list=[]), ClassDef(name='CompileError', bases=[Name(id='CCompilerError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Failure to compile one or more C/C++ source files.'))], decorator_list=[]), ClassDef(name='LibError', bases=[Name(id='CCompilerError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Failure to create a static library from one or more C/C++ object\n    files.'))], decorator_list=[]), ClassDef(name='LinkError', bases=[Name(id='CCompilerError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Failure to link one or more C/C++ object files into an executable\n    or shared library file.'))], decorator_list=[]), ClassDef(name='UnknownFileError', bases=[Name(id='CCompilerError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Attempt to process an unknown file type.'))], decorator_list=[])], type_ignores=[])