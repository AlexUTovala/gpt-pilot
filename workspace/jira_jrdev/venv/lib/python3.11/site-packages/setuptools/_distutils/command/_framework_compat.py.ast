Module(body=[Expr(value=Constant(value='\nBackward compatibility for homebrew builds on macOS.\n')), Import(names=[alias(name='sys')]), Import(names=[alias(name='os')]), Import(names=[alias(name='functools')]), Import(names=[alias(name='subprocess')]), Import(names=[alias(name='sysconfig')]), FunctionDef(name='enabled', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Only enabled for Python 3.9 framework homebrew builds\n    except ensurepip and venv.\n    ')), Assign(targets=[Name(id='PY39', ctx=Store())], value=Compare(left=Tuple(elts=[Constant(value=3), Constant(value=9)], ctx=Load()), ops=[Lt(), Lt()], comparators=[Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), Tuple(elts=[Constant(value=3), Constant(value=10)], ctx=Load())])), Assign(targets=[Name(id='framework', ctx=Store())], value=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), ops=[Eq()], comparators=[Constant(value='darwin')]), Attribute(value=Name(id='sys', ctx=Load()), attr='_framework', ctx=Load())])), Assign(targets=[Name(id='homebrew', ctx=Store())], value=Compare(left=Constant(value='Cellar'), ops=[In()], comparators=[Call(func=Attribute(value=Name(id='sysconfig', ctx=Load()), attr='get_config_var', ctx=Load()), args=[Constant(value='projectbase')], keywords=[])])), Assign(targets=[Name(id='venv', ctx=Store())], value=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='prefix', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='sys', ctx=Load()), attr='base_prefix', ctx=Load())])), Assign(targets=[Name(id='ensurepip', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='ENSUREPIP_OPTIONS')], keywords=[])), Return(value=BoolOp(op=And(), values=[Name(id='PY39', ctx=Load()), Name(id='framework', ctx=Load()), Name(id='homebrew', ctx=Load()), UnaryOp(op=Not(), operand=Name(id='venv', ctx=Load())), UnaryOp(op=Not(), operand=Name(id='ensurepip', ctx=Load()))]))], decorator_list=[Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='lru_cache', ctx=Load()), args=[], keywords=[])]), Assign(targets=[Name(id='schemes', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='osx_framework_library', value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='stdlib', value=Constant(value='{installed_base}/{platlibdir}/python{py_version_short}')), keyword(arg='platstdlib', value=Constant(value='{platbase}/{platlibdir}/python{py_version_short}')), keyword(arg='purelib', value=Constant(value='{homebrew_prefix}/lib/python{py_version_short}/site-packages')), keyword(arg='platlib', value=Constant(value='{homebrew_prefix}/{platlibdir}/python{py_version_short}/site-packages')), keyword(arg='include', value=Constant(value='{installed_base}/include/python{py_version_short}{abiflags}')), keyword(arg='platinclude', value=Constant(value='{installed_platbase}/include/python{py_version_short}{abiflags}')), keyword(arg='scripts', value=Constant(value='{homebrew_prefix}/bin')), keyword(arg='data', value=Constant(value='{homebrew_prefix}'))]))])), FunctionDef(name='vars', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='enabled', ctx=Load()), args=[], keywords=[])), body=[Return(value=Dict(keys=[], values=[]))], orelse=[]), Assign(targets=[Name(id='homebrew_prefix', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='subprocess', ctx=Load()), attr='check_output', ctx=Load()), args=[List(elts=[Constant(value='brew'), Constant(value='--prefix')], ctx=Load())], keywords=[keyword(arg='text', value=Constant(value=True))]), attr='strip', ctx=Load()), args=[], keywords=[])), Return(value=Call(func=Name(id='locals', ctx=Load()), args=[], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='lru_cache', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='scheme', args=arguments(posonlyargs=[], args=[arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Override the selected scheme for posix_prefix.\n    ')), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Call(func=Name(id='enabled', ctx=Load()), args=[], keywords=[])), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='_prefix')], keywords=[]))]), body=[Return(value=Name(id='name', ctx=Load()))], orelse=[]), Return(value=Constant(value='osx_framework_library'))], decorator_list=[])], type_ignores=[])