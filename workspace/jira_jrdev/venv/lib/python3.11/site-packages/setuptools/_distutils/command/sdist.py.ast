Module(body=[Expr(value=Constant(value="distutils.command.sdist\n\nImplements the Distutils 'sdist' command (create a source distribution).")), Import(names=[alias(name='os')]), Import(names=[alias(name='sys')]), ImportFrom(module='glob', names=[alias(name='glob')], level=0), ImportFrom(module='warnings', names=[alias(name='warn')], level=0), ImportFrom(module='core', names=[alias(name='Command')], level=2), ImportFrom(module='distutils', names=[alias(name='dir_util')], level=0), ImportFrom(module='distutils', names=[alias(name='file_util')], level=0), ImportFrom(module='distutils', names=[alias(name='archive_util')], level=0), ImportFrom(module='text_file', names=[alias(name='TextFile')], level=2), ImportFrom(module='filelist', names=[alias(name='FileList')], level=2), ImportFrom(module='distutils._log', names=[alias(name='log')], level=0), ImportFrom(module='util', names=[alias(name='convert_path')], level=2), ImportFrom(module='errors', names=[alias(name='DistutilsOptionError'), alias(name='DistutilsTemplateError')], level=2), FunctionDef(name='show_formats', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Print all possible values for the \'formats\' option (used by\n    the "--help-formats" command-line option).\n    ')), ImportFrom(module='fancy_getopt', names=[alias(name='FancyGetopt')], level=2), ImportFrom(module='archive_util', names=[alias(name='ARCHIVE_FORMATS')], level=2), Assign(targets=[Name(id='formats', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='format', ctx=Store()), iter=Call(func=Attribute(value=Name(id='ARCHIVE_FORMATS', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='formats', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[BinOp(left=Constant(value='formats='), op=Add(), right=Name(id='format', ctx=Load())), Constant(value=None), Subscript(value=Subscript(value=Name(id='ARCHIVE_FORMATS', ctx=Load()), slice=Name(id='format', ctx=Load()), ctx=Load()), slice=Constant(value=2), ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='formats', ctx=Load()), attr='sort', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Call(func=Name(id='FancyGetopt', ctx=Load()), args=[Name(id='formats', ctx=Load())], keywords=[]), attr='print_help', ctx=Load()), args=[Constant(value='List of available source distribution formats:')], keywords=[]))], decorator_list=[]), ClassDef(name='sdist', bases=[Name(id='Command', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='description', ctx=Store())], value=Constant(value='create a source distribution (tarball, zip file, etc.)')), FunctionDef(name='checking_metadata', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Callable used for the check sub-command.\n\n        Placed here so user_options can view it')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='metadata_check', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='user_options', ctx=Store())], value=List(elts=[Tuple(elts=[Constant(value='template='), Constant(value='t'), Constant(value='name of manifest template file [default: MANIFEST.in]')], ctx=Load()), Tuple(elts=[Constant(value='manifest='), Constant(value='m'), Constant(value='name of manifest file [default: MANIFEST]')], ctx=Load()), Tuple(elts=[Constant(value='use-defaults'), Constant(value=None), Constant(value='include the default file set in the manifest [default; disable with --no-defaults]')], ctx=Load()), Tuple(elts=[Constant(value='no-defaults'), Constant(value=None), Constant(value="don't include the default file set")], ctx=Load()), Tuple(elts=[Constant(value='prune'), Constant(value=None), Constant(value='specifically exclude files/directories that should not be distributed (build tree, RCS/CVS dirs, etc.) [default; disable with --no-prune]')], ctx=Load()), Tuple(elts=[Constant(value='no-prune'), Constant(value=None), Constant(value="don't automatically exclude anything")], ctx=Load()), Tuple(elts=[Constant(value='manifest-only'), Constant(value='o'), Constant(value='just regenerate the manifest and then stop (implies --force-manifest)')], ctx=Load()), Tuple(elts=[Constant(value='force-manifest'), Constant(value='f'), Constant(value='forcibly regenerate the manifest and carry on as usual. Deprecated: now the manifest is always regenerated.')], ctx=Load()), Tuple(elts=[Constant(value='formats='), Constant(value=None), Constant(value='formats for source distribution (comma-separated list)')], ctx=Load()), Tuple(elts=[Constant(value='keep-temp'), Constant(value='k'), BinOp(left=Constant(value='keep the distribution tree around after creating '), op=Add(), right=Constant(value='archive file(s)'))], ctx=Load()), Tuple(elts=[Constant(value='dist-dir='), Constant(value='d'), Constant(value='directory to put the source distribution archive(s) in [default: dist]')], ctx=Load()), Tuple(elts=[Constant(value='metadata-check'), Constant(value=None), Constant(value='Ensure that all required elements of meta-data are supplied. Warn if any missing. [default]')], ctx=Load()), Tuple(elts=[Constant(value='owner='), Constant(value='u'), Constant(value='Owner name used when creating a tar file [default: current user]')], ctx=Load()), Tuple(elts=[Constant(value='group='), Constant(value='g'), Constant(value='Group name used when creating a tar file [default: current group]')], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='boolean_options', ctx=Store())], value=List(elts=[Constant(value='use-defaults'), Constant(value='prune'), Constant(value='manifest-only'), Constant(value='force-manifest'), Constant(value='keep-temp'), Constant(value='metadata-check')], ctx=Load())), Assign(targets=[Name(id='help_options', ctx=Store())], value=List(elts=[Tuple(elts=[Constant(value='help-formats'), Constant(value=None), Constant(value='list available distribution formats'), Name(id='show_formats', ctx=Load())], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='negative_opt', ctx=Store())], value=Dict(keys=[Constant(value='no-defaults'), Constant(value='no-prune')], values=[Constant(value='use-defaults'), Constant(value='prune')])), Assign(targets=[Name(id='sub_commands', ctx=Store())], value=List(elts=[Tuple(elts=[Constant(value='check'), Name(id='checking_metadata', ctx=Load())], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='READMES', ctx=Store())], value=Tuple(elts=[Constant(value='README'), Constant(value='README.txt'), Constant(value='README.rst')], ctx=Load())), FunctionDef(name='initialize_options', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='template', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='manifest', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='use_defaults', ctx=Store())], value=Constant(value=1)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='prune', ctx=Store())], value=Constant(value=1)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='manifest_only', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='force_manifest', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='formats', ctx=Store())], value=List(elts=[Constant(value='gztar')], ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='keep_temp', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='dist_dir', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='archive_files', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='metadata_check', ctx=Store())], value=Constant(value=1)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='owner', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='group', ctx=Store())], value=Constant(value=None))], decorator_list=[]), FunctionDef(name='finalize_options', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='manifest', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='manifest', ctx=Store())], value=Constant(value='MANIFEST'))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='template', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='template', ctx=Store())], value=Constant(value='MANIFEST.in'))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='ensure_string_list', ctx=Load()), args=[Constant(value='formats')], keywords=[])), Assign(targets=[Name(id='bad_format', ctx=Store())], value=Call(func=Attribute(value=Name(id='archive_util', ctx=Load()), attr='check_archive_formats', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='formats', ctx=Load())], keywords=[])), If(test=Name(id='bad_format', ctx=Load()), body=[Raise(exc=Call(func=Name(id='DistutilsOptionError', ctx=Load()), args=[BinOp(left=Constant(value="unknown archive format '%s'"), op=Mod(), right=Name(id='bad_format', ctx=Load()))], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='dist_dir', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='dist_dir', ctx=Store())], value=Constant(value='dist'))], orelse=[])], decorator_list=[]), FunctionDef(name='run', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='filelist', ctx=Store())], value=Call(func=Name(id='FileList', ctx=Load()), args=[], keywords=[])), For(target=Name(id='cmd_name', ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_sub_commands', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='run_command', ctx=Load()), args=[Name(id='cmd_name', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_file_list', ctx=Load()), args=[], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='manifest_only', ctx=Load()), body=[Return()], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='make_distribution', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='check_metadata', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Deprecated API.')), Expr(value=Call(func=Name(id='warn', ctx=Load()), args=[Constant(value='distutils.command.sdist.check_metadata is deprecated,               use the check command instead'), Name(id='PendingDeprecationWarning', ctx=Load())], keywords=[])), Assign(targets=[Name(id='check', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='get_command_obj', ctx=Load()), args=[Constant(value='check')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='check', ctx=Load()), attr='ensure_finalized', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='check', ctx=Load()), attr='run', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='get_file_list', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Figure out the list of files to include in the source\n        distribution, and put it in 'self.filelist'.  This might involve\n        reading the manifest template (and writing the manifest), or just\n        reading the manifest, or just using the default file set -- it all\n        depends on the user's options.\n        ")), Assign(targets=[Name(id='template_exists', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isfile', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='template', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Name(id='template_exists', ctx=Load())), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_manifest_is_not_generated', ctx=Load()), args=[], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='read_manifest', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='filelist', ctx=Load()), attr='sort', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='filelist', ctx=Load()), attr='remove_duplicates', ctx=Load()), args=[], keywords=[])), Return()], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='template_exists', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='warn', ctx=Load()), args=[BinOp(left=BinOp(left=Constant(value="manifest template '%s' does not exist "), op=Add(), right=Constant(value='(using default file list)')), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='template', ctx=Load()))], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='filelist', ctx=Load()), attr='findall', ctx=Load()), args=[], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='use_defaults', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='add_defaults', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Name(id='template_exists', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='read_template', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='prune', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='prune_file_list', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='filelist', ctx=Load()), attr='sort', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='filelist', ctx=Load()), attr='remove_duplicates', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_manifest', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='add_defaults', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Add all the default files to self.filelist:\n          - README or README.txt\n          - setup.py\n          - tests/test*.py and test/test*.py\n          - all pure Python modules mentioned in setup script\n          - all files pointed by package_data (build_py)\n          - all files defined in data_files.\n          - all files defined as scripts.\n          - all C sources listed as part of extensions or C libraries\n            in the setup script (doesn't catch C headers!)\n        Warns if (README or README.txt) or setup.py are missing; everything\n        else is optional.\n        ")), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_add_defaults_standards', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_add_defaults_optional', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_add_defaults_python', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_add_defaults_data_files', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_add_defaults_ext', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_add_defaults_c_libs', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_add_defaults_scripts', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='_cs_path_exists', args=arguments(posonlyargs=[], args=[arg(arg='fspath')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Case-sensitive path existence check\n\n        >>> sdist._cs_path_exists(__file__)\n        True\n        >>> sdist._cs_path_exists(__file__.upper())\n        False\n        ')), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='fspath', ctx=Load())], keywords=[])), body=[Return(value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='abspath', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Name(id='fspath', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='directory', ctx=Store()), Name(id='filename', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='split', ctx=Load()), args=[Name(id='abspath', ctx=Load())], keywords=[])), Return(value=Compare(left=Name(id='filename', ctx=Load()), ops=[In()], comparators=[Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='listdir', ctx=Load()), args=[Name(id='directory', ctx=Load())], keywords=[])]))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='_add_defaults_standards', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='standards', ctx=Store())], value=List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='READMES', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='script_name', ctx=Load())], ctx=Load())), For(target=Name(id='fn', ctx=Store()), iter=Name(id='standards', ctx=Load()), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='fn', ctx=Load()), Name(id='tuple', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='alts', ctx=Store())], value=Name(id='fn', ctx=Load())), Assign(targets=[Name(id='got_it', ctx=Store())], value=Constant(value=False)), For(target=Name(id='fn', ctx=Store()), iter=Name(id='alts', ctx=Load()), body=[If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_cs_path_exists', ctx=Load()), args=[Name(id='fn', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='got_it', ctx=Store())], value=Constant(value=True)), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='filelist', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='fn', ctx=Load())], keywords=[])), Break()], orelse=[])], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='got_it', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='warn', ctx=Load()), args=[BinOp(left=Constant(value='standard file not found: should have one of '), op=Add(), right=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Name(id='alts', ctx=Load())], keywords=[]))], keywords=[]))], orelse=[])], orelse=[If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_cs_path_exists', ctx=Load()), args=[Name(id='fn', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='filelist', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='fn', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='warn', ctx=Load()), args=[BinOp(left=Constant(value="standard file '%s' not found"), op=Mod(), right=Name(id='fn', ctx=Load()))], keywords=[]))])])], orelse=[])], decorator_list=[]), FunctionDef(name='_add_defaults_optional', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='optional', ctx=Store())], value=List(elts=[Constant(value='tests/test*.py'), Constant(value='test/test*.py'), Constant(value='setup.cfg')], ctx=Load())), For(target=Name(id='pattern', ctx=Store()), iter=Name(id='optional', ctx=Load()), body=[Assign(targets=[Name(id='files', ctx=Store())], value=Call(func=Name(id='filter', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isfile', ctx=Load()), Call(func=Name(id='glob', ctx=Load()), args=[Name(id='pattern', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='filelist', ctx=Load()), attr='extend', ctx=Load()), args=[Name(id='files', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='_add_defaults_python', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='build_py', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_finalized_command', ctx=Load()), args=[Constant(value='build_py')], keywords=[])), If(test=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='has_pure_modules', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='filelist', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Attribute(value=Name(id='build_py', ctx=Load()), attr='get_source_files', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[]), For(target=Tuple(elts=[Name(id='pkg', ctx=Store()), Name(id='src_dir', ctx=Store()), Name(id='build_dir', ctx=Store()), Name(id='filenames', ctx=Store())], ctx=Store()), iter=Attribute(value=Name(id='build_py', ctx=Load()), attr='data_files', ctx=Load()), body=[For(target=Name(id='filename', ctx=Store()), iter=Name(id='filenames', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='filelist', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='src_dir', ctx=Load()), Name(id='filename', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='_add_defaults_data_files', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='has_data_files', ctx=Load()), args=[], keywords=[]), body=[For(target=Name(id='item', ctx=Store()), iter=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='data_files', ctx=Load()), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='item', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='item', ctx=Store())], value=Call(func=Name(id='convert_path', ctx=Load()), args=[Name(id='item', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isfile', ctx=Load()), args=[Name(id='item', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='filelist', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='item', ctx=Load())], keywords=[]))], orelse=[])], orelse=[Assign(targets=[Tuple(elts=[Name(id='dirname', ctx=Store()), Name(id='filenames', ctx=Store())], ctx=Store())], value=Name(id='item', ctx=Load())), For(target=Name(id='f', ctx=Store()), iter=Name(id='filenames', ctx=Load()), body=[Assign(targets=[Name(id='f', ctx=Store())], value=Call(func=Name(id='convert_path', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isfile', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='filelist', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])])], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='_add_defaults_ext', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='has_ext_modules', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='build_ext', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_finalized_command', ctx=Load()), args=[Constant(value='build_ext')], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='filelist', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Attribute(value=Name(id='build_ext', ctx=Load()), attr='get_source_files', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='_add_defaults_c_libs', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='has_c_libraries', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='build_clib', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_finalized_command', ctx=Load()), args=[Constant(value='build_clib')], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='filelist', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Attribute(value=Name(id='build_clib', ctx=Load()), attr='get_source_files', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='_add_defaults_scripts', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='has_scripts', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='build_scripts', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_finalized_command', ctx=Load()), args=[Constant(value='build_scripts')], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='filelist', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Attribute(value=Name(id='build_scripts', ctx=Load()), attr='get_source_files', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='read_template', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Read and parse manifest template file named by self.template.\n\n        (usually "MANIFEST.in") The parsing and processing is done by\n        \'self.filelist\', which updates itself accordingly.\n        ')), Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value="reading manifest template '%s'"), Attribute(value=Name(id='self', ctx=Load()), attr='template', ctx=Load())], keywords=[])), Assign(targets=[Name(id='template', ctx=Store())], value=Call(func=Name(id='TextFile', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='template', ctx=Load())], keywords=[keyword(arg='strip_comments', value=Constant(value=1)), keyword(arg='skip_blanks', value=Constant(value=1)), keyword(arg='join_lines', value=Constant(value=1)), keyword(arg='lstrip_ws', value=Constant(value=1)), keyword(arg='rstrip_ws', value=Constant(value=1)), keyword(arg='collapse_join', value=Constant(value=1))])), Try(body=[While(test=Constant(value=True), body=[Assign(targets=[Name(id='line', ctx=Store())], value=Call(func=Attribute(value=Name(id='template', ctx=Load()), attr='readline', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='line', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Break()], orelse=[]), Try(body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='filelist', ctx=Load()), attr='process_template_line', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='DistutilsTemplateError', ctx=Load()), Name(id='ValueError', ctx=Load())], ctx=Load()), name='msg', body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='warn', ctx=Load()), args=[BinOp(left=Constant(value='%s, line %d: %s'), op=Mod(), right=Tuple(elts=[Attribute(value=Name(id='template', ctx=Load()), attr='filename', ctx=Load()), Attribute(value=Name(id='template', ctx=Load()), attr='current_line', ctx=Load()), Name(id='msg', ctx=Load())], ctx=Load()))], keywords=[]))])], orelse=[], finalbody=[])], orelse=[])], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='template', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))])], decorator_list=[]), FunctionDef(name='prune_file_list', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Prune off branches that might slip into the file list as created\n        by \'read_template()\', but really don\'t belong there:\n          * the build tree (typically "build")\n          * the release tree itself (only an issue if we ran "sdist"\n            previously with --keep-temp, or it aborted)\n          * any RCS, CVS, .svn, .hg, .git, .bzr, _darcs directories\n        ')), Assign(targets=[Name(id='build', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_finalized_command', ctx=Load()), args=[Constant(value='build')], keywords=[])), Assign(targets=[Name(id='base_dir', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='get_fullname', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='filelist', ctx=Load()), attr='exclude_pattern', ctx=Load()), args=[Constant(value=None)], keywords=[keyword(arg='prefix', value=Attribute(value=Name(id='build', ctx=Load()), attr='build_base', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='filelist', ctx=Load()), attr='exclude_pattern', ctx=Load()), args=[Constant(value=None)], keywords=[keyword(arg='prefix', value=Name(id='base_dir', ctx=Load()))])), If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), ops=[Eq()], comparators=[Constant(value='win32')]), body=[Assign(targets=[Name(id='seps', ctx=Store())], value=Constant(value='/|\\\\'))], orelse=[Assign(targets=[Name(id='seps', ctx=Store())], value=Constant(value='/'))]), Assign(targets=[Name(id='vcs_dirs', ctx=Store())], value=List(elts=[Constant(value='RCS'), Constant(value='CVS'), Constant(value='\\.svn'), Constant(value='\\.hg'), Constant(value='\\.git'), Constant(value='\\.bzr'), Constant(value='_darcs')], ctx=Load())), Assign(targets=[Name(id='vcs_ptrn', ctx=Store())], value=Call(func=Attribute(value=Constant(value='(^|{})({})({}).*'), attr='format', ctx=Load()), args=[Name(id='seps', ctx=Load()), Call(func=Attribute(value=Constant(value='|'), attr='join', ctx=Load()), args=[Name(id='vcs_dirs', ctx=Load())], keywords=[]), Name(id='seps', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='filelist', ctx=Load()), attr='exclude_pattern', ctx=Load()), args=[Name(id='vcs_ptrn', ctx=Load())], keywords=[keyword(arg='is_regex', value=Constant(value=1))]))], decorator_list=[]), FunctionDef(name='write_manifest', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Write the file list in 'self.filelist' (presumably as filled in\n        by 'add_defaults()' and 'read_template()') to the manifest file\n        named by 'self.manifest'.\n        ")), If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_manifest_is_not_generated', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='info', ctx=Load()), args=[BinOp(left=Constant(value="not writing to manually maintained manifest file '%s'"), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='manifest', ctx=Load()))], keywords=[])), Return()], orelse=[]), Assign(targets=[Name(id='content', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='filelist', ctx=Load()), attr='files', ctx=Load()), slice=Slice(), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='content', ctx=Load()), attr='insert', ctx=Load()), args=[Constant(value=0), Constant(value='# file GENERATED by distutils, do NOT edit')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Attribute(value=Name(id='file_util', ctx=Load()), attr='write_file', ctx=Load()), Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='manifest', ctx=Load()), Name(id='content', ctx=Load())], ctx=Load()), BinOp(left=Constant(value="writing manifest file '%s'"), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='manifest', ctx=Load()))], keywords=[]))], decorator_list=[]), FunctionDef(name='_manifest_is_not_generated', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isfile', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='manifest', ctx=Load())], keywords=[])), body=[Return(value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='fp', ctx=Store())], value=Call(func=Name(id='open', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='manifest', ctx=Load())], keywords=[])), Try(body=[Assign(targets=[Name(id='first_line', ctx=Store())], value=Call(func=Attribute(value=Name(id='fp', ctx=Load()), attr='readline', ctx=Load()), args=[], keywords=[]))], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='fp', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))]), Return(value=Compare(left=Name(id='first_line', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='# file GENERATED by distutils, do NOT edit\n')]))], decorator_list=[]), FunctionDef(name='read_manifest', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Read the manifest file (named by 'self.manifest') and use it to\n        fill in 'self.filelist', the list of files to include in the source\n        distribution.\n        ")), Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value="reading manifest file '%s'"), Attribute(value=Name(id='self', ctx=Load()), attr='manifest', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='manifest', ctx=Load())], keywords=[]), optional_vars=Name(id='manifest', ctx=Store()))], body=[For(target=Name(id='line', ctx=Store()), iter=Name(id='manifest', ctx=Load()), body=[Assign(targets=[Name(id='line', ctx=Store())], value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[])), If(test=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='#')], keywords=[]), UnaryOp(op=Not(), operand=Name(id='line', ctx=Load()))]), body=[Continue()], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='filelist', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[]))], orelse=[])])], decorator_list=[]), FunctionDef(name='make_release_tree', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='base_dir'), arg(arg='files')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Create the directory tree that will become the source\n        distribution archive.  All directories implied by the filenames in\n        'files' are created under 'base_dir', and then we hard link or copy\n        (if hard linking is unavailable) those files into place.\n        Essentially, this duplicates the developer's source tree, but in a\n        directory named after the distribution, containing only the files\n        to be distributed.\n        ")), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='mkpath', ctx=Load()), args=[Name(id='base_dir', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='dir_util', ctx=Load()), attr='create_tree', ctx=Load()), args=[Name(id='base_dir', ctx=Load()), Name(id='files', ctx=Load())], keywords=[keyword(arg='dry_run', value=Attribute(value=Name(id='self', ctx=Load()), attr='dry_run', ctx=Load()))])), If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='os', ctx=Load()), Constant(value='link')], keywords=[]), body=[Assign(targets=[Name(id='link', ctx=Store())], value=Constant(value='hard')), Assign(targets=[Name(id='msg', ctx=Store())], value=BinOp(left=Constant(value='making hard links in %s...'), op=Mod(), right=Name(id='base_dir', ctx=Load())))], orelse=[Assign(targets=[Name(id='link', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='msg', ctx=Store())], value=BinOp(left=Constant(value='copying files to %s...'), op=Mod(), right=Name(id='base_dir', ctx=Load())))]), If(test=UnaryOp(op=Not(), operand=Name(id='files', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='no files to distribute -- empty manifest?')], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='info', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))]), For(target=Name(id='file', ctx=Store()), iter=Name(id='files', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isfile', ctx=Load()), args=[Name(id='file', ctx=Load())], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value="'%s' not a regular file -- skipping"), Name(id='file', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='dest', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='base_dir', ctx=Load()), Name(id='file', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='copy_file', ctx=Load()), args=[Name(id='file', ctx=Load()), Name(id='dest', ctx=Load())], keywords=[keyword(arg='link', value=Name(id='link', ctx=Load()))]))])], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='metadata', ctx=Load()), attr='write_pkg_info', ctx=Load()), args=[Name(id='base_dir', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='make_distribution', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Create the source distribution(s).  First, we create the release\n        tree with 'make_release_tree()'; then, we create all required\n        archive files (according to 'self.formats') from the release tree.\n        Finally, we clean up by blowing away the release tree (unless\n        'self.keep_temp' is true).  The list of archive files created is\n        stored so it can be retrieved later by 'get_archive_files()'.\n        ")), Assign(targets=[Name(id='base_dir', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='get_fullname', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='base_name', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='dist_dir', ctx=Load()), Name(id='base_dir', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='make_release_tree', ctx=Load()), args=[Name(id='base_dir', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='filelist', ctx=Load()), attr='files', ctx=Load())], keywords=[])), Assign(targets=[Name(id='archive_files', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=Compare(left=Constant(value='tar'), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='formats', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='formats', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='formats', ctx=Load()), attr='pop', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='formats', ctx=Load()), attr='index', ctx=Load()), args=[Constant(value='tar')], keywords=[])], keywords=[])], keywords=[]))], orelse=[]), For(target=Name(id='fmt', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='formats', ctx=Load()), body=[Assign(targets=[Name(id='file', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='make_archive', ctx=Load()), args=[Name(id='base_name', ctx=Load()), Name(id='fmt', ctx=Load())], keywords=[keyword(arg='base_dir', value=Name(id='base_dir', ctx=Load())), keyword(arg='owner', value=Attribute(value=Name(id='self', ctx=Load()), attr='owner', ctx=Load())), keyword(arg='group', value=Attribute(value=Name(id='self', ctx=Load()), attr='group', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='archive_files', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='file', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='dist_files', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value='sdist'), Constant(value=''), Name(id='file', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='archive_files', ctx=Store())], value=Name(id='archive_files', ctx=Load())), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='keep_temp', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='dir_util', ctx=Load()), attr='remove_tree', ctx=Load()), args=[Name(id='base_dir', ctx=Load())], keywords=[keyword(arg='dry_run', value=Attribute(value=Name(id='self', ctx=Load()), attr='dry_run', ctx=Load()))]))], orelse=[])], decorator_list=[]), FunctionDef(name='get_archive_files', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Return the list of archive files created when the command\n        was run, or None if the command hasn't run yet.\n        ")), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='archive_files', ctx=Load()))], decorator_list=[])], decorator_list=[])], type_ignores=[])