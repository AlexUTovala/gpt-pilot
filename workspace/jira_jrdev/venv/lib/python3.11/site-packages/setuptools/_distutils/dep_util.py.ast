Module(body=[Expr(value=Constant(value='distutils.dep_util\n\nUtility functions for simple, timestamp-based dependency of files\nand groups of files; also, function based entirely on such\ntimestamp dependency analysis.')), Import(names=[alias(name='os')]), ImportFrom(module='errors', names=[alias(name='DistutilsFileError')], level=1), FunctionDef(name='newer', args=arguments(posonlyargs=[], args=[arg(arg='source'), arg(arg='target')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Return true if 'source' exists and is more recently modified than\n    'target', or if 'source' exists and 'target' doesn't.  Return false if\n    both exist and 'target' is the same age or younger than 'source'.\n    Raise DistutilsFileError if 'source' does not exist.\n    ")), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='source', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='DistutilsFileError', ctx=Load()), args=[BinOp(left=Constant(value="file '%s' does not exist"), op=Mod(), right=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Name(id='source', ctx=Load())], keywords=[]))], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='target', ctx=Load())], keywords=[])), body=[Return(value=Constant(value=1))], orelse=[]), ImportFrom(module='stat', names=[alias(name='ST_MTIME')], level=0), Assign(targets=[Name(id='mtime1', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='stat', ctx=Load()), args=[Name(id='source', ctx=Load())], keywords=[]), slice=Name(id='ST_MTIME', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='mtime2', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='stat', ctx=Load()), args=[Name(id='target', ctx=Load())], keywords=[]), slice=Name(id='ST_MTIME', ctx=Load()), ctx=Load())), Return(value=Compare(left=Name(id='mtime1', ctx=Load()), ops=[Gt()], comparators=[Name(id='mtime2', ctx=Load())]))], decorator_list=[]), FunctionDef(name='newer_pairwise', args=arguments(posonlyargs=[], args=[arg(arg='sources'), arg(arg='targets')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Walk two filename lists in parallel, testing if each source is newer\n    than its corresponding target.  Return a pair of lists (sources,\n    targets) where source is newer than target, according to the semantics\n    of 'newer()'.\n    ")), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='sources', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='targets', ctx=Load())], keywords=[])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value="'sources' and 'targets' must be same length")], keywords=[]))], orelse=[]), Assign(targets=[Name(id='n_sources', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='n_targets', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='sources', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Call(func=Name(id='newer', ctx=Load()), args=[Subscript(value=Name(id='sources', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), Subscript(value=Name(id='targets', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='n_sources', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='sources', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='n_targets', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='targets', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Tuple(elts=[Name(id='n_sources', ctx=Load()), Name(id='n_targets', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='newer_group', args=arguments(posonlyargs=[], args=[arg(arg='sources'), arg(arg='target'), arg(arg='missing')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='error')]), body=[Expr(value=Constant(value='Return true if \'target\' is out-of-date with respect to any file\n    listed in \'sources\'.  In other words, if \'target\' exists and is newer\n    than every file in \'sources\', return false; otherwise return true.\n    \'missing\' controls what we do when a source file is missing; the\n    default ("error") is to blow up with an OSError from inside \'stat()\';\n    if it is "ignore", we silently drop any missing source files; if it is\n    "newer", any missing source files make us assume that \'target\' is\n    out-of-date (this is handy in "dry-run" mode: it\'ll make you pretend to\n    carry out commands that wouldn\'t work because inputs are missing, but\n    that doesn\'t matter because you\'re not actually going to run the\n    commands).\n    ')), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='target', ctx=Load())], keywords=[])), body=[Return(value=Constant(value=1))], orelse=[]), ImportFrom(module='stat', names=[alias(name='ST_MTIME')], level=0), Assign(targets=[Name(id='target_mtime', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='stat', ctx=Load()), args=[Name(id='target', ctx=Load())], keywords=[]), slice=Name(id='ST_MTIME', ctx=Load()), ctx=Load())), For(target=Name(id='source', ctx=Store()), iter=Name(id='sources', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='source', ctx=Load())], keywords=[])), body=[If(test=Compare(left=Name(id='missing', ctx=Load()), ops=[Eq()], comparators=[Constant(value='error')]), body=[Pass()], orelse=[If(test=Compare(left=Name(id='missing', ctx=Load()), ops=[Eq()], comparators=[Constant(value='ignore')]), body=[Continue()], orelse=[If(test=Compare(left=Name(id='missing', ctx=Load()), ops=[Eq()], comparators=[Constant(value='newer')]), body=[Return(value=Constant(value=1))], orelse=[])])])], orelse=[]), Assign(targets=[Name(id='source_mtime', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='stat', ctx=Load()), args=[Name(id='source', ctx=Load())], keywords=[]), slice=Name(id='ST_MTIME', ctx=Load()), ctx=Load())), If(test=Compare(left=Name(id='source_mtime', ctx=Load()), ops=[Gt()], comparators=[Name(id='target_mtime', ctx=Load())]), body=[Return(value=Constant(value=1))], orelse=[])], orelse=[Return(value=Constant(value=0))])], decorator_list=[])], type_ignores=[])