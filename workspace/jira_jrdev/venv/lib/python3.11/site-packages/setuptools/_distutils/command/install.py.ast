Module(body=[Expr(value=Constant(value="distutils.command.install\n\nImplements the Distutils 'install' command.")), Import(names=[alias(name='sys')]), Import(names=[alias(name='os')]), Import(names=[alias(name='contextlib')]), Import(names=[alias(name='sysconfig')]), Import(names=[alias(name='itertools')]), ImportFrom(module='distutils._log', names=[alias(name='log')], level=0), ImportFrom(module='core', names=[alias(name='Command')], level=2), ImportFrom(module='debug', names=[alias(name='DEBUG')], level=2), ImportFrom(module='sysconfig', names=[alias(name='get_config_vars')], level=2), ImportFrom(module='file_util', names=[alias(name='write_file')], level=2), ImportFrom(module='util', names=[alias(name='convert_path'), alias(name='subst_vars'), alias(name='change_root')], level=2), ImportFrom(module='util', names=[alias(name='get_platform')], level=2), ImportFrom(module='errors', names=[alias(name='DistutilsOptionError'), alias(name='DistutilsPlatformError')], level=2), ImportFrom(names=[alias(name='_framework_compat', asname='fw')], level=1), ImportFrom(names=[alias(name='_collections')], level=2), ImportFrom(module='site', names=[alias(name='USER_BASE')], level=0), ImportFrom(module='site', names=[alias(name='USER_SITE')], level=0), Assign(targets=[Name(id='HAS_USER_SITE', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='WINDOWS_SCHEME', ctx=Store())], value=Dict(keys=[Constant(value='purelib'), Constant(value='platlib'), Constant(value='headers'), Constant(value='scripts'), Constant(value='data')], values=[Constant(value='{base}/Lib/site-packages'), Constant(value='{base}/Lib/site-packages'), Constant(value='{base}/Include/{dist_name}'), Constant(value='{base}/Scripts'), Constant(value='{base}')])), Assign(targets=[Name(id='INSTALL_SCHEMES', ctx=Store())], value=Dict(keys=[Constant(value='posix_prefix'), Constant(value='posix_home'), Constant(value='nt'), Constant(value='pypy'), Constant(value='pypy_nt')], values=[Dict(keys=[Constant(value='purelib'), Constant(value='platlib'), Constant(value='headers'), Constant(value='scripts'), Constant(value='data')], values=[Constant(value='{base}/lib/{implementation_lower}{py_version_short}/site-packages'), Constant(value='{platbase}/{platlibdir}/{implementation_lower}{py_version_short}/site-packages'), Constant(value='{base}/include/{implementation_lower}{py_version_short}{abiflags}/{dist_name}'), Constant(value='{base}/bin'), Constant(value='{base}')]), Dict(keys=[Constant(value='purelib'), Constant(value='platlib'), Constant(value='headers'), Constant(value='scripts'), Constant(value='data')], values=[Constant(value='{base}/lib/{implementation_lower}'), Constant(value='{base}/{platlibdir}/{implementation_lower}'), Constant(value='{base}/include/{implementation_lower}/{dist_name}'), Constant(value='{base}/bin'), Constant(value='{base}')]), Name(id='WINDOWS_SCHEME', ctx=Load()), Dict(keys=[Constant(value='purelib'), Constant(value='platlib'), Constant(value='headers'), Constant(value='scripts'), Constant(value='data')], values=[Constant(value='{base}/site-packages'), Constant(value='{base}/site-packages'), Constant(value='{base}/include/{dist_name}'), Constant(value='{base}/bin'), Constant(value='{base}')]), Dict(keys=[Constant(value='purelib'), Constant(value='platlib'), Constant(value='headers'), Constant(value='scripts'), Constant(value='data')], values=[Constant(value='{base}/site-packages'), Constant(value='{base}/site-packages'), Constant(value='{base}/include/{dist_name}'), Constant(value='{base}/Scripts'), Constant(value='{base}')])])), If(test=Name(id='HAS_USER_SITE', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='INSTALL_SCHEMES', ctx=Load()), slice=Constant(value='nt_user'), ctx=Store())], value=Dict(keys=[Constant(value='purelib'), Constant(value='platlib'), Constant(value='headers'), Constant(value='scripts'), Constant(value='data')], values=[Constant(value='{usersite}'), Constant(value='{usersite}'), Constant(value='{userbase}/{implementation}{py_version_nodot_plat}/Include/{dist_name}'), Constant(value='{userbase}/{implementation}{py_version_nodot_plat}/Scripts'), Constant(value='{userbase}')])), Assign(targets=[Subscript(value=Name(id='INSTALL_SCHEMES', ctx=Load()), slice=Constant(value='posix_user'), ctx=Store())], value=Dict(keys=[Constant(value='purelib'), Constant(value='platlib'), Constant(value='headers'), Constant(value='scripts'), Constant(value='data')], values=[Constant(value='{usersite}'), Constant(value='{usersite}'), Constant(value='{userbase}/include/{implementation_lower}{py_version_short}{abiflags}/{dist_name}'), Constant(value='{userbase}/bin'), Constant(value='{userbase}')]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='INSTALL_SCHEMES', ctx=Load()), attr='update', ctx=Load()), args=[Attribute(value=Name(id='fw', ctx=Load()), attr='schemes', ctx=Load())], keywords=[])), Assign(targets=[Name(id='SCHEME_KEYS', ctx=Store())], value=Tuple(elts=[Constant(value='purelib'), Constant(value='platlib'), Constant(value='headers'), Constant(value='scripts'), Constant(value='data')], ctx=Load())), FunctionDef(name='_load_sysconfig_schemes', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='contextlib', ctx=Load()), attr='suppress', ctx=Load()), args=[Name(id='AttributeError', ctx=Load())], keywords=[]))], body=[Return(value=DictComp(key=Name(id='scheme', ctx=Load()), value=Call(func=Attribute(value=Name(id='sysconfig', ctx=Load()), attr='get_paths', ctx=Load()), args=[Name(id='scheme', ctx=Load())], keywords=[keyword(arg='expand', value=Constant(value=False))]), generators=[comprehension(target=Name(id='scheme', ctx=Store()), iter=Call(func=Attribute(value=Name(id='sysconfig', ctx=Load()), attr='get_scheme_names', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)]))])], decorator_list=[]), FunctionDef(name='_load_schemes', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Extend default schemes with schemes from sysconfig.\n    ')), Assign(targets=[Name(id='sysconfig_schemes', ctx=Store())], value=BoolOp(op=Or(), values=[Call(func=Name(id='_load_sysconfig_schemes', ctx=Load()), args=[], keywords=[]), Dict(keys=[], values=[])])), Return(value=DictComp(key=Name(id='scheme', ctx=Load()), value=Dict(keys=[None, None], values=[Call(func=Attribute(value=Name(id='INSTALL_SCHEMES', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='scheme', ctx=Load()), Dict(keys=[], values=[])], keywords=[]), Call(func=Attribute(value=Name(id='sysconfig_schemes', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='scheme', ctx=Load()), Dict(keys=[], values=[])], keywords=[])]), generators=[comprehension(target=Name(id='scheme', ctx=Store()), iter=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Name(id='itertools', ctx=Load()), attr='chain', ctx=Load()), args=[Name(id='INSTALL_SCHEMES', ctx=Load()), Name(id='sysconfig_schemes', ctx=Load())], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[]), FunctionDef(name='_get_implementation', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='sys', ctx=Load()), Constant(value='pypy_version_info')], keywords=[]), body=[Return(value=Constant(value='PyPy'))], orelse=[Return(value=Constant(value='Python'))])], decorator_list=[]), FunctionDef(name='_select_scheme', args=arguments(posonlyargs=[], args=[arg(arg='ob'), arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='scheme', ctx=Store())], value=Call(func=Name(id='_inject_headers', ctx=Load()), args=[Name(id='name', ctx=Load()), Call(func=Name(id='_load_scheme', ctx=Load()), args=[Call(func=Name(id='_resolve_scheme', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Call(func=Name(id='vars', ctx=Load()), args=[Name(id='ob', ctx=Load())], keywords=[]), attr='update', ctx=Load()), args=[Call(func=Name(id='_remove_set', ctx=Load()), args=[Name(id='ob', ctx=Load()), Call(func=Name(id='_scheme_attrs', ctx=Load()), args=[Name(id='scheme', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='_remove_set', args=arguments(posonlyargs=[], args=[arg(arg='ob'), arg(arg='attrs')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Include only attrs that are None in ob.\n    ')), Return(value=DictComp(key=Name(id='key', ctx=Load()), value=Name(id='value', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='attrs', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[Compare(left=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='ob', ctx=Load()), Name(id='key', ctx=Load())], keywords=[]), ops=[Is()], comparators=[Constant(value=None)])], is_async=0)]))], decorator_list=[]), FunctionDef(name='_resolve_scheme', args=arguments(posonlyargs=[], args=[arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='os_name', ctx=Store()), Name(id='sep', ctx=Store()), Name(id='key', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='partition', ctx=Load()), args=[Constant(value='_')], keywords=[])), Try(body=[Assign(targets=[Name(id='resolved', ctx=Store())], value=Call(func=Attribute(value=Name(id='sysconfig', ctx=Load()), attr='get_preferred_scheme', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Assign(targets=[Name(id='resolved', ctx=Store())], value=Call(func=Attribute(value=Name(id='fw', ctx=Load()), attr='scheme', ctx=Load()), args=[Call(func=Name(id='_pypy_hack', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])], keywords=[]))])], orelse=[], finalbody=[]), Return(value=Name(id='resolved', ctx=Load()))], decorator_list=[]), FunctionDef(name='_load_scheme', args=arguments(posonlyargs=[], args=[arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Subscript(value=Call(func=Name(id='_load_schemes', ctx=Load()), args=[], keywords=[]), slice=Name(id='name', ctx=Load()), ctx=Load()))], decorator_list=[]), FunctionDef(name='_inject_headers', args=arguments(posonlyargs=[], args=[arg(arg='name'), arg(arg='scheme')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Given a scheme name and the resolved scheme,\n    if the scheme does not include headers, resolve\n    the fallback scheme for the name and use headers\n    from it. pypa/distutils#88\n    ')), Assign(targets=[Name(id='fallback', ctx=Store())], value=Call(func=Name(id='_load_scheme', ctx=Load()), args=[Call(func=Name(id='_pypy_hack', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='scheme', ctx=Load()), attr='setdefault', ctx=Load()), args=[Constant(value='headers'), Subscript(value=Name(id='fallback', ctx=Load()), slice=Constant(value='headers'), ctx=Load())], keywords=[])), Return(value=Name(id='scheme', ctx=Load()))], decorator_list=[]), FunctionDef(name='_scheme_attrs', args=arguments(posonlyargs=[], args=[arg(arg='scheme')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Resolve install directories by applying the install schemes.')), Return(value=DictComp(key=JoinedStr(values=[Constant(value='install_'), FormattedValue(value=Name(id='key', ctx=Load()), conversion=-1)]), value=Subscript(value=Name(id='scheme', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='key', ctx=Store()), iter=Name(id='SCHEME_KEYS', ctx=Load()), ifs=[], is_async=0)]))], decorator_list=[]), FunctionDef(name='_pypy_hack', args=arguments(posonlyargs=[], args=[arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='PY37', ctx=Store())], value=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), ops=[Lt()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=8)], ctx=Load())])), Assign(targets=[Name(id='old_pypy', ctx=Store())], value=BoolOp(op=And(), values=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='sys', ctx=Load()), Constant(value='pypy_version_info')], keywords=[]), Name(id='PY37', ctx=Load())])), Assign(targets=[Name(id='prefix', ctx=Store())], value=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='endswith', ctx=Load()), args=[Tuple(elts=[Constant(value='_user'), Constant(value='_home')], ctx=Load())], keywords=[]))), Assign(targets=[Name(id='pypy_name', ctx=Store())], value=BinOp(left=Constant(value='pypy'), op=Add(), right=BinOp(left=Constant(value='_nt'), op=Mult(), right=Compare(left=Attribute(value=Name(id='os', ctx=Load()), attr='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='nt')])))), Return(value=IfExp(test=BoolOp(op=And(), values=[Name(id='old_pypy', ctx=Load()), Name(id='prefix', ctx=Load())]), body=Name(id='pypy_name', ctx=Load()), orelse=Name(id='name', ctx=Load())))], decorator_list=[]), ClassDef(name='install', bases=[Name(id='Command', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='description', ctx=Store())], value=Constant(value='install everything from build directory')), Assign(targets=[Name(id='user_options', ctx=Store())], value=List(elts=[Tuple(elts=[Constant(value='prefix='), Constant(value=None), Constant(value='installation prefix')], ctx=Load()), Tuple(elts=[Constant(value='exec-prefix='), Constant(value=None), Constant(value='(Unix only) prefix for platform-specific files')], ctx=Load()), Tuple(elts=[Constant(value='home='), Constant(value=None), Constant(value='(Unix only) home directory to install under')], ctx=Load()), Tuple(elts=[Constant(value='install-base='), Constant(value=None), Constant(value='base installation directory (instead of --prefix or --home)')], ctx=Load()), Tuple(elts=[Constant(value='install-platbase='), Constant(value=None), BinOp(left=Constant(value='base installation directory for platform-specific files '), op=Add(), right=Constant(value='(instead of --exec-prefix or --home)'))], ctx=Load()), Tuple(elts=[Constant(value='root='), Constant(value=None), Constant(value='install everything relative to this alternate root directory')], ctx=Load()), Tuple(elts=[Constant(value='install-purelib='), Constant(value=None), Constant(value='installation directory for pure Python module distributions')], ctx=Load()), Tuple(elts=[Constant(value='install-platlib='), Constant(value=None), Constant(value='installation directory for non-pure module distributions')], ctx=Load()), Tuple(elts=[Constant(value='install-lib='), Constant(value=None), BinOp(left=Constant(value='installation directory for all module distributions '), op=Add(), right=Constant(value='(overrides --install-purelib and --install-platlib)'))], ctx=Load()), Tuple(elts=[Constant(value='install-headers='), Constant(value=None), Constant(value='installation directory for C/C++ headers')], ctx=Load()), Tuple(elts=[Constant(value='install-scripts='), Constant(value=None), Constant(value='installation directory for Python scripts')], ctx=Load()), Tuple(elts=[Constant(value='install-data='), Constant(value=None), Constant(value='installation directory for data files')], ctx=Load()), Tuple(elts=[Constant(value='compile'), Constant(value='c'), Constant(value='compile .py to .pyc [default]')], ctx=Load()), Tuple(elts=[Constant(value='no-compile'), Constant(value=None), Constant(value="don't compile .py files")], ctx=Load()), Tuple(elts=[Constant(value='optimize='), Constant(value='O'), Constant(value='also compile with optimization: -O1 for "python -O", -O2 for "python -OO", and -O0 to disable [default: -O0]')], ctx=Load()), Tuple(elts=[Constant(value='force'), Constant(value='f'), Constant(value='force installation (overwrite any existing files)')], ctx=Load()), Tuple(elts=[Constant(value='skip-build'), Constant(value=None), Constant(value='skip rebuilding everything (for testing/debugging)')], ctx=Load()), Tuple(elts=[Constant(value='record='), Constant(value=None), Constant(value='filename in which to record list of installed files')], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='boolean_options', ctx=Store())], value=List(elts=[Constant(value='compile'), Constant(value='force'), Constant(value='skip-build')], ctx=Load())), If(test=Name(id='HAS_USER_SITE', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='user_options', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Constant(value='user'), Constant(value=None), BinOp(left=Constant(value="install in user site-package '%s'"), op=Mod(), right=Name(id='USER_SITE', ctx=Load()))], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='boolean_options', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='user')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='negative_opt', ctx=Store())], value=Dict(keys=[Constant(value='no-compile')], values=[Constant(value='compile')])), FunctionDef(name='initialize_options', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Initializes options.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='prefix', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='exec_prefix', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='home', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='user', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='install_base', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='install_platbase', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='root', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='install_purelib', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='install_platlib', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='install_headers', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='install_lib', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='install_scripts', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='install_data', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='install_userbase', ctx=Store())], value=Name(id='USER_BASE', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='install_usersite', ctx=Store())], value=Name(id='USER_SITE', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='compile', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='optimize', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='extra_path', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='install_path_file', ctx=Store())], value=Constant(value=1)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='force', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='skip_build', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='warn_dir', ctx=Store())], value=Constant(value=1)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='build_base', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='build_lib', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='record', ctx=Store())], value=Constant(value=None))], decorator_list=[]), FunctionDef(name='finalize_options', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Finalizes options.')), If(test=BoolOp(op=And(), values=[BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='prefix', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='exec_prefix', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='home', ctx=Load())]), BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='install_base', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='install_platbase', ctx=Load())])]), body=[Raise(exc=Call(func=Name(id='DistutilsOptionError', ctx=Load()), args=[BinOp(left=Constant(value='must supply either prefix/exec-prefix/home or '), op=Add(), right=Constant(value='install-base/install-platbase -- not both'))], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='home', ctx=Load()), BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='prefix', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='exec_prefix', ctx=Load())])]), body=[Raise(exc=Call(func=Name(id='DistutilsOptionError', ctx=Load()), args=[Constant(value='must supply either home or prefix/exec-prefix -- not both')], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='user', ctx=Load()), BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='prefix', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='exec_prefix', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='home', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='install_base', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='install_platbase', ctx=Load())])]), body=[Raise(exc=Call(func=Name(id='DistutilsOptionError', ctx=Load()), args=[Constant(value="can't combine user with prefix, exec_prefix/home, or install_(plat)base")], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='os', ctx=Load()), attr='name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='posix')]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='exec_prefix', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value='exec-prefix option ignored on this platform')], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='exec_prefix', ctx=Store())], value=Constant(value=None))], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='dump_dirs', ctx=Load()), args=[Constant(value='pre-finalize_{unix,other}')], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='os', ctx=Load()), attr='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='posix')]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='finalize_unix', ctx=Load()), args=[], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='finalize_other', ctx=Load()), args=[], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='dump_dirs', ctx=Load()), args=[Constant(value='post-finalize_{unix,other}()')], keywords=[])), Assign(targets=[Name(id='py_version', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[]), slice=Constant(value=0), ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='prefix', ctx=Store()), Name(id='exec_prefix', ctx=Store())], ctx=Store())], value=Call(func=Name(id='get_config_vars', ctx=Load()), args=[Constant(value='prefix'), Constant(value='exec_prefix')], keywords=[])), Try(body=[Assign(targets=[Name(id='abiflags', ctx=Store())], value=Attribute(value=Name(id='sys', ctx=Load()), attr='abiflags', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Assign(targets=[Name(id='abiflags', ctx=Store())], value=Constant(value=''))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='local_vars', ctx=Store())], value=Dict(keys=[Constant(value='dist_name'), Constant(value='dist_version'), Constant(value='dist_fullname'), Constant(value='py_version'), Constant(value='py_version_short'), Constant(value='py_version_nodot'), Constant(value='sys_prefix'), Constant(value='prefix'), Constant(value='sys_exec_prefix'), Constant(value='exec_prefix'), Constant(value='abiflags'), Constant(value='platlibdir'), Constant(value='implementation_lower'), Constant(value='implementation')], values=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='get_name', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='get_version', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='get_fullname', ctx=Load()), args=[], keywords=[]), Name(id='py_version', ctx=Load()), BinOp(left=Constant(value='%d.%d'), op=Mod(), right=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), slice=Slice(upper=Constant(value=2)), ctx=Load())), BinOp(left=Constant(value='%d%d'), op=Mod(), right=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), slice=Slice(upper=Constant(value=2)), ctx=Load())), Name(id='prefix', ctx=Load()), Name(id='prefix', ctx=Load()), Name(id='exec_prefix', ctx=Load()), Name(id='exec_prefix', ctx=Load()), Name(id='abiflags', ctx=Load()), Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='sys', ctx=Load()), Constant(value='platlibdir'), Constant(value='lib')], keywords=[]), Call(func=Attribute(value=Call(func=Name(id='_get_implementation', ctx=Load()), args=[], keywords=[]), attr='lower', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='_get_implementation', ctx=Load()), args=[], keywords=[])])), Assign(targets=[Name(id='compat_vars', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='py_version_nodot_plat', value=Call(func=Attribute(value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='sys', ctx=Load()), Constant(value='winver'), Constant(value='')], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value='.'), Constant(value='')], keywords=[]))])), If(test=Name(id='HAS_USER_SITE', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='local_vars', ctx=Load()), slice=Constant(value='userbase'), ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='install_userbase', ctx=Load())), Assign(targets=[Subscript(value=Name(id='local_vars', ctx=Load()), slice=Constant(value='usersite'), ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='install_usersite', ctx=Load()))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='config_vars', ctx=Store())], value=Call(func=Attribute(value=Name(id='_collections', ctx=Load()), attr='DictStack', ctx=Load()), args=[List(elts=[Call(func=Attribute(value=Name(id='fw', ctx=Load()), attr='vars', ctx=Load()), args=[], keywords=[]), Name(id='compat_vars', ctx=Load()), Call(func=Attribute(value=Name(id='sysconfig', ctx=Load()), attr='get_config_vars', ctx=Load()), args=[], keywords=[]), Name(id='local_vars', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='expand_basedirs', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='dump_dirs', ctx=Load()), args=[Constant(value='post-expand_basedirs()')], keywords=[])), Assign(targets=[Subscript(value=Name(id='local_vars', ctx=Load()), slice=Constant(value='base'), ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='install_base', ctx=Load())), Assign(targets=[Subscript(value=Name(id='local_vars', ctx=Load()), slice=Constant(value='platbase'), ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='install_platbase', ctx=Load())), If(test=Name(id='DEBUG', ctx=Load()), body=[ImportFrom(module='pprint', names=[alias(name='pprint')], level=0), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='config vars:')], keywords=[])), Expr(value=Call(func=Name(id='pprint', ctx=Load()), args=[Call(func=Name(id='dict', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='config_vars', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='expand_dirs', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='dump_dirs', ctx=Load()), args=[Constant(value='post-expand_dirs()')], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='user', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='create_home_path', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='install_lib', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[If(test=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='has_ext_modules', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='install_lib', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='install_platlib', ctx=Load()))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='install_lib', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='install_purelib', ctx=Load()))])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='convert_paths', ctx=Load()), args=[Constant(value='lib'), Constant(value='purelib'), Constant(value='platlib'), Constant(value='scripts'), Constant(value='data'), Constant(value='headers'), Constant(value='userbase'), Constant(value='usersite')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='handle_extra_path', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='install_libbase', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='install_lib', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='install_lib', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='install_lib', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='extra_dirs', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='root', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='change_roots', ctx=Load()), args=[Constant(value='libbase'), Constant(value='lib'), Constant(value='purelib'), Constant(value='platlib'), Constant(value='scripts'), Constant(value='data'), Constant(value='headers')], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='dump_dirs', ctx=Load()), args=[Constant(value='after prepending root')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_undefined_options', ctx=Load()), args=[Constant(value='build'), Tuple(elts=[Constant(value='build_base'), Constant(value='build_base')], ctx=Load()), Tuple(elts=[Constant(value='build_lib'), Constant(value='build_lib')], ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='dump_dirs', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='msg')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Dumps the list of user options.')), If(test=UnaryOp(op=Not(), operand=Name(id='DEBUG', ctx=Load())), body=[Return()], orelse=[]), ImportFrom(module='fancy_getopt', names=[alias(name='longopt_xlate')], level=2), Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='debug', ctx=Load()), args=[BinOp(left=Name(id='msg', ctx=Load()), op=Add(), right=Constant(value=':'))], keywords=[])), For(target=Name(id='opt', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='user_options', ctx=Load()), body=[Assign(targets=[Name(id='opt_name', ctx=Store())], value=Subscript(value=Name(id='opt', ctx=Load()), slice=Constant(value=0), ctx=Load())), If(test=Compare(left=Subscript(value=Name(id='opt_name', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), ops=[Eq()], comparators=[Constant(value='=')]), body=[Assign(targets=[Name(id='opt_name', ctx=Store())], value=Subscript(value=Name(id='opt_name', ctx=Load()), slice=Slice(lower=Constant(value=0), upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='opt_name', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='negative_opt', ctx=Load())]), body=[Assign(targets=[Name(id='opt_name', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='negative_opt', ctx=Load()), slice=Name(id='opt_name', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='opt_name', ctx=Store())], value=Call(func=Attribute(value=Name(id='opt_name', ctx=Load()), attr='translate', ctx=Load()), args=[Name(id='longopt_xlate', ctx=Load())], keywords=[])), Assign(targets=[Name(id='val', ctx=Store())], value=UnaryOp(op=Not(), operand=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='opt_name', ctx=Load())], keywords=[])))], orelse=[Assign(targets=[Name(id='opt_name', ctx=Store())], value=Call(func=Attribute(value=Name(id='opt_name', ctx=Load()), attr='translate', ctx=Load()), args=[Name(id='longopt_xlate', ctx=Load())], keywords=[])), Assign(targets=[Name(id='val', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='opt_name', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='  %s: %s'), Name(id='opt_name', ctx=Load()), Name(id='val', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='finalize_unix', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Finalizes options for posix platforms.')), If(test=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='install_base', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='install_platbase', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Name(id='incomplete_scheme', ctx=Store())], value=BoolOp(op=Or(), values=[BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='install_lib', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='install_purelib', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='install_platlib', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='install_headers', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='install_scripts', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='install_data', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])])), If(test=Name(id='incomplete_scheme', ctx=Load()), body=[Raise(exc=Call(func=Name(id='DistutilsOptionError', ctx=Load()), args=[Constant(value='install-base or install-platbase supplied, but installation scheme is incomplete')], keywords=[]))], orelse=[]), Return()], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='user', ctx=Load()), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='install_userbase', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='DistutilsPlatformError', ctx=Load()), args=[Constant(value='User base directory is not specified')], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='install_base', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='install_platbase', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='install_userbase', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='select_scheme', ctx=Load()), args=[Constant(value='posix_user')], keywords=[]))], orelse=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='home', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='install_base', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='install_platbase', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='home', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='select_scheme', ctx=Load()), args=[Constant(value='posix_home')], keywords=[]))], orelse=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='prefix', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='exec_prefix', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='DistutilsOptionError', ctx=Load()), args=[Constant(value='must not supply exec-prefix without prefix')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='_prefix_addition', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='sysconfig', ctx=Load()), Constant(value='_prefix_addition'), Constant(value='')], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='prefix', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normpath', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='prefix', ctx=Load())], keywords=[]), op=Add(), right=Name(id='_prefix_addition', ctx=Load()))), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='exec_prefix', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normpath', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='exec_prefix', ctx=Load())], keywords=[]), op=Add(), right=Name(id='_prefix_addition', ctx=Load())))], orelse=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='exec_prefix', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='exec_prefix', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='prefix', ctx=Load()))], orelse=[])]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='install_base', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='prefix', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='install_platbase', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='exec_prefix', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='select_scheme', ctx=Load()), args=[Constant(value='posix_prefix')], keywords=[]))])])], decorator_list=[]), FunctionDef(name='finalize_other', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Finalizes options for non-posix platforms')), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='user', ctx=Load()), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='install_userbase', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='DistutilsPlatformError', ctx=Load()), args=[Constant(value='User base directory is not specified')], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='install_base', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='install_platbase', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='install_userbase', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='select_scheme', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='os', ctx=Load()), attr='name', ctx=Load()), op=Add(), right=Constant(value='_user'))], keywords=[]))], orelse=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='home', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='install_base', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='install_platbase', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='home', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='select_scheme', ctx=Load()), args=[Constant(value='posix_home')], keywords=[]))], orelse=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='prefix', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='prefix', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normpath', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='prefix', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='install_base', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='install_platbase', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='prefix', ctx=Load())), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='select_scheme', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='name', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='DistutilsPlatformError', ctx=Load()), args=[BinOp(left=Constant(value="I don't know how to install stuff on '%s'"), op=Mod(), right=Attribute(value=Name(id='os', ctx=Load()), attr='name', ctx=Load()))], keywords=[]))])], orelse=[], finalbody=[])])])], decorator_list=[]), FunctionDef(name='select_scheme', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='_select_scheme', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='name', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_expand_attrs', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='attrs')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='attr', ctx=Store()), iter=Name(id='attrs', ctx=Load()), body=[Assign(targets=[Name(id='val', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='attr', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='val', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[If(test=Compare(left=Attribute(value=Name(id='os', ctx=Load()), attr='name', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='posix'), Constant(value='nt')], ctx=Load())]), body=[Assign(targets=[Name(id='val', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='expanduser', ctx=Load()), args=[Name(id='val', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='val', ctx=Store())], value=Call(func=Name(id='subst_vars', ctx=Load()), args=[Name(id='val', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='config_vars', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='attr', ctx=Load()), Name(id='val', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='expand_basedirs', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Calls `os.path.expanduser` on install_base, install_platbase and\n        root.')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_expand_attrs', ctx=Load()), args=[List(elts=[Constant(value='install_base'), Constant(value='install_platbase'), Constant(value='root')], ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='expand_dirs', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Calls `os.path.expanduser` on install dirs.')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_expand_attrs', ctx=Load()), args=[List(elts=[Constant(value='install_purelib'), Constant(value='install_platlib'), Constant(value='install_lib'), Constant(value='install_headers'), Constant(value='install_scripts'), Constant(value='install_data')], ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='convert_paths', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='names'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Call `convert_path` over `names`.')), For(target=Name(id='name', ctx=Store()), iter=Name(id='names', ctx=Load()), body=[Assign(targets=[Name(id='attr', ctx=Store())], value=BinOp(left=Constant(value='install_'), op=Add(), right=Name(id='name', ctx=Load()))), Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='attr', ctx=Load()), Call(func=Name(id='convert_path', ctx=Load()), args=[Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='attr', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='handle_extra_path', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Set `path_file` and `extra_dirs` using `extra_path`.')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='extra_path', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='extra_path', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='extra_path', ctx=Load()))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='extra_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='Distribution option extra_path is deprecated. See issue27919 for details.')], keywords=[])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='extra_path', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='extra_path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='extra_path', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=',')], keywords=[]))], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='extra_path', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='path_file', ctx=Store()), Name(id='extra_dirs', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='extra_path', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='extra_path', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=2)]), body=[Assign(targets=[Tuple(elts=[Name(id='path_file', ctx=Store()), Name(id='extra_dirs', ctx=Store())], ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='extra_path', ctx=Load()))], orelse=[Raise(exc=Call(func=Name(id='DistutilsOptionError', ctx=Load()), args=[Constant(value="'extra_path' option must be a list, tuple, or comma-separated string with 1 or 2 elements")], keywords=[]))])]), Assign(targets=[Name(id='extra_dirs', ctx=Store())], value=Call(func=Name(id='convert_path', ctx=Load()), args=[Name(id='extra_dirs', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='path_file', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='extra_dirs', ctx=Store())], value=Constant(value=''))]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='path_file', ctx=Store())], value=Name(id='path_file', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='extra_dirs', ctx=Store())], value=Name(id='extra_dirs', ctx=Load()))], decorator_list=[]), FunctionDef(name='change_roots', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='names'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Change the install directories pointed by name using root.')), For(target=Name(id='name', ctx=Store()), iter=Name(id='names', ctx=Load()), body=[Assign(targets=[Name(id='attr', ctx=Store())], value=BinOp(left=Constant(value='install_'), op=Add(), right=Name(id='name', ctx=Load()))), Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='attr', ctx=Load()), Call(func=Name(id='change_root', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='root', ctx=Load()), Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='attr', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='create_home_path', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Create directories under ~.')), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='user', ctx=Load())), body=[Return()], orelse=[]), Assign(targets=[Name(id='home', ctx=Store())], value=Call(func=Name(id='convert_path', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='expanduser', ctx=Load()), args=[Constant(value='~')], keywords=[])], keywords=[])), For(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='path', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config_vars', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=BoolOp(op=And(), values=[Call(func=Attribute(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), attr='startswith', ctx=Load()), args=[Name(id='home', ctx=Load())], keywords=[]), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isdir', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='debug_print', ctx=Load()), args=[BinOp(left=Constant(value="os.makedirs('%s', 0o700)"), op=Mod(), right=Name(id='path', ctx=Load()))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Name(id='path', ctx=Load()), Constant(value=448)], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='run', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Runs the command.')), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='skip_build', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='run_command', ctx=Load()), args=[Constant(value='build')], keywords=[])), Assign(targets=[Name(id='build_plat', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='get_command_obj', ctx=Load()), args=[Constant(value='build')], keywords=[]), attr='plat_name', ctx=Load())), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='warn_dir', ctx=Load()), Compare(left=Name(id='build_plat', ctx=Load()), ops=[NotEq()], comparators=[Call(func=Name(id='get_platform', ctx=Load()), args=[], keywords=[])])]), body=[Raise(exc=Call(func=Name(id='DistutilsPlatformError', ctx=Load()), args=[Constant(value="Can't install when cross-compiling")], keywords=[]))], orelse=[])], orelse=[]), For(target=Name(id='cmd_name', ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_sub_commands', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='run_command', ctx=Load()), args=[Name(id='cmd_name', ctx=Load())], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='path_file', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='create_path_file', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='record', ctx=Load()), body=[Assign(targets=[Name(id='outputs', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_outputs', ctx=Load()), args=[], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='root', ctx=Load()), body=[Assign(targets=[Name(id='root_len', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='root', ctx=Load())], keywords=[])), For(target=Name(id='counter', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='outputs', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='outputs', ctx=Load()), slice=Name(id='counter', ctx=Load()), ctx=Store())], value=Subscript(value=Subscript(value=Name(id='outputs', ctx=Load()), slice=Name(id='counter', ctx=Load()), ctx=Load()), slice=Slice(lower=Name(id='root_len', ctx=Load())), ctx=Load()))], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='write_file', ctx=Load()), Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='record', ctx=Load()), Name(id='outputs', ctx=Load())], ctx=Load()), BinOp(left=Constant(value="writing list of installed files to '%s'"), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='record', ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Name(id='sys_path', ctx=Store())], value=Call(func=Name(id='map', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normpath', ctx=Load()), Attribute(value=Name(id='sys', ctx=Load()), attr='path', ctx=Load())], keywords=[])), Assign(targets=[Name(id='sys_path', ctx=Store())], value=Call(func=Name(id='map', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normcase', ctx=Load()), Name(id='sys_path', ctx=Load())], keywords=[])), Assign(targets=[Name(id='install_lib', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normcase', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normpath', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='install_lib', ctx=Load())], keywords=[])], keywords=[])), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='warn_dir', ctx=Load()), UnaryOp(op=Not(), operand=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='path_file', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='install_path_file', ctx=Load())])), Compare(left=Name(id='install_lib', ctx=Load()), ops=[NotIn()], comparators=[Name(id='sys_path', ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value="modules installed to '%s', which is not in Python's module search path (sys.path) -- you'll have to change the search path yourself"), Attribute(value=Name(id='self', ctx=Load()), attr='install_lib', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='create_path_file', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Creates the .pth file')), Assign(targets=[Name(id='filename', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='install_libbase', ctx=Load()), BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='path_file', ctx=Load()), op=Add(), right=Constant(value='.pth'))], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='install_path_file', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='write_file', ctx=Load()), Tuple(elts=[Name(id='filename', ctx=Load()), List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='extra_dirs', ctx=Load())], ctx=Load())], ctx=Load()), BinOp(left=Constant(value='creating %s'), op=Mod(), right=Name(id='filename', ctx=Load()))], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='warn', ctx=Load()), args=[BinOp(left=Constant(value="path file '%s' not created"), op=Mod(), right=Name(id='filename', ctx=Load()))], keywords=[]))])], decorator_list=[]), FunctionDef(name='get_outputs', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Assembles the outputs of all the sub-commands.')), Assign(targets=[Name(id='outputs', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='cmd_name', ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_sub_commands', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='cmd', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_finalized_command', ctx=Load()), args=[Name(id='cmd_name', ctx=Load())], keywords=[])), For(target=Name(id='filename', ctx=Store()), iter=Call(func=Attribute(value=Name(id='cmd', ctx=Load()), attr='get_outputs', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Name(id='filename', ctx=Load()), ops=[NotIn()], comparators=[Name(id='outputs', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='outputs', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[]), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='path_file', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='install_path_file', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='outputs', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='install_libbase', ctx=Load()), BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='path_file', ctx=Load()), op=Add(), right=Constant(value='.pth'))], keywords=[])], keywords=[]))], orelse=[]), Return(value=Name(id='outputs', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_inputs', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Returns the inputs of all the sub-commands')), Assign(targets=[Name(id='inputs', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='cmd_name', ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_sub_commands', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='cmd', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_finalized_command', ctx=Load()), args=[Name(id='cmd_name', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='inputs', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Attribute(value=Name(id='cmd', ctx=Load()), attr='get_inputs', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[]), Return(value=Name(id='inputs', ctx=Load()))], decorator_list=[]), FunctionDef(name='has_lib', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Returns true if the current distribution has any Python\n        modules to install.')), Return(value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='has_pure_modules', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='has_ext_modules', ctx=Load()), args=[], keywords=[])]))], decorator_list=[]), FunctionDef(name='has_headers', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Returns true if the current distribution has any headers to\n        install.')), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='has_headers', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='has_scripts', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Returns true if the current distribution has any scripts to.\n        install.')), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='has_scripts', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='has_data', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Returns true if the current distribution has any data to.\n        install.')), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='has_data_files', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), Assign(targets=[Name(id='sub_commands', ctx=Store())], value=List(elts=[Tuple(elts=[Constant(value='install_lib'), Name(id='has_lib', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='install_headers'), Name(id='has_headers', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='install_scripts'), Name(id='has_scripts', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='install_data'), Name(id='has_data', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='install_egg_info'), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Constant(value=True))], ctx=Load())], ctx=Load()))], decorator_list=[])], type_ignores=[])