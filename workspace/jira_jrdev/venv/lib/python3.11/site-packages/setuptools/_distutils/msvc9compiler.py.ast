Module(body=[Expr(value=Constant(value='distutils.msvc9compiler\n\nContains MSVCCompiler, an implementation of the abstract CCompiler class\nfor the Microsoft Visual Studio 2008.\n\nThe module is compatible with VS 2005 and VS 2008. You can find legacy support\nfor older versions of VS in distutils.msvccompiler.\n')), Import(names=[alias(name='os')]), Import(names=[alias(name='subprocess')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='re')]), Import(names=[alias(name='warnings')]), ImportFrom(module='errors', names=[alias(name='DistutilsExecError'), alias(name='DistutilsPlatformError'), alias(name='CompileError'), alias(name='LibError'), alias(name='LinkError')], level=1), ImportFrom(module='ccompiler', names=[alias(name='CCompiler'), alias(name='gen_lib_options')], level=1), ImportFrom(module='_log', names=[alias(name='log')], level=1), ImportFrom(module='util', names=[alias(name='get_platform')], level=1), Import(names=[alias(name='winreg')]), Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value='msvc9compiler is deprecated and slated to be removed in the future. Please discontinue use or file an issue with pypa/distutils describing your use case.'), Name(id='DeprecationWarning', ctx=Load())], keywords=[])), Assign(targets=[Name(id='RegOpenKeyEx', ctx=Store())], value=Attribute(value=Name(id='winreg', ctx=Load()), attr='OpenKeyEx', ctx=Load())), Assign(targets=[Name(id='RegEnumKey', ctx=Store())], value=Attribute(value=Name(id='winreg', ctx=Load()), attr='EnumKey', ctx=Load())), Assign(targets=[Name(id='RegEnumValue', ctx=Store())], value=Attribute(value=Name(id='winreg', ctx=Load()), attr='EnumValue', ctx=Load())), Assign(targets=[Name(id='RegError', ctx=Store())], value=Attribute(value=Name(id='winreg', ctx=Load()), attr='error', ctx=Load())), Assign(targets=[Name(id='HKEYS', ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='winreg', ctx=Load()), attr='HKEY_USERS', ctx=Load()), Attribute(value=Name(id='winreg', ctx=Load()), attr='HKEY_CURRENT_USER', ctx=Load()), Attribute(value=Name(id='winreg', ctx=Load()), attr='HKEY_LOCAL_MACHINE', ctx=Load()), Attribute(value=Name(id='winreg', ctx=Load()), attr='HKEY_CLASSES_ROOT', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='NATIVE_WIN64', ctx=Store())], value=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), ops=[Eq()], comparators=[Constant(value='win32')]), Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='maxsize', ctx=Load()), ops=[Gt()], comparators=[BinOp(left=Constant(value=2), op=Pow(), right=Constant(value=32))])])), If(test=Name(id='NATIVE_WIN64', ctx=Load()), body=[Assign(targets=[Name(id='VS_BASE', ctx=Store())], value=Constant(value='Software\\Wow6432Node\\Microsoft\\VisualStudio\\%0.1f')), Assign(targets=[Name(id='WINSDK_BASE', ctx=Store())], value=Constant(value='Software\\Wow6432Node\\Microsoft\\Microsoft SDKs\\Windows')), Assign(targets=[Name(id='NET_BASE', ctx=Store())], value=Constant(value='Software\\Wow6432Node\\Microsoft\\.NETFramework'))], orelse=[Assign(targets=[Name(id='VS_BASE', ctx=Store())], value=Constant(value='Software\\Microsoft\\VisualStudio\\%0.1f')), Assign(targets=[Name(id='WINSDK_BASE', ctx=Store())], value=Constant(value='Software\\Microsoft\\Microsoft SDKs\\Windows')), Assign(targets=[Name(id='NET_BASE', ctx=Store())], value=Constant(value='Software\\Microsoft\\.NETFramework'))]), Assign(targets=[Name(id='PLAT_TO_VCVARS', ctx=Store())], value=Dict(keys=[Constant(value='win32'), Constant(value='win-amd64')], values=[Constant(value='x86'), Constant(value='amd64')])), ClassDef(name='Reg', bases=[], keywords=[], body=[Expr(value=Constant(value='Helper class to read values from the registry')), FunctionDef(name='get_value', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='path'), arg(arg='key')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='base', ctx=Store()), iter=Name(id='HKEYS', ctx=Load()), body=[Assign(targets=[Name(id='d', ctx=Store())], value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='read_values', ctx=Load()), args=[Name(id='base', ctx=Load()), Name(id='path', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Name(id='d', ctx=Load()), Compare(left=Name(id='key', ctx=Load()), ops=[In()], comparators=[Name(id='d', ctx=Load())])]), body=[Return(value=Subscript(value=Name(id='d', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Raise(exc=Call(func=Name(id='KeyError', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[]))], decorator_list=[]), Assign(targets=[Name(id='get_value', ctx=Store())], value=Call(func=Name(id='classmethod', ctx=Load()), args=[Name(id='get_value', ctx=Load())], keywords=[])), FunctionDef(name='read_keys', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='base'), arg(arg='key')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return list of registry keys.')), Try(body=[Assign(targets=[Name(id='handle', ctx=Store())], value=Call(func=Name(id='RegOpenKeyEx', ctx=Load()), args=[Name(id='base', ctx=Load()), Name(id='key', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='RegError', ctx=Load()), body=[Return(value=Constant(value=None))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='L', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='i', ctx=Store())], value=Constant(value=0)), While(test=Constant(value=True), body=[Try(body=[Assign(targets=[Name(id='k', ctx=Store())], value=Call(func=Name(id='RegEnumKey', ctx=Load()), args=[Name(id='handle', ctx=Load()), Name(id='i', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='RegError', ctx=Load()), body=[Break()])], orelse=[], finalbody=[]), Expr(value=Call(func=Attribute(value=Name(id='L', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='k', ctx=Load())], keywords=[])), AugAssign(target=Name(id='i', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='L', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='read_keys', ctx=Store())], value=Call(func=Name(id='classmethod', ctx=Load()), args=[Name(id='read_keys', ctx=Load())], keywords=[])), FunctionDef(name='read_values', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='base'), arg(arg='key')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return dict of registry keys and values.\n\n        All names are converted to lowercase.\n        ')), Try(body=[Assign(targets=[Name(id='handle', ctx=Store())], value=Call(func=Name(id='RegOpenKeyEx', ctx=Load()), args=[Name(id='base', ctx=Load()), Name(id='key', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='RegError', ctx=Load()), body=[Return(value=Constant(value=None))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='d', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='i', ctx=Store())], value=Constant(value=0)), While(test=Constant(value=True), body=[Try(body=[Assign(targets=[Tuple(elts=[Name(id='name', ctx=Store()), Name(id='value', ctx=Store()), Name(id='type', ctx=Store())], ctx=Store())], value=Call(func=Name(id='RegEnumValue', ctx=Load()), args=[Name(id='handle', ctx=Load()), Name(id='i', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='RegError', ctx=Load()), body=[Break()])], orelse=[], finalbody=[]), Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Name(id='d', ctx=Load()), slice=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='convert_mbcs', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]), ctx=Store())], value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='convert_mbcs', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])), AugAssign(target=Name(id='i', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Name(id='d', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='read_values', ctx=Store())], value=Call(func=Name(id='classmethod', ctx=Load()), args=[Name(id='read_values', ctx=Load())], keywords=[])), FunctionDef(name='convert_mbcs', args=arguments(posonlyargs=[], args=[arg(arg='s')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='dec', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='s', ctx=Load()), Constant(value='decode'), Constant(value=None)], keywords=[])), If(test=Compare(left=Name(id='dec', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Try(body=[Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Name(id='dec', ctx=Load()), args=[Constant(value='mbcs')], keywords=[]))], handlers=[ExceptHandler(type=Name(id='UnicodeError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], orelse=[]), Return(value=Name(id='s', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='convert_mbcs', ctx=Store())], value=Call(func=Name(id='staticmethod', ctx=Load()), args=[Name(id='convert_mbcs', ctx=Load())], keywords=[]))], decorator_list=[]), ClassDef(name='MacroExpander', bases=[], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='version')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='macros', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='vsbase', ctx=Store())], value=BinOp(left=Name(id='VS_BASE', ctx=Load()), op=Mod(), right=Name(id='version', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='load_macros', ctx=Load()), args=[Name(id='version', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='set_macro', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='macro'), arg(arg='path'), arg(arg='key')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='macros', ctx=Load()), slice=BinOp(left=Constant(value='$(%s)'), op=Mod(), right=Name(id='macro', ctx=Load())), ctx=Store())], value=Call(func=Attribute(value=Name(id='Reg', ctx=Load()), attr='get_value', ctx=Load()), args=[Name(id='path', ctx=Load()), Name(id='key', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='load_macros', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='version')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_macro', ctx=Load()), args=[Constant(value='VCInstallDir'), BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='vsbase', ctx=Load()), op=Add(), right=Constant(value='\\Setup\\VC')), Constant(value='productdir')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_macro', ctx=Load()), args=[Constant(value='VSInstallDir'), BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='vsbase', ctx=Load()), op=Add(), right=Constant(value='\\Setup\\VS')), Constant(value='productdir')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_macro', ctx=Load()), args=[Constant(value='FrameworkDir'), Name(id='NET_BASE', ctx=Load()), Constant(value='installroot')], keywords=[])), Try(body=[If(test=Compare(left=Name(id='version', ctx=Load()), ops=[GtE()], comparators=[Constant(value=8.0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_macro', ctx=Load()), args=[Constant(value='FrameworkSDKDir'), Name(id='NET_BASE', ctx=Load()), Constant(value='sdkinstallrootv2.0')], keywords=[]))], orelse=[Raise(exc=Call(func=Name(id='KeyError', ctx=Load()), args=[Constant(value='sdkinstallrootv2.0')], keywords=[]))])], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='DistutilsPlatformError', ctx=Load()), args=[Constant(value='Python was built with Visual Studio 2008;\nextensions must be built with a compiler than can generate compatible binaries.\nVisual Studio 2008 was not found on this system. If you have Cygwin installed,\nyou can try compiling with MingW32, by passing "-c mingw32" to setup.py.')], keywords=[]))])], orelse=[], finalbody=[]), If(test=Compare(left=Name(id='version', ctx=Load()), ops=[GtE()], comparators=[Constant(value=9.0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_macro', ctx=Load()), args=[Constant(value='FrameworkVersion'), Attribute(value=Name(id='self', ctx=Load()), attr='vsbase', ctx=Load()), Constant(value='clr version')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_macro', ctx=Load()), args=[Constant(value='WindowsSdkDir'), Name(id='WINSDK_BASE', ctx=Load()), Constant(value='currentinstallfolder')], keywords=[]))], orelse=[Assign(targets=[Name(id='p', ctx=Store())], value=Constant(value='Software\\Microsoft\\NET Framework Setup\\Product')), For(target=Name(id='base', ctx=Store()), iter=Name(id='HKEYS', ctx=Load()), body=[Try(body=[Assign(targets=[Name(id='h', ctx=Store())], value=Call(func=Name(id='RegOpenKeyEx', ctx=Load()), args=[Name(id='base', ctx=Load()), Name(id='p', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='RegError', ctx=Load()), body=[Continue()])], orelse=[], finalbody=[]), Assign(targets=[Name(id='key', ctx=Store())], value=Call(func=Name(id='RegEnumKey', ctx=Load()), args=[Name(id='h', ctx=Load()), Constant(value=0)], keywords=[])), Assign(targets=[Name(id='d', ctx=Store())], value=Call(func=Attribute(value=Name(id='Reg', ctx=Load()), attr='get_value', ctx=Load()), args=[Name(id='base', ctx=Load()), Call(func=Attribute(value=Constant(value='{}\\{}'), attr='format', ctx=Load()), args=[Name(id='p', ctx=Load()), Name(id='key', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='macros', ctx=Load()), slice=Constant(value='$(FrameworkVersion)'), ctx=Store())], value=Subscript(value=Name(id='d', ctx=Load()), slice=Constant(value='version'), ctx=Load()))], orelse=[])])], decorator_list=[]), FunctionDef(name='sub', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='s')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='macros', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='replace', ctx=Load()), args=[Name(id='k', ctx=Load()), Name(id='v', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='s', ctx=Load()))], decorator_list=[])], decorator_list=[]), FunctionDef(name='get_build_version', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the version of MSVC that was used to build Python.\n\n    For Python 2.3 and up, the version number is included in\n    sys.version.  For earlier versions, assume the compiler is MSVC 6.\n    ')), Assign(targets=[Name(id='prefix', ctx=Store())], value=Constant(value='MSC v.')), Assign(targets=[Name(id='i', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version', ctx=Load()), attr='find', ctx=Load()), args=[Name(id='prefix', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='i', ctx=Load()), ops=[Eq()], comparators=[UnaryOp(op=USub(), operand=Constant(value=1))]), body=[Return(value=Constant(value=6))], orelse=[]), Assign(targets=[Name(id='i', ctx=Store())], value=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='prefix', ctx=Load())], keywords=[]))), Assign(targets=[Tuple(elts=[Name(id='s', ctx=Store()), Name(id='rest', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version', ctx=Load()), slice=Slice(lower=Name(id='i', ctx=Load())), ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=' '), Constant(value=1)], keywords=[])), Assign(targets=[Name(id='majorVersion', ctx=Store())], value=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='s', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=2))), ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=6))), If(test=Compare(left=Name(id='majorVersion', ctx=Load()), ops=[GtE()], comparators=[Constant(value=13)]), body=[AugAssign(target=Name(id='majorVersion', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='minorVersion', ctx=Store())], value=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='s', ctx=Load()), slice=Slice(lower=Constant(value=2), upper=Constant(value=3)), ctx=Load())], keywords=[]), op=Div(), right=Constant(value=10.0))), If(test=Compare(left=Name(id='majorVersion', ctx=Load()), ops=[Eq()], comparators=[Constant(value=6)]), body=[Assign(targets=[Name(id='minorVersion', ctx=Store())], value=Constant(value=0))], orelse=[]), If(test=Compare(left=Name(id='majorVersion', ctx=Load()), ops=[GtE()], comparators=[Constant(value=6)]), body=[Return(value=BinOp(left=Name(id='majorVersion', ctx=Load()), op=Add(), right=Name(id='minorVersion', ctx=Load())))], orelse=[]), Return(value=Constant(value=None))], decorator_list=[]), FunctionDef(name='normalize_and_reduce_paths', args=arguments(posonlyargs=[], args=[arg(arg='paths')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return a list of normalized paths with duplicates removed.\n\n    The current order of paths is maintained.\n    ')), Assign(targets=[Name(id='reduced_paths', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='p', ctx=Store()), iter=Name(id='paths', ctx=Load()), body=[Assign(targets=[Name(id='np', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normpath', ctx=Load()), args=[Name(id='p', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='np', ctx=Load()), ops=[NotIn()], comparators=[Name(id='reduced_paths', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='reduced_paths', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='np', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='reduced_paths', ctx=Load()))], decorator_list=[]), FunctionDef(name='removeDuplicates', args=arguments(posonlyargs=[], args=[arg(arg='variable')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Remove duplicate values of an environment variable.')), Assign(targets=[Name(id='oldList', ctx=Store())], value=Call(func=Attribute(value=Name(id='variable', ctx=Load()), attr='split', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='pathsep', ctx=Load())], keywords=[])), Assign(targets=[Name(id='newList', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='i', ctx=Store()), iter=Name(id='oldList', ctx=Load()), body=[If(test=Compare(left=Name(id='i', ctx=Load()), ops=[NotIn()], comparators=[Name(id='newList', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='newList', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='newVariable', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='pathsep', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='newList', ctx=Load())], keywords=[])), Return(value=Name(id='newVariable', ctx=Load()))], decorator_list=[]), FunctionDef(name='find_vcvarsall', args=arguments(posonlyargs=[], args=[arg(arg='version')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Find the vcvarsall.bat file\n\n    At first it tries to find the productdir of VS 2008 in the registry. If\n    that fails it falls back to the VS90COMNTOOLS env var.\n    ')), Assign(targets=[Name(id='vsbase', ctx=Store())], value=BinOp(left=Name(id='VS_BASE', ctx=Load()), op=Mod(), right=Name(id='version', ctx=Load()))), Try(body=[Assign(targets=[Name(id='productdir', ctx=Store())], value=Call(func=Attribute(value=Name(id='Reg', ctx=Load()), attr='get_value', ctx=Load()), args=[BinOp(left=Constant(value='%s\\Setup\\VC'), op=Mod(), right=Name(id='vsbase', ctx=Load())), Constant(value='productdir')], keywords=[]))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Unable to find productdir in registry')], keywords=[])), Assign(targets=[Name(id='productdir', ctx=Store())], value=Constant(value=None))])], orelse=[], finalbody=[]), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Name(id='productdir', ctx=Load())), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isdir', ctx=Load()), args=[Name(id='productdir', ctx=Load())], keywords=[]))]), body=[Assign(targets=[Name(id='toolskey', ctx=Store())], value=BinOp(left=Constant(value='VS%0.f0COMNTOOLS'), op=Mod(), right=Name(id='version', ctx=Load()))), Assign(targets=[Name(id='toolsdir', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='toolskey', ctx=Load()), Constant(value=None)], keywords=[])), If(test=BoolOp(op=And(), values=[Name(id='toolsdir', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isdir', ctx=Load()), args=[Name(id='toolsdir', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='productdir', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='toolsdir', ctx=Load()), Attribute(value=Name(id='os', ctx=Load()), attr='pardir', ctx=Load()), Attribute(value=Name(id='os', ctx=Load()), attr='pardir', ctx=Load()), Constant(value='VC')], keywords=[])), Assign(targets=[Name(id='productdir', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Name(id='productdir', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isdir', ctx=Load()), args=[Name(id='productdir', ctx=Load())], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='debug', ctx=Load()), args=[BinOp(left=Constant(value='%s is not a valid directory'), op=Mod(), right=Name(id='productdir', ctx=Load()))], keywords=[])), Return(value=Constant(value=None))], orelse=[])], orelse=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='debug', ctx=Load()), args=[BinOp(left=Constant(value='Env var %s is not set or invalid'), op=Mod(), right=Name(id='toolskey', ctx=Load()))], keywords=[]))])], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='productdir', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='No productdir found')], keywords=[])), Return(value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='vcvarsall', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='productdir', ctx=Load()), Constant(value='vcvarsall.bat')], keywords=[])), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isfile', ctx=Load()), args=[Name(id='vcvarsall', ctx=Load())], keywords=[]), body=[Return(value=Name(id='vcvarsall', ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Unable to find vcvarsall.bat')], keywords=[])), Return(value=Constant(value=None))], decorator_list=[]), FunctionDef(name='query_vcvarsall', args=arguments(posonlyargs=[], args=[arg(arg='version'), arg(arg='arch')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='x86')]), body=[Expr(value=Constant(value='Launch vcvarsall.bat and read the settings from its environment')), Assign(targets=[Name(id='vcvarsall', ctx=Store())], value=Call(func=Name(id='find_vcvarsall', ctx=Load()), args=[Name(id='version', ctx=Load())], keywords=[])), Assign(targets=[Name(id='interesting', ctx=Store())], value=Set(elts=[Constant(value='include'), Constant(value='lib'), Constant(value='libpath'), Constant(value='path')])), Assign(targets=[Name(id='result', ctx=Store())], value=Dict(keys=[], values=[])), If(test=Compare(left=Name(id='vcvarsall', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='DistutilsPlatformError', ctx=Load()), args=[Constant(value='Unable to find vcvarsall.bat')], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value="Calling 'vcvarsall.bat %s' (version=%s)"), Name(id='arch', ctx=Load()), Name(id='version', ctx=Load())], keywords=[])), Assign(targets=[Name(id='popen', ctx=Store())], value=Call(func=Attribute(value=Name(id='subprocess', ctx=Load()), attr='Popen', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='"{}" {} & set'), attr='format', ctx=Load()), args=[Name(id='vcvarsall', ctx=Load()), Name(id='arch', ctx=Load())], keywords=[])], keywords=[keyword(arg='stdout', value=Attribute(value=Name(id='subprocess', ctx=Load()), attr='PIPE', ctx=Load())), keyword(arg='stderr', value=Attribute(value=Name(id='subprocess', ctx=Load()), attr='PIPE', ctx=Load()))])), Try(body=[Assign(targets=[Tuple(elts=[Name(id='stdout', ctx=Store()), Name(id='stderr', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='popen', ctx=Load()), attr='communicate', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Call(func=Attribute(value=Name(id='popen', ctx=Load()), attr='wait', ctx=Load()), args=[], keywords=[]), ops=[NotEq()], comparators=[Constant(value=0)]), body=[Raise(exc=Call(func=Name(id='DistutilsPlatformError', ctx=Load()), args=[Call(func=Attribute(value=Name(id='stderr', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='mbcs')], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='stdout', ctx=Store())], value=Call(func=Attribute(value=Name(id='stdout', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='mbcs')], keywords=[])), For(target=Name(id='line', ctx=Store()), iter=Call(func=Attribute(value=Name(id='stdout', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='\n')], keywords=[]), body=[Assign(targets=[Name(id='line', ctx=Store())], value=Call(func=Attribute(value=Name(id='Reg', ctx=Load()), attr='convert_mbcs', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[])), If(test=Compare(left=Constant(value='='), ops=[NotIn()], comparators=[Name(id='line', ctx=Load())]), body=[Continue()], orelse=[]), Assign(targets=[Name(id='line', ctx=Store())], value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='='), Constant(value=1)], keywords=[])), Assign(targets=[Name(id='key', ctx=Store())], value=Call(func=Attribute(value=Name(id='key', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='key', ctx=Load()), ops=[In()], comparators=[Name(id='interesting', ctx=Load())]), body=[If(test=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='endswith', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='pathsep', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Subscript(value=Name(id='value', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))], orelse=[]), Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Call(func=Name(id='removeDuplicates', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='popen', ctx=Load()), attr='stdout', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='popen', ctx=Load()), attr='stderr', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='interesting', ctx=Load())], keywords=[])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])], keywords=[]))], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='VERSION', ctx=Store())], value=Call(func=Name(id='get_build_version', ctx=Load()), args=[], keywords=[])), ClassDef(name='MSVCCompiler', bases=[Name(id='CCompiler', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Concrete class that implements an interface to Microsoft Visual C++,\n    as defined by the CCompiler abstract class.')), Assign(targets=[Name(id='compiler_type', ctx=Store())], value=Constant(value='msvc')), Assign(targets=[Name(id='executables', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='_c_extensions', ctx=Store())], value=List(elts=[Constant(value='.c')], ctx=Load())), Assign(targets=[Name(id='_cpp_extensions', ctx=Store())], value=List(elts=[Constant(value='.cc'), Constant(value='.cpp'), Constant(value='.cxx')], ctx=Load())), Assign(targets=[Name(id='_rc_extensions', ctx=Store())], value=List(elts=[Constant(value='.rc')], ctx=Load())), Assign(targets=[Name(id='_mc_extensions', ctx=Store())], value=List(elts=[Constant(value='.mc')], ctx=Load())), Assign(targets=[Name(id='src_extensions', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=Name(id='_c_extensions', ctx=Load()), op=Add(), right=Name(id='_cpp_extensions', ctx=Load())), op=Add(), right=Name(id='_rc_extensions', ctx=Load())), op=Add(), right=Name(id='_mc_extensions', ctx=Load()))), Assign(targets=[Name(id='res_extension', ctx=Store())], value=Constant(value='.res')), Assign(targets=[Name(id='obj_extension', ctx=Store())], value=Constant(value='.obj')), Assign(targets=[Name(id='static_lib_extension', ctx=Store())], value=Constant(value='.lib')), Assign(targets=[Name(id='shared_lib_extension', ctx=Store())], value=Constant(value='.dll')), Assign(targets=[Name(id='static_lib_format', ctx=Store()), Name(id='shared_lib_format', ctx=Store())], value=Constant(value='%s%s')), Assign(targets=[Name(id='exe_extension', ctx=Store())], value=Constant(value='.exe')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='verbose'), arg(arg='dry_run'), arg(arg='force')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0), Constant(value=0), Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Name(id='verbose', ctx=Load()), Name(id='dry_run', ctx=Load()), Name(id='force', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='__version', ctx=Store())], value=Name(id='VERSION', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='__root', ctx=Store())], value=Constant(value='Software\\Microsoft\\VisualStudio')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='__paths', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='plat_name', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='__arch', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='initialized', ctx=Store())], value=Constant(value=False))], decorator_list=[]), FunctionDef(name='initialize', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='plat_name')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assert(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='initialized', ctx=Load())), msg=Constant(value="don't init multiple times")), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='__version', ctx=Load()), ops=[Lt()], comparators=[Constant(value=8.0)]), body=[Raise(exc=Call(func=Name(id='DistutilsPlatformError', ctx=Load()), args=[BinOp(left=Constant(value='VC %0.1f is not supported by this module'), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='__version', ctx=Load()))], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='plat_name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='plat_name', ctx=Store())], value=Call(func=Name(id='get_platform', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='ok_plats', ctx=Store())], value=Tuple(elts=[Constant(value='win32'), Constant(value='win-amd64')], ctx=Load())), If(test=Compare(left=Name(id='plat_name', ctx=Load()), ops=[NotIn()], comparators=[Name(id='ok_plats', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='DistutilsPlatformError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='--plat-name must be one of {}'), attr='format', ctx=Load()), args=[Name(id='ok_plats', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Constant(value='DISTUTILS_USE_SDK'), ops=[In()], comparators=[Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load())]), Compare(left=Constant(value='MSSdk'), ops=[In()], comparators=[Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load())]), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='find_exe', ctx=Load()), args=[Constant(value='cl.exe')], keywords=[])]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='cc', ctx=Store())], value=Constant(value='cl.exe')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='linker', ctx=Store())], value=Constant(value='link.exe')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='lib', ctx=Store())], value=Constant(value='lib.exe')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='rc', ctx=Store())], value=Constant(value='rc.exe')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='mc', ctx=Store())], value=Constant(value='mc.exe'))], orelse=[If(test=Compare(left=Name(id='plat_name', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Call(func=Name(id='get_platform', ctx=Load()), args=[], keywords=[]), Constant(value='win32')], ctx=Load())]), body=[Assign(targets=[Name(id='plat_spec', ctx=Store())], value=Subscript(value=Name(id='PLAT_TO_VCVARS', ctx=Load()), slice=Name(id='plat_name', ctx=Load()), ctx=Load()))], orelse=[Assign(targets=[Name(id='plat_spec', ctx=Store())], value=BinOp(left=BinOp(left=Subscript(value=Name(id='PLAT_TO_VCVARS', ctx=Load()), slice=Call(func=Name(id='get_platform', ctx=Load()), args=[], keywords=[]), ctx=Load()), op=Add(), right=Constant(value='_')), op=Add(), right=Subscript(value=Name(id='PLAT_TO_VCVARS', ctx=Load()), slice=Name(id='plat_name', ctx=Load()), ctx=Load())))]), Assign(targets=[Name(id='vc_env', ctx=Store())], value=Call(func=Name(id='query_vcvarsall', ctx=Load()), args=[Name(id='VERSION', ctx=Load()), Name(id='plat_spec', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='__paths', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='vc_env', ctx=Load()), slice=Constant(value='path'), ctx=Load()), attr='split', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='pathsep', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), slice=Constant(value='lib'), ctx=Store())], value=Subscript(value=Name(id='vc_env', ctx=Load()), slice=Constant(value='lib'), ctx=Load())), Assign(targets=[Subscript(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), slice=Constant(value='include'), ctx=Store())], value=Subscript(value=Name(id='vc_env', ctx=Load()), slice=Constant(value='include'), ctx=Load())), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='__paths', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Raise(exc=Call(func=Name(id='DistutilsPlatformError', ctx=Load()), args=[BinOp(left=Constant(value="Python was built with %s, and extensions need to be built with the same version of the compiler, but it isn't installed."), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='__product', ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='cc', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='find_exe', ctx=Load()), args=[Constant(value='cl.exe')], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='linker', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='find_exe', ctx=Load()), args=[Constant(value='link.exe')], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='lib', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='find_exe', ctx=Load()), args=[Constant(value='lib.exe')], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='rc', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='find_exe', ctx=Load()), args=[Constant(value='rc.exe')], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='mc', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='find_exe', ctx=Load()), args=[Constant(value='mc.exe')], keywords=[]))]), Try(body=[For(target=Name(id='p', ctx=Store()), iter=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), slice=Constant(value='path'), ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=';')], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__paths', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='p', ctx=Load())], keywords=[]))], orelse=[])], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='__paths', ctx=Store())], value=Call(func=Name(id='normalize_and_reduce_paths', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='__paths', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), slice=Constant(value='path'), ctx=Store())], value=Call(func=Attribute(value=Constant(value=';'), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='__paths', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='preprocess_options', ctx=Store())], value=Constant(value=None)), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='__arch', ctx=Load()), ops=[Eq()], comparators=[Constant(value='x86')]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='compile_options', ctx=Store())], value=List(elts=[Constant(value='/nologo'), Constant(value='/O2'), Constant(value='/MD'), Constant(value='/W3'), Constant(value='/DNDEBUG')], ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='compile_options_debug', ctx=Store())], value=List(elts=[Constant(value='/nologo'), Constant(value='/Od'), Constant(value='/MDd'), Constant(value='/W3'), Constant(value='/Z7'), Constant(value='/D_DEBUG')], ctx=Load()))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='compile_options', ctx=Store())], value=List(elts=[Constant(value='/nologo'), Constant(value='/O2'), Constant(value='/MD'), Constant(value='/W3'), Constant(value='/GS-'), Constant(value='/DNDEBUG')], ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='compile_options_debug', ctx=Store())], value=List(elts=[Constant(value='/nologo'), Constant(value='/Od'), Constant(value='/MDd'), Constant(value='/W3'), Constant(value='/GS-'), Constant(value='/Z7'), Constant(value='/D_DEBUG')], ctx=Load()))]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='ldflags_shared', ctx=Store())], value=List(elts=[Constant(value='/DLL'), Constant(value='/nologo'), Constant(value='/INCREMENTAL:NO')], ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='__version', ctx=Load()), ops=[GtE()], comparators=[Constant(value=7)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='ldflags_shared_debug', ctx=Store())], value=List(elts=[Constant(value='/DLL'), Constant(value='/nologo'), Constant(value='/INCREMENTAL:no'), Constant(value='/DEBUG')], ctx=Load()))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='ldflags_static', ctx=Store())], value=List(elts=[Constant(value='/nologo')], ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='initialized', ctx=Store())], value=Constant(value=True))], decorator_list=[]), FunctionDef(name='object_filenames', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='source_filenames'), arg(arg='strip_dir'), arg(arg='output_dir')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0), Constant(value='')]), body=[If(test=Compare(left=Name(id='output_dir', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='output_dir', ctx=Store())], value=Constant(value=''))], orelse=[]), Assign(targets=[Name(id='obj_names', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='src_name', ctx=Store()), iter=Name(id='source_filenames', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='base', ctx=Store()), Name(id='ext', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='splitext', ctx=Load()), args=[Name(id='src_name', ctx=Load())], keywords=[])), Assign(targets=[Name(id='base', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='splitdrive', ctx=Load()), args=[Name(id='base', ctx=Load())], keywords=[]), slice=Constant(value=1), ctx=Load())), Assign(targets=[Name(id='base', ctx=Store())], value=Subscript(value=Name(id='base', ctx=Load()), slice=Slice(lower=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isabs', ctx=Load()), args=[Name(id='base', ctx=Load())], keywords=[])), ctx=Load())), If(test=Compare(left=Name(id='ext', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='src_extensions', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='CompileError', ctx=Load()), args=[BinOp(left=Constant(value="Don't know how to compile %s"), op=Mod(), right=Name(id='src_name', ctx=Load()))], keywords=[]))], orelse=[]), If(test=Name(id='strip_dir', ctx=Load()), body=[Assign(targets=[Name(id='base', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='basename', ctx=Load()), args=[Name(id='base', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='ext', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_rc_extensions', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='obj_names', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='output_dir', ctx=Load()), BinOp(left=Name(id='base', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='res_extension', ctx=Load()))], keywords=[])], keywords=[]))], orelse=[If(test=Compare(left=Name(id='ext', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_mc_extensions', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='obj_names', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='output_dir', ctx=Load()), BinOp(left=Name(id='base', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='res_extension', ctx=Load()))], keywords=[])], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='obj_names', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='output_dir', ctx=Load()), BinOp(left=Name(id='base', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='obj_extension', ctx=Load()))], keywords=[])], keywords=[]))])])], orelse=[]), Return(value=Name(id='obj_names', ctx=Load()))], decorator_list=[]), FunctionDef(name='compile', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='sources'), arg(arg='output_dir'), arg(arg='macros'), arg(arg='include_dirs'), arg(arg='debug'), arg(arg='extra_preargs'), arg(arg='extra_postargs'), arg(arg='depends')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=0), Constant(value=None), Constant(value=None), Constant(value=None)]), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='initialized', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='initialize', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='compile_info', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_setup_compile', ctx=Load()), args=[Name(id='output_dir', ctx=Load()), Name(id='macros', ctx=Load()), Name(id='include_dirs', ctx=Load()), Name(id='sources', ctx=Load()), Name(id='depends', ctx=Load()), Name(id='extra_postargs', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='macros', ctx=Store()), Name(id='objects', ctx=Store()), Name(id='extra_postargs', ctx=Store()), Name(id='pp_opts', ctx=Store()), Name(id='build', ctx=Store())], ctx=Store())], value=Name(id='compile_info', ctx=Load())), Assign(targets=[Name(id='compile_opts', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='extra_preargs', ctx=Load()), List(elts=[], ctx=Load())])), Expr(value=Call(func=Attribute(value=Name(id='compile_opts', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='/c')], keywords=[])), If(test=Name(id='debug', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='compile_opts', ctx=Load()), attr='extend', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='compile_options_debug', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='compile_opts', ctx=Load()), attr='extend', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='compile_options', ctx=Load())], keywords=[]))]), For(target=Name(id='obj', ctx=Store()), iter=Name(id='objects', ctx=Load()), body=[Try(body=[Assign(targets=[Tuple(elts=[Name(id='src', ctx=Store()), Name(id='ext', ctx=Store())], ctx=Store())], value=Subscript(value=Name(id='build', ctx=Load()), slice=Name(id='obj', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Continue()])], orelse=[], finalbody=[]), If(test=Name(id='debug', ctx=Load()), body=[Assign(targets=[Name(id='src', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Name(id='src', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='ext', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_c_extensions', ctx=Load())]), body=[Assign(targets=[Name(id='input_opt', ctx=Store())], value=BinOp(left=Constant(value='/Tc'), op=Add(), right=Name(id='src', ctx=Load())))], orelse=[If(test=Compare(left=Name(id='ext', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_cpp_extensions', ctx=Load())]), body=[Assign(targets=[Name(id='input_opt', ctx=Store())], value=BinOp(left=Constant(value='/Tp'), op=Add(), right=Name(id='src', ctx=Load())))], orelse=[If(test=Compare(left=Name(id='ext', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_rc_extensions', ctx=Load())]), body=[Assign(targets=[Name(id='input_opt', ctx=Store())], value=Name(id='src', ctx=Load())), Assign(targets=[Name(id='output_opt', ctx=Store())], value=BinOp(left=Constant(value='/fo'), op=Add(), right=Name(id='obj', ctx=Load()))), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='spawn', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='rc', ctx=Load())], ctx=Load()), op=Add(), right=Name(id='pp_opts', ctx=Load())), op=Add(), right=List(elts=[Name(id='output_opt', ctx=Load())], ctx=Load())), op=Add(), right=List(elts=[Name(id='input_opt', ctx=Load())], ctx=Load()))], keywords=[]))], handlers=[ExceptHandler(type=Name(id='DistutilsExecError', ctx=Load()), name='msg', body=[Raise(exc=Call(func=Name(id='CompileError', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[]), Continue()], orelse=[If(test=Compare(left=Name(id='ext', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_mc_extensions', ctx=Load())]), body=[Assign(targets=[Name(id='h_dir', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Name(id='src', ctx=Load())], keywords=[])), Assign(targets=[Name(id='rc_dir', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[])), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='spawn', ctx=Load()), args=[BinOp(left=BinOp(left=List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='mc', ctx=Load())], ctx=Load()), op=Add(), right=List(elts=[Constant(value='-h'), Name(id='h_dir', ctx=Load()), Constant(value='-r'), Name(id='rc_dir', ctx=Load())], ctx=Load())), op=Add(), right=List(elts=[Name(id='src', ctx=Load())], ctx=Load()))], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='base', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='splitext', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='basename', ctx=Load()), args=[Name(id='src', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='rc_file', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='rc_dir', ctx=Load()), BinOp(left=Name(id='base', ctx=Load()), op=Add(), right=Constant(value='.rc'))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='spawn', ctx=Load()), args=[BinOp(left=BinOp(left=List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='rc', ctx=Load())], ctx=Load()), op=Add(), right=List(elts=[BinOp(left=Constant(value='/fo'), op=Add(), right=Name(id='obj', ctx=Load()))], ctx=Load())), op=Add(), right=List(elts=[Name(id='rc_file', ctx=Load())], ctx=Load()))], keywords=[]))], handlers=[ExceptHandler(type=Name(id='DistutilsExecError', ctx=Load()), name='msg', body=[Raise(exc=Call(func=Name(id='CompileError', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[]), Continue()], orelse=[Raise(exc=Call(func=Name(id='CompileError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value="Don't know how to compile {} to {}"), attr='format', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='obj', ctx=Load())], keywords=[])], keywords=[]))])])])]), Assign(targets=[Name(id='output_opt', ctx=Store())], value=BinOp(left=Constant(value='/Fo'), op=Add(), right=Name(id='obj', ctx=Load()))), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='spawn', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='cc', ctx=Load())], ctx=Load()), op=Add(), right=Name(id='compile_opts', ctx=Load())), op=Add(), right=Name(id='pp_opts', ctx=Load())), op=Add(), right=List(elts=[Name(id='input_opt', ctx=Load()), Name(id='output_opt', ctx=Load())], ctx=Load())), op=Add(), right=Name(id='extra_postargs', ctx=Load()))], keywords=[]))], handlers=[ExceptHandler(type=Name(id='DistutilsExecError', ctx=Load()), name='msg', body=[Raise(exc=Call(func=Name(id='CompileError', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], orelse=[]), Return(value=Name(id='objects', ctx=Load()))], decorator_list=[]), FunctionDef(name='create_static_lib', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='objects'), arg(arg='output_libname'), arg(arg='output_dir'), arg(arg='debug'), arg(arg='target_lang')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=0), Constant(value=None)]), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='initialized', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='initialize', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='objects', ctx=Store()), Name(id='output_dir', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_fix_object_args', ctx=Load()), args=[Name(id='objects', ctx=Load()), Name(id='output_dir', ctx=Load())], keywords=[])), Assign(targets=[Name(id='output_filename', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='library_filename', ctx=Load()), args=[Name(id='output_libname', ctx=Load())], keywords=[keyword(arg='output_dir', value=Name(id='output_dir', ctx=Load()))])), If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_need_link', ctx=Load()), args=[Name(id='objects', ctx=Load()), Name(id='output_filename', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='lib_args', ctx=Store())], value=BinOp(left=Name(id='objects', ctx=Load()), op=Add(), right=List(elts=[BinOp(left=Constant(value='/OUT:'), op=Add(), right=Name(id='output_filename', ctx=Load()))], ctx=Load()))), If(test=Name(id='debug', ctx=Load()), body=[Pass()], orelse=[]), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='spawn', ctx=Load()), args=[BinOp(left=List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='lib', ctx=Load())], ctx=Load()), op=Add(), right=Name(id='lib_args', ctx=Load()))], keywords=[]))], handlers=[ExceptHandler(type=Name(id='DistutilsExecError', ctx=Load()), name='msg', body=[Raise(exc=Call(func=Name(id='LibError', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], orelse=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='skipping %s (up-to-date)'), Name(id='output_filename', ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='link', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='target_desc'), arg(arg='objects'), arg(arg='output_filename'), arg(arg='output_dir'), arg(arg='libraries'), arg(arg='library_dirs'), arg(arg='runtime_library_dirs'), arg(arg='export_symbols'), arg(arg='debug'), arg(arg='extra_preargs'), arg(arg='extra_postargs'), arg(arg='build_temp'), arg(arg='target_lang')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=0), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None)]), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='initialized', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='initialize', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='objects', ctx=Store()), Name(id='output_dir', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_fix_object_args', ctx=Load()), args=[Name(id='objects', ctx=Load()), Name(id='output_dir', ctx=Load())], keywords=[])), Assign(targets=[Name(id='fixed_args', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_fix_lib_args', ctx=Load()), args=[Name(id='libraries', ctx=Load()), Name(id='library_dirs', ctx=Load()), Name(id='runtime_library_dirs', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='libraries', ctx=Store()), Name(id='library_dirs', ctx=Store()), Name(id='runtime_library_dirs', ctx=Store())], ctx=Store())], value=Name(id='fixed_args', ctx=Load())), If(test=Name(id='runtime_library_dirs', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='warn', ctx=Load()), args=[BinOp(left=Constant(value="I don't know what to do with 'runtime_library_dirs': "), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Name(id='runtime_library_dirs', ctx=Load())], keywords=[]))], keywords=[]))], orelse=[]), Assign(targets=[Name(id='lib_opts', ctx=Store())], value=Call(func=Name(id='gen_lib_options', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='library_dirs', ctx=Load()), Name(id='runtime_library_dirs', ctx=Load()), Name(id='libraries', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='output_dir', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='output_filename', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='output_dir', ctx=Load()), Name(id='output_filename', ctx=Load())], keywords=[]))], orelse=[]), If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_need_link', ctx=Load()), args=[Name(id='objects', ctx=Load()), Name(id='output_filename', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='target_desc', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='CCompiler', ctx=Load()), attr='EXECUTABLE', ctx=Load())]), body=[If(test=Name(id='debug', ctx=Load()), body=[Assign(targets=[Name(id='ldflags', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='ldflags_shared_debug', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()))], orelse=[Assign(targets=[Name(id='ldflags', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='ldflags_shared', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()))])], orelse=[If(test=Name(id='debug', ctx=Load()), body=[Assign(targets=[Name(id='ldflags', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='ldflags_shared_debug', ctx=Load()))], orelse=[Assign(targets=[Name(id='ldflags', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='ldflags_shared', ctx=Load()))])]), Assign(targets=[Name(id='export_opts', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='sym', ctx=Store()), iter=BoolOp(op=Or(), values=[Name(id='export_symbols', ctx=Load()), List(elts=[], ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='export_opts', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Constant(value='/EXPORT:'), op=Add(), right=Name(id='sym', ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Name(id='ld_args', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='ldflags', ctx=Load()), op=Add(), right=Name(id='lib_opts', ctx=Load())), op=Add(), right=Name(id='export_opts', ctx=Load())), op=Add(), right=Name(id='objects', ctx=Load())), op=Add(), right=List(elts=[BinOp(left=Constant(value='/OUT:'), op=Add(), right=Name(id='output_filename', ctx=Load()))], ctx=Load()))), Assign(targets=[Name(id='build_temp', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Subscript(value=Name(id='objects', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='export_symbols', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Tuple(elts=[Name(id='dll_name', ctx=Store()), Name(id='dll_ext', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='splitext', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='basename', ctx=Load()), args=[Name(id='output_filename', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='implib_file', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='build_temp', ctx=Load()), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='library_filename', ctx=Load()), args=[Name(id='dll_name', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='ld_args', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Constant(value='/IMPLIB:'), op=Add(), right=Name(id='implib_file', ctx=Load()))], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='manifest_setup_ldargs', ctx=Load()), args=[Name(id='output_filename', ctx=Load()), Name(id='build_temp', ctx=Load()), Name(id='ld_args', ctx=Load())], keywords=[])), If(test=Name(id='extra_preargs', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='ld_args', ctx=Load()), slice=Slice(upper=Constant(value=0)), ctx=Store())], value=Name(id='extra_preargs', ctx=Load()))], orelse=[]), If(test=Name(id='extra_postargs', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='ld_args', ctx=Load()), attr='extend', ctx=Load()), args=[Name(id='extra_postargs', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='mkpath', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Name(id='output_filename', ctx=Load())], keywords=[])], keywords=[])), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='spawn', ctx=Load()), args=[BinOp(left=List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='linker', ctx=Load())], ctx=Load()), op=Add(), right=Name(id='ld_args', ctx=Load()))], keywords=[]))], handlers=[ExceptHandler(type=Name(id='DistutilsExecError', ctx=Load()), name='msg', body=[Raise(exc=Call(func=Name(id='LinkError', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='mfinfo', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='manifest_get_embed_info', ctx=Load()), args=[Name(id='target_desc', ctx=Load()), Name(id='ld_args', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='mfinfo', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Tuple(elts=[Name(id='mffilename', ctx=Store()), Name(id='mfid', ctx=Store())], ctx=Store())], value=Name(id='mfinfo', ctx=Load())), Assign(targets=[Name(id='out_arg', ctx=Store())], value=Call(func=Attribute(value=Constant(value='-outputresource:{};{}'), attr='format', ctx=Load()), args=[Name(id='output_filename', ctx=Load()), Name(id='mfid', ctx=Load())], keywords=[])), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='spawn', ctx=Load()), args=[List(elts=[Constant(value='mt.exe'), Constant(value='-nologo'), Constant(value='-manifest'), Name(id='mffilename', ctx=Load()), Name(id='out_arg', ctx=Load())], ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='DistutilsExecError', ctx=Load()), name='msg', body=[Raise(exc=Call(func=Name(id='LinkError', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], orelse=[])], orelse=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='skipping %s (up-to-date)'), Name(id='output_filename', ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='manifest_setup_ldargs', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='output_filename'), arg(arg='build_temp'), arg(arg='ld_args')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='temp_manifest', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='build_temp', ctx=Load()), BinOp(left=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='basename', ctx=Load()), args=[Name(id='output_filename', ctx=Load())], keywords=[]), op=Add(), right=Constant(value='.manifest'))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='ld_args', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Constant(value='/MANIFESTFILE:'), op=Add(), right=Name(id='temp_manifest', ctx=Load()))], keywords=[]))], decorator_list=[]), FunctionDef(name='manifest_get_embed_info', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='target_desc'), arg(arg='ld_args')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='arg', ctx=Store()), iter=Name(id='ld_args', ctx=Load()), body=[If(test=Call(func=Attribute(value=Name(id='arg', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='/MANIFESTFILE:')], keywords=[]), body=[Assign(targets=[Name(id='temp_manifest', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='arg', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=':'), Constant(value=1)], keywords=[]), slice=Constant(value=1), ctx=Load())), Break()], orelse=[])], orelse=[Return(value=Constant(value=None))]), If(test=Compare(left=Name(id='target_desc', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='CCompiler', ctx=Load()), attr='EXECUTABLE', ctx=Load())]), body=[Assign(targets=[Name(id='mfid', ctx=Store())], value=Constant(value=1))], orelse=[Assign(targets=[Name(id='mfid', ctx=Store())], value=Constant(value=2)), Assign(targets=[Name(id='temp_manifest', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_remove_visual_c_ref', ctx=Load()), args=[Name(id='temp_manifest', ctx=Load())], keywords=[]))]), If(test=Compare(left=Name(id='temp_manifest', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=None))], orelse=[]), Return(value=Tuple(elts=[Name(id='temp_manifest', ctx=Load()), Name(id='mfid', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='_remove_visual_c_ref', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='manifest_file')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Name(id='manifest_f', ctx=Store())], value=Call(func=Name(id='open', ctx=Load()), args=[Name(id='manifest_file', ctx=Load())], keywords=[])), Try(body=[Assign(targets=[Name(id='manifest_buf', ctx=Store())], value=Call(func=Attribute(value=Name(id='manifest_f', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]))], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='manifest_f', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))]), Assign(targets=[Name(id='pattern', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='<assemblyIdentity.*?name=("|\')Microsoft\\.VC\\d{2}\\.CRT("|\').*?(/>|</assemblyIdentity>)'), Attribute(value=Name(id='re', ctx=Load()), attr='DOTALL', ctx=Load())], keywords=[])), Assign(targets=[Name(id='manifest_buf', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='sub', ctx=Load()), args=[Name(id='pattern', ctx=Load()), Constant(value=''), Name(id='manifest_buf', ctx=Load())], keywords=[])), Assign(targets=[Name(id='pattern', ctx=Store())], value=Constant(value='<dependentAssembly>\\s*</dependentAssembly>')), Assign(targets=[Name(id='manifest_buf', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='sub', ctx=Load()), args=[Name(id='pattern', ctx=Load()), Constant(value=''), Name(id='manifest_buf', ctx=Load())], keywords=[])), Assign(targets=[Name(id='pattern', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='<assemblyIdentity.*?name=(?:"|\')(.+?)(?:"|\').*?(?:/>|</assemblyIdentity>)'), Attribute(value=Name(id='re', ctx=Load()), attr='DOTALL', ctx=Load())], keywords=[])), If(test=Compare(left=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='search', ctx=Load()), args=[Name(id='pattern', ctx=Load()), Name(id='manifest_buf', ctx=Load())], keywords=[]), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='manifest_f', ctx=Store())], value=Call(func=Name(id='open', ctx=Load()), args=[Name(id='manifest_file', ctx=Load()), Constant(value='w')], keywords=[])), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='manifest_f', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='manifest_buf', ctx=Load())], keywords=[])), Return(value=Name(id='manifest_file', ctx=Load()))], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='manifest_f', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))])], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='library_dir_option', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dir')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Constant(value='/LIBPATH:'), op=Add(), right=Name(id='dir', ctx=Load())))], decorator_list=[]), FunctionDef(name='runtime_library_dir_option', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dir')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Call(func=Name(id='DistutilsPlatformError', ctx=Load()), args=[Constant(value="don't know how to set runtime library search path for MSVC++")], keywords=[]))], decorator_list=[]), FunctionDef(name='library_option', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='lib')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='library_filename', ctx=Load()), args=[Name(id='lib', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='find_library_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dirs'), arg(arg='lib'), arg(arg='debug')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[If(test=Name(id='debug', ctx=Load()), body=[Assign(targets=[Name(id='try_names', ctx=Store())], value=List(elts=[BinOp(left=Name(id='lib', ctx=Load()), op=Add(), right=Constant(value='_d')), Name(id='lib', ctx=Load())], ctx=Load()))], orelse=[Assign(targets=[Name(id='try_names', ctx=Store())], value=List(elts=[Name(id='lib', ctx=Load())], ctx=Load()))]), For(target=Name(id='dir', ctx=Store()), iter=Name(id='dirs', ctx=Load()), body=[For(target=Name(id='name', ctx=Store()), iter=Name(id='try_names', ctx=Load()), body=[Assign(targets=[Name(id='libfile', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='dir', ctx=Load()), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='library_filename', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])], keywords=[])), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='libfile', ctx=Load())], keywords=[]), body=[Return(value=Name(id='libfile', ctx=Load()))], orelse=[])], orelse=[])], orelse=[Return(value=Constant(value=None))])], decorator_list=[]), FunctionDef(name='find_exe', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='exe')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Return path to an MSVC executable program.\n\n        Tries to find the program in several places: first, one of the\n        MSVC program search paths from the registry; next, the directories\n        in the PATH environment variable.  If any of those work, return an\n        absolute path that is known to exist.  If none of them work, just\n        return the original program name, 'exe'.\n        ")), For(target=Name(id='p', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='__paths', ctx=Load()), body=[Assign(targets=[Name(id='fn', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Name(id='p', ctx=Load())], keywords=[]), Name(id='exe', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isfile', ctx=Load()), args=[Name(id='fn', ctx=Load())], keywords=[]), body=[Return(value=Name(id='fn', ctx=Load()))], orelse=[])], orelse=[]), For(target=Name(id='p', ctx=Store()), iter=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), slice=Constant(value='Path'), ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=';')], keywords=[]), body=[Assign(targets=[Name(id='fn', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Name(id='p', ctx=Load())], keywords=[]), Name(id='exe', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isfile', ctx=Load()), args=[Name(id='fn', ctx=Load())], keywords=[]), body=[Return(value=Name(id='fn', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='exe', ctx=Load()))], decorator_list=[])], decorator_list=[])], type_ignores=[])