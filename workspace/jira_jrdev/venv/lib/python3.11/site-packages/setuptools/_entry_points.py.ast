Module(body=[Import(names=[alias(name='functools')]), Import(names=[alias(name='operator')]), Import(names=[alias(name='itertools')]), ImportFrom(module='errors', names=[alias(name='OptionError')], level=1), ImportFrom(module='extern.jaraco.text', names=[alias(name='yield_lines')], level=1), ImportFrom(module='extern.jaraco.functools', names=[alias(name='pass_none')], level=1), ImportFrom(module='_importlib', names=[alias(name='metadata')], level=1), ImportFrom(module='_itertools', names=[alias(name='ensure_unique')], level=1), ImportFrom(module='extern.more_itertools', names=[alias(name='consume')], level=1), FunctionDef(name='ensure_valid', args=arguments(posonlyargs=[], args=[arg(arg='ep')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Exercise one of the dynamic properties to trigger\n    the pattern match.\n    ')), Try(body=[Expr(value=Attribute(value=Name(id='ep', ctx=Load()), attr='extras', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), name='ex', body=[Assign(targets=[Name(id='msg', ctx=Store())], value=JoinedStr(values=[Constant(value='Problems to parse '), FormattedValue(value=Name(id='ep', ctx=Load()), conversion=-1), Constant(value='.\nPlease ensure entry-point follows the spec: https://packaging.python.org/en/latest/specifications/entry-points/')])), Raise(exc=Call(func=Name(id='OptionError', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]), cause=Name(id='ex', ctx=Load()))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='load_group', args=arguments(posonlyargs=[], args=[arg(arg='value'), arg(arg='group')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Given a value of an entry point or series of entry points,\n    return each as an EntryPoint.\n    ')), Assign(targets=[Name(id='lines', ctx=Store())], value=Call(func=Name(id='yield_lines', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])), Assign(targets=[Name(id='text', ctx=Store())], value=BinOp(left=JoinedStr(values=[Constant(value='['), FormattedValue(value=Name(id='group', ctx=Load()), conversion=-1), Constant(value=']\n')]), op=Add(), right=Call(func=Attribute(value=Constant(value='\n'), attr='join', ctx=Load()), args=[Name(id='lines', ctx=Load())], keywords=[]))), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='metadata', ctx=Load()), attr='EntryPoints', ctx=Load()), attr='_from_text', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='by_group_and_name', args=arguments(posonlyargs=[], args=[arg(arg='ep')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Tuple(elts=[Attribute(value=Name(id='ep', ctx=Load()), attr='group', ctx=Load()), Attribute(value=Name(id='ep', ctx=Load()), attr='name', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='validate', args=arguments(posonlyargs=[], args=[arg(arg='eps', annotation=Attribute(value=Name(id='metadata', ctx=Load()), attr='EntryPoints', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Ensure entry points are unique by group and name and validate each.\n    ')), Expr(value=Call(func=Name(id='consume', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Name(id='ensure_valid', ctx=Load()), Call(func=Name(id='ensure_unique', ctx=Load()), args=[Name(id='eps', ctx=Load())], keywords=[keyword(arg='key', value=Name(id='by_group_and_name', ctx=Load()))])], keywords=[])], keywords=[])), Return(value=Name(id='eps', ctx=Load()))], decorator_list=[]), FunctionDef(name='load', args=arguments(posonlyargs=[], args=[arg(arg='eps')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Given a Distribution.entry_points, produce EntryPoints.\n    ')), Assign(targets=[Name(id='groups', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='itertools', ctx=Load()), attr='chain', ctx=Load()), attr='from_iterable', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='load_group', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='group', ctx=Load())], keywords=[]), generators=[comprehension(target=Tuple(elts=[Name(id='group', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='eps', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[])), Return(value=Call(func=Name(id='validate', ctx=Load()), args=[Call(func=Attribute(value=Name(id='metadata', ctx=Load()), attr='EntryPoints', ctx=Load()), args=[Name(id='groups', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[Attribute(value=Name(id='functools', ctx=Load()), attr='singledispatch', ctx=Load())]), FunctionDef(name='_', args=arguments(posonlyargs=[], args=[arg(arg='eps')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    >>> ep, = load('[console_scripts]\\nfoo=bar')\n    >>> ep.group\n    'console_scripts'\n    >>> ep.name\n    'foo'\n    >>> ep.value\n    'bar'\n    ")), Return(value=Call(func=Name(id='validate', ctx=Load()), args=[Call(func=Attribute(value=Name(id='metadata', ctx=Load()), attr='EntryPoints', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='metadata', ctx=Load()), attr='EntryPoints', ctx=Load()), attr='_from_text', ctx=Load()), args=[Name(id='eps', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='load', ctx=Load()), attr='register', ctx=Load()), args=[Name(id='str', ctx=Load())], keywords=[])]), Expr(value=Call(func=Attribute(value=Name(id='load', ctx=Load()), attr='register', ctx=Load()), args=[Call(func=Name(id='type', ctx=Load()), args=[Constant(value=None)], keywords=[]), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Name(id='x', ctx=Load()))], keywords=[])), FunctionDef(name='render', args=arguments(posonlyargs=[], args=[arg(arg='eps', annotation=Attribute(value=Name(id='metadata', ctx=Load()), attr='EntryPoints', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='by_group', ctx=Store())], value=Call(func=Attribute(value=Name(id='operator', ctx=Load()), attr='attrgetter', ctx=Load()), args=[Constant(value='group')], keywords=[])), Assign(targets=[Name(id='groups', ctx=Store())], value=Call(func=Attribute(value=Name(id='itertools', ctx=Load()), attr='groupby', ctx=Load()), args=[Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='eps', ctx=Load())], keywords=[keyword(arg='key', value=Name(id='by_group', ctx=Load()))]), Name(id='by_group', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Constant(value='\n'), attr='join', ctx=Load()), args=[GeneratorExp(elt=JoinedStr(values=[Constant(value='['), FormattedValue(value=Name(id='group', ctx=Load()), conversion=-1), Constant(value=']\n'), FormattedValue(value=Call(func=Name(id='render_items', ctx=Load()), args=[Name(id='items', ctx=Load())], keywords=[]), conversion=-1), Constant(value='\n')]), generators=[comprehension(target=Tuple(elts=[Name(id='group', ctx=Store()), Name(id='items', ctx=Store())], ctx=Store()), iter=Name(id='groups', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[Name(id='pass_none', ctx=Load())]), FunctionDef(name='render_items', args=arguments(posonlyargs=[], args=[arg(arg='eps')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value='\n'), attr='join', ctx=Load()), args=[GeneratorExp(elt=JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='ep', ctx=Load()), attr='name', ctx=Load()), conversion=-1), Constant(value=' = '), FormattedValue(value=Attribute(value=Name(id='ep', ctx=Load()), attr='value', ctx=Load()), conversion=-1)]), generators=[comprehension(target=Name(id='ep', ctx=Store()), iter=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='eps', ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[])], type_ignores=[])