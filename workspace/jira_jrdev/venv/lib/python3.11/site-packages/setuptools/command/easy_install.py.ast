Module(body=[Expr(value=Constant(value='\nEasy Install\n------------\n\nA tool for doing automatic download/extract/build of distutils-based Python\npackages.  For detailed documentation, see the accompanying EasyInstall.txt\nfile, or visit the `EasyInstall home page`__.\n\n__ https://setuptools.pypa.io/en/latest/deprecated/easy_install.html\n\n')), ImportFrom(module='glob', names=[alias(name='glob')], level=0), ImportFrom(module='distutils.util', names=[alias(name='get_platform')], level=0), ImportFrom(module='distutils.util', names=[alias(name='convert_path'), alias(name='subst_vars')], level=0), ImportFrom(module='distutils.errors', names=[alias(name='DistutilsArgError'), alias(name='DistutilsOptionError'), alias(name='DistutilsError'), alias(name='DistutilsPlatformError')], level=0), ImportFrom(module='distutils', names=[alias(name='log'), alias(name='dir_util')], level=0), ImportFrom(module='distutils.command.build_scripts', names=[alias(name='first_line_re')], level=0), ImportFrom(module='distutils.spawn', names=[alias(name='find_executable')], level=0), ImportFrom(module='distutils.command', names=[alias(name='install')], level=0), Import(names=[alias(name='sys')]), Import(names=[alias(name='os')]), Import(names=[alias(name='zipimport')]), Import(names=[alias(name='shutil')]), Import(names=[alias(name='tempfile')]), Import(names=[alias(name='zipfile')]), Import(names=[alias(name='re')]), Import(names=[alias(name='stat')]), Import(names=[alias(name='random')]), Import(names=[alias(name='textwrap')]), Import(names=[alias(name='warnings')]), Import(names=[alias(name='site')]), Import(names=[alias(name='struct')]), Import(names=[alias(name='contextlib')]), Import(names=[alias(name='subprocess')]), Import(names=[alias(name='shlex')]), Import(names=[alias(name='io')]), Import(names=[alias(name='configparser')]), Import(names=[alias(name='sysconfig')]), ImportFrom(module='sysconfig', names=[alias(name='get_path')], level=0), ImportFrom(module='setuptools', names=[alias(name='Command')], level=0), ImportFrom(module='setuptools.sandbox', names=[alias(name='run_setup')], level=0), ImportFrom(module='setuptools.command', names=[alias(name='setopt')], level=0), ImportFrom(module='setuptools.archive_util', names=[alias(name='unpack_archive')], level=0), ImportFrom(module='setuptools.package_index', names=[alias(name='PackageIndex'), alias(name='parse_requirement_arg'), alias(name='URL_SCHEME')], level=0), ImportFrom(module='setuptools.command', names=[alias(name='bdist_egg'), alias(name='egg_info')], level=0), ImportFrom(module='setuptools.warnings', names=[alias(name='SetuptoolsDeprecationWarning'), alias(name='SetuptoolsWarning')], level=0), ImportFrom(module='setuptools.wheel', names=[alias(name='Wheel')], level=0), ImportFrom(module='pkg_resources', names=[alias(name='normalize_path'), alias(name='resource_string'), alias(name='get_distribution'), alias(name='find_distributions'), alias(name='Environment'), alias(name='Requirement'), alias(name='Distribution'), alias(name='PathMetadata'), alias(name='EggMetadata'), alias(name='WorkingSet'), alias(name='DistributionNotFound'), alias(name='VersionConflict'), alias(name='DEVELOP_DIST')], level=0), Import(names=[alias(name='pkg_resources')]), ImportFrom(names=[alias(name='py312compat')], level=2), ImportFrom(module='_path', names=[alias(name='ensure_directory')], level=2), ImportFrom(module='extern.jaraco.text', names=[alias(name='yield_lines')], level=2), Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='filterwarnings', ctx=Load()), args=[Constant(value='default')], keywords=[keyword(arg='category', value=Attribute(value=Name(id='pkg_resources', ctx=Load()), attr='PEP440Warning', ctx=Load()))])), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='easy_install'), Constant(value='PthDistributions'), Constant(value='extract_wininst_cfg'), Constant(value='get_exe_prefixes')], ctx=Load())), FunctionDef(name='is_64bit', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Compare(left=Call(func=Attribute(value=Name(id='struct', ctx=Load()), attr='calcsize', ctx=Load()), args=[Constant(value='P')], keywords=[]), ops=[Eq()], comparators=[Constant(value=8)]))], decorator_list=[]), FunctionDef(name='_to_bytes', args=arguments(posonlyargs=[], args=[arg(arg='s')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='utf8')], keywords=[]))], decorator_list=[]), FunctionDef(name='isascii', args=arguments(posonlyargs=[], args=[arg(arg='s')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[])), Return(value=Constant(value=True))], handlers=[ExceptHandler(type=Name(id='UnicodeError', ctx=Load()), body=[Return(value=Constant(value=False))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='_one_liner', args=arguments(posonlyargs=[], args=[arg(arg='text')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='textwrap', ctx=Load()), attr='dedent', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[]), attr='strip', ctx=Load()), args=[], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value='\n'), Constant(value='; ')], keywords=[]))], decorator_list=[]), ClassDef(name='easy_install', bases=[Name(id='Command', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Manage a download/build/install process')), Assign(targets=[Name(id='description', ctx=Store())], value=Constant(value='Find/get/install Python packages')), Assign(targets=[Name(id='command_consumes_arguments', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='user_options', ctx=Store())], value=List(elts=[Tuple(elts=[Constant(value='prefix='), Constant(value=None), Constant(value='installation prefix')], ctx=Load()), Tuple(elts=[Constant(value='zip-ok'), Constant(value='z'), Constant(value='install package as a zipfile')], ctx=Load()), Tuple(elts=[Constant(value='multi-version'), Constant(value='m'), Constant(value='make apps have to require() a version')], ctx=Load()), Tuple(elts=[Constant(value='upgrade'), Constant(value='U'), Constant(value='force upgrade (searches PyPI for latest versions)')], ctx=Load()), Tuple(elts=[Constant(value='install-dir='), Constant(value='d'), Constant(value='install package to DIR')], ctx=Load()), Tuple(elts=[Constant(value='script-dir='), Constant(value='s'), Constant(value='install scripts to DIR')], ctx=Load()), Tuple(elts=[Constant(value='exclude-scripts'), Constant(value='x'), Constant(value="Don't install scripts")], ctx=Load()), Tuple(elts=[Constant(value='always-copy'), Constant(value='a'), Constant(value='Copy all needed packages to install dir')], ctx=Load()), Tuple(elts=[Constant(value='index-url='), Constant(value='i'), Constant(value='base URL of Python Package Index')], ctx=Load()), Tuple(elts=[Constant(value='find-links='), Constant(value='f'), Constant(value='additional URL(s) to search for packages')], ctx=Load()), Tuple(elts=[Constant(value='build-directory='), Constant(value='b'), Constant(value='download/extract/build in DIR; keep the results')], ctx=Load()), Tuple(elts=[Constant(value='optimize='), Constant(value='O'), Constant(value='also compile with optimization: -O1 for "python -O", -O2 for "python -OO", and -O0 to disable [default: -O0]')], ctx=Load()), Tuple(elts=[Constant(value='record='), Constant(value=None), Constant(value='filename in which to record list of installed files')], ctx=Load()), Tuple(elts=[Constant(value='always-unzip'), Constant(value='Z'), Constant(value="don't install as a zipfile, no matter what")], ctx=Load()), Tuple(elts=[Constant(value='site-dirs='), Constant(value='S'), Constant(value='list of directories where .pth files work')], ctx=Load()), Tuple(elts=[Constant(value='editable'), Constant(value='e'), Constant(value='Install specified packages in editable form')], ctx=Load()), Tuple(elts=[Constant(value='no-deps'), Constant(value='N'), Constant(value="don't install dependencies")], ctx=Load()), Tuple(elts=[Constant(value='allow-hosts='), Constant(value='H'), Constant(value='pattern(s) that hostnames must match')], ctx=Load()), Tuple(elts=[Constant(value='local-snapshots-ok'), Constant(value='l'), Constant(value='allow building eggs from local checkouts')], ctx=Load()), Tuple(elts=[Constant(value='version'), Constant(value=None), Constant(value='print version information and exit')], ctx=Load()), Tuple(elts=[Constant(value='no-find-links'), Constant(value=None), Constant(value="Don't load find-links defined in packages being installed")], ctx=Load()), Tuple(elts=[Constant(value='user'), Constant(value=None), BinOp(left=Constant(value="install in user site-package '%s'"), op=Mod(), right=Attribute(value=Name(id='site', ctx=Load()), attr='USER_SITE', ctx=Load()))], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='boolean_options', ctx=Store())], value=List(elts=[Constant(value='zip-ok'), Constant(value='multi-version'), Constant(value='exclude-scripts'), Constant(value='upgrade'), Constant(value='always-copy'), Constant(value='editable'), Constant(value='no-deps'), Constant(value='local-snapshots-ok'), Constant(value='version'), Constant(value='user')], ctx=Load())), Assign(targets=[Name(id='negative_opt', ctx=Store())], value=Dict(keys=[Constant(value='always-unzip')], values=[Constant(value='zip-ok')])), Assign(targets=[Name(id='create_index', ctx=Store())], value=Name(id='PackageIndex', ctx=Load())), FunctionDef(name='initialize_options', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='EasyInstallDeprecationWarning', ctx=Load()), attr='emit', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='user', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='zip_ok', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='local_snapshots_ok', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='install_dir', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='script_dir', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='exclude_scripts', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='index_url', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='find_links', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='build_directory', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='args', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='optimize', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='record', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='upgrade', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='always_copy', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='multi_version', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='editable', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='no_deps', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='allow_hosts', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='root', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='prefix', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='no_report', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='version', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='install_purelib', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='install_platlib', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='install_headers', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='install_lib', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='install_scripts', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='install_data', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='install_base', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='install_platbase', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='install_userbase', ctx=Store())], value=Attribute(value=Name(id='site', ctx=Load()), attr='USER_BASE', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='install_usersite', ctx=Store())], value=Attribute(value=Name(id='site', ctx=Load()), attr='USER_SITE', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='no_find_links', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='package_index', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='pth_file', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='always_copy_from', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='site_dirs', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='installed_projects', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_dry_run', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='verbose', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='verbose', ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='_set_command_options', ctx=Load()), args=[Name(id='self', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='get_option_dict', ctx=Load()), args=[Constant(value='easy_install')], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='delete_blockers', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='blockers')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='extant_blockers', ctx=Store())], value=GeneratorExp(elt=Name(id='filename', ctx=Load()), generators=[comprehension(target=Name(id='filename', ctx=Store()), iter=Name(id='blockers', ctx=Load()), ifs=[BoolOp(op=Or(), values=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='islink', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[])])], is_async=0)])), Expr(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_delete_path', ctx=Load()), Name(id='extant_blockers', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='_delete_path', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Deleting %s'), Name(id='path', ctx=Load())], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='dry_run', ctx=Load()), body=[Return()], orelse=[]), Assign(targets=[Name(id='is_tree', ctx=Store())], value=BoolOp(op=And(), values=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isdir', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='islink', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))])), Assign(targets=[Name(id='remover', ctx=Store())], value=IfExp(test=Name(id='is_tree', ctx=Load()), body=Name(id='_rmtree', ctx=Load()), orelse=Attribute(value=Name(id='os', ctx=Load()), attr='unlink', ctx=Load()))), Expr(value=Call(func=Name(id='remover', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_render_version', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Render the Setuptools version and installation details, then exit.\n        ')), Assign(targets=[Name(id='ver', ctx=Store())], value=Call(func=Attribute(value=Constant(value='{}.{}'), attr='format', ctx=Load()), args=[Starred(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='dist', ctx=Store())], value=Call(func=Name(id='get_distribution', ctx=Load()), args=[Constant(value='setuptools')], keywords=[])), Assign(targets=[Name(id='tmpl', ctx=Store())], value=Constant(value='setuptools {dist.version} from {dist.location} (Python {ver})')), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Attribute(value=Name(id='tmpl', ctx=Load()), attr='format', ctx=Load()), args=[], keywords=[keyword(value=Call(func=Name(id='locals', ctx=Load()), args=[], keywords=[]))])], keywords=[])), Raise(exc=Call(func=Name(id='SystemExit', ctx=Load()), args=[], keywords=[]))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='finalize_options', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='version', ctx=Load()), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_render_version', ctx=Load()), args=[], keywords=[])])), Assign(targets=[Name(id='py_version', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[]), slice=Constant(value=0), ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='config_vars', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[Call(func=Attribute(value=Name(id='sysconfig', ctx=Load()), attr='get_config_vars', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config_vars', ctx=Load()), attr='update', ctx=Load()), args=[Dict(keys=[Constant(value='dist_name'), Constant(value='dist_version'), Constant(value='dist_fullname'), Constant(value='py_version'), Constant(value='py_version_short'), Constant(value='py_version_nodot'), Constant(value='sys_prefix'), Constant(value='sys_exec_prefix'), Constant(value='abiflags'), Constant(value='platlibdir')], values=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='get_name', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='get_version', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='get_fullname', ctx=Load()), args=[], keywords=[]), Name(id='py_version', ctx=Load()), JoinedStr(values=[FormattedValue(value=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), attr='major', ctx=Load()), conversion=-1), Constant(value='.'), FormattedValue(value=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), attr='minor', ctx=Load()), conversion=-1)]), JoinedStr(values=[FormattedValue(value=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), attr='major', ctx=Load()), conversion=-1), FormattedValue(value=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), attr='minor', ctx=Load()), conversion=-1)]), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='config_vars', ctx=Load()), slice=Constant(value='prefix'), ctx=Load()), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='config_vars', ctx=Load()), slice=Constant(value='exec_prefix'), ctx=Load()), Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='sys', ctx=Load()), Constant(value='abiflags'), Constant(value='')], keywords=[]), Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='sys', ctx=Load()), Constant(value='platlibdir'), Constant(value='lib')], keywords=[])])], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='contextlib', ctx=Load()), attr='suppress', ctx=Load()), args=[Name(id='AttributeError', ctx=Load())], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config_vars', ctx=Load()), attr='update', ctx=Load()), args=[Dict(keys=[Constant(value='implementation_lower'), Constant(value='implementation')], values=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='install', ctx=Load()), attr='_get_implementation', ctx=Load()), args=[], keywords=[]), attr='lower', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='install', ctx=Load()), attr='_get_implementation', ctx=Load()), args=[], keywords=[])])], keywords=[]))]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config_vars', ctx=Load()), attr='setdefault', ctx=Load()), args=[Constant(value='py_version_nodot_plat'), Call(func=Attribute(value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='sys', ctx=Load()), Constant(value='windir'), Constant(value='')], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value='.'), Constant(value='')], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='config_vars', ctx=Load()), slice=Constant(value='userbase'), ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='install_userbase', ctx=Load())), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='config_vars', ctx=Load()), slice=Constant(value='usersite'), ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='install_usersite', ctx=Load())), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='user', ctx=Load()), UnaryOp(op=Not(), operand=Attribute(value=Name(id='site', ctx=Load()), attr='ENABLE_USER_SITE', ctx=Load()))]), body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value='WARNING: The user site-packages directory is disabled.')], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_fix_install_dir_for_user_site', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='expand_basedirs', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='expand_dirs', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_expand', ctx=Load()), args=[Constant(value='install_dir'), Constant(value='script_dir'), Constant(value='build_directory'), Constant(value='site_dirs')], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='script_dir', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='script_dir', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='install_dir', ctx=Load()))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='no_find_links', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='no_find_links', ctx=Store())], value=Constant(value=False))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_undefined_options', ctx=Load()), args=[Constant(value='install_lib'), Tuple(elts=[Constant(value='install_dir'), Constant(value='install_dir')], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_undefined_options', ctx=Load()), args=[Constant(value='install_scripts'), Tuple(elts=[Constant(value='install_dir'), Constant(value='script_dir')], ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='user', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='install_purelib', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='install_dir', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='install_purelib', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='script_dir', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='install_scripts', ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_undefined_options', ctx=Load()), args=[Constant(value='install'), Tuple(elts=[Constant(value='record'), Constant(value='record')], ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='all_site_dirs', ctx=Store())], value=Call(func=Name(id='get_site_dirs', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='all_site_dirs', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_process_site_dirs', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='site_dirs', ctx=Load())], keywords=[])], keywords=[])), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='editable', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='check_site_dir', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='default_index', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getenv', ctx=Load()), args=[Constant(value='__EASYINSTALL_INDEX'), Constant(value='https://pypi.org/simple/')], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='index_url', ctx=Store())], value=BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='index_url', ctx=Load()), Name(id='default_index', ctx=Load())])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='shadow_path', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='all_site_dirs', ctx=Load()), slice=Slice(), ctx=Load())), For(target=Name(id='path_item', ctx=Store()), iter=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='install_dir', ctx=Load()), Call(func=Name(id='normalize_path', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='script_dir', ctx=Load())], keywords=[])], ctx=Load()), body=[If(test=Compare(left=Name(id='path_item', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='shadow_path', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='shadow_path', ctx=Load()), attr='insert', ctx=Load()), args=[Constant(value=0), Name(id='path_item', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='allow_hosts', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='hosts', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]), generators=[comprehension(target=Name(id='s', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='allow_hosts', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=',')], keywords=[]), ifs=[], is_async=0)]))], orelse=[Assign(targets=[Name(id='hosts', ctx=Store())], value=List(elts=[Constant(value='*')], ctx=Load()))]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='package_index', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='package_index', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='create_index', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='index_url', ctx=Load())], keywords=[keyword(arg='search_path', value=Attribute(value=Name(id='self', ctx=Load()), attr='shadow_path', ctx=Load())), keyword(arg='hosts', value=Name(id='hosts', ctx=Load()))]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='local_index', ctx=Store())], value=Call(func=Name(id='Environment', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='shadow_path', ctx=Load()), op=Add(), right=Attribute(value=Name(id='sys', ctx=Load()), attr='path', ctx=Load()))], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='find_links', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='find_links', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='find_links', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='find_links', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[]))], orelse=[])], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='find_links', ctx=Store())], value=List(elts=[], ctx=Load()))]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='local_snapshots_ok', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='package_index', ctx=Load()), attr='scan_egg_links', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='shadow_path', ctx=Load()), op=Add(), right=Attribute(value=Name(id='sys', ctx=Load()), attr='path', ctx=Load()))], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='no_find_links', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='package_index', ctx=Load()), attr='add_find_links', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='find_links', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_undefined_options', ctx=Load()), args=[Constant(value='install_lib'), Tuple(elts=[Constant(value='optimize'), Constant(value='optimize')], ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='optimize', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_validate_optimize', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='optimize', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='editable', ctx=Load()), UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='build_directory', ctx=Load()))]), body=[Raise(exc=Call(func=Name(id='DistutilsArgError', ctx=Load()), args=[Constant(value='Must specify a build directory (-b) when using --editable')], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='args', ctx=Load())), body=[Raise(exc=Call(func=Name(id='DistutilsArgError', ctx=Load()), args=[Constant(value='No urls, filenames, or requirements specified (see --help)')], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='outputs', ctx=Store())], value=List(elts=[], ctx=Load()))], decorator_list=[]), FunctionDef(name='_process_site_dirs', args=arguments(posonlyargs=[], args=[arg(arg='site_dirs')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='site_dirs', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return()], orelse=[]), Assign(targets=[Name(id='normpath', ctx=Store())], value=Call(func=Name(id='map', ctx=Load()), args=[Name(id='normalize_path', ctx=Load()), Attribute(value=Name(id='sys', ctx=Load()), attr='path', ctx=Load())], keywords=[])), Assign(targets=[Name(id='site_dirs', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='expanduser', ctx=Load()), args=[Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[])], keywords=[]), generators=[comprehension(target=Name(id='s', ctx=Store()), iter=Call(func=Attribute(value=Name(id='site_dirs', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=',')], keywords=[]), ifs=[], is_async=0)])), For(target=Name(id='d', ctx=Store()), iter=Name(id='site_dirs', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isdir', ctx=Load()), args=[Name(id='d', ctx=Load())], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value='%s (in --site-dirs) does not exist'), Name(id='d', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Call(func=Name(id='normalize_path', ctx=Load()), args=[Name(id='d', ctx=Load())], keywords=[]), ops=[NotIn()], comparators=[Name(id='normpath', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='DistutilsOptionError', ctx=Load()), args=[BinOp(left=Name(id='d', ctx=Load()), op=Add(), right=Constant(value=' (in --site-dirs) is not on sys.path'))], keywords=[]))], orelse=[Expr(value=Yield(value=Call(func=Name(id='normalize_path', ctx=Load()), args=[Name(id='d', ctx=Load())], keywords=[])))])])], orelse=[])], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='_validate_optimize', args=arguments(posonlyargs=[], args=[arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='value', ctx=Load()), ops=[NotIn()], comparators=[Call(func=Name(id='range', ctx=Load()), args=[Constant(value=3)], keywords=[])]), body=[Raise(exc=Name(id='ValueError', ctx=Load()))], orelse=[])], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='DistutilsOptionError', ctx=Load()), args=[Constant(value='--optimize must be 0, 1, or 2')], keywords=[]), cause=Name(id='e', ctx=Load()))])], orelse=[], finalbody=[]), Return(value=Name(id='value', ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='_fix_install_dir_for_user_site', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Fix the install_dir if "--user" was used.\n        ')), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='user', ctx=Load())), body=[Return()], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='create_home_path', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='install_userbase', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Constant(value='User base directory is not specified')), Raise(exc=Call(func=Name(id='DistutilsPlatformError', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='install_base', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='install_platbase', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='install_userbase', ctx=Load())), Assign(targets=[Name(id='scheme_name', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='os', ctx=Load()), attr='name', ctx=Load()), conversion=-1), Constant(value='_user')])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='select_scheme', ctx=Load()), args=[Name(id='scheme_name', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_expand_attrs', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='attrs')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='attr', ctx=Store()), iter=Name(id='attrs', ctx=Load()), body=[Assign(targets=[Name(id='val', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='attr', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='val', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='os', ctx=Load()), attr='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='posix')]), Compare(left=Attribute(value=Name(id='os', ctx=Load()), attr='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='nt')])]), body=[Assign(targets=[Name(id='val', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='expanduser', ctx=Load()), args=[Name(id='val', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='val', ctx=Store())], value=Call(func=Name(id='subst_vars', ctx=Load()), args=[Name(id='val', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='config_vars', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='attr', ctx=Load()), Name(id='val', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='expand_basedirs', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Calls `os.path.expanduser` on install_base, install_platbase and\n        root.')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_expand_attrs', ctx=Load()), args=[List(elts=[Constant(value='install_base'), Constant(value='install_platbase'), Constant(value='root')], ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='expand_dirs', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Calls `os.path.expanduser` on install dirs.')), Assign(targets=[Name(id='dirs', ctx=Store())], value=List(elts=[Constant(value='install_purelib'), Constant(value='install_platlib'), Constant(value='install_lib'), Constant(value='install_headers'), Constant(value='install_scripts'), Constant(value='install_data')], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_expand_attrs', ctx=Load()), args=[Name(id='dirs', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='run', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='show_deprecation')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[If(test=Name(id='show_deprecation', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='announce', ctx=Load()), args=[Constant(value='WARNING: The easy_install command is deprecated and will be removed in a future version.'), Attribute(value=Name(id='log', ctx=Load()), attr='WARN', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='verbose', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='verbose', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='set_verbosity', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='verbose', ctx=Load())], keywords=[]))], orelse=[]), Try(body=[For(target=Name(id='spec', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='args', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='easy_install', ctx=Load()), args=[Name(id='spec', ctx=Load()), UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='no_deps', ctx=Load()))], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='record', ctx=Load()), body=[Assign(targets=[Name(id='outputs', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='outputs', ctx=Load())), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='root', ctx=Load()), body=[Assign(targets=[Name(id='root_len', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='root', ctx=Load())], keywords=[])), For(target=Name(id='counter', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='outputs', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='outputs', ctx=Load()), slice=Name(id='counter', ctx=Load()), ctx=Store())], value=Subscript(value=Subscript(value=Name(id='outputs', ctx=Load()), slice=Name(id='counter', ctx=Load()), ctx=Load()), slice=Slice(lower=Name(id='root_len', ctx=Load())), ctx=Load()))], orelse=[])], orelse=[]), ImportFrom(module='distutils', names=[alias(name='file_util')], level=0), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Attribute(value=Name(id='file_util', ctx=Load()), attr='write_file', ctx=Load()), Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='record', ctx=Load()), Name(id='outputs', ctx=Load())], ctx=Load()), BinOp(left=Constant(value="writing list of installed files to '%s'"), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='record', ctx=Load()))], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='warn_deprecated_options', ctx=Load()), args=[], keywords=[]))], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='set_verbosity', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='verbose', ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='pseudo_tempname', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Return a pseudo-tempname base in the install directory.\n        This code is intentionally naive; if a malicious party can write to\n        the target directory you're already in deep doodoo.\n        ")), Try(body=[Assign(targets=[Name(id='pid', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getpid', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Assign(targets=[Name(id='pid', ctx=Store())], value=Call(func=Attribute(value=Name(id='random', ctx=Load()), attr='randint', ctx=Load()), args=[Constant(value=0), Attribute(value=Name(id='sys', ctx=Load()), attr='maxsize', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[]), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='install_dir', ctx=Load()), BinOp(left=Constant(value='test-easy-install-%s'), op=Mod(), right=Name(id='pid', ctx=Load()))], keywords=[]))], decorator_list=[]), FunctionDef(name='warn_deprecated_options', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[]), FunctionDef(name='check_site_dir', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Verify that self.install_dir is .pth-capable dir, if needed')), Assign(targets=[Name(id='instdir', ctx=Store())], value=Call(func=Name(id='normalize_path', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='install_dir', ctx=Load())], keywords=[])), Assign(targets=[Name(id='pth_file', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='instdir', ctx=Load()), Constant(value='easy-install.pth')], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='instdir', ctx=Load())], keywords=[])), body=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Name(id='instdir', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='OSError', ctx=Load()), Name(id='IOError', ctx=Load())], ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='cant_write_to_target', ctx=Load()), args=[], keywords=[]))])], orelse=[], finalbody=[])], orelse=[]), Assign(targets=[Name(id='is_site_dir', ctx=Store())], value=Compare(left=Name(id='instdir', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='all_site_dirs', ctx=Load())])), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Name(id='is_site_dir', ctx=Load())), UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='multi_version', ctx=Load()))]), body=[Assign(targets=[Name(id='is_site_dir', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='check_pth_processing', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Name(id='testfile', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='pseudo_tempname', ctx=Load()), args=[], keywords=[]), op=Add(), right=Constant(value='.write-test'))), Assign(targets=[Name(id='test_exists', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='testfile', ctx=Load())], keywords=[])), Try(body=[If(test=Name(id='test_exists', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='unlink', ctx=Load()), args=[Name(id='testfile', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Call(func=Name(id='open', ctx=Load()), args=[Name(id='testfile', ctx=Load()), Constant(value='w')], keywords=[]), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='unlink', ctx=Load()), args=[Name(id='testfile', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='OSError', ctx=Load()), Name(id='IOError', ctx=Load())], ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='cant_write_to_target', ctx=Load()), args=[], keywords=[]))])], orelse=[], finalbody=[])]), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Name(id='is_site_dir', ctx=Load())), UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='multi_version', ctx=Load()))]), body=[Assign(targets=[Name(id='pythonpath', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='PYTHONPATH'), Constant(value='')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='warn', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='__no_default_msg', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='install_dir', ctx=Load()), Name(id='pythonpath', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='is_site_dir', ctx=Load()), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='pth_file', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='pth_file', ctx=Store())], value=Call(func=Name(id='PthDistributions', ctx=Load()), args=[Name(id='pth_file', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='all_site_dirs', ctx=Load())], keywords=[]))], orelse=[])], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='pth_file', ctx=Store())], value=Constant(value=None))]), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='multi_version', ctx=Load()), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='pth_file', ctx=Load())], keywords=[]))]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='pth_file', ctx=Store())], value=Constant(value=None))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='install_dir', ctx=Store())], value=Name(id='instdir', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='__cant_write_msg', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='textwrap', ctx=Load()), attr='dedent', ctx=Load()), args=[Constant(value="\n        can't create or remove files in install directory\n\n        The following error occurred while trying to add or remove files in the\n        installation directory:\n\n            %s\n\n        The installation directory you specified (via --install-dir, --prefix, or\n        the distutils default setting) was:\n\n            %s\n        ")], keywords=[]), attr='lstrip', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='__not_exists_id', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='textwrap', ctx=Load()), attr='dedent', ctx=Load()), args=[Constant(value='\n        This directory does not currently exist.  Please create it and try again, or\n        choose a different installation directory (using the -d or --install-dir\n        option).\n        ')], keywords=[]), attr='lstrip', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='__access_msg', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='textwrap', ctx=Load()), attr='dedent', ctx=Load()), args=[Constant(value='\n        Perhaps your account does not have write access to this directory?  If the\n        installation directory is a system-owned directory, you may need to sign in\n        as the administrator or "root" account.  If you do not have administrative\n        access to this machine, you may wish to choose a different installation\n        directory, preferably one that is listed in your PYTHONPATH environment\n        variable.\n\n        For information on other options, you may wish to consult the\n        documentation at:\n\n          https://setuptools.pypa.io/en/latest/deprecated/easy_install.html\n\n        Please make the appropriate changes for your system and try again.\n        ')], keywords=[]), attr='lstrip', ctx=Load()), args=[], keywords=[])), FunctionDef(name='cant_write_to_target', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='__cant_write_msg', ctx=Load()), op=Mod(), right=Tuple(elts=[Subscript(value=Call(func=Attribute(value=Name(id='sys', ctx=Load()), attr='exc_info', ctx=Load()), args=[], keywords=[]), slice=Constant(value=1), ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='install_dir', ctx=Load())], ctx=Load()))), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='install_dir', ctx=Load())], keywords=[])), body=[AugAssign(target=Name(id='msg', ctx=Store()), op=Add(), value=BinOp(left=Constant(value='\n'), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='__not_exists_id', ctx=Load())))], orelse=[AugAssign(target=Name(id='msg', ctx=Store()), op=Add(), value=BinOp(left=Constant(value='\n'), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='__access_msg', ctx=Load())))]), Raise(exc=Call(func=Name(id='DistutilsError', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='check_pth_processing', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Empirically verify whether .pth files are supported in inst. dir')), Assign(targets=[Name(id='instdir', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='install_dir', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Checking .pth file support in %s'), Name(id='instdir', ctx=Load())], keywords=[])), Assign(targets=[Name(id='pth_file', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='pseudo_tempname', ctx=Load()), args=[], keywords=[]), op=Add(), right=Constant(value='.pth'))), Assign(targets=[Name(id='ok_file', ctx=Store())], value=BinOp(left=Name(id='pth_file', ctx=Load()), op=Add(), right=Constant(value='.ok'))), Assign(targets=[Name(id='ok_exists', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='ok_file', ctx=Load())], keywords=[])), Assign(targets=[Name(id='tmpl', ctx=Store())], value=BinOp(left=Call(func=Name(id='_one_liner', ctx=Load()), args=[Constant(value="\n            import os\n            f = open({ok_file!r}, 'w')\n            f.write('OK')\n            f.close()\n            ")], keywords=[]), op=Add(), right=Constant(value='\n'))), Try(body=[If(test=Name(id='ok_exists', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='unlink', ctx=Load()), args=[Name(id='ok_file', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='dirname', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Name(id='ok_file', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Name(id='dirname', ctx=Load())], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), Assign(targets=[Name(id='f', ctx=Store())], value=Call(func=Name(id='open', ctx=Load()), args=[Name(id='pth_file', ctx=Load()), Constant(value='w')], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='OSError', ctx=Load()), Name(id='IOError', ctx=Load())], ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='cant_write_to_target', ctx=Load()), args=[], keywords=[]))])], orelse=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Attribute(value=Name(id='tmpl', ctx=Load()), attr='format', ctx=Load()), args=[], keywords=[keyword(value=Call(func=Name(id='locals', ctx=Load()), args=[], keywords=[]))])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='f', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='executable', ctx=Store())], value=Attribute(value=Name(id='sys', ctx=Load()), attr='executable', ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='os', ctx=Load()), attr='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='nt')]), body=[Assign(targets=[Tuple(elts=[Name(id='dirname', ctx=Store()), Name(id='basename', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='split', ctx=Load()), args=[Name(id='executable', ctx=Load())], keywords=[])), Assign(targets=[Name(id='alt', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='dirname', ctx=Load()), Constant(value='pythonw.exe')], keywords=[])), Assign(targets=[Name(id='use_alt', ctx=Store())], value=BoolOp(op=And(), values=[Compare(left=Call(func=Attribute(value=Name(id='basename', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Constant(value='python.exe')]), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='alt', ctx=Load())], keywords=[])])), If(test=Name(id='use_alt', ctx=Load()), body=[Assign(targets=[Name(id='executable', ctx=Store())], value=Name(id='alt', ctx=Load()))], orelse=[])], orelse=[]), ImportFrom(module='distutils.spawn', names=[alias(name='spawn')], level=0), Expr(value=Call(func=Name(id='spawn', ctx=Load()), args=[List(elts=[Name(id='executable', ctx=Load()), Constant(value='-E'), Constant(value='-c'), Constant(value='pass')], ctx=Load()), Constant(value=0)], keywords=[])), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='ok_file', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='TEST PASSED: %s appears to support .pth files'), Name(id='instdir', ctx=Load())], keywords=[])), Return(value=Constant(value=True))], orelse=[])], handlers=[], orelse=[], finalbody=[If(test=Name(id='f', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='ok_file', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='unlink', ctx=Load()), args=[Name(id='ok_file', ctx=Load())], keywords=[]))], orelse=[]), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='pth_file', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='unlink', ctx=Load()), args=[Name(id='pth_file', ctx=Load())], keywords=[]))], orelse=[])])], finalbody=[]), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='multi_version', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value='TEST FAILED: %s does NOT support .pth files'), Name(id='instdir', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Constant(value=False))], decorator_list=[]), FunctionDef(name='install_egg_scripts', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dist')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Write all the scripts for `dist`, unless scripts are excluded')), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='exclude_scripts', ctx=Load())), Call(func=Attribute(value=Name(id='dist', ctx=Load()), attr='metadata_isdir', ctx=Load()), args=[Constant(value='scripts')], keywords=[])]), body=[For(target=Name(id='script_name', ctx=Store()), iter=Call(func=Attribute(value=Name(id='dist', ctx=Load()), attr='metadata_listdir', ctx=Load()), args=[Constant(value='scripts')], keywords=[]), body=[If(test=Call(func=Attribute(value=Name(id='dist', ctx=Load()), attr='metadata_isdir', ctx=Load()), args=[BinOp(left=Constant(value='scripts/'), op=Add(), right=Name(id='script_name', ctx=Load()))], keywords=[]), body=[Continue()], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='install_script', ctx=Load()), args=[Name(id='dist', ctx=Load()), Name(id='script_name', ctx=Load()), Call(func=Attribute(value=Name(id='dist', ctx=Load()), attr='get_metadata', ctx=Load()), args=[BinOp(left=Constant(value='scripts/'), op=Add(), right=Name(id='script_name', ctx=Load()))], keywords=[])], keywords=[]))], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='install_wrapper_scripts', ctx=Load()), args=[Name(id='dist', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='add_output', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isdir', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), body=[For(target=Tuple(elts=[Name(id='base', ctx=Store()), Name(id='dirs', ctx=Store()), Name(id='files', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='walk', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), body=[For(target=Name(id='filename', ctx=Store()), iter=Name(id='files', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='outputs', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='base', ctx=Load()), Name(id='filename', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], orelse=[])], orelse=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='outputs', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='not_editable', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='spec')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='editable', ctx=Load()), body=[Raise(exc=Call(func=Name(id='DistutilsArgError', ctx=Load()), args=[BinOp(left=Constant(value="Invalid argument %r: you can't use filenames or URLs with --editable (except via the --find-links option)."), op=Mod(), right=Tuple(elts=[Name(id='spec', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='check_editable', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='spec')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='editable', ctx=Load())), body=[Return()], orelse=[]), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='build_directory', ctx=Load()), Attribute(value=Name(id='spec', ctx=Load()), attr='key', ctx=Load())], keywords=[])], keywords=[]), body=[Raise(exc=Call(func=Name(id='DistutilsArgError', ctx=Load()), args=[BinOp(left=Constant(value="%r already exists in %s; can't do a checkout there"), op=Mod(), right=Tuple(elts=[Attribute(value=Name(id='spec', ctx=Load()), attr='key', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='build_directory', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='_tmpdir', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='tmpdir', ctx=Store())], value=Call(func=Attribute(value=Name(id='tempfile', ctx=Load()), attr='mkdtemp', ctx=Load()), args=[], keywords=[keyword(arg='prefix', value=Constant(value='easy_install-', kind='u'))])), Try(body=[Expr(value=Yield(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='tmpdir', ctx=Load())], keywords=[])))], handlers=[], orelse=[], finalbody=[Expr(value=BoolOp(op=And(), values=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='tmpdir', ctx=Load())], keywords=[]), Call(func=Name(id='_rmtree', ctx=Load()), args=[Name(id='tmpdir', ctx=Load())], keywords=[])]))])], decorator_list=[Attribute(value=Name(id='contextlib', ctx=Load()), attr='contextmanager', ctx=Load())]), FunctionDef(name='easy_install', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='spec'), arg(arg='deps')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_tmpdir', ctx=Load()), args=[], keywords=[]), optional_vars=Name(id='tmpdir', ctx=Store()))], body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='spec', ctx=Load()), Name(id='Requirement', ctx=Load())], keywords=[])), body=[If(test=Call(func=Name(id='URL_SCHEME', ctx=Load()), args=[Name(id='spec', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='not_editable', ctx=Load()), args=[Name(id='spec', ctx=Load())], keywords=[])), Assign(targets=[Name(id='dl', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='package_index', ctx=Load()), attr='download', ctx=Load()), args=[Name(id='spec', ctx=Load()), Name(id='tmpdir', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='install_item', ctx=Load()), args=[Constant(value=None), Name(id='dl', ctx=Load()), Name(id='tmpdir', ctx=Load()), Name(id='deps', ctx=Load()), Constant(value=True)], keywords=[]))], orelse=[If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='spec', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='not_editable', ctx=Load()), args=[Name(id='spec', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='install_item', ctx=Load()), args=[Constant(value=None), Name(id='spec', ctx=Load()), Name(id='tmpdir', ctx=Load()), Name(id='deps', ctx=Load()), Constant(value=True)], keywords=[]))], orelse=[Assign(targets=[Name(id='spec', ctx=Store())], value=Call(func=Name(id='parse_requirement_arg', ctx=Load()), args=[Name(id='spec', ctx=Load())], keywords=[]))])])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='check_editable', ctx=Load()), args=[Name(id='spec', ctx=Load())], keywords=[])), Assign(targets=[Name(id='dist', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='package_index', ctx=Load()), attr='fetch_distribution', ctx=Load()), args=[Name(id='spec', ctx=Load()), Name(id='tmpdir', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='upgrade', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='editable', ctx=Load()), UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='always_copy', ctx=Load())), Attribute(value=Name(id='self', ctx=Load()), attr='local_index', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='dist', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=BinOp(left=Constant(value='Could not find suitable distribution for %r'), op=Mod(), right=Name(id='spec', ctx=Load()))), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='always_copy', ctx=Load()), body=[AugAssign(target=Name(id='msg', ctx=Store()), op=Add(), value=Constant(value=' (--always-copy skips system and development eggs)'))], orelse=[]), Raise(exc=Call(func=Name(id='DistutilsError', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Attribute(value=Name(id='dist', ctx=Load()), attr='precedence', ctx=Load()), ops=[Eq()], comparators=[Name(id='DEVELOP_DIST', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='process_distribution', ctx=Load()), args=[Name(id='spec', ctx=Load()), Name(id='dist', ctx=Load()), Name(id='deps', ctx=Load()), Constant(value='Using')], keywords=[])), Return(value=Name(id='dist', ctx=Load()))], orelse=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='install_item', ctx=Load()), args=[Name(id='spec', ctx=Load()), Attribute(value=Name(id='dist', ctx=Load()), attr='location', ctx=Load()), Name(id='tmpdir', ctx=Load()), Name(id='deps', ctx=Load())], keywords=[]))])])])], decorator_list=[]), FunctionDef(name='install_item', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='spec'), arg(arg='download'), arg(arg='tmpdir'), arg(arg='deps'), arg(arg='install_needed')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Assign(targets=[Name(id='install_needed', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='install_needed', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='always_copy', ctx=Load())])), Assign(targets=[Name(id='install_needed', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='install_needed', ctx=Load()), Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Name(id='download', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Name(id='tmpdir', ctx=Load())])])), Assign(targets=[Name(id='install_needed', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='install_needed', ctx=Load()), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='download', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='.egg')], keywords=[]))])), Assign(targets=[Name(id='install_needed', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='install_needed', ctx=Load()), BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='always_copy_from', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Call(func=Name(id='normalize_path', ctx=Load()), args=[Name(id='download', ctx=Load())], keywords=[])], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='normalize_path', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='always_copy_from', ctx=Load())], keywords=[])])])])), If(test=BoolOp(op=And(), values=[Name(id='spec', ctx=Load()), UnaryOp(op=Not(), operand=Name(id='install_needed', ctx=Load()))]), body=[For(target=Name(id='dist', ctx=Store()), iter=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='local_index', ctx=Load()), slice=Attribute(value=Name(id='spec', ctx=Load()), attr='project_name', ctx=Load()), ctx=Load()), body=[If(test=Compare(left=Attribute(value=Name(id='dist', ctx=Load()), attr='location', ctx=Load()), ops=[Eq()], comparators=[Name(id='download', ctx=Load())]), body=[Break()], orelse=[])], orelse=[Assign(targets=[Name(id='install_needed', ctx=Store())], value=Constant(value=True))])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Processing %s'), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='basename', ctx=Load()), args=[Name(id='download', ctx=Load())], keywords=[])], keywords=[])), If(test=Name(id='install_needed', ctx=Load()), body=[Assign(targets=[Name(id='dists', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='install_eggs', ctx=Load()), args=[Name(id='spec', ctx=Load()), Name(id='download', ctx=Load()), Name(id='tmpdir', ctx=Load())], keywords=[])), For(target=Name(id='dist', ctx=Store()), iter=Name(id='dists', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='process_distribution', ctx=Load()), args=[Name(id='spec', ctx=Load()), Name(id='dist', ctx=Load()), Name(id='deps', ctx=Load())], keywords=[]))], orelse=[])], orelse=[Assign(targets=[Name(id='dists', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='egg_distribution', ctx=Load()), args=[Name(id='download', ctx=Load())], keywords=[])], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='process_distribution', ctx=Load()), args=[Name(id='spec', ctx=Load()), Subscript(value=Name(id='dists', ctx=Load()), slice=Constant(value=0), ctx=Load()), Name(id='deps', ctx=Load()), Constant(value='Using')], keywords=[]))]), If(test=Compare(left=Name(id='spec', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[For(target=Name(id='dist', ctx=Store()), iter=Name(id='dists', ctx=Load()), body=[If(test=Compare(left=Name(id='dist', ctx=Load()), ops=[In()], comparators=[Name(id='spec', ctx=Load())]), body=[Return(value=Name(id='dist', ctx=Load()))], orelse=[])], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='select_scheme', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='install', ctx=Load()), attr='_select_scheme', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='name', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='install', ctx=Load()), attr='install', ctx=Load()), attr='select_scheme', ctx=Load()), args=[Name(id='self', ctx=Load()), Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='posix'), Constant(value='unix')], keywords=[])], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='process_distribution', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='requirement'), arg(arg='dist'), arg(arg='deps')], vararg=arg(arg='info'), kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='update_pth', ctx=Load()), args=[Name(id='dist', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='package_index', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='dist', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='dist', ctx=Load()), ops=[In()], comparators=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='local_index', ctx=Load()), slice=Attribute(value=Name(id='dist', ctx=Load()), attr='key', ctx=Load()), ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='local_index', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='dist', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='local_index', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='dist', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='install_egg_scripts', ctx=Load()), args=[Name(id='dist', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='installed_projects', ctx=Load()), slice=Attribute(value=Name(id='dist', ctx=Load()), attr='key', ctx=Load()), ctx=Store())], value=Name(id='dist', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='info', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='installation_report', ctx=Load()), args=[Name(id='requirement', ctx=Load()), Name(id='dist', ctx=Load()), Starred(value=Name(id='info', ctx=Load()), ctx=Load())], keywords=[])], keywords=[])), If(test=BoolOp(op=And(), values=[Call(func=Attribute(value=Name(id='dist', ctx=Load()), attr='has_metadata', ctx=Load()), args=[Constant(value='dependency_links.txt')], keywords=[]), UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='no_find_links', ctx=Load()))]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='package_index', ctx=Load()), attr='add_find_links', ctx=Load()), args=[Call(func=Attribute(value=Name(id='dist', ctx=Load()), attr='get_metadata_lines', ctx=Load()), args=[Constant(value='dependency_links.txt')], keywords=[])], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Name(id='deps', ctx=Load())), UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='always_copy', ctx=Load()))]), body=[Return()], orelse=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='requirement', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='dist', ctx=Load()), attr='key', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='requirement', ctx=Load()), attr='key', ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value='Skipping dependencies for %s'), Name(id='dist', ctx=Load())], keywords=[])), Return()], orelse=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='requirement', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Name(id='dist', ctx=Load()), ops=[NotIn()], comparators=[Name(id='requirement', ctx=Load())])]), body=[Assign(targets=[Name(id='distreq', ctx=Store())], value=Call(func=Attribute(value=Name(id='dist', ctx=Load()), attr='as_requirement', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='requirement', ctx=Store())], value=Call(func=Name(id='Requirement', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='distreq', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])])]), Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Processing dependencies for %s'), Name(id='requirement', ctx=Load())], keywords=[])), Try(body=[Assign(targets=[Name(id='distros', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='WorkingSet', ctx=Load()), args=[List(elts=[], ctx=Load())], keywords=[]), attr='resolve', ctx=Load()), args=[List(elts=[Name(id='requirement', ctx=Load())], ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='local_index', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='easy_install', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='DistributionNotFound', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='DistutilsError', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[])], keywords=[]), cause=Name(id='e', ctx=Load()))]), ExceptHandler(type=Name(id='VersionConflict', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='DistutilsError', ctx=Load()), args=[Call(func=Attribute(value=Name(id='e', ctx=Load()), attr='report', ctx=Load()), args=[], keywords=[])], keywords=[]), cause=Name(id='e', ctx=Load()))])], orelse=[], finalbody=[]), If(test=BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='always_copy', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='always_copy_from', ctx=Load())]), body=[For(target=Name(id='dist', ctx=Store()), iter=Name(id='distros', ctx=Load()), body=[If(test=Compare(left=Attribute(value=Name(id='dist', ctx=Load()), attr='key', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='installed_projects', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='easy_install', ctx=Load()), args=[Call(func=Attribute(value=Name(id='dist', ctx=Load()), attr='as_requirement', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[])], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Finished processing dependencies for %s'), Name(id='requirement', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='should_unzip', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dist')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='zip_ok', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='zip_ok', ctx=Load())))], orelse=[]), If(test=Call(func=Attribute(value=Name(id='dist', ctx=Load()), attr='has_metadata', ctx=Load()), args=[Constant(value='not-zip-safe')], keywords=[]), body=[Return(value=Constant(value=True))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='dist', ctx=Load()), attr='has_metadata', ctx=Load()), args=[Constant(value='zip-safe')], keywords=[])), body=[Return(value=Constant(value=True))], orelse=[]), Return(value=Constant(value=False))], decorator_list=[]), FunctionDef(name='maybe_move', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='spec'), arg(arg='dist_filename'), arg(arg='setup_base')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='dst', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='build_directory', ctx=Load()), Attribute(value=Name(id='spec', ctx=Load()), attr='key', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='dst', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Constant(value='%r already exists in %s; build directory %s will not be kept')), Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='warn', ctx=Load()), args=[Name(id='msg', ctx=Load()), Attribute(value=Name(id='spec', ctx=Load()), attr='key', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='build_directory', ctx=Load()), Name(id='setup_base', ctx=Load())], keywords=[])), Return(value=Name(id='setup_base', ctx=Load()))], orelse=[]), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isdir', ctx=Load()), args=[Name(id='dist_filename', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='setup_base', ctx=Store())], value=Name(id='dist_filename', ctx=Load()))], orelse=[If(test=Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Name(id='dist_filename', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Name(id='setup_base', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='unlink', ctx=Load()), args=[Name(id='dist_filename', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='contents', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='listdir', ctx=Load()), args=[Name(id='setup_base', ctx=Load())], keywords=[])), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='contents', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='dist_filename', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='setup_base', ctx=Load()), Subscript(value=Name(id='contents', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isdir', ctx=Load()), args=[Name(id='dist_filename', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='setup_base', ctx=Store())], value=Name(id='dist_filename', ctx=Load()))], orelse=[])], orelse=[])]), Expr(value=Call(func=Name(id='ensure_directory', ctx=Load()), args=[Name(id='dst', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='shutil', ctx=Load()), attr='move', ctx=Load()), args=[Name(id='setup_base', ctx=Load()), Name(id='dst', ctx=Load())], keywords=[])), Return(value=Name(id='dst', ctx=Load()))], decorator_list=[]), FunctionDef(name='install_wrapper_scripts', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dist')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='exclude_scripts', ctx=Load()), body=[Return()], orelse=[]), For(target=Name(id='args', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='ScriptWriter', ctx=Load()), attr='best', ctx=Load()), args=[], keywords=[]), attr='get_args', ctx=Load()), args=[Name(id='dist', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_script', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='install_script', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dist'), arg(arg='script_name'), arg(arg='script_text'), arg(arg='dev_path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Generate a legacy script wrapper and install it')), Assign(targets=[Name(id='spec', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Attribute(value=Name(id='dist', ctx=Load()), attr='as_requirement', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='is_script', ctx=Store())], value=Call(func=Name(id='is_python_script', ctx=Load()), args=[Name(id='script_text', ctx=Load()), Name(id='script_name', ctx=Load())], keywords=[])), If(test=Name(id='is_script', ctx=Load()), body=[Assign(targets=[Name(id='body', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_load_template', ctx=Load()), args=[Name(id='dev_path', ctx=Load())], keywords=[]), op=Mod(), right=Call(func=Name(id='locals', ctx=Load()), args=[], keywords=[]))), Assign(targets=[Name(id='script_text', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='ScriptWriter', ctx=Load()), attr='get_header', ctx=Load()), args=[Name(id='script_text', ctx=Load())], keywords=[]), op=Add(), right=Name(id='body', ctx=Load())))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_script', ctx=Load()), args=[Name(id='script_name', ctx=Load()), Call(func=Name(id='_to_bytes', ctx=Load()), args=[Name(id='script_text', ctx=Load())], keywords=[]), Constant(value='b')], keywords=[]))], decorator_list=[]), FunctionDef(name='_load_template', args=arguments(posonlyargs=[], args=[arg(arg='dev_path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        There are a couple of template scripts in the package. This\n        function loads one of them and prepares it for use.\n        ')), Assign(targets=[Name(id='name', ctx=Store())], value=Constant(value='script.tmpl')), If(test=Name(id='dev_path', ctx=Load()), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='.tmpl'), Constant(value=' (dev).tmpl')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='raw_bytes', ctx=Store())], value=Call(func=Name(id='resource_string', ctx=Load()), args=[Constant(value='setuptools'), Name(id='name', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='raw_bytes', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[]))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='write_script', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='script_name'), arg(arg='contents'), arg(arg='mode'), arg(arg='blockers')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='t'), Tuple(elts=[], ctx=Load())]), body=[Expr(value=Constant(value='Write an executable file to the scripts directory')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='delete_blockers', ctx=Load()), args=[ListComp(elt=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='script_dir', ctx=Load()), Name(id='x', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='blockers', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Installing %s script to %s'), Name(id='script_name', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='script_dir', ctx=Load())], keywords=[])), Assign(targets=[Name(id='target', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='script_dir', ctx=Load()), Name(id='script_name', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='add_output', ctx=Load()), args=[Name(id='target', ctx=Load())], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='dry_run', ctx=Load()), body=[Return()], orelse=[]), Assign(targets=[Name(id='mask', ctx=Store())], value=Call(func=Name(id='current_umask', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Name(id='ensure_directory', ctx=Load()), args=[Name(id='target', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='target', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='unlink', ctx=Load()), args=[Name(id='target', ctx=Load())], keywords=[]))], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='target', ctx=Load()), BinOp(left=Constant(value='w'), op=Add(), right=Name(id='mode', ctx=Load()))], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='contents', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Name(id='chmod', ctx=Load()), args=[Name(id='target', ctx=Load()), BinOp(left=Constant(value=511), op=Sub(), right=Name(id='mask', ctx=Load()))], keywords=[]))], decorator_list=[]), FunctionDef(name='install_eggs', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='spec'), arg(arg='dist_filename'), arg(arg='tmpdir')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='installer_map', ctx=Store())], value=Dict(keys=[Constant(value='.egg'), Constant(value='.exe'), Constant(value='.whl')], values=[Attribute(value=Name(id='self', ctx=Load()), attr='install_egg', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='install_exe', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='install_wheel', ctx=Load())])), Try(body=[Assign(targets=[Name(id='install_dist', ctx=Store())], value=Subscript(value=Name(id='installer_map', ctx=Load()), slice=Subscript(value=Call(func=Attribute(value=Name(id='dist_filename', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), slice=Slice(lower=UnaryOp(op=USub(), operand=Constant(value=4))), ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Pass()])], orelse=[Return(value=List(elts=[Call(func=Name(id='install_dist', ctx=Load()), args=[Name(id='dist_filename', ctx=Load()), Name(id='tmpdir', ctx=Load())], keywords=[])], ctx=Load()))], finalbody=[]), Assign(targets=[Name(id='setup_base', ctx=Store())], value=Name(id='tmpdir', ctx=Load())), If(test=BoolOp(op=And(), values=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isfile', ctx=Load()), args=[Name(id='dist_filename', ctx=Load())], keywords=[]), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='dist_filename', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='.py')], keywords=[]))]), body=[Expr(value=Call(func=Name(id='unpack_archive', ctx=Load()), args=[Name(id='dist_filename', ctx=Load()), Name(id='tmpdir', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='unpack_progress', ctx=Load())], keywords=[]))], orelse=[If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isdir', ctx=Load()), args=[Name(id='dist_filename', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='setup_base', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Name(id='dist_filename', ctx=Load())], keywords=[]))], orelse=[])]), If(test=BoolOp(op=And(), values=[Call(func=Attribute(value=Name(id='setup_base', ctx=Load()), attr='startswith', ctx=Load()), args=[Name(id='tmpdir', ctx=Load())], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='build_directory', ctx=Load()), Compare(left=Name(id='spec', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Name(id='setup_base', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='maybe_move', ctx=Load()), args=[Name(id='spec', ctx=Load()), Name(id='dist_filename', ctx=Load()), Name(id='setup_base', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='setup_script', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='setup_base', ctx=Load()), Constant(value='setup.py')], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='setup_script', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='setups', ctx=Store())], value=Call(func=Name(id='glob', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='setup_base', ctx=Load()), Constant(value='*'), Constant(value='setup.py')], keywords=[])], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='setups', ctx=Load())), body=[Raise(exc=Call(func=Name(id='DistutilsError', ctx=Load()), args=[BinOp(left=Constant(value="Couldn't find a setup script in %s"), op=Mod(), right=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Name(id='dist_filename', ctx=Load())], keywords=[]))], keywords=[]))], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='setups', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Raise(exc=Call(func=Name(id='DistutilsError', ctx=Load()), args=[BinOp(left=Constant(value='Multiple setup scripts in %s'), op=Mod(), right=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Name(id='dist_filename', ctx=Load())], keywords=[]))], keywords=[]))], orelse=[]), Assign(targets=[Name(id='setup_script', ctx=Store())], value=Subscript(value=Name(id='setups', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='editable', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='info', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='report_editable', ctx=Load()), args=[Name(id='spec', ctx=Load()), Name(id='setup_script', ctx=Load())], keywords=[])], keywords=[])), Return(value=List(elts=[], ctx=Load()))], orelse=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='build_and_install', ctx=Load()), args=[Name(id='setup_script', ctx=Load()), Name(id='setup_base', ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='egg_distribution', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='egg_path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isdir', ctx=Load()), args=[Name(id='egg_path', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='metadata', ctx=Store())], value=Call(func=Name(id='PathMetadata', ctx=Load()), args=[Name(id='egg_path', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='egg_path', ctx=Load()), Constant(value='EGG-INFO')], keywords=[])], keywords=[]))], orelse=[Assign(targets=[Name(id='metadata', ctx=Store())], value=Call(func=Name(id='EggMetadata', ctx=Load()), args=[Call(func=Attribute(value=Name(id='zipimport', ctx=Load()), attr='zipimporter', ctx=Load()), args=[Name(id='egg_path', ctx=Load())], keywords=[])], keywords=[]))]), Return(value=Call(func=Attribute(value=Name(id='Distribution', ctx=Load()), attr='from_filename', ctx=Load()), args=[Name(id='egg_path', ctx=Load())], keywords=[keyword(arg='metadata', value=Name(id='metadata', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='install_egg', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='egg_path'), arg(arg='tmpdir')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='destination', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='install_dir', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='basename', ctx=Load()), args=[Name(id='egg_path', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='destination', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Name(id='destination', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='dry_run', ctx=Load())), body=[Expr(value=Call(func=Name(id='ensure_directory', ctx=Load()), args=[Name(id='destination', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='dist', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='egg_distribution', ctx=Load()), args=[Name(id='egg_path', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=BoolOp(op=And(), values=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='destination', ctx=Load())], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='samefile', ctx=Load()), args=[Name(id='egg_path', ctx=Load()), Name(id='destination', ctx=Load())], keywords=[])])), body=[If(test=BoolOp(op=And(), values=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isdir', ctx=Load()), args=[Name(id='destination', ctx=Load())], keywords=[]), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='islink', ctx=Load()), args=[Name(id='destination', ctx=Load())], keywords=[]))]), body=[Expr(value=Call(func=Attribute(value=Name(id='dir_util', ctx=Load()), attr='remove_tree', ctx=Load()), args=[Name(id='destination', ctx=Load())], keywords=[keyword(arg='dry_run', value=Attribute(value=Name(id='self', ctx=Load()), attr='dry_run', ctx=Load()))]))], orelse=[If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='destination', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='unlink', ctx=Load()), Tuple(elts=[Name(id='destination', ctx=Load())], ctx=Load()), BinOp(left=Constant(value='Removing '), op=Add(), right=Name(id='destination', ctx=Load()))], keywords=[]))], orelse=[])]), Try(body=[Assign(targets=[Name(id='new_dist_is_zipped', ctx=Store())], value=Constant(value=False)), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isdir', ctx=Load()), args=[Name(id='egg_path', ctx=Load())], keywords=[]), body=[If(test=Call(func=Attribute(value=Name(id='egg_path', ctx=Load()), attr='startswith', ctx=Load()), args=[Name(id='tmpdir', ctx=Load())], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='f', ctx=Store()), Name(id='m', ctx=Store())], ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='shutil', ctx=Load()), attr='move', ctx=Load()), Constant(value='Moving')], ctx=Load()))], orelse=[Assign(targets=[Tuple(elts=[Name(id='f', ctx=Store()), Name(id='m', ctx=Store())], ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='shutil', ctx=Load()), attr='copytree', ctx=Load()), Constant(value='Copying')], ctx=Load()))])], orelse=[If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='should_unzip', ctx=Load()), args=[Name(id='dist', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='mkpath', ctx=Load()), args=[Name(id='destination', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='f', ctx=Store()), Name(id='m', ctx=Store())], ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='unpack_and_compile', ctx=Load()), Constant(value='Extracting')], ctx=Load()))], orelse=[Assign(targets=[Name(id='new_dist_is_zipped', ctx=Store())], value=Constant(value=True)), If(test=Call(func=Attribute(value=Name(id='egg_path', ctx=Load()), attr='startswith', ctx=Load()), args=[Name(id='tmpdir', ctx=Load())], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='f', ctx=Store()), Name(id='m', ctx=Store())], ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='shutil', ctx=Load()), attr='move', ctx=Load()), Constant(value='Moving')], ctx=Load()))], orelse=[Assign(targets=[Tuple(elts=[Name(id='f', ctx=Store()), Name(id='m', ctx=Store())], ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='shutil', ctx=Load()), attr='copy2', ctx=Load()), Constant(value='Copying')], ctx=Load()))])])]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='f', ctx=Load()), Tuple(elts=[Name(id='egg_path', ctx=Load()), Name(id='destination', ctx=Load())], ctx=Load()), BinOp(left=BinOp(left=Name(id='m', ctx=Load()), op=Add(), right=Constant(value=' %s to %s')), op=Mod(), right=Tuple(elts=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='basename', ctx=Load()), args=[Name(id='egg_path', ctx=Load())], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Name(id='destination', ctx=Load())], keywords=[])], ctx=Load()))], keywords=[])), Expr(value=Call(func=Name(id='update_dist_caches', ctx=Load()), args=[Name(id='destination', ctx=Load())], keywords=[keyword(arg='fix_zipimporter_caches', value=Name(id='new_dist_is_zipped', ctx=Load()))]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Expr(value=Call(func=Name(id='update_dist_caches', ctx=Load()), args=[Name(id='destination', ctx=Load())], keywords=[keyword(arg='fix_zipimporter_caches', value=Constant(value=False))])), Raise()])], orelse=[], finalbody=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='add_output', ctx=Load()), args=[Name(id='destination', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='egg_distribution', ctx=Load()), args=[Name(id='destination', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='install_exe', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dist_filename'), arg(arg='tmpdir')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='cfg', ctx=Store())], value=Call(func=Name(id='extract_wininst_cfg', ctx=Load()), args=[Name(id='dist_filename', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='cfg', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='DistutilsError', ctx=Load()), args=[BinOp(left=Constant(value='%s is not a valid distutils Windows .exe'), op=Mod(), right=Name(id='dist_filename', ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Name(id='dist', ctx=Store())], value=Call(func=Name(id='Distribution', ctx=Load()), args=[Constant(value=None)], keywords=[keyword(arg='project_name', value=Call(func=Attribute(value=Name(id='cfg', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='metadata'), Constant(value='name')], keywords=[])), keyword(arg='version', value=Call(func=Attribute(value=Name(id='cfg', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='metadata'), Constant(value='version')], keywords=[])), keyword(arg='platform', value=Call(func=Name(id='get_platform', ctx=Load()), args=[], keywords=[]))])), Assign(targets=[Name(id='egg_path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='tmpdir', ctx=Load()), BinOp(left=Call(func=Attribute(value=Name(id='dist', ctx=Load()), attr='egg_name', ctx=Load()), args=[], keywords=[]), op=Add(), right=Constant(value='.egg'))], keywords=[])), Assign(targets=[Attribute(value=Name(id='dist', ctx=Load()), attr='location', ctx=Store())], value=Name(id='egg_path', ctx=Load())), Assign(targets=[Name(id='egg_tmp', ctx=Store())], value=BinOp(left=Name(id='egg_path', ctx=Load()), op=Add(), right=Constant(value='.tmp'))), Assign(targets=[Name(id='_egg_info', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='egg_tmp', ctx=Load()), Constant(value='EGG-INFO')], keywords=[])), Assign(targets=[Name(id='pkg_inf', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='_egg_info', ctx=Load()), Constant(value='PKG-INFO')], keywords=[])), Expr(value=Call(func=Name(id='ensure_directory', ctx=Load()), args=[Name(id='pkg_inf', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='dist', ctx=Load()), attr='_provider', ctx=Store())], value=Call(func=Name(id='PathMetadata', ctx=Load()), args=[Name(id='egg_tmp', ctx=Load()), Name(id='_egg_info', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='exe_to_egg', ctx=Load()), args=[Name(id='dist_filename', ctx=Load()), Name(id='egg_tmp', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='pkg_inf', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='f', ctx=Store())], value=Call(func=Name(id='open', ctx=Load()), args=[Name(id='pkg_inf', ctx=Load()), Constant(value='w')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value='Metadata-Version: 1.0\n')], keywords=[])), For(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='cfg', ctx=Load()), attr='items', ctx=Load()), args=[Constant(value='metadata')], keywords=[]), body=[If(test=Compare(left=Name(id='k', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='target_version')]), body=[Expr(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='write', ctx=Load()), args=[BinOp(left=Constant(value='%s: %s\n'), op=Mod(), right=Tuple(elts=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='k', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='_'), Constant(value='-')], keywords=[]), attr='title', ctx=Load()), args=[], keywords=[]), Name(id='v', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='script_dir', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='_egg_info', ctx=Load()), Constant(value='scripts')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='delete_blockers', ctx=Load()), args=[ListComp(elt=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='script_dir', ctx=Load()), Subscript(value=Name(id='args', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='args', ctx=Store()), iter=Call(func=Attribute(value=Name(id='ScriptWriter', ctx=Load()), attr='get_args', ctx=Load()), args=[Name(id='dist', ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='bdist_egg', ctx=Load()), attr='make_zipfile', ctx=Load()), args=[Name(id='egg_path', ctx=Load()), Name(id='egg_tmp', ctx=Load())], keywords=[keyword(arg='verbose', value=Attribute(value=Name(id='self', ctx=Load()), attr='verbose', ctx=Load())), keyword(arg='dry_run', value=Attribute(value=Name(id='self', ctx=Load()), attr='dry_run', ctx=Load()))])), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='install_egg', ctx=Load()), args=[Name(id='egg_path', ctx=Load()), Name(id='tmpdir', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='exe_to_egg', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dist_filename'), arg(arg='egg_tmp')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Extract a bdist_wininst to the directories an egg would use')), Assign(targets=[Name(id='prefixes', ctx=Store())], value=Call(func=Name(id='get_exe_prefixes', ctx=Load()), args=[Name(id='dist_filename', ctx=Load())], keywords=[])), Assign(targets=[Name(id='to_compile', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='native_libs', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='top_level', ctx=Store())], value=Dict(keys=[], values=[])), FunctionDef(name='process', args=arguments(posonlyargs=[], args=[arg(arg='src'), arg(arg='dst')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Attribute(value=Name(id='src', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='old', ctx=Store()), Name(id='new', ctx=Store())], ctx=Store()), iter=Name(id='prefixes', ctx=Load()), body=[If(test=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='startswith', ctx=Load()), args=[Name(id='old', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='src', ctx=Store())], value=BinOp(left=Name(id='new', ctx=Load()), op=Add(), right=Subscript(value=Name(id='src', ctx=Load()), slice=Slice(lower=Call(func=Name(id='len', ctx=Load()), args=[Name(id='old', ctx=Load())], keywords=[])), ctx=Load()))), Assign(targets=[Name(id='parts', ctx=Store())], value=Call(func=Attribute(value=Name(id='src', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='/')], keywords=[])), Assign(targets=[Name(id='dst', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='egg_tmp', ctx=Load()), Starred(value=Name(id='parts', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='dl', ctx=Store())], value=Call(func=Attribute(value=Name(id='dst', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])), If(test=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='dl', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='.pyd')], keywords=[]), Call(func=Attribute(value=Name(id='dl', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='.dll')], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='parts', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Store())], value=Call(func=Attribute(value=Name(id='bdist_egg', ctx=Load()), attr='strip_module', ctx=Load()), args=[Subscript(value=Name(id='parts', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='top_level', ctx=Load()), slice=Subscript(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='splitext', ctx=Load()), args=[Subscript(value=Name(id='parts', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load()), ctx=Store())], value=Constant(value=1)), Expr(value=Call(func=Attribute(value=Name(id='native_libs', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='src', ctx=Load())], keywords=[]))], orelse=[If(test=BoolOp(op=And(), values=[Call(func=Attribute(value=Name(id='dl', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='.py')], keywords=[]), Compare(left=Name(id='old', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='SCRIPTS/')])]), body=[Assign(targets=[Subscript(value=Name(id='top_level', ctx=Load()), slice=Subscript(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='splitext', ctx=Load()), args=[Subscript(value=Name(id='parts', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load()), ctx=Store())], value=Constant(value=1)), Expr(value=Call(func=Attribute(value=Name(id='to_compile', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='dst', ctx=Load())], keywords=[]))], orelse=[])]), Return(value=Name(id='dst', ctx=Load()))], orelse=[])], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='src', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='.pth')], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value="WARNING: can't process %s"), Name(id='src', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Constant(value=None))], decorator_list=[]), Expr(value=Call(func=Name(id='unpack_archive', ctx=Load()), args=[Name(id='dist_filename', ctx=Load()), Name(id='egg_tmp', ctx=Load()), Name(id='process', ctx=Load())], keywords=[])), Assign(targets=[Name(id='stubs', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='res', ctx=Store()), iter=Name(id='native_libs', ctx=Load()), body=[If(test=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='res', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), attr='endswith', ctx=Load()), args=[Constant(value='.pyd')], keywords=[]), body=[Assign(targets=[Name(id='parts', ctx=Store())], value=Call(func=Attribute(value=Name(id='res', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='/')], keywords=[])), Assign(targets=[Name(id='resource', ctx=Store())], value=Subscript(value=Name(id='parts', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())), Assign(targets=[Subscript(value=Name(id='parts', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='bdist_egg', ctx=Load()), attr='strip_module', ctx=Load()), args=[Subscript(value=Name(id='parts', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[]), op=Add(), right=Constant(value='.py'))), Assign(targets=[Name(id='pyfile', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='egg_tmp', ctx=Load()), Starred(value=Name(id='parts', ctx=Load()), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='to_compile', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='pyfile', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='stubs', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='pyfile', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='bdist_egg', ctx=Load()), attr='write_stub', ctx=Load()), args=[Name(id='resource', ctx=Load()), Name(id='pyfile', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='byte_compile', ctx=Load()), args=[Name(id='to_compile', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='bdist_egg', ctx=Load()), attr='write_safety_flag', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='egg_tmp', ctx=Load()), Constant(value='EGG-INFO')], keywords=[]), Call(func=Attribute(value=Name(id='bdist_egg', ctx=Load()), attr='analyze_egg', ctx=Load()), args=[Name(id='egg_tmp', ctx=Load()), Name(id='stubs', ctx=Load())], keywords=[])], keywords=[])), For(target=Name(id='name', ctx=Store()), iter=Tuple(elts=[Constant(value='top_level'), Constant(value='native_libs')], ctx=Load()), body=[If(test=Subscript(value=Call(func=Name(id='locals', ctx=Load()), args=[], keywords=[]), slice=Name(id='name', ctx=Load()), ctx=Load()), body=[Assign(targets=[Name(id='txt', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='egg_tmp', ctx=Load()), Constant(value='EGG-INFO'), BinOp(left=Name(id='name', ctx=Load()), op=Add(), right=Constant(value='.txt'))], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='txt', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='f', ctx=Store())], value=Call(func=Name(id='open', ctx=Load()), args=[Name(id='txt', ctx=Load()), Constant(value='w')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='write', ctx=Load()), args=[BinOp(left=Call(func=Attribute(value=Constant(value='\n'), attr='join', ctx=Load()), args=[Subscript(value=Call(func=Name(id='locals', ctx=Load()), args=[], keywords=[]), slice=Name(id='name', ctx=Load()), ctx=Load())], keywords=[]), op=Add(), right=Constant(value='\n'))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))], orelse=[])], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='install_wheel', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='wheel_path'), arg(arg='tmpdir')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='wheel', ctx=Store())], value=Call(func=Name(id='Wheel', ctx=Load()), args=[Name(id='wheel_path', ctx=Load())], keywords=[])), Assert(test=Call(func=Attribute(value=Name(id='wheel', ctx=Load()), attr='is_compatible', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='destination', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='install_dir', ctx=Load()), Call(func=Attribute(value=Name(id='wheel', ctx=Load()), attr='egg_name', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='destination', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Name(id='destination', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='dry_run', ctx=Load())), body=[Expr(value=Call(func=Name(id='ensure_directory', ctx=Load()), args=[Name(id='destination', ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isdir', ctx=Load()), args=[Name(id='destination', ctx=Load())], keywords=[]), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='islink', ctx=Load()), args=[Name(id='destination', ctx=Load())], keywords=[]))]), body=[Expr(value=Call(func=Attribute(value=Name(id='dir_util', ctx=Load()), attr='remove_tree', ctx=Load()), args=[Name(id='destination', ctx=Load())], keywords=[keyword(arg='dry_run', value=Attribute(value=Name(id='self', ctx=Load()), attr='dry_run', ctx=Load()))]))], orelse=[If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='destination', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='unlink', ctx=Load()), Tuple(elts=[Name(id='destination', ctx=Load())], ctx=Load()), BinOp(left=Constant(value='Removing '), op=Add(), right=Name(id='destination', ctx=Load()))], keywords=[]))], orelse=[])]), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Attribute(value=Name(id='wheel', ctx=Load()), attr='install_as_egg', ctx=Load()), Tuple(elts=[Name(id='destination', ctx=Load())], ctx=Load()), BinOp(left=Constant(value='Installing %s to %s'), op=Mod(), right=Tuple(elts=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='basename', ctx=Load()), args=[Name(id='wheel_path', ctx=Load())], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Name(id='destination', ctx=Load())], keywords=[])], ctx=Load()))], keywords=[]))], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Name(id='update_dist_caches', ctx=Load()), args=[Name(id='destination', ctx=Load())], keywords=[keyword(arg='fix_zipimporter_caches', value=Constant(value=False))]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='add_output', ctx=Load()), args=[Name(id='destination', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='egg_distribution', ctx=Load()), args=[Name(id='destination', ctx=Load())], keywords=[]))], decorator_list=[]), Assign(targets=[Name(id='__mv_warning', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='textwrap', ctx=Load()), attr='dedent', ctx=Load()), args=[Constant(value='\n        Because this distribution was installed --multi-version, before you can\n        import modules from this package in an application, you will need to\n        \'import pkg_resources\' and then use a \'require()\' call similar to one of\n        these examples, in order to select the desired version:\n\n            pkg_resources.require("%(name)s")  # latest installed version\n            pkg_resources.require("%(name)s==%(version)s")  # this exact version\n            pkg_resources.require("%(name)s>=%(version)s")  # this version or higher\n        ')], keywords=[]), attr='lstrip', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='__id_warning', ctx=Store())], value=Call(func=Attribute(value=Name(id='textwrap', ctx=Load()), attr='dedent', ctx=Load()), args=[Constant(value="\n        Note also that the installation directory must be on sys.path at runtime for\n        this to work.  (e.g. by being the application's script directory, by being on\n        PYTHONPATH, or by being added to sys.path by your code.)\n        ")], keywords=[])), FunctionDef(name='installation_report', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='req'), arg(arg='dist'), arg(arg='what')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='Installed')]), body=[Expr(value=Constant(value='Helpful installation message for display to package users')), Assign(targets=[Name(id='msg', ctx=Store())], value=Constant(value='\n%(what)s %(eggloc)s%(extras)s')), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='multi_version', ctx=Load()), UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='no_report', ctx=Load()))]), body=[AugAssign(target=Name(id='msg', ctx=Store()), op=Add(), value=BinOp(left=Constant(value='\n'), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='__mv_warning', ctx=Load()))), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='install_dir', ctx=Load()), ops=[NotIn()], comparators=[Call(func=Name(id='map', ctx=Load()), args=[Name(id='normalize_path', ctx=Load()), Attribute(value=Name(id='sys', ctx=Load()), attr='path', ctx=Load())], keywords=[])]), body=[AugAssign(target=Name(id='msg', ctx=Store()), op=Add(), value=BinOp(left=Constant(value='\n'), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='__id_warning', ctx=Load())))], orelse=[])], orelse=[]), Assign(targets=[Name(id='eggloc', ctx=Store())], value=Attribute(value=Name(id='dist', ctx=Load()), attr='location', ctx=Load())), Assign(targets=[Name(id='name', ctx=Store())], value=Attribute(value=Name(id='dist', ctx=Load()), attr='project_name', ctx=Load())), Assign(targets=[Name(id='version', ctx=Store())], value=Attribute(value=Name(id='dist', ctx=Load()), attr='version', ctx=Load())), Assign(targets=[Name(id='extras', ctx=Store())], value=Constant(value='')), Return(value=BinOp(left=Name(id='msg', ctx=Load()), op=Mod(), right=Call(func=Name(id='locals', ctx=Load()), args=[], keywords=[])))], decorator_list=[]), Assign(targets=[Name(id='__editable_msg', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='textwrap', ctx=Load()), attr='dedent', ctx=Load()), args=[Constant(value='\n        Extracted editable version of %(spec)s to %(dirname)s\n\n        If it uses setuptools in its setup script, you can activate it in\n        "development" mode by going to that directory and running::\n\n            %(python)s setup.py develop\n\n        See the setuptools documentation for the "develop" command for more info.\n        ')], keywords=[]), attr='lstrip', ctx=Load()), args=[], keywords=[])), FunctionDef(name='report_editable', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='spec'), arg(arg='setup_script')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='dirname', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Name(id='setup_script', ctx=Load())], keywords=[])), Assign(targets=[Name(id='python', ctx=Store())], value=Attribute(value=Name(id='sys', ctx=Load()), attr='executable', ctx=Load())), Return(value=BinOp(left=Constant(value='\n'), op=Add(), right=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='__editable_msg', ctx=Load()), op=Mod(), right=Call(func=Name(id='locals', ctx=Load()), args=[], keywords=[]))))], decorator_list=[]), FunctionDef(name='run_setup', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='setup_script'), arg(arg='setup_base'), arg(arg='args')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='modules', ctx=Load()), attr='setdefault', ctx=Load()), args=[Constant(value='distutils.command.bdist_egg'), Name(id='bdist_egg', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='modules', ctx=Load()), attr='setdefault', ctx=Load()), args=[Constant(value='distutils.command.egg_info'), Name(id='egg_info', ctx=Load())], keywords=[])), Assign(targets=[Name(id='args', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='verbose', ctx=Load()), ops=[Gt()], comparators=[Constant(value=2)]), body=[Assign(targets=[Name(id='v', ctx=Store())], value=BinOp(left=Constant(value='v'), op=Mult(), right=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='verbose', ctx=Load()), op=Sub(), right=Constant(value=1)))), Expr(value=Call(func=Attribute(value=Name(id='args', ctx=Load()), attr='insert', ctx=Load()), args=[Constant(value=0), BinOp(left=Constant(value='-'), op=Add(), right=Name(id='v', ctx=Load()))], keywords=[]))], orelse=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='verbose', ctx=Load()), ops=[Lt()], comparators=[Constant(value=2)]), body=[Expr(value=Call(func=Attribute(value=Name(id='args', ctx=Load()), attr='insert', ctx=Load()), args=[Constant(value=0), Constant(value='-q')], keywords=[]))], orelse=[])]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='dry_run', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='args', ctx=Load()), attr='insert', ctx=Load()), args=[Constant(value=0), Constant(value='-n')], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Running %s %s'), Subscript(value=Name(id='setup_script', ctx=Load()), slice=Slice(lower=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='setup_base', ctx=Load())], keywords=[]), op=Add(), right=Constant(value=1))), ctx=Load()), Call(func=Attribute(value=Constant(value=' '), attr='join', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[])], keywords=[])), Try(body=[Expr(value=Call(func=Name(id='run_setup', ctx=Load()), args=[Name(id='setup_script', ctx=Load()), Name(id='args', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='SystemExit', ctx=Load()), name='v', body=[Raise(exc=Call(func=Name(id='DistutilsError', ctx=Load()), args=[BinOp(left=Constant(value='Setup script exited with %s'), op=Mod(), right=Tuple(elts=[Subscript(value=Attribute(value=Name(id='v', ctx=Load()), attr='args', ctx=Load()), slice=Constant(value=0), ctx=Load())], ctx=Load()))], keywords=[]), cause=Name(id='v', ctx=Load()))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='build_and_install', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='setup_script'), arg(arg='setup_base')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='args', ctx=Store())], value=List(elts=[Constant(value='bdist_egg'), Constant(value='--dist-dir')], ctx=Load())), Assign(targets=[Name(id='dist_dir', ctx=Store())], value=Call(func=Attribute(value=Name(id='tempfile', ctx=Load()), attr='mkdtemp', ctx=Load()), args=[], keywords=[keyword(arg='prefix', value=Constant(value='egg-dist-tmp-')), keyword(arg='dir', value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Name(id='setup_script', ctx=Load())], keywords=[]))])), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_set_fetcher_options', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Name(id='setup_script', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='args', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='dist_dir', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='run_setup', ctx=Load()), args=[Name(id='setup_script', ctx=Load()), Name(id='setup_base', ctx=Load()), Name(id='args', ctx=Load())], keywords=[])), Assign(targets=[Name(id='all_eggs', ctx=Store())], value=Call(func=Name(id='Environment', ctx=Load()), args=[List(elts=[Name(id='dist_dir', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='eggs', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='key', ctx=Store()), iter=Name(id='all_eggs', ctx=Load()), body=[For(target=Name(id='dist', ctx=Store()), iter=Subscript(value=Name(id='all_eggs', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='eggs', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='install_egg', ctx=Load()), args=[Attribute(value=Name(id='dist', ctx=Load()), attr='location', ctx=Load()), Name(id='setup_base', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], orelse=[]), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Name(id='eggs', ctx=Load())), UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='dry_run', ctx=Load()))]), body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value='No eggs found in %s (setup script problem?)'), Name(id='dist_dir', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='eggs', ctx=Load()))], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Name(id='_rmtree', ctx=Load()), args=[Name(id='dist_dir', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='set_verbosity', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='verbose', ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='_set_fetcher_options', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='base')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        When easy_install is about to run bdist_egg on a source dist, that\n        source dist might have 'setup_requires' directives, requiring\n        additional fetching. Ensure the fetcher options given to easy_install\n        are available to that command as well.\n        ")), Assign(targets=[Name(id='ei_opts', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='get_option_dict', ctx=Load()), args=[Constant(value='easy_install')], keywords=[]), attr='copy', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='fetch_directives', ctx=Store())], value=Tuple(elts=[Constant(value='find_links'), Constant(value='site_dirs'), Constant(value='index_url'), Constant(value='optimize'), Constant(value='allow_hosts')], ctx=Load())), Assign(targets=[Name(id='fetch_options', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='val', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='ei_opts', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Name(id='key', ctx=Load()), ops=[NotIn()], comparators=[Name(id='fetch_directives', ctx=Load())]), body=[Continue()], orelse=[]), Assign(targets=[Subscript(value=Name(id='fetch_options', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='val', ctx=Load()), slice=Constant(value=1), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='settings', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='easy_install', value=Name(id='fetch_options', ctx=Load()))])), Assign(targets=[Name(id='cfg_filename', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='base', ctx=Load()), Constant(value='setup.cfg')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='setopt', ctx=Load()), attr='edit_config', ctx=Load()), args=[Name(id='cfg_filename', ctx=Load()), Name(id='settings', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='update_pth', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dist')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='pth_file', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return()], orelse=[]), For(target=Name(id='d', ctx=Store()), iter=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='pth_file', ctx=Load()), slice=Attribute(value=Name(id='dist', ctx=Load()), attr='key', ctx=Load()), ctx=Load()), body=[If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='multi_version', ctx=Load())), Compare(left=Attribute(value=Name(id='d', ctx=Load()), attr='location', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='dist', ctx=Load()), attr='location', ctx=Load())])]), body=[Continue()], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Removing %s from easy-install.pth file'), Name(id='d', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='pth_file', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='d', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='d', ctx=Load()), attr='location', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='shadow_path', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='shadow_path', ctx=Load()), attr='remove', ctx=Load()), args=[Attribute(value=Name(id='d', ctx=Load()), attr='location', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='multi_version', ctx=Load())), body=[If(test=Compare(left=Attribute(value=Name(id='dist', ctx=Load()), attr='location', ctx=Load()), ops=[In()], comparators=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='pth_file', ctx=Load()), attr='paths', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='%s is already the active version in easy-install.pth'), Name(id='dist', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Adding %s to easy-install.pth file'), Name(id='dist', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='pth_file', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='dist', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='dist', ctx=Load()), attr='location', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='shadow_path', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='shadow_path', ctx=Load()), attr='append', ctx=Load()), args=[Attribute(value=Name(id='dist', ctx=Load()), attr='location', ctx=Load())], keywords=[]))], orelse=[])])], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='dry_run', ctx=Load()), body=[Return()], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='pth_file', ctx=Load()), attr='save', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='dist', ctx=Load()), attr='key', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='setuptools')]), body=[Return()], orelse=[]), Assign(targets=[Name(id='filename', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='install_dir', ctx=Load()), Constant(value='setuptools.pth')], keywords=[])), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='islink', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='unlink', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[]))], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='filename', ctx=Load()), Constant(value='wt')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='write', ctx=Load()), args=[BinOp(left=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='pth_file', ctx=Load()), attr='make_relative', ctx=Load()), args=[Attribute(value=Name(id='dist', ctx=Load()), attr='location', ctx=Load())], keywords=[]), op=Add(), right=Constant(value='\n'))], keywords=[]))])], decorator_list=[]), FunctionDef(name='unpack_progress', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='src'), arg(arg='dst')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Unpacking %s to %s'), Name(id='src', ctx=Load()), Name(id='dst', ctx=Load())], keywords=[])), Return(value=Name(id='dst', ctx=Load()))], decorator_list=[]), FunctionDef(name='unpack_and_compile', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='egg_path'), arg(arg='destination')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='to_compile', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='to_chmod', ctx=Store())], value=List(elts=[], ctx=Load())), FunctionDef(name='pf', args=arguments(posonlyargs=[], args=[arg(arg='src'), arg(arg='dst')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[Call(func=Attribute(value=Name(id='dst', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='.py')], keywords=[]), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='src', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='EGG-INFO/')], keywords=[]))]), body=[Expr(value=Call(func=Attribute(value=Name(id='to_compile', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='dst', ctx=Load())], keywords=[]))], orelse=[If(test=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='dst', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='.dll')], keywords=[]), Call(func=Attribute(value=Name(id='dst', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='.so')], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='to_chmod', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='dst', ctx=Load())], keywords=[]))], orelse=[])]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='unpack_progress', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='dst', ctx=Load())], keywords=[])), Return(value=BoolOp(op=Or(), values=[BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='dry_run', ctx=Load())), Name(id='dst', ctx=Load())]), Constant(value=None)]))], decorator_list=[]), Expr(value=Call(func=Name(id='unpack_archive', ctx=Load()), args=[Name(id='egg_path', ctx=Load()), Name(id='destination', ctx=Load()), Name(id='pf', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='byte_compile', ctx=Load()), args=[Name(id='to_compile', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='dry_run', ctx=Load())), body=[For(target=Name(id='f', ctx=Store()), iter=Name(id='to_chmod', ctx=Load()), body=[Assign(targets=[Name(id='mode', ctx=Store())], value=BinOp(left=BinOp(left=Subscript(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='stat', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]), slice=Attribute(value=Name(id='stat', ctx=Load()), attr='ST_MODE', ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=365)), op=BitAnd(), right=Constant(value=4077))), Expr(value=Call(func=Name(id='chmod', ctx=Load()), args=[Name(id='f', ctx=Load()), Name(id='mode', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='byte_compile', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='to_compile')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='sys', ctx=Load()), attr='dont_write_bytecode', ctx=Load()), body=[Return()], orelse=[]), ImportFrom(module='distutils.util', names=[alias(name='byte_compile')], level=0), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='set_verbosity', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='verbose', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])), Expr(value=Call(func=Name(id='byte_compile', ctx=Load()), args=[Name(id='to_compile', ctx=Load())], keywords=[keyword(arg='optimize', value=Constant(value=0)), keyword(arg='force', value=Constant(value=1)), keyword(arg='dry_run', value=Attribute(value=Name(id='self', ctx=Load()), attr='dry_run', ctx=Load()))])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='optimize', ctx=Load()), body=[Expr(value=Call(func=Name(id='byte_compile', ctx=Load()), args=[Name(id='to_compile', ctx=Load())], keywords=[keyword(arg='optimize', value=Attribute(value=Name(id='self', ctx=Load()), attr='optimize', ctx=Load())), keyword(arg='force', value=Constant(value=1)), keyword(arg='dry_run', value=Attribute(value=Name(id='self', ctx=Load()), attr='dry_run', ctx=Load()))]))], orelse=[])], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='set_verbosity', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='verbose', ctx=Load())], keywords=[]))])], decorator_list=[]), Assign(targets=[Name(id='__no_default_msg', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='textwrap', ctx=Load()), attr='dedent', ctx=Load()), args=[Constant(value='\n        bad install directory or PYTHONPATH\n\n        You are attempting to install a package to a directory that is not\n        on PYTHONPATH and which Python does not read ".pth" files from.  The\n        installation directory you specified (via --install-dir, --prefix, or\n        the distutils default setting) was:\n\n            %s\n\n        and your PYTHONPATH environment variable currently contains:\n\n            %r\n\n        Here are some of your options for correcting the problem:\n\n        * You can choose a different installation directory, i.e., one that is\n          on PYTHONPATH or supports .pth files\n\n        * You can add the installation directory to the PYTHONPATH environment\n          variable.  (It must then also be on PYTHONPATH whenever you run\n          Python and want to use the package(s) you are installing.)\n\n        * You can set up the installation directory to support ".pth" files by\n          using one of the approaches described here:\n\n          https://setuptools.pypa.io/en/latest/deprecated/easy_install.html#custom-installation-locations\n\n\n        Please make the appropriate changes for your system and try again.\n        ')], keywords=[]), attr='strip', ctx=Load()), args=[], keywords=[])), FunctionDef(name='create_home_path', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Create directories under ~.')), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='user', ctx=Load())), body=[Return()], orelse=[]), Assign(targets=[Name(id='home', ctx=Store())], value=Call(func=Name(id='convert_path', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='expanduser', ctx=Load()), args=[Constant(value='~')], keywords=[])], keywords=[])), For(target=Name(id='path', ctx=Store()), iter=Call(func=Name(id='only_strs', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config_vars', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=BoolOp(op=And(), values=[Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='startswith', ctx=Load()), args=[Name(id='home', ctx=Load())], keywords=[]), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isdir', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='debug_print', ctx=Load()), args=[BinOp(left=Constant(value="os.makedirs('%s', 0o700)"), op=Mod(), right=Name(id='path', ctx=Load()))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Name(id='path', ctx=Load()), Constant(value=448)], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[]), Assign(targets=[Name(id='INSTALL_SCHEMES', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='posix', value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='install_dir', value=Constant(value='$base/lib/python$py_version_short/site-packages')), keyword(arg='script_dir', value=Constant(value='$base/bin'))]))])), Assign(targets=[Name(id='DEFAULT_SCHEME', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='install_dir', value=Constant(value='$base/Lib/site-packages')), keyword(arg='script_dir', value=Constant(value='$base/Scripts'))])), FunctionDef(name='_expand', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='attrs'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='config_vars', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_finalized_command', ctx=Load()), args=[Constant(value='install')], keywords=[]), attr='config_vars', ctx=Load())), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='prefix', ctx=Load()), body=[Assign(targets=[Name(id='config_vars', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[Name(id='config_vars', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='config_vars', ctx=Load()), slice=Constant(value='base'), ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='prefix', ctx=Load())), Assign(targets=[Name(id='scheme', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='INSTALL_SCHEMES', ctx=Load()), attr='get', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='name', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='DEFAULT_SCHEME', ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='attr', ctx=Store()), Name(id='val', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='scheme', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='attr', ctx=Load()), Constant(value=None)], keywords=[]), ops=[Is()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='attr', ctx=Load()), Name(id='val', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[]), ImportFrom(module='distutils.util', names=[alias(name='subst_vars')], level=0), For(target=Name(id='attr', ctx=Store()), iter=Name(id='attrs', ctx=Load()), body=[Assign(targets=[Name(id='val', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='attr', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='val', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='val', ctx=Store())], value=Call(func=Name(id='subst_vars', ctx=Load()), args=[Name(id='val', ctx=Load()), Name(id='config_vars', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='os', ctx=Load()), attr='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='posix')]), body=[Assign(targets=[Name(id='val', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='expanduser', ctx=Load()), args=[Name(id='val', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='attr', ctx=Load()), Name(id='val', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[])], decorator_list=[]), FunctionDef(name='_pythonpath', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='items', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='PYTHONPATH'), Constant(value='')], keywords=[]), attr='split', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='pathsep', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='filter', ctx=Load()), args=[Constant(value=None), Name(id='items', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='get_site_dirs', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    Return a list of 'site' dirs\n    ")), Assign(targets=[Name(id='sitedirs', ctx=Store())], value=List(elts=[], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='sitedirs', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Name(id='_pythonpath', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='prefixes', ctx=Store())], value=List(elts=[Attribute(value=Name(id='sys', ctx=Load()), attr='prefix', ctx=Load())], ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='exec_prefix', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='sys', ctx=Load()), attr='prefix', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='prefixes', ctx=Load()), attr='append', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='exec_prefix', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='prefix', ctx=Store()), iter=Name(id='prefixes', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Name(id='prefix', ctx=Load())), body=[Continue()], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='os2emx'), Constant(value='riscos')], ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='sitedirs', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='prefix', ctx=Load()), Constant(value='Lib'), Constant(value='site-packages')], keywords=[])], keywords=[]))], orelse=[If(test=Compare(left=Attribute(value=Name(id='os', ctx=Load()), attr='sep', ctx=Load()), ops=[Eq()], comparators=[Constant(value='/')]), body=[Expr(value=Call(func=Attribute(value=Name(id='sitedirs', ctx=Load()), attr='extend', ctx=Load()), args=[List(elts=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='prefix', ctx=Load()), Constant(value='lib'), Call(func=Attribute(value=Constant(value='python{}.{}'), attr='format', ctx=Load()), args=[Starred(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), ctx=Load())], keywords=[]), Constant(value='site-packages')], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='prefix', ctx=Load()), Constant(value='lib'), Constant(value='site-python')], keywords=[])], ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='sitedirs', ctx=Load()), attr='extend', ctx=Load()), args=[List(elts=[Name(id='prefix', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='prefix', ctx=Load()), Constant(value='lib'), Constant(value='site-packages')], keywords=[])], ctx=Load())], keywords=[]))])]), If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='darwin')]), body=[Continue()], orelse=[]), If(test=Compare(left=Constant(value='Python.framework'), ops=[NotIn()], comparators=[Name(id='prefix', ctx=Load())]), body=[Continue()], orelse=[]), Assign(targets=[Name(id='home', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='HOME')], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='home', ctx=Load())), body=[Continue()], orelse=[]), Assign(targets=[Name(id='home_sp', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='home', ctx=Load()), Constant(value='Library'), Constant(value='Python'), Call(func=Attribute(value=Constant(value='{}.{}'), attr='format', ctx=Load()), args=[Starred(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), ctx=Load())], keywords=[]), Constant(value='site-packages')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='sitedirs', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='home_sp', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='lib_paths', ctx=Store())], value=Tuple(elts=[Call(func=Name(id='get_path', ctx=Load()), args=[Constant(value='purelib')], keywords=[]), Call(func=Name(id='get_path', ctx=Load()), args=[Constant(value='platlib')], keywords=[])], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='sitedirs', ctx=Load()), attr='extend', ctx=Load()), args=[GeneratorExp(elt=Name(id='s', ctx=Load()), generators=[comprehension(target=Name(id='s', ctx=Store()), iter=Name(id='lib_paths', ctx=Load()), ifs=[Compare(left=Name(id='s', ctx=Load()), ops=[NotIn()], comparators=[Name(id='sitedirs', ctx=Load())])], is_async=0)])], keywords=[])), If(test=Attribute(value=Name(id='site', ctx=Load()), attr='ENABLE_USER_SITE', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='sitedirs', ctx=Load()), attr='append', ctx=Load()), args=[Attribute(value=Name(id='site', ctx=Load()), attr='USER_SITE', ctx=Load())], keywords=[]))], orelse=[]), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='contextlib', ctx=Load()), attr='suppress', ctx=Load()), args=[Name(id='AttributeError', ctx=Load())], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='sitedirs', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Attribute(value=Name(id='site', ctx=Load()), attr='getsitepackages', ctx=Load()), args=[], keywords=[])], keywords=[]))]), Assign(targets=[Name(id='sitedirs', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Name(id='normalize_path', ctx=Load()), Name(id='sitedirs', ctx=Load())], keywords=[])], keywords=[])), Return(value=Name(id='sitedirs', ctx=Load()))], decorator_list=[]), FunctionDef(name='expand_paths', args=arguments(posonlyargs=[], args=[arg(arg='inputs')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Yield sys.path directories that might contain "old-style" packages')), Assign(targets=[Name(id='seen', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='dirname', ctx=Store()), iter=Name(id='inputs', ctx=Load()), body=[Assign(targets=[Name(id='dirname', ctx=Store())], value=Call(func=Name(id='normalize_path', ctx=Load()), args=[Name(id='dirname', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='dirname', ctx=Load()), ops=[In()], comparators=[Name(id='seen', ctx=Load())]), body=[Continue()], orelse=[]), Assign(targets=[Subscript(value=Name(id='seen', ctx=Load()), slice=Name(id='dirname', ctx=Load()), ctx=Store())], value=Constant(value=1)), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isdir', ctx=Load()), args=[Name(id='dirname', ctx=Load())], keywords=[])), body=[Continue()], orelse=[]), Assign(targets=[Name(id='files', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='listdir', ctx=Load()), args=[Name(id='dirname', ctx=Load())], keywords=[])), Expr(value=Yield(value=Tuple(elts=[Name(id='dirname', ctx=Load()), Name(id='files', ctx=Load())], ctx=Load()))), For(target=Name(id='name', ctx=Store()), iter=Name(id='files', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='.pth')], keywords=[])), body=[Continue()], orelse=[]), If(test=Compare(left=Name(id='name', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='easy-install.pth'), Constant(value='setuptools.pth')], ctx=Load())]), body=[Continue()], orelse=[]), Assign(targets=[Name(id='f', ctx=Store())], value=Call(func=Name(id='open', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='dirname', ctx=Load()), Name(id='name', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='lines', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='yield_lines', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), For(target=Name(id='line', ctx=Store()), iter=Name(id='lines', ctx=Load()), body=[If(test=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='import')], keywords=[]), body=[Continue()], orelse=[]), Assign(targets=[Name(id='line', ctx=Store())], value=Call(func=Name(id='normalize_path', ctx=Load()), args=[Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='rstrip', ctx=Load()), args=[], keywords=[])], keywords=[])), If(test=Compare(left=Name(id='line', ctx=Load()), ops=[In()], comparators=[Name(id='seen', ctx=Load())]), body=[Continue()], orelse=[]), Assign(targets=[Subscript(value=Name(id='seen', ctx=Load()), slice=Name(id='line', ctx=Load()), ctx=Store())], value=Constant(value=1)), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isdir', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[])), body=[Continue()], orelse=[]), Expr(value=Yield(value=Tuple(elts=[Name(id='line', ctx=Load()), Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='listdir', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[])], ctx=Load())))], orelse=[])], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='extract_wininst_cfg', args=arguments(posonlyargs=[], args=[arg(arg='dist_filename')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Extract configuration data from a bdist_wininst .exe\n\n    Returns a configparser.RawConfigParser, or None\n    ')), Assign(targets=[Name(id='f', ctx=Store())], value=Call(func=Name(id='open', ctx=Load()), args=[Name(id='dist_filename', ctx=Load()), Constant(value='rb')], keywords=[])), Try(body=[Assign(targets=[Name(id='endrec', ctx=Store())], value=Call(func=Attribute(value=Name(id='zipfile', ctx=Load()), attr='_EndRecData', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='endrec', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='prepended', ctx=Store())], value=BinOp(left=BinOp(left=Subscript(value=Name(id='endrec', ctx=Load()), slice=Constant(value=9), ctx=Load()), op=Sub(), right=Subscript(value=Name(id='endrec', ctx=Load()), slice=Constant(value=5), ctx=Load())), op=Sub(), right=Subscript(value=Name(id='endrec', ctx=Load()), slice=Constant(value=6), ctx=Load()))), If(test=Compare(left=Name(id='prepended', ctx=Load()), ops=[Lt()], comparators=[Constant(value=12)]), body=[Return(value=Constant(value=None))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='seek', ctx=Load()), args=[BinOp(left=Name(id='prepended', ctx=Load()), op=Sub(), right=Constant(value=12))], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='tag', ctx=Store()), Name(id='cfglen', ctx=Store()), Name(id='bmlen', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='struct', ctx=Load()), attr='unpack', ctx=Load()), args=[Constant(value='<iii'), Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='read', ctx=Load()), args=[Constant(value=12)], keywords=[])], keywords=[])), If(test=Compare(left=Name(id='tag', ctx=Load()), ops=[NotIn()], comparators=[Tuple(elts=[Constant(value=305419898), Constant(value=305419899)], ctx=Load())]), body=[Return(value=Constant(value=None))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='seek', ctx=Load()), args=[BinOp(left=Name(id='prepended', ctx=Load()), op=Sub(), right=BinOp(left=Constant(value=12), op=Add(), right=Name(id='cfglen', ctx=Load())))], keywords=[])), Assign(targets=[Name(id='init', ctx=Store())], value=Dict(keys=[Constant(value='version'), Constant(value='target_version')], values=[Constant(value=''), Constant(value='')])), Assign(targets=[Name(id='cfg', ctx=Store())], value=Call(func=Attribute(value=Name(id='configparser', ctx=Load()), attr='RawConfigParser', ctx=Load()), args=[Name(id='init', ctx=Load())], keywords=[])), Try(body=[Assign(targets=[Name(id='part', ctx=Store())], value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='read', ctx=Load()), args=[Name(id='cfglen', ctx=Load())], keywords=[])), Assign(targets=[Name(id='config', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='part', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=b'\x00'), Constant(value=1)], keywords=[]), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='config', ctx=Store())], value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='decode', ctx=Load()), args=[Call(func=Attribute(value=Name(id='sys', ctx=Load()), attr='getfilesystemencoding', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='cfg', ctx=Load()), attr='read_file', ctx=Load()), args=[Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='StringIO', ctx=Load()), args=[Name(id='config', ctx=Load())], keywords=[])], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='configparser', ctx=Load()), attr='Error', ctx=Load()), body=[Return(value=Constant(value=None))])], orelse=[], finalbody=[]), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='cfg', ctx=Load()), attr='has_section', ctx=Load()), args=[Constant(value='metadata')], keywords=[])), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='cfg', ctx=Load()), attr='has_section', ctx=Load()), args=[Constant(value='Setup')], keywords=[]))]), body=[Return(value=Constant(value=None))], orelse=[]), Return(value=Name(id='cfg', ctx=Load()))], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))])], decorator_list=[]), FunctionDef(name='get_exe_prefixes', args=arguments(posonlyargs=[], args=[arg(arg='exe_filename')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get exe->egg path translations for a given .exe file')), Assign(targets=[Name(id='prefixes', ctx=Store())], value=List(elts=[Tuple(elts=[Constant(value='PURELIB/'), Constant(value='')], ctx=Load()), Tuple(elts=[Constant(value='PLATLIB/pywin32_system32'), Constant(value='')], ctx=Load()), Tuple(elts=[Constant(value='PLATLIB/'), Constant(value='')], ctx=Load()), Tuple(elts=[Constant(value='SCRIPTS/'), Constant(value='EGG-INFO/scripts/')], ctx=Load()), Tuple(elts=[Constant(value='DATA/lib/site-packages'), Constant(value='')], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='z', ctx=Store())], value=Call(func=Attribute(value=Name(id='zipfile', ctx=Load()), attr='ZipFile', ctx=Load()), args=[Name(id='exe_filename', ctx=Load())], keywords=[])), Try(body=[For(target=Name(id='info', ctx=Store()), iter=Call(func=Attribute(value=Name(id='z', ctx=Load()), attr='infolist', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Attribute(value=Name(id='info', ctx=Load()), attr='filename', ctx=Load())), Assign(targets=[Name(id='parts', ctx=Store())], value=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='/')], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='parts', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=3)]), Compare(left=Subscript(value=Name(id='parts', ctx=Load()), slice=Constant(value=2), ctx=Load()), ops=[Eq()], comparators=[Constant(value='PKG-INFO')])]), body=[If(test=Call(func=Attribute(value=Subscript(value=Name(id='parts', ctx=Load()), slice=Constant(value=1), ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='.egg-info')], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='prefixes', ctx=Load()), attr='insert', ctx=Load()), args=[Constant(value=0), Tuple(elts=[Call(func=Attribute(value=Constant(value='/'), attr='join', ctx=Load()), args=[Subscript(value=Name(id='parts', ctx=Load()), slice=Slice(upper=Constant(value=2)), ctx=Load())], keywords=[]), Constant(value='EGG-INFO/')], ctx=Load())], keywords=[])), Break()], orelse=[])], orelse=[]), If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='parts', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Constant(value=2)]), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='.pth')], keywords=[]))]), body=[Continue()], orelse=[]), If(test=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='-nspkg.pth')], keywords=[]), body=[Continue()], orelse=[]), If(test=Compare(left=Call(func=Attribute(value=Subscript(value=Name(id='parts', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='upper', ctx=Load()), args=[], keywords=[]), ops=[In()], comparators=[Tuple(elts=[Constant(value='PURELIB'), Constant(value='PLATLIB')], ctx=Load())]), body=[Assign(targets=[Name(id='contents', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='z', ctx=Load()), attr='read', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]), attr='decode', ctx=Load()), args=[], keywords=[])), For(target=Name(id='pth', ctx=Store()), iter=Call(func=Name(id='yield_lines', ctx=Load()), args=[Name(id='contents', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='pth', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='pth', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value='\\'), Constant(value='/')], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='pth', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='import')], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id='prefixes', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[BinOp(left=Constant(value='%s/%s/'), op=Mod(), right=Tuple(elts=[Subscript(value=Name(id='parts', ctx=Load()), slice=Constant(value=0), ctx=Load()), Name(id='pth', ctx=Load())], ctx=Load())), Constant(value='')], ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[])], orelse=[])], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='z', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))]), Assign(targets=[Name(id='prefixes', ctx=Store())], value=ListComp(elt=Tuple(elts=[Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), Name(id='y', ctx=Load())], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='x', ctx=Store()), Name(id='y', ctx=Store())], ctx=Store()), iter=Name(id='prefixes', ctx=Load()), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='prefixes', ctx=Load()), attr='sort', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='prefixes', ctx=Load()), attr='reverse', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='prefixes', ctx=Load()))], decorator_list=[]), ClassDef(name='PthDistributions', bases=[Name(id='Environment', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A .pth file with Distribution paths in it')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='filename'), arg(arg='sitedirs')], kwonlyargs=[], kw_defaults=[], defaults=[Tuple(elts=[], ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='filename', ctx=Store())], value=Name(id='filename', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='sitedirs', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Name(id='normalize_path', ctx=Load()), Name(id='sitedirs', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='basedir', ctx=Store())], value=Call(func=Name(id='normalize_path', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='filename', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='paths', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='dirty', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_load', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_init_paths', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='paths', ctx=Load()), slice=Slice(), ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[List(elts=[], ctx=Load()), Constant(value=None), Constant(value=None)], keywords=[])), For(target=Name(id='path', ctx=Store()), iter=Call(func=Name(id='yield_lines', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='paths', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='add', ctx=Load()), Call(func=Name(id='find_distributions', ctx=Load()), args=[Name(id='path', ctx=Load()), Constant(value=True)], keywords=[])], keywords=[])], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='_load_raw', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='paths', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='dirty', ctx=Store()), Name(id='saw_import', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='seen', ctx=Store())], value=Call(func=Attribute(value=Name(id='dict', ctx=Load()), attr='fromkeys', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='sitedirs', ctx=Load())], keywords=[])), Assign(targets=[Name(id='f', ctx=Store())], value=Call(func=Name(id='open', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='filename', ctx=Load()), Constant(value='rt')], keywords=[])), For(target=Name(id='line', ctx=Store()), iter=Name(id='f', ctx=Load()), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='rstrip', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='paths', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='startswith', ctx=Load()), args=[Tuple(elts=[Constant(value='import '), Constant(value='from ')], ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='saw_import', ctx=Store())], value=Constant(value=True)), Continue()], orelse=[]), Assign(targets=[Name(id='stripped_path', ctx=Store())], value=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[])), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Name(id='stripped_path', ctx=Load())), Call(func=Attribute(value=Name(id='stripped_path', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='#')], keywords=[])]), body=[Continue()], orelse=[]), Assign(targets=[Name(id='normalized_path', ctx=Store())], value=Call(func=Name(id='normalize_path', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='basedir', ctx=Load()), Name(id='path', ctx=Load())], keywords=[])], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='normalized_path', ctx=Load()), ops=[In()], comparators=[Name(id='seen', ctx=Load())]), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='normalized_path', ctx=Load())], keywords=[]))]), body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='cleaned up dirty or duplicated %r'), Name(id='path', ctx=Load())], keywords=[])), Assign(targets=[Name(id='dirty', ctx=Store())], value=Constant(value=True)), Expr(value=Call(func=Attribute(value=Name(id='paths', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), Continue()], orelse=[]), Assign(targets=[Subscript(value=Name(id='seen', ctx=Load()), slice=Name(id='normalized_path', ctx=Load()), ctx=Store())], value=Constant(value=1))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), While(test=BoolOp(op=And(), values=[Name(id='paths', ctx=Load()), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Subscript(value=Name(id='paths', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]))]), body=[Expr(value=Call(func=Attribute(value=Name(id='paths', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='dirty', ctx=Store())], value=Constant(value=True))], orelse=[]), Return(value=Tuple(elts=[Name(id='paths', ctx=Load()), BoolOp(op=Or(), values=[Name(id='dirty', ctx=Load()), BoolOp(op=And(), values=[Name(id='paths', ctx=Load()), Name(id='saw_import', ctx=Load())])])], ctx=Load()))], decorator_list=[]), FunctionDef(name='_load', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isfile', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='filename', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_load_raw', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Tuple(elts=[List(elts=[], ctx=Load()), Constant(value=False)], ctx=Load()))], decorator_list=[]), FunctionDef(name='save', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Write changed .pth file back to disk')), Assign(targets=[Tuple(elts=[Name(id='last_paths', ctx=Store()), Name(id='last_dirty', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_load', ctx=Load()), args=[], keywords=[])), For(target=Name(id='path', ctx=Store()), iter=Subscript(value=Name(id='last_paths', ctx=Load()), slice=Slice(), ctx=Load()), body=[If(test=Compare(left=Name(id='path', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='paths', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='paths', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='detected new path %r'), Name(id='path', ctx=Load())], keywords=[])), Assign(targets=[Name(id='last_dirty', ctx=Store())], value=Constant(value=True))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='last_paths', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))])], orelse=[]), For(target=Name(id='path', ctx=Store()), iter=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='paths', ctx=Load()), slice=Slice(), ctx=Load()), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='path', ctx=Load()), ops=[NotIn()], comparators=[Name(id='last_paths', ctx=Load())]), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='startswith', ctx=Load()), args=[Tuple(elts=[Constant(value='import '), Constant(value='from '), Constant(value='#')], ctx=Load())], keywords=[]))]), body=[Assign(targets=[Name(id='absolute_path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='basedir', ctx=Load()), Name(id='path', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='absolute_path', ctx=Load())], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='paths', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='removing now non-existent path %r'), Name(id='path', ctx=Load())], keywords=[])), Assign(targets=[Name(id='last_dirty', ctx=Store())], value=Constant(value=True))], orelse=[])], orelse=[])], orelse=[]), AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='dirty', ctx=Store()), op=BitOr(), value=BoolOp(op=Or(), values=[Name(id='last_dirty', ctx=Load()), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='paths', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_init_paths', ctx=Load())])])), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='dirty', ctx=Load())), body=[Return()], orelse=[]), Assign(targets=[Name(id='rel_paths', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='make_relative', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='paths', ctx=Load())], keywords=[])], keywords=[])), If(test=Name(id='rel_paths', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Saving %s'), Attribute(value=Name(id='self', ctx=Load()), attr='filename', ctx=Load())], keywords=[])), Assign(targets=[Name(id='lines', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_wrap_lines', ctx=Load()), args=[Name(id='rel_paths', ctx=Load())], keywords=[])), Assign(targets=[Name(id='data', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Constant(value='\n'), attr='join', ctx=Load()), args=[Name(id='lines', ctx=Load())], keywords=[]), op=Add(), right=Constant(value='\n'))), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='islink', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='filename', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='unlink', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='filename', ctx=Load())], keywords=[]))], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='filename', ctx=Load()), Constant(value='wt')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))])], orelse=[If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='filename', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Deleting empty %s'), Attribute(value=Name(id='self', ctx=Load()), attr='filename', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='unlink', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='filename', ctx=Load())], keywords=[]))], orelse=[])]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='dirty', ctx=Store())], value=Constant(value=False)), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_init_paths', ctx=Load()), slice=Slice(), ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='paths', ctx=Load()), slice=Slice(), ctx=Load()))], decorator_list=[]), FunctionDef(name='_wrap_lines', args=arguments(posonlyargs=[], args=[arg(arg='lines')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Name(id='lines', ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='add', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dist')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Add `dist` to the distribution map')), Assign(targets=[Name(id='new_path', ctx=Store())], value=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='dist', ctx=Load()), attr='location', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='paths', ctx=Load())]), BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='dist', ctx=Load()), attr='location', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='sitedirs', ctx=Load())]), Compare(left=Attribute(value=Name(id='dist', ctx=Load()), attr='location', ctx=Load()), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getcwd', ctx=Load()), args=[], keywords=[])])])])), If(test=Name(id='new_path', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='paths', ctx=Load()), attr='append', ctx=Load()), args=[Attribute(value=Name(id='dist', ctx=Load()), attr='location', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='dirty', ctx=Store())], value=Constant(value=True))], orelse=[]), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='add', ctx=Load()), args=[Name(id='dist', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='remove', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dist')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Remove `dist` from the distribution map')), While(test=Compare(left=Attribute(value=Name(id='dist', ctx=Load()), attr='location', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='paths', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='paths', ctx=Load()), attr='remove', ctx=Load()), args=[Attribute(value=Name(id='dist', ctx=Load()), attr='location', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='dirty', ctx=Store())], value=Constant(value=True))], orelse=[]), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='remove', ctx=Load()), args=[Name(id='dist', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='make_relative', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='npath', ctx=Store()), Name(id='last', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='split', ctx=Load()), args=[Call(func=Name(id='normalize_path', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='baselen', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='basedir', ctx=Load())], keywords=[])), Assign(targets=[Name(id='parts', ctx=Store())], value=List(elts=[Name(id='last', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='sep', ctx=Store())], value=BoolOp(op=Or(), values=[BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='os', ctx=Load()), attr='altsep', ctx=Load()), ops=[Eq()], comparators=[Constant(value='/')]), Constant(value='/')]), Attribute(value=Name(id='os', ctx=Load()), attr='sep', ctx=Load())])), While(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='npath', ctx=Load())], keywords=[]), ops=[GtE()], comparators=[Name(id='baselen', ctx=Load())]), body=[If(test=Compare(left=Name(id='npath', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='basedir', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='parts', ctx=Load()), attr='append', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='curdir', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='parts', ctx=Load()), attr='reverse', ctx=Load()), args=[], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='sep', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='parts', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='npath', ctx=Store()), Name(id='last', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='split', ctx=Load()), args=[Name(id='npath', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='parts', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='last', ctx=Load())], keywords=[]))], orelse=[Return(value=Name(id='path', ctx=Load()))])], decorator_list=[])], decorator_list=[]), ClassDef(name='RewritePthDistributions', bases=[Name(id='PthDistributions', ctx=Load())], keywords=[], body=[FunctionDef(name='_wrap_lines', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='lines')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Yield(value=Attribute(value=Name(id='cls', ctx=Load()), attr='prelude', ctx=Load()))), For(target=Name(id='line', ctx=Store()), iter=Name(id='lines', ctx=Load()), body=[Expr(value=Yield(value=Name(id='line', ctx=Load())))], orelse=[]), Expr(value=Yield(value=Attribute(value=Name(id='cls', ctx=Load()), attr='postlude', ctx=Load())))], decorator_list=[Name(id='classmethod', ctx=Load())]), Assign(targets=[Name(id='prelude', ctx=Store())], value=Call(func=Name(id='_one_liner', ctx=Load()), args=[Constant(value='\n        import sys\n        sys.__plen = len(sys.path)\n        ')], keywords=[])), Assign(targets=[Name(id='postlude', ctx=Store())], value=Call(func=Name(id='_one_liner', ctx=Load()), args=[Constant(value="\n        import sys\n        new = sys.path[sys.__plen:]\n        del sys.path[sys.__plen:]\n        p = getattr(sys, '__egginsert', 0)\n        sys.path[p:p] = new\n        sys.__egginsert = p + len(new)\n        ")], keywords=[]))], decorator_list=[]), If(test=Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='SETUPTOOLS_SYS_PATH_TECHNIQUE'), Constant(value='raw')], keywords=[]), ops=[Eq()], comparators=[Constant(value='rewrite')]), body=[Assign(targets=[Name(id='PthDistributions', ctx=Store())], value=Name(id='RewritePthDistributions', ctx=Load()))], orelse=[]), FunctionDef(name='_first_line_re', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Return a regular expression based on first_line_re suitable for matching\n    strings.\n    ')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='first_line_re', ctx=Load()), attr='pattern', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Return(value=Name(id='first_line_re', ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='first_line_re', ctx=Load()), attr='pattern', ctx=Load()), attr='decode', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='auto_chmod', args=arguments(posonlyargs=[], args=[arg(arg='func'), arg(arg='arg'), arg(arg='exc')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='func', ctx=Load()), ops=[In()], comparators=[List(elts=[Attribute(value=Name(id='os', ctx=Load()), attr='unlink', ctx=Load()), Attribute(value=Name(id='os', ctx=Load()), attr='remove', ctx=Load())], ctx=Load())]), Compare(left=Attribute(value=Name(id='os', ctx=Load()), attr='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='nt')])]), body=[Expr(value=Call(func=Name(id='chmod', ctx=Load()), args=[Name(id='arg', ctx=Load()), Attribute(value=Name(id='stat', ctx=Load()), attr='S_IWRITE', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='func', ctx=Load()), args=[Name(id='arg', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='et', ctx=Store()), Name(id='ev', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='sys', ctx=Load()), attr='exc_info', ctx=Load()), args=[], keywords=[])), Raise(exc=Tuple(elts=[Subscript(value=Name(id='ev', ctx=Load()), slice=Constant(value=0), ctx=Load()), BinOp(left=Subscript(value=Name(id='ev', ctx=Load()), slice=Constant(value=1), ctx=Load()), op=Add(), right=BinOp(left=Constant(value=' %s %s'), op=Mod(), right=Tuple(elts=[Name(id='func', ctx=Load()), Name(id='arg', ctx=Load())], ctx=Load())))], ctx=Load()))], decorator_list=[]), FunctionDef(name='update_dist_caches', args=arguments(posonlyargs=[], args=[arg(arg='dist_path'), arg(arg='fix_zipimporter_caches')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    Fix any globally cached `dist_path` related data\n\n    `dist_path` should be a path of a newly installed egg distribution (zipped\n    or unzipped).\n\n    sys.path_importer_cache contains finder objects that have been cached when\n    importing data from the original distribution. Any such finders need to be\n    cleared since the replacement distribution might be packaged differently,\n    e.g. a zipped egg distribution might get replaced with an unzipped egg\n    folder or vice versa. Having the old finders cached may then cause Python\n    to attempt loading modules from the replacement distribution using an\n    incorrect loader.\n\n    zipimport.zipimporter objects are Python loaders charged with importing\n    data packaged inside zip archives. If stale loaders referencing the\n    original distribution, are left behind, they can fail to load modules from\n    the replacement distribution. E.g. if an old zipimport.zipimporter instance\n    is used to load data from a new zipped egg archive, it may cause the\n    operation to attempt to locate the requested data in the wrong location -\n    one indicated by the original distribution's zip archive directory\n    information. Such an operation may then fail outright, e.g. report having\n    read a 'bad local file header', or even worse, it may fail silently &\n    return invalid data.\n\n    zipimport._zip_directory_cache contains cached zip archive directory\n    information for all existing zipimport.zipimporter instances and all such\n    instances connected to the same archive share the same cached directory\n    information.\n\n    If asked, and the underlying Python implementation allows it, we can fix\n    all existing zipimport.zipimporter instances instead of having to track\n    them down and remove them one by one, by updating their shared cached zip\n    archive directory information. This, of course, assumes that the\n    replacement distribution is packaged as a zipped egg.\n\n    If not asked to fix existing zipimport.zipimporter instances, we still do\n    our best to clear any remaining zipimport.zipimporter related cached data\n    that might somehow later get used when attempting to load data from the new\n    distribution and thus cause such load operations to fail. Note that when\n    tracking down such remaining stale data, we can not catch every conceivable\n    usage from here, and we clear only those that we know of and have found to\n    cause problems if left alive. Any remaining caches should be updated by\n    whomever is in charge of maintaining them, i.e. they should be ready to\n    handle us replacing their zip archives with new distributions at runtime.\n\n    ")), Assign(targets=[Name(id='normalized_path', ctx=Store())], value=Call(func=Name(id='normalize_path', ctx=Load()), args=[Name(id='dist_path', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='_uncache', ctx=Load()), args=[Name(id='normalized_path', ctx=Load()), Attribute(value=Name(id='sys', ctx=Load()), attr='path_importer_cache', ctx=Load())], keywords=[])), If(test=Name(id='fix_zipimporter_caches', ctx=Load()), body=[Expr(value=Call(func=Name(id='_replace_zip_directory_cache_data', ctx=Load()), args=[Name(id='normalized_path', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='_remove_and_clear_zip_directory_cache_data', ctx=Load()), args=[Name(id='normalized_path', ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='_collect_zipimporter_cache_entries', args=arguments(posonlyargs=[], args=[arg(arg='normalized_path'), arg(arg='cache')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Return zipimporter cache entry keys related to a given normalized path.\n\n    Alternative path spellings (e.g. those using different character case or\n    those using alternative path separators) related to the same path are\n    included. Any sub-path entries are included as well, i.e. those\n    corresponding to zip archives embedded in other zip archives.\n\n    ')), Assign(targets=[Name(id='result', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='prefix_len', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='normalized_path', ctx=Load())], keywords=[])), For(target=Name(id='p', ctx=Store()), iter=Name(id='cache', ctx=Load()), body=[Assign(targets=[Name(id='np', ctx=Store())], value=Call(func=Name(id='normalize_path', ctx=Load()), args=[Name(id='p', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Call(func=Attribute(value=Name(id='np', ctx=Load()), attr='startswith', ctx=Load()), args=[Name(id='normalized_path', ctx=Load())], keywords=[]), Compare(left=Subscript(value=Name(id='np', ctx=Load()), slice=Slice(lower=Name(id='prefix_len', ctx=Load()), upper=BinOp(left=Name(id='prefix_len', ctx=Load()), op=Add(), right=Constant(value=1))), ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Attribute(value=Name(id='os', ctx=Load()), attr='sep', ctx=Load()), Constant(value='')], ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='p', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[]), FunctionDef(name='_update_zipimporter_cache', args=arguments(posonlyargs=[], args=[arg(arg='normalized_path'), arg(arg='cache'), arg(arg='updater')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='\n    Update zipimporter cache data for a given normalized path.\n\n    Any sub-path entries are processed as well, i.e. those corresponding to zip\n    archives embedded in other zip archives.\n\n    Given updater is a callable taking a cache entry key and the original entry\n    (after already removing the entry from the cache), and expected to update\n    the entry and possibly return a new one to be inserted in its place.\n    Returning None indicates that the entry should not be replaced with a new\n    one. If no updater is given, the cache entries are simply removed without\n    any additional processing, the same as if the updater simply returned None.\n\n    ')), For(target=Name(id='p', ctx=Store()), iter=Call(func=Name(id='_collect_zipimporter_cache_entries', ctx=Load()), args=[Name(id='normalized_path', ctx=Load()), Name(id='cache', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='old_entry', ctx=Store())], value=Subscript(value=Name(id='cache', ctx=Load()), slice=Name(id='p', ctx=Load()), ctx=Load())), Delete(targets=[Subscript(value=Name(id='cache', ctx=Load()), slice=Name(id='p', ctx=Load()), ctx=Del())]), Assign(targets=[Name(id='new_entry', ctx=Store())], value=BoolOp(op=And(), values=[Name(id='updater', ctx=Load()), Call(func=Name(id='updater', ctx=Load()), args=[Name(id='p', ctx=Load()), Name(id='old_entry', ctx=Load())], keywords=[])])), If(test=Compare(left=Name(id='new_entry', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='cache', ctx=Load()), slice=Name(id='p', ctx=Load()), ctx=Store())], value=Name(id='new_entry', ctx=Load()))], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='_uncache', args=arguments(posonlyargs=[], args=[arg(arg='normalized_path'), arg(arg='cache')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='_update_zipimporter_cache', ctx=Load()), args=[Name(id='normalized_path', ctx=Load()), Name(id='cache', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_remove_and_clear_zip_directory_cache_data', args=arguments(posonlyargs=[], args=[arg(arg='normalized_path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='clear_and_remove_cached_zip_archive_directory_data', args=arguments(posonlyargs=[], args=[arg(arg='path'), arg(arg='old_entry')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='old_entry', ctx=Load()), attr='clear', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), Expr(value=Call(func=Name(id='_update_zipimporter_cache', ctx=Load()), args=[Name(id='normalized_path', ctx=Load()), Attribute(value=Name(id='zipimport', ctx=Load()), attr='_zip_directory_cache', ctx=Load())], keywords=[keyword(arg='updater', value=Name(id='clear_and_remove_cached_zip_archive_directory_data', ctx=Load()))]))], decorator_list=[]), If(test=Compare(left=Constant(value='__pypy__'), ops=[In()], comparators=[Attribute(value=Name(id='sys', ctx=Load()), attr='builtin_module_names', ctx=Load())]), body=[Assign(targets=[Name(id='_replace_zip_directory_cache_data', ctx=Store())], value=Name(id='_remove_and_clear_zip_directory_cache_data', ctx=Load()))], orelse=[FunctionDef(name='_replace_zip_directory_cache_data', args=arguments(posonlyargs=[], args=[arg(arg='normalized_path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='replace_cached_zip_archive_directory_data', args=arguments(posonlyargs=[], args=[arg(arg='path'), arg(arg='old_entry')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='old_entry', ctx=Load()), attr='clear', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='zipimport', ctx=Load()), attr='zipimporter', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='old_entry', ctx=Load()), attr='update', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='zipimport', ctx=Load()), attr='_zip_directory_cache', ctx=Load()), slice=Name(id='path', ctx=Load()), ctx=Load())], keywords=[])), Return(value=Name(id='old_entry', ctx=Load()))], decorator_list=[]), Expr(value=Call(func=Name(id='_update_zipimporter_cache', ctx=Load()), args=[Name(id='normalized_path', ctx=Load()), Attribute(value=Name(id='zipimport', ctx=Load()), attr='_zip_directory_cache', ctx=Load())], keywords=[keyword(arg='updater', value=Name(id='replace_cached_zip_archive_directory_data', ctx=Load()))]))], decorator_list=[])]), FunctionDef(name='is_python', args=arguments(posonlyargs=[], args=[arg(arg='text'), arg(arg='filename')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='<string>')]), body=[Expr(value=Constant(value='Is this string a valid Python script?')), Try(body=[Expr(value=Call(func=Name(id='compile', ctx=Load()), args=[Name(id='text', ctx=Load()), Name(id='filename', ctx=Load()), Constant(value='exec')], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='SyntaxError', ctx=Load()), Name(id='TypeError', ctx=Load())], ctx=Load()), body=[Return(value=Constant(value=False))])], orelse=[Return(value=Constant(value=True))], finalbody=[])], decorator_list=[]), FunctionDef(name='is_sh', args=arguments(posonlyargs=[], args=[arg(arg='executable')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Determine if the specified executable is a .sh (contains a #! line)')), Try(body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='open', ctx=Load()), args=[Name(id='executable', ctx=Load())], keywords=[keyword(arg='encoding', value=Constant(value='latin-1'))]), optional_vars=Name(id='fp', ctx=Store()))], body=[Assign(targets=[Name(id='magic', ctx=Store())], value=Call(func=Attribute(value=Name(id='fp', ctx=Load()), attr='read', ctx=Load()), args=[Constant(value=2)], keywords=[]))])], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='OSError', ctx=Load()), Name(id='IOError', ctx=Load())], ctx=Load()), body=[Return(value=Name(id='executable', ctx=Load()))])], orelse=[], finalbody=[]), Return(value=Compare(left=Name(id='magic', ctx=Load()), ops=[Eq()], comparators=[Constant(value='#!')]))], decorator_list=[]), FunctionDef(name='nt_quote_arg', args=arguments(posonlyargs=[], args=[arg(arg='arg')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Quote a command line argument according to Windows parsing rules')), Return(value=Call(func=Attribute(value=Name(id='subprocess', ctx=Load()), attr='list2cmdline', ctx=Load()), args=[List(elts=[Name(id='arg', ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='is_python_script', args=arguments(posonlyargs=[], args=[arg(arg='script_text'), arg(arg='filename')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Is this text, as a whole, a Python script? (as opposed to shell/bat/etc.')), If(test=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='filename', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='.py')], keywords=[]), Call(func=Attribute(value=Name(id='filename', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='.pyw')], keywords=[])]), body=[Return(value=Constant(value=True))], orelse=[]), If(test=Call(func=Name(id='is_python', ctx=Load()), args=[Name(id='script_text', ctx=Load()), Name(id='filename', ctx=Load())], keywords=[]), body=[Return(value=Constant(value=True))], orelse=[]), If(test=Call(func=Attribute(value=Name(id='script_text', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='#!')], keywords=[]), body=[Return(value=Compare(left=Constant(value='python'), ops=[In()], comparators=[Call(func=Attribute(value=Subscript(value=Call(func=Attribute(value=Name(id='script_text', ctx=Load()), attr='splitlines', ctx=Load()), args=[], keywords=[]), slice=Constant(value=0), ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])]))], orelse=[]), Return(value=Constant(value=False))], decorator_list=[]), Try(body=[ImportFrom(module='os', names=[alias(name='chmod', asname='_chmod')], level=0)], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[FunctionDef(name='_chmod', args=arguments(posonlyargs=[], args=[], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[])])], orelse=[], finalbody=[]), FunctionDef(name='chmod', args=arguments(posonlyargs=[], args=[arg(arg='path'), arg(arg='mode')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='changing mode of %s to %o'), Name(id='path', ctx=Load()), Name(id='mode', ctx=Load())], keywords=[])), Try(body=[Expr(value=Call(func=Name(id='_chmod', ctx=Load()), args=[Name(id='path', ctx=Load()), Name(id='mode', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='os', ctx=Load()), attr='error', ctx=Load()), name='e', body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='chmod failed: %s'), Name(id='e', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[]), ClassDef(name='CommandSpec', bases=[Name(id='list', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    A command spec for a #! header, specified as a list of arguments akin to\n    those passed to Popen.\n    ')), Assign(targets=[Name(id='options', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='split_args', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[])), FunctionDef(name='best', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Choose the best CommandSpec class based on environmental conditions.\n        ')), Return(value=Name(id='cls', ctx=Load()))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='_sys_executable', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='_default', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normpath', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='executable', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='__PYVENV_LAUNCHER__'), Name(id='_default', ctx=Load())], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='from_param', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='param')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Construct a CommandSpec from a parameter to build_scripts, which may\n        be None.\n        ')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='param', ctx=Load()), Name(id='cls', ctx=Load())], keywords=[]), body=[Return(value=Name(id='param', ctx=Load()))], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='param', ctx=Load()), Name(id='list', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Name(id='cls', ctx=Load()), args=[Name(id='param', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='param', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='from_environment', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='from_string', ctx=Load()), args=[Name(id='param', ctx=Load())], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='from_environment', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='cls', ctx=Load()), args=[List(elts=[Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='_sys_executable', ctx=Load()), args=[], keywords=[])], ctx=Load())], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='from_string', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='string')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Construct a command spec from a simple string representing a command\n        line parseable by shlex.split.\n        ')), Assign(targets=[Name(id='items', ctx=Store())], value=Call(func=Attribute(value=Name(id='shlex', ctx=Load()), attr='split', ctx=Load()), args=[Name(id='string', ctx=Load())], keywords=[keyword(value=Attribute(value=Name(id='cls', ctx=Load()), attr='split_args', ctx=Load()))])), Return(value=Call(func=Name(id='cls', ctx=Load()), args=[Name(id='items', ctx=Load())], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='install_options', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='script_text')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Store())], value=Call(func=Attribute(value=Name(id='shlex', ctx=Load()), attr='split', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_extract_options', ctx=Load()), args=[Name(id='script_text', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='cmdline', ctx=Store())], value=Call(func=Attribute(value=Name(id='subprocess', ctx=Load()), attr='list2cmdline', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isascii', ctx=Load()), args=[Name(id='cmdline', ctx=Load())], keywords=[])), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load()), slice=Slice(upper=Constant(value=0)), ctx=Store())], value=List(elts=[Constant(value='-x')], ctx=Load()))], orelse=[])], decorator_list=[]), FunctionDef(name='_extract_options', args=arguments(posonlyargs=[], args=[arg(arg='orig_script')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Extract any options from the first line of the script.\n        ')), Assign(targets=[Name(id='first', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=BinOp(left=Name(id='orig_script', ctx=Load()), op=Add(), right=Constant(value='\n')), attr='splitlines', ctx=Load()), args=[], keywords=[]), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='match', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='_first_line_re', ctx=Load()), args=[], keywords=[]), attr='match', ctx=Load()), args=[Name(id='first', ctx=Load())], keywords=[])), Assign(targets=[Name(id='options', ctx=Store())], value=IfExp(test=Name(id='match', ctx=Load()), body=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value=1)], keywords=[]), Constant(value='')]), orelse=Constant(value=''))), Return(value=Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='as_header', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_render', ctx=Load()), args=[BinOp(left=Name(id='self', ctx=Load()), op=Add(), right=Call(func=Name(id='list', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Load())], keywords=[]))], keywords=[]))], decorator_list=[]), FunctionDef(name='_strip_quotes', args=arguments(posonlyargs=[], args=[arg(arg='item')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='_QUOTES', ctx=Store())], value=Constant(value='"\'')), For(target=Name(id='q', ctx=Store()), iter=Name(id='_QUOTES', ctx=Load()), body=[If(test=BoolOp(op=And(), values=[Call(func=Attribute(value=Name(id='item', ctx=Load()), attr='startswith', ctx=Load()), args=[Name(id='q', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='item', ctx=Load()), attr='endswith', ctx=Load()), args=[Name(id='q', ctx=Load())], keywords=[])]), body=[Return(value=Subscript(value=Name(id='item', ctx=Load()), slice=Slice(lower=Constant(value=1), upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='item', ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='_render', args=arguments(posonlyargs=[], args=[arg(arg='items')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='cmdline', ctx=Store())], value=Call(func=Attribute(value=Name(id='subprocess', ctx=Load()), attr='list2cmdline', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='CommandSpec', ctx=Load()), attr='_strip_quotes', ctx=Load()), args=[Call(func=Attribute(value=Name(id='item', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[])], keywords=[]), generators=[comprehension(target=Name(id='item', ctx=Store()), iter=Name(id='items', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Return(value=BinOp(left=BinOp(left=Constant(value='#!'), op=Add(), right=Name(id='cmdline', ctx=Load())), op=Add(), right=Constant(value='\n')))], decorator_list=[Name(id='staticmethod', ctx=Load())])], decorator_list=[]), Assign(targets=[Name(id='sys_executable', ctx=Store())], value=Call(func=Attribute(value=Name(id='CommandSpec', ctx=Load()), attr='_sys_executable', ctx=Load()), args=[], keywords=[])), ClassDef(name='WindowsCommandSpec', bases=[Name(id='CommandSpec', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='split_args', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='posix', value=Constant(value=False))]))], decorator_list=[]), ClassDef(name='ScriptWriter', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    Encapsulates behavior around writing entry point scripts for console and\n    gui apps.\n    ')), Assign(targets=[Name(id='template', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='textwrap', ctx=Load()), attr='dedent', ctx=Load()), args=[Constant(value="\n        # EASY-INSTALL-ENTRY-SCRIPT: %(spec)r,%(group)r,%(name)r\n        import re\n        import sys\n\n        # for compatibility with easy_install; see #2198\n        __requires__ = %(spec)r\n\n        try:\n            from importlib.metadata import distribution\n        except ImportError:\n            try:\n                from importlib_metadata import distribution\n            except ImportError:\n                from pkg_resources import load_entry_point\n\n\n        def importlib_load_entry_point(spec, group, name):\n            dist_name, _, _ = spec.partition('==')\n            matches = (\n                entry_point\n                for entry_point in distribution(dist_name).entry_points\n                if entry_point.group == group and entry_point.name == name\n            )\n            return next(matches).load()\n\n\n        globals().setdefault('load_entry_point', importlib_load_entry_point)\n\n\n        if __name__ == '__main__':\n            sys.argv[0] = re.sub(r'(-script\\.pyw?|\\.exe)?$', '', sys.argv[0])\n            sys.exit(load_entry_point(%(spec)r, %(group)r, %(name)r)())\n        ")], keywords=[]), attr='lstrip', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='command_spec_class', ctx=Store())], value=Name(id='CommandSpec', ctx=Load())), FunctionDef(name='get_args', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='dist'), arg(arg='header')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value="\n        Yield write_script() argument tuples for a distribution's\n        console_scripts and gui_scripts entry points.\n        ")), If(test=Compare(left=Name(id='header', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='header', ctx=Store())], value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='get_header', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='spec', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Attribute(value=Name(id='dist', ctx=Load()), attr='as_requirement', ctx=Load()), args=[], keywords=[])], keywords=[])), For(target=Name(id='type_', ctx=Store()), iter=Tuple(elts=[Constant(value='console'), Constant(value='gui')], ctx=Load()), body=[Assign(targets=[Name(id='group', ctx=Store())], value=BinOp(left=Name(id='type_', ctx=Load()), op=Add(), right=Constant(value='_scripts'))), For(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='ep', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='dist', ctx=Load()), attr='get_entry_map', ctx=Load()), args=[Name(id='group', ctx=Load())], keywords=[]), attr='items', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='_ensure_safe_name', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), Assign(targets=[Name(id='script_text', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='cls', ctx=Load()), attr='template', ctx=Load()), op=Mod(), right=Call(func=Name(id='locals', ctx=Load()), args=[], keywords=[]))), Assign(targets=[Name(id='args', ctx=Store())], value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='_get_script_args', ctx=Load()), args=[Name(id='type_', ctx=Load()), Name(id='name', ctx=Load()), Name(id='header', ctx=Load()), Name(id='script_text', ctx=Load())], keywords=[])), For(target=Name(id='res', ctx=Store()), iter=Name(id='args', ctx=Load()), body=[Expr(value=Yield(value=Name(id='res', ctx=Load())))], orelse=[])], orelse=[])], orelse=[])], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='_ensure_safe_name', args=arguments(posonlyargs=[], args=[arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Prevent paths in *_scripts entry point names.\n        ')), Assign(targets=[Name(id='has_path_sep', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='search', ctx=Load()), args=[Constant(value='[\\\\/]'), Name(id='name', ctx=Load())], keywords=[])), If(test=Name(id='has_path_sep', ctx=Load()), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Path separators not allowed in script names')], keywords=[]))], orelse=[])], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='best', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Select the best ScriptWriter for this environment.\n        ')), If(test=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), ops=[Eq()], comparators=[Constant(value='win32')]), BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='os', ctx=Load()), attr='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='java')]), Compare(left=Attribute(value=Name(id='os', ctx=Load()), attr='_name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='nt')])])]), body=[Return(value=Call(func=Attribute(value=Name(id='WindowsScriptWriter', ctx=Load()), attr='best', ctx=Load()), args=[], keywords=[]))], orelse=[Return(value=Name(id='cls', ctx=Load()))])], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='_get_script_args', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='type_'), arg(arg='name'), arg(arg='header'), arg(arg='script_text')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Yield(value=Tuple(elts=[Name(id='name', ctx=Load()), BinOp(left=Name(id='header', ctx=Load()), op=Add(), right=Name(id='script_text', ctx=Load()))], ctx=Load())))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='get_header', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='script_text'), arg(arg='executable')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=''), Constant(value=None)]), body=[Expr(value=Constant(value='Create a #! line, getting options (if any) from script_text')), Assign(targets=[Name(id='cmd', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='cls', ctx=Load()), attr='command_spec_class', ctx=Load()), attr='best', ctx=Load()), args=[], keywords=[]), attr='from_param', ctx=Load()), args=[Name(id='executable', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='cmd', ctx=Load()), attr='install_options', ctx=Load()), args=[Name(id='script_text', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='cmd', ctx=Load()), attr='as_header', ctx=Load()), args=[], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())])], decorator_list=[]), ClassDef(name='WindowsScriptWriter', bases=[Name(id='ScriptWriter', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='command_spec_class', ctx=Store())], value=Name(id='WindowsCommandSpec', ctx=Load())), FunctionDef(name='best', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Select the best ScriptWriter suitable for Windows\n        ')), Assign(targets=[Name(id='writer_lookup', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='executable', value=Name(id='WindowsExecutableLauncherWriter', ctx=Load())), keyword(arg='natural', value=Name(id='cls', ctx=Load()))])), Assign(targets=[Name(id='launcher', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='SETUPTOOLS_LAUNCHER'), Constant(value='executable')], keywords=[])), Return(value=Subscript(value=Name(id='writer_lookup', ctx=Load()), slice=Name(id='launcher', ctx=Load()), ctx=Load()))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='_get_script_args', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='type_'), arg(arg='name'), arg(arg='header'), arg(arg='script_text')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='For Windows, add a .py extension')), Assign(targets=[Name(id='ext', ctx=Store())], value=Subscript(value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='console', value=Constant(value='.pya')), keyword(arg='gui', value=Constant(value='.pyw'))]), slice=Name(id='type_', ctx=Load()), ctx=Load())), If(test=Compare(left=Name(id='ext', ctx=Load()), ops=[NotIn()], comparators=[Call(func=Attribute(value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), slice=Constant(value='PATHEXT'), ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), attr='split', ctx=Load()), args=[Constant(value=';')], keywords=[])]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Call(func=Attribute(value=Constant(value='{ext} not listed in PATHEXT; scripts will not be recognized as executables.'), attr='format', ctx=Load()), args=[], keywords=[keyword(value=Call(func=Name(id='locals', ctx=Load()), args=[], keywords=[]))])), Expr(value=Call(func=Attribute(value=Name(id='SetuptoolsWarning', ctx=Load()), attr='emit', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='old', ctx=Store())], value=List(elts=[Constant(value='.pya'), Constant(value='.py'), Constant(value='-script.py'), Constant(value='.pyc'), Constant(value='.pyo'), Constant(value='.pyw'), Constant(value='.exe')], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='old', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='ext', ctx=Load())], keywords=[])), Assign(targets=[Name(id='header', ctx=Store())], value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='_adjust_header', ctx=Load()), args=[Name(id='type_', ctx=Load()), Name(id='header', ctx=Load())], keywords=[])), Assign(targets=[Name(id='blockers', ctx=Store())], value=ListComp(elt=BinOp(left=Name(id='name', ctx=Load()), op=Add(), right=Name(id='x', ctx=Load())), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='old', ctx=Load()), ifs=[], is_async=0)])), Expr(value=Yield(value=Tuple(elts=[BinOp(left=Name(id='name', ctx=Load()), op=Add(), right=Name(id='ext', ctx=Load())), BinOp(left=Name(id='header', ctx=Load()), op=Add(), right=Name(id='script_text', ctx=Load())), Constant(value='t'), Name(id='blockers', ctx=Load())], ctx=Load())))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='_adjust_header', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='type_'), arg(arg='orig_header')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Make sure 'pythonw' is used for gui and 'python' is used for\n        console (regardless of what sys.executable is).\n        ")), Assign(targets=[Name(id='pattern', ctx=Store())], value=Constant(value='pythonw.exe')), Assign(targets=[Name(id='repl', ctx=Store())], value=Constant(value='python.exe')), If(test=Compare(left=Name(id='type_', ctx=Load()), ops=[Eq()], comparators=[Constant(value='gui')]), body=[Assign(targets=[Tuple(elts=[Name(id='pattern', ctx=Store()), Name(id='repl', ctx=Store())], ctx=Store())], value=Tuple(elts=[Name(id='repl', ctx=Load()), Name(id='pattern', ctx=Load())], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='pattern_ob', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='escape', ctx=Load()), args=[Name(id='pattern', ctx=Load())], keywords=[]), Attribute(value=Name(id='re', ctx=Load()), attr='IGNORECASE', ctx=Load())], keywords=[])), Assign(targets=[Name(id='new_header', ctx=Store())], value=Call(func=Attribute(value=Name(id='pattern_ob', ctx=Load()), attr='sub', ctx=Load()), args=[], keywords=[keyword(arg='string', value=Name(id='orig_header', ctx=Load())), keyword(arg='repl', value=Name(id='repl', ctx=Load()))])), Return(value=IfExp(test=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='_use_header', ctx=Load()), args=[Name(id='new_header', ctx=Load())], keywords=[]), body=Name(id='new_header', ctx=Load()), orelse=Name(id='orig_header', ctx=Load())))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='_use_header', args=arguments(posonlyargs=[], args=[arg(arg='new_header')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Should _adjust_header use the replaced header?\n\n        On non-windows systems, always use. On\n        Windows systems, only use the replaced header if it resolves\n        to an executable on the system.\n        ')), Assign(targets=[Name(id='clean_header', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='new_header', ctx=Load()), slice=Slice(lower=Constant(value=2), upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), attr='strip', ctx=Load()), args=[Constant(value='"')], keywords=[])), Return(value=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='win32')]), Call(func=Name(id='find_executable', ctx=Load()), args=[Name(id='clean_header', ctx=Load())], keywords=[])]))], decorator_list=[Name(id='staticmethod', ctx=Load())])], decorator_list=[]), ClassDef(name='WindowsExecutableLauncherWriter', bases=[Name(id='WindowsScriptWriter', ctx=Load())], keywords=[], body=[FunctionDef(name='_get_script_args', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='type_'), arg(arg='name'), arg(arg='header'), arg(arg='script_text')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        For Windows, add a .py extension and an .exe launcher\n        ')), If(test=Compare(left=Name(id='type_', ctx=Load()), ops=[Eq()], comparators=[Constant(value='gui')]), body=[Assign(targets=[Name(id='launcher_type', ctx=Store())], value=Constant(value='gui')), Assign(targets=[Name(id='ext', ctx=Store())], value=Constant(value='-script.pyw')), Assign(targets=[Name(id='old', ctx=Store())], value=List(elts=[Constant(value='.pyw')], ctx=Load()))], orelse=[Assign(targets=[Name(id='launcher_type', ctx=Store())], value=Constant(value='cli')), Assign(targets=[Name(id='ext', ctx=Store())], value=Constant(value='-script.py')), Assign(targets=[Name(id='old', ctx=Store())], value=List(elts=[Constant(value='.py'), Constant(value='.pyc'), Constant(value='.pyo')], ctx=Load()))]), Assign(targets=[Name(id='hdr', ctx=Store())], value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='_adjust_header', ctx=Load()), args=[Name(id='type_', ctx=Load()), Name(id='header', ctx=Load())], keywords=[])), Assign(targets=[Name(id='blockers', ctx=Store())], value=ListComp(elt=BinOp(left=Name(id='name', ctx=Load()), op=Add(), right=Name(id='x', ctx=Load())), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='old', ctx=Load()), ifs=[], is_async=0)])), Expr(value=Yield(value=Tuple(elts=[BinOp(left=Name(id='name', ctx=Load()), op=Add(), right=Name(id='ext', ctx=Load())), BinOp(left=Name(id='hdr', ctx=Load()), op=Add(), right=Name(id='script_text', ctx=Load())), Constant(value='t'), Name(id='blockers', ctx=Load())], ctx=Load()))), Expr(value=Yield(value=Tuple(elts=[BinOp(left=Name(id='name', ctx=Load()), op=Add(), right=Constant(value='.exe')), Call(func=Name(id='get_win_launcher', ctx=Load()), args=[Name(id='launcher_type', ctx=Load())], keywords=[]), Constant(value='b')], ctx=Load()))), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='is_64bit', ctx=Load()), args=[], keywords=[])), body=[Assign(targets=[Name(id='m_name', ctx=Store())], value=BinOp(left=Name(id='name', ctx=Load()), op=Add(), right=Constant(value='.exe.manifest'))), Expr(value=Yield(value=Tuple(elts=[Name(id='m_name', ctx=Load()), Call(func=Name(id='load_launcher_manifest', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]), Constant(value='t')], ctx=Load())))], orelse=[])], decorator_list=[Name(id='classmethod', ctx=Load())])], decorator_list=[]), FunctionDef(name='get_win_launcher', args=arguments(posonlyargs=[], args=[arg(arg='type')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    Load the Windows launcher (executable) suitable for launching a script.\n\n    `type` should be either 'cli' or 'gui'\n\n    Returns the executable as a byte string.\n    ")), Assign(targets=[Name(id='launcher_fn', ctx=Store())], value=BinOp(left=Constant(value='%s.exe'), op=Mod(), right=Name(id='type', ctx=Load()))), If(test=Call(func=Name(id='is_64bit', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Call(func=Name(id='get_platform', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Constant(value='win-arm64')]), body=[Assign(targets=[Name(id='launcher_fn', ctx=Store())], value=Call(func=Attribute(value=Name(id='launcher_fn', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='.'), Constant(value='-arm64.')], keywords=[]))], orelse=[Assign(targets=[Name(id='launcher_fn', ctx=Store())], value=Call(func=Attribute(value=Name(id='launcher_fn', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='.'), Constant(value='-64.')], keywords=[]))])], orelse=[Assign(targets=[Name(id='launcher_fn', ctx=Store())], value=Call(func=Attribute(value=Name(id='launcher_fn', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='.'), Constant(value='-32.')], keywords=[]))]), Return(value=Call(func=Name(id='resource_string', ctx=Load()), args=[Constant(value='setuptools'), Name(id='launcher_fn', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='load_launcher_manifest', args=arguments(posonlyargs=[], args=[arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='manifest', ctx=Store())], value=Call(func=Attribute(value=Name(id='pkg_resources', ctx=Load()), attr='resource_string', ctx=Load()), args=[Name(id='__name__', ctx=Load()), Constant(value='launcher manifest.xml')], keywords=[])), Return(value=BinOp(left=Call(func=Attribute(value=Name(id='manifest', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[]), op=Mod(), right=Call(func=Name(id='vars', ctx=Load()), args=[], keywords=[])))], decorator_list=[]), FunctionDef(name='_rmtree', args=arguments(posonlyargs=[], args=[arg(arg='path'), arg(arg='ignore_errors'), arg(arg='onexc')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Name(id='auto_chmod', ctx=Load())]), body=[Return(value=Call(func=Attribute(value=Name(id='py312compat', ctx=Load()), attr='shutil_rmtree', ctx=Load()), args=[Name(id='path', ctx=Load()), Name(id='ignore_errors', ctx=Load()), Name(id='onexc', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='current_umask', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='tmp', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='umask', ctx=Load()), args=[Constant(value=18)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='umask', ctx=Load()), args=[Name(id='tmp', ctx=Load())], keywords=[])), Return(value=Name(id='tmp', ctx=Load()))], decorator_list=[]), FunctionDef(name='only_strs', args=arguments(posonlyargs=[], args=[arg(arg='values')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Exclude non-str values. Ref #3063.\n    ')), Return(value=Call(func=Name(id='filter', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='val')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='val', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), Name(id='values', ctx=Load())], keywords=[]))], decorator_list=[]), ClassDef(name='EasyInstallDeprecationWarning', bases=[Name(id='SetuptoolsDeprecationWarning', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='_SUMMARY', ctx=Store())], value=Constant(value='easy_install command is deprecated.')), Assign(targets=[Name(id='_DETAILS', ctx=Store())], value=Constant(value='\n    Please avoid running ``setup.py`` and ``easy_install``.\n    Instead, use pypa/build, pypa/installer or other\n    standards-based tools.\n    ')), Assign(targets=[Name(id='_SEE_URL', ctx=Store())], value=Constant(value='https://github.com/pypa/setuptools/issues/917'))], decorator_list=[])], type_ignores=[])