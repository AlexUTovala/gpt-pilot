Module(body=[ImportFrom(module='functools', names=[alias(name='partial')], level=0), ImportFrom(module='glob', names=[alias(name='glob')], level=0), ImportFrom(module='distutils.util', names=[alias(name='convert_path')], level=0), Import(names=[alias(name='distutils.command.build_py', asname='orig')]), Import(names=[alias(name='os')]), Import(names=[alias(name='fnmatch')]), Import(names=[alias(name='textwrap')]), Import(names=[alias(name='io')]), Import(names=[alias(name='distutils.errors')]), Import(names=[alias(name='itertools')]), Import(names=[alias(name='stat')]), ImportFrom(module='pathlib', names=[alias(name='Path')], level=0), ImportFrom(module='typing', names=[alias(name='Dict'), alias(name='Iterable'), alias(name='Iterator'), alias(name='List'), alias(name='Optional'), alias(name='Tuple')], level=0), ImportFrom(module='extern.more_itertools', names=[alias(name='unique_everseen')], level=2), ImportFrom(module='warnings', names=[alias(name='SetuptoolsDeprecationWarning')], level=2), FunctionDef(name='make_writable', args=arguments(posonlyargs=[], args=[arg(arg='target')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='chmod', ctx=Load()), args=[Name(id='target', ctx=Load()), BinOp(left=Attribute(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='stat', ctx=Load()), args=[Name(id='target', ctx=Load())], keywords=[]), attr='st_mode', ctx=Load()), op=BitOr(), right=Attribute(value=Name(id='stat', ctx=Load()), attr='S_IWRITE', ctx=Load()))], keywords=[]))], decorator_list=[]), ClassDef(name='build_py', bases=[Attribute(value=Name(id='orig', ctx=Load()), attr='build_py', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="Enhanced 'build_py' command that includes data files with packages\n\n    The data files are specified via a 'package_data' argument to 'setup()'.\n    See 'setuptools.dist.Distribution' for more details.\n\n    Also, this version of the 'build_py' command allows you to specify both\n    'py_modules' and 'packages' in the same setup operation.\n    ")), AnnAssign(target=Name(id='editable_mode', ctx=Store()), annotation=Name(id='bool', ctx=Load()), value=Constant(value=False), simple=1), AnnAssign(target=Name(id='existing_egg_info_dir', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=1), FunctionDef(name='finalize_options', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='orig', ctx=Load()), attr='build_py', ctx=Load()), attr='finalize_options', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='package_data', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='package_data', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='exclude_package_data', ctx=Store())], value=BoolOp(op=Or(), values=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='exclude_package_data', ctx=Load()), Dict(keys=[], values=[])])), If(test=Compare(left=Constant(value='data_files'), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='__dict__', ctx=Load())]), body=[Delete(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='__dict__', ctx=Load()), slice=Constant(value='data_files'), ctx=Del())])], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='__updated_files', ctx=Store())], value=List(elts=[], ctx=Load()))], decorator_list=[]), FunctionDef(name='copy_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='infile'), arg(arg='outfile'), arg(arg='preserve_mode'), arg(arg='preserve_times'), arg(arg='link'), arg(arg='level')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1), Constant(value=1), Constant(value=None), Constant(value=1)]), body=[If(test=Name(id='link', ctx=Load()), body=[Assign(targets=[Name(id='infile', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Name(id='Path', ctx=Load()), args=[Name(id='infile', ctx=Load())], keywords=[]), attr='resolve', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='outfile', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Name(id='Path', ctx=Load()), args=[Name(id='outfile', ctx=Load())], keywords=[]), attr='resolve', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='copy_file', ctx=Load()), args=[Name(id='infile', ctx=Load()), Name(id='outfile', ctx=Load()), Name(id='preserve_mode', ctx=Load()), Name(id='preserve_times', ctx=Load()), Name(id='link', ctx=Load()), Name(id='level', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='run', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Build modules, packages, and copy data files to build directory')), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='py_modules', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='packages', ctx=Load())])), Attribute(value=Name(id='self', ctx=Load()), attr='editable_mode', ctx=Load())]), body=[Return()], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='py_modules', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='build_modules', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='packages', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='build_packages', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='build_package_data', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='byte_compile', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='orig', ctx=Load()), attr='build_py', ctx=Load()), attr='get_outputs', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[keyword(arg='include_bytecode', value=Constant(value=0))])], keywords=[]))], decorator_list=[]), FunctionDef(name='__getattr__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='attr')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='lazily compute data files')), If(test=Compare(left=Name(id='attr', ctx=Load()), ops=[Eq()], comparators=[Constant(value='data_files')]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='data_files', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_data_files', ctx=Load()), args=[], keywords=[])), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='data_files', ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='orig', ctx=Load()), attr='build_py', ctx=Load()), attr='__getattr__', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='attr', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='build_module', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='module'), arg(arg='module_file'), arg(arg='package')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='outfile', ctx=Store()), Name(id='copied', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='orig', ctx=Load()), attr='build_py', ctx=Load()), attr='build_module', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='module', ctx=Load()), Name(id='module_file', ctx=Load()), Name(id='package', ctx=Load())], keywords=[])), If(test=Name(id='copied', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__updated_files', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='outfile', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Tuple(elts=[Name(id='outfile', ctx=Load()), Name(id='copied', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='_get_data_files', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Generate list of '(package,src_dir,build_dir,filenames)' tuples")), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='analyze_manifest', ctx=Load()), args=[], keywords=[])), Return(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_get_pkg_data_files', ctx=Load()), BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='packages', ctx=Load()), Tuple(elts=[], ctx=Load())])], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='get_data_files_without_manifest', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Generate list of ``(package,src_dir,build_dir,filenames)`` tuples,\n        but without triggering any attempt to analyze or build the manifest.\n        ')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__dict__', ctx=Load()), attr='setdefault', ctx=Load()), args=[Constant(value='manifest_files'), Dict(keys=[], values=[])], keywords=[])), Return(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_get_pkg_data_files', ctx=Load()), BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='packages', ctx=Load()), Tuple(elts=[], ctx=Load())])], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='_get_pkg_data_files', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='package')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='src_dir', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_package_dir', ctx=Load()), args=[Name(id='package', ctx=Load())], keywords=[])), Assign(targets=[Name(id='build_dir', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Starred(value=BinOp(left=List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='build_lib', ctx=Load())], ctx=Load()), op=Add(), right=Call(func=Attribute(value=Name(id='package', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[])), ctx=Load())], keywords=[])), Assign(targets=[Name(id='filenames', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='relpath', ctx=Load()), args=[Name(id='file', ctx=Load()), Name(id='src_dir', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='file', ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='find_data_files', ctx=Load()), args=[Name(id='package', ctx=Load()), Name(id='src_dir', ctx=Load())], keywords=[]), ifs=[], is_async=0)])), Return(value=Tuple(elts=[Name(id='package', ctx=Load()), Name(id='src_dir', ctx=Load()), Name(id='build_dir', ctx=Load()), Name(id='filenames', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='find_data_files', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='package'), arg(arg='src_dir')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Return filenames for package's data files in 'src_dir'")), Assign(targets=[Name(id='patterns', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_platform_patterns', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='package_data', ctx=Load()), Name(id='package', ctx=Load()), Name(id='src_dir', ctx=Load())], keywords=[])), Assign(targets=[Name(id='globs_expanded', ctx=Store())], value=Call(func=Name(id='map', ctx=Load()), args=[Call(func=Name(id='partial', ctx=Load()), args=[Name(id='glob', ctx=Load())], keywords=[keyword(arg='recursive', value=Constant(value=True))]), Name(id='patterns', ctx=Load())], keywords=[])), Assign(targets=[Name(id='globs_matches', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='itertools', ctx=Load()), attr='chain', ctx=Load()), attr='from_iterable', ctx=Load()), args=[Name(id='globs_expanded', ctx=Load())], keywords=[])), Assign(targets=[Name(id='glob_files', ctx=Store())], value=Call(func=Name(id='filter', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isfile', ctx=Load()), Name(id='globs_matches', ctx=Load())], keywords=[])), Assign(targets=[Name(id='files', ctx=Store())], value=Call(func=Attribute(value=Name(id='itertools', ctx=Load()), attr='chain', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='manifest_files', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='package', ctx=Load()), List(elts=[], ctx=Load())], keywords=[]), Name(id='glob_files', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='exclude_data_files', ctx=Load()), args=[Name(id='package', ctx=Load()), Name(id='src_dir', ctx=Load()), Name(id='files', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='get_outputs', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='include_bytecode')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1)]), body=[Expr(value=Constant(value='See :class:`setuptools.commands.build.SubCommand`')), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='editable_mode', ctx=Load()), body=[Return(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_output_mapping', ctx=Load()), args=[], keywords=[]), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='get_outputs', ctx=Load()), args=[Name(id='include_bytecode', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='get_output_mapping', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='See :class:`setuptools.commands.build.SubCommand`')), Assign(targets=[Name(id='mapping', ctx=Store())], value=Call(func=Attribute(value=Name(id='itertools', ctx=Load()), attr='chain', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_package_data_output_mapping', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_module_mapping', ctx=Load()), args=[], keywords=[])], keywords=[])), Return(value=Call(func=Name(id='dict', ctx=Load()), args=[Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='mapping', ctx=Load())], keywords=[keyword(arg='key', value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value=0), ctx=Load())))])], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='_get_module_mapping', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Iterate over all modules producing (dest, src) pairs.')), For(target=Tuple(elts=[Name(id='package', ctx=Store()), Name(id='module', ctx=Store()), Name(id='module_file', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='find_all_modules', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='package', ctx=Store())], value=Call(func=Attribute(value=Name(id='package', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[])), Assign(targets=[Name(id='filename', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_module_outfile', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='build_lib', ctx=Load()), Name(id='package', ctx=Load()), Name(id='module', ctx=Load())], keywords=[])), Expr(value=Yield(value=Tuple(elts=[Name(id='filename', ctx=Load()), Name(id='module_file', ctx=Load())], ctx=Load())))], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='_get_package_data_output_mapping', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Iterate over package data producing (dest, src) pairs.')), For(target=Tuple(elts=[Name(id='package', ctx=Store()), Name(id='src_dir', ctx=Store()), Name(id='build_dir', ctx=Store()), Name(id='filenames', ctx=Store())], ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='data_files', ctx=Load()), body=[For(target=Name(id='filename', ctx=Store()), iter=Name(id='filenames', ctx=Load()), body=[Assign(targets=[Name(id='target', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='build_dir', ctx=Load()), Name(id='filename', ctx=Load())], keywords=[])), Assign(targets=[Name(id='srcfile', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='src_dir', ctx=Load()), Name(id='filename', ctx=Load())], keywords=[])), Expr(value=Yield(value=Tuple(elts=[Name(id='target', ctx=Load()), Name(id='srcfile', ctx=Load())], ctx=Load())))], orelse=[])], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='build_package_data', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Copy data files into build directory')), For(target=Tuple(elts=[Name(id='target', ctx=Store()), Name(id='srcfile', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_package_data_output_mapping', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='mkpath', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Name(id='target', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='_outf', ctx=Store()), Name(id='_copied', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='copy_file', ctx=Load()), args=[Name(id='srcfile', ctx=Load()), Name(id='target', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='make_writable', ctx=Load()), args=[Name(id='target', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='analyze_manifest', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='manifest_files', ctx=Store()), Name(id='mf', ctx=Store())], value=Dict(keys=[], values=[])), If(test=UnaryOp(op=Not(), operand=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='include_package_data', ctx=Load())), body=[Return()], orelse=[]), Assign(targets=[Name(id='src_dirs', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='package', ctx=Store()), iter=BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='packages', ctx=Load()), Tuple(elts=[], ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='src_dirs', ctx=Load()), slice=Call(func=Name(id='assert_relative', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_package_dir', ctx=Load()), args=[Name(id='package', ctx=Load())], keywords=[])], keywords=[]), ctx=Store())], value=Name(id='package', ctx=Load()))], orelse=[]), If(test=BoolOp(op=And(), values=[Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Constant(value='existing_egg_info_dir'), Constant(value=None)], keywords=[]), Call(func=Attribute(value=Call(func=Name(id='Path', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='existing_egg_info_dir', ctx=Load()), Constant(value='SOURCES.txt')], keywords=[]), attr='exists', ctx=Load()), args=[], keywords=[])]), body=[Assign(targets=[Name(id='egg_info_dir', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='existing_egg_info_dir', ctx=Load())), Assign(targets=[Name(id='manifest', ctx=Store())], value=Call(func=Name(id='Path', ctx=Load()), args=[Name(id='egg_info_dir', ctx=Load()), Constant(value='SOURCES.txt')], keywords=[])), Assign(targets=[Name(id='files', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='manifest', ctx=Load()), attr='read_text', ctx=Load()), args=[], keywords=[keyword(arg='encoding', value=Constant(value='utf-8'))]), attr='splitlines', ctx=Load()), args=[], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='run_command', ctx=Load()), args=[Constant(value='egg_info')], keywords=[])), Assign(targets=[Name(id='ei_cmd', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_finalized_command', ctx=Load()), args=[Constant(value='egg_info')], keywords=[])), Assign(targets=[Name(id='egg_info_dir', ctx=Store())], value=Attribute(value=Name(id='ei_cmd', ctx=Load()), attr='egg_info', ctx=Load())), Assign(targets=[Name(id='files', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='ei_cmd', ctx=Load()), attr='filelist', ctx=Load()), attr='files', ctx=Load()))]), Assign(targets=[Name(id='check', ctx=Store())], value=Call(func=Name(id='_IncludePackageDataAbuse', ctx=Load()), args=[], keywords=[])), For(target=Name(id='path', ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_filter_build_files', ctx=Load()), args=[Name(id='files', ctx=Load()), Name(id='egg_info_dir', ctx=Load())], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='d', ctx=Store()), Name(id='f', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='split', ctx=Load()), args=[Call(func=Name(id='assert_relative', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='prev', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='oldf', ctx=Store())], value=Name(id='f', ctx=Load())), While(test=BoolOp(op=And(), values=[Name(id='d', ctx=Load()), Compare(left=Name(id='d', ctx=Load()), ops=[NotEq()], comparators=[Name(id='prev', ctx=Load())]), Compare(left=Name(id='d', ctx=Load()), ops=[NotIn()], comparators=[Name(id='src_dirs', ctx=Load())])]), body=[Assign(targets=[Name(id='prev', ctx=Store())], value=Name(id='d', ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='d', ctx=Store()), Name(id='df', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='split', ctx=Load()), args=[Name(id='d', ctx=Load())], keywords=[])), Assign(targets=[Name(id='f', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='df', ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='d', ctx=Load()), ops=[In()], comparators=[Name(id='src_dirs', ctx=Load())]), body=[If(test=Compare(left=Name(id='f', ctx=Load()), ops=[Eq()], comparators=[Name(id='oldf', ctx=Load())]), body=[If(test=Call(func=Attribute(value=Name(id='check', ctx=Load()), attr='is_module', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]), body=[Continue()], orelse=[])], orelse=[Assign(targets=[Name(id='importable', ctx=Store())], value=Call(func=Attribute(value=Name(id='check', ctx=Load()), attr='importable_subpackage', ctx=Load()), args=[Subscript(value=Name(id='src_dirs', ctx=Load()), slice=Name(id='d', ctx=Load()), ctx=Load()), Name(id='f', ctx=Load())], keywords=[])), If(test=Name(id='importable', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='check', ctx=Load()), attr='warn', ctx=Load()), args=[Name(id='importable', ctx=Load())], keywords=[]))], orelse=[])]), Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='mf', ctx=Load()), attr='setdefault', ctx=Load()), args=[Subscript(value=Name(id='src_dirs', ctx=Load()), slice=Name(id='d', ctx=Load()), ctx=Load()), List(elts=[], ctx=Load())], keywords=[]), attr='append', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='_filter_build_files', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='files', annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='egg_info', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        ``build_meta`` may try to create egg_info outside of the project directory,\n        and this can be problematic for certain plugins (reported in issue #3500).\n\n        Extensions might also include between their sources files created on the\n        ``build_lib`` and ``build_temp`` directories.\n\n        This function should filter this case of invalid files out.\n        ')), Assign(targets=[Name(id='build', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_finalized_command', ctx=Load()), args=[Constant(value='build')], keywords=[])), Assign(targets=[Name(id='build_dirs', ctx=Store())], value=Tuple(elts=[Name(id='egg_info', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='build_lib', ctx=Load()), Attribute(value=Name(id='build', ctx=Load()), attr='build_temp', ctx=Load()), Attribute(value=Name(id='build', ctx=Load()), attr='build_base', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='norm_dirs', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normpath', ctx=Load()), args=[Name(id='p', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='p', ctx=Store()), iter=Name(id='build_dirs', ctx=Load()), ifs=[Name(id='p', ctx=Load())], is_async=0)])), For(target=Name(id='file', ctx=Store()), iter=Name(id='files', ctx=Load()), body=[Assign(targets=[Name(id='norm_path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normpath', ctx=Load()), args=[Name(id='file', ctx=Load())], keywords=[])), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isabs', ctx=Load()), args=[Name(id='file', ctx=Load())], keywords=[])), Call(func=Name(id='all', ctx=Load()), args=[GeneratorExp(elt=Compare(left=Name(id='d', ctx=Load()), ops=[NotIn()], comparators=[Name(id='norm_path', ctx=Load())]), generators=[comprehension(target=Name(id='d', ctx=Store()), iter=Name(id='norm_dirs', ctx=Load()), ifs=[], is_async=0)])], keywords=[])]), body=[Expr(value=Yield(value=Name(id='file', ctx=Load())))], orelse=[])], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='get_data_files', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[]), FunctionDef(name='check_package', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='package'), arg(arg='package_dir')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Check namespace packages' __init__ for declare_namespace")), Try(body=[Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='packages_checked', ctx=Load()), slice=Name(id='package', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[]), Assign(targets=[Name(id='init_py', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='orig', ctx=Load()), attr='build_py', ctx=Load()), attr='check_package', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='package', ctx=Load()), Name(id='package_dir', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='packages_checked', ctx=Load()), slice=Name(id='package', ctx=Load()), ctx=Store())], value=Name(id='init_py', ctx=Load())), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Name(id='init_py', ctx=Load())), UnaryOp(op=Not(), operand=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='namespace_packages', ctx=Load()))]), body=[Return(value=Name(id='init_py', ctx=Load()))], orelse=[]), For(target=Name(id='pkg', ctx=Store()), iter=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='namespace_packages', ctx=Load()), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='pkg', ctx=Load()), ops=[Eq()], comparators=[Name(id='package', ctx=Load())]), Call(func=Attribute(value=Name(id='pkg', ctx=Load()), attr='startswith', ctx=Load()), args=[BinOp(left=Name(id='package', ctx=Load()), op=Add(), right=Constant(value='.'))], keywords=[])]), body=[Break()], orelse=[])], orelse=[Return(value=Name(id='init_py', ctx=Load()))]), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='open', ctx=Load()), args=[Name(id='init_py', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='contents', ctx=Store())], value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]))]), If(test=Compare(left=Constant(value=b'declare_namespace'), ops=[NotIn()], comparators=[Name(id='contents', ctx=Load())]), body=[Raise(exc=Call(func=Attribute(value=Attribute(value=Name(id='distutils', ctx=Load()), attr='errors', ctx=Load()), attr='DistutilsError', ctx=Load()), args=[BinOp(left=Constant(value='Namespace package problem: %s is a namespace package, but its\n__init__.py does not call declare_namespace()! Please fix it.\n(See the setuptools manual under "Namespace Packages" for details.)\n"'), op=Mod(), right=Tuple(elts=[Name(id='package', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[]), Return(value=Name(id='init_py', ctx=Load()))], decorator_list=[]), FunctionDef(name='initialize_options', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='packages_checked', ctx=Store())], value=Dict(keys=[], values=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='orig', ctx=Load()), attr='build_py', ctx=Load()), attr='initialize_options', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='editable_mode', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='existing_egg_info_dir', ctx=Store())], value=Constant(value=None))], decorator_list=[]), FunctionDef(name='get_package_dir', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='package')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='res', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='orig', ctx=Load()), attr='build_py', ctx=Load()), attr='get_package_dir', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='package', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='src_root', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distribution', ctx=Load()), attr='src_root', ctx=Load()), Name(id='res', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='res', ctx=Load()))], decorator_list=[]), FunctionDef(name='exclude_data_files', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='package'), arg(arg='src_dir'), arg(arg='files')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Filter filenames for package's data files in 'src_dir'")), Assign(targets=[Name(id='files', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='files', ctx=Load())], keywords=[])), Assign(targets=[Name(id='patterns', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_platform_patterns', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='exclude_package_data', ctx=Load()), Name(id='package', ctx=Load()), Name(id='src_dir', ctx=Load())], keywords=[])), Assign(targets=[Name(id='match_groups', ctx=Store())], value=GeneratorExp(elt=Call(func=Attribute(value=Name(id='fnmatch', ctx=Load()), attr='filter', ctx=Load()), args=[Name(id='files', ctx=Load()), Name(id='pattern', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='pattern', ctx=Store()), iter=Name(id='patterns', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='matches', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='itertools', ctx=Load()), attr='chain', ctx=Load()), attr='from_iterable', ctx=Load()), args=[Name(id='match_groups', ctx=Load())], keywords=[])), Assign(targets=[Name(id='bad', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Name(id='matches', ctx=Load())], keywords=[])), Assign(targets=[Name(id='keepers', ctx=Store())], value=GeneratorExp(elt=Name(id='fn', ctx=Load()), generators=[comprehension(target=Name(id='fn', ctx=Store()), iter=Name(id='files', ctx=Load()), ifs=[Compare(left=Name(id='fn', ctx=Load()), ops=[NotIn()], comparators=[Name(id='bad', ctx=Load())])], is_async=0)])), Return(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='unique_everseen', ctx=Load()), args=[Name(id='keepers', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='_get_platform_patterns', args=arguments(posonlyargs=[], args=[arg(arg='spec'), arg(arg='package'), arg(arg='src_dir')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        yield platform-specific path patterns (suitable for glob\n        or fn_match) from a glob-based spec (such as\n        self.package_data or self.exclude_package_data)\n        matching package in src_dir.\n        ')), Assign(targets=[Name(id='raw_patterns', ctx=Store())], value=Call(func=Attribute(value=Name(id='itertools', ctx=Load()), attr='chain', ctx=Load()), args=[Call(func=Attribute(value=Name(id='spec', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value=''), List(elts=[], ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='spec', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='package', ctx=Load()), List(elts=[], ctx=Load())], keywords=[])], keywords=[])), Return(value=GeneratorExp(elt=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='src_dir', ctx=Load()), Call(func=Name(id='convert_path', ctx=Load()), args=[Name(id='pattern', ctx=Load())], keywords=[])], keywords=[]), generators=[comprehension(target=Name(id='pattern', ctx=Store()), iter=Name(id='raw_patterns', ctx=Load()), ifs=[], is_async=0)]))], decorator_list=[Name(id='staticmethod', ctx=Load())])], decorator_list=[]), FunctionDef(name='assert_relative', args=arguments(posonlyargs=[], args=[arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isabs', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), body=[Return(value=Name(id='path', ctx=Load()))], orelse=[]), ImportFrom(module='distutils.errors', names=[alias(name='DistutilsSetupError')], level=0), Assign(targets=[Name(id='msg', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='textwrap', ctx=Load()), attr='dedent', ctx=Load()), args=[Constant(value='\n        Error: setup script specifies an absolute path:\n\n            %s\n\n        setup() arguments must *always* be /-separated paths relative to the\n        setup.py directory, *never* absolute paths.\n        ')], keywords=[]), attr='lstrip', ctx=Load()), args=[], keywords=[]), op=Mod(), right=Name(id='path', ctx=Load()))), Raise(exc=Call(func=Name(id='DistutilsSetupError', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))], decorator_list=[]), ClassDef(name='_IncludePackageDataAbuse', bases=[], keywords=[], body=[Expr(value=Constant(value="Inform users that package or module is included as 'data file'")), ClassDef(name='_Warning', bases=[Name(id='SetuptoolsDeprecationWarning', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='_SUMMARY', ctx=Store())], value=Constant(value='\n        Package {importable!r} is absent from the `packages` configuration.\n        ')), Assign(targets=[Name(id='_DETAILS', ctx=Store())], value=Constant(value='\n        ############################\n        # Package would be ignored #\n        ############################\n        Python recognizes {importable!r} as an importable package[^1],\n        but it is absent from setuptools\' `packages` configuration.\n\n        This leads to an ambiguous overall configuration. If you want to distribute this\n        package, please make sure that {importable!r} is explicitly added\n        to the `packages` configuration field.\n\n        Alternatively, you can also rely on setuptools\' discovery methods\n        (for example by using `find_namespace_packages(...)`/`find_namespace:`\n        instead of `find_packages(...)`/`find:`).\n\n        You can read more about "package discovery" on setuptools documentation page:\n\n        - https://setuptools.pypa.io/en/latest/userguide/package_discovery.html\n\n        If you don\'t want {importable!r} to be distributed and are\n        already explicitly excluding {importable!r} via\n        `find_namespace_packages(...)/find_namespace` or `find_packages(...)/find`,\n        you can try to use `exclude_package_data`, or `include-package-data=False` in\n        combination with a more fine grained `package-data` configuration.\n\n        You can read more about "package data files" on setuptools documentation page:\n\n        - https://setuptools.pypa.io/en/latest/userguide/datafiles.html\n\n\n        [^1]: For Python, any directory (with suitable naming) can be imported,\n              even if it does not contain any `.py` files.\n              On the other hand, currently there is no concept of package data\n              directory, all directories are treated like packages.\n        '))], decorator_list=[]), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_already_warned', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='is_module', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='file')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=And(), values=[Call(func=Attribute(value=Name(id='file', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='.py')], keywords=[]), Call(func=Attribute(value=Subscript(value=Name(id='file', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Call(func=Name(id='len', ctx=Load()), args=[Constant(value='.py')], keywords=[]))), ctx=Load()), attr='isidentifier', ctx=Load()), args=[], keywords=[])]))], decorator_list=[]), FunctionDef(name='importable_subpackage', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='parent'), arg(arg='file')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='pkg', ctx=Store())], value=Attribute(value=Call(func=Name(id='Path', ctx=Load()), args=[Name(id='file', ctx=Load())], keywords=[]), attr='parent', ctx=Load())), Assign(targets=[Name(id='parts', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='itertools', ctx=Load()), attr='takewhile', ctx=Load()), args=[Attribute(value=Name(id='str', ctx=Load()), attr='isidentifier', ctx=Load()), Attribute(value=Name(id='pkg', ctx=Load()), attr='parts', ctx=Load())], keywords=[])], keywords=[])), If(test=Name(id='parts', ctx=Load()), body=[Return(value=Call(func=Attribute(value=Constant(value='.'), attr='join', ctx=Load()), args=[List(elts=[Name(id='parent', ctx=Load()), Starred(value=Name(id='parts', ctx=Load()), ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), Return(value=Constant(value=None))], decorator_list=[]), FunctionDef(name='warn', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='importable')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='importable', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_already_warned', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_Warning', ctx=Load()), attr='emit', ctx=Load()), args=[], keywords=[keyword(arg='importable', value=Name(id='importable', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_already_warned', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='importable', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[])], decorator_list=[])], type_ignores=[])