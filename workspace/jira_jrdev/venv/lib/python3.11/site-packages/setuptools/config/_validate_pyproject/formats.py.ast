Module(body=[Import(names=[alias(name='logging')]), Import(names=[alias(name='os')]), Import(names=[alias(name='re')]), Import(names=[alias(name='string')]), Import(names=[alias(name='typing')]), ImportFrom(module='itertools', names=[alias(name='chain', asname='_chain')], level=0), If(test=Attribute(value=Name(id='typing', ctx=Load()), attr='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='typing_extensions', names=[alias(name='Literal')], level=0)], orelse=[]), Assign(targets=[Name(id='_logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), Assign(targets=[Name(id='VERSION_PATTERN', ctx=Store())], value=Constant(value='\n    v?\n    (?:\n        (?:(?P<epoch>[0-9]+)!)?                           # epoch\n        (?P<release>[0-9]+(?:\\.[0-9]+)*)                  # release segment\n        (?P<pre>                                          # pre-release\n            [-_\\.]?\n            (?P<pre_l>(a|b|c|rc|alpha|beta|pre|preview))\n            [-_\\.]?\n            (?P<pre_n>[0-9]+)?\n        )?\n        (?P<post>                                         # post release\n            (?:-(?P<post_n1>[0-9]+))\n            |\n            (?:\n                [-_\\.]?\n                (?P<post_l>post|rev|r)\n                [-_\\.]?\n                (?P<post_n2>[0-9]+)?\n            )\n        )?\n        (?P<dev>                                          # dev release\n            [-_\\.]?\n            (?P<dev_l>dev)\n            [-_\\.]?\n            (?P<dev_n>[0-9]+)?\n        )?\n    )\n    (?:\\+(?P<local>[a-z0-9]+(?:[-_\\.][a-z0-9]+)*))?       # local version\n')), Assign(targets=[Name(id='VERSION_REGEX', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[BinOp(left=BinOp(left=Constant(value='^\\s*'), op=Add(), right=Name(id='VERSION_PATTERN', ctx=Load())), op=Add(), right=Constant(value='\\s*$')), BinOp(left=Attribute(value=Name(id='re', ctx=Load()), attr='X', ctx=Load()), op=BitOr(), right=Attribute(value=Name(id='re', ctx=Load()), attr='I', ctx=Load()))], keywords=[])), FunctionDef(name='pep440', args=arguments(posonlyargs=[], args=[arg(arg='version', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Compare(left=Call(func=Attribute(value=Name(id='VERSION_REGEX', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='version', ctx=Load())], keywords=[]), ops=[IsNot()], comparators=[Constant(value=None)]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), Assign(targets=[Name(id='PEP508_IDENTIFIER_PATTERN', ctx=Store())], value=Constant(value='([A-Z0-9]|[A-Z0-9][A-Z0-9._-]*[A-Z0-9])')), Assign(targets=[Name(id='PEP508_IDENTIFIER_REGEX', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[JoinedStr(values=[Constant(value='^'), FormattedValue(value=Name(id='PEP508_IDENTIFIER_PATTERN', ctx=Load()), conversion=-1), Constant(value='$')]), Attribute(value=Name(id='re', ctx=Load()), attr='I', ctx=Load())], keywords=[])), FunctionDef(name='pep508_identifier', args=arguments(posonlyargs=[], args=[arg(arg='name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Compare(left=Call(func=Attribute(value=Name(id='PEP508_IDENTIFIER_REGEX', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]), ops=[IsNot()], comparators=[Constant(value=None)]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), Try(body=[Try(body=[ImportFrom(module='packaging', names=[alias(name='requirements', asname='_req')], level=0)], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[ImportFrom(module='setuptools._vendor.packaging', names=[alias(name='requirements', asname='_req')], level=0)])], orelse=[], finalbody=[]), FunctionDef(name='pep508', args=arguments(posonlyargs=[], args=[arg(arg='value', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='_req', ctx=Load()), attr='Requirement', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])), Return(value=Constant(value=True))], handlers=[ExceptHandler(type=Attribute(value=Name(id='_req', ctx=Load()), attr='InvalidRequirement', ctx=Load()), body=[Return(value=Constant(value=False))])], orelse=[], finalbody=[])], decorator_list=[], returns=Name(id='bool', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='_logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='Could not find an installation of `packaging`. Requirements, dependencies and versions might not be validated. To enforce validation, please install `packaging`.')], keywords=[])), FunctionDef(name='pep508', args=arguments(posonlyargs=[], args=[arg(arg='value', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=True))], decorator_list=[], returns=Name(id='bool', ctx=Load()))])], orelse=[], finalbody=[]), FunctionDef(name='pep508_versionspec', args=arguments(posonlyargs=[], args=[arg(arg='value', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Expression that can be used to specify/lock versions (including ranges)')), If(test=Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=Compare(left=Name(id='c', ctx=Load()), ops=[In()], comparators=[Name(id='value', ctx=Load())]), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Tuple(elts=[Constant(value=';'), Constant(value=']'), Constant(value='@')], ctx=Load()), ifs=[], is_async=0)])], keywords=[]), body=[Return(value=Constant(value=False))], orelse=[]), Return(value=Call(func=Name(id='pep508', ctx=Load()), args=[JoinedStr(values=[Constant(value='requirement'), FormattedValue(value=Name(id='value', ctx=Load()), conversion=-1)])], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='pep517_backend_reference', args=arguments(posonlyargs=[], args=[arg(arg='value', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='module', ctx=Store()), Name(id='_', ctx=Store()), Name(id='obj', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='partition', ctx=Load()), args=[Constant(value=':')], keywords=[])), Assign(targets=[Name(id='identifiers', ctx=Store())], value=GeneratorExp(elt=Call(func=Attribute(value=Name(id='i', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='_chain', ctx=Load()), args=[Call(func=Attribute(value=Name(id='module', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[]), Call(func=Attribute(value=Name(id='obj', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Return(value=Call(func=Name(id='all', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='python_identifier', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Name(id='identifiers', ctx=Load()), ifs=[Name(id='i', ctx=Load())], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='_download_classifiers', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Import(names=[alias(name='ssl')]), ImportFrom(module='email.message', names=[alias(name='Message')], level=0), ImportFrom(module='urllib.request', names=[alias(name='urlopen')], level=0), Assign(targets=[Name(id='url', ctx=Store())], value=Constant(value='https://pypi.org/pypi?:action=list_classifiers')), Assign(targets=[Name(id='context', ctx=Store())], value=Call(func=Attribute(value=Name(id='ssl', ctx=Load()), attr='create_default_context', ctx=Load()), args=[], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='urlopen', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[keyword(arg='context', value=Name(id='context', ctx=Load()))]), optional_vars=Name(id='response', ctx=Store()))], body=[Assign(targets=[Name(id='headers', ctx=Store())], value=Call(func=Name(id='Message', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Name(id='headers', ctx=Load()), slice=Constant(value='content_type'), ctx=Store())], value=Call(func=Attribute(value=Name(id='response', ctx=Load()), attr='getheader', ctx=Load()), args=[Constant(value='content-type'), Constant(value='text/plain')], keywords=[])), Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='response', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]), attr='decode', ctx=Load()), args=[Call(func=Attribute(value=Name(id='headers', ctx=Load()), attr='get_param', ctx=Load()), args=[Constant(value='charset'), Constant(value='utf-8')], keywords=[])], keywords=[]))])], decorator_list=[], returns=Name(id='str', ctx=Load())), ClassDef(name='_TroveClassifier', bases=[], keywords=[], body=[Expr(value=Constant(value="The ``trove_classifiers`` package is the official way of validating classifiers,\n    however this package might not be always available.\n    As a workaround we can still download a list from PyPI.\n    We also don't want to be over strict about it, so simply skipping silently is an\n    option (classifiers will be validated anyway during the upload to PyPI).\n    ")), AnnAssign(target=Name(id='downloaded', ctx=Store()), annotation=Subscript(value=Attribute(value=Name(id='typing', ctx=Load()), attr='Union', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Constant(value='Literal[False]'), Subscript(value=Attribute(value=Name(id='typing', ctx=Load()), attr='Set', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), simple=1), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='downloaded', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_skip_download', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='__name__', ctx=Store())], value=Constant(value='trove_classifier'))], decorator_list=[]), FunctionDef(name='_disable_download', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_skip_download', ctx=Store())], value=Constant(value=True))], decorator_list=[]), FunctionDef(name='__call__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='downloaded', ctx=Load()), ops=[Is()], comparators=[Constant(value=False)]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_skip_download', ctx=Load()), ops=[Is()], comparators=[Constant(value=True)])]), body=[Return(value=Constant(value=True))], orelse=[]), If(test=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getenv', ctx=Load()), args=[Constant(value='NO_NETWORK')], keywords=[]), Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getenv', ctx=Load()), args=[Constant(value='VALIDATE_PYPROJECT_NO_NETWORK')], keywords=[])]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='downloaded', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='msg', ctx=Store())], value=Constant(value='Install ``trove-classifiers`` to ensure proper validation. Skipping download of classifiers list from PyPI (NO_NETWORK).')), Expr(value=Call(func=Attribute(value=Name(id='_logger', ctx=Load()), attr='debug', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[])), Return(value=Constant(value=True))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='downloaded', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Constant(value='Install ``trove-classifiers`` to ensure proper validation. Meanwhile a list of classifiers will be downloaded from PyPI.')), Expr(value=Call(func=Attribute(value=Name(id='_logger', ctx=Load()), attr='debug', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[])), Try(body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='downloaded', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Name(id='_download_classifiers', ctx=Load()), args=[], keywords=[]), attr='splitlines', ctx=Load()), args=[], keywords=[])], keywords=[]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='downloaded', ctx=Store())], value=Constant(value=False)), Expr(value=Call(func=Attribute(value=Name(id='_logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Problem with download, skipping validation')], keywords=[])), Return(value=Constant(value=True))])], orelse=[], finalbody=[])], orelse=[]), Return(value=BoolOp(op=Or(), values=[Compare(left=Name(id='value', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='downloaded', ctx=Load())]), Call(func=Attribute(value=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), attr='startswith', ctx=Load()), args=[Constant(value='private ::')], keywords=[])]))], decorator_list=[], returns=Name(id='bool', ctx=Load()))], decorator_list=[]), Try(body=[ImportFrom(module='trove_classifiers', names=[alias(name='classifiers', asname='_trove_classifiers')], level=0), FunctionDef(name='trove_classifier', args=arguments(posonlyargs=[], args=[arg(arg='value', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=Or(), values=[Compare(left=Name(id='value', ctx=Load()), ops=[In()], comparators=[Name(id='_trove_classifiers', ctx=Load())]), Call(func=Attribute(value=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), attr='startswith', ctx=Load()), args=[Constant(value='private ::')], keywords=[])]))], decorator_list=[], returns=Name(id='bool', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Assign(targets=[Name(id='trove_classifier', ctx=Store())], value=Call(func=Name(id='_TroveClassifier', ctx=Load()), args=[], keywords=[]))])], orelse=[], finalbody=[]), FunctionDef(name='pep561_stub_name', args=arguments(posonlyargs=[], args=[arg(arg='value', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='top', ctx=Store()), Starred(value=Name(id='children', ctx=Store()), ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='top', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='-stubs')], keywords=[])), body=[Return(value=Constant(value=False))], orelse=[]), Return(value=Call(func=Name(id='python_module_name', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='.'), attr='join', ctx=Load()), args=[List(elts=[Subscript(value=Name(id='top', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Call(func=Name(id='len', ctx=Load()), args=[Constant(value='-stubs')], keywords=[]))), ctx=Load()), Starred(value=Name(id='children', ctx=Load()), ctx=Load())], ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='url', args=arguments(posonlyargs=[], args=[arg(arg='value', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[ImportFrom(module='urllib.parse', names=[alias(name='urlparse')], level=0), Try(body=[Assign(targets=[Name(id='parts', ctx=Store())], value=Call(func=Name(id='urlparse', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='parts', ctx=Load()), attr='scheme', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='_logger', ctx=Load()), attr='warning', ctx=Load()), args=[JoinedStr(values=[Constant(value="For maximum compatibility please make sure to include a `scheme` prefix in your URL (e.g. 'http://'). Given value: "), FormattedValue(value=Name(id='value', ctx=Load()), conversion=-1)])], keywords=[])), If(test=UnaryOp(op=Not(), operand=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='/')], keywords=[]), Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='\\')], keywords=[]), Compare(left=Constant(value='@'), ops=[In()], comparators=[Name(id='value', ctx=Load())])])), body=[Assign(targets=[Name(id='parts', ctx=Store())], value=Call(func=Name(id='urlparse', ctx=Load()), args=[JoinedStr(values=[Constant(value='http://'), FormattedValue(value=Name(id='value', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[])], orelse=[]), Return(value=Call(func=Name(id='bool', ctx=Load()), args=[BoolOp(op=And(), values=[Attribute(value=Name(id='parts', ctx=Load()), attr='scheme', ctx=Load()), Attribute(value=Name(id='parts', ctx=Load()), attr='netloc', ctx=Load())])], keywords=[]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Return(value=Constant(value=False))])], orelse=[], finalbody=[])], decorator_list=[], returns=Name(id='bool', ctx=Load())), Assign(targets=[Name(id='ENTRYPOINT_PATTERN', ctx=Store())], value=Constant(value='[^\\[\\s=]([^=]*[^\\s=])?')), Assign(targets=[Name(id='ENTRYPOINT_REGEX', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[JoinedStr(values=[Constant(value='^'), FormattedValue(value=Name(id='ENTRYPOINT_PATTERN', ctx=Load()), conversion=-1), Constant(value='$')]), Attribute(value=Name(id='re', ctx=Load()), attr='I', ctx=Load())], keywords=[])), Assign(targets=[Name(id='RECOMMEDED_ENTRYPOINT_PATTERN', ctx=Store())], value=Constant(value='[\\w.-]+')), Assign(targets=[Name(id='RECOMMEDED_ENTRYPOINT_REGEX', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[JoinedStr(values=[Constant(value='^'), FormattedValue(value=Name(id='RECOMMEDED_ENTRYPOINT_PATTERN', ctx=Load()), conversion=-1), Constant(value='$')]), Attribute(value=Name(id='re', ctx=Load()), attr='I', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ENTRYPOINT_GROUP_PATTERN', ctx=Store())], value=Constant(value='\\w+(\\.\\w+)*')), Assign(targets=[Name(id='ENTRYPOINT_GROUP_REGEX', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[JoinedStr(values=[Constant(value='^'), FormattedValue(value=Name(id='ENTRYPOINT_GROUP_PATTERN', ctx=Load()), conversion=-1), Constant(value='$')]), Attribute(value=Name(id='re', ctx=Load()), attr='I', ctx=Load())], keywords=[])), FunctionDef(name='python_identifier', args=arguments(posonlyargs=[], args=[arg(arg='value', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='isidentifier', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='python_qualified_identifier', args=arguments(posonlyargs=[], args=[arg(arg='value', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='.')], keywords=[]), Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='.')], keywords=[])]), body=[Return(value=Constant(value=False))], orelse=[]), Return(value=Call(func=Name(id='all', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='python_identifier', ctx=Load()), args=[Name(id='m', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='m', ctx=Store()), iter=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='python_module_name', args=arguments(posonlyargs=[], args=[arg(arg='value', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='python_qualified_identifier', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='python_entrypoint_group', args=arguments(posonlyargs=[], args=[arg(arg='value', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Compare(left=Call(func=Attribute(value=Name(id='ENTRYPOINT_GROUP_REGEX', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]), ops=[IsNot()], comparators=[Constant(value=None)]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='python_entrypoint_name', args=arguments(posonlyargs=[], args=[arg(arg='value', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='ENTRYPOINT_REGEX', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])), body=[Return(value=Constant(value=False))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='RECOMMEDED_ENTRYPOINT_REGEX', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=JoinedStr(values=[Constant(value='Entry point `'), FormattedValue(value=Name(id='value', ctx=Load()), conversion=-1), Constant(value='` does not follow recommended pattern: ')])), AugAssign(target=Name(id='msg', ctx=Store()), op=Add(), value=Name(id='RECOMMEDED_ENTRYPOINT_PATTERN', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='_logger', ctx=Load()), attr='warning', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Constant(value=True))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='python_entrypoint_reference', args=arguments(posonlyargs=[], args=[arg(arg='value', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='module', ctx=Store()), Name(id='_', ctx=Store()), Name(id='rest', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='partition', ctx=Load()), args=[Constant(value=':')], keywords=[])), If(test=Compare(left=Constant(value='['), ops=[In()], comparators=[Name(id='rest', ctx=Load())]), body=[Assign(targets=[Tuple(elts=[Name(id='obj', ctx=Store()), Name(id='_', ctx=Store()), Name(id='extras_', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='rest', ctx=Load()), attr='partition', ctx=Load()), args=[Constant(value='[')], keywords=[])), If(test=Compare(left=Subscript(value=Call(func=Attribute(value=Name(id='extras_', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), ops=[NotEq()], comparators=[Constant(value=']')]), body=[Return(value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='extras', ctx=Store())], value=GeneratorExp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='extras_', ctx=Load()), attr='strip', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='string', ctx=Load()), attr='whitespace', ctx=Load()), op=Add(), right=Constant(value='[]'))], keywords=[]), attr='split', ctx=Load()), args=[Constant(value=',')], keywords=[]), ifs=[], is_async=0)])), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='all', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='pep508_identifier', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='e', ctx=Store()), iter=Name(id='extras', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), body=[Return(value=Constant(value=False))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='_logger', ctx=Load()), attr='warning', ctx=Load()), args=[JoinedStr(values=[Constant(value='`'), FormattedValue(value=Name(id='value', ctx=Load()), conversion=-1), Constant(value='` - using extras for entry points is not recommended')])], keywords=[]))], orelse=[Assign(targets=[Name(id='obj', ctx=Store())], value=Name(id='rest', ctx=Load()))]), Assign(targets=[Name(id='module_parts', ctx=Store())], value=Call(func=Attribute(value=Name(id='module', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[])), Assign(targets=[Name(id='identifiers', ctx=Store())], value=IfExp(test=Name(id='rest', ctx=Load()), body=Call(func=Name(id='_chain', ctx=Load()), args=[Name(id='module_parts', ctx=Load()), Call(func=Attribute(value=Name(id='obj', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[])], keywords=[]), orelse=Name(id='module_parts', ctx=Load()))), Return(value=Call(func=Name(id='all', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='python_identifier', ctx=Load()), args=[Call(func=Attribute(value=Name(id='i', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[])], keywords=[]), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Name(id='identifiers', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load()))], type_ignores=[])