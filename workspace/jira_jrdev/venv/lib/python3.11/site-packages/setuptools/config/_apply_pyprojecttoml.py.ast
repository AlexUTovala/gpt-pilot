Module(body=[Expr(value=Constant(value='Translation layer between pyproject config and setuptools distribution and\nmetadata objects.\n\nThe distribution and metadata objects are modeled after (an old version of)\ncore metadata, therefore configs in the format specified for ``pyproject.toml``\nneed to be processed before being applied.\n\n**PRIVATE MODULE**: API reserved for setuptools internal usage only.\n')), Import(names=[alias(name='logging')]), Import(names=[alias(name='os')]), ImportFrom(module='collections.abc', names=[alias(name='Mapping')], level=0), ImportFrom(module='email.headerregistry', names=[alias(name='Address')], level=0), ImportFrom(module='functools', names=[alias(name='partial'), alias(name='reduce')], level=0), ImportFrom(module='itertools', names=[alias(name='chain')], level=0), ImportFrom(module='types', names=[alias(name='MappingProxyType')], level=0), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING'), alias(name='Any'), alias(name='Callable'), alias(name='Dict'), alias(name='List'), alias(name='Optional'), alias(name='Set'), alias(name='Tuple'), alias(name='Type'), alias(name='Union'), alias(name='cast')], level=0), ImportFrom(module='warnings', names=[alias(name='SetuptoolsWarning'), alias(name='SetuptoolsDeprecationWarning')], level=2), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='setuptools._importlib', names=[alias(name='metadata')], level=0), ImportFrom(module='setuptools.dist', names=[alias(name='Distribution')], level=0)], orelse=[]), AnnAssign(target=Name(id='EMPTY', ctx=Store()), annotation=Name(id='Mapping', ctx=Load()), value=Call(func=Name(id='MappingProxyType', ctx=Load()), args=[Dict(keys=[], values=[])], keywords=[]), simple=1), Assign(targets=[Name(id='_Path', ctx=Store())], value=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='os', ctx=Load()), attr='PathLike', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='_DictOrStr', ctx=Store())], value=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='dict', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='_CorrespFn', ctx=Store())], value=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Constant(value='Distribution'), Name(id='Any', ctx=Load()), Name(id='_Path', ctx=Load())], ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='_Correspondence', ctx=Store())], value=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='_CorrespFn', ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='_logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), FunctionDef(name='apply', args=arguments(posonlyargs=[], args=[arg(arg='dist', annotation=Constant(value='Distribution')), arg(arg='config', annotation=Name(id='dict', ctx=Load())), arg(arg='filename', annotation=Name(id='_Path', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Apply configuration dict read with :func:`read_configuration`')), If(test=UnaryOp(op=Not(), operand=Name(id='config', ctx=Load())), body=[Return(value=Name(id='dist', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='root_dir', ctx=Store())], value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[]), Constant(value='.')])), Expr(value=Call(func=Name(id='_apply_project_table', ctx=Load()), args=[Name(id='dist', ctx=Load()), Name(id='config', ctx=Load()), Name(id='root_dir', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='_apply_tool_table', ctx=Load()), args=[Name(id='dist', ctx=Load()), Name(id='config', ctx=Load()), Name(id='filename', ctx=Load())], keywords=[])), Assign(targets=[Name(id='current_directory', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getcwd', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='chdir', ctx=Load()), args=[Name(id='root_dir', ctx=Load())], keywords=[])), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='dist', ctx=Load()), attr='_finalize_requires', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='dist', ctx=Load()), attr='_finalize_license_files', ctx=Load()), args=[], keywords=[]))], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='chdir', ctx=Load()), args=[Name(id='current_directory', ctx=Load())], keywords=[]))]), Return(value=Name(id='dist', ctx=Load()))], decorator_list=[], returns=Constant(value='Distribution')), FunctionDef(name='_apply_project_table', args=arguments(posonlyargs=[], args=[arg(arg='dist', annotation=Constant(value='Distribution')), arg(arg='config', annotation=Name(id='dict', ctx=Load())), arg(arg='root_dir', annotation=Name(id='_Path', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='project_table', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='project'), Dict(keys=[], values=[])], keywords=[]), attr='copy', ctx=Load()), args=[], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='project_table', ctx=Load())), body=[Return()], orelse=[]), Expr(value=Call(func=Name(id='_handle_missing_dynamic', ctx=Load()), args=[Name(id='dist', ctx=Load()), Name(id='project_table', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='_unify_entry_points', ctx=Load()), args=[Name(id='project_table', ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='field', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='project_table', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='norm_key', ctx=Store())], value=Call(func=Name(id='json_compatible_key', ctx=Load()), args=[Name(id='field', ctx=Load())], keywords=[])), Assign(targets=[Name(id='corresp', ctx=Store())], value=Call(func=Attribute(value=Name(id='PYPROJECT_CORRESPONDENCE', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='norm_key', ctx=Load()), Name(id='norm_key', ctx=Load())], keywords=[])), If(test=Call(func=Name(id='callable', ctx=Load()), args=[Name(id='corresp', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Name(id='corresp', ctx=Load()), args=[Name(id='dist', ctx=Load()), Name(id='value', ctx=Load()), Name(id='root_dir', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='_set_config', ctx=Load()), args=[Name(id='dist', ctx=Load()), Name(id='corresp', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]))])], orelse=[])], decorator_list=[]), FunctionDef(name='_apply_tool_table', args=arguments(posonlyargs=[], args=[arg(arg='dist', annotation=Constant(value='Distribution')), arg(arg='config', annotation=Name(id='dict', ctx=Load())), arg(arg='filename', annotation=Name(id='_Path', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='tool_table', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='tool'), Dict(keys=[], values=[])], keywords=[]), attr='get', ctx=Load()), args=[Constant(value='setuptools'), Dict(keys=[], values=[])], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='tool_table', ctx=Load())), body=[Return()], orelse=[]), For(target=Tuple(elts=[Name(id='field', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='tool_table', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='norm_key', ctx=Store())], value=Call(func=Name(id='json_compatible_key', ctx=Load()), args=[Name(id='field', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='norm_key', ctx=Load()), ops=[In()], comparators=[Name(id='TOOL_TABLE_DEPRECATIONS', ctx=Load())]), body=[Assign(targets=[Tuple(elts=[Name(id='suggestion', ctx=Store()), Name(id='kwargs', ctx=Store())], ctx=Store())], value=Subscript(value=Name(id='TOOL_TABLE_DEPRECATIONS', ctx=Load()), slice=Name(id='norm_key', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='msg', ctx=Store())], value=JoinedStr(values=[Constant(value='The parameter `'), FormattedValue(value=Name(id='norm_key', ctx=Load()), conversion=-1), Constant(value='` is deprecated, '), FormattedValue(value=Name(id='suggestion', ctx=Load()), conversion=-1)])), Expr(value=Call(func=Attribute(value=Name(id='SetuptoolsDeprecationWarning', ctx=Load()), attr='emit', ctx=Load()), args=[Constant(value='Deprecated config'), Name(id='msg', ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], orelse=[]), Assign(targets=[Name(id='norm_key', ctx=Store())], value=Call(func=Attribute(value=Name(id='TOOL_TABLE_RENAMES', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='norm_key', ctx=Load()), Name(id='norm_key', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='_set_config', ctx=Load()), args=[Name(id='dist', ctx=Load()), Name(id='norm_key', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Name(id='_copy_command_options', ctx=Load()), args=[Name(id='config', ctx=Load()), Name(id='dist', ctx=Load()), Name(id='filename', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_handle_missing_dynamic', args=arguments(posonlyargs=[], args=[arg(arg='dist', annotation=Constant(value='Distribution')), arg(arg='project_table', annotation=Name(id='dict', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Be temporarily forgiving with ``dynamic`` fields not listed in ``dynamic``')), Assign(targets=[Name(id='dynamic', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Name(id='project_table', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='dynamic'), List(elts=[], ctx=Load())], keywords=[])], keywords=[])), For(target=Tuple(elts=[Name(id='field', ctx=Store()), Name(id='getter', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='_PREVIOUSLY_DEFINED', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=UnaryOp(op=Not(), operand=BoolOp(op=Or(), values=[Compare(left=Name(id='field', ctx=Load()), ops=[In()], comparators=[Name(id='project_table', ctx=Load())]), Compare(left=Name(id='field', ctx=Load()), ops=[In()], comparators=[Name(id='dynamic', ctx=Load())])])), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Name(id='getter', ctx=Load()), args=[Name(id='dist', ctx=Load())], keywords=[])), If(test=Name(id='value', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='_WouldIgnoreField', ctx=Load()), attr='emit', ctx=Load()), args=[], keywords=[keyword(arg='field', value=Name(id='field', ctx=Load())), keyword(arg='value', value=Name(id='value', ctx=Load()))]))], orelse=[])], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='json_compatible_key', args=arguments(posonlyargs=[], args=[arg(arg='key', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='As defined in :pep:`566#json-compatible-metadata`')), Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='key', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value='-'), Constant(value='_')], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='_set_config', args=arguments(posonlyargs=[], args=[arg(arg='dist', annotation=Constant(value='Distribution')), arg(arg='field', annotation=Name(id='str', ctx=Load())), arg(arg='value', annotation=Name(id='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='setter', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Attribute(value=Name(id='dist', ctx=Load()), attr='metadata', ctx=Load()), JoinedStr(values=[Constant(value='set_'), FormattedValue(value=Name(id='field', ctx=Load()), conversion=-1)]), Constant(value=None)], keywords=[])), If(test=Name(id='setter', ctx=Load()), body=[Expr(value=Call(func=Name(id='setter', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], orelse=[If(test=BoolOp(op=Or(), values=[Call(func=Name(id='hasattr', ctx=Load()), args=[Attribute(value=Name(id='dist', ctx=Load()), attr='metadata', ctx=Load()), Name(id='field', ctx=Load())], keywords=[]), Compare(left=Name(id='field', ctx=Load()), ops=[In()], comparators=[Name(id='SETUPTOOLS_PATCHES', ctx=Load())])]), body=[Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Attribute(value=Name(id='dist', ctx=Load()), attr='metadata', ctx=Load()), Name(id='field', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='dist', ctx=Load()), Name(id='field', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]))])])], decorator_list=[]), Assign(targets=[Name(id='_CONTENT_TYPES', ctx=Store())], value=Dict(keys=[Constant(value='.md'), Constant(value='.rst'), Constant(value='.txt')], values=[Constant(value='text/markdown'), Constant(value='text/x-rst'), Constant(value='text/plain')])), FunctionDef(name='_guess_content_type', args=arguments(posonlyargs=[], args=[arg(arg='file', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='ext', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='splitext', ctx=Load()), args=[Call(func=Attribute(value=Name(id='file', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='ext', ctx=Load())), body=[Return(value=Constant(value=None))], orelse=[]), If(test=Compare(left=Name(id='ext', ctx=Load()), ops=[In()], comparators=[Name(id='_CONTENT_TYPES', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='_CONTENT_TYPES', ctx=Load()), slice=Name(id='ext', ctx=Load()), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='valid', ctx=Store())], value=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[GeneratorExp(elt=JoinedStr(values=[FormattedValue(value=Name(id='k', ctx=Load()), conversion=-1), Constant(value=' ('), FormattedValue(value=Name(id='v', ctx=Load()), conversion=-1), Constant(value=')')]), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='_CONTENT_TYPES', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Name(id='msg', ctx=Store())], value=JoinedStr(values=[Constant(value='only the following file extensions are recognized: '), FormattedValue(value=Name(id='valid', ctx=Load()), conversion=-1), Constant(value='.')])), Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='Undefined content type for '), FormattedValue(value=Name(id='file', ctx=Load()), conversion=-1), Constant(value=', '), FormattedValue(value=Name(id='msg', ctx=Load()), conversion=-1)])], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='_long_description', args=arguments(posonlyargs=[], args=[arg(arg='dist', annotation=Constant(value='Distribution')), arg(arg='val', annotation=Name(id='_DictOrStr', ctx=Load())), arg(arg='root_dir', annotation=Name(id='_Path', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[ImportFrom(module='setuptools.config', names=[alias(name='expand')], level=0), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='val', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[AnnAssign(target=Name(id='file', ctx=Store()), annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='list', ctx=Load())], ctx=Load()), ctx=Load()), value=Name(id='val', ctx=Load()), simple=1), Assign(targets=[Name(id='text', ctx=Store())], value=Call(func=Attribute(value=Name(id='expand', ctx=Load()), attr='read_files', ctx=Load()), args=[Name(id='file', ctx=Load()), Name(id='root_dir', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ctype', ctx=Store())], value=Call(func=Name(id='_guess_content_type', ctx=Load()), args=[Name(id='val', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='file', ctx=Store())], value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='val', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='file')], keywords=[]), List(elts=[], ctx=Load())])), Assign(targets=[Name(id='text', ctx=Store())], value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='val', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='text')], keywords=[]), Call(func=Attribute(value=Name(id='expand', ctx=Load()), attr='read_files', ctx=Load()), args=[Name(id='file', ctx=Load()), Name(id='root_dir', ctx=Load())], keywords=[])])), Assign(targets=[Name(id='ctype', ctx=Store())], value=Subscript(value=Name(id='val', ctx=Load()), slice=Constant(value='content-type'), ctx=Load()))]), Expr(value=Call(func=Name(id='_set_config', ctx=Load()), args=[Name(id='dist', ctx=Load()), Constant(value='long_description'), Name(id='text', ctx=Load())], keywords=[])), If(test=Name(id='ctype', ctx=Load()), body=[Expr(value=Call(func=Name(id='_set_config', ctx=Load()), args=[Name(id='dist', ctx=Load()), Constant(value='long_description_content_type'), Name(id='ctype', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='file', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='dist', ctx=Load()), attr='_referenced_files', ctx=Load()), attr='add', ctx=Load()), args=[Call(func=Name(id='cast', ctx=Load()), args=[Name(id='str', ctx=Load()), Name(id='file', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='_license', args=arguments(posonlyargs=[], args=[arg(arg='dist', annotation=Constant(value='Distribution')), arg(arg='val', annotation=Name(id='dict', ctx=Load())), arg(arg='root_dir', annotation=Name(id='_Path', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[ImportFrom(module='setuptools.config', names=[alias(name='expand')], level=0), If(test=Compare(left=Constant(value='file'), ops=[In()], comparators=[Name(id='val', ctx=Load())]), body=[Expr(value=Call(func=Name(id='_set_config', ctx=Load()), args=[Name(id='dist', ctx=Load()), Constant(value='license'), Call(func=Attribute(value=Name(id='expand', ctx=Load()), attr='read_files', ctx=Load()), args=[List(elts=[Subscript(value=Name(id='val', ctx=Load()), slice=Constant(value='file'), ctx=Load())], ctx=Load()), Name(id='root_dir', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='dist', ctx=Load()), attr='_referenced_files', ctx=Load()), attr='add', ctx=Load()), args=[Subscript(value=Name(id='val', ctx=Load()), slice=Constant(value='file'), ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='_set_config', ctx=Load()), args=[Name(id='dist', ctx=Load()), Constant(value='license'), Subscript(value=Name(id='val', ctx=Load()), slice=Constant(value='text'), ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='_people', args=arguments(posonlyargs=[], args=[arg(arg='dist', annotation=Constant(value='Distribution')), arg(arg='val', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='dict', ctx=Load()), ctx=Load())), arg(arg='_root_dir', annotation=Name(id='_Path', ctx=Load())), arg(arg='kind', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='field', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='email_field', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='person', ctx=Store()), iter=Name(id='val', ctx=Load()), body=[If(test=Compare(left=Constant(value='name'), ops=[NotIn()], comparators=[Name(id='person', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='email_field', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='person', ctx=Load()), slice=Constant(value='email'), ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Constant(value='email'), ops=[NotIn()], comparators=[Name(id='person', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='field', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='person', ctx=Load()), slice=Constant(value='name'), ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='addr', ctx=Store())], value=Call(func=Name(id='Address', ctx=Load()), args=[], keywords=[keyword(arg='display_name', value=Subscript(value=Name(id='person', ctx=Load()), slice=Constant(value='name'), ctx=Load())), keyword(arg='addr_spec', value=Subscript(value=Name(id='person', ctx=Load()), slice=Constant(value='email'), ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='email_field', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='addr', ctx=Load())], keywords=[])], keywords=[]))])])], orelse=[]), If(test=Name(id='field', ctx=Load()), body=[Expr(value=Call(func=Name(id='_set_config', ctx=Load()), args=[Name(id='dist', ctx=Load()), Name(id='kind', ctx=Load()), Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Name(id='field', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Name(id='email_field', ctx=Load()), body=[Expr(value=Call(func=Name(id='_set_config', ctx=Load()), args=[Name(id='dist', ctx=Load()), JoinedStr(values=[FormattedValue(value=Name(id='kind', ctx=Load()), conversion=-1), Constant(value='_email')]), Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Name(id='email_field', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='_project_urls', args=arguments(posonlyargs=[], args=[arg(arg='dist', annotation=Constant(value='Distribution')), arg(arg='val', annotation=Name(id='dict', ctx=Load())), arg(arg='_root_dir')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='_set_config', ctx=Load()), args=[Name(id='dist', ctx=Load()), Constant(value='project_urls'), Name(id='val', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_python_requires', args=arguments(posonlyargs=[], args=[arg(arg='dist', annotation=Constant(value='Distribution')), arg(arg='val', annotation=Name(id='dict', ctx=Load())), arg(arg='_root_dir')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[ImportFrom(module='setuptools.extern.packaging.specifiers', names=[alias(name='SpecifierSet')], level=0), Expr(value=Call(func=Name(id='_set_config', ctx=Load()), args=[Name(id='dist', ctx=Load()), Constant(value='python_requires'), Call(func=Name(id='SpecifierSet', ctx=Load()), args=[Name(id='val', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='_dependencies', args=arguments(posonlyargs=[], args=[arg(arg='dist', annotation=Constant(value='Distribution')), arg(arg='val', annotation=Name(id='list', ctx=Load())), arg(arg='_root_dir')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='dist', ctx=Load()), Constant(value='install_requires'), List(elts=[], ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Constant(value='`install_requires` overwritten in `pyproject.toml` (dependencies)')), Expr(value=Call(func=Attribute(value=Name(id='SetuptoolsWarning', ctx=Load()), attr='emit', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='dist', ctx=Load()), attr='install_requires', ctx=Store())], value=Name(id='val', ctx=Load()))], decorator_list=[]), FunctionDef(name='_optional_dependencies', args=arguments(posonlyargs=[], args=[arg(arg='dist', annotation=Constant(value='Distribution')), arg(arg='val', annotation=Name(id='dict', ctx=Load())), arg(arg='_root_dir')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='existing', ctx=Store())], value=BoolOp(op=Or(), values=[Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='dist', ctx=Load()), Constant(value='extras_require'), Constant(value=None)], keywords=[]), Dict(keys=[], values=[])])), Assign(targets=[Attribute(value=Name(id='dist', ctx=Load()), attr='extras_require', ctx=Store())], value=Dict(keys=[None, None], values=[Name(id='existing', ctx=Load()), Name(id='val', ctx=Load())]))], decorator_list=[]), FunctionDef(name='_unify_entry_points', args=arguments(posonlyargs=[], args=[arg(arg='project_table', annotation=Name(id='dict', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='project', ctx=Store())], value=Name(id='project_table', ctx=Load())), Assign(targets=[Name(id='entry_points', ctx=Store())], value=Call(func=Attribute(value=Name(id='project', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='entry-points'), Call(func=Attribute(value=Name(id='project', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='entry_points'), Dict(keys=[], values=[])], keywords=[])], keywords=[])), Assign(targets=[Name(id='renaming', ctx=Store())], value=Dict(keys=[Constant(value='scripts'), Constant(value='gui_scripts')], values=[Constant(value='console_scripts'), Constant(value='gui_scripts')])), For(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='project', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='norm_key', ctx=Store())], value=Call(func=Name(id='json_compatible_key', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='norm_key', ctx=Load()), ops=[In()], comparators=[Name(id='renaming', ctx=Load())]), Name(id='value', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='entry_points', ctx=Load()), slice=Subscript(value=Name(id='renaming', ctx=Load()), slice=Name(id='norm_key', ctx=Load()), ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Name(id='project', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), If(test=Name(id='entry_points', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='project', ctx=Load()), slice=Constant(value='entry-points'), ctx=Store())], value=DictComp(key=Name(id='name', ctx=Load()), value=ListComp(elt=JoinedStr(values=[FormattedValue(value=Name(id='k', ctx=Load()), conversion=-1), Constant(value=' = '), FormattedValue(value=Name(id='v', ctx=Load()), conversion=-1)]), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='group', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)]), generators=[comprehension(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='group', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='entry_points', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)]))], orelse=[])], decorator_list=[]), FunctionDef(name='_copy_command_options', args=arguments(posonlyargs=[], args=[arg(arg='pyproject', annotation=Name(id='dict', ctx=Load())), arg(arg='dist', annotation=Constant(value='Distribution')), arg(arg='filename', annotation=Name(id='_Path', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='tool_table', ctx=Store())], value=Call(func=Attribute(value=Name(id='pyproject', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='tool'), Dict(keys=[], values=[])], keywords=[])), Assign(targets=[Name(id='cmdclass', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='tool_table', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='setuptools'), Dict(keys=[], values=[])], keywords=[]), attr='get', ctx=Load()), args=[Constant(value='cmdclass'), Dict(keys=[], values=[])], keywords=[])), Assign(targets=[Name(id='valid_options', ctx=Store())], value=Call(func=Name(id='_valid_command_options', ctx=Load()), args=[Name(id='cmdclass', ctx=Load())], keywords=[])), Assign(targets=[Name(id='cmd_opts', ctx=Store())], value=Attribute(value=Name(id='dist', ctx=Load()), attr='command_options', ctx=Load())), For(target=Tuple(elts=[Name(id='cmd', ctx=Store()), Name(id='config', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='pyproject', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='tool'), Dict(keys=[], values=[])], keywords=[]), attr='get', ctx=Load()), args=[Constant(value='distutils'), Dict(keys=[], values=[])], keywords=[]), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='cmd', ctx=Store())], value=Call(func=Name(id='json_compatible_key', ctx=Load()), args=[Name(id='cmd', ctx=Load())], keywords=[])), Assign(targets=[Name(id='valid', ctx=Store())], value=Call(func=Attribute(value=Name(id='valid_options', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='cmd', ctx=Load()), Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='cmd_opts', ctx=Load()), attr='setdefault', ctx=Load()), args=[Name(id='cmd', ctx=Load()), Dict(keys=[], values=[])], keywords=[])), For(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='key', ctx=Store())], value=Call(func=Name(id='json_compatible_key', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Name(id='cmd_opts', ctx=Load()), slice=Name(id='cmd', ctx=Load()), ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Tuple(elts=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[]), Name(id='value', ctx=Load())], ctx=Load())), If(test=Compare(left=Name(id='key', ctx=Load()), ops=[NotIn()], comparators=[Name(id='valid', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='_logger', ctx=Load()), attr='warning', ctx=Load()), args=[JoinedStr(values=[Constant(value='Command option '), FormattedValue(value=Name(id='cmd', ctx=Load()), conversion=-1), Constant(value='.'), FormattedValue(value=Name(id='key', ctx=Load()), conversion=-1), Constant(value=' is not defined')])], keywords=[]))], orelse=[])], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='_valid_command_options', args=arguments(posonlyargs=[], args=[arg(arg='cmdclass', annotation=Name(id='Mapping', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='EMPTY', ctx=Load())]), body=[ImportFrom(module='_importlib', names=[alias(name='metadata')], level=2), ImportFrom(module='setuptools.dist', names=[alias(name='Distribution')], level=0), Assign(targets=[Name(id='valid_options', ctx=Store())], value=Dict(keys=[Constant(value='global')], values=[Call(func=Name(id='_normalise_cmd_options', ctx=Load()), args=[Attribute(value=Name(id='Distribution', ctx=Load()), attr='global_options', ctx=Load())], keywords=[])])), Assign(targets=[Name(id='unloaded_entry_points', ctx=Store())], value=Call(func=Attribute(value=Name(id='metadata', ctx=Load()), attr='entry_points', ctx=Load()), args=[], keywords=[keyword(arg='group', value=Constant(value='distutils.commands'))])), Assign(targets=[Name(id='loaded_entry_points', ctx=Store())], value=GeneratorExp(elt=Call(func=Name(id='_load_ep', ctx=Load()), args=[Name(id='ep', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='ep', ctx=Store()), iter=Name(id='unloaded_entry_points', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='entry_points', ctx=Store())], value=GeneratorExp(elt=Name(id='ep', ctx=Load()), generators=[comprehension(target=Name(id='ep', ctx=Store()), iter=Name(id='loaded_entry_points', ctx=Load()), ifs=[Name(id='ep', ctx=Load())], is_async=0)])), For(target=Tuple(elts=[Name(id='cmd', ctx=Store()), Name(id='cmd_class', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='chain', ctx=Load()), args=[Name(id='entry_points', ctx=Load()), Call(func=Attribute(value=Name(id='cmdclass', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='opts', ctx=Store())], value=Call(func=Attribute(value=Name(id='valid_options', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='cmd', ctx=Load()), Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='opts', ctx=Store())], value=BinOp(left=Name(id='opts', ctx=Load()), op=BitOr(), right=Call(func=Name(id='_normalise_cmd_options', ctx=Load()), args=[Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='cmd_class', ctx=Load()), Constant(value='user_options'), List(elts=[], ctx=Load())], keywords=[])], keywords=[]))), Assign(targets=[Subscript(value=Name(id='valid_options', ctx=Load()), slice=Name(id='cmd', ctx=Load()), ctx=Store())], value=Name(id='opts', ctx=Load()))], orelse=[]), Return(value=Name(id='valid_options', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Set', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='_load_ep', args=arguments(posonlyargs=[], args=[arg(arg='ep', annotation=Constant(value='metadata.EntryPoint'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Return(value=Tuple(elts=[Attribute(value=Name(id='ep', ctx=Load()), attr='name', ctx=Load()), Call(func=Attribute(value=Name(id='ep', ctx=Load()), attr='load', ctx=Load()), args=[], keywords=[])], ctx=Load()))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='ex', body=[Assign(targets=[Name(id='msg', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Attribute(value=Attribute(value=Name(id='ex', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), conversion=-1), Constant(value=' while trying to load entry-point '), FormattedValue(value=Attribute(value=Name(id='ep', ctx=Load()), attr='name', ctx=Load()), conversion=-1)])), Expr(value=Call(func=Attribute(value=Name(id='_logger', ctx=Load()), attr='warning', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='msg', ctx=Load()), conversion=-1), Constant(value=': '), FormattedValue(value=Name(id='ex', ctx=Load()), conversion=-1)])], keywords=[])), Return(value=Constant(value=None))])], orelse=[], finalbody=[])], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Type', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='_normalise_cmd_option_key', args=arguments(posonlyargs=[], args=[arg(arg='name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Call(func=Name(id='json_compatible_key', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]), attr='strip', ctx=Load()), args=[Constant(value='_=')], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='_normalise_cmd_options', args=arguments(posonlyargs=[], args=[arg(arg='desc', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=SetComp(elt=Call(func=Name(id='_normalise_cmd_option_key', ctx=Load()), args=[Subscript(value=Name(id='fancy_option', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='fancy_option', ctx=Store()), iter=Name(id='desc', ctx=Load()), ifs=[], is_async=0)]))], decorator_list=[], returns=Subscript(value=Name(id='Set', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='_get_previous_entrypoints', args=arguments(posonlyargs=[], args=[arg(arg='dist', annotation=Constant(value='Distribution'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ignore', ctx=Store())], value=Tuple(elts=[Constant(value='console_scripts'), Constant(value='gui_scripts')], ctx=Load())), Assign(targets=[Name(id='value', ctx=Store())], value=BoolOp(op=Or(), values=[Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='dist', ctx=Load()), Constant(value='entry_points'), Constant(value=None)], keywords=[]), Dict(keys=[], values=[])])), Return(value=DictComp(key=Name(id='k', ctx=Load()), value=Name(id='v', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[Compare(left=Name(id='k', ctx=Load()), ops=[NotIn()], comparators=[Name(id='ignore', ctx=Load())])], is_async=0)]))], decorator_list=[], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='list', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='_get_previous_scripts', args=arguments(posonlyargs=[], args=[arg(arg='dist', annotation=Constant(value='Distribution'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=BoolOp(op=Or(), values=[Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='dist', ctx=Load()), Constant(value='entry_points'), Constant(value=None)], keywords=[]), Dict(keys=[], values=[])])), Return(value=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='console_scripts')], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='list', ctx=Load()), ctx=Load())), FunctionDef(name='_get_previous_gui_scripts', args=arguments(posonlyargs=[], args=[arg(arg='dist', annotation=Constant(value='Distribution'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=BoolOp(op=Or(), values=[Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='dist', ctx=Load()), Constant(value='entry_points'), Constant(value=None)], keywords=[]), Dict(keys=[], values=[])])), Return(value=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='gui_scripts')], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='list', ctx=Load()), ctx=Load())), FunctionDef(name='_attrgetter', args=arguments(posonlyargs=[], args=[arg(arg='attr')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Similar to ``operator.attrgetter`` but returns None if ``attr`` is not found\n    >>> from types import SimpleNamespace\n    >>> obj = SimpleNamespace(a=42, b=SimpleNamespace(c=13))\n    >>> _attrgetter("a")(obj)\n    42\n    >>> _attrgetter("b.c")(obj)\n    13\n    >>> _attrgetter("d")(obj) is None\n    True\n    ')), Return(value=Call(func=Name(id='partial', ctx=Load()), args=[Name(id='reduce', ctx=Load()), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='acc'), arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='acc', ctx=Load()), Name(id='x', ctx=Load()), Constant(value=None)], keywords=[])), Call(func=Attribute(value=Name(id='attr', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='_some_attrgetter', args=arguments(posonlyargs=[], args=[], vararg=arg(arg='items'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Return the first "truth-y" attribute or None\n    >>> from types import SimpleNamespace\n    >>> obj = SimpleNamespace(a=42, b=SimpleNamespace(c=13))\n    >>> _some_attrgetter("d", "a", "b.c")(obj)\n    42\n    >>> _some_attrgetter("d", "e", "b.c", "a")(obj)\n    13\n    >>> _some_attrgetter("d", "e", "f")(obj) is None\n    True\n    ')), FunctionDef(name='_acessor', args=arguments(posonlyargs=[], args=[arg(arg='obj')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='values', ctx=Store())], value=GeneratorExp(elt=Call(func=Call(func=Name(id='_attrgetter', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), args=[Name(id='obj', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Name(id='items', ctx=Load()), ifs=[], is_async=0)])), Return(value=Call(func=Name(id='next', ctx=Load()), args=[GeneratorExp(elt=Name(id='i', ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Name(id='values', ctx=Load()), ifs=[Compare(left=Name(id='i', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])], is_async=0)]), Constant(value=None)], keywords=[]))], decorator_list=[]), Return(value=Name(id='_acessor', ctx=Load()))], decorator_list=[]), AnnAssign(target=Name(id='PYPROJECT_CORRESPONDENCE', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='_Correspondence', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[Constant(value='readme'), Constant(value='license'), Constant(value='authors'), Constant(value='maintainers'), Constant(value='urls'), Constant(value='dependencies'), Constant(value='optional_dependencies'), Constant(value='requires_python')], values=[Name(id='_long_description', ctx=Load()), Name(id='_license', ctx=Load()), Call(func=Name(id='partial', ctx=Load()), args=[Name(id='_people', ctx=Load())], keywords=[keyword(arg='kind', value=Constant(value='author'))]), Call(func=Name(id='partial', ctx=Load()), args=[Name(id='_people', ctx=Load())], keywords=[keyword(arg='kind', value=Constant(value='maintainer'))]), Name(id='_project_urls', ctx=Load()), Name(id='_dependencies', ctx=Load()), Name(id='_optional_dependencies', ctx=Load()), Name(id='_python_requires', ctx=Load())]), simple=1), Assign(targets=[Name(id='TOOL_TABLE_RENAMES', ctx=Store())], value=Dict(keys=[Constant(value='script_files')], values=[Constant(value='scripts')])), Assign(targets=[Name(id='TOOL_TABLE_DEPRECATIONS', ctx=Store())], value=Dict(keys=[Constant(value='namespace_packages')], values=[Tuple(elts=[Constant(value='consider using implicit namespaces instead (PEP 420).'), Dict(keys=[Constant(value='due_date')], values=[Tuple(elts=[Constant(value=2023), Constant(value=10), Constant(value=30)], ctx=Load())])], ctx=Load())])), Assign(targets=[Name(id='SETUPTOOLS_PATCHES', ctx=Store())], value=Set(elts=[Constant(value='long_description_content_type'), Constant(value='project_urls'), Constant(value='provides_extras'), Constant(value='license_file'), Constant(value='license_files')])), Assign(targets=[Name(id='_PREVIOUSLY_DEFINED', ctx=Store())], value=Dict(keys=[Constant(value='name'), Constant(value='version'), Constant(value='description'), Constant(value='readme'), Constant(value='requires-python'), Constant(value='license'), Constant(value='authors'), Constant(value='maintainers'), Constant(value='keywords'), Constant(value='classifiers'), Constant(value='urls'), Constant(value='entry-points'), Constant(value='scripts'), Constant(value='gui-scripts'), Constant(value='dependencies'), Constant(value='optional-dependencies')], values=[Call(func=Name(id='_attrgetter', ctx=Load()), args=[Constant(value='metadata.name')], keywords=[]), Call(func=Name(id='_attrgetter', ctx=Load()), args=[Constant(value='metadata.version')], keywords=[]), Call(func=Name(id='_attrgetter', ctx=Load()), args=[Constant(value='metadata.description')], keywords=[]), Call(func=Name(id='_attrgetter', ctx=Load()), args=[Constant(value='metadata.long_description')], keywords=[]), Call(func=Name(id='_some_attrgetter', ctx=Load()), args=[Constant(value='python_requires'), Constant(value='metadata.python_requires')], keywords=[]), Call(func=Name(id='_attrgetter', ctx=Load()), args=[Constant(value='metadata.license')], keywords=[]), Call(func=Name(id='_some_attrgetter', ctx=Load()), args=[Constant(value='metadata.author'), Constant(value='metadata.author_email')], keywords=[]), Call(func=Name(id='_some_attrgetter', ctx=Load()), args=[Constant(value='metadata.maintainer'), Constant(value='metadata.maintainer_email')], keywords=[]), Call(func=Name(id='_attrgetter', ctx=Load()), args=[Constant(value='metadata.keywords')], keywords=[]), Call(func=Name(id='_attrgetter', ctx=Load()), args=[Constant(value='metadata.classifiers')], keywords=[]), Call(func=Name(id='_attrgetter', ctx=Load()), args=[Constant(value='metadata.project_urls')], keywords=[]), Name(id='_get_previous_entrypoints', ctx=Load()), Name(id='_get_previous_scripts', ctx=Load()), Name(id='_get_previous_gui_scripts', ctx=Load()), Call(func=Name(id='_attrgetter', ctx=Load()), args=[Constant(value='install_requires')], keywords=[]), Call(func=Name(id='_attrgetter', ctx=Load()), args=[Constant(value='extras_require')], keywords=[])])), ClassDef(name='_WouldIgnoreField', bases=[Name(id='SetuptoolsDeprecationWarning', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='_SUMMARY', ctx=Store())], value=Constant(value='`{field}` defined outside of `pyproject.toml` would be ignored.')), Assign(targets=[Name(id='_DETAILS', ctx=Store())], value=Constant(value='\n    ##########################################################################\n    # configuration would be ignored/result in error due to `pyproject.toml` #\n    ##########################################################################\n\n    The following seems to be defined outside of `pyproject.toml`:\n\n    `{field} = {value!r}`\n\n    According to the spec (see the link below), however, setuptools CANNOT\n    consider this value unless `{field}` is listed as `dynamic`.\n\n    https://packaging.python.org/en/latest/specifications/declaring-project-metadata/\n\n    For the time being, `setuptools` will still consider the given value (as a\n    **transitional** measure), but please note that future releases of setuptools will\n    follow strictly the standard.\n\n    To prevent this warning, you can list `{field}` under `dynamic` or alternatively\n    remove the `[project]` table from your file and rely entirely on other means of\n    configuration.\n    ')), Assign(targets=[Name(id='_DUE_DATE', ctx=Store())], value=Tuple(elts=[Constant(value=2023), Constant(value=10), Constant(value=30)], ctx=Load()))], decorator_list=[])], type_ignores=[])