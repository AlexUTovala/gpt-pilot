Module(body=[Import(names=[alias(name='io')]), Import(names=[alias(name='json')]), Import(names=[alias(name='logging')]), Import(names=[alias(name='os')]), Import(names=[alias(name='re')]), ImportFrom(module='contextlib', names=[alias(name='contextmanager')], level=0), ImportFrom(module='textwrap', names=[alias(name='indent'), alias(name='wrap')], level=0), ImportFrom(module='typing', names=[alias(name='Any'), alias(name='Dict'), alias(name='Iterator'), alias(name='List'), alias(name='Optional'), alias(name='Sequence'), alias(name='Union'), alias(name='cast')], level=0), ImportFrom(module='fastjsonschema_exceptions', names=[alias(name='JsonSchemaValueException')], level=1), Assign(targets=[Name(id='_logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), Assign(targets=[Name(id='_MESSAGE_REPLACEMENTS', ctx=Store())], value=Dict(keys=[Constant(value='must be named by propertyName definition'), Constant(value='one of contains definition'), Constant(value=' same as const definition:'), Constant(value='only specified items')], values=[Constant(value='keys must be named by'), Constant(value='at least one item that matches'), Constant(value=''), Constant(value='only items matching the definition')])), Assign(targets=[Name(id='_SKIP_DETAILS', ctx=Store())], value=Tuple(elts=[Constant(value='must not be empty'), Constant(value='is always invalid'), Constant(value='must not be there')], ctx=Load())), Assign(targets=[Name(id='_NEED_DETAILS', ctx=Store())], value=Set(elts=[Constant(value='anyOf'), Constant(value='oneOf'), Constant(value='anyOf'), Constant(value='contains'), Constant(value='propertyNames'), Constant(value='not'), Constant(value='items')])), Assign(targets=[Name(id='_CAMEL_CASE_SPLITTER', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='\\W+|([A-Z][^A-Z\\W]*)')], keywords=[])), Assign(targets=[Name(id='_IDENTIFIER', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='^[\\w_]+$'), Attribute(value=Name(id='re', ctx=Load()), attr='I', ctx=Load())], keywords=[])), Assign(targets=[Name(id='_TOML_JARGON', ctx=Store())], value=Dict(keys=[Constant(value='object'), Constant(value='property'), Constant(value='properties'), Constant(value='property names')], values=[Constant(value='table'), Constant(value='key'), Constant(value='keys'), Constant(value='keys')])), ClassDef(name='ValidationError', bases=[Name(id='JsonSchemaValueException', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Report violations of a given JSON schema.\n\n    This class extends :exc:`~fastjsonschema.JsonSchemaValueException`\n    by adding the following properties:\n\n    - ``summary``: an improved version of the ``JsonSchemaValueException`` error message\n      with only the necessary information)\n\n    - ``details``: more contextual information about the error like the failing schema\n      itself and the value that violates the schema.\n\n    Depending on the level of the verbosity of the ``logging`` configuration\n    the exception message will be only ``summary`` (default) or a combination of\n    ``summary`` and ``details`` (when the logging level is set to :obj:`logging.DEBUG`).\n    ')), Assign(targets=[Name(id='summary', ctx=Store())], value=Constant(value='')), Assign(targets=[Name(id='details', ctx=Store())], value=Constant(value='')), Assign(targets=[Name(id='_original_message', ctx=Store())], value=Constant(value='')), FunctionDef(name='_from_jsonschema', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='ex', annotation=Name(id='JsonSchemaValueException', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='formatter', ctx=Store())], value=Call(func=Name(id='_ErrorFormatting', ctx=Load()), args=[Name(id='ex', ctx=Load())], keywords=[])), Assign(targets=[Name(id='obj', ctx=Store())], value=Call(func=Name(id='cls', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='formatter', ctx=Load())], keywords=[]), Attribute(value=Name(id='ex', ctx=Load()), attr='value', ctx=Load()), Attribute(value=Name(id='formatter', ctx=Load()), attr='name', ctx=Load()), Attribute(value=Name(id='ex', ctx=Load()), attr='definition', ctx=Load()), Attribute(value=Name(id='ex', ctx=Load()), attr='rule', ctx=Load())], keywords=[])), Assign(targets=[Name(id='debug_code', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getenv', ctx=Load()), args=[Constant(value='JSONSCHEMA_DEBUG_CODE_GENERATION'), Constant(value='false')], keywords=[]), attr='lower', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='debug_code', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='false')]), body=[Assign(targets=[Tuple(elts=[Attribute(value=Name(id='obj', ctx=Load()), attr='__cause__', ctx=Store()), Attribute(value=Name(id='obj', ctx=Load()), attr='__traceback__', ctx=Store())], ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='ex', ctx=Load()), attr='__cause__', ctx=Load()), Attribute(value=Name(id='ex', ctx=Load()), attr='__traceback__', ctx=Load())], ctx=Load()))], orelse=[]), Assign(targets=[Attribute(value=Name(id='obj', ctx=Load()), attr='_original_message', ctx=Store())], value=Attribute(value=Name(id='ex', ctx=Load()), attr='message', ctx=Load())), Assign(targets=[Attribute(value=Name(id='obj', ctx=Load()), attr='summary', ctx=Store())], value=Attribute(value=Name(id='formatter', ctx=Load()), attr='summary', ctx=Load())), Assign(targets=[Attribute(value=Name(id='obj', ctx=Load()), attr='details', ctx=Store())], value=Attribute(value=Name(id='formatter', ctx=Load()), attr='details', ctx=Load())), Return(value=Name(id='obj', ctx=Load()))], decorator_list=[Name(id='classmethod', ctx=Load())])], decorator_list=[]), FunctionDef(name='detailed_errors', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Expr(value=Yield())], handlers=[ExceptHandler(type=Name(id='JsonSchemaValueException', ctx=Load()), name='ex', body=[Raise(exc=Call(func=Attribute(value=Name(id='ValidationError', ctx=Load()), attr='_from_jsonschema', ctx=Load()), args=[Name(id='ex', ctx=Load())], keywords=[]), cause=Constant(value=None))])], orelse=[], finalbody=[])], decorator_list=[Name(id='contextmanager', ctx=Load())]), ClassDef(name='_ErrorFormatting', bases=[], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ex', annotation=Name(id='JsonSchemaValueException', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='ex', ctx=Store())], value=Name(id='ex', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Store())], value=JoinedStr(values=[Constant(value='`'), FormattedValue(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_simplify_name', ctx=Load()), args=[Attribute(value=Name(id='ex', ctx=Load()), attr='name', ctx=Load())], keywords=[]), conversion=-1), Constant(value='`')])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_original_message', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='ex', ctx=Load()), attr='message', ctx=Load()), attr='replace', ctx=Load()), args=[Attribute(value=Name(id='ex', ctx=Load()), attr='name', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_summary', ctx=Store())], value=Constant(value='')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_details', ctx=Store())], value=Constant(value=''))], decorator_list=[]), FunctionDef(name='__str__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Attribute(value=Name(id='_logger', ctx=Load()), attr='getEffectiveLevel', ctx=Load()), args=[], keywords=[]), ops=[LtE()], comparators=[Attribute(value=Name(id='logging', ctx=Load()), attr='DEBUG', ctx=Load())]), Attribute(value=Name(id='self', ctx=Load()), attr='details', ctx=Load())]), body=[Return(value=JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='summary', ctx=Load()), conversion=-1), Constant(value='\n\n'), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='details', ctx=Load()), conversion=-1)]))], orelse=[]), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='summary', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='summary', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='_summary', ctx=Load())), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_summary', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_expand_summary', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_summary', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='details', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='_details', ctx=Load())), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_details', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_expand_details', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_details', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='_simplify_name', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Constant(value='data.')], keywords=[])), Return(value=IfExp(test=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='data.')], keywords=[]), body=Subscript(value=Name(id='name', ctx=Load()), slice=Slice(lower=Name(id='x', ctx=Load())), ctx=Load()), orelse=Name(id='name', ctx=Load())))], decorator_list=[]), FunctionDef(name='_expand_summary', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_original_message', ctx=Load())), For(target=Tuple(elts=[Name(id='bad', ctx=Store()), Name(id='repl', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='_MESSAGE_REPLACEMENTS', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Call(func=Attribute(value=Name(id='msg', ctx=Load()), attr='replace', ctx=Load()), args=[Name(id='bad', ctx=Load()), Name(id='repl', ctx=Load())], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=Compare(left=Name(id='substring', ctx=Load()), ops=[In()], comparators=[Name(id='msg', ctx=Load())]), generators=[comprehension(target=Name(id='substring', ctx=Store()), iter=Name(id='_SKIP_DETAILS', ctx=Load()), ifs=[], is_async=0)])], keywords=[]), body=[Return(value=Name(id='msg', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='schema', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='ex', ctx=Load()), attr='rule_definition', ctx=Load())), If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='ex', ctx=Load()), attr='rule', ctx=Load()), ops=[In()], comparators=[Name(id='_NEED_DETAILS', ctx=Load())]), Name(id='schema', ctx=Load())]), body=[Assign(targets=[Name(id='summary', ctx=Store())], value=Call(func=Name(id='_SummaryWriter', ctx=Load()), args=[Name(id='_TOML_JARGON', ctx=Load())], keywords=[])), Return(value=JoinedStr(values=[FormattedValue(value=Name(id='msg', ctx=Load()), conversion=-1), Constant(value=':\n\n'), FormattedValue(value=Call(func=Name(id='indent', ctx=Load()), args=[Call(func=Name(id='summary', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[]), Constant(value='    ')], keywords=[]), conversion=-1)]))], orelse=[]), Return(value=Name(id='msg', ctx=Load()))], decorator_list=[]), FunctionDef(name='_expand_details', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='optional', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='desc_lines', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='ex', ctx=Load()), attr='definition', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='$$description'), List(elts=[], ctx=Load())], keywords=[])), Assign(targets=[Name(id='desc', ctx=Store())], value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='ex', ctx=Load()), attr='definition', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='description'), Constant(value=None)], keywords=[]), Call(func=Attribute(value=Constant(value=' '), attr='join', ctx=Load()), args=[Name(id='desc_lines', ctx=Load())], keywords=[])])), If(test=Name(id='desc', ctx=Load()), body=[Assign(targets=[Name(id='description', ctx=Store())], value=Call(func=Attribute(value=Constant(value='\n'), attr='join', ctx=Load()), args=[Call(func=Name(id='wrap', ctx=Load()), args=[Name(id='desc', ctx=Load())], keywords=[keyword(arg='width', value=Constant(value=80)), keyword(arg='initial_indent', value=Constant(value='    ')), keyword(arg='subsequent_indent', value=Constant(value='    ')), keyword(arg='break_long_words', value=Constant(value=False))])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='optional', ctx=Load()), attr='append', ctx=Load()), args=[JoinedStr(values=[Constant(value='DESCRIPTION:\n'), FormattedValue(value=Name(id='description', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='schema', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dumps', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='ex', ctx=Load()), attr='definition', ctx=Load())], keywords=[keyword(arg='indent', value=Constant(value=4))])), Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dumps', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='ex', ctx=Load()), attr='value', ctx=Load())], keywords=[keyword(arg='indent', value=Constant(value=4))])), Assign(targets=[Name(id='defaults', ctx=Store())], value=List(elts=[JoinedStr(values=[Constant(value='GIVEN VALUE:\n'), FormattedValue(value=Call(func=Name(id='indent', ctx=Load()), args=[Name(id='value', ctx=Load()), Constant(value='    ')], keywords=[]), conversion=-1)]), JoinedStr(values=[Constant(value='OFFENDING RULE: '), FormattedValue(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='ex', ctx=Load()), attr='rule', ctx=Load()), conversion=114)]), JoinedStr(values=[Constant(value='DEFINITION:\n'), FormattedValue(value=Call(func=Name(id='indent', ctx=Load()), args=[Name(id='schema', ctx=Load()), Constant(value='    ')], keywords=[]), conversion=-1)])], ctx=Load())), Return(value=Call(func=Attribute(value=Constant(value='\n\n'), attr='join', ctx=Load()), args=[BinOp(left=Name(id='optional', ctx=Load()), op=Add(), right=Name(id='defaults', ctx=Load()))], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[]), ClassDef(name='_SummaryWriter', bases=[], keywords=[], body=[Assign(targets=[Name(id='_IGNORE', ctx=Store())], value=Set(elts=[Constant(value='description'), Constant(value='default'), Constant(value='title'), Constant(value='examples')])), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='jargon', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='jargon', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), value=BoolOp(op=Or(), values=[Name(id='jargon', ctx=Load()), Dict(keys=[], values=[])]), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_terms', ctx=Store())], value=Dict(keys=[Constant(value='anyOf'), Constant(value='oneOf'), Constant(value='allOf'), Constant(value='not'), Constant(value='prefixItems'), Constant(value='items'), Constant(value='contains'), Constant(value='propertyNames'), Constant(value='patternProperties'), Constant(value='const'), Constant(value='enum')], values=[Constant(value='at least one of the following'), Constant(value='exactly one of the following'), Constant(value='all of the following'), Constant(value='(*NOT* the following)'), JoinedStr(values=[FormattedValue(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_jargon', ctx=Load()), args=[Constant(value='items')], keywords=[]), conversion=-1), Constant(value=' (in order)')]), Constant(value='items'), Constant(value='contains at least one of'), JoinedStr(values=[Constant(value='non-predefined acceptable '), FormattedValue(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_jargon', ctx=Load()), args=[Constant(value='property names')], keywords=[]), conversion=-1)]), JoinedStr(values=[FormattedValue(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_jargon', ctx=Load()), args=[Constant(value='properties')], keywords=[]), conversion=-1), Constant(value=' named via pattern')]), Constant(value='predefined value'), Constant(value='one of')])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_guess_inline_defs', ctx=Store())], value=List(elts=[Constant(value='enum'), Constant(value='const'), Constant(value='maxLength'), Constant(value='minLength'), Constant(value='pattern'), Constant(value='format'), Constant(value='minimum'), Constant(value='maximum'), Constant(value='exclusiveMinimum'), Constant(value='exclusiveMaximum'), Constant(value='multipleOf')], ctx=Load()))], decorator_list=[]), FunctionDef(name='_jargon', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='term', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='term', ctx=Load()), Name(id='list', ctx=Load())], keywords=[]), body=[Return(value=ListComp(elt=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='jargon', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='t', ctx=Load()), Name(id='t', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='t', ctx=Store()), iter=Name(id='term', ctx=Load()), ifs=[], is_async=0)]))], orelse=[]), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='jargon', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='term', ctx=Load()), Name(id='term', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='__call__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='schema', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='dict', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='dict', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='prefix', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[arg(arg='_path', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kw_defaults=[Tuple(elts=[], ctx=Load())], defaults=[Constant(value='')]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='schema', ctx=Load()), Name(id='list', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_handle_list', ctx=Load()), args=[Name(id='schema', ctx=Load()), Name(id='prefix', ctx=Load()), Name(id='_path', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='filtered', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_filter_unecessary', ctx=Load()), args=[Name(id='schema', ctx=Load()), Name(id='_path', ctx=Load())], keywords=[])), Assign(targets=[Name(id='simple', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_handle_simple_dict', ctx=Load()), args=[Name(id='filtered', ctx=Load()), Name(id='_path', ctx=Load())], keywords=[])), If(test=Name(id='simple', ctx=Load()), body=[Return(value=JoinedStr(values=[FormattedValue(value=Name(id='prefix', ctx=Load()), conversion=-1), FormattedValue(value=Name(id='simple', ctx=Load()), conversion=-1)]))], orelse=[]), Assign(targets=[Name(id='child_prefix', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_child_prefix', ctx=Load()), args=[Name(id='prefix', ctx=Load()), Constant(value='  ')], keywords=[])), Assign(targets=[Name(id='item_prefix', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_child_prefix', ctx=Load()), args=[Name(id='prefix', ctx=Load()), Constant(value='- ')], keywords=[])), Assign(targets=[Name(id='indent', ctx=Store())], value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='prefix', ctx=Load())], keywords=[]), op=Mult(), right=Constant(value=' '))), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='StringIO', ctx=Load()), args=[], keywords=[]), optional_vars=Name(id='buffer', ctx=Store()))], body=[For(target=Tuple(elts=[Name(id='i', ctx=Store()), Tuple(elts=[Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Call(func=Attribute(value=Name(id='filtered', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='child_path', ctx=Store())], value=List(elts=[Starred(value=Name(id='_path', ctx=Load()), ctx=Load()), Name(id='key', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='line_prefix', ctx=Store())], value=IfExp(test=Compare(left=Name(id='i', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=Name(id='prefix', ctx=Load()), orelse=Name(id='indent', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='buffer', ctx=Load()), attr='write', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='line_prefix', ctx=Load()), conversion=-1), FormattedValue(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_label', ctx=Load()), args=[Name(id='child_path', ctx=Load())], keywords=[]), conversion=-1), Constant(value=':')])], keywords=[])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='dict', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='filtered', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_filter_unecessary', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='child_path', ctx=Load())], keywords=[])), Assign(targets=[Name(id='simple', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_handle_simple_dict', ctx=Load()), args=[Name(id='filtered', ctx=Load()), Name(id='child_path', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='buffer', ctx=Load()), attr='write', ctx=Load()), args=[IfExp(test=Name(id='simple', ctx=Load()), body=JoinedStr(values=[Constant(value=' '), FormattedValue(value=Name(id='simple', ctx=Load()), conversion=-1)]), orelse=JoinedStr(values=[Constant(value='\n'), FormattedValue(value=Call(func=Name(id='self', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='child_prefix', ctx=Load())], keywords=[keyword(arg='_path', value=Name(id='child_path', ctx=Load()))]), conversion=-1)]))], keywords=[]))], orelse=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='list', ctx=Load())], keywords=[]), BoolOp(op=Or(), values=[Compare(left=Name(id='key', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='type')]), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_is_property', ctx=Load()), args=[Name(id='child_path', ctx=Load())], keywords=[])])]), body=[Assign(targets=[Name(id='children', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_handle_list', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='item_prefix', ctx=Load()), Name(id='child_path', ctx=Load())], keywords=[])), Assign(targets=[Name(id='sep', ctx=Store())], value=IfExp(test=Call(func=Attribute(value=Name(id='children', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='[')], keywords=[]), body=Constant(value=' '), orelse=Constant(value='\n'))), Expr(value=Call(func=Attribute(value=Name(id='buffer', ctx=Load()), attr='write', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='sep', ctx=Load()), conversion=-1), FormattedValue(value=Name(id='children', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='buffer', ctx=Load()), attr='write', ctx=Load()), args=[JoinedStr(values=[Constant(value=' '), FormattedValue(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_value', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='child_path', ctx=Load())], keywords=[]), conversion=-1), Constant(value='\n')])], keywords=[]))])])], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='buffer', ctx=Load()), attr='getvalue', ctx=Load()), args=[], keywords=[]))])], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='_is_unecessary', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='path', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_is_property', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), UnaryOp(op=Not(), operand=Name(id='path', ctx=Load()))]), body=[Return(value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='key', ctx=Store())], value=Subscript(value=Name(id='path', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())), Return(value=BoolOp(op=Or(), values=[Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='key', ctx=Load()), attr='startswith', ctx=Load()), args=[Name(id='k', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='k', ctx=Store()), iter=Constant(value='$_'), ifs=[], is_async=0)])], keywords=[]), Compare(left=Name(id='key', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_IGNORE', ctx=Load())])]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='_filter_unecessary', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='schema', annotation=Name(id='dict', ctx=Load())), arg(arg='path', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=DictComp(key=Name(id='key', ctx=Load()), value=Name(id='value', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='schema', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_is_unecessary', ctx=Load()), args=[List(elts=[Starred(value=Name(id='path', ctx=Load()), ctx=Load()), Name(id='key', ctx=Load())], ctx=Load())], keywords=[]))], is_async=0)]))], decorator_list=[]), FunctionDef(name='_handle_simple_dict', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value', annotation=Name(id='dict', ctx=Load())), arg(arg='path', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='inline', ctx=Store())], value=Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=Compare(left=Name(id='p', ctx=Load()), ops=[In()], comparators=[Name(id='value', ctx=Load())]), generators=[comprehension(target=Name(id='p', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_guess_inline_defs', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Name(id='simple', ctx=Store())], value=UnaryOp(op=Not(), operand=Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='v', ctx=Load()), Tuple(elts=[Name(id='list', ctx=Load()), Name(id='dict', ctx=Load())], ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='v', ctx=Store()), iter=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[]))), If(test=BoolOp(op=Or(), values=[Name(id='inline', ctx=Load()), Name(id='simple', ctx=Load())]), body=[Return(value=JoinedStr(values=[Constant(value='{'), FormattedValue(value=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_inline_attrs', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='path', ctx=Load())], keywords=[])], keywords=[]), conversion=-1), Constant(value='}\n')]))], orelse=[]), Return(value=Constant(value=None))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='_handle_list', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='schemas', annotation=Name(id='list', ctx=Load())), arg(arg='prefix', annotation=Name(id='str', ctx=Load())), arg(arg='path', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=''), Tuple(elts=[], ctx=Load())]), body=[If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_is_unecessary', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), body=[Return(value=Constant(value=''))], orelse=[]), Assign(targets=[Name(id='repr_', ctx=Store())], value=Call(func=Name(id='repr', ctx=Load()), args=[Name(id='schemas', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Call(func=Name(id='all', ctx=Load()), args=[GeneratorExp(elt=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='e', ctx=Load()), Tuple(elts=[Name(id='dict', ctx=Load()), Name(id='list', ctx=Load())], ctx=Load())], keywords=[])), generators=[comprehension(target=Name(id='e', ctx=Store()), iter=Name(id='schemas', ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='repr_', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Constant(value=60)])]), body=[Return(value=JoinedStr(values=[FormattedValue(value=Name(id='repr_', ctx=Load()), conversion=-1), Constant(value='\n')]))], orelse=[]), Assign(targets=[Name(id='item_prefix', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_child_prefix', ctx=Load()), args=[Name(id='prefix', ctx=Load()), Constant(value='- ')], keywords=[])), Return(value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='self', ctx=Load()), args=[Name(id='v', ctx=Load()), Name(id='item_prefix', ctx=Load())], keywords=[keyword(arg='_path', value=List(elts=[Starred(value=Name(id='path', ctx=Load()), ctx=Load()), JoinedStr(values=[Constant(value='['), FormattedValue(value=Name(id='i', ctx=Load()), conversion=-1), Constant(value=']')])], ctx=Load()))]), generators=[comprehension(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='schemas', ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='_is_property', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='path', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check if the given path can correspond to an arbitrarily named property')), Assign(targets=[Name(id='counter', ctx=Store())], value=Constant(value=0)), For(target=Name(id='key', ctx=Store()), iter=Subscript(value=Name(id='path', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Constant(value=2)), step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), body=[If(test=Compare(left=Name(id='key', ctx=Load()), ops=[NotIn()], comparators=[Set(elts=[Constant(value='properties'), Constant(value='patternProperties')])]), body=[Break()], orelse=[]), AugAssign(target=Name(id='counter', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Compare(left=BinOp(left=Name(id='counter', ctx=Load()), op=Mod(), right=Constant(value=2)), ops=[Eq()], comparators=[Constant(value=1)]))], decorator_list=[]), FunctionDef(name='_label', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='path', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Starred(value=Name(id='parents', ctx=Store()), ctx=Store()), Name(id='key', ctx=Store())], ctx=Store())], value=Name(id='path', ctx=Load())), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_is_property', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='norm_key', ctx=Store())], value=Call(func=Name(id='_separate_terms', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[])), Return(value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_terms', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[]), Call(func=Attribute(value=Constant(value=' '), attr='join', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_jargon', ctx=Load()), args=[Name(id='norm_key', ctx=Load())], keywords=[])], keywords=[])]))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='parents', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), ops=[Eq()], comparators=[Constant(value='patternProperties')]), body=[Return(value=JoinedStr(values=[Constant(value='(regex '), FormattedValue(value=Name(id='key', ctx=Load()), conversion=114), Constant(value=')')]))], orelse=[]), Return(value=Call(func=Name(id='repr', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='_value', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value', annotation=Name(id='Any', ctx=Load())), arg(arg='path', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Name(id='path', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), ops=[Eq()], comparators=[Constant(value='type')]), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_is_property', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))]), body=[Assign(targets=[Name(id='type_', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_jargon', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])), Return(value=IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='list', ctx=Load())], keywords=[]), body=JoinedStr(values=[Constant(value='['), FormattedValue(value=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Name(id='type_', ctx=Load())], keywords=[]), conversion=-1), Constant(value=']')]), orelse=Call(func=Name(id='cast', ctx=Load()), args=[Name(id='str', ctx=Load()), Name(id='type_', ctx=Load())], keywords=[])))], orelse=[]), Return(value=Call(func=Name(id='repr', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='_inline_attrs', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='schema', annotation=Name(id='dict', ctx=Load())), arg(arg='path', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='schema', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='child_path', ctx=Store())], value=List(elts=[Starred(value=Name(id='path', ctx=Load()), ctx=Load()), Name(id='key', ctx=Load())], ctx=Load())), Expr(value=Yield(value=JoinedStr(values=[FormattedValue(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_label', ctx=Load()), args=[Name(id='child_path', ctx=Load())], keywords=[]), conversion=-1), Constant(value=': '), FormattedValue(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_value', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='child_path', ctx=Load())], keywords=[]), conversion=-1)])))], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='_child_prefix', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='parent_prefix', annotation=Name(id='str', ctx=Load())), arg(arg='child_prefix', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='parent_prefix', ctx=Load())], keywords=[]), op=Mult(), right=Constant(value=' ')), op=Add(), right=Name(id='child_prefix', ctx=Load())))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[]), FunctionDef(name='_separate_terms', args=arguments(posonlyargs=[], args=[arg(arg='word', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    >>> _separate_terms("FooBar-foo")\n    [\'foo\', \'bar\', \'foo\']\n    ')), Return(value=ListComp(elt=Call(func=Attribute(value=Name(id='w', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), generators=[comprehension(target=Name(id='w', ctx=Store()), iter=Call(func=Attribute(value=Name(id='_CAMEL_CASE_SPLITTER', ctx=Load()), attr='split', ctx=Load()), args=[Name(id='word', ctx=Load())], keywords=[]), ifs=[Name(id='w', ctx=Load())], is_async=0)]))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], type_ignores=[])