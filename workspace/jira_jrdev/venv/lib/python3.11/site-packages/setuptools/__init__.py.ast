Module(body=[Expr(value=Constant(value="Extensions to the 'distutils' for large or complex distributions")), Import(names=[alias(name='functools')]), Import(names=[alias(name='os')]), Import(names=[alias(name='re')]), Import(names=[alias(name='_distutils_hack.override')]), Import(names=[alias(name='distutils.core')]), ImportFrom(module='distutils.errors', names=[alias(name='DistutilsOptionError')], level=0), ImportFrom(module='distutils.util', names=[alias(name='convert_path', asname='_convert_path')], level=0), ImportFrom(names=[alias(name='logging'), alias(name='monkey')], level=1), ImportFrom(names=[alias(name='version', asname='_version_module')], level=1), ImportFrom(module='depends', names=[alias(name='Require')], level=1), ImportFrom(module='discovery', names=[alias(name='PackageFinder'), alias(name='PEP420PackageFinder')], level=1), ImportFrom(module='dist', names=[alias(name='Distribution')], level=1), ImportFrom(module='extension', names=[alias(name='Extension')], level=1), ImportFrom(module='warnings', names=[alias(name='SetuptoolsDeprecationWarning')], level=1), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='setup'), Constant(value='Distribution'), Constant(value='Command'), Constant(value='Extension'), Constant(value='Require'), Constant(value='SetuptoolsDeprecationWarning'), Constant(value='find_packages'), Constant(value='find_namespace_packages')], ctx=Load())), Assign(targets=[Name(id='__version__', ctx=Store())], value=Attribute(value=Name(id='_version_module', ctx=Load()), attr='__version__', ctx=Load())), Assign(targets=[Name(id='bootstrap_install_from', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='find_packages', ctx=Store())], value=Attribute(value=Name(id='PackageFinder', ctx=Load()), attr='find', ctx=Load())), Assign(targets=[Name(id='find_namespace_packages', ctx=Store())], value=Attribute(value=Name(id='PEP420PackageFinder', ctx=Load()), attr='find', ctx=Load())), FunctionDef(name='_install_setup_requires', args=arguments(posonlyargs=[], args=[arg(arg='attrs')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[ClassDef(name='MinimalDistribution', bases=[Attribute(value=Attribute(value=Name(id='distutils', ctx=Load()), attr='core', ctx=Load()), attr='Distribution', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n        A minimal version of a distribution for supporting the\n        fetch_build_eggs interface.\n        ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='attrs')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='_incl', ctx=Store())], value=Tuple(elts=[Constant(value='dependency_links'), Constant(value='setup_requires')], ctx=Load())), Assign(targets=[Name(id='filtered', ctx=Store())], value=DictComp(key=Name(id='k', ctx=Load()), value=Subscript(value=Name(id='attrs', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='k', ctx=Store()), iter=BinOp(left=Call(func=Name(id='set', ctx=Load()), args=[Name(id='_incl', ctx=Load())], keywords=[]), op=BitAnd(), right=Call(func=Name(id='set', ctx=Load()), args=[Name(id='attrs', ctx=Load())], keywords=[])), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Name(id='filtered', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='set_defaults', ctx=Load()), attr='_disable', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='_get_project_config_files', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='filenames')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Ignore ``pyproject.toml``, they are not related to setup_requires')), Try(body=[Assign(targets=[Tuple(elts=[Name(id='cfg', ctx=Store()), Name(id='toml', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='_split_standard_project_metadata', ctx=Load()), args=[Name(id='filenames', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Name(id='cfg', ctx=Load()), Tuple(elts=[], ctx=Load())], ctx=Load()))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Return(value=Tuple(elts=[Name(id='filenames', ctx=Load()), Tuple(elts=[], ctx=Load())], ctx=Load()))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='finalize_options', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n            Disable finalize_options to avoid building the working set.\n            Ref #2158.\n            '))], decorator_list=[])], decorator_list=[]), Assign(targets=[Name(id='dist', ctx=Store())], value=Call(func=Name(id='MinimalDistribution', ctx=Load()), args=[Name(id='attrs', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='dist', ctx=Load()), attr='parse_config_files', ctx=Load()), args=[], keywords=[keyword(arg='ignore_option_errors', value=Constant(value=True))])), If(test=Attribute(value=Name(id='dist', ctx=Load()), attr='setup_requires', ctx=Load()), body=[Expr(value=Call(func=Name(id='_fetch_build_eggs', ctx=Load()), args=[Name(id='dist', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='_fetch_build_eggs', args=arguments(posonlyargs=[], args=[arg(arg='dist')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='dist', ctx=Load()), attr='fetch_build_eggs', ctx=Load()), args=[Attribute(value=Name(id='dist', ctx=Load()), attr='setup_requires', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='ex', body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Constant(value="\n        It is possible a package already installed in your system\n        contains an version that is invalid according to PEP 440.\n        You can try `pip install --use-pep517` as a workaround for this problem,\n        or rely on a new virtual environment.\n\n        If the problem refers to a package that is not installed yet,\n        please contact that package's maintainers or distributors.\n        ")), If(test=Compare(left=Constant(value='InvalidVersion'), ops=[In()], comparators=[Attribute(value=Attribute(value=Name(id='ex', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load())]), body=[If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='ex', ctx=Load()), Constant(value='add_note')], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='ex', ctx=Load()), attr='add_note', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='dist', ctx=Load()), attr='announce', ctx=Load()), args=[JoinedStr(values=[Constant(value='\n'), FormattedValue(value=Name(id='msg', ctx=Load()), conversion=-1), Constant(value='\n')])], keywords=[]))])], orelse=[]), Raise()])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='setup', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='attrs'), defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='configure', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Name(id='_install_setup_requires', ctx=Load()), args=[Name(id='attrs', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='distutils', ctx=Load()), attr='core', ctx=Load()), attr='setup', ctx=Load()), args=[], keywords=[keyword(value=Name(id='attrs', ctx=Load()))]))], decorator_list=[]), Assign(targets=[Attribute(value=Name(id='setup', ctx=Load()), attr='__doc__', ctx=Store())], value=Attribute(value=Attribute(value=Attribute(value=Name(id='distutils', ctx=Load()), attr='core', ctx=Load()), attr='setup', ctx=Load()), attr='__doc__', ctx=Load())), Assign(targets=[Name(id='_Command', ctx=Store())], value=Call(func=Attribute(value=Name(id='monkey', ctx=Load()), attr='get_unpatched', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='distutils', ctx=Load()), attr='core', ctx=Load()), attr='Command', ctx=Load())], keywords=[])), ClassDef(name='Command', bases=[Name(id='_Command', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Setuptools internal actions are organized using a *command design pattern*.\n    This means that each action (or group of closely related actions) executed during\n    the build should be implemented as a ``Command`` subclass.\n\n    These commands are abstractions and do not necessarily correspond to a command that\n    can (or should) be executed via a terminal, in a CLI fashion (although historically\n    they would).\n\n    When creating a new command from scratch, custom defined classes **SHOULD** inherit\n    from ``setuptools.Command`` and implement a few mandatory methods.\n    Between these mandatory methods, are listed:\n\n    .. method:: initialize_options(self)\n\n        Set or (reset) all options/attributes/caches used by the command\n        to their default values. Note that these values may be overwritten during\n        the build.\n\n    .. method:: finalize_options(self)\n\n        Set final values for all options/attributes used by the command.\n        Most of the time, each option/attribute/cache should only be set if it does not\n        have any value yet (e.g. ``if self.attr is None: self.attr = val``).\n\n    .. method:: run(self)\n\n        Execute the actions intended by the command.\n        (Side effects **SHOULD** only take place when ``run`` is executed,\n        for example, creating new files or writing to the terminal output).\n\n    A useful analogy for command classes is to think of them as subroutines with local\n    variables called "options".  The options are "declared" in ``initialize_options()``\n    and "defined" (given their final values, aka "finalized") in ``finalize_options()``,\n    both of which must be defined by every command class. The "body" of the subroutine,\n    (where it does all the work) is the ``run()`` method.\n    Between ``initialize_options()`` and ``finalize_options()``, ``setuptools`` may set\n    the values for options/attributes based on user\'s input (or circumstance),\n    which means that the implementation should be careful to not overwrite values in\n    ``finalize_options`` unless necessary.\n\n    Please note that other commands (or other parts of setuptools) may also overwrite\n    the values of the command\'s options/attributes multiple times during the build\n    process.\n    Therefore it is important to consistently implement ``initialize_options()`` and\n    ``finalize_options()``. For example, all derived attributes (or attributes that\n    depend on the value of other attributes) **SHOULD** be recomputed in\n    ``finalize_options``.\n\n    When overwriting existing commands, custom defined classes **MUST** abide by the\n    same APIs implemented by the original class. They also **SHOULD** inherit from the\n    original class.\n    ')), Assign(targets=[Name(id='command_consumes_arguments', ctx=Store())], value=Constant(value=False)), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dist')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kw'), defaults=[]), body=[Expr(value=Constant(value='\n        Construct the command for dist, updating\n        vars(self) with any keyword parameters.\n        ')), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Name(id='dist', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Call(func=Name(id='vars', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='update', ctx=Load()), args=[Name(id='kw', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_ensure_stringlike', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='option'), arg(arg='what'), arg(arg='default')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Name(id='val', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='option', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='val', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='option', ctx=Load()), Name(id='default', ctx=Load())], keywords=[])), Return(value=Name(id='default', ctx=Load()))], orelse=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='val', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='DistutilsOptionError', ctx=Load()), args=[BinOp(left=Constant(value="'%s' must be a %s (got `%s`)"), op=Mod(), right=Tuple(elts=[Name(id='option', ctx=Load()), Name(id='what', ctx=Load()), Name(id='val', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[])]), Return(value=Name(id='val', ctx=Load()))], decorator_list=[]), FunctionDef(name='ensure_string_list', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='option')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Ensure that \'option\' is a list of strings.  If \'option\' is\n        currently a string, we split it either on /,\\s*/ or /\\s+/, so\n        "foo bar baz", "foo,bar,baz", and "foo,   bar baz" all become\n        ["foo", "bar", "baz"].\n\n        ..\n           TODO: This method seems to be similar to the one in ``distutils.cmd``\n           Probably it is just here for backward compatibility with old Python versions?\n\n        :meta private:\n        ')), Assign(targets=[Name(id='val', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='option', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='val', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return()], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='val', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='option', ctx=Load()), Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=',\\s*|\\s+'), Name(id='val', ctx=Load())], keywords=[])], keywords=[]))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='val', ctx=Load()), Name(id='list', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='ok', ctx=Store())], value=Call(func=Name(id='all', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='v', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='v', ctx=Store()), iter=Name(id='val', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], orelse=[Assign(targets=[Name(id='ok', ctx=Store())], value=Constant(value=False))]), If(test=UnaryOp(op=Not(), operand=Name(id='ok', ctx=Load())), body=[Raise(exc=Call(func=Name(id='DistutilsOptionError', ctx=Load()), args=[BinOp(left=Constant(value="'%s' must be a list of strings (got %r)"), op=Mod(), right=Tuple(elts=[Name(id='option', ctx=Load()), Name(id='val', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[])])])], decorator_list=[]), FunctionDef(name='reinitialize_command', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='command'), arg(arg='reinit_subcommands')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kw'), defaults=[Constant(value=0)]), body=[Assign(targets=[Name(id='cmd', ctx=Store())], value=Call(func=Attribute(value=Name(id='_Command', ctx=Load()), attr='reinitialize_command', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='command', ctx=Load()), Name(id='reinit_subcommands', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Call(func=Name(id='vars', ctx=Load()), args=[Name(id='cmd', ctx=Load())], keywords=[]), attr='update', ctx=Load()), args=[Name(id='kw', ctx=Load())], keywords=[])), Return(value=Name(id='cmd', ctx=Load()))], decorator_list=[])], decorator_list=[]), FunctionDef(name='_find_all_simple', args=arguments(posonlyargs=[], args=[arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    Find all files under 'path'\n    ")), Assign(targets=[Name(id='results', ctx=Store())], value=GeneratorExp(elt=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='base', ctx=Load()), Name(id='file', ctx=Load())], keywords=[]), generators=[comprehension(target=Tuple(elts=[Name(id='base', ctx=Store()), Name(id='dirs', ctx=Store()), Name(id='files', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='walk', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[keyword(arg='followlinks', value=Constant(value=True))]), ifs=[], is_async=0), comprehension(target=Name(id='file', ctx=Store()), iter=Name(id='files', ctx=Load()), ifs=[], is_async=0)])), Return(value=Call(func=Name(id='filter', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isfile', ctx=Load()), Name(id='results', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='findall', args=arguments(posonlyargs=[], args=[arg(arg='dir')], kwonlyargs=[], kw_defaults=[], defaults=[Attribute(value=Name(id='os', ctx=Load()), attr='curdir', ctx=Load())]), body=[Expr(value=Constant(value="\n    Find all files under 'dir' and return the list of full filenames.\n    Unless dir is '.', return full filenames with dir prepended.\n    ")), Assign(targets=[Name(id='files', ctx=Store())], value=Call(func=Name(id='_find_all_simple', ctx=Load()), args=[Name(id='dir', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='dir', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='os', ctx=Load()), attr='curdir', ctx=Load())]), body=[Assign(targets=[Name(id='make_rel', ctx=Store())], value=Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='partial', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='relpath', ctx=Load())], keywords=[keyword(arg='start', value=Name(id='dir', ctx=Load()))])), Assign(targets=[Name(id='files', ctx=Store())], value=Call(func=Name(id='map', ctx=Load()), args=[Name(id='make_rel', ctx=Load()), Name(id='files', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='files', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='convert_path', args=arguments(posonlyargs=[], args=[arg(arg='pathname')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='SetuptoolsDeprecationWarning', ctx=Load()), attr='emit', ctx=Load()), args=[Constant(value='Access to implementation detail'), Constant(value='\n        The function `convert_path` is not provided by setuptools itself,\n        and therefore not part of the public API.\n\n        Its direct usage by 3rd-party packages is considered improper and the function\n        may be removed in the future.\n        ')], keywords=[keyword(arg='due_date', value=Tuple(elts=[Constant(value=2023), Constant(value=12), Constant(value=13)], ctx=Load()))])), Return(value=Call(func=Name(id='_convert_path', ctx=Load()), args=[Name(id='pathname', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='wraps', ctx=Load()), args=[Name(id='_convert_path', ctx=Load())], keywords=[])]), ClassDef(name='sic', bases=[Name(id='str', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Treat this string as-is (https://en.wikipedia.org/wiki/Sic)'))], decorator_list=[]), Expr(value=Call(func=Attribute(value=Name(id='monkey', ctx=Load()), attr='patch_all', ctx=Load()), args=[], keywords=[]))], type_ignores=[])