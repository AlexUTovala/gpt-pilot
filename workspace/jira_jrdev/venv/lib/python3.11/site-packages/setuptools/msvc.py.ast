Module(body=[Expr(value=Constant(value='\nImproved support for Microsoft Visual C++ compilers.\n\nKnown supported compilers:\n--------------------------\nMicrosoft Visual C++ 14.X:\n    Microsoft Visual C++ Build Tools 2015 (x86, x64, arm)\n    Microsoft Visual Studio Build Tools 2017 (x86, x64, arm, arm64)\n    Microsoft Visual Studio Build Tools 2019 (x86, x64, arm, arm64)\n\nThis may also support compilers shipped with compatible Visual Studio versions.\n')), Import(names=[alias(name='json')]), ImportFrom(module='io', names=[alias(name='open')], level=0), ImportFrom(module='os', names=[alias(name='listdir'), alias(name='pathsep')], level=0), ImportFrom(module='os.path', names=[alias(name='join'), alias(name='isfile'), alias(name='isdir'), alias(name='dirname')], level=0), ImportFrom(module='subprocess', names=[alias(name='CalledProcessError')], level=0), Import(names=[alias(name='contextlib')]), Import(names=[alias(name='platform')]), Import(names=[alias(name='itertools')]), Import(names=[alias(name='subprocess')]), Import(names=[alias(name='distutils.errors')]), ImportFrom(module='setuptools.extern.more_itertools', names=[alias(name='unique_everseen')], level=0), If(test=Compare(left=Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='system', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Constant(value='Windows')]), body=[Import(names=[alias(name='winreg')]), ImportFrom(module='os', names=[alias(name='environ')], level=0)], orelse=[ClassDef(name='winreg', bases=[], keywords=[], body=[Assign(targets=[Name(id='HKEY_USERS', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='HKEY_CURRENT_USER', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='HKEY_LOCAL_MACHINE', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='HKEY_CLASSES_ROOT', ctx=Store())], value=Constant(value=None))], decorator_list=[]), Assign(targets=[Name(id='environ', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[]))]), FunctionDef(name='_msvc14_find_vc2015', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Python 3.8 "distutils/_msvccompiler.py" backport')), Try(body=[Assign(targets=[Name(id='key', ctx=Store())], value=Call(func=Attribute(value=Name(id='winreg', ctx=Load()), attr='OpenKey', ctx=Load()), args=[Attribute(value=Name(id='winreg', ctx=Load()), attr='HKEY_LOCAL_MACHINE', ctx=Load()), Constant(value='Software\\Microsoft\\VisualStudio\\SxS\\VC7'), Constant(value=0), BinOp(left=Attribute(value=Name(id='winreg', ctx=Load()), attr='KEY_READ', ctx=Load()), op=BitOr(), right=Attribute(value=Name(id='winreg', ctx=Load()), attr='KEY_WOW64_32KEY', ctx=Load()))], keywords=[]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), body=[Return(value=Tuple(elts=[Constant(value=None), Constant(value=None)], ctx=Load()))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='best_version', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='best_dir', ctx=Store())], value=Constant(value=None)), With(items=[withitem(context_expr=Name(id='key', ctx=Load()))], body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Attribute(value=Name(id='itertools', ctx=Load()), attr='count', ctx=Load()), args=[], keywords=[]), body=[Try(body=[Assign(targets=[Tuple(elts=[Name(id='v', ctx=Store()), Name(id='vc_dir', ctx=Store()), Name(id='vt', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='winreg', ctx=Load()), attr='EnumValue', ctx=Load()), args=[Name(id='key', ctx=Load()), Name(id='i', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), body=[Break()])], orelse=[], finalbody=[]), If(test=BoolOp(op=And(), values=[Name(id='v', ctx=Load()), Compare(left=Name(id='vt', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='winreg', ctx=Load()), attr='REG_SZ', ctx=Load())]), Call(func=Name(id='isdir', ctx=Load()), args=[Name(id='vc_dir', ctx=Load())], keywords=[])]), body=[Try(body=[Assign(targets=[Name(id='version', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Name(id='float', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[])], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='ValueError', ctx=Load()), Name(id='TypeError', ctx=Load())], ctx=Load()), body=[Continue()])], orelse=[], finalbody=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='version', ctx=Load()), ops=[GtE()], comparators=[Constant(value=14)]), Compare(left=Name(id='version', ctx=Load()), ops=[Gt()], comparators=[Name(id='best_version', ctx=Load())])]), body=[Assign(targets=[Tuple(elts=[Name(id='best_version', ctx=Store()), Name(id='best_dir', ctx=Store())], ctx=Store())], value=Tuple(elts=[Name(id='version', ctx=Load()), Name(id='vc_dir', ctx=Load())], ctx=Load()))], orelse=[])], orelse=[])], orelse=[])]), Return(value=Tuple(elts=[Name(id='best_version', ctx=Load()), Name(id='best_dir', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='_msvc14_find_vc2017', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Python 3.8 "distutils/_msvccompiler.py" backport\n\n    Returns "15, path" based on the result of invoking vswhere.exe\n    If no install is found, returns "None, None"\n\n    The version is returned to avoid unnecessarily changing the function\n    result. It may be ignored when the path is not None.\n\n    If vswhere.exe is not available, by definition, VS 2017 is not\n    installed.\n    ')), Assign(targets=[Name(id='root', ctx=Store())], value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='ProgramFiles(x86)')], keywords=[]), Call(func=Attribute(value=Name(id='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='ProgramFiles')], keywords=[])])), If(test=UnaryOp(op=Not(), operand=Name(id='root', ctx=Load())), body=[Return(value=Tuple(elts=[Constant(value=None), Constant(value=None)], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='suitable_components', ctx=Store())], value=Tuple(elts=[Constant(value='Microsoft.VisualStudio.Component.VC.Tools.x86.x64'), Constant(value='Microsoft.VisualStudio.Workload.WDExpress')], ctx=Load())), For(target=Name(id='component', ctx=Store()), iter=Name(id='suitable_components', ctx=Load()), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='contextlib', ctx=Load()), attr='suppress', ctx=Load()), args=[Name(id='CalledProcessError', ctx=Load()), Name(id='OSError', ctx=Load()), Name(id='UnicodeDecodeError', ctx=Load())], keywords=[]))], body=[Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='subprocess', ctx=Load()), attr='check_output', ctx=Load()), args=[List(elts=[Call(func=Name(id='join', ctx=Load()), args=[Name(id='root', ctx=Load()), Constant(value='Microsoft Visual Studio'), Constant(value='Installer'), Constant(value='vswhere.exe')], keywords=[]), Constant(value='-latest'), Constant(value='-prerelease'), Constant(value='-requires'), Name(id='component', ctx=Load()), Constant(value='-property'), Constant(value='installationPath'), Constant(value='-products'), Constant(value='*')], ctx=Load())], keywords=[]), attr='decode', ctx=Load()), args=[], keywords=[keyword(arg='encoding', value=Constant(value='mbcs')), keyword(arg='errors', value=Constant(value='strict'))]), attr='strip', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Name(id='join', ctx=Load()), args=[Name(id='path', ctx=Load()), Constant(value='VC'), Constant(value='Auxiliary'), Constant(value='Build')], keywords=[])), If(test=Call(func=Name(id='isdir', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), body=[Return(value=Tuple(elts=[Constant(value=15), Name(id='path', ctx=Load())], ctx=Load()))], orelse=[])])], orelse=[]), Return(value=Tuple(elts=[Constant(value=None), Constant(value=None)], ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='PLAT_SPEC_TO_RUNTIME', ctx=Store())], value=Dict(keys=[Constant(value='x86'), Constant(value='x86_amd64'), Constant(value='x86_arm'), Constant(value='x86_arm64')], values=[Constant(value='x86'), Constant(value='x64'), Constant(value='arm'), Constant(value='arm64')])), FunctionDef(name='_msvc14_find_vcvarsall', args=arguments(posonlyargs=[], args=[arg(arg='plat_spec')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Python 3.8 "distutils/_msvccompiler.py" backport')), Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='best_dir', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_msvc14_find_vc2017', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='vcruntime', ctx=Store())], value=Constant(value=None)), If(test=Compare(left=Name(id='plat_spec', ctx=Load()), ops=[In()], comparators=[Name(id='PLAT_SPEC_TO_RUNTIME', ctx=Load())]), body=[Assign(targets=[Name(id='vcruntime_plat', ctx=Store())], value=Subscript(value=Name(id='PLAT_SPEC_TO_RUNTIME', ctx=Load()), slice=Name(id='plat_spec', ctx=Load()), ctx=Load()))], orelse=[Assign(targets=[Name(id='vcruntime_plat', ctx=Store())], value=IfExp(test=Compare(left=Constant(value='amd64'), ops=[In()], comparators=[Name(id='plat_spec', ctx=Load())]), body=Constant(value='x64'), orelse=Constant(value='x86')))]), If(test=Name(id='best_dir', ctx=Load()), body=[Assign(targets=[Name(id='vcredist', ctx=Store())], value=Call(func=Name(id='join', ctx=Load()), args=[Name(id='best_dir', ctx=Load()), Constant(value='..'), Constant(value='..'), Constant(value='redist'), Constant(value='MSVC'), Constant(value='**'), Name(id='vcruntime_plat', ctx=Load()), Constant(value='Microsoft.VC14*.CRT'), Constant(value='vcruntime140.dll')], keywords=[])), Try(body=[Import(names=[alias(name='glob')]), Assign(targets=[Name(id='vcruntime', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='glob', ctx=Load()), attr='glob', ctx=Load()), args=[Name(id='vcredist', ctx=Load())], keywords=[keyword(arg='recursive', value=Constant(value=True))]), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='ImportError', ctx=Load()), Name(id='OSError', ctx=Load()), Name(id='LookupError', ctx=Load())], ctx=Load()), body=[Assign(targets=[Name(id='vcruntime', ctx=Store())], value=Constant(value=None))])], orelse=[], finalbody=[])], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='best_dir', ctx=Load())), body=[Assign(targets=[Tuple(elts=[Name(id='best_version', ctx=Store()), Name(id='best_dir', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_msvc14_find_vc2015', ctx=Load()), args=[], keywords=[])), If(test=Name(id='best_version', ctx=Load()), body=[Assign(targets=[Name(id='vcruntime', ctx=Store())], value=Call(func=Name(id='join', ctx=Load()), args=[Name(id='best_dir', ctx=Load()), Constant(value='redist'), Name(id='vcruntime_plat', ctx=Load()), Constant(value='Microsoft.VC140.CRT'), Constant(value='vcruntime140.dll')], keywords=[]))], orelse=[])], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='best_dir', ctx=Load())), body=[Return(value=Tuple(elts=[Constant(value=None), Constant(value=None)], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='vcvarsall', ctx=Store())], value=Call(func=Name(id='join', ctx=Load()), args=[Name(id='best_dir', ctx=Load()), Constant(value='vcvarsall.bat')], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isfile', ctx=Load()), args=[Name(id='vcvarsall', ctx=Load())], keywords=[])), body=[Return(value=Tuple(elts=[Constant(value=None), Constant(value=None)], ctx=Load()))], orelse=[]), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Name(id='vcruntime', ctx=Load())), UnaryOp(op=Not(), operand=Call(func=Name(id='isfile', ctx=Load()), args=[Name(id='vcruntime', ctx=Load())], keywords=[]))]), body=[Assign(targets=[Name(id='vcruntime', ctx=Store())], value=Constant(value=None))], orelse=[]), Return(value=Tuple(elts=[Name(id='vcvarsall', ctx=Load()), Name(id='vcruntime', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='_msvc14_get_vc_env', args=arguments(posonlyargs=[], args=[arg(arg='plat_spec')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Python 3.8 "distutils/_msvccompiler.py" backport')), If(test=Compare(left=Constant(value='DISTUTILS_USE_SDK'), ops=[In()], comparators=[Name(id='environ', ctx=Load())]), body=[Return(value=DictComp(key=Call(func=Attribute(value=Name(id='key', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), value=Name(id='value', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='environ', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='vcvarsall', ctx=Store()), Name(id='vcruntime', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_msvc14_find_vcvarsall', ctx=Load()), args=[Name(id='plat_spec', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='vcvarsall', ctx=Load())), body=[Raise(exc=Call(func=Attribute(value=Attribute(value=Name(id='distutils', ctx=Load()), attr='errors', ctx=Load()), attr='DistutilsPlatformError', ctx=Load()), args=[Constant(value='Unable to find vcvarsall.bat')], keywords=[]))], orelse=[]), Try(body=[Assign(targets=[Name(id='out', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='subprocess', ctx=Load()), attr='check_output', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='cmd /u /c "{}" {} && set'), attr='format', ctx=Load()), args=[Name(id='vcvarsall', ctx=Load()), Name(id='plat_spec', ctx=Load())], keywords=[])], keywords=[keyword(arg='stderr', value=Attribute(value=Name(id='subprocess', ctx=Load()), attr='STDOUT', ctx=Load()))]), attr='decode', ctx=Load()), args=[Constant(value='utf-16le')], keywords=[keyword(arg='errors', value=Constant(value='replace'))]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='subprocess', ctx=Load()), attr='CalledProcessError', ctx=Load()), name='exc', body=[Raise(exc=Call(func=Attribute(value=Attribute(value=Name(id='distutils', ctx=Load()), attr='errors', ctx=Load()), attr='DistutilsPlatformError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Error executing {}'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='exc', ctx=Load()), attr='cmd', ctx=Load())], keywords=[])], keywords=[]), cause=Name(id='exc', ctx=Load()))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='env', ctx=Store())], value=DictComp(key=Call(func=Attribute(value=Name(id='key', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), value=Name(id='value', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='_', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=GeneratorExp(elt=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='partition', ctx=Load()), args=[Constant(value='=')], keywords=[]), generators=[comprehension(target=Name(id='line', ctx=Store()), iter=Call(func=Attribute(value=Name(id='out', ctx=Load()), attr='splitlines', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)]), ifs=[BoolOp(op=And(), values=[Name(id='key', ctx=Load()), Name(id='value', ctx=Load())])], is_async=0)])), If(test=Name(id='vcruntime', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='env', ctx=Load()), slice=Constant(value='py_vcruntime_redist'), ctx=Store())], value=Name(id='vcruntime', ctx=Load()))], orelse=[]), Return(value=Name(id='env', ctx=Load()))], decorator_list=[]), FunctionDef(name='msvc14_get_vc_env', args=arguments(posonlyargs=[], args=[arg(arg='plat_spec')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Patched "distutils._msvccompiler._get_vc_env" for support extra\n    Microsoft Visual C++ 14.X compilers.\n\n    Set environment without use of "vcvarsall.bat".\n\n    Parameters\n    ----------\n    plat_spec: str\n        Target architecture.\n\n    Return\n    ------\n    dict\n        environment\n    ')), Try(body=[Return(value=Call(func=Name(id='_msvc14_get_vc_env', ctx=Load()), args=[Name(id='plat_spec', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Attribute(value=Name(id='distutils', ctx=Load()), attr='errors', ctx=Load()), attr='DistutilsPlatformError', ctx=Load()), name='exc', body=[Expr(value=Call(func=Name(id='_augment_exception', ctx=Load()), args=[Name(id='exc', ctx=Load()), Constant(value=14.0)], keywords=[])), Raise()])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='_augment_exception', args=arguments(posonlyargs=[], args=[arg(arg='exc'), arg(arg='version'), arg(arg='arch')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='')]), body=[Expr(value=Constant(value='\n    Add details to the exception message to help guide the user\n    as to what action will resolve it.\n    ')), Assign(targets=[Name(id='message', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='exc', ctx=Load()), attr='args', ctx=Load()), slice=Constant(value=0), ctx=Load())), If(test=BoolOp(op=Or(), values=[Compare(left=Constant(value='vcvarsall'), ops=[In()], comparators=[Call(func=Attribute(value=Name(id='message', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])]), Compare(left=Constant(value='visual c'), ops=[In()], comparators=[Call(func=Attribute(value=Name(id='message', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])])]), body=[Assign(targets=[Name(id='tmpl', ctx=Store())], value=Constant(value='Microsoft Visual C++ {version:0.1f} or greater is required.')), Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Attribute(value=Name(id='tmpl', ctx=Load()), attr='format', ctx=Load()), args=[], keywords=[keyword(value=Call(func=Name(id='locals', ctx=Load()), args=[], keywords=[]))])), Assign(targets=[Name(id='msdownload', ctx=Store())], value=Constant(value='www.microsoft.com/download/details.aspx?id=%d')), If(test=Compare(left=Name(id='version', ctx=Load()), ops=[Eq()], comparators=[Constant(value=9.0)]), body=[If(test=Compare(left=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='arch', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), attr='find', ctx=Load()), args=[Constant(value='ia64')], keywords=[]), ops=[Gt()], comparators=[UnaryOp(op=USub(), operand=Constant(value=1))]), body=[AugAssign(target=Name(id='message', ctx=Store()), op=Add(), value=Constant(value=' Get it with "Microsoft Windows SDK 7.0"'))], orelse=[AugAssign(target=Name(id='message', ctx=Store()), op=Add(), value=Constant(value=' Get it from http://aka.ms/vcpython27'))])], orelse=[If(test=Compare(left=Name(id='version', ctx=Load()), ops=[Eq()], comparators=[Constant(value=10.0)]), body=[AugAssign(target=Name(id='message', ctx=Store()), op=Add(), value=Constant(value=' Get it with "Microsoft Windows SDK 7.1": ')), AugAssign(target=Name(id='message', ctx=Store()), op=Add(), value=BinOp(left=Name(id='msdownload', ctx=Load()), op=Mod(), right=Constant(value=8279)))], orelse=[If(test=Compare(left=Name(id='version', ctx=Load()), ops=[GtE()], comparators=[Constant(value=14.0)]), body=[AugAssign(target=Name(id='message', ctx=Store()), op=Add(), value=Constant(value=' Get it with "Microsoft C++ Build Tools": https://visualstudio.microsoft.com/visual-cpp-build-tools/'))], orelse=[])])])], orelse=[]), Assign(targets=[Attribute(value=Name(id='exc', ctx=Load()), attr='args', ctx=Store())], value=Tuple(elts=[Name(id='message', ctx=Load())], ctx=Load()))], decorator_list=[]), ClassDef(name='PlatformInfo', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    Current and Target Architectures information.\n\n    Parameters\n    ----------\n    arch: str\n        Target architecture.\n    ')), Assign(targets=[Name(id='current_cpu', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='processor_architecture'), Constant(value='')], keywords=[]), attr='lower', ctx=Load()), args=[], keywords=[])), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='arch')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='arch', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='arch', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value='x64'), Constant(value='amd64')], keywords=[]))], decorator_list=[]), FunctionDef(name='target_cpu', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return Target CPU architecture.\n\n        Return\n        ------\n        str\n            Target CPU\n        ')), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='arch', ctx=Load()), slice=Slice(lower=BinOp(left=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='arch', ctx=Load()), attr='find', ctx=Load()), args=[Constant(value='_')], keywords=[]), op=Add(), right=Constant(value=1))), ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='target_is_x86', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return True if target CPU is x86 32 bits..\n\n        Return\n        ------\n        bool\n            CPU is x86 32 bits\n        ')), Return(value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='target_cpu', ctx=Load()), ops=[Eq()], comparators=[Constant(value='x86')]))], decorator_list=[]), FunctionDef(name='current_is_x86', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return True if current CPU is x86 32 bits..\n\n        Return\n        ------\n        bool\n            CPU is x86 32 bits\n        ')), Return(value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='current_cpu', ctx=Load()), ops=[Eq()], comparators=[Constant(value='x86')]))], decorator_list=[]), FunctionDef(name='current_dir', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='hidex86'), arg(arg='x64')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Constant(value=False)]), body=[Expr(value=Constant(value="\n        Current platform specific subfolder.\n\n        Parameters\n        ----------\n        hidex86: bool\n            return '' and not '\x86' if architecture is x86.\n        x64: bool\n            return 'd' and not '\x07md64' if architecture is amd64.\n\n        Return\n        ------\n        str\n            subfolder: '\target', or '' (see hidex86 parameter)\n        ")), Return(value=IfExp(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='current_cpu', ctx=Load()), ops=[Eq()], comparators=[Constant(value='x86')]), Name(id='hidex86', ctx=Load())]), body=Constant(value=''), orelse=IfExp(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='current_cpu', ctx=Load()), ops=[Eq()], comparators=[Constant(value='amd64')]), Name(id='x64', ctx=Load())]), body=Constant(value='\\x64'), orelse=BinOp(left=Constant(value='\\%s'), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='current_cpu', ctx=Load())))))], decorator_list=[]), FunctionDef(name='target_dir', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='hidex86'), arg(arg='x64')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Constant(value=False)]), body=[Expr(value=Constant(value="\n        Target platform specific subfolder.\n\n        Parameters\n        ----------\n        hidex86: bool\n            return '' and not '\\x86' if architecture is x86.\n        x64: bool\n            return '\\x64' and not '\\amd64' if architecture is amd64.\n\n        Return\n        ------\n        str\n            subfolder: '\\current', or '' (see hidex86 parameter)\n        ")), Return(value=IfExp(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='target_cpu', ctx=Load()), ops=[Eq()], comparators=[Constant(value='x86')]), Name(id='hidex86', ctx=Load())]), body=Constant(value=''), orelse=IfExp(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='target_cpu', ctx=Load()), ops=[Eq()], comparators=[Constant(value='amd64')]), Name(id='x64', ctx=Load())]), body=Constant(value='\\x64'), orelse=BinOp(left=Constant(value='\\%s'), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='target_cpu', ctx=Load())))))], decorator_list=[]), FunctionDef(name='cross_dir', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='forcex86')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value="\n        Cross platform specific subfolder.\n\n        Parameters\n        ----------\n        forcex86: bool\n            Use 'x86' as current architecture even if current architecture is\n            not x86.\n\n        Return\n        ------\n        str\n            subfolder: '' if target architecture is current architecture,\n            '\\current_target' if not.\n        ")), Assign(targets=[Name(id='current', ctx=Store())], value=IfExp(test=Name(id='forcex86', ctx=Load()), body=Constant(value='x86'), orelse=Attribute(value=Name(id='self', ctx=Load()), attr='current_cpu', ctx=Load()))), Return(value=IfExp(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='target_cpu', ctx=Load()), ops=[Eq()], comparators=[Name(id='current', ctx=Load())]), body=Constant(value=''), orelse=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='target_dir', ctx=Load()), args=[], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value='\\'), BinOp(left=Constant(value='\\%s_'), op=Mod(), right=Name(id='current', ctx=Load()))], keywords=[])))], decorator_list=[])], decorator_list=[]), ClassDef(name='RegistryInfo', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    Microsoft Visual Studio related registry information.\n\n    Parameters\n    ----------\n    platform_info: PlatformInfo\n        "PlatformInfo" instance.\n    ')), Assign(targets=[Name(id='HKEYS', ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='winreg', ctx=Load()), attr='HKEY_USERS', ctx=Load()), Attribute(value=Name(id='winreg', ctx=Load()), attr='HKEY_CURRENT_USER', ctx=Load()), Attribute(value=Name(id='winreg', ctx=Load()), attr='HKEY_LOCAL_MACHINE', ctx=Load()), Attribute(value=Name(id='winreg', ctx=Load()), attr='HKEY_CLASSES_ROOT', ctx=Load())], ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='platform_info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='pi', ctx=Store())], value=Name(id='platform_info', ctx=Load()))], decorator_list=[]), FunctionDef(name='visualstudio', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Microsoft Visual Studio root registry key.\n\n        Return\n        ------\n        str\n            Registry key\n        ')), Return(value=Constant(value='VisualStudio'))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='sxs', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Microsoft Visual Studio SxS registry key.\n\n        Return\n        ------\n        str\n            Registry key\n        ')), Return(value=Call(func=Name(id='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='visualstudio', ctx=Load()), Constant(value='SxS')], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='vc', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Microsoft Visual C++ VC7 registry key.\n\n        Return\n        ------\n        str\n            Registry key\n        ')), Return(value=Call(func=Name(id='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='sxs', ctx=Load()), Constant(value='VC7')], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='vs', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Microsoft Visual Studio VS7 registry key.\n\n        Return\n        ------\n        str\n            Registry key\n        ')), Return(value=Call(func=Name(id='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='sxs', ctx=Load()), Constant(value='VS7')], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='vc_for_python', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Microsoft Visual C++ for Python registry key.\n\n        Return\n        ------\n        str\n            Registry key\n        ')), Return(value=Constant(value='DevDiv\\VCForPython'))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='microsoft_sdk', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Microsoft SDK registry key.\n\n        Return\n        ------\n        str\n            Registry key\n        ')), Return(value=Constant(value='Microsoft SDKs'))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='windows_sdk', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Microsoft Windows/Platform SDK registry key.\n\n        Return\n        ------\n        str\n            Registry key\n        ')), Return(value=Call(func=Name(id='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='microsoft_sdk', ctx=Load()), Constant(value='Windows')], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='netfx_sdk', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Microsoft .NET Framework SDK registry key.\n\n        Return\n        ------\n        str\n            Registry key\n        ')), Return(value=Call(func=Name(id='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='microsoft_sdk', ctx=Load()), Constant(value='NETFXSDK')], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='windows_kits_roots', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Microsoft Windows Kits Roots registry key.\n\n        Return\n        ------\n        str\n            Registry key\n        ')), Return(value=Constant(value='Windows Kits\\Installed Roots'))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='microsoft', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key'), arg(arg='x86')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value='\n        Return key in Microsoft software registry.\n\n        Parameters\n        ----------\n        key: str\n            Registry key path where look.\n        x86: str\n            Force x86 software registry.\n\n        Return\n        ------\n        str\n            Registry key\n        ')), Assign(targets=[Name(id='node64', ctx=Store())], value=IfExp(test=BoolOp(op=Or(), values=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='pi', ctx=Load()), attr='current_is_x86', ctx=Load()), args=[], keywords=[]), Name(id='x86', ctx=Load())]), body=Constant(value=''), orelse=Constant(value='Wow6432Node'))), Return(value=Call(func=Name(id='join', ctx=Load()), args=[Constant(value='Software'), Name(id='node64', ctx=Load()), Constant(value='Microsoft'), Name(id='key', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='lookup', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key'), arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Look for values in registry in Microsoft software registry.\n\n        Parameters\n        ----------\n        key: str\n            Registry key path where look.\n        name: str\n            Value name to find.\n\n        Return\n        ------\n        str\n            value\n        ')), Assign(targets=[Name(id='key_read', ctx=Store())], value=Attribute(value=Name(id='winreg', ctx=Load()), attr='KEY_READ', ctx=Load())), Assign(targets=[Name(id='openkey', ctx=Store())], value=Attribute(value=Name(id='winreg', ctx=Load()), attr='OpenKey', ctx=Load())), Assign(targets=[Name(id='closekey', ctx=Store())], value=Attribute(value=Name(id='winreg', ctx=Load()), attr='CloseKey', ctx=Load())), Assign(targets=[Name(id='ms', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='microsoft', ctx=Load())), For(target=Name(id='hkey', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='HKEYS', ctx=Load()), body=[Assign(targets=[Name(id='bkey', ctx=Store())], value=Constant(value=None)), Try(body=[Assign(targets=[Name(id='bkey', ctx=Store())], value=Call(func=Name(id='openkey', ctx=Load()), args=[Name(id='hkey', ctx=Load()), Call(func=Name(id='ms', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[]), Constant(value=0), Name(id='key_read', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='OSError', ctx=Load()), Name(id='IOError', ctx=Load())], ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='pi', ctx=Load()), attr='current_is_x86', ctx=Load()), args=[], keywords=[])), body=[Try(body=[Assign(targets=[Name(id='bkey', ctx=Store())], value=Call(func=Name(id='openkey', ctx=Load()), args=[Name(id='hkey', ctx=Load()), Call(func=Name(id='ms', ctx=Load()), args=[Name(id='key', ctx=Load()), Constant(value=True)], keywords=[]), Constant(value=0), Name(id='key_read', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='OSError', ctx=Load()), Name(id='IOError', ctx=Load())], ctx=Load()), body=[Continue()])], orelse=[], finalbody=[])], orelse=[Continue()])])], orelse=[], finalbody=[]), Try(body=[Return(value=Subscript(value=Call(func=Attribute(value=Name(id='winreg', ctx=Load()), attr='QueryValueEx', ctx=Load()), args=[Name(id='bkey', ctx=Load()), Name(id='name', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load()))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='OSError', ctx=Load()), Name(id='IOError', ctx=Load())], ctx=Load()), body=[Pass()])], orelse=[], finalbody=[If(test=Name(id='bkey', ctx=Load()), body=[Expr(value=Call(func=Name(id='closekey', ctx=Load()), args=[Name(id='bkey', ctx=Load())], keywords=[]))], orelse=[])])], orelse=[])], decorator_list=[])], decorator_list=[]), ClassDef(name='SystemInfo', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    Microsoft Windows and Visual Studio related system information.\n\n    Parameters\n    ----------\n    registry_info: RegistryInfo\n        "RegistryInfo" instance.\n    vc_ver: float\n        Required Microsoft Visual C++ version.\n    ')), Assign(targets=[Name(id='WinDir', ctx=Store())], value=Call(func=Attribute(value=Name(id='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='WinDir'), Constant(value='')], keywords=[])), Assign(targets=[Name(id='ProgramFiles', ctx=Store())], value=Call(func=Attribute(value=Name(id='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='ProgramFiles'), Constant(value='')], keywords=[])), Assign(targets=[Name(id='ProgramFilesx86', ctx=Store())], value=Call(func=Attribute(value=Name(id='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='ProgramFiles(x86)'), Name(id='ProgramFiles', ctx=Load())], keywords=[])), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='registry_info'), arg(arg='vc_ver')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='ri', ctx=Store())], value=Name(id='registry_info', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='pi', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='ri', ctx=Load()), attr='pi', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='known_vs_paths', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='find_programdata_vs_vers', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='vs_ver', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='vc_ver', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='vc_ver', ctx=Load()), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_find_latest_available_vs_ver', ctx=Load()), args=[], keywords=[])]))], decorator_list=[]), FunctionDef(name='_find_latest_available_vs_ver', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Find the latest VC version\n\n        Return\n        ------\n        float\n            version\n        ')), Assign(targets=[Name(id='reg_vc_vers', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='find_reg_vs_vers', ctx=Load()), args=[], keywords=[])), If(test=UnaryOp(op=Not(), operand=BoolOp(op=Or(), values=[Name(id='reg_vc_vers', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='known_vs_paths', ctx=Load())])), body=[Raise(exc=Call(func=Attribute(value=Attribute(value=Name(id='distutils', ctx=Load()), attr='errors', ctx=Load()), attr='DistutilsPlatformError', ctx=Load()), args=[Constant(value='No Microsoft Visual C++ version found')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='vc_vers', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Name(id='reg_vc_vers', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='vc_vers', ctx=Load()), attr='update', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='known_vs_paths', ctx=Load())], keywords=[])), Return(value=Subscript(value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='vc_vers', ctx=Load())], keywords=[]), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))], decorator_list=[]), FunctionDef(name='find_reg_vs_vers', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Find Microsoft Visual Studio versions available in registry.\n\n        Return\n        ------\n        list of float\n            Versions\n        ')), Assign(targets=[Name(id='ms', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='ri', ctx=Load()), attr='microsoft', ctx=Load())), Assign(targets=[Name(id='vckeys', ctx=Store())], value=Tuple(elts=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='ri', ctx=Load()), attr='vc', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='ri', ctx=Load()), attr='vc_for_python', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='ri', ctx=Load()), attr='vs', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='vs_vers', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='hkey', ctx=Store()), Name(id='key', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='itertools', ctx=Load()), attr='product', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='ri', ctx=Load()), attr='HKEYS', ctx=Load()), Name(id='vckeys', ctx=Load())], keywords=[]), body=[Try(body=[Assign(targets=[Name(id='bkey', ctx=Store())], value=Call(func=Attribute(value=Name(id='winreg', ctx=Load()), attr='OpenKey', ctx=Load()), args=[Name(id='hkey', ctx=Load()), Call(func=Name(id='ms', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[]), Constant(value=0), Attribute(value=Name(id='winreg', ctx=Load()), attr='KEY_READ', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='OSError', ctx=Load()), Name(id='IOError', ctx=Load())], ctx=Load()), body=[Continue()])], orelse=[], finalbody=[]), With(items=[withitem(context_expr=Name(id='bkey', ctx=Load()))], body=[Assign(targets=[Tuple(elts=[Name(id='subkeys', ctx=Store()), Name(id='values', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='winreg', ctx=Load()), attr='QueryInfoKey', ctx=Load()), args=[Name(id='bkey', ctx=Load())], keywords=[])), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='values', ctx=Load())], keywords=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='contextlib', ctx=Load()), attr='suppress', ctx=Load()), args=[Name(id='ValueError', ctx=Load())], keywords=[]))], body=[Assign(targets=[Name(id='ver', ctx=Store())], value=Call(func=Name(id='float', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Name(id='winreg', ctx=Load()), attr='EnumValue', ctx=Load()), args=[Name(id='bkey', ctx=Load()), Name(id='i', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='ver', ctx=Load()), ops=[NotIn()], comparators=[Name(id='vs_vers', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='vs_vers', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='ver', ctx=Load())], keywords=[]))], orelse=[])])], orelse=[]), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='subkeys', ctx=Load())], keywords=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='contextlib', ctx=Load()), attr='suppress', ctx=Load()), args=[Name(id='ValueError', ctx=Load())], keywords=[]))], body=[Assign(targets=[Name(id='ver', ctx=Store())], value=Call(func=Name(id='float', ctx=Load()), args=[Call(func=Attribute(value=Name(id='winreg', ctx=Load()), attr='EnumKey', ctx=Load()), args=[Name(id='bkey', ctx=Load()), Name(id='i', ctx=Load())], keywords=[])], keywords=[])), If(test=Compare(left=Name(id='ver', ctx=Load()), ops=[NotIn()], comparators=[Name(id='vs_vers', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='vs_vers', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='ver', ctx=Load())], keywords=[]))], orelse=[])])], orelse=[])])], orelse=[]), Return(value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='vs_vers', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='find_programdata_vs_vers', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Find Visual studio 2017+ versions from information in\n        "C:\\ProgramData\\Microsoft\\VisualStudio\\Packages\\_Instances".\n\n        Return\n        ------\n        dict\n            float version as key, path as value.\n        ')), Assign(targets=[Name(id='vs_versions', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='instances_dir', ctx=Store())], value=Constant(value='C:\\ProgramData\\Microsoft\\VisualStudio\\Packages\\_Instances')), Try(body=[Assign(targets=[Name(id='hashed_names', ctx=Store())], value=Call(func=Name(id='listdir', ctx=Load()), args=[Name(id='instances_dir', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='OSError', ctx=Load()), Name(id='IOError', ctx=Load())], ctx=Load()), body=[Return(value=Name(id='vs_versions', ctx=Load()))])], orelse=[], finalbody=[]), For(target=Name(id='name', ctx=Store()), iter=Name(id='hashed_names', ctx=Load()), body=[Try(body=[Assign(targets=[Name(id='state_path', ctx=Store())], value=Call(func=Name(id='join', ctx=Load()), args=[Name(id='instances_dir', ctx=Load()), Name(id='name', ctx=Load()), Constant(value='state.json')], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='state_path', ctx=Load()), Constant(value='rt')], keywords=[keyword(arg='encoding', value=Constant(value='utf-8'))]), optional_vars=Name(id='state_file', ctx=Store()))], body=[Assign(targets=[Name(id='state', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='state_file', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='vs_path', ctx=Store())], value=Subscript(value=Name(id='state', ctx=Load()), slice=Constant(value='installationPath'), ctx=Load())), Expr(value=Call(func=Name(id='listdir', ctx=Load()), args=[Call(func=Name(id='join', ctx=Load()), args=[Name(id='vs_path', ctx=Load()), Constant(value='VC\\Tools\\MSVC')], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Name(id='vs_versions', ctx=Load()), slice=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_as_float_version', ctx=Load()), args=[Subscript(value=Name(id='state', ctx=Load()), slice=Constant(value='installationVersion'), ctx=Load())], keywords=[]), ctx=Store())], value=Name(id='vs_path', ctx=Load()))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='OSError', ctx=Load()), Name(id='IOError', ctx=Load()), Name(id='KeyError', ctx=Load())], ctx=Load()), body=[Continue()])], orelse=[], finalbody=[])], orelse=[]), Return(value=Name(id='vs_versions', ctx=Load()))], decorator_list=[]), FunctionDef(name='_as_float_version', args=arguments(posonlyargs=[], args=[arg(arg='version')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return a string version as a simplified float version (major.minor)\n\n        Parameters\n        ----------\n        version: str\n            Version.\n\n        Return\n        ------\n        float\n            version\n        ')), Return(value=Call(func=Name(id='float', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='.'), attr='join', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Name(id='version', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[]), slice=Slice(upper=Constant(value=2)), ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='VSInstallDir', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Microsoft Visual Studio directory.\n\n        Return\n        ------\n        str\n            path\n        ')), Assign(targets=[Name(id='default', ctx=Store())], value=Call(func=Name(id='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='ProgramFilesx86', ctx=Load()), BinOp(left=Constant(value='Microsoft Visual Studio %0.1f'), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='vs_ver', ctx=Load()))], keywords=[])), Return(value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='ri', ctx=Load()), attr='lookup', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='ri', ctx=Load()), attr='vs', ctx=Load()), BinOp(left=Constant(value='%0.1f'), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='vs_ver', ctx=Load()))], keywords=[]), Name(id='default', ctx=Load())]))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='VCInstallDir', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Microsoft Visual C++ directory.\n\n        Return\n        ------\n        str\n            path\n        ')), Assign(targets=[Name(id='path', ctx=Store())], value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_guess_vc', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_guess_vc_legacy', ctx=Load()), args=[], keywords=[])])), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isdir', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Constant(value='Microsoft Visual C++ directory not found')), Raise(exc=Call(func=Attribute(value=Attribute(value=Name(id='distutils', ctx=Load()), attr='errors', ctx=Load()), attr='DistutilsPlatformError', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='path', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='_guess_vc', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Locate Visual C++ for VS2017+.\n\n        Return\n        ------\n        str\n            path\n        ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='vs_ver', ctx=Load()), ops=[LtE()], comparators=[Constant(value=14.0)]), body=[Return(value=Constant(value=''))], orelse=[]), Try(body=[Assign(targets=[Name(id='vs_dir', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='known_vs_paths', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='vs_ver', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Assign(targets=[Name(id='vs_dir', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='VSInstallDir', ctx=Load()))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='guess_vc', ctx=Store())], value=Call(func=Name(id='join', ctx=Load()), args=[Name(id='vs_dir', ctx=Load()), Constant(value='VC\\Tools\\MSVC')], keywords=[])), Try(body=[Assign(targets=[Name(id='vc_ver', ctx=Store())], value=Subscript(value=Call(func=Name(id='listdir', ctx=Load()), args=[Name(id='guess_vc', ctx=Load())], keywords=[]), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='vc_ver', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_as_float_version', ctx=Load()), args=[Name(id='vc_ver', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='join', ctx=Load()), args=[Name(id='guess_vc', ctx=Load()), Name(id='vc_ver', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='OSError', ctx=Load()), Name(id='IOError', ctx=Load()), Name(id='IndexError', ctx=Load())], ctx=Load()), body=[Return(value=Constant(value=''))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='_guess_vc_legacy', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Locate Visual C++ for versions prior to 2017.\n\n        Return\n        ------\n        str\n            path\n        ')), Assign(targets=[Name(id='default', ctx=Store())], value=Call(func=Name(id='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='ProgramFilesx86', ctx=Load()), BinOp(left=Constant(value='Microsoft Visual Studio %0.1f\\VC'), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='vs_ver', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='reg_path', ctx=Store())], value=Call(func=Name(id='join', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='ri', ctx=Load()), attr='vc_for_python', ctx=Load()), BinOp(left=Constant(value='%0.1f'), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='vs_ver', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='python_vc', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='ri', ctx=Load()), attr='lookup', ctx=Load()), args=[Name(id='reg_path', ctx=Load()), Constant(value='installdir')], keywords=[])), Assign(targets=[Name(id='default_vc', ctx=Store())], value=IfExp(test=Name(id='python_vc', ctx=Load()), body=Call(func=Name(id='join', ctx=Load()), args=[Name(id='python_vc', ctx=Load()), Constant(value='VC')], keywords=[]), orelse=Name(id='default', ctx=Load()))), Return(value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='ri', ctx=Load()), attr='lookup', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='ri', ctx=Load()), attr='vc', ctx=Load()), BinOp(left=Constant(value='%0.1f'), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='vs_ver', ctx=Load()))], keywords=[]), Name(id='default_vc', ctx=Load())]))], decorator_list=[]), FunctionDef(name='WindowsSdkVersion', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Microsoft Windows SDK versions for specified MSVC++ version.\n\n        Return\n        ------\n        tuple of str\n            versions\n        ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='vs_ver', ctx=Load()), ops=[LtE()], comparators=[Constant(value=9.0)]), body=[Return(value=Tuple(elts=[Constant(value='7.0'), Constant(value='6.1'), Constant(value='6.0a')], ctx=Load()))], orelse=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='vs_ver', ctx=Load()), ops=[Eq()], comparators=[Constant(value=10.0)]), body=[Return(value=Tuple(elts=[Constant(value='7.1'), Constant(value='7.0a')], ctx=Load()))], orelse=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='vs_ver', ctx=Load()), ops=[Eq()], comparators=[Constant(value=11.0)]), body=[Return(value=Tuple(elts=[Constant(value='8.0'), Constant(value='8.0a')], ctx=Load()))], orelse=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='vs_ver', ctx=Load()), ops=[Eq()], comparators=[Constant(value=12.0)]), body=[Return(value=Tuple(elts=[Constant(value='8.1'), Constant(value='8.1a')], ctx=Load()))], orelse=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='vs_ver', ctx=Load()), ops=[GtE()], comparators=[Constant(value=14.0)]), body=[Return(value=Tuple(elts=[Constant(value='10.0'), Constant(value='8.1')], ctx=Load()))], orelse=[])])])])])], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='WindowsSdkLastVersion', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Microsoft Windows SDK last version.\n\n        Return\n        ------\n        str\n            version\n        ')), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_use_last_dir_name', ctx=Load()), args=[Call(func=Name(id='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='WindowsSdkDir', ctx=Load()), Constant(value='lib')], keywords=[])], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='WindowsSdkDir', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Microsoft Windows SDK directory.\n\n        Return\n        ------\n        str\n            path\n        ')), Assign(targets=[Name(id='sdkdir', ctx=Store())], value=Constant(value='')), For(target=Name(id='ver', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='WindowsSdkVersion', ctx=Load()), body=[Assign(targets=[Name(id='loc', ctx=Store())], value=Call(func=Name(id='join', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='ri', ctx=Load()), attr='windows_sdk', ctx=Load()), BinOp(left=Constant(value='v%s'), op=Mod(), right=Name(id='ver', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='sdkdir', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='ri', ctx=Load()), attr='lookup', ctx=Load()), args=[Name(id='loc', ctx=Load()), Constant(value='installationfolder')], keywords=[])), If(test=Name(id='sdkdir', ctx=Load()), body=[Break()], orelse=[])], orelse=[]), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Name(id='sdkdir', ctx=Load())), UnaryOp(op=Not(), operand=Call(func=Name(id='isdir', ctx=Load()), args=[Name(id='sdkdir', ctx=Load())], keywords=[]))]), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Name(id='join', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='ri', ctx=Load()), attr='vc_for_python', ctx=Load()), BinOp(left=Constant(value='%0.1f'), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='vc_ver', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='install_base', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='ri', ctx=Load()), attr='lookup', ctx=Load()), args=[Name(id='path', ctx=Load()), Constant(value='installdir')], keywords=[])), If(test=Name(id='install_base', ctx=Load()), body=[Assign(targets=[Name(id='sdkdir', ctx=Store())], value=Call(func=Name(id='join', ctx=Load()), args=[Name(id='install_base', ctx=Load()), Constant(value='WinSDK')], keywords=[]))], orelse=[])], orelse=[]), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Name(id='sdkdir', ctx=Load())), UnaryOp(op=Not(), operand=Call(func=Name(id='isdir', ctx=Load()), args=[Name(id='sdkdir', ctx=Load())], keywords=[]))]), body=[For(target=Name(id='ver', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='WindowsSdkVersion', ctx=Load()), body=[Assign(targets=[Name(id='intver', ctx=Store())], value=Subscript(value=Name(id='ver', ctx=Load()), slice=Slice(upper=Call(func=Attribute(value=Name(id='ver', ctx=Load()), attr='rfind', ctx=Load()), args=[Constant(value='.')], keywords=[])), ctx=Load())), Assign(targets=[Name(id='path', ctx=Store())], value=BinOp(left=Constant(value='Microsoft SDKs\\Windows Kits\\%s'), op=Mod(), right=Name(id='intver', ctx=Load()))), Assign(targets=[Name(id='d', ctx=Store())], value=Call(func=Name(id='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='ProgramFiles', ctx=Load()), Name(id='path', ctx=Load())], keywords=[])), If(test=Call(func=Name(id='isdir', ctx=Load()), args=[Name(id='d', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='sdkdir', ctx=Store())], value=Name(id='d', ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Name(id='sdkdir', ctx=Load())), UnaryOp(op=Not(), operand=Call(func=Name(id='isdir', ctx=Load()), args=[Name(id='sdkdir', ctx=Load())], keywords=[]))]), body=[For(target=Name(id='ver', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='WindowsSdkVersion', ctx=Load()), body=[Assign(targets=[Name(id='path', ctx=Store())], value=BinOp(left=Constant(value='Microsoft SDKs\\Windows\\v%s'), op=Mod(), right=Name(id='ver', ctx=Load()))), Assign(targets=[Name(id='d', ctx=Store())], value=Call(func=Name(id='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='ProgramFiles', ctx=Load()), Name(id='path', ctx=Load())], keywords=[])), If(test=Call(func=Name(id='isdir', ctx=Load()), args=[Name(id='d', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='sdkdir', ctx=Store())], value=Name(id='d', ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='sdkdir', ctx=Load())), body=[Assign(targets=[Name(id='sdkdir', ctx=Store())], value=Call(func=Name(id='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='VCInstallDir', ctx=Load()), Constant(value='PlatformSDK')], keywords=[]))], orelse=[]), Return(value=Name(id='sdkdir', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='WindowsSDKExecutablePath', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Microsoft Windows SDK executable directory.\n\n        Return\n        ------\n        str\n            path\n        ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='vs_ver', ctx=Load()), ops=[LtE()], comparators=[Constant(value=11.0)]), body=[Assign(targets=[Name(id='netfxver', ctx=Store())], value=Constant(value=35)), Assign(targets=[Name(id='arch', ctx=Store())], value=Constant(value=''))], orelse=[Assign(targets=[Name(id='netfxver', ctx=Store())], value=Constant(value=40)), Assign(targets=[Name(id='hidex86', ctx=Store())], value=IfExp(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='vs_ver', ctx=Load()), ops=[LtE()], comparators=[Constant(value=12.0)]), body=Constant(value=True), orelse=Constant(value=False))), Assign(targets=[Name(id='arch', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='pi', ctx=Load()), attr='current_dir', ctx=Load()), args=[], keywords=[keyword(arg='x64', value=Constant(value=True)), keyword(arg='hidex86', value=Name(id='hidex86', ctx=Load()))]))]), Assign(targets=[Name(id='fx', ctx=Store())], value=BinOp(left=Constant(value='WinSDK-NetFx%dTools%s'), op=Mod(), right=Tuple(elts=[Name(id='netfxver', ctx=Load()), Call(func=Attribute(value=Name(id='arch', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='\\'), Constant(value='-')], keywords=[])], ctx=Load()))), Assign(targets=[Name(id='regpaths', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='vs_ver', ctx=Load()), ops=[GtE()], comparators=[Constant(value=14.0)]), body=[For(target=Name(id='ver', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='NetFxSdkVersion', ctx=Load()), body=[AugAssign(target=Name(id='regpaths', ctx=Store()), op=Add(), value=List(elts=[Call(func=Name(id='join', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='ri', ctx=Load()), attr='netfx_sdk', ctx=Load()), Name(id='ver', ctx=Load()), Name(id='fx', ctx=Load())], keywords=[])], ctx=Load()))], orelse=[])], orelse=[]), For(target=Name(id='ver', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='WindowsSdkVersion', ctx=Load()), body=[AugAssign(target=Name(id='regpaths', ctx=Store()), op=Add(), value=List(elts=[Call(func=Name(id='join', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='ri', ctx=Load()), attr='windows_sdk', ctx=Load()), BinOp(left=Constant(value='v%sA'), op=Mod(), right=Name(id='ver', ctx=Load())), Name(id='fx', ctx=Load())], keywords=[])], ctx=Load()))], orelse=[]), For(target=Name(id='path', ctx=Store()), iter=Name(id='regpaths', ctx=Load()), body=[Assign(targets=[Name(id='execpath', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='ri', ctx=Load()), attr='lookup', ctx=Load()), args=[Name(id='path', ctx=Load()), Constant(value='installationfolder')], keywords=[])), If(test=Name(id='execpath', ctx=Load()), body=[Return(value=Name(id='execpath', ctx=Load()))], orelse=[])], orelse=[])], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='FSharpInstallDir', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Microsoft Visual F# directory.\n\n        Return\n        ------\n        str\n            path\n        ')), Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Name(id='join', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='ri', ctx=Load()), attr='visualstudio', ctx=Load()), BinOp(left=Constant(value='%0.1f\\Setup\\F#'), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='vs_ver', ctx=Load()))], keywords=[])), Return(value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='ri', ctx=Load()), attr='lookup', ctx=Load()), args=[Name(id='path', ctx=Load()), Constant(value='productdir')], keywords=[]), Constant(value='')]))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='UniversalCRTSdkDir', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Microsoft Universal CRT SDK directory.\n\n        Return\n        ------\n        str\n            path\n        ')), Assign(targets=[Name(id='vers', ctx=Store())], value=IfExp(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='vs_ver', ctx=Load()), ops=[GtE()], comparators=[Constant(value=14.0)]), body=Tuple(elts=[Constant(value='10'), Constant(value='81')], ctx=Load()), orelse=Tuple(elts=[], ctx=Load()))), For(target=Name(id='ver', ctx=Store()), iter=Name(id='vers', ctx=Load()), body=[Assign(targets=[Name(id='sdkdir', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='ri', ctx=Load()), attr='lookup', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='ri', ctx=Load()), attr='windows_kits_roots', ctx=Load()), BinOp(left=Constant(value='kitsroot%s'), op=Mod(), right=Name(id='ver', ctx=Load()))], keywords=[])), If(test=Name(id='sdkdir', ctx=Load()), body=[Return(value=BoolOp(op=Or(), values=[Name(id='sdkdir', ctx=Load()), Constant(value='')]))], orelse=[])], orelse=[])], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='UniversalCRTSdkLastVersion', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Microsoft Universal C Runtime SDK last version.\n\n        Return\n        ------\n        str\n            version\n        ')), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_use_last_dir_name', ctx=Load()), args=[Call(func=Name(id='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='UniversalCRTSdkDir', ctx=Load()), Constant(value='lib')], keywords=[])], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='NetFxSdkVersion', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Microsoft .NET Framework SDK versions.\n\n        Return\n        ------\n        tuple of str\n            versions\n        ')), Return(value=IfExp(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='vs_ver', ctx=Load()), ops=[GtE()], comparators=[Constant(value=14.0)]), body=Tuple(elts=[Constant(value='4.7.2'), Constant(value='4.7.1'), Constant(value='4.7'), Constant(value='4.6.2'), Constant(value='4.6.1'), Constant(value='4.6'), Constant(value='4.5.2'), Constant(value='4.5.1'), Constant(value='4.5')], ctx=Load()), orelse=Tuple(elts=[], ctx=Load())))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='NetFxSdkDir', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Microsoft .NET Framework SDK directory.\n\n        Return\n        ------\n        str\n            path\n        ')), Assign(targets=[Name(id='sdkdir', ctx=Store())], value=Constant(value='')), For(target=Name(id='ver', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='NetFxSdkVersion', ctx=Load()), body=[Assign(targets=[Name(id='loc', ctx=Store())], value=Call(func=Name(id='join', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='ri', ctx=Load()), attr='netfx_sdk', ctx=Load()), Name(id='ver', ctx=Load())], keywords=[])), Assign(targets=[Name(id='sdkdir', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='ri', ctx=Load()), attr='lookup', ctx=Load()), args=[Name(id='loc', ctx=Load()), Constant(value='kitsinstallationfolder')], keywords=[])), If(test=Name(id='sdkdir', ctx=Load()), body=[Break()], orelse=[])], orelse=[]), Return(value=Name(id='sdkdir', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='FrameworkDir32', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Microsoft .NET Framework 32bit directory.\n\n        Return\n        ------\n        str\n            path\n        ')), Assign(targets=[Name(id='guess_fw', ctx=Store())], value=Call(func=Name(id='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='WinDir', ctx=Load()), Constant(value='Microsoft.NET\\Framework')], keywords=[])), Return(value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='ri', ctx=Load()), attr='lookup', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='ri', ctx=Load()), attr='vc', ctx=Load()), Constant(value='frameworkdir32')], keywords=[]), Name(id='guess_fw', ctx=Load())]))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='FrameworkDir64', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Microsoft .NET Framework 64bit directory.\n\n        Return\n        ------\n        str\n            path\n        ')), Assign(targets=[Name(id='guess_fw', ctx=Store())], value=Call(func=Name(id='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='WinDir', ctx=Load()), Constant(value='Microsoft.NET\\Framework64')], keywords=[])), Return(value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='ri', ctx=Load()), attr='lookup', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='ri', ctx=Load()), attr='vc', ctx=Load()), Constant(value='frameworkdir64')], keywords=[]), Name(id='guess_fw', ctx=Load())]))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='FrameworkVersion32', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Microsoft .NET Framework 32bit versions.\n\n        Return\n        ------\n        tuple of str\n            versions\n        ')), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_find_dot_net_versions', ctx=Load()), args=[Constant(value=32)], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='FrameworkVersion64', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Microsoft .NET Framework 64bit versions.\n\n        Return\n        ------\n        tuple of str\n            versions\n        ')), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_find_dot_net_versions', ctx=Load()), args=[Constant(value=64)], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='_find_dot_net_versions', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='bits')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Find Microsoft .NET Framework versions.\n\n        Parameters\n        ----------\n        bits: int\n            Platform number of bits: 32 or 64.\n\n        Return\n        ------\n        tuple of str\n            versions\n        ')), Assign(targets=[Name(id='reg_ver', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='ri', ctx=Load()), attr='lookup', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='ri', ctx=Load()), attr='vc', ctx=Load()), BinOp(left=Constant(value='frameworkver%d'), op=Mod(), right=Name(id='bits', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='dot_net_dir', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='self', ctx=Load()), BinOp(left=Constant(value='FrameworkDir%d'), op=Mod(), right=Name(id='bits', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='ver', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='reg_ver', ctx=Load()), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_use_last_dir_name', ctx=Load()), args=[Name(id='dot_net_dir', ctx=Load()), Constant(value='v')], keywords=[]), Constant(value='')])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='vs_ver', ctx=Load()), ops=[GtE()], comparators=[Constant(value=12.0)]), body=[Return(value=Tuple(elts=[Name(id='ver', ctx=Load()), Constant(value='v4.0')], ctx=Load()))], orelse=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='vs_ver', ctx=Load()), ops=[GtE()], comparators=[Constant(value=10.0)]), body=[Return(value=Tuple(elts=[IfExp(test=Compare(left=Subscript(value=Call(func=Attribute(value=Name(id='ver', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), slice=Slice(upper=Constant(value=2)), ctx=Load()), ops=[NotEq()], comparators=[Constant(value='v4')]), body=Constant(value='v4.0.30319'), orelse=Name(id='ver', ctx=Load())), Constant(value='v3.5')], ctx=Load()))], orelse=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='vs_ver', ctx=Load()), ops=[Eq()], comparators=[Constant(value=9.0)]), body=[Return(value=Tuple(elts=[Constant(value='v3.5'), Constant(value='v2.0.50727')], ctx=Load()))], orelse=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='vs_ver', ctx=Load()), ops=[Eq()], comparators=[Constant(value=8.0)]), body=[Return(value=Tuple(elts=[Constant(value='v3.0'), Constant(value='v2.0.50727')], ctx=Load()))], orelse=[])])])])], decorator_list=[]), FunctionDef(name='_use_last_dir_name', args=arguments(posonlyargs=[], args=[arg(arg='path'), arg(arg='prefix')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='')]), body=[Expr(value=Constant(value="\n        Return name of the last dir in path or '' if no dir found.\n\n        Parameters\n        ----------\n        path: str\n            Use dirs in this path\n        prefix: str\n            Use only dirs starting by this prefix\n\n        Return\n        ------\n        str\n            name\n        ")), Assign(targets=[Name(id='matching_dirs', ctx=Store())], value=GeneratorExp(elt=Name(id='dir_name', ctx=Load()), generators=[comprehension(target=Name(id='dir_name', ctx=Store()), iter=Call(func=Name(id='reversed', ctx=Load()), args=[Call(func=Name(id='listdir', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])], keywords=[]), ifs=[BoolOp(op=And(), values=[Call(func=Name(id='isdir', ctx=Load()), args=[Call(func=Name(id='join', ctx=Load()), args=[Name(id='path', ctx=Load()), Name(id='dir_name', ctx=Load())], keywords=[])], keywords=[]), Call(func=Attribute(value=Name(id='dir_name', ctx=Load()), attr='startswith', ctx=Load()), args=[Name(id='prefix', ctx=Load())], keywords=[])])], is_async=0)])), Return(value=BoolOp(op=Or(), values=[Call(func=Name(id='next', ctx=Load()), args=[Name(id='matching_dirs', ctx=Load()), Constant(value=None)], keywords=[]), Constant(value='')]))], decorator_list=[Name(id='staticmethod', ctx=Load())])], decorator_list=[]), ClassDef(name='EnvironmentInfo', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    Return environment variables for specified Microsoft Visual C++ version\n    and platform : Lib, Include, Path and libpath.\n\n    This function is compatible with Microsoft Visual C++ 9.0 to 14.X.\n\n    Script created by analysing Microsoft environment configuration files like\n    "vcvars[...].bat", "SetEnv.Cmd", "vcbuildtools.bat", ...\n\n    Parameters\n    ----------\n    arch: str\n        Target architecture.\n    vc_ver: float\n        Required Microsoft Visual C++ version. If not set, autodetect the last\n        version.\n    vc_min_ver: float\n        Minimum Microsoft Visual C++ version.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='arch'), arg(arg='vc_ver'), arg(arg='vc_min_ver')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=0)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='pi', ctx=Store())], value=Call(func=Name(id='PlatformInfo', ctx=Load()), args=[Name(id='arch', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='ri', ctx=Store())], value=Call(func=Name(id='RegistryInfo', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pi', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='si', ctx=Store())], value=Call(func=Name(id='SystemInfo', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='ri', ctx=Load()), Name(id='vc_ver', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='vc_ver', ctx=Load()), ops=[Lt()], comparators=[Name(id='vc_min_ver', ctx=Load())]), body=[Assign(targets=[Name(id='err', ctx=Store())], value=Constant(value='No suitable Microsoft Visual C++ version found')), Raise(exc=Call(func=Attribute(value=Attribute(value=Name(id='distutils', ctx=Load()), attr='errors', ctx=Load()), attr='DistutilsPlatformError', ctx=Load()), args=[Name(id='err', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='vs_ver', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Microsoft Visual Studio.\n\n        Return\n        ------\n        float\n            version\n        ')), Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='si', ctx=Load()), attr='vs_ver', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='vc_ver', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Microsoft Visual C++ version.\n\n        Return\n        ------\n        float\n            version\n        ')), Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='si', ctx=Load()), attr='vc_ver', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='VSTools', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Microsoft Visual Studio Tools.\n\n        Return\n        ------\n        list of str\n            paths\n        ')), Assign(targets=[Name(id='paths', ctx=Store())], value=List(elts=[Constant(value='Common7\\IDE'), Constant(value='Common7\\Tools')], ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='vs_ver', ctx=Load()), ops=[GtE()], comparators=[Constant(value=14.0)]), body=[Assign(targets=[Name(id='arch_subdir', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='pi', ctx=Load()), attr='current_dir', ctx=Load()), args=[], keywords=[keyword(arg='hidex86', value=Constant(value=True)), keyword(arg='x64', value=Constant(value=True))])), AugAssign(target=Name(id='paths', ctx=Store()), op=Add(), value=List(elts=[Constant(value='Common7\\IDE\\CommonExtensions\\Microsoft\\TestWindow')], ctx=Load())), AugAssign(target=Name(id='paths', ctx=Store()), op=Add(), value=List(elts=[Constant(value='Team Tools\\Performance Tools')], ctx=Load())), AugAssign(target=Name(id='paths', ctx=Store()), op=Add(), value=List(elts=[BinOp(left=Constant(value='Team Tools\\Performance Tools%s'), op=Mod(), right=Name(id='arch_subdir', ctx=Load()))], ctx=Load()))], orelse=[]), Return(value=ListComp(elt=Call(func=Name(id='join', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='si', ctx=Load()), attr='VSInstallDir', ctx=Load()), Name(id='path', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='path', ctx=Store()), iter=Name(id='paths', ctx=Load()), ifs=[], is_async=0)]))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='VCIncludes', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Microsoft Visual C++ & Microsoft Foundation Class Includes.\n\n        Return\n        ------\n        list of str\n            paths\n        ')), Return(value=List(elts=[Call(func=Name(id='join', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='si', ctx=Load()), attr='VCInstallDir', ctx=Load()), Constant(value='Include')], keywords=[]), Call(func=Name(id='join', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='si', ctx=Load()), attr='VCInstallDir', ctx=Load()), Constant(value='ATLMFC\\Include')], keywords=[])], ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='VCLibraries', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Microsoft Visual C++ & Microsoft Foundation Class Libraries.\n\n        Return\n        ------\n        list of str\n            paths\n        ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='vs_ver', ctx=Load()), ops=[GtE()], comparators=[Constant(value=15.0)]), body=[Assign(targets=[Name(id='arch_subdir', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='pi', ctx=Load()), attr='target_dir', ctx=Load()), args=[], keywords=[keyword(arg='x64', value=Constant(value=True))]))], orelse=[Assign(targets=[Name(id='arch_subdir', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='pi', ctx=Load()), attr='target_dir', ctx=Load()), args=[], keywords=[keyword(arg='hidex86', value=Constant(value=True))]))]), Assign(targets=[Name(id='paths', ctx=Store())], value=List(elts=[BinOp(left=Constant(value='Lib%s'), op=Mod(), right=Name(id='arch_subdir', ctx=Load())), BinOp(left=Constant(value='ATLMFC\\Lib%s'), op=Mod(), right=Name(id='arch_subdir', ctx=Load()))], ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='vs_ver', ctx=Load()), ops=[GtE()], comparators=[Constant(value=14.0)]), body=[AugAssign(target=Name(id='paths', ctx=Store()), op=Add(), value=List(elts=[BinOp(left=Constant(value='Lib\\store%s'), op=Mod(), right=Name(id='arch_subdir', ctx=Load()))], ctx=Load()))], orelse=[]), Return(value=ListComp(elt=Call(func=Name(id='join', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='si', ctx=Load()), attr='VCInstallDir', ctx=Load()), Name(id='path', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='path', ctx=Store()), iter=Name(id='paths', ctx=Load()), ifs=[], is_async=0)]))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='VCStoreRefs', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Microsoft Visual C++ store references Libraries.\n\n        Return\n        ------\n        list of str\n            paths\n        ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='vs_ver', ctx=Load()), ops=[Lt()], comparators=[Constant(value=14.0)]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Return(value=List(elts=[Call(func=Name(id='join', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='si', ctx=Load()), attr='VCInstallDir', ctx=Load()), Constant(value='Lib\\store\\references')], keywords=[])], ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='VCTools', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Microsoft Visual C++ Tools.\n\n        Return\n        ------\n        list of str\n            paths\n        ')), Assign(targets=[Name(id='si', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='si', ctx=Load())), Assign(targets=[Name(id='tools', ctx=Store())], value=List(elts=[Call(func=Name(id='join', ctx=Load()), args=[Attribute(value=Name(id='si', ctx=Load()), attr='VCInstallDir', ctx=Load()), Constant(value='VCPackages')], keywords=[])], ctx=Load())), Assign(targets=[Name(id='forcex86', ctx=Store())], value=IfExp(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='vs_ver', ctx=Load()), ops=[LtE()], comparators=[Constant(value=10.0)]), body=Constant(value=True), orelse=Constant(value=False))), Assign(targets=[Name(id='arch_subdir', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='pi', ctx=Load()), attr='cross_dir', ctx=Load()), args=[Name(id='forcex86', ctx=Load())], keywords=[])), If(test=Name(id='arch_subdir', ctx=Load()), body=[AugAssign(target=Name(id='tools', ctx=Store()), op=Add(), value=List(elts=[Call(func=Name(id='join', ctx=Load()), args=[Attribute(value=Name(id='si', ctx=Load()), attr='VCInstallDir', ctx=Load()), BinOp(left=Constant(value='Bin%s'), op=Mod(), right=Name(id='arch_subdir', ctx=Load()))], keywords=[])], ctx=Load()))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='vs_ver', ctx=Load()), ops=[Eq()], comparators=[Constant(value=14.0)]), body=[Assign(targets=[Name(id='path', ctx=Store())], value=BinOp(left=Constant(value='Bin%s'), op=Mod(), right=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='pi', ctx=Load()), attr='current_dir', ctx=Load()), args=[], keywords=[keyword(arg='hidex86', value=Constant(value=True))]))), AugAssign(target=Name(id='tools', ctx=Store()), op=Add(), value=List(elts=[Call(func=Name(id='join', ctx=Load()), args=[Attribute(value=Name(id='si', ctx=Load()), attr='VCInstallDir', ctx=Load()), Name(id='path', ctx=Load())], keywords=[])], ctx=Load()))], orelse=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='vs_ver', ctx=Load()), ops=[GtE()], comparators=[Constant(value=15.0)]), body=[Assign(targets=[Name(id='host_dir', ctx=Store())], value=IfExp(test=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='pi', ctx=Load()), attr='current_is_x86', ctx=Load()), args=[], keywords=[]), body=Constant(value='bin\\HostX86%s'), orelse=Constant(value='bin\\HostX64%s'))), AugAssign(target=Name(id='tools', ctx=Store()), op=Add(), value=List(elts=[Call(func=Name(id='join', ctx=Load()), args=[Attribute(value=Name(id='si', ctx=Load()), attr='VCInstallDir', ctx=Load()), BinOp(left=Name(id='host_dir', ctx=Load()), op=Mod(), right=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='pi', ctx=Load()), attr='target_dir', ctx=Load()), args=[], keywords=[keyword(arg='x64', value=Constant(value=True))]))], keywords=[])], ctx=Load())), If(test=Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='pi', ctx=Load()), attr='current_cpu', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='pi', ctx=Load()), attr='target_cpu', ctx=Load())]), body=[AugAssign(target=Name(id='tools', ctx=Store()), op=Add(), value=List(elts=[Call(func=Name(id='join', ctx=Load()), args=[Attribute(value=Name(id='si', ctx=Load()), attr='VCInstallDir', ctx=Load()), BinOp(left=Name(id='host_dir', ctx=Load()), op=Mod(), right=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='pi', ctx=Load()), attr='current_dir', ctx=Load()), args=[], keywords=[keyword(arg='x64', value=Constant(value=True))]))], keywords=[])], ctx=Load()))], orelse=[])], orelse=[AugAssign(target=Name(id='tools', ctx=Store()), op=Add(), value=List(elts=[Call(func=Name(id='join', ctx=Load()), args=[Attribute(value=Name(id='si', ctx=Load()), attr='VCInstallDir', ctx=Load()), Constant(value='Bin')], keywords=[])], ctx=Load()))])]), Return(value=Name(id='tools', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='OSLibraries', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Microsoft Windows SDK Libraries.\n\n        Return\n        ------\n        list of str\n            paths\n        ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='vs_ver', ctx=Load()), ops=[LtE()], comparators=[Constant(value=10.0)]), body=[Assign(targets=[Name(id='arch_subdir', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='pi', ctx=Load()), attr='target_dir', ctx=Load()), args=[], keywords=[keyword(arg='hidex86', value=Constant(value=True)), keyword(arg='x64', value=Constant(value=True))])), Return(value=List(elts=[Call(func=Name(id='join', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='si', ctx=Load()), attr='WindowsSdkDir', ctx=Load()), BinOp(left=Constant(value='Lib%s'), op=Mod(), right=Name(id='arch_subdir', ctx=Load()))], keywords=[])], ctx=Load()))], orelse=[Assign(targets=[Name(id='arch_subdir', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='pi', ctx=Load()), attr='target_dir', ctx=Load()), args=[], keywords=[keyword(arg='x64', value=Constant(value=True))])), Assign(targets=[Name(id='lib', ctx=Store())], value=Call(func=Name(id='join', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='si', ctx=Load()), attr='WindowsSdkDir', ctx=Load()), Constant(value='lib')], keywords=[])), Assign(targets=[Name(id='libver', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_sdk_subdir', ctx=Load())), Return(value=List(elts=[Call(func=Name(id='join', ctx=Load()), args=[Name(id='lib', ctx=Load()), BinOp(left=Constant(value='%sum%s'), op=Mod(), right=Tuple(elts=[Name(id='libver', ctx=Load()), Name(id='arch_subdir', ctx=Load())], ctx=Load()))], keywords=[])], ctx=Load()))])], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='OSIncludes', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Microsoft Windows SDK Include.\n\n        Return\n        ------\n        list of str\n            paths\n        ')), Assign(targets=[Name(id='include', ctx=Store())], value=Call(func=Name(id='join', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='si', ctx=Load()), attr='WindowsSdkDir', ctx=Load()), Constant(value='include')], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='vs_ver', ctx=Load()), ops=[LtE()], comparators=[Constant(value=10.0)]), body=[Return(value=List(elts=[Name(id='include', ctx=Load()), Call(func=Name(id='join', ctx=Load()), args=[Name(id='include', ctx=Load()), Constant(value='gl')], keywords=[])], ctx=Load()))], orelse=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='vs_ver', ctx=Load()), ops=[GtE()], comparators=[Constant(value=14.0)]), body=[Assign(targets=[Name(id='sdkver', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_sdk_subdir', ctx=Load()))], orelse=[Assign(targets=[Name(id='sdkver', ctx=Store())], value=Constant(value=''))]), Return(value=List(elts=[Call(func=Name(id='join', ctx=Load()), args=[Name(id='include', ctx=Load()), BinOp(left=Constant(value='%sshared'), op=Mod(), right=Name(id='sdkver', ctx=Load()))], keywords=[]), Call(func=Name(id='join', ctx=Load()), args=[Name(id='include', ctx=Load()), BinOp(left=Constant(value='%sum'), op=Mod(), right=Name(id='sdkver', ctx=Load()))], keywords=[]), Call(func=Name(id='join', ctx=Load()), args=[Name(id='include', ctx=Load()), BinOp(left=Constant(value='%swinrt'), op=Mod(), right=Name(id='sdkver', ctx=Load()))], keywords=[])], ctx=Load()))])], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='OSLibpath', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Microsoft Windows SDK Libraries Paths.\n\n        Return\n        ------\n        list of str\n            paths\n        ')), Assign(targets=[Name(id='ref', ctx=Store())], value=Call(func=Name(id='join', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='si', ctx=Load()), attr='WindowsSdkDir', ctx=Load()), Constant(value='References')], keywords=[])), Assign(targets=[Name(id='libpath', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='vs_ver', ctx=Load()), ops=[LtE()], comparators=[Constant(value=9.0)]), body=[AugAssign(target=Name(id='libpath', ctx=Store()), op=Add(), value=Attribute(value=Name(id='self', ctx=Load()), attr='OSLibraries', ctx=Load()))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='vs_ver', ctx=Load()), ops=[GtE()], comparators=[Constant(value=11.0)]), body=[AugAssign(target=Name(id='libpath', ctx=Store()), op=Add(), value=List(elts=[Call(func=Name(id='join', ctx=Load()), args=[Name(id='ref', ctx=Load()), Constant(value='CommonConfiguration\\Neutral')], keywords=[])], ctx=Load()))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='vs_ver', ctx=Load()), ops=[GtE()], comparators=[Constant(value=14.0)]), body=[AugAssign(target=Name(id='libpath', ctx=Store()), op=Add(), value=List(elts=[Name(id='ref', ctx=Load()), Call(func=Name(id='join', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='si', ctx=Load()), attr='WindowsSdkDir', ctx=Load()), Constant(value='UnionMetadata')], keywords=[]), Call(func=Name(id='join', ctx=Load()), args=[Name(id='ref', ctx=Load()), Constant(value='Windows.Foundation.UniversalApiContract'), Constant(value='1.0.0.0')], keywords=[]), Call(func=Name(id='join', ctx=Load()), args=[Name(id='ref', ctx=Load()), Constant(value='Windows.Foundation.FoundationContract'), Constant(value='1.0.0.0')], keywords=[]), Call(func=Name(id='join', ctx=Load()), args=[Name(id='ref', ctx=Load()), Constant(value='Windows.Networking.Connectivity.WwanContract'), Constant(value='1.0.0.0')], keywords=[]), Call(func=Name(id='join', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='si', ctx=Load()), attr='WindowsSdkDir', ctx=Load()), Constant(value='ExtensionSDKs'), Constant(value='Microsoft.VCLibs'), BinOp(left=Constant(value='%0.1f'), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='vs_ver', ctx=Load())), Constant(value='References'), Constant(value='CommonConfiguration'), Constant(value='neutral')], keywords=[])], ctx=Load()))], orelse=[]), Return(value=Name(id='libpath', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='SdkTools', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Microsoft Windows SDK Tools.\n\n        Return\n        ------\n        list of str\n            paths\n        ')), Return(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_sdk_tools', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='_sdk_tools', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Microsoft Windows SDK Tools paths generator.\n\n        Return\n        ------\n        generator of str\n            paths\n        ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='vs_ver', ctx=Load()), ops=[Lt()], comparators=[Constant(value=15.0)]), body=[Assign(targets=[Name(id='bin_dir', ctx=Store())], value=IfExp(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='vs_ver', ctx=Load()), ops=[LtE()], comparators=[Constant(value=11.0)]), body=Constant(value='Bin'), orelse=Constant(value='Bin\\x86'))), Expr(value=Yield(value=Call(func=Name(id='join', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='si', ctx=Load()), attr='WindowsSdkDir', ctx=Load()), Name(id='bin_dir', ctx=Load())], keywords=[])))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='pi', ctx=Load()), attr='current_is_x86', ctx=Load()), args=[], keywords=[])), body=[Assign(targets=[Name(id='arch_subdir', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='pi', ctx=Load()), attr='current_dir', ctx=Load()), args=[], keywords=[keyword(arg='x64', value=Constant(value=True))])), Assign(targets=[Name(id='path', ctx=Store())], value=BinOp(left=Constant(value='Bin%s'), op=Mod(), right=Name(id='arch_subdir', ctx=Load()))), Expr(value=Yield(value=Call(func=Name(id='join', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='si', ctx=Load()), attr='WindowsSdkDir', ctx=Load()), Name(id='path', ctx=Load())], keywords=[])))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='vs_ver', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value=10.0), Constant(value=11.0)], ctx=Load())]), body=[If(test=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='pi', ctx=Load()), attr='target_is_x86', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='arch_subdir', ctx=Store())], value=Constant(value=''))], orelse=[Assign(targets=[Name(id='arch_subdir', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='pi', ctx=Load()), attr='current_dir', ctx=Load()), args=[], keywords=[keyword(arg='hidex86', value=Constant(value=True)), keyword(arg='x64', value=Constant(value=True))]))]), Assign(targets=[Name(id='path', ctx=Store())], value=BinOp(left=Constant(value='Bin\\NETFX 4.0 Tools%s'), op=Mod(), right=Name(id='arch_subdir', ctx=Load()))), Expr(value=Yield(value=Call(func=Name(id='join', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='si', ctx=Load()), attr='WindowsSdkDir', ctx=Load()), Name(id='path', ctx=Load())], keywords=[])))], orelse=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='vs_ver', ctx=Load()), ops=[GtE()], comparators=[Constant(value=15.0)]), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Name(id='join', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='si', ctx=Load()), attr='WindowsSdkDir', ctx=Load()), Constant(value='Bin')], keywords=[])), Assign(targets=[Name(id='arch_subdir', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='pi', ctx=Load()), attr='current_dir', ctx=Load()), args=[], keywords=[keyword(arg='x64', value=Constant(value=True))])), Assign(targets=[Name(id='sdkver', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='si', ctx=Load()), attr='WindowsSdkLastVersion', ctx=Load())), Expr(value=Yield(value=Call(func=Name(id='join', ctx=Load()), args=[Name(id='path', ctx=Load()), BinOp(left=Constant(value='%s%s'), op=Mod(), right=Tuple(elts=[Name(id='sdkver', ctx=Load()), Name(id='arch_subdir', ctx=Load())], ctx=Load()))], keywords=[])))], orelse=[])]), If(test=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='si', ctx=Load()), attr='WindowsSDKExecutablePath', ctx=Load()), body=[Expr(value=Yield(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='si', ctx=Load()), attr='WindowsSDKExecutablePath', ctx=Load())))], orelse=[])], decorator_list=[]), FunctionDef(name='_sdk_subdir', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Microsoft Windows SDK version subdir.\n\n        Return\n        ------\n        str\n            subdir\n        ')), Assign(targets=[Name(id='ucrtver', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='si', ctx=Load()), attr='WindowsSdkLastVersion', ctx=Load())), Return(value=IfExp(test=Name(id='ucrtver', ctx=Load()), body=BinOp(left=Constant(value='%s\\'), op=Mod(), right=Name(id='ucrtver', ctx=Load())), orelse=Constant(value='')))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='SdkSetup', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Microsoft Windows SDK Setup.\n\n        Return\n        ------\n        list of str\n            paths\n        ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='vs_ver', ctx=Load()), ops=[Gt()], comparators=[Constant(value=9.0)]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Return(value=List(elts=[Call(func=Name(id='join', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='si', ctx=Load()), attr='WindowsSdkDir', ctx=Load()), Constant(value='Setup')], keywords=[])], ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='FxTools', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Microsoft .NET Framework Tools.\n\n        Return\n        ------\n        list of str\n            paths\n        ')), Assign(targets=[Name(id='pi', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='pi', ctx=Load())), Assign(targets=[Name(id='si', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='si', ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='vs_ver', ctx=Load()), ops=[LtE()], comparators=[Constant(value=10.0)]), body=[Assign(targets=[Name(id='include32', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='include64', ctx=Store())], value=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='pi', ctx=Load()), attr='target_is_x86', ctx=Load()), args=[], keywords=[])), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='pi', ctx=Load()), attr='current_is_x86', ctx=Load()), args=[], keywords=[]))]))], orelse=[Assign(targets=[Name(id='include32', ctx=Store())], value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='pi', ctx=Load()), attr='target_is_x86', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='pi', ctx=Load()), attr='current_is_x86', ctx=Load()), args=[], keywords=[])])), Assign(targets=[Name(id='include64', ctx=Store())], value=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='pi', ctx=Load()), attr='current_cpu', ctx=Load()), ops=[Eq()], comparators=[Constant(value='amd64')]), Compare(left=Attribute(value=Name(id='pi', ctx=Load()), attr='target_cpu', ctx=Load()), ops=[Eq()], comparators=[Constant(value='amd64')])]))]), Assign(targets=[Name(id='tools', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=Name(id='include32', ctx=Load()), body=[AugAssign(target=Name(id='tools', ctx=Store()), op=Add(), value=ListComp(elt=Call(func=Name(id='join', ctx=Load()), args=[Attribute(value=Name(id='si', ctx=Load()), attr='FrameworkDir32', ctx=Load()), Name(id='ver', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='ver', ctx=Store()), iter=Attribute(value=Name(id='si', ctx=Load()), attr='FrameworkVersion32', ctx=Load()), ifs=[], is_async=0)]))], orelse=[]), If(test=Name(id='include64', ctx=Load()), body=[AugAssign(target=Name(id='tools', ctx=Store()), op=Add(), value=ListComp(elt=Call(func=Name(id='join', ctx=Load()), args=[Attribute(value=Name(id='si', ctx=Load()), attr='FrameworkDir64', ctx=Load()), Name(id='ver', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='ver', ctx=Store()), iter=Attribute(value=Name(id='si', ctx=Load()), attr='FrameworkVersion64', ctx=Load()), ifs=[], is_async=0)]))], orelse=[]), Return(value=Name(id='tools', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='NetFxSDKLibraries', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Microsoft .Net Framework SDK Libraries.\n\n        Return\n        ------\n        list of str\n            paths\n        ')), If(test=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='vs_ver', ctx=Load()), ops=[Lt()], comparators=[Constant(value=14.0)]), UnaryOp(op=Not(), operand=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='si', ctx=Load()), attr='NetFxSdkDir', ctx=Load()))]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='arch_subdir', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='pi', ctx=Load()), attr='target_dir', ctx=Load()), args=[], keywords=[keyword(arg='x64', value=Constant(value=True))])), Return(value=List(elts=[Call(func=Name(id='join', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='si', ctx=Load()), attr='NetFxSdkDir', ctx=Load()), BinOp(left=Constant(value='lib\\um%s'), op=Mod(), right=Name(id='arch_subdir', ctx=Load()))], keywords=[])], ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='NetFxSDKIncludes', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Microsoft .Net Framework SDK Includes.\n\n        Return\n        ------\n        list of str\n            paths\n        ')), If(test=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='vs_ver', ctx=Load()), ops=[Lt()], comparators=[Constant(value=14.0)]), UnaryOp(op=Not(), operand=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='si', ctx=Load()), attr='NetFxSdkDir', ctx=Load()))]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Return(value=List(elts=[Call(func=Name(id='join', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='si', ctx=Load()), attr='NetFxSdkDir', ctx=Load()), Constant(value='include\\um')], keywords=[])], ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='VsTDb', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Microsoft Visual Studio Team System Database.\n\n        Return\n        ------\n        list of str\n            paths\n        ')), Return(value=List(elts=[Call(func=Name(id='join', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='si', ctx=Load()), attr='VSInstallDir', ctx=Load()), Constant(value='VSTSDB\\Deploy')], keywords=[])], ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='MSBuild', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Microsoft Build Engine.\n\n        Return\n        ------\n        list of str\n            paths\n        ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='vs_ver', ctx=Load()), ops=[Lt()], comparators=[Constant(value=12.0)]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='vs_ver', ctx=Load()), ops=[Lt()], comparators=[Constant(value=15.0)]), body=[Assign(targets=[Name(id='base_path', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='si', ctx=Load()), attr='ProgramFilesx86', ctx=Load())), Assign(targets=[Name(id='arch_subdir', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='pi', ctx=Load()), attr='current_dir', ctx=Load()), args=[], keywords=[keyword(arg='hidex86', value=Constant(value=True))]))], orelse=[Assign(targets=[Name(id='base_path', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='si', ctx=Load()), attr='VSInstallDir', ctx=Load())), Assign(targets=[Name(id='arch_subdir', ctx=Store())], value=Constant(value=''))])]), Assign(targets=[Name(id='path', ctx=Store())], value=BinOp(left=Constant(value='MSBuild\\%0.1f\\bin%s'), op=Mod(), right=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='vs_ver', ctx=Load()), Name(id='arch_subdir', ctx=Load())], ctx=Load()))), Assign(targets=[Name(id='build', ctx=Store())], value=List(elts=[Call(func=Name(id='join', ctx=Load()), args=[Name(id='base_path', ctx=Load()), Name(id='path', ctx=Load())], keywords=[])], ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='vs_ver', ctx=Load()), ops=[GtE()], comparators=[Constant(value=15.0)]), body=[AugAssign(target=Name(id='build', ctx=Store()), op=Add(), value=List(elts=[Call(func=Name(id='join', ctx=Load()), args=[Name(id='base_path', ctx=Load()), Name(id='path', ctx=Load()), Constant(value='Roslyn')], keywords=[])], ctx=Load()))], orelse=[]), Return(value=Name(id='build', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='HTMLHelpWorkshop', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Microsoft HTML Help Workshop.\n\n        Return\n        ------\n        list of str\n            paths\n        ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='vs_ver', ctx=Load()), ops=[Lt()], comparators=[Constant(value=11.0)]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Return(value=List(elts=[Call(func=Name(id='join', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='si', ctx=Load()), attr='ProgramFilesx86', ctx=Load()), Constant(value='HTML Help Workshop')], keywords=[])], ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='UCRTLibraries', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Microsoft Universal C Runtime SDK Libraries.\n\n        Return\n        ------\n        list of str\n            paths\n        ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='vs_ver', ctx=Load()), ops=[Lt()], comparators=[Constant(value=14.0)]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='arch_subdir', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='pi', ctx=Load()), attr='target_dir', ctx=Load()), args=[], keywords=[keyword(arg='x64', value=Constant(value=True))])), Assign(targets=[Name(id='lib', ctx=Store())], value=Call(func=Name(id='join', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='si', ctx=Load()), attr='UniversalCRTSdkDir', ctx=Load()), Constant(value='lib')], keywords=[])), Assign(targets=[Name(id='ucrtver', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_ucrt_subdir', ctx=Load())), Return(value=List(elts=[Call(func=Name(id='join', ctx=Load()), args=[Name(id='lib', ctx=Load()), BinOp(left=Constant(value='%sucrt%s'), op=Mod(), right=Tuple(elts=[Name(id='ucrtver', ctx=Load()), Name(id='arch_subdir', ctx=Load())], ctx=Load()))], keywords=[])], ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='UCRTIncludes', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Microsoft Universal C Runtime SDK Include.\n\n        Return\n        ------\n        list of str\n            paths\n        ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='vs_ver', ctx=Load()), ops=[Lt()], comparators=[Constant(value=14.0)]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='include', ctx=Store())], value=Call(func=Name(id='join', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='si', ctx=Load()), attr='UniversalCRTSdkDir', ctx=Load()), Constant(value='include')], keywords=[])), Return(value=List(elts=[Call(func=Name(id='join', ctx=Load()), args=[Name(id='include', ctx=Load()), BinOp(left=Constant(value='%sucrt'), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_ucrt_subdir', ctx=Load()))], keywords=[])], ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='_ucrt_subdir', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Microsoft Universal C Runtime SDK version subdir.\n\n        Return\n        ------\n        str\n            subdir\n        ')), Assign(targets=[Name(id='ucrtver', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='si', ctx=Load()), attr='UniversalCRTSdkLastVersion', ctx=Load())), Return(value=IfExp(test=Name(id='ucrtver', ctx=Load()), body=BinOp(left=Constant(value='%s\\'), op=Mod(), right=Name(id='ucrtver', ctx=Load())), orelse=Constant(value='')))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='FSharp', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Microsoft Visual F#.\n\n        Return\n        ------\n        list of str\n            paths\n        ')), If(test=Compare(left=Constant(value=11.0), ops=[Gt(), Gt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='vs_ver', ctx=Load()), Constant(value=12.0)]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Return(value=List(elts=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='si', ctx=Load()), attr='FSharpInstallDir', ctx=Load())], ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='VCRuntimeRedist', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Microsoft Visual C++ runtime redistributable dll.\n\n        Return\n        ------\n        str\n            path\n        ')), Assign(targets=[Name(id='vcruntime', ctx=Store())], value=BinOp(left=Constant(value='vcruntime%d0.dll'), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='vc_ver', ctx=Load()))), Assign(targets=[Name(id='arch_subdir', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='pi', ctx=Load()), attr='target_dir', ctx=Load()), args=[], keywords=[keyword(arg='x64', value=Constant(value=True))]), attr='strip', ctx=Load()), args=[Constant(value='\\')], keywords=[])), Assign(targets=[Name(id='prefixes', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='tools_path', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='si', ctx=Load()), attr='VCInstallDir', ctx=Load())), Assign(targets=[Name(id='redist_path', ctx=Store())], value=Call(func=Name(id='dirname', ctx=Load()), args=[Call(func=Attribute(value=Name(id='tools_path', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='\\Tools'), Constant(value='\\Redist')], keywords=[])], keywords=[])), If(test=Call(func=Name(id='isdir', ctx=Load()), args=[Name(id='redist_path', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='redist_path', ctx=Store())], value=Call(func=Name(id='join', ctx=Load()), args=[Name(id='redist_path', ctx=Load()), Subscript(value=Call(func=Name(id='listdir', ctx=Load()), args=[Name(id='redist_path', ctx=Load())], keywords=[]), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[])), AugAssign(target=Name(id='prefixes', ctx=Store()), op=Add(), value=List(elts=[Name(id='redist_path', ctx=Load()), Call(func=Name(id='join', ctx=Load()), args=[Name(id='redist_path', ctx=Load()), Constant(value='onecore')], keywords=[])], ctx=Load()))], orelse=[]), AugAssign(target=Name(id='prefixes', ctx=Store()), op=Add(), value=List(elts=[Call(func=Name(id='join', ctx=Load()), args=[Name(id='tools_path', ctx=Load()), Constant(value='redist')], keywords=[])], ctx=Load())), Assign(targets=[Name(id='crt_dirs', ctx=Store())], value=Tuple(elts=[BinOp(left=Constant(value='Microsoft.VC%d.CRT'), op=Mod(), right=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='vc_ver', ctx=Load()), op=Mult(), right=Constant(value=10))), BinOp(left=Constant(value='Microsoft.VC%d.CRT'), op=Mod(), right=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='vs_ver', ctx=Load())], keywords=[]), op=Mult(), right=Constant(value=10)))], ctx=Load())), For(target=Tuple(elts=[Name(id='prefix', ctx=Store()), Name(id='crt_dir', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='itertools', ctx=Load()), attr='product', ctx=Load()), args=[Name(id='prefixes', ctx=Load()), Name(id='crt_dirs', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Name(id='join', ctx=Load()), args=[Name(id='prefix', ctx=Load()), Name(id='arch_subdir', ctx=Load()), Name(id='crt_dir', ctx=Load()), Name(id='vcruntime', ctx=Load())], keywords=[])), If(test=Call(func=Name(id='isfile', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), body=[Return(value=Name(id='path', ctx=Load()))], orelse=[])], orelse=[])], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='return_env', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='exists')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Expr(value=Constant(value='\n        Return environment dict.\n\n        Parameters\n        ----------\n        exists: bool\n            It True, only return existing paths.\n\n        Return\n        ------\n        dict\n            environment\n        ')), Assign(targets=[Name(id='env', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='include', value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_build_paths', ctx=Load()), args=[Constant(value='include'), List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='VCIncludes', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='OSIncludes', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='UCRTIncludes', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='NetFxSDKIncludes', ctx=Load())], ctx=Load()), Name(id='exists', ctx=Load())], keywords=[])), keyword(arg='lib', value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_build_paths', ctx=Load()), args=[Constant(value='lib'), List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='VCLibraries', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='OSLibraries', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='FxTools', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='UCRTLibraries', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='NetFxSDKLibraries', ctx=Load())], ctx=Load()), Name(id='exists', ctx=Load())], keywords=[])), keyword(arg='libpath', value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_build_paths', ctx=Load()), args=[Constant(value='libpath'), List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='VCLibraries', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='FxTools', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='VCStoreRefs', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='OSLibpath', ctx=Load())], ctx=Load()), Name(id='exists', ctx=Load())], keywords=[])), keyword(arg='path', value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_build_paths', ctx=Load()), args=[Constant(value='path'), List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='VCTools', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='VSTools', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='VsTDb', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='SdkTools', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='SdkSetup', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='FxTools', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='MSBuild', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='HTMLHelpWorkshop', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='FSharp', ctx=Load())], ctx=Load()), Name(id='exists', ctx=Load())], keywords=[]))])), If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='vs_ver', ctx=Load()), ops=[GtE()], comparators=[Constant(value=14)]), Call(func=Name(id='isfile', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='VCRuntimeRedist', ctx=Load())], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='env', ctx=Load()), slice=Constant(value='py_vcruntime_redist'), ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='VCRuntimeRedist', ctx=Load()))], orelse=[]), Return(value=Name(id='env', ctx=Load()))], decorator_list=[]), FunctionDef(name='_build_paths', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name'), arg(arg='spec_path_lists'), arg(arg='exists')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Given an environment variable name and specified paths,\n        return a pathsep-separated string of paths containing\n        unique, extant, directories from those paths and from\n        the environment variable. Raise an error if no paths\n        are resolved.\n\n        Parameters\n        ----------\n        name: str\n            Environment variable name\n        spec_path_lists: list of str\n            Paths\n        exists: bool\n            It True, only return existing paths.\n\n        Return\n        ------\n        str\n            Pathsep-separated paths\n        ')), Assign(targets=[Name(id='spec_paths', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='itertools', ctx=Load()), attr='chain', ctx=Load()), attr='from_iterable', ctx=Load()), args=[Name(id='spec_path_lists', ctx=Load())], keywords=[])), Assign(targets=[Name(id='env_paths', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='environ', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='name', ctx=Load()), Constant(value='')], keywords=[]), attr='split', ctx=Load()), args=[Name(id='pathsep', ctx=Load())], keywords=[])), Assign(targets=[Name(id='paths', ctx=Store())], value=Call(func=Attribute(value=Name(id='itertools', ctx=Load()), attr='chain', ctx=Load()), args=[Name(id='spec_paths', ctx=Load()), Name(id='env_paths', ctx=Load())], keywords=[])), Assign(targets=[Name(id='extant_paths', ctx=Store())], value=IfExp(test=Name(id='exists', ctx=Load()), body=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='filter', ctx=Load()), args=[Name(id='isdir', ctx=Load()), Name(id='paths', ctx=Load())], keywords=[])], keywords=[]), orelse=Name(id='paths', ctx=Load()))), If(test=UnaryOp(op=Not(), operand=Name(id='extant_paths', ctx=Load())), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=BinOp(left=Constant(value='%s environment variable is empty'), op=Mod(), right=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='upper', ctx=Load()), args=[], keywords=[]))), Raise(exc=Call(func=Attribute(value=Attribute(value=Name(id='distutils', ctx=Load()), attr='errors', ctx=Load()), attr='DistutilsPlatformError', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='unique_paths', ctx=Store())], value=Call(func=Name(id='unique_everseen', ctx=Load()), args=[Name(id='extant_paths', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='pathsep', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='unique_paths', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[])], type_ignores=[])