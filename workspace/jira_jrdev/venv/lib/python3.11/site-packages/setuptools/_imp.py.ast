Module(body=[Expr(value=Constant(value='\nRe-implementation of find_module and get_frozen_object\nfrom the deprecated imp module.\n')), Import(names=[alias(name='os')]), Import(names=[alias(name='importlib.util')]), Import(names=[alias(name='importlib.machinery')]), ImportFrom(module='importlib.util', names=[alias(name='module_from_spec')], level=0), Assign(targets=[Name(id='PY_SOURCE', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='PY_COMPILED', ctx=Store())], value=Constant(value=2)), Assign(targets=[Name(id='C_EXTENSION', ctx=Store())], value=Constant(value=3)), Assign(targets=[Name(id='C_BUILTIN', ctx=Store())], value=Constant(value=6)), Assign(targets=[Name(id='PY_FROZEN', ctx=Store())], value=Constant(value=7)), FunctionDef(name='find_spec', args=arguments(posonlyargs=[], args=[arg(arg='module'), arg(arg='paths')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='finder', ctx=Store())], value=IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='paths', ctx=Load()), Name(id='list', ctx=Load())], keywords=[]), body=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='importlib', ctx=Load()), attr='machinery', ctx=Load()), attr='PathFinder', ctx=Load()), args=[], keywords=[]), attr='find_spec', ctx=Load()), orelse=Attribute(value=Attribute(value=Name(id='importlib', ctx=Load()), attr='util', ctx=Load()), attr='find_spec', ctx=Load()))), Return(value=Call(func=Name(id='finder', ctx=Load()), args=[Name(id='module', ctx=Load()), Name(id='paths', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='find_module', args=arguments(posonlyargs=[], args=[arg(arg='module'), arg(arg='paths')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value="Just like 'imp.find_module()', but with package support")), Assign(targets=[Name(id='spec', ctx=Store())], value=Call(func=Name(id='find_spec', ctx=Load()), args=[Name(id='module', ctx=Load()), Name(id='paths', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='spec', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ImportError', ctx=Load()), args=[BinOp(left=Constant(value="Can't find %s"), op=Mod(), right=Name(id='module', ctx=Load()))], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Attribute(value=Name(id='spec', ctx=Load()), attr='has_location', ctx=Load())), Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='spec', ctx=Load()), Constant(value='submodule_search_locations')], keywords=[])]), body=[Assign(targets=[Name(id='spec', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='importlib', ctx=Load()), attr='util', ctx=Load()), attr='spec_from_loader', ctx=Load()), args=[Constant(value='__init__.py'), Attribute(value=Name(id='spec', ctx=Load()), attr='loader', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='kind', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=1))), Assign(targets=[Name(id='file', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='static', ctx=Store())], value=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='spec', ctx=Load()), attr='loader', ctx=Load()), Name(id='type', ctx=Load())], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='spec', ctx=Load()), attr='origin', ctx=Load()), ops=[Eq()], comparators=[Constant(value='frozen')]), BoolOp(op=And(), values=[Name(id='static', ctx=Load()), Call(func=Name(id='issubclass', ctx=Load()), args=[Attribute(value=Name(id='spec', ctx=Load()), attr='loader', ctx=Load()), Attribute(value=Attribute(value=Name(id='importlib', ctx=Load()), attr='machinery', ctx=Load()), attr='FrozenImporter', ctx=Load())], keywords=[])])]), body=[Assign(targets=[Name(id='kind', ctx=Store())], value=Name(id='PY_FROZEN', ctx=Load())), Assign(targets=[Name(id='path', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='suffix', ctx=Store()), Name(id='mode', ctx=Store())], value=Constant(value=''))], orelse=[If(test=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='spec', ctx=Load()), attr='origin', ctx=Load()), ops=[Eq()], comparators=[Constant(value='built-in')]), BoolOp(op=And(), values=[Name(id='static', ctx=Load()), Call(func=Name(id='issubclass', ctx=Load()), args=[Attribute(value=Name(id='spec', ctx=Load()), attr='loader', ctx=Load()), Attribute(value=Attribute(value=Name(id='importlib', ctx=Load()), attr='machinery', ctx=Load()), attr='BuiltinImporter', ctx=Load())], keywords=[])])]), body=[Assign(targets=[Name(id='kind', ctx=Store())], value=Name(id='C_BUILTIN', ctx=Load())), Assign(targets=[Name(id='path', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='suffix', ctx=Store()), Name(id='mode', ctx=Store())], value=Constant(value=''))], orelse=[If(test=Attribute(value=Name(id='spec', ctx=Load()), attr='has_location', ctx=Load()), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Attribute(value=Name(id='spec', ctx=Load()), attr='origin', ctx=Load())), Assign(targets=[Name(id='suffix', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='splitext', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), slice=Constant(value=1), ctx=Load())), Assign(targets=[Name(id='mode', ctx=Store())], value=IfExp(test=Compare(left=Name(id='suffix', ctx=Load()), ops=[In()], comparators=[Attribute(value=Attribute(value=Name(id='importlib', ctx=Load()), attr='machinery', ctx=Load()), attr='SOURCE_SUFFIXES', ctx=Load())]), body=Constant(value='r'), orelse=Constant(value='rb'))), If(test=Compare(left=Name(id='suffix', ctx=Load()), ops=[In()], comparators=[Attribute(value=Attribute(value=Name(id='importlib', ctx=Load()), attr='machinery', ctx=Load()), attr='SOURCE_SUFFIXES', ctx=Load())]), body=[Assign(targets=[Name(id='kind', ctx=Store())], value=Name(id='PY_SOURCE', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='suffix', ctx=Load()), ops=[In()], comparators=[Attribute(value=Attribute(value=Name(id='importlib', ctx=Load()), attr='machinery', ctx=Load()), attr='BYTECODE_SUFFIXES', ctx=Load())]), body=[Assign(targets=[Name(id='kind', ctx=Store())], value=Name(id='PY_COMPILED', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='suffix', ctx=Load()), ops=[In()], comparators=[Attribute(value=Attribute(value=Name(id='importlib', ctx=Load()), attr='machinery', ctx=Load()), attr='EXTENSION_SUFFIXES', ctx=Load())]), body=[Assign(targets=[Name(id='kind', ctx=Store())], value=Name(id='C_EXTENSION', ctx=Load()))], orelse=[])])]), If(test=Compare(left=Name(id='kind', ctx=Load()), ops=[In()], comparators=[Set(elts=[Name(id='PY_SOURCE', ctx=Load()), Name(id='PY_COMPILED', ctx=Load())])]), body=[Assign(targets=[Name(id='file', ctx=Store())], value=Call(func=Name(id='open', ctx=Load()), args=[Name(id='path', ctx=Load()), Name(id='mode', ctx=Load())], keywords=[]))], orelse=[])], orelse=[Assign(targets=[Name(id='path', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='suffix', ctx=Store()), Name(id='mode', ctx=Store())], value=Constant(value=''))])])]), Return(value=Tuple(elts=[Name(id='file', ctx=Load()), Name(id='path', ctx=Load()), Tuple(elts=[Name(id='suffix', ctx=Load()), Name(id='mode', ctx=Load()), Name(id='kind', ctx=Load())], ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='get_frozen_object', args=arguments(posonlyargs=[], args=[arg(arg='module'), arg(arg='paths')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Name(id='spec', ctx=Store())], value=Call(func=Name(id='find_spec', ctx=Load()), args=[Name(id='module', ctx=Load()), Name(id='paths', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='spec', ctx=Load())), body=[Raise(exc=Call(func=Name(id='ImportError', ctx=Load()), args=[BinOp(left=Constant(value="Can't find %s"), op=Mod(), right=Name(id='module', ctx=Load()))], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='spec', ctx=Load()), attr='loader', ctx=Load()), attr='get_code', ctx=Load()), args=[Name(id='module', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='get_module', args=arguments(posonlyargs=[], args=[arg(arg='module'), arg(arg='paths'), arg(arg='info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='spec', ctx=Store())], value=Call(func=Name(id='find_spec', ctx=Load()), args=[Name(id='module', ctx=Load()), Name(id='paths', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='spec', ctx=Load())), body=[Raise(exc=Call(func=Name(id='ImportError', ctx=Load()), args=[BinOp(left=Constant(value="Can't find %s"), op=Mod(), right=Name(id='module', ctx=Load()))], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='module_from_spec', ctx=Load()), args=[Name(id='spec', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])