Module(body=[Import(names=[alias(name='re')]), ImportFrom(module='_functools', names=[alias(name='method_cache')], level=1), ClassDef(name='FoldedCase', bases=[Name(id='str', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    A case insensitive string class; behaves just like str\n    except compares equal when the only variation is case.\n\n    >>> s = FoldedCase(\'hello world\')\n\n    >>> s == \'Hello World\'\n    True\n\n    >>> \'Hello World\' == s\n    True\n\n    >>> s != \'Hello World\'\n    False\n\n    >>> s.index(\'O\')\n    4\n\n    >>> s.split(\'O\')\n    [\'hell\', \' w\', \'rld\']\n\n    >>> sorted(map(FoldedCase, [\'GAMMA\', \'alpha\', \'Beta\']))\n    [\'alpha\', \'Beta\', \'GAMMA\']\n\n    Sequence membership is straightforward.\n\n    >>> "Hello World" in [s]\n    True\n    >>> s in ["Hello World"]\n    True\n\n    You may test for set inclusion, but candidate and elements\n    must both be folded.\n\n    >>> FoldedCase("Hello World") in {s}\n    True\n    >>> s in {FoldedCase("Hello World")}\n    True\n\n    String inclusion works as long as the FoldedCase object\n    is on the right.\n\n    >>> "hello" in FoldedCase("Hello World")\n    True\n\n    But not if the FoldedCase object is on the left:\n\n    >>> FoldedCase(\'hello\') in \'Hello World\'\n    False\n\n    In that case, use in_:\n\n    >>> FoldedCase(\'hello\').in_(\'Hello World\')\n    True\n\n    >>> FoldedCase(\'hello\') > FoldedCase(\'Hello\')\n    False\n    ')), FunctionDef(name='__lt__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Compare(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), ops=[Lt()], comparators=[Call(func=Attribute(value=Name(id='other', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])]))], decorator_list=[]), FunctionDef(name='__gt__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Compare(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), ops=[Gt()], comparators=[Call(func=Attribute(value=Name(id='other', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])]))], decorator_list=[]), FunctionDef(name='__eq__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Compare(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='other', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])]))], decorator_list=[]), FunctionDef(name='__ne__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Compare(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), ops=[NotEq()], comparators=[Call(func=Attribute(value=Name(id='other', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])]))], decorator_list=[]), FunctionDef(name='__hash__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='hash', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='__contains__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='lower', ctx=Load()), args=[], keywords=[]), attr='__contains__', ctx=Load()), args=[Call(func=Attribute(value=Name(id='other', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='in_', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Does self appear in other?')), Return(value=Compare(left=Name(id='self', ctx=Load()), ops=[In()], comparators=[Call(func=Name(id='FoldedCase', ctx=Load()), args=[Name(id='other', ctx=Load())], keywords=[])]))], decorator_list=[]), FunctionDef(name='lower', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='lower', ctx=Load()), args=[], keywords=[]))], decorator_list=[Name(id='method_cache', ctx=Load())]), FunctionDef(name='index', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='sub')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), attr='index', ctx=Load()), args=[Call(func=Attribute(value=Name(id='sub', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='split', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='splitter'), arg(arg='maxsplit')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=' '), Constant(value=0)]), body=[Assign(targets=[Name(id='pattern', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='escape', ctx=Load()), args=[Name(id='splitter', ctx=Load())], keywords=[]), Attribute(value=Name(id='re', ctx=Load()), attr='I', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='pattern', ctx=Load()), attr='split', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='maxsplit', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[])], type_ignores=[])