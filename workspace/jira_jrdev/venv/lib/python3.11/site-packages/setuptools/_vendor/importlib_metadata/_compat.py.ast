Module(body=[Import(names=[alias(name='sys')]), Import(names=[alias(name='platform')]), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='install'), Constant(value='NullFinder'), Constant(value='Protocol')], ctx=Load())), Try(body=[ImportFrom(module='typing', names=[alias(name='Protocol')], level=0)], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[ImportFrom(module='typing_extensions', names=[alias(name='Protocol')], level=2)])], orelse=[], finalbody=[]), FunctionDef(name='install', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Class decorator for installation on sys.meta_path.\n\n    Adds the backport DistributionFinder to sys.meta_path and\n    attempts to disable the finder functionality of the stdlib\n    DistributionFinder.\n    ')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='meta_path', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='cls', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Name(id='disable_stdlib_finder', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='cls', ctx=Load()))], decorator_list=[]), FunctionDef(name='disable_stdlib_finder', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Give the backport primacy for discovering path-based distributions\n    by monkey-patching the stdlib O_O.\n\n    See #91 for more background for rationale on this sketchy\n    behavior.\n    ')), FunctionDef(name='matches', args=arguments(posonlyargs=[], args=[arg(arg='finder')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='finder', ctx=Load()), Constant(value='__module__'), Constant(value=None)], keywords=[]), ops=[Eq()], comparators=[Constant(value='_frozen_importlib_external')]), Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='finder', ctx=Load()), Constant(value='find_distributions')], keywords=[])]))], decorator_list=[]), For(target=Name(id='finder', ctx=Store()), iter=Call(func=Name(id='filter', ctx=Load()), args=[Name(id='matches', ctx=Load()), Attribute(value=Name(id='sys', ctx=Load()), attr='meta_path', ctx=Load())], keywords=[]), body=[Delete(targets=[Attribute(value=Name(id='finder', ctx=Load()), attr='find_distributions', ctx=Del())])], orelse=[])], decorator_list=[]), ClassDef(name='NullFinder', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    A "Finder" (aka "MetaClassFinder") that never finds any modules,\n    but may find distributions.\n    ')), FunctionDef(name='find_spec', args=arguments(posonlyargs=[], args=[], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Return(value=Constant(value=None))], decorator_list=[Name(id='staticmethod', ctx=Load())]), Assign(targets=[Name(id='find_module', ctx=Store())], value=Name(id='find_spec', ctx=Load()))], decorator_list=[]), FunctionDef(name='pypy_partial', args=arguments(posonlyargs=[], args=[arg(arg='val')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Adjust for variable stacklevel on partial under PyPy.\n\n    Workaround for #327.\n    ')), Assign(targets=[Name(id='is_pypy', ctx=Store())], value=Compare(left=Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='python_implementation', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Constant(value='PyPy')])), Return(value=BinOp(left=Name(id='val', ctx=Load()), op=Add(), right=Name(id='is_pypy', ctx=Load())))], decorator_list=[])], type_ignores=[])