Module(body=[ImportFrom(module='itertools', names=[alias(name='filterfalse')], level=0), FunctionDef(name='unique_everseen', args=arguments(posonlyargs=[], args=[arg(arg='iterable'), arg(arg='key')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='List unique elements, preserving order. Remember all elements ever seen.')), Assign(targets=[Name(id='seen', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='seen_add', ctx=Store())], value=Attribute(value=Name(id='seen', ctx=Load()), attr='add', ctx=Load())), If(test=Compare(left=Name(id='key', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[For(target=Name(id='element', ctx=Store()), iter=Call(func=Name(id='filterfalse', ctx=Load()), args=[Attribute(value=Name(id='seen', ctx=Load()), attr='__contains__', ctx=Load()), Name(id='iterable', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Name(id='seen_add', ctx=Load()), args=[Name(id='element', ctx=Load())], keywords=[])), Expr(value=Yield(value=Name(id='element', ctx=Load())))], orelse=[])], orelse=[For(target=Name(id='element', ctx=Store()), iter=Name(id='iterable', ctx=Load()), body=[Assign(targets=[Name(id='k', ctx=Store())], value=Call(func=Name(id='key', ctx=Load()), args=[Name(id='element', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='k', ctx=Load()), ops=[NotIn()], comparators=[Name(id='seen', ctx=Load())]), body=[Expr(value=Call(func=Name(id='seen_add', ctx=Load()), args=[Name(id='k', ctx=Load())], keywords=[])), Expr(value=Yield(value=Name(id='element', ctx=Load())))], orelse=[])], orelse=[])])], decorator_list=[]), FunctionDef(name='always_iterable', args=arguments(posonlyargs=[], args=[arg(arg='obj'), arg(arg='base_type')], kwonlyargs=[], kw_defaults=[], defaults=[Tuple(elts=[Name(id='str', ctx=Load()), Name(id='bytes', ctx=Load())], ctx=Load())]), body=[Expr(value=Constant(value="If *obj* is iterable, return an iterator over its items::\n\n        >>> obj = (1, 2, 3)\n        >>> list(always_iterable(obj))\n        [1, 2, 3]\n\n    If *obj* is not iterable, return a one-item iterable containing *obj*::\n\n        >>> obj = 1\n        >>> list(always_iterable(obj))\n        [1]\n\n    If *obj* is ``None``, return an empty iterable:\n\n        >>> obj = None\n        >>> list(always_iterable(None))\n        []\n\n    By default, binary and text strings are not considered iterable::\n\n        >>> obj = 'foo'\n        >>> list(always_iterable(obj))\n        ['foo']\n\n    If *base_type* is set, objects for which ``isinstance(obj, base_type)``\n    returns ``True`` won't be considered iterable.\n\n        >>> obj = {'a': 1}\n        >>> list(always_iterable(obj))  # Iterate over the dict's keys\n        ['a']\n        >>> list(always_iterable(obj, base_type=dict))  # Treat dicts as a unit\n        [{'a': 1}]\n\n    Set *base_type* to ``None`` to avoid any special handling and treat objects\n    Python considers iterable as iterable:\n\n        >>> obj = 'foo'\n        >>> list(always_iterable(obj, base_type=None))\n        ['f', 'o', 'o']\n    ")), If(test=Compare(left=Name(id='obj', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Call(func=Name(id='iter', ctx=Load()), args=[Tuple(elts=[], ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='base_type', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='obj', ctx=Load()), Name(id='base_type', ctx=Load())], keywords=[])]), body=[Return(value=Call(func=Name(id='iter', ctx=Load()), args=[Tuple(elts=[Name(id='obj', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), Try(body=[Return(value=Call(func=Name(id='iter', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='TypeError', ctx=Load()), body=[Return(value=Call(func=Name(id='iter', ctx=Load()), args=[Tuple(elts=[Name(id='obj', ctx=Load())], ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[])], type_ignores=[])