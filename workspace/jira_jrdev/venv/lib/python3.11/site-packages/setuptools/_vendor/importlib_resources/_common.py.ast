Module(body=[Import(names=[alias(name='os')]), Import(names=[alias(name='pathlib')]), Import(names=[alias(name='tempfile')]), Import(names=[alias(name='functools')]), Import(names=[alias(name='contextlib')]), Import(names=[alias(name='types')]), Import(names=[alias(name='importlib')]), Import(names=[alias(name='inspect')]), Import(names=[alias(name='warnings')]), Import(names=[alias(name='itertools')]), ImportFrom(module='typing', names=[alias(name='Union'), alias(name='Optional'), alias(name='cast')], level=0), ImportFrom(module='abc', names=[alias(name='ResourceReader'), alias(name='Traversable')], level=1), ImportFrom(module='_compat', names=[alias(name='wrap_spec')], level=1), Assign(targets=[Name(id='Package', ctx=Store())], value=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='types', ctx=Load()), attr='ModuleType', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='Anchor', ctx=Store())], value=Name(id='Package', ctx=Load())), FunctionDef(name='package_to_anchor', args=arguments(posonlyargs=[], args=[arg(arg='func')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    Replace 'package' parameter as 'anchor' and warn about the change.\n\n    Other errors should fall through.\n\n    >>> files('a', 'b')\n    Traceback (most recent call last):\n    TypeError: files() takes from 0 to 1 positional arguments but 2 were given\n    ")), Assign(targets=[Name(id='undefined', ctx=Store())], value=Call(func=Name(id='object', ctx=Load()), args=[], keywords=[])), FunctionDef(name='wrapper', args=arguments(posonlyargs=[], args=[arg(arg='anchor'), arg(arg='package')], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='undefined', ctx=Load()), Name(id='undefined', ctx=Load())]), body=[If(test=Compare(left=Name(id='package', ctx=Load()), ops=[IsNot()], comparators=[Name(id='undefined', ctx=Load())]), body=[If(test=Compare(left=Name(id='anchor', ctx=Load()), ops=[IsNot()], comparators=[Name(id='undefined', ctx=Load())]), body=[Return(value=Call(func=Name(id='func', ctx=Load()), args=[Name(id='anchor', ctx=Load()), Name(id='package', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value="First parameter to files is renamed to 'anchor'"), Name(id='DeprecationWarning', ctx=Load())], keywords=[keyword(arg='stacklevel', value=Constant(value=2))])), Return(value=Call(func=Name(id='func', ctx=Load()), args=[Name(id='package', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='anchor', ctx=Load()), ops=[Is()], comparators=[Name(id='undefined', ctx=Load())]), body=[Return(value=Call(func=Name(id='func', ctx=Load()), args=[], keywords=[]))], orelse=[])]), Return(value=Call(func=Name(id='func', ctx=Load()), args=[Name(id='anchor', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='wraps', ctx=Load()), args=[Name(id='func', ctx=Load())], keywords=[])]), Return(value=Name(id='wrapper', ctx=Load()))], decorator_list=[]), FunctionDef(name='files', args=arguments(posonlyargs=[], args=[arg(arg='anchor', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Anchor', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='\n    Get a Traversable resource for an anchor.\n    ')), Return(value=Call(func=Name(id='from_package', ctx=Load()), args=[Call(func=Name(id='resolve', ctx=Load()), args=[Name(id='anchor', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[Name(id='package_to_anchor', ctx=Load())], returns=Name(id='Traversable', ctx=Load())), FunctionDef(name='get_resource_reader', args=arguments(posonlyargs=[], args=[arg(arg='package', annotation=Attribute(value=Name(id='types', ctx=Load()), attr='ModuleType', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    Return the package's loader if it's a ResourceReader.\n    ")), Assign(targets=[Name(id='spec', ctx=Store())], value=Attribute(value=Name(id='package', ctx=Load()), attr='__spec__', ctx=Load())), Assign(targets=[Name(id='reader', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Attribute(value=Name(id='spec', ctx=Load()), attr='loader', ctx=Load()), Constant(value='get_resource_reader'), Constant(value=None)], keywords=[])), If(test=Compare(left=Name(id='reader', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=None))], orelse=[]), Return(value=Call(func=Name(id='reader', ctx=Load()), args=[Attribute(value=Name(id='spec', ctx=Load()), attr='name', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='ResourceReader', ctx=Load()), ctx=Load())), FunctionDef(name='resolve', args=arguments(posonlyargs=[], args=[arg(arg='cand', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Anchor', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='cast', ctx=Load()), args=[Attribute(value=Name(id='types', ctx=Load()), attr='ModuleType', ctx=Load()), Name(id='cand', ctx=Load())], keywords=[]))], decorator_list=[Attribute(value=Name(id='functools', ctx=Load()), attr='singledispatch', ctx=Load())], returns=Attribute(value=Name(id='types', ctx=Load()), attr='ModuleType', ctx=Load())), FunctionDef(name='_', args=arguments(posonlyargs=[], args=[arg(arg='cand', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='importlib', ctx=Load()), attr='import_module', ctx=Load()), args=[Name(id='cand', ctx=Load())], keywords=[]))], decorator_list=[Attribute(value=Name(id='resolve', ctx=Load()), attr='register', ctx=Load())], returns=Attribute(value=Name(id='types', ctx=Load()), attr='ModuleType', ctx=Load())), FunctionDef(name='_', args=arguments(posonlyargs=[], args=[arg(arg='cand', annotation=Constant(value=None))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='resolve', ctx=Load()), args=[Subscript(value=Attribute(value=Call(func=Name(id='_infer_caller', ctx=Load()), args=[], keywords=[]), attr='f_globals', ctx=Load()), slice=Constant(value='__name__'), ctx=Load())], keywords=[]))], decorator_list=[Attribute(value=Name(id='resolve', ctx=Load()), attr='register', ctx=Load())], returns=Attribute(value=Name(id='types', ctx=Load()), attr='ModuleType', ctx=Load())), FunctionDef(name='_infer_caller', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Walk the stack and find the frame of the first caller not in this module.\n    ')), FunctionDef(name='is_this_file', args=arguments(posonlyargs=[], args=[arg(arg='frame_info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Compare(left=Attribute(value=Name(id='frame_info', ctx=Load()), attr='filename', ctx=Load()), ops=[Eq()], comparators=[Name(id='__file__', ctx=Load())]))], decorator_list=[]), FunctionDef(name='is_wrapper', args=arguments(posonlyargs=[], args=[arg(arg='frame_info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Compare(left=Attribute(value=Name(id='frame_info', ctx=Load()), attr='function', ctx=Load()), ops=[Eq()], comparators=[Constant(value='wrapper')]))], decorator_list=[]), Assign(targets=[Name(id='not_this_file', ctx=Store())], value=Call(func=Attribute(value=Name(id='itertools', ctx=Load()), attr='filterfalse', ctx=Load()), args=[Name(id='is_this_file', ctx=Load()), Call(func=Attribute(value=Name(id='inspect', ctx=Load()), attr='stack', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='callers', ctx=Store())], value=Call(func=Attribute(value=Name(id='itertools', ctx=Load()), attr='filterfalse', ctx=Load()), args=[Name(id='is_wrapper', ctx=Load()), Name(id='not_this_file', ctx=Load())], keywords=[])), Return(value=Attribute(value=Call(func=Name(id='next', ctx=Load()), args=[Name(id='callers', ctx=Load())], keywords=[]), attr='frame', ctx=Load()))], decorator_list=[]), FunctionDef(name='from_package', args=arguments(posonlyargs=[], args=[arg(arg='package', annotation=Attribute(value=Name(id='types', ctx=Load()), attr='ModuleType', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Return a Traversable object for the given package.\n\n    ')), Assign(targets=[Name(id='spec', ctx=Store())], value=Call(func=Name(id='wrap_spec', ctx=Load()), args=[Name(id='package', ctx=Load())], keywords=[])), Assign(targets=[Name(id='reader', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='spec', ctx=Load()), attr='loader', ctx=Load()), attr='get_resource_reader', ctx=Load()), args=[Attribute(value=Name(id='spec', ctx=Load()), attr='name', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='reader', ctx=Load()), attr='files', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='_tempfile', args=arguments(posonlyargs=[], args=[arg(arg='reader'), arg(arg='suffix')], kwonlyargs=[arg(arg='_os_remove')], kw_defaults=[Attribute(value=Name(id='os', ctx=Load()), attr='remove', ctx=Load())], defaults=[Constant(value='')]), body=[Assign(targets=[Tuple(elts=[Name(id='fd', ctx=Store()), Name(id='raw_path', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='tempfile', ctx=Load()), attr='mkstemp', ctx=Load()), args=[], keywords=[keyword(arg='suffix', value=Name(id='suffix', ctx=Load()))])), Try(body=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='fd', ctx=Load()), Call(func=Name(id='reader', ctx=Load()), args=[], keywords=[])], keywords=[]))], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='close', ctx=Load()), args=[Name(id='fd', ctx=Load())], keywords=[]))]), Delete(targets=[Name(id='reader', ctx=Del())]), Expr(value=Yield(value=Call(func=Attribute(value=Name(id='pathlib', ctx=Load()), attr='Path', ctx=Load()), args=[Name(id='raw_path', ctx=Load())], keywords=[])))], handlers=[], orelse=[], finalbody=[Try(body=[Expr(value=Call(func=Name(id='_os_remove', ctx=Load()), args=[Name(id='raw_path', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='FileNotFoundError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])])], decorator_list=[Attribute(value=Name(id='contextlib', ctx=Load()), attr='contextmanager', ctx=Load())]), FunctionDef(name='_temp_file', args=arguments(posonlyargs=[], args=[arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='_tempfile', ctx=Load()), args=[Attribute(value=Name(id='path', ctx=Load()), attr='read_bytes', ctx=Load())], keywords=[keyword(arg='suffix', value=Attribute(value=Name(id='path', ctx=Load()), attr='name', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='_is_present_dir', args=arguments(posonlyargs=[], args=[arg(arg='path', annotation=Name(id='Traversable', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    Some Traversables implement ``is_dir()`` to raise an\n    exception (i.e. ``FileNotFoundError``) when the\n    directory doesn't exist. This function wraps that call\n    to always return a boolean and only return True\n    if there's a dir and it exists.\n    ")), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='contextlib', ctx=Load()), attr='suppress', ctx=Load()), args=[Name(id='FileNotFoundError', ctx=Load())], keywords=[]))], body=[Return(value=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='is_dir', ctx=Load()), args=[], keywords=[]))]), Return(value=Constant(value=False))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='as_file', args=arguments(posonlyargs=[], args=[arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Given a Traversable object, return that object as a\n    path on the local file system in a context manager.\n    ')), Return(value=IfExp(test=Call(func=Name(id='_is_present_dir', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), body=Call(func=Name(id='_temp_dir', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), orelse=Call(func=Name(id='_temp_file', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])))], decorator_list=[Attribute(value=Name(id='functools', ctx=Load()), attr='singledispatch', ctx=Load())]), FunctionDef(name='_', args=arguments(posonlyargs=[], args=[arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Degenerate behavior for pathlib.Path objects.\n    ')), Expr(value=Yield(value=Name(id='path', ctx=Load())))], decorator_list=[Call(func=Attribute(value=Name(id='as_file', ctx=Load()), attr='register', ctx=Load()), args=[Attribute(value=Name(id='pathlib', ctx=Load()), attr='Path', ctx=Load())], keywords=[]), Attribute(value=Name(id='contextlib', ctx=Load()), attr='contextmanager', ctx=Load())]), FunctionDef(name='_temp_path', args=arguments(posonlyargs=[], args=[arg(arg='dir', annotation=Attribute(value=Name(id='tempfile', ctx=Load()), attr='TemporaryDirectory', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Wrap tempfile.TemporyDirectory to return a pathlib object.\n    ')), With(items=[withitem(context_expr=Name(id='dir', ctx=Load()), optional_vars=Name(id='result', ctx=Store()))], body=[Expr(value=Yield(value=Call(func=Attribute(value=Name(id='pathlib', ctx=Load()), attr='Path', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[])))])], decorator_list=[Attribute(value=Name(id='contextlib', ctx=Load()), attr='contextmanager', ctx=Load())]), FunctionDef(name='_temp_dir', args=arguments(posonlyargs=[], args=[arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Given a traversable dir, recursively replicate the whole tree\n    to the file system in a context manager.\n    ')), Assert(test=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='is_dir', ctx=Load()), args=[], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='_temp_path', ctx=Load()), args=[Call(func=Attribute(value=Name(id='tempfile', ctx=Load()), attr='TemporaryDirectory', ctx=Load()), args=[], keywords=[])], keywords=[]), optional_vars=Name(id='temp_dir', ctx=Store()))], body=[Expr(value=Yield(value=Call(func=Name(id='_write_contents', ctx=Load()), args=[Name(id='temp_dir', ctx=Load()), Name(id='path', ctx=Load())], keywords=[])))])], decorator_list=[Attribute(value=Name(id='contextlib', ctx=Load()), attr='contextmanager', ctx=Load())]), FunctionDef(name='_write_contents', args=arguments(posonlyargs=[], args=[arg(arg='target'), arg(arg='source')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='child', ctx=Store())], value=Call(func=Attribute(value=Name(id='target', ctx=Load()), attr='joinpath', ctx=Load()), args=[Attribute(value=Name(id='source', ctx=Load()), attr='name', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='is_dir', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='child', ctx=Load()), attr='mkdir', ctx=Load()), args=[], keywords=[])), For(target=Name(id='item', ctx=Store()), iter=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='iterdir', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Name(id='_write_contents', ctx=Load()), args=[Name(id='child', ctx=Load()), Name(id='item', ctx=Load())], keywords=[]))], orelse=[])], orelse=[Expr(value=Call(func=Attribute(value=Name(id='child', ctx=Load()), attr='write_bytes', ctx=Load()), args=[Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='read_bytes', ctx=Load()), args=[], keywords=[])], keywords=[]))]), Return(value=Name(id='child', ctx=Load()))], decorator_list=[])], type_ignores=[])