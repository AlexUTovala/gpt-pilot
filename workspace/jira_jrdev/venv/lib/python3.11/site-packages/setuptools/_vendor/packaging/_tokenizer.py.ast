Module(body=[Import(names=[alias(name='contextlib')]), Import(names=[alias(name='re')]), ImportFrom(module='dataclasses', names=[alias(name='dataclass')], level=0), ImportFrom(module='typing', names=[alias(name='Dict'), alias(name='Iterator'), alias(name='NoReturn'), alias(name='Optional'), alias(name='Tuple'), alias(name='Union')], level=0), ImportFrom(module='specifiers', names=[alias(name='Specifier')], level=1), ClassDef(name='Token', bases=[], keywords=[], body=[AnnAssign(target=Name(id='name', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='text', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='position', ctx=Store()), annotation=Name(id='int', ctx=Load()), simple=1)], decorator_list=[Name(id='dataclass', ctx=Load())]), ClassDef(name='ParserSyntaxError', bases=[Name(id='Exception', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='The provided source text could not be parsed correctly.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='message', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[arg(arg='source', annotation=Name(id='str', ctx=Load())), arg(arg='span', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()))], kw_defaults=[None, None], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='span', ctx=Store())], value=Name(id='span', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='message', ctx=Store())], value=Name(id='message', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='source', ctx=Store())], value=Name(id='source', ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__str__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='marker', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=Constant(value=' '), op=Mult(), right=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='span', ctx=Load()), slice=Constant(value=0), ctx=Load())), op=Add(), right=BinOp(left=Constant(value='~'), op=Mult(), right=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='span', ctx=Load()), slice=Constant(value=1), ctx=Load()), op=Sub(), right=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='span', ctx=Load()), slice=Constant(value=0), ctx=Load())))), op=Add(), right=Constant(value='^'))), Return(value=Call(func=Attribute(value=Constant(value='\n    '), attr='join', ctx=Load()), args=[List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='message', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='source', ctx=Load()), Name(id='marker', ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[]), AnnAssign(target=Name(id='DEFAULT_RULES', ctx=Store()), annotation=Constant(value='Dict[str, Union[str, re.Pattern[str]]]'), value=Dict(keys=[Constant(value='LEFT_PARENTHESIS'), Constant(value='RIGHT_PARENTHESIS'), Constant(value='LEFT_BRACKET'), Constant(value='RIGHT_BRACKET'), Constant(value='SEMICOLON'), Constant(value='COMMA'), Constant(value='QUOTED_STRING'), Constant(value='OP'), Constant(value='BOOLOP'), Constant(value='IN'), Constant(value='NOT'), Constant(value='VARIABLE'), Constant(value='SPECIFIER'), Constant(value='AT'), Constant(value='URL'), Constant(value='IDENTIFIER'), Constant(value='VERSION_PREFIX_TRAIL'), Constant(value='VERSION_LOCAL_LABEL_TRAIL'), Constant(value='WS'), Constant(value='END')], values=[Constant(value='\\('), Constant(value='\\)'), Constant(value='\\['), Constant(value='\\]'), Constant(value=';'), Constant(value=','), Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='\n            (\n                (\'[^\']*\')\n                |\n                ("[^"]*")\n            )\n        '), Attribute(value=Name(id='re', ctx=Load()), attr='VERBOSE', ctx=Load())], keywords=[]), Constant(value='(===|==|~=|!=|<=|>=|<|>)'), Constant(value='\\b(or|and)\\b'), Constant(value='\\bin\\b'), Constant(value='\\bnot\\b'), Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='\n            \\b(\n                python_version\n                |python_full_version\n                |os[._]name\n                |sys[._]platform\n                |platform_(release|system)\n                |platform[._](version|machine|python_implementation)\n                |python_implementation\n                |implementation_(name|version)\n                |extra\n            )\\b\n        '), Attribute(value=Name(id='re', ctx=Load()), attr='VERBOSE', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='Specifier', ctx=Load()), attr='_operator_regex_str', ctx=Load()), op=Add(), right=Attribute(value=Name(id='Specifier', ctx=Load()), attr='_version_regex_str', ctx=Load())), BinOp(left=Attribute(value=Name(id='re', ctx=Load()), attr='VERBOSE', ctx=Load()), op=BitOr(), right=Attribute(value=Name(id='re', ctx=Load()), attr='IGNORECASE', ctx=Load()))], keywords=[]), Constant(value='\\@'), Constant(value='[^ \\t]+'), Constant(value='\\b[a-zA-Z0-9][a-zA-Z0-9._-]*\\b'), Constant(value='\\.\\*'), Constant(value='\\+[a-z0-9]+(?:[-_\\.][a-z0-9]+)*'), Constant(value='[ \\t]+'), Constant(value='$')]), simple=1), ClassDef(name='Tokenizer', bases=[], keywords=[], body=[Expr(value=Constant(value='Context-sensitive token parsing.\n\n    Provides methods to examine the input stream to check whether the next token\n    matches.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='source', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[arg(arg='rules', annotation=Constant(value='Dict[str, Union[str, re.Pattern[str]]]'))], kw_defaults=[None], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='source', ctx=Store())], value=Name(id='source', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='rules', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Attribute(value=Name(id='re', ctx=Load()), attr='Pattern', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=DictComp(key=Name(id='name', ctx=Load()), value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Name(id='pattern', ctx=Load())], keywords=[]), generators=[comprehension(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='pattern', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='rules', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)]), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='next_token', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Token', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='position', ctx=Store())], value=Constant(value=0))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='consume', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Move beyond provided token name, if at current position.')), If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='check', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='check', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[arg(arg='peek', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=False)], defaults=[]), body=[Expr(value=Constant(value='Check whether the next token has the provided name.\n\n        By default, if the check succeeds, the token *must* be read before\n        another check. If `peek` is set to `True`, the token is not loaded and\n        would need to be checked again.\n        ')), Assert(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='next_token', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), msg=JoinedStr(values=[Constant(value='Cannot check for '), FormattedValue(value=Name(id='name', ctx=Load()), conversion=114), Constant(value=', already have '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='next_token', ctx=Load()), conversion=114)])), Assert(test=Compare(left=Name(id='name', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='rules', ctx=Load())]), msg=JoinedStr(values=[Constant(value='Unknown token name: '), FormattedValue(value=Name(id='name', ctx=Load()), conversion=114)])), Assign(targets=[Name(id='expression', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='rules', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='match', ctx=Store())], value=Call(func=Attribute(value=Name(id='expression', ctx=Load()), attr='match', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='source', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='position', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='match', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='peek', ctx=Load())), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='next_token', ctx=Store())], value=Call(func=Name(id='Token', ctx=Load()), args=[Name(id='name', ctx=Load()), Subscript(value=Name(id='match', ctx=Load()), slice=Constant(value=0), ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='position', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Constant(value=True))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='expect', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[arg(arg='expected', annotation=Name(id='str', ctx=Load()))], kw_defaults=[None], defaults=[]), body=[Expr(value=Constant(value='Expect a certain token name next, failing with a syntax error otherwise.\n\n        The token is *not* read.\n        ')), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='check', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='raise_syntax_error', ctx=Load()), args=[JoinedStr(values=[Constant(value='Expected '), FormattedValue(value=Name(id='expected', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='Token', ctx=Load())), FunctionDef(name='read', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Consume the next token and return it.')), Assign(targets=[Name(id='token', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='next_token', ctx=Load())), Assert(test=Compare(left=Name(id='token', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='position', ctx=Store()), op=Add(), value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='token', ctx=Load()), attr='text', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='next_token', ctx=Store())], value=Constant(value=None)), Return(value=Name(id='token', ctx=Load()))], decorator_list=[], returns=Name(id='Token', ctx=Load())), FunctionDef(name='raise_syntax_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='message', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[arg(arg='span_start', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='span_end', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()))], kw_defaults=[Constant(value=None), Constant(value=None)], defaults=[]), body=[Expr(value=Constant(value='Raise ParserSyntaxError at the given position.')), Assign(targets=[Name(id='span', ctx=Store())], value=Tuple(elts=[IfExp(test=Compare(left=Name(id='span_start', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Attribute(value=Name(id='self', ctx=Load()), attr='position', ctx=Load()), orelse=Name(id='span_start', ctx=Load())), IfExp(test=Compare(left=Name(id='span_end', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Attribute(value=Name(id='self', ctx=Load()), attr='position', ctx=Load()), orelse=Name(id='span_end', ctx=Load()))], ctx=Load())), Raise(exc=Call(func=Name(id='ParserSyntaxError', ctx=Load()), args=[Name(id='message', ctx=Load())], keywords=[keyword(arg='source', value=Attribute(value=Name(id='self', ctx=Load()), attr='source', ctx=Load())), keyword(arg='span', value=Name(id='span', ctx=Load()))]))], decorator_list=[], returns=Name(id='NoReturn', ctx=Load())), FunctionDef(name='enclosing_tokens', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='open_token', annotation=Name(id='str', ctx=Load())), arg(arg='close_token', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[arg(arg='around', annotation=Name(id='str', ctx=Load()))], kw_defaults=[None], defaults=[]), body=[If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='check', ctx=Load()), args=[Name(id='open_token', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='open_position', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='position', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Name(id='open_position', ctx=Store())], value=Constant(value=None))]), Expr(value=Yield()), If(test=Compare(left=Name(id='open_position', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return()], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='check', ctx=Load()), args=[Name(id='close_token', ctx=Load())], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='raise_syntax_error', ctx=Load()), args=[JoinedStr(values=[Constant(value='Expected matching '), FormattedValue(value=Name(id='close_token', ctx=Load()), conversion=-1), Constant(value=' for '), FormattedValue(value=Name(id='open_token', ctx=Load()), conversion=-1), Constant(value=', after '), FormattedValue(value=Name(id='around', ctx=Load()), conversion=-1)])], keywords=[keyword(arg='span_start', value=Name(id='open_position', ctx=Load()))]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]))], decorator_list=[Attribute(value=Name(id='contextlib', ctx=Load()), attr='contextmanager', ctx=Load())], returns=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Constant(value=None), ctx=Load()))], decorator_list=[])], type_ignores=[])