Module(body=[Import(names=[alias(name='datetime')]), Import(names=[alias(name='os')]), Import(names=[alias(name='sys')]), ImportFrom(module='getpass', names=[alias(name='getpass')], level=0), ImportFrom(module='optparse', names=[alias(name='OptionParser')], level=0), ImportFrom(module='peewee', names=[alias(name='*')], level=0), ImportFrom(module='peewee', names=[alias(name='print_')], level=0), ImportFrom(module='peewee', names=[alias(name='__version__', asname='peewee_version')], level=0), ImportFrom(module='playhouse.cockroachdb', names=[alias(name='CockroachDatabase')], level=0), ImportFrom(module='playhouse.reflection', names=[alias(name='*')], level=0), Assign(targets=[Name(id='HEADER', ctx=Store())], value=Constant(value="from peewee import *%s\n\ndatabase = %s('%s'%s)\n")), Assign(targets=[Name(id='BASE_MODEL', ctx=Store())], value=Constant(value='class BaseModel(Model):\n    class Meta:\n        database = database\n')), Assign(targets=[Name(id='UNKNOWN_FIELD', ctx=Store())], value=Constant(value='class UnknownField(object):\n    def __init__(self, *_, **__): pass\n')), Assign(targets=[Name(id='DATABASE_ALIASES', ctx=Store())], value=Dict(keys=[Name(id='CockroachDatabase', ctx=Load()), Name(id='MySQLDatabase', ctx=Load()), Name(id='PostgresqlDatabase', ctx=Load()), Name(id='SqliteDatabase', ctx=Load())], values=[List(elts=[Constant(value='cockroach'), Constant(value='cockroachdb'), Constant(value='crdb')], ctx=Load()), List(elts=[Constant(value='mysql'), Constant(value='mysqldb')], ctx=Load()), List(elts=[Constant(value='postgres'), Constant(value='postgresql')], ctx=Load()), List(elts=[Constant(value='sqlite'), Constant(value='sqlite3')], ctx=Load())])), Assign(targets=[Name(id='DATABASE_MAP', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[GeneratorExp(elt=Tuple(elts=[Name(id='value', ctx=Load()), Name(id='key', ctx=Load())], ctx=Load()), generators=[comprehension(target=Name(id='key', ctx=Store()), iter=Name(id='DATABASE_ALIASES', ctx=Load()), ifs=[], is_async=0), comprehension(target=Name(id='value', ctx=Store()), iter=Subscript(value=Name(id='DATABASE_ALIASES', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()), ifs=[], is_async=0)])], keywords=[])), FunctionDef(name='make_introspector', args=arguments(posonlyargs=[], args=[arg(arg='database_type'), arg(arg='database_name')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[If(test=Compare(left=Name(id='database_type', ctx=Load()), ops=[NotIn()], comparators=[Name(id='DATABASE_MAP', ctx=Load())]), body=[Expr(value=Call(func=Name(id='err', ctx=Load()), args=[BinOp(left=Constant(value='Unrecognized database, must be one of: %s'), op=Mod(), right=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Call(func=Attribute(value=Name(id='DATABASE_MAP', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[]))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='sys', ctx=Load()), attr='exit', ctx=Load()), args=[Constant(value=1)], keywords=[]))], orelse=[]), Assign(targets=[Name(id='schema', ctx=Store())], value=Call(func=Attribute(value=Name(id='kwargs', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='schema'), Constant(value=None)], keywords=[])), Assign(targets=[Name(id='DatabaseClass', ctx=Store())], value=Subscript(value=Name(id='DATABASE_MAP', ctx=Load()), slice=Name(id='database_type', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='db', ctx=Store())], value=Call(func=Name(id='DatabaseClass', ctx=Load()), args=[Name(id='database_name', ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))])), Return(value=Call(func=Attribute(value=Name(id='Introspector', ctx=Load()), attr='from_database', ctx=Load()), args=[Name(id='db', ctx=Load())], keywords=[keyword(arg='schema', value=Name(id='schema', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='print_models', args=arguments(posonlyargs=[], args=[arg(arg='introspector'), arg(arg='tables'), arg(arg='preserve_order'), arg(arg='include_views'), arg(arg='ignore_unknown'), arg(arg='snake_case')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=False), Constant(value=False), Constant(value=False), Constant(value=True)]), body=[Assign(targets=[Name(id='database', ctx=Store())], value=Call(func=Attribute(value=Name(id='introspector', ctx=Load()), attr='introspect', ctx=Load()), args=[], keywords=[keyword(arg='table_names', value=Name(id='tables', ctx=Load())), keyword(arg='include_views', value=Name(id='include_views', ctx=Load())), keyword(arg='snake_case', value=Name(id='snake_case', ctx=Load()))])), Assign(targets=[Name(id='db_kwargs', ctx=Store())], value=Call(func=Attribute(value=Name(id='introspector', ctx=Load()), attr='get_database_kwargs', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='header', ctx=Store())], value=BinOp(left=Name(id='HEADER', ctx=Load()), op=Mod(), right=Tuple(elts=[Call(func=Attribute(value=Name(id='introspector', ctx=Load()), attr='get_additional_imports', ctx=Load()), args=[], keywords=[]), Attribute(value=Call(func=Attribute(value=Name(id='introspector', ctx=Load()), attr='get_database_class', ctx=Load()), args=[], keywords=[]), attr='__name__', ctx=Load()), Call(func=Attribute(value=Name(id='introspector', ctx=Load()), attr='get_database_name', ctx=Load()), args=[], keywords=[]), IfExp(test=Name(id='db_kwargs', ctx=Load()), body=BinOp(left=Constant(value=', **%s'), op=Mod(), right=Call(func=Name(id='repr', ctx=Load()), args=[Name(id='db_kwargs', ctx=Load())], keywords=[])), orelse=Constant(value=''))], ctx=Load()))), Expr(value=Call(func=Name(id='print_', ctx=Load()), args=[Name(id='header', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='ignore_unknown', ctx=Load())), body=[Expr(value=Call(func=Name(id='print_', ctx=Load()), args=[Name(id='UNKNOWN_FIELD', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Name(id='print_', ctx=Load()), args=[Name(id='BASE_MODEL', ctx=Load())], keywords=[])), FunctionDef(name='_print_table', args=arguments(posonlyargs=[], args=[arg(arg='table'), arg(arg='seen'), arg(arg='accum')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Name(id='accum', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='accum', ctx=Load()), List(elts=[], ctx=Load())])), Assign(targets=[Name(id='foreign_keys', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='database', ctx=Load()), attr='foreign_keys', ctx=Load()), slice=Name(id='table', ctx=Load()), ctx=Load())), For(target=Name(id='foreign_key', ctx=Store()), iter=Name(id='foreign_keys', ctx=Load()), body=[Assign(targets=[Name(id='dest', ctx=Store())], value=Attribute(value=Name(id='foreign_key', ctx=Load()), attr='dest_table', ctx=Load())), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='dest', ctx=Load()), ops=[In()], comparators=[Name(id='accum', ctx=Load())]), Compare(left=Name(id='table', ctx=Load()), ops=[NotIn()], comparators=[Name(id='accum', ctx=Load())])]), body=[Expr(value=Call(func=Name(id='print_', ctx=Load()), args=[BinOp(left=Constant(value='# Possible reference cycle: %s'), op=Mod(), right=Name(id='dest', ctx=Load()))], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='dest', ctx=Load()), ops=[NotIn()], comparators=[Name(id='seen', ctx=Load())]), Compare(left=Name(id='dest', ctx=Load()), ops=[NotIn()], comparators=[Name(id='accum', ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Name(id='seen', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='dest', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='dest', ctx=Load()), ops=[NotEq()], comparators=[Name(id='table', ctx=Load())]), body=[Expr(value=Call(func=Name(id='_print_table', ctx=Load()), args=[Name(id='dest', ctx=Load()), Name(id='seen', ctx=Load()), BinOp(left=Name(id='accum', ctx=Load()), op=Add(), right=List(elts=[Name(id='table', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[])], orelse=[])], orelse=[]), Expr(value=Call(func=Name(id='print_', ctx=Load()), args=[BinOp(left=Constant(value='class %s(BaseModel):'), op=Mod(), right=Subscript(value=Attribute(value=Name(id='database', ctx=Load()), attr='model_names', ctx=Load()), slice=Name(id='table', ctx=Load()), ctx=Load()))], keywords=[])), Assign(targets=[Name(id='columns', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='database', ctx=Load()), attr='columns', ctx=Load()), slice=Name(id='table', ctx=Load()), ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='preserve_order', ctx=Load())), body=[Assign(targets=[Name(id='columns', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='columns', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='primary_keys', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='database', ctx=Load()), attr='primary_keys', ctx=Load()), slice=Name(id='table', ctx=Load()), ctx=Load())), For(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='column', ctx=Store())], ctx=Store()), iter=Name(id='columns', ctx=Load()), body=[Assign(targets=[Name(id='skip', ctx=Store())], value=Call(func=Name(id='all', ctx=Load()), args=[List(elts=[Compare(left=Name(id='name', ctx=Load()), ops=[In()], comparators=[Name(id='primary_keys', ctx=Load())]), Compare(left=Name(id='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='id')]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='primary_keys', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Attribute(value=Name(id='column', ctx=Load()), attr='field_class', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='introspector', ctx=Load()), attr='pk_classes', ctx=Load())])], ctx=Load())], keywords=[])), If(test=Name(id='skip', ctx=Load()), body=[Continue()], orelse=[]), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='column', ctx=Load()), attr='primary_key', ctx=Load()), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='primary_keys', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)])]), body=[Assign(targets=[Attribute(value=Name(id='column', ctx=Load()), attr='primary_key', ctx=Store())], value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='is_unknown', ctx=Store())], value=Compare(left=Attribute(value=Name(id='column', ctx=Load()), attr='field_class', ctx=Load()), ops=[Is()], comparators=[Name(id='UnknownField', ctx=Load())])), If(test=BoolOp(op=And(), values=[Name(id='is_unknown', ctx=Load()), Name(id='ignore_unknown', ctx=Load())]), body=[Assign(targets=[Name(id='disp', ctx=Store())], value=BinOp(left=Constant(value='%s - %s'), op=Mod(), right=Tuple(elts=[Attribute(value=Name(id='column', ctx=Load()), attr='name', ctx=Load()), BoolOp(op=Or(), values=[Attribute(value=Name(id='column', ctx=Load()), attr='raw_column_type', ctx=Load()), Constant(value='?')])], ctx=Load()))), Expr(value=Call(func=Name(id='print_', ctx=Load()), args=[BinOp(left=Constant(value='    # %s'), op=Mod(), right=Name(id='disp', ctx=Load()))], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='print_', ctx=Load()), args=[BinOp(left=Constant(value='    %s'), op=Mod(), right=Call(func=Attribute(value=Name(id='column', ctx=Load()), attr='get_field', ctx=Load()), args=[], keywords=[]))], keywords=[]))])], orelse=[]), Expr(value=Call(func=Name(id='print_', ctx=Load()), args=[Constant(value='')], keywords=[])), Expr(value=Call(func=Name(id='print_', ctx=Load()), args=[Constant(value='    class Meta:')], keywords=[])), Expr(value=Call(func=Name(id='print_', ctx=Load()), args=[BinOp(left=Constant(value="        table_name = '%s'"), op=Mod(), right=Name(id='table', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='multi_column_indexes', ctx=Store())], value=Call(func=Attribute(value=Name(id='database', ctx=Load()), attr='multi_column_indexes', ctx=Load()), args=[Name(id='table', ctx=Load())], keywords=[])), If(test=Name(id='multi_column_indexes', ctx=Load()), body=[Expr(value=Call(func=Name(id='print_', ctx=Load()), args=[Constant(value='        indexes = (')], keywords=[])), For(target=Tuple(elts=[Name(id='fields', ctx=Store()), Name(id='unique', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='multi_column_indexes', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Name(id='print_', ctx=Load()), args=[BinOp(left=Constant(value='            ((%s), %s),'), op=Mod(), right=Tuple(elts=[Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[GeneratorExp(elt=BinOp(left=Constant(value="'%s'"), op=Mod(), right=Name(id='field', ctx=Load())), generators=[comprehension(target=Name(id='field', ctx=Store()), iter=Name(id='fields', ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Name(id='unique', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[]), Expr(value=Call(func=Name(id='print_', ctx=Load()), args=[Constant(value='        )')], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='introspector', ctx=Load()), attr='schema', ctx=Load()), body=[Expr(value=Call(func=Name(id='print_', ctx=Load()), args=[BinOp(left=Constant(value="        schema = '%s'"), op=Mod(), right=Attribute(value=Name(id='introspector', ctx=Load()), attr='schema', ctx=Load()))], keywords=[]))], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='primary_keys', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='pk_field_names', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[ListComp(elt=Attribute(value=Name(id='field', ctx=Load()), attr='name', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='col', ctx=Store()), Name(id='field', ctx=Store())], ctx=Store()), iter=Name(id='columns', ctx=Load()), ifs=[Compare(left=Name(id='col', ctx=Load()), ops=[In()], comparators=[Name(id='primary_keys', ctx=Load())])], is_async=0)])], keywords=[])), Assign(targets=[Name(id='pk_list', ctx=Store())], value=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[GeneratorExp(elt=BinOp(left=Constant(value="'%s'"), op=Mod(), right=Name(id='pk', ctx=Load())), generators=[comprehension(target=Name(id='pk', ctx=Store()), iter=Name(id='pk_field_names', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Expr(value=Call(func=Name(id='print_', ctx=Load()), args=[BinOp(left=Constant(value='        primary_key = CompositeKey(%s)'), op=Mod(), right=Name(id='pk_list', ctx=Load()))], keywords=[]))], orelse=[If(test=UnaryOp(op=Not(), operand=Name(id='primary_keys', ctx=Load())), body=[Expr(value=Call(func=Name(id='print_', ctx=Load()), args=[Constant(value='        primary_key = False')], keywords=[]))], orelse=[])]), Expr(value=Call(func=Name(id='print_', ctx=Load()), args=[Constant(value='')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='seen', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='table', ctx=Load())], keywords=[]))], decorator_list=[]), Assign(targets=[Name(id='seen', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), For(target=Name(id='table', ctx=Store()), iter=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='database', ctx=Load()), attr='model_names', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='table', ctx=Load()), ops=[NotIn()], comparators=[Name(id='seen', ctx=Load())]), body=[If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Name(id='tables', ctx=Load())), Compare(left=Name(id='table', ctx=Load()), ops=[In()], comparators=[Name(id='tables', ctx=Load())])]), body=[Expr(value=Call(func=Name(id='_print_table', ctx=Load()), args=[Name(id='table', ctx=Load()), Name(id='seen', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='print_header', args=arguments(posonlyargs=[], args=[arg(arg='cmd_line'), arg(arg='introspector')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='timestamp', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Name(id='print_', ctx=Load()), args=[Constant(value='# Code generated by:')], keywords=[])), Expr(value=Call(func=Name(id='print_', ctx=Load()), args=[BinOp(left=Constant(value='# python -m pwiz %s'), op=Mod(), right=Name(id='cmd_line', ctx=Load()))], keywords=[])), Expr(value=Call(func=Name(id='print_', ctx=Load()), args=[BinOp(left=Constant(value='# Date: %s'), op=Mod(), right=Call(func=Attribute(value=Name(id='timestamp', ctx=Load()), attr='strftime', ctx=Load()), args=[Constant(value='%B %d, %Y %I:%M%p')], keywords=[]))], keywords=[])), Expr(value=Call(func=Name(id='print_', ctx=Load()), args=[BinOp(left=Constant(value='# Database: %s'), op=Mod(), right=Call(func=Attribute(value=Name(id='introspector', ctx=Load()), attr='get_database_name', ctx=Load()), args=[], keywords=[]))], keywords=[])), Expr(value=Call(func=Name(id='print_', ctx=Load()), args=[BinOp(left=Constant(value='# Peewee version: %s'), op=Mod(), right=Name(id='peewee_version', ctx=Load()))], keywords=[])), Expr(value=Call(func=Name(id='print_', ctx=Load()), args=[Constant(value='')], keywords=[]))], decorator_list=[]), FunctionDef(name='err', args=arguments(posonlyargs=[], args=[arg(arg='msg')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()), attr='write', ctx=Load()), args=[BinOp(left=Constant(value='\x1b[91m%s\x1b[0m\n'), op=Mod(), right=Name(id='msg', ctx=Load()))], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()), attr='flush', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='get_option_parser', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='parser', ctx=Store())], value=Call(func=Name(id='OptionParser', ctx=Load()), args=[], keywords=[keyword(arg='usage', value=Constant(value='usage: %prog [options] database_name'))])), Assign(targets=[Name(id='ao', ctx=Store())], value=Attribute(value=Name(id='parser', ctx=Load()), attr='add_option', ctx=Load())), Expr(value=Call(func=Name(id='ao', ctx=Load()), args=[Constant(value='-H'), Constant(value='--host')], keywords=[keyword(arg='dest', value=Constant(value='host'))])), Expr(value=Call(func=Name(id='ao', ctx=Load()), args=[Constant(value='-p'), Constant(value='--port')], keywords=[keyword(arg='dest', value=Constant(value='port')), keyword(arg='type', value=Constant(value='int'))])), Expr(value=Call(func=Name(id='ao', ctx=Load()), args=[Constant(value='-u'), Constant(value='--user')], keywords=[keyword(arg='dest', value=Constant(value='user'))])), Expr(value=Call(func=Name(id='ao', ctx=Load()), args=[Constant(value='-P'), Constant(value='--password')], keywords=[keyword(arg='dest', value=Constant(value='password')), keyword(arg='action', value=Constant(value='store_true'))])), Assign(targets=[Name(id='engines', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='DATABASE_MAP', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='ao', ctx=Load()), args=[Constant(value='-e'), Constant(value='--engine')], keywords=[keyword(arg='dest', value=Constant(value='engine')), keyword(arg='choices', value=Name(id='engines', ctx=Load())), keyword(arg='help', value=Constant(value='Database type, e.g. sqlite, mysql, postgresql or cockroachdb. Default is "postgresql".'))])), Expr(value=Call(func=Name(id='ao', ctx=Load()), args=[Constant(value='-s'), Constant(value='--schema')], keywords=[keyword(arg='dest', value=Constant(value='schema'))])), Expr(value=Call(func=Name(id='ao', ctx=Load()), args=[Constant(value='-t'), Constant(value='--tables')], keywords=[keyword(arg='dest', value=Constant(value='tables')), keyword(arg='help', value=Constant(value='Only generate the specified tables. Multiple table names should be separated by commas.'))])), Expr(value=Call(func=Name(id='ao', ctx=Load()), args=[Constant(value='-v'), Constant(value='--views')], keywords=[keyword(arg='dest', value=Constant(value='views')), keyword(arg='action', value=Constant(value='store_true')), keyword(arg='help', value=Constant(value='Generate model classes for VIEWs in addition to tables.'))])), Expr(value=Call(func=Name(id='ao', ctx=Load()), args=[Constant(value='-i'), Constant(value='--info')], keywords=[keyword(arg='dest', value=Constant(value='info')), keyword(arg='action', value=Constant(value='store_true')), keyword(arg='help', value=Constant(value='Add database information and other metadata to top of the generated file.'))])), Expr(value=Call(func=Name(id='ao', ctx=Load()), args=[Constant(value='-o'), Constant(value='--preserve-order')], keywords=[keyword(arg='action', value=Constant(value='store_true')), keyword(arg='dest', value=Constant(value='preserve_order')), keyword(arg='help', value=Constant(value='Model definition column ordering matches source table.'))])), Expr(value=Call(func=Name(id='ao', ctx=Load()), args=[Constant(value='-I'), Constant(value='--ignore-unknown')], keywords=[keyword(arg='action', value=Constant(value='store_true')), keyword(arg='dest', value=Constant(value='ignore_unknown')), keyword(arg='help', value=Constant(value='Ignore fields whose type cannot be determined.'))])), Expr(value=Call(func=Name(id='ao', ctx=Load()), args=[Constant(value='-L'), Constant(value='--legacy-naming')], keywords=[keyword(arg='action', value=Constant(value='store_true')), keyword(arg='dest', value=Constant(value='legacy_naming')), keyword(arg='help', value=Constant(value='Use legacy table- and column-name generation.'))])), Return(value=Name(id='parser', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_connect_kwargs', args=arguments(posonlyargs=[], args=[arg(arg='options')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ops', ctx=Store())], value=Tuple(elts=[Constant(value='host'), Constant(value='port'), Constant(value='user'), Constant(value='schema')], ctx=Load())), Assign(targets=[Name(id='kwargs', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[GeneratorExp(elt=Tuple(elts=[Name(id='o', ctx=Load()), Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='options', ctx=Load()), Name(id='o', ctx=Load())], keywords=[])], ctx=Load()), generators=[comprehension(target=Name(id='o', ctx=Store()), iter=Name(id='ops', ctx=Load()), ifs=[Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='options', ctx=Load()), Name(id='o', ctx=Load())], keywords=[])], is_async=0)])], keywords=[])), If(test=Attribute(value=Name(id='options', ctx=Load()), attr='password', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='kwargs', ctx=Load()), slice=Constant(value='password'), ctx=Store())], value=Call(func=Name(id='getpass', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Name(id='kwargs', ctx=Load()))], decorator_list=[]), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__')]), body=[Assign(targets=[Name(id='raw_argv', ctx=Store())], value=Attribute(value=Name(id='sys', ctx=Load()), attr='argv', ctx=Load())), Assign(targets=[Name(id='parser', ctx=Store())], value=Call(func=Name(id='get_option_parser', ctx=Load()), args=[], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='options', ctx=Store()), Name(id='args', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='parse_args', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Name(id='err', ctx=Load()), args=[Constant(value='Missing required parameter "database"')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='print_help', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='sys', ctx=Load()), attr='exit', ctx=Load()), args=[Constant(value=1)], keywords=[]))], orelse=[]), Assign(targets=[Name(id='connect', ctx=Store())], value=Call(func=Name(id='get_connect_kwargs', ctx=Load()), args=[Name(id='options', ctx=Load())], keywords=[])), Assign(targets=[Name(id='database', ctx=Store())], value=Subscript(value=Name(id='args', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())), Assign(targets=[Name(id='tables', ctx=Store())], value=Constant(value=None)), If(test=Attribute(value=Name(id='options', ctx=Load()), attr='tables', ctx=Load()), body=[Assign(targets=[Name(id='tables', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='table', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]), generators=[comprehension(target=Name(id='table', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='options', ctx=Load()), attr='tables', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=',')], keywords=[]), ifs=[Call(func=Attribute(value=Name(id='table', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[])], is_async=0)]))], orelse=[]), Assign(targets=[Name(id='engine', ctx=Store())], value=Attribute(value=Name(id='options', ctx=Load()), attr='engine', ctx=Load())), If(test=Compare(left=Name(id='engine', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='engine', ctx=Store())], value=IfExp(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='database', ctx=Load())], keywords=[]), body=Constant(value='sqlite'), orelse=Constant(value='postgresql')))], orelse=[]), Assign(targets=[Name(id='introspector', ctx=Store())], value=Call(func=Name(id='make_introspector', ctx=Load()), args=[Name(id='engine', ctx=Load()), Name(id='database', ctx=Load())], keywords=[keyword(value=Name(id='connect', ctx=Load()))])), If(test=Attribute(value=Name(id='options', ctx=Load()), attr='info', ctx=Load()), body=[Assign(targets=[Name(id='cmd_line', ctx=Store())], value=Call(func=Attribute(value=Constant(value=' '), attr='join', ctx=Load()), args=[Subscript(value=Name(id='raw_argv', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='print_header', ctx=Load()), args=[Name(id='cmd_line', ctx=Load()), Name(id='introspector', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Name(id='print_models', ctx=Load()), args=[Name(id='introspector', ctx=Load()), Name(id='tables', ctx=Load()), Attribute(value=Name(id='options', ctx=Load()), attr='preserve_order', ctx=Load()), Attribute(value=Name(id='options', ctx=Load()), attr='views', ctx=Load()), Attribute(value=Name(id='options', ctx=Load()), attr='ignore_unknown', ctx=Load()), UnaryOp(op=Not(), operand=Attribute(value=Name(id='options', ctx=Load()), attr='legacy_naming', ctx=Load()))], keywords=[]))], orelse=[])], type_ignores=[])