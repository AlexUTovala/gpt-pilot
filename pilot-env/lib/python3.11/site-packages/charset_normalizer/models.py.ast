Module(body=[ImportFrom(module='encodings.aliases', names=[alias(name='aliases')], level=0), ImportFrom(module='hashlib', names=[alias(name='sha256')], level=0), ImportFrom(module='json', names=[alias(name='dumps')], level=0), ImportFrom(module='typing', names=[alias(name='Any'), alias(name='Dict'), alias(name='Iterator'), alias(name='List'), alias(name='Optional'), alias(name='Tuple'), alias(name='Union')], level=0), ImportFrom(module='constant', names=[alias(name='TOO_BIG_SEQUENCE')], level=1), ImportFrom(module='utils', names=[alias(name='iana_name'), alias(name='is_multi_byte_encoding'), alias(name='unicode_range')], level=1), ClassDef(name='CharsetMatch', bases=[], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='payload', annotation=Name(id='bytes', ctx=Load())), arg(arg='guessed_encoding', annotation=Name(id='str', ctx=Load())), arg(arg='mean_mess_ratio', annotation=Name(id='float', ctx=Load())), arg(arg='has_sig_or_bom', annotation=Name(id='bool', ctx=Load())), arg(arg='languages', annotation=Constant(value='CoherenceMatches')), arg(arg='decoded_payload', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_payload', ctx=Store()), annotation=Name(id='bytes', ctx=Load()), value=Name(id='payload', ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_encoding', ctx=Store()), annotation=Name(id='str', ctx=Load()), value=Name(id='guessed_encoding', ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_mean_mess_ratio', ctx=Store()), annotation=Name(id='float', ctx=Load()), value=Name(id='mean_mess_ratio', ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_languages', ctx=Store()), annotation=Name(id='CoherenceMatches', ctx=Load()), value=Name(id='languages', ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_has_sig_or_bom', ctx=Store()), annotation=Name(id='bool', ctx=Load()), value=Name(id='has_sig_or_bom', ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_unicode_ranges', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_leaves', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='CharsetMatch', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_mean_coherence_ratio', ctx=Store()), annotation=Name(id='float', ctx=Load()), value=Constant(value=0.0), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_output_payload', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bytes', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_output_encoding', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_string', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Name(id='decoded_payload', ctx=Load()), simple=0)], decorator_list=[]), FunctionDef(name='__eq__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other', annotation=Name(id='object', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='other', ctx=Load()), Name(id='CharsetMatch', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='__eq__ cannot be invoked on {} and {}.'), attr='format', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='other', ctx=Load()), attr='__class__', ctx=Load())], keywords=[]), Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], orelse=[]), Return(value=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='encoding', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='other', ctx=Load()), attr='encoding', ctx=Load())]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='fingerprint', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='other', ctx=Load()), attr='fingerprint', ctx=Load())])]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='__lt__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other', annotation=Name(id='object', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Implemented to make sorted available upon CharsetMatches items.\n        ')), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='other', ctx=Load()), Name(id='CharsetMatch', ctx=Load())], keywords=[])), body=[Raise(exc=Name(id='ValueError', ctx=Load()))], orelse=[]), AnnAssign(target=Name(id='chaos_difference', ctx=Store()), annotation=Name(id='float', ctx=Load()), value=Call(func=Name(id='abs', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='chaos', ctx=Load()), op=Sub(), right=Attribute(value=Name(id='other', ctx=Load()), attr='chaos', ctx=Load()))], keywords=[]), simple=1), AnnAssign(target=Name(id='coherence_difference', ctx=Store()), annotation=Name(id='float', ctx=Load()), value=Call(func=Name(id='abs', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='coherence', ctx=Load()), op=Sub(), right=Attribute(value=Name(id='other', ctx=Load()), attr='coherence', ctx=Load()))], keywords=[]), simple=1), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='chaos_difference', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0.01)]), Compare(left=Name(id='coherence_difference', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0.02)])]), body=[Return(value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='coherence', ctx=Load()), ops=[Gt()], comparators=[Attribute(value=Name(id='other', ctx=Load()), attr='coherence', ctx=Load())]))], orelse=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='chaos_difference', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0.01)]), Compare(left=Name(id='coherence_difference', ctx=Load()), ops=[LtE()], comparators=[Constant(value=0.02)])]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_payload', ctx=Load())], keywords=[]), ops=[GtE()], comparators=[Name(id='TOO_BIG_SEQUENCE', ctx=Load())]), body=[Return(value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='chaos', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Name(id='other', ctx=Load()), attr='chaos', ctx=Load())]))], orelse=[]), Return(value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='multi_byte_usage', ctx=Load()), ops=[Gt()], comparators=[Attribute(value=Name(id='other', ctx=Load()), attr='multi_byte_usage', ctx=Load())]))], orelse=[])]), Return(value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='chaos', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Name(id='other', ctx=Load()), attr='chaos', ctx=Load())]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='multi_byte_usage', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Constant(value=1.0), op=Sub(), right=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])], keywords=[]), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='raw', ctx=Load())], keywords=[]))))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='float', ctx=Load())), FunctionDef(name='__str__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_string', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_string', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_payload', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_encoding', ctx=Load()), Constant(value='strict')], keywords=[]))], orelse=[]), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_string', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value="<CharsetMatch '{}' bytes({})>"), attr='format', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='encoding', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='fingerprint', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='add_submatch', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other', annotation=Constant(value='CharsetMatch'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='other', ctx=Load()), Name(id='CharsetMatch', ctx=Load())], keywords=[])), Compare(left=Name(id='other', ctx=Load()), ops=[Eq()], comparators=[Name(id='self', ctx=Load())])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Unable to add instance <{}> as a submatch of a CharsetMatch'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='other', ctx=Load()), attr='__class__', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='other', ctx=Load()), attr='_string', ctx=Store())], value=Constant(value=None)), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_leaves', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='other', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='encoding', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_encoding', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='encoding_aliases', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Encoding name are known by many name, using this could help when searching for IBM855 when it's listed as CP855.\n        ")), AnnAssign(target=Name(id='also_known_as', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), For(target=Tuple(elts=[Name(id='u', ctx=Store()), Name(id='p', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='aliases', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='encoding', ctx=Load()), ops=[Eq()], comparators=[Name(id='u', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='also_known_as', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='p', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='encoding', ctx=Load()), ops=[Eq()], comparators=[Name(id='p', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='also_known_as', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='u', ctx=Load())], keywords=[]))], orelse=[])])], orelse=[]), Return(value=Name(id='also_known_as', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='bom', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_has_sig_or_bom', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='byte_order_mark', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_has_sig_or_bom', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='languages', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Return the complete list of possible languages found in decoded sequence.\n        Usually not really useful. Returned list may be empty even if 'language' property return something != 'Unknown'.\n        ")), Return(value=ListComp(elt=Subscript(value=Name(id='e', ctx=Load()), slice=Constant(value=0), ctx=Load()), generators=[comprehension(target=Name(id='e', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_languages', ctx=Load()), ifs=[], is_async=0)]))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='language', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Most probable language found in decoded sequence. If none were detected or inferred, the property will return\n        "Unknown".\n        ')), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='_languages', ctx=Load())), body=[If(test=Compare(left=Constant(value='ascii'), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='could_be_from_charset', ctx=Load())]), body=[Return(value=Constant(value='English'))], orelse=[]), ImportFrom(module='charset_normalizer.cd', names=[alias(name='encoding_languages'), alias(name='mb_encoding_languages')], level=0), Assign(targets=[Name(id='languages', ctx=Store())], value=IfExp(test=Call(func=Name(id='is_multi_byte_encoding', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='encoding', ctx=Load())], keywords=[]), body=Call(func=Name(id='mb_encoding_languages', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='encoding', ctx=Load())], keywords=[]), orelse=Call(func=Name(id='encoding_languages', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='encoding', ctx=Load())], keywords=[]))), If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='languages', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Constant(value='Latin Based'), ops=[In()], comparators=[Name(id='languages', ctx=Load())])]), body=[Return(value=Constant(value='Unknown'))], orelse=[]), Return(value=Subscript(value=Name(id='languages', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_languages', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value=0), ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='chaos', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_mean_mess_ratio', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='float', ctx=Load())), FunctionDef(name='coherence', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='_languages', ctx=Load())), body=[Return(value=Constant(value=0.0))], orelse=[]), Return(value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_languages', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value=1), ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='float', ctx=Load())), FunctionDef(name='percent_chaos', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='round', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='chaos', ctx=Load()), op=Mult(), right=Constant(value=100))], keywords=[keyword(arg='ndigits', value=Constant(value=3))]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='float', ctx=Load())), FunctionDef(name='percent_coherence', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='round', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='coherence', ctx=Load()), op=Mult(), right=Constant(value=100))], keywords=[keyword(arg='ndigits', value=Constant(value=3))]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='float', ctx=Load())), FunctionDef(name='raw', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Original untouched bytes.\n        ')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_payload', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bytes', ctx=Load())), FunctionDef(name='submatch', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_leaves', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Constant(value='CharsetMatch'), ctx=Load())), FunctionDef(name='has_submatch', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_leaves', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=0)]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='alphabets', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_unicode_ranges', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_unicode_ranges', ctx=Load()))], orelse=[]), AnnAssign(target=Name(id='detected_ranges', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load()), value=ListComp(elt=Call(func=Name(id='unicode_range', ctx=Load()), args=[Name(id='char', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='char', ctx=Store()), iter=Call(func=Name(id='str', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), ifs=[], is_async=0)]), simple=1), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_unicode_ranges', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[SetComp(elt=Name(id='r', ctx=Load()), generators=[comprehension(target=Name(id='r', ctx=Store()), iter=Name(id='detected_ranges', ctx=Load()), ifs=[Name(id='r', ctx=Load())], is_async=0)])], keywords=[])], keywords=[])), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_unicode_ranges', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='could_be_from_charset', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        The complete list of encoding that output the exact SAME str result and therefore could be the originating\n        encoding.\n        This list does include the encoding available in property 'encoding'.\n        ")), Return(value=BinOp(left=List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_encoding', ctx=Load())], ctx=Load()), op=Add(), right=ListComp(elt=Attribute(value=Name(id='m', ctx=Load()), attr='encoding', ctx=Load()), generators=[comprehension(target=Name(id='m', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_leaves', ctx=Load()), ifs=[], is_async=0)])))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='output', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='encoding', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='utf_8')]), body=[Expr(value=Constant(value='\n        Method to get re-encoded bytes payload using given target encoding. Default to UTF-8.\n        Any errors will be simply ignored by the encoder NOT replaced.\n        ')), If(test=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_output_encoding', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_output_encoding', ctx=Load()), ops=[NotEq()], comparators=[Name(id='encoding', ctx=Load())])]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_output_encoding', ctx=Store())], value=Name(id='encoding', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_output_payload', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='encode', ctx=Load()), args=[Name(id='encoding', ctx=Load()), Constant(value='replace')], keywords=[]))], orelse=[]), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_output_payload', ctx=Load()))], decorator_list=[], returns=Name(id='bytes', ctx=Load())), FunctionDef(name='fingerprint', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Retrieve the unique SHA256 computed using the transformed (re-encoded) payload. Not the original one.\n        ')), Return(value=Call(func=Attribute(value=Call(func=Name(id='sha256', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='output', ctx=Load()), args=[], keywords=[])], keywords=[]), attr='hexdigest', ctx=Load()), args=[], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load()))], decorator_list=[]), ClassDef(name='CharsetMatches', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    Container with every CharsetMatch items ordered by default from most probable to the less one.\n    Act like a list(iterable) but does not implements all related methods.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='results', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='CharsetMatch', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_results', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='CharsetMatch', ctx=Load()), ctx=Load()), value=IfExp(test=Name(id='results', ctx=Load()), body=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='results', ctx=Load())], keywords=[]), orelse=List(elts=[], ctx=Load())), simple=0)], decorator_list=[]), FunctionDef(name='__iter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=YieldFrom(value=Attribute(value=Name(id='self', ctx=Load()), attr='_results', ctx=Load())))], decorator_list=[], returns=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Name(id='CharsetMatch', ctx=Load()), ctx=Load())), FunctionDef(name='__getitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='item', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Retrieve a single item either by its position or encoding name (alias may be used here).\n        Raise KeyError upon invalid index or encoding not present in results.\n        ')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='item', ctx=Load()), Name(id='int', ctx=Load())], keywords=[]), body=[Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_results', ctx=Load()), slice=Name(id='item', ctx=Load()), ctx=Load()))], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='item', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='item', ctx=Store())], value=Call(func=Name(id='iana_name', ctx=Load()), args=[Name(id='item', ctx=Load()), Constant(value=False)], keywords=[])), For(target=Name(id='result', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_results', ctx=Load()), body=[If(test=Compare(left=Name(id='item', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='result', ctx=Load()), attr='could_be_from_charset', ctx=Load())]), body=[Return(value=Name(id='result', ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Raise(exc=Name(id='KeyError', ctx=Load()))], decorator_list=[], returns=Name(id='CharsetMatch', ctx=Load())), FunctionDef(name='__len__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_results', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='__bool__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_results', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=0)]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='append', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='item', annotation=Name(id='CharsetMatch', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Insert a single match. Will be inserted accordingly to preserve sort.\n        Can be inserted as a submatch.\n        ')), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='item', ctx=Load()), Name(id='CharsetMatch', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value="Cannot append instance '{}' to CharsetMatches"), attr='format', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='item', ctx=Load()), attr='__class__', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='item', ctx=Load()), attr='raw', ctx=Load())], keywords=[]), ops=[LtE()], comparators=[Name(id='TOO_BIG_SEQUENCE', ctx=Load())]), body=[For(target=Name(id='match', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_results', ctx=Load()), body=[If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='match', ctx=Load()), attr='fingerprint', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='item', ctx=Load()), attr='fingerprint', ctx=Load())]), Compare(left=Attribute(value=Name(id='match', ctx=Load()), attr='chaos', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='item', ctx=Load()), attr='chaos', ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='add_submatch', ctx=Load()), args=[Name(id='item', ctx=Load())], keywords=[])), Return()], orelse=[])], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_results', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='item', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_results', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_results', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='best', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Simply return the first match. Strict equivalent to matches[0].\n        ')), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='_results', ctx=Load())), body=[Return(value=Constant(value=None))], orelse=[]), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_results', ctx=Load()), slice=Constant(value=0), ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='CharsetMatch'), ctx=Load())), FunctionDef(name='first', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Redundant method, call the method best(). Kept for BC reasons.\n        ')), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='best', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='CharsetMatch'), ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='CoherenceMatch', ctx=Store())], value=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='CoherenceMatches', ctx=Store())], value=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='CoherenceMatch', ctx=Load()), ctx=Load())), ClassDef(name='CliDetectionResult', bases=[], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='path', annotation=Name(id='str', ctx=Load())), arg(arg='encoding', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='encoding_aliases', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='alternative_encodings', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='language', annotation=Name(id='str', ctx=Load())), arg(arg='alphabets', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='has_sig_or_bom', annotation=Name(id='bool', ctx=Load())), arg(arg='chaos', annotation=Name(id='float', ctx=Load())), arg(arg='coherence', annotation=Name(id='float', ctx=Load())), arg(arg='unicode_path', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='is_preferred', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='path', ctx=Store()), annotation=Name(id='str', ctx=Load()), value=Name(id='path', ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='unicode_path', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Name(id='unicode_path', ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='encoding', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Name(id='encoding', ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='encoding_aliases', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Name(id='encoding_aliases', ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='alternative_encodings', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Name(id='alternative_encodings', ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='language', ctx=Store()), annotation=Name(id='str', ctx=Load()), value=Name(id='language', ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='alphabets', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Name(id='alphabets', ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='has_sig_or_bom', ctx=Store()), annotation=Name(id='bool', ctx=Load()), value=Name(id='has_sig_or_bom', ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='chaos', ctx=Store()), annotation=Name(id='float', ctx=Load()), value=Name(id='chaos', ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='coherence', ctx=Store()), annotation=Name(id='float', ctx=Load()), value=Name(id='coherence', ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='is_preferred', ctx=Store()), annotation=Name(id='bool', ctx=Load()), value=Name(id='is_preferred', ctx=Load()), simple=0)], decorator_list=[]), FunctionDef(name='__dict__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Dict(keys=[Constant(value='path'), Constant(value='encoding'), Constant(value='encoding_aliases'), Constant(value='alternative_encodings'), Constant(value='language'), Constant(value='alphabets'), Constant(value='has_sig_or_bom'), Constant(value='chaos'), Constant(value='coherence'), Constant(value='unicode_path'), Constant(value='is_preferred')], values=[Attribute(value=Name(id='self', ctx=Load()), attr='path', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='encoding', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='encoding_aliases', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='alternative_encodings', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='language', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='alphabets', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='has_sig_or_bom', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='chaos', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='coherence', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='unicode_path', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='is_preferred', ctx=Load())]))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='to_json', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='dumps', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='__dict__', ctx=Load())], keywords=[keyword(arg='ensure_ascii', value=Constant(value=True)), keyword(arg='indent', value=Constant(value=4))]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[])], type_ignores=[])