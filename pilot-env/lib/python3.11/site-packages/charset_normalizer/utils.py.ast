Module(body=[Import(names=[alias(name='importlib')]), Import(names=[alias(name='logging')]), Import(names=[alias(name='unicodedata')]), ImportFrom(module='codecs', names=[alias(name='IncrementalDecoder')], level=0), ImportFrom(module='encodings.aliases', names=[alias(name='aliases')], level=0), ImportFrom(module='functools', names=[alias(name='lru_cache')], level=0), ImportFrom(module='re', names=[alias(name='findall')], level=0), ImportFrom(module='typing', names=[alias(name='Generator'), alias(name='List'), alias(name='Optional'), alias(name='Set'), alias(name='Tuple'), alias(name='Union')], level=0), ImportFrom(module='_multibytecodec', names=[alias(name='MultibyteIncrementalDecoder')], level=0), ImportFrom(module='constant', names=[alias(name='ENCODING_MARKS'), alias(name='IANA_SUPPORTED_SIMILAR'), alias(name='RE_POSSIBLE_ENCODING_INDICATION'), alias(name='UNICODE_RANGES_COMBINED'), alias(name='UNICODE_SECONDARY_RANGE_KEYWORD'), alias(name='UTF8_MAXIMAL_ALLOCATION')], level=1), FunctionDef(name='is_accentuated', args=arguments(posonlyargs=[], args=[arg(arg='character', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[AnnAssign(target=Name(id='description', ctx=Store()), annotation=Name(id='str', ctx=Load()), value=Call(func=Attribute(value=Name(id='unicodedata', ctx=Load()), attr='name', ctx=Load()), args=[Name(id='character', ctx=Load())], keywords=[]), simple=1)], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Return(value=Constant(value=False))])], orelse=[], finalbody=[]), Return(value=BoolOp(op=Or(), values=[Compare(left=Constant(value='WITH GRAVE'), ops=[In()], comparators=[Name(id='description', ctx=Load())]), Compare(left=Constant(value='WITH ACUTE'), ops=[In()], comparators=[Name(id='description', ctx=Load())]), Compare(left=Constant(value='WITH CEDILLA'), ops=[In()], comparators=[Name(id='description', ctx=Load())]), Compare(left=Constant(value='WITH DIAERESIS'), ops=[In()], comparators=[Name(id='description', ctx=Load())]), Compare(left=Constant(value='WITH CIRCUMFLEX'), ops=[In()], comparators=[Name(id='description', ctx=Load())]), Compare(left=Constant(value='WITH TILDE'), ops=[In()], comparators=[Name(id='description', ctx=Load())]), Compare(left=Constant(value='WITH MACRON'), ops=[In()], comparators=[Name(id='description', ctx=Load())]), Compare(left=Constant(value='WITH RING ABOVE'), ops=[In()], comparators=[Name(id='description', ctx=Load())])]))], decorator_list=[Call(func=Name(id='lru_cache', ctx=Load()), args=[], keywords=[keyword(arg='maxsize', value=Name(id='UTF8_MAXIMAL_ALLOCATION', ctx=Load()))])], returns=Name(id='bool', ctx=Load())), FunctionDef(name='remove_accent', args=arguments(posonlyargs=[], args=[arg(arg='character', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Name(id='decomposed', ctx=Store()), annotation=Name(id='str', ctx=Load()), value=Call(func=Attribute(value=Name(id='unicodedata', ctx=Load()), attr='decomposition', ctx=Load()), args=[Name(id='character', ctx=Load())], keywords=[]), simple=1), If(test=UnaryOp(op=Not(), operand=Name(id='decomposed', ctx=Load())), body=[Return(value=Name(id='character', ctx=Load()))], orelse=[]), AnnAssign(target=Name(id='codes', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Call(func=Attribute(value=Name(id='decomposed', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=' ')], keywords=[]), simple=1), Return(value=Call(func=Name(id='chr', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='codes', ctx=Load()), slice=Constant(value=0), ctx=Load()), Constant(value=16)], keywords=[])], keywords=[]))], decorator_list=[Call(func=Name(id='lru_cache', ctx=Load()), args=[], keywords=[keyword(arg='maxsize', value=Name(id='UTF8_MAXIMAL_ALLOCATION', ctx=Load()))])], returns=Name(id='str', ctx=Load())), FunctionDef(name='unicode_range', args=arguments(posonlyargs=[], args=[arg(arg='character', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Retrieve the Unicode range official name from a single character.\n    ')), AnnAssign(target=Name(id='character_ord', ctx=Store()), annotation=Name(id='int', ctx=Load()), value=Call(func=Name(id='ord', ctx=Load()), args=[Name(id='character', ctx=Load())], keywords=[]), simple=1), For(target=Tuple(elts=[Name(id='range_name', ctx=Store()), Name(id='ord_range', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='UNICODE_RANGES_COMBINED', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Name(id='character_ord', ctx=Load()), ops=[In()], comparators=[Name(id='ord_range', ctx=Load())]), body=[Return(value=Name(id='range_name', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Constant(value=None))], decorator_list=[Call(func=Name(id='lru_cache', ctx=Load()), args=[], keywords=[keyword(arg='maxsize', value=Name(id='UTF8_MAXIMAL_ALLOCATION', ctx=Load()))])], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='is_latin', args=arguments(posonlyargs=[], args=[arg(arg='character', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[AnnAssign(target=Name(id='description', ctx=Store()), annotation=Name(id='str', ctx=Load()), value=Call(func=Attribute(value=Name(id='unicodedata', ctx=Load()), attr='name', ctx=Load()), args=[Name(id='character', ctx=Load())], keywords=[]), simple=1)], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Return(value=Constant(value=False))])], orelse=[], finalbody=[]), Return(value=Compare(left=Constant(value='LATIN'), ops=[In()], comparators=[Name(id='description', ctx=Load())]))], decorator_list=[Call(func=Name(id='lru_cache', ctx=Load()), args=[], keywords=[keyword(arg='maxsize', value=Name(id='UTF8_MAXIMAL_ALLOCATION', ctx=Load()))])], returns=Name(id='bool', ctx=Load())), FunctionDef(name='is_punctuation', args=arguments(posonlyargs=[], args=[arg(arg='character', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Name(id='character_category', ctx=Store()), annotation=Name(id='str', ctx=Load()), value=Call(func=Attribute(value=Name(id='unicodedata', ctx=Load()), attr='category', ctx=Load()), args=[Name(id='character', ctx=Load())], keywords=[]), simple=1), If(test=Compare(left=Constant(value='P'), ops=[In()], comparators=[Name(id='character_category', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[]), AnnAssign(target=Name(id='character_range', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Call(func=Name(id='unicode_range', ctx=Load()), args=[Name(id='character', ctx=Load())], keywords=[]), simple=1), If(test=Compare(left=Name(id='character_range', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=False))], orelse=[]), Return(value=Compare(left=Constant(value='Punctuation'), ops=[In()], comparators=[Name(id='character_range', ctx=Load())]))], decorator_list=[Call(func=Name(id='lru_cache', ctx=Load()), args=[], keywords=[keyword(arg='maxsize', value=Name(id='UTF8_MAXIMAL_ALLOCATION', ctx=Load()))])], returns=Name(id='bool', ctx=Load())), FunctionDef(name='is_symbol', args=arguments(posonlyargs=[], args=[arg(arg='character', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Name(id='character_category', ctx=Store()), annotation=Name(id='str', ctx=Load()), value=Call(func=Attribute(value=Name(id='unicodedata', ctx=Load()), attr='category', ctx=Load()), args=[Name(id='character', ctx=Load())], keywords=[]), simple=1), If(test=BoolOp(op=Or(), values=[Compare(left=Constant(value='S'), ops=[In()], comparators=[Name(id='character_category', ctx=Load())]), Compare(left=Constant(value='N'), ops=[In()], comparators=[Name(id='character_category', ctx=Load())])]), body=[Return(value=Constant(value=True))], orelse=[]), AnnAssign(target=Name(id='character_range', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Call(func=Name(id='unicode_range', ctx=Load()), args=[Name(id='character', ctx=Load())], keywords=[]), simple=1), If(test=Compare(left=Name(id='character_range', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=False))], orelse=[]), Return(value=BoolOp(op=And(), values=[Compare(left=Constant(value='Forms'), ops=[In()], comparators=[Name(id='character_range', ctx=Load())]), Compare(left=Name(id='character_category', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Lo')])]))], decorator_list=[Call(func=Name(id='lru_cache', ctx=Load()), args=[], keywords=[keyword(arg='maxsize', value=Name(id='UTF8_MAXIMAL_ALLOCATION', ctx=Load()))])], returns=Name(id='bool', ctx=Load())), FunctionDef(name='is_emoticon', args=arguments(posonlyargs=[], args=[arg(arg='character', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Name(id='character_range', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Call(func=Name(id='unicode_range', ctx=Load()), args=[Name(id='character', ctx=Load())], keywords=[]), simple=1), If(test=Compare(left=Name(id='character_range', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=False))], orelse=[]), Return(value=BoolOp(op=Or(), values=[Compare(left=Constant(value='Emoticons'), ops=[In()], comparators=[Name(id='character_range', ctx=Load())]), Compare(left=Constant(value='Pictographs'), ops=[In()], comparators=[Name(id='character_range', ctx=Load())])]))], decorator_list=[Call(func=Name(id='lru_cache', ctx=Load()), args=[], keywords=[keyword(arg='maxsize', value=Name(id='UTF8_MAXIMAL_ALLOCATION', ctx=Load()))])], returns=Name(id='bool', ctx=Load())), FunctionDef(name='is_separator', args=arguments(posonlyargs=[], args=[arg(arg='character', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='character', ctx=Load()), attr='isspace', ctx=Load()), args=[], keywords=[]), Compare(left=Name(id='character', ctx=Load()), ops=[In()], comparators=[Set(elts=[Constant(value='｜'), Constant(value='+'), Constant(value='<'), Constant(value='>')])])]), body=[Return(value=Constant(value=True))], orelse=[]), AnnAssign(target=Name(id='character_category', ctx=Store()), annotation=Name(id='str', ctx=Load()), value=Call(func=Attribute(value=Name(id='unicodedata', ctx=Load()), attr='category', ctx=Load()), args=[Name(id='character', ctx=Load())], keywords=[]), simple=1), Return(value=BoolOp(op=Or(), values=[Compare(left=Constant(value='Z'), ops=[In()], comparators=[Name(id='character_category', ctx=Load())]), Compare(left=Name(id='character_category', ctx=Load()), ops=[In()], comparators=[Set(elts=[Constant(value='Po'), Constant(value='Pd'), Constant(value='Pc')])])]))], decorator_list=[Call(func=Name(id='lru_cache', ctx=Load()), args=[], keywords=[keyword(arg='maxsize', value=Name(id='UTF8_MAXIMAL_ALLOCATION', ctx=Load()))])], returns=Name(id='bool', ctx=Load())), FunctionDef(name='is_case_variable', args=arguments(posonlyargs=[], args=[arg(arg='character', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Compare(left=Call(func=Attribute(value=Name(id='character', ctx=Load()), attr='islower', ctx=Load()), args=[], keywords=[]), ops=[NotEq()], comparators=[Call(func=Attribute(value=Name(id='character', ctx=Load()), attr='isupper', ctx=Load()), args=[], keywords=[])]))], decorator_list=[Call(func=Name(id='lru_cache', ctx=Load()), args=[], keywords=[keyword(arg='maxsize', value=Name(id='UTF8_MAXIMAL_ALLOCATION', ctx=Load()))])], returns=Name(id='bool', ctx=Load())), FunctionDef(name='is_cjk', args=arguments(posonlyargs=[], args=[arg(arg='character', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Name(id='character_name', ctx=Store())], value=Call(func=Attribute(value=Name(id='unicodedata', ctx=Load()), attr='name', ctx=Load()), args=[Name(id='character', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Return(value=Constant(value=False))])], orelse=[], finalbody=[]), Return(value=Compare(left=Constant(value='CJK'), ops=[In()], comparators=[Name(id='character_name', ctx=Load())]))], decorator_list=[Call(func=Name(id='lru_cache', ctx=Load()), args=[], keywords=[keyword(arg='maxsize', value=Name(id='UTF8_MAXIMAL_ALLOCATION', ctx=Load()))])], returns=Name(id='bool', ctx=Load())), FunctionDef(name='is_hiragana', args=arguments(posonlyargs=[], args=[arg(arg='character', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Name(id='character_name', ctx=Store())], value=Call(func=Attribute(value=Name(id='unicodedata', ctx=Load()), attr='name', ctx=Load()), args=[Name(id='character', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Return(value=Constant(value=False))])], orelse=[], finalbody=[]), Return(value=Compare(left=Constant(value='HIRAGANA'), ops=[In()], comparators=[Name(id='character_name', ctx=Load())]))], decorator_list=[Call(func=Name(id='lru_cache', ctx=Load()), args=[], keywords=[keyword(arg='maxsize', value=Name(id='UTF8_MAXIMAL_ALLOCATION', ctx=Load()))])], returns=Name(id='bool', ctx=Load())), FunctionDef(name='is_katakana', args=arguments(posonlyargs=[], args=[arg(arg='character', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Name(id='character_name', ctx=Store())], value=Call(func=Attribute(value=Name(id='unicodedata', ctx=Load()), attr='name', ctx=Load()), args=[Name(id='character', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Return(value=Constant(value=False))])], orelse=[], finalbody=[]), Return(value=Compare(left=Constant(value='KATAKANA'), ops=[In()], comparators=[Name(id='character_name', ctx=Load())]))], decorator_list=[Call(func=Name(id='lru_cache', ctx=Load()), args=[], keywords=[keyword(arg='maxsize', value=Name(id='UTF8_MAXIMAL_ALLOCATION', ctx=Load()))])], returns=Name(id='bool', ctx=Load())), FunctionDef(name='is_hangul', args=arguments(posonlyargs=[], args=[arg(arg='character', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Name(id='character_name', ctx=Store())], value=Call(func=Attribute(value=Name(id='unicodedata', ctx=Load()), attr='name', ctx=Load()), args=[Name(id='character', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Return(value=Constant(value=False))])], orelse=[], finalbody=[]), Return(value=Compare(left=Constant(value='HANGUL'), ops=[In()], comparators=[Name(id='character_name', ctx=Load())]))], decorator_list=[Call(func=Name(id='lru_cache', ctx=Load()), args=[], keywords=[keyword(arg='maxsize', value=Name(id='UTF8_MAXIMAL_ALLOCATION', ctx=Load()))])], returns=Name(id='bool', ctx=Load())), FunctionDef(name='is_thai', args=arguments(posonlyargs=[], args=[arg(arg='character', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Name(id='character_name', ctx=Store())], value=Call(func=Attribute(value=Name(id='unicodedata', ctx=Load()), attr='name', ctx=Load()), args=[Name(id='character', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Return(value=Constant(value=False))])], orelse=[], finalbody=[]), Return(value=Compare(left=Constant(value='THAI'), ops=[In()], comparators=[Name(id='character_name', ctx=Load())]))], decorator_list=[Call(func=Name(id='lru_cache', ctx=Load()), args=[], keywords=[keyword(arg='maxsize', value=Name(id='UTF8_MAXIMAL_ALLOCATION', ctx=Load()))])], returns=Name(id='bool', ctx=Load())), FunctionDef(name='is_arabic', args=arguments(posonlyargs=[], args=[arg(arg='character', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Name(id='character_name', ctx=Store())], value=Call(func=Attribute(value=Name(id='unicodedata', ctx=Load()), attr='name', ctx=Load()), args=[Name(id='character', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Return(value=Constant(value=False))])], orelse=[], finalbody=[]), Return(value=Compare(left=Constant(value='ARABIC'), ops=[In()], comparators=[Name(id='character_name', ctx=Load())]))], decorator_list=[Call(func=Name(id='lru_cache', ctx=Load()), args=[], keywords=[keyword(arg='maxsize', value=Name(id='UTF8_MAXIMAL_ALLOCATION', ctx=Load()))])], returns=Name(id='bool', ctx=Load())), FunctionDef(name='is_arabic_isolated_form', args=arguments(posonlyargs=[], args=[arg(arg='character', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Name(id='character_name', ctx=Store())], value=Call(func=Attribute(value=Name(id='unicodedata', ctx=Load()), attr='name', ctx=Load()), args=[Name(id='character', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Return(value=Constant(value=False))])], orelse=[], finalbody=[]), Return(value=BoolOp(op=And(), values=[Compare(left=Constant(value='ARABIC'), ops=[In()], comparators=[Name(id='character_name', ctx=Load())]), Compare(left=Constant(value='ISOLATED FORM'), ops=[In()], comparators=[Name(id='character_name', ctx=Load())])]))], decorator_list=[Call(func=Name(id='lru_cache', ctx=Load()), args=[], keywords=[keyword(arg='maxsize', value=Name(id='UTF8_MAXIMAL_ALLOCATION', ctx=Load()))])], returns=Name(id='bool', ctx=Load())), FunctionDef(name='is_unicode_range_secondary', args=arguments(posonlyargs=[], args=[arg(arg='range_name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=Compare(left=Name(id='keyword', ctx=Load()), ops=[In()], comparators=[Name(id='range_name', ctx=Load())]), generators=[comprehension(target=Name(id='keyword', ctx=Store()), iter=Name(id='UNICODE_SECONDARY_RANGE_KEYWORD', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[Call(func=Name(id='lru_cache', ctx=Load()), args=[], keywords=[keyword(arg='maxsize', value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='UNICODE_RANGES_COMBINED', ctx=Load())], keywords=[]))])], returns=Name(id='bool', ctx=Load())), FunctionDef(name='is_unprintable', args=arguments(posonlyargs=[], args=[arg(arg='character', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=And(), values=[Compare(left=Call(func=Attribute(value=Name(id='character', ctx=Load()), attr='isspace', ctx=Load()), args=[], keywords=[]), ops=[Is()], comparators=[Constant(value=False)]), Compare(left=Call(func=Attribute(value=Name(id='character', ctx=Load()), attr='isprintable', ctx=Load()), args=[], keywords=[]), ops=[Is()], comparators=[Constant(value=False)]), Compare(left=Name(id='character', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='\x1a')]), Compare(left=Name(id='character', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='\ufeff')])]))], decorator_list=[Call(func=Name(id='lru_cache', ctx=Load()), args=[], keywords=[keyword(arg='maxsize', value=Name(id='UTF8_MAXIMAL_ALLOCATION', ctx=Load()))])], returns=Name(id='bool', ctx=Load())), FunctionDef(name='any_specified_encoding', args=arguments(posonlyargs=[], args=[arg(arg='sequence', annotation=Name(id='bytes', ctx=Load())), arg(arg='search_zone', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=8192)]), body=[Expr(value=Constant(value='\n    Extract using ASCII-only decoder any specified encoding in the first n-bytes.\n    ')), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='sequence', ctx=Load()), Name(id='bytes', ctx=Load())], keywords=[])), body=[Raise(exc=Name(id='TypeError', ctx=Load()))], orelse=[]), AnnAssign(target=Name(id='seq_len', ctx=Store()), annotation=Name(id='int', ctx=Load()), value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='sequence', ctx=Load())], keywords=[]), simple=1), AnnAssign(target=Name(id='results', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Call(func=Name(id='findall', ctx=Load()), args=[Name(id='RE_POSSIBLE_ENCODING_INDICATION', ctx=Load()), Call(func=Attribute(value=Subscript(value=Name(id='sequence', ctx=Load()), slice=Slice(upper=Call(func=Name(id='min', ctx=Load()), args=[Name(id='seq_len', ctx=Load()), Name(id='search_zone', ctx=Load())], keywords=[])), ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='ascii')], keywords=[keyword(arg='errors', value=Constant(value='ignore'))])], keywords=[]), simple=1), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='results', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=None))], orelse=[]), For(target=Name(id='specified_encoding', ctx=Store()), iter=Name(id='results', ctx=Load()), body=[Assign(targets=[Name(id='specified_encoding', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='specified_encoding', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value='-'), Constant(value='_')], keywords=[])), AnnAssign(target=Name(id='encoding_alias', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='encoding_iana', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), For(target=Tuple(elts=[Name(id='encoding_alias', ctx=Store()), Name(id='encoding_iana', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='aliases', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Name(id='encoding_alias', ctx=Load()), ops=[Eq()], comparators=[Name(id='specified_encoding', ctx=Load())]), body=[Return(value=Name(id='encoding_iana', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='encoding_iana', ctx=Load()), ops=[Eq()], comparators=[Name(id='specified_encoding', ctx=Load())]), body=[Return(value=Name(id='encoding_iana', ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Return(value=Constant(value=None))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='is_multi_byte_encoding', args=arguments(posonlyargs=[], args=[arg(arg='name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Verify is a specific encoding is a multi byte one based on it IANA name\n    ')), Return(value=BoolOp(op=Or(), values=[Compare(left=Name(id='name', ctx=Load()), ops=[In()], comparators=[Set(elts=[Constant(value='utf_8'), Constant(value='utf_8_sig'), Constant(value='utf_16'), Constant(value='utf_16_be'), Constant(value='utf_16_le'), Constant(value='utf_32'), Constant(value='utf_32_le'), Constant(value='utf_32_be'), Constant(value='utf_7')])]), Call(func=Name(id='issubclass', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='importlib', ctx=Load()), attr='import_module', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='encodings.{}'), attr='format', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])], keywords=[]), attr='IncrementalDecoder', ctx=Load()), Name(id='MultibyteIncrementalDecoder', ctx=Load())], keywords=[])]))], decorator_list=[Call(func=Name(id='lru_cache', ctx=Load()), args=[], keywords=[keyword(arg='maxsize', value=Constant(value=128))])], returns=Name(id='bool', ctx=Load())), FunctionDef(name='identify_sig_or_bom', args=arguments(posonlyargs=[], args=[arg(arg='sequence', annotation=Name(id='bytes', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Identify and extract SIG/BOM in given sequence.\n    ')), For(target=Name(id='iana_encoding', ctx=Store()), iter=Name(id='ENCODING_MARKS', ctx=Load()), body=[AnnAssign(target=Name(id='marks', ctx=Store()), annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='bytes', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='bytes', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Subscript(value=Name(id='ENCODING_MARKS', ctx=Load()), slice=Name(id='iana_encoding', ctx=Load()), ctx=Load()), simple=1), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='marks', ctx=Load()), Name(id='bytes', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='marks', ctx=Store())], value=List(elts=[Name(id='marks', ctx=Load())], ctx=Load()))], orelse=[]), For(target=Name(id='mark', ctx=Store()), iter=Name(id='marks', ctx=Load()), body=[If(test=Call(func=Attribute(value=Name(id='sequence', ctx=Load()), attr='startswith', ctx=Load()), args=[Name(id='mark', ctx=Load())], keywords=[]), body=[Return(value=Tuple(elts=[Name(id='iana_encoding', ctx=Load()), Name(id='mark', ctx=Load())], ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Return(value=Tuple(elts=[Constant(value=None), Constant(value=b'')], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), Name(id='bytes', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='should_strip_sig_or_bom', args=arguments(posonlyargs=[], args=[arg(arg='iana_encoding', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Compare(left=Name(id='iana_encoding', ctx=Load()), ops=[NotIn()], comparators=[Set(elts=[Constant(value='utf_16'), Constant(value='utf_32')])]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='iana_name', args=arguments(posonlyargs=[], args=[arg(arg='cp_name', annotation=Name(id='str', ctx=Load())), arg(arg='strict', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Assign(targets=[Name(id='cp_name', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='cp_name', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value='-'), Constant(value='_')], keywords=[])), AnnAssign(target=Name(id='encoding_alias', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='encoding_iana', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), For(target=Tuple(elts=[Name(id='encoding_alias', ctx=Store()), Name(id='encoding_iana', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='aliases', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Name(id='cp_name', ctx=Load()), ops=[In()], comparators=[List(elts=[Name(id='encoding_alias', ctx=Load()), Name(id='encoding_iana', ctx=Load())], ctx=Load())]), body=[Return(value=Name(id='encoding_iana', ctx=Load()))], orelse=[])], orelse=[]), If(test=Name(id='strict', ctx=Load()), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value="Unable to retrieve IANA for '{}'"), attr='format', ctx=Load()), args=[Name(id='cp_name', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Return(value=Name(id='cp_name', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='range_scan', args=arguments(posonlyargs=[], args=[arg(arg='decoded_sequence', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Name(id='ranges', ctx=Store()), annotation=Subscript(value=Name(id='Set', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[]), simple=1), For(target=Name(id='character', ctx=Store()), iter=Name(id='decoded_sequence', ctx=Load()), body=[AnnAssign(target=Name(id='character_range', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Call(func=Name(id='unicode_range', ctx=Load()), args=[Name(id='character', ctx=Load())], keywords=[]), simple=1), If(test=Compare(left=Name(id='character_range', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Continue()], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='ranges', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='character_range', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='ranges', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='cp_similarity', args=arguments(posonlyargs=[], args=[arg(arg='iana_name_a', annotation=Name(id='str', ctx=Load())), arg(arg='iana_name_b', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Call(func=Name(id='is_multi_byte_encoding', ctx=Load()), args=[Name(id='iana_name_a', ctx=Load())], keywords=[]), Call(func=Name(id='is_multi_byte_encoding', ctx=Load()), args=[Name(id='iana_name_b', ctx=Load())], keywords=[])]), body=[Return(value=Constant(value=0.0))], orelse=[]), Assign(targets=[Name(id='decoder_a', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Name(id='importlib', ctx=Load()), attr='import_module', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='encodings.{}'), attr='format', ctx=Load()), args=[Name(id='iana_name_a', ctx=Load())], keywords=[])], keywords=[]), attr='IncrementalDecoder', ctx=Load())), Assign(targets=[Name(id='decoder_b', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Name(id='importlib', ctx=Load()), attr='import_module', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='encodings.{}'), attr='format', ctx=Load()), args=[Name(id='iana_name_b', ctx=Load())], keywords=[])], keywords=[]), attr='IncrementalDecoder', ctx=Load())), AnnAssign(target=Name(id='id_a', ctx=Store()), annotation=Name(id='IncrementalDecoder', ctx=Load()), value=Call(func=Name(id='decoder_a', ctx=Load()), args=[], keywords=[keyword(arg='errors', value=Constant(value='ignore'))]), simple=1), AnnAssign(target=Name(id='id_b', ctx=Store()), annotation=Name(id='IncrementalDecoder', ctx=Load()), value=Call(func=Name(id='decoder_b', ctx=Load()), args=[], keywords=[keyword(arg='errors', value=Constant(value='ignore'))]), simple=1), AnnAssign(target=Name(id='character_match_count', ctx=Store()), annotation=Name(id='int', ctx=Load()), value=Constant(value=0), simple=1), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=255)], keywords=[]), body=[AnnAssign(target=Name(id='to_be_decoded', ctx=Store()), annotation=Name(id='bytes', ctx=Load()), value=Call(func=Name(id='bytes', ctx=Load()), args=[List(elts=[Name(id='i', ctx=Load())], ctx=Load())], keywords=[]), simple=1), If(test=Compare(left=Call(func=Attribute(value=Name(id='id_a', ctx=Load()), attr='decode', ctx=Load()), args=[Name(id='to_be_decoded', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='id_b', ctx=Load()), attr='decode', ctx=Load()), args=[Name(id='to_be_decoded', ctx=Load())], keywords=[])]), body=[AugAssign(target=Name(id='character_match_count', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], orelse=[]), Return(value=BinOp(left=Name(id='character_match_count', ctx=Load()), op=Div(), right=Constant(value=254)))], decorator_list=[], returns=Name(id='float', ctx=Load())), FunctionDef(name='is_cp_similar', args=arguments(posonlyargs=[], args=[arg(arg='iana_name_a', annotation=Name(id='str', ctx=Load())), arg(arg='iana_name_b', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Determine if two code page are at least 80% similar. IANA_SUPPORTED_SIMILAR dict was generated using\n    the function cp_similarity.\n    ')), Return(value=BoolOp(op=And(), values=[Compare(left=Name(id='iana_name_a', ctx=Load()), ops=[In()], comparators=[Name(id='IANA_SUPPORTED_SIMILAR', ctx=Load())]), Compare(left=Name(id='iana_name_b', ctx=Load()), ops=[In()], comparators=[Subscript(value=Name(id='IANA_SUPPORTED_SIMILAR', ctx=Load()), slice=Name(id='iana_name_a', ctx=Load()), ctx=Load())])]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='set_logging_handler', args=arguments(posonlyargs=[], args=[arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='level', annotation=Name(id='int', ctx=Load())), arg(arg='format_string', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='charset_normalizer'), Attribute(value=Name(id='logging', ctx=Load()), attr='INFO', ctx=Load()), Constant(value='%(asctime)s | %(levelname)s | %(message)s')]), body=[Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='setLevel', ctx=Load()), args=[Name(id='level', ctx=Load())], keywords=[])), Assign(targets=[Name(id='handler', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='StreamHandler', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='handler', ctx=Load()), attr='setFormatter', ctx=Load()), args=[Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='Formatter', ctx=Load()), args=[Name(id='format_string', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='addHandler', ctx=Load()), args=[Name(id='handler', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='cut_sequence_chunks', args=arguments(posonlyargs=[], args=[arg(arg='sequences', annotation=Name(id='bytes', ctx=Load())), arg(arg='encoding_iana', annotation=Name(id='str', ctx=Load())), arg(arg='offsets', annotation=Name(id='range', ctx=Load())), arg(arg='chunk_size', annotation=Name(id='int', ctx=Load())), arg(arg='bom_or_sig_available', annotation=Name(id='bool', ctx=Load())), arg(arg='strip_sig_or_bom', annotation=Name(id='bool', ctx=Load())), arg(arg='sig_payload', annotation=Name(id='bytes', ctx=Load())), arg(arg='is_multi_byte_decoder', annotation=Name(id='bool', ctx=Load())), arg(arg='decoded_payload', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=BoolOp(op=And(), values=[Name(id='decoded_payload', ctx=Load()), Compare(left=Name(id='is_multi_byte_decoder', ctx=Load()), ops=[Is()], comparators=[Constant(value=False)])]), body=[For(target=Name(id='i', ctx=Store()), iter=Name(id='offsets', ctx=Load()), body=[Assign(targets=[Name(id='chunk', ctx=Store())], value=Subscript(value=Name(id='decoded_payload', ctx=Load()), slice=Slice(lower=Name(id='i', ctx=Load()), upper=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Name(id='chunk_size', ctx=Load()))), ctx=Load())), If(test=UnaryOp(op=Not(), operand=Name(id='chunk', ctx=Load())), body=[Break()], orelse=[]), Expr(value=Yield(value=Name(id='chunk', ctx=Load())))], orelse=[])], orelse=[For(target=Name(id='i', ctx=Store()), iter=Name(id='offsets', ctx=Load()), body=[Assign(targets=[Name(id='chunk_end', ctx=Store())], value=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Name(id='chunk_size', ctx=Load()))), If(test=Compare(left=Name(id='chunk_end', ctx=Load()), ops=[Gt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='sequences', ctx=Load())], keywords=[]), op=Add(), right=Constant(value=8))]), body=[Continue()], orelse=[]), Assign(targets=[Name(id='cut_sequence', ctx=Store())], value=Subscript(value=Name(id='sequences', ctx=Load()), slice=Slice(lower=Name(id='i', ctx=Load()), upper=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Name(id='chunk_size', ctx=Load()))), ctx=Load())), If(test=BoolOp(op=And(), values=[Name(id='bom_or_sig_available', ctx=Load()), Compare(left=Name(id='strip_sig_or_bom', ctx=Load()), ops=[Is()], comparators=[Constant(value=False)])]), body=[Assign(targets=[Name(id='cut_sequence', ctx=Store())], value=BinOp(left=Name(id='sig_payload', ctx=Load()), op=Add(), right=Name(id='cut_sequence', ctx=Load())))], orelse=[]), Assign(targets=[Name(id='chunk', ctx=Store())], value=Call(func=Attribute(value=Name(id='cut_sequence', ctx=Load()), attr='decode', ctx=Load()), args=[Name(id='encoding_iana', ctx=Load())], keywords=[keyword(arg='errors', value=IfExp(test=Name(id='is_multi_byte_decoder', ctx=Load()), body=Constant(value='ignore'), orelse=Constant(value='strict')))])), If(test=BoolOp(op=And(), values=[Name(id='is_multi_byte_decoder', ctx=Load()), Compare(left=Name(id='i', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)])]), body=[AnnAssign(target=Name(id='chunk_partial_size_chk', ctx=Store()), annotation=Name(id='int', ctx=Load()), value=Call(func=Name(id='min', ctx=Load()), args=[Name(id='chunk_size', ctx=Load()), Constant(value=16)], keywords=[]), simple=1), If(test=BoolOp(op=And(), values=[Name(id='decoded_payload', ctx=Load()), Compare(left=Subscript(value=Name(id='chunk', ctx=Load()), slice=Slice(upper=Name(id='chunk_partial_size_chk', ctx=Load())), ctx=Load()), ops=[NotIn()], comparators=[Name(id='decoded_payload', ctx=Load())])]), body=[For(target=Name(id='j', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='i', ctx=Load()), BinOp(left=Name(id='i', ctx=Load()), op=Sub(), right=Constant(value=4)), UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]), body=[Assign(targets=[Name(id='cut_sequence', ctx=Store())], value=Subscript(value=Name(id='sequences', ctx=Load()), slice=Slice(lower=Name(id='j', ctx=Load()), upper=Name(id='chunk_end', ctx=Load())), ctx=Load())), If(test=BoolOp(op=And(), values=[Name(id='bom_or_sig_available', ctx=Load()), Compare(left=Name(id='strip_sig_or_bom', ctx=Load()), ops=[Is()], comparators=[Constant(value=False)])]), body=[Assign(targets=[Name(id='cut_sequence', ctx=Store())], value=BinOp(left=Name(id='sig_payload', ctx=Load()), op=Add(), right=Name(id='cut_sequence', ctx=Load())))], orelse=[]), Assign(targets=[Name(id='chunk', ctx=Store())], value=Call(func=Attribute(value=Name(id='cut_sequence', ctx=Load()), attr='decode', ctx=Load()), args=[Name(id='encoding_iana', ctx=Load())], keywords=[keyword(arg='errors', value=Constant(value='ignore'))])), If(test=Compare(left=Subscript(value=Name(id='chunk', ctx=Load()), slice=Slice(upper=Name(id='chunk_partial_size_chk', ctx=Load())), ctx=Load()), ops=[In()], comparators=[Name(id='decoded_payload', ctx=Load())]), body=[Break()], orelse=[])], orelse=[])], orelse=[])], orelse=[]), Expr(value=Yield(value=Name(id='chunk', ctx=Load())))], orelse=[])])], decorator_list=[], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load()))], type_ignores=[])