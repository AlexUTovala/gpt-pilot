Module(body=[Import(names=[alias(name='importlib')]), ImportFrom(module='codecs', names=[alias(name='IncrementalDecoder')], level=0), ImportFrom(module='collections', names=[alias(name='Counter')], level=0), ImportFrom(module='functools', names=[alias(name='lru_cache')], level=0), ImportFrom(module='typing', names=[alias(name='Counter', asname='TypeCounter'), alias(name='Dict'), alias(name='List'), alias(name='Optional'), alias(name='Tuple')], level=0), ImportFrom(module='constant', names=[alias(name='FREQUENCIES'), alias(name='KO_NAMES'), alias(name='LANGUAGE_SUPPORTED_COUNT'), alias(name='TOO_SMALL_SEQUENCE'), alias(name='ZH_NAMES')], level=1), ImportFrom(module='md', names=[alias(name='is_suspiciously_successive_range')], level=1), ImportFrom(module='models', names=[alias(name='CoherenceMatches')], level=1), ImportFrom(module='utils', names=[alias(name='is_accentuated'), alias(name='is_latin'), alias(name='is_multi_byte_encoding'), alias(name='is_unicode_range_secondary'), alias(name='unicode_range')], level=1), FunctionDef(name='encoding_unicode_range', args=arguments(posonlyargs=[], args=[arg(arg='iana_name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Return associated unicode ranges in a single byte code page.\n    ')), If(test=Call(func=Name(id='is_multi_byte_encoding', ctx=Load()), args=[Name(id='iana_name', ctx=Load())], keywords=[]), body=[Raise(exc=Call(func=Name(id='IOError', ctx=Load()), args=[Constant(value='Function not supported on multi-byte code page')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='decoder', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Name(id='importlib', ctx=Load()), attr='import_module', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='encodings.{}'), attr='format', ctx=Load()), args=[Name(id='iana_name', ctx=Load())], keywords=[])], keywords=[]), attr='IncrementalDecoder', ctx=Load())), AnnAssign(target=Name(id='p', ctx=Store()), annotation=Name(id='IncrementalDecoder', ctx=Load()), value=Call(func=Name(id='decoder', ctx=Load()), args=[], keywords=[keyword(arg='errors', value=Constant(value='ignore'))]), simple=1), AnnAssign(target=Name(id='seen_ranges', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=1), AnnAssign(target=Name(id='character_count', ctx=Store()), annotation=Name(id='int', ctx=Load()), value=Constant(value=0), simple=1), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=64), Constant(value=255)], keywords=[]), body=[AnnAssign(target=Name(id='chunk', ctx=Store()), annotation=Name(id='str', ctx=Load()), value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='decode', ctx=Load()), args=[Call(func=Name(id='bytes', ctx=Load()), args=[List(elts=[Name(id='i', ctx=Load())], ctx=Load())], keywords=[])], keywords=[]), simple=1), If(test=Name(id='chunk', ctx=Load()), body=[AnnAssign(target=Name(id='character_range', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Call(func=Name(id='unicode_range', ctx=Load()), args=[Name(id='chunk', ctx=Load())], keywords=[]), simple=1), If(test=Compare(left=Name(id='character_range', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Continue()], orelse=[]), If(test=Compare(left=Call(func=Name(id='is_unicode_range_secondary', ctx=Load()), args=[Name(id='character_range', ctx=Load())], keywords=[]), ops=[Is()], comparators=[Constant(value=False)]), body=[If(test=Compare(left=Name(id='character_range', ctx=Load()), ops=[NotIn()], comparators=[Name(id='seen_ranges', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='seen_ranges', ctx=Load()), slice=Name(id='character_range', ctx=Load()), ctx=Store())], value=Constant(value=0))], orelse=[]), AugAssign(target=Subscript(value=Name(id='seen_ranges', ctx=Load()), slice=Name(id='character_range', ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1)), AugAssign(target=Name(id='character_count', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], orelse=[])], orelse=[]), Return(value=Call(func=Name(id='sorted', ctx=Load()), args=[ListComp(elt=Name(id='character_range', ctx=Load()), generators=[comprehension(target=Name(id='character_range', ctx=Store()), iter=Name(id='seen_ranges', ctx=Load()), ifs=[Compare(left=BinOp(left=Subscript(value=Name(id='seen_ranges', ctx=Load()), slice=Name(id='character_range', ctx=Load()), ctx=Load()), op=Div(), right=Name(id='character_count', ctx=Load())), ops=[GtE()], comparators=[Constant(value=0.15)])], is_async=0)])], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='unicode_range_languages', args=arguments(posonlyargs=[], args=[arg(arg='primary_range', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Return inferred languages used with a unicode range.\n    ')), AnnAssign(target=Name(id='languages', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), For(target=Tuple(elts=[Name(id='language', ctx=Store()), Name(id='characters', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='FREQUENCIES', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[For(target=Name(id='character', ctx=Store()), iter=Name(id='characters', ctx=Load()), body=[If(test=Compare(left=Call(func=Name(id='unicode_range', ctx=Load()), args=[Name(id='character', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Name(id='primary_range', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='languages', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='language', ctx=Load())], keywords=[])), Break()], orelse=[])], orelse=[])], orelse=[]), Return(value=Name(id='languages', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='encoding_languages', args=arguments(posonlyargs=[], args=[arg(arg='iana_name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Single-byte encoding language association. Some code page are heavily linked to particular language(s).\n    This function does the correspondence.\n    ')), AnnAssign(target=Name(id='unicode_ranges', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Call(func=Name(id='encoding_unicode_range', ctx=Load()), args=[Name(id='iana_name', ctx=Load())], keywords=[]), simple=1), AnnAssign(target=Name(id='primary_range', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=1), For(target=Name(id='specified_range', ctx=Store()), iter=Name(id='unicode_ranges', ctx=Load()), body=[If(test=Compare(left=Constant(value='Latin'), ops=[NotIn()], comparators=[Name(id='specified_range', ctx=Load())]), body=[Assign(targets=[Name(id='primary_range', ctx=Store())], value=Name(id='specified_range', ctx=Load())), Break()], orelse=[])], orelse=[]), If(test=Compare(left=Name(id='primary_range', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=List(elts=[Constant(value='Latin Based')], ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='unicode_range_languages', ctx=Load()), args=[Name(id='primary_range', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Name(id='lru_cache', ctx=Load()), args=[], keywords=[])], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='mb_encoding_languages', args=arguments(posonlyargs=[], args=[arg(arg='iana_name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Multi-byte encoding language association. Some code page are heavily linked to particular language(s).\n    This function does the correspondence.\n    ')), If(test=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='iana_name', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='shift_')], keywords=[]), Call(func=Attribute(value=Name(id='iana_name', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='iso2022_jp')], keywords=[]), Call(func=Attribute(value=Name(id='iana_name', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='euc_j')], keywords=[]), Compare(left=Name(id='iana_name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='cp932')])]), body=[Return(value=List(elts=[Constant(value='Japanese')], ctx=Load()))], orelse=[]), If(test=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='iana_name', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='gb')], keywords=[]), Compare(left=Name(id='iana_name', ctx=Load()), ops=[In()], comparators=[Name(id='ZH_NAMES', ctx=Load())])]), body=[Return(value=List(elts=[Constant(value='Chinese')], ctx=Load()))], orelse=[]), If(test=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='iana_name', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='iso2022_kr')], keywords=[]), Compare(left=Name(id='iana_name', ctx=Load()), ops=[In()], comparators=[Name(id='KO_NAMES', ctx=Load())])]), body=[Return(value=List(elts=[Constant(value='Korean')], ctx=Load()))], orelse=[]), Return(value=List(elts=[], ctx=Load()))], decorator_list=[Call(func=Name(id='lru_cache', ctx=Load()), args=[], keywords=[])], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='get_target_features', args=arguments(posonlyargs=[], args=[arg(arg='language', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Determine main aspects from a supported language if it contains accents and if is pure Latin.\n    ')), AnnAssign(target=Name(id='target_have_accents', ctx=Store()), annotation=Name(id='bool', ctx=Load()), value=Constant(value=False), simple=1), AnnAssign(target=Name(id='target_pure_latin', ctx=Store()), annotation=Name(id='bool', ctx=Load()), value=Constant(value=True), simple=1), For(target=Name(id='character', ctx=Store()), iter=Subscript(value=Name(id='FREQUENCIES', ctx=Load()), slice=Name(id='language', ctx=Load()), ctx=Load()), body=[If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Name(id='target_have_accents', ctx=Load())), Call(func=Name(id='is_accentuated', ctx=Load()), args=[Name(id='character', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='target_have_accents', ctx=Store())], value=Constant(value=True))], orelse=[]), If(test=BoolOp(op=And(), values=[Name(id='target_pure_latin', ctx=Load()), Compare(left=Call(func=Name(id='is_latin', ctx=Load()), args=[Name(id='character', ctx=Load())], keywords=[]), ops=[Is()], comparators=[Constant(value=False)])]), body=[Assign(targets=[Name(id='target_pure_latin', ctx=Store())], value=Constant(value=False))], orelse=[])], orelse=[]), Return(value=Tuple(elts=[Name(id='target_have_accents', ctx=Load()), Name(id='target_pure_latin', ctx=Load())], ctx=Load()))], decorator_list=[Call(func=Name(id='lru_cache', ctx=Load()), args=[], keywords=[keyword(arg='maxsize', value=Name(id='LANGUAGE_SUPPORTED_COUNT', ctx=Load()))])], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='bool', ctx=Load()), Name(id='bool', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='alphabet_languages', args=arguments(posonlyargs=[], args=[arg(arg='characters', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='ignore_non_latin', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value='\n    Return associated languages associated to given characters.\n    ')), AnnAssign(target=Name(id='languages', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), Assign(targets=[Name(id='source_have_accents', ctx=Store())], value=Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='is_accentuated', ctx=Load()), args=[Name(id='character', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='character', ctx=Store()), iter=Name(id='characters', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), For(target=Tuple(elts=[Name(id='language', ctx=Store()), Name(id='language_characters', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='FREQUENCIES', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='target_have_accents', ctx=Store()), Name(id='target_pure_latin', ctx=Store())], ctx=Store())], value=Call(func=Name(id='get_target_features', ctx=Load()), args=[Name(id='language', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Name(id='ignore_non_latin', ctx=Load()), Compare(left=Name(id='target_pure_latin', ctx=Load()), ops=[Is()], comparators=[Constant(value=False)])]), body=[Continue()], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='target_have_accents', ctx=Load()), ops=[Is()], comparators=[Constant(value=False)]), Name(id='source_have_accents', ctx=Load())]), body=[Continue()], orelse=[]), AnnAssign(target=Name(id='character_count', ctx=Store()), annotation=Name(id='int', ctx=Load()), value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='language_characters', ctx=Load())], keywords=[]), simple=1), AnnAssign(target=Name(id='character_match_count', ctx=Store()), annotation=Name(id='int', ctx=Load()), value=Call(func=Name(id='len', ctx=Load()), args=[ListComp(elt=Name(id='c', ctx=Load()), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Name(id='language_characters', ctx=Load()), ifs=[Compare(left=Name(id='c', ctx=Load()), ops=[In()], comparators=[Name(id='characters', ctx=Load())])], is_async=0)])], keywords=[]), simple=1), AnnAssign(target=Name(id='ratio', ctx=Store()), annotation=Name(id='float', ctx=Load()), value=BinOp(left=Name(id='character_match_count', ctx=Load()), op=Div(), right=Name(id='character_count', ctx=Load())), simple=1), If(test=Compare(left=Name(id='ratio', ctx=Load()), ops=[GtE()], comparators=[Constant(value=0.2)]), body=[Expr(value=Call(func=Attribute(value=Name(id='languages', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='language', ctx=Load()), Name(id='ratio', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='languages', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='languages', ctx=Load())], keywords=[keyword(arg='key', value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value=1), ctx=Load()))), keyword(arg='reverse', value=Constant(value=True))])), Return(value=ListComp(elt=Subscript(value=Name(id='compatible_language', ctx=Load()), slice=Constant(value=0), ctx=Load()), generators=[comprehension(target=Name(id='compatible_language', ctx=Store()), iter=Name(id='languages', ctx=Load()), ifs=[], is_async=0)]))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='characters_popularity_compare', args=arguments(posonlyargs=[], args=[arg(arg='language', annotation=Name(id='str', ctx=Load())), arg(arg='ordered_characters', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Determine if a ordered characters list (by occurrence from most appearance to rarest) match a particular language.\n    The result is a ratio between 0. (absolutely no correspondence) and 1. (near perfect fit).\n    Beware that is function is not strict on the match in order to ease the detection. (Meaning close match is 1.)\n    ')), If(test=Compare(left=Name(id='language', ctx=Load()), ops=[NotIn()], comparators=[Name(id='FREQUENCIES', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='{} not available'), attr='format', ctx=Load()), args=[Name(id='language', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), AnnAssign(target=Name(id='character_approved_count', ctx=Store()), annotation=Name(id='int', ctx=Load()), value=Constant(value=0), simple=1), Assign(targets=[Name(id='FREQUENCIES_language_set', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Subscript(value=Name(id='FREQUENCIES', ctx=Load()), slice=Name(id='language', ctx=Load()), ctx=Load())], keywords=[])), AnnAssign(target=Name(id='ordered_characters_count', ctx=Store()), annotation=Name(id='int', ctx=Load()), value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='ordered_characters', ctx=Load())], keywords=[]), simple=1), AnnAssign(target=Name(id='target_language_characters_count', ctx=Store()), annotation=Name(id='int', ctx=Load()), value=Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='FREQUENCIES', ctx=Load()), slice=Name(id='language', ctx=Load()), ctx=Load())], keywords=[]), simple=1), AnnAssign(target=Name(id='large_alphabet', ctx=Store()), annotation=Name(id='bool', ctx=Load()), value=Compare(left=Name(id='target_language_characters_count', ctx=Load()), ops=[Gt()], comparators=[Constant(value=26)]), simple=1), For(target=Tuple(elts=[Name(id='character', ctx=Store()), Name(id='character_rank', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Name(id='ordered_characters', ctx=Load()), Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Name(id='ordered_characters_count', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Name(id='character', ctx=Load()), ops=[NotIn()], comparators=[Name(id='FREQUENCIES_language_set', ctx=Load())]), body=[Continue()], orelse=[]), AnnAssign(target=Name(id='character_rank_in_language', ctx=Store()), annotation=Name(id='int', ctx=Load()), value=Call(func=Attribute(value=Subscript(value=Name(id='FREQUENCIES', ctx=Load()), slice=Name(id='language', ctx=Load()), ctx=Load()), attr='index', ctx=Load()), args=[Name(id='character', ctx=Load())], keywords=[]), simple=1), AnnAssign(target=Name(id='expected_projection_ratio', ctx=Store()), annotation=Name(id='float', ctx=Load()), value=BinOp(left=Name(id='target_language_characters_count', ctx=Load()), op=Div(), right=Name(id='ordered_characters_count', ctx=Load())), simple=1), AnnAssign(target=Name(id='character_rank_projection', ctx=Store()), annotation=Name(id='int', ctx=Load()), value=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Name(id='character_rank', ctx=Load()), op=Mult(), right=Name(id='expected_projection_ratio', ctx=Load()))], keywords=[]), simple=1), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='large_alphabet', ctx=Load()), ops=[Is()], comparators=[Constant(value=False)]), Compare(left=Call(func=Name(id='abs', ctx=Load()), args=[BinOp(left=Name(id='character_rank_projection', ctx=Load()), op=Sub(), right=Name(id='character_rank_in_language', ctx=Load()))], keywords=[]), ops=[Gt()], comparators=[Constant(value=4)])]), body=[Continue()], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='large_alphabet', ctx=Load()), ops=[Is()], comparators=[Constant(value=True)]), Compare(left=Call(func=Name(id='abs', ctx=Load()), args=[BinOp(left=Name(id='character_rank_projection', ctx=Load()), op=Sub(), right=Name(id='character_rank_in_language', ctx=Load()))], keywords=[]), ops=[Lt()], comparators=[BinOp(left=Name(id='target_language_characters_count', ctx=Load()), op=Div(), right=Constant(value=3))])]), body=[AugAssign(target=Name(id='character_approved_count', ctx=Store()), op=Add(), value=Constant(value=1)), Continue()], orelse=[]), AnnAssign(target=Name(id='characters_before_source', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Subscript(value=Subscript(value=Name(id='FREQUENCIES', ctx=Load()), slice=Name(id='language', ctx=Load()), ctx=Load()), slice=Slice(lower=Constant(value=0), upper=Name(id='character_rank_in_language', ctx=Load())), ctx=Load()), simple=1), AnnAssign(target=Name(id='characters_after_source', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Subscript(value=Subscript(value=Name(id='FREQUENCIES', ctx=Load()), slice=Name(id='language', ctx=Load()), ctx=Load()), slice=Slice(lower=Name(id='character_rank_in_language', ctx=Load())), ctx=Load()), simple=1), AnnAssign(target=Name(id='characters_before', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Subscript(value=Name(id='ordered_characters', ctx=Load()), slice=Slice(lower=Constant(value=0), upper=Name(id='character_rank', ctx=Load())), ctx=Load()), simple=1), AnnAssign(target=Name(id='characters_after', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Subscript(value=Name(id='ordered_characters', ctx=Load()), slice=Slice(lower=Name(id='character_rank', ctx=Load())), ctx=Load()), simple=1), AnnAssign(target=Name(id='before_match_count', ctx=Store()), annotation=Name(id='int', ctx=Load()), value=Call(func=Name(id='len', ctx=Load()), args=[BinOp(left=Call(func=Name(id='set', ctx=Load()), args=[Name(id='characters_before', ctx=Load())], keywords=[]), op=BitAnd(), right=Call(func=Name(id='set', ctx=Load()), args=[Name(id='characters_before_source', ctx=Load())], keywords=[]))], keywords=[]), simple=1), AnnAssign(target=Name(id='after_match_count', ctx=Store()), annotation=Name(id='int', ctx=Load()), value=Call(func=Name(id='len', ctx=Load()), args=[BinOp(left=Call(func=Name(id='set', ctx=Load()), args=[Name(id='characters_after', ctx=Load())], keywords=[]), op=BitAnd(), right=Call(func=Name(id='set', ctx=Load()), args=[Name(id='characters_after_source', ctx=Load())], keywords=[]))], keywords=[]), simple=1), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='characters_before_source', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Name(id='before_match_count', ctx=Load()), ops=[LtE()], comparators=[Constant(value=4)])]), body=[AugAssign(target=Name(id='character_approved_count', ctx=Store()), op=Add(), value=Constant(value=1)), Continue()], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='characters_after_source', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Name(id='after_match_count', ctx=Load()), ops=[LtE()], comparators=[Constant(value=4)])]), body=[AugAssign(target=Name(id='character_approved_count', ctx=Store()), op=Add(), value=Constant(value=1)), Continue()], orelse=[]), If(test=BoolOp(op=Or(), values=[Compare(left=BinOp(left=Name(id='before_match_count', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='characters_before_source', ctx=Load())], keywords=[])), ops=[GtE()], comparators=[Constant(value=0.4)]), Compare(left=BinOp(left=Name(id='after_match_count', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='characters_after_source', ctx=Load())], keywords=[])), ops=[GtE()], comparators=[Constant(value=0.4)])]), body=[AugAssign(target=Name(id='character_approved_count', ctx=Store()), op=Add(), value=Constant(value=1)), Continue()], orelse=[])], orelse=[]), Return(value=BinOp(left=Name(id='character_approved_count', ctx=Load()), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='ordered_characters', ctx=Load())], keywords=[])))], decorator_list=[], returns=Name(id='float', ctx=Load())), FunctionDef(name='alpha_unicode_split', args=arguments(posonlyargs=[], args=[arg(arg='decoded_sequence', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Given a decoded text sequence, return a list of str. Unicode range / alphabet separation.\n    Ex. a text containing English/Latin with a bit a Hebrew will return two items in the resulting list;\n    One containing the latin letters and the other hebrew.\n    ')), AnnAssign(target=Name(id='layers', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=1), For(target=Name(id='character', ctx=Store()), iter=Name(id='decoded_sequence', ctx=Load()), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='character', ctx=Load()), attr='isalpha', ctx=Load()), args=[], keywords=[]), ops=[Is()], comparators=[Constant(value=False)]), body=[Continue()], orelse=[]), AnnAssign(target=Name(id='character_range', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Call(func=Name(id='unicode_range', ctx=Load()), args=[Name(id='character', ctx=Load())], keywords=[]), simple=1), If(test=Compare(left=Name(id='character_range', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Continue()], orelse=[]), AnnAssign(target=Name(id='layer_target_range', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=1), For(target=Name(id='discovered_range', ctx=Store()), iter=Name(id='layers', ctx=Load()), body=[If(test=Compare(left=Call(func=Name(id='is_suspiciously_successive_range', ctx=Load()), args=[Name(id='discovered_range', ctx=Load()), Name(id='character_range', ctx=Load())], keywords=[]), ops=[Is()], comparators=[Constant(value=False)]), body=[Assign(targets=[Name(id='layer_target_range', ctx=Store())], value=Name(id='discovered_range', ctx=Load())), Break()], orelse=[])], orelse=[]), If(test=Compare(left=Name(id='layer_target_range', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='layer_target_range', ctx=Store())], value=Name(id='character_range', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='layer_target_range', ctx=Load()), ops=[NotIn()], comparators=[Name(id='layers', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='layers', ctx=Load()), slice=Name(id='layer_target_range', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Name(id='character', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])), Continue()], orelse=[]), AugAssign(target=Subscript(value=Name(id='layers', ctx=Load()), slice=Name(id='layer_target_range', ctx=Load()), ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='character', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='layers', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='merge_coherence_ratios', args=arguments(posonlyargs=[], args=[arg(arg='results', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='CoherenceMatches', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    This function merge results previously given by the function coherence_ratio.\n    The return type is the same as coherence_ratio.\n    ')), AnnAssign(target=Name(id='per_language_ratios', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=1), For(target=Name(id='result', ctx=Store()), iter=Name(id='results', ctx=Load()), body=[For(target=Name(id='sub_result', ctx=Store()), iter=Name(id='result', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='language', ctx=Store()), Name(id='ratio', ctx=Store())], ctx=Store())], value=Name(id='sub_result', ctx=Load())), If(test=Compare(left=Name(id='language', ctx=Load()), ops=[NotIn()], comparators=[Name(id='per_language_ratios', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='per_language_ratios', ctx=Load()), slice=Name(id='language', ctx=Load()), ctx=Store())], value=List(elts=[Name(id='ratio', ctx=Load())], ctx=Load())), Continue()], orelse=[]), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='per_language_ratios', ctx=Load()), slice=Name(id='language', ctx=Load()), ctx=Load()), attr='append', ctx=Load()), args=[Name(id='ratio', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='merge', ctx=Store())], value=ListComp(elt=Tuple(elts=[Name(id='language', ctx=Load()), Call(func=Name(id='round', ctx=Load()), args=[BinOp(left=Call(func=Name(id='sum', ctx=Load()), args=[Subscript(value=Name(id='per_language_ratios', ctx=Load()), slice=Name(id='language', ctx=Load()), ctx=Load())], keywords=[]), op=Div(), right=Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='per_language_ratios', ctx=Load()), slice=Name(id='language', ctx=Load()), ctx=Load())], keywords=[])), Constant(value=4)], keywords=[])], ctx=Load()), generators=[comprehension(target=Name(id='language', ctx=Store()), iter=Name(id='per_language_ratios', ctx=Load()), ifs=[], is_async=0)])), Return(value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='merge', ctx=Load())], keywords=[keyword(arg='key', value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value=1), ctx=Load()))), keyword(arg='reverse', value=Constant(value=True))]))], decorator_list=[], returns=Name(id='CoherenceMatches', ctx=Load())), FunctionDef(name='filter_alt_coherence_matches', args=arguments(posonlyargs=[], args=[arg(arg='results', annotation=Name(id='CoherenceMatches', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    We shall NOT return "English—" in CoherenceMatches because it is an alternative\n    of "English". This function only keeps the best match and remove the em-dash in it.\n    ')), AnnAssign(target=Name(id='index_results', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[]), simple=1), For(target=Name(id='result', ctx=Store()), iter=Name(id='results', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='language', ctx=Store()), Name(id='ratio', ctx=Store())], ctx=Store())], value=Name(id='result', ctx=Load())), AnnAssign(target=Name(id='no_em_name', ctx=Store()), annotation=Name(id='str', ctx=Load()), value=Call(func=Attribute(value=Name(id='language', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='—'), Constant(value='')], keywords=[]), simple=1), If(test=Compare(left=Name(id='no_em_name', ctx=Load()), ops=[NotIn()], comparators=[Name(id='index_results', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='index_results', ctx=Load()), slice=Name(id='no_em_name', ctx=Load()), ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='index_results', ctx=Load()), slice=Name(id='no_em_name', ctx=Load()), ctx=Load()), attr='append', ctx=Load()), args=[Name(id='ratio', ctx=Load())], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='index_results', ctx=Load()), slice=Name(id='e', ctx=Load()), ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), generators=[comprehension(target=Name(id='e', ctx=Store()), iter=Name(id='index_results', ctx=Load()), ifs=[], is_async=0)])], keywords=[]), body=[AnnAssign(target=Name(id='filtered_results', ctx=Store()), annotation=Name(id='CoherenceMatches', ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), For(target=Name(id='language', ctx=Store()), iter=Name(id='index_results', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='filtered_results', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='language', ctx=Load()), Call(func=Name(id='max', ctx=Load()), args=[Subscript(value=Name(id='index_results', ctx=Load()), slice=Name(id='language', ctx=Load()), ctx=Load())], keywords=[])], ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='filtered_results', ctx=Load()))], orelse=[]), Return(value=Name(id='results', ctx=Load()))], decorator_list=[], returns=Name(id='CoherenceMatches', ctx=Load())), FunctionDef(name='coherence_ratio', args=arguments(posonlyargs=[], args=[arg(arg='decoded_sequence', annotation=Name(id='str', ctx=Load())), arg(arg='threshold', annotation=Name(id='float', ctx=Load())), arg(arg='lg_inclusion', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0.1), Constant(value=None)]), body=[Expr(value=Constant(value='\n    Detect ANY language that can be identified in given sequence. The sequence will be analysed by layers.\n    A layer = Character extraction by alphabets/ranges.\n    ')), AnnAssign(target=Name(id='results', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), AnnAssign(target=Name(id='ignore_non_latin', ctx=Store()), annotation=Name(id='bool', ctx=Load()), value=Constant(value=False), simple=1), AnnAssign(target=Name(id='sufficient_match_count', ctx=Store()), annotation=Name(id='int', ctx=Load()), value=Constant(value=0), simple=1), Assign(targets=[Name(id='lg_inclusion_list', ctx=Store())], value=IfExp(test=Compare(left=Name(id='lg_inclusion', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Call(func=Attribute(value=Name(id='lg_inclusion', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=',')], keywords=[]), orelse=List(elts=[], ctx=Load()))), If(test=Compare(left=Constant(value='Latin Based'), ops=[In()], comparators=[Name(id='lg_inclusion_list', ctx=Load())]), body=[Assign(targets=[Name(id='ignore_non_latin', ctx=Store())], value=Constant(value=True)), Expr(value=Call(func=Attribute(value=Name(id='lg_inclusion_list', ctx=Load()), attr='remove', ctx=Load()), args=[Constant(value='Latin Based')], keywords=[]))], orelse=[]), For(target=Name(id='layer', ctx=Store()), iter=Call(func=Name(id='alpha_unicode_split', ctx=Load()), args=[Name(id='decoded_sequence', ctx=Load())], keywords=[]), body=[AnnAssign(target=Name(id='sequence_frequencies', ctx=Store()), annotation=Subscript(value=Name(id='TypeCounter', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Call(func=Name(id='Counter', ctx=Load()), args=[Name(id='layer', ctx=Load())], keywords=[]), simple=1), Assign(targets=[Name(id='most_common', ctx=Store())], value=Call(func=Attribute(value=Name(id='sequence_frequencies', ctx=Load()), attr='most_common', ctx=Load()), args=[], keywords=[])), AnnAssign(target=Name(id='character_count', ctx=Store()), annotation=Name(id='int', ctx=Load()), value=Call(func=Name(id='sum', ctx=Load()), args=[GeneratorExp(elt=Name(id='o', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='c', ctx=Store()), Name(id='o', ctx=Store())], ctx=Store()), iter=Name(id='most_common', ctx=Load()), ifs=[], is_async=0)])], keywords=[]), simple=1), If(test=Compare(left=Name(id='character_count', ctx=Load()), ops=[LtE()], comparators=[Name(id='TOO_SMALL_SEQUENCE', ctx=Load())]), body=[Continue()], orelse=[]), AnnAssign(target=Name(id='popular_character_ordered', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=ListComp(elt=Name(id='c', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='c', ctx=Store()), Name(id='o', ctx=Store())], ctx=Store()), iter=Name(id='most_common', ctx=Load()), ifs=[], is_async=0)]), simple=1), For(target=Name(id='language', ctx=Store()), iter=BoolOp(op=Or(), values=[Name(id='lg_inclusion_list', ctx=Load()), Call(func=Name(id='alphabet_languages', ctx=Load()), args=[Name(id='popular_character_ordered', ctx=Load()), Name(id='ignore_non_latin', ctx=Load())], keywords=[])]), body=[AnnAssign(target=Name(id='ratio', ctx=Store()), annotation=Name(id='float', ctx=Load()), value=Call(func=Name(id='characters_popularity_compare', ctx=Load()), args=[Name(id='language', ctx=Load()), Name(id='popular_character_ordered', ctx=Load())], keywords=[]), simple=1), If(test=Compare(left=Name(id='ratio', ctx=Load()), ops=[Lt()], comparators=[Name(id='threshold', ctx=Load())]), body=[Continue()], orelse=[If(test=Compare(left=Name(id='ratio', ctx=Load()), ops=[GtE()], comparators=[Constant(value=0.8)]), body=[AugAssign(target=Name(id='sufficient_match_count', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])]), Expr(value=Call(func=Attribute(value=Name(id='results', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='language', ctx=Load()), Call(func=Name(id='round', ctx=Load()), args=[Name(id='ratio', ctx=Load()), Constant(value=4)], keywords=[])], ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='sufficient_match_count', ctx=Load()), ops=[GtE()], comparators=[Constant(value=3)]), body=[Break()], orelse=[])], orelse=[])], orelse=[]), Return(value=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='filter_alt_coherence_matches', ctx=Load()), args=[Name(id='results', ctx=Load())], keywords=[])], keywords=[keyword(arg='key', value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value=1), ctx=Load()))), keyword(arg='reverse', value=Constant(value=True))]))], decorator_list=[Call(func=Name(id='lru_cache', ctx=Load()), args=[], keywords=[keyword(arg='maxsize', value=Constant(value=2048))])], returns=Name(id='CoherenceMatches', ctx=Load()))], type_ignores=[])