Module(body=[ImportFrom(module='functools', names=[alias(name='lru_cache')], level=0), ImportFrom(module='logging', names=[alias(name='getLogger')], level=0), ImportFrom(module='typing', names=[alias(name='List'), alias(name='Optional')], level=0), ImportFrom(module='constant', names=[alias(name='COMMON_SAFE_ASCII_CHARACTERS'), alias(name='TRACE'), alias(name='UNICODE_SECONDARY_RANGE_KEYWORD')], level=1), ImportFrom(module='utils', names=[alias(name='is_accentuated'), alias(name='is_arabic'), alias(name='is_arabic_isolated_form'), alias(name='is_case_variable'), alias(name='is_cjk'), alias(name='is_emoticon'), alias(name='is_hangul'), alias(name='is_hiragana'), alias(name='is_katakana'), alias(name='is_latin'), alias(name='is_punctuation'), alias(name='is_separator'), alias(name='is_symbol'), alias(name='is_thai'), alias(name='is_unprintable'), alias(name='remove_accent'), alias(name='unicode_range')], level=1), ClassDef(name='MessDetectorPlugin', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    Base abstract class used for mess detection plugins.\n    All detectors MUST extend and implement given methods.\n    ')), FunctionDef(name='eligible', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='character', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Determine if given character should be fed in.\n        ')), Raise(exc=Name(id='NotImplementedError', ctx=Load()))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='feed', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='character', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        The main routine to be executed upon character.\n        Insert the logic in witch the text would be considered chaotic.\n        ')), Raise(exc=Name(id='NotImplementedError', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='reset', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Permit to reset the plugin to the initial state.\n        ')), Raise(exc=Name(id='NotImplementedError', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='ratio', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Compute the chaos ratio based on what your feed() has seen.\n        Must NOT be lower than 0.; No restriction gt 0.\n        ')), Raise(exc=Name(id='NotImplementedError', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='float', ctx=Load()))], decorator_list=[]), ClassDef(name='TooManySymbolOrPunctuationPlugin', bases=[Name(id='MessDetectorPlugin', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_punctuation_count', ctx=Store()), annotation=Name(id='int', ctx=Load()), value=Constant(value=0), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_symbol_count', ctx=Store()), annotation=Name(id='int', ctx=Load()), value=Constant(value=0), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_character_count', ctx=Store()), annotation=Name(id='int', ctx=Load()), value=Constant(value=0), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_last_printable_char', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_frenzy_symbol_in_word', ctx=Store()), annotation=Name(id='bool', ctx=Load()), value=Constant(value=False), simple=0)], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='eligible', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='character', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='character', ctx=Load()), attr='isprintable', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='feed', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='character', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_character_count', ctx=Store()), op=Add(), value=Constant(value=1)), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='character', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_last_printable_char', ctx=Load())]), Compare(left=Name(id='character', ctx=Load()), ops=[NotIn()], comparators=[Name(id='COMMON_SAFE_ASCII_CHARACTERS', ctx=Load())])]), body=[If(test=Call(func=Name(id='is_punctuation', ctx=Load()), args=[Name(id='character', ctx=Load())], keywords=[]), body=[AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_punctuation_count', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Attribute(value=Name(id='character', ctx=Load()), attr='isdigit', ctx=Load()), args=[], keywords=[]), ops=[Is()], comparators=[Constant(value=False)]), Call(func=Name(id='is_symbol', ctx=Load()), args=[Name(id='character', ctx=Load())], keywords=[]), Compare(left=Call(func=Name(id='is_emoticon', ctx=Load()), args=[Name(id='character', ctx=Load())], keywords=[]), ops=[Is()], comparators=[Constant(value=False)])]), body=[AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_symbol_count', ctx=Store()), op=Add(), value=Constant(value=2))], orelse=[])])], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_last_printable_char', ctx=Store())], value=Name(id='character', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='reset', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_punctuation_count', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_character_count', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_symbol_count', ctx=Store())], value=Constant(value=0))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='ratio', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_character_count', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0.0))], orelse=[]), AnnAssign(target=Name(id='ratio_of_punctuation', ctx=Store()), annotation=Name(id='float', ctx=Load()), value=BinOp(left=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_punctuation_count', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_symbol_count', ctx=Load())), op=Div(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_character_count', ctx=Load())), simple=1), Return(value=IfExp(test=Compare(left=Name(id='ratio_of_punctuation', ctx=Load()), ops=[GtE()], comparators=[Constant(value=0.3)]), body=Name(id='ratio_of_punctuation', ctx=Load()), orelse=Constant(value=0.0)))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='float', ctx=Load()))], decorator_list=[]), ClassDef(name='TooManyAccentuatedPlugin', bases=[Name(id='MessDetectorPlugin', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_character_count', ctx=Store()), annotation=Name(id='int', ctx=Load()), value=Constant(value=0), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_accentuated_count', ctx=Store()), annotation=Name(id='int', ctx=Load()), value=Constant(value=0), simple=0)], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='eligible', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='character', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='character', ctx=Load()), attr='isalpha', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='feed', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='character', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_character_count', ctx=Store()), op=Add(), value=Constant(value=1)), If(test=Call(func=Name(id='is_accentuated', ctx=Load()), args=[Name(id='character', ctx=Load())], keywords=[]), body=[AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_accentuated_count', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='reset', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_character_count', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_accentuated_count', ctx=Store())], value=Constant(value=0))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='ratio', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_character_count', ctx=Load()), ops=[Lt()], comparators=[Constant(value=8)]), body=[Return(value=Constant(value=0.0))], orelse=[]), AnnAssign(target=Name(id='ratio_of_accentuation', ctx=Store()), annotation=Name(id='float', ctx=Load()), value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_accentuated_count', ctx=Load()), op=Div(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_character_count', ctx=Load())), simple=1), Return(value=IfExp(test=Compare(left=Name(id='ratio_of_accentuation', ctx=Load()), ops=[GtE()], comparators=[Constant(value=0.35)]), body=Name(id='ratio_of_accentuation', ctx=Load()), orelse=Constant(value=0.0)))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='float', ctx=Load()))], decorator_list=[]), ClassDef(name='UnprintablePlugin', bases=[Name(id='MessDetectorPlugin', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_unprintable_count', ctx=Store()), annotation=Name(id='int', ctx=Load()), value=Constant(value=0), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_character_count', ctx=Store()), annotation=Name(id='int', ctx=Load()), value=Constant(value=0), simple=0)], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='eligible', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='character', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=True))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='feed', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='character', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='is_unprintable', ctx=Load()), args=[Name(id='character', ctx=Load())], keywords=[]), body=[AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_unprintable_count', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_character_count', ctx=Store()), op=Add(), value=Constant(value=1))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='reset', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_unprintable_count', ctx=Store())], value=Constant(value=0))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='ratio', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_character_count', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0.0))], orelse=[]), Return(value=BinOp(left=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_unprintable_count', ctx=Load()), op=Mult(), right=Constant(value=8)), op=Div(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_character_count', ctx=Load())))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='float', ctx=Load()))], decorator_list=[]), ClassDef(name='SuspiciousDuplicateAccentPlugin', bases=[Name(id='MessDetectorPlugin', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_successive_count', ctx=Store()), annotation=Name(id='int', ctx=Load()), value=Constant(value=0), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_character_count', ctx=Store()), annotation=Name(id='int', ctx=Load()), value=Constant(value=0), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_last_latin_character', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0)], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='eligible', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='character', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=And(), values=[Call(func=Attribute(value=Name(id='character', ctx=Load()), attr='isalpha', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='is_latin', ctx=Load()), args=[Name(id='character', ctx=Load())], keywords=[])]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='feed', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='character', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_character_count', ctx=Store()), op=Add(), value=Constant(value=1)), If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_last_latin_character', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Call(func=Name(id='is_accentuated', ctx=Load()), args=[Name(id='character', ctx=Load())], keywords=[]), Call(func=Name(id='is_accentuated', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_last_latin_character', ctx=Load())], keywords=[])]), body=[If(test=BoolOp(op=And(), values=[Call(func=Attribute(value=Name(id='character', ctx=Load()), attr='isupper', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_last_latin_character', ctx=Load()), attr='isupper', ctx=Load()), args=[], keywords=[])]), body=[AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_successive_count', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), If(test=Compare(left=Call(func=Name(id='remove_accent', ctx=Load()), args=[Name(id='character', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='remove_accent', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_last_latin_character', ctx=Load())], keywords=[])]), body=[AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_successive_count', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_last_latin_character', ctx=Store())], value=Name(id='character', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='reset', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_successive_count', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_character_count', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_last_latin_character', ctx=Store())], value=Constant(value=None))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='ratio', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_character_count', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0.0))], orelse=[]), Return(value=BinOp(left=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_successive_count', ctx=Load()), op=Mult(), right=Constant(value=2)), op=Div(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_character_count', ctx=Load())))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='float', ctx=Load()))], decorator_list=[]), ClassDef(name='SuspiciousRange', bases=[Name(id='MessDetectorPlugin', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_suspicious_successive_range_count', ctx=Store()), annotation=Name(id='int', ctx=Load()), value=Constant(value=0), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_character_count', ctx=Store()), annotation=Name(id='int', ctx=Load()), value=Constant(value=0), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_last_printable_seen', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0)], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='eligible', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='character', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='character', ctx=Load()), attr='isprintable', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='feed', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='character', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_character_count', ctx=Store()), op=Add(), value=Constant(value=1)), If(test=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='character', ctx=Load()), attr='isspace', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='is_punctuation', ctx=Load()), args=[Name(id='character', ctx=Load())], keywords=[]), Compare(left=Name(id='character', ctx=Load()), ops=[In()], comparators=[Name(id='COMMON_SAFE_ASCII_CHARACTERS', ctx=Load())])]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_last_printable_seen', ctx=Store())], value=Constant(value=None)), Return()], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_last_printable_seen', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_last_printable_seen', ctx=Store())], value=Name(id='character', ctx=Load())), Return()], orelse=[]), AnnAssign(target=Name(id='unicode_range_a', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Call(func=Name(id='unicode_range', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_last_printable_seen', ctx=Load())], keywords=[]), simple=1), AnnAssign(target=Name(id='unicode_range_b', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Call(func=Name(id='unicode_range', ctx=Load()), args=[Name(id='character', ctx=Load())], keywords=[]), simple=1), If(test=Call(func=Name(id='is_suspiciously_successive_range', ctx=Load()), args=[Name(id='unicode_range_a', ctx=Load()), Name(id='unicode_range_b', ctx=Load())], keywords=[]), body=[AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_suspicious_successive_range_count', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_last_printable_seen', ctx=Store())], value=Name(id='character', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='reset', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_character_count', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_suspicious_successive_range_count', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_last_printable_seen', ctx=Store())], value=Constant(value=None))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='ratio', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_character_count', ctx=Load()), ops=[LtE()], comparators=[Constant(value=24)]), body=[Return(value=Constant(value=0.0))], orelse=[]), AnnAssign(target=Name(id='ratio_of_suspicious_range_usage', ctx=Store()), annotation=Name(id='float', ctx=Load()), value=BinOp(left=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_suspicious_successive_range_count', ctx=Load()), op=Mult(), right=Constant(value=2)), op=Div(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_character_count', ctx=Load())), simple=1), Return(value=Name(id='ratio_of_suspicious_range_usage', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='float', ctx=Load()))], decorator_list=[]), ClassDef(name='SuperWeirdWordPlugin', bases=[Name(id='MessDetectorPlugin', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_word_count', ctx=Store()), annotation=Name(id='int', ctx=Load()), value=Constant(value=0), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_bad_word_count', ctx=Store()), annotation=Name(id='int', ctx=Load()), value=Constant(value=0), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_foreign_long_count', ctx=Store()), annotation=Name(id='int', ctx=Load()), value=Constant(value=0), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_is_current_word_bad', ctx=Store()), annotation=Name(id='bool', ctx=Load()), value=Constant(value=False), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_foreign_long_watch', ctx=Store()), annotation=Name(id='bool', ctx=Load()), value=Constant(value=False), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_character_count', ctx=Store()), annotation=Name(id='int', ctx=Load()), value=Constant(value=0), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_bad_character_count', ctx=Store()), annotation=Name(id='int', ctx=Load()), value=Constant(value=0), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Store()), annotation=Name(id='str', ctx=Load()), value=Constant(value=''), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer_accent_count', ctx=Store()), annotation=Name(id='int', ctx=Load()), value=Constant(value=0), simple=0)], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='eligible', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='character', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=True))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='feed', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='character', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Attribute(value=Name(id='character', ctx=Load()), attr='isalpha', ctx=Load()), args=[], keywords=[]), body=[AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Store()), op=Add(), value=Name(id='character', ctx=Load())), If(test=Call(func=Name(id='is_accentuated', ctx=Load()), args=[Name(id='character', ctx=Load())], keywords=[]), body=[AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer_accent_count', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_foreign_long_watch', ctx=Load()), ops=[Is()], comparators=[Constant(value=False)]), BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='is_latin', ctx=Load()), args=[Name(id='character', ctx=Load())], keywords=[]), ops=[Is()], comparators=[Constant(value=False)]), Call(func=Name(id='is_accentuated', ctx=Load()), args=[Name(id='character', ctx=Load())], keywords=[])]), Compare(left=Call(func=Name(id='is_cjk', ctx=Load()), args=[Name(id='character', ctx=Load())], keywords=[]), ops=[Is()], comparators=[Constant(value=False)]), Compare(left=Call(func=Name(id='is_hangul', ctx=Load()), args=[Name(id='character', ctx=Load())], keywords=[]), ops=[Is()], comparators=[Constant(value=False)]), Compare(left=Call(func=Name(id='is_katakana', ctx=Load()), args=[Name(id='character', ctx=Load())], keywords=[]), ops=[Is()], comparators=[Constant(value=False)]), Compare(left=Call(func=Name(id='is_hiragana', ctx=Load()), args=[Name(id='character', ctx=Load())], keywords=[]), ops=[Is()], comparators=[Constant(value=False)]), Compare(left=Call(func=Name(id='is_thai', ctx=Load()), args=[Name(id='character', ctx=Load())], keywords=[]), ops=[Is()], comparators=[Constant(value=False)])]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_foreign_long_watch', ctx=Store())], value=Constant(value=True))], orelse=[]), Return()], orelse=[]), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load())), body=[Return()], orelse=[]), If(test=BoolOp(op=And(), values=[BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='character', ctx=Load()), attr='isspace', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='is_punctuation', ctx=Load()), args=[Name(id='character', ctx=Load())], keywords=[]), Call(func=Name(id='is_separator', ctx=Load()), args=[Name(id='character', ctx=Load())], keywords=[])]), Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load())]), body=[AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_word_count', ctx=Store()), op=Add(), value=Constant(value=1)), AnnAssign(target=Name(id='buffer_length', ctx=Store()), annotation=Name(id='int', ctx=Load()), value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load())], keywords=[]), simple=1), AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_character_count', ctx=Store()), op=Add(), value=Name(id='buffer_length', ctx=Load())), If(test=Compare(left=Name(id='buffer_length', ctx=Load()), ops=[GtE()], comparators=[Constant(value=4)]), body=[If(test=Compare(left=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer_accent_count', ctx=Load()), op=Div(), right=Name(id='buffer_length', ctx=Load())), ops=[Gt()], comparators=[Constant(value=0.34)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_is_current_word_bad', ctx=Store())], value=Constant(value=True))], orelse=[]), If(test=BoolOp(op=And(), values=[Call(func=Name(id='is_accentuated', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], keywords=[]), Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), attr='isupper', ctx=Load()), args=[], keywords=[]), Compare(left=Call(func=Name(id='all', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='_', ctx=Load()), attr='isupper', ctx=Load()), args=[], keywords=[]), generators=[comprehension(target=Name(id='_', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), ifs=[], is_async=0)])], keywords=[]), ops=[Is()], comparators=[Constant(value=False)])]), body=[AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_foreign_long_count', ctx=Store()), op=Add(), value=Constant(value=1)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_is_current_word_bad', ctx=Store())], value=Constant(value=True))], orelse=[])], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='buffer_length', ctx=Load()), ops=[GtE()], comparators=[Constant(value=24)]), Attribute(value=Name(id='self', ctx=Load()), attr='_foreign_long_watch', ctx=Load())]), body=[Assign(targets=[Name(id='camel_case_dst', ctx=Store())], value=ListComp(elt=Name(id='i', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='c', ctx=Store()), Name(id='i', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Name(id='buffer_length', ctx=Load())], keywords=[])], keywords=[]), ifs=[Call(func=Attribute(value=Name(id='c', ctx=Load()), attr='isupper', ctx=Load()), args=[], keywords=[])], is_async=0)])), AnnAssign(target=Name(id='probable_camel_cased', ctx=Store()), annotation=Name(id='bool', ctx=Load()), value=Constant(value=False), simple=1), If(test=BoolOp(op=And(), values=[Name(id='camel_case_dst', ctx=Load()), Compare(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='camel_case_dst', ctx=Load())], keywords=[]), op=Div(), right=Name(id='buffer_length', ctx=Load())), ops=[LtE()], comparators=[Constant(value=0.3)])]), body=[Assign(targets=[Name(id='probable_camel_cased', ctx=Store())], value=Constant(value=True))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='probable_camel_cased', ctx=Load())), body=[AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_foreign_long_count', ctx=Store()), op=Add(), value=Constant(value=1)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_is_current_word_bad', ctx=Store())], value=Constant(value=True))], orelse=[])], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_is_current_word_bad', ctx=Load()), body=[AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_bad_word_count', ctx=Store()), op=Add(), value=Constant(value=1)), AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_bad_character_count', ctx=Store()), op=Add(), value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_is_current_word_bad', ctx=Store())], value=Constant(value=False))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_foreign_long_watch', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Store())], value=Constant(value='')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_buffer_accent_count', ctx=Store())], value=Constant(value=0))], orelse=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='character', ctx=Load()), ops=[NotIn()], comparators=[Set(elts=[Constant(value='<'), Constant(value='>'), Constant(value='-'), Constant(value='='), Constant(value='~'), Constant(value='|'), Constant(value='_')])]), Compare(left=Call(func=Attribute(value=Name(id='character', ctx=Load()), attr='isdigit', ctx=Load()), args=[], keywords=[]), ops=[Is()], comparators=[Constant(value=False)]), Call(func=Name(id='is_symbol', ctx=Load()), args=[Name(id='character', ctx=Load())], keywords=[])]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_is_current_word_bad', ctx=Store())], value=Constant(value=True)), AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Store()), op=Add(), value=Name(id='character', ctx=Load()))], orelse=[])])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='reset', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Store())], value=Constant(value='')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_is_current_word_bad', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_foreign_long_watch', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_bad_word_count', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_word_count', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_character_count', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_bad_character_count', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_foreign_long_count', ctx=Store())], value=Constant(value=0))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='ratio', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_word_count', ctx=Load()), ops=[LtE()], comparators=[Constant(value=10)]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_foreign_long_count', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Return(value=Constant(value=0.0))], orelse=[]), Return(value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_bad_character_count', ctx=Load()), op=Div(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_character_count', ctx=Load())))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='float', ctx=Load()))], decorator_list=[]), ClassDef(name='CjkInvalidStopPlugin', bases=[Name(id='MessDetectorPlugin', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="\n    GB(Chinese) based encoding often render the stop incorrectly when the content does not fit and\n    can be easily detected. Searching for the overuse of '丅' and '丄'.\n    ")), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_wrong_stop_count', ctx=Store()), annotation=Name(id='int', ctx=Load()), value=Constant(value=0), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_cjk_character_count', ctx=Store()), annotation=Name(id='int', ctx=Load()), value=Constant(value=0), simple=0)], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='eligible', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='character', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=True))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='feed', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='character', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='character', ctx=Load()), ops=[In()], comparators=[Set(elts=[Constant(value='丅'), Constant(value='丄')])]), body=[AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_wrong_stop_count', ctx=Store()), op=Add(), value=Constant(value=1)), Return()], orelse=[]), If(test=Call(func=Name(id='is_cjk', ctx=Load()), args=[Name(id='character', ctx=Load())], keywords=[]), body=[AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_cjk_character_count', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='reset', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_wrong_stop_count', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_cjk_character_count', ctx=Store())], value=Constant(value=0))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='ratio', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_cjk_character_count', ctx=Load()), ops=[Lt()], comparators=[Constant(value=16)]), body=[Return(value=Constant(value=0.0))], orelse=[]), Return(value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_wrong_stop_count', ctx=Load()), op=Div(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_cjk_character_count', ctx=Load())))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='float', ctx=Load()))], decorator_list=[]), ClassDef(name='ArchaicUpperLowerPlugin', bases=[Name(id='MessDetectorPlugin', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_buf', ctx=Store()), annotation=Name(id='bool', ctx=Load()), value=Constant(value=False), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_character_count_since_last_sep', ctx=Store()), annotation=Name(id='int', ctx=Load()), value=Constant(value=0), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_successive_upper_lower_count', ctx=Store()), annotation=Name(id='int', ctx=Load()), value=Constant(value=0), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_successive_upper_lower_count_final', ctx=Store()), annotation=Name(id='int', ctx=Load()), value=Constant(value=0), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_character_count', ctx=Store()), annotation=Name(id='int', ctx=Load()), value=Constant(value=0), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_last_alpha_seen', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_current_ascii_only', ctx=Store()), annotation=Name(id='bool', ctx=Load()), value=Constant(value=True), simple=0)], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='eligible', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='character', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=True))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='feed', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='character', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='is_concerned', ctx=Store())], value=BoolOp(op=And(), values=[Call(func=Attribute(value=Name(id='character', ctx=Load()), attr='isalpha', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='is_case_variable', ctx=Load()), args=[Name(id='character', ctx=Load())], keywords=[])])), Assign(targets=[Name(id='chunk_sep', ctx=Store())], value=Compare(left=Name(id='is_concerned', ctx=Load()), ops=[Is()], comparators=[Constant(value=False)])), If(test=BoolOp(op=And(), values=[Name(id='chunk_sep', ctx=Load()), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_character_count_since_last_sep', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)])]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_character_count_since_last_sep', ctx=Load()), ops=[LtE()], comparators=[Constant(value=64)]), Compare(left=Call(func=Attribute(value=Name(id='character', ctx=Load()), attr='isdigit', ctx=Load()), args=[], keywords=[]), ops=[Is()], comparators=[Constant(value=False)]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_current_ascii_only', ctx=Load()), ops=[Is()], comparators=[Constant(value=False)])]), body=[AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_successive_upper_lower_count_final', ctx=Store()), op=Add(), value=Attribute(value=Name(id='self', ctx=Load()), attr='_successive_upper_lower_count', ctx=Load()))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_successive_upper_lower_count', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_character_count_since_last_sep', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_last_alpha_seen', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_buf', ctx=Store())], value=Constant(value=False)), AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_character_count', ctx=Store()), op=Add(), value=Constant(value=1)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_current_ascii_only', ctx=Store())], value=Constant(value=True)), Return()], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_current_ascii_only', ctx=Load()), ops=[Is()], comparators=[Constant(value=True)]), Compare(left=Call(func=Attribute(value=Name(id='character', ctx=Load()), attr='isascii', ctx=Load()), args=[], keywords=[]), ops=[Is()], comparators=[Constant(value=False)])]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_current_ascii_only', ctx=Store())], value=Constant(value=False))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_last_alpha_seen', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[If(test=BoolOp(op=Or(), values=[BoolOp(op=And(), values=[Call(func=Attribute(value=Name(id='character', ctx=Load()), attr='isupper', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_last_alpha_seen', ctx=Load()), attr='islower', ctx=Load()), args=[], keywords=[])]), BoolOp(op=And(), values=[Call(func=Attribute(value=Name(id='character', ctx=Load()), attr='islower', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_last_alpha_seen', ctx=Load()), attr='isupper', ctx=Load()), args=[], keywords=[])])]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_buf', ctx=Load()), ops=[Is()], comparators=[Constant(value=True)]), body=[AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_successive_upper_lower_count', ctx=Store()), op=Add(), value=Constant(value=2)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_buf', ctx=Store())], value=Constant(value=False))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_buf', ctx=Store())], value=Constant(value=True))])], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_buf', ctx=Store())], value=Constant(value=False))])], orelse=[]), AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_character_count', ctx=Store()), op=Add(), value=Constant(value=1)), AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_character_count_since_last_sep', ctx=Store()), op=Add(), value=Constant(value=1)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_last_alpha_seen', ctx=Store())], value=Name(id='character', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='reset', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_character_count', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_character_count_since_last_sep', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_successive_upper_lower_count', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_successive_upper_lower_count_final', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_last_alpha_seen', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_buf', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_current_ascii_only', ctx=Store())], value=Constant(value=True))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='ratio', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_character_count', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0.0))], orelse=[]), Return(value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_successive_upper_lower_count_final', ctx=Load()), op=Div(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_character_count', ctx=Load())))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='float', ctx=Load()))], decorator_list=[]), ClassDef(name='ArabicIsolatedFormPlugin', bases=[Name(id='MessDetectorPlugin', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_character_count', ctx=Store()), annotation=Name(id='int', ctx=Load()), value=Constant(value=0), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_isolated_form_count', ctx=Store()), annotation=Name(id='int', ctx=Load()), value=Constant(value=0), simple=0)], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='reset', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_character_count', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_isolated_form_count', ctx=Store())], value=Constant(value=0))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='eligible', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='character', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='is_arabic', ctx=Load()), args=[Name(id='character', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='feed', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='character', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_character_count', ctx=Store()), op=Add(), value=Constant(value=1)), If(test=Call(func=Name(id='is_arabic_isolated_form', ctx=Load()), args=[Name(id='character', ctx=Load())], keywords=[]), body=[AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_isolated_form_count', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='ratio', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_character_count', ctx=Load()), ops=[Lt()], comparators=[Constant(value=8)]), body=[Return(value=Constant(value=0.0))], orelse=[]), AnnAssign(target=Name(id='isolated_form_usage', ctx=Store()), annotation=Name(id='float', ctx=Load()), value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_isolated_form_count', ctx=Load()), op=Div(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_character_count', ctx=Load())), simple=1), Return(value=Name(id='isolated_form_usage', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='float', ctx=Load()))], decorator_list=[]), FunctionDef(name='is_suspiciously_successive_range', args=arguments(posonlyargs=[], args=[arg(arg='unicode_range_a', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='unicode_range_b', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Determine if two Unicode range seen next to each other can be considered as suspicious.\n    ')), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='unicode_range_a', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Name(id='unicode_range_b', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])]), body=[Return(value=Constant(value=True))], orelse=[]), If(test=Compare(left=Name(id='unicode_range_a', ctx=Load()), ops=[Eq()], comparators=[Name(id='unicode_range_b', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Constant(value='Latin'), ops=[In()], comparators=[Name(id='unicode_range_a', ctx=Load())]), Compare(left=Constant(value='Latin'), ops=[In()], comparators=[Name(id='unicode_range_b', ctx=Load())])]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=BoolOp(op=Or(), values=[Compare(left=Constant(value='Emoticons'), ops=[In()], comparators=[Name(id='unicode_range_a', ctx=Load())]), Compare(left=Constant(value='Emoticons'), ops=[In()], comparators=[Name(id='unicode_range_b', ctx=Load())])]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=BoolOp(op=And(), values=[BoolOp(op=Or(), values=[Compare(left=Constant(value='Latin'), ops=[In()], comparators=[Name(id='unicode_range_a', ctx=Load())]), Compare(left=Constant(value='Latin'), ops=[In()], comparators=[Name(id='unicode_range_b', ctx=Load())])]), BoolOp(op=Or(), values=[Compare(left=Constant(value='Combining'), ops=[In()], comparators=[Name(id='unicode_range_a', ctx=Load())]), Compare(left=Constant(value='Combining'), ops=[In()], comparators=[Name(id='unicode_range_b', ctx=Load())])])]), body=[Return(value=Constant(value=False))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='keywords_range_a', ctx=Store()), Name(id='keywords_range_b', ctx=Store())], ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='unicode_range_a', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=' ')], keywords=[]), Call(func=Attribute(value=Name(id='unicode_range_b', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=' ')], keywords=[])], ctx=Load())), For(target=Name(id='el', ctx=Store()), iter=Name(id='keywords_range_a', ctx=Load()), body=[If(test=Compare(left=Name(id='el', ctx=Load()), ops=[In()], comparators=[Name(id='UNICODE_SECONDARY_RANGE_KEYWORD', ctx=Load())]), body=[Continue()], orelse=[]), If(test=Compare(left=Name(id='el', ctx=Load()), ops=[In()], comparators=[Name(id='keywords_range_b', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[])], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='range_a_jp_chars', ctx=Store()), Name(id='range_b_jp_chars', ctx=Store())], ctx=Store())], value=Tuple(elts=[Compare(left=Name(id='unicode_range_a', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='Hiragana'), Constant(value='Katakana')], ctx=Load())]), Compare(left=Name(id='unicode_range_b', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='Hiragana'), Constant(value='Katakana')], ctx=Load())])], ctx=Load())), If(test=BoolOp(op=And(), values=[BoolOp(op=Or(), values=[Name(id='range_a_jp_chars', ctx=Load()), Name(id='range_b_jp_chars', ctx=Load())]), BoolOp(op=Or(), values=[Compare(left=Constant(value='CJK'), ops=[In()], comparators=[Name(id='unicode_range_a', ctx=Load())]), Compare(left=Constant(value='CJK'), ops=[In()], comparators=[Name(id='unicode_range_b', ctx=Load())])])]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=BoolOp(op=And(), values=[Name(id='range_a_jp_chars', ctx=Load()), Name(id='range_b_jp_chars', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=BoolOp(op=Or(), values=[Compare(left=Constant(value='Hangul'), ops=[In()], comparators=[Name(id='unicode_range_a', ctx=Load())]), Compare(left=Constant(value='Hangul'), ops=[In()], comparators=[Name(id='unicode_range_b', ctx=Load())])]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Constant(value='CJK'), ops=[In()], comparators=[Name(id='unicode_range_a', ctx=Load())]), Compare(left=Constant(value='CJK'), ops=[In()], comparators=[Name(id='unicode_range_b', ctx=Load())])]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='unicode_range_a', ctx=Load()), ops=[Eq()], comparators=[Constant(value='Basic Latin')]), Compare(left=Name(id='unicode_range_b', ctx=Load()), ops=[Eq()], comparators=[Constant(value='Basic Latin')])]), body=[Return(value=Constant(value=False))], orelse=[])], orelse=[]), If(test=BoolOp(op=Or(), values=[BoolOp(op=Or(), values=[Compare(left=Constant(value='CJK'), ops=[In()], comparators=[Name(id='unicode_range_a', ctx=Load())]), Compare(left=Constant(value='CJK'), ops=[In()], comparators=[Name(id='unicode_range_b', ctx=Load())])]), BoolOp(op=And(), values=[Compare(left=Name(id='unicode_range_a', ctx=Load()), ops=[In()], comparators=[List(elts=[Constant(value='Katakana'), Constant(value='Hiragana')], ctx=Load())]), Compare(left=Name(id='unicode_range_b', ctx=Load()), ops=[In()], comparators=[List(elts=[Constant(value='Katakana'), Constant(value='Hiragana')], ctx=Load())])])]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Constant(value='Punctuation'), ops=[In()], comparators=[Name(id='unicode_range_a', ctx=Load())]), Compare(left=Constant(value='Punctuation'), ops=[In()], comparators=[Name(id='unicode_range_b', ctx=Load())])]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=BoolOp(op=Or(), values=[Compare(left=Constant(value='Forms'), ops=[In()], comparators=[Name(id='unicode_range_a', ctx=Load())]), Compare(left=Constant(value='Forms'), ops=[In()], comparators=[Name(id='unicode_range_b', ctx=Load())])]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='unicode_range_a', ctx=Load()), ops=[Eq()], comparators=[Constant(value='Basic Latin')]), Compare(left=Name(id='unicode_range_b', ctx=Load()), ops=[Eq()], comparators=[Constant(value='Basic Latin')])]), body=[Return(value=Constant(value=False))], orelse=[])], orelse=[]), Return(value=Constant(value=True))], decorator_list=[Call(func=Name(id='lru_cache', ctx=Load()), args=[], keywords=[keyword(arg='maxsize', value=Constant(value=1024))])], returns=Name(id='bool', ctx=Load())), FunctionDef(name='mess_ratio', args=arguments(posonlyargs=[], args=[arg(arg='decoded_sequence', annotation=Name(id='str', ctx=Load())), arg(arg='maximum_threshold', annotation=Name(id='float', ctx=Load())), arg(arg='debug', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0.2), Constant(value=False)]), body=[Expr(value=Constant(value='\n    Compute a mess ratio given a decoded bytes sequence. The maximum threshold does stop the computation earlier.\n    ')), AnnAssign(target=Name(id='detectors', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='MessDetectorPlugin', ctx=Load()), ctx=Load()), value=ListComp(elt=Call(func=Name(id='md_class', ctx=Load()), args=[], keywords=[]), generators=[comprehension(target=Name(id='md_class', ctx=Store()), iter=Call(func=Attribute(value=Name(id='MessDetectorPlugin', ctx=Load()), attr='__subclasses__', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)]), simple=1), AnnAssign(target=Name(id='length', ctx=Store()), annotation=Name(id='int', ctx=Load()), value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='decoded_sequence', ctx=Load())], keywords=[]), op=Add(), right=Constant(value=1)), simple=1), AnnAssign(target=Name(id='mean_mess_ratio', ctx=Store()), annotation=Name(id='float', ctx=Load()), value=Constant(value=0.0), simple=1), If(test=Compare(left=Name(id='length', ctx=Load()), ops=[Lt()], comparators=[Constant(value=512)]), body=[AnnAssign(target=Name(id='intermediary_mean_mess_ratio_calc', ctx=Store()), annotation=Name(id='int', ctx=Load()), value=Constant(value=32), simple=1)], orelse=[If(test=Compare(left=Name(id='length', ctx=Load()), ops=[LtE()], comparators=[Constant(value=1024)]), body=[Assign(targets=[Name(id='intermediary_mean_mess_ratio_calc', ctx=Store())], value=Constant(value=64))], orelse=[Assign(targets=[Name(id='intermediary_mean_mess_ratio_calc', ctx=Store())], value=Constant(value=128))])]), For(target=Tuple(elts=[Name(id='character', ctx=Store()), Name(id='index', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[BinOp(left=Name(id='decoded_sequence', ctx=Load()), op=Add(), right=Constant(value='\n')), Call(func=Name(id='range', ctx=Load()), args=[Name(id='length', ctx=Load())], keywords=[])], keywords=[]), body=[For(target=Name(id='detector', ctx=Store()), iter=Name(id='detectors', ctx=Load()), body=[If(test=Call(func=Attribute(value=Name(id='detector', ctx=Load()), attr='eligible', ctx=Load()), args=[Name(id='character', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='detector', ctx=Load()), attr='feed', ctx=Load()), args=[Name(id='character', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), If(test=BoolOp(op=Or(), values=[BoolOp(op=And(), values=[Compare(left=Name(id='index', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), Compare(left=BinOp(left=Name(id='index', ctx=Load()), op=Mod(), right=Name(id='intermediary_mean_mess_ratio_calc', ctx=Load())), ops=[Eq()], comparators=[Constant(value=0)])]), Compare(left=Name(id='index', ctx=Load()), ops=[Eq()], comparators=[BinOp(left=Name(id='length', ctx=Load()), op=Sub(), right=Constant(value=1))])]), body=[Assign(targets=[Name(id='mean_mess_ratio', ctx=Store())], value=Call(func=Name(id='sum', ctx=Load()), args=[GeneratorExp(elt=Attribute(value=Name(id='dt', ctx=Load()), attr='ratio', ctx=Load()), generators=[comprehension(target=Name(id='dt', ctx=Store()), iter=Name(id='detectors', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), If(test=Compare(left=Name(id='mean_mess_ratio', ctx=Load()), ops=[GtE()], comparators=[Name(id='maximum_threshold', ctx=Load())]), body=[Break()], orelse=[])], orelse=[])], orelse=[]), If(test=Name(id='debug', ctx=Load()), body=[Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Name(id='getLogger', ctx=Load()), args=[Constant(value='charset_normalizer')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='log', ctx=Load()), args=[Name(id='TRACE', ctx=Load()), JoinedStr(values=[Constant(value='Mess-detector extended-analysis start. intermediary_mean_mess_ratio_calc='), FormattedValue(value=Name(id='intermediary_mean_mess_ratio_calc', ctx=Load()), conversion=-1), Constant(value=' mean_mess_ratio='), FormattedValue(value=Name(id='mean_mess_ratio', ctx=Load()), conversion=-1), Constant(value=' maximum_threshold='), FormattedValue(value=Name(id='maximum_threshold', ctx=Load()), conversion=-1)])], keywords=[])), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='decoded_sequence', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=16)]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='log', ctx=Load()), args=[Name(id='TRACE', ctx=Load()), JoinedStr(values=[Constant(value='Starting with: '), FormattedValue(value=Subscript(value=Name(id='decoded_sequence', ctx=Load()), slice=Slice(upper=Constant(value=16)), ctx=Load()), conversion=-1)])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='log', ctx=Load()), args=[Name(id='TRACE', ctx=Load()), JoinedStr(values=[Constant(value='Ending with: '), FormattedValue(value=Subscript(value=Name(id='decoded_sequence', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Constant(value=16))), ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[]), For(target=Name(id='dt', ctx=Store()), iter=Name(id='detectors', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='log', ctx=Load()), args=[Name(id='TRACE', ctx=Load()), JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='dt', ctx=Load()), attr='__class__', ctx=Load()), conversion=-1), Constant(value=': '), FormattedValue(value=Attribute(value=Name(id='dt', ctx=Load()), attr='ratio', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[])], orelse=[]), Return(value=Call(func=Name(id='round', ctx=Load()), args=[Name(id='mean_mess_ratio', ctx=Load()), Constant(value=3)], keywords=[]))], decorator_list=[Call(func=Name(id='lru_cache', ctx=Load()), args=[], keywords=[keyword(arg='maxsize', value=Constant(value=2048))])], returns=Name(id='float', ctx=Load()))], type_ignores=[])