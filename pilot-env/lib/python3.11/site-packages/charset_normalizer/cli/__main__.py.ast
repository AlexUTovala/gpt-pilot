Module(body=[Import(names=[alias(name='argparse')]), Import(names=[alias(name='sys')]), ImportFrom(module='json', names=[alias(name='dumps')], level=0), ImportFrom(module='os.path', names=[alias(name='abspath'), alias(name='basename'), alias(name='dirname'), alias(name='join'), alias(name='realpath')], level=0), ImportFrom(module='platform', names=[alias(name='python_version')], level=0), ImportFrom(module='typing', names=[alias(name='List'), alias(name='Optional')], level=0), ImportFrom(module='unicodedata', names=[alias(name='unidata_version')], level=0), Import(names=[alias(name='charset_normalizer.md', asname='md_module')]), ImportFrom(module='charset_normalizer', names=[alias(name='from_fp')], level=0), ImportFrom(module='charset_normalizer.models', names=[alias(name='CliDetectionResult')], level=0), ImportFrom(module='charset_normalizer.version', names=[alias(name='__version__')], level=0), FunctionDef(name='query_yes_no', args=arguments(posonlyargs=[], args=[arg(arg='question', annotation=Name(id='str', ctx=Load())), arg(arg='default', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='yes')]), body=[Expr(value=Constant(value='Ask a yes/no question via input() and return their answer.\n\n    "question" is a string that is presented to the user.\n    "default" is the presumed answer if the user just hits <Enter>.\n        It must be "yes" (the default), "no" or None (meaning\n        an answer is required of the user).\n\n    The "answer" return value is True for "yes" or False for "no".\n\n    Credit goes to (c) https://stackoverflow.com/questions/3041986/apt-command-line-interface-like-yes-no-input\n    ')), Assign(targets=[Name(id='valid', ctx=Store())], value=Dict(keys=[Constant(value='yes'), Constant(value='y'), Constant(value='ye'), Constant(value='no'), Constant(value='n')], values=[Constant(value=True), Constant(value=True), Constant(value=True), Constant(value=False), Constant(value=False)])), If(test=Compare(left=Name(id='default', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='prompt', ctx=Store())], value=Constant(value=' [y/n] '))], orelse=[If(test=Compare(left=Name(id='default', ctx=Load()), ops=[Eq()], comparators=[Constant(value='yes')]), body=[Assign(targets=[Name(id='prompt', ctx=Store())], value=Constant(value=' [Y/n] '))], orelse=[If(test=Compare(left=Name(id='default', ctx=Load()), ops=[Eq()], comparators=[Constant(value='no')]), body=[Assign(targets=[Name(id='prompt', ctx=Store())], value=Constant(value=' [y/N] '))], orelse=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value="invalid default answer: '%s'"), op=Mod(), right=Name(id='default', ctx=Load()))], keywords=[]))])])]), While(test=Constant(value=True), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load()), attr='write', ctx=Load()), args=[BinOp(left=Name(id='question', ctx=Load()), op=Add(), right=Name(id='prompt', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='choice', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='input', ctx=Load()), args=[], keywords=[]), attr='lower', ctx=Load()), args=[], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='default', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='choice', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')])]), body=[Return(value=Subscript(value=Name(id='valid', ctx=Load()), slice=Name(id='default', ctx=Load()), ctx=Load()))], orelse=[If(test=Compare(left=Name(id='choice', ctx=Load()), ops=[In()], comparators=[Name(id='valid', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='valid', ctx=Load()), slice=Name(id='choice', ctx=Load()), ctx=Load()))], orelse=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value="Please respond with 'yes' or 'no' (or 'y' or 'n').\n")], keywords=[]))])])], orelse=[])], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='cli_detect', args=arguments(posonlyargs=[], args=[arg(arg='argv', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='\n    CLI assistant using ARGV and ArgumentParser\n    :param argv:\n    :return: 0 if everything is fine, anything else equal trouble\n    ')), Assign(targets=[Name(id='parser', ctx=Store())], value=Call(func=Attribute(value=Name(id='argparse', ctx=Load()), attr='ArgumentParser', ctx=Load()), args=[], keywords=[keyword(arg='description', value=Constant(value='The Real First Universal Charset Detector. Discover originating encoding used on text file. Normalize text to unicode.'))])), Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='add_argument', ctx=Load()), args=[Constant(value='files')], keywords=[keyword(arg='type', value=Call(func=Attribute(value=Name(id='argparse', ctx=Load()), attr='FileType', ctx=Load()), args=[Constant(value='rb')], keywords=[])), keyword(arg='nargs', value=Constant(value='+')), keyword(arg='help', value=Constant(value='File(s) to be analysed'))])), Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='add_argument', ctx=Load()), args=[Constant(value='-v'), Constant(value='--verbose')], keywords=[keyword(arg='action', value=Constant(value='store_true')), keyword(arg='default', value=Constant(value=False)), keyword(arg='dest', value=Constant(value='verbose')), keyword(arg='help', value=Constant(value='Display complementary information about file if any. Stdout will contain logs about the detection process.'))])), Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='add_argument', ctx=Load()), args=[Constant(value='-a'), Constant(value='--with-alternative')], keywords=[keyword(arg='action', value=Constant(value='store_true')), keyword(arg='default', value=Constant(value=False)), keyword(arg='dest', value=Constant(value='alternatives')), keyword(arg='help', value=Constant(value='Output complementary possibilities if any. Top-level JSON WILL be a list.'))])), Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='add_argument', ctx=Load()), args=[Constant(value='-n'), Constant(value='--normalize')], keywords=[keyword(arg='action', value=Constant(value='store_true')), keyword(arg='default', value=Constant(value=False)), keyword(arg='dest', value=Constant(value='normalize')), keyword(arg='help', value=Constant(value='Permit to normalize input file. If not set, program does not write anything.'))])), Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='add_argument', ctx=Load()), args=[Constant(value='-m'), Constant(value='--minimal')], keywords=[keyword(arg='action', value=Constant(value='store_true')), keyword(arg='default', value=Constant(value=False)), keyword(arg='dest', value=Constant(value='minimal')), keyword(arg='help', value=Constant(value='Only output the charset detected to STDOUT. Disabling JSON output.'))])), Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='add_argument', ctx=Load()), args=[Constant(value='-r'), Constant(value='--replace')], keywords=[keyword(arg='action', value=Constant(value='store_true')), keyword(arg='default', value=Constant(value=False)), keyword(arg='dest', value=Constant(value='replace')), keyword(arg='help', value=Constant(value='Replace file when trying to normalize it instead of creating a new one.'))])), Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='add_argument', ctx=Load()), args=[Constant(value='-f'), Constant(value='--force')], keywords=[keyword(arg='action', value=Constant(value='store_true')), keyword(arg='default', value=Constant(value=False)), keyword(arg='dest', value=Constant(value='force')), keyword(arg='help', value=Constant(value='Replace file without asking if you are sure, use this flag with caution.'))])), Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='add_argument', ctx=Load()), args=[Constant(value='-t'), Constant(value='--threshold')], keywords=[keyword(arg='action', value=Constant(value='store')), keyword(arg='default', value=Constant(value=0.2)), keyword(arg='type', value=Name(id='float', ctx=Load())), keyword(arg='dest', value=Constant(value='threshold')), keyword(arg='help', value=Constant(value='Define a custom maximum amount of chaos allowed in decoded content. 0. <= chaos <= 1.'))])), Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='add_argument', ctx=Load()), args=[Constant(value='--version')], keywords=[keyword(arg='action', value=Constant(value='version')), keyword(arg='version', value=Call(func=Attribute(value=Constant(value='Charset-Normalizer {} - Python {} - Unicode {} - SpeedUp {}'), attr='format', ctx=Load()), args=[Name(id='__version__', ctx=Load()), Call(func=Name(id='python_version', ctx=Load()), args=[], keywords=[]), Name(id='unidata_version', ctx=Load()), IfExp(test=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='md_module', ctx=Load()), attr='__file__', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), attr='endswith', ctx=Load()), args=[Constant(value='.py')], keywords=[]), body=Constant(value='OFF'), orelse=Constant(value='ON'))], keywords=[])), keyword(arg='help', value=Constant(value='Show version information and exit.'))])), Assign(targets=[Name(id='args', ctx=Store())], value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='parse_args', ctx=Load()), args=[Name(id='argv', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='args', ctx=Load()), attr='replace', ctx=Load()), ops=[Is()], comparators=[Constant(value=True)]), Compare(left=Attribute(value=Name(id='args', ctx=Load()), attr='normalize', ctx=Load()), ops=[Is()], comparators=[Constant(value=False)])]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='Use --replace in addition of --normalize only.')], keywords=[keyword(arg='file', value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()))])), Return(value=Constant(value=1))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='args', ctx=Load()), attr='force', ctx=Load()), ops=[Is()], comparators=[Constant(value=True)]), Compare(left=Attribute(value=Name(id='args', ctx=Load()), attr='replace', ctx=Load()), ops=[Is()], comparators=[Constant(value=False)])]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='Use --force in addition of --replace only.')], keywords=[keyword(arg='file', value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()))])), Return(value=Constant(value=1))], orelse=[]), If(test=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='args', ctx=Load()), attr='threshold', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0.0)]), Compare(left=Attribute(value=Name(id='args', ctx=Load()), attr='threshold', ctx=Load()), ops=[Gt()], comparators=[Constant(value=1.0)])]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='--threshold VALUE should be between 0. AND 1.')], keywords=[keyword(arg='file', value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()))])), Return(value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='x_', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='my_file', ctx=Store()), iter=Attribute(value=Name(id='args', ctx=Load()), attr='files', ctx=Load()), body=[Assign(targets=[Name(id='matches', ctx=Store())], value=Call(func=Name(id='from_fp', ctx=Load()), args=[Name(id='my_file', ctx=Load())], keywords=[keyword(arg='threshold', value=Attribute(value=Name(id='args', ctx=Load()), attr='threshold', ctx=Load())), keyword(arg='explain', value=Attribute(value=Name(id='args', ctx=Load()), attr='verbose', ctx=Load()))])), Assign(targets=[Name(id='best_guess', ctx=Store())], value=Call(func=Attribute(value=Name(id='matches', ctx=Load()), attr='best', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='best_guess', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Unable to identify originating encoding for "{}". {}'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='my_file', ctx=Load()), attr='name', ctx=Load()), IfExp(test=Compare(left=Attribute(value=Name(id='args', ctx=Load()), attr='threshold', ctx=Load()), ops=[Lt()], comparators=[Constant(value=1.0)]), body=Constant(value='Maybe try increasing maximum amount of chaos.'), orelse=Constant(value=''))], keywords=[])], keywords=[keyword(arg='file', value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='x_', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='CliDetectionResult', ctx=Load()), args=[Call(func=Name(id='abspath', ctx=Load()), args=[Attribute(value=Name(id='my_file', ctx=Load()), attr='name', ctx=Load())], keywords=[]), Constant(value=None), List(elts=[], ctx=Load()), List(elts=[], ctx=Load()), Constant(value='Unknown'), List(elts=[], ctx=Load()), Constant(value=False), Constant(value=1.0), Constant(value=0.0), Constant(value=None), Constant(value=True)], keywords=[])], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='x_', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='CliDetectionResult', ctx=Load()), args=[Call(func=Name(id='abspath', ctx=Load()), args=[Attribute(value=Name(id='my_file', ctx=Load()), attr='name', ctx=Load())], keywords=[]), Attribute(value=Name(id='best_guess', ctx=Load()), attr='encoding', ctx=Load()), Attribute(value=Name(id='best_guess', ctx=Load()), attr='encoding_aliases', ctx=Load()), ListComp(elt=Name(id='cp', ctx=Load()), generators=[comprehension(target=Name(id='cp', ctx=Store()), iter=Attribute(value=Name(id='best_guess', ctx=Load()), attr='could_be_from_charset', ctx=Load()), ifs=[Compare(left=Name(id='cp', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='best_guess', ctx=Load()), attr='encoding', ctx=Load())])], is_async=0)]), Attribute(value=Name(id='best_guess', ctx=Load()), attr='language', ctx=Load()), Attribute(value=Name(id='best_guess', ctx=Load()), attr='alphabets', ctx=Load()), Attribute(value=Name(id='best_guess', ctx=Load()), attr='bom', ctx=Load()), Attribute(value=Name(id='best_guess', ctx=Load()), attr='percent_chaos', ctx=Load()), Attribute(value=Name(id='best_guess', ctx=Load()), attr='percent_coherence', ctx=Load()), Constant(value=None), Constant(value=True)], keywords=[])], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='matches', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), Attribute(value=Name(id='args', ctx=Load()), attr='alternatives', ctx=Load())]), body=[For(target=Name(id='el', ctx=Store()), iter=Name(id='matches', ctx=Load()), body=[If(test=Compare(left=Name(id='el', ctx=Load()), ops=[NotEq()], comparators=[Name(id='best_guess', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='x_', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='CliDetectionResult', ctx=Load()), args=[Call(func=Name(id='abspath', ctx=Load()), args=[Attribute(value=Name(id='my_file', ctx=Load()), attr='name', ctx=Load())], keywords=[]), Attribute(value=Name(id='el', ctx=Load()), attr='encoding', ctx=Load()), Attribute(value=Name(id='el', ctx=Load()), attr='encoding_aliases', ctx=Load()), ListComp(elt=Name(id='cp', ctx=Load()), generators=[comprehension(target=Name(id='cp', ctx=Store()), iter=Attribute(value=Name(id='el', ctx=Load()), attr='could_be_from_charset', ctx=Load()), ifs=[Compare(left=Name(id='cp', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='el', ctx=Load()), attr='encoding', ctx=Load())])], is_async=0)]), Attribute(value=Name(id='el', ctx=Load()), attr='language', ctx=Load()), Attribute(value=Name(id='el', ctx=Load()), attr='alphabets', ctx=Load()), Attribute(value=Name(id='el', ctx=Load()), attr='bom', ctx=Load()), Attribute(value=Name(id='el', ctx=Load()), attr='percent_chaos', ctx=Load()), Attribute(value=Name(id='el', ctx=Load()), attr='percent_coherence', ctx=Load()), Constant(value=None), Constant(value=False)], keywords=[])], keywords=[]))], orelse=[])], orelse=[])], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='args', ctx=Load()), attr='normalize', ctx=Load()), ops=[Is()], comparators=[Constant(value=True)]), body=[If(test=Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='best_guess', ctx=Load()), attr='encoding', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='utf')], keywords=[]), ops=[Is()], comparators=[Constant(value=True)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='"{}" file does not need to be normalized, as it already came from unicode.'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='my_file', ctx=Load()), attr='name', ctx=Load())], keywords=[])], keywords=[keyword(arg='file', value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()))])), If(test=Compare(left=Attribute(value=Name(id='my_file', ctx=Load()), attr='closed', ctx=Load()), ops=[Is()], comparators=[Constant(value=False)]), body=[Expr(value=Call(func=Attribute(value=Name(id='my_file', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))], orelse=[]), Continue()], orelse=[]), Assign(targets=[Name(id='dir_path', ctx=Store())], value=Call(func=Name(id='dirname', ctx=Load()), args=[Call(func=Name(id='realpath', ctx=Load()), args=[Attribute(value=Name(id='my_file', ctx=Load()), attr='name', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='file_name', ctx=Store())], value=Call(func=Name(id='basename', ctx=Load()), args=[Call(func=Name(id='realpath', ctx=Load()), args=[Attribute(value=Name(id='my_file', ctx=Load()), attr='name', ctx=Load())], keywords=[])], keywords=[])), AnnAssign(target=Name(id='o_', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Call(func=Attribute(value=Name(id='file_name', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[]), simple=1), If(test=Compare(left=Attribute(value=Name(id='args', ctx=Load()), attr='replace', ctx=Load()), ops=[Is()], comparators=[Constant(value=False)]), body=[Expr(value=Call(func=Attribute(value=Name(id='o_', ctx=Load()), attr='insert', ctx=Load()), args=[UnaryOp(op=USub(), operand=Constant(value=1)), Attribute(value=Name(id='best_guess', ctx=Load()), attr='encoding', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='my_file', ctx=Load()), attr='closed', ctx=Load()), ops=[Is()], comparators=[Constant(value=False)]), body=[Expr(value=Call(func=Attribute(value=Name(id='my_file', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))], orelse=[])], orelse=[If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='args', ctx=Load()), attr='force', ctx=Load()), ops=[Is()], comparators=[Constant(value=False)]), Compare(left=Call(func=Name(id='query_yes_no', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Are you sure to normalize "{}" by replacing it ?'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='my_file', ctx=Load()), attr='name', ctx=Load())], keywords=[]), Constant(value='no')], keywords=[]), ops=[Is()], comparators=[Constant(value=False)])]), body=[If(test=Compare(left=Attribute(value=Name(id='my_file', ctx=Load()), attr='closed', ctx=Load()), ops=[Is()], comparators=[Constant(value=False)]), body=[Expr(value=Call(func=Attribute(value=Name(id='my_file', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))], orelse=[]), Continue()], orelse=[])]), Try(body=[Assign(targets=[Attribute(value=Subscript(value=Name(id='x_', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='unicode_path', ctx=Store())], value=Call(func=Name(id='join', ctx=Load()), args=[Name(id='dir_path', ctx=Load()), Call(func=Attribute(value=Constant(value='.'), attr='join', ctx=Load()), args=[Name(id='o_', ctx=Load())], keywords=[])], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Attribute(value=Subscript(value=Name(id='x_', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='unicode_path', ctx=Load()), Constant(value='w')], keywords=[keyword(arg='encoding', value=Constant(value='utf-8'))]), optional_vars=Name(id='fp', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='fp', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='best_guess', ctx=Load())], keywords=[])], keywords=[]))])], handlers=[ExceptHandler(type=Name(id='IOError', ctx=Load()), name='e', body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[])], keywords=[keyword(arg='file', value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()))])), If(test=Compare(left=Attribute(value=Name(id='my_file', ctx=Load()), attr='closed', ctx=Load()), ops=[Is()], comparators=[Constant(value=False)]), body=[Expr(value=Call(func=Attribute(value=Name(id='my_file', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Constant(value=2))])], orelse=[], finalbody=[])], orelse=[])]), If(test=Compare(left=Attribute(value=Name(id='my_file', ctx=Load()), attr='closed', ctx=Load()), ops=[Is()], comparators=[Constant(value=False)]), body=[Expr(value=Call(func=Attribute(value=Name(id='my_file', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))], orelse=[])], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='args', ctx=Load()), attr='minimal', ctx=Load()), ops=[Is()], comparators=[Constant(value=False)]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Name(id='dumps', ctx=Load()), args=[IfExp(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='x_', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=ListComp(elt=Attribute(value=Name(id='el', ctx=Load()), attr='__dict__', ctx=Load()), generators=[comprehension(target=Name(id='el', ctx=Store()), iter=Name(id='x_', ctx=Load()), ifs=[], is_async=0)]), orelse=Attribute(value=Subscript(value=Name(id='x_', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='__dict__', ctx=Load()))], keywords=[keyword(arg='ensure_ascii', value=Constant(value=True)), keyword(arg='indent', value=Constant(value=4))])], keywords=[]))], orelse=[For(target=Name(id='my_file', ctx=Store()), iter=Attribute(value=Name(id='args', ctx=Load()), attr='files', ctx=Load()), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[ListComp(elt=BoolOp(op=Or(), values=[Attribute(value=Name(id='el', ctx=Load()), attr='encoding', ctx=Load()), Constant(value='undefined')]), generators=[comprehension(target=Name(id='el', ctx=Store()), iter=Name(id='x_', ctx=Load()), ifs=[Compare(left=Attribute(value=Name(id='el', ctx=Load()), attr='path', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='abspath', ctx=Load()), args=[Attribute(value=Name(id='my_file', ctx=Load()), attr='name', ctx=Load())], keywords=[])])], is_async=0)])], keywords=[])], keywords=[]))], orelse=[])]), Return(value=Constant(value=0))], decorator_list=[], returns=Name(id='int', ctx=Load())), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__')]), body=[Expr(value=Call(func=Name(id='cli_detect', ctx=Load()), args=[], keywords=[]))], orelse=[])], type_ignores=[])