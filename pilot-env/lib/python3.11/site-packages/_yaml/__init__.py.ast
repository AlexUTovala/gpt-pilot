Module(body=[Import(names=[alias(name='yaml')]), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='yaml', ctx=Load()), Constant(value='__with_libyaml__'), Constant(value=False)], keywords=[])), body=[ImportFrom(module='sys', names=[alias(name='version_info')], level=0), Assign(targets=[Name(id='exc', ctx=Store())], value=IfExp(test=Compare(left=Name(id='version_info', ctx=Load()), ops=[GtE()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=6)], ctx=Load())]), body=Name(id='ModuleNotFoundError', ctx=Load()), orelse=Name(id='ImportError', ctx=Load()))), Raise(exc=Call(func=Name(id='exc', ctx=Load()), args=[Constant(value="No module named '_yaml'")], keywords=[]))], orelse=[ImportFrom(module='yaml._yaml', names=[alias(name='*')], level=0), Import(names=[alias(name='warnings')]), Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value='The _yaml extension module is now located at yaml._yaml and its location is subject to change.  To use the LibYAML-based parser and emitter, import from `yaml`: `from yaml import CLoader as Loader, CDumper as Dumper`.'), Name(id='DeprecationWarning', ctx=Load())], keywords=[])), Delete(targets=[Name(id='warnings', ctx=Del())])]), Assign(targets=[Name(id='__name__', ctx=Store())], value=Constant(value='_yaml')), Assign(targets=[Name(id='__package__', ctx=Store())], value=Constant(value=''))], type_ignores=[])