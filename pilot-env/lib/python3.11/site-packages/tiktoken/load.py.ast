Module(body=[ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), Import(names=[alias(name='base64')]), Import(names=[alias(name='hashlib')]), Import(names=[alias(name='json')]), Import(names=[alias(name='os')]), Import(names=[alias(name='tempfile')]), Import(names=[alias(name='uuid')]), Import(names=[alias(name='requests')]), FunctionDef(name='read_file', args=arguments(posonlyargs=[], args=[arg(arg='blobpath', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='blobpath', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='http://')], keywords=[])), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='blobpath', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='https://')], keywords=[]))]), body=[Try(body=[Import(names=[alias(name='blobfile')])], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='ImportError', ctx=Load()), args=[Constant(value='blobfile is not installed. Please install it by running `pip install blobfile`.')], keywords=[]), cause=Name(id='e', ctx=Load()))])], orelse=[], finalbody=[]), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='blobfile', ctx=Load()), attr='BlobFile', ctx=Load()), args=[Name(id='blobpath', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Return(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]))])], orelse=[]), Assign(targets=[Name(id='resp', ctx=Store())], value=Call(func=Attribute(value=Name(id='requests', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='blobpath', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='resp', ctx=Load()), attr='raise_for_status', ctx=Load()), args=[], keywords=[])), Return(value=Attribute(value=Name(id='resp', ctx=Load()), attr='content', ctx=Load()))], decorator_list=[], returns=Name(id='bytes', ctx=Load())), FunctionDef(name='read_file_cached', args=arguments(posonlyargs=[], args=[arg(arg='blobpath', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='user_specified_cache', ctx=Store())], value=Constant(value=True)), If(test=Compare(left=Constant(value='TIKTOKEN_CACHE_DIR'), ops=[In()], comparators=[Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load())]), body=[Assign(targets=[Name(id='cache_dir', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), slice=Constant(value='TIKTOKEN_CACHE_DIR'), ctx=Load()))], orelse=[If(test=Compare(left=Constant(value='DATA_GYM_CACHE_DIR'), ops=[In()], comparators=[Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load())]), body=[Assign(targets=[Name(id='cache_dir', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), slice=Constant(value='DATA_GYM_CACHE_DIR'), ctx=Load()))], orelse=[Assign(targets=[Name(id='cache_dir', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Call(func=Attribute(value=Name(id='tempfile', ctx=Load()), attr='gettempdir', ctx=Load()), args=[], keywords=[]), Constant(value='data-gym-cache')], keywords=[])), Assign(targets=[Name(id='user_specified_cache', ctx=Store())], value=Constant(value=False))])]), If(test=Compare(left=Name(id='cache_dir', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Call(func=Name(id='read_file', ctx=Load()), args=[Name(id='blobpath', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='cache_key', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='hashlib', ctx=Load()), attr='sha1', ctx=Load()), args=[Call(func=Attribute(value=Name(id='blobpath', ctx=Load()), attr='encode', ctx=Load()), args=[], keywords=[])], keywords=[]), attr='hexdigest', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='cache_path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='cache_dir', ctx=Load()), Name(id='cache_key', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='cache_path', ctx=Load())], keywords=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='cache_path', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Return(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]))])], orelse=[]), Assign(targets=[Name(id='contents', ctx=Store())], value=Call(func=Name(id='read_file', ctx=Load()), args=[Name(id='blobpath', ctx=Load())], keywords=[])), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Name(id='cache_dir', ctx=Load())], keywords=[keyword(arg='exist_ok', value=Constant(value=True))])), Assign(targets=[Name(id='tmp_filename', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=Name(id='cache_path', ctx=Load()), op=Add(), right=Constant(value='.')), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Attribute(value=Name(id='uuid', ctx=Load()), attr='uuid4', ctx=Load()), args=[], keywords=[])], keywords=[])), op=Add(), right=Constant(value='.tmp'))), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='tmp_filename', ctx=Load()), Constant(value='wb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='contents', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='rename', ctx=Load()), args=[Name(id='tmp_filename', ctx=Load()), Name(id='cache_path', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), body=[If(test=Name(id='user_specified_cache', ctx=Load()), body=[Raise()], orelse=[])])], orelse=[], finalbody=[]), Return(value=Name(id='contents', ctx=Load()))], decorator_list=[], returns=Name(id='bytes', ctx=Load())), FunctionDef(name='data_gym_to_mergeable_bpe_ranks', args=arguments(posonlyargs=[], args=[arg(arg='vocab_bpe_file', annotation=Name(id='str', ctx=Load())), arg(arg='encoder_json_file', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='rank_to_intbyte', ctx=Store())], value=ListComp(elt=Name(id='b', ctx=Load()), generators=[comprehension(target=Name(id='b', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[BinOp(left=Constant(value=2), op=Pow(), right=Constant(value=8))], keywords=[]), ifs=[BoolOp(op=And(), values=[Call(func=Attribute(value=Call(func=Name(id='chr', ctx=Load()), args=[Name(id='b', ctx=Load())], keywords=[]), attr='isprintable', ctx=Load()), args=[], keywords=[]), Compare(left=Call(func=Name(id='chr', ctx=Load()), args=[Name(id='b', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Constant(value=' ')])])], is_async=0)])), Assign(targets=[Name(id='data_gym_byte_to_byte', ctx=Store())], value=DictComp(key=Call(func=Name(id='chr', ctx=Load()), args=[Name(id='b', ctx=Load())], keywords=[]), value=Name(id='b', ctx=Load()), generators=[comprehension(target=Name(id='b', ctx=Store()), iter=Name(id='rank_to_intbyte', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='n', ctx=Store())], value=Constant(value=0)), For(target=Name(id='b', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[BinOp(left=Constant(value=2), op=Pow(), right=Constant(value=8))], keywords=[]), body=[If(test=Compare(left=Name(id='b', ctx=Load()), ops=[NotIn()], comparators=[Name(id='rank_to_intbyte', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='rank_to_intbyte', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='b', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='data_gym_byte_to_byte', ctx=Load()), slice=Call(func=Name(id='chr', ctx=Load()), args=[BinOp(left=BinOp(left=Constant(value=2), op=Pow(), right=Constant(value=8)), op=Add(), right=Name(id='n', ctx=Load()))], keywords=[]), ctx=Store())], value=Name(id='b', ctx=Load())), AugAssign(target=Name(id='n', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], orelse=[]), Assert(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='rank_to_intbyte', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[BinOp(left=Constant(value=2), op=Pow(), right=Constant(value=8))])), Assign(targets=[Name(id='vocab_bpe_contents', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='read_file_cached', ctx=Load()), args=[Name(id='vocab_bpe_file', ctx=Load())], keywords=[]), attr='decode', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='bpe_merges', ctx=Store())], value=ListComp(elt=Call(func=Name(id='tuple', ctx=Load()), args=[Call(func=Attribute(value=Name(id='merge_str', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[])], keywords=[]), generators=[comprehension(target=Name(id='merge_str', ctx=Store()), iter=Subscript(value=Call(func=Attribute(value=Name(id='vocab_bpe_contents', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='\n')], keywords=[]), slice=Slice(lower=Constant(value=1), upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), ifs=[], is_async=0)])), FunctionDef(name='decode_data_gym', args=arguments(posonlyargs=[], args=[arg(arg='value', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='bytes', ctx=Load()), args=[GeneratorExp(elt=Subscript(value=Name(id='data_gym_byte_to_byte', ctx=Load()), slice=Name(id='b', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='b', ctx=Store()), iter=Name(id='value', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='bytes', ctx=Load())), Assign(targets=[Name(id='bpe_ranks', ctx=Store())], value=DictComp(key=Call(func=Name(id='bytes', ctx=Load()), args=[List(elts=[Name(id='b', ctx=Load())], ctx=Load())], keywords=[]), value=Name(id='i', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='b', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='rank_to_intbyte', ctx=Load())], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='n', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='bpe_ranks', ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='first', ctx=Store()), Name(id='second', ctx=Store())], ctx=Store()), iter=Name(id='bpe_merges', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='bpe_ranks', ctx=Load()), slice=BinOp(left=Call(func=Name(id='decode_data_gym', ctx=Load()), args=[Name(id='first', ctx=Load())], keywords=[]), op=Add(), right=Call(func=Name(id='decode_data_gym', ctx=Load()), args=[Name(id='second', ctx=Load())], keywords=[])), ctx=Store())], value=Name(id='n', ctx=Load())), AugAssign(target=Name(id='n', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='encoder_json', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='loads', ctx=Load()), args=[Call(func=Name(id='read_file_cached', ctx=Load()), args=[Name(id='encoder_json_file', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='encoder_json_loaded', ctx=Store())], value=DictComp(key=Call(func=Name(id='decode_data_gym', ctx=Load()), args=[Name(id='k', ctx=Load())], keywords=[]), value=Name(id='v', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='encoder_json', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='encoder_json_loaded', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value=b'<|endoftext|>'), Constant(value=None)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='encoder_json_loaded', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value=b'<|startoftext|>'), Constant(value=None)], keywords=[])), Assert(test=Compare(left=Name(id='bpe_ranks', ctx=Load()), ops=[Eq()], comparators=[Name(id='encoder_json_loaded', ctx=Load())])), Return(value=Name(id='bpe_ranks', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Name(id='bytes', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='dump_tiktoken_bpe', args=arguments(posonlyargs=[], args=[arg(arg='bpe_ranks', annotation=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Name(id='bytes', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='tiktoken_bpe_file', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Import(names=[alias(name='blobfile')])], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='ImportError', ctx=Load()), args=[Constant(value='blobfile is not installed. Please install it by running `pip install blobfile`.')], keywords=[]), cause=Name(id='e', ctx=Load()))])], orelse=[], finalbody=[]), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='blobfile', ctx=Load()), attr='BlobFile', ctx=Load()), args=[Name(id='tiktoken_bpe_file', ctx=Load()), Constant(value='wb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[For(target=Tuple(elts=[Name(id='token', ctx=Store()), Name(id='rank', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Attribute(value=Name(id='bpe_ranks', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[keyword(arg='key', value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Subscript(value=Name(id='x', ctx=Load()), slice=Constant(value=1), ctx=Load())))]), body=[Expr(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='write', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='base64', ctx=Load()), attr='b64encode', ctx=Load()), args=[Name(id='token', ctx=Load())], keywords=[]), op=Add(), right=Constant(value=b' ')), op=Add(), right=Call(func=Attribute(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='rank', ctx=Load())], keywords=[]), attr='encode', ctx=Load()), args=[], keywords=[])), op=Add(), right=Constant(value=b'\n'))], keywords=[]))], orelse=[])])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='load_tiktoken_bpe', args=arguments(posonlyargs=[], args=[arg(arg='tiktoken_bpe_file', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='contents', ctx=Store())], value=Call(func=Name(id='read_file_cached', ctx=Load()), args=[Name(id='tiktoken_bpe_file', ctx=Load())], keywords=[])), Return(value=DictComp(key=Call(func=Attribute(value=Name(id='base64', ctx=Load()), attr='b64decode', ctx=Load()), args=[Name(id='token', ctx=Load())], keywords=[]), value=Call(func=Name(id='int', ctx=Load()), args=[Name(id='rank', ctx=Load())], keywords=[]), generators=[comprehension(target=Tuple(elts=[Name(id='token', ctx=Store()), Name(id='rank', ctx=Store())], ctx=Store()), iter=GeneratorExp(elt=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[]), generators=[comprehension(target=Name(id='line', ctx=Store()), iter=Call(func=Attribute(value=Name(id='contents', ctx=Load()), attr='splitlines', ctx=Load()), args=[], keywords=[]), ifs=[Name(id='line', ctx=Load())], is_async=0)]), ifs=[], is_async=0)]))], decorator_list=[], returns=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Name(id='bytes', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()))], type_ignores=[])