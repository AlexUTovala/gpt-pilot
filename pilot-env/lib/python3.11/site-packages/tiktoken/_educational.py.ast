Module(body=[Expr(value=Constant(value='This is an educational implementation of the byte pair encoding algorithm.')), Import(names=[alias(name='collections')]), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), Import(names=[alias(name='regex')]), Import(names=[alias(name='tiktoken')]), ClassDef(name='SimpleBytePairEncoding', bases=[], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[arg(arg='pat_str', annotation=Name(id='str', ctx=Load())), arg(arg='mergeable_ranks', annotation=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Name(id='bytes', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()))], kw_defaults=[None, None], defaults=[]), body=[Expr(value=Constant(value='Creates an Encoding object.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='pat_str', ctx=Store())], value=Name(id='pat_str', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='mergeable_ranks', ctx=Store())], value=Name(id='mergeable_ranks', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_decoder', ctx=Store())], value=DictComp(key=Name(id='token', ctx=Load()), value=Name(id='token_bytes', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='token_bytes', ctx=Store()), Name(id='token', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='mergeable_ranks', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_pat', ctx=Store())], value=Call(func=Attribute(value=Name(id='regex', ctx=Load()), attr='compile', ctx=Load()), args=[Name(id='pat_str', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='encode', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='text', annotation=Name(id='str', ctx=Load())), arg(arg='visualise', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='colour')]), body=[Expr(value=Constant(value='Encodes a string into tokens.\n\n        >>> enc.encode("hello world")\n        [388, 372]\n        ')), Assign(targets=[Name(id='words', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_pat', ctx=Load()), attr='findall', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[])), Assign(targets=[Name(id='tokens', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='word', ctx=Store()), iter=Name(id='words', ctx=Load()), body=[Assign(targets=[Name(id='word_bytes', ctx=Store())], value=Call(func=Attribute(value=Name(id='word', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[])), Assign(targets=[Name(id='word_tokens', ctx=Store())], value=Call(func=Name(id='bpe_encode', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='mergeable_ranks', ctx=Load()), Name(id='word_bytes', ctx=Load())], keywords=[keyword(arg='visualise', value=Name(id='visualise', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='tokens', ctx=Load()), attr='extend', ctx=Load()), args=[Name(id='word_tokens', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='tokens', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), FunctionDef(name='decode_bytes', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='tokens', annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Decodes a list of tokens into bytes.\n\n        >>> enc.decode_bytes([388, 372])\n        b'hello world'\n        ")), Return(value=Call(func=Attribute(value=Constant(value=b''), attr='join', ctx=Load()), args=[GeneratorExp(elt=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_decoder', ctx=Load()), slice=Name(id='token', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='token', ctx=Store()), iter=Name(id='tokens', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='bytes', ctx=Load())), FunctionDef(name='decode', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='tokens', annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Decodes a list of tokens into a string.\n\n        Decoded bytes are not guaranteed to be valid UTF-8. In that case, we replace\n        the invalid bytes with the replacement character "ï¿½".\n\n        >>> enc.decode([388, 372])\n        \'hello world\'\n        ')), Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='decode_bytes', ctx=Load()), args=[Name(id='tokens', ctx=Load())], keywords=[]), attr='decode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[keyword(arg='errors', value=Constant(value='replace'))]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='decode_tokens_bytes', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='tokens', annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Decodes a list of tokens into a list of bytes.\n\n        Useful for visualising how a string is tokenised.\n\n        >>> enc.decode_tokens_bytes([388, 372])\n        [b'hello', b' world']\n        ")), Return(value=ListComp(elt=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_decoder', ctx=Load()), slice=Name(id='token', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='token', ctx=Store()), iter=Name(id='tokens', ctx=Load()), ifs=[], is_async=0)]))], decorator_list=[], returns=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='bytes', ctx=Load()), ctx=Load())), FunctionDef(name='train', args=arguments(posonlyargs=[], args=[arg(arg='training_data', annotation=Name(id='str', ctx=Load())), arg(arg='vocab_size', annotation=Name(id='int', ctx=Load())), arg(arg='pat_str', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Train a BPE tokeniser on some data!')), Assign(targets=[Name(id='mergeable_ranks', ctx=Store())], value=Call(func=Name(id='bpe_train', ctx=Load()), args=[], keywords=[keyword(arg='data', value=Name(id='training_data', ctx=Load())), keyword(arg='vocab_size', value=Name(id='vocab_size', ctx=Load())), keyword(arg='pat_str', value=Name(id='pat_str', ctx=Load()))])), Return(value=Call(func=Name(id='SimpleBytePairEncoding', ctx=Load()), args=[], keywords=[keyword(arg='pat_str', value=Name(id='pat_str', ctx=Load())), keyword(arg='mergeable_ranks', value=Name(id='mergeable_ranks', ctx=Load()))]))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='from_tiktoken', args=arguments(posonlyargs=[], args=[arg(arg='encoding')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='encoding', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='encoding', ctx=Store())], value=Call(func=Attribute(value=Name(id='tiktoken', ctx=Load()), attr='get_encoding', ctx=Load()), args=[Name(id='encoding', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='SimpleBytePairEncoding', ctx=Load()), args=[], keywords=[keyword(arg='pat_str', value=Attribute(value=Name(id='encoding', ctx=Load()), attr='_pat_str', ctx=Load())), keyword(arg='mergeable_ranks', value=Attribute(value=Name(id='encoding', ctx=Load()), attr='_mergeable_ranks', ctx=Load()))]))], decorator_list=[Name(id='staticmethod', ctx=Load())])], decorator_list=[]), FunctionDef(name='bpe_encode', args=arguments(posonlyargs=[], args=[arg(arg='mergeable_ranks', annotation=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Name(id='bytes', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='input', annotation=Name(id='bytes', ctx=Load())), arg(arg='visualise', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='colour')]), body=[Assign(targets=[Name(id='parts', ctx=Store())], value=ListComp(elt=Call(func=Name(id='bytes', ctx=Load()), args=[List(elts=[Name(id='b', ctx=Load())], ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='b', ctx=Store()), iter=Name(id='input', ctx=Load()), ifs=[], is_async=0)])), While(test=Constant(value=True), body=[If(test=Name(id='visualise', ctx=Load()), body=[If(test=Compare(left=Name(id='visualise', ctx=Load()), ops=[In()], comparators=[List(elts=[Constant(value='colour'), Constant(value='color')], ctx=Load())]), body=[Expr(value=Call(func=Name(id='visualise_tokens', ctx=Load()), args=[Name(id='parts', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='visualise', ctx=Load()), ops=[Eq()], comparators=[Constant(value='simple')]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='parts', ctx=Load())], keywords=[]))], orelse=[])])], orelse=[]), Assign(targets=[Name(id='min_idx', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='min_rank', ctx=Store())], value=Constant(value=None)), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='pair', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Call(func=Name(id='zip', ctx=Load()), args=[Subscript(value=Name(id='parts', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), Subscript(value=Name(id='parts', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='rank', ctx=Store())], value=Call(func=Attribute(value=Name(id='mergeable_ranks', ctx=Load()), attr='get', ctx=Load()), args=[BinOp(left=Subscript(value=Name(id='pair', ctx=Load()), slice=Constant(value=0), ctx=Load()), op=Add(), right=Subscript(value=Name(id='pair', ctx=Load()), slice=Constant(value=1), ctx=Load()))], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='rank', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), BoolOp(op=Or(), values=[Compare(left=Name(id='min_rank', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Name(id='rank', ctx=Load()), ops=[Lt()], comparators=[Name(id='min_rank', ctx=Load())])])]), body=[Assign(targets=[Name(id='min_idx', ctx=Store())], value=Name(id='i', ctx=Load())), Assign(targets=[Name(id='min_rank', ctx=Store())], value=Name(id='rank', ctx=Load()))], orelse=[])], orelse=[]), If(test=Compare(left=Name(id='min_rank', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Break()], orelse=[]), Assert(test=Compare(left=Name(id='min_idx', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Name(id='parts', ctx=Store())], value=BinOp(left=BinOp(left=Subscript(value=Name(id='parts', ctx=Load()), slice=Slice(upper=Name(id='min_idx', ctx=Load())), ctx=Load()), op=Add(), right=List(elts=[BinOp(left=Subscript(value=Name(id='parts', ctx=Load()), slice=Name(id='min_idx', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='parts', ctx=Load()), slice=BinOp(left=Name(id='min_idx', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load()))], ctx=Load())), op=Add(), right=Subscript(value=Name(id='parts', ctx=Load()), slice=Slice(lower=BinOp(left=Name(id='min_idx', ctx=Load()), op=Add(), right=Constant(value=2))), ctx=Load())))], orelse=[]), If(test=Name(id='visualise', ctx=Load()), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='tokens', ctx=Store())], value=ListComp(elt=Subscript(value=Name(id='mergeable_ranks', ctx=Load()), slice=Name(id='part', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='part', ctx=Store()), iter=Name(id='parts', ctx=Load()), ifs=[], is_async=0)])), Return(value=Name(id='tokens', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), FunctionDef(name='bpe_train', args=arguments(posonlyargs=[], args=[arg(arg='data', annotation=Name(id='str', ctx=Load())), arg(arg='vocab_size', annotation=Name(id='int', ctx=Load())), arg(arg='pat_str', annotation=Name(id='str', ctx=Load())), arg(arg='visualise', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='colour')]), body=[If(test=Compare(left=Name(id='vocab_size', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Constant(value=2), op=Pow(), right=Constant(value=8))]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='vocab_size must be at least 256, so we can encode all bytes')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='ranks', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[BinOp(left=Constant(value=2), op=Pow(), right=Constant(value=8))], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='ranks', ctx=Load()), slice=Call(func=Name(id='bytes', ctx=Load()), args=[List(elts=[Name(id='i', ctx=Load())], ctx=Load())], keywords=[]), ctx=Store())], value=Name(id='i', ctx=Load()))], orelse=[]), AnnAssign(target=Name(id='words', ctx=Store()), annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='bytes', ctx=Load()), ctx=Load()), ctx=Load()), value=ListComp(elt=ListComp(elt=Call(func=Name(id='bytes', ctx=Load()), args=[List(elts=[Name(id='b', ctx=Load())], ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='b', ctx=Store()), iter=Call(func=Attribute(value=Name(id='word', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[]), ifs=[], is_async=0)]), generators=[comprehension(target=Name(id='word', ctx=Store()), iter=Call(func=Attribute(value=Name(id='regex', ctx=Load()), attr='findall', ctx=Load()), args=[Name(id='pat_str', ctx=Load()), Name(id='data', ctx=Load())], keywords=[]), ifs=[], is_async=0)]), simple=1), While(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='ranks', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Name(id='vocab_size', ctx=Load())]), body=[Assign(targets=[Name(id='stats', ctx=Store())], value=Call(func=Attribute(value=Name(id='collections', ctx=Load()), attr='Counter', ctx=Load()), args=[], keywords=[])), For(target=Name(id='piece', ctx=Store()), iter=Name(id='words', ctx=Load()), body=[For(target=Name(id='pair', ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Subscript(value=Name(id='piece', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), Subscript(value=Name(id='piece', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), body=[AugAssign(target=Subscript(value=Name(id='stats', ctx=Load()), slice=Name(id='pair', ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], orelse=[]), Assign(targets=[Name(id='most_common_pair', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Name(id='stats', ctx=Load())], keywords=[keyword(arg='key', value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Subscript(value=Name(id='stats', ctx=Load()), slice=Name(id='x', ctx=Load()), ctx=Load())))])), Assign(targets=[Name(id='token_bytes', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='most_common_pair', ctx=Load()), slice=Constant(value=0), ctx=Load()), op=Add(), right=Subscript(value=Name(id='most_common_pair', ctx=Load()), slice=Constant(value=1), ctx=Load()))), Assign(targets=[Name(id='token', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='ranks', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='ranks', ctx=Load()), slice=Name(id='token_bytes', ctx=Load()), ctx=Store())], value=Name(id='token', ctx=Load())), Assign(targets=[Name(id='new_words', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='word', ctx=Store()), iter=Name(id='words', ctx=Load()), body=[Assign(targets=[Name(id='new_word', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='i', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='i', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='word', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))]), body=[If(test=Compare(left=Tuple(elts=[Subscript(value=Name(id='word', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), Subscript(value=Name(id='word', ctx=Load()), slice=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())], ctx=Load()), ops=[Eq()], comparators=[Name(id='most_common_pair', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='new_word', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='token_bytes', ctx=Load())], keywords=[])), AugAssign(target=Name(id='i', ctx=Store()), op=Add(), value=Constant(value=2))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='new_word', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='word', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())], keywords=[])), AugAssign(target=Name(id='i', ctx=Store()), op=Add(), value=Constant(value=1))])], orelse=[]), If(test=Compare(left=Name(id='i', ctx=Load()), ops=[Eq()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='word', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))]), body=[Expr(value=Call(func=Attribute(value=Name(id='new_word', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='word', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='new_words', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='new_word', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='words', ctx=Store())], value=Name(id='new_words', ctx=Load())), If(test=Name(id='visualise', ctx=Load()), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[JoinedStr(values=[Constant(value='The current most common pair is '), FormattedValue(value=Subscript(value=Name(id='most_common_pair', ctx=Load()), slice=Constant(value=0), ctx=Load()), conversion=-1), Constant(value=' + '), FormattedValue(value=Subscript(value=Name(id='most_common_pair', ctx=Load()), slice=Constant(value=1), ctx=Load()), conversion=-1)])], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[JoinedStr(values=[Constant(value='So we made '), FormattedValue(value=Name(id='token_bytes', ctx=Load()), conversion=-1), Constant(value=' our '), FormattedValue(value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='ranks', ctx=Load())], keywords=[]), conversion=-1), Constant(value='th token')])], keywords=[])), If(test=Compare(left=Name(id='visualise', ctx=Load()), ops=[In()], comparators=[List(elts=[Constant(value='colour'), Constant(value='color')], ctx=Load())]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='Now the first fifty words in our training data look like:')], keywords=[])), Expr(value=Call(func=Name(id='visualise_tokens', ctx=Load()), args=[ListComp(elt=Name(id='token', ctx=Load()), generators=[comprehension(target=Name(id='word', ctx=Store()), iter=Subscript(value=Name(id='words', ctx=Load()), slice=Slice(upper=Constant(value=50)), ctx=Load()), ifs=[], is_async=0), comprehension(target=Name(id='token', ctx=Store()), iter=Name(id='word', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], orelse=[If(test=Compare(left=Name(id='visualise', ctx=Load()), ops=[Eq()], comparators=[Constant(value='simple')]), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='Now the first twenty words in our training data look like:')], keywords=[])), For(target=Name(id='word', ctx=Store()), iter=Subscript(value=Name(id='words', ctx=Load()), slice=Slice(upper=Constant(value=20)), ctx=Load()), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='word', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='\n')], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='ranks', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Name(id='bytes', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='visualise_tokens', args=arguments(posonlyargs=[], args=[arg(arg='token_values', annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='bytes', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='background', ctx=Store())], value=ListComp(elt=JoinedStr(values=[Constant(value='\x1b[48;5;'), FormattedValue(value=Name(id='i', ctx=Load()), conversion=-1), Constant(value='m')]), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=List(elts=[Constant(value=167), Constant(value=179), Constant(value=185), Constant(value=77), Constant(value=80), Constant(value=68), Constant(value=134)], ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='unicode_token_values', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[keyword(arg='errors', value=Constant(value='replace'))]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='token_values', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='running_length', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='last_color', ctx=Store())], value=Constant(value=None)), For(target=Name(id='token', ctx=Store()), iter=Name(id='unicode_token_values', ctx=Load()), body=[Assign(targets=[Name(id='color', ctx=Store())], value=Subscript(value=Name(id='background', ctx=Load()), slice=BinOp(left=Name(id='running_length', ctx=Load()), op=Mod(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='background', ctx=Load())], keywords=[])), ctx=Load())), If(test=Compare(left=Name(id='color', ctx=Load()), ops=[Eq()], comparators=[Name(id='last_color', ctx=Load())]), body=[Assign(targets=[Name(id='color', ctx=Store())], value=Subscript(value=Name(id='background', ctx=Load()), slice=BinOp(left=BinOp(left=Name(id='running_length', ctx=Load()), op=Add(), right=Constant(value=1)), op=Mod(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='background', ctx=Load())], keywords=[])), ctx=Load())), Assert(test=Compare(left=Name(id='color', ctx=Load()), ops=[NotEq()], comparators=[Name(id='last_color', ctx=Load())]))], orelse=[]), Assign(targets=[Name(id='last_color', ctx=Store())], value=Name(id='color', ctx=Load())), AugAssign(target=Name(id='running_length', ctx=Store()), op=Add(), value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='token', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[BinOp(left=Name(id='color', ctx=Load()), op=Add(), right=Name(id='token', ctx=Load()))], keywords=[keyword(arg='end', value=Constant(value=''))]))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='\x1b[0m')], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='train_simple_encoding', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='gpt2_pattern', ctx=Store())], value=Constant(value="'s|'t|'re|'ve|'m|'ll|'d| ?[\\p{L}]+| ?[\\p{N}]+| ?[^\\s\\p{L}\\p{N}]+|\\s+(?!\\S)|\\s+")), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='__file__', ctx=Load()), Constant(value='r')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]))]), Assign(targets=[Name(id='enc', ctx=Store())], value=Call(func=Attribute(value=Name(id='SimpleBytePairEncoding', ctx=Load()), attr='train', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[keyword(arg='vocab_size', value=Constant(value=600)), keyword(arg='pat_str', value=Name(id='gpt2_pattern', ctx=Load()))])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value="This is the sequence of merges performed in order to encode 'hello world':")], keywords=[])), Assign(targets=[Name(id='tokens', ctx=Store())], value=Call(func=Attribute(value=Name(id='enc', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='hello world')], keywords=[])), Assert(test=Compare(left=Call(func=Attribute(value=Name(id='enc', ctx=Load()), attr='decode', ctx=Load()), args=[Name(id='tokens', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value='hello world')])), Assert(test=Compare(left=Call(func=Attribute(value=Name(id='enc', ctx=Load()), attr='decode_bytes', ctx=Load()), args=[Name(id='tokens', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=b'hello world')])), Assert(test=Compare(left=Call(func=Attribute(value=Name(id='enc', ctx=Load()), attr='decode_tokens_bytes', ctx=Load()), args=[Name(id='tokens', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[List(elts=[Constant(value=b'hello'), Constant(value=b' world')], ctx=Load())])), Return(value=Name(id='enc', ctx=Load()))], decorator_list=[])], type_ignores=[])