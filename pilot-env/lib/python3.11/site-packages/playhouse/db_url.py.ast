Module(body=[Try(body=[ImportFrom(module='urlparse', names=[alias(name='parse_qsl'), alias(name='unquote'), alias(name='urlparse')], level=0)], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[ImportFrom(module='urllib.parse', names=[alias(name='parse_qsl'), alias(name='unquote'), alias(name='urlparse')], level=0)])], orelse=[], finalbody=[]), ImportFrom(module='peewee', names=[alias(name='*')], level=0), ImportFrom(module='playhouse.cockroachdb', names=[alias(name='CockroachDatabase')], level=0), ImportFrom(module='playhouse.cockroachdb', names=[alias(name='PooledCockroachDatabase')], level=0), ImportFrom(module='playhouse.pool', names=[alias(name='PooledMySQLDatabase')], level=0), ImportFrom(module='playhouse.pool', names=[alias(name='PooledPostgresqlDatabase')], level=0), ImportFrom(module='playhouse.pool', names=[alias(name='PooledSqliteDatabase')], level=0), ImportFrom(module='playhouse.pool', names=[alias(name='PooledSqliteExtDatabase')], level=0), ImportFrom(module='playhouse.sqlite_ext', names=[alias(name='SqliteExtDatabase')], level=0), Assign(targets=[Name(id='schemes', ctx=Store())], value=Dict(keys=[Constant(value='cockroachdb'), Constant(value='cockroachdb+pool'), Constant(value='crdb'), Constant(value='crdb+pool'), Constant(value='mysql'), Constant(value='mysql+pool'), Constant(value='postgres'), Constant(value='postgresql'), Constant(value='postgres+pool'), Constant(value='postgresql+pool'), Constant(value='sqlite'), Constant(value='sqliteext'), Constant(value='sqlite+pool'), Constant(value='sqliteext+pool')], values=[Name(id='CockroachDatabase', ctx=Load()), Name(id='PooledCockroachDatabase', ctx=Load()), Name(id='CockroachDatabase', ctx=Load()), Name(id='PooledCockroachDatabase', ctx=Load()), Name(id='MySQLDatabase', ctx=Load()), Name(id='PooledMySQLDatabase', ctx=Load()), Name(id='PostgresqlDatabase', ctx=Load()), Name(id='PostgresqlDatabase', ctx=Load()), Name(id='PooledPostgresqlDatabase', ctx=Load()), Name(id='PooledPostgresqlDatabase', ctx=Load()), Name(id='SqliteDatabase', ctx=Load()), Name(id='SqliteExtDatabase', ctx=Load()), Name(id='PooledSqliteDatabase', ctx=Load()), Name(id='PooledSqliteExtDatabase', ctx=Load())])), FunctionDef(name='register_database', args=arguments(posonlyargs=[], args=[arg(arg='db_class')], vararg=arg(arg='names'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Global(names=['schemes']), For(target=Name(id='name', ctx=Store()), iter=Name(id='names', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='schemes', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Name(id='db_class', ctx=Load()))], orelse=[])], decorator_list=[]), FunctionDef(name='parseresult_to_dict', args=arguments(posonlyargs=[], args=[arg(arg='parsed'), arg(arg='unquote_password')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Assign(targets=[Name(id='path_parts', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='parsed', ctx=Load()), attr='path', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='?')], keywords=[])), Try(body=[Assign(targets=[Name(id='query', ctx=Store())], value=Subscript(value=Name(id='path_parts', ctx=Load()), slice=Constant(value=1), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='IndexError', ctx=Load()), body=[Assign(targets=[Name(id='query', ctx=Store())], value=Attribute(value=Name(id='parsed', ctx=Load()), attr='query', ctx=Load()))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='connect_kwargs', ctx=Store())], value=Dict(keys=[Constant(value='database')], values=[Subscript(value=Name(id='path_parts', ctx=Load()), slice=Constant(value=0), ctx=Load())])), If(test=Attribute(value=Name(id='parsed', ctx=Load()), attr='username', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='connect_kwargs', ctx=Load()), slice=Constant(value='user'), ctx=Store())], value=Attribute(value=Name(id='parsed', ctx=Load()), attr='username', ctx=Load()))], orelse=[]), If(test=Attribute(value=Name(id='parsed', ctx=Load()), attr='password', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='connect_kwargs', ctx=Load()), slice=Constant(value='password'), ctx=Store())], value=Attribute(value=Name(id='parsed', ctx=Load()), attr='password', ctx=Load())), If(test=Name(id='unquote_password', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='connect_kwargs', ctx=Load()), slice=Constant(value='password'), ctx=Store())], value=Call(func=Name(id='unquote', ctx=Load()), args=[Subscript(value=Name(id='connect_kwargs', ctx=Load()), slice=Constant(value='password'), ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), If(test=Attribute(value=Name(id='parsed', ctx=Load()), attr='hostname', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='connect_kwargs', ctx=Load()), slice=Constant(value='host'), ctx=Store())], value=Attribute(value=Name(id='parsed', ctx=Load()), attr='hostname', ctx=Load()))], orelse=[]), If(test=Attribute(value=Name(id='parsed', ctx=Load()), attr='port', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='connect_kwargs', ctx=Load()), slice=Constant(value='port'), ctx=Store())], value=Attribute(value=Name(id='parsed', ctx=Load()), attr='port', ctx=Load()))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='parsed', ctx=Load()), attr='scheme', ctx=Load()), ops=[Eq()], comparators=[Constant(value='mysql')]), Compare(left=Constant(value='password'), ops=[In()], comparators=[Name(id='connect_kwargs', ctx=Load())])]), body=[Assign(targets=[Subscript(value=Name(id='connect_kwargs', ctx=Load()), slice=Constant(value='passwd'), ctx=Store())], value=Call(func=Attribute(value=Name(id='connect_kwargs', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='password')], keywords=[]))], orelse=[If(test=BoolOp(op=And(), values=[Compare(left=Constant(value='sqlite'), ops=[In()], comparators=[Attribute(value=Name(id='parsed', ctx=Load()), attr='scheme', ctx=Load())]), UnaryOp(op=Not(), operand=Subscript(value=Name(id='connect_kwargs', ctx=Load()), slice=Constant(value='database'), ctx=Load()))]), body=[Assign(targets=[Subscript(value=Name(id='connect_kwargs', ctx=Load()), slice=Constant(value='database'), ctx=Store())], value=Constant(value=':memory:'))], orelse=[])]), Assign(targets=[Name(id='qs_args', ctx=Store())], value=Call(func=Name(id='parse_qsl', ctx=Load()), args=[Name(id='query', ctx=Load())], keywords=[keyword(arg='keep_blank_values', value=Constant(value=True))])), For(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Name(id='qs_args', ctx=Load()), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Constant(value='false')]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Constant(value=False))], orelse=[If(test=Compare(left=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Constant(value='true')]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Constant(value=True))], orelse=[If(test=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='isdigit', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], orelse=[If(test=BoolOp(op=And(), values=[Compare(left=Constant(value='.'), ops=[In()], comparators=[Name(id='value', ctx=Load())]), Call(func=Name(id='all', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='isdigit', ctx=Load()), args=[], keywords=[]), generators=[comprehension(target=Name(id='p', ctx=Store()), iter=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='.'), Constant(value=1)], keywords=[]), ifs=[], is_async=0)])], keywords=[])]), body=[Try(body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Name(id='float', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], orelse=[If(test=Compare(left=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), ops=[In()], comparators=[Tuple(elts=[Constant(value='null'), Constant(value='none')], ctx=Load())]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Constant(value=None))], orelse=[])])])])]), Assign(targets=[Subscript(value=Name(id='connect_kwargs', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Name(id='value', ctx=Load()))], orelse=[]), Return(value=Name(id='connect_kwargs', ctx=Load()))], decorator_list=[]), FunctionDef(name='parse', args=arguments(posonlyargs=[], args=[arg(arg='url'), arg(arg='unquote_password')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Assign(targets=[Name(id='parsed', ctx=Store())], value=Call(func=Name(id='urlparse', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='parseresult_to_dict', ctx=Load()), args=[Name(id='parsed', ctx=Load()), Name(id='unquote_password', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='connect', args=arguments(posonlyargs=[], args=[arg(arg='url'), arg(arg='unquote_password')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='connect_params'), defaults=[Constant(value=False)]), body=[Assign(targets=[Name(id='parsed', ctx=Store())], value=Call(func=Name(id='urlparse', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[])), Assign(targets=[Name(id='connect_kwargs', ctx=Store())], value=Call(func=Name(id='parseresult_to_dict', ctx=Load()), args=[Name(id='parsed', ctx=Load()), Name(id='unquote_password', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='connect_kwargs', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='connect_params', ctx=Load())], keywords=[])), Assign(targets=[Name(id='database_class', ctx=Store())], value=Call(func=Attribute(value=Name(id='schemes', ctx=Load()), attr='get', ctx=Load()), args=[Attribute(value=Name(id='parsed', ctx=Load()), attr='scheme', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='database_class', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='database_class', ctx=Load()), ops=[In()], comparators=[Name(id='schemes', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='RuntimeError', ctx=Load()), args=[BinOp(left=Constant(value='Attempted to use "%s" but a required library could not be imported.'), op=Mod(), right=Attribute(value=Name(id='parsed', ctx=Load()), attr='scheme', ctx=Load()))], keywords=[]))], orelse=[Raise(exc=Call(func=Name(id='RuntimeError', ctx=Load()), args=[BinOp(left=Constant(value='Unrecognized or unsupported scheme: "%s".'), op=Mod(), right=Attribute(value=Name(id='parsed', ctx=Load()), attr='scheme', ctx=Load()))], keywords=[]))])], orelse=[]), Return(value=Call(func=Name(id='database_class', ctx=Load()), args=[], keywords=[keyword(value=Name(id='connect_kwargs', ctx=Load()))]))], decorator_list=[]), Try(body=[ImportFrom(module='playhouse.pool', names=[alias(name='PooledPostgresqlExtDatabase')], level=0)], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Pass()])], orelse=[Expr(value=Call(func=Name(id='register_database', ctx=Load()), args=[Name(id='PooledPostgresqlExtDatabase', ctx=Load()), Constant(value='postgresext+pool'), Constant(value='postgresqlext+pool')], keywords=[]))], finalbody=[]), Try(body=[ImportFrom(module='playhouse.apsw_ext', names=[alias(name='APSWDatabase')], level=0)], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Pass()])], orelse=[Expr(value=Call(func=Name(id='register_database', ctx=Load()), args=[Name(id='APSWDatabase', ctx=Load()), Constant(value='apsw')], keywords=[]))], finalbody=[]), Try(body=[ImportFrom(module='playhouse.postgres_ext', names=[alias(name='PostgresqlExtDatabase')], level=0)], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Pass()])], orelse=[Expr(value=Call(func=Name(id='register_database', ctx=Load()), args=[Name(id='PostgresqlExtDatabase', ctx=Load()), Constant(value='postgresext'), Constant(value='postgresqlext')], keywords=[]))], finalbody=[])], type_ignores=[])