Module(body=[Import(names=[alias(name='functools')]), Import(names=[alias(name='re')]), Import(names=[alias(name='sys')]), ImportFrom(module='peewee', names=[alias(name='*')], level=0), ImportFrom(module='peewee', names=[alias(name='_atomic')], level=0), ImportFrom(module='peewee', names=[alias(name='_manual')], level=0), ImportFrom(module='peewee', names=[alias(name='ColumnMetadata')], level=0), ImportFrom(module='peewee', names=[alias(name='EnclosedNodeList')], level=0), ImportFrom(module='peewee', names=[alias(name='Entity')], level=0), ImportFrom(module='peewee', names=[alias(name='ForeignKeyMetadata')], level=0), ImportFrom(module='peewee', names=[alias(name='IndexMetadata')], level=0), ImportFrom(module='peewee', names=[alias(name='NodeList')], level=0), ImportFrom(module='playhouse.pool', names=[alias(name='_PooledPostgresqlDatabase')], level=0), Try(body=[ImportFrom(module='playhouse.postgres_ext', names=[alias(name='ArrayField')], level=0), ImportFrom(module='playhouse.postgres_ext', names=[alias(name='BinaryJSONField')], level=0), ImportFrom(module='playhouse.postgres_ext', names=[alias(name='IntervalField')], level=0), Assign(targets=[Name(id='JSONField', ctx=Store())], value=Name(id='BinaryJSONField', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Assign(targets=[Name(id='ArrayField', ctx=Store()), Name(id='BinaryJSONField', ctx=Store()), Name(id='IntervalField', ctx=Store()), Name(id='JSONField', ctx=Store())], value=Constant(value=None))])], orelse=[], finalbody=[]), If(test=Compare(left=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Constant(value=2)]), body=[Assign(targets=[Name(id='basestring', ctx=Store())], value=Name(id='str', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='NESTED_TX_MIN_VERSION', ctx=Store())], value=Constant(value=200100)), Assign(targets=[Name(id='TXN_ERR_MSG', ctx=Store())], value=Constant(value='CockroachDB does not support nested transactions. You may alternatively use the @transaction context-manager/decorator, which only wraps the outer-most block in transactional logic. To run a transaction with automatic retries, use the run_transaction() helper.')), ClassDef(name='ExceededMaxAttempts', bases=[Name(id='OperationalError', ctx=Load())], keywords=[], body=[Pass()], decorator_list=[]), ClassDef(name='UUIDKeyField', bases=[Name(id='UUIDField', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='auto_increment', ctx=Store())], value=Constant(value=True)), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[If(test=Call(func=Attribute(value=Name(id='kwargs', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='constraints')], keywords=[]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='%s cannot specify constraints.'), op=Mod(), right=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]))], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='kwargs', ctx=Load()), slice=Constant(value='constraints'), ctx=Store())], value=List(elts=[Call(func=Name(id='SQL', ctx=Load()), args=[Constant(value='DEFAULT gen_random_uuid()')], keywords=[])], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='kwargs', ctx=Load()), attr='setdefault', ctx=Load()), args=[Constant(value='primary_key'), Constant(value=True)], keywords=[])), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[Name(id='UUIDKeyField', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]), attr='__init__', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[])], decorator_list=[]), ClassDef(name='RowIDField', bases=[Name(id='AutoField', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='field_type', ctx=Store())], value=Constant(value='INT')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[If(test=Call(func=Attribute(value=Name(id='kwargs', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='constraints')], keywords=[]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='%s cannot specify constraints.'), op=Mod(), right=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]))], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='kwargs', ctx=Load()), slice=Constant(value='constraints'), ctx=Store())], value=List(elts=[Call(func=Name(id='SQL', ctx=Load()), args=[Constant(value='DEFAULT unique_rowid()')], keywords=[])], ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[Name(id='RowIDField', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]), attr='__init__', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[])], decorator_list=[]), ClassDef(name='CockroachDatabase', bases=[Name(id='PostgresqlDatabase', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='field_types', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='PostgresqlDatabase', ctx=Load()), attr='field_types', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='field_types', ctx=Load()), attr='update', ctx=Load()), args=[Dict(keys=[Constant(value='BLOB')], values=[Constant(value='BYTES')])], keywords=[])), Assign(targets=[Name(id='release_after_rollback', ctx=Store())], value=Constant(value=True)), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='database')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Constant(value='dsn'), ops=[NotIn()], comparators=[Name(id='kwargs', ctx=Load())]), BoolOp(op=And(), values=[Name(id='database', ctx=Load()), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='database', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='postgresql://')], keywords=[]))])]), body=[Expr(value=Call(func=Attribute(value=Name(id='kwargs', ctx=Load()), attr='setdefault', ctx=Load()), args=[Constant(value='user'), Constant(value='root')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='kwargs', ctx=Load()), attr='setdefault', ctx=Load()), args=[Constant(value='port'), Constant(value=26257)], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[Name(id='CockroachDatabase', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]), attr='__init__', ctx=Load()), args=[Name(id='database', ctx=Load()), Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='_set_server_version', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='conn')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='curs', ctx=Store())], value=Call(func=Attribute(value=Name(id='conn', ctx=Load()), attr='cursor', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='curs', ctx=Load()), attr='execute', ctx=Load()), args=[Constant(value='select version()')], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='raw', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='curs', ctx=Load()), attr='fetchone', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='match_obj', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='match', ctx=Load()), args=[Constant(value='^CockroachDB.+?v(\\d+)\\.(\\d+)\\.(\\d+)'), Name(id='raw', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='match_obj', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='clean', ctx=Store())], value=BinOp(left=Constant(value='%d%02d%02d'), op=Mod(), right=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='int', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Attribute(value=Name(id='match_obj', ctx=Load()), attr='groups', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[]))), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='server_version', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Name(id='clean', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[Name(id='CockroachDatabase', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]), attr='_set_server_version', ctx=Load()), args=[Name(id='conn', ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='_get_pk_constraint', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='table'), arg(arg='schema')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Name(id='query', ctx=Store())], value=Constant(value='SELECT constraint_name FROM information_schema.table_constraints WHERE table_name = %s AND table_schema = %s AND constraint_type = %s')), Assign(targets=[Name(id='cursor', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute_sql', ctx=Load()), args=[Name(id='query', ctx=Load()), Tuple(elts=[Name(id='table', ctx=Load()), BoolOp(op=Or(), values=[Name(id='schema', ctx=Load()), Constant(value='public')]), Constant(value='PRIMARY KEY')], ctx=Load())], keywords=[])), Assign(targets=[Name(id='row', ctx=Store())], value=Call(func=Attribute(value=Name(id='cursor', ctx=Load()), attr='fetchone', ctx=Load()), args=[], keywords=[])), Return(value=BoolOp(op=Or(), values=[BoolOp(op=And(), values=[Name(id='row', ctx=Load()), Subscript(value=Name(id='row', ctx=Load()), slice=Constant(value=0), ctx=Load())]), Constant(value=None)]))], decorator_list=[]), FunctionDef(name='get_indexes', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='table'), arg(arg='schema')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Name(id='indexes', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[Name(id='CockroachDatabase', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]), attr='get_indexes', ctx=Load()), args=[Name(id='table', ctx=Load()), Name(id='schema', ctx=Load())], keywords=[])), Assign(targets=[Name(id='pkc', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_pk_constraint', ctx=Load()), args=[Name(id='table', ctx=Load()), Name(id='schema', ctx=Load())], keywords=[])), Return(value=ListComp(elt=Name(id='idx', ctx=Load()), generators=[comprehension(target=Name(id='idx', ctx=Store()), iter=Name(id='indexes', ctx=Load()), ifs=[BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Name(id='pkc', ctx=Load())), Compare(left=Attribute(value=Name(id='idx', ctx=Load()), attr='name', ctx=Load()), ops=[NotEq()], comparators=[Name(id='pkc', ctx=Load())])])], is_async=0)]))], decorator_list=[]), FunctionDef(name='conflict_statement', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='on_conflict'), arg(arg='query')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='on_conflict', ctx=Load()), attr='_action', ctx=Load())), body=[Return()], orelse=[]), Assign(targets=[Name(id='action', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='on_conflict', ctx=Load()), attr='_action', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='action', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='replace'), Constant(value='upsert')], ctx=Load())]), body=[Return(value=Call(func=Name(id='SQL', ctx=Load()), args=[Constant(value='UPSERT')], keywords=[]))], orelse=[If(test=Compare(left=Name(id='action', ctx=Load()), ops=[NotIn()], comparators=[Tuple(elts=[Constant(value='ignore'), Constant(value='nothing'), Constant(value='update')], ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Un-supported action for conflict resolution. CockroachDB supports REPLACE (UPSERT), IGNORE and UPDATE.')], keywords=[]))], orelse=[])])], decorator_list=[]), FunctionDef(name='conflict_update', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='oc'), arg(arg='query')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='action', ctx=Store())], value=IfExp(test=Attribute(value=Name(id='oc', ctx=Load()), attr='_action', ctx=Load()), body=Call(func=Attribute(value=Attribute(value=Name(id='oc', ctx=Load()), attr='_action', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), orelse=Constant(value=''))), If(test=Compare(left=Name(id='action', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='ignore'), Constant(value='nothing')], ctx=Load())]), body=[Assign(targets=[Name(id='parts', ctx=Store())], value=List(elts=[Call(func=Name(id='SQL', ctx=Load()), args=[Constant(value='ON CONFLICT')], keywords=[])], ctx=Load())), If(test=Attribute(value=Name(id='oc', ctx=Load()), attr='_conflict_target', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='parts', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='EnclosedNodeList', ctx=Load()), args=[ListComp(elt=IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='col', ctx=Load()), Name(id='basestring', ctx=Load())], keywords=[]), body=Call(func=Name(id='Entity', ctx=Load()), args=[Name(id='col', ctx=Load())], keywords=[]), orelse=Name(id='col', ctx=Load())), generators=[comprehension(target=Name(id='col', ctx=Store()), iter=Attribute(value=Name(id='oc', ctx=Load()), attr='_conflict_target', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='parts', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='SQL', ctx=Load()), args=[Constant(value='DO NOTHING')], keywords=[])], keywords=[])), Return(value=Call(func=Name(id='NodeList', ctx=Load()), args=[Name(id='parts', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='action', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='replace'), Constant(value='upsert')], ctx=Load())]), body=[Return()], orelse=[If(test=Attribute(value=Name(id='oc', ctx=Load()), attr='_conflict_constraint', ctx=Load()), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='CockroachDB does not support the usage of a constraint name. Use the column(s) instead.')], keywords=[]))], orelse=[])])]), Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[Name(id='CockroachDatabase', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]), attr='conflict_update', ctx=Load()), args=[Name(id='oc', ctx=Load()), Name(id='query', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='extract_date', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='date_part'), arg(arg='date_field')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='fn', ctx=Load()), attr='extract', ctx=Load()), args=[Name(id='date_part', ctx=Load()), Name(id='date_field', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='from_timestamp', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='date_field')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='date_field', ctx=Load()), attr='cast', ctx=Load()), args=[Constant(value='int')], keywords=[]), attr='cast', ctx=Load()), args=[Constant(value='timestamptz')], keywords=[]))], decorator_list=[]), FunctionDef(name='begin', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='system_time'), arg(arg='priority')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[Name(id='CockroachDatabase', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]), attr='begin', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='system_time', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='cursor', ctx=Load()), args=[], keywords=[]), attr='execute', ctx=Load()), args=[Constant(value='SET TRANSACTION AS OF SYSTEM TIME %s'), Tuple(elts=[Name(id='system_time', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='priority', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='priority', ctx=Store())], value=Call(func=Attribute(value=Name(id='priority', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='priority', ctx=Load()), ops=[NotIn()], comparators=[Tuple(elts=[Constant(value='low'), Constant(value='normal'), Constant(value='high')], ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='priority must be low, normal or high')], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='cursor', ctx=Load()), args=[], keywords=[]), attr='execute', ctx=Load()), args=[BinOp(left=Constant(value='SET TRANSACTION PRIORITY %s'), op=Mod(), right=Name(id='priority', ctx=Load()))], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='atomic', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='system_time'), arg(arg='priority')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='is_closed', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='connect', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='server_version', ctx=Load()), ops=[Lt()], comparators=[Name(id='NESTED_TX_MIN_VERSION', ctx=Load())]), body=[Return(value=Call(func=Name(id='_crdb_atomic', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='system_time', ctx=Load()), Name(id='priority', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[Name(id='CockroachDatabase', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]), attr='atomic', ctx=Load()), args=[Name(id='system_time', ctx=Load()), Name(id='priority', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='savepoint', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='is_closed', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='connect', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='server_version', ctx=Load()), ops=[Lt()], comparators=[Name(id='NESTED_TX_MIN_VERSION', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[Name(id='TXN_ERR_MSG', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[Name(id='CockroachDatabase', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]), attr='savepoint', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='retry_transaction', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='max_attempts'), arg(arg='system_time'), arg(arg='priority')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=[FunctionDef(name='deco', args=arguments(posonlyargs=[], args=[arg(arg='cb')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='new_fn', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='run_transaction', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='cb', ctx=Load()), Name(id='max_attempts', ctx=Load()), Name(id='system_time', ctx=Load()), Name(id='priority', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='wraps', ctx=Load()), args=[Name(id='cb', ctx=Load())], keywords=[])]), Return(value=Name(id='new_fn', ctx=Load()))], decorator_list=[]), Return(value=Name(id='deco', ctx=Load()))], decorator_list=[]), FunctionDef(name='run_transaction', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='cb'), arg(arg='max_attempts'), arg(arg='system_time'), arg(arg='priority')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Return(value=Call(func=Name(id='run_transaction', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='cb', ctx=Load()), Name(id='max_attempts', ctx=Load()), Name(id='system_time', ctx=Load()), Name(id='priority', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='_crdb_atomic', bases=[Name(id='_atomic', ctx=Load())], keywords=[], body=[FunctionDef(name='__enter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='db', ctx=Load()), attr='transaction_depth', ctx=Load()), args=[], keywords=[]), ops=[Gt()], comparators=[Constant(value=0)]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='db', ctx=Load()), attr='top_transaction', ctx=Load()), args=[], keywords=[]), Name(id='_manual', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[Name(id='TXN_ERR_MSG', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[Name(id='_crdb_atomic', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]), attr='__enter__', ctx=Load()), args=[], keywords=[]))], decorator_list=[])], decorator_list=[]), FunctionDef(name='run_transaction', args=arguments(posonlyargs=[], args=[arg(arg='db'), arg(arg='callback'), arg(arg='max_attempts'), arg(arg='system_time'), arg(arg='priority')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='\n    Run transactional SQL in a transaction with automatic retries.\n\n    User-provided `callback`:\n    * Must accept one parameter, the `db` instance representing the connection\n      the transaction is running under.\n    * Must not attempt to commit, rollback or otherwise manage transactions.\n    * May be called more than once.\n    * Should ideally only contain SQL operations.\n\n    Additionally, the database must not have any open transaction at the time\n    this function is called, as CRDB does not support nested transactions.\n    ')), Assign(targets=[Name(id='max_attempts', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='max_attempts', ctx=Load()), UnaryOp(op=USub(), operand=Constant(value=1))])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='db', ctx=Load()), attr='atomic', ctx=Load()), args=[], keywords=[keyword(arg='system_time', value=Name(id='system_time', ctx=Load())), keyword(arg='priority', value=Name(id='priority', ctx=Load()))]), optional_vars=Name(id='txn', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='db', ctx=Load()), attr='execute_sql', ctx=Load()), args=[Constant(value='SAVEPOINT cockroach_restart')], keywords=[])), While(test=Compare(left=Name(id='max_attempts', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=0)]), body=[Try(body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='callback', ctx=Load()), args=[Name(id='db', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='db', ctx=Load()), attr='execute_sql', ctx=Load()), args=[Constant(value='RELEASE SAVEPOINT cockroach_restart')], keywords=[])), Return(value=Name(id='result', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='OperationalError', ctx=Load()), name='exc', body=[If(test=Compare(left=Attribute(value=Attribute(value=Name(id='exc', ctx=Load()), attr='orig', ctx=Load()), attr='pgcode', ctx=Load()), ops=[Eq()], comparators=[Constant(value='40001')]), body=[AugAssign(target=Name(id='max_attempts', ctx=Store()), op=Sub(), value=Constant(value=1)), Expr(value=Call(func=Attribute(value=Name(id='db', ctx=Load()), attr='execute_sql', ctx=Load()), args=[Constant(value='ROLLBACK TO SAVEPOINT cockroach_restart')], keywords=[])), Continue()], orelse=[]), Raise()])], orelse=[], finalbody=[])], orelse=[])]), Raise(exc=Call(func=Name(id='ExceededMaxAttempts', ctx=Load()), args=[Constant(value=None), Constant(value='unable to commit transaction')], keywords=[]))], decorator_list=[]), ClassDef(name='PooledCockroachDatabase', bases=[Name(id='_PooledPostgresqlDatabase', ctx=Load()), Name(id='CockroachDatabase', ctx=Load())], keywords=[], body=[Pass()], decorator_list=[])], type_ignores=[])