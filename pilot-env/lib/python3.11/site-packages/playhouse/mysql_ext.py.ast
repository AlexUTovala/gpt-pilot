Module(body=[Import(names=[alias(name='json')]), Try(body=[Import(names=[alias(name='mysql.connector', asname='mysql_connector')])], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Assign(targets=[Name(id='mysql_connector', ctx=Store())], value=Constant(value=None))])], orelse=[], finalbody=[]), Try(body=[Import(names=[alias(name='mariadb')])], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Assign(targets=[Name(id='mariadb', ctx=Store())], value=Constant(value=None))])], orelse=[], finalbody=[]), ImportFrom(module='peewee', names=[alias(name='ImproperlyConfigured')], level=0), ImportFrom(module='peewee', names=[alias(name='Insert')], level=0), ImportFrom(module='peewee', names=[alias(name='MySQLDatabase')], level=0), ImportFrom(module='peewee', names=[alias(name='Node')], level=0), ImportFrom(module='peewee', names=[alias(name='NodeList')], level=0), ImportFrom(module='peewee', names=[alias(name='SQL')], level=0), ImportFrom(module='peewee', names=[alias(name='TextField')], level=0), ImportFrom(module='peewee', names=[alias(name='fn')], level=0), ImportFrom(module='peewee', names=[alias(name='__deprecated__')], level=0), ClassDef(name='MySQLConnectorDatabase', bases=[Name(id='MySQLDatabase', ctx=Load())], keywords=[], body=[FunctionDef(name='_connect', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='mysql_connector', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ImproperlyConfigured', ctx=Load()), args=[Constant(value='MySQL connector not installed!')], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='mysql_connector', ctx=Load()), attr='connect', ctx=Load()), args=[], keywords=[keyword(arg='db', value=Attribute(value=Name(id='self', ctx=Load()), attr='database', ctx=Load())), keyword(arg='autocommit', value=Constant(value=True)), keyword(value=Attribute(value=Name(id='self', ctx=Load()), attr='connect_params', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='cursor', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='commit'), arg(arg='named_cursor')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[If(test=Compare(left=Name(id='commit', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Name(id='__deprecated__', ctx=Load()), args=[Constant(value='"commit" has been deprecated and is a no-op.')], keywords=[]))], orelse=[]), If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='is_closed', ctx=Load()), args=[], keywords=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='autoconnect', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='connect', ctx=Load()), args=[], keywords=[]))], orelse=[Raise(exc=Call(func=Name(id='InterfaceError', ctx=Load()), args=[Constant(value='Error, database connection not opened.')], keywords=[]))])], orelse=[]), Return(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_state', ctx=Load()), attr='conn', ctx=Load()), attr='cursor', ctx=Load()), args=[], keywords=[keyword(arg='buffered', value=Constant(value=True))]))], decorator_list=[]), FunctionDef(name='get_binary_type', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='mysql_connector', ctx=Load()), attr='Binary', ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='MariaDBConnectorDatabase', bases=[Name(id='MySQLDatabase', ctx=Load())], keywords=[], body=[FunctionDef(name='_connect', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='mariadb', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ImproperlyConfigured', ctx=Load()), args=[Constant(value='mariadb connector not installed!')], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='connect_params', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='charset'), Constant(value=None)], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='connect_params', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='sql_mode'), Constant(value=None)], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='connect_params', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='use_unicode'), Constant(value=None)], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='mariadb', ctx=Load()), attr='connect', ctx=Load()), args=[], keywords=[keyword(arg='db', value=Attribute(value=Name(id='self', ctx=Load()), attr='database', ctx=Load())), keyword(arg='autocommit', value=Constant(value=True)), keyword(value=Attribute(value=Name(id='self', ctx=Load()), attr='connect_params', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='cursor', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='commit'), arg(arg='named_cursor')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[If(test=Compare(left=Name(id='commit', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Name(id='__deprecated__', ctx=Load()), args=[Constant(value='"commit" has been deprecated and is a no-op.')], keywords=[]))], orelse=[]), If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='is_closed', ctx=Load()), args=[], keywords=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='autoconnect', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='connect', ctx=Load()), args=[], keywords=[]))], orelse=[Raise(exc=Call(func=Name(id='InterfaceError', ctx=Load()), args=[Constant(value='Error, database connection not opened.')], keywords=[]))])], orelse=[]), Return(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_state', ctx=Load()), attr='conn', ctx=Load()), attr='cursor', ctx=Load()), args=[], keywords=[keyword(arg='buffered', value=Constant(value=True))]))], decorator_list=[]), FunctionDef(name='_set_server_version', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='conn')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='version', ctx=Store())], value=Attribute(value=Name(id='conn', ctx=Load()), attr='server_version', ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='version', ctx=Store()), Name(id='point', ctx=Store())], ctx=Store())], value=Call(func=Name(id='divmod', ctx=Load()), args=[Name(id='version', ctx=Load()), Constant(value=100)], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='version', ctx=Store()), Name(id='minor', ctx=Store())], ctx=Store())], value=Call(func=Name(id='divmod', ctx=Load()), args=[Name(id='version', ctx=Load()), Constant(value=100)], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='server_version', ctx=Store())], value=Tuple(elts=[Name(id='version', ctx=Load()), Name(id='minor', ctx=Load()), Name(id='point', ctx=Load())], ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='server_version', ctx=Load()), ops=[GtE()], comparators=[Tuple(elts=[Constant(value=10), Constant(value=5), Constant(value=0)], ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='returning_clause', ctx=Store())], value=Constant(value=True))], orelse=[])], decorator_list=[]), FunctionDef(name='last_insert_id', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='cursor'), arg(arg='query_type')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='returning_clause', ctx=Load())), body=[Return(value=Attribute(value=Name(id='cursor', ctx=Load()), attr='lastrowid', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='query_type', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='Insert', ctx=Load()), attr='SIMPLE', ctx=Load())]), body=[Try(body=[Return(value=Subscript(value=Subscript(value=Name(id='cursor', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value=0), ctx=Load()))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='AttributeError', ctx=Load()), Name(id='IndexError', ctx=Load())], ctx=Load()), body=[Return(value=Attribute(value=Name(id='cursor', ctx=Load()), attr='lastrowid', ctx=Load()))])], orelse=[], finalbody=[])], orelse=[])]), Return(value=Name(id='cursor', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_binary_type', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='mariadb', ctx=Load()), attr='Binary', ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='JSONField', bases=[Name(id='TextField', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='field_type', ctx=Store())], value=Constant(value='JSON')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='json_dumps'), arg(arg='json_loads')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[Constant(value=None), Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_json_dumps', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='json_dumps', ctx=Load()), Attribute(value=Name(id='json', ctx=Load()), attr='dumps', ctx=Load())])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_json_loads', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='json_loads', ctx=Load()), Attribute(value=Name(id='json', ctx=Load()), attr='loads', ctx=Load())])), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[Name(id='JSONField', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='python_value', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='value', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Try(body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_json_loads', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='TypeError', ctx=Load()), Name(id='ValueError', ctx=Load())], ctx=Load()), body=[Return(value=Name(id='value', ctx=Load()))])], orelse=[], finalbody=[])], orelse=[])], decorator_list=[]), FunctionDef(name='db_value', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='value', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='Node', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_json_dumps', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='value', ctx=Load()))], orelse=[])], decorator_list=[]), FunctionDef(name='extract', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='fn', ctx=Load()), attr='json_extract', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='path', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), FunctionDef(name='Match', args=arguments(posonlyargs=[], args=[arg(arg='columns'), arg(arg='expr'), arg(arg='modifier')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='columns', ctx=Load()), Tuple(elts=[Name(id='list', ctx=Load()), Name(id='tuple', ctx=Load())], ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='match', ctx=Store())], value=Call(func=Attribute(value=Name(id='fn', ctx=Load()), attr='MATCH', ctx=Load()), args=[Starred(value=Name(id='columns', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='match', ctx=Store())], value=Call(func=Attribute(value=Name(id='fn', ctx=Load()), attr='MATCH', ctx=Load()), args=[Name(id='columns', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='args', ctx=Store())], value=IfExp(test=Compare(left=Name(id='modifier', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Name(id='expr', ctx=Load()), orelse=Call(func=Name(id='NodeList', ctx=Load()), args=[Tuple(elts=[Name(id='expr', ctx=Load()), Call(func=Name(id='SQL', ctx=Load()), args=[Name(id='modifier', ctx=Load())], keywords=[])], ctx=Load())], keywords=[]))), Return(value=Call(func=Name(id='NodeList', ctx=Load()), args=[Tuple(elts=[Name(id='match', ctx=Load()), Call(func=Attribute(value=Name(id='fn', ctx=Load()), attr='AGAINST', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[])], ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])