Module(body=[Expr(value=Constant(value='\nPeewee integration with pysqlcipher.\n\nProject page: https://github.com/leapcode/pysqlcipher/\n\n**WARNING!!! EXPERIMENTAL!!!**\n\n* Although this extention\'s code is short, it has not been properly\n  peer-reviewed yet and may have introduced vulnerabilities.\n\nAlso note that this code relies on pysqlcipher and sqlcipher, and\nthe code there might have vulnerabilities as well, but since these\nare widely used crypto modules, we can expect "short zero days" there.\n\nExample usage:\n\n     from peewee.playground.ciphersql_ext import SqlCipherDatabase\n     db = SqlCipherDatabase(\'/path/to/my.db\', passphrase="don\'tuseme4real")\n\n* `passphrase`: should be "long enough".\n  Note that *length beats vocabulary* (much exponential), and even\n  a lowercase-only passphrase like easytorememberyethardforotherstoguess\n  packs more noise than 8 random printable characters and *can* be memorized.\n\nWhen opening an existing database, passphrase should be the one used when the\ndatabase was created. If the passphrase is incorrect, an exception will only be\nraised **when you access the database**.\n\nIf you need to ask for an interactive passphrase, here\'s example code you can\nput after the `db = ...` line:\n\n    try:  # Just access the database so that it checks the encryption.\n        db.get_tables()\n    # We\'re looking for a DatabaseError with a specific error message.\n    except peewee.DatabaseError as e:\n        # Check whether the message *means* "passphrase is wrong"\n        if e.args[0] == \'file is encrypted or is not a database\':\n            raise Exception(\'Developer should Prompt user for passphrase \'\n                            \'again.\')\n        else:\n            # A different DatabaseError. Raise it.\n            raise e\n\nSee a more elaborate example with this code at\nhttps://gist.github.com/thedod/11048875\n')), Import(names=[alias(name='datetime')]), Import(names=[alias(name='decimal')]), Import(names=[alias(name='sys')]), ImportFrom(module='peewee', names=[alias(name='*')], level=0), ImportFrom(module='playhouse.sqlite_ext', names=[alias(name='SqliteExtDatabase')], level=0), If(test=Compare(left=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[NotEq()], comparators=[Constant(value=3)]), body=[ImportFrom(module='pysqlcipher', names=[alias(name='dbapi2', asname='sqlcipher')], level=0)], orelse=[Try(body=[ImportFrom(module='sqlcipher3', names=[alias(name='dbapi2', asname='sqlcipher')], level=0)], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[ImportFrom(module='pysqlcipher3', names=[alias(name='dbapi2', asname='sqlcipher')], level=0)])], orelse=[], finalbody=[])]), Expr(value=Call(func=Attribute(value=Name(id='sqlcipher', ctx=Load()), attr='register_adapter', ctx=Load()), args=[Attribute(value=Name(id='decimal', ctx=Load()), attr='Decimal', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='sqlcipher', ctx=Load()), attr='register_adapter', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='date', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='sqlcipher', ctx=Load()), attr='register_adapter', ctx=Load()), args=[Attribute(value=Name(id='datetime', ctx=Load()), attr='time', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), Assign(targets=[Name(id='__sqlcipher_version__', ctx=Store())], value=Attribute(value=Name(id='sqlcipher', ctx=Load()), attr='sqlite_version_info', ctx=Load())), ClassDef(name='_SqlCipherDatabase', bases=[Name(id='object', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='server_version', ctx=Store())], value=Name(id='__sqlcipher_version__', ctx=Load())), FunctionDef(name='_connect', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='params', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='connect_params', ctx=Load())], keywords=[])), Assign(targets=[Name(id='passphrase', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='params', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='passphrase'), Constant(value='')], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value="'"), Constant(value="''")], keywords=[])), Assign(targets=[Name(id='conn', ctx=Store())], value=Call(func=Attribute(value=Name(id='sqlcipher', ctx=Load()), attr='connect', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='database', ctx=Load())], keywords=[keyword(arg='isolation_level', value=Constant(value=None)), keyword(value=Name(id='params', ctx=Load()))])), Try(body=[If(test=Name(id='passphrase', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='conn', ctx=Load()), attr='execute', ctx=Load()), args=[BinOp(left=Constant(value="PRAGMA key='%s'"), op=Mod(), right=Name(id='passphrase', ctx=Load()))], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_add_conn_hooks', ctx=Load()), args=[Name(id='conn', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(body=[Expr(value=Call(func=Attribute(value=Name(id='conn', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Raise()])], orelse=[], finalbody=[]), Return(value=Name(id='conn', ctx=Load()))], decorator_list=[]), FunctionDef(name='set_passphrase', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='passphrase')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='is_closed', ctx=Load()), args=[], keywords=[])), body=[Raise(exc=Call(func=Name(id='ImproperlyConfigured', ctx=Load()), args=[Constant(value='Cannot set passphrase when database is open. To change passphrase of an open database use the rekey() method.')], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='connect_params', ctx=Load()), slice=Constant(value='passphrase'), ctx=Store())], value=Name(id='passphrase', ctx=Load()))], decorator_list=[]), FunctionDef(name='rekey', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='passphrase')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='is_closed', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='connect', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute_sql', ctx=Load()), args=[BinOp(left=Constant(value="PRAGMA rekey='%s'"), op=Mod(), right=Call(func=Attribute(value=Name(id='passphrase', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value="'"), Constant(value="''")], keywords=[]))], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='connect_params', ctx=Load()), slice=Constant(value='passphrase'), ctx=Store())], value=Name(id='passphrase', ctx=Load())), Return(value=Constant(value=True))], decorator_list=[])], decorator_list=[]), ClassDef(name='SqlCipherDatabase', bases=[Name(id='_SqlCipherDatabase', ctx=Load()), Name(id='SqliteDatabase', ctx=Load())], keywords=[], body=[Pass()], decorator_list=[]), ClassDef(name='SqlCipherExtDatabase', bases=[Name(id='_SqlCipherDatabase', ctx=Load()), Name(id='SqliteExtDatabase', ctx=Load())], keywords=[], body=[Pass()], decorator_list=[])], type_ignores=[])