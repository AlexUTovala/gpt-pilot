Module(body=[Import(names=[alias(name='math')]), Import(names=[alias(name='sys')]), ImportFrom(module='flask', names=[alias(name='abort')], level=0), ImportFrom(module='flask', names=[alias(name='render_template')], level=0), ImportFrom(module='flask', names=[alias(name='request')], level=0), ImportFrom(module='peewee', names=[alias(name='Database')], level=0), ImportFrom(module='peewee', names=[alias(name='DoesNotExist')], level=0), ImportFrom(module='peewee', names=[alias(name='Model')], level=0), ImportFrom(module='peewee', names=[alias(name='Proxy')], level=0), ImportFrom(module='peewee', names=[alias(name='SelectQuery')], level=0), ImportFrom(module='playhouse.db_url', names=[alias(name='connect', asname='db_url_connect')], level=0), ClassDef(name='PaginatedQuery', bases=[Name(id='object', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='query_or_model'), arg(arg='paginate_by'), arg(arg='page_var'), arg(arg='page'), arg(arg='check_bounds')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='page'), Constant(value=None), Constant(value=False)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='paginate_by', ctx=Store())], value=Name(id='paginate_by', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='page_var', ctx=Store())], value=Name(id='page_var', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='page', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='page', ctx=Load()), Constant(value=None)])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='check_bounds', ctx=Store())], value=Name(id='check_bounds', ctx=Load())), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='query_or_model', ctx=Load()), Name(id='SelectQuery', ctx=Load())], keywords=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='query', ctx=Store())], value=Name(id='query_or_model', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='model', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='query', ctx=Load()), attr='model', ctx=Load()))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='model', ctx=Store())], value=Name(id='query_or_model', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='query', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='model', ctx=Load()), attr='select', ctx=Load()), args=[], keywords=[]))])], decorator_list=[]), FunctionDef(name='get_page', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='page', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='page', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='curr_page', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='request', ctx=Load()), attr='args', ctx=Load()), attr='get', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='page_var', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Name(id='curr_page', ctx=Load()), Call(func=Attribute(value=Name(id='curr_page', ctx=Load()), attr='isdigit', ctx=Load()), args=[], keywords=[])]), body=[Return(value=Call(func=Name(id='max', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='int', ctx=Load()), args=[Name(id='curr_page', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Return(value=Constant(value=1))], decorator_list=[]), FunctionDef(name='get_page_count', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Constant(value='_page_count')], keywords=[])), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_page_count', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Name(id='math', ctx=Load()), attr='ceil', ctx=Load()), args=[BinOp(left=Call(func=Name(id='float', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='query', ctx=Load()), attr='count', ctx=Load()), args=[], keywords=[])], keywords=[]), op=Div(), right=Attribute(value=Name(id='self', ctx=Load()), attr='paginate_by', ctx=Load()))], keywords=[])], keywords=[]))], orelse=[]), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_page_count', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_object_list', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='check_bounds', ctx=Load()), Compare(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_page', ctx=Load()), args=[], keywords=[]), ops=[Gt()], comparators=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_page_count', ctx=Load()), args=[], keywords=[])])]), body=[Expr(value=Call(func=Name(id='abort', ctx=Load()), args=[Constant(value=404)], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='query', ctx=Load()), attr='paginate', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_page', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='paginate_by', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='get_page_range', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='page'), arg(arg='total'), arg(arg='show')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=5)]), body=[Assign(targets=[Name(id='start', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[BinOp(left=Name(id='page', ctx=Load()), op=Sub(), right=BinOp(left=Name(id='show', ctx=Load()), op=FloorDiv(), right=Constant(value=2))), Constant(value=1)], keywords=[])), Assign(targets=[Name(id='stop', ctx=Store())], value=BinOp(left=Call(func=Name(id='min', ctx=Load()), args=[BinOp(left=Name(id='start', ctx=Load()), op=Add(), right=Name(id='show', ctx=Load())), Name(id='total', ctx=Load())], keywords=[]), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='start', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Call(func=Name(id='min', ctx=Load()), args=[Name(id='start', ctx=Load()), BinOp(left=Name(id='stop', ctx=Load()), op=Sub(), right=Name(id='show', ctx=Load()))], keywords=[]), Constant(value=1)], keywords=[])), Return(value=Call(func=Name(id='list', ctx=Load()), args=[Subscript(value=Call(func=Name(id='range', ctx=Load()), args=[Name(id='start', ctx=Load()), Name(id='stop', ctx=Load())], keywords=[]), slice=Slice(upper=Name(id='show', ctx=Load())), ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), FunctionDef(name='get_object_or_404', args=arguments(posonlyargs=[], args=[arg(arg='query_or_model')], vararg=arg(arg='query'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='query_or_model', ctx=Load()), Name(id='SelectQuery', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='query_or_model', ctx=Store())], value=Call(func=Attribute(value=Name(id='query_or_model', ctx=Load()), attr='select', ctx=Load()), args=[], keywords=[]))], orelse=[]), Try(body=[Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='query_or_model', ctx=Load()), attr='where', ctx=Load()), args=[Starred(value=Name(id='query', ctx=Load()), ctx=Load())], keywords=[]), attr='get', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Name(id='DoesNotExist', ctx=Load()), body=[Expr(value=Call(func=Name(id='abort', ctx=Load()), args=[Constant(value=404)], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='object_list', args=arguments(posonlyargs=[], args=[arg(arg='template_name'), arg(arg='query'), arg(arg='context_variable'), arg(arg='paginate_by'), arg(arg='page_var'), arg(arg='page'), arg(arg='check_bounds')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[Constant(value='object_list'), Constant(value=20), Constant(value='page'), Constant(value=None), Constant(value=True)]), body=[Assign(targets=[Name(id='paginated_query', ctx=Store())], value=Call(func=Name(id='PaginatedQuery', ctx=Load()), args=[Name(id='query', ctx=Load())], keywords=[keyword(arg='paginate_by', value=Name(id='paginate_by', ctx=Load())), keyword(arg='page_var', value=Name(id='page_var', ctx=Load())), keyword(arg='page', value=Name(id='page', ctx=Load())), keyword(arg='check_bounds', value=Name(id='check_bounds', ctx=Load()))])), Assign(targets=[Subscript(value=Name(id='kwargs', ctx=Load()), slice=Name(id='context_variable', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Name(id='paginated_query', ctx=Load()), attr='get_object_list', ctx=Load()), args=[], keywords=[])), Return(value=Call(func=Name(id='render_template', ctx=Load()), args=[Name(id='template_name', ctx=Load())], keywords=[keyword(arg='pagination', value=Name(id='paginated_query', ctx=Load())), keyword(arg='page', value=Call(func=Attribute(value=Name(id='paginated_query', ctx=Load()), attr='get_page', ctx=Load()), args=[], keywords=[])), keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='get_current_url', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='request', ctx=Load()), attr='query_string', ctx=Load())), body=[Return(value=Attribute(value=Name(id='request', ctx=Load()), attr='path', ctx=Load()))], orelse=[]), Return(value=BinOp(left=Constant(value='%s?%s'), op=Mod(), right=Tuple(elts=[Attribute(value=Name(id='request', ctx=Load()), attr='path', ctx=Load()), Attribute(value=Name(id='request', ctx=Load()), attr='query_string', ctx=Load())], ctx=Load())))], decorator_list=[]), FunctionDef(name='get_next_url', args=arguments(posonlyargs=[], args=[arg(arg='default')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='/')]), body=[If(test=Call(func=Attribute(value=Attribute(value=Name(id='request', ctx=Load()), attr='args', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='next')], keywords=[]), body=[Return(value=Subscript(value=Attribute(value=Name(id='request', ctx=Load()), attr='args', ctx=Load()), slice=Constant(value='next'), ctx=Load()))], orelse=[If(test=Call(func=Attribute(value=Attribute(value=Name(id='request', ctx=Load()), attr='form', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='next')], keywords=[]), body=[Return(value=Subscript(value=Attribute(value=Name(id='request', ctx=Load()), attr='form', ctx=Load()), slice=Constant(value='next'), ctx=Load()))], orelse=[])]), Return(value=Name(id='default', ctx=Load()))], decorator_list=[]), ClassDef(name='FlaskDB', bases=[Name(id='object', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Convenience wrapper for configuring a Peewee database for use with a Flask\n    application. Provides a base `Model` class and registers handlers to manage\n    the database connection during the request/response cycle.\n\n    Usage::\n\n        from flask import Flask\n        from peewee import *\n        from playhouse.flask_utils import FlaskDB\n\n\n        # The database can be specified using a database URL, or you can pass a\n        # Peewee database instance directly:\n        DATABASE = \'postgresql:///my_app\'\n        DATABASE = PostgresqlDatabase(\'my_app\')\n\n        # If we do not want connection-management on any views, we can specify\n        # the view names using FLASKDB_EXCLUDED_ROUTES. The db connection will\n        # not be opened/closed automatically when these views are requested:\n        FLASKDB_EXCLUDED_ROUTES = (\'logout\',)\n\n        app = Flask(__name__)\n        app.config.from_object(__name__)\n\n        # Now we can configure our FlaskDB:\n        flask_db = FlaskDB(app)\n\n        # Or use the "deferred initialization" pattern:\n        flask_db = FlaskDB()\n        flask_db.init_app(app)\n\n        # The `flask_db` provides a base Model-class for easily binding models\n        # to the configured database:\n        class User(flask_db.Model):\n            email = CharField()\n\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='app'), arg(arg='database'), arg(arg='model_class'), arg(arg='excluded_routes')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Name(id='Model', ctx=Load()), Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='database', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='base_model_class', ctx=Store())], value=Name(id='model_class', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_app', ctx=Store())], value=Name(id='app', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_db', ctx=Store())], value=Name(id='database', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_excluded_routes', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='excluded_routes', ctx=Load()), Tuple(elts=[], ctx=Load())])), If(test=Compare(left=Name(id='app', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='init_app', ctx=Load()), args=[Name(id='app', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='init_app', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='app')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_app', ctx=Store())], value=Name(id='app', ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_db', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[If(test=Compare(left=Constant(value='DATABASE'), ops=[In()], comparators=[Attribute(value=Name(id='app', ctx=Load()), attr='config', ctx=Load())]), body=[Assign(targets=[Name(id='initial_db', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='app', ctx=Load()), attr='config', ctx=Load()), slice=Constant(value='DATABASE'), ctx=Load()))], orelse=[If(test=Compare(left=Constant(value='DATABASE_URL'), ops=[In()], comparators=[Attribute(value=Name(id='app', ctx=Load()), attr='config', ctx=Load())]), body=[Assign(targets=[Name(id='initial_db', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='app', ctx=Load()), attr='config', ctx=Load()), slice=Constant(value='DATABASE_URL'), ctx=Load()))], orelse=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Missing required configuration data for database: DATABASE or DATABASE_URL.')], keywords=[]))])])], orelse=[Assign(targets=[Name(id='initial_db', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_db', ctx=Load()))]), If(test=Compare(left=Constant(value='FLASKDB_EXCLUDED_ROUTES'), ops=[In()], comparators=[Attribute(value=Name(id='app', ctx=Load()), attr='config', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_excluded_routes', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='app', ctx=Load()), attr='config', ctx=Load()), slice=Constant(value='FLASKDB_EXCLUDED_ROUTES'), ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_load_database', ctx=Load()), args=[Name(id='app', ctx=Load()), Name(id='initial_db', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_register_handlers', ctx=Load()), args=[Name(id='app', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_load_database', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='app'), arg(arg='config_value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='config_value', ctx=Load()), Name(id='Database', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='database', ctx=Store())], value=Name(id='config_value', ctx=Load()))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='config_value', ctx=Load()), Name(id='dict', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='database', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_load_from_config_dict', ctx=Load()), args=[Call(func=Name(id='dict', ctx=Load()), args=[Name(id='config_value', ctx=Load())], keywords=[])], keywords=[]))], orelse=[Assign(targets=[Name(id='database', ctx=Store())], value=Call(func=Name(id='db_url_connect', ctx=Load()), args=[Name(id='config_value', ctx=Load())], keywords=[]))])]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='database', ctx=Load()), Name(id='Proxy', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='database', ctx=Load()), attr='initialize', ctx=Load()), args=[Name(id='database', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='database', ctx=Store())], value=Name(id='database', ctx=Load()))])], decorator_list=[]), FunctionDef(name='_load_from_config_dict', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='config_dict')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Attribute(value=Name(id='config_dict', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='name')], keywords=[])), Assign(targets=[Name(id='engine', ctx=Store())], value=Call(func=Attribute(value=Name(id='config_dict', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='engine')], keywords=[]))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='RuntimeError', ctx=Load()), args=[Constant(value='DATABASE configuration must specify a `name` and `engine`.')], keywords=[]))])], orelse=[], finalbody=[]), If(test=Compare(left=Constant(value='.'), ops=[In()], comparators=[Name(id='engine', ctx=Load())]), body=[Assign(targets=[Tuple(elts=[Name(id='path', ctx=Store()), Name(id='class_name', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='engine', ctx=Load()), attr='rsplit', ctx=Load()), args=[Constant(value='.'), Constant(value=1)], keywords=[]))], orelse=[Assign(targets=[Tuple(elts=[Name(id='path', ctx=Store()), Name(id='class_name', ctx=Store())], ctx=Store())], value=Tuple(elts=[Constant(value='peewee'), Name(id='engine', ctx=Load())], ctx=Load()))]), Try(body=[Expr(value=Call(func=Name(id='__import__', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), Assign(targets=[Name(id='module', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='modules', ctx=Load()), slice=Name(id='path', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='database_class', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='module', ctx=Load()), Name(id='class_name', ctx=Load())], keywords=[])), Assert(test=Call(func=Name(id='issubclass', ctx=Load()), args=[Name(id='database_class', ctx=Load()), Name(id='Database', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='RuntimeError', ctx=Load()), args=[BinOp(left=Constant(value='Unable to import %s'), op=Mod(), right=Name(id='engine', ctx=Load()))], keywords=[]))]), ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='RuntimeError', ctx=Load()), args=[BinOp(left=Constant(value='Database engine not found %s'), op=Mod(), right=Name(id='engine', ctx=Load()))], keywords=[]))]), ExceptHandler(type=Name(id='AssertionError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='RuntimeError', ctx=Load()), args=[BinOp(left=Constant(value='Database engine not a subclass of peewee.Database: %s'), op=Mod(), right=Name(id='engine', ctx=Load()))], keywords=[]))])], orelse=[], finalbody=[]), Return(value=Call(func=Name(id='database_class', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[keyword(value=Name(id='config_dict', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='_register_handlers', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='app')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='app', ctx=Load()), attr='before_request', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='connect_db', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='app', ctx=Load()), attr='teardown_request', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='close_db', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='get_model_class', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='database', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='RuntimeError', ctx=Load()), args=[Constant(value='Database must be initialized.')], keywords=[]))], orelse=[]), ClassDef(name='BaseModel', bases=[Attribute(value=Name(id='self', ctx=Load()), attr='base_model_class', ctx=Load())], keywords=[], body=[ClassDef(name='Meta', bases=[], keywords=[], body=[Assign(targets=[Name(id='database', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='database', ctx=Load()))], decorator_list=[])], decorator_list=[]), Return(value=Name(id='BaseModel', ctx=Load()))], decorator_list=[]), FunctionDef(name='Model', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_app', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='database', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Constant(value='database'), Constant(value=None)], keywords=[])), If(test=Compare(left=Name(id='database', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='database', ctx=Store())], value=Call(func=Name(id='Proxy', ctx=Load()), args=[], keywords=[]))], orelse=[])], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Constant(value='_model_class')], keywords=[])), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_model_class', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_model_class', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_model_class', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='connect_db', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='_excluded_routes', ctx=Load()), Compare(left=Attribute(value=Name(id='request', ctx=Load()), attr='endpoint', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_excluded_routes', ctx=Load())])]), body=[Return()], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='database', ctx=Load()), attr='connect', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='close_db', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='exc')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='_excluded_routes', ctx=Load()), Compare(left=Attribute(value=Name(id='request', ctx=Load()), attr='endpoint', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_excluded_routes', ctx=Load())])]), body=[Return()], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='database', ctx=Load()), attr='is_closed', ctx=Load()), args=[], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='database', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[])], decorator_list=[])], type_ignores=[])