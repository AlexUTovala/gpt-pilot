Module(body=[ImportFrom(module='peewee', names=[alias(name='*')], level=0), ImportFrom(module='playhouse.sqlite_ext', names=[alias(name='JSONField')], level=0), ClassDef(name='BaseChangeLog', bases=[Name(id='Model', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='timestamp', ctx=Store())], value=Call(func=Name(id='DateTimeField', ctx=Load()), args=[], keywords=[keyword(arg='constraints', value=List(elts=[Call(func=Name(id='SQL', ctx=Load()), args=[Constant(value='DEFAULT CURRENT_TIMESTAMP')], keywords=[])], ctx=Load()))])), Assign(targets=[Name(id='action', ctx=Store())], value=Call(func=Name(id='TextField', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='table', ctx=Store())], value=Call(func=Name(id='TextField', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='primary_key', ctx=Store())], value=Call(func=Name(id='IntegerField', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='changes', ctx=Store())], value=Call(func=Name(id='JSONField', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), ClassDef(name='ChangeLog', bases=[Name(id='object', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='base_model', ctx=Store())], value=Name(id='BaseChangeLog', ctx=Load())), Assign(targets=[Name(id='template', ctx=Store())], value=Constant(value='CREATE TRIGGER IF NOT EXISTS %(table)s_changes_%(action)s\n    AFTER %(action)s ON %(table)s\n    BEGIN\n        INSERT INTO %(change_table)s\n            ("action", "table", "primary_key", "changes")\n        SELECT\n            \'%(action)s\', \'%(table)s\', %(new_old)s."%(primary_key)s", "changes"\n        FROM (\n            SELECT json_group_object(\n                col,\n                json_array(\n                    case when json_valid("oldval") then json("oldval")\n                        else "oldval" end,\n                    case when json_valid("newval") then json("newval")\n                        else "newval" end)\n                ) AS "changes"\n            FROM (\n                SELECT json_extract(value, \'$[0]\') as "col",\n                       json_extract(value, \'$[1]\') as "oldval",\n                       json_extract(value, \'$[2]\') as "newval"\n                FROM json_each(json_array(%(column_array)s))\n                WHERE "oldval" IS NOT "newval"\n            )\n        );\n    END;')), Assign(targets=[Name(id='drop_template', ctx=Store())], value=Constant(value='DROP TRIGGER IF EXISTS %(table)s_changes_%(action)s')), Assign(targets=[Name(id='_actions', ctx=Store())], value=Tuple(elts=[Constant(value='INSERT'), Constant(value='UPDATE'), Constant(value='DELETE')], ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='db'), arg(arg='table_name')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='changelog')]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='db', ctx=Store())], value=Name(id='db', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='table_name', ctx=Store())], value=Name(id='table_name', ctx=Load()))], decorator_list=[]), FunctionDef(name='_build_column_array', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='model'), arg(arg='use_old'), arg(arg='use_new'), arg(arg='skip_fields')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Name(id='col_array', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='field', ctx=Store()), iter=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='sorted_fields', ctx=Load()), body=[If(test=Attribute(value=Name(id='field', ctx=Load()), attr='primary_key', ctx=Load()), body=[Continue()], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='skip_fields', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='field', ctx=Load()), attr='name', ctx=Load()), ops=[In()], comparators=[Name(id='skip_fields', ctx=Load())])]), body=[Continue()], orelse=[]), Assign(targets=[Name(id='column', ctx=Store())], value=Attribute(value=Name(id='field', ctx=Load()), attr='column_name', ctx=Load())), Assign(targets=[Name(id='new', ctx=Store())], value=IfExp(test=UnaryOp(op=Not(), operand=Name(id='use_new', ctx=Load())), body=Constant(value='NULL'), orelse=BinOp(left=Constant(value='NEW."%s"'), op=Mod(), right=Name(id='column', ctx=Load())))), Assign(targets=[Name(id='old', ctx=Store())], value=IfExp(test=UnaryOp(op=Not(), operand=Name(id='use_old', ctx=Load())), body=Constant(value='NULL'), orelse=BinOp(left=Constant(value='OLD."%s"'), op=Mod(), right=Name(id='column', ctx=Load())))), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='field', ctx=Load()), Name(id='JSONField', ctx=Load())], keywords=[]), body=[If(test=Name(id='use_old', ctx=Load()), body=[Assign(targets=[Name(id='old', ctx=Store())], value=BinOp(left=Constant(value='json(%s)'), op=Mod(), right=Name(id='old', ctx=Load())))], orelse=[]), If(test=Name(id='use_new', ctx=Load()), body=[Assign(targets=[Name(id='new', ctx=Store())], value=BinOp(left=Constant(value='json(%s)'), op=Mod(), right=Name(id='new', ctx=Load())))], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='col_array', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Constant(value="json_array('%s', %s, %s)"), op=Mod(), right=Tuple(elts=[Name(id='column', ctx=Load()), Name(id='old', ctx=Load()), Name(id='new', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Name(id='col_array', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='trigger_sql', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='model'), arg(arg='action'), arg(arg='skip_fields')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assert(test=Compare(left=Name(id='action', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_actions', ctx=Load())])), Assign(targets=[Name(id='use_old', ctx=Store())], value=Compare(left=Name(id='action', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='INSERT')])), Assign(targets=[Name(id='use_new', ctx=Store())], value=Compare(left=Name(id='action', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='DELETE')])), Assign(targets=[Name(id='cols', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_build_column_array', ctx=Load()), args=[Name(id='model', ctx=Load()), Name(id='use_old', ctx=Load()), Name(id='use_new', ctx=Load()), Name(id='skip_fields', ctx=Load())], keywords=[])), Return(value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='template', ctx=Load()), op=Mod(), right=Dict(keys=[Constant(value='table'), Constant(value='action'), Constant(value='new_old'), Constant(value='primary_key'), Constant(value='column_array'), Constant(value='change_table')], values=[Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='table_name', ctx=Load()), Name(id='action', ctx=Load()), IfExp(test=Compare(left=Name(id='action', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='DELETE')]), body=Constant(value='NEW'), orelse=Constant(value='OLD')), Attribute(value=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='primary_key', ctx=Load()), attr='column_name', ctx=Load()), Name(id='cols', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='table_name', ctx=Load())])))], decorator_list=[]), FunctionDef(name='drop_trigger_sql', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='model'), arg(arg='action')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Compare(left=Name(id='action', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_actions', ctx=Load())])), Return(value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='drop_template', ctx=Load()), op=Mod(), right=Dict(keys=[Constant(value='table'), Constant(value='action')], values=[Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='table_name', ctx=Load()), Name(id='action', ctx=Load())])))], decorator_list=[]), FunctionDef(name='model', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Constant(value='_changelog_model')], keywords=[])), body=[ClassDef(name='ChangeLog', bases=[Attribute(value=Name(id='self', ctx=Load()), attr='base_model', ctx=Load())], keywords=[], body=[ClassDef(name='Meta', bases=[], keywords=[], body=[Assign(targets=[Name(id='database', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='db', ctx=Load())), Assign(targets=[Name(id='table_name', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='table_name', ctx=Load()))], decorator_list=[])], decorator_list=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_changelog_model', ctx=Store())], value=Name(id='ChangeLog', ctx=Load()))], orelse=[]), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_changelog_model', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='install', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='model'), arg(arg='skip_fields'), arg(arg='drop'), arg(arg='insert'), arg(arg='update'), arg(arg='delete'), arg(arg='create_table')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=True), Constant(value=True), Constant(value=True), Constant(value=True), Constant(value=True)]), body=[Assign(targets=[Name(id='ChangeLog', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='model', ctx=Load())), If(test=Name(id='create_table', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='ChangeLog', ctx=Load()), attr='create_table', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='actions', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='zip', ctx=Load()), args=[Tuple(elts=[Name(id='insert', ctx=Load()), Name(id='update', ctx=Load()), Name(id='delete', ctx=Load())], ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_actions', ctx=Load())], keywords=[])], keywords=[])), If(test=Name(id='drop', ctx=Load()), body=[For(target=Tuple(elts=[Name(id='_', ctx=Store()), Name(id='action', ctx=Store())], ctx=Store()), iter=Name(id='actions', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='db', ctx=Load()), attr='execute_sql', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='drop_trigger_sql', ctx=Load()), args=[Name(id='model', ctx=Load()), Name(id='action', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], orelse=[]), For(target=Tuple(elts=[Name(id='enabled', ctx=Store()), Name(id='action', ctx=Store())], ctx=Store()), iter=Name(id='actions', ctx=Load()), body=[If(test=Name(id='enabled', ctx=Load()), body=[Assign(targets=[Name(id='sql', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='trigger_sql', ctx=Load()), args=[Name(id='model', ctx=Load()), Name(id='action', ctx=Load()), Name(id='skip_fields', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='db', ctx=Load()), attr='execute_sql', ctx=Load()), args=[Name(id='sql', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[])], decorator_list=[])], type_ignores=[])