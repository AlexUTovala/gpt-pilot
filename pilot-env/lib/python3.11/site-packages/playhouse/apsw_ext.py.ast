Module(body=[Expr(value=Constant(value='\nPeewee integration with APSW, "another python sqlite wrapper".\n\nProject page: https://rogerbinns.github.io/apsw/\n\nAPSW is a really neat library that provides a thin wrapper on top of SQLite\'s\nC interface.\n\nHere are just a few reasons to use APSW, taken from the documentation:\n\n* APSW gives all functionality of SQLite, including virtual tables, virtual\n  file system, blob i/o, backups and file control.\n* Connections can be shared across threads without any additional locking.\n* Transactions are managed explicitly by your code.\n* APSW can handle nested transactions.\n* Unicode is handled correctly.\n* APSW is faster.\n')), Import(names=[alias(name='apsw')]), ImportFrom(module='peewee', names=[alias(name='*')], level=0), ImportFrom(module='peewee', names=[alias(name='__exception_wrapper__')], level=0), ImportFrom(module='peewee', names=[alias(name='BooleanField', asname='_BooleanField')], level=0), ImportFrom(module='peewee', names=[alias(name='DateField', asname='_DateField')], level=0), ImportFrom(module='peewee', names=[alias(name='DateTimeField', asname='_DateTimeField')], level=0), ImportFrom(module='peewee', names=[alias(name='DecimalField', asname='_DecimalField')], level=0), ImportFrom(module='peewee', names=[alias(name='Insert')], level=0), ImportFrom(module='peewee', names=[alias(name='TimeField', asname='_TimeField')], level=0), ImportFrom(module='peewee', names=[alias(name='logger')], level=0), ImportFrom(module='playhouse.sqlite_ext', names=[alias(name='SqliteExtDatabase')], level=0), ClassDef(name='APSWDatabase', bases=[Name(id='SqliteExtDatabase', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='server_version', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='int', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='apsw', ctx=Load()), attr='sqlitelibversion', ctx=Load()), args=[], keywords=[]), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[]), ifs=[], is_async=0)])], keywords=[])), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='database')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_modules', ctx=Store())], value=Dict(keys=[], values=[])), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[Name(id='APSWDatabase', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]), attr='__init__', ctx=Load()), args=[Name(id='database', ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='register_module', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='mod_name'), arg(arg='mod_inst')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_modules', ctx=Load()), slice=Name(id='mod_name', ctx=Load()), ctx=Store())], value=Name(id='mod_inst', ctx=Load())), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='is_closed', ctx=Load()), args=[], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='connection', ctx=Load()), args=[], keywords=[]), attr='createmodule', ctx=Load()), args=[Name(id='mod_name', ctx=Load()), Name(id='mod_inst', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='unregister_module', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='mod_name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Delete(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_modules', ctx=Load()), slice=Name(id='mod_name', ctx=Load()), ctx=Del())])], decorator_list=[]), FunctionDef(name='_connect', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='conn', ctx=Store())], value=Call(func=Attribute(value=Name(id='apsw', ctx=Load()), attr='Connection', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='database', ctx=Load())], keywords=[keyword(value=Attribute(value=Name(id='self', ctx=Load()), attr='connect_params', ctx=Load()))])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_timeout', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='conn', ctx=Load()), attr='setbusytimeout', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_timeout', ctx=Load()), op=Mult(), right=Constant(value=1000))], keywords=[]))], orelse=[]), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_add_conn_hooks', ctx=Load()), args=[Name(id='conn', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(body=[Expr(value=Call(func=Attribute(value=Name(id='conn', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Raise()])], orelse=[], finalbody=[]), Return(value=Name(id='conn', ctx=Load()))], decorator_list=[]), FunctionDef(name='_add_conn_hooks', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='conn')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[Name(id='APSWDatabase', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]), attr='_add_conn_hooks', ctx=Load()), args=[Name(id='conn', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_load_modules', ctx=Load()), args=[Name(id='conn', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_load_modules', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='conn')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Tuple(elts=[Name(id='mod_name', ctx=Store()), Name(id='mod_inst', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_modules', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='conn', ctx=Load()), attr='createmodule', ctx=Load()), args=[Name(id='mod_name', ctx=Load()), Name(id='mod_inst', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='conn', ctx=Load()))], decorator_list=[]), FunctionDef(name='_load_aggregates', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='conn')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Tuple(elts=[Name(id='name', ctx=Store()), Tuple(elts=[Name(id='klass', ctx=Store()), Name(id='num_params', ctx=Store())], ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_aggregates', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[FunctionDef(name='make_aggregate', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Tuple(elts=[Call(func=Name(id='klass', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='klass', ctx=Load()), attr='step', ctx=Load()), Attribute(value=Name(id='klass', ctx=Load()), attr='finalize', ctx=Load())], ctx=Load()))], decorator_list=[]), Expr(value=Call(func=Attribute(value=Name(id='conn', ctx=Load()), attr='createaggregatefunction', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='make_aggregate', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='_load_collations', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='conn')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='fn', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_collations', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='conn', ctx=Load()), attr='createcollation', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='fn', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='_load_functions', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='conn')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Tuple(elts=[Name(id='name', ctx=Store()), Tuple(elts=[Name(id='fn', ctx=Store()), Name(id='num_params', ctx=Store())], ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_functions', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='conn', ctx=Load()), attr='createscalarfunction', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='fn', ctx=Load()), Name(id='num_params', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='_load_extensions', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='conn')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='conn', ctx=Load()), attr='enableloadextension', ctx=Load()), args=[Constant(value=True)], keywords=[])), For(target=Name(id='extension', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_extensions', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='conn', ctx=Load()), attr='loadextension', ctx=Load()), args=[Name(id='extension', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='load_extension', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='extension')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_extensions', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='extension', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='is_closed', ctx=Load()), args=[], keywords=[])), body=[Assign(targets=[Name(id='conn', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='connection', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='conn', ctx=Load()), attr='enableloadextension', ctx=Load()), args=[Constant(value=True)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='conn', ctx=Load()), attr='loadextension', ctx=Load()), args=[Name(id='extension', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='last_insert_id', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='cursor'), arg(arg='query_type')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='returning_clause', ctx=Load())), body=[Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='cursor', ctx=Load()), attr='getconnection', ctx=Load()), args=[], keywords=[]), attr='last_insert_rowid', ctx=Load()), args=[], keywords=[]))], orelse=[If(test=Compare(left=Name(id='query_type', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='Insert', ctx=Load()), attr='SIMPLE', ctx=Load())]), body=[Try(body=[Return(value=Subscript(value=Subscript(value=Name(id='cursor', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value=0), ctx=Load()))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='AttributeError', ctx=Load()), Name(id='IndexError', ctx=Load()), Name(id='TypeError', ctx=Load())], ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], orelse=[])]), Return(value=Name(id='cursor', ctx=Load()))], decorator_list=[]), FunctionDef(name='rows_affected', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='cursor')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='cursor', ctx=Load()), attr='getconnection', ctx=Load()), args=[], keywords=[]), attr='changes', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='cursor', ctx=Load()), attr='cursor', ctx=Load()), attr='getconnection', ctx=Load()), args=[], keywords=[]), attr='changes', ctx=Load()), args=[], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='begin', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='lock_type')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='deferred')]), body=[Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='cursor', ctx=Load()), args=[], keywords=[]), attr='execute', ctx=Load()), args=[BinOp(left=Constant(value='begin %s;'), op=Mod(), right=Name(id='lock_type', ctx=Load()))], keywords=[]))], decorator_list=[]), FunctionDef(name='commit', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Name(id='__exception_wrapper__', ctx=Load()))], body=[Assign(targets=[Name(id='curs', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='cursor', ctx=Load()), args=[], keywords=[])), If(test=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='curs', ctx=Load()), attr='getconnection', ctx=Load()), args=[], keywords=[]), attr='getautocommit', ctx=Load()), args=[], keywords=[]), body=[Return(value=Constant(value=False))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='curs', ctx=Load()), attr='execute', ctx=Load()), args=[Constant(value='commit;')], keywords=[]))]), Return(value=Constant(value=True))], decorator_list=[]), FunctionDef(name='rollback', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Name(id='__exception_wrapper__', ctx=Load()))], body=[Assign(targets=[Name(id='curs', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='cursor', ctx=Load()), args=[], keywords=[])), If(test=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='curs', ctx=Load()), attr='getconnection', ctx=Load()), args=[], keywords=[]), attr='getautocommit', ctx=Load()), args=[], keywords=[]), body=[Return(value=Constant(value=False))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='curs', ctx=Load()), attr='execute', ctx=Load()), args=[Constant(value='rollback;')], keywords=[]))]), Return(value=Constant(value=True))], decorator_list=[]), FunctionDef(name='execute_sql', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='sql'), arg(arg='params')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Tuple(elts=[Name(id='sql', ctx=Load()), Name(id='params', ctx=Load())], ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Name(id='__exception_wrapper__', ctx=Load()))], body=[Assign(targets=[Name(id='cursor', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='cursor', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='cursor', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='sql', ctx=Load()), BoolOp(op=Or(), values=[Name(id='params', ctx=Load()), Tuple(elts=[], ctx=Load())])], keywords=[]))]), Return(value=Name(id='cursor', ctx=Load()))], decorator_list=[])], decorator_list=[]), FunctionDef(name='nh', args=arguments(posonlyargs=[], args=[arg(arg='s'), arg(arg='v')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='v', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), ClassDef(name='BooleanField', bases=[Name(id='_BooleanField', ctx=Load())], keywords=[], body=[FunctionDef(name='db_value', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='v')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='v', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[Name(id='BooleanField', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]), attr='db_value', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='v', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=BoolOp(op=Or(), values=[BoolOp(op=And(), values=[Name(id='v', ctx=Load()), Constant(value=1)]), Constant(value=0)]))], orelse=[])], decorator_list=[])], decorator_list=[]), ClassDef(name='DateField', bases=[Name(id='_DateField', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='db_value', ctx=Store())], value=Name(id='nh', ctx=Load()))], decorator_list=[]), ClassDef(name='TimeField', bases=[Name(id='_TimeField', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='db_value', ctx=Store())], value=Name(id='nh', ctx=Load()))], decorator_list=[]), ClassDef(name='DateTimeField', bases=[Name(id='_DateTimeField', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='db_value', ctx=Store())], value=Name(id='nh', ctx=Load()))], decorator_list=[]), ClassDef(name='DecimalField', bases=[Name(id='_DecimalField', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='db_value', ctx=Store())], value=Name(id='nh', ctx=Load()))], decorator_list=[])], type_ignores=[])