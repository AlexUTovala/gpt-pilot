Module(body=[Import(names=[alias(name='json')]), Import(names=[alias(name='math')]), Import(names=[alias(name='re')]), Import(names=[alias(name='struct')]), Import(names=[alias(name='sys')]), ImportFrom(module='peewee', names=[alias(name='*')], level=0), ImportFrom(module='peewee', names=[alias(name='ColumnBase')], level=0), ImportFrom(module='peewee', names=[alias(name='EnclosedNodeList')], level=0), ImportFrom(module='peewee', names=[alias(name='Entity')], level=0), ImportFrom(module='peewee', names=[alias(name='Expression')], level=0), ImportFrom(module='peewee', names=[alias(name='Insert')], level=0), ImportFrom(module='peewee', names=[alias(name='Node')], level=0), ImportFrom(module='peewee', names=[alias(name='NodeList')], level=0), ImportFrom(module='peewee', names=[alias(name='OP')], level=0), ImportFrom(module='peewee', names=[alias(name='VirtualField')], level=0), ImportFrom(module='peewee', names=[alias(name='merge_dict')], level=0), ImportFrom(module='peewee', names=[alias(name='sqlite3')], level=0), Try(body=[ImportFrom(module='playhouse._sqlite_ext', names=[alias(name='backup'), alias(name='backup_to_file'), alias(name='Blob'), alias(name='ConnectionHelper'), alias(name='register_bloomfilter'), alias(name='register_hash_functions'), alias(name='register_rank_functions'), alias(name='sqlite_get_db_status'), alias(name='sqlite_get_status'), alias(name='TableFunction'), alias(name='ZeroBlob')], level=0), Assign(targets=[Name(id='CYTHON_SQLITE_EXTENSIONS', ctx=Store())], value=Constant(value=True))], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Assign(targets=[Name(id='CYTHON_SQLITE_EXTENSIONS', ctx=Store())], value=Constant(value=False))])], orelse=[], finalbody=[]), If(test=Compare(left=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Constant(value=3)]), body=[Assign(targets=[Name(id='basestring', ctx=Store())], value=Name(id='str', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='FTS3_MATCHINFO', ctx=Store())], value=Constant(value='pcx')), Assign(targets=[Name(id='FTS4_MATCHINFO', ctx=Store())], value=Constant(value='pcnalx')), If(test=Compare(left=Name(id='sqlite3', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='FTS_VERSION', ctx=Store())], value=IfExp(test=Compare(left=Subscript(value=Attribute(value=Name(id='sqlite3', ctx=Load()), attr='sqlite_version_info', ctx=Load()), slice=Slice(upper=Constant(value=3)), ctx=Load()), ops=[GtE()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=7), Constant(value=4)], ctx=Load())]), body=Constant(value=4), orelse=Constant(value=3)))], orelse=[Assign(targets=[Name(id='FTS_VERSION', ctx=Store())], value=Constant(value=3))]), Assign(targets=[Name(id='FTS5_MIN_SQLITE_VERSION', ctx=Store())], value=Tuple(elts=[Constant(value=3), Constant(value=9), Constant(value=0)], ctx=Load())), ClassDef(name='RowIDField', bases=[Name(id='AutoField', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='auto_increment', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='column_name', ctx=Store()), Name(id='name', ctx=Store()), Name(id='required_name', ctx=Store())], value=Constant(value='rowid')), FunctionDef(name='bind', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='model'), arg(arg='name')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='name', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='required_name', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='%s must be named "%s".'), op=Mod(), right=Tuple(elts=[Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='required_name', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[Name(id='RowIDField', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]), attr='bind', ctx=Load()), args=[Name(id='model', ctx=Load()), Name(id='name', ctx=Load()), Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='DocIDField', bases=[Name(id='RowIDField', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='column_name', ctx=Store()), Name(id='name', ctx=Store()), Name(id='required_name', ctx=Store())], value=Constant(value='docid'))], decorator_list=[]), ClassDef(name='AutoIncrementField', bases=[Name(id='AutoField', ctx=Load())], keywords=[], body=[FunctionDef(name='ddl', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ctx')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='node_list', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[Name(id='AutoIncrementField', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]), attr='ddl', ctx=Load()), args=[Name(id='ctx', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='NodeList', ctx=Load()), args=[Tuple(elts=[Name(id='node_list', ctx=Load()), Call(func=Name(id='SQL', ctx=Load()), args=[Constant(value='AUTOINCREMENT')], keywords=[])], ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='TDecimalField', bases=[Name(id='DecimalField', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='field_type', ctx=Store())], value=Constant(value='TEXT')), FunctionDef(name='get_modifiers', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[])], decorator_list=[]), ClassDef(name='JSONPath', bases=[Name(id='ColumnBase', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='field'), arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[Name(id='JSONPath', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_field', ctx=Store())], value=Name(id='field', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_path', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='path', ctx=Load()), Tuple(elts=[], ctx=Load())]))], decorator_list=[]), FunctionDef(name='path', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='Value', ctx=Load()), args=[BinOp(left=Constant(value='$%s'), op=Mod(), right=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_path', ctx=Load())], keywords=[]))], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='__getitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='idx')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='idx', ctx=Load()), Name(id='int', ctx=Load())], keywords=[]), Compare(left=Name(id='idx', ctx=Load()), ops=[Eq()], comparators=[Constant(value='#')])]), body=[Assign(targets=[Name(id='item', ctx=Store())], value=BinOp(left=Constant(value='[%s]'), op=Mod(), right=Name(id='idx', ctx=Load())))], orelse=[Assign(targets=[Name(id='item', ctx=Store())], value=BinOp(left=Constant(value='.%s'), op=Mod(), right=Name(id='idx', ctx=Load())))]), Return(value=Call(func=Name(id='JSONPath', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_field', ctx=Load()), BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_path', ctx=Load()), op=Add(), right=Tuple(elts=[Name(id='item', ctx=Load())], ctx=Load()))], keywords=[]))], decorator_list=[]), FunctionDef(name='append', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value'), arg(arg='as_json')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=BoolOp(op=Or(), values=[Name(id='as_json', ctx=Load()), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Tuple(elts=[Name(id='list', ctx=Load()), Name(id='dict', ctx=Load())], ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='fn', ctx=Load()), attr='json', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_field', ctx=Load()), attr='_json_dumps', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='fn', ctx=Load()), attr='json_set', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_field', ctx=Load()), Attribute(value=Subscript(value=Name(id='self', ctx=Load()), slice=Constant(value='#'), ctx=Load()), attr='path', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_json_operation', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='func'), arg(arg='value'), arg(arg='as_json')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=BoolOp(op=Or(), values=[Name(id='as_json', ctx=Load()), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Tuple(elts=[Name(id='list', ctx=Load()), Name(id='dict', ctx=Load())], ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='fn', ctx=Load()), attr='json', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_field', ctx=Load()), attr='_json_dumps', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='func', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_field', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='path', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='insert', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value'), arg(arg='as_json')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_json_operation', ctx=Load()), args=[Attribute(value=Name(id='fn', ctx=Load()), attr='json_insert', ctx=Load()), Name(id='value', ctx=Load()), Name(id='as_json', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='set', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value'), arg(arg='as_json')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_json_operation', ctx=Load()), args=[Attribute(value=Name(id='fn', ctx=Load()), attr='json_set', ctx=Load()), Name(id='value', ctx=Load()), Name(id='as_json', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='replace', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value'), arg(arg='as_json')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_json_operation', ctx=Load()), args=[Attribute(value=Name(id='fn', ctx=Load()), attr='json_replace', ctx=Load()), Name(id='value', ctx=Load()), Name(id='as_json', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='update', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set', ctx=Load()), args=[Call(func=Attribute(value=Name(id='fn', ctx=Load()), attr='json_patch', ctx=Load()), args=[Name(id='self', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_field', ctx=Load()), attr='_json_dumps', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='remove', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='fn', ctx=Load()), attr='json_remove', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_field', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='path', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='json_type', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='fn', ctx=Load()), attr='json_type', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_field', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='path', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='length', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='fn', ctx=Load()), attr='json_array_length', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_field', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='path', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='children', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='fn', ctx=Load()), attr='json_each', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_field', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='path', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='tree', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='fn', ctx=Load()), attr='json_tree', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_field', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='path', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='__sql__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ctx')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='ctx', ctx=Load()), attr='sql', ctx=Load()), args=[IfExp(test=Attribute(value=Name(id='self', ctx=Load()), attr='_path', ctx=Load()), body=Call(func=Attribute(value=Name(id='fn', ctx=Load()), attr='json_extract', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_field', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='path', ctx=Load())], keywords=[]), orelse=Attribute(value=Name(id='self', ctx=Load()), attr='_field', ctx=Load()))], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='JSONField', bases=[Name(id='TextField', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='field_type', ctx=Store())], value=Constant(value='JSON')), Assign(targets=[Name(id='unpack', ctx=Store())], value=Constant(value=False)), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='json_dumps'), arg(arg='json_loads')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[Constant(value=None), Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_json_dumps', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='json_dumps', ctx=Load()), Attribute(value=Name(id='json', ctx=Load()), attr='dumps', ctx=Load())])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_json_loads', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='json_loads', ctx=Load()), Attribute(value=Name(id='json', ctx=Load()), attr='loads', ctx=Load())])), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[Name(id='JSONField', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='python_value', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='value', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Try(body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_json_loads', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='TypeError', ctx=Load()), Name(id='ValueError', ctx=Load())], ctx=Load()), body=[Return(value=Name(id='value', ctx=Load()))])], orelse=[], finalbody=[])], orelse=[])], decorator_list=[]), FunctionDef(name='db_value', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='value', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='Node', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='fn', ctx=Load()), attr='json', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_json_dumps', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Return(value=Name(id='value', ctx=Load()))], orelse=[])], decorator_list=[]), FunctionDef(name='_e', args=arguments(posonlyargs=[], args=[arg(arg='op')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='inner', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='rhs')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='rhs', ctx=Load()), Tuple(elts=[Name(id='list', ctx=Load()), Name(id='dict', ctx=Load())], ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='rhs', ctx=Store())], value=Call(func=Name(id='Value', ctx=Load()), args=[Name(id='rhs', ctx=Load())], keywords=[keyword(arg='converter', value=Attribute(value=Name(id='self', ctx=Load()), attr='db_value', ctx=Load())), keyword(arg='unpack', value=Constant(value=False))]))], orelse=[]), Return(value=Call(func=Name(id='Expression', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='op', ctx=Load()), Name(id='rhs', ctx=Load())], keywords=[]))], decorator_list=[]), Return(value=Name(id='inner', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='__eq__', ctx=Store())], value=Call(func=Name(id='_e', ctx=Load()), args=[Attribute(value=Name(id='OP', ctx=Load()), attr='EQ', ctx=Load())], keywords=[])), Assign(targets=[Name(id='__ne__', ctx=Store())], value=Call(func=Name(id='_e', ctx=Load()), args=[Attribute(value=Name(id='OP', ctx=Load()), attr='NE', ctx=Load())], keywords=[])), Assign(targets=[Name(id='__gt__', ctx=Store())], value=Call(func=Name(id='_e', ctx=Load()), args=[Attribute(value=Name(id='OP', ctx=Load()), attr='GT', ctx=Load())], keywords=[])), Assign(targets=[Name(id='__ge__', ctx=Store())], value=Call(func=Name(id='_e', ctx=Load()), args=[Attribute(value=Name(id='OP', ctx=Load()), attr='GTE', ctx=Load())], keywords=[])), Assign(targets=[Name(id='__lt__', ctx=Store())], value=Call(func=Name(id='_e', ctx=Load()), args=[Attribute(value=Name(id='OP', ctx=Load()), attr='LT', ctx=Load())], keywords=[])), Assign(targets=[Name(id='__le__', ctx=Store())], value=Call(func=Name(id='_e', ctx=Load()), args=[Attribute(value=Name(id='OP', ctx=Load()), attr='LTE', ctx=Load())], keywords=[])), Assign(targets=[Name(id='__hash__', ctx=Store())], value=Attribute(value=Name(id='Field', ctx=Load()), attr='__hash__', ctx=Load())), FunctionDef(name='__getitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='item')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Subscript(value=Call(func=Name(id='JSONPath', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), slice=Name(id='item', ctx=Load()), ctx=Load()))], decorator_list=[]), FunctionDef(name='extract', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='paths'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='paths', ctx=Store())], value=ListComp(elt=Call(func=Name(id='Value', ctx=Load()), args=[Name(id='p', ctx=Load())], keywords=[keyword(arg='converter', value=Constant(value=False))]), generators=[comprehension(target=Name(id='p', ctx=Store()), iter=Name(id='paths', ctx=Load()), ifs=[], is_async=0)])), Return(value=Call(func=Attribute(value=Name(id='fn', ctx=Load()), attr='json_extract', ctx=Load()), args=[Name(id='self', ctx=Load()), Starred(value=Name(id='paths', ctx=Load()), ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='extract_json', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='Expression', ctx=Load()), args=[Name(id='self', ctx=Load()), Constant(value='->'), Call(func=Name(id='Value', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[keyword(arg='converter', value=Constant(value=False))])], keywords=[]))], decorator_list=[]), FunctionDef(name='extract_text', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='Expression', ctx=Load()), args=[Name(id='self', ctx=Load()), Constant(value='->>'), Call(func=Name(id='Value', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[keyword(arg='converter', value=Constant(value=False))])], keywords=[]))], decorator_list=[]), FunctionDef(name='append', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value'), arg(arg='as_json')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Return(value=Call(func=Attribute(value=Call(func=Name(id='JSONPath', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='append', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='as_json', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='insert', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value'), arg(arg='as_json')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Return(value=Call(func=Attribute(value=Call(func=Name(id='JSONPath', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='insert', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='as_json', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='set', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value'), arg(arg='as_json')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Return(value=Call(func=Attribute(value=Call(func=Name(id='JSONPath', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='set', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='as_json', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='replace', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value'), arg(arg='as_json')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Return(value=Call(func=Attribute(value=Call(func=Name(id='JSONPath', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='replace', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='as_json', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='update', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Call(func=Name(id='JSONPath', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='update', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='remove', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='paths'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='paths', ctx=Load())), body=[Return(value=Call(func=Attribute(value=Call(func=Name(id='JSONPath', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='remove', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='fn', ctx=Load()), attr='json_remove', ctx=Load()), args=[Name(id='self', ctx=Load()), Starred(value=Name(id='paths', ctx=Load()), ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='json_type', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='fn', ctx=Load()), attr='json_type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='length', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Name(id='args', ctx=Store())], value=IfExp(test=Name(id='path', ctx=Load()), body=Tuple(elts=[Name(id='self', ctx=Load()), Name(id='path', ctx=Load())], ctx=Load()), orelse=Tuple(elts=[Name(id='self', ctx=Load())], ctx=Load()))), Return(value=Call(func=Attribute(value=Name(id='fn', ctx=Load()), attr='json_array_length', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='children', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Schema of `json_each` and `json_tree`:\n\n        key,\n        value,\n        type TEXT (object, array, string, etc),\n        atom (value for primitive/scalar types, NULL for array and object)\n        id INTEGER (unique identifier for element)\n        parent INTEGER (unique identifier of parent element or NULL)\n        fullkey TEXT (full path describing element)\n        path TEXT (path to the container of the current element)\n        json JSON hidden (1st input parameter to function)\n        root TEXT hidden (2nd input parameter, path at which to start)\n        ')), Return(value=Call(func=Attribute(value=Name(id='fn', ctx=Load()), attr='json_each', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='tree', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='fn', ctx=Load()), attr='json_tree', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='SearchField', bases=[Name(id='Field', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='unindexed'), arg(arg='column_name')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='k'), defaults=[Constant(value=False), Constant(value=None)]), body=[If(test=Name(id='k', ctx=Load()), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='SearchField does not accept these keyword arguments: %s.'), op=Mod(), right=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='k', ctx=Load())], keywords=[]))], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[Name(id='SearchField', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='unindexed', value=Name(id='unindexed', ctx=Load())), keyword(arg='column_name', value=Name(id='column_name', ctx=Load())), keyword(arg='null', value=Constant(value=True))]))], decorator_list=[]), FunctionDef(name='match', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='term')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='match', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='term', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='fts_column_index', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Constant(value='_fts_column_index')], keywords=[])), body=[Assign(targets=[Name(id='search_fields', ctx=Store())], value=ListComp(elt=Attribute(value=Name(id='f', ctx=Load()), attr='name', ctx=Load()), generators=[comprehension(target=Name(id='f', ctx=Store()), iter=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='model', ctx=Load()), attr='_meta', ctx=Load()), attr='sorted_fields', ctx=Load()), ifs=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='f', ctx=Load()), Name(id='SearchField', ctx=Load())], keywords=[])], is_async=0)])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_fts_column_index', ctx=Store())], value=Call(func=Attribute(value=Name(id='search_fields', ctx=Load()), attr='index', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_fts_column_index', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='highlight', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='left'), arg(arg='right')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='column_idx', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='fts_column_index', ctx=Load())), Return(value=Call(func=Attribute(value=Name(id='fn', ctx=Load()), attr='highlight', ctx=Load()), args=[Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='model', ctx=Load()), attr='_meta', ctx=Load()), attr='entity', ctx=Load()), Name(id='column_idx', ctx=Load()), Name(id='left', ctx=Load()), Name(id='right', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='snippet', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='left'), arg(arg='right'), arg(arg='over_length'), arg(arg='max_tokens')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='...'), Constant(value=16)]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Constant(value=0), ops=[Lt(), Lt()], comparators=[Name(id='max_tokens', ctx=Load()), Constant(value=65)])), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='max_tokens must be between 1 and 64 (inclusive)')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='column_idx', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='fts_column_index', ctx=Load())), Return(value=Call(func=Attribute(value=Name(id='fn', ctx=Load()), attr='snippet', ctx=Load()), args=[Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='model', ctx=Load()), attr='_meta', ctx=Load()), attr='entity', ctx=Load()), Name(id='column_idx', ctx=Load()), Name(id='left', ctx=Load()), Name(id='right', ctx=Load()), Name(id='over_length', ctx=Load()), Name(id='max_tokens', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='VirtualTableSchemaManager', bases=[Name(id='SchemaManager', ctx=Load())], keywords=[], body=[FunctionDef(name='_create_virtual_table', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='safe')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='options'), defaults=[Constant(value=True)]), body=[Assign(targets=[Name(id='options', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='model', ctx=Load()), attr='clean_options', ctx=Load()), args=[Call(func=Name(id='merge_dict', ctx=Load()), args=[Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='model', ctx=Load()), attr='_meta', ctx=Load()), attr='options', ctx=Load()), Name(id='options', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='ctx', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_create_context', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='ctx', ctx=Load()), attr='literal', ctx=Load()), args=[Constant(value='CREATE VIRTUAL TABLE ')], keywords=[])), If(test=Name(id='safe', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='ctx', ctx=Load()), attr='literal', ctx=Load()), args=[Constant(value='IF NOT EXISTS ')], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='ctx', ctx=Load()), attr='sql', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='model', ctx=Load())], keywords=[]), attr='literal', ctx=Load()), args=[Constant(value=' USING ')], keywords=[])), Assign(targets=[Name(id='ext_module', ctx=Store())], value=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='model', ctx=Load()), attr='_meta', ctx=Load()), attr='extension_module', ctx=Load())), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='ext_module', ctx=Load()), Name(id='Node', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Attribute(value=Name(id='ctx', ctx=Load()), attr='sql', ctx=Load()), args=[Name(id='ext_module', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='ctx', ctx=Load()), attr='sql', ctx=Load()), args=[Call(func=Name(id='SQL', ctx=Load()), args=[Name(id='ext_module', ctx=Load())], keywords=[])], keywords=[]), attr='literal', ctx=Load()), args=[Constant(value=' ')], keywords=[])), Assign(targets=[Name(id='arguments', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='meta', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='model', ctx=Load()), attr='_meta', ctx=Load())), If(test=Attribute(value=Name(id='meta', ctx=Load()), attr='prefix_arguments', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='arguments', ctx=Load()), attr='extend', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='SQL', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='a', ctx=Store()), iter=Attribute(value=Name(id='meta', ctx=Load()), attr='prefix_arguments', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], orelse=[]), For(target=Name(id='field', ctx=Store()), iter=Attribute(value=Name(id='meta', ctx=Load()), attr='sorted_fields', ctx=Load()), body=[If(test=BoolOp(op=Or(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='field', ctx=Load()), Name(id='RowIDField', ctx=Load())], keywords=[]), Attribute(value=Name(id='field', ctx=Load()), attr='_hidden', ctx=Load())]), body=[Continue()], orelse=[]), Assign(targets=[Name(id='field_def', ctx=Store())], value=List(elts=[Call(func=Name(id='Entity', ctx=Load()), args=[Attribute(value=Name(id='field', ctx=Load()), attr='column_name', ctx=Load())], keywords=[])], ctx=Load())), If(test=Attribute(value=Name(id='field', ctx=Load()), attr='unindexed', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='field_def', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='SQL', ctx=Load()), args=[Constant(value='UNINDEXED')], keywords=[])], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='arguments', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='NodeList', ctx=Load()), args=[Name(id='field_def', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='meta', ctx=Load()), attr='arguments', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='arguments', ctx=Load()), attr='extend', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='SQL', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='a', ctx=Store()), iter=Attribute(value=Name(id='meta', ctx=Load()), attr='arguments', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], orelse=[]), If(test=Name(id='options', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='arguments', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_create_table_option_sql', ctx=Load()), args=[Name(id='options', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='ctx', ctx=Load()), attr='sql', ctx=Load()), args=[Call(func=Name(id='EnclosedNodeList', ctx=Load()), args=[Name(id='arguments', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='_create_table', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='safe')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='options'), defaults=[Constant(value=True)]), body=[If(test=Call(func=Name(id='issubclass', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='model', ctx=Load()), Name(id='VirtualModel', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_create_virtual_table', ctx=Load()), args=[Name(id='safe', ctx=Load())], keywords=[keyword(value=Name(id='options', ctx=Load()))]))], orelse=[]), Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[Name(id='VirtualTableSchemaManager', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]), attr='_create_table', ctx=Load()), args=[Name(id='safe', ctx=Load())], keywords=[keyword(value=Name(id='options', ctx=Load()))]))], decorator_list=[])], decorator_list=[]), ClassDef(name='VirtualModel', bases=[Name(id='Model', ctx=Load())], keywords=[], body=[ClassDef(name='Meta', bases=[], keywords=[], body=[Assign(targets=[Name(id='arguments', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='extension_module', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='prefix_arguments', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='primary_key', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='schema_manager_class', ctx=Store())], value=Name(id='VirtualTableSchemaManager', ctx=Load()))], decorator_list=[]), FunctionDef(name='clean_options', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='options')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Name(id='options', ctx=Load()))], decorator_list=[Name(id='classmethod', ctx=Load())])], decorator_list=[]), ClassDef(name='BaseFTSModel', bases=[Name(id='VirtualModel', ctx=Load())], keywords=[], body=[FunctionDef(name='clean_options', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='options')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='content', ctx=Store())], value=Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='content')], keywords=[])), Assign(targets=[Name(id='prefix', ctx=Store())], value=Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='prefix')], keywords=[])), Assign(targets=[Name(id='tokenize', ctx=Store())], value=Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='tokenize')], keywords=[])), If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='content', ctx=Load()), Name(id='basestring', ctx=Load())], keywords=[]), Compare(left=Name(id='content', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')])]), body=[Assign(targets=[Subscript(value=Name(id='options', ctx=Load()), slice=Constant(value='content'), ctx=Store())], value=Constant(value="''"))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='content', ctx=Load()), Name(id='Field', ctx=Load())], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='options', ctx=Load()), slice=Constant(value='content'), ctx=Store())], value=Call(func=Name(id='Entity', ctx=Load()), args=[Attribute(value=Attribute(value=Attribute(value=Name(id='content', ctx=Load()), attr='model', ctx=Load()), attr='_meta', ctx=Load()), attr='table_name', ctx=Load()), Attribute(value=Name(id='content', ctx=Load()), attr='column_name', ctx=Load())], keywords=[]))], orelse=[])]), If(test=Name(id='prefix', ctx=Load()), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='prefix', ctx=Load()), Tuple(elts=[Name(id='list', ctx=Load()), Name(id='tuple', ctx=Load())], ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='prefix', ctx=Store())], value=Call(func=Attribute(value=Constant(value=','), attr='join', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='str', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Name(id='prefix', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='options', ctx=Load()), slice=Constant(value='prefix'), ctx=Store())], value=BinOp(left=Constant(value="'%s'"), op=Mod(), right=Call(func=Attribute(value=Name(id='prefix', ctx=Load()), attr='strip', ctx=Load()), args=[Constant(value="' ")], keywords=[])))], orelse=[]), If(test=BoolOp(op=And(), values=[Name(id='tokenize', ctx=Load()), Compare(left=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='cls', ctx=Load()), attr='_meta', ctx=Load()), attr='extension_module', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Constant(value='fts5')])]), body=[Assign(targets=[Subscript(value=Name(id='options', ctx=Load()), slice=Constant(value='tokenize'), ctx=Store())], value=BinOp(left=Constant(value='"%s"'), op=Mod(), right=Name(id='tokenize', ctx=Load())))], orelse=[]), Return(value=Name(id='options', ctx=Load()))], decorator_list=[Name(id='classmethod', ctx=Load())])], decorator_list=[]), ClassDef(name='FTSModel', bases=[Name(id='BaseFTSModel', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    VirtualModel class for creating tables that use either the FTS3 or FTS4\n    search extensions. Peewee automatically determines which version of the\n    FTS extension is supported and will use FTS4 if possible.\n    ')), Assign(targets=[Name(id='docid', ctx=Store())], value=Call(func=Name(id='DocIDField', ctx=Load()), args=[], keywords=[])), ClassDef(name='Meta', bases=[], keywords=[], body=[Assign(targets=[Name(id='extension_module', ctx=Store())], value=BinOp(left=Constant(value='FTS%s'), op=Mod(), right=Name(id='FTS_VERSION', ctx=Load())))], decorator_list=[]), FunctionDef(name='_fts_cmd', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='cmd')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='tbl', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='cls', ctx=Load()), attr='_meta', ctx=Load()), attr='table_name', ctx=Load())), Assign(targets=[Name(id='res', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='cls', ctx=Load()), attr='_meta', ctx=Load()), attr='database', ctx=Load()), attr='execute_sql', ctx=Load()), args=[BinOp(left=Constant(value="INSERT INTO %s(%s) VALUES('%s');"), op=Mod(), right=Tuple(elts=[Name(id='tbl', ctx=Load()), Name(id='tbl', ctx=Load()), Name(id='cmd', ctx=Load())], ctx=Load()))], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='res', ctx=Load()), attr='fetchone', ctx=Load()), args=[], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='optimize', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='_fts_cmd', ctx=Load()), args=[Constant(value='optimize')], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='rebuild', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='_fts_cmd', ctx=Load()), args=[Constant(value='rebuild')], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='integrity_check', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='_fts_cmd', ctx=Load()), args=[Constant(value='integrity-check')], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='merge', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='blocks'), arg(arg='segments')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=200), Constant(value=8)]), body=[Return(value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='_fts_cmd', ctx=Load()), args=[BinOp(left=Constant(value='merge=%s,%s'), op=Mod(), right=Tuple(elts=[Name(id='blocks', ctx=Load()), Name(id='segments', ctx=Load())], ctx=Load()))], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='automerge', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='state')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Return(value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='_fts_cmd', ctx=Load()), args=[BinOp(left=Constant(value='automerge=%s'), op=Mod(), right=BoolOp(op=Or(), values=[BoolOp(op=And(), values=[Name(id='state', ctx=Load()), Constant(value='1')]), Constant(value='0')]))], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='match', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='term')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Generate a `MATCH` expression appropriate for searching this table.\n        ')), Return(value=Call(func=Name(id='match', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='cls', ctx=Load()), attr='_meta', ctx=Load()), attr='entity', ctx=Load()), Name(id='term', ctx=Load())], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='rank', args=arguments(posonlyargs=[], args=[arg(arg='cls')], vararg=arg(arg='weights'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='matchinfo', ctx=Store())], value=Call(func=Attribute(value=Name(id='fn', ctx=Load()), attr='matchinfo', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='cls', ctx=Load()), attr='_meta', ctx=Load()), attr='entity', ctx=Load()), Name(id='FTS3_MATCHINFO', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='fn', ctx=Load()), attr='fts_rank', ctx=Load()), args=[Name(id='matchinfo', ctx=Load()), Starred(value=Name(id='weights', ctx=Load()), ctx=Load())], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='bm25', args=arguments(posonlyargs=[], args=[arg(arg='cls')], vararg=arg(arg='weights'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='match_info', ctx=Store())], value=Call(func=Attribute(value=Name(id='fn', ctx=Load()), attr='matchinfo', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='cls', ctx=Load()), attr='_meta', ctx=Load()), attr='entity', ctx=Load()), Name(id='FTS4_MATCHINFO', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='fn', ctx=Load()), attr='fts_bm25', ctx=Load()), args=[Name(id='match_info', ctx=Load()), Starred(value=Name(id='weights', ctx=Load()), ctx=Load())], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='bm25f', args=arguments(posonlyargs=[], args=[arg(arg='cls')], vararg=arg(arg='weights'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='match_info', ctx=Store())], value=Call(func=Attribute(value=Name(id='fn', ctx=Load()), attr='matchinfo', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='cls', ctx=Load()), attr='_meta', ctx=Load()), attr='entity', ctx=Load()), Name(id='FTS4_MATCHINFO', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='fn', ctx=Load()), attr='fts_bm25f', ctx=Load()), args=[Name(id='match_info', ctx=Load()), Starred(value=Name(id='weights', ctx=Load()), ctx=Load())], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='lucene', args=arguments(posonlyargs=[], args=[arg(arg='cls')], vararg=arg(arg='weights'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='match_info', ctx=Store())], value=Call(func=Attribute(value=Name(id='fn', ctx=Load()), attr='matchinfo', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='cls', ctx=Load()), attr='_meta', ctx=Load()), attr='entity', ctx=Load()), Name(id='FTS4_MATCHINFO', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='fn', ctx=Load()), attr='fts_lucene', ctx=Load()), args=[Name(id='match_info', ctx=Load()), Starred(value=Name(id='weights', ctx=Load()), ctx=Load())], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='_search', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='term'), arg(arg='weights'), arg(arg='with_score'), arg(arg='score_alias'), arg(arg='score_fn'), arg(arg='explicit_ordering')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='weights', ctx=Load())), body=[Assign(targets=[Name(id='rank', ctx=Store())], value=Call(func=Name(id='score_fn', ctx=Load()), args=[], keywords=[]))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='weights', ctx=Load()), Name(id='dict', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='weight_args', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='field', ctx=Store()), iter=Attribute(value=Attribute(value=Name(id='cls', ctx=Load()), attr='_meta', ctx=Load()), attr='sorted_fields', ctx=Load()), body=[Assign(targets=[Name(id='field_weight', ctx=Store())], value=Call(func=Attribute(value=Name(id='weights', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='field', ctx=Load()), Call(func=Attribute(value=Name(id='weights', ctx=Load()), attr='get', ctx=Load()), args=[Attribute(value=Name(id='field', ctx=Load()), attr='name', ctx=Load()), Constant(value=1.0)], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='weight_args', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='field_weight', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='rank', ctx=Store())], value=Call(func=Name(id='score_fn', ctx=Load()), args=[Starred(value=Name(id='weight_args', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='rank', ctx=Store())], value=Call(func=Name(id='score_fn', ctx=Load()), args=[Starred(value=Name(id='weights', ctx=Load()), ctx=Load())], keywords=[]))])]), Assign(targets=[Name(id='selection', ctx=Store())], value=Tuple(elts=[], ctx=Load())), Assign(targets=[Name(id='order_by', ctx=Store())], value=Name(id='rank', ctx=Load())), If(test=Name(id='with_score', ctx=Load()), body=[Assign(targets=[Name(id='selection', ctx=Store())], value=Tuple(elts=[Name(id='cls', ctx=Load()), Call(func=Attribute(value=Name(id='rank', ctx=Load()), attr='alias', ctx=Load()), args=[Name(id='score_alias', ctx=Load())], keywords=[])], ctx=Load()))], orelse=[]), If(test=BoolOp(op=And(), values=[Name(id='with_score', ctx=Load()), UnaryOp(op=Not(), operand=Name(id='explicit_ordering', ctx=Load()))]), body=[Assign(targets=[Name(id='order_by', ctx=Store())], value=Call(func=Name(id='SQL', ctx=Load()), args=[Name(id='score_alias', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='select', ctx=Load()), args=[Starred(value=Name(id='selection', ctx=Load()), ctx=Load())], keywords=[]), attr='where', ctx=Load()), args=[Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='term', ctx=Load())], keywords=[])], keywords=[]), attr='order_by', ctx=Load()), args=[Name(id='order_by', ctx=Load())], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='term'), arg(arg='weights'), arg(arg='with_score'), arg(arg='score_alias'), arg(arg='explicit_ordering')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=False), Constant(value='score'), Constant(value=False)]), body=[Expr(value=Constant(value='Full-text search using selected `term`.')), Return(value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='_search', ctx=Load()), args=[Name(id='term', ctx=Load()), Name(id='weights', ctx=Load()), Name(id='with_score', ctx=Load()), Name(id='score_alias', ctx=Load()), Attribute(value=Name(id='cls', ctx=Load()), attr='rank', ctx=Load()), Name(id='explicit_ordering', ctx=Load())], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='search_bm25', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='term'), arg(arg='weights'), arg(arg='with_score'), arg(arg='score_alias'), arg(arg='explicit_ordering')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=False), Constant(value='score'), Constant(value=False)]), body=[Expr(value=Constant(value='Full-text search for selected `term` using BM25 algorithm.')), Return(value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='_search', ctx=Load()), args=[Name(id='term', ctx=Load()), Name(id='weights', ctx=Load()), Name(id='with_score', ctx=Load()), Name(id='score_alias', ctx=Load()), Attribute(value=Name(id='cls', ctx=Load()), attr='bm25', ctx=Load()), Name(id='explicit_ordering', ctx=Load())], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='search_bm25f', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='term'), arg(arg='weights'), arg(arg='with_score'), arg(arg='score_alias'), arg(arg='explicit_ordering')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=False), Constant(value='score'), Constant(value=False)]), body=[Expr(value=Constant(value='Full-text search for selected `term` using BM25 algorithm.')), Return(value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='_search', ctx=Load()), args=[Name(id='term', ctx=Load()), Name(id='weights', ctx=Load()), Name(id='with_score', ctx=Load()), Name(id='score_alias', ctx=Load()), Attribute(value=Name(id='cls', ctx=Load()), attr='bm25f', ctx=Load()), Name(id='explicit_ordering', ctx=Load())], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='search_lucene', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='term'), arg(arg='weights'), arg(arg='with_score'), arg(arg='score_alias'), arg(arg='explicit_ordering')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=False), Constant(value='score'), Constant(value=False)]), body=[Expr(value=Constant(value='Full-text search for selected `term` using BM25 algorithm.')), Return(value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='_search', ctx=Load()), args=[Name(id='term', ctx=Load()), Name(id='weights', ctx=Load()), Name(id='with_score', ctx=Load()), Name(id='score_alias', ctx=Load()), Attribute(value=Name(id='cls', ctx=Load()), attr='lucene', ctx=Load()), Name(id='explicit_ordering', ctx=Load())], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())])], decorator_list=[]), Assign(targets=[Name(id='_alphabet', ctx=Store())], value=Constant(value='abcdefghijklmnopqrstuvwxyz')), Assign(targets=[Name(id='_alphanum', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=Call(func=Name(id='set', ctx=Load()), args=[Constant(value='\t ,"(){}*:_+0123456789')], keywords=[]), op=BitOr(), right=Call(func=Name(id='set', ctx=Load()), args=[Name(id='_alphabet', ctx=Load())], keywords=[])), op=BitOr(), right=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Name(id='_alphabet', ctx=Load()), attr='upper', ctx=Load()), args=[], keywords=[])], keywords=[])), op=BitOr(), right=Call(func=Name(id='set', ctx=Load()), args=[Tuple(elts=[Call(func=Name(id='chr', ctx=Load()), args=[Constant(value=26)], keywords=[])], ctx=Load())], keywords=[]))), Assign(targets=[Name(id='_invalid_ascii', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='chr', ctx=Load()), args=[Name(id='p', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='p', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=128)], keywords=[]), ifs=[Compare(left=Call(func=Name(id='chr', ctx=Load()), args=[Name(id='p', ctx=Load())], keywords=[]), ops=[NotIn()], comparators=[Name(id='_alphanum', ctx=Load())])], is_async=0)])], keywords=[])), Delete(targets=[Name(id='_alphabet', ctx=Del())]), Delete(targets=[Name(id='_alphanum', ctx=Del())]), Assign(targets=[Name(id='_quote_re', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='(?:[^\\s"]|"(?:\\\\.|[^"])*")+')], keywords=[])), ClassDef(name='FTS5Model', bases=[Name(id='BaseFTSModel', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Requires SQLite >= 3.9.0.\n\n    Table options:\n\n    content: table name of external content, or empty string for "contentless"\n    content_rowid: column name of external content primary key\n    prefix: integer(s). Ex: \'2\' or \'2 3 4\'\n    tokenize: porter, unicode61, ascii. Ex: \'porter unicode61\'\n\n    The unicode tokenizer supports the following parameters:\n\n    * remove_diacritics (1 or 0, default is 1)\n    * tokenchars (string of characters, e.g. \'-_\'\n    * separators (string of characters)\n\n    Parameters are passed as alternating parameter name and value, so:\n\n    {\'tokenize\': "unicode61 remove_diacritics 0 tokenchars \'-_\'"}\n\n    Content-less tables:\n\n    If you don\'t need the full-text content in it\'s original form, you can\n    specify a content-less table. Searches and auxiliary functions will work\n    as usual, but the only values returned when SELECT-ing can be rowid. Also\n    content-less tables do not support UPDATE or DELETE.\n\n    External content tables:\n\n    You can set up triggers to sync these, e.g.\n\n    -- Create a table. And an external content fts5 table to index it.\n    CREATE TABLE tbl(a INTEGER PRIMARY KEY, b);\n    CREATE VIRTUAL TABLE ft USING fts5(b, content=\'tbl\', content_rowid=\'a\');\n\n    -- Triggers to keep the FTS index up to date.\n    CREATE TRIGGER tbl_ai AFTER INSERT ON tbl BEGIN\n      INSERT INTO ft(rowid, b) VALUES (new.a, new.b);\n    END;\n    CREATE TRIGGER tbl_ad AFTER DELETE ON tbl BEGIN\n      INSERT INTO ft(fts_idx, rowid, b) VALUES(\'delete\', old.a, old.b);\n    END;\n    CREATE TRIGGER tbl_au AFTER UPDATE ON tbl BEGIN\n      INSERT INTO ft(fts_idx, rowid, b) VALUES(\'delete\', old.a, old.b);\n      INSERT INTO ft(rowid, b) VALUES (new.a, new.b);\n    END;\n\n    Built-in auxiliary functions:\n\n    * bm25(tbl[, weight_0, ... weight_n])\n    * highlight(tbl, col_idx, prefix, suffix)\n    * snippet(tbl, col_idx, prefix, suffix, ?, max_tokens)\n    ')), Assign(targets=[Name(id='rowid', ctx=Store())], value=Call(func=Name(id='RowIDField', ctx=Load()), args=[], keywords=[])), ClassDef(name='Meta', bases=[], keywords=[], body=[Assign(targets=[Name(id='extension_module', ctx=Store())], value=Constant(value='fts5'))], decorator_list=[]), Assign(targets=[Name(id='_error_messages', ctx=Store())], value=Dict(keys=[Constant(value='field_type'), Constant(value='index'), Constant(value='pk')], values=[Constant(value='Besides the implicit `rowid` column, all columns must be instances of SearchField'), Constant(value='Secondary indexes are not supported for FTS5 models'), Constant(value='FTS5 models must use the default `rowid` primary key')])), FunctionDef(name='validate_model', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Attribute(value=Attribute(value=Name(id='cls', ctx=Load()), attr='_meta', ctx=Load()), attr='primary_key', ctx=Load()), attr='name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='rowid')]), body=[Raise(exc=Call(func=Name(id='ImproperlyConfigured', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='cls', ctx=Load()), attr='_error_messages', ctx=Load()), slice=Constant(value='pk'), ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='field', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='cls', ctx=Load()), attr='_meta', ctx=Load()), attr='fields', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='field', ctx=Load()), Tuple(elts=[Name(id='SearchField', ctx=Load()), Name(id='RowIDField', ctx=Load())], ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='ImproperlyConfigured', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='cls', ctx=Load()), attr='_error_messages', ctx=Load()), slice=Constant(value='field_type'), ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), If(test=Attribute(value=Attribute(value=Name(id='cls', ctx=Load()), attr='_meta', ctx=Load()), attr='indexes', ctx=Load()), body=[Raise(exc=Call(func=Name(id='ImproperlyConfigured', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='cls', ctx=Load()), attr='_error_messages', ctx=Load()), slice=Constant(value='index'), ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='fts5_installed', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Subscript(value=Attribute(value=Name(id='sqlite3', ctx=Load()), attr='sqlite_version_info', ctx=Load()), slice=Slice(upper=Constant(value=3)), ctx=Load()), ops=[Lt()], comparators=[Name(id='FTS5_MIN_SQLITE_VERSION', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='tmp_db', ctx=Store())], value=Call(func=Attribute(value=Name(id='sqlite3', ctx=Load()), attr='connect', ctx=Load()), args=[Constant(value=':memory:')], keywords=[])), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='tmp_db', ctx=Load()), attr='execute', ctx=Load()), args=[Constant(value='CREATE VIRTUAL TABLE fts5test USING fts5 (data);')], keywords=[]))], handlers=[ExceptHandler(body=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='tmp_db', ctx=Load()), attr='enable_load_extension', ctx=Load()), args=[Constant(value=True)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='tmp_db', ctx=Load()), attr='load_extension', ctx=Load()), args=[Constant(value='fts5')], keywords=[]))], handlers=[ExceptHandler(body=[Return(value=Constant(value=False))])], orelse=[Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='cls', ctx=Load()), attr='_meta', ctx=Load()), attr='database', ctx=Load()), attr='load_extension', ctx=Load()), args=[Constant(value='fts5')], keywords=[]))], finalbody=[])])], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='tmp_db', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))]), Return(value=Constant(value=True))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='validate_query', args=arguments(posonlyargs=[], args=[arg(arg='query')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Simple helper function to indicate whether a search query is a\n        valid FTS5 query. Note: this simply looks at the characters being\n        used, and is not guaranteed to catch all problematic queries.\n        ')), Assign(targets=[Name(id='tokens', ctx=Store())], value=Call(func=Attribute(value=Name(id='_quote_re', ctx=Load()), attr='findall', ctx=Load()), args=[Name(id='query', ctx=Load())], keywords=[])), For(target=Name(id='token', ctx=Store()), iter=Name(id='tokens', ctx=Load()), body=[If(test=BoolOp(op=And(), values=[Call(func=Attribute(value=Name(id='token', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='"')], keywords=[]), Call(func=Attribute(value=Name(id='token', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='"')], keywords=[])]), body=[Continue()], orelse=[]), If(test=BinOp(left=Call(func=Name(id='set', ctx=Load()), args=[Name(id='token', ctx=Load())], keywords=[]), op=BitAnd(), right=Name(id='_invalid_ascii', ctx=Load())), body=[Return(value=Constant(value=False))], orelse=[])], orelse=[]), Return(value=Constant(value=True))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='clean_query', args=arguments(posonlyargs=[], args=[arg(arg='query'), arg(arg='replace')], kwonlyargs=[], kw_defaults=[], defaults=[Call(func=Name(id='chr', ctx=Load()), args=[Constant(value=26)], keywords=[])]), body=[Expr(value=Constant(value='\n        Clean a query of invalid tokens.\n        ')), Assign(targets=[Name(id='accum', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='any_invalid', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='tokens', ctx=Store())], value=Call(func=Attribute(value=Name(id='_quote_re', ctx=Load()), attr='findall', ctx=Load()), args=[Name(id='query', ctx=Load())], keywords=[])), For(target=Name(id='token', ctx=Store()), iter=Name(id='tokens', ctx=Load()), body=[If(test=BoolOp(op=And(), values=[Call(func=Attribute(value=Name(id='token', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='"')], keywords=[]), Call(func=Attribute(value=Name(id='token', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='"')], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='accum', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='token', ctx=Load())], keywords=[])), Continue()], orelse=[]), Assign(targets=[Name(id='token_set', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Name(id='token', ctx=Load())], keywords=[])), Assign(targets=[Name(id='invalid_for_token', ctx=Store())], value=BinOp(left=Name(id='token_set', ctx=Load()), op=BitAnd(), right=Name(id='_invalid_ascii', ctx=Load()))), If(test=Name(id='invalid_for_token', ctx=Load()), body=[Assign(targets=[Name(id='any_invalid', ctx=Store())], value=Constant(value=True)), For(target=Name(id='c', ctx=Store()), iter=Name(id='invalid_for_token', ctx=Load()), body=[Assign(targets=[Name(id='token', ctx=Store())], value=Call(func=Attribute(value=Name(id='token', ctx=Load()), attr='replace', ctx=Load()), args=[Name(id='c', ctx=Load()), Name(id='replace', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='accum', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='token', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='any_invalid', ctx=Load()), body=[Return(value=Call(func=Attribute(value=Constant(value=' '), attr='join', ctx=Load()), args=[Name(id='accum', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='query', ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='match', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='term')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Generate a `MATCH` expression appropriate for searching this table.\n        ')), Return(value=Call(func=Name(id='match', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='cls', ctx=Load()), attr='_meta', ctx=Load()), attr='entity', ctx=Load()), Name(id='term', ctx=Load())], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='rank', args=arguments(posonlyargs=[], args=[arg(arg='cls')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=IfExp(test=Name(id='args', ctx=Load()), body=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='bm25', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[]), orelse=Call(func=Name(id='SQL', ctx=Load()), args=[Constant(value='rank')], keywords=[])))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='bm25', args=arguments(posonlyargs=[], args=[arg(arg='cls')], vararg=arg(arg='weights'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='fn', ctx=Load()), attr='bm25', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='cls', ctx=Load()), attr='_meta', ctx=Load()), attr='entity', ctx=Load()), Starred(value=Name(id='weights', ctx=Load()), ctx=Load())], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='search', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='term'), arg(arg='weights'), arg(arg='with_score'), arg(arg='score_alias'), arg(arg='explicit_ordering')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=False), Constant(value='score'), Constant(value=False)]), body=[Expr(value=Constant(value='Full-text search using selected `term`.')), Return(value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='search_bm25', ctx=Load()), args=[Call(func=Attribute(value=Name(id='FTS5Model', ctx=Load()), attr='clean_query', ctx=Load()), args=[Name(id='term', ctx=Load())], keywords=[]), Name(id='weights', ctx=Load()), Name(id='with_score', ctx=Load()), Name(id='score_alias', ctx=Load()), Name(id='explicit_ordering', ctx=Load())], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='search_bm25', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='term'), arg(arg='weights'), arg(arg='with_score'), arg(arg='score_alias'), arg(arg='explicit_ordering')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=False), Constant(value='score'), Constant(value=False)]), body=[Expr(value=Constant(value='Full-text search using selected `term`.')), If(test=UnaryOp(op=Not(), operand=Name(id='weights', ctx=Load())), body=[Assign(targets=[Name(id='rank', ctx=Store())], value=Call(func=Name(id='SQL', ctx=Load()), args=[Constant(value='rank')], keywords=[]))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='weights', ctx=Load()), Name(id='dict', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='weight_args', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='field', ctx=Store()), iter=Attribute(value=Attribute(value=Name(id='cls', ctx=Load()), attr='_meta', ctx=Load()), attr='sorted_fields', ctx=Load()), body=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='field', ctx=Load()), Name(id='SearchField', ctx=Load())], keywords=[]), UnaryOp(op=Not(), operand=Attribute(value=Name(id='field', ctx=Load()), attr='unindexed', ctx=Load()))]), body=[Expr(value=Call(func=Attribute(value=Name(id='weight_args', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='weights', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='field', ctx=Load()), Call(func=Attribute(value=Name(id='weights', ctx=Load()), attr='get', ctx=Load()), args=[Attribute(value=Name(id='field', ctx=Load()), attr='name', ctx=Load()), Constant(value=1.0)], keywords=[])], keywords=[])], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='rank', ctx=Store())], value=Call(func=Attribute(value=Name(id='fn', ctx=Load()), attr='bm25', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='cls', ctx=Load()), attr='_meta', ctx=Load()), attr='entity', ctx=Load()), Starred(value=Name(id='weight_args', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='rank', ctx=Store())], value=Call(func=Attribute(value=Name(id='fn', ctx=Load()), attr='bm25', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='cls', ctx=Load()), attr='_meta', ctx=Load()), attr='entity', ctx=Load()), Starred(value=Name(id='weights', ctx=Load()), ctx=Load())], keywords=[]))])]), Assign(targets=[Name(id='selection', ctx=Store())], value=Tuple(elts=[], ctx=Load())), Assign(targets=[Name(id='order_by', ctx=Store())], value=Name(id='rank', ctx=Load())), If(test=Name(id='with_score', ctx=Load()), body=[Assign(targets=[Name(id='selection', ctx=Store())], value=Tuple(elts=[Name(id='cls', ctx=Load()), Call(func=Attribute(value=Name(id='rank', ctx=Load()), attr='alias', ctx=Load()), args=[Name(id='score_alias', ctx=Load())], keywords=[])], ctx=Load()))], orelse=[]), If(test=BoolOp(op=And(), values=[Name(id='with_score', ctx=Load()), UnaryOp(op=Not(), operand=Name(id='explicit_ordering', ctx=Load()))]), body=[Assign(targets=[Name(id='order_by', ctx=Store())], value=Call(func=Name(id='SQL', ctx=Load()), args=[Name(id='score_alias', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='select', ctx=Load()), args=[Starred(value=Name(id='selection', ctx=Load()), ctx=Load())], keywords=[]), attr='where', ctx=Load()), args=[Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='match', ctx=Load()), args=[Call(func=Attribute(value=Name(id='FTS5Model', ctx=Load()), attr='clean_query', ctx=Load()), args=[Name(id='term', ctx=Load())], keywords=[])], keywords=[])], keywords=[]), attr='order_by', ctx=Load()), args=[Name(id='order_by', ctx=Load())], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='_fts_cmd_sql', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='cmd')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='extra_params'), defaults=[]), body=[Assign(targets=[Name(id='tbl', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='cls', ctx=Load()), attr='_meta', ctx=Load()), attr='entity', ctx=Load())), Assign(targets=[Name(id='columns', ctx=Store())], value=List(elts=[Name(id='tbl', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='values', ctx=Store())], value=List(elts=[Name(id='cmd', ctx=Load())], ctx=Load())), For(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='extra_params', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='columns', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='Entity', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='values', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='NodeList', ctx=Load()), args=[Tuple(elts=[Call(func=Name(id='SQL', ctx=Load()), args=[Constant(value='INSERT INTO')], keywords=[]), Attribute(value=Attribute(value=Name(id='cls', ctx=Load()), attr='_meta', ctx=Load()), attr='entity', ctx=Load()), Call(func=Name(id='EnclosedNodeList', ctx=Load()), args=[Name(id='columns', ctx=Load())], keywords=[]), Call(func=Name(id='SQL', ctx=Load()), args=[Constant(value='VALUES')], keywords=[]), Call(func=Name(id='EnclosedNodeList', ctx=Load()), args=[Name(id='values', ctx=Load())], keywords=[])], ctx=Load())], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='_fts_cmd', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='cmd')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='extra_params'), defaults=[]), body=[Assign(targets=[Name(id='query', ctx=Store())], value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='_fts_cmd_sql', ctx=Load()), args=[Name(id='cmd', ctx=Load())], keywords=[keyword(value=Name(id='extra_params', ctx=Load()))])), Return(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='cls', ctx=Load()), attr='_meta', ctx=Load()), attr='database', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='query', ctx=Load())], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='automerge', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='level')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Constant(value=0), ops=[LtE(), LtE()], comparators=[Name(id='level', ctx=Load()), Constant(value=16)])), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='level must be between 0 and 16')], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='_fts_cmd', ctx=Load()), args=[Constant(value='automerge')], keywords=[keyword(arg='rank', value=Name(id='level', ctx=Load()))]))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='merge', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='npages')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='_fts_cmd', ctx=Load()), args=[Constant(value='merge')], keywords=[keyword(arg='rank', value=Name(id='npages', ctx=Load()))]))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='optimize', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='_fts_cmd', ctx=Load()), args=[Constant(value='optimize')], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='rebuild', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='_fts_cmd', ctx=Load()), args=[Constant(value='rebuild')], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='set_pgsz', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='pgsz')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='_fts_cmd', ctx=Load()), args=[Constant(value='pgsz')], keywords=[keyword(arg='rank', value=Name(id='pgsz', ctx=Load()))]))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='set_rank', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='rank_expression')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='_fts_cmd', ctx=Load()), args=[Constant(value='rank')], keywords=[keyword(arg='rank', value=Name(id='rank_expression', ctx=Load()))]))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='delete_all', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='_fts_cmd', ctx=Load()), args=[Constant(value='delete-all')], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='integrity_check', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='rank')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[Return(value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='_fts_cmd', ctx=Load()), args=[Constant(value='integrity-check')], keywords=[keyword(arg='rank', value=Name(id='rank', ctx=Load()))]))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='VocabModel', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='table_type'), arg(arg='table')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='row'), Constant(value=None)]), body=[If(test=Compare(left=Name(id='table_type', ctx=Load()), ops=[NotIn()], comparators=[Tuple(elts=[Constant(value='row'), Constant(value='col'), Constant(value='instance')], ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='table_type must be either "row", "col" or "instance".')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='attr', ctx=Store())], value=BinOp(left=Constant(value='_vocab_model_%s'), op=Mod(), right=Name(id='table_type', ctx=Load()))), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='cls', ctx=Load()), Name(id='attr', ctx=Load())], keywords=[])), body=[ClassDef(name='Meta', bases=[], keywords=[], body=[Assign(targets=[Name(id='database', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='cls', ctx=Load()), attr='_meta', ctx=Load()), attr='database', ctx=Load())), Assign(targets=[Name(id='table_name', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='table', ctx=Load()), BinOp(left=Attribute(value=Attribute(value=Name(id='cls', ctx=Load()), attr='_meta', ctx=Load()), attr='table_name', ctx=Load()), op=Add(), right=Constant(value='_v'))])), Assign(targets=[Name(id='extension_module', ctx=Store())], value=Call(func=Attribute(value=Name(id='fn', ctx=Load()), attr='fts5vocab', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='cls', ctx=Load()), attr='_meta', ctx=Load()), attr='entity', ctx=Load()), Call(func=Name(id='SQL', ctx=Load()), args=[Name(id='table_type', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), Assign(targets=[Name(id='attrs', ctx=Store())], value=Dict(keys=[Constant(value='term'), Constant(value='doc'), Constant(value='cnt'), Constant(value='rowid'), Constant(value='Meta')], values=[Call(func=Name(id='VirtualField', ctx=Load()), args=[Name(id='TextField', ctx=Load())], keywords=[]), Call(func=Name(id='IntegerField', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='IntegerField', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='RowIDField', ctx=Load()), args=[], keywords=[]), Name(id='Meta', ctx=Load())])), If(test=Compare(left=Name(id='table_type', ctx=Load()), ops=[Eq()], comparators=[Constant(value='col')]), body=[Assign(targets=[Subscript(value=Name(id='attrs', ctx=Load()), slice=Constant(value='col'), ctx=Store())], value=Call(func=Name(id='VirtualField', ctx=Load()), args=[Name(id='TextField', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='table_type', ctx=Load()), ops=[Eq()], comparators=[Constant(value='instance')]), body=[Assign(targets=[Subscript(value=Name(id='attrs', ctx=Load()), slice=Constant(value='offset'), ctx=Store())], value=Call(func=Name(id='VirtualField', ctx=Load()), args=[Name(id='IntegerField', ctx=Load())], keywords=[]))], orelse=[])]), Assign(targets=[Name(id='class_name', ctx=Store())], value=BinOp(left=Constant(value='%sVocab'), op=Mod(), right=Attribute(value=Name(id='cls', ctx=Load()), attr='__name__', ctx=Load()))), Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='cls', ctx=Load()), Name(id='attr', ctx=Load()), Call(func=Name(id='type', ctx=Load()), args=[Name(id='class_name', ctx=Load()), Tuple(elts=[Name(id='VirtualModel', ctx=Load())], ctx=Load()), Name(id='attrs', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='cls', ctx=Load()), Name(id='attr', ctx=Load())], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())])], decorator_list=[]), FunctionDef(name='ClosureTable', args=arguments(posonlyargs=[], args=[arg(arg='model_class'), arg(arg='foreign_key'), arg(arg='referencing_class'), arg(arg='referencing_key')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='Model factory for the transitive closure extension.')), If(test=Compare(left=Name(id='referencing_class', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='referencing_class', ctx=Store())], value=Name(id='model_class', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='foreign_key', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[For(target=Name(id='field_obj', ctx=Store()), iter=Attribute(value=Attribute(value=Name(id='model_class', ctx=Load()), attr='_meta', ctx=Load()), attr='refs', ctx=Load()), body=[If(test=Compare(left=Attribute(value=Name(id='field_obj', ctx=Load()), attr='rel_model', ctx=Load()), ops=[Is()], comparators=[Name(id='model_class', ctx=Load())]), body=[Assign(targets=[Name(id='foreign_key', ctx=Store())], value=Name(id='field_obj', ctx=Load())), Break()], orelse=[])], orelse=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Unable to find self-referential foreign key.')], keywords=[]))])], orelse=[]), Assign(targets=[Name(id='source_key', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='model_class', ctx=Load()), attr='_meta', ctx=Load()), attr='primary_key', ctx=Load())), If(test=Compare(left=Name(id='referencing_key', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='referencing_key', ctx=Store())], value=Name(id='source_key', ctx=Load()))], orelse=[]), ClassDef(name='BaseClosureTable', bases=[Name(id='VirtualModel', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='depth', ctx=Store())], value=Call(func=Name(id='VirtualField', ctx=Load()), args=[Name(id='IntegerField', ctx=Load())], keywords=[])), Assign(targets=[Name(id='id', ctx=Store())], value=Call(func=Name(id='VirtualField', ctx=Load()), args=[Name(id='IntegerField', ctx=Load())], keywords=[])), Assign(targets=[Name(id='idcolumn', ctx=Store())], value=Call(func=Name(id='VirtualField', ctx=Load()), args=[Name(id='TextField', ctx=Load())], keywords=[])), Assign(targets=[Name(id='parentcolumn', ctx=Store())], value=Call(func=Name(id='VirtualField', ctx=Load()), args=[Name(id='TextField', ctx=Load())], keywords=[])), Assign(targets=[Name(id='root', ctx=Store())], value=Call(func=Name(id='VirtualField', ctx=Load()), args=[Name(id='IntegerField', ctx=Load())], keywords=[])), Assign(targets=[Name(id='tablename', ctx=Store())], value=Call(func=Name(id='VirtualField', ctx=Load()), args=[Name(id='TextField', ctx=Load())], keywords=[])), ClassDef(name='Meta', bases=[], keywords=[], body=[Assign(targets=[Name(id='extension_module', ctx=Store())], value=Constant(value='transitive_closure'))], decorator_list=[]), FunctionDef(name='descendants', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='node'), arg(arg='depth'), arg(arg='include_node')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=False)]), body=[Assign(targets=[Name(id='query', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='model_class', ctx=Load()), attr='select', ctx=Load()), args=[Name(id='model_class', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='cls', ctx=Load()), attr='depth', ctx=Load()), attr='alias', ctx=Load()), args=[Constant(value='depth')], keywords=[])], keywords=[]), attr='join', ctx=Load()), args=[Name(id='cls', ctx=Load())], keywords=[keyword(arg='on', value=Compare(left=Name(id='source_key', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='cls', ctx=Load()), attr='id', ctx=Load())]))]), attr='where', ctx=Load()), args=[Compare(left=Attribute(value=Name(id='cls', ctx=Load()), attr='root', ctx=Load()), ops=[Eq()], comparators=[Name(id='node', ctx=Load())])], keywords=[]), attr='objects', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='depth', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='query', ctx=Store())], value=Call(func=Attribute(value=Name(id='query', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Attribute(value=Name(id='cls', ctx=Load()), attr='depth', ctx=Load()), ops=[Eq()], comparators=[Name(id='depth', ctx=Load())])], keywords=[]))], orelse=[If(test=UnaryOp(op=Not(), operand=Name(id='include_node', ctx=Load())), body=[Assign(targets=[Name(id='query', ctx=Store())], value=Call(func=Attribute(value=Name(id='query', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Attribute(value=Name(id='cls', ctx=Load()), attr='depth', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)])], keywords=[]))], orelse=[])]), Return(value=Name(id='query', ctx=Load()))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='ancestors', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='node'), arg(arg='depth'), arg(arg='include_node')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=False)]), body=[Assign(targets=[Name(id='query', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='model_class', ctx=Load()), attr='select', ctx=Load()), args=[Name(id='model_class', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='cls', ctx=Load()), attr='depth', ctx=Load()), attr='alias', ctx=Load()), args=[Constant(value='depth')], keywords=[])], keywords=[]), attr='join', ctx=Load()), args=[Name(id='cls', ctx=Load())], keywords=[keyword(arg='on', value=Compare(left=Name(id='source_key', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='cls', ctx=Load()), attr='root', ctx=Load())]))]), attr='where', ctx=Load()), args=[Compare(left=Attribute(value=Name(id='cls', ctx=Load()), attr='id', ctx=Load()), ops=[Eq()], comparators=[Name(id='node', ctx=Load())])], keywords=[]), attr='objects', ctx=Load()), args=[], keywords=[])), If(test=Name(id='depth', ctx=Load()), body=[Assign(targets=[Name(id='query', ctx=Store())], value=Call(func=Attribute(value=Name(id='query', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Attribute(value=Name(id='cls', ctx=Load()), attr='depth', ctx=Load()), ops=[Eq()], comparators=[Name(id='depth', ctx=Load())])], keywords=[]))], orelse=[If(test=UnaryOp(op=Not(), operand=Name(id='include_node', ctx=Load())), body=[Assign(targets=[Name(id='query', ctx=Store())], value=Call(func=Attribute(value=Name(id='query', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Attribute(value=Name(id='cls', ctx=Load()), attr='depth', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)])], keywords=[]))], orelse=[])]), Return(value=Name(id='query', ctx=Load()))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='siblings', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='node'), arg(arg='include_node')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[If(test=Compare(left=Name(id='referencing_class', ctx=Load()), ops=[Is()], comparators=[Name(id='model_class', ctx=Load())]), body=[Assign(targets=[Name(id='fk_value', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='node', ctx=Load()), attr='__data__', ctx=Load()), attr='get', ctx=Load()), args=[Attribute(value=Name(id='foreign_key', ctx=Load()), attr='name', ctx=Load())], keywords=[])), Assign(targets=[Name(id='query', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='model_class', ctx=Load()), attr='select', ctx=Load()), args=[], keywords=[]), attr='where', ctx=Load()), args=[Compare(left=Name(id='foreign_key', ctx=Load()), ops=[Eq()], comparators=[Name(id='fk_value', ctx=Load())])], keywords=[]))], orelse=[Assign(targets=[Name(id='siblings', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='referencing_class', ctx=Load()), attr='select', ctx=Load()), args=[Name(id='referencing_key', ctx=Load())], keywords=[]), attr='join', ctx=Load()), args=[Name(id='cls', ctx=Load())], keywords=[keyword(arg='on', value=Compare(left=Name(id='foreign_key', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='cls', ctx=Load()), attr='root', ctx=Load())]))]), attr='where', ctx=Load()), args=[BinOp(left=Compare(left=Attribute(value=Name(id='cls', ctx=Load()), attr='id', ctx=Load()), ops=[Eq()], comparators=[Name(id='node', ctx=Load())]), op=BitAnd(), right=Compare(left=Attribute(value=Name(id='cls', ctx=Load()), attr='depth', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]))], keywords=[])), Assign(targets=[Name(id='query', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='model_class', ctx=Load()), attr='select', ctx=Load()), args=[], keywords=[]), attr='where', ctx=Load()), args=[BinOp(left=Name(id='source_key', ctx=Load()), op=LShift(), right=Name(id='siblings', ctx=Load()))], keywords=[]), attr='objects', ctx=Load()), args=[], keywords=[]))]), If(test=UnaryOp(op=Not(), operand=Name(id='include_node', ctx=Load())), body=[Assign(targets=[Name(id='query', ctx=Store())], value=Call(func=Attribute(value=Name(id='query', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='source_key', ctx=Load()), ops=[NotEq()], comparators=[Name(id='node', ctx=Load())])], keywords=[]))], orelse=[]), Return(value=Name(id='query', ctx=Load()))], decorator_list=[Name(id='classmethod', ctx=Load())])], decorator_list=[]), ClassDef(name='Meta', bases=[], keywords=[], body=[Assign(targets=[Name(id='database', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='referencing_class', ctx=Load()), attr='_meta', ctx=Load()), attr='database', ctx=Load())), Assign(targets=[Name(id='options', ctx=Store())], value=Dict(keys=[Constant(value='tablename'), Constant(value='idcolumn'), Constant(value='parentcolumn')], values=[Attribute(value=Attribute(value=Name(id='referencing_class', ctx=Load()), attr='_meta', ctx=Load()), attr='table_name', ctx=Load()), Attribute(value=Name(id='referencing_key', ctx=Load()), attr='column_name', ctx=Load()), Attribute(value=Name(id='foreign_key', ctx=Load()), attr='column_name', ctx=Load())])), Assign(targets=[Name(id='primary_key', ctx=Store())], value=Constant(value=False))], decorator_list=[]), Assign(targets=[Name(id='name', ctx=Store())], value=BinOp(left=Constant(value='%sClosure'), op=Mod(), right=Attribute(value=Name(id='model_class', ctx=Load()), attr='__name__', ctx=Load()))), Return(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='name', ctx=Load()), Tuple(elts=[Name(id='BaseClosureTable', ctx=Load())], ctx=Load()), Dict(keys=[Constant(value='Meta')], values=[Name(id='Meta', ctx=Load())])], keywords=[]))], decorator_list=[]), ClassDef(name='LSMTable', bases=[Name(id='VirtualModel', ctx=Load())], keywords=[], body=[ClassDef(name='Meta', bases=[], keywords=[], body=[Assign(targets=[Name(id='extension_module', ctx=Store())], value=Constant(value='lsm1')), Assign(targets=[Name(id='filename', ctx=Store())], value=Constant(value=None))], decorator_list=[]), FunctionDef(name='clean_options', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='options')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='filename', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='cls', ctx=Load()), attr='_meta', ctx=Load()), attr='filename', ctx=Load())), If(test=UnaryOp(op=Not(), operand=Name(id='filename', ctx=Load())), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='LSM1 extension requires that you specify a filename for the LSM database.')], keywords=[]))], orelse=[If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[]), ops=[GtE()], comparators=[Constant(value=2)]), Compare(left=Subscript(value=Name(id='filename', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[NotEq()], comparators=[Constant(value='"')])]), body=[Assign(targets=[Name(id='filename', ctx=Store())], value=BinOp(left=Constant(value='"%s"'), op=Mod(), right=Name(id='filename', ctx=Load())))], orelse=[])]), If(test=UnaryOp(op=Not(), operand=Attribute(value=Attribute(value=Name(id='cls', ctx=Load()), attr='_meta', ctx=Load()), attr='primary_key', ctx=Load())), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='LSM1 models must specify a primary-key field.')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='key', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='cls', ctx=Load()), attr='_meta', ctx=Load()), attr='primary_key', ctx=Load())), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='key', ctx=Load()), Name(id='AutoField', ctx=Load())], keywords=[]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='LSM1 models must explicitly declare a primary key field.')], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='key', ctx=Load()), Tuple(elts=[Name(id='TextField', ctx=Load()), Name(id='BlobField', ctx=Load()), Name(id='IntegerField', ctx=Load())], ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='LSM1 key must be a TextField, BlobField, or IntegerField.')], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='key', ctx=Load()), attr='_hidden', ctx=Store())], value=Constant(value=True)), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='key', ctx=Load()), Name(id='IntegerField', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='data_type', ctx=Store())], value=Constant(value='UINT'))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='key', ctx=Load()), Name(id='BlobField', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='data_type', ctx=Store())], value=Constant(value='BLOB'))], orelse=[Assign(targets=[Name(id='data_type', ctx=Store())], value=Constant(value='TEXT'))])]), Assign(targets=[Attribute(value=Attribute(value=Name(id='cls', ctx=Load()), attr='_meta', ctx=Load()), attr='prefix_arguments', ctx=Store())], value=List(elts=[Name(id='filename', ctx=Load()), BinOp(left=Constant(value='"%s"'), op=Mod(), right=Attribute(value=Name(id='key', ctx=Load()), attr='name', ctx=Load())), Name(id='data_type', ctx=Load())], ctx=Load())), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='cls', ctx=Load()), attr='_meta', ctx=Load()), attr='sorted_fields', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=2)]), body=[Assign(targets=[Attribute(value=Attribute(value=Name(id='cls', ctx=Load()), attr='_meta', ctx=Load()), attr='_value_field', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='cls', ctx=Load()), attr='_meta', ctx=Load()), attr='sorted_fields', ctx=Load()), slice=Constant(value=1), ctx=Load()))], orelse=[Assign(targets=[Attribute(value=Attribute(value=Name(id='cls', ctx=Load()), attr='_meta', ctx=Load()), attr='_value_field', ctx=Store())], value=Constant(value=None))]), Return(value=Name(id='options', ctx=Load()))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='load_extension', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='lsm.so')]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='cls', ctx=Load()), attr='_meta', ctx=Load()), attr='database', ctx=Load()), attr='load_extension', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='slice_to_expr', args=arguments(posonlyargs=[], args=[arg(arg='key'), arg(arg='idx')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='idx', ctx=Load()), attr='start', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='idx', ctx=Load()), attr='stop', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Return(value=Call(func=Attribute(value=Name(id='key', ctx=Load()), attr='between', ctx=Load()), args=[Attribute(value=Name(id='idx', ctx=Load()), attr='start', ctx=Load()), Attribute(value=Name(id='idx', ctx=Load()), attr='stop', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Attribute(value=Name(id='idx', ctx=Load()), attr='start', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=Compare(left=Name(id='key', ctx=Load()), ops=[GtE()], comparators=[Attribute(value=Name(id='idx', ctx=Load()), attr='start', ctx=Load())]))], orelse=[If(test=Compare(left=Attribute(value=Name(id='idx', ctx=Load()), attr='stop', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=Compare(left=Name(id='key', ctx=Load()), ops=[LtE()], comparators=[Attribute(value=Name(id='idx', ctx=Load()), attr='stop', ctx=Load())]))], orelse=[])])])], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='_apply_lookup_to_query', args=arguments(posonlyargs=[], args=[arg(arg='query'), arg(arg='key'), arg(arg='lookup')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='lookup', ctx=Load()), Name(id='slice', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='expr', ctx=Store())], value=Call(func=Attribute(value=Name(id='LSMTable', ctx=Load()), attr='slice_to_expr', ctx=Load()), args=[Name(id='key', ctx=Load()), Name(id='lookup', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='expr', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='query', ctx=Store())], value=Call(func=Attribute(value=Name(id='query', ctx=Load()), attr='where', ctx=Load()), args=[Name(id='expr', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Tuple(elts=[Name(id='query', ctx=Load()), Constant(value=False)], ctx=Load()))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='lookup', ctx=Load()), Name(id='Expression', ctx=Load())], keywords=[]), body=[Return(value=Tuple(elts=[Call(func=Attribute(value=Name(id='query', ctx=Load()), attr='where', ctx=Load()), args=[Name(id='lookup', ctx=Load())], keywords=[]), Constant(value=False)], ctx=Load()))], orelse=[Return(value=Tuple(elts=[Call(func=Attribute(value=Name(id='query', ctx=Load()), attr='where', ctx=Load()), args=[Compare(left=Name(id='key', ctx=Load()), ops=[Eq()], comparators=[Name(id='lookup', ctx=Load())])], keywords=[]), Constant(value=True)], ctx=Load()))])])], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='get_by_id', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='pk')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='query', ctx=Store()), Name(id='is_single', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='_apply_lookup_to_query', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='select', ctx=Load()), args=[], keywords=[]), attr='namedtuples', ctx=Load()), args=[], keywords=[]), Attribute(value=Attribute(value=Name(id='cls', ctx=Load()), attr='_meta', ctx=Load()), attr='primary_key', ctx=Load()), Name(id='pk', ctx=Load())], keywords=[])), If(test=Name(id='is_single', ctx=Load()), body=[Assign(targets=[Name(id='row', ctx=Store())], value=Call(func=Attribute(value=Name(id='query', ctx=Load()), attr='get', ctx=Load()), args=[], keywords=[])), Return(value=IfExp(test=Compare(left=Attribute(value=Attribute(value=Name(id='cls', ctx=Load()), attr='_meta', ctx=Load()), attr='_value_field', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Subscript(value=Name(id='row', ctx=Load()), slice=Constant(value=1), ctx=Load()), orelse=Name(id='row', ctx=Load())))], orelse=[Return(value=Name(id='query', ctx=Load()))])], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='set_by_id', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='key'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Attribute(value=Name(id='cls', ctx=Load()), attr='_meta', ctx=Load()), attr='_value_field', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='data', ctx=Store())], value=Dict(keys=[Attribute(value=Attribute(value=Name(id='cls', ctx=Load()), attr='_meta', ctx=Load()), attr='_value_field', ctx=Load())], values=[Name(id='value', ctx=Load())]))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='tuple', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='data', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='field', ctx=Store()), Name(id='fval', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Subscript(value=Attribute(value=Attribute(value=Name(id='cls', ctx=Load()), attr='_meta', ctx=Load()), attr='sorted_fields', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), Name(id='value', ctx=Load())], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='data', ctx=Load()), slice=Name(id='field', ctx=Load()), ctx=Store())], value=Name(id='fval', ctx=Load()))], orelse=[])], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='dict', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='data', ctx=Store())], value=Name(id='value', ctx=Load()))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='cls', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='data', ctx=Store())], value=Attribute(value=Name(id='value', ctx=Load()), attr='__dict__', ctx=Load()))], orelse=[])])])]), Assign(targets=[Subscript(value=Name(id='data', ctx=Load()), slice=Attribute(value=Attribute(value=Name(id='cls', ctx=Load()), attr='_meta', ctx=Load()), attr='primary_key', ctx=Load()), ctx=Store())], value=Name(id='key', ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='replace', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]), attr='execute', ctx=Load()), args=[], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='delete_by_id', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='pk')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='query', ctx=Store()), Name(id='is_single', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='_apply_lookup_to_query', ctx=Load()), args=[Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='delete', ctx=Load()), args=[], keywords=[]), Attribute(value=Attribute(value=Name(id='cls', ctx=Load()), attr='_meta', ctx=Load()), attr='primary_key', ctx=Load()), Name(id='pk', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='query', ctx=Load()), attr='execute', ctx=Load()), args=[], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())])], decorator_list=[]), Assign(targets=[Attribute(value=Name(id='OP', ctx=Load()), attr='MATCH', ctx=Store())], value=Constant(value='MATCH')), FunctionDef(name='_sqlite_regexp', args=arguments(posonlyargs=[], args=[arg(arg='regex'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Compare(left=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='search', ctx=Load()), args=[Name(id='regex', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]), ops=[IsNot()], comparators=[Constant(value=None)]))], decorator_list=[]), ClassDef(name='SqliteExtDatabase', bases=[Name(id='SqliteDatabase', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='database'), arg(arg='c_extensions'), arg(arg='rank_functions'), arg(arg='hash_functions'), arg(arg='regexp_function'), arg(arg='bloomfilter'), arg(arg='json_contains')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[Constant(value=None), Constant(value=True), Constant(value=False), Constant(value=False), Constant(value=False), Constant(value=False)]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[Name(id='SqliteExtDatabase', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]), attr='__init__', ctx=Load()), args=[Name(id='database', ctx=Load()), Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_row_factory', ctx=Store())], value=Constant(value=None)), If(test=BoolOp(op=And(), values=[Name(id='c_extensions', ctx=Load()), UnaryOp(op=Not(), operand=Name(id='CYTHON_SQLITE_EXTENSIONS', ctx=Load()))]), body=[Raise(exc=Call(func=Name(id='ImproperlyConfigured', ctx=Load()), args=[Constant(value='SqliteExtDatabase initialized with C extensions, but shared library was not found!')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='prefer_c', ctx=Store())], value=BoolOp(op=And(), values=[Name(id='CYTHON_SQLITE_EXTENSIONS', ctx=Load()), Compare(left=Name(id='c_extensions', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=False)])])), If(test=Name(id='rank_functions', ctx=Load()), body=[If(test=Name(id='prefer_c', ctx=Load()), body=[Expr(value=Call(func=Name(id='register_rank_functions', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='register_function', ctx=Load()), args=[Name(id='bm25', ctx=Load()), Constant(value='fts_bm25')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='register_function', ctx=Load()), args=[Name(id='rank', ctx=Load()), Constant(value='fts_rank')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='register_function', ctx=Load()), args=[Name(id='bm25', ctx=Load()), Constant(value='fts_bm25f')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='register_function', ctx=Load()), args=[Name(id='bm25', ctx=Load()), Constant(value='fts_lucene')], keywords=[]))])], orelse=[]), If(test=Name(id='hash_functions', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Name(id='prefer_c', ctx=Load())), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='C extension required to register hash functions.')], keywords=[]))], orelse=[]), Expr(value=Call(func=Name(id='register_hash_functions', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='regexp_function', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='register_function', ctx=Load()), args=[Name(id='_sqlite_regexp', ctx=Load()), Constant(value='regexp'), Constant(value=2)], keywords=[]))], orelse=[]), If(test=Name(id='bloomfilter', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Name(id='prefer_c', ctx=Load())), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='C extension required to use bloomfilter.')], keywords=[]))], orelse=[]), Expr(value=Call(func=Name(id='register_bloomfilter', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='json_contains', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='register_function', ctx=Load()), args=[Name(id='_json_contains', ctx=Load()), Constant(value='json_contains')], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_c_extensions', ctx=Store())], value=Name(id='prefer_c', ctx=Load()))], decorator_list=[]), FunctionDef(name='_add_conn_hooks', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='conn')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[Name(id='SqliteExtDatabase', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]), attr='_add_conn_hooks', ctx=Load()), args=[Name(id='conn', ctx=Load())], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_row_factory', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='conn', ctx=Load()), attr='row_factory', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_row_factory', ctx=Load()))], orelse=[])], decorator_list=[]), FunctionDef(name='row_factory', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='fn')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_row_factory', ctx=Store())], value=Name(id='fn', ctx=Load()))], decorator_list=[])], decorator_list=[]), If(test=Name(id='CYTHON_SQLITE_EXTENSIONS', ctx=Load()), body=[Assign(targets=[Name(id='SQLITE_STATUS_MEMORY_USED', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='SQLITE_STATUS_PAGECACHE_USED', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='SQLITE_STATUS_PAGECACHE_OVERFLOW', ctx=Store())], value=Constant(value=2)), Assign(targets=[Name(id='SQLITE_STATUS_SCRATCH_USED', ctx=Store())], value=Constant(value=3)), Assign(targets=[Name(id='SQLITE_STATUS_SCRATCH_OVERFLOW', ctx=Store())], value=Constant(value=4)), Assign(targets=[Name(id='SQLITE_STATUS_MALLOC_SIZE', ctx=Store())], value=Constant(value=5)), Assign(targets=[Name(id='SQLITE_STATUS_PARSER_STACK', ctx=Store())], value=Constant(value=6)), Assign(targets=[Name(id='SQLITE_STATUS_PAGECACHE_SIZE', ctx=Store())], value=Constant(value=7)), Assign(targets=[Name(id='SQLITE_STATUS_SCRATCH_SIZE', ctx=Store())], value=Constant(value=8)), Assign(targets=[Name(id='SQLITE_STATUS_MALLOC_COUNT', ctx=Store())], value=Constant(value=9)), Assign(targets=[Name(id='SQLITE_DBSTATUS_LOOKASIDE_USED', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='SQLITE_DBSTATUS_CACHE_USED', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='SQLITE_DBSTATUS_SCHEMA_USED', ctx=Store())], value=Constant(value=2)), Assign(targets=[Name(id='SQLITE_DBSTATUS_STMT_USED', ctx=Store())], value=Constant(value=3)), Assign(targets=[Name(id='SQLITE_DBSTATUS_LOOKASIDE_HIT', ctx=Store())], value=Constant(value=4)), Assign(targets=[Name(id='SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE', ctx=Store())], value=Constant(value=5)), Assign(targets=[Name(id='SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL', ctx=Store())], value=Constant(value=6)), Assign(targets=[Name(id='SQLITE_DBSTATUS_CACHE_HIT', ctx=Store())], value=Constant(value=7)), Assign(targets=[Name(id='SQLITE_DBSTATUS_CACHE_MISS', ctx=Store())], value=Constant(value=8)), Assign(targets=[Name(id='SQLITE_DBSTATUS_CACHE_WRITE', ctx=Store())], value=Constant(value=9)), Assign(targets=[Name(id='SQLITE_DBSTATUS_DEFERRED_FKS', ctx=Store())], value=Constant(value=10)), FunctionDef(name='__status__', args=arguments(posonlyargs=[], args=[arg(arg='flag'), arg(arg='return_highwater')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value='\n        Expose a sqlite3_status() call for a particular flag as a property of\n        the Database object.\n        ')), FunctionDef(name='getter', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='sqlite_get_status', ctx=Load()), args=[Name(id='flag', ctx=Load())], keywords=[])), Return(value=IfExp(test=Name(id='return_highwater', ctx=Load()), body=Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value=1), ctx=Load()), orelse=Name(id='result', ctx=Load())))], decorator_list=[]), Return(value=Call(func=Name(id='property', ctx=Load()), args=[Name(id='getter', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='__dbstatus__', args=arguments(posonlyargs=[], args=[arg(arg='flag'), arg(arg='return_highwater'), arg(arg='return_current')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Constant(value=False)]), body=[Expr(value=Constant(value='\n        Expose a sqlite3_dbstatus() call for a particular flag as a property of\n        the Database instance. Unlike sqlite3_status(), the dbstatus properties\n        pertain to the current connection.\n        ')), FunctionDef(name='getter', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_state', ctx=Load()), attr='conn', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ImproperlyConfigured', ctx=Load()), args=[Constant(value='database connection not opened.')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='sqlite_get_db_status', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_state', ctx=Load()), attr='conn', ctx=Load()), Name(id='flag', ctx=Load())], keywords=[])), If(test=Name(id='return_current', ctx=Load()), body=[Return(value=Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=IfExp(test=Name(id='return_highwater', ctx=Load()), body=Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value=1), ctx=Load()), orelse=Name(id='result', ctx=Load())))], decorator_list=[]), Return(value=Call(func=Name(id='property', ctx=Load()), args=[Name(id='getter', ctx=Load())], keywords=[]))], decorator_list=[]), ClassDef(name='CSqliteExtDatabase', bases=[Name(id='SqliteExtDatabase', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_conn_helper', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_commit_hook', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='_rollback_hook', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='_update_hook', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_replace_busy_handler', ctx=Store())], value=Constant(value=False)), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[Name(id='CSqliteExtDatabase', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]), attr='__init__', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='init', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='database'), arg(arg='replace_busy_handler')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[Constant(value=False)]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[Name(id='CSqliteExtDatabase', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]), attr='init', ctx=Load()), args=[Name(id='database', ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_replace_busy_handler', ctx=Store())], value=Name(id='replace_busy_handler', ctx=Load()))], decorator_list=[]), FunctionDef(name='_close', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='conn')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_commit_hook', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_conn_helper', ctx=Load()), attr='set_commit_hook', ctx=Load()), args=[Constant(value=None)], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_rollback_hook', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_conn_helper', ctx=Load()), attr='set_rollback_hook', ctx=Load()), args=[Constant(value=None)], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_update_hook', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_conn_helper', ctx=Load()), attr='set_update_hook', ctx=Load()), args=[Constant(value=None)], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[Name(id='CSqliteExtDatabase', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]), attr='_close', ctx=Load()), args=[Name(id='conn', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_add_conn_hooks', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='conn')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[Name(id='CSqliteExtDatabase', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]), attr='_add_conn_hooks', ctx=Load()), args=[Name(id='conn', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_conn_helper', ctx=Store())], value=Call(func=Name(id='ConnectionHelper', ctx=Load()), args=[Name(id='conn', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_commit_hook', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_conn_helper', ctx=Load()), attr='set_commit_hook', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_commit_hook', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_rollback_hook', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_conn_helper', ctx=Load()), attr='set_rollback_hook', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_rollback_hook', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_update_hook', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_conn_helper', ctx=Load()), attr='set_update_hook', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_update_hook', ctx=Load())], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_replace_busy_handler', ctx=Load()), body=[Assign(targets=[Name(id='timeout', ctx=Store())], value=BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='_timeout', ctx=Load()), Constant(value=5)])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_conn_helper', ctx=Load()), attr='set_busy_handler', ctx=Load()), args=[BinOp(left=Name(id='timeout', ctx=Load()), op=Mult(), right=Constant(value=1000))], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='on_commit', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='fn')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_commit_hook', ctx=Store())], value=Name(id='fn', ctx=Load())), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='is_closed', ctx=Load()), args=[], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_conn_helper', ctx=Load()), attr='set_commit_hook', ctx=Load()), args=[Name(id='fn', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='fn', ctx=Load()))], decorator_list=[]), FunctionDef(name='on_rollback', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='fn')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_rollback_hook', ctx=Store())], value=Name(id='fn', ctx=Load())), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='is_closed', ctx=Load()), args=[], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_conn_helper', ctx=Load()), attr='set_rollback_hook', ctx=Load()), args=[Name(id='fn', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='fn', ctx=Load()))], decorator_list=[]), FunctionDef(name='on_update', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='fn')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_update_hook', ctx=Store())], value=Name(id='fn', ctx=Load())), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='is_closed', ctx=Load()), args=[], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_conn_helper', ctx=Load()), attr='set_update_hook', ctx=Load()), args=[Name(id='fn', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='fn', ctx=Load()))], decorator_list=[]), FunctionDef(name='changes', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_conn_helper', ctx=Load()), attr='changes', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='last_insert_rowid', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_conn_helper', ctx=Load()), attr='last_insert_rowid', ctx=Load()), args=[], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='autocommit', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_conn_helper', ctx=Load()), attr='autocommit', ctx=Load()), args=[], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='backup', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='destination'), arg(arg='pages'), arg(arg='name'), arg(arg='progress')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Return(value=Call(func=Name(id='backup', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='connection', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='destination', ctx=Load()), attr='connection', ctx=Load()), args=[], keywords=[])], keywords=[keyword(arg='pages', value=Name(id='pages', ctx=Load())), keyword(arg='name', value=Name(id='name', ctx=Load())), keyword(arg='progress', value=Name(id='progress', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='backup_to_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='filename'), arg(arg='pages'), arg(arg='name'), arg(arg='progress')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Return(value=Call(func=Name(id='backup_to_file', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='connection', ctx=Load()), args=[], keywords=[]), Name(id='filename', ctx=Load())], keywords=[keyword(arg='pages', value=Name(id='pages', ctx=Load())), keyword(arg='name', value=Name(id='name', ctx=Load())), keyword(arg='progress', value=Name(id='progress', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='blob_open', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='table'), arg(arg='column'), arg(arg='rowid'), arg(arg='read_only')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Return(value=Call(func=Name(id='Blob', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='table', ctx=Load()), Name(id='column', ctx=Load()), Name(id='rowid', ctx=Load()), Name(id='read_only', ctx=Load())], keywords=[]))], decorator_list=[]), Assign(targets=[Name(id='memory_used', ctx=Store())], value=Call(func=Name(id='__status__', ctx=Load()), args=[Name(id='SQLITE_STATUS_MEMORY_USED', ctx=Load())], keywords=[])), Assign(targets=[Name(id='malloc_size', ctx=Store())], value=Call(func=Name(id='__status__', ctx=Load()), args=[Name(id='SQLITE_STATUS_MALLOC_SIZE', ctx=Load()), Constant(value=True)], keywords=[])), Assign(targets=[Name(id='malloc_count', ctx=Store())], value=Call(func=Name(id='__status__', ctx=Load()), args=[Name(id='SQLITE_STATUS_MALLOC_COUNT', ctx=Load())], keywords=[])), Assign(targets=[Name(id='pagecache_used', ctx=Store())], value=Call(func=Name(id='__status__', ctx=Load()), args=[Name(id='SQLITE_STATUS_PAGECACHE_USED', ctx=Load())], keywords=[])), Assign(targets=[Name(id='pagecache_overflow', ctx=Store())], value=Call(func=Name(id='__status__', ctx=Load()), args=[Name(id='SQLITE_STATUS_PAGECACHE_OVERFLOW', ctx=Load())], keywords=[])), Assign(targets=[Name(id='pagecache_size', ctx=Store())], value=Call(func=Name(id='__status__', ctx=Load()), args=[Name(id='SQLITE_STATUS_PAGECACHE_SIZE', ctx=Load()), Constant(value=True)], keywords=[])), Assign(targets=[Name(id='scratch_used', ctx=Store())], value=Call(func=Name(id='__status__', ctx=Load()), args=[Name(id='SQLITE_STATUS_SCRATCH_USED', ctx=Load())], keywords=[])), Assign(targets=[Name(id='scratch_overflow', ctx=Store())], value=Call(func=Name(id='__status__', ctx=Load()), args=[Name(id='SQLITE_STATUS_SCRATCH_OVERFLOW', ctx=Load())], keywords=[])), Assign(targets=[Name(id='scratch_size', ctx=Store())], value=Call(func=Name(id='__status__', ctx=Load()), args=[Name(id='SQLITE_STATUS_SCRATCH_SIZE', ctx=Load()), Constant(value=True)], keywords=[])), Assign(targets=[Name(id='lookaside_used', ctx=Store())], value=Call(func=Name(id='__dbstatus__', ctx=Load()), args=[Name(id='SQLITE_DBSTATUS_LOOKASIDE_USED', ctx=Load())], keywords=[])), Assign(targets=[Name(id='lookaside_hit', ctx=Store())], value=Call(func=Name(id='__dbstatus__', ctx=Load()), args=[Name(id='SQLITE_DBSTATUS_LOOKASIDE_HIT', ctx=Load()), Constant(value=True)], keywords=[])), Assign(targets=[Name(id='lookaside_miss', ctx=Store())], value=Call(func=Name(id='__dbstatus__', ctx=Load()), args=[Name(id='SQLITE_DBSTATUS_LOOKASIDE_MISS_SIZE', ctx=Load()), Constant(value=True)], keywords=[])), Assign(targets=[Name(id='lookaside_miss_full', ctx=Store())], value=Call(func=Name(id='__dbstatus__', ctx=Load()), args=[Name(id='SQLITE_DBSTATUS_LOOKASIDE_MISS_FULL', ctx=Load()), Constant(value=True)], keywords=[])), Assign(targets=[Name(id='cache_used', ctx=Store())], value=Call(func=Name(id='__dbstatus__', ctx=Load()), args=[Name(id='SQLITE_DBSTATUS_CACHE_USED', ctx=Load()), Constant(value=False), Constant(value=True)], keywords=[])), Assign(targets=[Name(id='schema_used', ctx=Store())], value=Call(func=Name(id='__dbstatus__', ctx=Load()), args=[Name(id='SQLITE_DBSTATUS_SCHEMA_USED', ctx=Load()), Constant(value=False), Constant(value=True)], keywords=[])), Assign(targets=[Name(id='statement_used', ctx=Store())], value=Call(func=Name(id='__dbstatus__', ctx=Load()), args=[Name(id='SQLITE_DBSTATUS_STMT_USED', ctx=Load()), Constant(value=False), Constant(value=True)], keywords=[])), Assign(targets=[Name(id='cache_hit', ctx=Store())], value=Call(func=Name(id='__dbstatus__', ctx=Load()), args=[Name(id='SQLITE_DBSTATUS_CACHE_HIT', ctx=Load()), Constant(value=False), Constant(value=True)], keywords=[])), Assign(targets=[Name(id='cache_miss', ctx=Store())], value=Call(func=Name(id='__dbstatus__', ctx=Load()), args=[Name(id='SQLITE_DBSTATUS_CACHE_MISS', ctx=Load()), Constant(value=False), Constant(value=True)], keywords=[])), Assign(targets=[Name(id='cache_write', ctx=Store())], value=Call(func=Name(id='__dbstatus__', ctx=Load()), args=[Name(id='SQLITE_DBSTATUS_CACHE_WRITE', ctx=Load()), Constant(value=False), Constant(value=True)], keywords=[]))], decorator_list=[])], orelse=[]), FunctionDef(name='match', args=arguments(posonlyargs=[], args=[arg(arg='lhs'), arg(arg='rhs')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='Expression', ctx=Load()), args=[Name(id='lhs', ctx=Load()), Attribute(value=Name(id='OP', ctx=Load()), attr='MATCH', ctx=Load()), Name(id='rhs', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_parse_match_info', args=arguments(posonlyargs=[], args=[arg(arg='buf')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='bufsize', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='buf', ctx=Load())], keywords=[])), Return(value=ListComp(elt=Subscript(value=Call(func=Attribute(value=Name(id='struct', ctx=Load()), attr='unpack', ctx=Load()), args=[Constant(value='@I'), Subscript(value=Name(id='buf', ctx=Load()), slice=Slice(lower=Name(id='i', ctx=Load()), upper=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=4))), ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load()), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Name(id='bufsize', ctx=Load()), Constant(value=4)], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[]), FunctionDef(name='get_weights', args=arguments(posonlyargs=[], args=[arg(arg='ncol'), arg(arg='raw_weights')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='raw_weights', ctx=Load())), body=[Return(value=BinOp(left=List(elts=[Constant(value=1)], ctx=Load()), op=Mult(), right=Name(id='ncol', ctx=Load())))], orelse=[Assign(targets=[Name(id='weights', ctx=Store())], value=BinOp(left=List(elts=[Constant(value=0)], ctx=Load()), op=Mult(), right=Name(id='ncol', ctx=Load()))), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='weight', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='raw_weights', ctx=Load())], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='weights', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Store())], value=Name(id='weight', ctx=Load()))], orelse=[])]), Return(value=Name(id='weights', ctx=Load()))], decorator_list=[]), FunctionDef(name='rank', args=arguments(posonlyargs=[], args=[arg(arg='raw_match_info')], vararg=arg(arg='raw_weights'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='match_info', ctx=Store())], value=Call(func=Name(id='_parse_match_info', ctx=Load()), args=[Name(id='raw_match_info', ctx=Load())], keywords=[])), Assign(targets=[Name(id='score', ctx=Store())], value=Constant(value=0.0)), Assign(targets=[Tuple(elts=[Name(id='p', ctx=Store()), Name(id='c', ctx=Store())], ctx=Store())], value=Subscript(value=Name(id='match_info', ctx=Load()), slice=Slice(upper=Constant(value=2)), ctx=Load())), Assign(targets=[Name(id='weights', ctx=Store())], value=Call(func=Name(id='get_weights', ctx=Load()), args=[Name(id='c', ctx=Load()), Name(id='raw_weights', ctx=Load())], keywords=[])), For(target=Name(id='phrase_num', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='p', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='phrase_info_idx', ctx=Store())], value=BinOp(left=Constant(value=2), op=Add(), right=BinOp(left=BinOp(left=Name(id='phrase_num', ctx=Load()), op=Mult(), right=Name(id='c', ctx=Load())), op=Mult(), right=Constant(value=3)))), For(target=Name(id='col_num', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='weight', ctx=Store())], value=Subscript(value=Name(id='weights', ctx=Load()), slice=Name(id='col_num', ctx=Load()), ctx=Load())), If(test=UnaryOp(op=Not(), operand=Name(id='weight', ctx=Load())), body=[Continue()], orelse=[]), Assign(targets=[Name(id='col_idx', ctx=Store())], value=BinOp(left=Name(id='phrase_info_idx', ctx=Load()), op=Add(), right=BinOp(left=Name(id='col_num', ctx=Load()), op=Mult(), right=Constant(value=3)))), Assign(targets=[Name(id='row_hits', ctx=Store())], value=Subscript(value=Name(id='match_info', ctx=Load()), slice=Name(id='col_idx', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='all_rows_hits', ctx=Store())], value=Subscript(value=Name(id='match_info', ctx=Load()), slice=BinOp(left=Name(id='col_idx', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())), If(test=Compare(left=Name(id='row_hits', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[AugAssign(target=Name(id='score', ctx=Store()), op=Add(), value=BinOp(left=Name(id='weight', ctx=Load()), op=Mult(), right=BinOp(left=Call(func=Name(id='float', ctx=Load()), args=[Name(id='row_hits', ctx=Load())], keywords=[]), op=Div(), right=Name(id='all_rows_hits', ctx=Load()))))], orelse=[])], orelse=[])], orelse=[]), Return(value=UnaryOp(op=USub(), operand=Name(id='score', ctx=Load())))], decorator_list=[]), FunctionDef(name='bm25', args=arguments(posonlyargs=[], args=[arg(arg='raw_match_info')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    Usage:\n\n        # Format string *must* be pcnalx\n        # Second parameter to bm25 specifies the index of the column, on\n        # the table being queries.\n        bm25(matchinfo(document_tbl, 'pcnalx'), 1) AS rank\n    ")), Assign(targets=[Name(id='match_info', ctx=Store())], value=Call(func=Name(id='_parse_match_info', ctx=Load()), args=[Name(id='raw_match_info', ctx=Load())], keywords=[])), Assign(targets=[Name(id='K', ctx=Store())], value=Constant(value=1.2)), Assign(targets=[Name(id='B', ctx=Store())], value=Constant(value=0.75)), Assign(targets=[Name(id='score', ctx=Store())], value=Constant(value=0.0)), Assign(targets=[Tuple(elts=[Name(id='P_O', ctx=Store()), Name(id='C_O', ctx=Store()), Name(id='N_O', ctx=Store()), Name(id='A_O', ctx=Store())], ctx=Store())], value=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=4)], keywords=[])), Assign(targets=[Name(id='term_count', ctx=Store())], value=Subscript(value=Name(id='match_info', ctx=Load()), slice=Name(id='P_O', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='col_count', ctx=Store())], value=Subscript(value=Name(id='match_info', ctx=Load()), slice=Name(id='C_O', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='total_docs', ctx=Store())], value=Subscript(value=Name(id='match_info', ctx=Load()), slice=Name(id='N_O', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='L_O', ctx=Store())], value=BinOp(left=Name(id='A_O', ctx=Load()), op=Add(), right=Name(id='col_count', ctx=Load()))), Assign(targets=[Name(id='X_O', ctx=Store())], value=BinOp(left=Name(id='L_O', ctx=Load()), op=Add(), right=Name(id='col_count', ctx=Load()))), Assign(targets=[Name(id='weights', ctx=Store())], value=Call(func=Name(id='get_weights', ctx=Load()), args=[Name(id='col_count', ctx=Load()), Name(id='args', ctx=Load())], keywords=[])), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='term_count', ctx=Load())], keywords=[]), body=[For(target=Name(id='j', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='col_count', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='weight', ctx=Store())], value=Subscript(value=Name(id='weights', ctx=Load()), slice=Name(id='j', ctx=Load()), ctx=Load())), If(test=Compare(left=Name(id='weight', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Continue()], orelse=[]), Assign(targets=[Name(id='x', ctx=Store())], value=BinOp(left=Name(id='X_O', ctx=Load()), op=Add(), right=BinOp(left=Constant(value=3), op=Mult(), right=BinOp(left=Name(id='j', ctx=Load()), op=Add(), right=BinOp(left=Name(id='i', ctx=Load()), op=Mult(), right=Name(id='col_count', ctx=Load())))))), Assign(targets=[Name(id='term_frequency', ctx=Store())], value=Call(func=Name(id='float', ctx=Load()), args=[Subscript(value=Name(id='match_info', ctx=Load()), slice=Name(id='x', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='docs_with_term', ctx=Store())], value=Call(func=Name(id='float', ctx=Load()), args=[Subscript(value=Name(id='match_info', ctx=Load()), slice=BinOp(left=Name(id='x', ctx=Load()), op=Add(), right=Constant(value=2)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='idf', ctx=Store())], value=Call(func=Attribute(value=Name(id='math', ctx=Load()), attr='log', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=Name(id='total_docs', ctx=Load()), op=Sub(), right=Name(id='docs_with_term', ctx=Load())), op=Add(), right=Constant(value=0.5)), op=Div(), right=BinOp(left=Name(id='docs_with_term', ctx=Load()), op=Add(), right=Constant(value=0.5)))], keywords=[])), If(test=Compare(left=Name(id='idf', ctx=Load()), ops=[LtE()], comparators=[Constant(value=0.0)]), body=[Assign(targets=[Name(id='idf', ctx=Store())], value=Constant(value=1e-06))], orelse=[]), Assign(targets=[Name(id='doc_length', ctx=Store())], value=Call(func=Name(id='float', ctx=Load()), args=[Subscript(value=Name(id='match_info', ctx=Load()), slice=BinOp(left=Name(id='L_O', ctx=Load()), op=Add(), right=Name(id='j', ctx=Load())), ctx=Load())], keywords=[])), Assign(targets=[Name(id='avg_length', ctx=Store())], value=BoolOp(op=Or(), values=[Call(func=Name(id='float', ctx=Load()), args=[Subscript(value=Name(id='match_info', ctx=Load()), slice=BinOp(left=Name(id='A_O', ctx=Load()), op=Add(), right=Name(id='j', ctx=Load())), ctx=Load())], keywords=[]), Constant(value=1.0)])), Assign(targets=[Name(id='ratio', ctx=Store())], value=BinOp(left=Name(id='doc_length', ctx=Load()), op=Div(), right=Name(id='avg_length', ctx=Load()))), Assign(targets=[Name(id='num', ctx=Store())], value=BinOp(left=Name(id='term_frequency', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='K', ctx=Load()), op=Add(), right=Constant(value=1.0)))), Assign(targets=[Name(id='b_part', ctx=Store())], value=BinOp(left=BinOp(left=Constant(value=1.0), op=Sub(), right=Name(id='B', ctx=Load())), op=Add(), right=BinOp(left=Name(id='B', ctx=Load()), op=Mult(), right=Name(id='ratio', ctx=Load())))), Assign(targets=[Name(id='denom', ctx=Store())], value=BinOp(left=Name(id='term_frequency', ctx=Load()), op=Add(), right=BinOp(left=Name(id='K', ctx=Load()), op=Mult(), right=Name(id='b_part', ctx=Load())))), Assign(targets=[Name(id='pc_score', ctx=Store())], value=BinOp(left=Name(id='idf', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='num', ctx=Load()), op=Div(), right=Name(id='denom', ctx=Load())))), AugAssign(target=Name(id='score', ctx=Store()), op=Add(), value=BinOp(left=Name(id='pc_score', ctx=Load()), op=Mult(), right=Name(id='weight', ctx=Load())))], orelse=[])], orelse=[]), Return(value=UnaryOp(op=USub(), operand=Name(id='score', ctx=Load())))], decorator_list=[]), FunctionDef(name='_json_contains', args=arguments(posonlyargs=[], args=[arg(arg='src_json'), arg(arg='obj_json')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='stack', ctx=Store())], value=List(elts=[], ctx=Load())), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='stack', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='loads', ctx=Load()), args=[Name(id='obj_json', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='loads', ctx=Load()), args=[Name(id='src_json', ctx=Load())], keywords=[])], ctx=Load())], keywords=[]))], handlers=[ExceptHandler(body=[Return(value=Constant(value=False))])], orelse=[], finalbody=[]), While(test=Name(id='stack', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='obj', ctx=Store()), Name(id='src', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='stack', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='dict', ctx=Load())], keywords=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='obj', ctx=Load()), Name(id='dict', ctx=Load())], keywords=[]), body=[For(target=Name(id='key', ctx=Store()), iter=Name(id='obj', ctx=Load()), body=[If(test=Compare(left=Name(id='key', ctx=Load()), ops=[NotIn()], comparators=[Name(id='src', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='stack', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Subscript(value=Name(id='obj', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()), Subscript(value=Name(id='src', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load())], ctx=Load())], keywords=[]))], orelse=[])], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='obj', ctx=Load()), Name(id='list', ctx=Load())], keywords=[]), body=[For(target=Name(id='item', ctx=Store()), iter=Name(id='obj', ctx=Load()), body=[If(test=Compare(left=Name(id='item', ctx=Load()), ops=[NotIn()], comparators=[Name(id='src', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[])], orelse=[])], orelse=[If(test=Compare(left=Name(id='obj', ctx=Load()), ops=[NotIn()], comparators=[Name(id='src', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[])])])], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='src', ctx=Load()), Name(id='list', ctx=Load())], keywords=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='obj', ctx=Load()), Name(id='dict', ctx=Load())], keywords=[]), body=[Return(value=Constant(value=False))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='obj', ctx=Load()), Name(id='list', ctx=Load())], keywords=[]), body=[Try(body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='stack', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Subscript(value=Name(id='obj', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), Subscript(value=Name(id='src', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())], ctx=Load())], keywords=[]))], orelse=[])], handlers=[ExceptHandler(type=Name(id='IndexError', ctx=Load()), body=[Return(value=Constant(value=False))])], orelse=[], finalbody=[])], orelse=[If(test=Compare(left=Name(id='obj', ctx=Load()), ops=[NotIn()], comparators=[Name(id='src', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[])])])], orelse=[If(test=Compare(left=Name(id='obj', ctx=Load()), ops=[NotEq()], comparators=[Name(id='src', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[])])])], orelse=[]), Return(value=Constant(value=True))], decorator_list=[])], type_ignores=[])