Module(body=[Import(names=[alias(name='threading')]), ImportFrom(module='peewee', names=[alias(name='*')], level=0), ImportFrom(module='peewee', names=[alias(name='Alias')], level=0), ImportFrom(module='peewee', names=[alias(name='CompoundSelectQuery')], level=0), ImportFrom(module='peewee', names=[alias(name='Metadata')], level=0), ImportFrom(module='peewee', names=[alias(name='callable_')], level=0), ImportFrom(module='peewee', names=[alias(name='__deprecated__')], level=0), Assign(targets=[Name(id='_clone_set', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='s')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=IfExp(test=Name(id='s', ctx=Load()), body=Call(func=Name(id='set', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]), orelse=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])))), FunctionDef(name='model_to_dict', args=arguments(posonlyargs=[], args=[arg(arg='model'), arg(arg='recurse'), arg(arg='backrefs'), arg(arg='only'), arg(arg='exclude'), arg(arg='seen'), arg(arg='extra_attrs'), arg(arg='fields_from_query'), arg(arg='max_depth'), arg(arg='manytomany')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=False), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=False)]), body=[Expr(value=Constant(value='\n    Convert a model instance (and any related objects) to a dictionary.\n\n    :param bool recurse: Whether foreign-keys should be recursed.\n    :param bool backrefs: Whether lists of related objects should be recursed.\n    :param only: A list (or set) of field instances indicating which fields\n        should be included.\n    :param exclude: A list (or set) of field instances that should be\n        excluded from the dictionary.\n    :param list extra_attrs: Names of model instance attributes or methods\n        that should be included.\n    :param SelectQuery fields_from_query: Query that was source of model. Take\n        fields explicitly selected by the query and serialize them.\n    :param int max_depth: Maximum depth to recurse, value <= 0 means no max.\n    :param bool manytomany: Process many-to-many fields.\n    ')), Assign(targets=[Name(id='max_depth', ctx=Store())], value=IfExp(test=Compare(left=Name(id='max_depth', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=UnaryOp(op=USub(), operand=Constant(value=1)), orelse=Name(id='max_depth', ctx=Load()))), If(test=Compare(left=Name(id='max_depth', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='recurse', ctx=Store())], value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='only', ctx=Store())], value=Call(func=Name(id='_clone_set', ctx=Load()), args=[Name(id='only', ctx=Load())], keywords=[])), Assign(targets=[Name(id='extra_attrs', ctx=Store())], value=Call(func=Name(id='_clone_set', ctx=Load()), args=[Name(id='extra_attrs', ctx=Load())], keywords=[])), Assign(targets=[Name(id='should_skip', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='n')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=BoolOp(op=Or(), values=[Compare(left=Name(id='n', ctx=Load()), ops=[In()], comparators=[Name(id='exclude', ctx=Load())]), BoolOp(op=And(), values=[Name(id='only', ctx=Load()), Compare(left=Name(id='n', ctx=Load()), ops=[NotIn()], comparators=[Name(id='only', ctx=Load())])])]))), If(test=Compare(left=Name(id='fields_from_query', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[For(target=Name(id='item', ctx=Store()), iter=Attribute(value=Name(id='fields_from_query', ctx=Load()), attr='_returning', ctx=Load()), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='item', ctx=Load()), Name(id='Field', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='only', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='item', ctx=Load())], keywords=[]))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='item', ctx=Load()), Name(id='Alias', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='extra_attrs', ctx=Load()), attr='add', ctx=Load()), args=[Attribute(value=Name(id='item', ctx=Load()), attr='_alias', ctx=Load())], keywords=[]))], orelse=[])])], orelse=[])], orelse=[]), Assign(targets=[Name(id='data', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='exclude', ctx=Store())], value=Call(func=Name(id='_clone_set', ctx=Load()), args=[Name(id='exclude', ctx=Load())], keywords=[])), Assign(targets=[Name(id='seen', ctx=Store())], value=Call(func=Name(id='_clone_set', ctx=Load()), args=[Name(id='seen', ctx=Load())], keywords=[])), AugAssign(target=Name(id='exclude', ctx=Store()), op=BitOr(), value=Name(id='seen', ctx=Load())), Assign(targets=[Name(id='model_class', ctx=Store())], value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='model', ctx=Load())], keywords=[])), If(test=Name(id='manytomany', ctx=Load()), body=[For(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='m2m', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='manytomany', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Call(func=Name(id='should_skip', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]), body=[Continue()], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='exclude', ctx=Load()), attr='update', ctx=Load()), args=[Tuple(elts=[Name(id='m2m', ctx=Load()), Subscript(value=Attribute(value=Attribute(value=Attribute(value=Name(id='m2m', ctx=Load()), attr='rel_model', ctx=Load()), attr='_meta', ctx=Load()), attr='manytomany', ctx=Load()), slice=Attribute(value=Name(id='m2m', ctx=Load()), attr='backref', ctx=Load()), ctx=Load())], ctx=Load())], keywords=[])), For(target=Name(id='fkf', ctx=Store()), iter=Attribute(value=Attribute(value=Attribute(value=Name(id='m2m', ctx=Load()), attr='through_model', ctx=Load()), attr='_meta', ctx=Load()), attr='refs', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='exclude', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='fkf', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='accum', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='rel_obj', ctx=Store()), iter=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='model', ctx=Load()), Name(id='name', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='accum', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='model_to_dict', ctx=Load()), args=[Name(id='rel_obj', ctx=Load())], keywords=[keyword(arg='recurse', value=Name(id='recurse', ctx=Load())), keyword(arg='backrefs', value=Name(id='backrefs', ctx=Load())), keyword(arg='only', value=Name(id='only', ctx=Load())), keyword(arg='exclude', value=Name(id='exclude', ctx=Load())), keyword(arg='max_depth', value=BinOp(left=Name(id='max_depth', ctx=Load()), op=Sub(), right=Constant(value=1)))])], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='data', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Name(id='accum', ctx=Load()))], orelse=[])], orelse=[]), For(target=Name(id='field', ctx=Store()), iter=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='sorted_fields', ctx=Load()), body=[If(test=Call(func=Name(id='should_skip', ctx=Load()), args=[Name(id='field', ctx=Load())], keywords=[]), body=[Continue()], orelse=[]), Assign(targets=[Name(id='field_data', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='__data__', ctx=Load()), attr='get', ctx=Load()), args=[Attribute(value=Name(id='field', ctx=Load()), attr='name', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='field', ctx=Load()), Name(id='ForeignKeyField', ctx=Load())], keywords=[]), Name(id='recurse', ctx=Load())]), body=[If(test=Compare(left=Name(id='field_data', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='seen', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='field', ctx=Load())], keywords=[])), Assign(targets=[Name(id='rel_obj', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='model', ctx=Load()), Attribute(value=Name(id='field', ctx=Load()), attr='name', ctx=Load())], keywords=[])), Assign(targets=[Name(id='field_data', ctx=Store())], value=Call(func=Name(id='model_to_dict', ctx=Load()), args=[Name(id='rel_obj', ctx=Load())], keywords=[keyword(arg='recurse', value=Name(id='recurse', ctx=Load())), keyword(arg='backrefs', value=Name(id='backrefs', ctx=Load())), keyword(arg='only', value=Name(id='only', ctx=Load())), keyword(arg='exclude', value=Name(id='exclude', ctx=Load())), keyword(arg='seen', value=Name(id='seen', ctx=Load())), keyword(arg='max_depth', value=BinOp(left=Name(id='max_depth', ctx=Load()), op=Sub(), right=Constant(value=1)))]))], orelse=[Assign(targets=[Name(id='field_data', ctx=Store())], value=Constant(value=None))])], orelse=[]), Assign(targets=[Subscript(value=Name(id='data', ctx=Load()), slice=Attribute(value=Name(id='field', ctx=Load()), attr='name', ctx=Load()), ctx=Store())], value=Name(id='field_data', ctx=Load()))], orelse=[]), If(test=Name(id='extra_attrs', ctx=Load()), body=[For(target=Name(id='attr_name', ctx=Store()), iter=Name(id='extra_attrs', ctx=Load()), body=[Assign(targets=[Name(id='attr', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='model', ctx=Load()), Name(id='attr_name', ctx=Load())], keywords=[])), If(test=Call(func=Name(id='callable_', ctx=Load()), args=[Name(id='attr', ctx=Load())], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='data', ctx=Load()), slice=Name(id='attr_name', ctx=Load()), ctx=Store())], value=Call(func=Name(id='attr', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Subscript(value=Name(id='data', ctx=Load()), slice=Name(id='attr_name', ctx=Load()), ctx=Store())], value=Name(id='attr', ctx=Load()))])], orelse=[])], orelse=[]), If(test=BoolOp(op=And(), values=[Name(id='backrefs', ctx=Load()), Name(id='recurse', ctx=Load())]), body=[For(target=Tuple(elts=[Name(id='foreign_key', ctx=Store()), Name(id='rel_model', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='model', ctx=Load()), attr='_meta', ctx=Load()), attr='backrefs', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Attribute(value=Name(id='foreign_key', ctx=Load()), attr='backref', ctx=Load()), ops=[Eq()], comparators=[Constant(value='+')]), body=[Continue()], orelse=[]), Assign(targets=[Name(id='descriptor', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='model_class', ctx=Load()), Attribute(value=Name(id='foreign_key', ctx=Load()), attr='backref', ctx=Load())], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='descriptor', ctx=Load()), ops=[In()], comparators=[Name(id='exclude', ctx=Load())]), Compare(left=Name(id='foreign_key', ctx=Load()), ops=[In()], comparators=[Name(id='exclude', ctx=Load())])]), body=[Continue()], orelse=[]), If(test=BoolOp(op=And(), values=[Name(id='only', ctx=Load()), Compare(left=Name(id='descriptor', ctx=Load()), ops=[NotIn()], comparators=[Name(id='only', ctx=Load())]), Compare(left=Name(id='foreign_key', ctx=Load()), ops=[NotIn()], comparators=[Name(id='only', ctx=Load())])]), body=[Continue()], orelse=[]), Assign(targets=[Name(id='accum', ctx=Store())], value=List(elts=[], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='exclude', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='foreign_key', ctx=Load())], keywords=[])), Assign(targets=[Name(id='related_query', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='model', ctx=Load()), Attribute(value=Name(id='foreign_key', ctx=Load()), attr='backref', ctx=Load())], keywords=[])), For(target=Name(id='rel_obj', ctx=Store()), iter=Name(id='related_query', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='accum', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='model_to_dict', ctx=Load()), args=[Name(id='rel_obj', ctx=Load())], keywords=[keyword(arg='recurse', value=Name(id='recurse', ctx=Load())), keyword(arg='backrefs', value=Name(id='backrefs', ctx=Load())), keyword(arg='only', value=Name(id='only', ctx=Load())), keyword(arg='exclude', value=Name(id='exclude', ctx=Load())), keyword(arg='max_depth', value=BinOp(left=Name(id='max_depth', ctx=Load()), op=Sub(), right=Constant(value=1)))])], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='data', ctx=Load()), slice=Attribute(value=Name(id='foreign_key', ctx=Load()), attr='backref', ctx=Load()), ctx=Store())], value=Name(id='accum', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='data', ctx=Load()))], decorator_list=[]), FunctionDef(name='update_model_from_dict', args=arguments(posonlyargs=[], args=[arg(arg='instance'), arg(arg='data'), arg(arg='ignore_unknown')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Assign(targets=[Name(id='meta', ctx=Store())], value=Attribute(value=Name(id='instance', ctx=Load()), attr='_meta', ctx=Load())), Assign(targets=[Name(id='backrefs', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[ListComp(elt=Tuple(elts=[Attribute(value=Name(id='fk', ctx=Load()), attr='backref', ctx=Load()), Name(id='fk', ctx=Load())], ctx=Load()), generators=[comprehension(target=Name(id='fk', ctx=Store()), iter=Attribute(value=Name(id='meta', ctx=Load()), attr='backrefs', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), For(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Name(id='key', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='meta', ctx=Load()), attr='combined', ctx=Load())]), body=[Assign(targets=[Name(id='field', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='meta', ctx=Load()), attr='combined', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='is_backref', ctx=Store())], value=Constant(value=False))], orelse=[If(test=Compare(left=Name(id='key', ctx=Load()), ops=[In()], comparators=[Name(id='backrefs', ctx=Load())]), body=[Assign(targets=[Name(id='field', ctx=Store())], value=Subscript(value=Name(id='backrefs', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='is_backref', ctx=Store())], value=Constant(value=True))], orelse=[If(test=Name(id='ignore_unknown', ctx=Load()), body=[Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='instance', ctx=Load()), Name(id='key', ctx=Load()), Name(id='value', ctx=Load())], keywords=[])), Continue()], orelse=[Raise(exc=Call(func=Name(id='AttributeError', ctx=Load()), args=[BinOp(left=Constant(value='Unrecognized attribute "%s" for model class %s.'), op=Mod(), right=Tuple(elts=[Name(id='key', ctx=Load()), Call(func=Name(id='type', ctx=Load()), args=[Name(id='instance', ctx=Load())], keywords=[])], ctx=Load()))], keywords=[]))])])]), Assign(targets=[Name(id='is_foreign_key', ctx=Store())], value=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='field', ctx=Load()), Name(id='ForeignKeyField', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Name(id='is_backref', ctx=Load())), Name(id='is_foreign_key', ctx=Load()), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='dict', ctx=Load())], keywords=[])]), body=[Try(body=[Assign(targets=[Name(id='rel_instance', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='instance', ctx=Load()), attr='__rel__', ctx=Load()), slice=Attribute(value=Name(id='field', ctx=Load()), attr='name', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Assign(targets=[Name(id='rel_instance', ctx=Store())], value=Call(func=Attribute(value=Name(id='field', ctx=Load()), attr='rel_model', ctx=Load()), args=[], keywords=[]))])], orelse=[], finalbody=[]), Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='instance', ctx=Load()), Attribute(value=Name(id='field', ctx=Load()), attr='name', ctx=Load()), Call(func=Name(id='update_model_from_dict', ctx=Load()), args=[Name(id='rel_instance', ctx=Load()), Name(id='value', ctx=Load()), Name(id='ignore_unknown', ctx=Load())], keywords=[])], keywords=[]))], orelse=[If(test=BoolOp(op=And(), values=[Name(id='is_backref', ctx=Load()), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Tuple(elts=[Name(id='list', ctx=Load()), Name(id='tuple', ctx=Load())], ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='instances', ctx=Store())], value=ListComp(elt=Call(func=Name(id='dict_to_model', ctx=Load()), args=[Attribute(value=Name(id='field', ctx=Load()), attr='model', ctx=Load()), Name(id='row_data', ctx=Load()), Name(id='ignore_unknown', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='row_data', ctx=Store()), iter=Name(id='value', ctx=Load()), ifs=[], is_async=0)])), For(target=Name(id='rel_instance', ctx=Store()), iter=Name(id='instances', ctx=Load()), body=[Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='rel_instance', ctx=Load()), Attribute(value=Name(id='field', ctx=Load()), attr='name', ctx=Load()), Name(id='instance', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='instance', ctx=Load()), Attribute(value=Name(id='field', ctx=Load()), attr='backref', ctx=Load()), Name(id='instances', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='instance', ctx=Load()), Attribute(value=Name(id='field', ctx=Load()), attr='name', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]))])])], orelse=[]), Return(value=Name(id='instance', ctx=Load()))], decorator_list=[]), FunctionDef(name='dict_to_model', args=arguments(posonlyargs=[], args=[arg(arg='model_class'), arg(arg='data'), arg(arg='ignore_unknown')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Return(value=Call(func=Name(id='update_model_from_dict', ctx=Load()), args=[Call(func=Name(id='model_class', ctx=Load()), args=[], keywords=[]), Name(id='data', ctx=Load()), Name(id='ignore_unknown', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='insert_where', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='data'), arg(arg='where')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='\n    Helper for generating conditional INSERT queries.\n\n    For example, prevent INSERTing a new tweet if the user has tweeted within\n    the last hour::\n\n        INSERT INTO "tweet" ("user_id", "content", "timestamp")\n        SELECT 234, \'some content\', now()\n        WHERE NOT EXISTS (\n            SELECT 1 FROM "tweet"\n            WHERE user_id = 234 AND timestamp > now() - interval \'1 hour\')\n\n    Using this helper:\n\n        cond = ~fn.EXISTS(Tweet.select().where(\n            Tweet.user == user_obj,\n            Tweet.timestamp > one_hour_ago))\n\n        iq = insert_where(Tweet, {\n            Tweet.user: user_obj,\n            Tweet.content: \'some content\'}, where=cond)\n\n        res = iq.execute()\n    ')), For(target=Tuple(elts=[Name(id='field', ctx=Store()), Name(id='default', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='cls', ctx=Load()), attr='_meta', ctx=Load()), attr='defaults', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='field', ctx=Load()), attr='name', ctx=Load()), ops=[In()], comparators=[Name(id='data', ctx=Load())]), Compare(left=Name(id='field', ctx=Load()), ops=[In()], comparators=[Name(id='data', ctx=Load())])]), body=[Continue()], orelse=[]), Assign(targets=[Name(id='value', ctx=Store())], value=IfExp(test=Call(func=Name(id='callable_', ctx=Load()), args=[Name(id='default', ctx=Load())], keywords=[]), body=Call(func=Name(id='default', ctx=Load()), args=[], keywords=[]), orelse=Name(id='default', ctx=Load()))), Assign(targets=[Subscript(value=Name(id='data', ctx=Load()), slice=Name(id='field', ctx=Load()), ctx=Store())], value=Name(id='value', ctx=Load()))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='fields', ctx=Store()), Name(id='values', ctx=Store())], ctx=Store())], value=Call(func=Name(id='zip', ctx=Load()), args=[Starred(value=Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ctx=Load())], keywords=[])), Assign(targets=[Name(id='sq', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='Select', ctx=Load()), args=[], keywords=[keyword(arg='columns', value=Name(id='values', ctx=Load()))]), attr='where', ctx=Load()), args=[Name(id='where', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='insert_from', ctx=Load()), args=[Name(id='sq', ctx=Load()), Name(id='fields', ctx=Load())], keywords=[]), attr='as_rowcount', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), ClassDef(name='ReconnectMixin', bases=[Name(id='object', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Mixin class that attempts to automatically reconnect to the database under\n    certain error conditions.\n\n    For example, MySQL servers will typically close connections that are idle\n    for 28800 seconds ("wait_timeout" setting). If your application makes use\n    of long-lived connections, you may find your connections are closed after\n    a period of no activity. This mixin will attempt to reconnect automatically\n    when these errors occur.\n\n    This mixin class probably should not be used with Postgres (unless you\n    REALLY know what you are doing) and definitely has no business being used\n    with Sqlite. If you wish to use with Postgres, you will need to adapt the\n    `reconnect_errors` attribute to something appropriate for Postgres.\n    ')), Assign(targets=[Name(id='reconnect_errors', ctx=Store())], value=Tuple(elts=[Tuple(elts=[Name(id='OperationalError', ctx=Load()), Constant(value='2006')], ctx=Load()), Tuple(elts=[Name(id='OperationalError', ctx=Load()), Constant(value='2013')], ctx=Load()), Tuple(elts=[Name(id='OperationalError', ctx=Load()), Constant(value='2014')], ctx=Load()), Tuple(elts=[Name(id='OperationalError', ctx=Load()), Constant(value='4031')], ctx=Load()), Tuple(elts=[Name(id='OperationalError', ctx=Load()), Constant(value='MySQL Connection not available.')], ctx=Load())], ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[Name(id='ReconnectMixin', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]), attr='__init__', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_reconnect_errors', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='exc_class', ctx=Store()), Name(id='err_fragment', ctx=Store())], ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='reconnect_errors', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_reconnect_errors', ctx=Load()), attr='setdefault', ctx=Load()), args=[Name(id='exc_class', ctx=Load()), List(elts=[], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_reconnect_errors', ctx=Load()), slice=Name(id='exc_class', ctx=Load()), ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='err_fragment', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='execute_sql', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='sql'), arg(arg='params'), arg(arg='commit')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[If(test=Compare(left=Name(id='commit', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Name(id='__deprecated__', ctx=Load()), args=[Constant(value='"commit" has been deprecated and is a no-op.')], keywords=[]))], orelse=[]), Try(body=[Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[Name(id='ReconnectMixin', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]), attr='execute_sql', ctx=Load()), args=[Name(id='sql', ctx=Load()), Name(id='params', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='exc', body=[If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='in_transaction', ctx=Load()), args=[], keywords=[]), body=[Raise(exc=Name(id='exc', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='exc_class', ctx=Store())], value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='exc', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='exc_class', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_reconnect_errors', ctx=Load())]), body=[Raise(exc=Name(id='exc', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='exc_repr', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='exc', ctx=Load())], keywords=[]), attr='lower', ctx=Load()), args=[], keywords=[])), For(target=Name(id='err_fragment', ctx=Store()), iter=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_reconnect_errors', ctx=Load()), slice=Name(id='exc_class', ctx=Load()), ctx=Load()), body=[If(test=Compare(left=Name(id='err_fragment', ctx=Load()), ops=[In()], comparators=[Name(id='exc_repr', ctx=Load())]), body=[Break()], orelse=[])], orelse=[Raise(exc=Name(id='exc', ctx=Load()))]), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='is_closed', ctx=Load()), args=[], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='connect', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[Name(id='ReconnectMixin', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]), attr='execute_sql', ctx=Load()), args=[Name(id='sql', ctx=Load()), Name(id='params', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[])], decorator_list=[]), FunctionDef(name='resolve_multimodel_query', args=arguments(posonlyargs=[], args=[arg(arg='query'), arg(arg='key')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='_model_identifier')]), body=[Assign(targets=[Name(id='mapping', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='accum', ctx=Store())], value=List(elts=[Name(id='query', ctx=Load())], ctx=Load())), While(test=Name(id='accum', ctx=Load()), body=[Assign(targets=[Name(id='curr', ctx=Store())], value=Call(func=Attribute(value=Name(id='accum', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='curr', ctx=Load()), Name(id='CompoundSelectQuery', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='accum', ctx=Load()), attr='extend', ctx=Load()), args=[Tuple(elts=[Attribute(value=Name(id='curr', ctx=Load()), attr='lhs', ctx=Load()), Attribute(value=Name(id='curr', ctx=Load()), attr='rhs', ctx=Load())], ctx=Load())], keywords=[])), Continue()], orelse=[]), Assign(targets=[Name(id='model_class', ctx=Store())], value=Attribute(value=Name(id='curr', ctx=Load()), attr='model', ctx=Load())), Assign(targets=[Name(id='name', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='model_class', ctx=Load()), attr='_meta', ctx=Load()), attr='table_name', ctx=Load())), Assign(targets=[Subscript(value=Name(id='mapping', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Name(id='model_class', ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='curr', ctx=Load()), attr='_returning', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Name(id='Value', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]), attr='alias', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), FunctionDef(name='wrapped_iterator', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='row', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='query', ctx=Load()), attr='dicts', ctx=Load()), args=[], keywords=[]), attr='iterator', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='identifier', ctx=Store())], value=Call(func=Attribute(value=Name(id='row', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[])), Assign(targets=[Name(id='model', ctx=Store())], value=Subscript(value=Name(id='mapping', ctx=Load()), slice=Name(id='identifier', ctx=Load()), ctx=Load())), Expr(value=Yield(value=Call(func=Name(id='model', ctx=Load()), args=[], keywords=[keyword(value=Name(id='row', ctx=Load()))])))], orelse=[])], decorator_list=[]), Return(value=Call(func=Name(id='wrapped_iterator', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), ClassDef(name='ThreadSafeDatabaseMetadata', bases=[Name(id='Metadata', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Metadata class to allow swapping database at run-time in a multi-threaded\n    application. To use:\n\n    class Base(Model):\n        class Meta:\n            model_metadata_class = ThreadSafeDatabaseMetadata\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_database', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_local', ctx=Store())], value=Call(func=Attribute(value=Name(id='threading', ctx=Load()), attr='local', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[Name(id='ThreadSafeDatabaseMetadata', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]), attr='__init__', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='_get_db', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='getattr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_local', ctx=Load()), Constant(value='database'), Attribute(value=Name(id='self', ctx=Load()), attr='_database', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_set_db', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='db')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_database', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_database', ctx=Store())], value=Name(id='db', ctx=Load()))], orelse=[]), Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_local', ctx=Load()), attr='database', ctx=Store())], value=Name(id='db', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='database', ctx=Store())], value=Call(func=Name(id='property', ctx=Load()), args=[Name(id='_get_db', ctx=Load()), Name(id='_set_db', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])