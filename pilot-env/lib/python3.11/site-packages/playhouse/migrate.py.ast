Module(body=[Expr(value=Constant(value="\nLightweight schema migrations.\n\nNOTE: Currently tested with SQLite and Postgresql. MySQL may be missing some\nfeatures.\n\nExample Usage\n-------------\n\nInstantiate a migrator:\n\n    # Postgres example:\n    my_db = PostgresqlDatabase(...)\n    migrator = PostgresqlMigrator(my_db)\n\n    # SQLite example:\n    my_db = SqliteDatabase('my_database.db')\n    migrator = SqliteMigrator(my_db)\n\nThen you will use the `migrate` function to run various `Operation`s which\nare generated by the migrator:\n\n    migrate(\n        migrator.add_column('some_table', 'column_name', CharField(default=''))\n    )\n\nMigrations are not run inside a transaction, so if you wish the migration to\nrun in a transaction you will need to wrap the call to `migrate` in a\ntransaction block, e.g.:\n\n    with my_db.transaction():\n        migrate(...)\n\nSupported Operations\n--------------------\n\nAdd new field(s) to an existing model:\n\n    # Create your field instances. For non-null fields you must specify a\n    # default value.\n    pubdate_field = DateTimeField(null=True)\n    comment_field = TextField(default='')\n\n    # Run the migration, specifying the database table, field name and field.\n    migrate(\n        migrator.add_column('comment_tbl', 'pub_date', pubdate_field),\n        migrator.add_column('comment_tbl', 'comment', comment_field),\n    )\n\nRenaming a field:\n\n    # Specify the table, original name of the column, and its new name.\n    migrate(\n        migrator.rename_column('story', 'pub_date', 'publish_date'),\n        migrator.rename_column('story', 'mod_date', 'modified_date'),\n    )\n\nDropping a field:\n\n    migrate(\n        migrator.drop_column('story', 'some_old_field'),\n    )\n\nMaking a field nullable or not nullable:\n\n    # Note that when making a field not null that field must not have any\n    # NULL values present.\n    migrate(\n        # Make `pub_date` allow NULL values.\n        migrator.drop_not_null('story', 'pub_date'),\n\n        # Prevent `modified_date` from containing NULL values.\n        migrator.add_not_null('story', 'modified_date'),\n    )\n\nRenaming a table:\n\n    migrate(\n        migrator.rename_table('story', 'stories_tbl'),\n    )\n\nAdding an index:\n\n    # Specify the table, column names, and whether the index should be\n    # UNIQUE or not.\n    migrate(\n        # Create an index on the `pub_date` column.\n        migrator.add_index('story', ('pub_date',), False),\n\n        # Create a multi-column index on the `pub_date` and `status` fields.\n        migrator.add_index('story', ('pub_date', 'status'), False),\n\n        # Create a unique index on the category and title fields.\n        migrator.add_index('story', ('category_id', 'title'), True),\n    )\n\nDropping an index:\n\n    # Specify the index name.\n    migrate(migrator.drop_index('story', 'story_pub_date_status'))\n\nAdding or dropping table constraints:\n\n.. code-block:: python\n\n    # Add a CHECK() constraint to enforce the price cannot be negative.\n    migrate(migrator.add_constraint(\n        'products',\n        'price_check',\n        Check('price >= 0')))\n\n    # Remove the price check constraint.\n    migrate(migrator.drop_constraint('products', 'price_check'))\n\n    # Add a UNIQUE constraint on the first and last names.\n    migrate(migrator.add_unique('person', 'first_name', 'last_name'))\n")), ImportFrom(module='collections', names=[alias(name='namedtuple')], level=0), Import(names=[alias(name='functools')]), Import(names=[alias(name='hashlib')]), Import(names=[alias(name='re')]), ImportFrom(module='peewee', names=[alias(name='*')], level=0), ImportFrom(module='peewee', names=[alias(name='CommaNodeList')], level=0), ImportFrom(module='peewee', names=[alias(name='EnclosedNodeList')], level=0), ImportFrom(module='peewee', names=[alias(name='Entity')], level=0), ImportFrom(module='peewee', names=[alias(name='Expression')], level=0), ImportFrom(module='peewee', names=[alias(name='Node')], level=0), ImportFrom(module='peewee', names=[alias(name='NodeList')], level=0), ImportFrom(module='peewee', names=[alias(name='OP')], level=0), ImportFrom(module='peewee', names=[alias(name='callable_')], level=0), ImportFrom(module='peewee', names=[alias(name='sort_models')], level=0), ImportFrom(module='peewee', names=[alias(name='sqlite3')], level=0), ImportFrom(module='peewee', names=[alias(name='_truncate_constraint_name')], level=0), Try(body=[ImportFrom(module='playhouse.cockroachdb', names=[alias(name='CockroachDatabase')], level=0)], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Assign(targets=[Name(id='CockroachDatabase', ctx=Store())], value=Constant(value=None))])], orelse=[], finalbody=[]), ClassDef(name='Operation', bases=[Name(id='object', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Encapsulate a single schema altering operation.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='migrator'), arg(arg='method')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='migrator', ctx=Store())], value=Name(id='migrator', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='method', ctx=Store())], value=Name(id='method', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='args', ctx=Store())], value=Name(id='args', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='kwargs', ctx=Store())], value=Name(id='kwargs', ctx=Load()))], decorator_list=[]), FunctionDef(name='execute', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='node')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='migrator', ctx=Load()), attr='database', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='node', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_handle_result', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='result')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='result', ctx=Load()), Tuple(elts=[Name(id='Node', ctx=Load()), Name(id='Context', ctx=Load())], ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='execute', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[]))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='result', ctx=Load()), Name(id='Operation', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='run', ctx=Load()), args=[], keywords=[]))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='result', ctx=Load()), Tuple(elts=[Name(id='list', ctx=Load()), Name(id='tuple', ctx=Load())], ctx=Load())], keywords=[]), body=[For(target=Name(id='item', ctx=Store()), iter=Name(id='result', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_handle_result', ctx=Load()), args=[Name(id='item', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])])])], decorator_list=[]), FunctionDef(name='run', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='kwargs', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='kwargs', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Name(id='kwargs', ctx=Load()), slice=Constant(value='with_context'), ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='method', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='migrator', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='method', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_handle_result', ctx=Load()), args=[Call(func=Name(id='method', ctx=Load()), args=[Starred(value=Attribute(value=Name(id='self', ctx=Load()), attr='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))])], keywords=[]))], decorator_list=[])], decorator_list=[]), FunctionDef(name='operation', args=arguments(posonlyargs=[], args=[arg(arg='fn')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='inner', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Assign(targets=[Name(id='with_context', ctx=Store())], value=Call(func=Attribute(value=Name(id='kwargs', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='with_context'), Constant(value=False)], keywords=[])), If(test=Name(id='with_context', ctx=Load()), body=[Return(value=Call(func=Name(id='fn', ctx=Load()), args=[Name(id='self', ctx=Load()), Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], orelse=[]), Return(value=Call(func=Name(id='Operation', ctx=Load()), args=[Name(id='self', ctx=Load()), Attribute(value=Name(id='fn', ctx=Load()), attr='__name__', ctx=Load()), Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='wraps', ctx=Load()), args=[Name(id='fn', ctx=Load())], keywords=[])]), Return(value=Name(id='inner', ctx=Load()))], decorator_list=[]), FunctionDef(name='make_index_name', args=arguments(posonlyargs=[], args=[arg(arg='table_name'), arg(arg='columns')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='index_name', ctx=Store())], value=Call(func=Attribute(value=Constant(value='_'), attr='join', ctx=Load()), args=[BinOp(left=Tuple(elts=[Name(id='table_name', ctx=Load())], ctx=Load()), op=Add(), right=Call(func=Name(id='tuple', ctx=Load()), args=[Name(id='columns', ctx=Load())], keywords=[]))], keywords=[])), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='index_name', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=64)]), body=[Assign(targets=[Name(id='index_hash', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='hashlib', ctx=Load()), attr='md5', ctx=Load()), args=[Call(func=Attribute(value=Name(id='index_name', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[])], keywords=[]), attr='hexdigest', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='index_name', ctx=Store())], value=BinOp(left=Constant(value='%s_%s'), op=Mod(), right=Tuple(elts=[Subscript(value=Name(id='index_name', ctx=Load()), slice=Slice(upper=Constant(value=56)), ctx=Load()), Subscript(value=Name(id='index_hash', ctx=Load()), slice=Slice(upper=Constant(value=7)), ctx=Load())], ctx=Load())))], orelse=[]), Return(value=Name(id='index_name', ctx=Load()))], decorator_list=[]), ClassDef(name='SchemaMigrator', bases=[Name(id='object', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='explicit_create_foreign_key', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='explicit_delete_foreign_key', ctx=Store())], value=Constant(value=False)), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='database')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='database', ctx=Store())], value=Name(id='database', ctx=Load()))], decorator_list=[]), FunctionDef(name='make_context', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='database', ctx=Load()), attr='get_sql_context', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='from_database', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='database')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[Name(id='CockroachDatabase', ctx=Load()), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='database', ctx=Load()), Name(id='CockroachDatabase', ctx=Load())], keywords=[])]), body=[Return(value=Call(func=Name(id='CockroachDBMigrator', ctx=Load()), args=[Name(id='database', ctx=Load())], keywords=[]))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='database', ctx=Load()), Name(id='PostgresqlDatabase', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Name(id='PostgresqlMigrator', ctx=Load()), args=[Name(id='database', ctx=Load())], keywords=[]))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='database', ctx=Load()), Name(id='MySQLDatabase', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Name(id='MySQLMigrator', ctx=Load()), args=[Name(id='database', ctx=Load())], keywords=[]))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='database', ctx=Load()), Name(id='SqliteDatabase', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Name(id='SqliteMigrator', ctx=Load()), args=[Name(id='database', ctx=Load())], keywords=[]))], orelse=[])])])]), Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='Unsupported database: %s'), op=Mod(), right=Name(id='database', ctx=Load()))], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='apply_default', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='table'), arg(arg='column_name'), arg(arg='field')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='default', ctx=Store())], value=Attribute(value=Name(id='field', ctx=Load()), attr='default', ctx=Load())), If(test=Call(func=Name(id='callable_', ctx=Load()), args=[Name(id='default', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='default', ctx=Store())], value=Call(func=Name(id='default', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='make_context', ctx=Load()), args=[], keywords=[]), attr='literal', ctx=Load()), args=[Constant(value='UPDATE ')], keywords=[]), attr='sql', ctx=Load()), args=[Call(func=Name(id='Entity', ctx=Load()), args=[Name(id='table', ctx=Load())], keywords=[])], keywords=[]), attr='literal', ctx=Load()), args=[Constant(value=' SET ')], keywords=[]), attr='sql', ctx=Load()), args=[Call(func=Name(id='Expression', ctx=Load()), args=[Call(func=Name(id='Entity', ctx=Load()), args=[Name(id='column_name', ctx=Load())], keywords=[]), Attribute(value=Name(id='OP', ctx=Load()), attr='EQ', ctx=Load()), Call(func=Attribute(value=Name(id='field', ctx=Load()), attr='db_value', ctx=Load()), args=[Name(id='default', ctx=Load())], keywords=[])], keywords=[keyword(arg='flat', value=Constant(value=True))])], keywords=[]))], decorator_list=[Name(id='operation', ctx=Load())]), FunctionDef(name='_alter_table', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ctx'), arg(arg='table')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='ctx', ctx=Load()), attr='literal', ctx=Load()), args=[Constant(value='ALTER TABLE ')], keywords=[]), attr='sql', ctx=Load()), args=[Call(func=Name(id='Entity', ctx=Load()), args=[Name(id='table', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='_alter_column', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ctx'), arg(arg='table'), arg(arg='column')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_alter_table', ctx=Load()), args=[Name(id='ctx', ctx=Load()), Name(id='table', ctx=Load())], keywords=[]), attr='literal', ctx=Load()), args=[Constant(value=' ALTER COLUMN ')], keywords=[]), attr='sql', ctx=Load()), args=[Call(func=Name(id='Entity', ctx=Load()), args=[Name(id='column', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='alter_add_column', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='table'), arg(arg='column_name'), arg(arg='field')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ctx', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='make_context', ctx=Load()), args=[], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='field_null', ctx=Store()), Attribute(value=Name(id='field', ctx=Load()), attr='null', ctx=Store())], ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='field', ctx=Load()), attr='null', ctx=Load()), Constant(value=True)], ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='field', ctx=Load()), attr='column_name', ctx=Load()), ops=[NotEq()], comparators=[Name(id='column_name', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='field', ctx=Load()), attr='name', ctx=Store()), Attribute(value=Name(id='field', ctx=Load()), attr='column_name', ctx=Store())], value=Name(id='column_name', ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_alter_table', ctx=Load()), args=[Name(id='ctx', ctx=Load()), Name(id='table', ctx=Load())], keywords=[]), attr='literal', ctx=Load()), args=[Constant(value=' ADD COLUMN ')], keywords=[]), attr='sql', ctx=Load()), args=[Call(func=Attribute(value=Name(id='field', ctx=Load()), attr='ddl', ctx=Load()), args=[Name(id='ctx', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Attribute(value=Name(id='field', ctx=Load()), attr='null', ctx=Store())], value=Name(id='field_null', ctx=Load())), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='field', ctx=Load()), Name(id='ForeignKeyField', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='add_inline_fk_sql', ctx=Load()), args=[Name(id='ctx', ctx=Load()), Name(id='field', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='ctx', ctx=Load()))], decorator_list=[Name(id='operation', ctx=Load())]), FunctionDef(name='add_constraint', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='table'), arg(arg='name'), arg(arg='constraint')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_alter_table', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='make_context', ctx=Load()), args=[], keywords=[]), Name(id='table', ctx=Load())], keywords=[]), attr='literal', ctx=Load()), args=[Constant(value=' ADD CONSTRAINT ')], keywords=[]), attr='sql', ctx=Load()), args=[Call(func=Name(id='Entity', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])], keywords=[]), attr='literal', ctx=Load()), args=[Constant(value=' ')], keywords=[]), attr='sql', ctx=Load()), args=[Name(id='constraint', ctx=Load())], keywords=[]))], decorator_list=[Name(id='operation', ctx=Load())]), FunctionDef(name='add_unique', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='table')], vararg=arg(arg='column_names'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='constraint_name', ctx=Store())], value=BinOp(left=Constant(value='uniq_%s'), op=Mod(), right=Call(func=Attribute(value=Constant(value='_'), attr='join', ctx=Load()), args=[Name(id='column_names', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='constraint', ctx=Store())], value=Call(func=Name(id='NodeList', ctx=Load()), args=[Tuple(elts=[Call(func=Name(id='SQL', ctx=Load()), args=[Constant(value='UNIQUE')], keywords=[]), Call(func=Name(id='EnclosedNodeList', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='Entity', ctx=Load()), args=[Name(id='column', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='column', ctx=Store()), iter=Name(id='column_names', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='add_constraint', ctx=Load()), args=[Name(id='table', ctx=Load()), Name(id='constraint_name', ctx=Load()), Name(id='constraint', ctx=Load())], keywords=[]))], decorator_list=[Name(id='operation', ctx=Load())]), FunctionDef(name='drop_constraint', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='table'), arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_alter_table', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='make_context', ctx=Load()), args=[], keywords=[]), Name(id='table', ctx=Load())], keywords=[]), attr='literal', ctx=Load()), args=[Constant(value=' DROP CONSTRAINT ')], keywords=[]), attr='sql', ctx=Load()), args=[Call(func=Name(id='Entity', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[Name(id='operation', ctx=Load())]), FunctionDef(name='add_inline_fk_sql', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ctx'), arg(arg='field')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ctx', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='ctx', ctx=Load()), attr='literal', ctx=Load()), args=[Constant(value=' REFERENCES ')], keywords=[]), attr='sql', ctx=Load()), args=[Call(func=Name(id='Entity', ctx=Load()), args=[Attribute(value=Attribute(value=Attribute(value=Name(id='field', ctx=Load()), attr='rel_model', ctx=Load()), attr='_meta', ctx=Load()), attr='table_name', ctx=Load())], keywords=[])], keywords=[]), attr='literal', ctx=Load()), args=[Constant(value=' ')], keywords=[]), attr='sql', ctx=Load()), args=[Call(func=Name(id='EnclosedNodeList', ctx=Load()), args=[Tuple(elts=[Call(func=Name(id='Entity', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='field', ctx=Load()), attr='rel_field', ctx=Load()), attr='column_name', ctx=Load())], keywords=[])], ctx=Load())], keywords=[])], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='field', ctx=Load()), attr='on_delete', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='ctx', ctx=Store())], value=Call(func=Attribute(value=Name(id='ctx', ctx=Load()), attr='literal', ctx=Load()), args=[BinOp(left=Constant(value=' ON DELETE %s'), op=Mod(), right=Attribute(value=Name(id='field', ctx=Load()), attr='on_delete', ctx=Load()))], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='field', ctx=Load()), attr='on_update', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='ctx', ctx=Store())], value=Call(func=Attribute(value=Name(id='ctx', ctx=Load()), attr='literal', ctx=Load()), args=[BinOp(left=Constant(value=' ON UPDATE %s'), op=Mod(), right=Attribute(value=Name(id='field', ctx=Load()), attr='on_update', ctx=Load()))], keywords=[]))], orelse=[]), Return(value=Name(id='ctx', ctx=Load()))], decorator_list=[]), FunctionDef(name='add_foreign_key_constraint', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='table'), arg(arg='column_name'), arg(arg='rel'), arg(arg='rel_column'), arg(arg='on_delete'), arg(arg='on_update')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Assign(targets=[Name(id='constraint', ctx=Store())], value=BinOp(left=Constant(value='fk_%s_%s_refs_%s'), op=Mod(), right=Tuple(elts=[Name(id='table', ctx=Load()), Name(id='column_name', ctx=Load()), Name(id='rel', ctx=Load())], ctx=Load()))), Assign(targets=[Name(id='ctx', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='make_context', ctx=Load()), args=[], keywords=[]), attr='literal', ctx=Load()), args=[Constant(value='ALTER TABLE ')], keywords=[]), attr='sql', ctx=Load()), args=[Call(func=Name(id='Entity', ctx=Load()), args=[Name(id='table', ctx=Load())], keywords=[])], keywords=[]), attr='literal', ctx=Load()), args=[Constant(value=' ADD CONSTRAINT ')], keywords=[]), attr='sql', ctx=Load()), args=[Call(func=Name(id='Entity', ctx=Load()), args=[Call(func=Name(id='_truncate_constraint_name', ctx=Load()), args=[Name(id='constraint', ctx=Load())], keywords=[])], keywords=[])], keywords=[]), attr='literal', ctx=Load()), args=[Constant(value=' FOREIGN KEY ')], keywords=[]), attr='sql', ctx=Load()), args=[Call(func=Name(id='EnclosedNodeList', ctx=Load()), args=[Tuple(elts=[Call(func=Name(id='Entity', ctx=Load()), args=[Name(id='column_name', ctx=Load())], keywords=[])], ctx=Load())], keywords=[])], keywords=[]), attr='literal', ctx=Load()), args=[Constant(value=' REFERENCES ')], keywords=[]), attr='sql', ctx=Load()), args=[Call(func=Name(id='Entity', ctx=Load()), args=[Name(id='rel', ctx=Load())], keywords=[])], keywords=[]), attr='literal', ctx=Load()), args=[Constant(value=' (')], keywords=[]), attr='sql', ctx=Load()), args=[Call(func=Name(id='Entity', ctx=Load()), args=[Name(id='rel_column', ctx=Load())], keywords=[])], keywords=[]), attr='literal', ctx=Load()), args=[Constant(value=')')], keywords=[])), If(test=Compare(left=Name(id='on_delete', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='ctx', ctx=Store())], value=Call(func=Attribute(value=Name(id='ctx', ctx=Load()), attr='literal', ctx=Load()), args=[BinOp(left=Constant(value=' ON DELETE %s'), op=Mod(), right=Name(id='on_delete', ctx=Load()))], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='on_update', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='ctx', ctx=Store())], value=Call(func=Attribute(value=Name(id='ctx', ctx=Load()), attr='literal', ctx=Load()), args=[BinOp(left=Constant(value=' ON UPDATE %s'), op=Mod(), right=Name(id='on_update', ctx=Load()))], keywords=[]))], orelse=[]), Return(value=Name(id='ctx', ctx=Load()))], decorator_list=[Name(id='operation', ctx=Load())]), FunctionDef(name='add_column', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='table'), arg(arg='column_name'), arg(arg='field')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Attribute(value=Name(id='field', ctx=Load()), attr='null', ctx=Load())), Compare(left=Attribute(value=Name(id='field', ctx=Load()), attr='default', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='%s is not null but has no default'), op=Mod(), right=Name(id='column_name', ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Name(id='is_foreign_key', ctx=Store())], value=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='field', ctx=Load()), Name(id='ForeignKeyField', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Name(id='is_foreign_key', ctx=Load()), UnaryOp(op=Not(), operand=Attribute(value=Name(id='field', ctx=Load()), attr='rel_field', ctx=Load()))]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Foreign keys must specify a `field`.')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='operations', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='alter_add_column', ctx=Load()), args=[Name(id='table', ctx=Load()), Name(id='column_name', ctx=Load()), Name(id='field', ctx=Load())], keywords=[])], ctx=Load())), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='field', ctx=Load()), attr='null', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='operations', ctx=Load()), attr='extend', ctx=Load()), args=[List(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='apply_default', ctx=Load()), args=[Name(id='table', ctx=Load()), Name(id='column_name', ctx=Load()), Name(id='field', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='add_not_null', ctx=Load()), args=[Name(id='table', ctx=Load()), Name(id='column_name', ctx=Load())], keywords=[])], ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Name(id='is_foreign_key', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='explicit_create_foreign_key', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='operations', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='add_foreign_key_constraint', ctx=Load()), args=[Name(id='table', ctx=Load()), Name(id='column_name', ctx=Load()), Attribute(value=Attribute(value=Attribute(value=Name(id='field', ctx=Load()), attr='rel_model', ctx=Load()), attr='_meta', ctx=Load()), attr='table_name', ctx=Load()), Attribute(value=Attribute(value=Name(id='field', ctx=Load()), attr='rel_field', ctx=Load()), attr='column_name', ctx=Load()), Attribute(value=Name(id='field', ctx=Load()), attr='on_delete', ctx=Load()), Attribute(value=Name(id='field', ctx=Load()), attr='on_update', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=BoolOp(op=Or(), values=[Attribute(value=Name(id='field', ctx=Load()), attr='index', ctx=Load()), Attribute(value=Name(id='field', ctx=Load()), attr='unique', ctx=Load())]), body=[Assign(targets=[Name(id='using', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='field', ctx=Load()), Constant(value='index_type'), Constant(value=None)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='operations', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='add_index', ctx=Load()), args=[Name(id='table', ctx=Load()), Tuple(elts=[Name(id='column_name', ctx=Load())], ctx=Load()), Attribute(value=Name(id='field', ctx=Load()), attr='unique', ctx=Load()), Name(id='using', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Return(value=Name(id='operations', ctx=Load()))], decorator_list=[Name(id='operation', ctx=Load())]), FunctionDef(name='drop_foreign_key_constraint', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='table'), arg(arg='column_name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Name(id='NotImplementedError', ctx=Load()))], decorator_list=[Name(id='operation', ctx=Load())]), FunctionDef(name='drop_column', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='table'), arg(arg='column_name'), arg(arg='cascade')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Assign(targets=[Name(id='ctx', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='make_context', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_alter_table', ctx=Load()), args=[Name(id='ctx', ctx=Load()), Name(id='table', ctx=Load())], keywords=[]), attr='literal', ctx=Load()), args=[Constant(value=' DROP COLUMN ')], keywords=[]), attr='sql', ctx=Load()), args=[Call(func=Name(id='Entity', ctx=Load()), args=[Name(id='column_name', ctx=Load())], keywords=[])], keywords=[])), If(test=Name(id='cascade', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='ctx', ctx=Load()), attr='literal', ctx=Load()), args=[Constant(value=' CASCADE')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='fk_columns', ctx=Store())], value=ListComp(elt=Attribute(value=Name(id='foreign_key', ctx=Load()), attr='column', ctx=Load()), generators=[comprehension(target=Name(id='foreign_key', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='database', ctx=Load()), attr='get_foreign_keys', ctx=Load()), args=[Name(id='table', ctx=Load())], keywords=[]), ifs=[], is_async=0)])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='column_name', ctx=Load()), ops=[In()], comparators=[Name(id='fk_columns', ctx=Load())]), Attribute(value=Name(id='self', ctx=Load()), attr='explicit_delete_foreign_key', ctx=Load())]), body=[Return(value=List(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='drop_foreign_key_constraint', ctx=Load()), args=[Name(id='table', ctx=Load()), Name(id='column_name', ctx=Load())], keywords=[]), Name(id='ctx', ctx=Load())], ctx=Load()))], orelse=[]), Return(value=Name(id='ctx', ctx=Load()))], decorator_list=[Name(id='operation', ctx=Load())]), FunctionDef(name='rename_column', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='table'), arg(arg='old_name'), arg(arg='new_name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_alter_table', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='make_context', ctx=Load()), args=[], keywords=[]), Name(id='table', ctx=Load())], keywords=[]), attr='literal', ctx=Load()), args=[Constant(value=' RENAME COLUMN ')], keywords=[]), attr='sql', ctx=Load()), args=[Call(func=Name(id='Entity', ctx=Load()), args=[Name(id='old_name', ctx=Load())], keywords=[])], keywords=[]), attr='literal', ctx=Load()), args=[Constant(value=' TO ')], keywords=[]), attr='sql', ctx=Load()), args=[Call(func=Name(id='Entity', ctx=Load()), args=[Name(id='new_name', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[Name(id='operation', ctx=Load())]), FunctionDef(name='add_not_null', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='table'), arg(arg='column')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_alter_column', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='make_context', ctx=Load()), args=[], keywords=[]), Name(id='table', ctx=Load()), Name(id='column', ctx=Load())], keywords=[]), attr='literal', ctx=Load()), args=[Constant(value=' SET NOT NULL')], keywords=[]))], decorator_list=[Name(id='operation', ctx=Load())]), FunctionDef(name='drop_not_null', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='table'), arg(arg='column')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_alter_column', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='make_context', ctx=Load()), args=[], keywords=[]), Name(id='table', ctx=Load()), Name(id='column', ctx=Load())], keywords=[]), attr='literal', ctx=Load()), args=[Constant(value=' DROP NOT NULL')], keywords=[]))], decorator_list=[Name(id='operation', ctx=Load())]), FunctionDef(name='alter_column_type', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='table'), arg(arg='column'), arg(arg='field'), arg(arg='cast')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Name(id='ctx', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='make_context', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='ctx', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_alter_column', ctx=Load()), args=[Name(id='ctx', ctx=Load()), Name(id='table', ctx=Load()), Name(id='column', ctx=Load())], keywords=[]), attr='literal', ctx=Load()), args=[Constant(value=' TYPE ')], keywords=[]), attr='sql', ctx=Load()), args=[Call(func=Attribute(value=Name(id='field', ctx=Load()), attr='ddl_datatype', ctx=Load()), args=[Name(id='ctx', ctx=Load())], keywords=[])], keywords=[])), If(test=Compare(left=Name(id='cast', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='cast', ctx=Load()), Name(id='Node', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='cast', ctx=Store())], value=Call(func=Name(id='SQL', ctx=Load()), args=[Name(id='cast', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='ctx', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='ctx', ctx=Load()), attr='literal', ctx=Load()), args=[Constant(value=' USING ')], keywords=[]), attr='sql', ctx=Load()), args=[Name(id='cast', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='ctx', ctx=Load()))], decorator_list=[Name(id='operation', ctx=Load())]), FunctionDef(name='rename_table', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='old_name'), arg(arg='new_name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_alter_table', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='make_context', ctx=Load()), args=[], keywords=[]), Name(id='old_name', ctx=Load())], keywords=[]), attr='literal', ctx=Load()), args=[Constant(value=' RENAME TO ')], keywords=[]), attr='sql', ctx=Load()), args=[Call(func=Name(id='Entity', ctx=Load()), args=[Name(id='new_name', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[Name(id='operation', ctx=Load())]), FunctionDef(name='add_index', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='table'), arg(arg='columns'), arg(arg='unique'), arg(arg='using')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Constant(value=None)]), body=[Assign(targets=[Name(id='ctx', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='make_context', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='index_name', ctx=Store())], value=Call(func=Name(id='make_index_name', ctx=Load()), args=[Name(id='table', ctx=Load()), Name(id='columns', ctx=Load())], keywords=[])), Assign(targets=[Name(id='table_obj', ctx=Store())], value=Call(func=Name(id='Table', ctx=Load()), args=[Name(id='table', ctx=Load())], keywords=[])), Assign(targets=[Name(id='cols', ctx=Store())], value=ListComp(elt=Call(func=Name(id='getattr', ctx=Load()), args=[Attribute(value=Name(id='table_obj', ctx=Load()), attr='c', ctx=Load()), Name(id='column', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='column', ctx=Store()), iter=Name(id='columns', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='index', ctx=Store())], value=Call(func=Name(id='Index', ctx=Load()), args=[Name(id='index_name', ctx=Load()), Name(id='table_obj', ctx=Load()), Name(id='cols', ctx=Load())], keywords=[keyword(arg='unique', value=Name(id='unique', ctx=Load())), keyword(arg='using', value=Name(id='using', ctx=Load()))])), Return(value=Call(func=Attribute(value=Name(id='ctx', ctx=Load()), attr='sql', ctx=Load()), args=[Name(id='index', ctx=Load())], keywords=[]))], decorator_list=[Name(id='operation', ctx=Load())]), FunctionDef(name='drop_index', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='table'), arg(arg='index_name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='make_context', ctx=Load()), args=[], keywords=[]), attr='literal', ctx=Load()), args=[Constant(value='DROP INDEX ')], keywords=[]), attr='sql', ctx=Load()), args=[Call(func=Name(id='Entity', ctx=Load()), args=[Name(id='index_name', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[Name(id='operation', ctx=Load())])], decorator_list=[]), ClassDef(name='PostgresqlMigrator', bases=[Name(id='SchemaMigrator', ctx=Load())], keywords=[], body=[FunctionDef(name='_primary_key_columns', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='tbl')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='query', ctx=Store())], value=Constant(value="\n            SELECT pg_attribute.attname\n            FROM pg_index, pg_class, pg_attribute\n            WHERE\n                pg_class.oid = '%s'::regclass AND\n                indrelid = pg_class.oid AND\n                pg_attribute.attrelid = pg_class.oid AND\n                pg_attribute.attnum = any(pg_index.indkey) AND\n                indisprimary;\n        ")), Assign(targets=[Name(id='cursor', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='database', ctx=Load()), attr='execute_sql', ctx=Load()), args=[BinOp(left=Name(id='query', ctx=Load()), op=Mod(), right=Name(id='tbl', ctx=Load()))], keywords=[])), Return(value=ListComp(elt=Subscript(value=Name(id='row', ctx=Load()), slice=Constant(value=0), ctx=Load()), generators=[comprehension(target=Name(id='row', ctx=Store()), iter=Call(func=Attribute(value=Name(id='cursor', ctx=Load()), attr='fetchall', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[]), FunctionDef(name='set_search_path', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='schema_name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='make_context', ctx=Load()), args=[], keywords=[]), attr='literal', ctx=Load()), args=[BinOp(left=Constant(value='SET search_path TO %s'), op=Mod(), right=Name(id='schema_name', ctx=Load()))], keywords=[]))], decorator_list=[Name(id='operation', ctx=Load())]), FunctionDef(name='rename_table', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='old_name'), arg(arg='new_name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='pk_names', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_primary_key_columns', ctx=Load()), args=[Name(id='old_name', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ParentClass', ctx=Store())], value=Call(func=Name(id='super', ctx=Load()), args=[Name(id='PostgresqlMigrator', ctx=Load()), Name(id='self', ctx=Load())], keywords=[])), Assign(targets=[Name(id='operations', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='ParentClass', ctx=Load()), attr='rename_table', ctx=Load()), args=[Name(id='old_name', ctx=Load()), Name(id='new_name', ctx=Load())], keywords=[keyword(arg='with_context', value=Constant(value=True))])], ctx=Load())), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='pk_names', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='seq_name', ctx=Store())], value=BinOp(left=Constant(value='%s_%s_seq'), op=Mod(), right=Tuple(elts=[Name(id='old_name', ctx=Load()), Subscript(value=Name(id='pk_names', ctx=Load()), slice=Constant(value=0), ctx=Load())], ctx=Load()))), Assign(targets=[Name(id='query', ctx=Store())], value=Constant(value='\n                SELECT 1\n                FROM information_schema.sequences\n                WHERE LOWER(sequence_name) = LOWER(%s)\n            ')), Assign(targets=[Name(id='cursor', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='database', ctx=Load()), attr='execute_sql', ctx=Load()), args=[Name(id='query', ctx=Load()), Tuple(elts=[Name(id='seq_name', ctx=Load())], ctx=Load())], keywords=[])), If(test=Call(func=Name(id='bool', ctx=Load()), args=[Call(func=Attribute(value=Name(id='cursor', ctx=Load()), attr='fetchone', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='new_seq_name', ctx=Store())], value=BinOp(left=Constant(value='%s_%s_seq'), op=Mod(), right=Tuple(elts=[Name(id='new_name', ctx=Load()), Subscript(value=Name(id='pk_names', ctx=Load()), slice=Constant(value=0), ctx=Load())], ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='operations', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='ParentClass', ctx=Load()), attr='rename_table', ctx=Load()), args=[Name(id='seq_name', ctx=Load()), Name(id='new_seq_name', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='operations', ctx=Load()))], decorator_list=[Name(id='operation', ctx=Load())])], decorator_list=[]), ClassDef(name='CockroachDBMigrator', bases=[Name(id='PostgresqlMigrator', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='explicit_create_foreign_key', ctx=Store())], value=Constant(value=True)), FunctionDef(name='add_inline_fk_sql', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ctx'), arg(arg='field')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[]), FunctionDef(name='drop_index', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='table'), arg(arg='index_name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='make_context', ctx=Load()), args=[], keywords=[]), attr='literal', ctx=Load()), args=[Constant(value='DROP INDEX ')], keywords=[]), attr='sql', ctx=Load()), args=[Call(func=Name(id='Entity', ctx=Load()), args=[Name(id='index_name', ctx=Load())], keywords=[])], keywords=[]), attr='literal', ctx=Load()), args=[Constant(value=' CASCADE')], keywords=[]))], decorator_list=[Name(id='operation', ctx=Load())])], decorator_list=[]), ClassDef(name='MySQLColumn', bases=[Call(func=Name(id='namedtuple', ctx=Load()), args=[Constant(value='_Column'), Tuple(elts=[Constant(value='name'), Constant(value='definition'), Constant(value='null'), Constant(value='pk'), Constant(value='default'), Constant(value='extra')], ctx=Load())], keywords=[])], keywords=[], body=[FunctionDef(name='is_pk', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='pk', ctx=Load()), ops=[Eq()], comparators=[Constant(value='PRI')]))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='is_unique', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='pk', ctx=Load()), ops=[Eq()], comparators=[Constant(value='UNI')]))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='is_null', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='null', ctx=Load()), ops=[Eq()], comparators=[Constant(value='YES')]))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='sql', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='column_name'), arg(arg='is_null')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[If(test=Compare(left=Name(id='is_null', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='is_null', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='is_null', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='column_name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='column_name', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='parts', ctx=Store())], value=List(elts=[Call(func=Name(id='Entity', ctx=Load()), args=[Name(id='column_name', ctx=Load())], keywords=[]), Call(func=Name(id='SQL', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='definition', ctx=Load())], keywords=[])], ctx=Load())), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='is_unique', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='parts', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='SQL', ctx=Load()), args=[Constant(value='UNIQUE')], keywords=[])], keywords=[]))], orelse=[]), If(test=Name(id='is_null', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='parts', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='SQL', ctx=Load()), args=[Constant(value='NULL')], keywords=[])], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='parts', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='SQL', ctx=Load()), args=[Constant(value='NOT NULL')], keywords=[])], keywords=[]))]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='is_pk', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='parts', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='SQL', ctx=Load()), args=[Constant(value='PRIMARY KEY')], keywords=[])], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='extra', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='parts', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='SQL', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='extra', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='NodeList', ctx=Load()), args=[Name(id='parts', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='MySQLMigrator', bases=[Name(id='SchemaMigrator', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='explicit_create_foreign_key', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='explicit_delete_foreign_key', ctx=Store())], value=Constant(value=True)), FunctionDef(name='_alter_column', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ctx'), arg(arg='table'), arg(arg='column')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_alter_table', ctx=Load()), args=[Name(id='ctx', ctx=Load()), Name(id='table', ctx=Load())], keywords=[]), attr='literal', ctx=Load()), args=[Constant(value=' MODIFY ')], keywords=[]), attr='sql', ctx=Load()), args=[Call(func=Name(id='Entity', ctx=Load()), args=[Name(id='column', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='rename_table', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='old_name'), arg(arg='new_name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='make_context', ctx=Load()), args=[], keywords=[]), attr='literal', ctx=Load()), args=[Constant(value='RENAME TABLE ')], keywords=[]), attr='sql', ctx=Load()), args=[Call(func=Name(id='Entity', ctx=Load()), args=[Name(id='old_name', ctx=Load())], keywords=[])], keywords=[]), attr='literal', ctx=Load()), args=[Constant(value=' TO ')], keywords=[]), attr='sql', ctx=Load()), args=[Call(func=Name(id='Entity', ctx=Load()), args=[Name(id='new_name', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[Name(id='operation', ctx=Load())]), FunctionDef(name='_get_column_definition', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='table'), arg(arg='column_name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='cursor', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='database', ctx=Load()), attr='execute_sql', ctx=Load()), args=[BinOp(left=Constant(value='DESCRIBE `%s`;'), op=Mod(), right=Name(id='table', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='rows', ctx=Store())], value=Call(func=Attribute(value=Name(id='cursor', ctx=Load()), attr='fetchall', ctx=Load()), args=[], keywords=[])), For(target=Name(id='row', ctx=Store()), iter=Name(id='rows', ctx=Load()), body=[Assign(targets=[Name(id='column', ctx=Store())], value=Call(func=Name(id='MySQLColumn', ctx=Load()), args=[Starred(value=Name(id='row', ctx=Load()), ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='column', ctx=Load()), attr='name', ctx=Load()), ops=[Eq()], comparators=[Name(id='column_name', ctx=Load())]), body=[Return(value=Name(id='column', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Constant(value=False))], decorator_list=[]), FunctionDef(name='get_foreign_key_constraint', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='table'), arg(arg='column_name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='cursor', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='database', ctx=Load()), attr='execute_sql', ctx=Load()), args=[Constant(value='SELECT constraint_name FROM information_schema.key_column_usage WHERE table_schema = DATABASE() AND table_name = %s AND column_name = %s AND referenced_table_name IS NOT NULL AND referenced_column_name IS NOT NULL;'), Tuple(elts=[Name(id='table', ctx=Load()), Name(id='column_name', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='cursor', ctx=Load()), attr='fetchone', ctx=Load()), args=[], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='result', ctx=Load())), body=[Raise(exc=Call(func=Name(id='AttributeError', ctx=Load()), args=[BinOp(left=Constant(value='Unable to find foreign key constraint for "%s" on table "%s".'), op=Mod(), right=Tuple(elts=[Name(id='table', ctx=Load()), Name(id='column_name', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[]), Return(value=Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value=0), ctx=Load()))], decorator_list=[]), FunctionDef(name='drop_foreign_key_constraint', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='table'), arg(arg='column_name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='fk_constraint', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_foreign_key_constraint', ctx=Load()), args=[Name(id='table', ctx=Load()), Name(id='column_name', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_alter_table', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='make_context', ctx=Load()), args=[], keywords=[]), Name(id='table', ctx=Load())], keywords=[]), attr='literal', ctx=Load()), args=[Constant(value=' DROP FOREIGN KEY ')], keywords=[]), attr='sql', ctx=Load()), args=[Call(func=Name(id='Entity', ctx=Load()), args=[Name(id='fk_constraint', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[Name(id='operation', ctx=Load())]), FunctionDef(name='add_inline_fk_sql', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ctx'), arg(arg='field')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[]), FunctionDef(name='add_not_null', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='table'), arg(arg='column')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='column_def', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_column_definition', ctx=Load()), args=[Name(id='table', ctx=Load()), Name(id='column', ctx=Load())], keywords=[])), Assign(targets=[Name(id='add_not_null', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_alter_table', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='make_context', ctx=Load()), args=[], keywords=[]), Name(id='table', ctx=Load())], keywords=[]), attr='literal', ctx=Load()), args=[Constant(value=' MODIFY ')], keywords=[]), attr='sql', ctx=Load()), args=[Call(func=Attribute(value=Name(id='column_def', ctx=Load()), attr='sql', ctx=Load()), args=[], keywords=[keyword(arg='is_null', value=Constant(value=False))])], keywords=[])), Assign(targets=[Name(id='fk_objects', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[GeneratorExp(elt=Tuple(elts=[Attribute(value=Name(id='fk', ctx=Load()), attr='column', ctx=Load()), Name(id='fk', ctx=Load())], ctx=Load()), generators=[comprehension(target=Name(id='fk', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='database', ctx=Load()), attr='get_foreign_keys', ctx=Load()), args=[Name(id='table', ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[])), If(test=Compare(left=Name(id='column', ctx=Load()), ops=[NotIn()], comparators=[Name(id='fk_objects', ctx=Load())]), body=[Return(value=Name(id='add_not_null', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='fk_metadata', ctx=Store())], value=Subscript(value=Name(id='fk_objects', ctx=Load()), slice=Name(id='column', ctx=Load()), ctx=Load())), Return(value=Tuple(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='drop_foreign_key_constraint', ctx=Load()), args=[Name(id='table', ctx=Load()), Name(id='column', ctx=Load())], keywords=[]), Name(id='add_not_null', ctx=Load()), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='add_foreign_key_constraint', ctx=Load()), args=[Name(id='table', ctx=Load()), Name(id='column', ctx=Load()), Attribute(value=Name(id='fk_metadata', ctx=Load()), attr='dest_table', ctx=Load()), Attribute(value=Name(id='fk_metadata', ctx=Load()), attr='dest_column', ctx=Load())], keywords=[])], ctx=Load()))], decorator_list=[Name(id='operation', ctx=Load())]), FunctionDef(name='drop_not_null', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='table'), arg(arg='column')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='column', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_column_definition', ctx=Load()), args=[Name(id='table', ctx=Load()), Name(id='column', ctx=Load())], keywords=[])), If(test=Attribute(value=Name(id='column', ctx=Load()), attr='is_pk', ctx=Load()), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Primary keys can not be null')], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_alter_table', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='make_context', ctx=Load()), args=[], keywords=[]), Name(id='table', ctx=Load())], keywords=[]), attr='literal', ctx=Load()), args=[Constant(value=' MODIFY ')], keywords=[]), attr='sql', ctx=Load()), args=[Call(func=Attribute(value=Name(id='column', ctx=Load()), attr='sql', ctx=Load()), args=[], keywords=[keyword(arg='is_null', value=Constant(value=True))])], keywords=[]))], decorator_list=[Name(id='operation', ctx=Load())]), FunctionDef(name='rename_column', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='table'), arg(arg='old_name'), arg(arg='new_name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='fk_objects', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[GeneratorExp(elt=Tuple(elts=[Attribute(value=Name(id='fk', ctx=Load()), attr='column', ctx=Load()), Name(id='fk', ctx=Load())], ctx=Load()), generators=[comprehension(target=Name(id='fk', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='database', ctx=Load()), attr='get_foreign_keys', ctx=Load()), args=[Name(id='table', ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Name(id='is_foreign_key', ctx=Store())], value=Compare(left=Name(id='old_name', ctx=Load()), ops=[In()], comparators=[Name(id='fk_objects', ctx=Load())])), Assign(targets=[Name(id='column', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_column_definition', ctx=Load()), args=[Name(id='table', ctx=Load()), Name(id='old_name', ctx=Load())], keywords=[])), Assign(targets=[Name(id='rename_ctx', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_alter_table', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='make_context', ctx=Load()), args=[], keywords=[]), Name(id='table', ctx=Load())], keywords=[]), attr='literal', ctx=Load()), args=[Constant(value=' CHANGE ')], keywords=[]), attr='sql', ctx=Load()), args=[Call(func=Name(id='Entity', ctx=Load()), args=[Name(id='old_name', ctx=Load())], keywords=[])], keywords=[]), attr='literal', ctx=Load()), args=[Constant(value=' ')], keywords=[]), attr='sql', ctx=Load()), args=[Call(func=Attribute(value=Name(id='column', ctx=Load()), attr='sql', ctx=Load()), args=[], keywords=[keyword(arg='column_name', value=Name(id='new_name', ctx=Load()))])], keywords=[])), If(test=Name(id='is_foreign_key', ctx=Load()), body=[Assign(targets=[Name(id='fk_metadata', ctx=Store())], value=Subscript(value=Name(id='fk_objects', ctx=Load()), slice=Name(id='old_name', ctx=Load()), ctx=Load())), Return(value=List(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='drop_foreign_key_constraint', ctx=Load()), args=[Name(id='table', ctx=Load()), Name(id='old_name', ctx=Load())], keywords=[]), Name(id='rename_ctx', ctx=Load()), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='add_foreign_key_constraint', ctx=Load()), args=[Name(id='table', ctx=Load()), Name(id='new_name', ctx=Load()), Attribute(value=Name(id='fk_metadata', ctx=Load()), attr='dest_table', ctx=Load()), Attribute(value=Name(id='fk_metadata', ctx=Load()), attr='dest_column', ctx=Load())], keywords=[])], ctx=Load()))], orelse=[Return(value=Name(id='rename_ctx', ctx=Load()))])], decorator_list=[Name(id='operation', ctx=Load())]), FunctionDef(name='alter_column_type', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='table'), arg(arg='column'), arg(arg='field'), arg(arg='cast')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='cast', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='alter_column_type() does not support cast with MySQL.')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='ctx', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='make_context', ctx=Load()), args=[], keywords=[])), Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_alter_table', ctx=Load()), args=[Name(id='ctx', ctx=Load()), Name(id='table', ctx=Load())], keywords=[]), attr='literal', ctx=Load()), args=[Constant(value=' MODIFY ')], keywords=[]), attr='sql', ctx=Load()), args=[Call(func=Name(id='Entity', ctx=Load()), args=[Name(id='column', ctx=Load())], keywords=[])], keywords=[]), attr='literal', ctx=Load()), args=[Constant(value=' ')], keywords=[]), attr='sql', ctx=Load()), args=[Call(func=Attribute(value=Name(id='field', ctx=Load()), attr='ddl', ctx=Load()), args=[Name(id='ctx', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[Name(id='operation', ctx=Load())]), FunctionDef(name='drop_index', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='table'), arg(arg='index_name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='make_context', ctx=Load()), args=[], keywords=[]), attr='literal', ctx=Load()), args=[Constant(value='DROP INDEX ')], keywords=[]), attr='sql', ctx=Load()), args=[Call(func=Name(id='Entity', ctx=Load()), args=[Name(id='index_name', ctx=Load())], keywords=[])], keywords=[]), attr='literal', ctx=Load()), args=[Constant(value=' ON ')], keywords=[]), attr='sql', ctx=Load()), args=[Call(func=Name(id='Entity', ctx=Load()), args=[Name(id='table', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[Name(id='operation', ctx=Load())])], decorator_list=[]), ClassDef(name='SqliteMigrator', bases=[Name(id='SchemaMigrator', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    SQLite supports a subset of ALTER TABLE queries, view the docs for the\n    full details http://sqlite.org/lang_altertable.html\n    ')), Assign(targets=[Name(id='column_re', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='(.+?)\\((.+)\\)')], keywords=[])), Assign(targets=[Name(id='column_split_re', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='(?:[^,(]|\\([^)]*\\))+')], keywords=[])), Assign(targets=[Name(id='column_name_re', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='["`\']?([\\w]+)')], keywords=[])), Assign(targets=[Name(id='fk_re', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='FOREIGN KEY\\s+\\("?([\\w]+)"?\\)\\s+'), Attribute(value=Name(id='re', ctx=Load()), attr='I', ctx=Load())], keywords=[])), FunctionDef(name='_get_column_names', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='table')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='res', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='database', ctx=Load()), attr='execute_sql', ctx=Load()), args=[BinOp(left=Constant(value='select * from "%s" limit 1'), op=Mod(), right=Name(id='table', ctx=Load()))], keywords=[])), Return(value=ListComp(elt=Subscript(value=Name(id='item', ctx=Load()), slice=Constant(value=0), ctx=Load()), generators=[comprehension(target=Name(id='item', ctx=Store()), iter=Attribute(value=Name(id='res', ctx=Load()), attr='description', ctx=Load()), ifs=[], is_async=0)]))], decorator_list=[]), FunctionDef(name='_get_create_table', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='table')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='res', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='database', ctx=Load()), attr='execute_sql', ctx=Load()), args=[Constant(value='select name, sql from sqlite_master where type=? and LOWER(name)=?'), List(elts=[Constant(value='table'), Call(func=Attribute(value=Name(id='table', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])], ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='res', ctx=Load()), attr='fetchone', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='_update_column', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='table'), arg(arg='column_to_update'), arg(arg='fn')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='columns', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Attribute(value=Name(id='column', ctx=Load()), attr='name', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), generators=[comprehension(target=Name(id='column', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='database', ctx=Load()), attr='get_columns', ctx=Load()), args=[Name(id='table', ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[])), If(test=Compare(left=Call(func=Attribute(value=Name(id='column_to_update', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), ops=[NotIn()], comparators=[Name(id='columns', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='Column "%s" does not exist on "%s"'), op=Mod(), right=Tuple(elts=[Name(id='column_to_update', ctx=Load()), Name(id='table', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='table', ctx=Store()), Name(id='create_table', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_create_table', ctx=Load()), args=[Name(id='table', ctx=Load())], keywords=[])), Assign(targets=[Name(id='indexes', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='database', ctx=Load()), attr='get_indexes', ctx=Load()), args=[Name(id='table', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='database', ctx=Load()), attr='get_foreign_keys', ctx=Load()), args=[Name(id='table', ctx=Load())], keywords=[])), Assign(targets=[Name(id='create_table', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value='\\s+'), Constant(value=' '), Name(id='create_table', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='raw_create', ctx=Store()), Name(id='raw_columns', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='column_re', ctx=Load()), attr='search', ctx=Load()), args=[Name(id='create_table', ctx=Load())], keywords=[]), attr='groups', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='split_columns', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='column_split_re', ctx=Load()), attr='findall', ctx=Load()), args=[Name(id='raw_columns', ctx=Load())], keywords=[])), Assign(targets=[Name(id='column_defs', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='col', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]), generators=[comprehension(target=Name(id='col', ctx=Store()), iter=Name(id='split_columns', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='new_column_defs', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='new_column_names', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='original_column_names', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='constraint_terms', ctx=Store())], value=Tuple(elts=[Constant(value='foreign '), Constant(value='primary '), Constant(value='constraint '), Constant(value='check ')], ctx=Load())), For(target=Name(id='column_def', ctx=Store()), iter=Name(id='column_defs', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='column_name', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='column_name_re', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='column_def', ctx=Load())], keywords=[]), attr='groups', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='column_name', ctx=Load()), ops=[Eq()], comparators=[Name(id='column_to_update', ctx=Load())]), body=[Assign(targets=[Name(id='new_column_def', ctx=Store())], value=Call(func=Name(id='fn', ctx=Load()), args=[Name(id='column_name', ctx=Load()), Name(id='column_def', ctx=Load())], keywords=[])), If(test=Name(id='new_column_def', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='new_column_defs', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='new_column_def', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='original_column_names', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='column_name', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='column_name', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='column_name_re', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='new_column_def', ctx=Load())], keywords=[]), attr='groups', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='new_column_names', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='column_name', ctx=Load())], keywords=[]))], orelse=[])], orelse=[Expr(value=Call(func=Attribute(value=Name(id='new_column_defs', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='column_def', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='column_def', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), attr='startswith', ctx=Load()), args=[Name(id='constraint_terms', ctx=Load())], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id='new_column_names', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='column_name', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='original_column_names', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='column_name', ctx=Load())], keywords=[]))], orelse=[])])], orelse=[]), Assign(targets=[Name(id='original_to_new', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[Call(func=Name(id='zip', ctx=Load()), args=[Name(id='original_column_names', ctx=Load()), Name(id='new_column_names', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='new_column', ctx=Store())], value=Call(func=Attribute(value=Name(id='original_to_new', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='column_to_update', ctx=Load())], keywords=[])), Assign(targets=[Name(id='fk_filter_fn', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='column_def')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Name(id='column_def', ctx=Load()))), If(test=UnaryOp(op=Not(), operand=Name(id='new_column', ctx=Load())), body=[Assign(targets=[Name(id='fk_filter_fn', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='column_def')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Constant(value=None)))], orelse=[If(test=Compare(left=Name(id='new_column', ctx=Load()), ops=[NotEq()], comparators=[Name(id='column_to_update', ctx=Load())]), body=[Assign(targets=[Name(id='fk_filter_fn', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='column_def')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='fk_re', ctx=Load()), attr='sub', ctx=Load()), args=[BinOp(left=Constant(value='FOREIGN KEY ("%s") '), op=Mod(), right=Name(id='new_column', ctx=Load())), Name(id='column_def', ctx=Load())], keywords=[])))], orelse=[])]), Assign(targets=[Name(id='cleaned_columns', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='column_def', ctx=Store()), iter=Name(id='new_column_defs', ctx=Load()), body=[Assign(targets=[Name(id='match', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='fk_re', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='column_def', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='match', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Subscript(value=Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='groups', ctx=Load()), args=[], keywords=[]), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='column_to_update', ctx=Load())])]), body=[Assign(targets=[Name(id='column_def', ctx=Store())], value=Call(func=Name(id='fk_filter_fn', ctx=Load()), args=[Name(id='column_def', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='column_def', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='cleaned_columns', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='column_def', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='temp_table', ctx=Store())], value=BinOp(left=Name(id='table', ctx=Load()), op=Add(), right=Constant(value='__tmp__'))), Assign(targets=[Name(id='rgx', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[BinOp(left=Constant(value='("?)%s("?)'), op=Mod(), right=Name(id='table', ctx=Load())), Attribute(value=Name(id='re', ctx=Load()), attr='I', ctx=Load())], keywords=[])), Assign(targets=[Name(id='create', ctx=Store())], value=Call(func=Attribute(value=Name(id='rgx', ctx=Load()), attr='sub', ctx=Load()), args=[BinOp(left=Constant(value='\\1%s\\2'), op=Mod(), right=Name(id='temp_table', ctx=Load())), Name(id='raw_create', ctx=Load())], keywords=[])), Assign(targets=[Name(id='columns', ctx=Store())], value=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Name(id='cleaned_columns', ctx=Load())], keywords=[])), Assign(targets=[Name(id='queries', ctx=Store())], value=List(elts=[Call(func=Name(id='NodeList', ctx=Load()), args=[List(elts=[Call(func=Name(id='SQL', ctx=Load()), args=[Constant(value='DROP TABLE IF EXISTS')], keywords=[]), Call(func=Name(id='Entity', ctx=Load()), args=[Name(id='temp_table', ctx=Load())], keywords=[])], ctx=Load())], keywords=[]), Call(func=Name(id='SQL', ctx=Load()), args=[BinOp(left=Constant(value='%s (%s)'), op=Mod(), right=Tuple(elts=[Call(func=Attribute(value=Name(id='create', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]), Name(id='columns', ctx=Load())], ctx=Load()))], keywords=[])], ctx=Load())), Assign(targets=[Name(id='populate_table', ctx=Store())], value=Call(func=Name(id='NodeList', ctx=Load()), args=[Tuple(elts=[Call(func=Name(id='SQL', ctx=Load()), args=[Constant(value='INSERT INTO')], keywords=[]), Call(func=Name(id='Entity', ctx=Load()), args=[Name(id='temp_table', ctx=Load())], keywords=[]), Call(func=Name(id='EnclosedNodeList', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='Entity', ctx=Load()), args=[Name(id='col', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='col', ctx=Store()), iter=Name(id='new_column_names', ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='SQL', ctx=Load()), args=[Constant(value='SELECT')], keywords=[]), Call(func=Name(id='CommaNodeList', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='Entity', ctx=Load()), args=[Name(id='col', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='col', ctx=Store()), iter=Name(id='original_column_names', ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Call(func=Name(id='SQL', ctx=Load()), args=[Constant(value='FROM')], keywords=[]), Call(func=Name(id='Entity', ctx=Load()), args=[Name(id='table', ctx=Load())], keywords=[])], ctx=Load())], keywords=[])), Assign(targets=[Name(id='drop_original', ctx=Store())], value=Call(func=Name(id='NodeList', ctx=Load()), args=[List(elts=[Call(func=Name(id='SQL', ctx=Load()), args=[Constant(value='DROP TABLE')], keywords=[]), Call(func=Name(id='Entity', ctx=Load()), args=[Name(id='table', ctx=Load())], keywords=[])], ctx=Load())], keywords=[])), AugAssign(target=Name(id='queries', ctx=Store()), op=Add(), value=List(elts=[Name(id='populate_table', ctx=Load()), Name(id='drop_original', ctx=Load()), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='rename_table', ctx=Load()), args=[Name(id='temp_table', ctx=Load()), Name(id='table', ctx=Load())], keywords=[])], ctx=Load())), For(target=Name(id='index', ctx=Store()), iter=Call(func=Name(id='filter', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='idx')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Attribute(value=Name(id='idx', ctx=Load()), attr='sql', ctx=Load())), Name(id='indexes', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='column_to_update', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='index', ctx=Load()), attr='columns', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='queries', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='SQL', ctx=Load()), args=[Attribute(value=Name(id='index', ctx=Load()), attr='sql', ctx=Load())], keywords=[])], keywords=[]))], orelse=[If(test=Name(id='new_column', ctx=Load()), body=[Assign(targets=[Name(id='sql', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_fix_index', ctx=Load()), args=[Attribute(value=Name(id='index', ctx=Load()), attr='sql', ctx=Load()), Name(id='column_to_update', ctx=Load()), Name(id='new_column', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='sql', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='queries', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='SQL', ctx=Load()), args=[Name(id='sql', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], orelse=[])])], orelse=[]), Return(value=Name(id='queries', ctx=Load()))], decorator_list=[Name(id='operation', ctx=Load())]), FunctionDef(name='_fix_index', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='sql'), arg(arg='column_to_update'), arg(arg='new_column')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='parts', ctx=Store())], value=Call(func=Attribute(value=Name(id='sql', ctx=Load()), attr='split', ctx=Load()), args=[Name(id='column_to_update', ctx=Load())], keywords=[])), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='parts', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=2)]), body=[Return(value=Call(func=Attribute(value=Name(id='sql', ctx=Load()), attr='replace', ctx=Load()), args=[Name(id='column_to_update', ctx=Load()), Name(id='new_column', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='lhs', ctx=Store()), Name(id='rhs', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='sql', ctx=Load()), attr='rsplit', ctx=Load()), args=[Constant(value='('), Constant(value=1)], keywords=[])), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Attribute(value=Name(id='rhs', ctx=Load()), attr='split', ctx=Load()), args=[Name(id='column_to_update', ctx=Load())], keywords=[])], keywords=[]), ops=[Eq()], comparators=[Constant(value=2)]), body=[Return(value=BinOp(left=Constant(value='%s(%s'), op=Mod(), right=Tuple(elts=[Name(id='lhs', ctx=Load()), Call(func=Attribute(value=Name(id='rhs', ctx=Load()), attr='replace', ctx=Load()), args=[Name(id='column_to_update', ctx=Load()), Name(id='new_column', ctx=Load())], keywords=[])], ctx=Load())))], orelse=[]), Assign(targets=[Name(id='parts', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Call(func=Attribute(value=Name(id='rhs', ctx=Load()), attr='rsplit', ctx=Load()), args=[Constant(value=')'), Constant(value=1)], keywords=[]), slice=Constant(value=0), ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=',')], keywords=[])), Assign(targets=[Name(id='columns', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='part', ctx=Load()), attr='strip', ctx=Load()), args=[Constant(value='"`[]\' ')], keywords=[]), generators=[comprehension(target=Name(id='part', ctx=Store()), iter=Name(id='parts', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='clean', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='column', ctx=Store()), iter=Name(id='columns', ctx=Load()), body=[If(test=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='match', ctx=Load()), args=[BinOp(left=Constant(value='%s(?:[\'"`\\]]?\\s|$)'), op=Mod(), right=Name(id='column_to_update', ctx=Load())), Name(id='column', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='column', ctx=Store())], value=BinOp(left=Name(id='new_column', ctx=Load()), op=Add(), right=Subscript(value=Name(id='column', ctx=Load()), slice=Slice(lower=Call(func=Name(id='len', ctx=Load()), args=[Name(id='column_to_update', ctx=Load())], keywords=[])), ctx=Load())))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='clean', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='column', ctx=Load())], keywords=[]))], orelse=[]), Return(value=BinOp(left=Constant(value='%s(%s)'), op=Mod(), right=Tuple(elts=[Name(id='lhs', ctx=Load()), Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[GeneratorExp(elt=BinOp(left=Constant(value='"%s"'), op=Mod(), right=Name(id='c', ctx=Load())), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Name(id='clean', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())))], decorator_list=[]), FunctionDef(name='drop_column', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='table'), arg(arg='column_name'), arg(arg='cascade'), arg(arg='legacy')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=False)]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='sqlite3', ctx=Load()), attr='sqlite_version_info', ctx=Load()), ops=[GtE()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=25), Constant(value=0)], ctx=Load())]), UnaryOp(op=Not(), operand=Name(id='legacy', ctx=Load()))]), body=[Assign(targets=[Name(id='ctx', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='make_context', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_alter_table', ctx=Load()), args=[Name(id='ctx', ctx=Load()), Name(id='table', ctx=Load())], keywords=[]), attr='literal', ctx=Load()), args=[Constant(value=' DROP COLUMN ')], keywords=[]), attr='sql', ctx=Load()), args=[Call(func=Name(id='Entity', ctx=Load()), args=[Name(id='column_name', ctx=Load())], keywords=[])], keywords=[])), Return(value=Name(id='ctx', ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_update_column', ctx=Load()), args=[Name(id='table', ctx=Load()), Name(id='column_name', ctx=Load()), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='a'), arg(arg='b')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Constant(value=None))], keywords=[]))], decorator_list=[Name(id='operation', ctx=Load())]), FunctionDef(name='rename_column', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='table'), arg(arg='old_name'), arg(arg='new_name'), arg(arg='legacy')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='sqlite3', ctx=Load()), attr='sqlite_version_info', ctx=Load()), ops=[GtE()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=25), Constant(value=0)], ctx=Load())]), UnaryOp(op=Not(), operand=Name(id='legacy', ctx=Load()))]), body=[Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_alter_table', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='make_context', ctx=Load()), args=[], keywords=[]), Name(id='table', ctx=Load())], keywords=[]), attr='literal', ctx=Load()), args=[Constant(value=' RENAME COLUMN ')], keywords=[]), attr='sql', ctx=Load()), args=[Call(func=Name(id='Entity', ctx=Load()), args=[Name(id='old_name', ctx=Load())], keywords=[])], keywords=[]), attr='literal', ctx=Load()), args=[Constant(value=' TO ')], keywords=[]), attr='sql', ctx=Load()), args=[Call(func=Name(id='Entity', ctx=Load()), args=[Name(id='new_name', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), FunctionDef(name='_rename', args=arguments(posonlyargs=[], args=[arg(arg='column_name'), arg(arg='column_def')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='column_def', ctx=Load()), attr='replace', ctx=Load()), args=[Name(id='column_name', ctx=Load()), Name(id='new_name', ctx=Load())], keywords=[]))], decorator_list=[]), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_update_column', ctx=Load()), args=[Name(id='table', ctx=Load()), Name(id='old_name', ctx=Load()), Name(id='_rename', ctx=Load())], keywords=[]))], decorator_list=[Name(id='operation', ctx=Load())]), FunctionDef(name='add_not_null', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='table'), arg(arg='column')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='_add_not_null', args=arguments(posonlyargs=[], args=[arg(arg='column_name'), arg(arg='column_def')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Name(id='column_def', ctx=Load()), op=Add(), right=Constant(value=' NOT NULL')))], decorator_list=[]), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_update_column', ctx=Load()), args=[Name(id='table', ctx=Load()), Name(id='column', ctx=Load()), Name(id='_add_not_null', ctx=Load())], keywords=[]))], decorator_list=[Name(id='operation', ctx=Load())]), FunctionDef(name='drop_not_null', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='table'), arg(arg='column')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='_drop_not_null', args=arguments(posonlyargs=[], args=[arg(arg='column_name'), arg(arg='column_def')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='column_def', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='NOT NULL'), Constant(value='')], keywords=[]))], decorator_list=[]), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_update_column', ctx=Load()), args=[Name(id='table', ctx=Load()), Name(id='column', ctx=Load()), Name(id='_drop_not_null', ctx=Load())], keywords=[]))], decorator_list=[Name(id='operation', ctx=Load())]), FunctionDef(name='alter_column_type', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='table'), arg(arg='column'), arg(arg='field'), arg(arg='cast')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='cast', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='alter_column_type() does not support cast with Sqlite.')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='ctx', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='make_context', ctx=Load()), args=[], keywords=[])), FunctionDef(name='_alter_column_type', args=arguments(posonlyargs=[], args=[arg(arg='column_name'), arg(arg='column_def')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='node_list', ctx=Store())], value=Call(func=Attribute(value=Name(id='field', ctx=Load()), attr='ddl', ctx=Load()), args=[Name(id='ctx', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='sql', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='ctx', ctx=Load()), attr='sql', ctx=Load()), args=[Call(func=Name(id='Entity', ctx=Load()), args=[Name(id='column', ctx=Load())], keywords=[])], keywords=[]), attr='sql', ctx=Load()), args=[Name(id='node_list', ctx=Load())], keywords=[]), attr='query', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='sql', ctx=Load()))], decorator_list=[]), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_update_column', ctx=Load()), args=[Name(id='table', ctx=Load()), Name(id='column', ctx=Load()), Name(id='_alter_column_type', ctx=Load())], keywords=[]))], decorator_list=[Name(id='operation', ctx=Load())]), FunctionDef(name='add_constraint', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='table'), arg(arg='name'), arg(arg='constraint')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Name(id='NotImplementedError', ctx=Load()))], decorator_list=[Name(id='operation', ctx=Load())]), FunctionDef(name='drop_constraint', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='table'), arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Name(id='NotImplementedError', ctx=Load()))], decorator_list=[Name(id='operation', ctx=Load())]), FunctionDef(name='add_foreign_key_constraint', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='table'), arg(arg='column_name'), arg(arg='field'), arg(arg='on_delete'), arg(arg='on_update')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Raise(exc=Name(id='NotImplementedError', ctx=Load()))], decorator_list=[Name(id='operation', ctx=Load())])], decorator_list=[]), FunctionDef(name='migrate', args=arguments(posonlyargs=[], args=[], vararg=arg(arg='operations'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[For(target=Name(id='operation', ctx=Store()), iter=Name(id='operations', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='operation', ctx=Load()), attr='run', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[])], type_ignores=[])