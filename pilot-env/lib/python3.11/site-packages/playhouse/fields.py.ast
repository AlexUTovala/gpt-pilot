Module(body=[Try(body=[Import(names=[alias(name='bz2')])], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Assign(targets=[Name(id='bz2', ctx=Store())], value=Constant(value=None))])], orelse=[], finalbody=[]), Try(body=[Import(names=[alias(name='zlib')])], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Assign(targets=[Name(id='zlib', ctx=Store())], value=Constant(value=None))])], orelse=[], finalbody=[]), Try(body=[Import(names=[alias(name='cPickle', asname='pickle')])], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Import(names=[alias(name='pickle')])])], orelse=[], finalbody=[]), ImportFrom(module='peewee', names=[alias(name='BlobField')], level=0), ImportFrom(module='peewee', names=[alias(name='buffer_type')], level=0), ClassDef(name='CompressedField', bases=[Name(id='BlobField', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='ZLIB', ctx=Store())], value=Constant(value='zlib')), Assign(targets=[Name(id='BZ2', ctx=Store())], value=Constant(value='bz2')), Assign(targets=[Name(id='algorithm_to_import', ctx=Store())], value=Dict(keys=[Name(id='ZLIB', ctx=Load()), Name(id='BZ2', ctx=Load())], values=[Name(id='zlib', ctx=Load()), Name(id='bz2', ctx=Load())])), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='compression_level'), arg(arg='algorithm')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[Constant(value=6), Name(id='ZLIB', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='compression_level', ctx=Store())], value=Name(id='compression_level', ctx=Load())), If(test=Compare(left=Name(id='algorithm', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='algorithm_to_import', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='Unrecognized algorithm %s'), op=Mod(), right=Name(id='algorithm', ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Name(id='compress_module', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='algorithm_to_import', ctx=Load()), slice=Name(id='algorithm', ctx=Load()), ctx=Load())), If(test=Compare(left=Name(id='compress_module', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='Missing library required for %s.'), op=Mod(), right=Name(id='algorithm', ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='algorithm', ctx=Store())], value=Name(id='algorithm', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='compress', ctx=Store())], value=Attribute(value=Name(id='compress_module', ctx=Load()), attr='compress', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='decompress', ctx=Store())], value=Attribute(value=Name(id='compress_module', ctx=Load()), attr='decompress', ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[Name(id='CompressedField', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]), attr='__init__', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='python_value', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='value', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='decompress', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='db_value', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='value', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_constructor', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='compress', ctx=Load()), args=[Name(id='value', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='compression_level', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], decorator_list=[])], decorator_list=[]), ClassDef(name='PickleField', bases=[Name(id='BlobField', ctx=Load())], keywords=[], body=[FunctionDef(name='python_value', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='value', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='buffer_type', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Name(id='bytes', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='loads', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='db_value', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='value', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='pickled', ctx=Store())], value=Call(func=Attribute(value=Name(id='pickle', ctx=Load()), attr='dumps', ctx=Load()), args=[Name(id='value', ctx=Load()), Attribute(value=Name(id='pickle', ctx=Load()), attr='HIGHEST_PROTOCOL', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_constructor', ctx=Load()), args=[Name(id='pickled', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[])], decorator_list=[])], type_ignores=[])