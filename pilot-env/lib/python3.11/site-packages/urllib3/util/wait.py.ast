Module(body=[Import(names=[alias(name='errno')]), Import(names=[alias(name='select')]), Import(names=[alias(name='sys')]), ImportFrom(module='functools', names=[alias(name='partial')], level=0), Try(body=[ImportFrom(module='time', names=[alias(name='monotonic')], level=0)], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[ImportFrom(module='time', names=[alias(name='time', asname='monotonic')], level=0)])], orelse=[], finalbody=[]), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='NoWayToWaitForSocketError'), Constant(value='wait_for_read'), Constant(value='wait_for_write')], ctx=Load())), ClassDef(name='NoWayToWaitForSocketError', bases=[Name(id='Exception', ctx=Load())], keywords=[], body=[Pass()], decorator_list=[]), If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), ops=[GtE()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=5)], ctx=Load())]), body=[FunctionDef(name='_retry_on_intr', args=arguments(posonlyargs=[], args=[arg(arg='fn'), arg(arg='timeout')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='fn', ctx=Load()), args=[Name(id='timeout', ctx=Load())], keywords=[]))], decorator_list=[])], orelse=[FunctionDef(name='_retry_on_intr', args=arguments(posonlyargs=[], args=[arg(arg='fn'), arg(arg='timeout')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='timeout', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='deadline', ctx=Store())], value=Call(func=Name(id='float', ctx=Load()), args=[Constant(value='inf')], keywords=[]))], orelse=[Assign(targets=[Name(id='deadline', ctx=Store())], value=BinOp(left=Call(func=Name(id='monotonic', ctx=Load()), args=[], keywords=[]), op=Add(), right=Name(id='timeout', ctx=Load())))]), While(test=Constant(value=True), body=[Try(body=[Return(value=Call(func=Name(id='fn', ctx=Load()), args=[Name(id='timeout', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='OSError', ctx=Load()), Attribute(value=Name(id='select', ctx=Load()), attr='error', ctx=Load())], ctx=Load()), name='e', body=[If(test=Compare(left=Subscript(value=Attribute(value=Name(id='e', ctx=Load()), attr='args', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='errno', ctx=Load()), attr='EINTR', ctx=Load())]), body=[Raise()], orelse=[Assign(targets=[Name(id='timeout', ctx=Store())], value=BinOp(left=Name(id='deadline', ctx=Load()), op=Sub(), right=Call(func=Name(id='monotonic', ctx=Load()), args=[], keywords=[]))), If(test=Compare(left=Name(id='timeout', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='timeout', ctx=Store())], value=Constant(value=0))], orelse=[]), If(test=Compare(left=Name(id='timeout', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='float', ctx=Load()), args=[Constant(value='inf')], keywords=[])]), body=[Assign(targets=[Name(id='timeout', ctx=Store())], value=Constant(value=None))], orelse=[]), Continue()])])], orelse=[], finalbody=[])], orelse=[])], decorator_list=[])]), FunctionDef(name='select_wait_for_socket', args=arguments(posonlyargs=[], args=[arg(arg='sock'), arg(arg='read'), arg(arg='write'), arg(arg='timeout')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Constant(value=False), Constant(value=None)]), body=[If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Name(id='read', ctx=Load())), UnaryOp(op=Not(), operand=Name(id='write', ctx=Load()))]), body=[Raise(exc=Call(func=Name(id='RuntimeError', ctx=Load()), args=[Constant(value='must specify at least one of read=True, write=True')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='rcheck', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='wcheck', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=Name(id='read', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='rcheck', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='sock', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='write', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='wcheck', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='sock', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='fn', ctx=Store())], value=Call(func=Name(id='partial', ctx=Load()), args=[Attribute(value=Name(id='select', ctx=Load()), attr='select', ctx=Load()), Name(id='rcheck', ctx=Load()), Name(id='wcheck', ctx=Load()), Name(id='wcheck', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='rready', ctx=Store()), Name(id='wready', ctx=Store()), Name(id='xready', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_retry_on_intr', ctx=Load()), args=[Name(id='fn', ctx=Load()), Name(id='timeout', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='bool', ctx=Load()), args=[BoolOp(op=Or(), values=[Name(id='rready', ctx=Load()), Name(id='wready', ctx=Load()), Name(id='xready', ctx=Load())])], keywords=[]))], decorator_list=[]), FunctionDef(name='poll_wait_for_socket', args=arguments(posonlyargs=[], args=[arg(arg='sock'), arg(arg='read'), arg(arg='write'), arg(arg='timeout')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Constant(value=False), Constant(value=None)]), body=[If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Name(id='read', ctx=Load())), UnaryOp(op=Not(), operand=Name(id='write', ctx=Load()))]), body=[Raise(exc=Call(func=Name(id='RuntimeError', ctx=Load()), args=[Constant(value='must specify at least one of read=True, write=True')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='mask', ctx=Store())], value=Constant(value=0)), If(test=Name(id='read', ctx=Load()), body=[AugAssign(target=Name(id='mask', ctx=Store()), op=BitOr(), value=Attribute(value=Name(id='select', ctx=Load()), attr='POLLIN', ctx=Load()))], orelse=[]), If(test=Name(id='write', ctx=Load()), body=[AugAssign(target=Name(id='mask', ctx=Store()), op=BitOr(), value=Attribute(value=Name(id='select', ctx=Load()), attr='POLLOUT', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='poll_obj', ctx=Store())], value=Call(func=Attribute(value=Name(id='select', ctx=Load()), attr='poll', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='poll_obj', ctx=Load()), attr='register', ctx=Load()), args=[Name(id='sock', ctx=Load()), Name(id='mask', ctx=Load())], keywords=[])), FunctionDef(name='do_poll', args=arguments(posonlyargs=[], args=[arg(arg='t')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='t', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[AugAssign(target=Name(id='t', ctx=Store()), op=Mult(), value=Constant(value=1000))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='poll_obj', ctx=Load()), attr='poll', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]))], decorator_list=[]), Return(value=Call(func=Name(id='bool', ctx=Load()), args=[Call(func=Name(id='_retry_on_intr', ctx=Load()), args=[Name(id='do_poll', ctx=Load()), Name(id='timeout', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='null_wait_for_socket', args=arguments(posonlyargs=[], args=[], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Raise(exc=Call(func=Name(id='NoWayToWaitForSocketError', ctx=Load()), args=[Constant(value='no select-equivalent available')], keywords=[]))], decorator_list=[]), FunctionDef(name='_have_working_poll', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Name(id='poll_obj', ctx=Store())], value=Call(func=Attribute(value=Name(id='select', ctx=Load()), attr='poll', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Name(id='_retry_on_intr', ctx=Load()), args=[Attribute(value=Name(id='poll_obj', ctx=Load()), attr='poll', ctx=Load()), Constant(value=0)], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='AttributeError', ctx=Load()), Name(id='OSError', ctx=Load())], ctx=Load()), body=[Return(value=Constant(value=False))])], orelse=[Return(value=Constant(value=True))], finalbody=[])], decorator_list=[]), FunctionDef(name='wait_for_socket', args=arguments(posonlyargs=[], args=[], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Global(names=['wait_for_socket']), If(test=Call(func=Name(id='_have_working_poll', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='wait_for_socket', ctx=Store())], value=Name(id='poll_wait_for_socket', ctx=Load()))], orelse=[If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='select', ctx=Load()), Constant(value='select')], keywords=[]), body=[Assign(targets=[Name(id='wait_for_socket', ctx=Store())], value=Name(id='select_wait_for_socket', ctx=Load()))], orelse=[Assign(targets=[Name(id='wait_for_socket', ctx=Store())], value=Name(id='null_wait_for_socket', ctx=Load()))])]), Return(value=Call(func=Name(id='wait_for_socket', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='wait_for_read', args=arguments(posonlyargs=[], args=[arg(arg='sock'), arg(arg='timeout')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Waits for reading to be available on a given socket.\n    Returns True if the socket is readable, or False if the timeout expired.\n    ')), Return(value=Call(func=Name(id='wait_for_socket', ctx=Load()), args=[Name(id='sock', ctx=Load())], keywords=[keyword(arg='read', value=Constant(value=True)), keyword(arg='timeout', value=Name(id='timeout', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='wait_for_write', args=arguments(posonlyargs=[], args=[arg(arg='sock'), arg(arg='timeout')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Waits for writing to be available on a given socket.\n    Returns True if the socket is readable, or False if the timeout expired.\n    ')), Return(value=Call(func=Name(id='wait_for_socket', ctx=Load()), args=[Name(id='sock', ctx=Load())], keywords=[keyword(arg='write', value=Constant(value=True)), keyword(arg='timeout', value=Name(id='timeout', ctx=Load()))]))], decorator_list=[])], type_ignores=[])