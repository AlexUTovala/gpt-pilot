Module(body=[ImportFrom(module='__future__', names=[alias(name='absolute_import')], level=0), ImportFrom(module='base64', names=[alias(name='b64encode')], level=0), ImportFrom(module='exceptions', names=[alias(name='UnrewindableBodyError')], level=2), ImportFrom(module='packages.six', names=[alias(name='b'), alias(name='integer_types')], level=2), Assign(targets=[Name(id='SKIP_HEADER', ctx=Store())], value=Constant(value='@@@SKIP_HEADER@@@')), Assign(targets=[Name(id='SKIPPABLE_HEADERS', ctx=Store())], value=Call(func=Name(id='frozenset', ctx=Load()), args=[List(elts=[Constant(value='accept-encoding'), Constant(value='host'), Constant(value='user-agent')], ctx=Load())], keywords=[])), Assign(targets=[Name(id='ACCEPT_ENCODING', ctx=Store())], value=Constant(value='gzip,deflate')), Try(body=[Import(names=[alias(name='brotli', asname='_unused_module_brotli')])], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Pass()])], orelse=[AugAssign(target=Name(id='ACCEPT_ENCODING', ctx=Store()), op=Add(), value=Constant(value=',br'))], finalbody=[]), Assign(targets=[Name(id='_FAILEDTELL', ctx=Store())], value=Call(func=Name(id='object', ctx=Load()), args=[], keywords=[])), FunctionDef(name='make_headers', args=arguments(posonlyargs=[], args=[arg(arg='keep_alive'), arg(arg='accept_encoding'), arg(arg='user_agent'), arg(arg='basic_auth'), arg(arg='proxy_basic_auth'), arg(arg='disable_cache')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='\n    Shortcuts for generating request headers.\n\n    :param keep_alive:\n        If ``True``, adds \'connection: keep-alive\' header.\n\n    :param accept_encoding:\n        Can be a boolean, list, or string.\n        ``True`` translates to \'gzip,deflate\'.\n        List will get joined by comma.\n        String will be used as provided.\n\n    :param user_agent:\n        String representing the user-agent you want, such as\n        "python-urllib3/0.6"\n\n    :param basic_auth:\n        Colon-separated username:password string for \'authorization: basic ...\'\n        auth header.\n\n    :param proxy_basic_auth:\n        Colon-separated username:password string for \'proxy-authorization: basic ...\'\n        auth header.\n\n    :param disable_cache:\n        If ``True``, adds \'cache-control: no-cache\' header.\n\n    Example::\n\n        >>> make_headers(keep_alive=True, user_agent="Batman/1.0")\n        {\'connection\': \'keep-alive\', \'user-agent\': \'Batman/1.0\'}\n        >>> make_headers(accept_encoding=True)\n        {\'accept-encoding\': \'gzip,deflate\'}\n    ')), Assign(targets=[Name(id='headers', ctx=Store())], value=Dict(keys=[], values=[])), If(test=Name(id='accept_encoding', ctx=Load()), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='accept_encoding', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Pass()], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='accept_encoding', ctx=Load()), Name(id='list', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='accept_encoding', ctx=Store())], value=Call(func=Attribute(value=Constant(value=','), attr='join', ctx=Load()), args=[Name(id='accept_encoding', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='accept_encoding', ctx=Store())], value=Name(id='ACCEPT_ENCODING', ctx=Load()))])]), Assign(targets=[Subscript(value=Name(id='headers', ctx=Load()), slice=Constant(value='accept-encoding'), ctx=Store())], value=Name(id='accept_encoding', ctx=Load()))], orelse=[]), If(test=Name(id='user_agent', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='headers', ctx=Load()), slice=Constant(value='user-agent'), ctx=Store())], value=Name(id='user_agent', ctx=Load()))], orelse=[]), If(test=Name(id='keep_alive', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='headers', ctx=Load()), slice=Constant(value='connection'), ctx=Store())], value=Constant(value='keep-alive'))], orelse=[]), If(test=Name(id='basic_auth', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='headers', ctx=Load()), slice=Constant(value='authorization'), ctx=Store())], value=BinOp(left=Constant(value='Basic '), op=Add(), right=Call(func=Attribute(value=Call(func=Name(id='b64encode', ctx=Load()), args=[Call(func=Name(id='b', ctx=Load()), args=[Name(id='basic_auth', ctx=Load())], keywords=[])], keywords=[]), attr='decode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[])))], orelse=[]), If(test=Name(id='proxy_basic_auth', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='headers', ctx=Load()), slice=Constant(value='proxy-authorization'), ctx=Store())], value=BinOp(left=Constant(value='Basic '), op=Add(), right=Call(func=Attribute(value=Call(func=Name(id='b64encode', ctx=Load()), args=[Call(func=Name(id='b', ctx=Load()), args=[Name(id='proxy_basic_auth', ctx=Load())], keywords=[])], keywords=[]), attr='decode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[])))], orelse=[]), If(test=Name(id='disable_cache', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='headers', ctx=Load()), slice=Constant(value='cache-control'), ctx=Store())], value=Constant(value='no-cache'))], orelse=[]), Return(value=Name(id='headers', ctx=Load()))], decorator_list=[]), FunctionDef(name='set_file_position', args=arguments(posonlyargs=[], args=[arg(arg='body'), arg(arg='pos')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    If a position is provided, move file to that point.\n    Otherwise, we'll attempt to record a position for future use.\n    ")), If(test=Compare(left=Name(id='pos', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Name(id='rewind_body', ctx=Load()), args=[Name(id='body', ctx=Load()), Name(id='pos', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='body', ctx=Load()), Constant(value='tell'), Constant(value=None)], keywords=[]), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Try(body=[Assign(targets=[Name(id='pos', ctx=Store())], value=Call(func=Attribute(value=Name(id='body', ctx=Load()), attr='tell', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='IOError', ctx=Load()), Name(id='OSError', ctx=Load())], ctx=Load()), body=[Assign(targets=[Name(id='pos', ctx=Store())], value=Name(id='_FAILEDTELL', ctx=Load()))])], orelse=[], finalbody=[])], orelse=[])]), Return(value=Name(id='pos', ctx=Load()))], decorator_list=[]), FunctionDef(name='rewind_body', args=arguments(posonlyargs=[], args=[arg(arg='body'), arg(arg='body_pos')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Attempt to rewind body to a certain position.\n    Primarily used for request redirects and retries.\n\n    :param body:\n        File-like object that supports seek.\n\n    :param int pos:\n        Position to seek to in file.\n    ')), Assign(targets=[Name(id='body_seek', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='body', ctx=Load()), Constant(value='seek'), Constant(value=None)], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='body_seek', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='body_pos', ctx=Load()), Name(id='integer_types', ctx=Load())], keywords=[])]), body=[Try(body=[Expr(value=Call(func=Name(id='body_seek', ctx=Load()), args=[Name(id='body_pos', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='IOError', ctx=Load()), Name(id='OSError', ctx=Load())], ctx=Load()), body=[Raise(exc=Call(func=Name(id='UnrewindableBodyError', ctx=Load()), args=[Constant(value='An error occurred when rewinding request body for redirect/retry.')], keywords=[]))])], orelse=[], finalbody=[])], orelse=[If(test=Compare(left=Name(id='body_pos', ctx=Load()), ops=[Is()], comparators=[Name(id='_FAILEDTELL', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='UnrewindableBodyError', ctx=Load()), args=[Constant(value='Unable to record file position for rewinding request body during a redirect/retry.')], keywords=[]))], orelse=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='body_pos must be of type integer, instead it was %s.'), op=Mod(), right=Call(func=Name(id='type', ctx=Load()), args=[Name(id='body_pos', ctx=Load())], keywords=[]))], keywords=[]))])])], decorator_list=[])], type_ignores=[])