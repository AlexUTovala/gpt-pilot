Module(body=[ImportFrom(module='__future__', names=[alias(name='absolute_import')], level=0), Try(body=[ImportFrom(module='collections.abc', names=[alias(name='Mapping'), alias(name='MutableMapping')], level=0)], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[ImportFrom(module='collections', names=[alias(name='Mapping'), alias(name='MutableMapping')], level=0)])], orelse=[], finalbody=[]), Try(body=[ImportFrom(module='threading', names=[alias(name='RLock')], level=0)], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[ClassDef(name='RLock', bases=[], keywords=[], body=[FunctionDef(name='__enter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[]), FunctionDef(name='__exit__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='exc_type'), arg(arg='exc_value'), arg(arg='traceback')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[])], decorator_list=[])])], orelse=[], finalbody=[]), ImportFrom(module='collections', names=[alias(name='OrderedDict')], level=0), ImportFrom(module='exceptions', names=[alias(name='InvalidHeader')], level=1), ImportFrom(module='packages', names=[alias(name='six')], level=1), ImportFrom(module='packages.six', names=[alias(name='iterkeys'), alias(name='itervalues')], level=1), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='RecentlyUsedContainer'), Constant(value='HTTPHeaderDict')], ctx=Load())), Assign(targets=[Name(id='_Null', ctx=Store())], value=Call(func=Name(id='object', ctx=Load()), args=[], keywords=[])), ClassDef(name='RecentlyUsedContainer', bases=[Name(id='MutableMapping', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Provides a thread-safe dict-like container which maintains up to\n    ``maxsize`` keys while throwing away the least-recently-used keys beyond\n    ``maxsize``.\n\n    :param maxsize:\n        Maximum number of recent elements to retain.\n\n    :param dispose_func:\n        Every time an item is evicted from the container,\n        ``dispose_func(value)`` is called.  Callback which will get called\n    ')), Assign(targets=[Name(id='ContainerCls', ctx=Store())], value=Name(id='OrderedDict', ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='maxsize'), arg(arg='dispose_func')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=10), Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_maxsize', ctx=Store())], value=Name(id='maxsize', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='dispose_func', ctx=Store())], value=Name(id='dispose_func', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_container', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='ContainerCls', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='lock', ctx=Store())], value=Call(func=Name(id='RLock', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='__getitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Attribute(value=Name(id='self', ctx=Load()), attr='lock', ctx=Load()))], body=[Assign(targets=[Name(id='item', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_container', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_container', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Name(id='item', ctx=Load())), Return(value=Name(id='item', ctx=Load()))])], decorator_list=[]), FunctionDef(name='__setitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='evicted_value', ctx=Store())], value=Name(id='_Null', ctx=Load())), With(items=[withitem(context_expr=Attribute(value=Name(id='self', ctx=Load()), attr='lock', ctx=Load()))], body=[Assign(targets=[Name(id='evicted_value', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_container', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='key', ctx=Load()), Name(id='_Null', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_container', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Name(id='value', ctx=Load())), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_container', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_maxsize', ctx=Load())]), body=[Assign(targets=[Tuple(elts=[Name(id='_key', ctx=Store()), Name(id='evicted_value', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_container', ctx=Load()), attr='popitem', ctx=Load()), args=[], keywords=[keyword(arg='last', value=Constant(value=False))]))], orelse=[])]), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='dispose_func', ctx=Load()), Compare(left=Name(id='evicted_value', ctx=Load()), ops=[IsNot()], comparators=[Name(id='_Null', ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='dispose_func', ctx=Load()), args=[Name(id='evicted_value', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='__delitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Attribute(value=Name(id='self', ctx=Load()), attr='lock', ctx=Load()))], body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_container', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[]))]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='dispose_func', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='dispose_func', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='__len__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Attribute(value=Name(id='self', ctx=Load()), attr='lock', ctx=Load()))], body=[Return(value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_container', ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='__iter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[Constant(value='Iteration over this class is unlikely to be threadsafe.')], keywords=[]))], decorator_list=[]), FunctionDef(name='clear', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Attribute(value=Name(id='self', ctx=Load()), attr='lock', ctx=Load()))], body=[Assign(targets=[Name(id='values', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='itervalues', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_container', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_container', ctx=Load()), attr='clear', ctx=Load()), args=[], keywords=[]))]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='dispose_func', ctx=Load()), body=[For(target=Name(id='value', ctx=Store()), iter=Name(id='values', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='dispose_func', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='keys', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Attribute(value=Name(id='self', ctx=Load()), attr='lock', ctx=Load()))], body=[Return(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='iterkeys', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_container', ctx=Load())], keywords=[])], keywords=[]))])], decorator_list=[])], decorator_list=[]), ClassDef(name='HTTPHeaderDict', bases=[Name(id='MutableMapping', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="\n    :param headers:\n        An iterable of field-value pairs. Must not contain multiple field names\n        when compared case-insensitively.\n\n    :param kwargs:\n        Additional field-value pairs to pass in to ``dict.update``.\n\n    A ``dict`` like container for storing HTTP Headers.\n\n    Field names are stored and compared case-insensitively in compliance with\n    RFC 7230. Iteration provides the first case-sensitive key seen for each\n    case-insensitive pair.\n\n    Using ``__setitem__`` syntax overwrites fields that compare equal\n    case-insensitively in order to maintain ``dict``'s api. For fields that\n    compare equal, instead create a new ``HTTPHeaderDict`` and use ``.add``\n    in a loop.\n\n    If multiple fields that are equal case-insensitively are passed to the\n    constructor or ``.update``, the behavior is undefined and some will be\n    lost.\n\n    >>> headers = HTTPHeaderDict()\n    >>> headers.add('Set-Cookie', 'foo=bar')\n    >>> headers.add('set-cookie', 'baz=quxx')\n    >>> headers['content-length'] = '7'\n    >>> headers['SET-cookie']\n    'foo=bar, baz=quxx'\n    >>> headers['Content-Length']\n    '7'\n    ")), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='headers')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[Name(id='HTTPHeaderDict', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_container', ctx=Store())], value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='headers', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='headers', ctx=Load()), Name(id='HTTPHeaderDict', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_copy_from', ctx=Load()), args=[Name(id='headers', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='extend', ctx=Load()), args=[Name(id='headers', ctx=Load())], keywords=[]))])], orelse=[]), If(test=Name(id='kwargs', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='extend', ctx=Load()), args=[Name(id='kwargs', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='__setitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key'), arg(arg='val')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_container', ctx=Load()), slice=Call(func=Attribute(value=Name(id='key', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), ctx=Store())], value=List(elts=[Name(id='key', ctx=Load()), Name(id='val', ctx=Load())], ctx=Load())), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_container', ctx=Load()), slice=Call(func=Attribute(value=Name(id='key', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), ctx=Load()))], decorator_list=[]), FunctionDef(name='__getitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='val', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_container', ctx=Load()), slice=Call(func=Attribute(value=Name(id='key', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), ctx=Load())), Return(value=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Subscript(value=Name(id='val', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='__delitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Delete(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_container', ctx=Load()), slice=Call(func=Attribute(value=Name(id='key', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), ctx=Del())])], decorator_list=[]), FunctionDef(name='__contains__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Compare(left=Call(func=Attribute(value=Name(id='key', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_container', ctx=Load())]))], decorator_list=[]), FunctionDef(name='__eq__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='other', ctx=Load()), Name(id='Mapping', ctx=Load())], keywords=[])), UnaryOp(op=Not(), operand=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='other', ctx=Load()), Constant(value='keys')], keywords=[]))]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='other', ctx=Load()), Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])], keywords=[])), body=[Assign(targets=[Name(id='other', ctx=Store())], value=Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), args=[Name(id='other', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Compare(left=Call(func=Name(id='dict', ctx=Load()), args=[GeneratorExp(elt=Tuple(elts=[Call(func=Attribute(value=Name(id='k', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), Name(id='v', ctx=Load())], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='itermerged', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='dict', ctx=Load()), args=[GeneratorExp(elt=Tuple(elts=[Call(func=Attribute(value=Name(id='k', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), Name(id='v', ctx=Load())], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='other', ctx=Load()), attr='itermerged', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[])]))], decorator_list=[]), FunctionDef(name='__ne__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='__eq__', ctx=Load()), args=[Name(id='other', ctx=Load())], keywords=[])))], decorator_list=[]), If(test=Attribute(value=Name(id='six', ctx=Load()), attr='PY2', ctx=Load()), body=[Assign(targets=[Name(id='iterkeys', ctx=Store())], value=Attribute(value=Name(id='MutableMapping', ctx=Load()), attr='iterkeys', ctx=Load())), Assign(targets=[Name(id='itervalues', ctx=Store())], value=Attribute(value=Name(id='MutableMapping', ctx=Load()), attr='itervalues', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='__marker', ctx=Store())], value=Call(func=Name(id='object', ctx=Load()), args=[], keywords=[])), FunctionDef(name='__len__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_container', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='__iter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='vals', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_container', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Yield(value=Subscript(value=Name(id='vals', ctx=Load()), slice=Constant(value=0), ctx=Load())))], orelse=[])], decorator_list=[]), FunctionDef(name='pop', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key'), arg(arg='default')], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='__marker', ctx=Load())]), body=[Expr(value=Constant(value='D.pop(k[,d]) -> v, remove specified key and return the corresponding value.\n        If key is not found, d is returned if given, otherwise KeyError is raised.\n        ')), Try(body=[Assign(targets=[Name(id='value', ctx=Store())], value=Subscript(value=Name(id='self', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[If(test=Compare(left=Name(id='default', ctx=Load()), ops=[Is()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='__marker', ctx=Load())]), body=[Raise()], orelse=[]), Return(value=Name(id='default', ctx=Load()))])], orelse=[Delete(targets=[Subscript(value=Name(id='self', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Del())]), Return(value=Name(id='value', ctx=Load()))], finalbody=[])], decorator_list=[]), FunctionDef(name='discard', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Delete(targets=[Subscript(value=Name(id='self', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Del())])], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='add', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key'), arg(arg='val')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Adds a (name, value) pair, doesn't overwrite the value if it already\n        exists.\n\n        >>> headers = HTTPHeaderDict(foo='bar')\n        >>> headers.add('Foo', 'baz')\n        >>> headers['foo']\n        'bar, baz'\n        ")), Assign(targets=[Name(id='key_lower', ctx=Store())], value=Call(func=Attribute(value=Name(id='key', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='new_vals', ctx=Store())], value=List(elts=[Name(id='key', ctx=Load()), Name(id='val', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='vals', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_container', ctx=Load()), attr='setdefault', ctx=Load()), args=[Name(id='key_lower', ctx=Load()), Name(id='new_vals', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='new_vals', ctx=Load()), ops=[IsNot()], comparators=[Name(id='vals', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='vals', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='val', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='extend', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Constant(value='Generic import function for any type of header-like object.\n        Adapted version of MutableMapping.update in order to insert items\n        with self.add instead of self.__setitem__\n        ')), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='extend() takes at most 1 positional arguments ({0} given)'), attr='format', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='other', ctx=Store())], value=IfExp(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[]), ops=[GtE()], comparators=[Constant(value=1)]), body=Subscript(value=Name(id='args', ctx=Load()), slice=Constant(value=0), ctx=Load()), orelse=Tuple(elts=[], ctx=Load()))), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='other', ctx=Load()), Name(id='HTTPHeaderDict', ctx=Load())], keywords=[]), body=[For(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='val', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='other', ctx=Load()), attr='iteritems', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='key', ctx=Load()), Name(id='val', ctx=Load())], keywords=[]))], orelse=[])], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='other', ctx=Load()), Name(id='Mapping', ctx=Load())], keywords=[]), body=[For(target=Name(id='key', ctx=Store()), iter=Name(id='other', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='key', ctx=Load()), Subscript(value=Name(id='other', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], orelse=[If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='other', ctx=Load()), Constant(value='keys')], keywords=[]), body=[For(target=Name(id='key', ctx=Store()), iter=Call(func=Attribute(value=Name(id='other', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='key', ctx=Load()), Subscript(value=Name(id='other', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], orelse=[For(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Name(id='other', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='key', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]))], orelse=[])])])]), For(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='kwargs', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='key', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='getlist', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key'), arg(arg='default')], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='__marker', ctx=Load())]), body=[Expr(value=Constant(value="Returns a list of all the values for the named field. Returns an\n        empty list if the key doesn't exist.")), Try(body=[Assign(targets=[Name(id='vals', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_container', ctx=Load()), slice=Call(func=Attribute(value=Name(id='key', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[If(test=Compare(left=Name(id='default', ctx=Load()), ops=[Is()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='__marker', ctx=Load())]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Return(value=Name(id='default', ctx=Load()))])], orelse=[Return(value=Subscript(value=Name(id='vals', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()))], finalbody=[])], decorator_list=[]), Assign(targets=[Name(id='getheaders', ctx=Store())], value=Name(id='getlist', ctx=Load())), Assign(targets=[Name(id='getallmatchingheaders', ctx=Store())], value=Name(id='getlist', ctx=Load())), Assign(targets=[Name(id='iget', ctx=Store())], value=Name(id='getlist', ctx=Load())), Assign(targets=[Name(id='get_all', ctx=Store())], value=Name(id='getlist', ctx=Load())), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Constant(value='%s(%s)'), op=Mod(), right=Tuple(elts=[Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), Call(func=Name(id='dict', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='itermerged', ctx=Load()), args=[], keywords=[])], keywords=[])], ctx=Load())))], decorator_list=[]), FunctionDef(name='_copy_from', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='key', ctx=Store()), iter=Name(id='other', ctx=Load()), body=[Assign(targets=[Name(id='val', ctx=Store())], value=Call(func=Attribute(value=Name(id='other', ctx=Load()), attr='getlist', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='val', ctx=Load()), Name(id='list', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='val', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='val', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_container', ctx=Load()), slice=Call(func=Attribute(value=Name(id='key', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), ctx=Store())], value=BinOp(left=List(elts=[Name(id='key', ctx=Load())], ctx=Load()), op=Add(), right=Name(id='val', ctx=Load())))], orelse=[])], decorator_list=[]), FunctionDef(name='copy', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='clone', ctx=Store())], value=Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='clone', ctx=Load()), attr='_copy_from', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), Return(value=Name(id='clone', ctx=Load()))], decorator_list=[]), FunctionDef(name='iteritems', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Iterate over all header lines, including duplicate ones.')), For(target=Name(id='key', ctx=Store()), iter=Name(id='self', ctx=Load()), body=[Assign(targets=[Name(id='vals', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_container', ctx=Load()), slice=Call(func=Attribute(value=Name(id='key', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), ctx=Load())), For(target=Name(id='val', ctx=Store()), iter=Subscript(value=Name(id='vals', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), body=[Expr(value=Yield(value=Tuple(elts=[Subscript(value=Name(id='vals', ctx=Load()), slice=Constant(value=0), ctx=Load()), Name(id='val', ctx=Load())], ctx=Load())))], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='itermerged', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Iterate over all headers, merging duplicate ones together.')), For(target=Name(id='key', ctx=Store()), iter=Name(id='self', ctx=Load()), body=[Assign(targets=[Name(id='val', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_container', ctx=Load()), slice=Call(func=Attribute(value=Name(id='key', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), ctx=Load())), Expr(value=Yield(value=Tuple(elts=[Subscript(value=Name(id='val', ctx=Load()), slice=Constant(value=0), ctx=Load()), Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Subscript(value=Name(id='val', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])], ctx=Load())))], orelse=[])], decorator_list=[]), FunctionDef(name='items', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='iteritems', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='from_httplib', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='message')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Read headers from a Python 2 httplib message object.')), Assign(targets=[Name(id='obs_fold_continued_leaders', ctx=Store())], value=Tuple(elts=[Constant(value=' '), Constant(value='\t')], ctx=Load())), Assign(targets=[Name(id='headers', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='line', ctx=Store()), iter=Attribute(value=Name(id='message', ctx=Load()), attr='headers', ctx=Load()), body=[If(test=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='startswith', ctx=Load()), args=[Name(id='obs_fold_continued_leaders', ctx=Load())], keywords=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='headers', ctx=Load())), body=[Raise(exc=Call(func=Name(id='InvalidHeader', ctx=Load()), args=[BinOp(left=Constant(value='Header continuation with no previous header: %s'), op=Mod(), right=Name(id='line', ctx=Load()))], keywords=[]))], orelse=[Assign(targets=[Tuple(elts=[Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store())], value=Subscript(value=Name(id='headers', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())), Assign(targets=[Subscript(value=Name(id='headers', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Store())], value=Tuple(elts=[Name(id='key', ctx=Load()), BinOp(left=BinOp(left=Name(id='value', ctx=Load()), op=Add(), right=Constant(value=' ')), op=Add(), right=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]))], ctx=Load())), Continue()])], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=':'), Constant(value=1)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='headers', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='key', ctx=Load()), Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[])], ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='cls', ctx=Load()), args=[Name(id='headers', ctx=Load())], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())])], decorator_list=[])], type_ignores=[])