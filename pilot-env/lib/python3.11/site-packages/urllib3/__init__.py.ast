Module(body=[Expr(value=Constant(value='\nPython HTTP library with thread-safe connection pooling, file post support, user friendly, and more\n')), ImportFrom(module='__future__', names=[alias(name='absolute_import')], level=0), Import(names=[alias(name='logging')]), Import(names=[alias(name='warnings')]), ImportFrom(module='logging', names=[alias(name='NullHandler')], level=0), ImportFrom(names=[alias(name='exceptions')], level=1), ImportFrom(module='_version', names=[alias(name='__version__')], level=1), ImportFrom(module='connectionpool', names=[alias(name='HTTPConnectionPool'), alias(name='HTTPSConnectionPool'), alias(name='connection_from_url')], level=1), ImportFrom(module='filepost', names=[alias(name='encode_multipart_formdata')], level=1), ImportFrom(module='poolmanager', names=[alias(name='PoolManager'), alias(name='ProxyManager'), alias(name='proxy_from_url')], level=1), ImportFrom(module='response', names=[alias(name='HTTPResponse')], level=1), ImportFrom(module='util.request', names=[alias(name='make_headers')], level=1), ImportFrom(module='util.retry', names=[alias(name='Retry')], level=1), ImportFrom(module='util.timeout', names=[alias(name='Timeout')], level=1), ImportFrom(module='util.url', names=[alias(name='get_host')], level=1), Assign(targets=[Name(id='__author__', ctx=Store())], value=Constant(value='Andrey Petrov (andrey.petrov@shazow.net)')), Assign(targets=[Name(id='__license__', ctx=Store())], value=Constant(value='MIT')), Assign(targets=[Name(id='__version__', ctx=Store())], value=Name(id='__version__', ctx=Load())), Assign(targets=[Name(id='__all__', ctx=Store())], value=Tuple(elts=[Constant(value='HTTPConnectionPool'), Constant(value='HTTPSConnectionPool'), Constant(value='PoolManager'), Constant(value='ProxyManager'), Constant(value='HTTPResponse'), Constant(value='Retry'), Constant(value='Timeout'), Constant(value='add_stderr_logger'), Constant(value='connection_from_url'), Constant(value='disable_warnings'), Constant(value='encode_multipart_formdata'), Constant(value='get_host'), Constant(value='make_headers'), Constant(value='proxy_from_url')], ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[]), attr='addHandler', ctx=Load()), args=[Call(func=Name(id='NullHandler', ctx=Load()), args=[], keywords=[])], keywords=[])), FunctionDef(name='add_stderr_logger', args=arguments(posonlyargs=[], args=[arg(arg='level')], kwonlyargs=[], kw_defaults=[], defaults=[Attribute(value=Name(id='logging', ctx=Load()), attr='DEBUG', ctx=Load())]), body=[Expr(value=Constant(value='\n    Helper for quickly adding a StreamHandler to the logger. Useful for\n    debugging.\n\n    Returns the handler after adding it.\n    ')), Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), Assign(targets=[Name(id='handler', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='StreamHandler', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='handler', ctx=Load()), attr='setFormatter', ctx=Load()), args=[Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='Formatter', ctx=Load()), args=[Constant(value='%(asctime)s %(levelname)s %(message)s')], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='addHandler', ctx=Load()), args=[Name(id='handler', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='setLevel', ctx=Load()), args=[Name(id='level', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Added a stderr logging handler to logger: %s'), Name(id='__name__', ctx=Load())], keywords=[])), Return(value=Name(id='handler', ctx=Load()))], decorator_list=[]), Delete(targets=[Name(id='NullHandler', ctx=Del())]), Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='simplefilter', ctx=Load()), args=[Constant(value='always'), Attribute(value=Name(id='exceptions', ctx=Load()), attr='SecurityWarning', ctx=Load())], keywords=[keyword(arg='append', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='simplefilter', ctx=Load()), args=[Constant(value='default'), Attribute(value=Name(id='exceptions', ctx=Load()), attr='SubjectAltNameWarning', ctx=Load())], keywords=[keyword(arg='append', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='simplefilter', ctx=Load()), args=[Constant(value='default'), Attribute(value=Name(id='exceptions', ctx=Load()), attr='InsecurePlatformWarning', ctx=Load())], keywords=[keyword(arg='append', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='simplefilter', ctx=Load()), args=[Constant(value='default'), Attribute(value=Name(id='exceptions', ctx=Load()), attr='SNIMissingWarning', ctx=Load())], keywords=[keyword(arg='append', value=Constant(value=True))])), FunctionDef(name='disable_warnings', args=arguments(posonlyargs=[], args=[arg(arg='category')], kwonlyargs=[], kw_defaults=[], defaults=[Attribute(value=Name(id='exceptions', ctx=Load()), attr='HTTPWarning', ctx=Load())]), body=[Expr(value=Constant(value='\n    Helper for quickly disabling all urllib3 warnings.\n    ')), Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='simplefilter', ctx=Load()), args=[Constant(value='ignore'), Name(id='category', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])