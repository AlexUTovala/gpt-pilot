Module(body=[ImportFrom(module='__future__', names=[alias(name='absolute_import')], level=0), Import(names=[alias(name='io')]), Import(names=[alias(name='logging')]), Import(names=[alias(name='zlib')]), ImportFrom(module='contextlib', names=[alias(name='contextmanager')], level=0), ImportFrom(module='socket', names=[alias(name='error', asname='SocketError')], level=0), ImportFrom(module='socket', names=[alias(name='timeout', asname='SocketTimeout')], level=0), Try(body=[Import(names=[alias(name='brotli')])], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Assign(targets=[Name(id='brotli', ctx=Store())], value=Constant(value=None))])], orelse=[], finalbody=[]), ImportFrom(module='_collections', names=[alias(name='HTTPHeaderDict')], level=1), ImportFrom(module='connection', names=[alias(name='BaseSSLError'), alias(name='HTTPException')], level=1), ImportFrom(module='exceptions', names=[alias(name='BodyNotHttplibCompatible'), alias(name='DecodeError'), alias(name='HTTPError'), alias(name='IncompleteRead'), alias(name='InvalidChunkLength'), alias(name='InvalidHeader'), alias(name='ProtocolError'), alias(name='ReadTimeoutError'), alias(name='ResponseNotChunked'), alias(name='SSLError')], level=1), ImportFrom(module='packages', names=[alias(name='six')], level=1), ImportFrom(module='util.response', names=[alias(name='is_fp_closed'), alias(name='is_response_to_head')], level=1), Assign(targets=[Name(id='log', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), ClassDef(name='DeflateDecoder', bases=[Name(id='object', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_first_try', ctx=Store())], value=Constant(value=True)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Store())], value=Constant(value=b'')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_obj', ctx=Store())], value=Call(func=Attribute(value=Name(id='zlib', ctx=Load()), attr='decompressobj', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='__getattr__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='getattr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_obj', ctx=Load()), Name(id='name', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='decompress', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='data', ctx=Load())), body=[Return(value=Name(id='data', ctx=Load()))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='_first_try', ctx=Load())), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_obj', ctx=Load()), attr='decompress', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], orelse=[]), AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Store()), op=Add(), value=Name(id='data', ctx=Load())), Try(body=[Assign(targets=[Name(id='decompressed', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_obj', ctx=Load()), attr='decompress', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])), If(test=Name(id='decompressed', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_first_try', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Store())], value=Constant(value=None))], orelse=[]), Return(value=Name(id='decompressed', ctx=Load()))], handlers=[ExceptHandler(type=Attribute(value=Name(id='zlib', ctx=Load()), attr='error', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_first_try', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_obj', ctx=Store())], value=Call(func=Attribute(value=Name(id='zlib', ctx=Load()), attr='decompressobj', ctx=Load()), args=[UnaryOp(op=USub(), operand=Attribute(value=Name(id='zlib', ctx=Load()), attr='MAX_WBITS', ctx=Load()))], keywords=[])), Try(body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='decompress', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())], keywords=[]))], handlers=[], orelse=[], finalbody=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Store())], value=Constant(value=None))])])], orelse=[], finalbody=[])], decorator_list=[])], decorator_list=[]), ClassDef(name='GzipDecoderState', bases=[Name(id='object', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='FIRST_MEMBER', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='OTHER_MEMBERS', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='SWALLOW_DATA', ctx=Store())], value=Constant(value=2))], decorator_list=[]), ClassDef(name='GzipDecoder', bases=[Name(id='object', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_obj', ctx=Store())], value=Call(func=Attribute(value=Name(id='zlib', ctx=Load()), attr='decompressobj', ctx=Load()), args=[BinOp(left=Constant(value=16), op=Add(), right=Attribute(value=Name(id='zlib', ctx=Load()), attr='MAX_WBITS', ctx=Load()))], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_state', ctx=Store())], value=Attribute(value=Name(id='GzipDecoderState', ctx=Load()), attr='FIRST_MEMBER', ctx=Load()))], decorator_list=[]), FunctionDef(name='__getattr__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='getattr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_obj', ctx=Load()), Name(id='name', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='decompress', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Name(id='bytearray', ctx=Load()), args=[], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_state', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='GzipDecoderState', ctx=Load()), attr='SWALLOW_DATA', ctx=Load())]), UnaryOp(op=Not(), operand=Name(id='data', ctx=Load()))]), body=[Return(value=Call(func=Name(id='bytes', ctx=Load()), args=[Name(id='ret', ctx=Load())], keywords=[]))], orelse=[]), While(test=Constant(value=True), body=[Try(body=[AugAssign(target=Name(id='ret', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_obj', ctx=Load()), attr='decompress', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='zlib', ctx=Load()), attr='error', ctx=Load()), body=[Assign(targets=[Name(id='previous_state', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_state', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_state', ctx=Store())], value=Attribute(value=Name(id='GzipDecoderState', ctx=Load()), attr='SWALLOW_DATA', ctx=Load())), If(test=Compare(left=Name(id='previous_state', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='GzipDecoderState', ctx=Load()), attr='OTHER_MEMBERS', ctx=Load())]), body=[Return(value=Call(func=Name(id='bytes', ctx=Load()), args=[Name(id='ret', ctx=Load())], keywords=[]))], orelse=[]), Raise()])], orelse=[], finalbody=[]), Assign(targets=[Name(id='data', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_obj', ctx=Load()), attr='unused_data', ctx=Load())), If(test=UnaryOp(op=Not(), operand=Name(id='data', ctx=Load())), body=[Return(value=Call(func=Name(id='bytes', ctx=Load()), args=[Name(id='ret', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_state', ctx=Store())], value=Attribute(value=Name(id='GzipDecoderState', ctx=Load()), attr='OTHER_MEMBERS', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_obj', ctx=Store())], value=Call(func=Attribute(value=Name(id='zlib', ctx=Load()), attr='decompressobj', ctx=Load()), args=[BinOp(left=Constant(value=16), op=Add(), right=Attribute(value=Name(id='zlib', ctx=Load()), attr='MAX_WBITS', ctx=Load()))], keywords=[]))], orelse=[])], decorator_list=[])], decorator_list=[]), If(test=Compare(left=Name(id='brotli', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[ClassDef(name='BrotliDecoder', bases=[Name(id='object', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_obj', ctx=Store())], value=Call(func=Attribute(value=Name(id='brotli', ctx=Load()), attr='Decompressor', ctx=Load()), args=[], keywords=[])), If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_obj', ctx=Load()), Constant(value='decompress')], keywords=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='decompress', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_obj', ctx=Load()), attr='decompress', ctx=Load()))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='decompress', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_obj', ctx=Load()), attr='process', ctx=Load()))])], decorator_list=[]), FunctionDef(name='flush', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_obj', ctx=Load()), Constant(value='flush')], keywords=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_obj', ctx=Load()), attr='flush', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Constant(value=b''))], decorator_list=[])], decorator_list=[])], orelse=[]), ClassDef(name='MultiDecoder', bases=[Name(id='object', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    From RFC7231:\n        If one or more encodings have been applied to a representation, the\n        sender that applied the encodings MUST generate a Content-Encoding\n        header field that lists the content codings in the order in which\n        they were applied.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='modes')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_decoders', ctx=Store())], value=ListComp(elt=Call(func=Name(id='_get_decoder', ctx=Load()), args=[Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[])], keywords=[]), generators=[comprehension(target=Name(id='m', ctx=Store()), iter=Call(func=Attribute(value=Name(id='modes', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=',')], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[]), FunctionDef(name='flush', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_decoders', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='flush', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='decompress', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='d', ctx=Store()), iter=Call(func=Name(id='reversed', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_decoders', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Name(id='d', ctx=Load()), attr='decompress', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='data', ctx=Load()))], decorator_list=[])], decorator_list=[]), FunctionDef(name='_get_decoder', args=arguments(posonlyargs=[], args=[arg(arg='mode')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Constant(value=','), ops=[In()], comparators=[Name(id='mode', ctx=Load())]), body=[Return(value=Call(func=Name(id='MultiDecoder', ctx=Load()), args=[Name(id='mode', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='mode', ctx=Load()), ops=[Eq()], comparators=[Constant(value='gzip')]), body=[Return(value=Call(func=Name(id='GzipDecoder', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='brotli', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='mode', ctx=Load()), ops=[Eq()], comparators=[Constant(value='br')])]), body=[Return(value=Call(func=Name(id='BrotliDecoder', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='DeflateDecoder', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), ClassDef(name='HTTPResponse', bases=[Attribute(value=Name(id='io', ctx=Load()), attr='IOBase', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="\n    HTTP Response container.\n\n    Backwards-compatible with :class:`http.client.HTTPResponse` but the response ``body`` is\n    loaded and decoded on-demand when the ``data`` property is accessed.  This\n    class is also compatible with the Python standard library's :mod:`io`\n    module, and can hence be treated as a readable object in the context of that\n    framework.\n\n    Extra parameters for behaviour not present in :class:`http.client.HTTPResponse`:\n\n    :param preload_content:\n        If True, the response's body will be preloaded during construction.\n\n    :param decode_content:\n        If True, will attempt to decode the body based on the\n        'content-encoding' header.\n\n    :param original_response:\n        When this HTTPResponse wrapper is generated from an :class:`http.client.HTTPResponse`\n        object, it's convenient to include the original for debug purposes. It's\n        otherwise unused.\n\n    :param retries:\n        The retries contains the last :class:`~urllib3.util.retry.Retry` that\n        was used during the request.\n\n    :param enforce_content_length:\n        Enforce content length checking. Body returned by server must match\n        value of Content-Length header, if present. Otherwise, raise error.\n    ")), Assign(targets=[Name(id='CONTENT_DECODERS', ctx=Store())], value=List(elts=[Constant(value='gzip'), Constant(value='deflate')], ctx=Load())), If(test=Compare(left=Name(id='brotli', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[AugAssign(target=Name(id='CONTENT_DECODERS', ctx=Store()), op=Add(), value=List(elts=[Constant(value='br')], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='REDIRECT_STATUSES', ctx=Store())], value=List(elts=[Constant(value=301), Constant(value=302), Constant(value=303), Constant(value=307), Constant(value=308)], ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='body'), arg(arg='headers'), arg(arg='status'), arg(arg='version'), arg(arg='reason'), arg(arg='strict'), arg(arg='preload_content'), arg(arg='decode_content'), arg(arg='original_response'), arg(arg='pool'), arg(arg='connection'), arg(arg='msg'), arg(arg='retries'), arg(arg='enforce_content_length'), arg(arg='request_method'), arg(arg='request_url'), arg(arg='auto_close')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=''), Constant(value=None), Constant(value=0), Constant(value=0), Constant(value=None), Constant(value=0), Constant(value=True), Constant(value=True), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=False), Constant(value=None), Constant(value=None), Constant(value=True)]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='headers', ctx=Load()), Name(id='HTTPHeaderDict', ctx=Load())], keywords=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='headers', ctx=Store())], value=Name(id='headers', ctx=Load()))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='headers', ctx=Store())], value=Call(func=Name(id='HTTPHeaderDict', ctx=Load()), args=[Name(id='headers', ctx=Load())], keywords=[]))]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='status', ctx=Store())], value=Name(id='status', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='version', ctx=Store())], value=Name(id='version', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='reason', ctx=Store())], value=Name(id='reason', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='strict', ctx=Store())], value=Name(id='strict', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='decode_content', ctx=Store())], value=Name(id='decode_content', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='retries', ctx=Store())], value=Name(id='retries', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='enforce_content_length', ctx=Store())], value=Name(id='enforce_content_length', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='auto_close', ctx=Store())], value=Name(id='auto_close', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_decoder', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_body', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_fp', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_original_response', ctx=Store())], value=Name(id='original_response', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_fp_bytes_read', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='msg', ctx=Store())], value=Name(id='msg', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_request_url', ctx=Store())], value=Name(id='request_url', ctx=Load())), If(test=BoolOp(op=And(), values=[Name(id='body', ctx=Load()), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='body', ctx=Load()), Tuple(elts=[Attribute(value=Name(id='six', ctx=Load()), attr='string_types', ctx=Load()), Name(id='bytes', ctx=Load())], ctx=Load())], keywords=[])]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_body', ctx=Store())], value=Name(id='body', ctx=Load()))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_pool', ctx=Store())], value=Name(id='pool', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_connection', ctx=Store())], value=Name(id='connection', ctx=Load())), If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='body', ctx=Load()), Constant(value='read')], keywords=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_fp', ctx=Store())], value=Name(id='body', ctx=Load()))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='chunked', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='chunk_left', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='tr_enc', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='headers', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='transfer-encoding'), Constant(value='')], keywords=[]), attr='lower', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='encodings', ctx=Store())], value=GeneratorExp(elt=Call(func=Attribute(value=Name(id='enc', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]), generators=[comprehension(target=Name(id='enc', ctx=Store()), iter=Call(func=Attribute(value=Name(id='tr_enc', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=',')], keywords=[]), ifs=[], is_async=0)])), If(test=Compare(left=Constant(value='chunked'), ops=[In()], comparators=[Name(id='encodings', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='chunked', ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='length_remaining', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_init_length', ctx=Load()), args=[Name(id='request_method', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Name(id='preload_content', ctx=Load()), UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='_body', ctx=Load()))]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_body', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[keyword(arg='decode_content', value=Name(id='decode_content', ctx=Load()))]))], orelse=[])], decorator_list=[]), FunctionDef(name='get_redirect_location', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Should we redirect and where to?\n\n        :returns: Truthy redirect location string if we got a redirect status\n            code and valid location. ``None`` if redirect status and no\n            location. ``False`` if not a redirect status code.\n        ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='status', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='REDIRECT_STATUSES', ctx=Load())]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='headers', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='location')], keywords=[]))], orelse=[]), Return(value=Constant(value=False))], decorator_list=[]), FunctionDef(name='release_conn', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='_pool', ctx=Load())), UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='_connection', ctx=Load()))]), body=[Return()], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_pool', ctx=Load()), attr='_put_conn', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_connection', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_connection', ctx=Store())], value=Constant(value=None))], decorator_list=[]), FunctionDef(name='drain_conn', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Read and discard any remaining HTTP response data in the response connection.\n\n        Unread data in the HTTPResponse connection blocks the connection from being released back to the pool.\n        ')), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='HTTPError', ctx=Load()), Name(id='SocketError', ctx=Load()), Name(id='BaseSSLError', ctx=Load()), Name(id='HTTPException', ctx=Load())], ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='data', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_body', ctx=Load()), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_body', ctx=Load()))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_fp', ctx=Load()), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[keyword(arg='cache_content', value=Constant(value=True))]))], orelse=[])], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='connection', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_connection', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='isclosed', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='is_fp_closed', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_fp', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='tell', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Obtain the number of bytes pulled over the wire so far. May differ from\n        the amount of content returned by :meth:``urllib3.response.HTTPResponse.read``\n        if bytes are encoded on the wire (e.g, compressed).\n        ')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_fp_bytes_read', ctx=Load()))], decorator_list=[]), FunctionDef(name='_init_length', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='request_method')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Set initial length value for Response content if available.\n        ')), Assign(targets=[Name(id='length', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='headers', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='content-length')], keywords=[])), If(test=Compare(left=Name(id='length', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='chunked', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='Received response with both Content-Length and Transfer-Encoding set. This is expressly forbidden by RFC 7230 sec 3.3.2. Ignoring Content-Length and attempting to process response as Transfer-Encoding: chunked.')], keywords=[])), Return(value=Constant(value=None))], orelse=[]), Try(body=[Assign(targets=[Name(id='lengths', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='int', ctx=Load()), args=[Name(id='val', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='val', ctx=Store()), iter=Call(func=Attribute(value=Name(id='length', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=',')], keywords=[]), ifs=[], is_async=0)])], keywords=[])), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='lengths', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Raise(exc=Call(func=Name(id='InvalidHeader', ctx=Load()), args=[BinOp(left=Constant(value='Content-Length contained multiple unmatching values (%s)'), op=Mod(), right=Name(id='length', ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Name(id='length', ctx=Store())], value=Call(func=Attribute(value=Name(id='lengths', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Assign(targets=[Name(id='length', ctx=Store())], value=Constant(value=None))])], orelse=[If(test=Compare(left=Name(id='length', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='length', ctx=Store())], value=Constant(value=None))], orelse=[])], finalbody=[])], orelse=[]), Try(body=[Assign(targets=[Name(id='status', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='status', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Assign(targets=[Name(id='status', ctx=Store())], value=Constant(value=0))])], orelse=[], finalbody=[]), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='status', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value=204), Constant(value=304)], ctx=Load())]), Compare(left=Constant(value=100), ops=[LtE(), Lt()], comparators=[Name(id='status', ctx=Load()), Constant(value=200)]), Compare(left=Name(id='request_method', ctx=Load()), ops=[Eq()], comparators=[Constant(value='HEAD')])]), body=[Assign(targets=[Name(id='length', ctx=Store())], value=Constant(value=0))], orelse=[]), Return(value=Name(id='length', ctx=Load()))], decorator_list=[]), FunctionDef(name='_init_decoder', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Set-up the _decoder attribute if necessary.\n        ')), Assign(targets=[Name(id='content_encoding', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='headers', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='content-encoding'), Constant(value='')], keywords=[]), attr='lower', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_decoder', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='content_encoding', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='CONTENT_DECODERS', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_decoder', ctx=Store())], value=Call(func=Name(id='_get_decoder', ctx=Load()), args=[Name(id='content_encoding', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Constant(value=','), ops=[In()], comparators=[Name(id='content_encoding', ctx=Load())]), body=[Assign(targets=[Name(id='encodings', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='e', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]), generators=[comprehension(target=Name(id='e', ctx=Store()), iter=Call(func=Attribute(value=Name(id='content_encoding', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=',')], keywords=[]), ifs=[Compare(left=Call(func=Attribute(value=Name(id='e', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='CONTENT_DECODERS', ctx=Load())])], is_async=0)])), If(test=Call(func=Name(id='len', ctx=Load()), args=[Name(id='encodings', ctx=Load())], keywords=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_decoder', ctx=Store())], value=Call(func=Name(id='_get_decoder', ctx=Load()), args=[Name(id='content_encoding', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])])], orelse=[])], decorator_list=[]), Assign(targets=[Name(id='DECODER_ERROR_CLASSES', ctx=Store())], value=Tuple(elts=[Name(id='IOError', ctx=Load()), Attribute(value=Name(id='zlib', ctx=Load()), attr='error', ctx=Load())], ctx=Load())), If(test=Compare(left=Name(id='brotli', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[AugAssign(target=Name(id='DECODER_ERROR_CLASSES', ctx=Store()), op=Add(), value=Tuple(elts=[Attribute(value=Name(id='brotli', ctx=Load()), attr='error', ctx=Load())], ctx=Load()))], orelse=[]), FunctionDef(name='_decode', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data'), arg(arg='decode_content'), arg(arg='flush_decoder')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Decode the data passed in and potentially flush the decoder.\n        ')), If(test=UnaryOp(op=Not(), operand=Name(id='decode_content', ctx=Load())), body=[Return(value=Name(id='data', ctx=Load()))], orelse=[]), Try(body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_decoder', ctx=Load()), body=[Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_decoder', ctx=Load()), attr='decompress', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], orelse=[])], handlers=[ExceptHandler(type=Attribute(value=Name(id='self', ctx=Load()), attr='DECODER_ERROR_CLASSES', ctx=Load()), name='e', body=[Assign(targets=[Name(id='content_encoding', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='headers', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='content-encoding'), Constant(value='')], keywords=[]), attr='lower', ctx=Load()), args=[], keywords=[])), Raise(exc=Call(func=Name(id='DecodeError', ctx=Load()), args=[BinOp(left=Constant(value='Received response with content-encoding: %s, but failed to decode it.'), op=Mod(), right=Name(id='content_encoding', ctx=Load())), Name(id='e', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[]), If(test=Name(id='flush_decoder', ctx=Load()), body=[AugAssign(target=Name(id='data', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_flush_decoder', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Name(id='data', ctx=Load()))], decorator_list=[]), FunctionDef(name='_flush_decoder', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Flushes the decoder. Should only be called if the decoder is actually\n        being used.\n        ')), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_decoder', ctx=Load()), body=[Assign(targets=[Name(id='buf', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_decoder', ctx=Load()), attr='decompress', ctx=Load()), args=[Constant(value=b'')], keywords=[])), Return(value=BinOp(left=Name(id='buf', ctx=Load()), op=Add(), right=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_decoder', ctx=Load()), attr='flush', ctx=Load()), args=[], keywords=[])))], orelse=[]), Return(value=Constant(value=b''))], decorator_list=[]), FunctionDef(name='_error_catcher', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Catch low-level python exceptions, instead re-raising urllib3\n        variants, so that low-level exceptions are not leaked in the\n        high-level api.\n\n        On exit, release the connection back to the pool.\n        ')), Assign(targets=[Name(id='clean_exit', ctx=Store())], value=Constant(value=False)), Try(body=[Try(body=[Expr(value=Yield())], handlers=[ExceptHandler(type=Name(id='SocketTimeout', ctx=Load()), body=[Raise(exc=Call(func=Name(id='ReadTimeoutError', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_pool', ctx=Load()), Constant(value=None), Constant(value='Read timed out.')], keywords=[]))]), ExceptHandler(type=Name(id='BaseSSLError', ctx=Load()), name='e', body=[If(test=Compare(left=Constant(value='read operation timed out'), ops=[NotIn()], comparators=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[])]), body=[Raise(exc=Call(func=Name(id='SSLError', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]))], orelse=[]), Raise(exc=Call(func=Name(id='ReadTimeoutError', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_pool', ctx=Load()), Constant(value=None), Constant(value='Read timed out.')], keywords=[]))]), ExceptHandler(type=Tuple(elts=[Name(id='HTTPException', ctx=Load()), Name(id='SocketError', ctx=Load())], ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='ProtocolError', ctx=Load()), args=[BinOp(left=Constant(value='Connection broken: %r'), op=Mod(), right=Name(id='e', ctx=Load())), Name(id='e', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='clean_exit', ctx=Store())], value=Constant(value=True))], handlers=[], orelse=[], finalbody=[If(test=UnaryOp(op=Not(), operand=Name(id='clean_exit', ctx=Load())), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_original_response', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_original_response', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_connection', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_connection', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))], orelse=[])], orelse=[]), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='_original_response', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_original_response', ctx=Load()), attr='isclosed', ctx=Load()), args=[], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='release_conn', ctx=Load()), args=[], keywords=[]))], orelse=[])])], decorator_list=[Name(id='contextmanager', ctx=Load())]), FunctionDef(name='read', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='amt'), arg(arg='decode_content'), arg(arg='cache_content')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=False)]), body=[Expr(value=Constant(value="\n        Similar to :meth:`http.client.HTTPResponse.read`, but with two additional\n        parameters: ``decode_content`` and ``cache_content``.\n\n        :param amt:\n            How much of the content to read. If specified, caching is skipped\n            because it doesn't make sense to cache partial content as the full\n            response.\n\n        :param decode_content:\n            If True, will attempt to decode the body based on the\n            'content-encoding' header.\n\n        :param cache_content:\n            If True, will save the returned data such that the same result is\n            returned despite of the state of the underlying file object. This\n            is useful if you want the ``.data`` property to continue working\n            after having ``.read()`` the file object. (Overridden if ``amt`` is\n            set.)\n        ")), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_init_decoder', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='decode_content', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='decode_content', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='decode_content', ctx=Load()))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_fp', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return()], orelse=[]), Assign(targets=[Name(id='flush_decoder', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='fp_closed', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_fp', ctx=Load()), Constant(value='closed'), Constant(value=False)], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_error_catcher', ctx=Load()), args=[], keywords=[]))], body=[If(test=Compare(left=Name(id='amt', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='data', ctx=Store())], value=IfExp(test=UnaryOp(op=Not(), operand=Name(id='fp_closed', ctx=Load())), body=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_fp', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]), orelse=Constant(value=b''))), Assign(targets=[Name(id='flush_decoder', ctx=Store())], value=Constant(value=True))], orelse=[Assign(targets=[Name(id='cache_content', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='data', ctx=Store())], value=IfExp(test=UnaryOp(op=Not(), operand=Name(id='fp_closed', ctx=Load())), body=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_fp', ctx=Load()), attr='read', ctx=Load()), args=[Name(id='amt', ctx=Load())], keywords=[]), orelse=Constant(value=b''))), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='amt', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=0)]), UnaryOp(op=Not(), operand=Name(id='data', ctx=Load()))]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_fp', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='flush_decoder', ctx=Store())], value=Constant(value=True)), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='enforce_content_length', ctx=Load()), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='length_remaining', ctx=Load()), ops=[NotIn()], comparators=[Tuple(elts=[Constant(value=0), Constant(value=None)], ctx=Load())])]), body=[Raise(exc=Call(func=Name(id='IncompleteRead', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_fp_bytes_read', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='length_remaining', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])])]), If(test=Name(id='data', ctx=Load()), body=[AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_fp_bytes_read', ctx=Store()), op=Add(), value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='length_remaining', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='length_remaining', ctx=Store()), op=Sub(), value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_decode', ctx=Load()), args=[Name(id='data', ctx=Load()), Name(id='decode_content', ctx=Load()), Name(id='flush_decoder', ctx=Load())], keywords=[])), If(test=Name(id='cache_content', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_body', ctx=Store())], value=Name(id='data', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='data', ctx=Load()))], decorator_list=[]), FunctionDef(name='stream', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='amt'), arg(arg='decode_content')], kwonlyargs=[], kw_defaults=[], defaults=[BinOp(left=Constant(value=2), op=Pow(), right=Constant(value=16)), Constant(value=None)]), body=[Expr(value=Constant(value="\n        A generator wrapper for the read() method. A call will block until\n        ``amt`` bytes have been read from the connection or until the\n        connection is closed.\n\n        :param amt:\n            How much of the content to read. The generator will return up to\n            much data per iteration, but may return less. This is particularly\n            likely when using compressed data. However, the empty string will\n            never be returned.\n\n        :param decode_content:\n            If True, will attempt to decode the body based on the\n            'content-encoding' header.\n        ")), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='chunked', ctx=Load()), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='supports_chunked_reads', ctx=Load()), args=[], keywords=[])]), body=[For(target=Name(id='line', ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='read_chunked', ctx=Load()), args=[Name(id='amt', ctx=Load())], keywords=[keyword(arg='decode_content', value=Name(id='decode_content', ctx=Load()))]), body=[Expr(value=Yield(value=Name(id='line', ctx=Load())))], orelse=[])], orelse=[While(test=UnaryOp(op=Not(), operand=Call(func=Name(id='is_fp_closed', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_fp', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[keyword(arg='amt', value=Name(id='amt', ctx=Load())), keyword(arg='decode_content', value=Name(id='decode_content', ctx=Load()))])), If(test=Name(id='data', ctx=Load()), body=[Expr(value=Yield(value=Name(id='data', ctx=Load())))], orelse=[])], orelse=[])])], decorator_list=[]), FunctionDef(name='from_httplib', args=arguments(posonlyargs=[], args=[arg(arg='ResponseCls'), arg(arg='r')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='response_kw'), defaults=[]), body=[Expr(value=Constant(value='\n        Given an :class:`http.client.HTTPResponse` instance ``r``, return a\n        corresponding :class:`urllib3.response.HTTPResponse` object.\n\n        Remaining parameters are passed to the HTTPResponse constructor, along\n        with ``original_response=r``.\n        ')), Assign(targets=[Name(id='headers', ctx=Store())], value=Attribute(value=Name(id='r', ctx=Load()), attr='msg', ctx=Load())), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='headers', ctx=Load()), Name(id='HTTPHeaderDict', ctx=Load())], keywords=[])), body=[If(test=Attribute(value=Name(id='six', ctx=Load()), attr='PY2', ctx=Load()), body=[Assign(targets=[Name(id='headers', ctx=Store())], value=Call(func=Attribute(value=Name(id='HTTPHeaderDict', ctx=Load()), attr='from_httplib', ctx=Load()), args=[Name(id='headers', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='headers', ctx=Store())], value=Call(func=Name(id='HTTPHeaderDict', ctx=Load()), args=[Call(func=Attribute(value=Name(id='headers', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]))])], orelse=[]), Assign(targets=[Name(id='strict', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='r', ctx=Load()), Constant(value='strict'), Constant(value=0)], keywords=[])), Assign(targets=[Name(id='resp', ctx=Store())], value=Call(func=Name(id='ResponseCls', ctx=Load()), args=[], keywords=[keyword(arg='body', value=Name(id='r', ctx=Load())), keyword(arg='headers', value=Name(id='headers', ctx=Load())), keyword(arg='status', value=Attribute(value=Name(id='r', ctx=Load()), attr='status', ctx=Load())), keyword(arg='version', value=Attribute(value=Name(id='r', ctx=Load()), attr='version', ctx=Load())), keyword(arg='reason', value=Attribute(value=Name(id='r', ctx=Load()), attr='reason', ctx=Load())), keyword(arg='strict', value=Name(id='strict', ctx=Load())), keyword(arg='original_response', value=Name(id='r', ctx=Load())), keyword(value=Name(id='response_kw', ctx=Load()))])), Return(value=Name(id='resp', ctx=Load()))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='getheaders', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='headers', ctx=Load()))], decorator_list=[]), FunctionDef(name='getheader', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name'), arg(arg='default')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='headers', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='default', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='info', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='headers', ctx=Load()))], decorator_list=[]), FunctionDef(name='close', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='closed', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_fp', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_connection', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_connection', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='auto_close', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='io', ctx=Load()), attr='IOBase', ctx=Load()), attr='close', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='closed', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='auto_close', ctx=Load())), body=[Return(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='io', ctx=Load()), attr='IOBase', ctx=Load()), attr='closed', ctx=Load()), attr='__get__', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_fp', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=True))], orelse=[If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_fp', ctx=Load()), Constant(value='isclosed')], keywords=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_fp', ctx=Load()), attr='isclosed', ctx=Load()), args=[], keywords=[]))], orelse=[If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_fp', ctx=Load()), Constant(value='closed')], keywords=[]), body=[Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_fp', ctx=Load()), attr='closed', ctx=Load()))], orelse=[Return(value=Constant(value=True))])])])])], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='fileno', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_fp', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='IOError', ctx=Load()), args=[Constant(value='HTTPResponse has no file to get a fileno from')], keywords=[]))], orelse=[If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_fp', ctx=Load()), Constant(value='fileno')], keywords=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_fp', ctx=Load()), attr='fileno', ctx=Load()), args=[], keywords=[]))], orelse=[Raise(exc=Call(func=Name(id='IOError', ctx=Load()), args=[Constant(value='The file-like object this HTTPResponse is wrapped around has no file descriptor')], keywords=[]))])])], decorator_list=[]), FunctionDef(name='flush', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_fp', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Call(func=Name(id='hasattr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_fp', ctx=Load()), Constant(value='flush')], keywords=[]), UnaryOp(op=Not(), operand=Call(func=Name(id='getattr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_fp', ctx=Load()), Constant(value='closed'), Constant(value=False)], keywords=[]))]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_fp', ctx=Load()), attr='flush', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='readable', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=True))], decorator_list=[]), FunctionDef(name='readinto', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='b')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='temp', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='read', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='b', ctx=Load())], keywords=[])], keywords=[])), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='temp', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=0))], orelse=[Assign(targets=[Subscript(value=Name(id='b', ctx=Load()), slice=Slice(upper=Call(func=Name(id='len', ctx=Load()), args=[Name(id='temp', ctx=Load())], keywords=[])), ctx=Store())], value=Name(id='temp', ctx=Load())), Return(value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='temp', ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='supports_chunked_reads', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Checks if the underlying file-like object looks like a\n        :class:`http.client.HTTPResponse` object. We do this by testing for\n        the fp attribute. If it is present we assume it returns raw chunks as\n        processed by read_chunked().\n        ')), Return(value=Call(func=Name(id='hasattr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_fp', ctx=Load()), Constant(value='fp')], keywords=[]))], decorator_list=[]), FunctionDef(name='_update_chunk_length', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='chunk_left', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return()], orelse=[]), Assign(targets=[Name(id='line', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_fp', ctx=Load()), attr='fp', ctx=Load()), attr='readline', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='line', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=b';'), Constant(value=1)], keywords=[]), slice=Constant(value=0), ctx=Load())), Try(body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='chunk_left', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Name(id='line', ctx=Load()), Constant(value=16)], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Raise(exc=Call(func=Name(id='InvalidChunkLength', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='line', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='_handle_chunk', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='amt')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='returned_chunk', ctx=Store())], value=Constant(value=None)), If(test=Compare(left=Name(id='amt', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='chunk', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_fp', ctx=Load()), attr='_safe_read', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='chunk_left', ctx=Load())], keywords=[])), Assign(targets=[Name(id='returned_chunk', ctx=Store())], value=Name(id='chunk', ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_fp', ctx=Load()), attr='_safe_read', ctx=Load()), args=[Constant(value=2)], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='chunk_left', ctx=Store())], value=Constant(value=None))], orelse=[If(test=Compare(left=Name(id='amt', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='chunk_left', ctx=Load())]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_fp', ctx=Load()), attr='_safe_read', ctx=Load()), args=[Name(id='amt', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='chunk_left', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='chunk_left', ctx=Load()), op=Sub(), right=Name(id='amt', ctx=Load()))), Assign(targets=[Name(id='returned_chunk', ctx=Store())], value=Name(id='value', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='amt', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='chunk_left', ctx=Load())]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_fp', ctx=Load()), attr='_safe_read', ctx=Load()), args=[Name(id='amt', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_fp', ctx=Load()), attr='_safe_read', ctx=Load()), args=[Constant(value=2)], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='chunk_left', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='returned_chunk', ctx=Store())], value=Name(id='value', ctx=Load()))], orelse=[Assign(targets=[Name(id='returned_chunk', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_fp', ctx=Load()), attr='_safe_read', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='chunk_left', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_fp', ctx=Load()), attr='_safe_read', ctx=Load()), args=[Constant(value=2)], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='chunk_left', ctx=Store())], value=Constant(value=None))])])]), Return(value=Name(id='returned_chunk', ctx=Load()))], decorator_list=[]), FunctionDef(name='read_chunked', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='amt'), arg(arg='decode_content')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value="\n        Similar to :meth:`HTTPResponse.read`, but with an additional\n        parameter: ``decode_content``.\n\n        :param amt:\n            How much of the content to read. If specified, caching is skipped\n            because it doesn't make sense to cache partial content as the full\n            response.\n\n        :param decode_content:\n            If True, will attempt to decode the body based on the\n            'content-encoding' header.\n        ")), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_init_decoder', ctx=Load()), args=[], keywords=[])), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='chunked', ctx=Load())), body=[Raise(exc=Call(func=Name(id='ResponseNotChunked', ctx=Load()), args=[Constant(value="Response is not chunked. Header 'transfer-encoding: chunked' is missing.")], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='supports_chunked_reads', ctx=Load()), args=[], keywords=[])), body=[Raise(exc=Call(func=Name(id='BodyNotHttplibCompatible', ctx=Load()), args=[Constant(value='Body should be http.client.HTTPResponse like. It should have have an fp attribute which returns raw chunks.')], keywords=[]))], orelse=[]), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_error_catcher', ctx=Load()), args=[], keywords=[]))], body=[If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='_original_response', ctx=Load()), Call(func=Name(id='is_response_to_head', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_original_response', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_original_response', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Return()], orelse=[]), If(test=Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_fp', ctx=Load()), attr='fp', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return()], orelse=[]), While(test=Constant(value=True), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_update_chunk_length', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='chunk_left', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Break()], orelse=[]), Assign(targets=[Name(id='chunk', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_handle_chunk', ctx=Load()), args=[Name(id='amt', ctx=Load())], keywords=[])), Assign(targets=[Name(id='decoded', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_decode', ctx=Load()), args=[Name(id='chunk', ctx=Load())], keywords=[keyword(arg='decode_content', value=Name(id='decode_content', ctx=Load())), keyword(arg='flush_decoder', value=Constant(value=False))])), If(test=Name(id='decoded', ctx=Load()), body=[Expr(value=Yield(value=Name(id='decoded', ctx=Load())))], orelse=[])], orelse=[]), If(test=Name(id='decode_content', ctx=Load()), body=[Assign(targets=[Name(id='decoded', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_flush_decoder', ctx=Load()), args=[], keywords=[])), If(test=Name(id='decoded', ctx=Load()), body=[Expr(value=Yield(value=Name(id='decoded', ctx=Load())))], orelse=[])], orelse=[]), While(test=Constant(value=True), body=[Assign(targets=[Name(id='line', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_fp', ctx=Load()), attr='fp', ctx=Load()), attr='readline', ctx=Load()), args=[], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='line', ctx=Load())), body=[Break()], orelse=[]), If(test=Compare(left=Name(id='line', ctx=Load()), ops=[Eq()], comparators=[Constant(value=b'\r\n')]), body=[Break()], orelse=[])], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_original_response', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_original_response', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))], orelse=[])])], decorator_list=[]), FunctionDef(name='geturl', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Returns the URL that was the source of this response.\n        If the request that generated this response redirected, this method\n        will return the final redirect location.\n        ')), If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='retries', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='retries', ctx=Load()), attr='history', ctx=Load())], keywords=[])]), body=[Return(value=Attribute(value=Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='retries', ctx=Load()), attr='history', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), attr='redirect_location', ctx=Load()))], orelse=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_request_url', ctx=Load()))])], decorator_list=[]), FunctionDef(name='__iter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='buffer', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='chunk', ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='stream', ctx=Load()), args=[], keywords=[keyword(arg='decode_content', value=Constant(value=True))]), body=[If(test=Compare(left=Constant(value=b'\n'), ops=[In()], comparators=[Name(id='chunk', ctx=Load())]), body=[Assign(targets=[Name(id='chunk', ctx=Store())], value=Call(func=Attribute(value=Name(id='chunk', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=b'\n')], keywords=[])), Expr(value=Yield(value=BinOp(left=BinOp(left=Call(func=Attribute(value=Constant(value=b''), attr='join', ctx=Load()), args=[Name(id='buffer', ctx=Load())], keywords=[]), op=Add(), right=Subscript(value=Name(id='chunk', ctx=Load()), slice=Constant(value=0), ctx=Load())), op=Add(), right=Constant(value=b'\n')))), For(target=Name(id='x', ctx=Store()), iter=Subscript(value=Name(id='chunk', ctx=Load()), slice=Slice(lower=Constant(value=1), upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), body=[Expr(value=Yield(value=BinOp(left=Name(id='x', ctx=Load()), op=Add(), right=Constant(value=b'\n'))))], orelse=[]), If(test=Subscript(value=Name(id='chunk', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), body=[Assign(targets=[Name(id='buffer', ctx=Store())], value=List(elts=[Subscript(value=Name(id='chunk', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], ctx=Load()))], orelse=[Assign(targets=[Name(id='buffer', ctx=Store())], value=List(elts=[], ctx=Load()))])], orelse=[Expr(value=Call(func=Attribute(value=Name(id='buffer', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='chunk', ctx=Load())], keywords=[]))])], orelse=[]), If(test=Name(id='buffer', ctx=Load()), body=[Expr(value=Yield(value=Call(func=Attribute(value=Constant(value=b''), attr='join', ctx=Load()), args=[Name(id='buffer', ctx=Load())], keywords=[])))], orelse=[])], decorator_list=[])], decorator_list=[])], type_ignores=[])