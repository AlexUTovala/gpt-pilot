Module(body=[Expr(value=Constant(value='\nTLS with SNI_-support for Python 2. Follow these instructions if you would\nlike to verify TLS certificates in Python 2. Note, the default libraries do\n*not* do certificate checking; you need to do additional work to validate\ncertificates yourself.\n\nThis needs the following packages installed:\n\n* `pyOpenSSL`_ (tested with 16.0.0)\n* `cryptography`_ (minimum 1.3.4, from pyopenssl)\n* `idna`_ (minimum 2.0, from cryptography)\n\nHowever, pyopenssl depends on cryptography, which depends on idna, so while we\nuse all three directly here we end up having relatively few packages required.\n\nYou can install them with the following command:\n\n.. code-block:: bash\n\n    $ python -m pip install pyopenssl cryptography idna\n\nTo activate certificate checking, call\n:func:`~urllib3.contrib.pyopenssl.inject_into_urllib3` from your Python code\nbefore you begin making HTTP requests. This can be done in a ``sitecustomize``\nmodule, or at any other time before your application begins using ``urllib3``,\nlike this:\n\n.. code-block:: python\n\n    try:\n        import urllib3.contrib.pyopenssl\n        urllib3.contrib.pyopenssl.inject_into_urllib3()\n    except ImportError:\n        pass\n\nNow you can use :mod:`urllib3` as you normally would, and it will support SNI\nwhen the required modules are installed.\n\nActivating this module also has the positive side effect of disabling SSL/TLS\ncompression in Python 2 (see `CRIME attack`_).\n\n.. _sni: https://en.wikipedia.org/wiki/Server_Name_Indication\n.. _crime attack: https://en.wikipedia.org/wiki/CRIME_(security_exploit)\n.. _pyopenssl: https://www.pyopenssl.org\n.. _cryptography: https://cryptography.io\n.. _idna: https://github.com/kjd/idna\n')), ImportFrom(module='__future__', names=[alias(name='absolute_import')], level=0), Import(names=[alias(name='OpenSSL.SSL')]), ImportFrom(module='cryptography', names=[alias(name='x509')], level=0), ImportFrom(module='cryptography.hazmat.backends.openssl', names=[alias(name='backend', asname='openssl_backend')], level=0), ImportFrom(module='cryptography.hazmat.backends.openssl.x509', names=[alias(name='_Certificate')], level=0), Try(body=[ImportFrom(module='cryptography.x509', names=[alias(name='UnsupportedExtension')], level=0)], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[ClassDef(name='UnsupportedExtension', bases=[Name(id='Exception', ctx=Load())], keywords=[], body=[Pass()], decorator_list=[])])], orelse=[], finalbody=[]), ImportFrom(module='io', names=[alias(name='BytesIO')], level=0), ImportFrom(module='socket', names=[alias(name='error', asname='SocketError')], level=0), ImportFrom(module='socket', names=[alias(name='timeout')], level=0), Try(body=[ImportFrom(module='socket', names=[alias(name='_fileobject')], level=0)], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Assign(targets=[Name(id='_fileobject', ctx=Store())], value=Constant(value=None)), ImportFrom(module='packages.backports.makefile', names=[alias(name='backport_makefile')], level=2)])], orelse=[], finalbody=[]), Import(names=[alias(name='logging')]), Import(names=[alias(name='ssl')]), Import(names=[alias(name='sys')]), ImportFrom(names=[alias(name='util')], level=2), ImportFrom(module='packages', names=[alias(name='six')], level=2), ImportFrom(module='util.ssl_', names=[alias(name='PROTOCOL_TLS_CLIENT')], level=2), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='inject_into_urllib3'), Constant(value='extract_from_urllib3')], ctx=Load())), Assign(targets=[Name(id='HAS_SNI', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='_openssl_versions', ctx=Store())], value=Dict(keys=[Attribute(value=Name(id='util', ctx=Load()), attr='PROTOCOL_TLS', ctx=Load()), Name(id='PROTOCOL_TLS_CLIENT', ctx=Load()), Attribute(value=Name(id='ssl', ctx=Load()), attr='PROTOCOL_TLSv1', ctx=Load())], values=[Attribute(value=Attribute(value=Name(id='OpenSSL', ctx=Load()), attr='SSL', ctx=Load()), attr='SSLv23_METHOD', ctx=Load()), Attribute(value=Attribute(value=Name(id='OpenSSL', ctx=Load()), attr='SSL', ctx=Load()), attr='SSLv23_METHOD', ctx=Load()), Attribute(value=Attribute(value=Name(id='OpenSSL', ctx=Load()), attr='SSL', ctx=Load()), attr='TLSv1_METHOD', ctx=Load())])), If(test=BoolOp(op=And(), values=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='ssl', ctx=Load()), Constant(value='PROTOCOL_SSLv3')], keywords=[]), Call(func=Name(id='hasattr', ctx=Load()), args=[Attribute(value=Name(id='OpenSSL', ctx=Load()), attr='SSL', ctx=Load()), Constant(value='SSLv3_METHOD')], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='_openssl_versions', ctx=Load()), slice=Attribute(value=Name(id='ssl', ctx=Load()), attr='PROTOCOL_SSLv3', ctx=Load()), ctx=Store())], value=Attribute(value=Attribute(value=Name(id='OpenSSL', ctx=Load()), attr='SSL', ctx=Load()), attr='SSLv3_METHOD', ctx=Load()))], orelse=[]), If(test=BoolOp(op=And(), values=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='ssl', ctx=Load()), Constant(value='PROTOCOL_TLSv1_1')], keywords=[]), Call(func=Name(id='hasattr', ctx=Load()), args=[Attribute(value=Name(id='OpenSSL', ctx=Load()), attr='SSL', ctx=Load()), Constant(value='TLSv1_1_METHOD')], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='_openssl_versions', ctx=Load()), slice=Attribute(value=Name(id='ssl', ctx=Load()), attr='PROTOCOL_TLSv1_1', ctx=Load()), ctx=Store())], value=Attribute(value=Attribute(value=Name(id='OpenSSL', ctx=Load()), attr='SSL', ctx=Load()), attr='TLSv1_1_METHOD', ctx=Load()))], orelse=[]), If(test=BoolOp(op=And(), values=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='ssl', ctx=Load()), Constant(value='PROTOCOL_TLSv1_2')], keywords=[]), Call(func=Name(id='hasattr', ctx=Load()), args=[Attribute(value=Name(id='OpenSSL', ctx=Load()), attr='SSL', ctx=Load()), Constant(value='TLSv1_2_METHOD')], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='_openssl_versions', ctx=Load()), slice=Attribute(value=Name(id='ssl', ctx=Load()), attr='PROTOCOL_TLSv1_2', ctx=Load()), ctx=Store())], value=Attribute(value=Attribute(value=Name(id='OpenSSL', ctx=Load()), attr='SSL', ctx=Load()), attr='TLSv1_2_METHOD', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='_stdlib_to_openssl_verify', ctx=Store())], value=Dict(keys=[Attribute(value=Name(id='ssl', ctx=Load()), attr='CERT_NONE', ctx=Load()), Attribute(value=Name(id='ssl', ctx=Load()), attr='CERT_OPTIONAL', ctx=Load()), Attribute(value=Name(id='ssl', ctx=Load()), attr='CERT_REQUIRED', ctx=Load())], values=[Attribute(value=Attribute(value=Name(id='OpenSSL', ctx=Load()), attr='SSL', ctx=Load()), attr='VERIFY_NONE', ctx=Load()), Attribute(value=Attribute(value=Name(id='OpenSSL', ctx=Load()), attr='SSL', ctx=Load()), attr='VERIFY_PEER', ctx=Load()), BinOp(left=Attribute(value=Attribute(value=Name(id='OpenSSL', ctx=Load()), attr='SSL', ctx=Load()), attr='VERIFY_PEER', ctx=Load()), op=Add(), right=Attribute(value=Attribute(value=Name(id='OpenSSL', ctx=Load()), attr='SSL', ctx=Load()), attr='VERIFY_FAIL_IF_NO_PEER_CERT', ctx=Load()))])), Assign(targets=[Name(id='_openssl_to_stdlib_verify', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[GeneratorExp(elt=Tuple(elts=[Name(id='v', ctx=Load()), Name(id='k', ctx=Load())], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='_stdlib_to_openssl_verify', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Name(id='SSL_WRITE_BLOCKSIZE', ctx=Store())], value=Constant(value=16384)), Assign(targets=[Name(id='orig_util_HAS_SNI', ctx=Store())], value=Attribute(value=Name(id='util', ctx=Load()), attr='HAS_SNI', ctx=Load())), Assign(targets=[Name(id='orig_util_SSLContext', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='util', ctx=Load()), attr='ssl_', ctx=Load()), attr='SSLContext', ctx=Load())), Assign(targets=[Name(id='log', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), FunctionDef(name='inject_into_urllib3', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Monkey-patch urllib3 with PyOpenSSL-backed SSL-support.')), Expr(value=Call(func=Name(id='_validate_dependencies_met', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='util', ctx=Load()), attr='SSLContext', ctx=Store())], value=Name(id='PyOpenSSLContext', ctx=Load())), Assign(targets=[Attribute(value=Attribute(value=Name(id='util', ctx=Load()), attr='ssl_', ctx=Load()), attr='SSLContext', ctx=Store())], value=Name(id='PyOpenSSLContext', ctx=Load())), Assign(targets=[Attribute(value=Name(id='util', ctx=Load()), attr='HAS_SNI', ctx=Store())], value=Name(id='HAS_SNI', ctx=Load())), Assign(targets=[Attribute(value=Attribute(value=Name(id='util', ctx=Load()), attr='ssl_', ctx=Load()), attr='HAS_SNI', ctx=Store())], value=Name(id='HAS_SNI', ctx=Load())), Assign(targets=[Attribute(value=Name(id='util', ctx=Load()), attr='IS_PYOPENSSL', ctx=Store())], value=Constant(value=True)), Assign(targets=[Attribute(value=Attribute(value=Name(id='util', ctx=Load()), attr='ssl_', ctx=Load()), attr='IS_PYOPENSSL', ctx=Store())], value=Constant(value=True))], decorator_list=[]), FunctionDef(name='extract_from_urllib3', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Undo monkey-patching by :func:`inject_into_urllib3`.')), Assign(targets=[Attribute(value=Name(id='util', ctx=Load()), attr='SSLContext', ctx=Store())], value=Name(id='orig_util_SSLContext', ctx=Load())), Assign(targets=[Attribute(value=Attribute(value=Name(id='util', ctx=Load()), attr='ssl_', ctx=Load()), attr='SSLContext', ctx=Store())], value=Name(id='orig_util_SSLContext', ctx=Load())), Assign(targets=[Attribute(value=Name(id='util', ctx=Load()), attr='HAS_SNI', ctx=Store())], value=Name(id='orig_util_HAS_SNI', ctx=Load())), Assign(targets=[Attribute(value=Attribute(value=Name(id='util', ctx=Load()), attr='ssl_', ctx=Load()), attr='HAS_SNI', ctx=Store())], value=Name(id='orig_util_HAS_SNI', ctx=Load())), Assign(targets=[Attribute(value=Name(id='util', ctx=Load()), attr='IS_PYOPENSSL', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Attribute(value=Name(id='util', ctx=Load()), attr='ssl_', ctx=Load()), attr='IS_PYOPENSSL', ctx=Store())], value=Constant(value=False))], decorator_list=[]), FunctionDef(name='_validate_dependencies_met', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    Verifies that PyOpenSSL's package-level dependencies have been met.\n    Throws `ImportError` if they are not met.\n    ")), ImportFrom(module='cryptography.x509.extensions', names=[alias(name='Extensions')], level=0), If(test=Compare(left=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='Extensions', ctx=Load()), Constant(value='get_extension_for_class'), Constant(value=None)], keywords=[]), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ImportError', ctx=Load()), args=[Constant(value="'cryptography' module missing required functionality.  Try upgrading to v1.3.4 or newer.")], keywords=[]))], orelse=[]), ImportFrom(module='OpenSSL.crypto', names=[alias(name='X509')], level=0), Assign(targets=[Name(id='x509', ctx=Store())], value=Call(func=Name(id='X509', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='x509', ctx=Load()), Constant(value='_x509'), Constant(value=None)], keywords=[]), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ImportError', ctx=Load()), args=[Constant(value="'pyOpenSSL' module missing required functionality. Try upgrading to v0.14 or newer.")], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='_dnsname_to_stdlib', args=arguments(posonlyargs=[], args=[arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Converts a dNSName SubjectAlternativeName field to the form used by the\n    standard library on the given Python version.\n\n    Cryptography produces a dNSName as a unicode string that was idna-decoded\n    from ASCII bytes. We need to idna-encode that string to get it back, and\n    then on Python 3 we also need to convert to unicode via UTF-8 (the stdlib\n    uses PyUnicode_FromStringAndSize on it, which decodes via UTF-8).\n\n    If the name cannot be idna-encoded then we return None signalling that\n    the name given should be skipped.\n    ')), FunctionDef(name='idna_encode', args=arguments(posonlyargs=[], args=[arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Borrowed wholesale from the Python Cryptography Project. It turns out\n        that we can't just safely call `idna.encode`: it can explode for\n        wildcard names. This avoids that problem.\n        ")), Import(names=[alias(name='idna')]), Try(body=[For(target=Name(id='prefix', ctx=Store()), iter=List(elts=[Constant(value='*.', kind='u'), Constant(value='.', kind='u')], ctx=Load()), body=[If(test=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='startswith', ctx=Load()), args=[Name(id='prefix', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Subscript(value=Name(id='name', ctx=Load()), slice=Slice(lower=Call(func=Name(id='len', ctx=Load()), args=[Name(id='prefix', ctx=Load())], keywords=[])), ctx=Load())), Return(value=BinOp(left=Call(func=Attribute(value=Name(id='prefix', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), op=Add(), right=Call(func=Attribute(value=Name(id='idna', ctx=Load()), attr='encode', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])))], orelse=[])], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='idna', ctx=Load()), attr='encode', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Attribute(value=Name(id='idna', ctx=Load()), attr='core', ctx=Load()), attr='IDNAError', ctx=Load()), body=[Return(value=Constant(value=None))])], orelse=[], finalbody=[])], decorator_list=[]), If(test=Compare(left=Constant(value=':'), ops=[In()], comparators=[Name(id='name', ctx=Load())]), body=[Return(value=Name(id='name', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Name(id='idna_encode', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=None))], orelse=[If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), ops=[GtE()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=0)], ctx=Load())]), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[]))], orelse=[])]), Return(value=Name(id='name', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_subj_alt_name', args=arguments(posonlyargs=[], args=[arg(arg='peer_cert')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Given an PyOpenSSL certificate, provides all the subject alternative names.\n    ')), If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='peer_cert', ctx=Load()), Constant(value='to_cryptography')], keywords=[]), body=[Assign(targets=[Name(id='cert', ctx=Store())], value=Call(func=Attribute(value=Name(id='peer_cert', ctx=Load()), attr='to_cryptography', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Name(id='cert', ctx=Store())], value=Call(func=Name(id='_Certificate', ctx=Load()), args=[Name(id='openssl_backend', ctx=Load()), Attribute(value=Name(id='peer_cert', ctx=Load()), attr='_x509', ctx=Load())], keywords=[]))]), Try(body=[Assign(targets=[Name(id='ext', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='cert', ctx=Load()), attr='extensions', ctx=Load()), attr='get_extension_for_class', ctx=Load()), args=[Attribute(value=Name(id='x509', ctx=Load()), attr='SubjectAlternativeName', ctx=Load())], keywords=[]), attr='value', ctx=Load()))], handlers=[ExceptHandler(type=Attribute(value=Name(id='x509', ctx=Load()), attr='ExtensionNotFound', ctx=Load()), body=[Return(value=List(elts=[], ctx=Load()))]), ExceptHandler(type=Tuple(elts=[Attribute(value=Name(id='x509', ctx=Load()), attr='DuplicateExtension', ctx=Load()), Name(id='UnsupportedExtension', ctx=Load()), Attribute(value=Name(id='x509', ctx=Load()), attr='UnsupportedGeneralNameType', ctx=Load()), Name(id='UnicodeError', ctx=Load())], ctx=Load()), name='e', body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='A problem was encountered with the certificate that prevented urllib3 from finding the SubjectAlternativeName field. This can affect certificate validation. The error was %s'), Name(id='e', ctx=Load())], keywords=[])), Return(value=List(elts=[], ctx=Load()))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='names', ctx=Store())], value=ListComp(elt=Tuple(elts=[Constant(value='DNS'), Name(id='name', ctx=Load())], ctx=Load()), generators=[comprehension(target=Name(id='name', ctx=Store()), iter=Call(func=Name(id='map', ctx=Load()), args=[Name(id='_dnsname_to_stdlib', ctx=Load()), Call(func=Attribute(value=Name(id='ext', ctx=Load()), attr='get_values_for_type', ctx=Load()), args=[Attribute(value=Name(id='x509', ctx=Load()), attr='DNSName', ctx=Load())], keywords=[])], keywords=[]), ifs=[Compare(left=Name(id='name', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='names', ctx=Load()), attr='extend', ctx=Load()), args=[GeneratorExp(elt=Tuple(elts=[Constant(value='IP Address'), Call(func=Name(id='str', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])], ctx=Load()), generators=[comprehension(target=Name(id='name', ctx=Store()), iter=Call(func=Attribute(value=Name(id='ext', ctx=Load()), attr='get_values_for_type', ctx=Load()), args=[Attribute(value=Name(id='x509', ctx=Load()), attr='IPAddress', ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[])), Return(value=Name(id='names', ctx=Load()))], decorator_list=[]), ClassDef(name='WrappedSocket', bases=[Name(id='object', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="API-compatibility wrapper for Python OpenSSL's Connection-class.\n\n    Note: _makefile_refs, _drop() and _reuse() are needed for the garbage\n    collector of pypy.\n    ")), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='connection'), arg(arg='socket'), arg(arg='suppress_ragged_eofs')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='connection', ctx=Store())], value=Name(id='connection', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='socket', ctx=Store())], value=Name(id='socket', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='suppress_ragged_eofs', ctx=Store())], value=Name(id='suppress_ragged_eofs', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_makefile_refs', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_closed', ctx=Store())], value=Constant(value=False))], decorator_list=[]), FunctionDef(name='fileno', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='socket', ctx=Load()), attr='fileno', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='_decref_socketios', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_makefile_refs', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_makefile_refs', ctx=Store()), op=Sub(), value=Constant(value=1))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_closed', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='recv', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Try(body=[Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='connection', ctx=Load()), attr='recv', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], handlers=[ExceptHandler(type=Attribute(value=Attribute(value=Name(id='OpenSSL', ctx=Load()), attr='SSL', ctx=Load()), attr='SysCallError', ctx=Load()), name='e', body=[If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='suppress_ragged_eofs', ctx=Load()), Compare(left=Attribute(value=Name(id='e', ctx=Load()), attr='args', ctx=Load()), ops=[Eq()], comparators=[Tuple(elts=[UnaryOp(op=USub(), operand=Constant(value=1)), Constant(value='Unexpected EOF')], ctx=Load())])]), body=[Return(value=Constant(value=b''))], orelse=[Raise(exc=Call(func=Name(id='SocketError', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[])], keywords=[]))])]), ExceptHandler(type=Attribute(value=Attribute(value=Name(id='OpenSSL', ctx=Load()), attr='SSL', ctx=Load()), attr='ZeroReturnError', ctx=Load()), body=[If(test=Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='connection', ctx=Load()), attr='get_shutdown', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Attribute(value=Attribute(value=Name(id='OpenSSL', ctx=Load()), attr='SSL', ctx=Load()), attr='RECEIVED_SHUTDOWN', ctx=Load())]), body=[Return(value=Constant(value=b''))], orelse=[Raise()])]), ExceptHandler(type=Attribute(value=Attribute(value=Name(id='OpenSSL', ctx=Load()), attr='SSL', ctx=Load()), attr='WantReadError', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='util', ctx=Load()), attr='wait_for_read', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='socket', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='socket', ctx=Load()), attr='gettimeout', ctx=Load()), args=[], keywords=[])], keywords=[])), body=[Raise(exc=Call(func=Name(id='timeout', ctx=Load()), args=[Constant(value='The read operation timed out')], keywords=[]))], orelse=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='recv', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))])]), ExceptHandler(type=Attribute(value=Attribute(value=Name(id='OpenSSL', ctx=Load()), attr='SSL', ctx=Load()), attr='Error', ctx=Load()), name='e', body=[Raise(exc=Call(func=Attribute(value=Name(id='ssl', ctx=Load()), attr='SSLError', ctx=Load()), args=[BinOp(left=Constant(value='read error: %r'), op=Mod(), right=Name(id='e', ctx=Load()))], keywords=[]))])], orelse=[Return(value=Name(id='data', ctx=Load()))], finalbody=[])], decorator_list=[]), FunctionDef(name='recv_into', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Try(body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='connection', ctx=Load()), attr='recv_into', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], handlers=[ExceptHandler(type=Attribute(value=Attribute(value=Name(id='OpenSSL', ctx=Load()), attr='SSL', ctx=Load()), attr='SysCallError', ctx=Load()), name='e', body=[If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='suppress_ragged_eofs', ctx=Load()), Compare(left=Attribute(value=Name(id='e', ctx=Load()), attr='args', ctx=Load()), ops=[Eq()], comparators=[Tuple(elts=[UnaryOp(op=USub(), operand=Constant(value=1)), Constant(value='Unexpected EOF')], ctx=Load())])]), body=[Return(value=Constant(value=0))], orelse=[Raise(exc=Call(func=Name(id='SocketError', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[])], keywords=[]))])]), ExceptHandler(type=Attribute(value=Attribute(value=Name(id='OpenSSL', ctx=Load()), attr='SSL', ctx=Load()), attr='ZeroReturnError', ctx=Load()), body=[If(test=Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='connection', ctx=Load()), attr='get_shutdown', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Attribute(value=Attribute(value=Name(id='OpenSSL', ctx=Load()), attr='SSL', ctx=Load()), attr='RECEIVED_SHUTDOWN', ctx=Load())]), body=[Return(value=Constant(value=0))], orelse=[Raise()])]), ExceptHandler(type=Attribute(value=Attribute(value=Name(id='OpenSSL', ctx=Load()), attr='SSL', ctx=Load()), attr='WantReadError', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='util', ctx=Load()), attr='wait_for_read', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='socket', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='socket', ctx=Load()), attr='gettimeout', ctx=Load()), args=[], keywords=[])], keywords=[])), body=[Raise(exc=Call(func=Name(id='timeout', ctx=Load()), args=[Constant(value='The read operation timed out')], keywords=[]))], orelse=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='recv_into', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))])]), ExceptHandler(type=Attribute(value=Attribute(value=Name(id='OpenSSL', ctx=Load()), attr='SSL', ctx=Load()), attr='Error', ctx=Load()), name='e', body=[Raise(exc=Call(func=Attribute(value=Name(id='ssl', ctx=Load()), attr='SSLError', ctx=Load()), args=[BinOp(left=Constant(value='read error: %r'), op=Mod(), right=Name(id='e', ctx=Load()))], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='settimeout', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='timeout')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='socket', ctx=Load()), attr='settimeout', ctx=Load()), args=[Name(id='timeout', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_send_until_done', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[While(test=Constant(value=True), body=[Try(body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='connection', ctx=Load()), attr='send', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Attribute(value=Name(id='OpenSSL', ctx=Load()), attr='SSL', ctx=Load()), attr='WantWriteError', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='util', ctx=Load()), attr='wait_for_write', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='socket', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='socket', ctx=Load()), attr='gettimeout', ctx=Load()), args=[], keywords=[])], keywords=[])), body=[Raise(exc=Call(func=Name(id='timeout', ctx=Load()), args=[], keywords=[]))], orelse=[]), Continue()]), ExceptHandler(type=Attribute(value=Attribute(value=Name(id='OpenSSL', ctx=Load()), attr='SSL', ctx=Load()), attr='SysCallError', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='SocketError', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[])], keywords=[]))])], orelse=[], finalbody=[])], orelse=[])], decorator_list=[]), FunctionDef(name='sendall', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='total_sent', ctx=Store())], value=Constant(value=0)), While(test=Compare(left=Name(id='total_sent', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='sent', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_send_until_done', ctx=Load()), args=[Subscript(value=Name(id='data', ctx=Load()), slice=Slice(lower=Name(id='total_sent', ctx=Load()), upper=BinOp(left=Name(id='total_sent', ctx=Load()), op=Add(), right=Name(id='SSL_WRITE_BLOCKSIZE', ctx=Load()))), ctx=Load())], keywords=[])), AugAssign(target=Name(id='total_sent', ctx=Store()), op=Add(), value=Name(id='sent', ctx=Load()))], orelse=[])], decorator_list=[]), FunctionDef(name='shutdown', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='connection', ctx=Load()), attr='shutdown', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='close', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_makefile_refs', ctx=Load()), ops=[Lt()], comparators=[Constant(value=1)]), body=[Try(body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_closed', ctx=Store())], value=Constant(value=True)), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='connection', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Attribute(value=Name(id='OpenSSL', ctx=Load()), attr='SSL', ctx=Load()), attr='Error', ctx=Load()), body=[Return()])], orelse=[], finalbody=[])], orelse=[AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_makefile_refs', ctx=Store()), op=Sub(), value=Constant(value=1))])], decorator_list=[]), FunctionDef(name='getpeercert', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='binary_form')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Assign(targets=[Name(id='x509', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='connection', ctx=Load()), attr='get_peer_certificate', ctx=Load()), args=[], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='x509', ctx=Load())), body=[Return(value=Name(id='x509', ctx=Load()))], orelse=[]), If(test=Name(id='binary_form', ctx=Load()), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='OpenSSL', ctx=Load()), attr='crypto', ctx=Load()), attr='dump_certificate', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='OpenSSL', ctx=Load()), attr='crypto', ctx=Load()), attr='FILETYPE_ASN1', ctx=Load()), Name(id='x509', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Dict(keys=[Constant(value='subject'), Constant(value='subjectAltName')], values=[Tuple(elts=[Tuple(elts=[Tuple(elts=[Constant(value='commonName'), Attribute(value=Call(func=Attribute(value=Name(id='x509', ctx=Load()), attr='get_subject', ctx=Load()), args=[], keywords=[]), attr='CN', ctx=Load())], ctx=Load())], ctx=Load())], ctx=Load()), Call(func=Name(id='get_subj_alt_name', ctx=Load()), args=[Name(id='x509', ctx=Load())], keywords=[])]))], decorator_list=[]), FunctionDef(name='version', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='connection', ctx=Load()), attr='get_protocol_version_name', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='_reuse', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_makefile_refs', ctx=Store()), op=Add(), value=Constant(value=1))], decorator_list=[]), FunctionDef(name='_drop', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_makefile_refs', ctx=Load()), ops=[Lt()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))], orelse=[AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_makefile_refs', ctx=Store()), op=Sub(), value=Constant(value=1))])], decorator_list=[])], decorator_list=[]), If(test=Name(id='_fileobject', ctx=Load()), body=[FunctionDef(name='makefile', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='mode'), arg(arg='bufsize')], kwonlyargs=[], kw_defaults=[], defaults=[UnaryOp(op=USub(), operand=Constant(value=1))]), body=[AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_makefile_refs', ctx=Store()), op=Add(), value=Constant(value=1)), Return(value=Call(func=Name(id='_fileobject', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='mode', ctx=Load()), Name(id='bufsize', ctx=Load())], keywords=[keyword(arg='close', value=Constant(value=True))]))], decorator_list=[])], orelse=[Assign(targets=[Name(id='makefile', ctx=Store())], value=Name(id='backport_makefile', ctx=Load()))]), Assign(targets=[Attribute(value=Name(id='WrappedSocket', ctx=Load()), attr='makefile', ctx=Store())], value=Name(id='makefile', ctx=Load())), ClassDef(name='PyOpenSSLContext', bases=[Name(id='object', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    I am a wrapper class for the PyOpenSSL ``Context`` object. I am responsible\n    for translating the interface of the standard library ``SSLContext`` object\n    to calls into PyOpenSSL.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='protocol')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='protocol', ctx=Store())], value=Subscript(value=Name(id='_openssl_versions', ctx=Load()), slice=Name(id='protocol', ctx=Load()), ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_ctx', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='OpenSSL', ctx=Load()), attr='SSL', ctx=Load()), attr='Context', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='protocol', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_options', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='check_hostname', ctx=Store())], value=Constant(value=False))], decorator_list=[]), FunctionDef(name='options', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_options', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='options', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_options', ctx=Store())], value=Name(id='value', ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ctx', ctx=Load()), attr='set_options', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], decorator_list=[Attribute(value=Name(id='options', ctx=Load()), attr='setter', ctx=Load())]), FunctionDef(name='verify_mode', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Subscript(value=Name(id='_openssl_to_stdlib_verify', ctx=Load()), slice=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ctx', ctx=Load()), attr='get_verify_mode', ctx=Load()), args=[], keywords=[]), ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='verify_mode', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ctx', ctx=Load()), attr='set_verify', ctx=Load()), args=[Subscript(value=Name(id='_stdlib_to_openssl_verify', ctx=Load()), slice=Name(id='value', ctx=Load()), ctx=Load()), Name(id='_verify_callback', ctx=Load())], keywords=[]))], decorator_list=[Attribute(value=Name(id='verify_mode', ctx=Load()), attr='setter', ctx=Load())]), FunctionDef(name='set_default_verify_paths', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ctx', ctx=Load()), attr='set_default_verify_paths', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='set_ciphers', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ciphers')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='ciphers', ctx=Load()), Attribute(value=Name(id='six', ctx=Load()), attr='text_type', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='ciphers', ctx=Store())], value=Call(func=Attribute(value=Name(id='ciphers', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ctx', ctx=Load()), attr='set_cipher_list', ctx=Load()), args=[Name(id='ciphers', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='load_verify_locations', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='cafile'), arg(arg='capath'), arg(arg='cadata')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=[If(test=Compare(left=Name(id='cafile', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='cafile', ctx=Store())], value=Call(func=Attribute(value=Name(id='cafile', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='capath', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='capath', ctx=Store())], value=Call(func=Attribute(value=Name(id='capath', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[]))], orelse=[]), Try(body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ctx', ctx=Load()), attr='load_verify_locations', ctx=Load()), args=[Name(id='cafile', ctx=Load()), Name(id='capath', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='cadata', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ctx', ctx=Load()), attr='load_verify_locations', ctx=Load()), args=[Call(func=Name(id='BytesIO', ctx=Load()), args=[Name(id='cadata', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], handlers=[ExceptHandler(type=Attribute(value=Attribute(value=Name(id='OpenSSL', ctx=Load()), attr='SSL', ctx=Load()), attr='Error', ctx=Load()), name='e', body=[Raise(exc=Call(func=Attribute(value=Name(id='ssl', ctx=Load()), attr='SSLError', ctx=Load()), args=[BinOp(left=Constant(value='unable to load trusted certificates: %r'), op=Mod(), right=Name(id='e', ctx=Load()))], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='load_cert_chain', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='certfile'), arg(arg='keyfile'), arg(arg='password')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ctx', ctx=Load()), attr='use_certificate_chain_file', ctx=Load()), args=[Name(id='certfile', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='password', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='password', ctx=Load()), Attribute(value=Name(id='six', ctx=Load()), attr='binary_type', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='password', ctx=Store())], value=Call(func=Attribute(value=Name(id='password', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ctx', ctx=Load()), attr='set_passwd_cb', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[], vararg=arg(arg='_'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=Name(id='password', ctx=Load()))], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ctx', ctx=Load()), attr='use_privatekey_file', ctx=Load()), args=[BoolOp(op=Or(), values=[Name(id='keyfile', ctx=Load()), Name(id='certfile', ctx=Load())])], keywords=[]))], decorator_list=[]), FunctionDef(name='set_alpn_protocols', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='protocols')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='protocols', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='six', ctx=Load()), attr='ensure_binary', ctx=Load()), args=[Name(id='p', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='p', ctx=Store()), iter=Name(id='protocols', ctx=Load()), ifs=[], is_async=0)])), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ctx', ctx=Load()), attr='set_alpn_protos', ctx=Load()), args=[Name(id='protocols', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='wrap_socket', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='sock'), arg(arg='server_side'), arg(arg='do_handshake_on_connect'), arg(arg='suppress_ragged_eofs'), arg(arg='server_hostname')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Constant(value=True), Constant(value=True), Constant(value=None)]), body=[Assign(targets=[Name(id='cnx', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='OpenSSL', ctx=Load()), attr='SSL', ctx=Load()), attr='Connection', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_ctx', ctx=Load()), Name(id='sock', ctx=Load())], keywords=[])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='server_hostname', ctx=Load()), Attribute(value=Name(id='six', ctx=Load()), attr='text_type', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='server_hostname', ctx=Store())], value=Call(func=Attribute(value=Name(id='server_hostname', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='server_hostname', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='cnx', ctx=Load()), attr='set_tlsext_host_name', ctx=Load()), args=[Name(id='server_hostname', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='cnx', ctx=Load()), attr='set_connect_state', ctx=Load()), args=[], keywords=[])), While(test=Constant(value=True), body=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='cnx', ctx=Load()), attr='do_handshake', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Attribute(value=Name(id='OpenSSL', ctx=Load()), attr='SSL', ctx=Load()), attr='WantReadError', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='util', ctx=Load()), attr='wait_for_read', ctx=Load()), args=[Name(id='sock', ctx=Load()), Call(func=Attribute(value=Name(id='sock', ctx=Load()), attr='gettimeout', ctx=Load()), args=[], keywords=[])], keywords=[])), body=[Raise(exc=Call(func=Name(id='timeout', ctx=Load()), args=[Constant(value='select timed out')], keywords=[]))], orelse=[]), Continue()]), ExceptHandler(type=Attribute(value=Attribute(value=Name(id='OpenSSL', ctx=Load()), attr='SSL', ctx=Load()), attr='Error', ctx=Load()), name='e', body=[Raise(exc=Call(func=Attribute(value=Name(id='ssl', ctx=Load()), attr='SSLError', ctx=Load()), args=[BinOp(left=Constant(value='bad handshake: %r'), op=Mod(), right=Name(id='e', ctx=Load()))], keywords=[]))])], orelse=[], finalbody=[]), Break()], orelse=[]), Return(value=Call(func=Name(id='WrappedSocket', ctx=Load()), args=[Name(id='cnx', ctx=Load()), Name(id='sock', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), FunctionDef(name='_verify_callback', args=arguments(posonlyargs=[], args=[arg(arg='cnx'), arg(arg='x509'), arg(arg='err_no'), arg(arg='err_depth'), arg(arg='return_code')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Compare(left=Name(id='err_no', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]))], decorator_list=[])], type_ignores=[])