Module(body=[ImportFrom(module='__future__', names=[alias(name='absolute_import')], level=0), Import(names=[alias(name='datetime')]), Import(names=[alias(name='logging')]), Import(names=[alias(name='os')]), Import(names=[alias(name='re')]), Import(names=[alias(name='socket')]), Import(names=[alias(name='warnings')]), ImportFrom(module='socket', names=[alias(name='error', asname='SocketError')], level=0), ImportFrom(module='socket', names=[alias(name='timeout', asname='SocketTimeout')], level=0), ImportFrom(module='packages', names=[alias(name='six')], level=1), ImportFrom(module='packages.six.moves.http_client', names=[alias(name='HTTPConnection', asname='_HTTPConnection')], level=1), ImportFrom(module='packages.six.moves.http_client', names=[alias(name='HTTPException')], level=1), ImportFrom(module='util.proxy', names=[alias(name='create_proxy_ssl_context')], level=1), Try(body=[Import(names=[alias(name='ssl')]), Assign(targets=[Name(id='BaseSSLError', ctx=Store())], value=Attribute(value=Name(id='ssl', ctx=Load()), attr='SSLError', ctx=Load()))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='ImportError', ctx=Load()), Name(id='AttributeError', ctx=Load())], ctx=Load()), body=[Assign(targets=[Name(id='ssl', ctx=Store())], value=Constant(value=None)), ClassDef(name='BaseSSLError', bases=[Name(id='BaseException', ctx=Load())], keywords=[], body=[Pass()], decorator_list=[])])], orelse=[], finalbody=[]), Try(body=[Assign(targets=[Name(id='ConnectionError', ctx=Store())], value=Name(id='ConnectionError', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='NameError', ctx=Load()), body=[ClassDef(name='ConnectionError', bases=[Name(id='Exception', ctx=Load())], keywords=[], body=[Pass()], decorator_list=[])])], orelse=[], finalbody=[]), Try(body=[Assign(targets=[Name(id='BrokenPipeError', ctx=Store())], value=Name(id='BrokenPipeError', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='NameError', ctx=Load()), body=[ClassDef(name='BrokenPipeError', bases=[Name(id='Exception', ctx=Load())], keywords=[], body=[Pass()], decorator_list=[])])], orelse=[], finalbody=[]), ImportFrom(module='_collections', names=[alias(name='HTTPHeaderDict')], level=1), ImportFrom(module='_version', names=[alias(name='__version__')], level=1), ImportFrom(module='exceptions', names=[alias(name='ConnectTimeoutError'), alias(name='NewConnectionError'), alias(name='SubjectAltNameWarning'), alias(name='SystemTimeWarning')], level=1), ImportFrom(module='packages.ssl_match_hostname', names=[alias(name='CertificateError'), alias(name='match_hostname')], level=1), ImportFrom(module='util', names=[alias(name='SKIP_HEADER'), alias(name='SKIPPABLE_HEADERS'), alias(name='connection')], level=1), ImportFrom(module='util.ssl_', names=[alias(name='assert_fingerprint'), alias(name='create_urllib3_context'), alias(name='is_ipaddress'), alias(name='resolve_cert_reqs'), alias(name='resolve_ssl_version'), alias(name='ssl_wrap_socket')], level=1), Assign(targets=[Name(id='log', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), Assign(targets=[Name(id='port_by_scheme', ctx=Store())], value=Dict(keys=[Constant(value='http'), Constant(value='https')], values=[Constant(value=80), Constant(value=443)])), Assign(targets=[Name(id='RECENT_DATE', ctx=Store())], value=Call(func=Attribute(value=Name(id='datetime', ctx=Load()), attr='date', ctx=Load()), args=[Constant(value=2020), Constant(value=7), Constant(value=1)], keywords=[])), Assign(targets=[Name(id='_CONTAINS_CONTROL_CHAR_RE', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value="[^-!#$%&'*+.^_`|~0-9a-zA-Z]")], keywords=[])), ClassDef(name='HTTPConnection', bases=[Name(id='_HTTPConnection', ctx=Load()), Name(id='object', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="\n    Based on :class:`http.client.HTTPConnection` but provides an extra constructor\n    backwards-compatibility layer between older and newer Pythons.\n\n    Additional keyword parameters are used to configure attributes of the connection.\n    Accepted parameters include:\n\n    - ``strict``: See the documentation on :class:`urllib3.connectionpool.HTTPConnectionPool`\n    - ``source_address``: Set the source address for the current connection.\n    - ``socket_options``: Set specific options on the underlying socket. If not specified, then\n      defaults are loaded from ``HTTPConnection.default_socket_options`` which includes disabling\n      Nagle's algorithm (sets TCP_NODELAY to 1) unless the connection is behind a proxy.\n\n      For example, if you wish to enable TCP Keep Alive in addition to the defaults,\n      you might pass:\n\n      .. code-block:: python\n\n         HTTPConnection.default_socket_options + [\n             (socket.SOL_SOCKET, socket.SO_KEEPALIVE, 1),\n         ]\n\n      Or you may want to disable the defaults by passing an empty list (e.g., ``[]``).\n    ")), Assign(targets=[Name(id='default_port', ctx=Store())], value=Subscript(value=Name(id='port_by_scheme', ctx=Load()), slice=Constant(value='http'), ctx=Load())), Assign(targets=[Name(id='default_socket_options', ctx=Store())], value=List(elts=[Tuple(elts=[Attribute(value=Name(id='socket', ctx=Load()), attr='IPPROTO_TCP', ctx=Load()), Attribute(value=Name(id='socket', ctx=Load()), attr='TCP_NODELAY', ctx=Load()), Constant(value=1)], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='is_verified', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='proxy_is_verified', ctx=Store())], value=Constant(value=None)), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kw'), defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='six', ctx=Load()), attr='PY2', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='kw', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='strict'), Constant(value=None)], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='source_address', ctx=Store())], value=Call(func=Attribute(value=Name(id='kw', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='source_address')], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='socket_options', ctx=Store())], value=Call(func=Attribute(value=Name(id='kw', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='socket_options'), Attribute(value=Name(id='self', ctx=Load()), attr='default_socket_options', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='proxy', ctx=Store())], value=Call(func=Attribute(value=Name(id='kw', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='proxy'), Constant(value=None)], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='proxy_config', ctx=Store())], value=Call(func=Attribute(value=Name(id='kw', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='proxy_config'), Constant(value=None)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='_HTTPConnection', ctx=Load()), attr='__init__', ctx=Load()), args=[Name(id='self', ctx=Load()), Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kw', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='host', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Getter method to remove any trailing dots that indicate the hostname is an FQDN.\n\n        In general, SSL certificates don't include the trailing dot indicating a\n        fully-qualified domain name, and thus, they don't validate properly when\n        checked against a domain name that includes the dot. In addition, some\n        servers may not expect to receive the trailing dot when provided.\n\n        However, the hostname with trailing dot is critical to DNS resolution; doing a\n        lookup with the trailing dot will properly only resolve the appropriate FQDN,\n        whereas a lookup without a trailing dot will search the system's search domain\n        list. Thus, it's important to keep the original host around for use only in\n        those cases where it's appropriate (i.e., when doing DNS lookup to establish the\n        actual TCP connection across which we're going to send HTTP requests).\n        ")), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_dns_host', ctx=Load()), attr='rstrip', ctx=Load()), args=[Constant(value='.')], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='host', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Setter for the `host` property.\n\n        We assume that only urllib3 uses the _dns_host attribute; httplib itself\n        only uses `host`, and it seems reasonable that other libraries follow suit.\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_dns_host', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[Attribute(value=Name(id='host', ctx=Load()), attr='setter', ctx=Load())]), FunctionDef(name='_new_conn', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Establish a socket connection and set nodelay settings on it.\n\n        :return: New socket connection.\n        ')), Assign(targets=[Name(id='extra_kw', ctx=Store())], value=Dict(keys=[], values=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='source_address', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='extra_kw', ctx=Load()), slice=Constant(value='source_address'), ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='source_address', ctx=Load()))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='socket_options', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='extra_kw', ctx=Load()), slice=Constant(value='socket_options'), ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='socket_options', ctx=Load()))], orelse=[]), Try(body=[Assign(targets=[Name(id='conn', ctx=Store())], value=Call(func=Attribute(value=Name(id='connection', ctx=Load()), attr='create_connection', ctx=Load()), args=[Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_dns_host', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='port', ctx=Load())], ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='timeout', ctx=Load())], keywords=[keyword(value=Name(id='extra_kw', ctx=Load()))]))], handlers=[ExceptHandler(type=Name(id='SocketTimeout', ctx=Load()), body=[Raise(exc=Call(func=Name(id='ConnectTimeoutError', ctx=Load()), args=[Name(id='self', ctx=Load()), BinOp(left=Constant(value='Connection to %s timed out. (connect timeout=%s)'), op=Mod(), right=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='host', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='timeout', ctx=Load())], ctx=Load()))], keywords=[]))]), ExceptHandler(type=Name(id='SocketError', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='NewConnectionError', ctx=Load()), args=[Name(id='self', ctx=Load()), BinOp(left=Constant(value='Failed to establish a new connection: %s'), op=Mod(), right=Name(id='e', ctx=Load()))], keywords=[]))])], orelse=[], finalbody=[]), Return(value=Name(id='conn', ctx=Load()))], decorator_list=[]), FunctionDef(name='_is_using_tunnel', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Constant(value='_tunnel_host'), Constant(value=None)], keywords=[]))], decorator_list=[]), FunctionDef(name='_prepare_conn', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='conn')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='sock', ctx=Store())], value=Name(id='conn', ctx=Load())), If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_is_using_tunnel', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_tunnel', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='auto_open', ctx=Store())], value=Constant(value=0))], orelse=[])], decorator_list=[]), FunctionDef(name='connect', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='conn', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_new_conn', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_prepare_conn', ctx=Load()), args=[Name(id='conn', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='putrequest', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='method'), arg(arg='url')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Constant(value=' ')), Assign(targets=[Name(id='match', ctx=Store())], value=Call(func=Attribute(value=Name(id='_CONTAINS_CONTROL_CHAR_RE', ctx=Load()), attr='search', ctx=Load()), args=[Name(id='method', ctx=Load())], keywords=[])), If(test=Name(id='match', ctx=Load()), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='Method cannot contain non-token characters %r (found at least %r)'), op=Mod(), right=Tuple(elts=[Name(id='method', ctx=Load()), Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='group', ctx=Load()), args=[], keywords=[])], ctx=Load()))], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='_HTTPConnection', ctx=Load()), attr='putrequest', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='method', ctx=Load()), Name(id='url', ctx=Load()), Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='putheader', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='header')], vararg=arg(arg='values'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' ')), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='v', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), Compare(left=Name(id='v', ctx=Load()), ops=[Eq()], comparators=[Name(id='SKIP_HEADER', ctx=Load())])]), generators=[comprehension(target=Name(id='v', ctx=Store()), iter=Name(id='values', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id='_HTTPConnection', ctx=Load()), attr='putheader', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='header', ctx=Load()), Starred(value=Name(id='values', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Call(func=Attribute(value=Name(id='six', ctx=Load()), attr='ensure_str', ctx=Load()), args=[Call(func=Attribute(value=Name(id='header', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])], keywords=[]), ops=[NotIn()], comparators=[Name(id='SKIPPABLE_HEADERS', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value="urllib3.util.SKIP_HEADER only supports '%s'"), op=Mod(), right=Tuple(elts=[Call(func=Attribute(value=Constant(value="', '"), attr='join', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Attribute(value=Name(id='str', ctx=Load()), attr='title', ctx=Load()), Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='SKIPPABLE_HEADERS', ctx=Load())], keywords=[])], keywords=[])], keywords=[])], ctx=Load()))], keywords=[]))], orelse=[])])], decorator_list=[]), FunctionDef(name='request', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='method'), arg(arg='url'), arg(arg='body'), arg(arg='headers')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[If(test=Compare(left=Name(id='headers', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='headers', ctx=Store())], value=Dict(keys=[], values=[]))], orelse=[Assign(targets=[Name(id='headers', ctx=Store())], value=Call(func=Attribute(value=Name(id='headers', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[]))]), If(test=Compare(left=Constant(value='user-agent'), ops=[NotIn()], comparators=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='six', ctx=Load()), attr='ensure_str', ctx=Load()), args=[Call(func=Attribute(value=Name(id='k', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])], keywords=[]), generators=[comprehension(target=Name(id='k', ctx=Store()), iter=Name(id='headers', ctx=Load()), ifs=[], is_async=0)])]), body=[Assign(targets=[Subscript(value=Name(id='headers', ctx=Load()), slice=Constant(value='User-Agent'), ctx=Store())], value=Call(func=Name(id='_get_default_user_agent', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[Name(id='HTTPConnection', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]), attr='request', ctx=Load()), args=[Name(id='method', ctx=Load()), Name(id='url', ctx=Load())], keywords=[keyword(arg='body', value=Name(id='body', ctx=Load())), keyword(arg='headers', value=Name(id='headers', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='request_chunked', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='method'), arg(arg='url'), arg(arg='body'), arg(arg='headers')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='\n        Alternative to the common request method, which sends the\n        body with chunked encoding and not as one block\n        ')), Assign(targets=[Name(id='headers', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='headers', ctx=Load()), Dict(keys=[], values=[])])), Assign(targets=[Name(id='header_keys', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[ListComp(elt=Call(func=Attribute(value=Name(id='six', ctx=Load()), attr='ensure_str', ctx=Load()), args=[Call(func=Attribute(value=Name(id='k', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])], keywords=[]), generators=[comprehension(target=Name(id='k', ctx=Store()), iter=Name(id='headers', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Name(id='skip_accept_encoding', ctx=Store())], value=Compare(left=Constant(value='accept-encoding'), ops=[In()], comparators=[Name(id='header_keys', ctx=Load())])), Assign(targets=[Name(id='skip_host', ctx=Store())], value=Compare(left=Constant(value='host'), ops=[In()], comparators=[Name(id='header_keys', ctx=Load())])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='putrequest', ctx=Load()), args=[Name(id='method', ctx=Load()), Name(id='url', ctx=Load())], keywords=[keyword(arg='skip_accept_encoding', value=Name(id='skip_accept_encoding', ctx=Load())), keyword(arg='skip_host', value=Name(id='skip_host', ctx=Load()))])), If(test=Compare(left=Constant(value='user-agent'), ops=[NotIn()], comparators=[Name(id='header_keys', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='putheader', ctx=Load()), args=[Constant(value='User-Agent'), Call(func=Name(id='_get_default_user_agent', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[]), For(target=Tuple(elts=[Name(id='header', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='headers', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='putheader', ctx=Load()), args=[Name(id='header', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Constant(value='transfer-encoding'), ops=[NotIn()], comparators=[Name(id='header_keys', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='putheader', ctx=Load()), args=[Constant(value='Transfer-Encoding'), Constant(value='chunked')], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='endheaders', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='body', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='stringish_types', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='six', ctx=Load()), attr='string_types', ctx=Load()), op=Add(), right=Tuple(elts=[Name(id='bytes', ctx=Load())], ctx=Load()))), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='body', ctx=Load()), Name(id='stringish_types', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='body', ctx=Store())], value=Tuple(elts=[Name(id='body', ctx=Load())], ctx=Load()))], orelse=[]), For(target=Name(id='chunk', ctx=Store()), iter=Name(id='body', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Name(id='chunk', ctx=Load())), body=[Continue()], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='chunk', ctx=Load()), Name(id='bytes', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='chunk', ctx=Store())], value=Call(func=Attribute(value=Name(id='chunk', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='utf8')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='len_str', ctx=Store())], value=Subscript(value=Call(func=Name(id='hex', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='chunk', ctx=Load())], keywords=[])], keywords=[]), slice=Slice(lower=Constant(value=2)), ctx=Load())), Assign(targets=[Name(id='to_send', ctx=Store())], value=Call(func=Name(id='bytearray', ctx=Load()), args=[Call(func=Attribute(value=Name(id='len_str', ctx=Load()), attr='encode', ctx=Load()), args=[], keywords=[])], keywords=[])), AugAssign(target=Name(id='to_send', ctx=Store()), op=Add(), value=Constant(value=b'\r\n')), AugAssign(target=Name(id='to_send', ctx=Store()), op=Add(), value=Name(id='chunk', ctx=Load())), AugAssign(target=Name(id='to_send', ctx=Store()), op=Add(), value=Constant(value=b'\r\n')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='send', ctx=Load()), args=[Name(id='to_send', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='send', ctx=Load()), args=[Constant(value=b'0\r\n\r\n')], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='HTTPSConnection', bases=[Name(id='HTTPConnection', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Many of the parameters to this constructor are passed to the underlying SSL\n    socket by means of :py:func:`urllib3.util.ssl_wrap_socket`.\n    ')), Assign(targets=[Name(id='default_port', ctx=Store())], value=Subscript(value=Name(id='port_by_scheme', ctx=Load()), slice=Constant(value='https'), ctx=Load())), Assign(targets=[Name(id='cert_reqs', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='ca_certs', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='ca_cert_dir', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='ca_cert_data', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='ssl_version', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='assert_fingerprint', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='tls_in_tls_required', ctx=Store())], value=Constant(value=False)), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='host'), arg(arg='port'), arg(arg='key_file'), arg(arg='cert_file'), arg(arg='key_password'), arg(arg='strict'), arg(arg='timeout'), arg(arg='ssl_context'), arg(arg='server_hostname')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kw'), defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Attribute(value=Name(id='socket', ctx=Load()), attr='_GLOBAL_DEFAULT_TIMEOUT', ctx=Load()), Constant(value=None), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='HTTPConnection', ctx=Load()), attr='__init__', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='host', ctx=Load()), Name(id='port', ctx=Load())], keywords=[keyword(arg='strict', value=Name(id='strict', ctx=Load())), keyword(arg='timeout', value=Name(id='timeout', ctx=Load())), keyword(value=Name(id='kw', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='key_file', ctx=Store())], value=Name(id='key_file', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='cert_file', ctx=Store())], value=Name(id='cert_file', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='key_password', ctx=Store())], value=Name(id='key_password', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='ssl_context', ctx=Store())], value=Name(id='ssl_context', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='server_hostname', ctx=Store())], value=Name(id='server_hostname', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_protocol', ctx=Store())], value=Constant(value='https'))], decorator_list=[]), FunctionDef(name='set_cert', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key_file'), arg(arg='cert_file'), arg(arg='cert_reqs'), arg(arg='key_password'), arg(arg='ca_certs'), arg(arg='assert_hostname'), arg(arg='assert_fingerprint'), arg(arg='ca_cert_dir'), arg(arg='ca_cert_data')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='\n        This method should only be called once, before the connection is used.\n        ')), If(test=Compare(left=Name(id='cert_reqs', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='ssl_context', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='cert_reqs', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='ssl_context', ctx=Load()), attr='verify_mode', ctx=Load()))], orelse=[Assign(targets=[Name(id='cert_reqs', ctx=Store())], value=Call(func=Name(id='resolve_cert_reqs', ctx=Load()), args=[Constant(value=None)], keywords=[]))])], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='key_file', ctx=Store())], value=Name(id='key_file', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='cert_file', ctx=Store())], value=Name(id='cert_file', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='cert_reqs', ctx=Store())], value=Name(id='cert_reqs', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='key_password', ctx=Store())], value=Name(id='key_password', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='assert_hostname', ctx=Store())], value=Name(id='assert_hostname', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='assert_fingerprint', ctx=Store())], value=Name(id='assert_fingerprint', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='ca_certs', ctx=Store())], value=BoolOp(op=And(), values=[Name(id='ca_certs', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='expanduser', ctx=Load()), args=[Name(id='ca_certs', ctx=Load())], keywords=[])])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='ca_cert_dir', ctx=Store())], value=BoolOp(op=And(), values=[Name(id='ca_cert_dir', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='expanduser', ctx=Load()), args=[Name(id='ca_cert_dir', ctx=Load())], keywords=[])])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='ca_cert_data', ctx=Store())], value=Name(id='ca_cert_data', ctx=Load()))], decorator_list=[]), FunctionDef(name='connect', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='conn', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_new_conn', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='hostname', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='host', ctx=Load())), Assign(targets=[Name(id='tls_in_tls', ctx=Store())], value=Constant(value=False)), If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_is_using_tunnel', ctx=Load()), args=[], keywords=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='tls_in_tls_required', ctx=Load()), body=[Assign(targets=[Name(id='conn', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_connect_tls_proxy', ctx=Load()), args=[Name(id='hostname', ctx=Load()), Name(id='conn', ctx=Load())], keywords=[])), Assign(targets=[Name(id='tls_in_tls', ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='sock', ctx=Store())], value=Name(id='conn', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_tunnel', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='auto_open', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='hostname', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_tunnel_host', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='server_hostname', ctx=Store())], value=Name(id='hostname', ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='server_hostname', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='server_hostname', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='server_hostname', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='is_time_off', ctx=Store())], value=Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='date', ctx=Load()), attr='today', ctx=Load()), args=[], keywords=[]), ops=[Lt()], comparators=[Name(id='RECENT_DATE', ctx=Load())])), If(test=Name(id='is_time_off', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='System time is way off (before {0}). This will probably lead to SSL verification errors'), attr='format', ctx=Load()), args=[Name(id='RECENT_DATE', ctx=Load())], keywords=[]), Name(id='SystemTimeWarning', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='default_ssl_context', ctx=Store())], value=Constant(value=False)), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='ssl_context', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='default_ssl_context', ctx=Store())], value=Constant(value=True)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='ssl_context', ctx=Store())], value=Call(func=Name(id='create_urllib3_context', ctx=Load()), args=[], keywords=[keyword(arg='ssl_version', value=Call(func=Name(id='resolve_ssl_version', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='ssl_version', ctx=Load())], keywords=[])), keyword(arg='cert_reqs', value=Call(func=Name(id='resolve_cert_reqs', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='cert_reqs', ctx=Load())], keywords=[]))]))], orelse=[]), Assign(targets=[Name(id='context', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='ssl_context', ctx=Load())), Assign(targets=[Attribute(value=Name(id='context', ctx=Load()), attr='verify_mode', ctx=Store())], value=Call(func=Name(id='resolve_cert_reqs', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='cert_reqs', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='ca_certs', ctx=Load())), UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='ca_cert_dir', ctx=Load())), UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='ca_cert_data', ctx=Load())), Name(id='default_ssl_context', ctx=Load()), Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='context', ctx=Load()), Constant(value='load_default_certs')], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='context', ctx=Load()), attr='load_default_certs', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='sock', ctx=Store())], value=Call(func=Name(id='ssl_wrap_socket', ctx=Load()), args=[], keywords=[keyword(arg='sock', value=Name(id='conn', ctx=Load())), keyword(arg='keyfile', value=Attribute(value=Name(id='self', ctx=Load()), attr='key_file', ctx=Load())), keyword(arg='certfile', value=Attribute(value=Name(id='self', ctx=Load()), attr='cert_file', ctx=Load())), keyword(arg='key_password', value=Attribute(value=Name(id='self', ctx=Load()), attr='key_password', ctx=Load())), keyword(arg='ca_certs', value=Attribute(value=Name(id='self', ctx=Load()), attr='ca_certs', ctx=Load())), keyword(arg='ca_cert_dir', value=Attribute(value=Name(id='self', ctx=Load()), attr='ca_cert_dir', ctx=Load())), keyword(arg='ca_cert_data', value=Attribute(value=Name(id='self', ctx=Load()), attr='ca_cert_data', ctx=Load())), keyword(arg='server_hostname', value=Name(id='server_hostname', ctx=Load())), keyword(arg='ssl_context', value=Name(id='context', ctx=Load())), keyword(arg='tls_in_tls', value=Name(id='tls_in_tls', ctx=Load()))])), If(test=BoolOp(op=And(), values=[Name(id='default_ssl_context', ctx=Load()), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='ssl_version', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Call(func=Name(id='hasattr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='sock', ctx=Load()), Constant(value='version')], keywords=[]), Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='sock', ctx=Load()), attr='version', ctx=Load()), args=[], keywords=[]), ops=[In()], comparators=[Set(elts=[Constant(value='TLSv1'), Constant(value='TLSv1.1')])])]), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[BinOp(left=Constant(value="Negotiating TLSv1/TLSv1.1 by default is deprecated and will be disabled in urllib3 v2.0.0. Connecting to '%s' with '%s' can be enabled by explicitly opting-in with 'ssl_version'"), op=Mod(), right=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='host', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='sock', ctx=Load()), attr='version', ctx=Load()), args=[], keywords=[])], ctx=Load())), Name(id='DeprecationWarning', ctx=Load())], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='assert_fingerprint', ctx=Load()), body=[Expr(value=Call(func=Name(id='assert_fingerprint', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='sock', ctx=Load()), attr='getpeercert', ctx=Load()), args=[], keywords=[keyword(arg='binary_form', value=Constant(value=True))]), Attribute(value=Name(id='self', ctx=Load()), attr='assert_fingerprint', ctx=Load())], keywords=[]))], orelse=[If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='context', ctx=Load()), attr='verify_mode', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='ssl', ctx=Load()), attr='CERT_NONE', ctx=Load())]), UnaryOp(op=Not(), operand=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='context', ctx=Load()), Constant(value='check_hostname'), Constant(value=False)], keywords=[])), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='assert_hostname', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=False)])]), body=[Assign(targets=[Name(id='cert', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='sock', ctx=Load()), attr='getpeercert', ctx=Load()), args=[], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='cert', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='subjectAltName'), Tuple(elts=[], ctx=Load())], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Certificate for {0} has no `subjectAltName`, falling back to check for a `commonName` for now. This feature is being removed by major browsers and deprecated by RFC 2818. (See https://github.com/urllib3/urllib3/issues/497 for details.)'), attr='format', ctx=Load()), args=[Name(id='hostname', ctx=Load())], keywords=[]), Name(id='SubjectAltNameWarning', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Name(id='_match_hostname', ctx=Load()), args=[Name(id='cert', ctx=Load()), BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='assert_hostname', ctx=Load()), Name(id='server_hostname', ctx=Load())])], keywords=[]))], orelse=[])]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='is_verified', ctx=Store())], value=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='context', ctx=Load()), attr='verify_mode', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='ssl', ctx=Load()), attr='CERT_REQUIRED', ctx=Load())]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='assert_fingerprint', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]))], decorator_list=[]), FunctionDef(name='_connect_tls_proxy', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='hostname'), arg(arg='conn')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Establish a TLS connection to the proxy using the provided SSL context.\n        ')), Assign(targets=[Name(id='proxy_config', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='proxy_config', ctx=Load())), Assign(targets=[Name(id='ssl_context', ctx=Store())], value=Attribute(value=Name(id='proxy_config', ctx=Load()), attr='ssl_context', ctx=Load())), If(test=Name(id='ssl_context', ctx=Load()), body=[Return(value=Call(func=Name(id='ssl_wrap_socket', ctx=Load()), args=[], keywords=[keyword(arg='sock', value=Name(id='conn', ctx=Load())), keyword(arg='server_hostname', value=Name(id='hostname', ctx=Load())), keyword(arg='ssl_context', value=Name(id='ssl_context', ctx=Load()))]))], orelse=[]), Assign(targets=[Name(id='ssl_context', ctx=Store())], value=Call(func=Name(id='create_proxy_ssl_context', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='ssl_version', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='cert_reqs', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='ca_certs', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='ca_cert_dir', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='ca_cert_data', ctx=Load())], keywords=[])), Assign(targets=[Name(id='socket', ctx=Store())], value=Call(func=Name(id='ssl_wrap_socket', ctx=Load()), args=[], keywords=[keyword(arg='sock', value=Name(id='conn', ctx=Load())), keyword(arg='ca_certs', value=Attribute(value=Name(id='self', ctx=Load()), attr='ca_certs', ctx=Load())), keyword(arg='ca_cert_dir', value=Attribute(value=Name(id='self', ctx=Load()), attr='ca_cert_dir', ctx=Load())), keyword(arg='ca_cert_data', value=Attribute(value=Name(id='self', ctx=Load()), attr='ca_cert_data', ctx=Load())), keyword(arg='server_hostname', value=Name(id='hostname', ctx=Load())), keyword(arg='ssl_context', value=Name(id='ssl_context', ctx=Load()))])), If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='ssl_context', ctx=Load()), attr='verify_mode', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='ssl', ctx=Load()), attr='CERT_NONE', ctx=Load())]), UnaryOp(op=Not(), operand=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='ssl_context', ctx=Load()), Constant(value='check_hostname'), Constant(value=False)], keywords=[]))]), body=[Assign(targets=[Name(id='cert', ctx=Store())], value=Call(func=Attribute(value=Name(id='socket', ctx=Load()), attr='getpeercert', ctx=Load()), args=[], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='cert', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='subjectAltName'), Tuple(elts=[], ctx=Load())], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Certificate for {0} has no `subjectAltName`, falling back to check for a `commonName` for now. This feature is being removed by major browsers and deprecated by RFC 2818. (See https://github.com/urllib3/urllib3/issues/497 for details.)'), attr='format', ctx=Load()), args=[Name(id='hostname', ctx=Load())], keywords=[]), Name(id='SubjectAltNameWarning', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Name(id='_match_hostname', ctx=Load()), args=[Name(id='cert', ctx=Load()), Name(id='hostname', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='proxy_is_verified', ctx=Store())], value=Compare(left=Attribute(value=Name(id='ssl_context', ctx=Load()), attr='verify_mode', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='ssl', ctx=Load()), attr='CERT_REQUIRED', ctx=Load())])), Return(value=Name(id='socket', ctx=Load()))], decorator_list=[])], decorator_list=[]), FunctionDef(name='_match_hostname', args=arguments(posonlyargs=[], args=[arg(arg='cert'), arg(arg='asserted_hostname')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='stripped_hostname', ctx=Store())], value=Call(func=Attribute(value=Name(id='asserted_hostname', ctx=Load()), attr='strip', ctx=Load()), args=[Constant(value='u[]')], keywords=[])), If(test=Call(func=Name(id='is_ipaddress', ctx=Load()), args=[Name(id='stripped_hostname', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='asserted_hostname', ctx=Store())], value=Name(id='stripped_hostname', ctx=Load()))], orelse=[]), Try(body=[Expr(value=Call(func=Name(id='match_hostname', ctx=Load()), args=[Name(id='cert', ctx=Load()), Name(id='asserted_hostname', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='CertificateError', ctx=Load()), name='e', body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='Certificate did not match expected hostname: %s. Certificate: %s'), Name(id='asserted_hostname', ctx=Load()), Name(id='cert', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='e', ctx=Load()), attr='_peer_cert', ctx=Store())], value=Name(id='cert', ctx=Load())), Raise()])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='_get_default_user_agent', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Constant(value='python-urllib3/%s'), op=Mod(), right=Name(id='__version__', ctx=Load())))], decorator_list=[]), ClassDef(name='DummyConnection', bases=[Name(id='object', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Used to detect a failed ConnectionCls import.')), Pass()], decorator_list=[]), If(test=UnaryOp(op=Not(), operand=Name(id='ssl', ctx=Load())), body=[Assign(targets=[Name(id='HTTPSConnection', ctx=Store())], value=Name(id='DummyConnection', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='VerifiedHTTPSConnection', ctx=Store())], value=Name(id='HTTPSConnection', ctx=Load()))], type_ignores=[])