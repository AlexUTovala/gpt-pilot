Module(body=[ImportFrom(module='__future__', names=[alias(name='absolute_import')], level=0), Import(names=[alias(name='binascii')]), Import(names=[alias(name='codecs')]), Import(names=[alias(name='os')]), ImportFrom(module='io', names=[alias(name='BytesIO')], level=0), ImportFrom(module='fields', names=[alias(name='RequestField')], level=1), ImportFrom(module='packages', names=[alias(name='six')], level=1), ImportFrom(module='packages.six', names=[alias(name='b')], level=1), Assign(targets=[Name(id='writer', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='codecs', ctx=Load()), attr='lookup', ctx=Load()), args=[Constant(value='utf-8')], keywords=[]), slice=Constant(value=3), ctx=Load())), FunctionDef(name='choose_boundary', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Our embarrassingly-simple replacement for mimetools.choose_boundary.\n    ')), Assign(targets=[Name(id='boundary', ctx=Store())], value=Call(func=Attribute(value=Name(id='binascii', ctx=Load()), attr='hexlify', ctx=Load()), args=[Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='urandom', ctx=Load()), args=[Constant(value=16)], keywords=[])], keywords=[])), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='six', ctx=Load()), attr='PY2', ctx=Load())), body=[Assign(targets=[Name(id='boundary', ctx=Store())], value=Call(func=Attribute(value=Name(id='boundary', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]))], orelse=[]), Return(value=Name(id='boundary', ctx=Load()))], decorator_list=[]), FunctionDef(name='iter_field_objects', args=arguments(posonlyargs=[], args=[arg(arg='fields')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Iterate over fields.\n\n    Supports list of (k, v) tuples and dicts, and lists of\n    :class:`~urllib3.fields.RequestField`.\n\n    ')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='fields', ctx=Load()), Name(id='dict', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='i', ctx=Store())], value=Call(func=Attribute(value=Name(id='six', ctx=Load()), attr='iteritems', ctx=Load()), args=[Name(id='fields', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='i', ctx=Store())], value=Call(func=Name(id='iter', ctx=Load()), args=[Name(id='fields', ctx=Load())], keywords=[]))]), For(target=Name(id='field', ctx=Store()), iter=Name(id='i', ctx=Load()), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='field', ctx=Load()), Name(id='RequestField', ctx=Load())], keywords=[]), body=[Expr(value=Yield(value=Name(id='field', ctx=Load())))], orelse=[Expr(value=Yield(value=Call(func=Attribute(value=Name(id='RequestField', ctx=Load()), attr='from_tuples', ctx=Load()), args=[Starred(value=Name(id='field', ctx=Load()), ctx=Load())], keywords=[])))])], orelse=[])], decorator_list=[]), FunctionDef(name='iter_fields', args=arguments(posonlyargs=[], args=[arg(arg='fields')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    .. deprecated:: 1.6\n\n    Iterate over fields.\n\n    The addition of :class:`~urllib3.fields.RequestField` makes this function\n    obsolete. Instead, use :func:`iter_field_objects`, which returns\n    :class:`~urllib3.fields.RequestField` objects.\n\n    Supports list of (k, v) tuples and dicts.\n    ')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='fields', ctx=Load()), Name(id='dict', ctx=Load())], keywords=[]), body=[Return(value=GeneratorExp(elt=Tuple(elts=[Name(id='k', ctx=Load()), Name(id='v', ctx=Load())], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='six', ctx=Load()), attr='iteritems', ctx=Load()), args=[Name(id='fields', ctx=Load())], keywords=[]), ifs=[], is_async=0)]))], orelse=[]), Return(value=GeneratorExp(elt=Tuple(elts=[Name(id='k', ctx=Load()), Name(id='v', ctx=Load())], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Name(id='fields', ctx=Load()), ifs=[], is_async=0)]))], decorator_list=[]), FunctionDef(name='encode_multipart_formdata', args=arguments(posonlyargs=[], args=[arg(arg='fields'), arg(arg='boundary')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='\n    Encode a dictionary of ``fields`` using the multipart/form-data MIME format.\n\n    :param fields:\n        Dictionary of fields or list of (key, :class:`~urllib3.fields.RequestField`).\n\n    :param boundary:\n        If not specified, then a random boundary will be generated using\n        :func:`urllib3.filepost.choose_boundary`.\n    ')), Assign(targets=[Name(id='body', ctx=Store())], value=Call(func=Name(id='BytesIO', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='boundary', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='boundary', ctx=Store())], value=Call(func=Name(id='choose_boundary', ctx=Load()), args=[], keywords=[]))], orelse=[]), For(target=Name(id='field', ctx=Store()), iter=Call(func=Name(id='iter_field_objects', ctx=Load()), args=[Name(id='fields', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='body', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Name(id='b', ctx=Load()), args=[BinOp(left=Constant(value='--%s\r\n'), op=Mod(), right=Name(id='boundary', ctx=Load()))], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Call(func=Name(id='writer', ctx=Load()), args=[Name(id='body', ctx=Load())], keywords=[]), attr='write', ctx=Load()), args=[Call(func=Attribute(value=Name(id='field', ctx=Load()), attr='render_headers', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='data', ctx=Store())], value=Attribute(value=Name(id='field', ctx=Load()), attr='data', ctx=Load())), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='data', ctx=Load()), Name(id='int', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='data', ctx=Load()), Attribute(value=Name(id='six', ctx=Load()), attr='text_type', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='writer', ctx=Load()), args=[Name(id='body', ctx=Load())], keywords=[]), attr='write', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='body', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='body', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value=b'\r\n')], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='body', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Name(id='b', ctx=Load()), args=[BinOp(left=Constant(value='--%s--\r\n'), op=Mod(), right=Name(id='boundary', ctx=Load()))], keywords=[])], keywords=[])), Assign(targets=[Name(id='content_type', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[BinOp(left=Constant(value='multipart/form-data; boundary=%s'), op=Mod(), right=Name(id='boundary', ctx=Load()))], keywords=[])), Return(value=Tuple(elts=[Call(func=Attribute(value=Name(id='body', ctx=Load()), attr='getvalue', ctx=Load()), args=[], keywords=[]), Name(id='content_type', ctx=Load())], ctx=Load()))], decorator_list=[])], type_ignores=[])