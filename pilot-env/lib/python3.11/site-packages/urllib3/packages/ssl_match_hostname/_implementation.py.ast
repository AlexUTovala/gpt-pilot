Module(body=[Expr(value=Constant(value='The match_hostname() function from Python 3.3.3, essential when using SSL.')), Import(names=[alias(name='re')]), Import(names=[alias(name='sys')]), Try(body=[Import(names=[alias(name='ipaddress')])], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Assign(targets=[Name(id='ipaddress', ctx=Store())], value=Constant(value=None))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='__version__', ctx=Store())], value=Constant(value='3.5.0.1')), ClassDef(name='CertificateError', bases=[Name(id='ValueError', ctx=Load())], keywords=[], body=[Pass()], decorator_list=[]), FunctionDef(name='_dnsname_match', args=arguments(posonlyargs=[], args=[arg(arg='dn'), arg(arg='hostname'), arg(arg='max_wildcards')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1)]), body=[Expr(value=Constant(value='Matching according to RFC 6125, section 6.4.3\n\n    http://tools.ietf.org/html/rfc6125#section-6.4.3\n    ')), Assign(targets=[Name(id='pats', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=UnaryOp(op=Not(), operand=Name(id='dn', ctx=Load())), body=[Return(value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='parts', ctx=Store())], value=Call(func=Attribute(value=Name(id='dn', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[])), Assign(targets=[Name(id='leftmost', ctx=Store())], value=Subscript(value=Name(id='parts', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='remainder', ctx=Store())], value=Subscript(value=Name(id='parts', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())), Assign(targets=[Name(id='wildcards', ctx=Store())], value=Call(func=Attribute(value=Name(id='leftmost', ctx=Load()), attr='count', ctx=Load()), args=[Constant(value='*')], keywords=[])), If(test=Compare(left=Name(id='wildcards', ctx=Load()), ops=[Gt()], comparators=[Name(id='max_wildcards', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='CertificateError', ctx=Load()), args=[BinOp(left=Constant(value='too many wildcards in certificate DNS name: '), op=Add(), right=Call(func=Name(id='repr', ctx=Load()), args=[Name(id='dn', ctx=Load())], keywords=[]))], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='wildcards', ctx=Load())), body=[Return(value=Compare(left=Call(func=Attribute(value=Name(id='dn', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='hostname', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])]))], orelse=[]), If(test=Compare(left=Name(id='leftmost', ctx=Load()), ops=[Eq()], comparators=[Constant(value='*')]), body=[Expr(value=Call(func=Attribute(value=Name(id='pats', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='[^.]+')], keywords=[]))], orelse=[If(test=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='leftmost', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='xn--')], keywords=[]), Call(func=Attribute(value=Name(id='hostname', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='xn--')], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='pats', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='escape', ctx=Load()), args=[Name(id='leftmost', ctx=Load())], keywords=[])], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='pats', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='escape', ctx=Load()), args=[Name(id='leftmost', ctx=Load())], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value='\\*'), Constant(value='[^.]*')], keywords=[])], keywords=[]))])]), For(target=Name(id='frag', ctx=Store()), iter=Name(id='remainder', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='pats', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='escape', ctx=Load()), args=[Name(id='frag', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='pat', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[BinOp(left=BinOp(left=Constant(value='\\A'), op=Add(), right=Call(func=Attribute(value=Constant(value='\\.'), attr='join', ctx=Load()), args=[Name(id='pats', ctx=Load())], keywords=[])), op=Add(), right=Constant(value='\\Z')), Attribute(value=Name(id='re', ctx=Load()), attr='IGNORECASE', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='pat', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='hostname', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_to_unicode', args=arguments(posonlyargs=[], args=[arg(arg='obj')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='obj', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), ops=[Lt()], comparators=[Tuple(elts=[Constant(value=3)], ctx=Load())])]), body=[Assign(targets=[Name(id='obj', ctx=Store())], value=Call(func=Name(id='unicode', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[keyword(arg='encoding', value=Constant(value='ascii')), keyword(arg='errors', value=Constant(value='strict'))]))], orelse=[]), Return(value=Name(id='obj', ctx=Load()))], decorator_list=[]), FunctionDef(name='_ipaddress_match', args=arguments(posonlyargs=[], args=[arg(arg='ipname'), arg(arg='host_ip')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Exact matching of IP addresses.\n\n    RFC 6125 explicitly doesn\'t define an algorithm for this\n    (section 1.7.2 - "Out of Scope").\n    ')), Assign(targets=[Name(id='ip', ctx=Store())], value=Call(func=Attribute(value=Name(id='ipaddress', ctx=Load()), attr='ip_address', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Name(id='_to_unicode', ctx=Load()), args=[Name(id='ipname', ctx=Load())], keywords=[]), attr='rstrip', ctx=Load()), args=[], keywords=[])], keywords=[])), Return(value=Compare(left=Name(id='ip', ctx=Load()), ops=[Eq()], comparators=[Name(id='host_ip', ctx=Load())]))], decorator_list=[]), FunctionDef(name='match_hostname', args=arguments(posonlyargs=[], args=[arg(arg='cert'), arg(arg='hostname')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Verify that *cert* (in decoded format as returned by\n    SSLSocket.getpeercert()) matches the *hostname*.  RFC 2818 and RFC 6125\n    rules are followed, but IP addresses are not accepted for *hostname*.\n\n    CertificateError is raised on failure. On success, the function\n    returns nothing.\n    ')), If(test=UnaryOp(op=Not(), operand=Name(id='cert', ctx=Load())), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='empty or no certificate, match_hostname needs a SSL socket or SSL context with either CERT_OPTIONAL or CERT_REQUIRED')], keywords=[]))], orelse=[]), Try(body=[Assign(targets=[Name(id='host_ip', ctx=Store())], value=Call(func=Attribute(value=Name(id='ipaddress', ctx=Load()), attr='ip_address', ctx=Load()), args=[Call(func=Name(id='_to_unicode', ctx=Load()), args=[Name(id='hostname', ctx=Load())], keywords=[])], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Assign(targets=[Name(id='host_ip', ctx=Store())], value=Constant(value=None))]), ExceptHandler(type=Name(id='UnicodeError', ctx=Load()), body=[Assign(targets=[Name(id='host_ip', ctx=Store())], value=Constant(value=None))]), ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[If(test=Compare(left=Name(id='ipaddress', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='host_ip', ctx=Store())], value=Constant(value=None))], orelse=[Raise()])])], orelse=[], finalbody=[]), Assign(targets=[Name(id='dnsnames', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='san', ctx=Store())], value=Call(func=Attribute(value=Name(id='cert', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='subjectAltName'), Tuple(elts=[], ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Name(id='san', ctx=Load()), body=[If(test=Compare(left=Name(id='key', ctx=Load()), ops=[Eq()], comparators=[Constant(value='DNS')]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='host_ip', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Call(func=Name(id='_dnsname_match', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='hostname', ctx=Load())], keywords=[])]), body=[Return()], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='dnsnames', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='key', ctx=Load()), ops=[Eq()], comparators=[Constant(value='IP Address')]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='host_ip', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Call(func=Name(id='_ipaddress_match', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='host_ip', ctx=Load())], keywords=[])]), body=[Return()], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='dnsnames', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], orelse=[])])], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='dnsnames', ctx=Load())), body=[For(target=Name(id='sub', ctx=Store()), iter=Call(func=Attribute(value=Name(id='cert', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='subject'), Tuple(elts=[], ctx=Load())], keywords=[]), body=[For(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Name(id='sub', ctx=Load()), body=[If(test=Compare(left=Name(id='key', ctx=Load()), ops=[Eq()], comparators=[Constant(value='commonName')]), body=[If(test=Call(func=Name(id='_dnsname_match', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='hostname', ctx=Load())], keywords=[]), body=[Return()], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='dnsnames', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[])], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='dnsnames', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Raise(exc=Call(func=Name(id='CertificateError', ctx=Load()), args=[BinOp(left=Constant(value="hostname %r doesn't match either of %s"), op=Mod(), right=Tuple(elts=[Name(id='hostname', ctx=Load()), Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Name(id='repr', ctx=Load()), Name(id='dnsnames', ctx=Load())], keywords=[])], keywords=[])], ctx=Load()))], keywords=[]))], orelse=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='dnsnames', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Raise(exc=Call(func=Name(id='CertificateError', ctx=Load()), args=[BinOp(left=Constant(value="hostname %r doesn't match %r"), op=Mod(), right=Tuple(elts=[Name(id='hostname', ctx=Load()), Subscript(value=Name(id='dnsnames', ctx=Load()), slice=Constant(value=0), ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[Raise(exc=Call(func=Name(id='CertificateError', ctx=Load()), args=[Constant(value='no appropriate commonName or subjectAltName fields were found')], keywords=[]))])])], decorator_list=[])], type_ignores=[])