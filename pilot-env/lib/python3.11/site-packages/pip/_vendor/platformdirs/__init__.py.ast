Module(body=[Expr(value=Constant(value='\nUtilities for determining application-specific dirs. See <https://github.com/platformdirs/platformdirs> for details and\nusage.\n')), ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), Import(names=[alias(name='os')]), Import(names=[alias(name='sys')]), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING')], level=0), ImportFrom(module='api', names=[alias(name='PlatformDirsABC')], level=1), ImportFrom(module='version', names=[alias(name='__version__')], level=1), ImportFrom(module='version', names=[alias(name='__version_tuple__', asname='__version_info__')], level=1), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='pathlib', names=[alias(name='Path')], level=0), If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), ops=[GtE()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=8)], ctx=Load())]), body=[ImportFrom(module='typing', names=[alias(name='Literal')], level=0)], orelse=[ImportFrom(module='pip._vendor.typing_extensions', names=[alias(name='Literal')], level=0)])], orelse=[]), FunctionDef(name='_set_platform_dir_class', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), ops=[Eq()], comparators=[Constant(value='win32')]), body=[ImportFrom(module='pip._vendor.platformdirs.windows', names=[alias(name='Windows', asname='Result')], level=0)], orelse=[If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), ops=[Eq()], comparators=[Constant(value='darwin')]), body=[ImportFrom(module='pip._vendor.platformdirs.macos', names=[alias(name='MacOS', asname='Result')], level=0)], orelse=[ImportFrom(module='pip._vendor.platformdirs.unix', names=[alias(name='Unix', asname='Result')], level=0)])]), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getenv', ctx=Load()), args=[Constant(value='ANDROID_DATA')], keywords=[]), ops=[Eq()], comparators=[Constant(value='/data')]), Compare(left=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getenv', ctx=Load()), args=[Constant(value='ANDROID_ROOT')], keywords=[]), ops=[Eq()], comparators=[Constant(value='/system')])]), body=[If(test=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getenv', ctx=Load()), args=[Constant(value='SHELL')], keywords=[]), Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getenv', ctx=Load()), args=[Constant(value='PREFIX')], keywords=[])]), body=[Return(value=Name(id='Result', ctx=Load()))], orelse=[]), ImportFrom(module='pip._vendor.platformdirs.android', names=[alias(name='_android_folder')], level=0), If(test=Compare(left=Call(func=Name(id='_android_folder', ctx=Load()), args=[], keywords=[]), ops=[IsNot()], comparators=[Constant(value=None)]), body=[ImportFrom(module='pip._vendor.platformdirs.android', names=[alias(name='Android')], level=0), Return(value=Name(id='Android', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='Result', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='type', ctx=Load()), slice=Name(id='PlatformDirsABC', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='PlatformDirs', ctx=Store())], value=Call(func=Name(id='_set_platform_dir_class', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='AppDirs', ctx=Store())], value=Name(id='PlatformDirs', ctx=Load())), FunctionDef(name='user_data_dir', args=arguments(posonlyargs=[], args=[arg(arg='appname', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='appauthor', annotation=BinOp(left=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None)), op=BitOr(), right=Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value=False), ctx=Load()))), arg(arg='version', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='roaming', annotation=Name(id='bool', ctx=Load())), arg(arg='ensure_exists', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=False), Constant(value=False)]), body=[Expr(value=Constant(value='\n    :param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.\n    :param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.\n    :param version: See `version <platformdirs.api.PlatformDirsABC.version>`.\n    :param roaming: See `roaming <platformdirs.api.PlatformDirsABC.roaming>`.\n    :param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.\n    :returns: data directory tied to the user\n    ')), Return(value=Attribute(value=Call(func=Name(id='PlatformDirs', ctx=Load()), args=[], keywords=[keyword(arg='appname', value=Name(id='appname', ctx=Load())), keyword(arg='appauthor', value=Name(id='appauthor', ctx=Load())), keyword(arg='version', value=Name(id='version', ctx=Load())), keyword(arg='roaming', value=Name(id='roaming', ctx=Load())), keyword(arg='ensure_exists', value=Name(id='ensure_exists', ctx=Load()))]), attr='user_data_dir', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='site_data_dir', args=arguments(posonlyargs=[], args=[arg(arg='appname', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='appauthor', annotation=BinOp(left=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None)), op=BitOr(), right=Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value=False), ctx=Load()))), arg(arg='version', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='multipath', annotation=Name(id='bool', ctx=Load())), arg(arg='ensure_exists', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=False), Constant(value=False)]), body=[Expr(value=Constant(value='\n    :param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.\n    :param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.\n    :param version: See `version <platformdirs.api.PlatformDirsABC.version>`.\n    :param multipath: See `roaming <platformdirs.api.PlatformDirsABC.multipath>`.\n    :param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.\n    :returns: data directory shared by users\n    ')), Return(value=Attribute(value=Call(func=Name(id='PlatformDirs', ctx=Load()), args=[], keywords=[keyword(arg='appname', value=Name(id='appname', ctx=Load())), keyword(arg='appauthor', value=Name(id='appauthor', ctx=Load())), keyword(arg='version', value=Name(id='version', ctx=Load())), keyword(arg='multipath', value=Name(id='multipath', ctx=Load())), keyword(arg='ensure_exists', value=Name(id='ensure_exists', ctx=Load()))]), attr='site_data_dir', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='user_config_dir', args=arguments(posonlyargs=[], args=[arg(arg='appname', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='appauthor', annotation=BinOp(left=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None)), op=BitOr(), right=Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value=False), ctx=Load()))), arg(arg='version', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='roaming', annotation=Name(id='bool', ctx=Load())), arg(arg='ensure_exists', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=False), Constant(value=False)]), body=[Expr(value=Constant(value='\n    :param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.\n    :param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.\n    :param version: See `version <platformdirs.api.PlatformDirsABC.version>`.\n    :param roaming: See `roaming <platformdirs.api.PlatformDirsABC.roaming>`.\n    :param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.\n    :returns: config directory tied to the user\n    ')), Return(value=Attribute(value=Call(func=Name(id='PlatformDirs', ctx=Load()), args=[], keywords=[keyword(arg='appname', value=Name(id='appname', ctx=Load())), keyword(arg='appauthor', value=Name(id='appauthor', ctx=Load())), keyword(arg='version', value=Name(id='version', ctx=Load())), keyword(arg='roaming', value=Name(id='roaming', ctx=Load())), keyword(arg='ensure_exists', value=Name(id='ensure_exists', ctx=Load()))]), attr='user_config_dir', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='site_config_dir', args=arguments(posonlyargs=[], args=[arg(arg='appname', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='appauthor', annotation=BinOp(left=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None)), op=BitOr(), right=Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value=False), ctx=Load()))), arg(arg='version', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='multipath', annotation=Name(id='bool', ctx=Load())), arg(arg='ensure_exists', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=False), Constant(value=False)]), body=[Expr(value=Constant(value='\n    :param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.\n    :param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.\n    :param version: See `version <platformdirs.api.PlatformDirsABC.version>`.\n    :param multipath: See `roaming <platformdirs.api.PlatformDirsABC.multipath>`.\n    :param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.\n    :returns: config directory shared by the users\n    ')), Return(value=Attribute(value=Call(func=Name(id='PlatformDirs', ctx=Load()), args=[], keywords=[keyword(arg='appname', value=Name(id='appname', ctx=Load())), keyword(arg='appauthor', value=Name(id='appauthor', ctx=Load())), keyword(arg='version', value=Name(id='version', ctx=Load())), keyword(arg='multipath', value=Name(id='multipath', ctx=Load())), keyword(arg='ensure_exists', value=Name(id='ensure_exists', ctx=Load()))]), attr='site_config_dir', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='user_cache_dir', args=arguments(posonlyargs=[], args=[arg(arg='appname', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='appauthor', annotation=BinOp(left=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None)), op=BitOr(), right=Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value=False), ctx=Load()))), arg(arg='version', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='opinion', annotation=Name(id='bool', ctx=Load())), arg(arg='ensure_exists', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=True), Constant(value=False)]), body=[Expr(value=Constant(value='\n    :param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.\n    :param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.\n    :param version: See `version <platformdirs.api.PlatformDirsABC.version>`.\n    :param opinion: See `roaming <platformdirs.api.PlatformDirsABC.opinion>`.\n    :param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.\n    :returns: cache directory tied to the user\n    ')), Return(value=Attribute(value=Call(func=Name(id='PlatformDirs', ctx=Load()), args=[], keywords=[keyword(arg='appname', value=Name(id='appname', ctx=Load())), keyword(arg='appauthor', value=Name(id='appauthor', ctx=Load())), keyword(arg='version', value=Name(id='version', ctx=Load())), keyword(arg='opinion', value=Name(id='opinion', ctx=Load())), keyword(arg='ensure_exists', value=Name(id='ensure_exists', ctx=Load()))]), attr='user_cache_dir', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='site_cache_dir', args=arguments(posonlyargs=[], args=[arg(arg='appname', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='appauthor', annotation=BinOp(left=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None)), op=BitOr(), right=Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value=False), ctx=Load()))), arg(arg='version', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='opinion', annotation=Name(id='bool', ctx=Load())), arg(arg='ensure_exists', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=True), Constant(value=False)]), body=[Expr(value=Constant(value='\n    :param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.\n    :param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.\n    :param version: See `version <platformdirs.api.PlatformDirsABC.version>`.\n    :param opinion: See `opinion <platformdirs.api.PlatformDirsABC.opinion>`.\n    :param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.\n    :returns: cache directory tied to the user\n    ')), Return(value=Attribute(value=Call(func=Name(id='PlatformDirs', ctx=Load()), args=[], keywords=[keyword(arg='appname', value=Name(id='appname', ctx=Load())), keyword(arg='appauthor', value=Name(id='appauthor', ctx=Load())), keyword(arg='version', value=Name(id='version', ctx=Load())), keyword(arg='opinion', value=Name(id='opinion', ctx=Load())), keyword(arg='ensure_exists', value=Name(id='ensure_exists', ctx=Load()))]), attr='site_cache_dir', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='user_state_dir', args=arguments(posonlyargs=[], args=[arg(arg='appname', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='appauthor', annotation=BinOp(left=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None)), op=BitOr(), right=Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value=False), ctx=Load()))), arg(arg='version', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='roaming', annotation=Name(id='bool', ctx=Load())), arg(arg='ensure_exists', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=False), Constant(value=False)]), body=[Expr(value=Constant(value='\n    :param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.\n    :param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.\n    :param version: See `version <platformdirs.api.PlatformDirsABC.version>`.\n    :param roaming: See `roaming <platformdirs.api.PlatformDirsABC.roaming>`.\n    :param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.\n    :returns: state directory tied to the user\n    ')), Return(value=Attribute(value=Call(func=Name(id='PlatformDirs', ctx=Load()), args=[], keywords=[keyword(arg='appname', value=Name(id='appname', ctx=Load())), keyword(arg='appauthor', value=Name(id='appauthor', ctx=Load())), keyword(arg='version', value=Name(id='version', ctx=Load())), keyword(arg='roaming', value=Name(id='roaming', ctx=Load())), keyword(arg='ensure_exists', value=Name(id='ensure_exists', ctx=Load()))]), attr='user_state_dir', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='user_log_dir', args=arguments(posonlyargs=[], args=[arg(arg='appname', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='appauthor', annotation=BinOp(left=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None)), op=BitOr(), right=Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value=False), ctx=Load()))), arg(arg='version', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='opinion', annotation=Name(id='bool', ctx=Load())), arg(arg='ensure_exists', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=True), Constant(value=False)]), body=[Expr(value=Constant(value='\n    :param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.\n    :param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.\n    :param version: See `version <platformdirs.api.PlatformDirsABC.version>`.\n    :param opinion: See `roaming <platformdirs.api.PlatformDirsABC.opinion>`.\n    :param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.\n    :returns: log directory tied to the user\n    ')), Return(value=Attribute(value=Call(func=Name(id='PlatformDirs', ctx=Load()), args=[], keywords=[keyword(arg='appname', value=Name(id='appname', ctx=Load())), keyword(arg='appauthor', value=Name(id='appauthor', ctx=Load())), keyword(arg='version', value=Name(id='version', ctx=Load())), keyword(arg='opinion', value=Name(id='opinion', ctx=Load())), keyword(arg='ensure_exists', value=Name(id='ensure_exists', ctx=Load()))]), attr='user_log_dir', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='user_documents_dir', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=':returns: documents directory tied to the user')), Return(value=Attribute(value=Call(func=Name(id='PlatformDirs', ctx=Load()), args=[], keywords=[]), attr='user_documents_dir', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='user_downloads_dir', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=':returns: downloads directory tied to the user')), Return(value=Attribute(value=Call(func=Name(id='PlatformDirs', ctx=Load()), args=[], keywords=[]), attr='user_downloads_dir', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='user_pictures_dir', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=':returns: pictures directory tied to the user')), Return(value=Attribute(value=Call(func=Name(id='PlatformDirs', ctx=Load()), args=[], keywords=[]), attr='user_pictures_dir', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='user_videos_dir', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=':returns: videos directory tied to the user')), Return(value=Attribute(value=Call(func=Name(id='PlatformDirs', ctx=Load()), args=[], keywords=[]), attr='user_videos_dir', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='user_music_dir', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=':returns: music directory tied to the user')), Return(value=Attribute(value=Call(func=Name(id='PlatformDirs', ctx=Load()), args=[], keywords=[]), attr='user_music_dir', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='user_runtime_dir', args=arguments(posonlyargs=[], args=[arg(arg='appname', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='appauthor', annotation=BinOp(left=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None)), op=BitOr(), right=Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value=False), ctx=Load()))), arg(arg='version', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='opinion', annotation=Name(id='bool', ctx=Load())), arg(arg='ensure_exists', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=True), Constant(value=False)]), body=[Expr(value=Constant(value='\n    :param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.\n    :param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.\n    :param version: See `version <platformdirs.api.PlatformDirsABC.version>`.\n    :param opinion: See `opinion <platformdirs.api.PlatformDirsABC.opinion>`.\n    :param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.\n    :returns: runtime directory tied to the user\n    ')), Return(value=Attribute(value=Call(func=Name(id='PlatformDirs', ctx=Load()), args=[], keywords=[keyword(arg='appname', value=Name(id='appname', ctx=Load())), keyword(arg='appauthor', value=Name(id='appauthor', ctx=Load())), keyword(arg='version', value=Name(id='version', ctx=Load())), keyword(arg='opinion', value=Name(id='opinion', ctx=Load())), keyword(arg='ensure_exists', value=Name(id='ensure_exists', ctx=Load()))]), attr='user_runtime_dir', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='user_data_path', args=arguments(posonlyargs=[], args=[arg(arg='appname', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='appauthor', annotation=BinOp(left=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None)), op=BitOr(), right=Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value=False), ctx=Load()))), arg(arg='version', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='roaming', annotation=Name(id='bool', ctx=Load())), arg(arg='ensure_exists', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=False), Constant(value=False)]), body=[Expr(value=Constant(value='\n    :param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.\n    :param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.\n    :param version: See `version <platformdirs.api.PlatformDirsABC.version>`.\n    :param roaming: See `roaming <platformdirs.api.PlatformDirsABC.roaming>`.\n    :param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.\n    :returns: data path tied to the user\n    ')), Return(value=Attribute(value=Call(func=Name(id='PlatformDirs', ctx=Load()), args=[], keywords=[keyword(arg='appname', value=Name(id='appname', ctx=Load())), keyword(arg='appauthor', value=Name(id='appauthor', ctx=Load())), keyword(arg='version', value=Name(id='version', ctx=Load())), keyword(arg='roaming', value=Name(id='roaming', ctx=Load())), keyword(arg='ensure_exists', value=Name(id='ensure_exists', ctx=Load()))]), attr='user_data_path', ctx=Load()))], decorator_list=[], returns=Name(id='Path', ctx=Load())), FunctionDef(name='site_data_path', args=arguments(posonlyargs=[], args=[arg(arg='appname', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='appauthor', annotation=BinOp(left=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None)), op=BitOr(), right=Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value=False), ctx=Load()))), arg(arg='version', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='multipath', annotation=Name(id='bool', ctx=Load())), arg(arg='ensure_exists', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=False), Constant(value=False)]), body=[Expr(value=Constant(value='\n    :param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.\n    :param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.\n    :param version: See `version <platformdirs.api.PlatformDirsABC.version>`.\n    :param multipath: See `multipath <platformdirs.api.PlatformDirsABC.multipath>`.\n    :param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.\n    :returns: data path shared by users\n    ')), Return(value=Attribute(value=Call(func=Name(id='PlatformDirs', ctx=Load()), args=[], keywords=[keyword(arg='appname', value=Name(id='appname', ctx=Load())), keyword(arg='appauthor', value=Name(id='appauthor', ctx=Load())), keyword(arg='version', value=Name(id='version', ctx=Load())), keyword(arg='multipath', value=Name(id='multipath', ctx=Load())), keyword(arg='ensure_exists', value=Name(id='ensure_exists', ctx=Load()))]), attr='site_data_path', ctx=Load()))], decorator_list=[], returns=Name(id='Path', ctx=Load())), FunctionDef(name='user_config_path', args=arguments(posonlyargs=[], args=[arg(arg='appname', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='appauthor', annotation=BinOp(left=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None)), op=BitOr(), right=Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value=False), ctx=Load()))), arg(arg='version', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='roaming', annotation=Name(id='bool', ctx=Load())), arg(arg='ensure_exists', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=False), Constant(value=False)]), body=[Expr(value=Constant(value='\n    :param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.\n    :param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.\n    :param version: See `version <platformdirs.api.PlatformDirsABC.version>`.\n    :param roaming: See `roaming <platformdirs.api.PlatformDirsABC.roaming>`.\n    :param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.\n    :returns: config path tied to the user\n    ')), Return(value=Attribute(value=Call(func=Name(id='PlatformDirs', ctx=Load()), args=[], keywords=[keyword(arg='appname', value=Name(id='appname', ctx=Load())), keyword(arg='appauthor', value=Name(id='appauthor', ctx=Load())), keyword(arg='version', value=Name(id='version', ctx=Load())), keyword(arg='roaming', value=Name(id='roaming', ctx=Load())), keyword(arg='ensure_exists', value=Name(id='ensure_exists', ctx=Load()))]), attr='user_config_path', ctx=Load()))], decorator_list=[], returns=Name(id='Path', ctx=Load())), FunctionDef(name='site_config_path', args=arguments(posonlyargs=[], args=[arg(arg='appname', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='appauthor', annotation=BinOp(left=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None)), op=BitOr(), right=Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value=False), ctx=Load()))), arg(arg='version', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='multipath', annotation=Name(id='bool', ctx=Load())), arg(arg='ensure_exists', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=False), Constant(value=False)]), body=[Expr(value=Constant(value='\n    :param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.\n    :param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.\n    :param version: See `version <platformdirs.api.PlatformDirsABC.version>`.\n    :param multipath: See `roaming <platformdirs.api.PlatformDirsABC.multipath>`.\n    :param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.\n    :returns: config path shared by the users\n    ')), Return(value=Attribute(value=Call(func=Name(id='PlatformDirs', ctx=Load()), args=[], keywords=[keyword(arg='appname', value=Name(id='appname', ctx=Load())), keyword(arg='appauthor', value=Name(id='appauthor', ctx=Load())), keyword(arg='version', value=Name(id='version', ctx=Load())), keyword(arg='multipath', value=Name(id='multipath', ctx=Load())), keyword(arg='ensure_exists', value=Name(id='ensure_exists', ctx=Load()))]), attr='site_config_path', ctx=Load()))], decorator_list=[], returns=Name(id='Path', ctx=Load())), FunctionDef(name='site_cache_path', args=arguments(posonlyargs=[], args=[arg(arg='appname', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='appauthor', annotation=BinOp(left=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None)), op=BitOr(), right=Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value=False), ctx=Load()))), arg(arg='version', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='opinion', annotation=Name(id='bool', ctx=Load())), arg(arg='ensure_exists', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=True), Constant(value=False)]), body=[Expr(value=Constant(value='\n    :param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.\n    :param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.\n    :param version: See `version <platformdirs.api.PlatformDirsABC.version>`.\n    :param opinion: See `opinion <platformdirs.api.PlatformDirsABC.opinion>`.\n    :param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.\n    :returns: cache directory tied to the user\n    ')), Return(value=Attribute(value=Call(func=Name(id='PlatformDirs', ctx=Load()), args=[], keywords=[keyword(arg='appname', value=Name(id='appname', ctx=Load())), keyword(arg='appauthor', value=Name(id='appauthor', ctx=Load())), keyword(arg='version', value=Name(id='version', ctx=Load())), keyword(arg='opinion', value=Name(id='opinion', ctx=Load())), keyword(arg='ensure_exists', value=Name(id='ensure_exists', ctx=Load()))]), attr='site_cache_path', ctx=Load()))], decorator_list=[], returns=Name(id='Path', ctx=Load())), FunctionDef(name='user_cache_path', args=arguments(posonlyargs=[], args=[arg(arg='appname', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='appauthor', annotation=BinOp(left=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None)), op=BitOr(), right=Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value=False), ctx=Load()))), arg(arg='version', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='opinion', annotation=Name(id='bool', ctx=Load())), arg(arg='ensure_exists', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=True), Constant(value=False)]), body=[Expr(value=Constant(value='\n    :param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.\n    :param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.\n    :param version: See `version <platformdirs.api.PlatformDirsABC.version>`.\n    :param opinion: See `roaming <platformdirs.api.PlatformDirsABC.opinion>`.\n    :param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.\n    :returns: cache path tied to the user\n    ')), Return(value=Attribute(value=Call(func=Name(id='PlatformDirs', ctx=Load()), args=[], keywords=[keyword(arg='appname', value=Name(id='appname', ctx=Load())), keyword(arg='appauthor', value=Name(id='appauthor', ctx=Load())), keyword(arg='version', value=Name(id='version', ctx=Load())), keyword(arg='opinion', value=Name(id='opinion', ctx=Load())), keyword(arg='ensure_exists', value=Name(id='ensure_exists', ctx=Load()))]), attr='user_cache_path', ctx=Load()))], decorator_list=[], returns=Name(id='Path', ctx=Load())), FunctionDef(name='user_state_path', args=arguments(posonlyargs=[], args=[arg(arg='appname', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='appauthor', annotation=BinOp(left=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None)), op=BitOr(), right=Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value=False), ctx=Load()))), arg(arg='version', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='roaming', annotation=Name(id='bool', ctx=Load())), arg(arg='ensure_exists', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=False), Constant(value=False)]), body=[Expr(value=Constant(value='\n    :param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.\n    :param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.\n    :param version: See `version <platformdirs.api.PlatformDirsABC.version>`.\n    :param roaming: See `roaming <platformdirs.api.PlatformDirsABC.roaming>`.\n    :param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.\n    :returns: state path tied to the user\n    ')), Return(value=Attribute(value=Call(func=Name(id='PlatformDirs', ctx=Load()), args=[], keywords=[keyword(arg='appname', value=Name(id='appname', ctx=Load())), keyword(arg='appauthor', value=Name(id='appauthor', ctx=Load())), keyword(arg='version', value=Name(id='version', ctx=Load())), keyword(arg='roaming', value=Name(id='roaming', ctx=Load())), keyword(arg='ensure_exists', value=Name(id='ensure_exists', ctx=Load()))]), attr='user_state_path', ctx=Load()))], decorator_list=[], returns=Name(id='Path', ctx=Load())), FunctionDef(name='user_log_path', args=arguments(posonlyargs=[], args=[arg(arg='appname', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='appauthor', annotation=BinOp(left=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None)), op=BitOr(), right=Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value=False), ctx=Load()))), arg(arg='version', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='opinion', annotation=Name(id='bool', ctx=Load())), arg(arg='ensure_exists', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=True), Constant(value=False)]), body=[Expr(value=Constant(value='\n    :param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.\n    :param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.\n    :param version: See `version <platformdirs.api.PlatformDirsABC.version>`.\n    :param opinion: See `roaming <platformdirs.api.PlatformDirsABC.opinion>`.\n    :param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.\n    :returns: log path tied to the user\n    ')), Return(value=Attribute(value=Call(func=Name(id='PlatformDirs', ctx=Load()), args=[], keywords=[keyword(arg='appname', value=Name(id='appname', ctx=Load())), keyword(arg='appauthor', value=Name(id='appauthor', ctx=Load())), keyword(arg='version', value=Name(id='version', ctx=Load())), keyword(arg='opinion', value=Name(id='opinion', ctx=Load())), keyword(arg='ensure_exists', value=Name(id='ensure_exists', ctx=Load()))]), attr='user_log_path', ctx=Load()))], decorator_list=[], returns=Name(id='Path', ctx=Load())), FunctionDef(name='user_documents_path', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=':returns: documents path tied to the user')), Return(value=Attribute(value=Call(func=Name(id='PlatformDirs', ctx=Load()), args=[], keywords=[]), attr='user_documents_path', ctx=Load()))], decorator_list=[], returns=Name(id='Path', ctx=Load())), FunctionDef(name='user_downloads_path', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=':returns: downloads path tied to the user')), Return(value=Attribute(value=Call(func=Name(id='PlatformDirs', ctx=Load()), args=[], keywords=[]), attr='user_downloads_path', ctx=Load()))], decorator_list=[], returns=Name(id='Path', ctx=Load())), FunctionDef(name='user_pictures_path', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=':returns: pictures path tied to the user')), Return(value=Attribute(value=Call(func=Name(id='PlatformDirs', ctx=Load()), args=[], keywords=[]), attr='user_pictures_path', ctx=Load()))], decorator_list=[], returns=Name(id='Path', ctx=Load())), FunctionDef(name='user_videos_path', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=':returns: videos path tied to the user')), Return(value=Attribute(value=Call(func=Name(id='PlatformDirs', ctx=Load()), args=[], keywords=[]), attr='user_videos_path', ctx=Load()))], decorator_list=[], returns=Name(id='Path', ctx=Load())), FunctionDef(name='user_music_path', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=':returns: music path tied to the user')), Return(value=Attribute(value=Call(func=Name(id='PlatformDirs', ctx=Load()), args=[], keywords=[]), attr='user_music_path', ctx=Load()))], decorator_list=[], returns=Name(id='Path', ctx=Load())), FunctionDef(name='user_runtime_path', args=arguments(posonlyargs=[], args=[arg(arg='appname', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='appauthor', annotation=BinOp(left=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None)), op=BitOr(), right=Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value=False), ctx=Load()))), arg(arg='version', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='opinion', annotation=Name(id='bool', ctx=Load())), arg(arg='ensure_exists', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=True), Constant(value=False)]), body=[Expr(value=Constant(value='\n    :param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.\n    :param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.\n    :param version: See `version <platformdirs.api.PlatformDirsABC.version>`.\n    :param opinion: See `opinion <platformdirs.api.PlatformDirsABC.opinion>`.\n    :param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.\n    :returns: runtime path tied to the user\n    ')), Return(value=Attribute(value=Call(func=Name(id='PlatformDirs', ctx=Load()), args=[], keywords=[keyword(arg='appname', value=Name(id='appname', ctx=Load())), keyword(arg='appauthor', value=Name(id='appauthor', ctx=Load())), keyword(arg='version', value=Name(id='version', ctx=Load())), keyword(arg='opinion', value=Name(id='opinion', ctx=Load())), keyword(arg='ensure_exists', value=Name(id='ensure_exists', ctx=Load()))]), attr='user_runtime_path', ctx=Load()))], decorator_list=[], returns=Name(id='Path', ctx=Load())), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='__version__'), Constant(value='__version_info__'), Constant(value='PlatformDirs'), Constant(value='AppDirs'), Constant(value='PlatformDirsABC'), Constant(value='user_data_dir'), Constant(value='user_config_dir'), Constant(value='user_cache_dir'), Constant(value='user_state_dir'), Constant(value='user_log_dir'), Constant(value='user_documents_dir'), Constant(value='user_downloads_dir'), Constant(value='user_pictures_dir'), Constant(value='user_videos_dir'), Constant(value='user_music_dir'), Constant(value='user_runtime_dir'), Constant(value='site_data_dir'), Constant(value='site_config_dir'), Constant(value='site_cache_dir'), Constant(value='user_data_path'), Constant(value='user_config_path'), Constant(value='user_cache_path'), Constant(value='user_state_path'), Constant(value='user_log_path'), Constant(value='user_documents_path'), Constant(value='user_downloads_path'), Constant(value='user_pictures_path'), Constant(value='user_videos_path'), Constant(value='user_music_path'), Constant(value='user_runtime_path'), Constant(value='site_data_path'), Constant(value='site_config_path'), Constant(value='site_cache_path')], ctx=Load()))], type_ignores=[])