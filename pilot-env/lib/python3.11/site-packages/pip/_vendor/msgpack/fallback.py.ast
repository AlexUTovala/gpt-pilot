Module(body=[Expr(value=Constant(value='Fallback pure Python implementation of msgpack')), ImportFrom(module='datetime', names=[alias(name='datetime', asname='_DateTime')], level=0), Import(names=[alias(name='sys')]), Import(names=[alias(name='struct')]), Assign(targets=[Name(id='PY2', ctx=Store())], value=Compare(left=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Constant(value=2)])), If(test=Name(id='PY2', ctx=Load()), body=[Assign(targets=[Name(id='int_types', ctx=Store())], value=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='long', ctx=Load())], ctx=Load())), FunctionDef(name='dict_iteritems', args=arguments(posonlyargs=[], args=[arg(arg='d')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='d', ctx=Load()), attr='iteritems', ctx=Load()), args=[], keywords=[]))], decorator_list=[])], orelse=[Assign(targets=[Name(id='int_types', ctx=Store())], value=Name(id='int', ctx=Load())), Assign(targets=[Name(id='unicode', ctx=Store())], value=Name(id='str', ctx=Load())), Assign(targets=[Name(id='xrange', ctx=Store())], value=Name(id='range', ctx=Load())), FunctionDef(name='dict_iteritems', args=arguments(posonlyargs=[], args=[arg(arg='d')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='d', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]))], decorator_list=[])]), If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), ops=[Lt()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=5)], ctx=Load())]), body=[Assign(targets=[Name(id='RecursionError', ctx=Store())], value=Name(id='RuntimeError', ctx=Load())), FunctionDef(name='_is_recursionerror', args=arguments(posonlyargs=[], args=[arg(arg='e')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='e', ctx=Load()), attr='args', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Call(func=Name(id='isinstance', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='e', ctx=Load()), attr='args', ctx=Load()), slice=Constant(value=0), ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='e', ctx=Load()), attr='args', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='maximum recursion depth exceeded')], keywords=[])]))], decorator_list=[])], orelse=[FunctionDef(name='_is_recursionerror', args=arguments(posonlyargs=[], args=[arg(arg='e')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=True))], decorator_list=[])]), If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='sys', ctx=Load()), Constant(value='pypy_version_info')], keywords=[]), body=[ImportFrom(module='__pypy__', names=[alias(name='newlist_hint')], level=0), Try(body=[ImportFrom(module='__pypy__.builders', names=[alias(name='BytesBuilder', asname='StringBuilder')], level=0)], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[ImportFrom(module='__pypy__.builders', names=[alias(name='StringBuilder')], level=0)])], orelse=[], finalbody=[]), Assign(targets=[Name(id='USING_STRINGBUILDER', ctx=Store())], value=Constant(value=True)), ClassDef(name='StringIO', bases=[Name(id='object', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='s')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=b'')]), body=[If(test=Name(id='s', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='builder', ctx=Store())], value=Call(func=Name(id='StringBuilder', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='builder', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='builder', ctx=Store())], value=Call(func=Name(id='StringBuilder', ctx=Load()), args=[], keywords=[]))])], decorator_list=[]), FunctionDef(name='write', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='s')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='s', ctx=Load()), Name(id='memoryview', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='tobytes', ctx=Load()), args=[], keywords=[]))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='s', ctx=Load()), Name(id='bytearray', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Name(id='bytes', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]))], orelse=[])]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='builder', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='getvalue', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='builder', ctx=Load()), attr='build', ctx=Load()), args=[], keywords=[]))], decorator_list=[])], decorator_list=[])], orelse=[Assign(targets=[Name(id='USING_STRINGBUILDER', ctx=Store())], value=Constant(value=False)), ImportFrom(module='io', names=[alias(name='BytesIO', asname='StringIO')], level=0), Assign(targets=[Name(id='newlist_hint', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='size')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=List(elts=[], ctx=Load())))]), ImportFrom(module='exceptions', names=[alias(name='BufferFull'), alias(name='OutOfData'), alias(name='ExtraData'), alias(name='FormatError'), alias(name='StackError')], level=1), ImportFrom(module='ext', names=[alias(name='ExtType'), alias(name='Timestamp')], level=1), Assign(targets=[Name(id='EX_SKIP', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='EX_CONSTRUCT', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='EX_READ_ARRAY_HEADER', ctx=Store())], value=Constant(value=2)), Assign(targets=[Name(id='EX_READ_MAP_HEADER', ctx=Store())], value=Constant(value=3)), Assign(targets=[Name(id='TYPE_IMMEDIATE', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='TYPE_ARRAY', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='TYPE_MAP', ctx=Store())], value=Constant(value=2)), Assign(targets=[Name(id='TYPE_RAW', ctx=Store())], value=Constant(value=3)), Assign(targets=[Name(id='TYPE_BIN', ctx=Store())], value=Constant(value=4)), Assign(targets=[Name(id='TYPE_EXT', ctx=Store())], value=Constant(value=5)), Assign(targets=[Name(id='DEFAULT_RECURSE_LIMIT', ctx=Store())], value=Constant(value=511)), FunctionDef(name='_check_type_strict', args=arguments(posonlyargs=[], args=[arg(arg='obj'), arg(arg='t'), arg(arg='type'), arg(arg='tuple')], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='type', ctx=Load()), Name(id='tuple', ctx=Load())]), body=[If(test=Compare(left=Call(func=Name(id='type', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), ops=[Is()], comparators=[Name(id='tuple', ctx=Load())]), body=[Return(value=Compare(left=Call(func=Name(id='type', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]), ops=[In()], comparators=[Name(id='t', ctx=Load())]))], orelse=[Return(value=Compare(left=Call(func=Name(id='type', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]), ops=[Is()], comparators=[Name(id='t', ctx=Load())]))])], decorator_list=[]), FunctionDef(name='_get_data_from_buffer', args=arguments(posonlyargs=[], args=[arg(arg='obj')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='view', ctx=Store())], value=Call(func=Name(id='memoryview', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='view', ctx=Load()), attr='itemsize', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=1)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='cannot unpack from multi-byte object')], keywords=[]))], orelse=[]), Return(value=Name(id='view', ctx=Load()))], decorator_list=[]), FunctionDef(name='unpackb', args=arguments(posonlyargs=[], args=[arg(arg='packed')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Constant(value='\n    Unpack an object from `packed`.\n\n    Raises ``ExtraData`` when *packed* contains extra bytes.\n    Raises ``ValueError`` when *packed* is incomplete.\n    Raises ``FormatError`` when *packed* is not valid msgpack.\n    Raises ``StackError`` when *packed* contains too nested.\n    Other exceptions can be raised during unpacking.\n\n    See :class:`Unpacker` for options.\n    ')), Assign(targets=[Name(id='unpacker', ctx=Store())], value=Call(func=Name(id='Unpacker', ctx=Load()), args=[Constant(value=None)], keywords=[keyword(arg='max_buffer_size', value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='packed', ctx=Load())], keywords=[])), keyword(value=Name(id='kwargs', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='unpacker', ctx=Load()), attr='feed', ctx=Load()), args=[Name(id='packed', ctx=Load())], keywords=[])), Try(body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='unpacker', ctx=Load()), attr='_unpack', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Name(id='OutOfData', ctx=Load()), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Unpack failed: incomplete input')], keywords=[]))]), ExceptHandler(type=Name(id='RecursionError', ctx=Load()), name='e', body=[If(test=Call(func=Name(id='_is_recursionerror', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]), body=[Raise(exc=Name(id='StackError', ctx=Load()))], orelse=[]), Raise()])], orelse=[], finalbody=[]), If(test=Call(func=Attribute(value=Name(id='unpacker', ctx=Load()), attr='_got_extradata', ctx=Load()), args=[], keywords=[]), body=[Raise(exc=Call(func=Name(id='ExtraData', ctx=Load()), args=[Name(id='ret', ctx=Load()), Call(func=Attribute(value=Name(id='unpacker', ctx=Load()), attr='_get_extradata', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[]), Return(value=Name(id='ret', ctx=Load()))], decorator_list=[]), If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), ops=[Lt()], comparators=[Tuple(elts=[Constant(value=2), Constant(value=7), Constant(value=6)], ctx=Load())]), body=[FunctionDef(name='_unpack_from', args=arguments(posonlyargs=[], args=[arg(arg='f'), arg(arg='b'), arg(arg='o')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[Expr(value=Constant(value='Explicit type cast for legacy struct.unpack_from')), Return(value=Call(func=Attribute(value=Name(id='struct', ctx=Load()), attr='unpack_from', ctx=Load()), args=[Name(id='f', ctx=Load()), Call(func=Name(id='bytes', ctx=Load()), args=[Name(id='b', ctx=Load())], keywords=[]), Name(id='o', ctx=Load())], keywords=[]))], decorator_list=[])], orelse=[Assign(targets=[Name(id='_unpack_from', ctx=Store())], value=Attribute(value=Name(id='struct', ctx=Load()), attr='unpack_from', ctx=Load()))]), Assign(targets=[Name(id='_NO_FORMAT_USED', ctx=Store())], value=Constant(value='')), Assign(targets=[Name(id='_MSGPACK_HEADERS', ctx=Store())], value=Dict(keys=[Constant(value=196), Constant(value=197), Constant(value=198), Constant(value=199), Constant(value=200), Constant(value=201), Constant(value=202), Constant(value=203), Constant(value=204), Constant(value=205), Constant(value=206), Constant(value=207), Constant(value=208), Constant(value=209), Constant(value=210), Constant(value=211), Constant(value=212), Constant(value=213), Constant(value=214), Constant(value=215), Constant(value=216), Constant(value=217), Constant(value=218), Constant(value=219), Constant(value=220), Constant(value=221), Constant(value=222), Constant(value=223)], values=[Tuple(elts=[Constant(value=1), Name(id='_NO_FORMAT_USED', ctx=Load()), Name(id='TYPE_BIN', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value=2), Constant(value='>H'), Name(id='TYPE_BIN', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value=4), Constant(value='>I'), Name(id='TYPE_BIN', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value=2), Constant(value='Bb'), Name(id='TYPE_EXT', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value=3), Constant(value='>Hb'), Name(id='TYPE_EXT', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value=5), Constant(value='>Ib'), Name(id='TYPE_EXT', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value=4), Constant(value='>f')], ctx=Load()), Tuple(elts=[Constant(value=8), Constant(value='>d')], ctx=Load()), Tuple(elts=[Constant(value=1), Name(id='_NO_FORMAT_USED', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value=2), Constant(value='>H')], ctx=Load()), Tuple(elts=[Constant(value=4), Constant(value='>I')], ctx=Load()), Tuple(elts=[Constant(value=8), Constant(value='>Q')], ctx=Load()), Tuple(elts=[Constant(value=1), Constant(value='b')], ctx=Load()), Tuple(elts=[Constant(value=2), Constant(value='>h')], ctx=Load()), Tuple(elts=[Constant(value=4), Constant(value='>i')], ctx=Load()), Tuple(elts=[Constant(value=8), Constant(value='>q')], ctx=Load()), Tuple(elts=[Constant(value=1), Constant(value='b1s'), Name(id='TYPE_EXT', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value=2), Constant(value='b2s'), Name(id='TYPE_EXT', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value=4), Constant(value='b4s'), Name(id='TYPE_EXT', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value=8), Constant(value='b8s'), Name(id='TYPE_EXT', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value=16), Constant(value='b16s'), Name(id='TYPE_EXT', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value=1), Name(id='_NO_FORMAT_USED', ctx=Load()), Name(id='TYPE_RAW', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value=2), Constant(value='>H'), Name(id='TYPE_RAW', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value=4), Constant(value='>I'), Name(id='TYPE_RAW', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value=2), Constant(value='>H'), Name(id='TYPE_ARRAY', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value=4), Constant(value='>I'), Name(id='TYPE_ARRAY', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value=2), Constant(value='>H'), Name(id='TYPE_MAP', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value=4), Constant(value='>I'), Name(id='TYPE_MAP', ctx=Load())], ctx=Load())])), ClassDef(name='Unpacker', bases=[Name(id='object', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="Streaming unpacker.\n\n    Arguments:\n\n    :param file_like:\n        File-like object having `.read(n)` method.\n        If specified, unpacker reads serialized data from it and :meth:`feed()` is not usable.\n\n    :param int read_size:\n        Used as `file_like.read(read_size)`. (default: `min(16*1024, max_buffer_size)`)\n\n    :param bool use_list:\n        If true, unpack msgpack array to Python list.\n        Otherwise, unpack to Python tuple. (default: True)\n\n    :param bool raw:\n        If true, unpack msgpack raw to Python bytes.\n        Otherwise, unpack to Python str by decoding with UTF-8 encoding (default).\n\n    :param int timestamp:\n        Control how timestamp type is unpacked:\n\n            0 - Timestamp\n            1 - float  (Seconds from the EPOCH)\n            2 - int  (Nanoseconds from the EPOCH)\n            3 - datetime.datetime  (UTC).  Python 2 is not supported.\n\n    :param bool strict_map_key:\n        If true (default), only str or bytes are accepted for map (dict) keys.\n\n    :param callable object_hook:\n        When specified, it should be callable.\n        Unpacker calls it with a dict argument after unpacking msgpack map.\n        (See also simplejson)\n\n    :param callable object_pairs_hook:\n        When specified, it should be callable.\n        Unpacker calls it with a list of key-value pairs after unpacking msgpack map.\n        (See also simplejson)\n\n    :param str unicode_errors:\n        The error handler for decoding unicode. (default: 'strict')\n        This option should be used only when you have msgpack data which\n        contains invalid UTF-8 string.\n\n    :param int max_buffer_size:\n        Limits size of data waiting unpacked.  0 means 2**32-1.\n        The default value is 100*1024*1024 (100MiB).\n        Raises `BufferFull` exception when it is insufficient.\n        You should set this parameter when unpacking data from untrusted source.\n\n    :param int max_str_len:\n        Deprecated, use *max_buffer_size* instead.\n        Limits max length of str. (default: max_buffer_size)\n\n    :param int max_bin_len:\n        Deprecated, use *max_buffer_size* instead.\n        Limits max length of bin. (default: max_buffer_size)\n\n    :param int max_array_len:\n        Limits max length of array.\n        (default: max_buffer_size)\n\n    :param int max_map_len:\n        Limits max length of map.\n        (default: max_buffer_size//2)\n\n    :param int max_ext_len:\n        Deprecated, use *max_buffer_size* instead.\n        Limits max size of ext type.  (default: max_buffer_size)\n\n    Example of streaming deserialize from file-like object::\n\n        unpacker = Unpacker(file_like)\n        for o in unpacker:\n            process(o)\n\n    Example of streaming deserialize from socket::\n\n        unpacker = Unpacker()\n        while True:\n            buf = sock.recv(1024**2)\n            if not buf:\n                break\n            unpacker.feed(buf)\n            for o in unpacker:\n                process(o)\n\n    Raises ``ExtraData`` when *packed* contains extra bytes.\n    Raises ``OutOfData`` when *packed* is incomplete.\n    Raises ``FormatError`` when *packed* is not valid msgpack.\n    Raises ``StackError`` when *packed* contains too nested.\n    Other exceptions can be raised during unpacking.\n    ")), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='file_like'), arg(arg='read_size'), arg(arg='use_list'), arg(arg='raw'), arg(arg='timestamp'), arg(arg='strict_map_key'), arg(arg='object_hook'), arg(arg='object_pairs_hook'), arg(arg='list_hook'), arg(arg='unicode_errors'), arg(arg='max_buffer_size'), arg(arg='ext_hook'), arg(arg='max_str_len'), arg(arg='max_bin_len'), arg(arg='max_array_len'), arg(arg='max_map_len'), arg(arg='max_ext_len')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=0), Constant(value=True), Constant(value=False), Constant(value=0), Constant(value=True), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), BinOp(left=BinOp(left=Constant(value=100), op=Mult(), right=Constant(value=1024)), op=Mult(), right=Constant(value=1024)), Name(id='ExtType', ctx=Load()), UnaryOp(op=USub(), operand=Constant(value=1)), UnaryOp(op=USub(), operand=Constant(value=1)), UnaryOp(op=USub(), operand=Constant(value=1)), UnaryOp(op=USub(), operand=Constant(value=1)), UnaryOp(op=USub(), operand=Constant(value=1))]), body=[If(test=Compare(left=Name(id='unicode_errors', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='unicode_errors', ctx=Store())], value=Constant(value='strict'))], orelse=[]), If(test=Compare(left=Name(id='file_like', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_feeding', ctx=Store())], value=Constant(value=True))], orelse=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='callable', ctx=Load()), args=[Attribute(value=Name(id='file_like', ctx=Load()), attr='read', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[Constant(value='`file_like.read` must be callable')], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='file_like', ctx=Store())], value=Name(id='file_like', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_feeding', ctx=Store())], value=Constant(value=False))]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Store())], value=Call(func=Name(id='bytearray', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_buff_i', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_buf_checkpoint', ctx=Store())], value=Constant(value=0)), If(test=UnaryOp(op=Not(), operand=Name(id='max_buffer_size', ctx=Load())), body=[Assign(targets=[Name(id='max_buffer_size', ctx=Store())], value=BinOp(left=BinOp(left=Constant(value=2), op=Pow(), right=Constant(value=31)), op=Sub(), right=Constant(value=1)))], orelse=[]), If(test=Compare(left=Name(id='max_str_len', ctx=Load()), ops=[Eq()], comparators=[UnaryOp(op=USub(), operand=Constant(value=1))]), body=[Assign(targets=[Name(id='max_str_len', ctx=Store())], value=Name(id='max_buffer_size', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='max_bin_len', ctx=Load()), ops=[Eq()], comparators=[UnaryOp(op=USub(), operand=Constant(value=1))]), body=[Assign(targets=[Name(id='max_bin_len', ctx=Store())], value=Name(id='max_buffer_size', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='max_array_len', ctx=Load()), ops=[Eq()], comparators=[UnaryOp(op=USub(), operand=Constant(value=1))]), body=[Assign(targets=[Name(id='max_array_len', ctx=Store())], value=Name(id='max_buffer_size', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='max_map_len', ctx=Load()), ops=[Eq()], comparators=[UnaryOp(op=USub(), operand=Constant(value=1))]), body=[Assign(targets=[Name(id='max_map_len', ctx=Store())], value=BinOp(left=Name(id='max_buffer_size', ctx=Load()), op=FloorDiv(), right=Constant(value=2)))], orelse=[]), If(test=Compare(left=Name(id='max_ext_len', ctx=Load()), ops=[Eq()], comparators=[UnaryOp(op=USub(), operand=Constant(value=1))]), body=[Assign(targets=[Name(id='max_ext_len', ctx=Store())], value=Name(id='max_buffer_size', ctx=Load()))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_max_buffer_size', ctx=Store())], value=Name(id='max_buffer_size', ctx=Load())), If(test=Compare(left=Name(id='read_size', ctx=Load()), ops=[Gt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_max_buffer_size', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='read_size must be smaller than max_buffer_size')], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_read_size', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='read_size', ctx=Load()), Call(func=Name(id='min', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_max_buffer_size', ctx=Load()), BinOp(left=Constant(value=16), op=Mult(), right=Constant(value=1024))], keywords=[])])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_raw', ctx=Store())], value=Call(func=Name(id='bool', ctx=Load()), args=[Name(id='raw', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_strict_map_key', ctx=Store())], value=Call(func=Name(id='bool', ctx=Load()), args=[Name(id='strict_map_key', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_unicode_errors', ctx=Store())], value=Name(id='unicode_errors', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_use_list', ctx=Store())], value=Name(id='use_list', ctx=Load())), If(test=UnaryOp(op=Not(), operand=Compare(left=Constant(value=0), ops=[LtE(), LtE()], comparators=[Name(id='timestamp', ctx=Load()), Constant(value=3)])), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='timestamp must be 0..3')], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_timestamp', ctx=Store())], value=Name(id='timestamp', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_list_hook', ctx=Store())], value=Name(id='list_hook', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_object_hook', ctx=Store())], value=Name(id='object_hook', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_object_pairs_hook', ctx=Store())], value=Name(id='object_pairs_hook', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_ext_hook', ctx=Store())], value=Name(id='ext_hook', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_max_str_len', ctx=Store())], value=Name(id='max_str_len', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_max_bin_len', ctx=Store())], value=Name(id='max_bin_len', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_max_array_len', ctx=Store())], value=Name(id='max_array_len', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_max_map_len', ctx=Store())], value=Name(id='max_map_len', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_max_ext_len', ctx=Store())], value=Name(id='max_ext_len', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_stream_offset', ctx=Store())], value=Constant(value=0)), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='list_hook', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), UnaryOp(op=Not(), operand=Call(func=Name(id='callable', ctx=Load()), args=[Name(id='list_hook', ctx=Load())], keywords=[]))]), body=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[Constant(value='`list_hook` is not callable')], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='object_hook', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), UnaryOp(op=Not(), operand=Call(func=Name(id='callable', ctx=Load()), args=[Name(id='object_hook', ctx=Load())], keywords=[]))]), body=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[Constant(value='`object_hook` is not callable')], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='object_pairs_hook', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), UnaryOp(op=Not(), operand=Call(func=Name(id='callable', ctx=Load()), args=[Name(id='object_pairs_hook', ctx=Load())], keywords=[]))]), body=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[Constant(value='`object_pairs_hook` is not callable')], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='object_hook', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='object_pairs_hook', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[Constant(value='object_pairs_hook and object_hook are mutually exclusive')], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='callable', ctx=Load()), args=[Name(id='ext_hook', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[Constant(value='`ext_hook` is not callable')], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='feed', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='next_bytes')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Attribute(value=Name(id='self', ctx=Load()), attr='_feeding', ctx=Load())), Assign(targets=[Name(id='view', ctx=Store())], value=Call(func=Name(id='_get_data_from_buffer', ctx=Load()), args=[Name(id='next_bytes', ctx=Load())], keywords=[])), If(test=Compare(left=BinOp(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load())], keywords=[]), op=Sub(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_buff_i', ctx=Load())), op=Add(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='view', ctx=Load())], keywords=[])), ops=[Gt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_max_buffer_size', ctx=Load())]), body=[Raise(exc=Name(id='BufferFull', ctx=Load()))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_buf_checkpoint', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[Delete(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), slice=Slice(upper=Attribute(value=Name(id='self', ctx=Load()), attr='_buf_checkpoint', ctx=Load())), ctx=Del())]), AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_buff_i', ctx=Store()), op=Sub(), value=Attribute(value=Name(id='self', ctx=Load()), attr='_buf_checkpoint', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_buf_checkpoint', ctx=Store())], value=Constant(value=0))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), attr='extend', ctx=Load()), args=[Name(id='view', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_consume', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Gets rid of the used parts of the buffer.')), AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_stream_offset', ctx=Store()), op=Add(), value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_buff_i', ctx=Load()), op=Sub(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_buf_checkpoint', ctx=Load()))), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_buf_checkpoint', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_buff_i', ctx=Load()))], decorator_list=[]), FunctionDef(name='_got_extradata', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_buff_i', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load())], keywords=[])]))], decorator_list=[]), FunctionDef(name='_get_extradata', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), slice=Slice(lower=Attribute(value=Name(id='self', ctx=Load()), attr='_buff_i', ctx=Load())), ctx=Load()))], decorator_list=[]), FunctionDef(name='read_bytes', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='n')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_read', ctx=Load()), args=[Name(id='n', ctx=Load())], keywords=[keyword(arg='raise_outofdata', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_consume', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='ret', ctx=Load()))], decorator_list=[]), FunctionDef(name='_read', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='n'), arg(arg='raise_outofdata')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_reserve', ctx=Load()), args=[Name(id='n', ctx=Load())], keywords=[keyword(arg='raise_outofdata', value=Name(id='raise_outofdata', ctx=Load()))])), Assign(targets=[Name(id='i', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_buff_i', ctx=Load())), Assign(targets=[Name(id='ret', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), slice=Slice(lower=Name(id='i', ctx=Load()), upper=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Name(id='n', ctx=Load()))), ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_buff_i', ctx=Store())], value=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='ret', ctx=Load())], keywords=[]))), Return(value=Name(id='ret', ctx=Load()))], decorator_list=[]), FunctionDef(name='_reserve', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='n'), arg(arg='raise_outofdata')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Assign(targets=[Name(id='remain_bytes', ctx=Store())], value=BinOp(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load())], keywords=[]), op=Sub(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_buff_i', ctx=Load())), op=Sub(), right=Name(id='n', ctx=Load()))), If(test=Compare(left=Name(id='remain_bytes', ctx=Load()), ops=[GtE()], comparators=[Constant(value=0)]), body=[Return()], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_feeding', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_buff_i', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_buf_checkpoint', ctx=Load())), Raise(exc=Name(id='OutOfData', ctx=Load()))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_buf_checkpoint', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[Delete(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), slice=Slice(upper=Attribute(value=Name(id='self', ctx=Load()), attr='_buf_checkpoint', ctx=Load())), ctx=Del())]), AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_buff_i', ctx=Store()), op=Sub(), value=Attribute(value=Name(id='self', ctx=Load()), attr='_buf_checkpoint', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_buf_checkpoint', ctx=Store())], value=Constant(value=0))], orelse=[]), Assign(targets=[Name(id='remain_bytes', ctx=Store())], value=UnaryOp(op=USub(), operand=Name(id='remain_bytes', ctx=Load()))), If(test=Compare(left=BinOp(left=Name(id='remain_bytes', ctx=Load()), op=Add(), right=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load())], keywords=[])), ops=[Gt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_max_buffer_size', ctx=Load())]), body=[Raise(exc=Name(id='BufferFull', ctx=Load()))], orelse=[]), While(test=Compare(left=Name(id='remain_bytes', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='to_read_bytes', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_read_size', ctx=Load()), Name(id='remain_bytes', ctx=Load())], keywords=[])), Assign(targets=[Name(id='read_data', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='file_like', ctx=Load()), attr='read', ctx=Load()), args=[Name(id='to_read_bytes', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='read_data', ctx=Load())), body=[Break()], orelse=[]), Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='read_data', ctx=Load()), Name(id='bytes', ctx=Load())], keywords=[])), AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Store()), op=Add(), value=Name(id='read_data', ctx=Load())), AugAssign(target=Name(id='remain_bytes', ctx=Store()), op=Sub(), value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='read_data', ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[BinOp(left=Name(id='n', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_buff_i', ctx=Load()))]), Name(id='raise_outofdata', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_buff_i', ctx=Store())], value=Constant(value=0)), Raise(exc=Name(id='OutOfData', ctx=Load()))], orelse=[])], decorator_list=[]), FunctionDef(name='_read_header', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='typ', ctx=Store())], value=Name(id='TYPE_IMMEDIATE', ctx=Load())), Assign(targets=[Name(id='n', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='obj', ctx=Store())], value=Constant(value=None)), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_reserve', ctx=Load()), args=[Constant(value=1)], keywords=[])), Assign(targets=[Name(id='b', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='_buff_i', ctx=Load()), ctx=Load())), AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_buff_i', ctx=Store()), op=Add(), value=Constant(value=1)), If(test=Compare(left=BinOp(left=Name(id='b', ctx=Load()), op=BitAnd(), right=Constant(value=128)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='obj', ctx=Store())], value=Name(id='b', ctx=Load()))], orelse=[If(test=Compare(left=BinOp(left=Name(id='b', ctx=Load()), op=BitAnd(), right=Constant(value=224)), ops=[Eq()], comparators=[Constant(value=224)]), body=[Assign(targets=[Name(id='obj', ctx=Store())], value=BinOp(left=UnaryOp(op=USub(), operand=Constant(value=1)), op=Sub(), right=BinOp(left=Name(id='b', ctx=Load()), op=BitXor(), right=Constant(value=255))))], orelse=[If(test=Compare(left=BinOp(left=Name(id='b', ctx=Load()), op=BitAnd(), right=Constant(value=224)), ops=[Eq()], comparators=[Constant(value=160)]), body=[Assign(targets=[Name(id='n', ctx=Store())], value=BinOp(left=Name(id='b', ctx=Load()), op=BitAnd(), right=Constant(value=31))), Assign(targets=[Name(id='typ', ctx=Store())], value=Name(id='TYPE_RAW', ctx=Load())), If(test=Compare(left=Name(id='n', ctx=Load()), ops=[Gt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_max_str_len', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='%s exceeds max_str_len(%s)'), op=Mod(), right=Tuple(elts=[Name(id='n', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_max_str_len', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Name(id='obj', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_read', ctx=Load()), args=[Name(id='n', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=BinOp(left=Name(id='b', ctx=Load()), op=BitAnd(), right=Constant(value=240)), ops=[Eq()], comparators=[Constant(value=144)]), body=[Assign(targets=[Name(id='n', ctx=Store())], value=BinOp(left=Name(id='b', ctx=Load()), op=BitAnd(), right=Constant(value=15))), Assign(targets=[Name(id='typ', ctx=Store())], value=Name(id='TYPE_ARRAY', ctx=Load())), If(test=Compare(left=Name(id='n', ctx=Load()), ops=[Gt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_max_array_len', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='%s exceeds max_array_len(%s)'), op=Mod(), right=Tuple(elts=[Name(id='n', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_max_array_len', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[])], orelse=[If(test=Compare(left=BinOp(left=Name(id='b', ctx=Load()), op=BitAnd(), right=Constant(value=240)), ops=[Eq()], comparators=[Constant(value=128)]), body=[Assign(targets=[Name(id='n', ctx=Store())], value=BinOp(left=Name(id='b', ctx=Load()), op=BitAnd(), right=Constant(value=15))), Assign(targets=[Name(id='typ', ctx=Store())], value=Name(id='TYPE_MAP', ctx=Load())), If(test=Compare(left=Name(id='n', ctx=Load()), ops=[Gt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_max_map_len', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='%s exceeds max_map_len(%s)'), op=Mod(), right=Tuple(elts=[Name(id='n', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_max_map_len', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[])], orelse=[If(test=Compare(left=Name(id='b', ctx=Load()), ops=[Eq()], comparators=[Constant(value=192)]), body=[Assign(targets=[Name(id='obj', ctx=Store())], value=Constant(value=None))], orelse=[If(test=Compare(left=Name(id='b', ctx=Load()), ops=[Eq()], comparators=[Constant(value=194)]), body=[Assign(targets=[Name(id='obj', ctx=Store())], value=Constant(value=False))], orelse=[If(test=Compare(left=Name(id='b', ctx=Load()), ops=[Eq()], comparators=[Constant(value=195)]), body=[Assign(targets=[Name(id='obj', ctx=Store())], value=Constant(value=True))], orelse=[If(test=Compare(left=Constant(value=196), ops=[LtE(), LtE()], comparators=[Name(id='b', ctx=Load()), Constant(value=198)]), body=[Assign(targets=[Tuple(elts=[Name(id='size', ctx=Store()), Name(id='fmt', ctx=Store()), Name(id='typ', ctx=Store())], ctx=Store())], value=Subscript(value=Name(id='_MSGPACK_HEADERS', ctx=Load()), slice=Name(id='b', ctx=Load()), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_reserve', ctx=Load()), args=[Name(id='size', ctx=Load())], keywords=[])), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='fmt', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='n', ctx=Store())], value=Subscript(value=Call(func=Name(id='_unpack_from', ctx=Load()), args=[Name(id='fmt', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_buff_i', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load()))], orelse=[Assign(targets=[Name(id='n', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='_buff_i', ctx=Load()), ctx=Load()))]), AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_buff_i', ctx=Store()), op=Add(), value=Name(id='size', ctx=Load())), If(test=Compare(left=Name(id='n', ctx=Load()), ops=[Gt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_max_bin_len', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='%s exceeds max_bin_len(%s)'), op=Mod(), right=Tuple(elts=[Name(id='n', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_max_bin_len', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Name(id='obj', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_read', ctx=Load()), args=[Name(id='n', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Constant(value=199), ops=[LtE(), LtE()], comparators=[Name(id='b', ctx=Load()), Constant(value=201)]), body=[Assign(targets=[Tuple(elts=[Name(id='size', ctx=Store()), Name(id='fmt', ctx=Store()), Name(id='typ', ctx=Store())], ctx=Store())], value=Subscript(value=Name(id='_MSGPACK_HEADERS', ctx=Load()), slice=Name(id='b', ctx=Load()), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_reserve', ctx=Load()), args=[Name(id='size', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='L', ctx=Store()), Name(id='n', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_unpack_from', ctx=Load()), args=[Name(id='fmt', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_buff_i', ctx=Load())], keywords=[])), AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_buff_i', ctx=Store()), op=Add(), value=Name(id='size', ctx=Load())), If(test=Compare(left=Name(id='L', ctx=Load()), ops=[Gt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_max_ext_len', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='%s exceeds max_ext_len(%s)'), op=Mod(), right=Tuple(elts=[Name(id='L', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_max_ext_len', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Name(id='obj', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_read', ctx=Load()), args=[Name(id='L', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Constant(value=202), ops=[LtE(), LtE()], comparators=[Name(id='b', ctx=Load()), Constant(value=211)]), body=[Assign(targets=[Tuple(elts=[Name(id='size', ctx=Store()), Name(id='fmt', ctx=Store())], ctx=Store())], value=Subscript(value=Name(id='_MSGPACK_HEADERS', ctx=Load()), slice=Name(id='b', ctx=Load()), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_reserve', ctx=Load()), args=[Name(id='size', ctx=Load())], keywords=[])), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='fmt', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='obj', ctx=Store())], value=Subscript(value=Call(func=Name(id='_unpack_from', ctx=Load()), args=[Name(id='fmt', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_buff_i', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load()))], orelse=[Assign(targets=[Name(id='obj', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='_buff_i', ctx=Load()), ctx=Load()))]), AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_buff_i', ctx=Store()), op=Add(), value=Name(id='size', ctx=Load()))], orelse=[If(test=Compare(left=Constant(value=212), ops=[LtE(), LtE()], comparators=[Name(id='b', ctx=Load()), Constant(value=216)]), body=[Assign(targets=[Tuple(elts=[Name(id='size', ctx=Store()), Name(id='fmt', ctx=Store()), Name(id='typ', ctx=Store())], ctx=Store())], value=Subscript(value=Name(id='_MSGPACK_HEADERS', ctx=Load()), slice=Name(id='b', ctx=Load()), ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_max_ext_len', ctx=Load()), ops=[Lt()], comparators=[Name(id='size', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='%s exceeds max_ext_len(%s)'), op=Mod(), right=Tuple(elts=[Name(id='size', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_max_ext_len', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_reserve', ctx=Load()), args=[BinOp(left=Name(id='size', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='n', ctx=Store()), Name(id='obj', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_unpack_from', ctx=Load()), args=[Name(id='fmt', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_buff_i', ctx=Load())], keywords=[])), AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_buff_i', ctx=Store()), op=Add(), value=BinOp(left=Name(id='size', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[If(test=Compare(left=Constant(value=217), ops=[LtE(), LtE()], comparators=[Name(id='b', ctx=Load()), Constant(value=219)]), body=[Assign(targets=[Tuple(elts=[Name(id='size', ctx=Store()), Name(id='fmt', ctx=Store()), Name(id='typ', ctx=Store())], ctx=Store())], value=Subscript(value=Name(id='_MSGPACK_HEADERS', ctx=Load()), slice=Name(id='b', ctx=Load()), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_reserve', ctx=Load()), args=[Name(id='size', ctx=Load())], keywords=[])), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='fmt', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Tuple(elts=[Name(id='n', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_unpack_from', ctx=Load()), args=[Name(id='fmt', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_buff_i', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='n', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='_buff_i', ctx=Load()), ctx=Load()))]), AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_buff_i', ctx=Store()), op=Add(), value=Name(id='size', ctx=Load())), If(test=Compare(left=Name(id='n', ctx=Load()), ops=[Gt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_max_str_len', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='%s exceeds max_str_len(%s)'), op=Mod(), right=Tuple(elts=[Name(id='n', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_max_str_len', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Name(id='obj', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_read', ctx=Load()), args=[Name(id='n', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Constant(value=220), ops=[LtE(), LtE()], comparators=[Name(id='b', ctx=Load()), Constant(value=221)]), body=[Assign(targets=[Tuple(elts=[Name(id='size', ctx=Store()), Name(id='fmt', ctx=Store()), Name(id='typ', ctx=Store())], ctx=Store())], value=Subscript(value=Name(id='_MSGPACK_HEADERS', ctx=Load()), slice=Name(id='b', ctx=Load()), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_reserve', ctx=Load()), args=[Name(id='size', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='n', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_unpack_from', ctx=Load()), args=[Name(id='fmt', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_buff_i', ctx=Load())], keywords=[])), AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_buff_i', ctx=Store()), op=Add(), value=Name(id='size', ctx=Load())), If(test=Compare(left=Name(id='n', ctx=Load()), ops=[Gt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_max_array_len', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='%s exceeds max_array_len(%s)'), op=Mod(), right=Tuple(elts=[Name(id='n', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_max_array_len', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[])], orelse=[If(test=Compare(left=Constant(value=222), ops=[LtE(), LtE()], comparators=[Name(id='b', ctx=Load()), Constant(value=223)]), body=[Assign(targets=[Tuple(elts=[Name(id='size', ctx=Store()), Name(id='fmt', ctx=Store()), Name(id='typ', ctx=Store())], ctx=Store())], value=Subscript(value=Name(id='_MSGPACK_HEADERS', ctx=Load()), slice=Name(id='b', ctx=Load()), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_reserve', ctx=Load()), args=[Name(id='size', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='n', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_unpack_from', ctx=Load()), args=[Name(id='fmt', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_buff_i', ctx=Load())], keywords=[])), AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_buff_i', ctx=Store()), op=Add(), value=Name(id='size', ctx=Load())), If(test=Compare(left=Name(id='n', ctx=Load()), ops=[Gt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_max_map_len', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='%s exceeds max_map_len(%s)'), op=Mod(), right=Tuple(elts=[Name(id='n', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_max_map_len', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[])], orelse=[Raise(exc=Call(func=Name(id='FormatError', ctx=Load()), args=[BinOp(left=Constant(value='Unknown header: 0x%x'), op=Mod(), right=Name(id='b', ctx=Load()))], keywords=[]))])])])])])])])])])])])])])])]), Return(value=Tuple(elts=[Name(id='typ', ctx=Load()), Name(id='n', ctx=Load()), Name(id='obj', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='_unpack', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='execute')], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='EX_CONSTRUCT', ctx=Load())]), body=[Assign(targets=[Tuple(elts=[Name(id='typ', ctx=Store()), Name(id='n', ctx=Store()), Name(id='obj', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_read_header', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='execute', ctx=Load()), ops=[Eq()], comparators=[Name(id='EX_READ_ARRAY_HEADER', ctx=Load())]), body=[If(test=Compare(left=Name(id='typ', ctx=Load()), ops=[NotEq()], comparators=[Name(id='TYPE_ARRAY', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Expected array')], keywords=[]))], orelse=[]), Return(value=Name(id='n', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='execute', ctx=Load()), ops=[Eq()], comparators=[Name(id='EX_READ_MAP_HEADER', ctx=Load())]), body=[If(test=Compare(left=Name(id='typ', ctx=Load()), ops=[NotEq()], comparators=[Name(id='TYPE_MAP', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Expected map')], keywords=[]))], orelse=[]), Return(value=Name(id='n', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='typ', ctx=Load()), ops=[Eq()], comparators=[Name(id='TYPE_ARRAY', ctx=Load())]), body=[If(test=Compare(left=Name(id='execute', ctx=Load()), ops=[Eq()], comparators=[Name(id='EX_SKIP', ctx=Load())]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='xrange', ctx=Load()), args=[Name(id='n', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_unpack', ctx=Load()), args=[Name(id='EX_SKIP', ctx=Load())], keywords=[]))], orelse=[]), Return()], orelse=[]), Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Name(id='newlist_hint', ctx=Load()), args=[Name(id='n', ctx=Load())], keywords=[])), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='xrange', ctx=Load()), args=[Name(id='n', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='ret', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_unpack', ctx=Load()), args=[Name(id='EX_CONSTRUCT', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_list_hook', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_list_hook', ctx=Load()), args=[Name(id='ret', ctx=Load())], keywords=[]))], orelse=[]), Return(value=IfExp(test=Attribute(value=Name(id='self', ctx=Load()), attr='_use_list', ctx=Load()), body=Name(id='ret', ctx=Load()), orelse=Call(func=Name(id='tuple', ctx=Load()), args=[Name(id='ret', ctx=Load())], keywords=[])))], orelse=[]), If(test=Compare(left=Name(id='typ', ctx=Load()), ops=[Eq()], comparators=[Name(id='TYPE_MAP', ctx=Load())]), body=[If(test=Compare(left=Name(id='execute', ctx=Load()), ops=[Eq()], comparators=[Name(id='EX_SKIP', ctx=Load())]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='xrange', ctx=Load()), args=[Name(id='n', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_unpack', ctx=Load()), args=[Name(id='EX_SKIP', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_unpack', ctx=Load()), args=[Name(id='EX_SKIP', ctx=Load())], keywords=[]))], orelse=[]), Return()], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_object_pairs_hook', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_object_pairs_hook', ctx=Load()), args=[GeneratorExp(elt=Tuple(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_unpack', ctx=Load()), args=[Name(id='EX_CONSTRUCT', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_unpack', ctx=Load()), args=[Name(id='EX_CONSTRUCT', ctx=Load())], keywords=[])], ctx=Load()), generators=[comprehension(target=Name(id='_', ctx=Store()), iter=Call(func=Name(id='xrange', ctx=Load()), args=[Name(id='n', ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], orelse=[Assign(targets=[Name(id='ret', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='_', ctx=Store()), iter=Call(func=Name(id='xrange', ctx=Load()), args=[Name(id='n', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='key', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_unpack', ctx=Load()), args=[Name(id='EX_CONSTRUCT', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='_strict_map_key', ctx=Load()), Compare(left=Call(func=Name(id='type', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[]), ops=[NotIn()], comparators=[Tuple(elts=[Name(id='unicode', ctx=Load()), Name(id='bytes', ctx=Load())], ctx=Load())])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='%s is not allowed for map key'), op=Mod(), right=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='type', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[])], keywords=[]))], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Name(id='PY2', ctx=Load())), Compare(left=Call(func=Name(id='type', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[]), ops=[Is()], comparators=[Name(id='str', ctx=Load())])]), body=[Assign(targets=[Name(id='key', ctx=Store())], value=Call(func=Attribute(value=Name(id='sys', ctx=Load()), attr='intern', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='ret', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_unpack', ctx=Load()), args=[Name(id='EX_CONSTRUCT', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_object_hook', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_object_hook', ctx=Load()), args=[Name(id='ret', ctx=Load())], keywords=[]))], orelse=[])]), Return(value=Name(id='ret', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='execute', ctx=Load()), ops=[Eq()], comparators=[Name(id='EX_SKIP', ctx=Load())]), body=[Return()], orelse=[]), If(test=Compare(left=Name(id='typ', ctx=Load()), ops=[Eq()], comparators=[Name(id='TYPE_RAW', ctx=Load())]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_raw', ctx=Load()), body=[Assign(targets=[Name(id='obj', ctx=Store())], value=Call(func=Name(id='bytes', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='obj', ctx=Store())], value=Call(func=Attribute(value=Name(id='obj', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='utf_8'), Attribute(value=Name(id='self', ctx=Load()), attr='_unicode_errors', ctx=Load())], keywords=[]))]), Return(value=Name(id='obj', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='typ', ctx=Load()), ops=[Eq()], comparators=[Name(id='TYPE_BIN', ctx=Load())]), body=[Return(value=Call(func=Name(id='bytes', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='typ', ctx=Load()), ops=[Eq()], comparators=[Name(id='TYPE_EXT', ctx=Load())]), body=[If(test=Compare(left=Name(id='n', ctx=Load()), ops=[Eq()], comparators=[UnaryOp(op=USub(), operand=Constant(value=1))]), body=[Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Attribute(value=Name(id='Timestamp', ctx=Load()), attr='from_bytes', ctx=Load()), args=[Call(func=Name(id='bytes', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[])], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_timestamp', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='to_unix', ctx=Load()), args=[], keywords=[]))], orelse=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_timestamp', ctx=Load()), ops=[Eq()], comparators=[Constant(value=2)]), body=[Return(value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='to_unix_nano', ctx=Load()), args=[], keywords=[]))], orelse=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_timestamp', ctx=Load()), ops=[Eq()], comparators=[Constant(value=3)]), body=[Return(value=Call(func=Attribute(value=Name(id='ts', ctx=Load()), attr='to_datetime', ctx=Load()), args=[], keywords=[]))], orelse=[Return(value=Name(id='ts', ctx=Load()))])])])], orelse=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_ext_hook', ctx=Load()), args=[Name(id='n', ctx=Load()), Call(func=Name(id='bytes', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[])], keywords=[]))])], orelse=[]), Assert(test=Compare(left=Name(id='typ', ctx=Load()), ops=[Eq()], comparators=[Name(id='TYPE_IMMEDIATE', ctx=Load())])), Return(value=Name(id='obj', ctx=Load()))], decorator_list=[]), FunctionDef(name='__iter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Name(id='self', ctx=Load()))], decorator_list=[]), FunctionDef(name='__next__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_unpack', ctx=Load()), args=[Name(id='EX_CONSTRUCT', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_consume', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='ret', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='OutOfData', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_consume', ctx=Load()), args=[], keywords=[])), Raise(exc=Name(id='StopIteration', ctx=Load()))]), ExceptHandler(type=Name(id='RecursionError', ctx=Load()), body=[Raise(exc=Name(id='StackError', ctx=Load()))])], orelse=[], finalbody=[])], decorator_list=[]), Assign(targets=[Name(id='next', ctx=Store())], value=Name(id='__next__', ctx=Load())), FunctionDef(name='skip', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_unpack', ctx=Load()), args=[Name(id='EX_SKIP', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_consume', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='unpack', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_unpack', ctx=Load()), args=[Name(id='EX_CONSTRUCT', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='RecursionError', ctx=Load()), body=[Raise(exc=Name(id='StackError', ctx=Load()))])], orelse=[], finalbody=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_consume', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='ret', ctx=Load()))], decorator_list=[]), FunctionDef(name='read_array_header', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_unpack', ctx=Load()), args=[Name(id='EX_READ_ARRAY_HEADER', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_consume', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='ret', ctx=Load()))], decorator_list=[]), FunctionDef(name='read_map_header', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_unpack', ctx=Load()), args=[Name(id='EX_READ_MAP_HEADER', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_consume', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='ret', ctx=Load()))], decorator_list=[]), FunctionDef(name='tell', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_stream_offset', ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='Packer', bases=[Name(id='object', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="\n    MessagePack Packer\n\n    Usage::\n\n        packer = Packer()\n        astream.write(packer.pack(a))\n        astream.write(packer.pack(b))\n\n    Packer's constructor has some keyword arguments:\n\n    :param callable default:\n        Convert user type to builtin type that Packer supports.\n        See also simplejson's document.\n\n    :param bool use_single_float:\n        Use single precision float type for float. (default: False)\n\n    :param bool autoreset:\n        Reset buffer after each pack and return its content as `bytes`. (default: True).\n        If set this to false, use `bytes()` to get content and `.reset()` to clear buffer.\n\n    :param bool use_bin_type:\n        Use bin type introduced in msgpack spec 2.0 for bytes.\n        It also enables str8 type for unicode. (default: True)\n\n    :param bool strict_types:\n        If set to true, types will be checked to be exact. Derived classes\n        from serializable types will not be serialized and will be\n        treated as unsupported type and forwarded to default.\n        Additionally tuples will not be serialized as lists.\n        This is useful when trying to implement accurate serialization\n        for python types.\n\n    :param bool datetime:\n        If set to true, datetime with tzinfo is packed into Timestamp type.\n        Note that the tzinfo is stripped in the timestamp.\n        You can get UTC datetime with `timestamp=3` option of the Unpacker.\n        (Python 2 is not supported).\n\n    :param str unicode_errors:\n        The error handler for encoding unicode. (default: 'strict')\n        DO NOT USE THIS!!  This option is kept for very specific usage.\n\n    Example of streaming deserialize from file-like object::\n\n        unpacker = Unpacker(file_like)\n        for o in unpacker:\n            process(o)\n\n    Example of streaming deserialize from socket::\n\n        unpacker = Unpacker()\n        while True:\n            buf = sock.recv(1024**2)\n            if not buf:\n                break\n            unpacker.feed(buf)\n            for o in unpacker:\n                process(o)\n\n    Raises ``ExtraData`` when *packed* contains extra bytes.\n    Raises ``OutOfData`` when *packed* is incomplete.\n    Raises ``FormatError`` when *packed* is not valid msgpack.\n    Raises ``StackError`` when *packed* contains too nested.\n    Other exceptions can be raised during unpacking.\n    ")), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='default'), arg(arg='use_single_float'), arg(arg='autoreset'), arg(arg='use_bin_type'), arg(arg='strict_types'), arg(arg='datetime'), arg(arg='unicode_errors')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=False), Constant(value=True), Constant(value=True), Constant(value=False), Constant(value=False), Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_strict_types', ctx=Store())], value=Name(id='strict_types', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_use_float', ctx=Store())], value=Name(id='use_single_float', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_autoreset', ctx=Store())], value=Name(id='autoreset', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_use_bin_type', ctx=Store())], value=Name(id='use_bin_type', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Store())], value=Call(func=Name(id='StringIO', ctx=Load()), args=[], keywords=[])), If(test=BoolOp(op=And(), values=[Name(id='PY2', ctx=Load()), Name(id='datetime', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='datetime is not supported in Python 2')], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_datetime', ctx=Store())], value=Call(func=Name(id='bool', ctx=Load()), args=[Name(id='datetime', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_unicode_errors', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='unicode_errors', ctx=Load()), Constant(value='strict')])), If(test=Compare(left=Name(id='default', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='callable', ctx=Load()), args=[Name(id='default', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[Constant(value='default must be callable')], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_default', ctx=Store())], value=Name(id='default', ctx=Load()))], decorator_list=[]), FunctionDef(name='_pack', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='obj'), arg(arg='nest_limit'), arg(arg='check'), arg(arg='check_type_strict')], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='DEFAULT_RECURSE_LIMIT', ctx=Load()), Name(id='isinstance', ctx=Load()), Name(id='_check_type_strict', ctx=Load())]), body=[Assign(targets=[Name(id='default_used', ctx=Store())], value=Constant(value=False)), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_strict_types', ctx=Load()), body=[Assign(targets=[Name(id='check', ctx=Store())], value=Name(id='check_type_strict', ctx=Load())), Assign(targets=[Name(id='list_types', ctx=Store())], value=Name(id='list', ctx=Load()))], orelse=[Assign(targets=[Name(id='list_types', ctx=Store())], value=Tuple(elts=[Name(id='list', ctx=Load()), Name(id='tuple', ctx=Load())], ctx=Load()))]), While(test=Constant(value=True), body=[If(test=Compare(left=Name(id='nest_limit', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='recursion limit exceeded')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='obj', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value=b'\xc0')], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='check', ctx=Load()), args=[Name(id='obj', ctx=Load()), Name(id='bool', ctx=Load())], keywords=[]), body=[If(test=Name(id='obj', ctx=Load()), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value=b'\xc3')], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value=b'\xc2')], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='check', ctx=Load()), args=[Name(id='obj', ctx=Load()), Name(id='int_types', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Constant(value=0), ops=[LtE(), Lt()], comparators=[Name(id='obj', ctx=Load()), Constant(value=128)]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Attribute(value=Name(id='struct', ctx=Load()), attr='pack', ctx=Load()), args=[Constant(value='B'), Name(id='obj', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Compare(left=UnaryOp(op=USub(), operand=Constant(value=32)), ops=[LtE(), Lt()], comparators=[Name(id='obj', ctx=Load()), Constant(value=0)]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Attribute(value=Name(id='struct', ctx=Load()), attr='pack', ctx=Load()), args=[Constant(value='b'), Name(id='obj', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Compare(left=Constant(value=128), ops=[LtE(), LtE()], comparators=[Name(id='obj', ctx=Load()), Constant(value=255)]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Attribute(value=Name(id='struct', ctx=Load()), attr='pack', ctx=Load()), args=[Constant(value='BB'), Constant(value=204), Name(id='obj', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Compare(left=UnaryOp(op=USub(), operand=Constant(value=128)), ops=[LtE(), Lt()], comparators=[Name(id='obj', ctx=Load()), Constant(value=0)]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Attribute(value=Name(id='struct', ctx=Load()), attr='pack', ctx=Load()), args=[Constant(value='>Bb'), Constant(value=208), Name(id='obj', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Compare(left=Constant(value=255), ops=[Lt(), LtE()], comparators=[Name(id='obj', ctx=Load()), Constant(value=65535)]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Attribute(value=Name(id='struct', ctx=Load()), attr='pack', ctx=Load()), args=[Constant(value='>BH'), Constant(value=205), Name(id='obj', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Compare(left=UnaryOp(op=USub(), operand=Constant(value=32768)), ops=[LtE(), Lt()], comparators=[Name(id='obj', ctx=Load()), UnaryOp(op=USub(), operand=Constant(value=128))]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Attribute(value=Name(id='struct', ctx=Load()), attr='pack', ctx=Load()), args=[Constant(value='>Bh'), Constant(value=209), Name(id='obj', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Compare(left=Constant(value=65535), ops=[Lt(), LtE()], comparators=[Name(id='obj', ctx=Load()), Constant(value=4294967295)]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Attribute(value=Name(id='struct', ctx=Load()), attr='pack', ctx=Load()), args=[Constant(value='>BI'), Constant(value=206), Name(id='obj', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Compare(left=UnaryOp(op=USub(), operand=Constant(value=2147483648)), ops=[LtE(), Lt()], comparators=[Name(id='obj', ctx=Load()), UnaryOp(op=USub(), operand=Constant(value=32768))]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Attribute(value=Name(id='struct', ctx=Load()), attr='pack', ctx=Load()), args=[Constant(value='>Bi'), Constant(value=210), Name(id='obj', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Compare(left=Constant(value=4294967295), ops=[Lt(), LtE()], comparators=[Name(id='obj', ctx=Load()), Constant(value=18446744073709551615)]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Attribute(value=Name(id='struct', ctx=Load()), attr='pack', ctx=Load()), args=[Constant(value='>BQ'), Constant(value=207), Name(id='obj', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Compare(left=UnaryOp(op=USub(), operand=Constant(value=9223372036854775808)), ops=[LtE(), Lt()], comparators=[Name(id='obj', ctx=Load()), UnaryOp(op=USub(), operand=Constant(value=2147483648))]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Attribute(value=Name(id='struct', ctx=Load()), attr='pack', ctx=Load()), args=[Constant(value='>Bq'), Constant(value=211), Name(id='obj', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Name(id='default_used', ctx=Load())), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_default', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Name(id='obj', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_default', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[])), Assign(targets=[Name(id='default_used', ctx=Store())], value=Constant(value=True)), Continue()], orelse=[]), Raise(exc=Call(func=Name(id='OverflowError', ctx=Load()), args=[Constant(value='Integer value out of range')], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='check', ctx=Load()), args=[Name(id='obj', ctx=Load()), Tuple(elts=[Name(id='bytes', ctx=Load()), Name(id='bytearray', ctx=Load())], ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='n', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='n', ctx=Load()), ops=[GtE()], comparators=[BinOp(left=Constant(value=2), op=Pow(), right=Constant(value=32))]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='%s is too large'), op=Mod(), right=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()))], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_pack_bin_header', ctx=Load()), args=[Name(id='n', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='check', ctx=Load()), args=[Name(id='obj', ctx=Load()), Name(id='unicode', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='obj', ctx=Store())], value=Call(func=Attribute(value=Name(id='obj', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='utf-8'), Attribute(value=Name(id='self', ctx=Load()), attr='_unicode_errors', ctx=Load())], keywords=[])), Assign(targets=[Name(id='n', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='n', ctx=Load()), ops=[GtE()], comparators=[BinOp(left=Constant(value=2), op=Pow(), right=Constant(value=32))]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='String is too large')], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_pack_raw_header', ctx=Load()), args=[Name(id='n', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='check', ctx=Load()), args=[Name(id='obj', ctx=Load()), Name(id='memoryview', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='n', ctx=Store())], value=Attribute(value=Name(id='obj', ctx=Load()), attr='nbytes', ctx=Load())), If(test=Compare(left=Name(id='n', ctx=Load()), ops=[GtE()], comparators=[BinOp(left=Constant(value=2), op=Pow(), right=Constant(value=32))]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Memoryview is too large')], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_pack_bin_header', ctx=Load()), args=[Name(id='n', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='check', ctx=Load()), args=[Name(id='obj', ctx=Load()), Name(id='float', ctx=Load())], keywords=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_use_float', ctx=Load()), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Attribute(value=Name(id='struct', ctx=Load()), attr='pack', ctx=Load()), args=[Constant(value='>Bf'), Constant(value=202), Name(id='obj', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Attribute(value=Name(id='struct', ctx=Load()), attr='pack', ctx=Load()), args=[Constant(value='>Bd'), Constant(value=203), Name(id='obj', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='check', ctx=Load()), args=[Name(id='obj', ctx=Load()), Tuple(elts=[Name(id='ExtType', ctx=Load()), Name(id='Timestamp', ctx=Load())], ctx=Load())], keywords=[]), body=[If(test=Call(func=Name(id='check', ctx=Load()), args=[Name(id='obj', ctx=Load()), Name(id='Timestamp', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='code', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=1))), Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Name(id='obj', ctx=Load()), attr='to_bytes', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Name(id='code', ctx=Store())], value=Attribute(value=Name(id='obj', ctx=Load()), attr='code', ctx=Load())), Assign(targets=[Name(id='data', ctx=Store())], value=Attribute(value=Name(id='obj', ctx=Load()), attr='data', ctx=Load()))]), Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='code', ctx=Load()), Name(id='int', ctx=Load())], keywords=[])), Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='data', ctx=Load()), Name(id='bytes', ctx=Load())], keywords=[])), Assign(targets=[Name(id='L', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='L', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value=b'\xd4')], keywords=[]))], orelse=[If(test=Compare(left=Name(id='L', ctx=Load()), ops=[Eq()], comparators=[Constant(value=2)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value=b'\xd5')], keywords=[]))], orelse=[If(test=Compare(left=Name(id='L', ctx=Load()), ops=[Eq()], comparators=[Constant(value=4)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value=b'\xd6')], keywords=[]))], orelse=[If(test=Compare(left=Name(id='L', ctx=Load()), ops=[Eq()], comparators=[Constant(value=8)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value=b'\xd7')], keywords=[]))], orelse=[If(test=Compare(left=Name(id='L', ctx=Load()), ops=[Eq()], comparators=[Constant(value=16)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value=b'\xd8')], keywords=[]))], orelse=[If(test=Compare(left=Name(id='L', ctx=Load()), ops=[LtE()], comparators=[Constant(value=255)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Attribute(value=Name(id='struct', ctx=Load()), attr='pack', ctx=Load()), args=[Constant(value='>BB'), Constant(value=199), Name(id='L', ctx=Load())], keywords=[])], keywords=[]))], orelse=[If(test=Compare(left=Name(id='L', ctx=Load()), ops=[LtE()], comparators=[Constant(value=65535)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Attribute(value=Name(id='struct', ctx=Load()), attr='pack', ctx=Load()), args=[Constant(value='>BH'), Constant(value=200), Name(id='L', ctx=Load())], keywords=[])], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Attribute(value=Name(id='struct', ctx=Load()), attr='pack', ctx=Load()), args=[Constant(value='>BI'), Constant(value=201), Name(id='L', ctx=Load())], keywords=[])], keywords=[]))])])])])])])]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Attribute(value=Name(id='struct', ctx=Load()), attr='pack', ctx=Load()), args=[Constant(value='b'), Name(id='code', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])), Return()], orelse=[]), If(test=Call(func=Name(id='check', ctx=Load()), args=[Name(id='obj', ctx=Load()), Name(id='list_types', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='n', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_pack_array_header', ctx=Load()), args=[Name(id='n', ctx=Load())], keywords=[])), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='xrange', ctx=Load()), args=[Name(id='n', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_pack', ctx=Load()), args=[Subscript(value=Name(id='obj', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), BinOp(left=Name(id='nest_limit', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))], orelse=[]), Return()], orelse=[]), If(test=Call(func=Name(id='check', ctx=Load()), args=[Name(id='obj', ctx=Load()), Name(id='dict', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_pack_map_pairs', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]), Call(func=Name(id='dict_iteritems', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]), BinOp(left=Name(id='nest_limit', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='_datetime', ctx=Load()), Call(func=Name(id='check', ctx=Load()), args=[Name(id='obj', ctx=Load()), Name(id='_DateTime', ctx=Load())], keywords=[]), Compare(left=Attribute(value=Name(id='obj', ctx=Load()), attr='tzinfo', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Name(id='obj', ctx=Store())], value=Call(func=Attribute(value=Name(id='Timestamp', ctx=Load()), attr='from_datetime', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[])), Assign(targets=[Name(id='default_used', ctx=Store())], value=Constant(value=1)), Continue()], orelse=[]), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Name(id='default_used', ctx=Load())), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_default', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Name(id='obj', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_default', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[])), Assign(targets=[Name(id='default_used', ctx=Store())], value=Constant(value=1)), Continue()], orelse=[]), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='_datetime', ctx=Load()), Call(func=Name(id='check', ctx=Load()), args=[Name(id='obj', ctx=Load()), Name(id='_DateTime', ctx=Load())], keywords=[])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='Cannot serialize %r where tzinfo=None'), op=Mod(), right=Tuple(elts=[Name(id='obj', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[]), Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[BinOp(left=Constant(value='Cannot serialize %r'), op=Mod(), right=Tuple(elts=[Name(id='obj', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='pack', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='obj')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_pack', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Store())], value=Call(func=Name(id='StringIO', ctx=Load()), args=[], keywords=[])), Raise()])], orelse=[], finalbody=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_autoreset', ctx=Load()), body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), attr='getvalue', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Store())], value=Call(func=Name(id='StringIO', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='ret', ctx=Load()))], orelse=[])], decorator_list=[]), FunctionDef(name='pack_map_pairs', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='pairs')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_pack_map_pairs', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='pairs', ctx=Load())], keywords=[]), Name(id='pairs', ctx=Load())], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_autoreset', ctx=Load()), body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), attr='getvalue', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Store())], value=Call(func=Name(id='StringIO', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='ret', ctx=Load()))], orelse=[])], decorator_list=[]), FunctionDef(name='pack_array_header', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='n')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='n', ctx=Load()), ops=[GtE()], comparators=[BinOp(left=Constant(value=2), op=Pow(), right=Constant(value=32))]), body=[Raise(exc=Name(id='ValueError', ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_pack_array_header', ctx=Load()), args=[Name(id='n', ctx=Load())], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_autoreset', ctx=Load()), body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), attr='getvalue', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Store())], value=Call(func=Name(id='StringIO', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='ret', ctx=Load()))], orelse=[])], decorator_list=[]), FunctionDef(name='pack_map_header', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='n')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='n', ctx=Load()), ops=[GtE()], comparators=[BinOp(left=Constant(value=2), op=Pow(), right=Constant(value=32))]), body=[Raise(exc=Name(id='ValueError', ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_pack_map_header', ctx=Load()), args=[Name(id='n', ctx=Load())], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_autoreset', ctx=Load()), body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), attr='getvalue', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Store())], value=Call(func=Name(id='StringIO', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='ret', ctx=Load()))], orelse=[])], decorator_list=[]), FunctionDef(name='pack_ext_type', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='typecode'), arg(arg='data')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='typecode', ctx=Load()), Name(id='int', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[Constant(value='typecode must have int type.')], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Compare(left=Constant(value=0), ops=[LtE(), LtE()], comparators=[Name(id='typecode', ctx=Load()), Constant(value=127)])), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='typecode should be 0-127')], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='data', ctx=Load()), Name(id='bytes', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[Constant(value='data must have bytes type')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='L', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='L', ctx=Load()), ops=[Gt()], comparators=[Constant(value=4294967295)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Too large data')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='L', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value=b'\xd4')], keywords=[]))], orelse=[If(test=Compare(left=Name(id='L', ctx=Load()), ops=[Eq()], comparators=[Constant(value=2)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value=b'\xd5')], keywords=[]))], orelse=[If(test=Compare(left=Name(id='L', ctx=Load()), ops=[Eq()], comparators=[Constant(value=4)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value=b'\xd6')], keywords=[]))], orelse=[If(test=Compare(left=Name(id='L', ctx=Load()), ops=[Eq()], comparators=[Constant(value=8)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value=b'\xd7')], keywords=[]))], orelse=[If(test=Compare(left=Name(id='L', ctx=Load()), ops=[Eq()], comparators=[Constant(value=16)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value=b'\xd8')], keywords=[]))], orelse=[If(test=Compare(left=Name(id='L', ctx=Load()), ops=[LtE()], comparators=[Constant(value=255)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), attr='write', ctx=Load()), args=[BinOp(left=Constant(value=b'\xc7'), op=Add(), right=Call(func=Attribute(value=Name(id='struct', ctx=Load()), attr='pack', ctx=Load()), args=[Constant(value='B'), Name(id='L', ctx=Load())], keywords=[]))], keywords=[]))], orelse=[If(test=Compare(left=Name(id='L', ctx=Load()), ops=[LtE()], comparators=[Constant(value=65535)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), attr='write', ctx=Load()), args=[BinOp(left=Constant(value=b'\xc8'), op=Add(), right=Call(func=Attribute(value=Name(id='struct', ctx=Load()), attr='pack', ctx=Load()), args=[Constant(value='>H'), Name(id='L', ctx=Load())], keywords=[]))], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), attr='write', ctx=Load()), args=[BinOp(left=Constant(value=b'\xc9'), op=Add(), right=Call(func=Attribute(value=Name(id='struct', ctx=Load()), attr='pack', ctx=Load()), args=[Constant(value='>I'), Name(id='L', ctx=Load())], keywords=[]))], keywords=[]))])])])])])])]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Attribute(value=Name(id='struct', ctx=Load()), attr='pack', ctx=Load()), args=[Constant(value='B'), Name(id='typecode', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_pack_array_header', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='n')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='n', ctx=Load()), ops=[LtE()], comparators=[Constant(value=15)]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Attribute(value=Name(id='struct', ctx=Load()), attr='pack', ctx=Load()), args=[Constant(value='B'), BinOp(left=Constant(value=144), op=Add(), right=Name(id='n', ctx=Load()))], keywords=[])], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='n', ctx=Load()), ops=[LtE()], comparators=[Constant(value=65535)]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Attribute(value=Name(id='struct', ctx=Load()), attr='pack', ctx=Load()), args=[Constant(value='>BH'), Constant(value=220), Name(id='n', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='n', ctx=Load()), ops=[LtE()], comparators=[Constant(value=4294967295)]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Attribute(value=Name(id='struct', ctx=Load()), attr='pack', ctx=Load()), args=[Constant(value='>BI'), Constant(value=221), Name(id='n', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Array is too large')], keywords=[]))], decorator_list=[]), FunctionDef(name='_pack_map_header', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='n')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='n', ctx=Load()), ops=[LtE()], comparators=[Constant(value=15)]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Attribute(value=Name(id='struct', ctx=Load()), attr='pack', ctx=Load()), args=[Constant(value='B'), BinOp(left=Constant(value=128), op=Add(), right=Name(id='n', ctx=Load()))], keywords=[])], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='n', ctx=Load()), ops=[LtE()], comparators=[Constant(value=65535)]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Attribute(value=Name(id='struct', ctx=Load()), attr='pack', ctx=Load()), args=[Constant(value='>BH'), Constant(value=222), Name(id='n', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='n', ctx=Load()), ops=[LtE()], comparators=[Constant(value=4294967295)]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Attribute(value=Name(id='struct', ctx=Load()), attr='pack', ctx=Load()), args=[Constant(value='>BI'), Constant(value=223), Name(id='n', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Dict is too large')], keywords=[]))], decorator_list=[]), FunctionDef(name='_pack_map_pairs', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='n'), arg(arg='pairs'), arg(arg='nest_limit')], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='DEFAULT_RECURSE_LIMIT', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_pack_map_header', ctx=Load()), args=[Name(id='n', ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Name(id='pairs', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_pack', ctx=Load()), args=[Name(id='k', ctx=Load()), BinOp(left=Name(id='nest_limit', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_pack', ctx=Load()), args=[Name(id='v', ctx=Load()), BinOp(left=Name(id='nest_limit', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='_pack_raw_header', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='n')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='n', ctx=Load()), ops=[LtE()], comparators=[Constant(value=31)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Attribute(value=Name(id='struct', ctx=Load()), attr='pack', ctx=Load()), args=[Constant(value='B'), BinOp(left=Constant(value=160), op=Add(), right=Name(id='n', ctx=Load()))], keywords=[])], keywords=[]))], orelse=[If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='_use_bin_type', ctx=Load()), Compare(left=Name(id='n', ctx=Load()), ops=[LtE()], comparators=[Constant(value=255)])]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Attribute(value=Name(id='struct', ctx=Load()), attr='pack', ctx=Load()), args=[Constant(value='>BB'), Constant(value=217), Name(id='n', ctx=Load())], keywords=[])], keywords=[]))], orelse=[If(test=Compare(left=Name(id='n', ctx=Load()), ops=[LtE()], comparators=[Constant(value=65535)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Attribute(value=Name(id='struct', ctx=Load()), attr='pack', ctx=Load()), args=[Constant(value='>BH'), Constant(value=218), Name(id='n', ctx=Load())], keywords=[])], keywords=[]))], orelse=[If(test=Compare(left=Name(id='n', ctx=Load()), ops=[LtE()], comparators=[Constant(value=4294967295)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Attribute(value=Name(id='struct', ctx=Load()), attr='pack', ctx=Load()), args=[Constant(value='>BI'), Constant(value=219), Name(id='n', ctx=Load())], keywords=[])], keywords=[]))], orelse=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Raw is too large')], keywords=[]))])])])])], decorator_list=[]), FunctionDef(name='_pack_bin_header', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='n')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='_use_bin_type', ctx=Load())), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_pack_raw_header', ctx=Load()), args=[Name(id='n', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='n', ctx=Load()), ops=[LtE()], comparators=[Constant(value=255)]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Attribute(value=Name(id='struct', ctx=Load()), attr='pack', ctx=Load()), args=[Constant(value='>BB'), Constant(value=196), Name(id='n', ctx=Load())], keywords=[])], keywords=[]))], orelse=[If(test=Compare(left=Name(id='n', ctx=Load()), ops=[LtE()], comparators=[Constant(value=65535)]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Attribute(value=Name(id='struct', ctx=Load()), attr='pack', ctx=Load()), args=[Constant(value='>BH'), Constant(value=197), Name(id='n', ctx=Load())], keywords=[])], keywords=[]))], orelse=[If(test=Compare(left=Name(id='n', ctx=Load()), ops=[LtE()], comparators=[Constant(value=4294967295)]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Attribute(value=Name(id='struct', ctx=Load()), attr='pack', ctx=Load()), args=[Constant(value='>BI'), Constant(value=198), Name(id='n', ctx=Load())], keywords=[])], keywords=[]))], orelse=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Bin is too large')], keywords=[]))])])])])], decorator_list=[]), FunctionDef(name='bytes', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return internal buffer contents as bytes object')), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), attr='getvalue', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='reset', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Reset internal buffer.\n\n        This method is useful only when autoreset=False.\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Store())], value=Call(func=Name(id='StringIO', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='getbuffer', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return view of internal buffer.')), If(test=BoolOp(op=Or(), values=[Name(id='USING_STRINGBUILDER', ctx=Load()), Name(id='PY2', ctx=Load())]), body=[Return(value=Call(func=Name(id='memoryview', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='bytes', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_buffer', ctx=Load()), attr='getbuffer', ctx=Load()), args=[], keywords=[]))])], decorator_list=[])], decorator_list=[])], type_ignores=[])