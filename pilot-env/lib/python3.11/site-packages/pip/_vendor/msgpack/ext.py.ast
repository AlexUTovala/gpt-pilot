Module(body=[ImportFrom(module='collections', names=[alias(name='namedtuple')], level=0), Import(names=[alias(name='datetime')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='struct')]), Assign(targets=[Name(id='PY2', ctx=Store())], value=Compare(left=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Constant(value=2)])), If(test=Name(id='PY2', ctx=Load()), body=[Assign(targets=[Name(id='int_types', ctx=Store())], value=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='long', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='_utc', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='int_types', ctx=Store())], value=Name(id='int', ctx=Load())), Try(body=[Assign(targets=[Name(id='_utc', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='timezone', ctx=Load()), attr='utc', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Assign(targets=[Name(id='_utc', ctx=Store())], value=Call(func=Attribute(value=Name(id='datetime', ctx=Load()), attr='timezone', ctx=Load()), args=[Call(func=Attribute(value=Name(id='datetime', ctx=Load()), attr='timedelta', ctx=Load()), args=[Constant(value=0)], keywords=[])], keywords=[]))])], orelse=[], finalbody=[])]), ClassDef(name='ExtType', bases=[Call(func=Name(id='namedtuple', ctx=Load()), args=[Constant(value='ExtType'), Constant(value='code data')], keywords=[])], keywords=[], body=[Expr(value=Constant(value='ExtType represents ext type in msgpack.')), FunctionDef(name='__new__', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='code'), arg(arg='data')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='code', ctx=Load()), Name(id='int', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[Constant(value='code must be int')], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='data', ctx=Load()), Name(id='bytes', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[Constant(value='data must be bytes')], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Compare(left=Constant(value=0), ops=[LtE(), LtE()], comparators=[Name(id='code', ctx=Load()), Constant(value=127)])), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='code must be 0~127')], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[Name(id='ExtType', ctx=Load()), Name(id='cls', ctx=Load())], keywords=[]), attr='__new__', ctx=Load()), args=[Name(id='cls', ctx=Load()), Name(id='code', ctx=Load()), Name(id='data', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='Timestamp', bases=[Name(id='object', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Timestamp represents the Timestamp extension type in msgpack.\n\n    When built with Cython, msgpack uses C methods to pack and unpack `Timestamp`. When using pure-Python\n    msgpack, :func:`to_bytes` and :func:`from_bytes` are used to pack and unpack `Timestamp`.\n\n    This class is immutable: Do not override seconds and nanoseconds.\n    ')), Assign(targets=[Name(id='__slots__', ctx=Store())], value=List(elts=[Constant(value='seconds'), Constant(value='nanoseconds')], ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='seconds'), arg(arg='nanoseconds')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[Expr(value=Constant(value='Initialize a Timestamp object.\n\n        :param int seconds:\n            Number of seconds since the UNIX epoch (00:00:00 UTC Jan 1 1970, minus leap seconds).\n            May be negative.\n\n        :param int nanoseconds:\n            Number of nanoseconds to add to `seconds` to get fractional time.\n            Maximum is 999_999_999.  Default is 0.\n\n        Note: Negative times (before the UNIX epoch) are represented as negative seconds + positive ns.\n        ')), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='seconds', ctx=Load()), Name(id='int_types', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[Constant(value='seconds must be an integer')], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='nanoseconds', ctx=Load()), Name(id='int_types', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[Constant(value='nanoseconds must be an integer')], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Compare(left=Constant(value=0), ops=[LtE(), Lt()], comparators=[Name(id='nanoseconds', ctx=Load()), BinOp(left=Constant(value=10), op=Pow(), right=Constant(value=9))])), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='nanoseconds must be a non-negative integer less than 999999999.')], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='seconds', ctx=Store())], value=Name(id='seconds', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='nanoseconds', ctx=Store())], value=Name(id='nanoseconds', ctx=Load()))], decorator_list=[]), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='String representation of Timestamp.')), Return(value=Call(func=Attribute(value=Constant(value='Timestamp(seconds={0}, nanoseconds={1})'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='seconds', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='nanoseconds', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='__eq__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check for equality with another Timestamp object')), If(test=Compare(left=Call(func=Name(id='type', ctx=Load()), args=[Name(id='other', ctx=Load())], keywords=[]), ops=[Is()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load())]), body=[Return(value=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='seconds', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='other', ctx=Load()), attr='seconds', ctx=Load())]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='nanoseconds', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='other', ctx=Load()), attr='nanoseconds', ctx=Load())])]))], orelse=[]), Return(value=Constant(value=False))], decorator_list=[]), FunctionDef(name='__ne__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='not-equals method (see :func:`__eq__()`)')), Return(value=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='__eq__', ctx=Load()), args=[Name(id='other', ctx=Load())], keywords=[])))], decorator_list=[]), FunctionDef(name='__hash__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='hash', ctx=Load()), args=[Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='seconds', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='nanoseconds', ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='from_bytes', args=arguments(posonlyargs=[], args=[arg(arg='b')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Unpack bytes into a `Timestamp` object.\n\n        Used for pure-Python msgpack unpacking.\n\n        :param b: Payload from msgpack ext message with code -1\n        :type b: bytes\n\n        :returns: Timestamp object unpacked from msgpack ext payload\n        :rtype: Timestamp\n        ')), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='b', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=4)]), body=[Assign(targets=[Name(id='seconds', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='struct', ctx=Load()), attr='unpack', ctx=Load()), args=[Constant(value='!L'), Name(id='b', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='nanoseconds', ctx=Store())], value=Constant(value=0))], orelse=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='b', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=8)]), body=[Assign(targets=[Name(id='data64', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='struct', ctx=Load()), attr='unpack', ctx=Load()), args=[Constant(value='!Q'), Name(id='b', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='seconds', ctx=Store())], value=BinOp(left=Name(id='data64', ctx=Load()), op=BitAnd(), right=Constant(value=17179869183))), Assign(targets=[Name(id='nanoseconds', ctx=Store())], value=BinOp(left=Name(id='data64', ctx=Load()), op=RShift(), right=Constant(value=34)))], orelse=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='b', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=12)]), body=[Assign(targets=[Tuple(elts=[Name(id='nanoseconds', ctx=Store()), Name(id='seconds', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='struct', ctx=Load()), attr='unpack', ctx=Load()), args=[Constant(value='!Iq'), Name(id='b', ctx=Load())], keywords=[]))], orelse=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Timestamp type can only be created from 32, 64, or 96-bit byte objects')], keywords=[]))])])]), Return(value=Call(func=Name(id='Timestamp', ctx=Load()), args=[Name(id='seconds', ctx=Load()), Name(id='nanoseconds', ctx=Load())], keywords=[]))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='to_bytes', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Pack this Timestamp object into bytes.\n\n        Used for pure-Python msgpack packing.\n\n        :returns data: Payload for EXT message with code -1 (timestamp type)\n        :rtype: bytes\n        ')), If(test=Compare(left=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='seconds', ctx=Load()), op=RShift(), right=Constant(value=34)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='data64', ctx=Store())], value=BinOp(left=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='nanoseconds', ctx=Load()), op=LShift(), right=Constant(value=34)), op=BitOr(), right=Attribute(value=Name(id='self', ctx=Load()), attr='seconds', ctx=Load()))), If(test=Compare(left=BinOp(left=Name(id='data64', ctx=Load()), op=BitAnd(), right=Constant(value=18446744069414584320)), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Name(id='struct', ctx=Load()), attr='pack', ctx=Load()), args=[Constant(value='!L'), Name(id='data64', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Name(id='struct', ctx=Load()), attr='pack', ctx=Load()), args=[Constant(value='!Q'), Name(id='data64', ctx=Load())], keywords=[]))])], orelse=[Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Name(id='struct', ctx=Load()), attr='pack', ctx=Load()), args=[Constant(value='!Iq'), Attribute(value=Name(id='self', ctx=Load()), attr='nanoseconds', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='seconds', ctx=Load())], keywords=[]))]), Return(value=Name(id='data', ctx=Load()))], decorator_list=[]), FunctionDef(name='from_unix', args=arguments(posonlyargs=[], args=[arg(arg='unix_sec')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Create a Timestamp from posix timestamp in seconds.\n\n        :param unix_float: Posix timestamp in seconds.\n        :type unix_float: int or float.\n        ')), Assign(targets=[Name(id='seconds', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Name(id='unix_sec', ctx=Load()), op=FloorDiv(), right=Constant(value=1))], keywords=[])), Assign(targets=[Name(id='nanoseconds', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='unix_sec', ctx=Load()), op=Mod(), right=Constant(value=1)), op=Mult(), right=BinOp(left=Constant(value=10), op=Pow(), right=Constant(value=9)))], keywords=[])), Return(value=Call(func=Name(id='Timestamp', ctx=Load()), args=[Name(id='seconds', ctx=Load()), Name(id='nanoseconds', ctx=Load())], keywords=[]))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='to_unix', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get the timestamp as a floating-point value.\n\n        :returns: posix timestamp\n        :rtype: float\n        ')), Return(value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='seconds', ctx=Load()), op=Add(), right=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='nanoseconds', ctx=Load()), op=Div(), right=Constant(value=1000000000.0))))], decorator_list=[]), FunctionDef(name='from_unix_nano', args=arguments(posonlyargs=[], args=[arg(arg='unix_ns')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Create a Timestamp from posix timestamp in nanoseconds.\n\n        :param int unix_ns: Posix timestamp in nanoseconds.\n        :rtype: Timestamp\n        ')), Return(value=Call(func=Name(id='Timestamp', ctx=Load()), args=[Starred(value=Call(func=Name(id='divmod', ctx=Load()), args=[Name(id='unix_ns', ctx=Load()), BinOp(left=Constant(value=10), op=Pow(), right=Constant(value=9))], keywords=[]), ctx=Load())], keywords=[]))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='to_unix_nano', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get the timestamp as a unixtime in nanoseconds.\n\n        :returns: posix timestamp in nanoseconds\n        :rtype: int\n        ')), Return(value=BinOp(left=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='seconds', ctx=Load()), op=Mult(), right=BinOp(left=Constant(value=10), op=Pow(), right=Constant(value=9))), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='nanoseconds', ctx=Load())))], decorator_list=[]), FunctionDef(name='to_datetime', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get the timestamp as a UTC datetime.\n\n        Python 2 is not supported.\n\n        :rtype: datetime.\n        ')), Return(value=BinOp(left=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='fromtimestamp', ctx=Load()), args=[Constant(value=0), Name(id='_utc', ctx=Load())], keywords=[]), op=Add(), right=Call(func=Attribute(value=Name(id='datetime', ctx=Load()), attr='timedelta', ctx=Load()), args=[], keywords=[keyword(arg='seconds', value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='to_unix', ctx=Load()), args=[], keywords=[]))])))], decorator_list=[]), FunctionDef(name='from_datetime', args=arguments(posonlyargs=[], args=[arg(arg='dt')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Create a Timestamp from datetime with tzinfo.\n\n        Python 2 is not supported.\n\n        :rtype: Timestamp\n        ')), Return(value=Call(func=Attribute(value=Name(id='Timestamp', ctx=Load()), attr='from_unix', ctx=Load()), args=[Call(func=Attribute(value=Name(id='dt', ctx=Load()), attr='timestamp', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[Name(id='staticmethod', ctx=Load())])], decorator_list=[])], type_ignores=[])