Module(body=[ClassDef(name='UnpackException', bases=[Name(id='Exception', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Base class for some exceptions raised while unpacking.\n\n    NOTE: unpack may raise exception other than subclass of\n    UnpackException.  If you want to catch all error, catch\n    Exception instead.\n    '))], decorator_list=[]), ClassDef(name='BufferFull', bases=[Name(id='UnpackException', ctx=Load())], keywords=[], body=[Pass()], decorator_list=[]), ClassDef(name='OutOfData', bases=[Name(id='UnpackException', ctx=Load())], keywords=[], body=[Pass()], decorator_list=[]), ClassDef(name='FormatError', bases=[Name(id='ValueError', ctx=Load()), Name(id='UnpackException', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Invalid msgpack format'))], decorator_list=[]), ClassDef(name='StackError', bases=[Name(id='ValueError', ctx=Load()), Name(id='UnpackException', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Too nested'))], decorator_list=[]), Assign(targets=[Name(id='UnpackValueError', ctx=Store())], value=Name(id='ValueError', ctx=Load())), ClassDef(name='ExtraData', bases=[Name(id='UnpackValueError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='ExtraData is raised when there is trailing data.\n\n    This exception is raised while only one-shot (not streaming)\n    unpack.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='unpacked'), arg(arg='extra')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='unpacked', ctx=Store())], value=Name(id='unpacked', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='extra', ctx=Store())], value=Name(id='extra', ctx=Load()))], decorator_list=[]), FunctionDef(name='__str__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value='unpack(b) received extra data.'))], decorator_list=[])], decorator_list=[]), Assign(targets=[Name(id='PackException', ctx=Store())], value=Name(id='Exception', ctx=Load())), Assign(targets=[Name(id='PackValueError', ctx=Store())], value=Name(id='ValueError', ctx=Load())), Assign(targets=[Name(id='PackOverflowError', ctx=Store())], value=Name(id='OverflowError', ctx=Load()))], type_ignores=[])