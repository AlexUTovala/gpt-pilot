Module(body=[Expr(value=Constant(value='\n    pygments.modeline\n    ~~~~~~~~~~~~~~~~~\n\n    A simple modeline parser (based on pymodeline).\n\n    :copyright: Copyright 2006-2023 by the Pygments team, see AUTHORS.\n    :license: BSD, see LICENSE for details.\n')), Import(names=[alias(name='re')]), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='get_filetype_from_buffer')], ctx=Load())), Assign(targets=[Name(id='modeline_re', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='\n    (?: vi | vim | ex ) (?: [<=>]? \\d* )? :\n    .* (?: ft | filetype | syn | syntax ) = ( [^:\\s]+ )\n'), Attribute(value=Name(id='re', ctx=Load()), attr='VERBOSE', ctx=Load())], keywords=[])), FunctionDef(name='get_filetype_from_line', args=arguments(posonlyargs=[], args=[arg(arg='l')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='m', ctx=Store())], value=Call(func=Attribute(value=Name(id='modeline_re', ctx=Load()), attr='search', ctx=Load()), args=[Name(id='l', ctx=Load())], keywords=[])), If(test=Name(id='m', ctx=Load()), body=[Return(value=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value=1)], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='get_filetype_from_buffer', args=arguments(posonlyargs=[], args=[arg(arg='buf'), arg(arg='max_lines')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=5)]), body=[Expr(value=Constant(value='\n    Scan the buffer for modelines and return filetype if one is found.\n    ')), Assign(targets=[Name(id='lines', ctx=Store())], value=Call(func=Attribute(value=Name(id='buf', ctx=Load()), attr='splitlines', ctx=Load()), args=[], keywords=[])), For(target=Name(id='l', ctx=Store()), iter=Subscript(value=Name(id='lines', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Constant(value=1)), upper=BinOp(left=UnaryOp(op=USub(), operand=Name(id='max_lines', ctx=Load())), op=Sub(), right=Constant(value=1)), step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Name(id='get_filetype_from_line', ctx=Load()), args=[Name(id='l', ctx=Load())], keywords=[])), If(test=Name(id='ret', ctx=Load()), body=[Return(value=Name(id='ret', ctx=Load()))], orelse=[])], orelse=[]), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='max_lines', ctx=Load()), UnaryOp(op=USub(), operand=Constant(value=1)), UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]), body=[If(test=Compare(left=Name(id='i', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='lines', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Name(id='get_filetype_from_line', ctx=Load()), args=[Subscript(value=Name(id='lines', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())], keywords=[])), If(test=Name(id='ret', ctx=Load()), body=[Return(value=Name(id='ret', ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Return(value=Constant(value=None))], decorator_list=[])], type_ignores=[])