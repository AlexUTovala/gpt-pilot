Module(body=[Expr(value=Constant(value='\n    pygments.styles\n    ~~~~~~~~~~~~~~~\n\n    Contains built-in styles.\n\n    :copyright: Copyright 2006-2023 by the Pygments team, see AUTHORS.\n    :license: BSD, see LICENSE for details.\n')), ImportFrom(module='pip._vendor.pygments.plugin', names=[alias(name='find_plugin_styles')], level=0), ImportFrom(module='pip._vendor.pygments.util', names=[alias(name='ClassNotFound')], level=0), Assign(targets=[Name(id='STYLE_MAP', ctx=Store())], value=Dict(keys=[Constant(value='default'), Constant(value='emacs'), Constant(value='friendly'), Constant(value='friendly_grayscale'), Constant(value='colorful'), Constant(value='autumn'), Constant(value='murphy'), Constant(value='manni'), Constant(value='material'), Constant(value='monokai'), Constant(value='perldoc'), Constant(value='pastie'), Constant(value='borland'), Constant(value='trac'), Constant(value='native'), Constant(value='fruity'), Constant(value='bw'), Constant(value='vim'), Constant(value='vs'), Constant(value='tango'), Constant(value='rrt'), Constant(value='xcode'), Constant(value='igor'), Constant(value='paraiso-light'), Constant(value='paraiso-dark'), Constant(value='lovelace'), Constant(value='algol'), Constant(value='algol_nu'), Constant(value='arduino'), Constant(value='rainbow_dash'), Constant(value='abap'), Constant(value='solarized-dark'), Constant(value='solarized-light'), Constant(value='sas'), Constant(value='staroffice'), Constant(value='stata'), Constant(value='stata-light'), Constant(value='stata-dark'), Constant(value='inkpot'), Constant(value='zenburn'), Constant(value='gruvbox-dark'), Constant(value='gruvbox-light'), Constant(value='dracula'), Constant(value='one-dark'), Constant(value='lilypond'), Constant(value='nord'), Constant(value='nord-darker'), Constant(value='github-dark')], values=[Constant(value='default::DefaultStyle'), Constant(value='emacs::EmacsStyle'), Constant(value='friendly::FriendlyStyle'), Constant(value='friendly_grayscale::FriendlyGrayscaleStyle'), Constant(value='colorful::ColorfulStyle'), Constant(value='autumn::AutumnStyle'), Constant(value='murphy::MurphyStyle'), Constant(value='manni::ManniStyle'), Constant(value='material::MaterialStyle'), Constant(value='monokai::MonokaiStyle'), Constant(value='perldoc::PerldocStyle'), Constant(value='pastie::PastieStyle'), Constant(value='borland::BorlandStyle'), Constant(value='trac::TracStyle'), Constant(value='native::NativeStyle'), Constant(value='fruity::FruityStyle'), Constant(value='bw::BlackWhiteStyle'), Constant(value='vim::VimStyle'), Constant(value='vs::VisualStudioStyle'), Constant(value='tango::TangoStyle'), Constant(value='rrt::RrtStyle'), Constant(value='xcode::XcodeStyle'), Constant(value='igor::IgorStyle'), Constant(value='paraiso_light::ParaisoLightStyle'), Constant(value='paraiso_dark::ParaisoDarkStyle'), Constant(value='lovelace::LovelaceStyle'), Constant(value='algol::AlgolStyle'), Constant(value='algol_nu::Algol_NuStyle'), Constant(value='arduino::ArduinoStyle'), Constant(value='rainbow_dash::RainbowDashStyle'), Constant(value='abap::AbapStyle'), Constant(value='solarized::SolarizedDarkStyle'), Constant(value='solarized::SolarizedLightStyle'), Constant(value='sas::SasStyle'), Constant(value='staroffice::StarofficeStyle'), Constant(value='stata_light::StataLightStyle'), Constant(value='stata_light::StataLightStyle'), Constant(value='stata_dark::StataDarkStyle'), Constant(value='inkpot::InkPotStyle'), Constant(value='zenburn::ZenburnStyle'), Constant(value='gruvbox::GruvboxDarkStyle'), Constant(value='gruvbox::GruvboxLightStyle'), Constant(value='dracula::DraculaStyle'), Constant(value='onedark::OneDarkStyle'), Constant(value='lilypond::LilyPondStyle'), Constant(value='nord::NordStyle'), Constant(value='nord::NordDarkerStyle'), Constant(value='gh_dark::GhDarkStyle')])), FunctionDef(name='get_style_by_name', args=arguments(posonlyargs=[], args=[arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Return a style class by its short name. The names of the builtin styles\n    are listed in :data:`pygments.styles.STYLE_MAP`.\n\n    Will raise :exc:`pygments.util.ClassNotFound` if no style of that name is\n    found.\n    ')), If(test=Compare(left=Name(id='name', ctx=Load()), ops=[In()], comparators=[Name(id='STYLE_MAP', ctx=Load())]), body=[Assign(targets=[Tuple(elts=[Name(id='mod', ctx=Store()), Name(id='cls', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='STYLE_MAP', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='::')], keywords=[])), Assign(targets=[Name(id='builtin', ctx=Store())], value=Constant(value='yes'))], orelse=[For(target=Tuple(elts=[Name(id='found_name', ctx=Store()), Name(id='style', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='find_plugin_styles', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Name(id='name', ctx=Load()), ops=[Eq()], comparators=[Name(id='found_name', ctx=Load())]), body=[Return(value=Name(id='style', ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Name(id='builtin', ctx=Store())], value=Constant(value='')), Assign(targets=[Name(id='mod', ctx=Store())], value=Name(id='name', ctx=Load())), Assign(targets=[Name(id='cls', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='title', ctx=Load()), args=[], keywords=[]), op=Add(), right=Constant(value='Style')))]), Try(body=[Assign(targets=[Name(id='mod', ctx=Store())], value=Call(func=Name(id='__import__', ctx=Load()), args=[BinOp(left=Constant(value='pygments.styles.'), op=Add(), right=Name(id='mod', ctx=Load())), Constant(value=None), Constant(value=None), List(elts=[Name(id='cls', ctx=Load())], ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='ClassNotFound', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=Constant(value='Could not find style module %r'), op=Mod(), right=Name(id='mod', ctx=Load())), op=Add(), right=BoolOp(op=And(), values=[Name(id='builtin', ctx=Load()), Constant(value=', though it should be builtin')])), op=Add(), right=Constant(value='.'))], keywords=[]))])], orelse=[], finalbody=[]), Try(body=[Return(value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='mod', ctx=Load()), Name(id='cls', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='ClassNotFound', ctx=Load()), args=[BinOp(left=Constant(value='Could not find style class %r in style module.'), op=Mod(), right=Name(id='cls', ctx=Load()))], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='get_all_styles', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return a generator for all styles by name, both builtin and plugin.')), Expr(value=YieldFrom(value=Name(id='STYLE_MAP', ctx=Load()))), For(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='find_plugin_styles', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Yield(value=Name(id='name', ctx=Load())))], orelse=[])], decorator_list=[])], type_ignores=[])