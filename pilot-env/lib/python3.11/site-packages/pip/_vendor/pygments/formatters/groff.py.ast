Module(body=[Expr(value=Constant(value='\n    pygments.formatters.groff\n    ~~~~~~~~~~~~~~~~~~~~~~~~~\n\n    Formatter for groff output.\n\n    :copyright: Copyright 2006-2023 by the Pygments team, see AUTHORS.\n    :license: BSD, see LICENSE for details.\n')), Import(names=[alias(name='math')]), ImportFrom(module='pip._vendor.pygments.formatter', names=[alias(name='Formatter')], level=0), ImportFrom(module='pip._vendor.pygments.util', names=[alias(name='get_bool_opt'), alias(name='get_int_opt')], level=0), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='GroffFormatter')], ctx=Load())), ClassDef(name='GroffFormatter', bases=[Name(id='Formatter', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="\n    Format tokens with groff escapes to change their color and font style.\n\n    .. versionadded:: 2.11\n\n    Additional options accepted:\n\n    `style`\n        The style to use, can be a string or a Style subclass (default:\n        ``'default'``).\n\n    `monospaced`\n        If set to true, monospace font will be used (default: ``true``).\n\n    `linenos`\n        If set to true, print the line numbers (default: ``false``).\n\n    `wrap`\n        Wrap lines to the specified number of characters. Disabled if set to 0\n        (default: ``0``).\n    ")), Assign(targets=[Name(id='name', ctx=Store())], value=Constant(value='groff')), Assign(targets=[Name(id='aliases', ctx=Store())], value=List(elts=[Constant(value='groff'), Constant(value='troff'), Constant(value='roff')], ctx=Load())), Assign(targets=[Name(id='filenames', ctx=Store())], value=List(elts=[], ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='options'), defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='Formatter', ctx=Load()), attr='__init__', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[keyword(value=Name(id='options', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='monospaced', ctx=Store())], value=Call(func=Name(id='get_bool_opt', ctx=Load()), args=[Name(id='options', ctx=Load()), Constant(value='monospaced'), Constant(value=True)], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='linenos', ctx=Store())], value=Call(func=Name(id='get_bool_opt', ctx=Load()), args=[Name(id='options', ctx=Load()), Constant(value='linenos'), Constant(value=False)], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_lineno', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='wrap', ctx=Store())], value=Call(func=Name(id='get_int_opt', ctx=Load()), args=[Name(id='options', ctx=Load()), Constant(value='wrap'), Constant(value=0)], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_linelen', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='styles', ctx=Store())], value=Dict(keys=[], values=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_make_styles', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='_make_styles', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='regular', ctx=Store())], value=IfExp(test=Attribute(value=Name(id='self', ctx=Load()), attr='monospaced', ctx=Load()), body=Constant(value='\\f[CR]'), orelse=Constant(value='\\f[R]'))), Assign(targets=[Name(id='bold', ctx=Store())], value=IfExp(test=Attribute(value=Name(id='self', ctx=Load()), attr='monospaced', ctx=Load()), body=Constant(value='\\f[CB]'), orelse=Constant(value='\\f[B]'))), Assign(targets=[Name(id='italic', ctx=Store())], value=IfExp(test=Attribute(value=Name(id='self', ctx=Load()), attr='monospaced', ctx=Load()), body=Constant(value='\\f[CI]'), orelse=Constant(value='\\f[I]'))), For(target=Tuple(elts=[Name(id='ttype', ctx=Store()), Name(id='ndef', ctx=Store())], ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load()), body=[Assign(targets=[Name(id='start', ctx=Store()), Name(id='end', ctx=Store())], value=Constant(value='')), If(test=Subscript(value=Name(id='ndef', ctx=Load()), slice=Constant(value='color'), ctx=Load()), body=[AugAssign(target=Name(id='start', ctx=Store()), op=Add(), value=BinOp(left=Constant(value='\\m[%s]'), op=Mod(), right=Subscript(value=Name(id='ndef', ctx=Load()), slice=Constant(value='color'), ctx=Load()))), Assign(targets=[Name(id='end', ctx=Store())], value=BinOp(left=Constant(value='\\m[]'), op=Add(), right=Name(id='end', ctx=Load())))], orelse=[]), If(test=Subscript(value=Name(id='ndef', ctx=Load()), slice=Constant(value='bold'), ctx=Load()), body=[AugAssign(target=Name(id='start', ctx=Store()), op=Add(), value=Name(id='bold', ctx=Load())), Assign(targets=[Name(id='end', ctx=Store())], value=BinOp(left=Name(id='regular', ctx=Load()), op=Add(), right=Name(id='end', ctx=Load())))], orelse=[]), If(test=Subscript(value=Name(id='ndef', ctx=Load()), slice=Constant(value='italic'), ctx=Load()), body=[AugAssign(target=Name(id='start', ctx=Store()), op=Add(), value=Name(id='italic', ctx=Load())), Assign(targets=[Name(id='end', ctx=Store())], value=BinOp(left=Name(id='regular', ctx=Load()), op=Add(), right=Name(id='end', ctx=Load())))], orelse=[]), If(test=Subscript(value=Name(id='ndef', ctx=Load()), slice=Constant(value='bgcolor'), ctx=Load()), body=[AugAssign(target=Name(id='start', ctx=Store()), op=Add(), value=BinOp(left=Constant(value='\\M[%s]'), op=Mod(), right=Subscript(value=Name(id='ndef', ctx=Load()), slice=Constant(value='bgcolor'), ctx=Load()))), Assign(targets=[Name(id='end', ctx=Store())], value=BinOp(left=Constant(value='\\M[]'), op=Add(), right=Name(id='end', ctx=Load())))], orelse=[]), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='styles', ctx=Load()), slice=Name(id='ttype', ctx=Load()), ctx=Store())], value=Tuple(elts=[Name(id='start', ctx=Load()), Name(id='end', ctx=Load())], ctx=Load()))], orelse=[])], decorator_list=[]), FunctionDef(name='_define_colors', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='outfile')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='colors', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='_', ctx=Store()), Name(id='ndef', ctx=Store())], ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='ndef', ctx=Load()), slice=Constant(value='color'), ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='colors', ctx=Load()), attr='add', ctx=Load()), args=[Subscript(value=Name(id='ndef', ctx=Load()), slice=Constant(value='color'), ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), For(target=Name(id='color', ctx=Store()), iter=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='colors', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='outfile', ctx=Load()), attr='write', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=BinOp(left=Constant(value='.defcolor '), op=Add(), right=Name(id='color', ctx=Load())), op=Add(), right=Constant(value=' rgb #')), op=Add(), right=Name(id='color', ctx=Load())), op=Add(), right=Constant(value='\n'))], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='_write_lineno', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='outfile')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_lineno', ctx=Store()), op=Add(), value=Constant(value=1)), Expr(value=Call(func=Attribute(value=Name(id='outfile', ctx=Load()), attr='write', ctx=Load()), args=[BinOp(left=Constant(value='%s% 4d '), op=Mod(), right=Tuple(elts=[BoolOp(op=Or(), values=[BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_lineno', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=1)]), Constant(value='\n')]), Constant(value='')]), Attribute(value=Name(id='self', ctx=Load()), attr='_lineno', ctx=Load())], ctx=Load()))], keywords=[]))], decorator_list=[]), FunctionDef(name='_wrap_line', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='line')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='length', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='rstrip', ctx=Load()), args=[Constant(value='\n')], keywords=[])], keywords=[])), Assign(targets=[Name(id='space', ctx=Store())], value=IfExp(test=Attribute(value=Name(id='self', ctx=Load()), attr='linenos', ctx=Load()), body=Constant(value='     '), orelse=Constant(value=''))), Assign(targets=[Name(id='newline', ctx=Store())], value=Constant(value='')), If(test=Compare(left=Name(id='length', ctx=Load()), ops=[Gt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='wrap', ctx=Load())]), body=[For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Call(func=Attribute(value=Name(id='math', ctx=Load()), attr='floor', ctx=Load()), args=[BinOp(left=Name(id='length', ctx=Load()), op=Div(), right=Attribute(value=Name(id='self', ctx=Load()), attr='wrap', ctx=Load()))], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='chunk', ctx=Store())], value=Subscript(value=Name(id='line', ctx=Load()), slice=Slice(lower=BinOp(left=Name(id='i', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='self', ctx=Load()), attr='wrap', ctx=Load())), upper=BinOp(left=BinOp(left=Name(id='i', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='self', ctx=Load()), attr='wrap', ctx=Load())), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='wrap', ctx=Load()))), ctx=Load())), AugAssign(target=Name(id='newline', ctx=Store()), op=Add(), value=BinOp(left=BinOp(left=Name(id='chunk', ctx=Load()), op=Add(), right=Constant(value='\n')), op=Add(), right=Name(id='space', ctx=Load())))], orelse=[]), Assign(targets=[Name(id='remainder', ctx=Store())], value=BinOp(left=Name(id='length', ctx=Load()), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='wrap', ctx=Load()))), If(test=Compare(left=Name(id='remainder', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[AugAssign(target=Name(id='newline', ctx=Store()), op=Add(), value=Subscript(value=Name(id='line', ctx=Load()), slice=Slice(lower=BinOp(left=UnaryOp(op=USub(), operand=Name(id='remainder', ctx=Load())), op=Sub(), right=Constant(value=1))), ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_linelen', ctx=Store())], value=Name(id='remainder', ctx=Load()))], orelse=[])], orelse=[If(test=Compare(left=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_linelen', ctx=Load()), op=Add(), right=Name(id='length', ctx=Load())), ops=[Gt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='wrap', ctx=Load())]), body=[Assign(targets=[Name(id='newline', ctx=Store())], value=BinOp(left=BinOp(left=Constant(value='\n'), op=Add(), right=Name(id='space', ctx=Load())), op=Add(), right=Name(id='line', ctx=Load()))), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_linelen', ctx=Store())], value=Name(id='length', ctx=Load()))], orelse=[Assign(targets=[Name(id='newline', ctx=Store())], value=Name(id='line', ctx=Load())), AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_linelen', ctx=Store()), op=Add(), value=Name(id='length', ctx=Load()))])]), Return(value=Name(id='newline', ctx=Load()))], decorator_list=[]), FunctionDef(name='_escape_chars', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='text')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='text', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='text', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='\\'), Constant(value='\\[u005C]')], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value='.'), Constant(value='\\[char46]')], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value="'"), Constant(value='\\[u0027]')], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value='`'), Constant(value='\\[u0060]')], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value='~'), Constant(value='\\[u007E]')], keywords=[])), Assign(targets=[Name(id='copy', ctx=Store())], value=Name(id='text', ctx=Load())), For(target=Name(id='char', ctx=Store()), iter=Name(id='copy', ctx=Load()), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='char', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Call(func=Attribute(value=Name(id='char', ctx=Load()), attr='encode', ctx=Load()), args=[], keywords=[])], keywords=[])]), body=[Assign(targets=[Name(id='uni', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Subscript(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='char', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='unicode_escape')], keywords=[]), attr='decode', ctx=Load()), args=[], keywords=[]), slice=Slice(lower=Constant(value=1)), ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='x'), Constant(value='u00')], keywords=[]), attr='upper', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='text', ctx=Store())], value=Call(func=Attribute(value=Name(id='text', ctx=Load()), attr='replace', ctx=Load()), args=[Name(id='char', ctx=Load()), BinOp(left=BinOp(left=Constant(value='\\[u'), op=Add(), right=Subscript(value=Name(id='uni', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())), op=Add(), right=Constant(value=']'))], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='text', ctx=Load()))], decorator_list=[]), FunctionDef(name='format_unencoded', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='tokensource'), arg(arg='outfile')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_define_colors', ctx=Load()), args=[Name(id='outfile', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='outfile', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value='.nf\n\\f[CR]\n')], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='linenos', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_write_lineno', ctx=Load()), args=[Name(id='outfile', ctx=Load())], keywords=[]))], orelse=[]), For(target=Tuple(elts=[Name(id='ttype', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Name(id='tokensource', ctx=Load()), body=[While(test=Compare(left=Name(id='ttype', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='styles', ctx=Load())]), body=[Assign(targets=[Name(id='ttype', ctx=Store())], value=Attribute(value=Name(id='ttype', ctx=Load()), attr='parent', ctx=Load()))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='start', ctx=Store()), Name(id='end', ctx=Store())], ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='styles', ctx=Load()), slice=Name(id='ttype', ctx=Load()), ctx=Load())), For(target=Name(id='line', ctx=Store()), iter=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='splitlines', ctx=Load()), args=[Constant(value=True)], keywords=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='wrap', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='line', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_wrap_line', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Name(id='start', ctx=Load()), Name(id='end', ctx=Load())]), body=[Assign(targets=[Name(id='text', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_escape_chars', ctx=Load()), args=[Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='rstrip', ctx=Load()), args=[Constant(value='\n')], keywords=[])], keywords=[])), If(test=Compare(left=Name(id='text', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='')]), body=[Expr(value=Call(func=Attribute(value=Name(id='outfile', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Tuple(elts=[Name(id='start', ctx=Load()), Name(id='text', ctx=Load()), Name(id='end', ctx=Load())], ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], orelse=[Expr(value=Call(func=Attribute(value=Name(id='outfile', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_escape_chars', ctx=Load()), args=[Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='rstrip', ctx=Load()), args=[Constant(value='\n')], keywords=[])], keywords=[])], keywords=[]))]), If(test=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='\n')], keywords=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='linenos', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_write_lineno', ctx=Load()), args=[Name(id='outfile', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_linelen', ctx=Store())], value=Constant(value=0))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='outfile', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value='\n')], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_linelen', ctx=Store())], value=Constant(value=0))])], orelse=[])], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='outfile', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value='\n.fi')], keywords=[]))], decorator_list=[])], decorator_list=[])], type_ignores=[])