Module(body=[Expr(value=Constant(value='\n    pygments.formatters.latex\n    ~~~~~~~~~~~~~~~~~~~~~~~~~\n\n    Formatter for LaTeX fancyvrb output.\n\n    :copyright: Copyright 2006-2023 by the Pygments team, see AUTHORS.\n    :license: BSD, see LICENSE for details.\n')), ImportFrom(module='io', names=[alias(name='StringIO')], level=0), ImportFrom(module='pip._vendor.pygments.formatter', names=[alias(name='Formatter')], level=0), ImportFrom(module='pip._vendor.pygments.lexer', names=[alias(name='Lexer'), alias(name='do_insertions')], level=0), ImportFrom(module='pip._vendor.pygments.token', names=[alias(name='Token'), alias(name='STANDARD_TYPES')], level=0), ImportFrom(module='pip._vendor.pygments.util', names=[alias(name='get_bool_opt'), alias(name='get_int_opt')], level=0), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='LatexFormatter')], ctx=Load())), FunctionDef(name='escape_tex', args=arguments(posonlyargs=[], args=[arg(arg='text'), arg(arg='commandprefix')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='text', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='\\'), Constant(value='\x00')], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value='{'), Constant(value='\x01')], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value='}'), Constant(value='\x02')], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value='\x00'), BinOp(left=Constant(value='\\%sZbs{}'), op=Mod(), right=Name(id='commandprefix', ctx=Load()))], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value='\x01'), BinOp(left=Constant(value='\\%sZob{}'), op=Mod(), right=Name(id='commandprefix', ctx=Load()))], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value='\x02'), BinOp(left=Constant(value='\\%sZcb{}'), op=Mod(), right=Name(id='commandprefix', ctx=Load()))], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value='^'), BinOp(left=Constant(value='\\%sZca{}'), op=Mod(), right=Name(id='commandprefix', ctx=Load()))], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value='_'), BinOp(left=Constant(value='\\%sZus{}'), op=Mod(), right=Name(id='commandprefix', ctx=Load()))], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value='&'), BinOp(left=Constant(value='\\%sZam{}'), op=Mod(), right=Name(id='commandprefix', ctx=Load()))], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value='<'), BinOp(left=Constant(value='\\%sZlt{}'), op=Mod(), right=Name(id='commandprefix', ctx=Load()))], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value='>'), BinOp(left=Constant(value='\\%sZgt{}'), op=Mod(), right=Name(id='commandprefix', ctx=Load()))], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value='#'), BinOp(left=Constant(value='\\%sZsh{}'), op=Mod(), right=Name(id='commandprefix', ctx=Load()))], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value='%'), BinOp(left=Constant(value='\\%sZpc{}'), op=Mod(), right=Name(id='commandprefix', ctx=Load()))], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value='$'), BinOp(left=Constant(value='\\%sZdl{}'), op=Mod(), right=Name(id='commandprefix', ctx=Load()))], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value='-'), BinOp(left=Constant(value='\\%sZhy{}'), op=Mod(), right=Name(id='commandprefix', ctx=Load()))], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value="'"), BinOp(left=Constant(value='\\%sZsq{}'), op=Mod(), right=Name(id='commandprefix', ctx=Load()))], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value='"'), BinOp(left=Constant(value='\\%sZdq{}'), op=Mod(), right=Name(id='commandprefix', ctx=Load()))], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value='~'), BinOp(left=Constant(value='\\%sZti{}'), op=Mod(), right=Name(id='commandprefix', ctx=Load()))], keywords=[]))], decorator_list=[]), Assign(targets=[Name(id='DOC_TEMPLATE', ctx=Store())], value=Constant(value='\n\\documentclass{%(docclass)s}\n\\usepackage{fancyvrb}\n\\usepackage{color}\n\\usepackage[%(encoding)s]{inputenc}\n%(preamble)s\n\n%(styledefs)s\n\n\\begin{document}\n\n\\section*{%(title)s}\n\n%(code)s\n\\end{document}\n')), Assign(targets=[Name(id='STYLE_TEMPLATE', ctx=Store())], value=Constant(value='\n\\makeatletter\n\\def\\%(cp)s@reset{\\let\\%(cp)s@it=\\relax \\let\\%(cp)s@bf=\\relax%%\n    \\let\\%(cp)s@ul=\\relax \\let\\%(cp)s@tc=\\relax%%\n    \\let\\%(cp)s@bc=\\relax \\let\\%(cp)s@ff=\\relax}\n\\def\\%(cp)s@tok#1{\\csname %(cp)s@tok@#1\\endcsname}\n\\def\\%(cp)s@toks#1+{\\ifx\\relax#1\\empty\\else%%\n    \\%(cp)s@tok{#1}\\expandafter\\%(cp)s@toks\\fi}\n\\def\\%(cp)s@do#1{\\%(cp)s@bc{\\%(cp)s@tc{\\%(cp)s@ul{%%\n    \\%(cp)s@it{\\%(cp)s@bf{\\%(cp)s@ff{#1}}}}}}}\n\\def\\%(cp)s#1#2{\\%(cp)s@reset\\%(cp)s@toks#1+\\relax+\\%(cp)s@do{#2}}\n\n%(styles)s\n\n\\def\\%(cp)sZbs{\\char`\\\\}\n\\def\\%(cp)sZus{\\char`\\_}\n\\def\\%(cp)sZob{\\char`\\{}\n\\def\\%(cp)sZcb{\\char`\\}}\n\\def\\%(cp)sZca{\\char`\\^}\n\\def\\%(cp)sZam{\\char`\\&}\n\\def\\%(cp)sZlt{\\char`\\<}\n\\def\\%(cp)sZgt{\\char`\\>}\n\\def\\%(cp)sZsh{\\char`\\#}\n\\def\\%(cp)sZpc{\\char`\\%%}\n\\def\\%(cp)sZdl{\\char`\\$}\n\\def\\%(cp)sZhy{\\char`\\-}\n\\def\\%(cp)sZsq{\\char`\\\'}\n\\def\\%(cp)sZdq{\\char`\\"}\n\\def\\%(cp)sZti{\\char`\\~}\n%% for compatibility with earlier versions\n\\def\\%(cp)sZat{@}\n\\def\\%(cp)sZlb{[}\n\\def\\%(cp)sZrb{]}\n\\makeatother\n')), FunctionDef(name='_get_ttype_name', args=arguments(posonlyargs=[], args=[arg(arg='ttype')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='fname', ctx=Store())], value=Call(func=Attribute(value=Name(id='STANDARD_TYPES', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='ttype', ctx=Load())], keywords=[])), If(test=Name(id='fname', ctx=Load()), body=[Return(value=Name(id='fname', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='aname', ctx=Store())], value=Constant(value='')), While(test=Compare(left=Name(id='fname', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='aname', ctx=Store())], value=BinOp(left=Subscript(value=Name(id='ttype', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Add(), right=Name(id='aname', ctx=Load()))), Assign(targets=[Name(id='ttype', ctx=Store())], value=Attribute(value=Name(id='ttype', ctx=Load()), attr='parent', ctx=Load())), Assign(targets=[Name(id='fname', ctx=Store())], value=Call(func=Attribute(value=Name(id='STANDARD_TYPES', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='ttype', ctx=Load())], keywords=[]))], orelse=[]), Return(value=BinOp(left=Name(id='fname', ctx=Load()), op=Add(), right=Name(id='aname', ctx=Load())))], decorator_list=[]), ClassDef(name='LatexFormatter', bases=[Name(id='Formatter', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Format tokens as LaTeX code. This needs the `fancyvrb` and `color`\n    standard packages.\n\n    Without the `full` option, code is formatted as one ``Verbatim``\n    environment, like this:\n\n    .. sourcecode:: latex\n\n        \\begin{Verbatim}[commandchars=\\\\\\{\\}]\n        \\PY{k}{def }\\PY{n+nf}{foo}(\\PY{n}{bar}):\n            \\PY{k}{pass}\n        \\end{Verbatim}\n\n    Wrapping can be disabled using the `nowrap` option.\n\n    The special command used here (``\\PY``) and all the other macros it needs\n    are output by the `get_style_defs` method.\n\n    With the `full` option, a complete LaTeX document is output, including\n    the command definitions in the preamble.\n\n    The `get_style_defs()` method of a `LatexFormatter` returns a string\n    containing ``\\def`` commands defining the macros needed inside the\n    ``Verbatim`` environments.\n\n    Additional options accepted:\n\n    `nowrap`\n        If set to ``True``, don\'t wrap the tokens at all, not even inside a\n        ``\\begin{Verbatim}`` environment. This disables most other options\n        (default: ``False``).\n\n    `style`\n        The style to use, can be a string or a Style subclass (default:\n        ``\'default\'``).\n\n    `full`\n        Tells the formatter to output a "full" document, i.e. a complete\n        self-contained document (default: ``False``).\n\n    `title`\n        If `full` is true, the title that should be used to caption the\n        document (default: ``\'\'``).\n\n    `docclass`\n        If the `full` option is enabled, this is the document class to use\n        (default: ``\'article\'``).\n\n    `preamble`\n        If the `full` option is enabled, this can be further preamble commands,\n        e.g. ``\\usepackage`` (default: ``\'\'``).\n\n    `linenos`\n        If set to ``True``, output line numbers (default: ``False``).\n\n    `linenostart`\n        The line number for the first line (default: ``1``).\n\n    `linenostep`\n        If set to a number n > 1, only every nth line number is printed.\n\n    `verboptions`\n        Additional options given to the Verbatim environment (see the *fancyvrb*\n        docs for possible values) (default: ``\'\'``).\n\n    `commandprefix`\n        The LaTeX commands used to produce colored output are constructed\n        using this prefix and some letters (default: ``\'PY\'``).\n\n        .. versionadded:: 0.7\n        .. versionchanged:: 0.10\n           The default is now ``\'PY\'`` instead of ``\'C\'``.\n\n    `texcomments`\n        If set to ``True``, enables LaTeX comment lines.  That is, LaTex markup\n        in comment tokens is not escaped so that LaTeX can render it (default:\n        ``False``).\n\n        .. versionadded:: 1.2\n\n    `mathescape`\n        If set to ``True``, enables LaTeX math mode escape in comments. That\n        is, ``\'$...$\'`` inside a comment will trigger math mode (default:\n        ``False``).\n\n        .. versionadded:: 1.2\n\n    `escapeinside`\n        If set to a string of length 2, enables escaping to LaTeX. Text\n        delimited by these 2 characters is read as LaTeX code and\n        typeset accordingly. It has no effect in string literals. It has\n        no effect in comments if `texcomments` or `mathescape` is\n        set. (default: ``\'\'``).\n\n        .. versionadded:: 2.0\n\n    `envname`\n        Allows you to pick an alternative environment name replacing Verbatim.\n        The alternate environment still has to support Verbatim\'s option syntax.\n        (default: ``\'Verbatim\'``).\n\n        .. versionadded:: 2.0\n    ')), Assign(targets=[Name(id='name', ctx=Store())], value=Constant(value='LaTeX')), Assign(targets=[Name(id='aliases', ctx=Store())], value=List(elts=[Constant(value='latex'), Constant(value='tex')], ctx=Load())), Assign(targets=[Name(id='filenames', ctx=Store())], value=List(elts=[Constant(value='*.tex')], ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='options'), defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='Formatter', ctx=Load()), attr='__init__', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[keyword(value=Name(id='options', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='nowrap', ctx=Store())], value=Call(func=Name(id='get_bool_opt', ctx=Load()), args=[Name(id='options', ctx=Load()), Constant(value='nowrap'), Constant(value=False)], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='docclass', ctx=Store())], value=Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='docclass'), Constant(value='article')], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='preamble', ctx=Store())], value=Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='preamble'), Constant(value='')], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='linenos', ctx=Store())], value=Call(func=Name(id='get_bool_opt', ctx=Load()), args=[Name(id='options', ctx=Load()), Constant(value='linenos'), Constant(value=False)], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='linenostart', ctx=Store())], value=Call(func=Name(id='abs', ctx=Load()), args=[Call(func=Name(id='get_int_opt', ctx=Load()), args=[Name(id='options', ctx=Load()), Constant(value='linenostart'), Constant(value=1)], keywords=[])], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='linenostep', ctx=Store())], value=Call(func=Name(id='abs', ctx=Load()), args=[Call(func=Name(id='get_int_opt', ctx=Load()), args=[Name(id='options', ctx=Load()), Constant(value='linenostep'), Constant(value=1)], keywords=[])], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='verboptions', ctx=Store())], value=Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='verboptions'), Constant(value='')], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='nobackground', ctx=Store())], value=Call(func=Name(id='get_bool_opt', ctx=Load()), args=[Name(id='options', ctx=Load()), Constant(value='nobackground'), Constant(value=False)], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='commandprefix', ctx=Store())], value=Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='commandprefix'), Constant(value='PY')], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='texcomments', ctx=Store())], value=Call(func=Name(id='get_bool_opt', ctx=Load()), args=[Name(id='options', ctx=Load()), Constant(value='texcomments'), Constant(value=False)], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='mathescape', ctx=Store())], value=Call(func=Name(id='get_bool_opt', ctx=Load()), args=[Name(id='options', ctx=Load()), Constant(value='mathescape'), Constant(value=False)], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='escapeinside', ctx=Store())], value=Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='escapeinside'), Constant(value='')], keywords=[])), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='escapeinside', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=2)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='left', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='escapeinside', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='right', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='escapeinside', ctx=Load()), slice=Constant(value=1), ctx=Load()))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='escapeinside', ctx=Store())], value=Constant(value=''))]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='envname', ctx=Store())], value=Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='envname'), Constant(value='Verbatim')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_create_stylesheet', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='_create_stylesheet', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='t2n', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='ttype2name', ctx=Store())], value=Dict(keys=[Name(id='Token', ctx=Load())], values=[Constant(value='')])), Assign(targets=[Name(id='c2d', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='cmd2def', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='cp', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='commandprefix', ctx=Load())), FunctionDef(name='rgbcolor', args=arguments(posonlyargs=[], args=[arg(arg='col')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Name(id='col', ctx=Load()), body=[Return(value=Call(func=Attribute(value=Constant(value=','), attr='join', ctx=Load()), args=[ListComp(elt=BinOp(left=Constant(value='%.2f'), op=Mod(), right=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Subscript(value=Name(id='col', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), op=Add(), right=Subscript(value=Name(id='col', ctx=Load()), slice=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())), Constant(value=16)], keywords=[]), op=Div(), right=Constant(value=255.0))), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Tuple(elts=[Constant(value=0), Constant(value=2), Constant(value=4)], ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], orelse=[Return(value=Constant(value='1,1,1'))])], decorator_list=[]), For(target=Tuple(elts=[Name(id='ttype', ctx=Store()), Name(id='ndef', ctx=Store())], ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load()), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Name(id='_get_ttype_name', ctx=Load()), args=[Name(id='ttype', ctx=Load())], keywords=[])), Assign(targets=[Name(id='cmndef', ctx=Store())], value=Constant(value='')), If(test=Subscript(value=Name(id='ndef', ctx=Load()), slice=Constant(value='bold'), ctx=Load()), body=[AugAssign(target=Name(id='cmndef', ctx=Store()), op=Add(), value=Constant(value='\\let\\$$@bf=\\textbf'))], orelse=[]), If(test=Subscript(value=Name(id='ndef', ctx=Load()), slice=Constant(value='italic'), ctx=Load()), body=[AugAssign(target=Name(id='cmndef', ctx=Store()), op=Add(), value=Constant(value='\\let\\$$@it=\\textit'))], orelse=[]), If(test=Subscript(value=Name(id='ndef', ctx=Load()), slice=Constant(value='underline'), ctx=Load()), body=[AugAssign(target=Name(id='cmndef', ctx=Store()), op=Add(), value=Constant(value='\\let\\$$@ul=\\underline'))], orelse=[]), If(test=Subscript(value=Name(id='ndef', ctx=Load()), slice=Constant(value='roman'), ctx=Load()), body=[AugAssign(target=Name(id='cmndef', ctx=Store()), op=Add(), value=Constant(value='\\let\\$$@ff=\\textrm'))], orelse=[]), If(test=Subscript(value=Name(id='ndef', ctx=Load()), slice=Constant(value='sans'), ctx=Load()), body=[AugAssign(target=Name(id='cmndef', ctx=Store()), op=Add(), value=Constant(value='\\let\\$$@ff=\\textsf'))], orelse=[]), If(test=Subscript(value=Name(id='ndef', ctx=Load()), slice=Constant(value='mono'), ctx=Load()), body=[AugAssign(target=Name(id='cmndef', ctx=Store()), op=Add(), value=Constant(value='\\let\\$$@ff=\\textsf'))], orelse=[]), If(test=Subscript(value=Name(id='ndef', ctx=Load()), slice=Constant(value='color'), ctx=Load()), body=[AugAssign(target=Name(id='cmndef', ctx=Store()), op=Add(), value=BinOp(left=Constant(value='\\def\\$$@tc##1{\\textcolor[rgb]{%s}{##1}}'), op=Mod(), right=Call(func=Name(id='rgbcolor', ctx=Load()), args=[Subscript(value=Name(id='ndef', ctx=Load()), slice=Constant(value='color'), ctx=Load())], keywords=[])))], orelse=[]), If(test=Subscript(value=Name(id='ndef', ctx=Load()), slice=Constant(value='border'), ctx=Load()), body=[AugAssign(target=Name(id='cmndef', ctx=Store()), op=Add(), value=BinOp(left=Constant(value='\\def\\$$@bc##1{{\\setlength{\\fboxsep}{\\string -\\fboxrule}\\fcolorbox[rgb]{%s}{%s}{\\strut ##1}}}'), op=Mod(), right=Tuple(elts=[Call(func=Name(id='rgbcolor', ctx=Load()), args=[Subscript(value=Name(id='ndef', ctx=Load()), slice=Constant(value='border'), ctx=Load())], keywords=[]), Call(func=Name(id='rgbcolor', ctx=Load()), args=[Subscript(value=Name(id='ndef', ctx=Load()), slice=Constant(value='bgcolor'), ctx=Load())], keywords=[])], ctx=Load())))], orelse=[If(test=Subscript(value=Name(id='ndef', ctx=Load()), slice=Constant(value='bgcolor'), ctx=Load()), body=[AugAssign(target=Name(id='cmndef', ctx=Store()), op=Add(), value=BinOp(left=Constant(value='\\def\\$$@bc##1{{\\setlength{\\fboxsep}{0pt}\\colorbox[rgb]{%s}{\\strut ##1}}}'), op=Mod(), right=Call(func=Name(id='rgbcolor', ctx=Load()), args=[Subscript(value=Name(id='ndef', ctx=Load()), slice=Constant(value='bgcolor'), ctx=Load())], keywords=[])))], orelse=[])]), If(test=Compare(left=Name(id='cmndef', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Continue()], orelse=[]), Assign(targets=[Name(id='cmndef', ctx=Store())], value=Call(func=Attribute(value=Name(id='cmndef', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='$$'), Name(id='cp', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='t2n', ctx=Load()), slice=Name(id='ttype', ctx=Load()), ctx=Store())], value=Name(id='name', ctx=Load())), Assign(targets=[Subscript(value=Name(id='c2d', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Name(id='cmndef', ctx=Load()))], orelse=[])], decorator_list=[]), FunctionDef(name='get_style_defs', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='arg')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='')]), body=[Expr(value=Constant(value='\n        Return the command sequences needed to define the commands\n        used to format text in the verbatim environment. ``arg`` is ignored.\n        ')), Assign(targets=[Name(id='cp', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='commandprefix', ctx=Load())), Assign(targets=[Name(id='styles', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='definition', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmd2def', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='styles', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Constant(value='\\@namedef{%s@tok@%s}{%s}'), op=Mod(), right=Tuple(elts=[Name(id='cp', ctx=Load()), Name(id='name', ctx=Load()), Name(id='definition', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[]), Return(value=BinOp(left=Name(id='STYLE_TEMPLATE', ctx=Load()), op=Mod(), right=Dict(keys=[Constant(value='cp'), Constant(value='styles')], values=[Attribute(value=Name(id='self', ctx=Load()), attr='commandprefix', ctx=Load()), Call(func=Attribute(value=Constant(value='\n'), attr='join', ctx=Load()), args=[Name(id='styles', ctx=Load())], keywords=[])])))], decorator_list=[]), FunctionDef(name='format_unencoded', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='tokensource'), arg(arg='outfile')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='t2n', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='ttype2name', ctx=Load())), Assign(targets=[Name(id='cp', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='commandprefix', ctx=Load())), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='full', ctx=Load()), body=[Assign(targets=[Name(id='realoutfile', ctx=Store())], value=Name(id='outfile', ctx=Load())), Assign(targets=[Name(id='outfile', ctx=Store())], value=Call(func=Name(id='StringIO', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='nowrap', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='outfile', ctx=Load()), attr='write', ctx=Load()), args=[BinOp(left=BinOp(left=Constant(value='\\begin{'), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='envname', ctx=Load())), op=Add(), right=Constant(value='}[commandchars=\\\\\\{\\}'))], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='linenos', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='start', ctx=Store()), Name(id='step', ctx=Store())], ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='linenostart', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='linenostep', ctx=Load())], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='outfile', ctx=Load()), attr='write', ctx=Load()), args=[BinOp(left=BinOp(left=Constant(value=',numbers=left'), op=Add(), right=BoolOp(op=Or(), values=[BoolOp(op=And(), values=[Name(id='start', ctx=Load()), BinOp(left=Constant(value=',firstnumber=%d'), op=Mod(), right=Name(id='start', ctx=Load()))]), Constant(value='')])), op=Add(), right=BoolOp(op=Or(), values=[BoolOp(op=And(), values=[Name(id='step', ctx=Load()), BinOp(left=Constant(value=',stepnumber=%d'), op=Mod(), right=Name(id='step', ctx=Load()))]), Constant(value='')]))], keywords=[]))], orelse=[]), If(test=BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='mathescape', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='texcomments', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='escapeinside', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='outfile', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value=',codes={\\catcode`\\$=3\\catcode`\\^=7\\catcode`\\_=8\\relax}')], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='verboptions', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='outfile', ctx=Load()), attr='write', ctx=Load()), args=[BinOp(left=Constant(value=','), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='verboptions', ctx=Load()))], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='outfile', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value=']\n')], keywords=[]))], orelse=[]), For(target=Tuple(elts=[Name(id='ttype', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Name(id='tokensource', ctx=Load()), body=[If(test=Compare(left=Name(id='ttype', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='Token', ctx=Load()), attr='Comment', ctx=Load())]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='texcomments', ctx=Load()), body=[Assign(targets=[Name(id='start', ctx=Store())], value=Subscript(value=Name(id='value', ctx=Load()), slice=Slice(lower=Constant(value=0), upper=Constant(value=1)), ctx=Load())), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=Subscript(value=Name(id='start', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Name(id='value', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())]), body=[Break()], orelse=[]), AugAssign(target=Name(id='start', ctx=Store()), op=Add(), value=Subscript(value=Name(id='value', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='value', ctx=Store())], value=Subscript(value=Name(id='value', ctx=Load()), slice=Slice(lower=Call(func=Name(id='len', ctx=Load()), args=[Name(id='start', ctx=Load())], keywords=[])), ctx=Load())), Assign(targets=[Name(id='start', ctx=Store())], value=Call(func=Name(id='escape_tex', ctx=Load()), args=[Name(id='start', ctx=Load()), Name(id='cp', ctx=Load())], keywords=[])), Assign(targets=[Name(id='value', ctx=Store())], value=BinOp(left=Name(id='start', ctx=Load()), op=Add(), right=Name(id='value', ctx=Load())))], orelse=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='mathescape', ctx=Load()), body=[Assign(targets=[Name(id='parts', ctx=Store())], value=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='$')], keywords=[])), Assign(targets=[Name(id='in_math', ctx=Store())], value=Constant(value=False)), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='part', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='parts', ctx=Load())], keywords=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='in_math', ctx=Load())), body=[Assign(targets=[Subscript(value=Name(id='parts', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Store())], value=Call(func=Name(id='escape_tex', ctx=Load()), args=[Name(id='part', ctx=Load()), Name(id='cp', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='in_math', ctx=Store())], value=UnaryOp(op=Not(), operand=Name(id='in_math', ctx=Load())))], orelse=[]), Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Constant(value='$'), attr='join', ctx=Load()), args=[Name(id='parts', ctx=Load())], keywords=[]))], orelse=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='escapeinside', ctx=Load()), body=[Assign(targets=[Name(id='text', ctx=Store())], value=Name(id='value', ctx=Load())), Assign(targets=[Name(id='value', ctx=Store())], value=Constant(value='')), While(test=Name(id='text', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='a', ctx=Store()), Name(id='sep1', ctx=Store()), Name(id='text', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='text', ctx=Load()), attr='partition', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='left', ctx=Load())], keywords=[])), If(test=Name(id='sep1', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='b', ctx=Store()), Name(id='sep2', ctx=Store()), Name(id='text', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='text', ctx=Load()), attr='partition', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='right', ctx=Load())], keywords=[])), If(test=Name(id='sep2', ctx=Load()), body=[AugAssign(target=Name(id='value', ctx=Store()), op=Add(), value=BinOp(left=Call(func=Name(id='escape_tex', ctx=Load()), args=[Name(id='a', ctx=Load()), Name(id='cp', ctx=Load())], keywords=[]), op=Add(), right=Name(id='b', ctx=Load())))], orelse=[AugAssign(target=Name(id='value', ctx=Store()), op=Add(), value=Call(func=Name(id='escape_tex', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='a', ctx=Load()), op=Add(), right=Name(id='sep1', ctx=Load())), op=Add(), right=Name(id='b', ctx=Load())), Name(id='cp', ctx=Load())], keywords=[]))])], orelse=[AugAssign(target=Name(id='value', ctx=Store()), op=Add(), value=Call(func=Name(id='escape_tex', ctx=Load()), args=[Name(id='a', ctx=Load()), Name(id='cp', ctx=Load())], keywords=[]))])], orelse=[])], orelse=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Name(id='escape_tex', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='cp', ctx=Load())], keywords=[]))])])])], orelse=[If(test=Compare(left=Name(id='ttype', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='Token', ctx=Load()), attr='Escape', ctx=Load())]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Name(id='escape_tex', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='cp', ctx=Load())], keywords=[]))], orelse=[])]), Assign(targets=[Name(id='styles', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Compare(left=Name(id='ttype', ctx=Load()), ops=[IsNot()], comparators=[Name(id='Token', ctx=Load())]), body=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='styles', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Name(id='t2n', ctx=Load()), slice=Name(id='ttype', ctx=Load()), ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='styles', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='_get_ttype_name', ctx=Load()), args=[Name(id='ttype', ctx=Load())], keywords=[])], keywords=[]))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='ttype', ctx=Store())], value=Attribute(value=Name(id='ttype', ctx=Load()), attr='parent', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='styleval', ctx=Store())], value=Call(func=Attribute(value=Constant(value='+'), attr='join', ctx=Load()), args=[Call(func=Name(id='reversed', ctx=Load()), args=[Name(id='styles', ctx=Load())], keywords=[])], keywords=[])), If(test=Name(id='styleval', ctx=Load()), body=[Assign(targets=[Name(id='spl', ctx=Store())], value=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='\n')], keywords=[])), For(target=Name(id='line', ctx=Store()), iter=Subscript(value=Name(id='spl', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), body=[If(test=Name(id='line', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='outfile', ctx=Load()), attr='write', ctx=Load()), args=[BinOp(left=Constant(value='\\%s{%s}{%s}'), op=Mod(), right=Tuple(elts=[Name(id='cp', ctx=Load()), Name(id='styleval', ctx=Load()), Name(id='line', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='outfile', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value='\n')], keywords=[]))], orelse=[]), If(test=Subscript(value=Name(id='spl', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='outfile', ctx=Load()), attr='write', ctx=Load()), args=[BinOp(left=Constant(value='\\%s{%s}{%s}'), op=Mod(), right=Tuple(elts=[Name(id='cp', ctx=Load()), Name(id='styleval', ctx=Load()), Subscript(value=Name(id='spl', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[])], orelse=[Expr(value=Call(func=Attribute(value=Name(id='outfile', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))])], orelse=[]), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='nowrap', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='outfile', ctx=Load()), attr='write', ctx=Load()), args=[BinOp(left=BinOp(left=Constant(value='\\end{'), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='envname', ctx=Load())), op=Add(), right=Constant(value='}\n'))], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='full', ctx=Load()), body=[Assign(targets=[Name(id='encoding', ctx=Store())], value=BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='encoding', ctx=Load()), Constant(value='utf8')])), Assign(targets=[Name(id='encoding', ctx=Store())], value=Call(func=Attribute(value=Dict(keys=[Constant(value='utf_8'), Constant(value='latin_1'), Constant(value='iso_8859_1')], values=[Constant(value='utf8'), Constant(value='latin1'), Constant(value='latin1')]), attr='get', ctx=Load()), args=[Call(func=Attribute(value=Name(id='encoding', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='-'), Constant(value='_')], keywords=[]), Name(id='encoding', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='realoutfile', ctx=Load()), attr='write', ctx=Load()), args=[BinOp(left=Name(id='DOC_TEMPLATE', ctx=Load()), op=Mod(), right=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='docclass', value=Attribute(value=Name(id='self', ctx=Load()), attr='docclass', ctx=Load())), keyword(arg='preamble', value=Attribute(value=Name(id='self', ctx=Load()), attr='preamble', ctx=Load())), keyword(arg='title', value=Attribute(value=Name(id='self', ctx=Load()), attr='title', ctx=Load())), keyword(arg='encoding', value=Name(id='encoding', ctx=Load())), keyword(arg='styledefs', value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_style_defs', ctx=Load()), args=[], keywords=[])), keyword(arg='code', value=Call(func=Attribute(value=Name(id='outfile', ctx=Load()), attr='getvalue', ctx=Load()), args=[], keywords=[]))]))], keywords=[]))], orelse=[])], decorator_list=[])], decorator_list=[]), ClassDef(name='LatexEmbeddedLexer', bases=[Name(id='Lexer', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    This lexer takes one lexer as argument, the lexer for the language\n    being formatted, and the left and right delimiters for escaped text.\n\n    First everything is scanned using the language lexer to obtain\n    strings and comments. All other consecutive tokens are merged and\n    the resulting text is scanned for escaped segments, which are given\n    the Token.Escape type. Finally text that is not escaped is scanned\n    again with the language lexer.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='left'), arg(arg='right'), arg(arg='lang')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='options'), defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='left', ctx=Store())], value=Name(id='left', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='right', ctx=Store())], value=Name(id='right', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='lang', ctx=Store())], value=Name(id='lang', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='Lexer', ctx=Load()), attr='__init__', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[keyword(value=Name(id='options', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='get_tokens_unprocessed', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='text')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='buffered', ctx=Store())], value=Constant(value='')), Assign(targets=[Name(id='insertions', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='insertion_buf', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='t', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_find_safe_escape_tokens', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='t', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[If(test=Name(id='insertion_buf', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='insertions', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='buffered', ctx=Load())], keywords=[]), Name(id='insertion_buf', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='insertion_buf', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[]), AugAssign(target=Name(id='buffered', ctx=Store()), op=Add(), value=Name(id='v', ctx=Load()))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='insertion_buf', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='i', ctx=Load()), Name(id='t', ctx=Load()), Name(id='v', ctx=Load())], ctx=Load())], keywords=[]))])], orelse=[]), If(test=Name(id='insertion_buf', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='insertions', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='buffered', ctx=Load())], keywords=[]), Name(id='insertion_buf', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='do_insertions', ctx=Load()), args=[Name(id='insertions', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='lang', ctx=Load()), attr='get_tokens_unprocessed', ctx=Load()), args=[Name(id='buffered', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='_find_safe_escape_tokens', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='text')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' find escape tokens that are not in strings or comments ')), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='t', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_filter_to', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='lang', ctx=Load()), attr='get_tokens_unprocessed', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[]), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='t')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=BoolOp(op=Or(), values=[Compare(left=Name(id='t', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='Token', ctx=Load()), attr='Comment', ctx=Load())]), Compare(left=Name(id='t', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='Token', ctx=Load()), attr='String', ctx=Load())])]))], keywords=[]), body=[If(test=Compare(left=Name(id='t', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[For(target=Tuple(elts=[Name(id='i2', ctx=Store()), Name(id='t2', ctx=Store()), Name(id='v2', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_find_escape_tokens', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[]), body=[Expr(value=Yield(value=Tuple(elts=[BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Name(id='i2', ctx=Load())), Name(id='t2', ctx=Load()), Name(id='v2', ctx=Load())], ctx=Load())))], orelse=[])], orelse=[Expr(value=Yield(value=Tuple(elts=[Name(id='i', ctx=Load()), Constant(value=None), Name(id='v', ctx=Load())], ctx=Load())))])], orelse=[])], decorator_list=[]), FunctionDef(name='_filter_to', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='it'), arg(arg='pred')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' Keep only the tokens that match `pred`, merge the others together ')), Assign(targets=[Name(id='buf', ctx=Store())], value=Constant(value='')), Assign(targets=[Name(id='idx', ctx=Store())], value=Constant(value=0)), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='t', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Name(id='it', ctx=Load()), body=[If(test=Call(func=Name(id='pred', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]), body=[If(test=Name(id='buf', ctx=Load()), body=[Expr(value=Yield(value=Tuple(elts=[Name(id='idx', ctx=Load()), Constant(value=None), Name(id='buf', ctx=Load())], ctx=Load()))), Assign(targets=[Name(id='buf', ctx=Store())], value=Constant(value=''))], orelse=[]), Expr(value=Yield(value=Tuple(elts=[Name(id='i', ctx=Load()), Name(id='t', ctx=Load()), Name(id='v', ctx=Load())], ctx=Load())))], orelse=[If(test=UnaryOp(op=Not(), operand=Name(id='buf', ctx=Load())), body=[Assign(targets=[Name(id='idx', ctx=Store())], value=Name(id='i', ctx=Load()))], orelse=[]), AugAssign(target=Name(id='buf', ctx=Store()), op=Add(), value=Name(id='v', ctx=Load()))])], orelse=[]), If(test=Name(id='buf', ctx=Load()), body=[Expr(value=Yield(value=Tuple(elts=[Name(id='idx', ctx=Load()), Constant(value=None), Name(id='buf', ctx=Load())], ctx=Load())))], orelse=[])], decorator_list=[]), FunctionDef(name='_find_escape_tokens', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='text')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=' Find escape tokens within text, give token=None otherwise ')), Assign(targets=[Name(id='index', ctx=Store())], value=Constant(value=0)), While(test=Name(id='text', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='a', ctx=Store()), Name(id='sep1', ctx=Store()), Name(id='text', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='text', ctx=Load()), attr='partition', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='left', ctx=Load())], keywords=[])), If(test=Name(id='a', ctx=Load()), body=[Expr(value=Yield(value=Tuple(elts=[Name(id='index', ctx=Load()), Constant(value=None), Name(id='a', ctx=Load())], ctx=Load()))), AugAssign(target=Name(id='index', ctx=Store()), op=Add(), value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='sep1', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='b', ctx=Store()), Name(id='sep2', ctx=Store()), Name(id='text', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='text', ctx=Load()), attr='partition', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='right', ctx=Load())], keywords=[])), If(test=Name(id='sep2', ctx=Load()), body=[Expr(value=Yield(value=Tuple(elts=[BinOp(left=Name(id='index', ctx=Load()), op=Add(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='sep1', ctx=Load())], keywords=[])), Attribute(value=Name(id='Token', ctx=Load()), attr='Escape', ctx=Load()), Name(id='b', ctx=Load())], ctx=Load()))), AugAssign(target=Name(id='index', ctx=Store()), op=Add(), value=BinOp(left=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='sep1', ctx=Load())], keywords=[]), op=Add(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='b', ctx=Load())], keywords=[])), op=Add(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='sep2', ctx=Load())], keywords=[])))], orelse=[Expr(value=Yield(value=Tuple(elts=[Name(id='index', ctx=Load()), Attribute(value=Name(id='Token', ctx=Load()), attr='Error', ctx=Load()), Name(id='sep1', ctx=Load())], ctx=Load()))), AugAssign(target=Name(id='index', ctx=Store()), op=Add(), value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='sep1', ctx=Load())], keywords=[])), Assign(targets=[Name(id='text', ctx=Store())], value=Name(id='b', ctx=Load()))])], orelse=[])], orelse=[])], decorator_list=[])], decorator_list=[])], type_ignores=[])