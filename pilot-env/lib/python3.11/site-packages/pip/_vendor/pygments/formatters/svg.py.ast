Module(body=[Expr(value=Constant(value='\n    pygments.formatters.svg\n    ~~~~~~~~~~~~~~~~~~~~~~~\n\n    Formatter for SVG output.\n\n    :copyright: Copyright 2006-2023 by the Pygments team, see AUTHORS.\n    :license: BSD, see LICENSE for details.\n')), ImportFrom(module='pip._vendor.pygments.formatter', names=[alias(name='Formatter')], level=0), ImportFrom(module='pip._vendor.pygments.token', names=[alias(name='Comment')], level=0), ImportFrom(module='pip._vendor.pygments.util', names=[alias(name='get_bool_opt'), alias(name='get_int_opt')], level=0), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='SvgFormatter')], ctx=Load())), FunctionDef(name='escape_html', args=arguments(posonlyargs=[], args=[arg(arg='text')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Escape &, <, > as well as single and double quotes for HTML.')), Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='text', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='&'), Constant(value='&amp;')], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value='<'), Constant(value='&lt;')], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value='>'), Constant(value='&gt;')], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value='"'), Constant(value='&quot;')], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value="'"), Constant(value='&#39;')], keywords=[]))], decorator_list=[]), Assign(targets=[Name(id='class2style', ctx=Store())], value=Dict(keys=[], values=[])), ClassDef(name='SvgFormatter', bases=[Name(id='Formatter', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Format tokens as an SVG graphics file.  This formatter is still experimental.\n    Each line of code is a ``<text>`` element with explicit ``x`` and ``y``\n    coordinates containing ``<tspan>`` elements with the individual token styles.\n\n    By default, this formatter outputs a full SVG document including doctype\n    declaration and the ``<svg>`` root element.\n\n    .. versionadded:: 0.9\n\n    Additional options accepted:\n\n    `nowrap`\n        Don\'t wrap the SVG ``<text>`` elements in ``<svg><g>`` elements and\n        don\'t add a XML declaration and a doctype.  If true, the `fontfamily`\n        and `fontsize` options are ignored.  Defaults to ``False``.\n\n    `fontfamily`\n        The value to give the wrapping ``<g>`` element\'s ``font-family``\n        attribute, defaults to ``"monospace"``.\n\n    `fontsize`\n        The value to give the wrapping ``<g>`` element\'s ``font-size``\n        attribute, defaults to ``"14px"``.\n\n    `linenos`\n        If ``True``, add line numbers (default: ``False``).\n\n    `linenostart`\n        The line number for the first line (default: ``1``).\n\n    `linenostep`\n        If set to a number n > 1, only every nth line number is printed.\n        \n    `linenowidth`\n        Maximum width devoted to line numbers (default: ``3*ystep``, sufficient\n        for up to 4-digit line numbers. Increase width for longer code blocks).  \n        \n    `xoffset`\n        Starting offset in X direction, defaults to ``0``.\n\n    `yoffset`\n        Starting offset in Y direction, defaults to the font size if it is given\n        in pixels, or ``20`` else.  (This is necessary since text coordinates\n        refer to the text baseline, not the top edge.)\n\n    `ystep`\n        Offset to add to the Y coordinate for each subsequent line.  This should\n        roughly be the text size plus 5.  It defaults to that value if the text\n        size is given in pixels, or ``25`` else.\n\n    `spacehack`\n        Convert spaces in the source to ``&#160;``, which are non-breaking\n        spaces.  SVG provides the ``xml:space`` attribute to control how\n        whitespace inside tags is handled, in theory, the ``preserve`` value\n        could be used to keep all whitespace as-is.  However, many current SVG\n        viewers don\'t obey that rule, so this option is provided as a workaround\n        and defaults to ``True``.\n    ')), Assign(targets=[Name(id='name', ctx=Store())], value=Constant(value='SVG')), Assign(targets=[Name(id='aliases', ctx=Store())], value=List(elts=[Constant(value='svg')], ctx=Load())), Assign(targets=[Name(id='filenames', ctx=Store())], value=List(elts=[Constant(value='*.svg')], ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='options'), defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='Formatter', ctx=Load()), attr='__init__', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[keyword(value=Name(id='options', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='nowrap', ctx=Store())], value=Call(func=Name(id='get_bool_opt', ctx=Load()), args=[Name(id='options', ctx=Load()), Constant(value='nowrap'), Constant(value=False)], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='fontfamily', ctx=Store())], value=Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='fontfamily'), Constant(value='monospace')], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='fontsize', ctx=Store())], value=Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='fontsize'), Constant(value='14px')], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='xoffset', ctx=Store())], value=Call(func=Name(id='get_int_opt', ctx=Load()), args=[Name(id='options', ctx=Load()), Constant(value='xoffset'), Constant(value=0)], keywords=[])), Assign(targets=[Name(id='fs', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='fontsize', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[])), If(test=Call(func=Attribute(value=Name(id='fs', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='px')], keywords=[]), body=[Assign(targets=[Name(id='fs', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='fs', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=2))), ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]))], orelse=[]), Try(body=[Assign(targets=[Name(id='int_fs', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Name(id='fs', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(body=[Assign(targets=[Name(id='int_fs', ctx=Store())], value=Constant(value=20))])], orelse=[], finalbody=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='yoffset', ctx=Store())], value=Call(func=Name(id='get_int_opt', ctx=Load()), args=[Name(id='options', ctx=Load()), Constant(value='yoffset'), Name(id='int_fs', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='ystep', ctx=Store())], value=Call(func=Name(id='get_int_opt', ctx=Load()), args=[Name(id='options', ctx=Load()), Constant(value='ystep'), BinOp(left=Name(id='int_fs', ctx=Load()), op=Add(), right=Constant(value=5))], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='spacehack', ctx=Store())], value=Call(func=Name(id='get_bool_opt', ctx=Load()), args=[Name(id='options', ctx=Load()), Constant(value='spacehack'), Constant(value=True)], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='linenos', ctx=Store())], value=Call(func=Name(id='get_bool_opt', ctx=Load()), args=[Name(id='options', ctx=Load()), Constant(value='linenos'), Constant(value=False)], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='linenostart', ctx=Store())], value=Call(func=Name(id='get_int_opt', ctx=Load()), args=[Name(id='options', ctx=Load()), Constant(value='linenostart'), Constant(value=1)], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='linenostep', ctx=Store())], value=Call(func=Name(id='get_int_opt', ctx=Load()), args=[Name(id='options', ctx=Load()), Constant(value='linenostep'), Constant(value=1)], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='linenowidth', ctx=Store())], value=Call(func=Name(id='get_int_opt', ctx=Load()), args=[Name(id='options', ctx=Load()), Constant(value='linenowidth'), BinOp(left=Constant(value=3), op=Mult(), right=Attribute(value=Name(id='self', ctx=Load()), attr='ystep', ctx=Load()))], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_stylecache', ctx=Store())], value=Dict(keys=[], values=[]))], decorator_list=[]), FunctionDef(name='format_unencoded', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='tokensource'), arg(arg='outfile')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Format ``tokensource``, an iterable of ``(tokentype, tokenstring)``\n        tuples and write it into ``outfile``.\n\n        For our implementation we put all lines in their own 'line group'.\n        ")), Assign(targets=[Name(id='x', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='xoffset', ctx=Load())), Assign(targets=[Name(id='y', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='yoffset', ctx=Load())), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='nowrap', ctx=Load())), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='encoding', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='outfile', ctx=Load()), attr='write', ctx=Load()), args=[BinOp(left=Constant(value='<?xml version="1.0" encoding="%s"?>\n'), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='encoding', ctx=Load()))], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='outfile', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value='<?xml version="1.0"?>\n')], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='outfile', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value='<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.0//EN" "http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd">\n')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='outfile', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value='<svg xmlns="http://www.w3.org/2000/svg">\n')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='outfile', ctx=Load()), attr='write', ctx=Load()), args=[BinOp(left=Constant(value='<g font-family="%s" font-size="%s">\n'), op=Mod(), right=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='fontfamily', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='fontsize', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Name(id='counter', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='linenostart', ctx=Load())), Assign(targets=[Name(id='counter_step', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='linenostep', ctx=Load())), Assign(targets=[Name(id='counter_style', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_style', ctx=Load()), args=[Name(id='Comment', ctx=Load())], keywords=[])), Assign(targets=[Name(id='line_x', ctx=Store())], value=Name(id='x', ctx=Load())), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='linenos', ctx=Load()), body=[If(test=Compare(left=BinOp(left=Name(id='counter', ctx=Load()), op=Mod(), right=Name(id='counter_step', ctx=Load())), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='outfile', ctx=Load()), attr='write', ctx=Load()), args=[BinOp(left=Constant(value='<text x="%s" y="%s" %s text-anchor="end">%s</text>'), op=Mod(), right=Tuple(elts=[BinOp(left=Name(id='x', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='linenowidth', ctx=Load())), Name(id='y', ctx=Load()), Name(id='counter_style', ctx=Load()), Name(id='counter', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[]), AugAssign(target=Name(id='line_x', ctx=Store()), op=Add(), value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='linenowidth', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='ystep', ctx=Load()))), AugAssign(target=Name(id='counter', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='outfile', ctx=Load()), attr='write', ctx=Load()), args=[BinOp(left=Constant(value='<text x="%s" y="%s" xml:space="preserve">'), op=Mod(), right=Tuple(elts=[Name(id='line_x', ctx=Load()), Name(id='y', ctx=Load())], ctx=Load()))], keywords=[])), For(target=Tuple(elts=[Name(id='ttype', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Name(id='tokensource', ctx=Load()), body=[Assign(targets=[Name(id='style', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_style', ctx=Load()), args=[Name(id='ttype', ctx=Load())], keywords=[])), Assign(targets=[Name(id='tspan', ctx=Store())], value=BoolOp(op=Or(), values=[BoolOp(op=And(), values=[Name(id='style', ctx=Load()), BinOp(left=BinOp(left=Constant(value='<tspan'), op=Add(), right=Name(id='style', ctx=Load())), op=Add(), right=Constant(value='>'))]), Constant(value='')])), Assign(targets=[Name(id='tspanend', ctx=Store())], value=BoolOp(op=Or(), values=[BoolOp(op=And(), values=[Name(id='tspan', ctx=Load()), Constant(value='</tspan>')]), Constant(value='')])), Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Name(id='escape_html', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='spacehack', ctx=Load()), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='expandtabs', ctx=Load()), args=[], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value=' '), Constant(value='&#160;')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='parts', ctx=Store())], value=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='\n')], keywords=[])), For(target=Name(id='part', ctx=Store()), iter=Subscript(value=Name(id='parts', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='outfile', ctx=Load()), attr='write', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='tspan', ctx=Load()), op=Add(), right=Name(id='part', ctx=Load())), op=Add(), right=Name(id='tspanend', ctx=Load()))], keywords=[])), AugAssign(target=Name(id='y', ctx=Store()), op=Add(), value=Attribute(value=Name(id='self', ctx=Load()), attr='ystep', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='outfile', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value='</text>\n')], keywords=[])), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='linenos', ctx=Load()), Compare(left=BinOp(left=Name(id='counter', ctx=Load()), op=Mod(), right=Name(id='counter_step', ctx=Load())), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Expr(value=Call(func=Attribute(value=Name(id='outfile', ctx=Load()), attr='write', ctx=Load()), args=[BinOp(left=Constant(value='<text x="%s" y="%s" text-anchor="end" %s>%s</text>'), op=Mod(), right=Tuple(elts=[BinOp(left=Name(id='x', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='linenowidth', ctx=Load())), Name(id='y', ctx=Load()), Name(id='counter_style', ctx=Load()), Name(id='counter', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[]), AugAssign(target=Name(id='counter', ctx=Store()), op=Add(), value=Constant(value=1)), Expr(value=Call(func=Attribute(value=Name(id='outfile', ctx=Load()), attr='write', ctx=Load()), args=[BinOp(left=Constant(value='<text x="%s" y="%s" xml:space="preserve">'), op=Mod(), right=Tuple(elts=[Name(id='line_x', ctx=Load()), Name(id='y', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='outfile', ctx=Load()), attr='write', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='tspan', ctx=Load()), op=Add(), right=Subscript(value=Name(id='parts', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())), op=Add(), right=Name(id='tspanend', ctx=Load()))], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='outfile', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value='</text>')], keywords=[])), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='nowrap', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='outfile', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value='</g></svg>\n')], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='_get_style', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='tokentype')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='tokentype', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_stylecache', ctx=Load())]), body=[Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_stylecache', ctx=Load()), slice=Name(id='tokentype', ctx=Load()), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='otokentype', ctx=Store())], value=Name(id='tokentype', ctx=Load())), While(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load()), attr='styles_token', ctx=Load()), args=[Name(id='tokentype', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='tokentype', ctx=Store())], value=Attribute(value=Name(id='tokentype', ctx=Load()), attr='parent', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load()), attr='style_for_token', ctx=Load()), args=[Name(id='tokentype', ctx=Load())], keywords=[])), Assign(targets=[Name(id='result', ctx=Store())], value=Constant(value='')), If(test=Subscript(value=Name(id='value', ctx=Load()), slice=Constant(value='color'), ctx=Load()), body=[Assign(targets=[Name(id='result', ctx=Store())], value=BinOp(left=BinOp(left=Constant(value=' fill="#'), op=Add(), right=Subscript(value=Name(id='value', ctx=Load()), slice=Constant(value='color'), ctx=Load())), op=Add(), right=Constant(value='"')))], orelse=[]), If(test=Subscript(value=Name(id='value', ctx=Load()), slice=Constant(value='bold'), ctx=Load()), body=[AugAssign(target=Name(id='result', ctx=Store()), op=Add(), value=Constant(value=' font-weight="bold"'))], orelse=[]), If(test=Subscript(value=Name(id='value', ctx=Load()), slice=Constant(value='italic'), ctx=Load()), body=[AugAssign(target=Name(id='result', ctx=Store()), op=Add(), value=Constant(value=' font-style="italic"'))], orelse=[]), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_stylecache', ctx=Load()), slice=Name(id='otokentype', ctx=Load()), ctx=Store())], value=Name(id='result', ctx=Load())), Return(value=Name(id='result', ctx=Load()))], decorator_list=[])], decorator_list=[])], type_ignores=[])