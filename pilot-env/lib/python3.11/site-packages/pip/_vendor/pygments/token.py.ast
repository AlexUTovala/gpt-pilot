Module(body=[Expr(value=Constant(value='\n    pygments.token\n    ~~~~~~~~~~~~~~\n\n    Basic token types and the standard tokens.\n\n    :copyright: Copyright 2006-2023 by the Pygments team, see AUTHORS.\n    :license: BSD, see LICENSE for details.\n')), ClassDef(name='_TokenType', bases=[Name(id='tuple', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='parent', ctx=Store())], value=Constant(value=None)), FunctionDef(name='split', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='buf', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='node', ctx=Store())], value=Name(id='self', ctx=Load())), While(test=Compare(left=Name(id='node', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='buf', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='node', ctx=Load())], keywords=[])), Assign(targets=[Name(id='node', ctx=Store())], value=Attribute(value=Name(id='node', ctx=Load()), attr='parent', ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='buf', ctx=Load()), attr='reverse', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='buf', ctx=Load()))], decorator_list=[]), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='subtypes', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='__contains__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='val')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=Or(), values=[Compare(left=Name(id='self', ctx=Load()), ops=[Is()], comparators=[Name(id='val', ctx=Load())]), BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='type', ctx=Load()), args=[Name(id='val', ctx=Load())], keywords=[]), ops=[Is()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load())]), Compare(left=Subscript(value=Name(id='val', ctx=Load()), slice=Slice(upper=Call(func=Name(id='len', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), ctx=Load()), ops=[Eq()], comparators=[Name(id='self', ctx=Load())])])]))], decorator_list=[]), FunctionDef(name='__getattr__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='val')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Name(id='val', ctx=Load())), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Subscript(value=Name(id='val', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='isupper', ctx=Load()), args=[], keywords=[]))]), body=[Return(value=Call(func=Attribute(value=Name(id='tuple', ctx=Load()), attr='__getattribute__', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='val', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='new', ctx=Store())], value=Call(func=Name(id='_TokenType', ctx=Load()), args=[BinOp(left=Name(id='self', ctx=Load()), op=Add(), right=Tuple(elts=[Name(id='val', ctx=Load())], ctx=Load()))], keywords=[])), Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='val', ctx=Load()), Name(id='new', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='subtypes', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='new', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='new', ctx=Load()), attr='parent', ctx=Store())], value=Name(id='self', ctx=Load())), Return(value=Name(id='new', ctx=Load()))], decorator_list=[]), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=BinOp(left=Constant(value='Token'), op=Add(), right=BoolOp(op=Or(), values=[BoolOp(op=And(), values=[Name(id='self', ctx=Load()), Constant(value='.')]), Constant(value='')])), op=Add(), right=Call(func=Attribute(value=Constant(value='.'), attr='join', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])))], decorator_list=[]), FunctionDef(name='__copy__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Name(id='self', ctx=Load()))], decorator_list=[]), FunctionDef(name='__deepcopy__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='memo')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Name(id='self', ctx=Load()))], decorator_list=[])], decorator_list=[]), Assign(targets=[Name(id='Token', ctx=Store())], value=Call(func=Name(id='_TokenType', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='Text', ctx=Store())], value=Attribute(value=Name(id='Token', ctx=Load()), attr='Text', ctx=Load())), Assign(targets=[Name(id='Whitespace', ctx=Store())], value=Attribute(value=Name(id='Text', ctx=Load()), attr='Whitespace', ctx=Load())), Assign(targets=[Name(id='Escape', ctx=Store())], value=Attribute(value=Name(id='Token', ctx=Load()), attr='Escape', ctx=Load())), Assign(targets=[Name(id='Error', ctx=Store())], value=Attribute(value=Name(id='Token', ctx=Load()), attr='Error', ctx=Load())), Assign(targets=[Name(id='Other', ctx=Store())], value=Attribute(value=Name(id='Token', ctx=Load()), attr='Other', ctx=Load())), Assign(targets=[Name(id='Keyword', ctx=Store())], value=Attribute(value=Name(id='Token', ctx=Load()), attr='Keyword', ctx=Load())), Assign(targets=[Name(id='Name', ctx=Store())], value=Attribute(value=Name(id='Token', ctx=Load()), attr='Name', ctx=Load())), Assign(targets=[Name(id='Literal', ctx=Store())], value=Attribute(value=Name(id='Token', ctx=Load()), attr='Literal', ctx=Load())), Assign(targets=[Name(id='String', ctx=Store())], value=Attribute(value=Name(id='Literal', ctx=Load()), attr='String', ctx=Load())), Assign(targets=[Name(id='Number', ctx=Store())], value=Attribute(value=Name(id='Literal', ctx=Load()), attr='Number', ctx=Load())), Assign(targets=[Name(id='Punctuation', ctx=Store())], value=Attribute(value=Name(id='Token', ctx=Load()), attr='Punctuation', ctx=Load())), Assign(targets=[Name(id='Operator', ctx=Store())], value=Attribute(value=Name(id='Token', ctx=Load()), attr='Operator', ctx=Load())), Assign(targets=[Name(id='Comment', ctx=Store())], value=Attribute(value=Name(id='Token', ctx=Load()), attr='Comment', ctx=Load())), Assign(targets=[Name(id='Generic', ctx=Store())], value=Attribute(value=Name(id='Token', ctx=Load()), attr='Generic', ctx=Load())), Assign(targets=[Attribute(value=Name(id='Token', ctx=Load()), attr='Token', ctx=Store())], value=Name(id='Token', ctx=Load())), Assign(targets=[Attribute(value=Name(id='Token', ctx=Load()), attr='String', ctx=Store())], value=Name(id='String', ctx=Load())), Assign(targets=[Attribute(value=Name(id='Token', ctx=Load()), attr='Number', ctx=Store())], value=Name(id='Number', ctx=Load())), FunctionDef(name='is_token_subtype', args=arguments(posonlyargs=[], args=[arg(arg='ttype'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Return True if ``ttype`` is a subtype of ``other``.\n\n    exists for backwards compatibility. use ``ttype in other`` now.\n    ')), Return(value=Compare(left=Name(id='ttype', ctx=Load()), ops=[In()], comparators=[Name(id='other', ctx=Load())]))], decorator_list=[]), FunctionDef(name='string_to_tokentype', args=arguments(posonlyargs=[], args=[arg(arg='s')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    Convert a string into a token type::\n\n        >>> string_to_token('String.Double')\n        Token.Literal.String.Double\n        >>> string_to_token('Token.Literal.Number')\n        Token.Literal.Number\n        >>> string_to_token('')\n        Token\n\n    Tokens that are already tokens are returned unchanged:\n\n        >>> string_to_token(String)\n        Token.Literal.String\n    ")), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='s', ctx=Load()), Name(id='_TokenType', ctx=Load())], keywords=[]), body=[Return(value=Name(id='s', ctx=Load()))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='s', ctx=Load())), body=[Return(value=Name(id='Token', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='node', ctx=Store())], value=Name(id='Token', ctx=Load())), For(target=Name(id='item', ctx=Store()), iter=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[]), body=[Assign(targets=[Name(id='node', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='node', ctx=Load()), Name(id='item', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='node', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='STANDARD_TYPES', ctx=Store())], value=Dict(keys=[Name(id='Token', ctx=Load()), Name(id='Text', ctx=Load()), Name(id='Whitespace', ctx=Load()), Name(id='Escape', ctx=Load()), Name(id='Error', ctx=Load()), Name(id='Other', ctx=Load()), Name(id='Keyword', ctx=Load()), Attribute(value=Name(id='Keyword', ctx=Load()), attr='Constant', ctx=Load()), Attribute(value=Name(id='Keyword', ctx=Load()), attr='Declaration', ctx=Load()), Attribute(value=Name(id='Keyword', ctx=Load()), attr='Namespace', ctx=Load()), Attribute(value=Name(id='Keyword', ctx=Load()), attr='Pseudo', ctx=Load()), Attribute(value=Name(id='Keyword', ctx=Load()), attr='Reserved', ctx=Load()), Attribute(value=Name(id='Keyword', ctx=Load()), attr='Type', ctx=Load()), Name(id='Name', ctx=Load()), Attribute(value=Name(id='Name', ctx=Load()), attr='Attribute', ctx=Load()), Attribute(value=Name(id='Name', ctx=Load()), attr='Builtin', ctx=Load()), Attribute(value=Attribute(value=Name(id='Name', ctx=Load()), attr='Builtin', ctx=Load()), attr='Pseudo', ctx=Load()), Attribute(value=Name(id='Name', ctx=Load()), attr='Class', ctx=Load()), Attribute(value=Name(id='Name', ctx=Load()), attr='Constant', ctx=Load()), Attribute(value=Name(id='Name', ctx=Load()), attr='Decorator', ctx=Load()), Attribute(value=Name(id='Name', ctx=Load()), attr='Entity', ctx=Load()), Attribute(value=Name(id='Name', ctx=Load()), attr='Exception', ctx=Load()), Attribute(value=Name(id='Name', ctx=Load()), attr='Function', ctx=Load()), Attribute(value=Attribute(value=Name(id='Name', ctx=Load()), attr='Function', ctx=Load()), attr='Magic', ctx=Load()), Attribute(value=Name(id='Name', ctx=Load()), attr='Property', ctx=Load()), Attribute(value=Name(id='Name', ctx=Load()), attr='Label', ctx=Load()), Attribute(value=Name(id='Name', ctx=Load()), attr='Namespace', ctx=Load()), Attribute(value=Name(id='Name', ctx=Load()), attr='Other', ctx=Load()), Attribute(value=Name(id='Name', ctx=Load()), attr='Tag', ctx=Load()), Attribute(value=Name(id='Name', ctx=Load()), attr='Variable', ctx=Load()), Attribute(value=Attribute(value=Name(id='Name', ctx=Load()), attr='Variable', ctx=Load()), attr='Class', ctx=Load()), Attribute(value=Attribute(value=Name(id='Name', ctx=Load()), attr='Variable', ctx=Load()), attr='Global', ctx=Load()), Attribute(value=Attribute(value=Name(id='Name', ctx=Load()), attr='Variable', ctx=Load()), attr='Instance', ctx=Load()), Attribute(value=Attribute(value=Name(id='Name', ctx=Load()), attr='Variable', ctx=Load()), attr='Magic', ctx=Load()), Name(id='Literal', ctx=Load()), Attribute(value=Name(id='Literal', ctx=Load()), attr='Date', ctx=Load()), Name(id='String', ctx=Load()), Attribute(value=Name(id='String', ctx=Load()), attr='Affix', ctx=Load()), Attribute(value=Name(id='String', ctx=Load()), attr='Backtick', ctx=Load()), Attribute(value=Name(id='String', ctx=Load()), attr='Char', ctx=Load()), Attribute(value=Name(id='String', ctx=Load()), attr='Delimiter', ctx=Load()), Attribute(value=Name(id='String', ctx=Load()), attr='Doc', ctx=Load()), Attribute(value=Name(id='String', ctx=Load()), attr='Double', ctx=Load()), Attribute(value=Name(id='String', ctx=Load()), attr='Escape', ctx=Load()), Attribute(value=Name(id='String', ctx=Load()), attr='Heredoc', ctx=Load()), Attribute(value=Name(id='String', ctx=Load()), attr='Interpol', ctx=Load()), Attribute(value=Name(id='String', ctx=Load()), attr='Other', ctx=Load()), Attribute(value=Name(id='String', ctx=Load()), attr='Regex', ctx=Load()), Attribute(value=Name(id='String', ctx=Load()), attr='Single', ctx=Load()), Attribute(value=Name(id='String', ctx=Load()), attr='Symbol', ctx=Load()), Name(id='Number', ctx=Load()), Attribute(value=Name(id='Number', ctx=Load()), attr='Bin', ctx=Load()), Attribute(value=Name(id='Number', ctx=Load()), attr='Float', ctx=Load()), Attribute(value=Name(id='Number', ctx=Load()), attr='Hex', ctx=Load()), Attribute(value=Name(id='Number', ctx=Load()), attr='Integer', ctx=Load()), Attribute(value=Attribute(value=Name(id='Number', ctx=Load()), attr='Integer', ctx=Load()), attr='Long', ctx=Load()), Attribute(value=Name(id='Number', ctx=Load()), attr='Oct', ctx=Load()), Name(id='Operator', ctx=Load()), Attribute(value=Name(id='Operator', ctx=Load()), attr='Word', ctx=Load()), Name(id='Punctuation', ctx=Load()), Attribute(value=Name(id='Punctuation', ctx=Load()), attr='Marker', ctx=Load()), Name(id='Comment', ctx=Load()), Attribute(value=Name(id='Comment', ctx=Load()), attr='Hashbang', ctx=Load()), Attribute(value=Name(id='Comment', ctx=Load()), attr='Multiline', ctx=Load()), Attribute(value=Name(id='Comment', ctx=Load()), attr='Preproc', ctx=Load()), Attribute(value=Name(id='Comment', ctx=Load()), attr='PreprocFile', ctx=Load()), Attribute(value=Name(id='Comment', ctx=Load()), attr='Single', ctx=Load()), Attribute(value=Name(id='Comment', ctx=Load()), attr='Special', ctx=Load()), Name(id='Generic', ctx=Load()), Attribute(value=Name(id='Generic', ctx=Load()), attr='Deleted', ctx=Load()), Attribute(value=Name(id='Generic', ctx=Load()), attr='Emph', ctx=Load()), Attribute(value=Name(id='Generic', ctx=Load()), attr='Error', ctx=Load()), Attribute(value=Name(id='Generic', ctx=Load()), attr='Heading', ctx=Load()), Attribute(value=Name(id='Generic', ctx=Load()), attr='Inserted', ctx=Load()), Attribute(value=Name(id='Generic', ctx=Load()), attr='Output', ctx=Load()), Attribute(value=Name(id='Generic', ctx=Load()), attr='Prompt', ctx=Load()), Attribute(value=Name(id='Generic', ctx=Load()), attr='Strong', ctx=Load()), Attribute(value=Name(id='Generic', ctx=Load()), attr='Subheading', ctx=Load()), Attribute(value=Name(id='Generic', ctx=Load()), attr='Traceback', ctx=Load())], values=[Constant(value=''), Constant(value=''), Constant(value='w'), Constant(value='esc'), Constant(value='err'), Constant(value='x'), Constant(value='k'), Constant(value='kc'), Constant(value='kd'), Constant(value='kn'), Constant(value='kp'), Constant(value='kr'), Constant(value='kt'), Constant(value='n'), Constant(value='na'), Constant(value='nb'), Constant(value='bp'), Constant(value='nc'), Constant(value='no'), Constant(value='nd'), Constant(value='ni'), Constant(value='ne'), Constant(value='nf'), Constant(value='fm'), Constant(value='py'), Constant(value='nl'), Constant(value='nn'), Constant(value='nx'), Constant(value='nt'), Constant(value='nv'), Constant(value='vc'), Constant(value='vg'), Constant(value='vi'), Constant(value='vm'), Constant(value='l'), Constant(value='ld'), Constant(value='s'), Constant(value='sa'), Constant(value='sb'), Constant(value='sc'), Constant(value='dl'), Constant(value='sd'), Constant(value='s2'), Constant(value='se'), Constant(value='sh'), Constant(value='si'), Constant(value='sx'), Constant(value='sr'), Constant(value='s1'), Constant(value='ss'), Constant(value='m'), Constant(value='mb'), Constant(value='mf'), Constant(value='mh'), Constant(value='mi'), Constant(value='il'), Constant(value='mo'), Constant(value='o'), Constant(value='ow'), Constant(value='p'), Constant(value='pm'), Constant(value='c'), Constant(value='ch'), Constant(value='cm'), Constant(value='cp'), Constant(value='cpf'), Constant(value='c1'), Constant(value='cs'), Constant(value='g'), Constant(value='gd'), Constant(value='ge'), Constant(value='gr'), Constant(value='gh'), Constant(value='gi'), Constant(value='go'), Constant(value='gp'), Constant(value='gs'), Constant(value='gu'), Constant(value='gt')]))], type_ignores=[])