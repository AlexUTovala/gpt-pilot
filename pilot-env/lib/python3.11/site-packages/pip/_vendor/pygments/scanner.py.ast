Module(body=[Expr(value=Constant(value="\n    pygments.scanner\n    ~~~~~~~~~~~~~~~~\n\n    This library implements a regex based scanner. Some languages\n    like Pascal are easy to parse but have some keywords that\n    depend on the context. Because of this it's impossible to lex\n    that just by using a regular expression lexer like the\n    `RegexLexer`.\n\n    Have a look at the `DelphiLexer` to get an idea of how to use\n    this scanner.\n\n    :copyright: Copyright 2006-2023 by the Pygments team, see AUTHORS.\n    :license: BSD, see LICENSE for details.\n")), Import(names=[alias(name='re')]), ClassDef(name='EndOfText', bases=[Name(id='RuntimeError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Raise if end of text is reached and the user\n    tried to call a match function.\n    '))], decorator_list=[]), ClassDef(name='Scanner', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    Simple scanner\n\n    All method patterns are regular expression strings (not\n    compiled expressions!)\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='text'), arg(arg='flags')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[Expr(value=Constant(value='\n        :param text:    The text which should be scanned\n        :param flags:   default regular expression flags\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='data', ctx=Store())], value=Name(id='text', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='data_length', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='start_pos', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='pos', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='flags', ctx=Store())], value=Name(id='flags', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='last', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='match', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_re_cache', ctx=Store())], value=Dict(keys=[], values=[]))], decorator_list=[]), FunctionDef(name='eos', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='`True` if the scanner reached the end of text.')), Return(value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='pos', ctx=Load()), ops=[GtE()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='data_length', ctx=Load())]))], decorator_list=[]), Assign(targets=[Name(id='eos', ctx=Store())], value=Call(func=Name(id='property', ctx=Load()), args=[Name(id='eos', ctx=Load()), Attribute(value=Name(id='eos', ctx=Load()), attr='__doc__', ctx=Load())], keywords=[])), FunctionDef(name='check', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='pattern')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Apply `pattern` on the current position and return\n        the match object. (Doesn't touch pos). Use this for\n        lookahead.\n        ")), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='eos', ctx=Load()), body=[Raise(exc=Call(func=Name(id='EndOfText', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='pattern', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_re_cache', ctx=Load())]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_re_cache', ctx=Load()), slice=Name(id='pattern', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Name(id='pattern', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='flags', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_re_cache', ctx=Load()), slice=Name(id='pattern', ctx=Load()), ctx=Load()), attr='match', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='data', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='pos', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='pattern')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Apply a pattern on the current position and check\n        if it patches. Doesn't touch pos.\n        ")), Return(value=Compare(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='check', ctx=Load()), args=[Name(id='pattern', ctx=Load())], keywords=[]), ops=[IsNot()], comparators=[Constant(value=None)]))], decorator_list=[]), FunctionDef(name='scan', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='pattern')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Scan the text for the given pattern and update pos/match\n        and related fields. The return value is a boolean that\n        indicates if the pattern matched. The matched value is\n        stored on the instance as ``match``, the last value is\n        stored as ``last``. ``start_pos`` is the position of the\n        pointer before the pattern was matched, ``pos`` is the\n        end position.\n        ')), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='eos', ctx=Load()), body=[Raise(exc=Call(func=Name(id='EndOfText', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='pattern', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_re_cache', ctx=Load())]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_re_cache', ctx=Load()), slice=Name(id='pattern', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Name(id='pattern', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='flags', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='last', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='match', ctx=Load())), Assign(targets=[Name(id='m', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_re_cache', ctx=Load()), slice=Name(id='pattern', ctx=Load()), ctx=Load()), attr='match', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='data', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='pos', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='m', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=False))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='start_pos', ctx=Store())], value=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='start', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='pos', ctx=Store())], value=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='end', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='match', ctx=Store())], value=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='group', ctx=Load()), args=[], keywords=[])), Return(value=Constant(value=True))], decorator_list=[]), FunctionDef(name='get_char', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Scan exactly one char.')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='scan', ctx=Load()), args=[Constant(value='.')], keywords=[]))], decorator_list=[]), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Constant(value='<%s %d/%d>'), op=Mod(), right=Tuple(elts=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='pos', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='data_length', ctx=Load())], ctx=Load())))], decorator_list=[])], decorator_list=[])], type_ignores=[])