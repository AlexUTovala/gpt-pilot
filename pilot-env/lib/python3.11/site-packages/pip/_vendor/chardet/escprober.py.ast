Module(body=[ImportFrom(module='typing', names=[alias(name='Optional'), alias(name='Union')], level=0), ImportFrom(module='charsetprober', names=[alias(name='CharSetProber')], level=1), ImportFrom(module='codingstatemachine', names=[alias(name='CodingStateMachine')], level=1), ImportFrom(module='enums', names=[alias(name='LanguageFilter'), alias(name='MachineState'), alias(name='ProbingState')], level=1), ImportFrom(module='escsm', names=[alias(name='HZ_SM_MODEL'), alias(name='ISO2022CN_SM_MODEL'), alias(name='ISO2022JP_SM_MODEL'), alias(name='ISO2022KR_SM_MODEL')], level=1), ClassDef(name='EscCharSetProber', bases=[Name(id='CharSetProber', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    This CharSetProber uses a "code scheme" approach for detecting encodings,\n    whereby easily recognizable escape or shift sequences are relied on to\n    identify these encodings.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='lang_filter', annotation=Name(id='LanguageFilter', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Attribute(value=Name(id='LanguageFilter', ctx=Load()), attr='NONE', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='lang_filter', value=Name(id='lang_filter', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='coding_sm', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='lang_filter', ctx=Load()), op=BitAnd(), right=Attribute(value=Name(id='LanguageFilter', ctx=Load()), attr='CHINESE_SIMPLIFIED', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='coding_sm', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='CodingStateMachine', ctx=Load()), args=[Name(id='HZ_SM_MODEL', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='coding_sm', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='CodingStateMachine', ctx=Load()), args=[Name(id='ISO2022CN_SM_MODEL', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='lang_filter', ctx=Load()), op=BitAnd(), right=Attribute(value=Name(id='LanguageFilter', ctx=Load()), attr='JAPANESE', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='coding_sm', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='CodingStateMachine', ctx=Load()), args=[Name(id='ISO2022JP_SM_MODEL', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='lang_filter', ctx=Load()), op=BitAnd(), right=Attribute(value=Name(id='LanguageFilter', ctx=Load()), attr='KOREAN', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='coding_sm', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='CodingStateMachine', ctx=Load()), args=[Name(id='ISO2022KR_SM_MODEL', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='active_sm_count', ctx=Store())], value=Constant(value=0)), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_detected_charset', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_detected_language', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_state', ctx=Store())], value=Attribute(value=Name(id='ProbingState', ctx=Load()), attr='DETECTING', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='reset', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='reset', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='reset', ctx=Load()), args=[], keywords=[])), For(target=Name(id='coding_sm', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='coding_sm', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='coding_sm', ctx=Load()), attr='active', ctx=Store())], value=Constant(value=True)), Expr(value=Call(func=Attribute(value=Name(id='coding_sm', ctx=Load()), attr='reset', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='active_sm_count', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='coding_sm', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_detected_charset', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_detected_language', ctx=Store())], value=Constant(value=None))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='charset_name', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_detected_charset', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='language', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_detected_language', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='get_confidence', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=IfExp(test=Attribute(value=Name(id='self', ctx=Load()), attr='_detected_charset', ctx=Load()), body=Constant(value=0.99), orelse=Constant(value=0.0)))], decorator_list=[], returns=Name(id='float', ctx=Load())), FunctionDef(name='feed', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='byte_str', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='bytes', ctx=Load()), Name(id='bytearray', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='c', ctx=Store()), iter=Name(id='byte_str', ctx=Load()), body=[For(target=Name(id='coding_sm', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='coding_sm', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='coding_sm', ctx=Load()), attr='active', ctx=Load())), body=[Continue()], orelse=[]), Assign(targets=[Name(id='coding_state', ctx=Store())], value=Call(func=Attribute(value=Name(id='coding_sm', ctx=Load()), attr='next_state', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='coding_state', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='MachineState', ctx=Load()), attr='ERROR', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='coding_sm', ctx=Load()), attr='active', ctx=Store())], value=Constant(value=False)), AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='active_sm_count', ctx=Store()), op=Sub(), value=Constant(value=1)), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='active_sm_count', ctx=Load()), ops=[LtE()], comparators=[Constant(value=0)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_state', ctx=Store())], value=Attribute(value=Name(id='ProbingState', ctx=Load()), attr='NOT_ME', ctx=Load())), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='state', ctx=Load()))], orelse=[])], orelse=[If(test=Compare(left=Name(id='coding_state', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='MachineState', ctx=Load()), attr='ITS_ME', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_state', ctx=Store())], value=Attribute(value=Name(id='ProbingState', ctx=Load()), attr='FOUND_IT', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_detected_charset', ctx=Store())], value=Call(func=Attribute(value=Name(id='coding_sm', ctx=Load()), attr='get_coding_state_machine', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_detected_language', ctx=Store())], value=Attribute(value=Name(id='coding_sm', ctx=Load()), attr='language', ctx=Load())), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='state', ctx=Load()))], orelse=[])])], orelse=[])], orelse=[]), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='state', ctx=Load()))], decorator_list=[], returns=Name(id='ProbingState', ctx=Load()))], decorator_list=[])], type_ignores=[])