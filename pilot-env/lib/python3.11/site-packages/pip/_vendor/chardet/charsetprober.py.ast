Module(body=[Import(names=[alias(name='logging')]), Import(names=[alias(name='re')]), ImportFrom(module='typing', names=[alias(name='Optional'), alias(name='Union')], level=0), ImportFrom(module='enums', names=[alias(name='LanguageFilter'), alias(name='ProbingState')], level=1), Assign(targets=[Name(id='INTERNATIONAL_WORDS_PATTERN', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value=b'[a-zA-Z]*[\x80-\xff]+[a-zA-Z]*[^a-zA-Z\x80-\xff]?')], keywords=[])), ClassDef(name='CharSetProber', bases=[], keywords=[], body=[Assign(targets=[Name(id='SHORTCUT_THRESHOLD', ctx=Store())], value=Constant(value=0.95)), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='lang_filter', annotation=Name(id='LanguageFilter', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Attribute(value=Name(id='LanguageFilter', ctx=Load()), attr='NONE', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_state', ctx=Store())], value=Attribute(value=Name(id='ProbingState', ctx=Load()), attr='DETECTING', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='active', ctx=Store())], value=Constant(value=True)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='lang_filter', ctx=Store())], value=Name(id='lang_filter', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='reset', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_state', ctx=Store())], value=Attribute(value=Name(id='ProbingState', ctx=Load()), attr='DETECTING', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='charset_name', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=None))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='language', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Name(id='NotImplementedError', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='feed', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='byte_str', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='bytes', ctx=Load()), Name(id='bytearray', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Name(id='NotImplementedError', ctx=Load()))], decorator_list=[], returns=Name(id='ProbingState', ctx=Load())), FunctionDef(name='state', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_state', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='ProbingState', ctx=Load())), FunctionDef(name='get_confidence', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=0.0))], decorator_list=[], returns=Name(id='float', ctx=Load())), FunctionDef(name='filter_high_byte_only', args=arguments(posonlyargs=[], args=[arg(arg='buf', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='bytes', ctx=Load()), Name(id='bytearray', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='buf', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value=b'([\x00-\x7f])+'), Constant(value=b' '), Name(id='buf', ctx=Load())], keywords=[])), Return(value=Name(id='buf', ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Name(id='bytes', ctx=Load())), FunctionDef(name='filter_international_words', args=arguments(posonlyargs=[], args=[arg(arg='buf', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='bytes', ctx=Load()), Name(id='bytearray', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        We define three types of bytes:\n        alphabet: english alphabets [a-zA-Z]\n        international: international characters [\x80-ÿ]\n        marker: everything else [^a-zA-Z\x80-ÿ]\n        The input buffer can be thought to contain a series of words delimited\n        by markers. This function works to filter all words that contain at\n        least one international character. All contiguous sequences of markers\n        are replaced by a single space ascii character.\n        This filter applies to all scripts which do not use English characters.\n        ')), Assign(targets=[Name(id='filtered', ctx=Store())], value=Call(func=Name(id='bytearray', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='words', ctx=Store())], value=Call(func=Attribute(value=Name(id='INTERNATIONAL_WORDS_PATTERN', ctx=Load()), attr='findall', ctx=Load()), args=[Name(id='buf', ctx=Load())], keywords=[])), For(target=Name(id='word', ctx=Store()), iter=Name(id='words', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='filtered', ctx=Load()), attr='extend', ctx=Load()), args=[Subscript(value=Name(id='word', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])), Assign(targets=[Name(id='last_char', ctx=Store())], value=Subscript(value=Name(id='word', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='last_char', ctx=Load()), attr='isalpha', ctx=Load()), args=[], keywords=[])), Compare(left=Name(id='last_char', ctx=Load()), ops=[Lt()], comparators=[Constant(value=b'\x80')])]), body=[Assign(targets=[Name(id='last_char', ctx=Store())], value=Constant(value=b' '))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='filtered', ctx=Load()), attr='extend', ctx=Load()), args=[Name(id='last_char', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='filtered', ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Name(id='bytearray', ctx=Load())), FunctionDef(name='remove_xml_tags', args=arguments(posonlyargs=[], args=[arg(arg='buf', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='bytes', ctx=Load()), Name(id='bytearray', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Returns a copy of ``buf`` that retains only the sequences of English\n        alphabet and high byte characters that are not between <> characters.\n        This filter can be applied to all scripts which contain both English\n        characters and extended ASCII characters, but is currently only used by\n        ``Latin1Prober``.\n        ')), Assign(targets=[Name(id='filtered', ctx=Store())], value=Call(func=Name(id='bytearray', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='in_tag', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='prev', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='buf', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='memoryview', ctx=Load()), args=[Name(id='buf', ctx=Load())], keywords=[]), attr='cast', ctx=Load()), args=[Constant(value='c')], keywords=[])), For(target=Tuple(elts=[Name(id='curr', ctx=Store()), Name(id='buf_char', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='buf', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='buf_char', ctx=Load()), ops=[Eq()], comparators=[Constant(value=b'>')]), body=[Assign(targets=[Name(id='prev', ctx=Store())], value=BinOp(left=Name(id='curr', ctx=Load()), op=Add(), right=Constant(value=1))), Assign(targets=[Name(id='in_tag', ctx=Store())], value=Constant(value=False))], orelse=[If(test=Compare(left=Name(id='buf_char', ctx=Load()), ops=[Eq()], comparators=[Constant(value=b'<')]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='curr', ctx=Load()), ops=[Gt()], comparators=[Name(id='prev', ctx=Load())]), UnaryOp(op=Not(), operand=Name(id='in_tag', ctx=Load()))]), body=[Expr(value=Call(func=Attribute(value=Name(id='filtered', ctx=Load()), attr='extend', ctx=Load()), args=[Subscript(value=Name(id='buf', ctx=Load()), slice=Slice(lower=Name(id='prev', ctx=Load()), upper=Name(id='curr', ctx=Load())), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='filtered', ctx=Load()), attr='extend', ctx=Load()), args=[Constant(value=b' ')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='in_tag', ctx=Store())], value=Constant(value=True))], orelse=[])])], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='in_tag', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='filtered', ctx=Load()), attr='extend', ctx=Load()), args=[Subscript(value=Name(id='buf', ctx=Load()), slice=Slice(lower=Name(id='prev', ctx=Load())), ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='filtered', ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Name(id='bytes', ctx=Load()))], decorator_list=[])], type_ignores=[])