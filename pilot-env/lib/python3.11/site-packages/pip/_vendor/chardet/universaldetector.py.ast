Module(body=[Expr(value=Constant(value='\nModule containing the UniversalDetector detector class, which is the primary\nclass a user of ``chardet`` should use.\n\n:author: Mark Pilgrim (initial port to Python)\n:author: Shy Shalom (original C code)\n:author: Dan Blanchard (major refactoring for 3.0)\n:author: Ian Cordasco\n')), Import(names=[alias(name='codecs')]), Import(names=[alias(name='logging')]), Import(names=[alias(name='re')]), ImportFrom(module='typing', names=[alias(name='List'), alias(name='Optional'), alias(name='Union')], level=0), ImportFrom(module='charsetgroupprober', names=[alias(name='CharSetGroupProber')], level=1), ImportFrom(module='charsetprober', names=[alias(name='CharSetProber')], level=1), ImportFrom(module='enums', names=[alias(name='InputState'), alias(name='LanguageFilter'), alias(name='ProbingState')], level=1), ImportFrom(module='escprober', names=[alias(name='EscCharSetProber')], level=1), ImportFrom(module='latin1prober', names=[alias(name='Latin1Prober')], level=1), ImportFrom(module='macromanprober', names=[alias(name='MacRomanProber')], level=1), ImportFrom(module='mbcsgroupprober', names=[alias(name='MBCSGroupProber')], level=1), ImportFrom(module='resultdict', names=[alias(name='ResultDict')], level=1), ImportFrom(module='sbcsgroupprober', names=[alias(name='SBCSGroupProber')], level=1), ImportFrom(module='utf1632prober', names=[alias(name='UTF1632Prober')], level=1), ClassDef(name='UniversalDetector', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    The ``UniversalDetector`` class underlies the ``chardet.detect`` function\n    and coordinates all of the different charset probers.\n\n    To get a ``dict`` containing an encoding and its confidence, you can simply\n    run:\n\n    .. code::\n\n            u = UniversalDetector()\n            u.feed(some_bytes)\n            u.close()\n            detected = u.result\n\n    ')), Assign(targets=[Name(id='MINIMUM_THRESHOLD', ctx=Store())], value=Constant(value=0.2)), Assign(targets=[Name(id='HIGH_BYTE_DETECTOR', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value=b'[\x80-\xff]')], keywords=[])), Assign(targets=[Name(id='ESC_DETECTOR', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value=b'(\x1b|~{)')], keywords=[])), Assign(targets=[Name(id='WIN_BYTE_DETECTOR', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value=b'[\x80-\x9f]')], keywords=[])), Assign(targets=[Name(id='ISO_WIN_MAP', ctx=Store())], value=Dict(keys=[Constant(value='iso-8859-1'), Constant(value='iso-8859-2'), Constant(value='iso-8859-5'), Constant(value='iso-8859-6'), Constant(value='iso-8859-7'), Constant(value='iso-8859-8'), Constant(value='iso-8859-9'), Constant(value='iso-8859-13')], values=[Constant(value='Windows-1252'), Constant(value='Windows-1250'), Constant(value='Windows-1251'), Constant(value='Windows-1256'), Constant(value='Windows-1253'), Constant(value='Windows-1255'), Constant(value='Windows-1254'), Constant(value='Windows-1257')])), Assign(targets=[Name(id='LEGACY_MAP', ctx=Store())], value=Dict(keys=[Constant(value='ascii'), Constant(value='iso-8859-1'), Constant(value='tis-620'), Constant(value='iso-8859-9'), Constant(value='gb2312'), Constant(value='euc-kr'), Constant(value='utf-16le')], values=[Constant(value='Windows-1252'), Constant(value='Windows-1252'), Constant(value='ISO-8859-11'), Constant(value='Windows-1254'), Constant(value='GB18030'), Constant(value='CP949'), Constant(value='UTF-16')])), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='lang_filter', annotation=Name(id='LanguageFilter', ctx=Load())), arg(arg='should_rename_legacy', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Attribute(value=Name(id='LanguageFilter', ctx=Load()), attr='ALL', ctx=Load()), Constant(value=False)]), body=[AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_esc_charset_prober', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='EscCharSetProber', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_utf1632_prober', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='UTF1632Prober', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_charset_probers', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='CharSetProber', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='result', ctx=Store()), annotation=Name(id='ResultDict', ctx=Load()), value=Dict(keys=[Constant(value='encoding'), Constant(value='confidence'), Constant(value='language')], values=[Constant(value=None), Constant(value=0.0), Constant(value=None)]), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='done', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_got_data', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_input_state', ctx=Store())], value=Attribute(value=Name(id='InputState', ctx=Load()), attr='PURE_ASCII', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_last_char', ctx=Store())], value=Constant(value=b'')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='lang_filter', ctx=Store())], value=Name(id='lang_filter', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_has_win_bytes', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='should_rename_legacy', ctx=Store())], value=Name(id='should_rename_legacy', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='reset', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='input_state', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_input_state', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load())), FunctionDef(name='has_win_bytes', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_has_win_bytes', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='charset_probers', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_charset_probers', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='CharSetProber', ctx=Load()), ctx=Load())), FunctionDef(name='reset', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Reset the UniversalDetector and all of its probers back to their\n        initial states.  This is called by ``__init__``, so you only need to\n        call this directly in between analyses of different documents.\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='result', ctx=Store())], value=Dict(keys=[Constant(value='encoding'), Constant(value='confidence'), Constant(value='language')], values=[Constant(value=None), Constant(value=0.0), Constant(value=None)])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='done', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_got_data', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_has_win_bytes', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_input_state', ctx=Store())], value=Attribute(value=Name(id='InputState', ctx=Load()), attr='PURE_ASCII', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_last_char', ctx=Store())], value=Constant(value=b'')), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_esc_charset_prober', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_esc_charset_prober', ctx=Load()), attr='reset', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_utf1632_prober', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_utf1632_prober', ctx=Load()), attr='reset', ctx=Load()), args=[], keywords=[]))], orelse=[]), For(target=Name(id='prober', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_charset_probers', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='prober', ctx=Load()), attr='reset', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='feed', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='byte_str', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='bytes', ctx=Load()), Name(id='bytearray', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Takes a chunk of a document and feeds it through all of the relevant\n        charset probers.\n\n        After calling ``feed``, you can check the value of the ``done``\n        attribute to see if you need to continue feeding the\n        ``UniversalDetector`` more data, or if it has made a prediction\n        (in the ``result`` attribute).\n\n        .. note::\n           You should always call ``close`` when you're done feeding in your\n           document if ``done`` is not already ``True``.\n        ")), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='done', ctx=Load()), body=[Return()], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='byte_str', ctx=Load())), body=[Return()], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='byte_str', ctx=Load()), Name(id='bytearray', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='byte_str', ctx=Store())], value=Call(func=Name(id='bytearray', ctx=Load()), args=[Name(id='byte_str', ctx=Load())], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='_got_data', ctx=Load())), body=[If(test=Call(func=Attribute(value=Name(id='byte_str', ctx=Load()), attr='startswith', ctx=Load()), args=[Attribute(value=Name(id='codecs', ctx=Load()), attr='BOM_UTF8', ctx=Load())], keywords=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='result', ctx=Store())], value=Dict(keys=[Constant(value='encoding'), Constant(value='confidence'), Constant(value='language')], values=[Constant(value='UTF-8-SIG'), Constant(value=1.0), Constant(value='')]))], orelse=[If(test=Call(func=Attribute(value=Name(id='byte_str', ctx=Load()), attr='startswith', ctx=Load()), args=[Tuple(elts=[Attribute(value=Name(id='codecs', ctx=Load()), attr='BOM_UTF32_LE', ctx=Load()), Attribute(value=Name(id='codecs', ctx=Load()), attr='BOM_UTF32_BE', ctx=Load())], ctx=Load())], keywords=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='result', ctx=Store())], value=Dict(keys=[Constant(value='encoding'), Constant(value='confidence'), Constant(value='language')], values=[Constant(value='UTF-32'), Constant(value=1.0), Constant(value='')]))], orelse=[If(test=Call(func=Attribute(value=Name(id='byte_str', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value=b'\xfe\xff\x00\x00')], keywords=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='result', ctx=Store())], value=Dict(keys=[Constant(value='encoding'), Constant(value='confidence'), Constant(value='language')], values=[Constant(value='X-ISO-10646-UCS-4-3412'), Constant(value=1.0), Constant(value='')]))], orelse=[If(test=Call(func=Attribute(value=Name(id='byte_str', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value=b'\x00\x00\xff\xfe')], keywords=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='result', ctx=Store())], value=Dict(keys=[Constant(value='encoding'), Constant(value='confidence'), Constant(value='language')], values=[Constant(value='X-ISO-10646-UCS-4-2143'), Constant(value=1.0), Constant(value='')]))], orelse=[If(test=Call(func=Attribute(value=Name(id='byte_str', ctx=Load()), attr='startswith', ctx=Load()), args=[Tuple(elts=[Attribute(value=Name(id='codecs', ctx=Load()), attr='BOM_LE', ctx=Load()), Attribute(value=Name(id='codecs', ctx=Load()), attr='BOM_BE', ctx=Load())], ctx=Load())], keywords=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='result', ctx=Store())], value=Dict(keys=[Constant(value='encoding'), Constant(value='confidence'), Constant(value='language')], values=[Constant(value='UTF-16'), Constant(value=1.0), Constant(value='')]))], orelse=[])])])])]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_got_data', ctx=Store())], value=Constant(value=True)), If(test=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='result', ctx=Load()), slice=Constant(value='encoding'), ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='done', ctx=Store())], value=Constant(value=True)), Return()], orelse=[])], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_input_state', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='InputState', ctx=Load()), attr='PURE_ASCII', ctx=Load())]), body=[If(test=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='HIGH_BYTE_DETECTOR', ctx=Load()), attr='search', ctx=Load()), args=[Name(id='byte_str', ctx=Load())], keywords=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_input_state', ctx=Store())], value=Attribute(value=Name(id='InputState', ctx=Load()), attr='HIGH_BYTE', ctx=Load()))], orelse=[If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_input_state', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='InputState', ctx=Load()), attr='PURE_ASCII', ctx=Load())]), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='ESC_DETECTOR', ctx=Load()), attr='search', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_last_char', ctx=Load()), op=Add(), right=Name(id='byte_str', ctx=Load()))], keywords=[])]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_input_state', ctx=Store())], value=Attribute(value=Name(id='InputState', ctx=Load()), attr='ESC_ASCII', ctx=Load()))], orelse=[])])], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_last_char', ctx=Store())], value=Subscript(value=Name(id='byte_str', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='_utf1632_prober', ctx=Load())), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_utf1632_prober', ctx=Store())], value=Call(func=Name(id='UTF1632Prober', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_utf1632_prober', ctx=Load()), attr='state', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='ProbingState', ctx=Load()), attr='DETECTING', ctx=Load())]), body=[If(test=Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_utf1632_prober', ctx=Load()), attr='feed', ctx=Load()), args=[Name(id='byte_str', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Attribute(value=Name(id='ProbingState', ctx=Load()), attr='FOUND_IT', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='result', ctx=Store())], value=Dict(keys=[Constant(value='encoding'), Constant(value='confidence'), Constant(value='language')], values=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_utf1632_prober', ctx=Load()), attr='charset_name', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_utf1632_prober', ctx=Load()), attr='get_confidence', ctx=Load()), args=[], keywords=[]), Constant(value='')])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='done', ctx=Store())], value=Constant(value=True)), Return()], orelse=[])], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_input_state', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='InputState', ctx=Load()), attr='ESC_ASCII', ctx=Load())]), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='_esc_charset_prober', ctx=Load())), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_esc_charset_prober', ctx=Store())], value=Call(func=Name(id='EscCharSetProber', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='lang_filter', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_esc_charset_prober', ctx=Load()), attr='feed', ctx=Load()), args=[Name(id='byte_str', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Attribute(value=Name(id='ProbingState', ctx=Load()), attr='FOUND_IT', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='result', ctx=Store())], value=Dict(keys=[Constant(value='encoding'), Constant(value='confidence'), Constant(value='language')], values=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_esc_charset_prober', ctx=Load()), attr='charset_name', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_esc_charset_prober', ctx=Load()), attr='get_confidence', ctx=Load()), args=[], keywords=[]), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_esc_charset_prober', ctx=Load()), attr='language', ctx=Load())])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='done', ctx=Store())], value=Constant(value=True))], orelse=[])], orelse=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_input_state', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='InputState', ctx=Load()), attr='HIGH_BYTE', ctx=Load())]), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='_charset_probers', ctx=Load())), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_charset_probers', ctx=Store())], value=List(elts=[Call(func=Name(id='MBCSGroupProber', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='lang_filter', ctx=Load())], keywords=[])], ctx=Load())), If(test=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='lang_filter', ctx=Load()), op=BitAnd(), right=Attribute(value=Name(id='LanguageFilter', ctx=Load()), attr='NON_CJK', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_charset_probers', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='SBCSGroupProber', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_charset_probers', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='Latin1Prober', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_charset_probers', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='MacRomanProber', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[]), For(target=Name(id='prober', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_charset_probers', ctx=Load()), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='prober', ctx=Load()), attr='feed', ctx=Load()), args=[Name(id='byte_str', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Attribute(value=Name(id='ProbingState', ctx=Load()), attr='FOUND_IT', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='result', ctx=Store())], value=Dict(keys=[Constant(value='encoding'), Constant(value='confidence'), Constant(value='language')], values=[Attribute(value=Name(id='prober', ctx=Load()), attr='charset_name', ctx=Load()), Call(func=Attribute(value=Name(id='prober', ctx=Load()), attr='get_confidence', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='prober', ctx=Load()), attr='language', ctx=Load())])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='done', ctx=Store())], value=Constant(value=True)), Break()], orelse=[])], orelse=[]), If(test=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='WIN_BYTE_DETECTOR', ctx=Load()), attr='search', ctx=Load()), args=[Name(id='byte_str', ctx=Load())], keywords=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_has_win_bytes', ctx=Store())], value=Constant(value=True))], orelse=[])], orelse=[])])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='close', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Stop analyzing the current document and come up with a final\n        prediction.\n\n        :returns:  The ``result`` attribute, a ``dict`` with the keys\n                   `encoding`, `confidence`, and `language`.\n        ')), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='done', ctx=Load()), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='result', ctx=Load()))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='done', ctx=Store())], value=Constant(value=True)), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='_got_data', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='no data received!')], keywords=[]))], orelse=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_input_state', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='InputState', ctx=Load()), attr='PURE_ASCII', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='result', ctx=Store())], value=Dict(keys=[Constant(value='encoding'), Constant(value='confidence'), Constant(value='language')], values=[Constant(value='ascii'), Constant(value=1.0), Constant(value='')]))], orelse=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_input_state', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='InputState', ctx=Load()), attr='HIGH_BYTE', ctx=Load())]), body=[Assign(targets=[Name(id='prober_confidence', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='max_prober_confidence', ctx=Store())], value=Constant(value=0.0)), Assign(targets=[Name(id='max_prober', ctx=Store())], value=Constant(value=None)), For(target=Name(id='prober', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_charset_probers', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Name(id='prober', ctx=Load())), body=[Continue()], orelse=[]), Assign(targets=[Name(id='prober_confidence', ctx=Store())], value=Call(func=Attribute(value=Name(id='prober', ctx=Load()), attr='get_confidence', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='prober_confidence', ctx=Load()), ops=[Gt()], comparators=[Name(id='max_prober_confidence', ctx=Load())]), body=[Assign(targets=[Name(id='max_prober_confidence', ctx=Store())], value=Name(id='prober_confidence', ctx=Load())), Assign(targets=[Name(id='max_prober', ctx=Store())], value=Name(id='prober', ctx=Load()))], orelse=[])], orelse=[]), If(test=BoolOp(op=And(), values=[Name(id='max_prober', ctx=Load()), Compare(left=Name(id='max_prober_confidence', ctx=Load()), ops=[Gt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='MINIMUM_THRESHOLD', ctx=Load())])]), body=[Assign(targets=[Name(id='charset_name', ctx=Store())], value=Attribute(value=Name(id='max_prober', ctx=Load()), attr='charset_name', ctx=Load())), Assert(test=Compare(left=Name(id='charset_name', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Name(id='lower_charset_name', ctx=Store())], value=Call(func=Attribute(value=Name(id='charset_name', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='confidence', ctx=Store())], value=Call(func=Attribute(value=Name(id='max_prober', ctx=Load()), attr='get_confidence', ctx=Load()), args=[], keywords=[])), If(test=Call(func=Attribute(value=Name(id='lower_charset_name', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='iso-8859')], keywords=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_has_win_bytes', ctx=Load()), body=[Assign(targets=[Name(id='charset_name', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='ISO_WIN_MAP', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='lower_charset_name', ctx=Load()), Name(id='charset_name', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='should_rename_legacy', ctx=Load()), body=[Assign(targets=[Name(id='charset_name', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='LEGACY_MAP', ctx=Load()), attr='get', ctx=Load()), args=[Call(func=Attribute(value=BoolOp(op=Or(), values=[Name(id='charset_name', ctx=Load()), Constant(value='')]), attr='lower', ctx=Load()), args=[], keywords=[]), Name(id='charset_name', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='result', ctx=Store())], value=Dict(keys=[Constant(value='encoding'), Constant(value='confidence'), Constant(value='language')], values=[Name(id='charset_name', ctx=Load()), Name(id='confidence', ctx=Load()), Attribute(value=Name(id='max_prober', ctx=Load()), attr='language', ctx=Load())]))], orelse=[])], orelse=[])])]), If(test=Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='logger', ctx=Load()), attr='getEffectiveLevel', ctx=Load()), args=[], keywords=[]), ops=[LtE()], comparators=[Attribute(value=Name(id='logging', ctx=Load()), attr='DEBUG', ctx=Load())]), body=[If(test=Compare(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='result', ctx=Load()), slice=Constant(value='encoding'), ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='no probers hit minimum threshold')], keywords=[])), For(target=Name(id='group_prober', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_charset_probers', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Name(id='group_prober', ctx=Load())), body=[Continue()], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='group_prober', ctx=Load()), Name(id='CharSetGroupProber', ctx=Load())], keywords=[]), body=[For(target=Name(id='prober', ctx=Store()), iter=Attribute(value=Name(id='group_prober', ctx=Load()), attr='probers', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='%s %s confidence = %s'), Attribute(value=Name(id='prober', ctx=Load()), attr='charset_name', ctx=Load()), Attribute(value=Name(id='prober', ctx=Load()), attr='language', ctx=Load()), Call(func=Attribute(value=Name(id='prober', ctx=Load()), attr='get_confidence', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[])], orelse=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='%s %s confidence = %s'), Attribute(value=Name(id='group_prober', ctx=Load()), attr='charset_name', ctx=Load()), Attribute(value=Name(id='group_prober', ctx=Load()), attr='language', ctx=Load()), Call(func=Attribute(value=Name(id='group_prober', ctx=Load()), attr='get_confidence', ctx=Load()), args=[], keywords=[])], keywords=[]))])], orelse=[])], orelse=[])], orelse=[]), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='result', ctx=Load()))], decorator_list=[], returns=Name(id='ResultDict', ctx=Load()))], decorator_list=[])], type_ignores=[])