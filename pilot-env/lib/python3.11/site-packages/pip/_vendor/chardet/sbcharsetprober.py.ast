Module(body=[ImportFrom(module='typing', names=[alias(name='Dict'), alias(name='List'), alias(name='NamedTuple'), alias(name='Optional'), alias(name='Union')], level=0), ImportFrom(module='charsetprober', names=[alias(name='CharSetProber')], level=1), ImportFrom(module='enums', names=[alias(name='CharacterCategory'), alias(name='ProbingState'), alias(name='SequenceLikelihood')], level=1), ClassDef(name='SingleByteCharSetModel', bases=[Name(id='NamedTuple', ctx=Load())], keywords=[], body=[AnnAssign(target=Name(id='charset_name', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='language', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='char_to_order_map', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='language_model', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='typical_positive_ratio', ctx=Store()), annotation=Name(id='float', ctx=Load()), simple=1), AnnAssign(target=Name(id='keep_ascii_letters', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1), AnnAssign(target=Name(id='alphabet', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1)], decorator_list=[]), ClassDef(name='SingleByteCharSetProber', bases=[Name(id='CharSetProber', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='SAMPLE_SIZE', ctx=Store())], value=Constant(value=64)), Assign(targets=[Name(id='SB_ENOUGH_REL_THRESHOLD', ctx=Store())], value=Constant(value=1024)), Assign(targets=[Name(id='POSITIVE_SHORTCUT_THRESHOLD', ctx=Store())], value=Constant(value=0.95)), Assign(targets=[Name(id='NEGATIVE_SHORTCUT_THRESHOLD', ctx=Store())], value=Constant(value=0.05)), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='model', annotation=Name(id='SingleByteCharSetModel', ctx=Load())), arg(arg='is_reversed', annotation=Name(id='bool', ctx=Load())), arg(arg='name_prober', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='CharSetProber', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_model', ctx=Store())], value=Name(id='model', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_reversed', ctx=Store())], value=Name(id='is_reversed', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_name_prober', ctx=Store())], value=Name(id='name_prober', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_last_order', ctx=Store())], value=Constant(value=255)), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_seq_counters', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_total_seqs', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_total_char', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_control_char', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_freq_char', ctx=Store())], value=Constant(value=0)), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='reset', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='reset', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='reset', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_last_order', ctx=Store())], value=Constant(value=255)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_seq_counters', ctx=Store())], value=BinOp(left=List(elts=[Constant(value=0)], ctx=Load()), op=Mult(), right=Call(func=Attribute(value=Name(id='SequenceLikelihood', ctx=Load()), attr='get_num_categories', ctx=Load()), args=[], keywords=[]))), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_total_seqs', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_total_char', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_control_char', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_freq_char', ctx=Store())], value=Constant(value=0))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='charset_name', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_name_prober', ctx=Load()), body=[Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_name_prober', ctx=Load()), attr='charset_name', ctx=Load()))], orelse=[]), Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_model', ctx=Load()), attr='charset_name', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='language', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_name_prober', ctx=Load()), body=[Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_name_prober', ctx=Load()), attr='language', ctx=Load()))], orelse=[]), Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_model', ctx=Load()), attr='language', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='feed', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='byte_str', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='bytes', ctx=Load()), Name(id='bytearray', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_model', ctx=Load()), attr='keep_ascii_letters', ctx=Load())), body=[Assign(targets=[Name(id='byte_str', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='filter_international_words', ctx=Load()), args=[Name(id='byte_str', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='byte_str', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='remove_xml_tags', ctx=Load()), args=[Name(id='byte_str', ctx=Load())], keywords=[]))]), If(test=UnaryOp(op=Not(), operand=Name(id='byte_str', ctx=Load())), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='state', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='char_to_order_map', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_model', ctx=Load()), attr='char_to_order_map', ctx=Load())), Assign(targets=[Name(id='language_model', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_model', ctx=Load()), attr='language_model', ctx=Load())), For(target=Name(id='char', ctx=Store()), iter=Name(id='byte_str', ctx=Load()), body=[Assign(targets=[Name(id='order', ctx=Store())], value=Call(func=Attribute(value=Name(id='char_to_order_map', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='char', ctx=Load()), Attribute(value=Name(id='CharacterCategory', ctx=Load()), attr='UNDEFINED', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='order', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Name(id='CharacterCategory', ctx=Load()), attr='CONTROL', ctx=Load())]), body=[AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_total_char', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), If(test=Compare(left=Name(id='order', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='SAMPLE_SIZE', ctx=Load())]), body=[AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_freq_char', ctx=Store()), op=Add(), value=Constant(value=1)), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_last_order', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='SAMPLE_SIZE', ctx=Load())]), body=[AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_total_seqs', ctx=Store()), op=Add(), value=Constant(value=1)), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='_reversed', ctx=Load())), body=[Assign(targets=[Name(id='lm_cat', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='language_model', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='_last_order', ctx=Load()), ctx=Load()), slice=Name(id='order', ctx=Load()), ctx=Load()))], orelse=[Assign(targets=[Name(id='lm_cat', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='language_model', ctx=Load()), slice=Name(id='order', ctx=Load()), ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='_last_order', ctx=Load()), ctx=Load()))]), AugAssign(target=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_seq_counters', ctx=Load()), slice=Name(id='lm_cat', ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_last_order', ctx=Store())], value=Name(id='order', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='charset_name', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_model', ctx=Load()), attr='charset_name', ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='state', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='ProbingState', ctx=Load()), attr='DETECTING', ctx=Load())]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_total_seqs', ctx=Load()), ops=[Gt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='SB_ENOUGH_REL_THRESHOLD', ctx=Load())]), body=[Assign(targets=[Name(id='confidence', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_confidence', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='confidence', ctx=Load()), ops=[Gt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='POSITIVE_SHORTCUT_THRESHOLD', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='%s confidence = %s, we have a winner'), Name(id='charset_name', ctx=Load()), Name(id='confidence', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_state', ctx=Store())], value=Attribute(value=Name(id='ProbingState', ctx=Load()), attr='FOUND_IT', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='confidence', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='NEGATIVE_SHORTCUT_THRESHOLD', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='%s confidence = %s, below negative shortcut threshold %s'), Name(id='charset_name', ctx=Load()), Name(id='confidence', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='NEGATIVE_SHORTCUT_THRESHOLD', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_state', ctx=Store())], value=Attribute(value=Name(id='ProbingState', ctx=Load()), attr='NOT_ME', ctx=Load()))], orelse=[])])], orelse=[])], orelse=[]), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='state', ctx=Load()))], decorator_list=[], returns=Name(id='ProbingState', ctx=Load())), FunctionDef(name='get_confidence', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='r', ctx=Store())], value=Constant(value=0.01)), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_total_seqs', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='r', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_seq_counters', ctx=Load()), slice=Attribute(value=Name(id='SequenceLikelihood', ctx=Load()), attr='POSITIVE', ctx=Load()), ctx=Load()), op=Add(), right=BinOp(left=Constant(value=0.25), op=Mult(), right=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_seq_counters', ctx=Load()), slice=Attribute(value=Name(id='SequenceLikelihood', ctx=Load()), attr='LIKELY', ctx=Load()), ctx=Load()))), op=Div(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_total_seqs', ctx=Load())), op=Div(), right=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_model', ctx=Load()), attr='typical_positive_ratio', ctx=Load()))), Assign(targets=[Name(id='r', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='r', ctx=Load()), op=Mult(), right=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_total_char', ctx=Load()), op=Sub(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_control_char', ctx=Load()))), op=Div(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_total_char', ctx=Load()))), Assign(targets=[Name(id='r', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='r', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_freq_char', ctx=Load())), op=Div(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_total_char', ctx=Load()))), If(test=Compare(left=Name(id='r', ctx=Load()), ops=[GtE()], comparators=[Constant(value=1.0)]), body=[Assign(targets=[Name(id='r', ctx=Store())], value=Constant(value=0.99))], orelse=[])], orelse=[]), Return(value=Name(id='r', ctx=Load()))], decorator_list=[], returns=Name(id='float', ctx=Load()))], decorator_list=[])], type_ignores=[])