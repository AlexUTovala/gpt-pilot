Module(body=[ImportFrom(module='typing', names=[alias(name='Optional'), alias(name='Union')], level=0), ImportFrom(module='charsetprober', names=[alias(name='CharSetProber')], level=1), ImportFrom(module='enums', names=[alias(name='ProbingState')], level=1), ImportFrom(module='sbcharsetprober', names=[alias(name='SingleByteCharSetProber')], level=1), ClassDef(name='HebrewProber', bases=[Name(id='CharSetProber', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='SPACE', ctx=Store())], value=Constant(value=32)), Assign(targets=[Name(id='FINAL_KAF', ctx=Store())], value=Constant(value=234)), Assign(targets=[Name(id='NORMAL_KAF', ctx=Store())], value=Constant(value=235)), Assign(targets=[Name(id='FINAL_MEM', ctx=Store())], value=Constant(value=237)), Assign(targets=[Name(id='NORMAL_MEM', ctx=Store())], value=Constant(value=238)), Assign(targets=[Name(id='FINAL_NUN', ctx=Store())], value=Constant(value=239)), Assign(targets=[Name(id='NORMAL_NUN', ctx=Store())], value=Constant(value=240)), Assign(targets=[Name(id='FINAL_PE', ctx=Store())], value=Constant(value=243)), Assign(targets=[Name(id='NORMAL_PE', ctx=Store())], value=Constant(value=244)), Assign(targets=[Name(id='FINAL_TSADI', ctx=Store())], value=Constant(value=245)), Assign(targets=[Name(id='NORMAL_TSADI', ctx=Store())], value=Constant(value=246)), Assign(targets=[Name(id='MIN_FINAL_CHAR_DISTANCE', ctx=Store())], value=Constant(value=5)), Assign(targets=[Name(id='MIN_MODEL_DISTANCE', ctx=Store())], value=Constant(value=0.01)), Assign(targets=[Name(id='VISUAL_HEBREW_NAME', ctx=Store())], value=Constant(value='ISO-8859-8')), Assign(targets=[Name(id='LOGICAL_HEBREW_NAME', ctx=Store())], value=Constant(value='windows-1255')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_final_char_logical_score', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_final_char_visual_score', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_prev', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='SPACE', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_before_prev', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='SPACE', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_logical_prober', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='SingleByteCharSetProber', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_visual_prober', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='SingleByteCharSetProber', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='reset', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='reset', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_final_char_logical_score', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_final_char_visual_score', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_prev', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='SPACE', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_before_prev', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='SPACE', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='set_model_probers', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='logical_prober', annotation=Name(id='SingleByteCharSetProber', ctx=Load())), arg(arg='visual_prober', annotation=Name(id='SingleByteCharSetProber', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_logical_prober', ctx=Store())], value=Name(id='logical_prober', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_visual_prober', ctx=Store())], value=Name(id='visual_prober', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='is_final', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='c', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Compare(left=Name(id='c', ctx=Load()), ops=[In()], comparators=[List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='FINAL_KAF', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='FINAL_MEM', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='FINAL_NUN', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='FINAL_PE', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='FINAL_TSADI', ctx=Load())], ctx=Load())]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='is_non_final', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='c', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Compare(left=Name(id='c', ctx=Load()), ops=[In()], comparators=[List(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='NORMAL_KAF', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='NORMAL_MEM', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='NORMAL_NUN', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='NORMAL_PE', ctx=Load())], ctx=Load())]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='feed', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='byte_str', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='bytes', ctx=Load()), Name(id='bytearray', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='state', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='ProbingState', ctx=Load()), attr='NOT_ME', ctx=Load())]), body=[Return(value=Attribute(value=Name(id='ProbingState', ctx=Load()), attr='NOT_ME', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='byte_str', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='filter_high_byte_only', ctx=Load()), args=[Name(id='byte_str', ctx=Load())], keywords=[])), For(target=Name(id='cur', ctx=Store()), iter=Name(id='byte_str', ctx=Load()), body=[If(test=Compare(left=Name(id='cur', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='SPACE', ctx=Load())]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_before_prev', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='SPACE', ctx=Load())]), body=[If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='is_final', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_prev', ctx=Load())], keywords=[]), body=[AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_final_char_logical_score', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='is_non_final', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_prev', ctx=Load())], keywords=[]), body=[AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_final_char_visual_score', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])])], orelse=[])], orelse=[If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_before_prev', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='SPACE', ctx=Load())]), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='is_final', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_prev', ctx=Load())], keywords=[]), Compare(left=Name(id='cur', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='SPACE', ctx=Load())])]), body=[AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_final_char_visual_score', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_before_prev', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_prev', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_prev', ctx=Store())], value=Name(id='cur', ctx=Load()))], orelse=[]), Return(value=Attribute(value=Name(id='ProbingState', ctx=Load()), attr='DETECTING', ctx=Load()))], decorator_list=[], returns=Name(id='ProbingState', ctx=Load())), FunctionDef(name='charset_name', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_logical_prober', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assert(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_visual_prober', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Name(id='finalsub', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_final_char_logical_score', ctx=Load()), op=Sub(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_final_char_visual_score', ctx=Load()))), If(test=Compare(left=Name(id='finalsub', ctx=Load()), ops=[GtE()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='MIN_FINAL_CHAR_DISTANCE', ctx=Load())]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='LOGICAL_HEBREW_NAME', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='finalsub', ctx=Load()), ops=[LtE()], comparators=[UnaryOp(op=USub(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='MIN_FINAL_CHAR_DISTANCE', ctx=Load()))]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='VISUAL_HEBREW_NAME', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='modelsub', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_logical_prober', ctx=Load()), attr='get_confidence', ctx=Load()), args=[], keywords=[]), op=Sub(), right=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_visual_prober', ctx=Load()), attr='get_confidence', ctx=Load()), args=[], keywords=[]))), If(test=Compare(left=Name(id='modelsub', ctx=Load()), ops=[Gt()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='MIN_MODEL_DISTANCE', ctx=Load())]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='LOGICAL_HEBREW_NAME', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='modelsub', ctx=Load()), ops=[Lt()], comparators=[UnaryOp(op=USub(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='MIN_MODEL_DISTANCE', ctx=Load()))]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='VISUAL_HEBREW_NAME', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='finalsub', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0.0)]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='VISUAL_HEBREW_NAME', ctx=Load()))], orelse=[]), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='LOGICAL_HEBREW_NAME', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='language', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value='Hebrew'))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='state', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_logical_prober', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assert(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_visual_prober', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_logical_prober', ctx=Load()), attr='state', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='ProbingState', ctx=Load()), attr='NOT_ME', ctx=Load())]), Compare(left=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_visual_prober', ctx=Load()), attr='state', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='ProbingState', ctx=Load()), attr='NOT_ME', ctx=Load())])]), body=[Return(value=Attribute(value=Name(id='ProbingState', ctx=Load()), attr='NOT_ME', ctx=Load()))], orelse=[]), Return(value=Attribute(value=Name(id='ProbingState', ctx=Load()), attr='DETECTING', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='ProbingState', ctx=Load()))], decorator_list=[])], type_ignores=[])