Module(body=[ImportFrom(module='collections.abc', names=[alias(name='MutableMapping'), alias(name='Mapping'), alias(name='MutableSequence'), alias(name='Iterator'), alias(name='Sequence'), alias(name='Container')], level=0), Import(names=[alias(name='pprint')]), ImportFrom(module='typing', names=[alias(name='Tuple'), alias(name='Any'), alias(name='Dict'), alias(name='Set'), alias(name='List')], level=0), AnnAssign(target=Name(id='str_type', ctx=Store()), annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='type', ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load()), value=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='bytes', ctx=Load())], ctx=Load()), simple=1), Assign(targets=[Name(id='_generator_type', ctx=Store())], value=Call(func=Name(id='type', ctx=Load()), args=[GeneratorExp(elt=Name(id='_', ctx=Load()), generators=[comprehension(target=Name(id='_', ctx=Store()), iter=Tuple(elts=[], ctx=Load()), ifs=[], is_async=0)])], keywords=[])), ClassDef(name='_ParseResultsWithOffset', bases=[], keywords=[], body=[AnnAssign(target=Name(id='tup', ctx=Store()), annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Constant(value='ParseResults'), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()), simple=1), Assign(targets=[Name(id='__slots__', ctx=Store())], value=List(elts=[Constant(value='tup')], ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='p1', annotation=Constant(value='ParseResults')), arg(arg='p2', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='tup', ctx=Store()), annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='ParseResults', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()), value=Tuple(elts=[Name(id='p1', ctx=Load()), Name(id='p2', ctx=Load())], ctx=Load()), simple=0)], decorator_list=[]), FunctionDef(name='__getitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='i')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='tup', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()))], decorator_list=[]), FunctionDef(name='__getstate__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='tup', ctx=Load()))], decorator_list=[]), FunctionDef(name='__setstate__', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='tup', ctx=Store())], value=Subscript(value=Name(id='args', ctx=Load()), slice=Constant(value=0), ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='ParseResults', bases=[], keywords=[], body=[Expr(value=Constant(value='Structured parse results, to provide multiple means of access to\n    the parsed data:\n\n    - as a list (``len(results)``)\n    - by list index (``results[0], results[1]``, etc.)\n    - by attribute (``results.<results_name>`` - see :class:`ParserElement.set_results_name`)\n\n    Example::\n\n        integer = Word(nums)\n        date_str = (integer.set_results_name("year") + \'/\'\n                    + integer.set_results_name("month") + \'/\'\n                    + integer.set_results_name("day"))\n        # equivalent form:\n        # date_str = (integer("year") + \'/\'\n        #             + integer("month") + \'/\'\n        #             + integer("day"))\n\n        # parse_string returns a ParseResults object\n        result = date_str.parse_string("1999/12/31")\n\n        def test(s, fn=repr):\n            print(f"{s} -> {fn(eval(s))}")\n        test("list(result)")\n        test("result[0]")\n        test("result[\'month\']")\n        test("result.day")\n        test("\'month\' in result")\n        test("\'minutes\' in result")\n        test("result.dump()", str)\n\n    prints::\n\n        list(result) -> [\'1999\', \'/\', \'12\', \'/\', \'31\']\n        result[0] -> \'1999\'\n        result[\'month\'] -> \'12\'\n        result.day -> \'31\'\n        \'month\' in result -> True\n        \'minutes\' in result -> False\n        result.dump() -> [\'1999\', \'/\', \'12\', \'/\', \'31\']\n        - day: \'31\'\n        - month: \'12\'\n        - year: \'1999\'\n    ')), AnnAssign(target=Name(id='_null_values', ctx=Store()), annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='Any', ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load()), value=Tuple(elts=[Constant(value=None), List(elts=[], ctx=Load()), Tuple(elts=[], ctx=Load())], ctx=Load()), simple=1), AnnAssign(target=Name(id='_name', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='_parent', ctx=Store()), annotation=Constant(value='ParseResults'), simple=1), AnnAssign(target=Name(id='_all_names', ctx=Store()), annotation=Subscript(value=Name(id='Set', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='_modal', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1), AnnAssign(target=Name(id='_toklist', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='_tokdict', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), simple=1), Assign(targets=[Name(id='__slots__', ctx=Store())], value=Tuple(elts=[Constant(value='_name'), Constant(value='_parent'), Constant(value='_all_names'), Constant(value='_modal'), Constant(value='_toklist'), Constant(value='_tokdict')], ctx=Load())), ClassDef(name='List', bases=[Name(id='list', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n        Simple wrapper class to distinguish parsed list results that should be preserved\n        as actual Python lists, instead of being converted to :class:`ParseResults`::\n\n            LBRACK, RBRACK = map(pp.Suppress, "[]")\n            element = pp.Forward()\n            item = ppc.integer\n            element_list = LBRACK + pp.DelimitedList(element) + RBRACK\n\n            # add parse actions to convert from ParseResults to actual Python collection types\n            def as_python_list(t):\n                return pp.ParseResults.List(t.as_list())\n            element_list.add_parse_action(as_python_list)\n\n            element <<= item | element_list\n\n            element.run_tests(\'\'\'\n                100\n                [2,3,4]\n                [[2, 1],3,4]\n                [(2, 1),3,4]\n                (2,3,4)\n                \'\'\', post_parse=lambda s, r: (r[0], type(r[0])))\n\n        prints::\n\n            100\n            (100, <class \'int\'>)\n\n            [2,3,4]\n            ([2, 3, 4], <class \'list\'>)\n\n            [[2, 1],3,4]\n            ([[2, 1], 3, 4], <class \'list\'>)\n\n        (Used internally by :class:`Group` when `aslist=True`.)\n        ')), FunctionDef(name='__new__', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='contained')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='contained', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='contained', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='contained', ctx=Load()), Name(id='list', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='cls', ctx=Load()), attr='__name__', ctx=Load()), conversion=-1), Constant(value=' may only be constructed with a list, not '), FormattedValue(value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='contained', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='list', ctx=Load()), attr='__new__', ctx=Load()), args=[Name(id='cls', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), FunctionDef(name='__new__', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='toklist'), arg(arg='name')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[Constant(value=None), Constant(value=None)]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='toklist', ctx=Load()), Name(id='ParseResults', ctx=Load())], keywords=[]), body=[Return(value=Name(id='toklist', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='self', ctx=Store())], value=Call(func=Attribute(value=Name(id='object', ctx=Load()), attr='__new__', ctx=Load()), args=[Name(id='cls', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_name', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_parent', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_all_names', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='toklist', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_toklist', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='toklist', ctx=Load()), Tuple(elts=[Name(id='list', ctx=Load()), Name(id='_generator_type', ctx=Load())], ctx=Load())], keywords=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_toklist', ctx=Store())], value=IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='toklist', ctx=Load()), Attribute(value=Name(id='ParseResults', ctx=Load()), attr='List', ctx=Load())], keywords=[]), body=List(elts=[Subscript(value=Name(id='toklist', ctx=Load()), slice=Slice(), ctx=Load())], ctx=Load()), orelse=Call(func=Name(id='list', ctx=Load()), args=[Name(id='toklist', ctx=Load())], keywords=[])))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_toklist', ctx=Store())], value=List(elts=[Name(id='toklist', ctx=Load())], ctx=Load()))])]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_tokdict', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='self', ctx=Load()))], decorator_list=[]), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='toklist'), arg(arg='name'), arg(arg='asList'), arg(arg='modal'), arg(arg='isinstance')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=True), Constant(value=True), Name(id='isinstance', ctx=Load())]), body=[AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_tokdict', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='_ParseResultsWithOffset', ctx=Load())], ctx=Load()), ctx=Load()), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_modal', ctx=Store())], value=Name(id='modal', ctx=Load())), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='name', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='')])]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='int', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='modal', ctx=Load())), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_all_names', ctx=Store())], value=Set(elts=[Name(id='name', ctx=Load())]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_name', ctx=Store())], value=Name(id='name', ctx=Load())), If(test=Compare(left=Name(id='toklist', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_null_values', ctx=Load())]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='toklist', ctx=Load()), Tuple(elts=[Name(id='str_type', ctx=Load()), Name(id='type', ctx=Load())], ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='toklist', ctx=Store())], value=List(elts=[Name(id='toklist', ctx=Load())], ctx=Load()))], orelse=[]), If(test=Name(id='asList', ctx=Load()), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='toklist', ctx=Load()), Name(id='ParseResults', ctx=Load())], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='self', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Call(func=Name(id='_ParseResultsWithOffset', ctx=Load()), args=[Call(func=Name(id='ParseResults', ctx=Load()), args=[Attribute(value=Name(id='toklist', ctx=Load()), attr='_toklist', ctx=Load())], keywords=[]), Constant(value=0)], keywords=[]))], orelse=[Assign(targets=[Subscript(value=Name(id='self', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Call(func=Name(id='_ParseResultsWithOffset', ctx=Load()), args=[Call(func=Name(id='ParseResults', ctx=Load()), args=[Subscript(value=Name(id='toklist', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]), Constant(value=0)], keywords=[]))]), Assign(targets=[Attribute(value=Subscript(value=Name(id='self', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load()), attr='_name', ctx=Store())], value=Name(id='name', ctx=Load()))], orelse=[Try(body=[Assign(targets=[Subscript(value=Name(id='self', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='toklist', ctx=Load()), slice=Constant(value=0), ctx=Load()))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='KeyError', ctx=Load()), Name(id='TypeError', ctx=Load()), Name(id='IndexError', ctx=Load())], ctx=Load()), body=[If(test=Compare(left=Name(id='toklist', ctx=Load()), ops=[IsNot()], comparators=[Name(id='self', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='self', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Name(id='toklist', ctx=Load()))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_name', ctx=Store())], value=Name(id='name', ctx=Load()))])])], orelse=[], finalbody=[])])], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='__getitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='i')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='i', ctx=Load()), Tuple(elts=[Name(id='int', ctx=Load()), Name(id='slice', ctx=Load())], ctx=Load())], keywords=[]), body=[Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_toklist', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()))], orelse=[If(test=Compare(left=Name(id='i', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_all_names', ctx=Load())]), body=[Return(value=Subscript(value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tokdict', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Return(value=Call(func=Name(id='ParseResults', ctx=Load()), args=[ListComp(elt=Subscript(value=Name(id='v', ctx=Load()), slice=Constant(value=0), ctx=Load()), generators=[comprehension(target=Name(id='v', ctx=Store()), iter=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tokdict', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), ifs=[], is_async=0)])], keywords=[]))])])], decorator_list=[]), FunctionDef(name='__setitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='k'), arg(arg='v'), arg(arg='isinstance')], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='isinstance', ctx=Load())]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='v', ctx=Load()), Name(id='_ParseResultsWithOffset', ctx=Load())], keywords=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tokdict', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tokdict', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='k', ctx=Load()), Call(func=Name(id='list', ctx=Load()), args=[], keywords=[])], keywords=[]), op=Add(), right=List(elts=[Name(id='v', ctx=Load())], ctx=Load()))), Assign(targets=[Name(id='sub', ctx=Store())], value=Subscript(value=Name(id='v', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='k', ctx=Load()), Tuple(elts=[Name(id='int', ctx=Load()), Name(id='slice', ctx=Load())], ctx=Load())], keywords=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_toklist', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Store())], value=Name(id='v', ctx=Load())), Assign(targets=[Name(id='sub', ctx=Store())], value=Name(id='v', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tokdict', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tokdict', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='k', ctx=Load()), Call(func=Name(id='list', ctx=Load()), args=[], keywords=[])], keywords=[]), op=Add(), right=List(elts=[Call(func=Name(id='_ParseResultsWithOffset', ctx=Load()), args=[Name(id='v', ctx=Load()), Constant(value=0)], keywords=[])], ctx=Load()))), Assign(targets=[Name(id='sub', ctx=Store())], value=Name(id='v', ctx=Load()))])]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='sub', ctx=Load()), Name(id='ParseResults', ctx=Load())], keywords=[]), body=[Assign(targets=[Attribute(value=Name(id='sub', ctx=Load()), attr='_parent', ctx=Store())], value=Name(id='self', ctx=Load()))], orelse=[])], decorator_list=[]), FunctionDef(name='__delitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='i')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='i', ctx=Load()), Tuple(elts=[Name(id='int', ctx=Load()), Name(id='slice', ctx=Load())], ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='mylen', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_toklist', ctx=Load())], keywords=[])), Delete(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_toklist', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Del())]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='i', ctx=Load()), Name(id='int', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='i', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0)]), body=[AugAssign(target=Name(id='i', ctx=Store()), op=Add(), value=Name(id='mylen', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='i', ctx=Store())], value=Call(func=Name(id='slice', ctx=Load()), args=[Name(id='i', ctx=Load()), BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[]))], orelse=[]), Assign(targets=[Name(id='removed', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Starred(value=Call(func=Attribute(value=Name(id='i', ctx=Load()), attr='indices', ctx=Load()), args=[Name(id='mylen', ctx=Load())], keywords=[]), ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='removed', ctx=Load()), attr='reverse', ctx=Load()), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='occurrences', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tokdict', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[For(target=Name(id='j', ctx=Store()), iter=Name(id='removed', ctx=Load()), body=[For(target=Tuple(elts=[Name(id='k', ctx=Store()), Tuple(elts=[Name(id='value', ctx=Store()), Name(id='position', ctx=Store())], ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='occurrences', ctx=Load())], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='occurrences', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Store())], value=Call(func=Name(id='_ParseResultsWithOffset', ctx=Load()), args=[Name(id='value', ctx=Load()), BinOp(left=Name(id='position', ctx=Load()), op=Sub(), right=Compare(left=Name(id='position', ctx=Load()), ops=[Gt()], comparators=[Name(id='j', ctx=Load())]))], keywords=[]))], orelse=[])], orelse=[])], orelse=[])], orelse=[Delete(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tokdict', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Del())])])], decorator_list=[]), FunctionDef(name='__contains__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='k')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Compare(left=Name(id='k', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_tokdict', ctx=Load())]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='__len__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_toklist', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='__bool__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=UnaryOp(op=Not(), operand=UnaryOp(op=Not(), operand=BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='_toklist', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_tokdict', ctx=Load())]))))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='__iter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='iter', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_toklist', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='Iterator', ctx=Load())), FunctionDef(name='__reversed__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='iter', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_toklist', ctx=Load()), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='Iterator', ctx=Load())), FunctionDef(name='keys', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='iter', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_tokdict', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='values', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=GeneratorExp(elt=Subscript(value=Name(id='self', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='k', ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[]), FunctionDef(name='items', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=GeneratorExp(elt=Tuple(elts=[Name(id='k', ctx=Load()), Subscript(value=Name(id='self', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Load())], ctx=Load()), generators=[comprehension(target=Name(id='k', ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[]), FunctionDef(name='haskeys', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Since ``keys()`` returns an iterator, this method is helpful in bypassing\n        code that looks for the existence of any defined results names.')), Return(value=UnaryOp(op=Not(), operand=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='_tokdict', ctx=Load()))))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='pop', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Constant(value='\n        Removes and returns item at specified index (default= ``last``).\n        Supports both ``list`` and ``dict`` semantics for ``pop()``. If\n        passed no argument or an integer argument, it will use ``list``\n        semantics and pop tokens from the list of parsed tokens. If passed\n        a non-integer argument (most likely a string), it will use ``dict``\n        semantics and pop the corresponding value from any defined results\n        names. A second default return value argument is supported, just as in\n        ``dict.pop()``.\n\n        Example::\n\n            numlist = Word(nums)[...]\n            print(numlist.parse_string("0 123 321")) # -> [\'0\', \'123\', \'321\']\n\n            def remove_first(tokens):\n                tokens.pop(0)\n            numlist.add_parse_action(remove_first)\n            print(numlist.parse_string("0 123 321")) # -> [\'123\', \'321\']\n\n            label = Word(alphas)\n            patt = label("LABEL") + Word(nums)[1, ...]\n            print(patt.parse_string("AAB 123 321").dump())\n\n            # Use pop() in a parse action to remove named result (note that corresponding value is not\n            # removed from list form of results)\n            def remove_LABEL(tokens):\n                tokens.pop("LABEL")\n                return tokens\n            patt.add_parse_action(remove_LABEL)\n            print(patt.parse_string("AAB 123 321").dump())\n\n        prints::\n\n            [\'AAB\', \'123\', \'321\']\n            - LABEL: \'AAB\'\n\n            [\'AAB\', \'123\', \'321\']\n        ')), If(test=UnaryOp(op=Not(), operand=Name(id='args', ctx=Load())), body=[Assign(targets=[Name(id='args', ctx=Store())], value=List(elts=[UnaryOp(op=USub(), operand=Constant(value=1))], ctx=Load()))], orelse=[]), For(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='kwargs', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Name(id='k', ctx=Load()), ops=[Eq()], comparators=[Constant(value='default')]), body=[Assign(targets=[Name(id='args', ctx=Store())], value=Tuple(elts=[Subscript(value=Name(id='args', ctx=Load()), slice=Constant(value=0), ctx=Load()), Name(id='v', ctx=Load())], ctx=Load()))], orelse=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[JoinedStr(values=[Constant(value='pop() got an unexpected keyword argument '), FormattedValue(value=Name(id='k', ctx=Load()), conversion=114)])], keywords=[]))])], orelse=[]), If(test=BoolOp(op=Or(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Subscript(value=Name(id='args', ctx=Load()), slice=Constant(value=0), ctx=Load()), Name(id='int', ctx=Load())], keywords=[]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Subscript(value=Name(id='args', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[In()], comparators=[Name(id='self', ctx=Load())])]), body=[Assign(targets=[Name(id='index', ctx=Store())], value=Subscript(value=Name(id='args', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='ret', ctx=Store())], value=Subscript(value=Name(id='self', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())), Delete(targets=[Subscript(value=Name(id='self', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Del())]), Return(value=Name(id='ret', ctx=Load()))], orelse=[Assign(targets=[Name(id='defaultvalue', ctx=Store())], value=Subscript(value=Name(id='args', ctx=Load()), slice=Constant(value=1), ctx=Load())), Return(value=Name(id='defaultvalue', ctx=Load()))])], decorator_list=[]), FunctionDef(name='get', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key'), arg(arg='default_value')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='\n        Returns named result matching the given key, or if there is no\n        such name, then returns the given ``default_value`` or ``None`` if no\n        ``default_value`` is specified.\n\n        Similar to ``dict.get()``.\n\n        Example::\n\n            integer = Word(nums)\n            date_str = integer("year") + \'/\' + integer("month") + \'/\' + integer("day")\n\n            result = date_str.parse_string("1999/12/31")\n            print(result.get("year")) # -> \'1999\'\n            print(result.get("hour", "not specified")) # -> \'not specified\'\n            print(result.get("hour")) # -> None\n        ')), If(test=Compare(left=Name(id='key', ctx=Load()), ops=[In()], comparators=[Name(id='self', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='self', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()))], orelse=[Return(value=Name(id='default_value', ctx=Load()))])], decorator_list=[]), FunctionDef(name='insert', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='index'), arg(arg='ins_string')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Inserts new element at location index in the list of parsed tokens.\n\n        Similar to ``list.insert()``.\n\n        Example::\n\n            numlist = Word(nums)[...]\n            print(numlist.parse_string("0 123 321")) # -> [\'0\', \'123\', \'321\']\n\n            # use a parse action to insert the parse location in the front of the parsed results\n            def insert_locn(locn, tokens):\n                tokens.insert(0, locn)\n            numlist.add_parse_action(insert_locn)\n            print(numlist.parse_string("0 123 321")) # -> [0, \'0\', \'123\', \'321\']\n        ')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_toklist', ctx=Load()), attr='insert', ctx=Load()), args=[Name(id='index', ctx=Load()), Name(id='ins_string', ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='occurrences', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tokdict', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[For(target=Tuple(elts=[Name(id='k', ctx=Store()), Tuple(elts=[Name(id='value', ctx=Store()), Name(id='position', ctx=Store())], ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='occurrences', ctx=Load())], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='occurrences', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Store())], value=Call(func=Name(id='_ParseResultsWithOffset', ctx=Load()), args=[Name(id='value', ctx=Load()), BinOp(left=Name(id='position', ctx=Load()), op=Add(), right=Compare(left=Name(id='position', ctx=Load()), ops=[Gt()], comparators=[Name(id='index', ctx=Load())]))], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='append', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='item')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Add single element to end of ``ParseResults`` list of elements.\n\n        Example::\n\n            numlist = Word(nums)[...]\n            print(numlist.parse_string("0 123 321")) # -> [\'0\', \'123\', \'321\']\n\n            # use a parse action to compute the sum of the parsed integers, and add it to the end\n            def append_sum(tokens):\n                tokens.append(sum(map(int, tokens)))\n            numlist.add_parse_action(append_sum)\n            print(numlist.parse_string("0 123 321")) # -> [\'0\', \'123\', \'321\', 444]\n        ')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_toklist', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='item', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='extend', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='itemseq')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Add sequence of elements to end of ``ParseResults`` list of elements.\n\n        Example::\n\n            patt = Word(alphas)[1, ...]\n\n            # use a parse action to append the reverse of the matched strings, to make a palindrome\n            def make_palindrome(tokens):\n                tokens.extend(reversed([t[::-1] for t in tokens]))\n                return \'\'.join(tokens)\n            patt.add_parse_action(make_palindrome)\n            print(patt.parse_string("lskdj sdlkjf lksd")) # -> \'lskdjsdlkjflksddsklfjkldsjdksl\'\n        ')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='itemseq', ctx=Load()), Name(id='ParseResults', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='__iadd__', ctx=Load()), args=[Name(id='itemseq', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_toklist', ctx=Load()), attr='extend', ctx=Load()), args=[Name(id='itemseq', ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='clear', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Clear all elements and results names.\n        ')), Delete(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_toklist', ctx=Load()), slice=Slice(), ctx=Del())]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tokdict', ctx=Load()), attr='clear', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='__getattr__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Return(value=Subscript(value=Name(id='self', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[If(test=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='__')], keywords=[]), body=[Raise(exc=Call(func=Name(id='AttributeError', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Constant(value=''))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='__add__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other', annotation=Constant(value='ParseResults'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), AugAssign(target=Name(id='ret', ctx=Store()), op=Add(), value=Name(id='other', ctx=Load())), Return(value=Name(id='ret', ctx=Load()))], decorator_list=[], returns=Constant(value='ParseResults')), FunctionDef(name='__iadd__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other', annotation=Constant(value='ParseResults'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='other', ctx=Load())), body=[Return(value=Name(id='self', ctx=Load()))], orelse=[]), If(test=Attribute(value=Name(id='other', ctx=Load()), attr='_tokdict', ctx=Load()), body=[Assign(targets=[Name(id='offset', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_toklist', ctx=Load())], keywords=[])), Assign(targets=[Name(id='addoffset', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='a')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=IfExp(test=Compare(left=Name(id='a', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0)]), body=Name(id='offset', ctx=Load()), orelse=BinOp(left=Name(id='a', ctx=Load()), op=Add(), right=Name(id='offset', ctx=Load()))))), Assign(targets=[Name(id='otheritems', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='other', ctx=Load()), attr='_tokdict', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='otherdictitems', ctx=Store())], value=ListComp(elt=Tuple(elts=[Name(id='k', ctx=Load()), Call(func=Name(id='_ParseResultsWithOffset', ctx=Load()), args=[Subscript(value=Name(id='v', ctx=Load()), slice=Constant(value=0), ctx=Load()), Call(func=Name(id='addoffset', ctx=Load()), args=[Subscript(value=Name(id='v', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[])], keywords=[])], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='vlist', ctx=Store())], ctx=Store()), iter=Name(id='otheritems', ctx=Load()), ifs=[], is_async=0), comprehension(target=Name(id='v', ctx=Store()), iter=Name(id='vlist', ctx=Load()), ifs=[], is_async=0)])), For(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Name(id='otherdictitems', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='self', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Store())], value=Name(id='v', ctx=Load())), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Subscript(value=Name(id='v', ctx=Load()), slice=Constant(value=0), ctx=Load()), Name(id='ParseResults', ctx=Load())], keywords=[]), body=[Assign(targets=[Attribute(value=Subscript(value=Name(id='v', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='_parent', ctx=Store())], value=Name(id='self', ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_toklist', ctx=Store()), op=Add(), value=Attribute(value=Name(id='other', ctx=Load()), attr='_toklist', ctx=Load())), AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_all_names', ctx=Store()), op=BitOr(), value=Attribute(value=Name(id='other', ctx=Load()), attr='_all_names', ctx=Load())), Return(value=Name(id='self', ctx=Load()))], decorator_list=[], returns=Constant(value='ParseResults')), FunctionDef(name='__radd__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='other', ctx=Load()), Name(id='int', ctx=Load())], keywords=[]), Compare(left=Name(id='other', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[]))], orelse=[Return(value=BinOp(left=Name(id='other', ctx=Load()), op=Add(), right=Name(id='self', ctx=Load())))])], decorator_list=[], returns=Constant(value='ParseResults')), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[FormattedValue(value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), conversion=-1), Constant(value='('), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='_toklist', ctx=Load()), conversion=114), Constant(value=', '), FormattedValue(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='as_dict', ctx=Load()), args=[], keywords=[]), conversion=-1), Constant(value=')')]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='__str__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=BinOp(left=Constant(value='['), op=Add(), right=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[ListComp(elt=IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='i', ctx=Load()), Name(id='ParseResults', ctx=Load())], keywords=[]), body=Call(func=Name(id='str', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), orelse=Call(func=Name(id='repr', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[])), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_toklist', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), op=Add(), right=Constant(value=']')))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='_asStringList', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='sep')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='')]), body=[Assign(targets=[Name(id='out', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='item', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_toklist', ctx=Load()), body=[If(test=BoolOp(op=And(), values=[Name(id='out', ctx=Load()), Name(id='sep', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='out', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='sep', ctx=Load())], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='item', ctx=Load()), Name(id='ParseResults', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='out', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='item', ctx=Load()), attr='_asStringList', ctx=Load()), args=[], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='out', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='item', ctx=Load())], keywords=[])], keywords=[]))])], orelse=[]), Return(value=Name(id='out', ctx=Load()))], decorator_list=[]), FunctionDef(name='as_list', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Returns the parse results as a nested list of matching tokens, all converted to strings.\n\n        Example::\n\n            patt = Word(alphas)[1, ...]\n            result = patt.parse_string("sldkj lsdkj sldkj")\n            # even though the result prints in string-like form, it is actually a pyparsing ParseResults\n            print(type(result), result) # -> <class \'pyparsing.ParseResults\'> [\'sldkj\', \'lsdkj\', \'sldkj\']\n\n            # Use as_list() to create an actual list\n            result_list = result.as_list()\n            print(type(result_list), result_list) # -> <class \'list\'> [\'sldkj\', \'lsdkj\', \'sldkj\']\n        ')), Return(value=ListComp(elt=IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='res', ctx=Load()), Name(id='ParseResults', ctx=Load())], keywords=[]), body=Call(func=Attribute(value=Name(id='res', ctx=Load()), attr='as_list', ctx=Load()), args=[], keywords=[]), orelse=Name(id='res', ctx=Load())), generators=[comprehension(target=Name(id='res', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_toklist', ctx=Load()), ifs=[], is_async=0)]))], decorator_list=[], returns=Name(id='list', ctx=Load())), FunctionDef(name='as_dict', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Returns the named parse results as a nested dictionary.\n\n        Example::\n\n            integer = Word(nums)\n            date_str = integer("year") + \'/\' + integer("month") + \'/\' + integer("day")\n\n            result = date_str.parse_string(\'12/31/1999\')\n            print(type(result), repr(result)) # -> <class \'pyparsing.ParseResults\'> ([\'12\', \'/\', \'31\', \'/\', \'1999\'], {\'day\': [(\'1999\', 4)], \'year\': [(\'12\', 0)], \'month\': [(\'31\', 2)]})\n\n            result_dict = result.as_dict()\n            print(type(result_dict), repr(result_dict)) # -> <class \'dict\'> {\'day\': \'1999\', \'year\': \'12\', \'month\': \'31\'}\n\n            # even though a ParseResults supports dict-like access, sometime you just need to have a dict\n            import json\n            print(json.dumps(result)) # -> Exception: TypeError: ... is not JSON serializable\n            print(json.dumps(result.as_dict())) # -> {"month": "31", "day": "1999", "year": "12"}\n        ')), FunctionDef(name='to_item', args=arguments(posonlyargs=[], args=[arg(arg='obj')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='obj', ctx=Load()), Name(id='ParseResults', ctx=Load())], keywords=[]), body=[Return(value=IfExp(test=Call(func=Attribute(value=Name(id='obj', ctx=Load()), attr='haskeys', ctx=Load()), args=[], keywords=[]), body=Call(func=Attribute(value=Name(id='obj', ctx=Load()), attr='as_dict', ctx=Load()), args=[], keywords=[]), orelse=ListComp(elt=Call(func=Name(id='to_item', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='v', ctx=Store()), iter=Name(id='obj', ctx=Load()), ifs=[], is_async=0)])))], orelse=[Return(value=Name(id='obj', ctx=Load()))])], decorator_list=[]), Return(value=Call(func=Name(id='dict', ctx=Load()), args=[GeneratorExp(elt=Tuple(elts=[Name(id='k', ctx=Load()), Call(func=Name(id='to_item', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[])], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='dict', ctx=Load())), FunctionDef(name='copy', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Returns a new shallow copy of a :class:`ParseResults` object. `ParseResults`\n        items contained within the source are shared with the copy. Use\n        :class:`ParseResults.deepcopy()` to create a copy with its own separate\n        content values.\n        ')), Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Name(id='ParseResults', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_toklist', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='ret', ctx=Load()), attr='_tokdict', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tokdict', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='ret', ctx=Load()), attr='_parent', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_parent', ctx=Load())), AugAssign(target=Attribute(value=Name(id='ret', ctx=Load()), attr='_all_names', ctx=Store()), op=BitOr(), value=Attribute(value=Name(id='self', ctx=Load()), attr='_all_names', ctx=Load())), Assign(targets=[Attribute(value=Name(id='ret', ctx=Load()), attr='_name', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_name', ctx=Load())), Return(value=Name(id='ret', ctx=Load()))], decorator_list=[], returns=Constant(value='ParseResults')), FunctionDef(name='deepcopy', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Returns a new deep copy of a :class:`ParseResults` object.\n        ')), Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='obj', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_toklist', ctx=Load())], keywords=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='obj', ctx=Load()), Name(id='ParseResults', ctx=Load())], keywords=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_toklist', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Name(id='obj', ctx=Load()), attr='deepcopy', ctx=Load()), args=[], keywords=[]))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='obj', ctx=Load()), Tuple(elts=[Name(id='str', ctx=Load()), Name(id='bytes', ctx=Load())], ctx=Load())], keywords=[]), body=[Pass()], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='obj', ctx=Load()), Name(id='MutableMapping', ctx=Load())], keywords=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_toklist', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Store()), Name(id='dest', ctx=Store())], value=Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='obj', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='dest', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Store())], value=IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='v', ctx=Load()), Name(id='ParseResults', ctx=Load())], keywords=[]), body=Call(func=Attribute(value=Name(id='v', ctx=Load()), attr='deepcopy', ctx=Load()), args=[], keywords=[]), orelse=Name(id='v', ctx=Load())))], orelse=[])], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='obj', ctx=Load()), Name(id='Container', ctx=Load())], keywords=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_toklist', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Store())], value=Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]), args=[GeneratorExp(elt=IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='v', ctx=Load()), Name(id='ParseResults', ctx=Load())], keywords=[]), body=Call(func=Attribute(value=Name(id='v', ctx=Load()), attr='deepcopy', ctx=Load()), args=[], keywords=[]), orelse=Name(id='v', ctx=Load())), generators=[comprehension(target=Name(id='v', ctx=Store()), iter=Name(id='obj', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], orelse=[])])])])], orelse=[]), Return(value=Name(id='ret', ctx=Load()))], decorator_list=[], returns=Constant(value='ParseResults')), FunctionDef(name='get_name', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Returns the results name for this token expression. Useful when several\n        different expressions might match at a particular location.\n\n        Example::\n\n            integer = Word(nums)\n            ssn_expr = Regex(r"\\d\\d\\d-\\d\\d-\\d\\d\\d\\d")\n            house_number_expr = Suppress(\'#\') + Word(nums, alphanums)\n            user_data = (Group(house_number_expr)("house_number")\n                        | Group(ssn_expr)("ssn")\n                        | Group(integer)("age"))\n            user_info = user_data[1, ...]\n\n            result = user_info.parse_string("22 111-22-3333 #221B")\n            for item in result:\n                print(item.get_name(), \':\', item[0])\n\n        prints::\n\n            age : 22\n            ssn : 111-22-3333\n            house_number : 221B\n        ')), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_name', ctx=Load()), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_name', ctx=Load()))], orelse=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_parent', ctx=Load()), body=[AnnAssign(target=Name(id='par', ctx=Store()), annotation=Constant(value='ParseResults'), value=Attribute(value=Name(id='self', ctx=Load()), attr='_parent', ctx=Load()), simple=1), Assign(targets=[Name(id='parent_tokdict_items', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='par', ctx=Load()), attr='_tokdict', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])), Return(value=Call(func=Name(id='next', ctx=Load()), args=[GeneratorExp(elt=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='vlist', ctx=Store())], ctx=Store()), iter=Name(id='parent_tokdict_items', ctx=Load()), ifs=[], is_async=0), comprehension(target=Tuple(elts=[Name(id='v', ctx=Store()), Name(id='loc', ctx=Store())], ctx=Store()), iter=Name(id='vlist', ctx=Load()), ifs=[Compare(left=Name(id='v', ctx=Load()), ops=[Is()], comparators=[Name(id='self', ctx=Load())])], is_async=0)]), Constant(value=None)], keywords=[]))], orelse=[If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_tokdict', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Subscript(value=Subscript(value=Call(func=Name(id='next', ctx=Load()), args=[Call(func=Name(id='iter', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tokdict', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[]), slice=Constant(value=0), ctx=Load()), slice=Constant(value=1), ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value=0), UnaryOp(op=USub(), operand=Constant(value=1))], ctx=Load())])]), body=[Return(value=Call(func=Name(id='next', ctx=Load()), args=[Call(func=Name(id='iter', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tokdict', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[]))], orelse=[Return(value=Constant(value=None))])])])], decorator_list=[]), FunctionDef(name='dump', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='indent'), arg(arg='full'), arg(arg='include_list'), arg(arg='_depth')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=''), Constant(value=True), Constant(value=True), Constant(value=0)]), body=[Expr(value=Constant(value='\n        Diagnostic method for listing out the contents of\n        a :class:`ParseResults`. Accepts an optional ``indent`` argument so\n        that this string can be embedded in a nested display of other data.\n\n        Example::\n\n            integer = Word(nums)\n            date_str = integer("year") + \'/\' + integer("month") + \'/\' + integer("day")\n\n            result = date_str.parse_string(\'1999/12/31\')\n            print(result.dump())\n\n        prints::\n\n            [\'1999\', \'/\', \'12\', \'/\', \'31\']\n            - day: \'31\'\n            - month: \'12\'\n            - year: \'1999\'\n        ')), Assign(targets=[Name(id='out', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='NL', ctx=Store())], value=Constant(value='\n')), Expr(value=Call(func=Attribute(value=Name(id='out', ctx=Load()), attr='append', ctx=Load()), args=[IfExp(test=Name(id='include_list', ctx=Load()), body=BinOp(left=Name(id='indent', ctx=Load()), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='as_list', ctx=Load()), args=[], keywords=[])], keywords=[])), orelse=Constant(value=''))], keywords=[])), If(test=Name(id='full', ctx=Load()), body=[If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='haskeys', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='items', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[GeneratorExp(elt=Tuple(elts=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='k', ctx=Load())], keywords=[]), Name(id='v', ctx=Load())], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[])), For(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Name(id='items', ctx=Load()), body=[If(test=Name(id='out', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='out', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='NL', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='out', ctx=Load()), attr='append', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='indent', ctx=Load()), conversion=-1), FormattedValue(value=BinOp(left=Constant(value='  '), op=Mult(), right=Name(id='_depth', ctx=Load())), conversion=-1), Constant(value='- '), FormattedValue(value=Name(id='k', ctx=Load()), conversion=-1), Constant(value=': ')])], keywords=[])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='v', ctx=Load()), Name(id='ParseResults', ctx=Load())], keywords=[]), body=[If(test=Name(id='v', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='out', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='v', ctx=Load()), attr='dump', ctx=Load()), args=[], keywords=[keyword(arg='indent', value=Name(id='indent', ctx=Load())), keyword(arg='full', value=Name(id='full', ctx=Load())), keyword(arg='include_list', value=Name(id='include_list', ctx=Load())), keyword(arg='_depth', value=BinOp(left=Name(id='_depth', ctx=Load()), op=Add(), right=Constant(value=1)))])], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='out', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[])], keywords=[]))])], orelse=[Expr(value=Call(func=Attribute(value=Name(id='out', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='repr', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[])], keywords=[]))])], orelse=[])], orelse=[]), If(test=Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='vv', ctx=Load()), Name(id='ParseResults', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='vv', ctx=Store()), iter=Name(id='self', ctx=Load()), ifs=[], is_async=0)])], keywords=[]), body=[Assign(targets=[Name(id='v', ctx=Store())], value=Name(id='self', ctx=Load())), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='vv', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='vv', ctx=Load()), Name(id='ParseResults', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='out', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='\n{}{}[{}]:\n{}{}{}'), attr='format', ctx=Load()), args=[Name(id='indent', ctx=Load()), BinOp(left=Constant(value='  '), op=Mult(), right=Name(id='_depth', ctx=Load())), Name(id='i', ctx=Load()), Name(id='indent', ctx=Load()), BinOp(left=Constant(value='  '), op=Mult(), right=BinOp(left=Name(id='_depth', ctx=Load()), op=Add(), right=Constant(value=1))), Call(func=Attribute(value=Name(id='vv', ctx=Load()), attr='dump', ctx=Load()), args=[], keywords=[keyword(arg='indent', value=Name(id='indent', ctx=Load())), keyword(arg='full', value=Name(id='full', ctx=Load())), keyword(arg='include_list', value=Name(id='include_list', ctx=Load())), keyword(arg='_depth', value=BinOp(left=Name(id='_depth', ctx=Load()), op=Add(), right=Constant(value=1)))])], keywords=[])], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='out', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Constant(value='\n%s%s[%d]:\n%s%s%s'), op=Mod(), right=Tuple(elts=[Name(id='indent', ctx=Load()), BinOp(left=Constant(value='  '), op=Mult(), right=Name(id='_depth', ctx=Load())), Name(id='i', ctx=Load()), Name(id='indent', ctx=Load()), BinOp(left=Constant(value='  '), op=Mult(), right=BinOp(left=Name(id='_depth', ctx=Load()), op=Add(), right=Constant(value=1))), Call(func=Name(id='str', ctx=Load()), args=[Name(id='vv', ctx=Load())], keywords=[])], ctx=Load()))], keywords=[]))])], orelse=[])], orelse=[])], orelse=[]), Return(value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Name(id='out', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='pprint', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Constant(value='\n        Pretty-printer for parsed results as a list, using the\n        `pprint <https://docs.python.org/3/library/pprint.html>`_ module.\n        Accepts additional positional or keyword args as defined for\n        `pprint.pprint <https://docs.python.org/3/library/pprint.html#pprint.pprint>`_ .\n\n        Example::\n\n            ident = Word(alphas, alphanums)\n            num = Word(nums)\n            func = Forward()\n            term = ident | num | Group(\'(\' + func + \')\')\n            func <<= ident + Group(Optional(DelimitedList(term)))\n            result = func.parse_string("fna a,b,(fnb c,d,200),100")\n            result.pprint(width=40)\n\n        prints::\n\n            [\'fna\',\n             [\'a\',\n              \'b\',\n              [\'(\', \'fnb\', [\'c\', \'d\', \'200\'], \')\'],\n              \'100\']]\n        ')), Expr(value=Call(func=Attribute(value=Name(id='pprint', ctx=Load()), attr='pprint', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='as_list', ctx=Load()), args=[], keywords=[]), Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='__getstate__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_toklist', ctx=Load()), Tuple(elts=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tokdict', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[]), Constant(value=None), Attribute(value=Name(id='self', ctx=Load()), attr='_all_names', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_name', ctx=Load())], ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='__setstate__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='state')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_toklist', ctx=Store()), Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_tokdict', ctx=Store()), Name(id='par', ctx=Store()), Name(id='inAccumNames', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='_name', ctx=Store())], ctx=Store())], ctx=Store())], value=Name(id='state', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_all_names', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Name(id='inAccumNames', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_parent', ctx=Store())], value=Constant(value=None))], decorator_list=[]), FunctionDef(name='__getnewargs__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_toklist', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_name', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='__dir__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Call(func=Name(id='dir', ctx=Load()), args=[Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])], keywords=[]), op=Add(), right=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])))], decorator_list=[]), FunctionDef(name='from_dict', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='other'), arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='\n        Helper classmethod to construct a ``ParseResults`` from a ``dict``, preserving the\n        name-value relations as results names. If an optional ``name`` argument is\n        given, a nested ``ParseResults`` will be returned.\n        ')), FunctionDef(name='is_iterable', args=arguments(posonlyargs=[], args=[arg(arg='obj')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Expr(value=Call(func=Name(id='iter', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Return(value=Constant(value=False))])], orelse=[Return(value=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='obj', ctx=Load()), Name(id='str_type', ctx=Load())], keywords=[])))], finalbody=[])], decorator_list=[]), Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Name(id='cls', ctx=Load()), args=[List(elts=[], ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='other', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='v', ctx=Load()), Name(id='Mapping', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='ret', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='from_dict', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[keyword(arg='name', value=Name(id='k', ctx=Load()))]))], orelse=[AugAssign(target=Name(id='ret', ctx=Store()), op=Add(), value=Call(func=Name(id='cls', ctx=Load()), args=[List(elts=[Name(id='v', ctx=Load())], ctx=Load())], keywords=[keyword(arg='name', value=Name(id='k', ctx=Load())), keyword(arg='asList', value=Call(func=Name(id='is_iterable', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[]))]))])], orelse=[]), If(test=Compare(left=Name(id='name', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='ret', ctx=Store())], value=Call(func=Name(id='cls', ctx=Load()), args=[List(elts=[Name(id='ret', ctx=Load())], ctx=Load())], keywords=[keyword(arg='name', value=Name(id='name', ctx=Load()))]))], orelse=[]), Return(value=Name(id='ret', ctx=Load()))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Constant(value='ParseResults')), Assign(targets=[Name(id='asList', ctx=Store())], value=Name(id='as_list', ctx=Load())), Expr(value=Constant(value='Deprecated - use :class:`as_list`')), Assign(targets=[Name(id='asDict', ctx=Store())], value=Name(id='as_dict', ctx=Load())), Expr(value=Constant(value='Deprecated - use :class:`as_dict`')), Assign(targets=[Name(id='getName', ctx=Store())], value=Name(id='get_name', ctx=Load())), Expr(value=Constant(value='Deprecated - use :class:`get_name`'))], decorator_list=[]), Expr(value=Call(func=Attribute(value=Name(id='MutableMapping', ctx=Load()), attr='register', ctx=Load()), args=[Name(id='ParseResults', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='MutableSequence', ctx=Load()), attr='register', ctx=Load()), args=[Name(id='ParseResults', ctx=Load())], keywords=[]))], type_ignores=[])