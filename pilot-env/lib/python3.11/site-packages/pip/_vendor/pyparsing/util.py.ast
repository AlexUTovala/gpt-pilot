Module(body=[Import(names=[alias(name='inspect')]), Import(names=[alias(name='warnings')]), Import(names=[alias(name='types')]), Import(names=[alias(name='collections')]), Import(names=[alias(name='itertools')]), ImportFrom(module='functools', names=[alias(name='lru_cache'), alias(name='wraps')], level=0), ImportFrom(module='typing', names=[alias(name='Callable'), alias(name='List'), alias(name='Union'), alias(name='Iterable'), alias(name='TypeVar'), alias(name='cast')], level=0), Assign(targets=[Name(id='_bslash', ctx=Store())], value=Call(func=Name(id='chr', ctx=Load()), args=[Constant(value=92)], keywords=[])), Assign(targets=[Name(id='C', ctx=Store())], value=Call(func=Name(id='TypeVar', ctx=Load()), args=[Constant(value='C')], keywords=[keyword(arg='bound', value=Name(id='Callable', ctx=Load()))])), ClassDef(name='__config_flags', bases=[], keywords=[], body=[Expr(value=Constant(value='Internal class for defining compatibility and debugging flags')), AnnAssign(target=Name(id='_all_names', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), AnnAssign(target=Name(id='_fixed_names', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), Assign(targets=[Name(id='_type_desc', ctx=Store())], value=Constant(value='configuration')), FunctionDef(name='_set', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='dname'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='dname', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='cls', ctx=Load()), attr='_fixed_names', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='cls', ctx=Load()), attr='__name__', ctx=Load()), conversion=-1), Constant(value='.'), FormattedValue(value=Name(id='dname', ctx=Load()), conversion=-1), Constant(value=' '), FormattedValue(value=Attribute(value=Name(id='cls', ctx=Load()), attr='_type_desc', ctx=Load()), conversion=-1), Constant(value=' is '), FormattedValue(value=Call(func=Attribute(value=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='cls', ctx=Load()), Name(id='dname', ctx=Load())], keywords=[])], keywords=[]), attr='upper', ctx=Load()), args=[], keywords=[]), conversion=-1), Constant(value=' and cannot be overridden')])], keywords=[keyword(arg='stacklevel', value=Constant(value=3))])), Return()], orelse=[]), If(test=Compare(left=Name(id='dname', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='cls', ctx=Load()), attr='_all_names', ctx=Load())]), body=[Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='cls', ctx=Load()), Name(id='dname', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]))], orelse=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='no such '), FormattedValue(value=Attribute(value=Name(id='cls', ctx=Load()), attr='_type_desc', ctx=Load()), conversion=-1), Constant(value=' '), FormattedValue(value=Name(id='dname', ctx=Load()), conversion=114)])], keywords=[]))])], decorator_list=[Name(id='classmethod', ctx=Load())]), Assign(targets=[Name(id='enable', ctx=Store())], value=Call(func=Name(id='classmethod', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='_set', ctx=Load()), args=[Name(id='name', ctx=Load()), Constant(value=True)], keywords=[]))], keywords=[])), Assign(targets=[Name(id='disable', ctx=Store())], value=Call(func=Name(id='classmethod', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='_set', ctx=Load()), args=[Name(id='name', ctx=Load()), Constant(value=False)], keywords=[]))], keywords=[]))], decorator_list=[]), FunctionDef(name='col', args=arguments(posonlyargs=[], args=[arg(arg='loc', annotation=Name(id='int', ctx=Load())), arg(arg='strg', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Returns current column within a string, counting newlines as line separators.\n    The first column is number 1.\n\n    Note: the default parsing behavior is to expand tabs in the input string\n    before starting the parsing process.  See\n    :class:`ParserElement.parse_string` for more\n    information on parsing strings containing ``<TAB>`` s, and suggested\n    methods to maintain a consistent view of the parsed string, the parse\n    location, and line and column positions within the parsed string.\n    ')), Assign(targets=[Name(id='s', ctx=Store())], value=Name(id='strg', ctx=Load())), Return(value=IfExp(test=BoolOp(op=And(), values=[Compare(left=Constant(value=0), ops=[Lt(), Lt()], comparators=[Name(id='loc', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])]), Compare(left=Subscript(value=Name(id='s', ctx=Load()), slice=BinOp(left=Name(id='loc', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), ops=[Eq()], comparators=[Constant(value='\n')])]), body=Constant(value=1), orelse=BinOp(left=Name(id='loc', ctx=Load()), op=Sub(), right=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='rfind', ctx=Load()), args=[Constant(value='\n'), Constant(value=0), Name(id='loc', ctx=Load())], keywords=[]))))], decorator_list=[Call(func=Name(id='lru_cache', ctx=Load()), args=[], keywords=[keyword(arg='maxsize', value=Constant(value=128))])], returns=Name(id='int', ctx=Load())), FunctionDef(name='lineno', args=arguments(posonlyargs=[], args=[arg(arg='loc', annotation=Name(id='int', ctx=Load())), arg(arg='strg', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Returns current line number within a string, counting newlines as line separators.\n    The first line is number 1.\n\n    Note - the default parsing behavior is to expand tabs in the input string\n    before starting the parsing process.  See :class:`ParserElement.parse_string`\n    for more information on parsing strings containing ``<TAB>`` s, and\n    suggested methods to maintain a consistent view of the parsed string, the\n    parse location, and line and column positions within the parsed string.\n    ')), Return(value=BinOp(left=Call(func=Attribute(value=Name(id='strg', ctx=Load()), attr='count', ctx=Load()), args=[Constant(value='\n'), Constant(value=0), Name(id='loc', ctx=Load())], keywords=[]), op=Add(), right=Constant(value=1)))], decorator_list=[Call(func=Name(id='lru_cache', ctx=Load()), args=[], keywords=[keyword(arg='maxsize', value=Constant(value=128))])], returns=Name(id='int', ctx=Load())), FunctionDef(name='line', args=arguments(posonlyargs=[], args=[arg(arg='loc', annotation=Name(id='int', ctx=Load())), arg(arg='strg', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Returns the line of text containing loc within a string, counting newlines as line separators.\n    ')), Assign(targets=[Name(id='last_cr', ctx=Store())], value=Call(func=Attribute(value=Name(id='strg', ctx=Load()), attr='rfind', ctx=Load()), args=[Constant(value='\n'), Constant(value=0), Name(id='loc', ctx=Load())], keywords=[])), Assign(targets=[Name(id='next_cr', ctx=Store())], value=Call(func=Attribute(value=Name(id='strg', ctx=Load()), attr='find', ctx=Load()), args=[Constant(value='\n'), Name(id='loc', ctx=Load())], keywords=[])), Return(value=IfExp(test=Compare(left=Name(id='next_cr', ctx=Load()), ops=[GtE()], comparators=[Constant(value=0)]), body=Subscript(value=Name(id='strg', ctx=Load()), slice=Slice(lower=BinOp(left=Name(id='last_cr', ctx=Load()), op=Add(), right=Constant(value=1)), upper=Name(id='next_cr', ctx=Load())), ctx=Load()), orelse=Subscript(value=Name(id='strg', ctx=Load()), slice=Slice(lower=BinOp(left=Name(id='last_cr', ctx=Load()), op=Add(), right=Constant(value=1))), ctx=Load())))], decorator_list=[Call(func=Name(id='lru_cache', ctx=Load()), args=[], keywords=[keyword(arg='maxsize', value=Constant(value=128))])], returns=Name(id='str', ctx=Load())), ClassDef(name='_UnboundedCache', bases=[], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='cache', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='cache_get', ctx=Store())], value=Attribute(value=Name(id='cache', ctx=Load()), attr='get', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='not_in_cache', ctx=Store()), Name(id='not_in_cache', ctx=Store())], value=Call(func=Name(id='object', ctx=Load()), args=[], keywords=[])), FunctionDef(name='get', args=arguments(posonlyargs=[], args=[arg(arg='_'), arg(arg='key')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='cache_get', ctx=Load()), args=[Name(id='key', ctx=Load()), Name(id='not_in_cache', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='set_', args=arguments(posonlyargs=[], args=[arg(arg='_'), arg(arg='key'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Name(id='cache', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[]), FunctionDef(name='clear', args=arguments(posonlyargs=[], args=[arg(arg='_')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='cache', ctx=Load()), attr='clear', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='size', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='get', ctx=Store())], value=Call(func=Attribute(value=Name(id='types', ctx=Load()), attr='MethodType', ctx=Load()), args=[Name(id='get', ctx=Load()), Name(id='self', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='set', ctx=Store())], value=Call(func=Attribute(value=Name(id='types', ctx=Load()), attr='MethodType', ctx=Load()), args=[Name(id='set_', ctx=Load()), Name(id='self', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='clear', ctx=Store())], value=Call(func=Attribute(value=Name(id='types', ctx=Load()), attr='MethodType', ctx=Load()), args=[Name(id='clear', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='_FifoCache', bases=[], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='size')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='not_in_cache', ctx=Store()), Name(id='not_in_cache', ctx=Store())], value=Call(func=Name(id='object', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='cache', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='keyring', ctx=Store())], value=BinOp(left=List(elts=[Call(func=Name(id='object', ctx=Load()), args=[], keywords=[])], ctx=Load()), op=Mult(), right=Name(id='size', ctx=Load()))), Assign(targets=[Name(id='cache_get', ctx=Store())], value=Attribute(value=Name(id='cache', ctx=Load()), attr='get', ctx=Load())), Assign(targets=[Name(id='cache_pop', ctx=Store())], value=Attribute(value=Name(id='cache', ctx=Load()), attr='pop', ctx=Load())), Assign(targets=[Name(id='keyiter', ctx=Store())], value=Call(func=Attribute(value=Name(id='itertools', ctx=Load()), attr='cycle', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Name(id='size', ctx=Load())], keywords=[])], keywords=[])), FunctionDef(name='get', args=arguments(posonlyargs=[], args=[arg(arg='_'), arg(arg='key')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='cache_get', ctx=Load()), args=[Name(id='key', ctx=Load()), Name(id='not_in_cache', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='set_', args=arguments(posonlyargs=[], args=[arg(arg='_'), arg(arg='key'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Name(id='cache', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Name(id='value', ctx=Load())), Assign(targets=[Name(id='i', ctx=Store())], value=Call(func=Name(id='next', ctx=Load()), args=[Name(id='keyiter', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='cache_pop', ctx=Load()), args=[Subscript(value=Name(id='keyring', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), Constant(value=None)], keywords=[])), Assign(targets=[Subscript(value=Name(id='keyring', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Store())], value=Name(id='key', ctx=Load()))], decorator_list=[]), FunctionDef(name='clear', args=arguments(posonlyargs=[], args=[arg(arg='_')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='cache', ctx=Load()), attr='clear', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Name(id='keyring', ctx=Load()), slice=Slice(), ctx=Store())], value=BinOp(left=List(elts=[Call(func=Name(id='object', ctx=Load()), args=[], keywords=[])], ctx=Load()), op=Mult(), right=Name(id='size', ctx=Load())))], decorator_list=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='size', ctx=Store())], value=Name(id='size', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='get', ctx=Store())], value=Call(func=Attribute(value=Name(id='types', ctx=Load()), attr='MethodType', ctx=Load()), args=[Name(id='get', ctx=Load()), Name(id='self', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='set', ctx=Store())], value=Call(func=Attribute(value=Name(id='types', ctx=Load()), attr='MethodType', ctx=Load()), args=[Name(id='set_', ctx=Load()), Name(id='self', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='clear', ctx=Store())], value=Call(func=Attribute(value=Name(id='types', ctx=Load()), attr='MethodType', ctx=Load()), args=[Name(id='clear', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='LRUMemo', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    A memoizing mapping that retains `capacity` deleted items\n\n    The memo tracks retained items by their access order; once `capacity` items\n    are retained, the least recently used item is discarded.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='capacity')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_capacity', ctx=Store())], value=Name(id='capacity', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_active', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_memory', ctx=Store())], value=Call(func=Attribute(value=Name(id='collections', ctx=Load()), attr='OrderedDict', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='__getitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_active', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_memory', ctx=Load()), attr='move_to_end', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[])), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_memory', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='__setitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_memory', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='key', ctx=Load()), Constant(value=None)], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_active', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[]), FunctionDef(name='__delitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_active', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Pass()])], orelse=[While(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_memory', ctx=Load())], keywords=[]), ops=[GtE()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_capacity', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_memory', ctx=Load()), attr='popitem', ctx=Load()), args=[], keywords=[keyword(arg='last', value=Constant(value=False))]))], orelse=[]), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_memory', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Name(id='value', ctx=Load()))], finalbody=[])], decorator_list=[]), FunctionDef(name='clear', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_active', ctx=Load()), attr='clear', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_memory', ctx=Load()), attr='clear', ctx=Load()), args=[], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='UnboundedMemo', bases=[Name(id='dict', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    A memoizing mapping that retains all deleted items\n    ')), FunctionDef(name='__delitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[])], decorator_list=[]), FunctionDef(name='_escape_regex_range_chars', args=arguments(posonlyargs=[], args=[arg(arg='s', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='c', ctx=Store()), iter=Constant(value='\\^-[]'), body=[Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='replace', ctx=Load()), args=[Name(id='c', ctx=Load()), BinOp(left=Name(id='_bslash', ctx=Load()), op=Add(), right=Name(id='c', ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='\n'), Constant(value='\\n')], keywords=[])), Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='\t'), Constant(value='\\t')], keywords=[])), Return(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='_collapse_string_to_ranges', args=arguments(posonlyargs=[], args=[arg(arg='s', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='re_escape', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[FunctionDef(name='is_consecutive', args=arguments(posonlyargs=[], args=[arg(arg='c')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='c_int', ctx=Store())], value=Call(func=Name(id='ord', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Attribute(value=Name(id='is_consecutive', ctx=Load()), attr='prev', ctx=Store()), Name(id='prev', ctx=Store())], ctx=Store())], value=Tuple(elts=[Name(id='c_int', ctx=Load()), Attribute(value=Name(id='is_consecutive', ctx=Load()), attr='prev', ctx=Load())], ctx=Load())), If(test=Compare(left=BinOp(left=Name(id='c_int', ctx=Load()), op=Sub(), right=Name(id='prev', ctx=Load())), ops=[Gt()], comparators=[Constant(value=1)]), body=[Assign(targets=[Attribute(value=Name(id='is_consecutive', ctx=Load()), attr='value', ctx=Store())], value=Call(func=Name(id='next', ctx=Load()), args=[Attribute(value=Name(id='is_consecutive', ctx=Load()), attr='counter', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Attribute(value=Name(id='is_consecutive', ctx=Load()), attr='value', ctx=Load()))], decorator_list=[]), Assign(targets=[Attribute(value=Name(id='is_consecutive', ctx=Load()), attr='prev', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='is_consecutive', ctx=Load()), attr='counter', ctx=Store())], value=Call(func=Attribute(value=Name(id='itertools', ctx=Load()), attr='count', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='is_consecutive', ctx=Load()), attr='value', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=1))), FunctionDef(name='escape_re_range_char', args=arguments(posonlyargs=[], args=[arg(arg='c')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=IfExp(test=Compare(left=Name(id='c', ctx=Load()), ops=[In()], comparators=[Constant(value='\\^-][')]), body=BinOp(left=Constant(value='\\'), op=Add(), right=Name(id='c', ctx=Load())), orelse=Name(id='c', ctx=Load())))], decorator_list=[]), FunctionDef(name='no_escape_re_range_char', args=arguments(posonlyargs=[], args=[arg(arg='c')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Name(id='c', ctx=Load()))], decorator_list=[]), If(test=UnaryOp(op=Not(), operand=Name(id='re_escape', ctx=Load())), body=[Assign(targets=[Name(id='escape_re_range_char', ctx=Store())], value=Name(id='no_escape_re_range_char', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='ret', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])], keywords=[])], keywords=[])), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=3)]), body=[For(target=Tuple(elts=[Name(id='_', ctx=Store()), Name(id='chars', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='itertools', ctx=Load()), attr='groupby', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[keyword(arg='key', value=Name(id='is_consecutive', ctx=Load()))]), body=[Assign(targets=[Name(id='first', ctx=Store()), Name(id='last', ctx=Store())], value=Call(func=Name(id='next', ctx=Load()), args=[Name(id='chars', ctx=Load())], keywords=[])), Assign(targets=[Name(id='last', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='collections', ctx=Load()), attr='deque', ctx=Load()), args=[Call(func=Attribute(value=Name(id='itertools', ctx=Load()), attr='chain', ctx=Load()), args=[Call(func=Name(id='iter', ctx=Load()), args=[List(elts=[Name(id='last', ctx=Load())], ctx=Load())], keywords=[]), Name(id='chars', ctx=Load())], keywords=[])], keywords=[keyword(arg='maxlen', value=Constant(value=1))]), attr='pop', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='first', ctx=Load()), ops=[Eq()], comparators=[Name(id='last', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='ret', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='escape_re_range_char', ctx=Load()), args=[Name(id='first', ctx=Load())], keywords=[])], keywords=[]))], orelse=[Assign(targets=[Name(id='sep', ctx=Store())], value=IfExp(test=Compare(left=Call(func=Name(id='ord', ctx=Load()), args=[Name(id='last', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[BinOp(left=Call(func=Name(id='ord', ctx=Load()), args=[Name(id='first', ctx=Load())], keywords=[]), op=Add(), right=Constant(value=1))]), body=Constant(value=''), orelse=Constant(value='-'))), Expr(value=Call(func=Attribute(value=Name(id='ret', ctx=Load()), attr='append', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Call(func=Name(id='escape_re_range_char', ctx=Load()), args=[Name(id='first', ctx=Load())], keywords=[]), conversion=-1), FormattedValue(value=Name(id='sep', ctx=Load()), conversion=-1), FormattedValue(value=Call(func=Name(id='escape_re_range_char', ctx=Load()), args=[Name(id='last', ctx=Load())], keywords=[]), conversion=-1)])], keywords=[]))])], orelse=[])], orelse=[Assign(targets=[Name(id='ret', ctx=Store())], value=ListComp(elt=Call(func=Name(id='escape_re_range_char', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Name(id='s', ctx=Load()), ifs=[], is_async=0)]))]), Return(value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Name(id='ret', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='_flatten', args=arguments(posonlyargs=[], args=[arg(arg='ll', annotation=Name(id='list', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ret', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='i', ctx=Store()), iter=Name(id='ll', ctx=Load()), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='i', ctx=Load()), Name(id='list', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='ret', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Name(id='_flatten', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[])], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='ret', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]))])], orelse=[]), Return(value=Name(id='ret', ctx=Load()))], decorator_list=[], returns=Name(id='list', ctx=Load())), FunctionDef(name='_make_synonym_function', args=arguments(posonlyargs=[], args=[arg(arg='compat_name', annotation=Name(id='str', ctx=Load())), arg(arg='fn', annotation=Name(id='C', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='fn', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='fn', ctx=Load()), Constant(value='__func__'), Name(id='fn', ctx=Load())], keywords=[])), If(test=Compare(left=Constant(value='self'), ops=[Eq()], comparators=[Subscript(value=Call(func=Name(id='list', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='inspect', ctx=Load()), attr='signature', ctx=Load()), args=[Name(id='fn', ctx=Load())], keywords=[]), attr='parameters', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())]), body=[FunctionDef(name='_inner', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Return(value=Call(func=Name(id='fn', ctx=Load()), args=[Name(id='self', ctx=Load()), Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[Call(func=Name(id='wraps', ctx=Load()), args=[Name(id='fn', ctx=Load())], keywords=[])])], orelse=[FunctionDef(name='_inner', args=arguments(posonlyargs=[], args=[], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Return(value=Call(func=Name(id='fn', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[Call(func=Name(id='wraps', ctx=Load()), args=[Name(id='fn', ctx=Load())], keywords=[])])]), Assign(targets=[Attribute(value=Name(id='_inner', ctx=Load()), attr='__doc__', ctx=Store())], value=JoinedStr(values=[Constant(value='Deprecated - use :class:`'), FormattedValue(value=Attribute(value=Name(id='fn', ctx=Load()), attr='__name__', ctx=Load()), conversion=-1), Constant(value='`')])), Assign(targets=[Attribute(value=Name(id='_inner', ctx=Load()), attr='__name__', ctx=Store())], value=Name(id='compat_name', ctx=Load())), Assign(targets=[Attribute(value=Name(id='_inner', ctx=Load()), attr='__annotations__', ctx=Store())], value=Attribute(value=Name(id='fn', ctx=Load()), attr='__annotations__', ctx=Load())), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='fn', ctx=Load()), Attribute(value=Name(id='types', ctx=Load()), attr='FunctionType', ctx=Load())], keywords=[]), body=[Assign(targets=[Attribute(value=Name(id='_inner', ctx=Load()), attr='__kwdefaults__', ctx=Store())], value=Attribute(value=Name(id='fn', ctx=Load()), attr='__kwdefaults__', ctx=Load()))], orelse=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='fn', ctx=Load()), Name(id='type', ctx=Load())], keywords=[]), Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='fn', ctx=Load()), Constant(value='__init__')], keywords=[])]), body=[Assign(targets=[Attribute(value=Name(id='_inner', ctx=Load()), attr='__kwdefaults__', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='fn', ctx=Load()), attr='__init__', ctx=Load()), attr='__kwdefaults__', ctx=Load()))], orelse=[Assign(targets=[Attribute(value=Name(id='_inner', ctx=Load()), attr='__kwdefaults__', ctx=Store())], value=Constant(value=None))])]), Assign(targets=[Attribute(value=Name(id='_inner', ctx=Load()), attr='__qualname__', ctx=Store())], value=Attribute(value=Name(id='fn', ctx=Load()), attr='__qualname__', ctx=Load())), Return(value=Call(func=Name(id='cast', ctx=Load()), args=[Name(id='C', ctx=Load()), Name(id='_inner', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='C', ctx=Load())), FunctionDef(name='replaced_by_pep8', args=arguments(posonlyargs=[], args=[arg(arg='fn', annotation=Name(id='C', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Decorator for pre-PEP8 compatibility synonyms, to link them to the new function.\n    ')), Return(value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='_make_synonym_function', ctx=Load()), args=[Attribute(value=Name(id='other', ctx=Load()), attr='__name__', ctx=Load()), Name(id='fn', ctx=Load())], keywords=[])))], decorator_list=[], returns=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='Callable', ctx=Load())], ctx=Load()), Name(id='C', ctx=Load())], ctx=Load()), ctx=Load()))], type_ignores=[])