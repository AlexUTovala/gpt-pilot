Module(body=[Expr(value=Constant(value='\nThe httplib2 algorithms ported for use with requests.\n')), ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), Import(names=[alias(name='calendar')]), Import(names=[alias(name='logging')]), Import(names=[alias(name='re')]), Import(names=[alias(name='time')]), ImportFrom(module='email.utils', names=[alias(name='parsedate_tz')], level=0), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING'), alias(name='Collection'), alias(name='Mapping')], level=0), ImportFrom(module='pip._vendor.requests.structures', names=[alias(name='CaseInsensitiveDict')], level=0), ImportFrom(module='pip._vendor.cachecontrol.cache', names=[alias(name='DictCache'), alias(name='SeparateBodyBaseCache')], level=0), ImportFrom(module='pip._vendor.cachecontrol.serialize', names=[alias(name='Serializer')], level=0), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='typing', names=[alias(name='Literal')], level=0), ImportFrom(module='pip._vendor.requests', names=[alias(name='PreparedRequest')], level=0), ImportFrom(module='pip._vendor.urllib3', names=[alias(name='HTTPResponse')], level=0), ImportFrom(module='pip._vendor.cachecontrol.cache', names=[alias(name='BaseCache')], level=0)], orelse=[]), Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), Assign(targets=[Name(id='URI', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\\?([^#]*))?(#(.*))?')], keywords=[])), Assign(targets=[Name(id='PERMANENT_REDIRECT_STATUSES', ctx=Store())], value=Tuple(elts=[Constant(value=301), Constant(value=308)], ctx=Load())), FunctionDef(name='parse_uri', args=arguments(posonlyargs=[], args=[arg(arg='uri', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Parses a URI using the regex given in Appendix B of RFC 3986.\n\n    (scheme, authority, path, query, fragment) = parse_uri(uri)\n    ')), Assign(targets=[Name(id='match', ctx=Store())], value=Call(func=Attribute(value=Name(id='URI', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='uri', ctx=Load())], keywords=[])), Assert(test=Compare(left=Name(id='match', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Name(id='groups', ctx=Store())], value=Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='groups', ctx=Load()), args=[], keywords=[])), Return(value=Tuple(elts=[Subscript(value=Name(id='groups', ctx=Load()), slice=Constant(value=1), ctx=Load()), Subscript(value=Name(id='groups', ctx=Load()), slice=Constant(value=3), ctx=Load()), Subscript(value=Name(id='groups', ctx=Load()), slice=Constant(value=4), ctx=Load()), Subscript(value=Name(id='groups', ctx=Load()), slice=Constant(value=6), ctx=Load()), Subscript(value=Name(id='groups', ctx=Load()), slice=Constant(value=8), ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load()), Name(id='str', ctx=Load()), Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), ClassDef(name='CacheController', bases=[], keywords=[], body=[Expr(value=Constant(value='An interface to see if request should cached or not.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='cache', annotation=BinOp(left=Name(id='BaseCache', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='cache_etags', annotation=Name(id='bool', ctx=Load())), arg(arg='serializer', annotation=BinOp(left=Name(id='Serializer', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='status_codes', annotation=BinOp(left=Subscript(value=Name(id='Collection', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=True), Constant(value=None), Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='cache', ctx=Store())], value=IfExp(test=Compare(left=Name(id='cache', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Call(func=Name(id='DictCache', ctx=Load()), args=[], keywords=[]), orelse=Name(id='cache', ctx=Load()))), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='cache_etags', ctx=Store())], value=Name(id='cache_etags', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='serializer', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='serializer', ctx=Load()), Call(func=Name(id='Serializer', ctx=Load()), args=[], keywords=[])])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='cacheable_status_codes', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='status_codes', ctx=Load()), Tuple(elts=[Constant(value=200), Constant(value=203), Constant(value=300), Constant(value=301), Constant(value=308)], ctx=Load())]))], decorator_list=[]), FunctionDef(name='_urlnorm', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='uri', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Normalize the URL to create a safe key for the cache')), Assign(targets=[Tuple(elts=[Name(id='scheme', ctx=Store()), Name(id='authority', ctx=Store()), Name(id='path', ctx=Store()), Name(id='query', ctx=Store()), Name(id='fragment', ctx=Store())], ctx=Store())], value=Call(func=Name(id='parse_uri', ctx=Load()), args=[Name(id='uri', ctx=Load())], keywords=[])), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Name(id='scheme', ctx=Load())), UnaryOp(op=Not(), operand=Name(id='authority', ctx=Load()))]), body=[Raise(exc=Call(func=Name(id='Exception', ctx=Load()), args=[BinOp(left=Constant(value='Only absolute URIs are allowed. uri = %s'), op=Mod(), right=Name(id='uri', ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Name(id='scheme', ctx=Store())], value=Call(func=Attribute(value=Name(id='scheme', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='authority', ctx=Store())], value=Call(func=Attribute(value=Name(id='authority', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='path', ctx=Load())), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Constant(value='/'))], orelse=[]), Assign(targets=[Name(id='request_uri', ctx=Store())], value=BoolOp(op=Or(), values=[BoolOp(op=And(), values=[Name(id='query', ctx=Load()), Call(func=Attribute(value=Constant(value='?'), attr='join', ctx=Load()), args=[List(elts=[Name(id='path', ctx=Load()), Name(id='query', ctx=Load())], ctx=Load())], keywords=[])]), Name(id='path', ctx=Load())])), Assign(targets=[Name(id='defrag_uri', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=Name(id='scheme', ctx=Load()), op=Add(), right=Constant(value='://')), op=Add(), right=Name(id='authority', ctx=Load())), op=Add(), right=Name(id='request_uri', ctx=Load()))), Return(value=Name(id='defrag_uri', ctx=Load()))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='cache_url', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='uri', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='_urlnorm', ctx=Load()), args=[Name(id='uri', ctx=Load())], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='parse_cache_control', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='headers', annotation=Subscript(value=Name(id='Mapping', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='known_directives', ctx=Store())], value=Dict(keys=[Constant(value='max-age'), Constant(value='max-stale'), Constant(value='min-fresh'), Constant(value='no-cache'), Constant(value='no-store'), Constant(value='no-transform'), Constant(value='only-if-cached'), Constant(value='must-revalidate'), Constant(value='public'), Constant(value='private'), Constant(value='proxy-revalidate'), Constant(value='s-maxage')], values=[Tuple(elts=[Name(id='int', ctx=Load()), Constant(value=True)], ctx=Load()), Tuple(elts=[Name(id='int', ctx=Load()), Constant(value=False)], ctx=Load()), Tuple(elts=[Name(id='int', ctx=Load()), Constant(value=True)], ctx=Load()), Tuple(elts=[Constant(value=None), Constant(value=False)], ctx=Load()), Tuple(elts=[Constant(value=None), Constant(value=False)], ctx=Load()), Tuple(elts=[Constant(value=None), Constant(value=False)], ctx=Load()), Tuple(elts=[Constant(value=None), Constant(value=False)], ctx=Load()), Tuple(elts=[Constant(value=None), Constant(value=False)], ctx=Load()), Tuple(elts=[Constant(value=None), Constant(value=False)], ctx=Load()), Tuple(elts=[Constant(value=None), Constant(value=False)], ctx=Load()), Tuple(elts=[Constant(value=None), Constant(value=False)], ctx=Load()), Tuple(elts=[Name(id='int', ctx=Load()), Constant(value=True)], ctx=Load())])), Assign(targets=[Name(id='cc_headers', ctx=Store())], value=Call(func=Attribute(value=Name(id='headers', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='cache-control'), Call(func=Attribute(value=Name(id='headers', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='Cache-Control'), Constant(value='')], keywords=[])], keywords=[])), AnnAssign(target=Name(id='retval', ctx=Store()), annotation=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None))], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=1), For(target=Name(id='cc_directive', ctx=Store()), iter=Call(func=Attribute(value=Name(id='cc_headers', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=',')], keywords=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='cc_directive', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[])), body=[Continue()], orelse=[]), Assign(targets=[Name(id='parts', ctx=Store())], value=Call(func=Attribute(value=Name(id='cc_directive', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='='), Constant(value=1)], keywords=[])), Assign(targets=[Name(id='directive', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='parts', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[])), Try(body=[Assign(targets=[Tuple(elts=[Name(id='typ', ctx=Store()), Name(id='required', ctx=Store())], ctx=Store())], value=Subscript(value=Name(id='known_directives', ctx=Load()), slice=Name(id='directive', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Ignoring unknown cache-control directive: %s'), Name(id='directive', ctx=Load())], keywords=[])), Continue()])], orelse=[], finalbody=[]), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Name(id='typ', ctx=Load())), UnaryOp(op=Not(), operand=Name(id='required', ctx=Load()))]), body=[Assign(targets=[Subscript(value=Name(id='retval', ctx=Load()), slice=Name(id='directive', ctx=Load()), ctx=Store())], value=Constant(value=None))], orelse=[]), If(test=Name(id='typ', ctx=Load()), body=[Try(body=[Assign(targets=[Subscript(value=Name(id='retval', ctx=Load()), slice=Name(id='directive', ctx=Load()), ctx=Store())], value=Call(func=Name(id='typ', ctx=Load()), args=[Call(func=Attribute(value=Subscript(value=Name(id='parts', ctx=Load()), slice=Constant(value=1), ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[])], keywords=[]))], handlers=[ExceptHandler(type=Name(id='IndexError', ctx=Load()), body=[If(test=Name(id='required', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Missing value for cache-control directive: %s'), Name(id='directive', ctx=Load())], keywords=[]))], orelse=[])]), ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Invalid value for cache-control directive %s, must be %s'), Name(id='directive', ctx=Load()), Attribute(value=Name(id='typ', ctx=Load()), attr='__name__', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], orelse=[])], orelse=[]), Return(value=Name(id='retval', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None))], ctx=Load()), ctx=Load())), FunctionDef(name='_load_from_cache', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='request', annotation=Name(id='PreparedRequest', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Load a cached response, or return None if it's not available.\n        ")), Assign(targets=[Name(id='cache_url', ctx=Store())], value=Attribute(value=Name(id='request', ctx=Load()), attr='url', ctx=Load())), Assert(test=Compare(left=Name(id='cache_url', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Name(id='cache_data', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cache', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='cache_url', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='cache_data', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='No cache entry available')], keywords=[])), Return(value=Constant(value=None))], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='cache', ctx=Load()), Name(id='SeparateBodyBaseCache', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='body_file', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cache', ctx=Load()), attr='get_body', ctx=Load()), args=[Name(id='cache_url', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='body_file', ctx=Store())], value=Constant(value=None))]), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='serializer', ctx=Load()), attr='loads', ctx=Load()), args=[Name(id='request', ctx=Load()), Name(id='cache_data', ctx=Load()), Name(id='body_file', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='result', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='Cache entry deserialization failed, entry ignored')], keywords=[]))], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=BinOp(left=Name(id='HTTPResponse', ctx=Load()), op=BitOr(), right=Constant(value=None))), FunctionDef(name='cached_request', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='request', annotation=Name(id='PreparedRequest', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return a cached response if it exists in the cache, otherwise\n        return False.\n        ')), Assert(test=Compare(left=Attribute(value=Name(id='request', ctx=Load()), attr='url', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Name(id='cache_url', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='cache_url', ctx=Load()), args=[Attribute(value=Name(id='request', ctx=Load()), attr='url', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Looking up "%s" in the cache'), Name(id='cache_url', ctx=Load())], keywords=[])), Assign(targets=[Name(id='cc', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='parse_cache_control', ctx=Load()), args=[Attribute(value=Name(id='request', ctx=Load()), attr='headers', ctx=Load())], keywords=[])), If(test=Compare(left=Constant(value='no-cache'), ops=[In()], comparators=[Name(id='cc', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Request header has "no-cache", cache bypassed')], keywords=[])), Return(value=Constant(value=False))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Constant(value='max-age'), ops=[In()], comparators=[Name(id='cc', ctx=Load())]), Compare(left=Subscript(value=Name(id='cc', ctx=Load()), slice=Constant(value='max-age'), ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Request header has "max_age" as 0, cache bypassed')], keywords=[])), Return(value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='resp', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_load_from_cache', ctx=Load()), args=[Name(id='request', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='resp', ctx=Load())), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Attribute(value=Name(id='resp', ctx=Load()), attr='status', ctx=Load())], keywords=[]), ops=[In()], comparators=[Name(id='PERMANENT_REDIRECT_STATUSES', ctx=Load())]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Constant(value='Returning cached permanent redirect response (ignoring date and etag information)')), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[])), Return(value=Name(id='resp', ctx=Load()))], orelse=[]), AnnAssign(target=Name(id='headers', ctx=Store()), annotation=Subscript(value=Name(id='CaseInsensitiveDict', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Call(func=Name(id='CaseInsensitiveDict', ctx=Load()), args=[Attribute(value=Name(id='resp', ctx=Load()), attr='headers', ctx=Load())], keywords=[]), simple=1), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Name(id='headers', ctx=Load())), Compare(left=Constant(value='date'), ops=[NotIn()], comparators=[Name(id='headers', ctx=Load())])]), body=[If(test=Compare(left=Constant(value='etag'), ops=[NotIn()], comparators=[Name(id='headers', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Purging cached response: no date or etag')], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cache', ctx=Load()), attr='delete', ctx=Load()), args=[Name(id='cache_url', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Ignoring cached response: no date')], keywords=[])), Return(value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='now', ctx=Store())], value=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='time', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='time_tuple', ctx=Store())], value=Call(func=Name(id='parsedate_tz', ctx=Load()), args=[Subscript(value=Name(id='headers', ctx=Load()), slice=Constant(value='date'), ctx=Load())], keywords=[])), Assert(test=Compare(left=Name(id='time_tuple', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Name(id='date', ctx=Store())], value=Call(func=Attribute(value=Name(id='calendar', ctx=Load()), attr='timegm', ctx=Load()), args=[Subscript(value=Name(id='time_tuple', ctx=Load()), slice=Slice(upper=Constant(value=6)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='current_age', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Constant(value=0), BinOp(left=Name(id='now', ctx=Load()), op=Sub(), right=Name(id='date', ctx=Load()))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Current age based on date: %i'), Name(id='current_age', ctx=Load())], keywords=[])), Assign(targets=[Name(id='resp_cc', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='parse_cache_control', ctx=Load()), args=[Name(id='headers', ctx=Load())], keywords=[])), Assign(targets=[Name(id='freshness_lifetime', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='max_age', ctx=Store())], value=Call(func=Attribute(value=Name(id='resp_cc', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='max-age')], keywords=[])), If(test=Compare(left=Name(id='max_age', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='freshness_lifetime', ctx=Store())], value=Name(id='max_age', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Freshness lifetime from max-age: %i'), Name(id='freshness_lifetime', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Constant(value='expires'), ops=[In()], comparators=[Name(id='headers', ctx=Load())]), body=[Assign(targets=[Name(id='expires', ctx=Store())], value=Call(func=Name(id='parsedate_tz', ctx=Load()), args=[Subscript(value=Name(id='headers', ctx=Load()), slice=Constant(value='expires'), ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='expires', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='expire_time', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='calendar', ctx=Load()), attr='timegm', ctx=Load()), args=[Subscript(value=Name(id='expires', ctx=Load()), slice=Slice(upper=Constant(value=6)), ctx=Load())], keywords=[]), op=Sub(), right=Name(id='date', ctx=Load()))), Assign(targets=[Name(id='freshness_lifetime', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Constant(value=0), Name(id='expire_time', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Freshness lifetime from expires: %i'), Name(id='freshness_lifetime', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])]), Assign(targets=[Name(id='max_age', ctx=Store())], value=Call(func=Attribute(value=Name(id='cc', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='max-age')], keywords=[])), If(test=Compare(left=Name(id='max_age', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='freshness_lifetime', ctx=Store())], value=Name(id='max_age', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Freshness lifetime from request max-age: %i'), Name(id='freshness_lifetime', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='min_fresh', ctx=Store())], value=Call(func=Attribute(value=Name(id='cc', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='min-fresh')], keywords=[])), If(test=Compare(left=Name(id='min_fresh', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[AugAssign(target=Name(id='current_age', ctx=Store()), op=Add(), value=Name(id='min_fresh', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Adjusted current age from min-fresh: %i'), Name(id='current_age', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='freshness_lifetime', ctx=Load()), ops=[Gt()], comparators=[Name(id='current_age', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='The response is "fresh", returning cached response')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='%i > %i'), Name(id='freshness_lifetime', ctx=Load()), Name(id='current_age', ctx=Load())], keywords=[])), Return(value=Name(id='resp', ctx=Load()))], orelse=[]), If(test=Compare(left=Constant(value='etag'), ops=[NotIn()], comparators=[Name(id='headers', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='The cached response is "stale" with no etag, purging')], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cache', ctx=Load()), attr='delete', ctx=Load()), args=[Name(id='cache_url', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Constant(value=False))], decorator_list=[], returns=BinOp(left=Name(id='HTTPResponse', ctx=Load()), op=BitOr(), right=Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value=False), ctx=Load()))), FunctionDef(name='conditional_headers', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='request', annotation=Name(id='PreparedRequest', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='resp', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_load_from_cache', ctx=Load()), args=[Name(id='request', ctx=Load())], keywords=[])), Assign(targets=[Name(id='new_headers', ctx=Store())], value=Dict(keys=[], values=[])), If(test=Name(id='resp', ctx=Load()), body=[AnnAssign(target=Name(id='headers', ctx=Store()), annotation=Subscript(value=Name(id='CaseInsensitiveDict', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Call(func=Name(id='CaseInsensitiveDict', ctx=Load()), args=[Attribute(value=Name(id='resp', ctx=Load()), attr='headers', ctx=Load())], keywords=[]), simple=1), If(test=Compare(left=Constant(value='etag'), ops=[In()], comparators=[Name(id='headers', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='new_headers', ctx=Load()), slice=Constant(value='If-None-Match'), ctx=Store())], value=Subscript(value=Name(id='headers', ctx=Load()), slice=Constant(value='ETag'), ctx=Load()))], orelse=[]), If(test=Compare(left=Constant(value='last-modified'), ops=[In()], comparators=[Name(id='headers', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='new_headers', ctx=Load()), slice=Constant(value='If-Modified-Since'), ctx=Store())], value=Subscript(value=Name(id='headers', ctx=Load()), slice=Constant(value='Last-Modified'), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='new_headers', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='_cache_set', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='cache_url', annotation=Name(id='str', ctx=Load())), arg(arg='request', annotation=Name(id='PreparedRequest', ctx=Load())), arg(arg='response', annotation=Name(id='HTTPResponse', ctx=Load())), arg(arg='body', annotation=BinOp(left=Name(id='bytes', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='expires_time', annotation=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='\n        Store the data in the cache.\n        ')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='cache', ctx=Load()), Name(id='SeparateBodyBaseCache', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cache', ctx=Load()), attr='set', ctx=Load()), args=[Name(id='cache_url', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='serializer', ctx=Load()), attr='dumps', ctx=Load()), args=[Name(id='request', ctx=Load()), Name(id='response', ctx=Load()), Constant(value=b'')], keywords=[])], keywords=[keyword(arg='expires', value=Name(id='expires_time', ctx=Load()))])), If(test=Compare(left=Name(id='body', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cache', ctx=Load()), attr='set_body', ctx=Load()), args=[Name(id='cache_url', ctx=Load()), Name(id='body', ctx=Load())], keywords=[]))], orelse=[])], orelse=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cache', ctx=Load()), attr='set', ctx=Load()), args=[Name(id='cache_url', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='serializer', ctx=Load()), attr='dumps', ctx=Load()), args=[Name(id='request', ctx=Load()), Name(id='response', ctx=Load()), Name(id='body', ctx=Load())], keywords=[])], keywords=[keyword(arg='expires', value=Name(id='expires_time', ctx=Load()))]))])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='cache_response', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='request', annotation=Name(id='PreparedRequest', ctx=Load())), arg(arg='response', annotation=Name(id='HTTPResponse', ctx=Load())), arg(arg='body', annotation=BinOp(left=Name(id='bytes', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='status_codes', annotation=BinOp(left=Subscript(value=Name(id='Collection', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='\n        Algorithm for caching requests.\n\n        This assumes a requests Response object.\n        ')), Assign(targets=[Name(id='cacheable_status_codes', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='status_codes', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='cacheable_status_codes', ctx=Load())])), If(test=Compare(left=Attribute(value=Name(id='response', ctx=Load()), attr='status', ctx=Load()), ops=[NotIn()], comparators=[Name(id='cacheable_status_codes', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Status code %s not in %s'), Attribute(value=Name(id='response', ctx=Load()), attr='status', ctx=Load()), Name(id='cacheable_status_codes', ctx=Load())], keywords=[])), Return()], orelse=[]), AnnAssign(target=Name(id='response_headers', ctx=Store()), annotation=Subscript(value=Name(id='CaseInsensitiveDict', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Call(func=Name(id='CaseInsensitiveDict', ctx=Load()), args=[Attribute(value=Name(id='response', ctx=Load()), attr='headers', ctx=Load())], keywords=[]), simple=1), If(test=Compare(left=Constant(value='date'), ops=[In()], comparators=[Name(id='response_headers', ctx=Load())]), body=[Assign(targets=[Name(id='time_tuple', ctx=Store())], value=Call(func=Name(id='parsedate_tz', ctx=Load()), args=[Subscript(value=Name(id='response_headers', ctx=Load()), slice=Constant(value='date'), ctx=Load())], keywords=[])), Assert(test=Compare(left=Name(id='time_tuple', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Name(id='date', ctx=Store())], value=Call(func=Attribute(value=Name(id='calendar', ctx=Load()), attr='timegm', ctx=Load()), args=[Subscript(value=Name(id='time_tuple', ctx=Load()), slice=Slice(upper=Constant(value=6)), ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='date', ctx=Store())], value=Constant(value=0))]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='body', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Constant(value='content-length'), ops=[In()], comparators=[Name(id='response_headers', ctx=Load())]), Call(func=Attribute(value=Subscript(value=Name(id='response_headers', ctx=Load()), slice=Constant(value='content-length'), ctx=Load()), attr='isdigit', ctx=Load()), args=[], keywords=[]), Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='response_headers', ctx=Load()), slice=Constant(value='content-length'), ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='body', ctx=Load())], keywords=[])])]), body=[Return()], orelse=[]), Assign(targets=[Name(id='cc_req', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='parse_cache_control', ctx=Load()), args=[Attribute(value=Name(id='request', ctx=Load()), attr='headers', ctx=Load())], keywords=[])), Assign(targets=[Name(id='cc', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='parse_cache_control', ctx=Load()), args=[Name(id='response_headers', ctx=Load())], keywords=[])), Assert(test=Compare(left=Attribute(value=Name(id='request', ctx=Load()), attr='url', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Name(id='cache_url', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='cache_url', ctx=Load()), args=[Attribute(value=Name(id='request', ctx=Load()), attr='url', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Updating cache with response from "%s"'), Name(id='cache_url', ctx=Load())], keywords=[])), Assign(targets=[Name(id='no_store', ctx=Store())], value=Constant(value=False)), If(test=Compare(left=Constant(value='no-store'), ops=[In()], comparators=[Name(id='cc', ctx=Load())]), body=[Assign(targets=[Name(id='no_store', ctx=Store())], value=Constant(value=True)), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Response header has "no-store"')], keywords=[]))], orelse=[]), If(test=Compare(left=Constant(value='no-store'), ops=[In()], comparators=[Name(id='cc_req', ctx=Load())]), body=[Assign(targets=[Name(id='no_store', ctx=Store())], value=Constant(value=True)), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Request header has "no-store"')], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Name(id='no_store', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cache', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='cache_url', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Purging existing cache entry to honor "no-store"')], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cache', ctx=Load()), attr='delete', ctx=Load()), args=[Name(id='cache_url', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='no_store', ctx=Load()), body=[Return()], orelse=[]), If(test=Compare(left=Constant(value='*'), ops=[In()], comparators=[Call(func=Attribute(value=Name(id='response_headers', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='vary'), Constant(value='')], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Response header has "Vary: *"')], keywords=[])), Return()], orelse=[]), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='cache_etags', ctx=Load()), Compare(left=Constant(value='etag'), ops=[In()], comparators=[Name(id='response_headers', ctx=Load())])]), body=[Assign(targets=[Name(id='expires_time', ctx=Store())], value=Constant(value=0)), If(test=Call(func=Attribute(value=Name(id='response_headers', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='expires')], keywords=[]), body=[Assign(targets=[Name(id='expires', ctx=Store())], value=Call(func=Name(id='parsedate_tz', ctx=Load()), args=[Subscript(value=Name(id='response_headers', ctx=Load()), slice=Constant(value='expires'), ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='expires', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='expires_time', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='calendar', ctx=Load()), attr='timegm', ctx=Load()), args=[Subscript(value=Name(id='expires', ctx=Load()), slice=Slice(upper=Constant(value=6)), ctx=Load())], keywords=[]), op=Sub(), right=Name(id='date', ctx=Load())))], orelse=[])], orelse=[]), Assign(targets=[Name(id='expires_time', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Name(id='expires_time', ctx=Load()), BinOp(left=Constant(value=14), op=Mult(), right=Constant(value=86400))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[JoinedStr(values=[Constant(value='etag object cached for '), FormattedValue(value=Name(id='expires_time', ctx=Load()), conversion=-1), Constant(value=' seconds')])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Caching due to etag')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_cache_set', ctx=Load()), args=[Name(id='cache_url', ctx=Load()), Name(id='request', ctx=Load()), Name(id='response', ctx=Load()), Name(id='body', ctx=Load()), Name(id='expires_time', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Call(func=Name(id='int', ctx=Load()), args=[Attribute(value=Name(id='response', ctx=Load()), attr='status', ctx=Load())], keywords=[]), ops=[In()], comparators=[Name(id='PERMANENT_REDIRECT_STATUSES', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Caching permanent redirect')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_cache_set', ctx=Load()), args=[Name(id='cache_url', ctx=Load()), Name(id='request', ctx=Load()), Name(id='response', ctx=Load()), Constant(value=b'')], keywords=[]))], orelse=[If(test=Compare(left=Constant(value='date'), ops=[In()], comparators=[Name(id='response_headers', ctx=Load())]), body=[Assign(targets=[Name(id='time_tuple', ctx=Store())], value=Call(func=Name(id='parsedate_tz', ctx=Load()), args=[Subscript(value=Name(id='response_headers', ctx=Load()), slice=Constant(value='date'), ctx=Load())], keywords=[])), Assert(test=Compare(left=Name(id='time_tuple', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Name(id='date', ctx=Store())], value=Call(func=Attribute(value=Name(id='calendar', ctx=Load()), attr='timegm', ctx=Load()), args=[Subscript(value=Name(id='time_tuple', ctx=Load()), slice=Slice(upper=Constant(value=6)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='max_age', ctx=Store())], value=Call(func=Attribute(value=Name(id='cc', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='max-age')], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='max_age', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='max_age', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)])]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Caching b/c date exists and max-age > 0')], keywords=[])), Assign(targets=[Name(id='expires_time', ctx=Store())], value=Name(id='max_age', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_cache_set', ctx=Load()), args=[Name(id='cache_url', ctx=Load()), Name(id='request', ctx=Load()), Name(id='response', ctx=Load()), Name(id='body', ctx=Load()), Name(id='expires_time', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Constant(value='expires'), ops=[In()], comparators=[Name(id='response_headers', ctx=Load())]), body=[If(test=Subscript(value=Name(id='response_headers', ctx=Load()), slice=Constant(value='expires'), ctx=Load()), body=[Assign(targets=[Name(id='expires', ctx=Store())], value=Call(func=Name(id='parsedate_tz', ctx=Load()), args=[Subscript(value=Name(id='response_headers', ctx=Load()), slice=Constant(value='expires'), ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='expires', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='expires_time', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='calendar', ctx=Load()), attr='timegm', ctx=Load()), args=[Subscript(value=Name(id='expires', ctx=Load()), slice=Slice(upper=Constant(value=6)), ctx=Load())], keywords=[]), op=Sub(), right=Name(id='date', ctx=Load())))], orelse=[Assign(targets=[Name(id='expires_time', ctx=Store())], value=Constant(value=None))]), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Caching b/c of expires header. expires in {} seconds'), attr='format', ctx=Load()), args=[Name(id='expires_time', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_cache_set', ctx=Load()), args=[Name(id='cache_url', ctx=Load()), Name(id='request', ctx=Load()), Name(id='response', ctx=Load()), Name(id='body', ctx=Load()), Name(id='expires_time', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])])], orelse=[])])])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='update_cached_response', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='request', annotation=Name(id='PreparedRequest', ctx=Load())), arg(arg='response', annotation=Name(id='HTTPResponse', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="On a 304 we will get a new set of headers that we want to\n        update our cached value with, assuming we have one.\n\n        This should only ever be called when we've sent an ETag and\n        gotten a 304 as the response.\n        ")), Assert(test=Compare(left=Attribute(value=Name(id='request', ctx=Load()), attr='url', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Name(id='cache_url', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='cache_url', ctx=Load()), args=[Attribute(value=Name(id='request', ctx=Load()), attr='url', ctx=Load())], keywords=[])), Assign(targets=[Name(id='cached_response', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_load_from_cache', ctx=Load()), args=[Name(id='request', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='cached_response', ctx=Load())), body=[Return(value=Name(id='response', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='excluded_headers', ctx=Store())], value=List(elts=[Constant(value='content-length')], ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='cached_response', ctx=Load()), attr='headers', ctx=Load()), attr='update', ctx=Load()), args=[DictComp(key=Name(id='k', ctx=Load()), value=Name(id='v', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='response', ctx=Load()), attr='headers', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[Compare(left=Call(func=Attribute(value=Name(id='k', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), ops=[NotIn()], comparators=[Name(id='excluded_headers', ctx=Load())])], is_async=0)])], keywords=[])), Assign(targets=[Attribute(value=Name(id='cached_response', ctx=Load()), attr='status', ctx=Store())], value=Constant(value=200)), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_cache_set', ctx=Load()), args=[Name(id='cache_url', ctx=Load()), Name(id='request', ctx=Load()), Name(id='cached_response', ctx=Load())], keywords=[])), Return(value=Name(id='cached_response', ctx=Load()))], decorator_list=[], returns=Name(id='HTTPResponse', ctx=Load()))], decorator_list=[])], type_ignores=[])