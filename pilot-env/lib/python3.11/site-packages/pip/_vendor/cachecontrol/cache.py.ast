Module(body=[Expr(value=Constant(value='\nThe cache object API for implementing caches. The default is a thread\nsafe in-memory dictionary.\n')), ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), ImportFrom(module='threading', names=[alias(name='Lock')], level=0), ImportFrom(module='typing', names=[alias(name='IO'), alias(name='TYPE_CHECKING'), alias(name='MutableMapping')], level=0), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='datetime', names=[alias(name='datetime')], level=0)], orelse=[]), ClassDef(name='BaseCache', bases=[], keywords=[], body=[FunctionDef(name='get', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=BinOp(left=Name(id='bytes', ctx=Load()), op=BitOr(), right=Constant(value=None))), FunctionDef(name='set', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Name(id='str', ctx=Load())), arg(arg='value', annotation=Name(id='bytes', ctx=Load())), arg(arg='expires', annotation=BinOp(left=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Name(id='datetime', ctx=Load())), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='delete', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='close', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='DictCache', bases=[Name(id='BaseCache', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='init_dict', annotation=BinOp(left=Subscript(value=Name(id='MutableMapping', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='bytes', ctx=Load())], ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='lock', ctx=Store())], value=Call(func=Name(id='Lock', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='data', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='init_dict', ctx=Load()), Dict(keys=[], values=[])]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='get', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='data', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='key', ctx=Load()), Constant(value=None)], keywords=[]))], decorator_list=[], returns=BinOp(left=Name(id='bytes', ctx=Load()), op=BitOr(), right=Constant(value=None))), FunctionDef(name='set', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Name(id='str', ctx=Load())), arg(arg='value', annotation=Name(id='bytes', ctx=Load())), arg(arg='expires', annotation=BinOp(left=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Name(id='datetime', ctx=Load())), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[With(items=[withitem(context_expr=Attribute(value=Name(id='self', ctx=Load()), attr='lock', ctx=Load()))], body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='data', ctx=Load()), attr='update', ctx=Load()), args=[Dict(keys=[Name(id='key', ctx=Load())], values=[Name(id='value', ctx=Load())])], keywords=[]))])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='delete', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Attribute(value=Name(id='self', ctx=Load()), attr='lock', ctx=Load()))], body=[If(test=Compare(left=Name(id='key', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='data', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='data', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[]))], orelse=[])])], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='SeparateBodyBaseCache', bases=[Name(id='BaseCache', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    In this variant, the body is not stored mixed in with the metadata, but is\n    passed in (as a bytes-like object) in a separate call to ``set_body()``.\n\n    That is, the expected interaction pattern is::\n\n        cache.set(key, serialized_metadata)\n        cache.set_body(key)\n\n    Similarly, the body should be loaded separately via ``get_body()``.\n    ')), FunctionDef(name='set_body', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Name(id='str', ctx=Load())), arg(arg='body', annotation=Name(id='bytes', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='get_body', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return the body as file-like object.\n        ')), Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=BinOp(left=Subscript(value=Name(id='IO', ctx=Load()), slice=Name(id='bytes', ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None)))], decorator_list=[])], type_ignores=[])