Module(body=[ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), Import(names=[alias(name='hashlib')]), Import(names=[alias(name='os')]), ImportFrom(module='textwrap', names=[alias(name='dedent')], level=0), ImportFrom(module='typing', names=[alias(name='IO'), alias(name='TYPE_CHECKING')], level=0), ImportFrom(module='pip._vendor.cachecontrol.cache', names=[alias(name='BaseCache'), alias(name='SeparateBodyBaseCache')], level=0), ImportFrom(module='pip._vendor.cachecontrol.controller', names=[alias(name='CacheController')], level=0), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='datetime', names=[alias(name='datetime')], level=0), ImportFrom(module='filelock', names=[alias(name='BaseFileLock')], level=0)], orelse=[]), FunctionDef(name='_secure_open_write', args=arguments(posonlyargs=[], args=[arg(arg='filename', annotation=Name(id='str', ctx=Load())), arg(arg='fmode', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='flags', ctx=Store())], value=Attribute(value=Name(id='os', ctx=Load()), attr='O_WRONLY', ctx=Load())), AugAssign(target=Name(id='flags', ctx=Store()), op=BitOr(), value=BinOp(left=Attribute(value=Name(id='os', ctx=Load()), attr='O_CREAT', ctx=Load()), op=BitOr(), right=Attribute(value=Name(id='os', ctx=Load()), attr='O_EXCL', ctx=Load()))), If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='os', ctx=Load()), Constant(value='O_NOFOLLOW')], keywords=[]), body=[AugAssign(target=Name(id='flags', ctx=Store()), op=BitOr(), value=Attribute(value=Name(id='os', ctx=Load()), attr='O_NOFOLLOW', ctx=Load()))], orelse=[]), If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='os', ctx=Load()), Constant(value='O_BINARY')], keywords=[]), body=[AugAssign(target=Name(id='flags', ctx=Store()), op=BitOr(), value=Attribute(value=Name(id='os', ctx=Load()), attr='O_BINARY', ctx=Load()))], orelse=[]), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[]), Assign(targets=[Name(id='fd', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='open', ctx=Load()), args=[Name(id='filename', ctx=Load()), Name(id='flags', ctx=Load()), Name(id='fmode', ctx=Load())], keywords=[])), Try(body=[Return(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='fdopen', ctx=Load()), args=[Name(id='fd', ctx=Load()), Constant(value='wb')], keywords=[]))], handlers=[ExceptHandler(body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='close', ctx=Load()), args=[Name(id='fd', ctx=Load())], keywords=[])), Raise()])], orelse=[], finalbody=[])], decorator_list=[], returns=Subscript(value=Name(id='IO', ctx=Load()), slice=Name(id='bytes', ctx=Load()), ctx=Load())), ClassDef(name='_FileCacheMixin', bases=[], keywords=[], body=[Expr(value=Constant(value='Shared implementation for both FileCache variants.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='directory', annotation=Name(id='str', ctx=Load())), arg(arg='forever', annotation=Name(id='bool', ctx=Load())), arg(arg='filemode', annotation=Name(id='int', ctx=Load())), arg(arg='dirmode', annotation=Name(id='int', ctx=Load())), arg(arg='lock_class', annotation=BinOp(left=Subscript(value=Name(id='type', ctx=Load()), slice=Name(id='BaseFileLock', ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Constant(value=384), Constant(value=448), Constant(value=None)]), body=[Try(body=[If(test=Compare(left=Name(id='lock_class', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[ImportFrom(module='filelock', names=[alias(name='FileLock')], level=0), Assign(targets=[Name(id='lock_class', ctx=Store())], value=Name(id='FileLock', ctx=Load()))], orelse=[])], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Assign(targets=[Name(id='notice', ctx=Store())], value=Call(func=Name(id='dedent', ctx=Load()), args=[Constant(value='\n            NOTE: In order to use the FileCache you must have\n            filelock installed. You can install it via pip:\n              pip install filelock\n            ')], keywords=[])), Raise(exc=Call(func=Name(id='ImportError', ctx=Load()), args=[Name(id='notice', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='directory', ctx=Store())], value=Name(id='directory', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='forever', ctx=Store())], value=Name(id='forever', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='filemode', ctx=Store())], value=Name(id='filemode', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='dirmode', ctx=Store())], value=Name(id='dirmode', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='lock_class', ctx=Store())], value=Name(id='lock_class', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='encode', args=arguments(posonlyargs=[], args=[arg(arg='x', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='hashlib', ctx=Load()), attr='sha224', ctx=Load()), args=[Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='encode', ctx=Load()), args=[], keywords=[])], keywords=[]), attr='hexdigest', ctx=Load()), args=[], keywords=[]))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='_fn', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='hashed', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='encode', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), Assign(targets=[Name(id='parts', ctx=Store())], value=BinOp(left=Call(func=Name(id='list', ctx=Load()), args=[Subscript(value=Name(id='hashed', ctx=Load()), slice=Slice(upper=Constant(value=5)), ctx=Load())], keywords=[]), op=Add(), right=List(elts=[Name(id='hashed', ctx=Load())], ctx=Load()))), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='directory', ctx=Load()), Starred(value=Name(id='parts', ctx=Load()), ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='get', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_fn', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[])), Try(body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='name', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='fh', ctx=Store()))], body=[Return(value=Call(func=Attribute(value=Name(id='fh', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]))])], handlers=[ExceptHandler(type=Name(id='FileNotFoundError', ctx=Load()), body=[Return(value=Constant(value=None))])], orelse=[], finalbody=[])], decorator_list=[], returns=BinOp(left=Name(id='bytes', ctx=Load()), op=BitOr(), right=Constant(value=None))), FunctionDef(name='set', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Name(id='str', ctx=Load())), arg(arg='value', annotation=Name(id='bytes', ctx=Load())), arg(arg='expires', annotation=BinOp(left=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Name(id='datetime', ctx=Load())), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_fn', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_write', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_write', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='path', annotation=Name(id='str', ctx=Load())), arg(arg='data', annotation=Name(id='bytes', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Safely write the data to the given path.\n        ')), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='dirmode', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[]), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='lock_class', ctx=Load()), args=[BinOp(left=Name(id='path', ctx=Load()), op=Add(), right=Constant(value='.lock'))], keywords=[]))], body=[With(items=[withitem(context_expr=Call(func=Name(id='_secure_open_write', ctx=Load()), args=[Name(id='path', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='filemode', ctx=Load())], keywords=[]), optional_vars=Name(id='fh', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='fh', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))])])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_delete', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Name(id='str', ctx=Load())), arg(arg='suffix', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='name', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_fn', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[]), op=Add(), right=Name(id='suffix', ctx=Load()))), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='forever', ctx=Load())), body=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='FileNotFoundError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], orelse=[])], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='FileCache', bases=[Name(id='_FileCacheMixin', ctx=Load()), Name(id='BaseCache', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Traditional FileCache: body is stored in memory, so not suitable for large\n    downloads.\n    ')), FunctionDef(name='delete', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_delete', ctx=Load()), args=[Name(id='key', ctx=Load()), Constant(value='')], keywords=[]))], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='SeparateBodyFileCache', bases=[Name(id='_FileCacheMixin', ctx=Load()), Name(id='SeparateBodyBaseCache', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Memory-efficient FileCache: body is stored in a separate file, reducing\n    peak memory usage.\n    ')), FunctionDef(name='get_body', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='name', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_fn', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[]), op=Add(), right=Constant(value='.body'))), Try(body=[Return(value=Call(func=Name(id='open', ctx=Load()), args=[Name(id='name', ctx=Load()), Constant(value='rb')], keywords=[]))], handlers=[ExceptHandler(type=Name(id='FileNotFoundError', ctx=Load()), body=[Return(value=Constant(value=None))])], orelse=[], finalbody=[])], decorator_list=[], returns=BinOp(left=Subscript(value=Name(id='IO', ctx=Load()), slice=Name(id='bytes', ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None))), FunctionDef(name='set_body', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Name(id='str', ctx=Load())), arg(arg='body', annotation=Name(id='bytes', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='name', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_fn', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[]), op=Add(), right=Constant(value='.body'))), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_write', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='body', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='delete', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_delete', ctx=Load()), args=[Name(id='key', ctx=Load()), Constant(value='')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_delete', ctx=Load()), args=[Name(id='key', ctx=Load()), Constant(value='.body')], keywords=[]))], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), FunctionDef(name='url_to_file_path', args=arguments(posonlyargs=[], args=[arg(arg='url', annotation=Name(id='str', ctx=Load())), arg(arg='filecache', annotation=Name(id='FileCache', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the file cache path based on the URL.\n\n    This does not ensure the file exists!\n    ')), Assign(targets=[Name(id='key', ctx=Store())], value=Call(func=Attribute(value=Name(id='CacheController', ctx=Load()), attr='cache_url', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='filecache', ctx=Load()), attr='_fn', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], type_ignores=[])