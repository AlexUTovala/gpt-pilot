Module(body=[ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), ImportFrom(module='datetime', names=[alias(name='datetime'), alias(name='timezone')], level=0), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING')], level=0), ImportFrom(module='pip._vendor.cachecontrol.cache', names=[alias(name='BaseCache')], level=0), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='redis', names=[alias(name='Redis')], level=0)], orelse=[]), ClassDef(name='RedisCache', bases=[Name(id='BaseCache', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='conn', annotation=Subscript(value=Name(id='Redis', ctx=Load()), slice=Name(id='bytes', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='conn', ctx=Store())], value=Name(id='conn', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='get', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='conn', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[]))], decorator_list=[], returns=BinOp(left=Name(id='bytes', ctx=Load()), op=BitOr(), right=Constant(value=None))), FunctionDef(name='set', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Name(id='str', ctx=Load())), arg(arg='value', annotation=Name(id='bytes', ctx=Load())), arg(arg='expires', annotation=BinOp(left=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Name(id='datetime', ctx=Load())), op=BitOr(), right=Constant(value=None)))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='expires', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='conn', ctx=Load()), attr='set', ctx=Load()), args=[Name(id='key', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='expires', ctx=Load()), Name(id='datetime', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='now_utc', ctx=Store())], value=Call(func=Attribute(value=Name(id='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Name(id='timezone', ctx=Load()), attr='utc', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='expires', ctx=Load()), attr='tzinfo', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='now_utc', ctx=Store())], value=Call(func=Attribute(value=Name(id='now_utc', ctx=Load()), attr='replace', ctx=Load()), args=[], keywords=[keyword(arg='tzinfo', value=Constant(value=None))]))], orelse=[]), Assign(targets=[Name(id='delta', ctx=Store())], value=BinOp(left=Name(id='expires', ctx=Load()), op=Sub(), right=Name(id='now_utc', ctx=Load()))), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='conn', ctx=Load()), attr='setex', ctx=Load()), args=[Name(id='key', ctx=Load()), Call(func=Name(id='int', ctx=Load()), args=[Call(func=Attribute(value=Name(id='delta', ctx=Load()), attr='total_seconds', ctx=Load()), args=[], keywords=[])], keywords=[]), Name(id='value', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='conn', ctx=Load()), attr='setex', ctx=Load()), args=[Name(id='key', ctx=Load()), Name(id='expires', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]))])])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='delete', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='conn', ctx=Load()), attr='delete', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='clear', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Helper for clearing all the keys in a database. Use with\n        caution!')), For(target=Name(id='key', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='conn', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='conn', ctx=Load()), attr='delete', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='close', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Redis uses connection pooling, no need to close the connection.')), Pass()], decorator_list=[], returns=Constant(value=None))], decorator_list=[])], type_ignores=[])