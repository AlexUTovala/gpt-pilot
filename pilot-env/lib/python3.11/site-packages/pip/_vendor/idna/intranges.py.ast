Module(body=[Expr(value=Constant(value='\nGiven a list of integers, made up of (hopefully) a small number of long runs\nof consecutive integers, compute a representation of the form\n((start1, end1), (start2, end2) ...). Then answer the question "was x present\nin the original list?" in time O(log(# runs)).\n')), Import(names=[alias(name='bisect')]), ImportFrom(module='typing', names=[alias(name='List'), alias(name='Tuple')], level=0), FunctionDef(name='intranges_from_list', args=arguments(posonlyargs=[], args=[arg(arg='list_', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Represent a list of integers as a sequence of ranges:\n    ((start_0, end_0), (start_1, end_1), ...), such that the original\n    integers are exactly those x such that start_i <= x < end_i for some i.\n\n    Ranges are encoded as single integers (start << 32 | end), not as tuples.\n    ')), Assign(targets=[Name(id='sorted_list', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='list_', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ranges', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='last_write', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=1))), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='sorted_list', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Compare(left=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1)), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='sorted_list', ctx=Load())], keywords=[])]), body=[If(test=Compare(left=Subscript(value=Name(id='sorted_list', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[BinOp(left=Subscript(value=Name(id='sorted_list', ctx=Load()), slice=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load()), op=Sub(), right=Constant(value=1))]), body=[Continue()], orelse=[])], orelse=[]), Assign(targets=[Name(id='current_range', ctx=Store())], value=Subscript(value=Name(id='sorted_list', ctx=Load()), slice=Slice(lower=BinOp(left=Name(id='last_write', ctx=Load()), op=Add(), right=Constant(value=1)), upper=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1))), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='ranges', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='_encode_range', ctx=Load()), args=[Subscript(value=Name(id='current_range', ctx=Load()), slice=Constant(value=0), ctx=Load()), BinOp(left=Subscript(value=Name(id='current_range', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Add(), right=Constant(value=1))], keywords=[])], keywords=[])), Assign(targets=[Name(id='last_write', ctx=Store())], value=Name(id='i', ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='tuple', ctx=Load()), args=[Name(id='ranges', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load())), FunctionDef(name='_encode_range', args=arguments(posonlyargs=[], args=[arg(arg='start', annotation=Name(id='int', ctx=Load())), arg(arg='end', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=BinOp(left=Name(id='start', ctx=Load()), op=LShift(), right=Constant(value=32)), op=BitOr(), right=Name(id='end', ctx=Load())))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='_decode_range', args=arguments(posonlyargs=[], args=[arg(arg='r', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Tuple(elts=[BinOp(left=Name(id='r', ctx=Load()), op=RShift(), right=Constant(value=32)), BinOp(left=Name(id='r', ctx=Load()), op=BitAnd(), right=BinOp(left=BinOp(left=Constant(value=1), op=LShift(), right=Constant(value=32)), op=Sub(), right=Constant(value=1)))], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='intranges_contain', args=arguments(posonlyargs=[], args=[arg(arg='int_', annotation=Name(id='int', ctx=Load())), arg(arg='ranges', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Determine if `int_` falls into one of the ranges in `ranges`.')), Assign(targets=[Name(id='tuple_', ctx=Store())], value=Call(func=Name(id='_encode_range', ctx=Load()), args=[Name(id='int_', ctx=Load()), Constant(value=0)], keywords=[])), Assign(targets=[Name(id='pos', ctx=Store())], value=Call(func=Attribute(value=Name(id='bisect', ctx=Load()), attr='bisect_left', ctx=Load()), args=[Name(id='ranges', ctx=Load()), Name(id='tuple_', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='pos', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Tuple(elts=[Name(id='left', ctx=Store()), Name(id='right', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_decode_range', ctx=Load()), args=[Subscript(value=Name(id='ranges', ctx=Load()), slice=BinOp(left=Name(id='pos', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='left', ctx=Load()), ops=[LtE(), Lt()], comparators=[Name(id='int_', ctx=Load()), Name(id='right', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[])], orelse=[]), If(test=Compare(left=Name(id='pos', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='ranges', ctx=Load())], keywords=[])]), body=[Assign(targets=[Tuple(elts=[Name(id='left', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_decode_range', ctx=Load()), args=[Subscript(value=Name(id='ranges', ctx=Load()), slice=Name(id='pos', ctx=Load()), ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='left', ctx=Load()), ops=[Eq()], comparators=[Name(id='int_', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[])], orelse=[]), Return(value=Constant(value=False))], decorator_list=[], returns=Name(id='bool', ctx=Load()))], type_ignores=[])