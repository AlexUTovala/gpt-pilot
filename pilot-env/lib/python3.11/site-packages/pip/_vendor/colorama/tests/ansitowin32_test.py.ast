Module(body=[ImportFrom(module='io', names=[alias(name='StringIO'), alias(name='TextIOWrapper')], level=0), ImportFrom(module='unittest', names=[alias(name='TestCase'), alias(name='main')], level=0), Try(body=[ImportFrom(module='contextlib', names=[alias(name='ExitStack')], level=0)], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[ImportFrom(module='contextlib2', names=[alias(name='ExitStack')], level=0)])], orelse=[], finalbody=[]), Try(body=[ImportFrom(module='unittest.mock', names=[alias(name='MagicMock'), alias(name='Mock'), alias(name='patch')], level=0)], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[ImportFrom(module='mock', names=[alias(name='MagicMock'), alias(name='Mock'), alias(name='patch')], level=0)])], orelse=[], finalbody=[]), ImportFrom(module='ansitowin32', names=[alias(name='AnsiToWin32'), alias(name='StreamWrapper')], level=2), ImportFrom(module='win32', names=[alias(name='ENABLE_VIRTUAL_TERMINAL_PROCESSING')], level=2), ImportFrom(module='utils', names=[alias(name='osname')], level=1), ClassDef(name='StreamWrapperTest', bases=[Name(id='TestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='testIsAProxy', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='mockStream', ctx=Store())], value=Call(func=Name(id='Mock', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='wrapper', ctx=Store())], value=Call(func=Name(id='StreamWrapper', ctx=Load()), args=[Name(id='mockStream', ctx=Load()), Constant(value=None)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertTrue', ctx=Load()), args=[Compare(left=Attribute(value=Name(id='wrapper', ctx=Load()), attr='random_attr', ctx=Load()), ops=[Is()], comparators=[Attribute(value=Name(id='mockStream', ctx=Load()), attr='random_attr', ctx=Load())])], keywords=[]))], decorator_list=[]), FunctionDef(name='testDelegatesWrite', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='mockStream', ctx=Store())], value=Call(func=Name(id='Mock', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='mockConverter', ctx=Store())], value=Call(func=Name(id='Mock', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='wrapper', ctx=Store())], value=Call(func=Name(id='StreamWrapper', ctx=Load()), args=[Name(id='mockStream', ctx=Load()), Name(id='mockConverter', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='wrapper', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value='hello')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertTrue', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='mockConverter', ctx=Load()), attr='write', ctx=Load()), attr='call_args', ctx=Load()), Tuple(elts=[Tuple(elts=[Constant(value='hello')], ctx=Load()), Dict(keys=[], values=[])], ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='testDelegatesContext', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='mockConverter', ctx=Store())], value=Call(func=Name(id='Mock', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Name(id='StringIO', ctx=Load()), args=[], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='StreamWrapper', ctx=Load()), args=[Name(id='s', ctx=Load()), Name(id='mockConverter', ctx=Load())], keywords=[]), optional_vars=Name(id='fp', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='fp', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value='hello', kind='u')], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertTrue', ctx=Load()), args=[Attribute(value=Name(id='s', ctx=Load()), attr='closed', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='testProxyNoContextManager', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='mockStream', ctx=Store())], value=Call(func=Name(id='MagicMock', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Attribute(value=Name(id='mockStream', ctx=Load()), attr='__enter__', ctx=Load()), attr='side_effect', ctx=Store())], value=Call(func=Name(id='AttributeError', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='mockConverter', ctx=Store())], value=Call(func=Name(id='Mock', ctx=Load()), args=[], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='AttributeError', ctx=Load())], keywords=[]), optional_vars=Name(id='excinfo', ctx=Store()))], body=[With(items=[withitem(context_expr=Call(func=Name(id='StreamWrapper', ctx=Load()), args=[Name(id='mockStream', ctx=Load()), Name(id='mockConverter', ctx=Load())], keywords=[]), optional_vars=Name(id='wrapper', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='wrapper', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value='hello')], keywords=[]))])])], decorator_list=[]), FunctionDef(name='test_closed_shouldnt_raise_on_closed_stream', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='stream', ctx=Store())], value=Call(func=Name(id='StringIO', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='stream', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='wrapper', ctx=Store())], value=Call(func=Name(id='StreamWrapper', ctx=Load()), args=[Name(id='stream', ctx=Load()), Constant(value=None)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='wrapper', ctx=Load()), attr='closed', ctx=Load()), Constant(value=True)], keywords=[]))], decorator_list=[]), FunctionDef(name='test_closed_shouldnt_raise_on_detached_stream', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='stream', ctx=Store())], value=Call(func=Name(id='TextIOWrapper', ctx=Load()), args=[Call(func=Name(id='StringIO', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='stream', ctx=Load()), attr='detach', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='wrapper', ctx=Store())], value=Call(func=Name(id='StreamWrapper', ctx=Load()), args=[Name(id='stream', ctx=Load()), Constant(value=None)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='wrapper', ctx=Load()), attr='closed', ctx=Load()), Constant(value=True)], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='AnsiToWin32Test', bases=[Name(id='TestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='testInit', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='mockStdout', ctx=Store())], value=Call(func=Name(id='Mock', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='auto', ctx=Store())], value=Call(func=Name(id='Mock', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='stream', ctx=Store())], value=Call(func=Name(id='AnsiToWin32', ctx=Load()), args=[Name(id='mockStdout', ctx=Load())], keywords=[keyword(arg='autoreset', value=Name(id='auto', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='stream', ctx=Load()), attr='wrapped', ctx=Load()), Name(id='mockStdout', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='stream', ctx=Load()), attr='autoreset', ctx=Load()), Name(id='auto', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='testStripIsTrueOnWindows', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='osname', ctx=Load()), args=[Constant(value='nt')], keywords=[]))], body=[Assign(targets=[Name(id='mockStdout', ctx=Store())], value=Call(func=Name(id='Mock', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='stream', ctx=Store())], value=Call(func=Name(id='AnsiToWin32', ctx=Load()), args=[Name(id='mockStdout', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertTrue', ctx=Load()), args=[Attribute(value=Name(id='stream', ctx=Load()), attr='strip', ctx=Load())], keywords=[]))])], decorator_list=[Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='colorama.ansitowin32.winterm'), Constant(value=None)], keywords=[]), Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='colorama.ansitowin32.winapi_test'), Lambda(args=arguments(posonlyargs=[], args=[], vararg=arg(arg='_'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=Constant(value=True))], keywords=[])]), FunctionDef(name='testStripIsFalseOffWindows', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='osname', ctx=Load()), args=[Constant(value='posix')], keywords=[]))], body=[Assign(targets=[Name(id='mockStdout', ctx=Store())], value=Call(func=Name(id='Mock', ctx=Load()), args=[], keywords=[keyword(arg='closed', value=Constant(value=False))])), Assign(targets=[Name(id='stream', ctx=Store())], value=Call(func=Name(id='AnsiToWin32', ctx=Load()), args=[Name(id='mockStdout', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertFalse', ctx=Load()), args=[Attribute(value=Name(id='stream', ctx=Load()), attr='strip', ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='testWriteStripsAnsi', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='mockStdout', ctx=Store())], value=Call(func=Name(id='Mock', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='stream', ctx=Store())], value=Call(func=Name(id='AnsiToWin32', ctx=Load()), args=[Name(id='mockStdout', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='stream', ctx=Load()), attr='wrapped', ctx=Store())], value=Call(func=Name(id='Mock', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='stream', ctx=Load()), attr='write_and_convert', ctx=Store())], value=Call(func=Name(id='Mock', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='stream', ctx=Load()), attr='strip', ctx=Store())], value=Constant(value=True)), Expr(value=Call(func=Attribute(value=Name(id='stream', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value='abc')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertFalse', ctx=Load()), args=[Attribute(value=Attribute(value=Attribute(value=Name(id='stream', ctx=Load()), attr='wrapped', ctx=Load()), attr='write', ctx=Load()), attr='called', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='stream', ctx=Load()), attr='write_and_convert', ctx=Load()), attr='call_args', ctx=Load()), Tuple(elts=[Tuple(elts=[Constant(value='abc')], ctx=Load()), Dict(keys=[], values=[])], ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='testWriteDoesNotStripAnsi', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='mockStdout', ctx=Store())], value=Call(func=Name(id='Mock', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='stream', ctx=Store())], value=Call(func=Name(id='AnsiToWin32', ctx=Load()), args=[Name(id='mockStdout', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='stream', ctx=Load()), attr='wrapped', ctx=Store())], value=Call(func=Name(id='Mock', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='stream', ctx=Load()), attr='write_and_convert', ctx=Store())], value=Call(func=Name(id='Mock', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='stream', ctx=Load()), attr='strip', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id='stream', ctx=Load()), attr='convert', ctx=Store())], value=Constant(value=False)), Expr(value=Call(func=Attribute(value=Name(id='stream', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value='abc')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertFalse', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='stream', ctx=Load()), attr='write_and_convert', ctx=Load()), attr='called', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Attribute(value=Attribute(value=Name(id='stream', ctx=Load()), attr='wrapped', ctx=Load()), attr='write', ctx=Load()), attr='call_args', ctx=Load()), Tuple(elts=[Tuple(elts=[Constant(value='abc')], ctx=Load()), Dict(keys=[], values=[])], ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='assert_autoresets', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='convert'), arg(arg='autoreset')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Assign(targets=[Name(id='stream', ctx=Store())], value=Call(func=Name(id='AnsiToWin32', ctx=Load()), args=[Call(func=Name(id='Mock', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Attribute(value=Name(id='stream', ctx=Load()), attr='convert', ctx=Store())], value=Name(id='convert', ctx=Load())), Assign(targets=[Attribute(value=Name(id='stream', ctx=Load()), attr='reset_all', ctx=Store())], value=Call(func=Name(id='Mock', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='stream', ctx=Load()), attr='autoreset', ctx=Store())], value=Name(id='autoreset', ctx=Load())), Assign(targets=[Attribute(value=Name(id='stream', ctx=Load()), attr='winterm', ctx=Store())], value=Call(func=Name(id='Mock', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='stream', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value='abc')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='stream', ctx=Load()), attr='reset_all', ctx=Load()), attr='called', ctx=Load()), Name(id='autoreset', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='testWriteAutoresets', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assert_autoresets', ctx=Load()), args=[], keywords=[keyword(arg='convert', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assert_autoresets', ctx=Load()), args=[], keywords=[keyword(arg='convert', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assert_autoresets', ctx=Load()), args=[], keywords=[keyword(arg='convert', value=Constant(value=True)), keyword(arg='autoreset', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assert_autoresets', ctx=Load()), args=[], keywords=[keyword(arg='convert', value=Constant(value=False)), keyword(arg='autoreset', value=Constant(value=False))]))], decorator_list=[]), FunctionDef(name='testWriteAndConvertWritesPlainText', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='stream', ctx=Store())], value=Call(func=Name(id='AnsiToWin32', ctx=Load()), args=[Call(func=Name(id='Mock', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='stream', ctx=Load()), attr='write_and_convert', ctx=Load()), args=[Constant(value='abc')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Attribute(value=Attribute(value=Name(id='stream', ctx=Load()), attr='wrapped', ctx=Load()), attr='write', ctx=Load()), attr='call_args', ctx=Load()), Tuple(elts=[Tuple(elts=[Constant(value='abc')], ctx=Load()), Dict(keys=[], values=[])], ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='testWriteAndConvertStripsAllValidAnsi', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='stream', ctx=Store())], value=Call(func=Name(id='AnsiToWin32', ctx=Load()), args=[Call(func=Name(id='Mock', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Attribute(value=Name(id='stream', ctx=Load()), attr='call_win32', ctx=Store())], value=Call(func=Name(id='Mock', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='data', ctx=Store())], value=List(elts=[Constant(value='abc\x1b[mdef'), Constant(value='abc\x1b[0mdef'), Constant(value='abc\x1b[2mdef'), Constant(value='abc\x1b[02mdef'), Constant(value='abc\x1b[002mdef'), Constant(value='abc\x1b[40mdef'), Constant(value='abc\x1b[040mdef'), Constant(value='abc\x1b[0;1mdef'), Constant(value='abc\x1b[40;50mdef'), Constant(value='abc\x1b[50;30;40mdef'), Constant(value='abc\x1b[Adef'), Constant(value='abc\x1b[0Gdef'), Constant(value='abc\x1b[1;20;128Hdef')], ctx=Load())), For(target=Name(id='datum', ctx=Store()), iter=Name(id='data', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='stream', ctx=Load()), attr='wrapped', ctx=Load()), attr='write', ctx=Load()), attr='reset_mock', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='stream', ctx=Load()), attr='write_and_convert', ctx=Load()), args=[Name(id='datum', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[ListComp(elt=Subscript(value=Name(id='args', ctx=Load()), slice=Constant(value=0), ctx=Load()), generators=[comprehension(target=Name(id='args', ctx=Store()), iter=Attribute(value=Attribute(value=Attribute(value=Name(id='stream', ctx=Load()), attr='wrapped', ctx=Load()), attr='write', ctx=Load()), attr='call_args_list', ctx=Load()), ifs=[], is_async=0)]), List(elts=[Tuple(elts=[Constant(value='abc')], ctx=Load()), Tuple(elts=[Constant(value='def')], ctx=Load())], ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='testWriteAndConvertSkipsEmptySnippets', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='stream', ctx=Store())], value=Call(func=Name(id='AnsiToWin32', ctx=Load()), args=[Call(func=Name(id='Mock', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Attribute(value=Name(id='stream', ctx=Load()), attr='call_win32', ctx=Store())], value=Call(func=Name(id='Mock', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='stream', ctx=Load()), attr='write_and_convert', ctx=Load()), args=[Constant(value='\x1b[40m\x1b[41m')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertFalse', ctx=Load()), args=[Attribute(value=Attribute(value=Attribute(value=Name(id='stream', ctx=Load()), attr='wrapped', ctx=Load()), attr='write', ctx=Load()), attr='called', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='testWriteAndConvertCallsWin32WithParamsAndCommand', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='stream', ctx=Store())], value=Call(func=Name(id='AnsiToWin32', ctx=Load()), args=[Call(func=Name(id='Mock', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Attribute(value=Name(id='stream', ctx=Load()), attr='convert', ctx=Store())], value=Constant(value=True)), Assign(targets=[Attribute(value=Name(id='stream', ctx=Load()), attr='call_win32', ctx=Store())], value=Call(func=Name(id='Mock', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='stream', ctx=Load()), attr='extract_params', ctx=Store())], value=Call(func=Name(id='Mock', ctx=Load()), args=[], keywords=[keyword(arg='return_value', value=Constant(value='params'))])), Assign(targets=[Name(id='data', ctx=Store())], value=Dict(keys=[Constant(value='abc\x1b[adef'), Constant(value='abc\x1b[;;bdef'), Constant(value='abc\x1b[0cdef'), Constant(value='abc\x1b[;;0;;Gdef'), Constant(value='abc\x1b[1;20;128Hdef')], values=[Tuple(elts=[Constant(value='a'), Constant(value='params')], ctx=Load()), Tuple(elts=[Constant(value='b'), Constant(value='params')], ctx=Load()), Tuple(elts=[Constant(value='c'), Constant(value='params')], ctx=Load()), Tuple(elts=[Constant(value='G'), Constant(value='params')], ctx=Load()), Tuple(elts=[Constant(value='H'), Constant(value='params')], ctx=Load())])), For(target=Tuple(elts=[Name(id='datum', ctx=Store()), Name(id='expected', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='stream', ctx=Load()), attr='call_win32', ctx=Load()), attr='reset_mock', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='stream', ctx=Load()), attr='write_and_convert', ctx=Load()), args=[Name(id='datum', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Subscript(value=Attribute(value=Attribute(value=Name(id='stream', ctx=Load()), attr='call_win32', ctx=Load()), attr='call_args', ctx=Load()), slice=Constant(value=0), ctx=Load()), Name(id='expected', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='test_reset_all_shouldnt_raise_on_closed_orig_stdout', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='stream', ctx=Store())], value=Call(func=Name(id='StringIO', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='converter', ctx=Store())], value=Call(func=Name(id='AnsiToWin32', ctx=Load()), args=[Name(id='stream', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='stream', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='converter', ctx=Load()), attr='reset_all', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='test_wrap_shouldnt_raise_on_closed_orig_stdout', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='stream', ctx=Store())], value=Call(func=Name(id='StringIO', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='stream', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='colorama.ansitowin32.os.name'), Constant(value='nt')], keywords=[])), withitem(context_expr=Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='colorama.ansitowin32.winapi_test'), Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Constant(value=True))], keywords=[]))], body=[Assign(targets=[Name(id='converter', ctx=Store())], value=Call(func=Name(id='AnsiToWin32', ctx=Load()), args=[Name(id='stream', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertTrue', ctx=Load()), args=[Attribute(value=Name(id='converter', ctx=Load()), attr='strip', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertFalse', ctx=Load()), args=[Attribute(value=Name(id='converter', ctx=Load()), attr='convert', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_wrap_shouldnt_raise_on_missing_closed_attr', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='colorama.ansitowin32.os.name'), Constant(value='nt')], keywords=[])), withitem(context_expr=Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='colorama.ansitowin32.winapi_test'), Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Constant(value=True))], keywords=[]))], body=[Assign(targets=[Name(id='converter', ctx=Store())], value=Call(func=Name(id='AnsiToWin32', ctx=Load()), args=[Call(func=Name(id='object', ctx=Load()), args=[], keywords=[])], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertTrue', ctx=Load()), args=[Attribute(value=Name(id='converter', ctx=Load()), attr='strip', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertFalse', ctx=Load()), args=[Attribute(value=Name(id='converter', ctx=Load()), attr='convert', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='testExtractParams', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='stream', ctx=Store())], value=Call(func=Name(id='AnsiToWin32', ctx=Load()), args=[Call(func=Name(id='Mock', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='data', ctx=Store())], value=Dict(keys=[Constant(value=''), Constant(value=';;'), Constant(value='2'), Constant(value=';;002;;'), Constant(value='0;1'), Constant(value=';;003;;456;;'), Constant(value='11;22;33;44;55')], values=[Tuple(elts=[Constant(value=0)], ctx=Load()), Tuple(elts=[Constant(value=0)], ctx=Load()), Tuple(elts=[Constant(value=2)], ctx=Load()), Tuple(elts=[Constant(value=2)], ctx=Load()), Tuple(elts=[Constant(value=0), Constant(value=1)], ctx=Load()), Tuple(elts=[Constant(value=3), Constant(value=456)], ctx=Load()), Tuple(elts=[Constant(value=11), Constant(value=22), Constant(value=33), Constant(value=44), Constant(value=55)], ctx=Load())])), For(target=Tuple(elts=[Name(id='datum', ctx=Store()), Name(id='expected', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Name(id='stream', ctx=Load()), attr='extract_params', ctx=Load()), args=[Constant(value='m'), Name(id='datum', ctx=Load())], keywords=[]), Name(id='expected', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='testCallWin32UsesLookup', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='listener', ctx=Store())], value=Call(func=Name(id='Mock', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='stream', ctx=Store())], value=Call(func=Name(id='AnsiToWin32', ctx=Load()), args=[Name(id='listener', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='stream', ctx=Load()), attr='win32_calls', ctx=Store())], value=Dict(keys=[Constant(value=1), Constant(value=2), Constant(value=3)], values=[Tuple(elts=[Lambda(args=arguments(posonlyargs=[], args=[], vararg=arg(arg='_'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='__'), defaults=[]), body=Call(func=Name(id='listener', ctx=Load()), args=[Constant(value=11)], keywords=[]))], ctx=Load()), Tuple(elts=[Lambda(args=arguments(posonlyargs=[], args=[], vararg=arg(arg='_'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='__'), defaults=[]), body=Call(func=Name(id='listener', ctx=Load()), args=[Constant(value=22)], keywords=[]))], ctx=Load()), Tuple(elts=[Lambda(args=arguments(posonlyargs=[], args=[], vararg=arg(arg='_'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='__'), defaults=[]), body=Call(func=Name(id='listener', ctx=Load()), args=[Constant(value=33)], keywords=[]))], ctx=Load())])), Expr(value=Call(func=Attribute(value=Name(id='stream', ctx=Load()), attr='call_win32', ctx=Load()), args=[Constant(value='m'), Tuple(elts=[Constant(value=3), Constant(value=1), Constant(value=99), Constant(value=2)], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[ListComp(elt=Subscript(value=Subscript(value=Name(id='a', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value=0), ctx=Load()), generators=[comprehension(target=Name(id='a', ctx=Store()), iter=Attribute(value=Name(id='listener', ctx=Load()), attr='call_args_list', ctx=Load()), ifs=[], is_async=0)]), List(elts=[Constant(value=33), Constant(value=11), Constant(value=22)], ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_osc_codes', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='mockStdout', ctx=Store())], value=Call(func=Name(id='Mock', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='stream', ctx=Store())], value=Call(func=Name(id='AnsiToWin32', ctx=Load()), args=[Name(id='mockStdout', ctx=Load())], keywords=[keyword(arg='convert', value=Constant(value=True))])), With(items=[withitem(context_expr=Call(func=Name(id='patch', ctx=Load()), args=[Constant(value='colorama.ansitowin32.winterm')], keywords=[]), optional_vars=Name(id='winterm', ctx=Store()))], body=[Assign(targets=[Name(id='data', ctx=Store())], value=List(elts=[Constant(value='\x1b]0\x07'), Constant(value='\x1b]0;foo\x08'), Constant(value='\x1b]0;colorama_test_title\x07'), Constant(value='\x1b]1;colorama_test_title\x07'), Constant(value='\x1b]2;colorama_test_title\x07'), BinOp(left=BinOp(left=Constant(value='\x1b]'), op=Add(), right=BinOp(left=Constant(value=';'), op=Mult(), right=Constant(value=64))), op=Add(), right=Constant(value='\x08'))], ctx=Load())), For(target=Name(id='code', ctx=Store()), iter=Name(id='data', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='stream', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='code', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='winterm', ctx=Load()), attr='set_title', ctx=Load()), attr='call_count', ctx=Load()), Constant(value=2)], keywords=[]))])], decorator_list=[]), FunctionDef(name='test_native_windows_ansi', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='ExitStack', ctx=Load()), args=[], keywords=[]), optional_vars=Name(id='stack', ctx=Store()))], body=[FunctionDef(name='p', args=arguments(posonlyargs=[], args=[arg(arg='a'), arg(arg='b')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='stack', ctx=Load()), attr='enter_context', ctx=Load()), args=[Call(func=Name(id='patch', ctx=Load()), args=[Name(id='a', ctx=Load()), Name(id='b', ctx=Load())], keywords=[keyword(arg='create', value=Constant(value=True))])], keywords=[]))], decorator_list=[]), Expr(value=Call(func=Name(id='p', ctx=Load()), args=[Constant(value='colorama.ansitowin32.os.name'), Constant(value='nt')], keywords=[])), Expr(value=Call(func=Name(id='p', ctx=Load()), args=[Constant(value='colorama.ansitowin32.winapi_test'), Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Constant(value=True))], keywords=[])), Expr(value=Call(func=Name(id='p', ctx=Load()), args=[Constant(value='colorama.win32.winapi_test'), Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Constant(value=True))], keywords=[])), Expr(value=Call(func=Name(id='p', ctx=Load()), args=[Constant(value='colorama.winterm.win32.windll'), Constant(value='non-None')], keywords=[])), Expr(value=Call(func=Name(id='p', ctx=Load()), args=[Constant(value='colorama.winterm.get_osfhandle'), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='_')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Constant(value=1234))], keywords=[])), Expr(value=Call(func=Name(id='p', ctx=Load()), args=[Constant(value='colorama.winterm.win32.GetConsoleMode'), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='_')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Name(id='ENABLE_VIRTUAL_TERMINAL_PROCESSING', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='SetConsoleMode', ctx=Store())], value=Call(func=Name(id='Mock', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Name(id='p', ctx=Load()), args=[Constant(value='colorama.winterm.win32.SetConsoleMode'), Name(id='SetConsoleMode', ctx=Load())], keywords=[])), Assign(targets=[Name(id='stdout', ctx=Store())], value=Call(func=Name(id='Mock', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='stdout', ctx=Load()), attr='closed', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Attribute(value=Name(id='stdout', ctx=Load()), attr='isatty', ctx=Load()), attr='return_value', ctx=Store())], value=Constant(value=True)), Assign(targets=[Attribute(value=Attribute(value=Name(id='stdout', ctx=Load()), attr='fileno', ctx=Load()), attr='return_value', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='stream', ctx=Store())], value=Call(func=Name(id='AnsiToWin32', ctx=Load()), args=[Name(id='stdout', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='SetConsoleMode', ctx=Load()), attr='assert_called_with', ctx=Load()), args=[Constant(value=1234), Name(id='ENABLE_VIRTUAL_TERMINAL_PROCESSING', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertFalse', ctx=Load()), args=[Attribute(value=Name(id='stream', ctx=Load()), attr='strip', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertFalse', ctx=Load()), args=[Attribute(value=Name(id='stream', ctx=Load()), attr='convert', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertFalse', ctx=Load()), args=[Call(func=Attribute(value=Name(id='stream', ctx=Load()), attr='should_wrap', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Name(id='p', ctx=Load()), args=[Constant(value='colorama.winterm.win32.GetConsoleMode'), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='_')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Constant(value=0))], keywords=[])), Assign(targets=[Name(id='SetConsoleMode', ctx=Store())], value=Call(func=Name(id='Mock', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Name(id='p', ctx=Load()), args=[Constant(value='colorama.winterm.win32.SetConsoleMode'), Name(id='SetConsoleMode', ctx=Load())], keywords=[])), Assign(targets=[Name(id='stream', ctx=Store())], value=Call(func=Name(id='AnsiToWin32', ctx=Load()), args=[Name(id='stdout', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='SetConsoleMode', ctx=Load()), attr='assert_called_with', ctx=Load()), args=[Constant(value=1234), Name(id='ENABLE_VIRTUAL_TERMINAL_PROCESSING', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertTrue', ctx=Load()), args=[Attribute(value=Name(id='stream', ctx=Load()), attr='strip', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertTrue', ctx=Load()), args=[Attribute(value=Name(id='stream', ctx=Load()), attr='convert', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertTrue', ctx=Load()), args=[Call(func=Attribute(value=Name(id='stream', ctx=Load()), attr='should_wrap', ctx=Load()), args=[], keywords=[])], keywords=[]))])], decorator_list=[])], decorator_list=[]), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__')]), body=[Expr(value=Call(func=Name(id='main', ctx=Load()), args=[], keywords=[]))], orelse=[])], type_ignores=[])