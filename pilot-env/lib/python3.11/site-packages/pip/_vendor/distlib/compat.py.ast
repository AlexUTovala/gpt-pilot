Module(body=[ImportFrom(module='__future__', names=[alias(name='absolute_import')], level=0), Import(names=[alias(name='os')]), Import(names=[alias(name='re')]), Import(names=[alias(name='sys')]), Try(body=[Import(names=[alias(name='ssl')])], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Assign(targets=[Name(id='ssl', ctx=Store())], value=Constant(value=None))])], orelse=[], finalbody=[]), If(test=Compare(left=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Constant(value=3)]), body=[ImportFrom(module='StringIO', names=[alias(name='StringIO')], level=0), Assign(targets=[Name(id='string_types', ctx=Store())], value=Tuple(elts=[Name(id='basestring', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='text_type', ctx=Store())], value=Name(id='unicode', ctx=Load())), ImportFrom(module='types', names=[alias(name='FileType', asname='file_type')], level=0), Import(names=[alias(name='__builtin__', asname='builtins')]), Import(names=[alias(name='ConfigParser', asname='configparser')]), ImportFrom(module='urlparse', names=[alias(name='urlparse'), alias(name='urlunparse'), alias(name='urljoin'), alias(name='urlsplit'), alias(name='urlunsplit')], level=0), ImportFrom(module='urllib', names=[alias(name='urlretrieve'), alias(name='quote', asname='_quote'), alias(name='unquote'), alias(name='url2pathname'), alias(name='pathname2url'), alias(name='ContentTooShortError'), alias(name='splittype')], level=0), FunctionDef(name='quote', args=arguments(posonlyargs=[], args=[arg(arg='s')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='s', ctx=Load()), Name(id='unicode', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='_quote', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]))], decorator_list=[]), Import(names=[alias(name='urllib2')]), ImportFrom(module='urllib2', names=[alias(name='Request'), alias(name='urlopen'), alias(name='URLError'), alias(name='HTTPError'), alias(name='HTTPBasicAuthHandler'), alias(name='HTTPPasswordMgr'), alias(name='HTTPHandler'), alias(name='HTTPRedirectHandler'), alias(name='build_opener')], level=0), If(test=Name(id='ssl', ctx=Load()), body=[ImportFrom(module='urllib2', names=[alias(name='HTTPSHandler')], level=0)], orelse=[]), Import(names=[alias(name='httplib')]), Import(names=[alias(name='xmlrpclib')]), Import(names=[alias(name='Queue', asname='queue')]), ImportFrom(module='HTMLParser', names=[alias(name='HTMLParser')], level=0), Import(names=[alias(name='htmlentitydefs')]), Assign(targets=[Name(id='raw_input', ctx=Store())], value=Name(id='raw_input', ctx=Load())), ImportFrom(module='itertools', names=[alias(name='ifilter', asname='filter')], level=0), ImportFrom(module='itertools', names=[alias(name='ifilterfalse', asname='filterfalse')], level=0)], orelse=[ImportFrom(module='io', names=[alias(name='StringIO')], level=0), Assign(targets=[Name(id='string_types', ctx=Store())], value=Tuple(elts=[Name(id='str', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='text_type', ctx=Store())], value=Name(id='str', ctx=Load())), ImportFrom(module='io', names=[alias(name='TextIOWrapper', asname='file_type')], level=0), Import(names=[alias(name='builtins')]), Import(names=[alias(name='configparser')]), Import(names=[alias(name='shutil')]), ImportFrom(module='urllib.parse', names=[alias(name='urlparse'), alias(name='urlunparse'), alias(name='urljoin'), alias(name='quote'), alias(name='unquote'), alias(name='urlsplit'), alias(name='urlunsplit'), alias(name='splittype')], level=0), ImportFrom(module='urllib.request', names=[alias(name='urlopen'), alias(name='urlretrieve'), alias(name='Request'), alias(name='url2pathname'), alias(name='pathname2url'), alias(name='HTTPBasicAuthHandler'), alias(name='HTTPPasswordMgr'), alias(name='HTTPHandler'), alias(name='HTTPRedirectHandler'), alias(name='build_opener')], level=0), If(test=Name(id='ssl', ctx=Load()), body=[ImportFrom(module='urllib.request', names=[alias(name='HTTPSHandler')], level=0)], orelse=[]), ImportFrom(module='urllib.error', names=[alias(name='HTTPError'), alias(name='URLError'), alias(name='ContentTooShortError')], level=0), Import(names=[alias(name='http.client', asname='httplib')]), Import(names=[alias(name='urllib.request', asname='urllib2')]), Import(names=[alias(name='xmlrpc.client', asname='xmlrpclib')]), Import(names=[alias(name='queue')]), ImportFrom(module='html.parser', names=[alias(name='HTMLParser')], level=0), Import(names=[alias(name='html.entities', asname='htmlentitydefs')]), Assign(targets=[Name(id='raw_input', ctx=Store())], value=Name(id='input', ctx=Load())), ImportFrom(module='itertools', names=[alias(name='filterfalse')], level=0), Assign(targets=[Name(id='filter', ctx=Store())], value=Name(id='filter', ctx=Load()))]), Try(body=[ImportFrom(module='ssl', names=[alias(name='match_hostname'), alias(name='CertificateError')], level=0)], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[ClassDef(name='CertificateError', bases=[Name(id='ValueError', ctx=Load())], keywords=[], body=[Pass()], decorator_list=[]), FunctionDef(name='_dnsname_match', args=arguments(posonlyargs=[], args=[arg(arg='dn'), arg(arg='hostname'), arg(arg='max_wildcards')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1)]), body=[Expr(value=Constant(value='Matching according to RFC 6125, section 6.4.3\n\n        http://tools.ietf.org/html/rfc6125#section-6.4.3\n        ')), Assign(targets=[Name(id='pats', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=UnaryOp(op=Not(), operand=Name(id='dn', ctx=Load())), body=[Return(value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='parts', ctx=Store())], value=Call(func=Attribute(value=Name(id='dn', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='leftmost', ctx=Store()), Name(id='remainder', ctx=Store())], ctx=Store())], value=Tuple(elts=[Subscript(value=Name(id='parts', ctx=Load()), slice=Constant(value=0), ctx=Load()), Subscript(value=Name(id='parts', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], ctx=Load())), Assign(targets=[Name(id='wildcards', ctx=Store())], value=Call(func=Attribute(value=Name(id='leftmost', ctx=Load()), attr='count', ctx=Load()), args=[Constant(value='*')], keywords=[])), If(test=Compare(left=Name(id='wildcards', ctx=Load()), ops=[Gt()], comparators=[Name(id='max_wildcards', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='CertificateError', ctx=Load()), args=[BinOp(left=Constant(value='too many wildcards in certificate DNS name: '), op=Add(), right=Call(func=Name(id='repr', ctx=Load()), args=[Name(id='dn', ctx=Load())], keywords=[]))], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='wildcards', ctx=Load())), body=[Return(value=Compare(left=Call(func=Attribute(value=Name(id='dn', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='hostname', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])]))], orelse=[]), If(test=Compare(left=Name(id='leftmost', ctx=Load()), ops=[Eq()], comparators=[Constant(value='*')]), body=[Expr(value=Call(func=Attribute(value=Name(id='pats', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='[^.]+')], keywords=[]))], orelse=[If(test=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='leftmost', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='xn--')], keywords=[]), Call(func=Attribute(value=Name(id='hostname', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='xn--')], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='pats', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='escape', ctx=Load()), args=[Name(id='leftmost', ctx=Load())], keywords=[])], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='pats', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='escape', ctx=Load()), args=[Name(id='leftmost', ctx=Load())], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value='\\*'), Constant(value='[^.]*')], keywords=[])], keywords=[]))])]), For(target=Name(id='frag', ctx=Store()), iter=Name(id='remainder', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='pats', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='escape', ctx=Load()), args=[Name(id='frag', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='pat', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[BinOp(left=BinOp(left=Constant(value='\\A'), op=Add(), right=Call(func=Attribute(value=Constant(value='\\.'), attr='join', ctx=Load()), args=[Name(id='pats', ctx=Load())], keywords=[])), op=Add(), right=Constant(value='\\Z')), Attribute(value=Name(id='re', ctx=Load()), attr='IGNORECASE', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='pat', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='hostname', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='match_hostname', args=arguments(posonlyargs=[], args=[arg(arg='cert'), arg(arg='hostname')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Verify that *cert* (in decoded format as returned by\n        SSLSocket.getpeercert()) matches the *hostname*.  RFC 2818 and RFC 6125\n        rules are followed, but IP addresses are not accepted for *hostname*.\n\n        CertificateError is raised on failure. On success, the function\n        returns nothing.\n        ')), If(test=UnaryOp(op=Not(), operand=Name(id='cert', ctx=Load())), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='empty or no certificate, match_hostname needs a SSL socket or SSL context with either CERT_OPTIONAL or CERT_REQUIRED')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='dnsnames', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='san', ctx=Store())], value=Call(func=Attribute(value=Name(id='cert', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='subjectAltName'), Tuple(elts=[], ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Name(id='san', ctx=Load()), body=[If(test=Compare(left=Name(id='key', ctx=Load()), ops=[Eq()], comparators=[Constant(value='DNS')]), body=[If(test=Call(func=Name(id='_dnsname_match', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='hostname', ctx=Load())], keywords=[]), body=[Return()], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='dnsnames', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='dnsnames', ctx=Load())), body=[For(target=Name(id='sub', ctx=Store()), iter=Call(func=Attribute(value=Name(id='cert', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='subject'), Tuple(elts=[], ctx=Load())], keywords=[]), body=[For(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Name(id='sub', ctx=Load()), body=[If(test=Compare(left=Name(id='key', ctx=Load()), ops=[Eq()], comparators=[Constant(value='commonName')]), body=[If(test=Call(func=Name(id='_dnsname_match', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='hostname', ctx=Load())], keywords=[]), body=[Return()], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='dnsnames', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[])], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='dnsnames', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Raise(exc=Call(func=Name(id='CertificateError', ctx=Load()), args=[BinOp(left=Constant(value="hostname %r doesn't match either of %s"), op=Mod(), right=Tuple(elts=[Name(id='hostname', ctx=Load()), Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Name(id='repr', ctx=Load()), Name(id='dnsnames', ctx=Load())], keywords=[])], keywords=[])], ctx=Load()))], keywords=[]))], orelse=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='dnsnames', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Raise(exc=Call(func=Name(id='CertificateError', ctx=Load()), args=[BinOp(left=Constant(value="hostname %r doesn't match %r"), op=Mod(), right=Tuple(elts=[Name(id='hostname', ctx=Load()), Subscript(value=Name(id='dnsnames', ctx=Load()), slice=Constant(value=0), ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[Raise(exc=Call(func=Name(id='CertificateError', ctx=Load()), args=[Constant(value='no appropriate commonName or subjectAltName fields were found')], keywords=[]))])])], decorator_list=[])])], orelse=[], finalbody=[]), Try(body=[ImportFrom(module='types', names=[alias(name='SimpleNamespace', asname='Container')], level=0)], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[ClassDef(name='Container', bases=[Name(id='object', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n        A generic container for when multiple values need to be returned\n        ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__dict__', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='kwargs', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[])])], orelse=[], finalbody=[]), Try(body=[ImportFrom(module='shutil', names=[alias(name='which')], level=0)], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[FunctionDef(name='which', args=arguments(posonlyargs=[], args=[arg(arg='cmd'), arg(arg='mode'), arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[BinOp(left=Attribute(value=Name(id='os', ctx=Load()), attr='F_OK', ctx=Load()), op=BitOr(), right=Attribute(value=Name(id='os', ctx=Load()), attr='X_OK', ctx=Load())), Constant(value=None)]), body=[Expr(value=Constant(value='Given a command, mode, and a PATH string, return the path which\n        conforms to the given mode on the PATH, or None if there is no such\n        file.\n\n        `mode` defaults to os.F_OK | os.X_OK. `path` defaults to the result\n        of os.environ.get("PATH"), or can be overridden with a custom search\n        path.\n\n        ')), FunctionDef(name='_access_check', args=arguments(posonlyargs=[], args=[arg(arg='fn'), arg(arg='mode')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=And(), values=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='fn', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='access', ctx=Load()), args=[Name(id='fn', ctx=Load()), Name(id='mode', ctx=Load())], keywords=[]), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isdir', ctx=Load()), args=[Name(id='fn', ctx=Load())], keywords=[]))]))], decorator_list=[]), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Name(id='cmd', ctx=Load())], keywords=[]), body=[If(test=Call(func=Name(id='_access_check', ctx=Load()), args=[Name(id='cmd', ctx=Load()), Name(id='mode', ctx=Load())], keywords=[]), body=[Return(value=Name(id='cmd', ctx=Load()))], orelse=[]), Return(value=Constant(value=None))], orelse=[]), If(test=Compare(left=Name(id='path', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='PATH'), Attribute(value=Name(id='os', ctx=Load()), attr='defpath', ctx=Load())], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='path', ctx=Load())), body=[Return(value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='split', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='pathsep', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), ops=[Eq()], comparators=[Constant(value='win32')]), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Attribute(value=Name(id='os', ctx=Load()), attr='curdir', ctx=Load()), ops=[In()], comparators=[Name(id='path', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='insert', ctx=Load()), args=[Constant(value=0), Attribute(value=Name(id='os', ctx=Load()), attr='curdir', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='pathext', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='PATHEXT'), Constant(value='')], keywords=[]), attr='split', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='pathsep', ctx=Load())], keywords=[])), If(test=Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='cmd', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), attr='endswith', ctx=Load()), args=[Call(func=Attribute(value=Name(id='ext', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])], keywords=[]), generators=[comprehension(target=Name(id='ext', ctx=Store()), iter=Name(id='pathext', ctx=Load()), ifs=[], is_async=0)])], keywords=[]), body=[Assign(targets=[Name(id='files', ctx=Store())], value=List(elts=[Name(id='cmd', ctx=Load())], ctx=Load()))], orelse=[Assign(targets=[Name(id='files', ctx=Store())], value=ListComp(elt=BinOp(left=Name(id='cmd', ctx=Load()), op=Add(), right=Name(id='ext', ctx=Load())), generators=[comprehension(target=Name(id='ext', ctx=Store()), iter=Name(id='pathext', ctx=Load()), ifs=[], is_async=0)]))])], orelse=[Assign(targets=[Name(id='files', ctx=Store())], value=List(elts=[Name(id='cmd', ctx=Load())], ctx=Load()))]), Assign(targets=[Name(id='seen', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), For(target=Name(id='dir', ctx=Store()), iter=Name(id='path', ctx=Load()), body=[Assign(targets=[Name(id='normdir', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normcase', ctx=Load()), args=[Name(id='dir', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Compare(left=Name(id='normdir', ctx=Load()), ops=[In()], comparators=[Name(id='seen', ctx=Load())])), body=[Expr(value=Call(func=Attribute(value=Name(id='seen', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='normdir', ctx=Load())], keywords=[])), For(target=Name(id='thefile', ctx=Store()), iter=Name(id='files', ctx=Load()), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='dir', ctx=Load()), Name(id='thefile', ctx=Load())], keywords=[])), If(test=Call(func=Name(id='_access_check', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='mode', ctx=Load())], keywords=[]), body=[Return(value=Name(id='name', ctx=Load()))], orelse=[])], orelse=[])], orelse=[])], orelse=[]), Return(value=Constant(value=None))], decorator_list=[])])], orelse=[], finalbody=[]), ImportFrom(module='zipfile', names=[alias(name='ZipFile', asname='BaseZipFile')], level=0), If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='BaseZipFile', ctx=Load()), Constant(value='__enter__')], keywords=[]), body=[Assign(targets=[Name(id='ZipFile', ctx=Store())], value=Name(id='BaseZipFile', ctx=Load()))], orelse=[ImportFrom(module='zipfile', names=[alias(name='ZipExtFile', asname='BaseZipExtFile')], level=0), ClassDef(name='ZipExtFile', bases=[Name(id='BaseZipExtFile', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='base')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__dict__', ctx=Load()), attr='update', ctx=Load()), args=[Attribute(value=Name(id='base', ctx=Load()), attr='__dict__', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='__enter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Name(id='self', ctx=Load()))], decorator_list=[]), FunctionDef(name='__exit__', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='exc_info'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='ZipFile', bases=[Name(id='BaseZipFile', ctx=Load())], keywords=[], body=[FunctionDef(name='__enter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Name(id='self', ctx=Load()))], decorator_list=[]), FunctionDef(name='__exit__', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='exc_info'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='open', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Assign(targets=[Name(id='base', ctx=Store())], value=Call(func=Attribute(value=Name(id='BaseZipFile', ctx=Load()), attr='open', ctx=Load()), args=[Name(id='self', ctx=Load()), Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))])), Return(value=Call(func=Name(id='ZipExtFile', ctx=Load()), args=[Name(id='base', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[])]), Try(body=[ImportFrom(module='platform', names=[alias(name='python_implementation')], level=0)], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[FunctionDef(name='python_implementation', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return a string identifying the Python implementation.')), If(test=Compare(left=Constant(value='PyPy'), ops=[In()], comparators=[Attribute(value=Name(id='sys', ctx=Load()), attr='version', ctx=Load())]), body=[Return(value=Constant(value='PyPy'))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='os', ctx=Load()), attr='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='java')]), body=[Return(value=Constant(value='Jython'))], orelse=[]), If(test=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='IronPython')], keywords=[]), body=[Return(value=Constant(value='IronPython'))], orelse=[]), Return(value=Constant(value='CPython'))], decorator_list=[])])], orelse=[], finalbody=[]), Import(names=[alias(name='shutil')]), Import(names=[alias(name='sysconfig')]), Try(body=[Assign(targets=[Name(id='callable', ctx=Store())], value=Name(id='callable', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='NameError', ctx=Load()), body=[ImportFrom(module='collections.abc', names=[alias(name='Callable')], level=0), FunctionDef(name='callable', args=arguments(posonlyargs=[], args=[arg(arg='obj')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='obj', ctx=Load()), Name(id='Callable', ctx=Load())], keywords=[]))], decorator_list=[])])], orelse=[], finalbody=[]), Try(body=[Assign(targets=[Name(id='fsencode', ctx=Store())], value=Attribute(value=Name(id='os', ctx=Load()), attr='fsencode', ctx=Load())), Assign(targets=[Name(id='fsdecode', ctx=Store())], value=Attribute(value=Name(id='os', ctx=Load()), attr='fsdecode', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Assign(targets=[Name(id='_fsencoding', ctx=Store())], value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='sys', ctx=Load()), attr='getfilesystemencoding', ctx=Load()), args=[], keywords=[]), Constant(value='utf-8')])), If(test=Compare(left=Name(id='_fsencoding', ctx=Load()), ops=[Eq()], comparators=[Constant(value='mbcs')]), body=[Assign(targets=[Name(id='_fserrors', ctx=Store())], value=Constant(value='strict'))], orelse=[Assign(targets=[Name(id='_fserrors', ctx=Store())], value=Constant(value='surrogateescape'))]), FunctionDef(name='fsencode', args=arguments(posonlyargs=[], args=[arg(arg='filename')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='filename', ctx=Load()), Name(id='bytes', ctx=Load())], keywords=[]), body=[Return(value=Name(id='filename', ctx=Load()))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='filename', ctx=Load()), Name(id='text_type', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Attribute(value=Name(id='filename', ctx=Load()), attr='encode', ctx=Load()), args=[Name(id='_fsencoding', ctx=Load()), Name(id='_fserrors', ctx=Load())], keywords=[]))], orelse=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[BinOp(left=Constant(value='expect bytes or str, not %s'), op=Mod(), right=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()))], keywords=[]))])])], decorator_list=[]), FunctionDef(name='fsdecode', args=arguments(posonlyargs=[], args=[arg(arg='filename')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='filename', ctx=Load()), Name(id='text_type', ctx=Load())], keywords=[]), body=[Return(value=Name(id='filename', ctx=Load()))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='filename', ctx=Load()), Name(id='bytes', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Attribute(value=Name(id='filename', ctx=Load()), attr='decode', ctx=Load()), args=[Name(id='_fsencoding', ctx=Load()), Name(id='_fserrors', ctx=Load())], keywords=[]))], orelse=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[BinOp(left=Constant(value='expect bytes or str, not %s'), op=Mod(), right=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()))], keywords=[]))])])], decorator_list=[])])], orelse=[], finalbody=[]), Try(body=[ImportFrom(module='tokenize', names=[alias(name='detect_encoding')], level=0)], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[ImportFrom(module='codecs', names=[alias(name='BOM_UTF8'), alias(name='lookup')], level=0), Import(names=[alias(name='re')]), Assign(targets=[Name(id='cookie_re', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='coding[:=]\\s*([-\\w.]+)')], keywords=[])), FunctionDef(name='_get_normal_name', args=arguments(posonlyargs=[], args=[arg(arg='orig_enc')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Imitates get_normal_name in tokenizer.c.')), Assign(targets=[Name(id='enc', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Subscript(value=Name(id='orig_enc', ctx=Load()), slice=Slice(upper=Constant(value=12)), ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value='_'), Constant(value='-')], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='enc', ctx=Load()), ops=[Eq()], comparators=[Constant(value='utf-8')]), Call(func=Attribute(value=Name(id='enc', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='utf-8-')], keywords=[])]), body=[Return(value=Constant(value='utf-8'))], orelse=[]), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='enc', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='latin-1'), Constant(value='iso-8859-1'), Constant(value='iso-latin-1')], ctx=Load())]), Call(func=Attribute(value=Name(id='enc', ctx=Load()), attr='startswith', ctx=Load()), args=[Tuple(elts=[Constant(value='latin-1-'), Constant(value='iso-8859-1-'), Constant(value='iso-latin-1-')], ctx=Load())], keywords=[])]), body=[Return(value=Constant(value='iso-8859-1'))], orelse=[]), Return(value=Name(id='orig_enc', ctx=Load()))], decorator_list=[]), FunctionDef(name='detect_encoding', args=arguments(posonlyargs=[], args=[arg(arg='readline')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        The detect_encoding() function is used to detect the encoding that should\n        be used to decode a Python source file.  It requires one argument, readline,\n        in the same way as the tokenize() generator.\n\n        It will call readline a maximum of twice, and return the encoding used\n        (as a string) and a list of any lines (left as bytes) it has read in.\n\n        It detects the encoding from the presence of a utf-8 bom or an encoding\n        cookie as specified in pep-0263.  If both a bom and a cookie are present,\n        but disagree, a SyntaxError will be raised.  If the encoding cookie is an\n        invalid charset, raise a SyntaxError.  Note that if a utf-8 bom is found,\n        'utf-8-sig' is returned.\n\n        If no encoding is specified, then the default of 'utf-8' will be returned.\n        ")), Try(body=[Assign(targets=[Name(id='filename', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='readline', ctx=Load()), attr='__self__', ctx=Load()), attr='name', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Assign(targets=[Name(id='filename', ctx=Store())], value=Constant(value=None))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='bom_found', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='encoding', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='default', ctx=Store())], value=Constant(value='utf-8')), FunctionDef(name='read_or_stop', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Return(value=Call(func=Name(id='readline', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Name(id='StopIteration', ctx=Load()), body=[Return(value=Constant(value=b''))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='find_cookie', args=arguments(posonlyargs=[], args=[arg(arg='line')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Name(id='line_string', ctx=Store())], value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[]))], handlers=[ExceptHandler(type=Name(id='UnicodeDecodeError', ctx=Load()), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Constant(value='invalid or missing encoding declaration')), If(test=Compare(left=Name(id='filename', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Call(func=Attribute(value=Constant(value='{} for {!r}'), attr='format', ctx=Load()), args=[Name(id='msg', ctx=Load()), Name(id='filename', ctx=Load())], keywords=[]))], orelse=[]), Raise(exc=Call(func=Name(id='SyntaxError', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='matches', ctx=Store())], value=Call(func=Attribute(value=Name(id='cookie_re', ctx=Load()), attr='findall', ctx=Load()), args=[Name(id='line_string', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='matches', ctx=Load())), body=[Return(value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='encoding', ctx=Store())], value=Call(func=Name(id='_get_normal_name', ctx=Load()), args=[Subscript(value=Name(id='matches', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])), Try(body=[Assign(targets=[Name(id='codec', ctx=Store())], value=Call(func=Name(id='lookup', ctx=Load()), args=[Name(id='encoding', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='LookupError', ctx=Load()), body=[If(test=Compare(left=Name(id='filename', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=BinOp(left=Constant(value='unknown encoding: '), op=Add(), right=Name(id='encoding', ctx=Load())))], orelse=[Assign(targets=[Name(id='msg', ctx=Store())], value=Call(func=Attribute(value=Constant(value='unknown encoding for {!r}: {}'), attr='format', ctx=Load()), args=[Name(id='filename', ctx=Load()), Name(id='encoding', ctx=Load())], keywords=[]))]), Raise(exc=Call(func=Name(id='SyntaxError', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[]), If(test=Name(id='bom_found', ctx=Load()), body=[If(test=Compare(left=Attribute(value=Name(id='codec', ctx=Load()), attr='name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='utf-8')]), body=[If(test=Compare(left=Name(id='filename', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Constant(value='encoding problem: utf-8'))], orelse=[Assign(targets=[Name(id='msg', ctx=Store())], value=Call(func=Attribute(value=Constant(value='encoding problem for {!r}: utf-8'), attr='format', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[]))]), Raise(exc=Call(func=Name(id='SyntaxError', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))], orelse=[]), AugAssign(target=Name(id='encoding', ctx=Store()), op=Add(), value=Constant(value='-sig'))], orelse=[]), Return(value=Name(id='encoding', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='first', ctx=Store())], value=Call(func=Name(id='read_or_stop', ctx=Load()), args=[], keywords=[])), If(test=Call(func=Attribute(value=Name(id='first', ctx=Load()), attr='startswith', ctx=Load()), args=[Name(id='BOM_UTF8', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='bom_found', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='first', ctx=Store())], value=Subscript(value=Name(id='first', ctx=Load()), slice=Slice(lower=Constant(value=3)), ctx=Load())), Assign(targets=[Name(id='default', ctx=Store())], value=Constant(value='utf-8-sig'))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='first', ctx=Load())), body=[Return(value=Tuple(elts=[Name(id='default', ctx=Load()), List(elts=[], ctx=Load())], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='encoding', ctx=Store())], value=Call(func=Name(id='find_cookie', ctx=Load()), args=[Name(id='first', ctx=Load())], keywords=[])), If(test=Name(id='encoding', ctx=Load()), body=[Return(value=Tuple(elts=[Name(id='encoding', ctx=Load()), List(elts=[Name(id='first', ctx=Load())], ctx=Load())], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='second', ctx=Store())], value=Call(func=Name(id='read_or_stop', ctx=Load()), args=[], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='second', ctx=Load())), body=[Return(value=Tuple(elts=[Name(id='default', ctx=Load()), List(elts=[Name(id='first', ctx=Load())], ctx=Load())], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='encoding', ctx=Store())], value=Call(func=Name(id='find_cookie', ctx=Load()), args=[Name(id='second', ctx=Load())], keywords=[])), If(test=Name(id='encoding', ctx=Load()), body=[Return(value=Tuple(elts=[Name(id='encoding', ctx=Load()), List(elts=[Name(id='first', ctx=Load()), Name(id='second', ctx=Load())], ctx=Load())], ctx=Load()))], orelse=[]), Return(value=Tuple(elts=[Name(id='default', ctx=Load()), List(elts=[Name(id='first', ctx=Load()), Name(id='second', ctx=Load())], ctx=Load())], ctx=Load()))], decorator_list=[])])], orelse=[], finalbody=[]), Try(body=[ImportFrom(module='html', names=[alias(name='escape')], level=0)], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[ImportFrom(module='cgi', names=[alias(name='escape')], level=0)])], orelse=[], finalbody=[]), If(test=Compare(left=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), slice=Slice(upper=Constant(value=2)), ctx=Load()), ops=[Lt()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=4)], ctx=Load())]), body=[Assign(targets=[Name(id='unescape', ctx=Store())], value=Attribute(value=Call(func=Name(id='HTMLParser', ctx=Load()), args=[], keywords=[]), attr='unescape', ctx=Load()))], orelse=[ImportFrom(module='html', names=[alias(name='unescape')], level=0)]), Try(body=[ImportFrom(module='collections', names=[alias(name='ChainMap')], level=0)], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[ImportFrom(module='collections', names=[alias(name='MutableMapping')], level=0), Try(body=[ImportFrom(module='reprlib', names=[alias(name='recursive_repr', asname='_recursive_repr')], level=0)], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[FunctionDef(name='_recursive_repr', args=arguments(posonlyargs=[], args=[arg(arg='fillvalue')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='...')]), body=[Expr(value=Constant(value='\n            Decorator to make a repr function return fillvalue for a recursive\n            call\n            ')), FunctionDef(name='decorating_function', args=arguments(posonlyargs=[], args=[arg(arg='user_function')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='repr_running', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), FunctionDef(name='wrapper', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='key', ctx=Store())], value=Tuple(elts=[Call(func=Name(id='id', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), Call(func=Name(id='get_ident', ctx=Load()), args=[], keywords=[])], ctx=Load())), If(test=Compare(left=Name(id='key', ctx=Load()), ops=[In()], comparators=[Name(id='repr_running', ctx=Load())]), body=[Return(value=Name(id='fillvalue', ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='repr_running', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[])), Try(body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='user_function', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]))], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='repr_running', ctx=Load()), attr='discard', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[]))]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[]), Assign(targets=[Attribute(value=Name(id='wrapper', ctx=Load()), attr='__module__', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='user_function', ctx=Load()), Constant(value='__module__')], keywords=[])), Assign(targets=[Attribute(value=Name(id='wrapper', ctx=Load()), attr='__doc__', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='user_function', ctx=Load()), Constant(value='__doc__')], keywords=[])), Assign(targets=[Attribute(value=Name(id='wrapper', ctx=Load()), attr='__name__', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='user_function', ctx=Load()), Constant(value='__name__')], keywords=[])), Assign(targets=[Attribute(value=Name(id='wrapper', ctx=Load()), attr='__annotations__', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='user_function', ctx=Load()), Constant(value='__annotations__'), Dict(keys=[], values=[])], keywords=[])), Return(value=Name(id='wrapper', ctx=Load()))], decorator_list=[]), Return(value=Name(id='decorating_function', ctx=Load()))], decorator_list=[])])], orelse=[], finalbody=[]), ClassDef(name='ChainMap', bases=[Name(id='MutableMapping', ctx=Load())], keywords=[], body=[Expr(value=Constant(value=' A ChainMap groups multiple dicts (or other mappings) together\n        to create a single, updateable view.\n\n        The underlying mappings are stored in a list.  That list is public and can\n        accessed or updated using the *maps* attribute.  There is no other state.\n\n        Lookups search the underlying mappings successively until a key is found.\n        In contrast, writes, updates, and deletions only operate on the first\n        mapping.\n\n        ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='maps'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Initialize a ChainMap by setting *maps* to the given mappings.\n            If no mappings are provided, a single empty dictionary is used.\n\n            ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='maps', ctx=Store())], value=BoolOp(op=Or(), values=[Call(func=Name(id='list', ctx=Load()), args=[Name(id='maps', ctx=Load())], keywords=[]), List(elts=[Dict(keys=[], values=[])], ctx=Load())]))], decorator_list=[]), FunctionDef(name='__missing__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Call(func=Name(id='KeyError', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='__getitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='mapping', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='maps', ctx=Load()), body=[Try(body=[Return(value=Subscript(value=Name(id='mapping', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='__missing__', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='get', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key'), arg(arg='default')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Return(value=IfExp(test=Compare(left=Name(id='key', ctx=Load()), ops=[In()], comparators=[Name(id='self', ctx=Load())]), body=Subscript(value=Name(id='self', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()), orelse=Name(id='default', ctx=Load())))], decorator_list=[]), FunctionDef(name='__len__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[]), attr='union', ctx=Load()), args=[Starred(value=Attribute(value=Name(id='self', ctx=Load()), attr='maps', ctx=Load()), ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='__iter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='iter', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[]), attr='union', ctx=Load()), args=[Starred(value=Attribute(value=Name(id='self', ctx=Load()), attr='maps', ctx=Load()), ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='__contains__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=Compare(left=Name(id='key', ctx=Load()), ops=[In()], comparators=[Name(id='m', ctx=Load())]), generators=[comprehension(target=Name(id='m', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='maps', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[]), FunctionDef(name='__bool__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='any', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='maps', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value='{0.__class__.__name__}({1})'), attr='format', ctx=Load()), args=[Name(id='self', ctx=Load()), Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Name(id='repr', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='maps', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], decorator_list=[Call(func=Name(id='_recursive_repr', ctx=Load()), args=[], keywords=[])]), FunctionDef(name='fromkeys', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='iterable')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Create a ChainMap with a single dict created from the iterable.')), Return(value=Call(func=Name(id='cls', ctx=Load()), args=[Call(func=Attribute(value=Name(id='dict', ctx=Load()), attr='fromkeys', ctx=Load()), args=[Name(id='iterable', ctx=Load()), Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='copy', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='New ChainMap or subclass with a new copy of maps[0] and refs to maps[1:]')), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), args=[Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='maps', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[]), Starred(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='maps', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), ctx=Load())], keywords=[]))], decorator_list=[]), Assign(targets=[Name(id='__copy__', ctx=Store())], value=Name(id='copy', ctx=Load())), FunctionDef(name='new_child', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='New ChainMap with a new dict followed by all previous maps.')), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), args=[Dict(keys=[], values=[]), Starred(value=Attribute(value=Name(id='self', ctx=Load()), attr='maps', ctx=Load()), ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='parents', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='New ChainMap from maps[1:].')), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), args=[Starred(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='maps', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), ctx=Load())], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='__setitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='maps', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[]), FunctionDef(name='__delitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Delete(targets=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='maps', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Del())])], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='KeyError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Key not found in the first mapping: {!r}'), attr='format', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[])], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='popitem', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Remove and return an item pair from maps[0]. Raise KeyError is maps[0] is empty.')), Try(body=[Return(value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='maps', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='popitem', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='KeyError', ctx=Load()), args=[Constant(value='No keys found in the first mapping.')], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='pop', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Remove *key* from maps[0] and return its value. Raise KeyError if *key* not in maps[0].')), Try(body=[Return(value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='maps', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='key', ctx=Load()), Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='KeyError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Key not found in the first mapping: {!r}'), attr='format', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[])], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='clear', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Clear maps[0], leaving maps[1:] intact.')), Expr(value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='maps', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='clear', ctx=Load()), args=[], keywords=[]))], decorator_list=[])], decorator_list=[])])], orelse=[], finalbody=[]), Try(body=[ImportFrom(module='importlib.util', names=[alias(name='cache_from_source')], level=0)], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[FunctionDef(name='cache_from_source', args=arguments(posonlyargs=[], args=[arg(arg='path'), arg(arg='debug_override')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assert(test=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='.py')], keywords=[])), If(test=Compare(left=Name(id='debug_override', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='debug_override', ctx=Store())], value=Name(id='__debug__', ctx=Load()))], orelse=[]), If(test=Name(id='debug_override', ctx=Load()), body=[Assign(targets=[Name(id='suffix', ctx=Store())], value=Constant(value='c'))], orelse=[Assign(targets=[Name(id='suffix', ctx=Store())], value=Constant(value='o'))]), Return(value=BinOp(left=Name(id='path', ctx=Load()), op=Add(), right=Name(id='suffix', ctx=Load())))], decorator_list=[])])], orelse=[], finalbody=[]), Try(body=[ImportFrom(module='collections', names=[alias(name='OrderedDict')], level=0)], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Try(body=[ImportFrom(module='thread', names=[alias(name='get_ident', asname='_get_ident')], level=0)], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[ImportFrom(module='dummy_thread', names=[alias(name='get_ident', asname='_get_ident')], level=0)])], orelse=[], finalbody=[]), Try(body=[ImportFrom(module='_abcoll', names=[alias(name='KeysView'), alias(name='ValuesView'), alias(name='ItemsView')], level=0)], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[]), ClassDef(name='OrderedDict', bases=[Name(id='dict', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Dictionary that remembers insertion order')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwds'), defaults=[]), body=[Expr(value=Constant(value='Initialize an ordered dictionary.  Signature is the same as for\n            regular dictionaries, but keyword arguments are not recommended\n            because their insertion order is arbitrary.\n\n            ')), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[BinOp(left=Constant(value='expected at most 1 arguments, got %d'), op=Mod(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[]))], keywords=[]))], orelse=[]), Try(body=[Expr(value=Attribute(value=Name(id='self', ctx=Load()), attr='__root', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='__root', ctx=Store()), Name(id='root', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Subscript(value=Name(id='root', ctx=Load()), slice=Slice(), ctx=Store())], value=List(elts=[Name(id='root', ctx=Load()), Name(id='root', ctx=Load()), Constant(value=None)], ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='__map', ctx=Store())], value=Dict(keys=[], values=[]))])], orelse=[], finalbody=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='__update', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwds', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='__setitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key'), arg(arg='value'), arg(arg='dict_setitem')], kwonlyargs=[], kw_defaults=[], defaults=[Attribute(value=Name(id='dict', ctx=Load()), attr='__setitem__', ctx=Load())]), body=[Expr(value=Constant(value='od.__setitem__(i, y) <==> od[i]=y')), If(test=Compare(left=Name(id='key', ctx=Load()), ops=[NotIn()], comparators=[Name(id='self', ctx=Load())]), body=[Assign(targets=[Name(id='root', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='__root', ctx=Load())), Assign(targets=[Name(id='last', ctx=Store())], value=Subscript(value=Name(id='root', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Subscript(value=Name(id='last', ctx=Load()), slice=Constant(value=1), ctx=Store()), Subscript(value=Name(id='root', ctx=Load()), slice=Constant(value=0), ctx=Store()), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='__map', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=List(elts=[Name(id='last', ctx=Load()), Name(id='root', ctx=Load()), Name(id='key', ctx=Load())], ctx=Load()))], orelse=[]), Expr(value=Call(func=Name(id='dict_setitem', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='key', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='__delitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key'), arg(arg='dict_delitem')], kwonlyargs=[], kw_defaults=[], defaults=[Attribute(value=Name(id='dict', ctx=Load()), attr='__delitem__', ctx=Load())]), body=[Expr(value=Constant(value='od.__delitem__(y) <==> del od[y]')), Expr(value=Call(func=Name(id='dict_delitem', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='key', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='link_prev', ctx=Store()), Name(id='link_next', ctx=Store()), Name(id='key', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__map', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='link_prev', ctx=Load()), slice=Constant(value=1), ctx=Store())], value=Name(id='link_next', ctx=Load())), Assign(targets=[Subscript(value=Name(id='link_next', ctx=Load()), slice=Constant(value=0), ctx=Store())], value=Name(id='link_prev', ctx=Load()))], decorator_list=[]), FunctionDef(name='__iter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='od.__iter__() <==> iter(od)')), Assign(targets=[Name(id='root', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='__root', ctx=Load())), Assign(targets=[Name(id='curr', ctx=Store())], value=Subscript(value=Name(id='root', ctx=Load()), slice=Constant(value=1), ctx=Load())), While(test=Compare(left=Name(id='curr', ctx=Load()), ops=[IsNot()], comparators=[Name(id='root', ctx=Load())]), body=[Expr(value=Yield(value=Subscript(value=Name(id='curr', ctx=Load()), slice=Constant(value=2), ctx=Load()))), Assign(targets=[Name(id='curr', ctx=Store())], value=Subscript(value=Name(id='curr', ctx=Load()), slice=Constant(value=1), ctx=Load()))], orelse=[])], decorator_list=[]), FunctionDef(name='__reversed__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='od.__reversed__() <==> reversed(od)')), Assign(targets=[Name(id='root', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='__root', ctx=Load())), Assign(targets=[Name(id='curr', ctx=Store())], value=Subscript(value=Name(id='root', ctx=Load()), slice=Constant(value=0), ctx=Load())), While(test=Compare(left=Name(id='curr', ctx=Load()), ops=[IsNot()], comparators=[Name(id='root', ctx=Load())]), body=[Expr(value=Yield(value=Subscript(value=Name(id='curr', ctx=Load()), slice=Constant(value=2), ctx=Load()))), Assign(targets=[Name(id='curr', ctx=Store())], value=Subscript(value=Name(id='curr', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[])], decorator_list=[]), FunctionDef(name='clear', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='od.clear() -> None.  Remove all items from od.')), Try(body=[For(target=Name(id='node', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__map', ctx=Load()), attr='itervalues', ctx=Load()), args=[], keywords=[]), body=[Delete(targets=[Subscript(value=Name(id='node', ctx=Load()), slice=Slice(), ctx=Del())])], orelse=[]), Assign(targets=[Name(id='root', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='__root', ctx=Load())), Assign(targets=[Subscript(value=Name(id='root', ctx=Load()), slice=Slice(), ctx=Store())], value=List(elts=[Name(id='root', ctx=Load()), Name(id='root', ctx=Load()), Constant(value=None)], ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__map', ctx=Load()), attr='clear', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[]), Expr(value=Call(func=Attribute(value=Name(id='dict', ctx=Load()), attr='clear', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='popitem', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='last')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Expr(value=Constant(value='od.popitem() -> (k, v), return and remove a (key, value) pair.\n            Pairs are returned in LIFO order if last is true or FIFO order if false.\n\n            ')), If(test=UnaryOp(op=Not(), operand=Name(id='self', ctx=Load())), body=[Raise(exc=Call(func=Name(id='KeyError', ctx=Load()), args=[Constant(value='dictionary is empty')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='root', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='__root', ctx=Load())), If(test=Name(id='last', ctx=Load()), body=[Assign(targets=[Name(id='link', ctx=Store())], value=Subscript(value=Name(id='root', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='link_prev', ctx=Store())], value=Subscript(value=Name(id='link', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Subscript(value=Name(id='link_prev', ctx=Load()), slice=Constant(value=1), ctx=Store())], value=Name(id='root', ctx=Load())), Assign(targets=[Subscript(value=Name(id='root', ctx=Load()), slice=Constant(value=0), ctx=Store())], value=Name(id='link_prev', ctx=Load()))], orelse=[Assign(targets=[Name(id='link', ctx=Store())], value=Subscript(value=Name(id='root', ctx=Load()), slice=Constant(value=1), ctx=Load())), Assign(targets=[Name(id='link_next', ctx=Store())], value=Subscript(value=Name(id='link', ctx=Load()), slice=Constant(value=1), ctx=Load())), Assign(targets=[Subscript(value=Name(id='root', ctx=Load()), slice=Constant(value=1), ctx=Store())], value=Name(id='link_next', ctx=Load())), Assign(targets=[Subscript(value=Name(id='link_next', ctx=Load()), slice=Constant(value=0), ctx=Store())], value=Name(id='root', ctx=Load()))]), Assign(targets=[Name(id='key', ctx=Store())], value=Subscript(value=Name(id='link', ctx=Load()), slice=Constant(value=2), ctx=Load())), Delete(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='__map', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Del())]), Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='dict', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='key', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Name(id='key', ctx=Load()), Name(id='value', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='keys', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='od.keys() -> list of keys in od')), Return(value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='values', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='od.values() -> list of values in od')), Return(value=ListComp(elt=Subscript(value=Name(id='self', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='key', ctx=Store()), iter=Name(id='self', ctx=Load()), ifs=[], is_async=0)]))], decorator_list=[]), FunctionDef(name='items', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='od.items() -> list of (key, value) pairs in od')), Return(value=ListComp(elt=Tuple(elts=[Name(id='key', ctx=Load()), Subscript(value=Name(id='self', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load())], ctx=Load()), generators=[comprehension(target=Name(id='key', ctx=Store()), iter=Name(id='self', ctx=Load()), ifs=[], is_async=0)]))], decorator_list=[]), FunctionDef(name='iterkeys', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='od.iterkeys() -> an iterator over the keys in od')), Return(value=Call(func=Name(id='iter', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='itervalues', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='od.itervalues -> an iterator over the values in od')), For(target=Name(id='k', ctx=Store()), iter=Name(id='self', ctx=Load()), body=[Expr(value=Yield(value=Subscript(value=Name(id='self', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Load())))], orelse=[])], decorator_list=[]), FunctionDef(name='iteritems', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='od.iteritems -> an iterator over the (key, value) items in od')), For(target=Name(id='k', ctx=Store()), iter=Name(id='self', ctx=Load()), body=[Expr(value=Yield(value=Tuple(elts=[Name(id='k', ctx=Load()), Subscript(value=Name(id='self', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Load())], ctx=Load())))], orelse=[])], decorator_list=[]), FunctionDef(name='update', args=arguments(posonlyargs=[], args=[], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwds'), defaults=[]), body=[Expr(value=Constant(value='od.update(E, **F) -> None.  Update od from dict/iterable E and F.\n\n            If E is a dict instance, does:           for k in E: od[k] = E[k]\n            If E has a .keys() method, does:         for k in E.keys(): od[k] = E[k]\n            Or if E is an iterable of items, does:   for k, v in E: od[k] = v\n            In either case, this is followed by:     for k, v in F.items(): od[k] = v\n\n            ')), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=2)]), body=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[BinOp(left=Constant(value='update() takes at most 2 positional arguments (%d given)'), op=Mod(), right=Tuple(elts=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[])], ctx=Load()))], keywords=[]))], orelse=[If(test=UnaryOp(op=Not(), operand=Name(id='args', ctx=Load())), body=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[Constant(value='update() takes at least 1 argument (0 given)')], keywords=[]))], orelse=[])]), Assign(targets=[Name(id='self', ctx=Store())], value=Subscript(value=Name(id='args', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='other', ctx=Store())], value=Tuple(elts=[], ctx=Load())), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=2)]), body=[Assign(targets=[Name(id='other', ctx=Store())], value=Subscript(value=Name(id='args', ctx=Load()), slice=Constant(value=1), ctx=Load()))], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='other', ctx=Load()), Name(id='dict', ctx=Load())], keywords=[]), body=[For(target=Name(id='key', ctx=Store()), iter=Name(id='other', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='self', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='other', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='other', ctx=Load()), Constant(value='keys')], keywords=[]), body=[For(target=Name(id='key', ctx=Store()), iter=Call(func=Attribute(value=Name(id='other', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='self', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='other', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[For(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Name(id='other', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='self', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Name(id='value', ctx=Load()))], orelse=[])])]), For(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='kwds', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='self', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Name(id='value', ctx=Load()))], orelse=[])], decorator_list=[]), Assign(targets=[Name(id='__update', ctx=Store())], value=Name(id='update', ctx=Load())), Assign(targets=[Name(id='__marker', ctx=Store())], value=Call(func=Name(id='object', ctx=Load()), args=[], keywords=[])), FunctionDef(name='pop', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key'), arg(arg='default')], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='__marker', ctx=Load())]), body=[Expr(value=Constant(value='od.pop(k[,d]) -> v, remove specified key and return the corresponding value.\n            If key is not found, d is returned if given, otherwise KeyError is raised.\n\n            ')), If(test=Compare(left=Name(id='key', ctx=Load()), ops=[In()], comparators=[Name(id='self', ctx=Load())]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Subscript(value=Name(id='self', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load())), Delete(targets=[Subscript(value=Name(id='self', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Del())]), Return(value=Name(id='result', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='default', ctx=Load()), ops=[Is()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='__marker', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='KeyError', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='default', ctx=Load()))], decorator_list=[]), FunctionDef(name='setdefault', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key'), arg(arg='default')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='od.setdefault(k[,d]) -> od.get(k,d), also set od[k]=d if k not in od')), If(test=Compare(left=Name(id='key', ctx=Load()), ops=[In()], comparators=[Name(id='self', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='self', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()))], orelse=[]), Assign(targets=[Subscript(value=Name(id='self', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Name(id='default', ctx=Load())), Return(value=Name(id='default', ctx=Load()))], decorator_list=[]), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='_repr_running')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='od.__repr__() <==> repr(od)')), If(test=UnaryOp(op=Not(), operand=Name(id='_repr_running', ctx=Load())), body=[Assign(targets=[Name(id='_repr_running', ctx=Store())], value=Dict(keys=[], values=[]))], orelse=[]), Assign(targets=[Name(id='call_key', ctx=Store())], value=Tuple(elts=[Call(func=Name(id='id', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), Call(func=Name(id='_get_ident', ctx=Load()), args=[], keywords=[])], ctx=Load())), If(test=Compare(left=Name(id='call_key', ctx=Load()), ops=[In()], comparators=[Name(id='_repr_running', ctx=Load())]), body=[Return(value=Constant(value='...'))], orelse=[]), Assign(targets=[Subscript(value=Name(id='_repr_running', ctx=Load()), slice=Name(id='call_key', ctx=Load()), ctx=Store())], value=Constant(value=1)), Try(body=[If(test=UnaryOp(op=Not(), operand=Name(id='self', ctx=Load())), body=[Return(value=BinOp(left=Constant(value='%s()'), op=Mod(), right=Tuple(elts=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load())], ctx=Load())))], orelse=[]), Return(value=BinOp(left=Constant(value='%s(%r)'), op=Mod(), right=Tuple(elts=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], ctx=Load())))], handlers=[], orelse=[], finalbody=[Delete(targets=[Subscript(value=Name(id='_repr_running', ctx=Load()), slice=Name(id='call_key', ctx=Load()), ctx=Del())])])], decorator_list=[]), FunctionDef(name='__reduce__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return state information for pickling')), Assign(targets=[Name(id='items', ctx=Store())], value=ListComp(elt=List(elts=[Name(id='k', ctx=Load()), Subscript(value=Name(id='self', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Load())], ctx=Load()), generators=[comprehension(target=Name(id='k', ctx=Store()), iter=Name(id='self', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='inst_dict', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='vars', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), attr='copy', ctx=Load()), args=[], keywords=[])), For(target=Name(id='k', ctx=Store()), iter=Call(func=Name(id='vars', ctx=Load()), args=[Call(func=Name(id='OrderedDict', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='inst_dict', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='k', ctx=Load()), Constant(value=None)], keywords=[]))], orelse=[]), If(test=Name(id='inst_dict', ctx=Load()), body=[Return(value=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), Tuple(elts=[Name(id='items', ctx=Load())], ctx=Load()), Name(id='inst_dict', ctx=Load())], ctx=Load()))], orelse=[]), Return(value=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), Tuple(elts=[Name(id='items', ctx=Load())], ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='copy', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='od.copy() -> a shallow copy of od')), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='fromkeys', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='iterable'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='OD.fromkeys(S[, v]) -> New ordered dictionary with keys from S\n            and values equal to v (which defaults to None).\n\n            ')), Assign(targets=[Name(id='d', ctx=Store())], value=Call(func=Name(id='cls', ctx=Load()), args=[], keywords=[])), For(target=Name(id='key', ctx=Store()), iter=Name(id='iterable', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='d', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Name(id='value', ctx=Load()))], orelse=[]), Return(value=Name(id='d', ctx=Load()))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='__eq__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='od.__eq__(y) <==> od==y.  Comparison to another OD is order-sensitive\n            while comparison to a regular mapping is order-insensitive.\n\n            ')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='other', ctx=Load()), Name(id='OrderedDict', ctx=Load())], keywords=[]), body=[Return(value=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='other', ctx=Load())], keywords=[])]), Compare(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='other', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])])]))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='dict', ctx=Load()), attr='__eq__', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='other', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='__ne__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=UnaryOp(op=Not(), operand=Compare(left=Name(id='self', ctx=Load()), ops=[Eq()], comparators=[Name(id='other', ctx=Load())])))], decorator_list=[]), FunctionDef(name='viewkeys', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="od.viewkeys() -> a set-like object providing a view on od's keys")), Return(value=Call(func=Name(id='KeysView', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='viewvalues', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="od.viewvalues() -> an object providing a view on od's values")), Return(value=Call(func=Name(id='ValuesView', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='viewitems', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="od.viewitems() -> a set-like object providing a view on od's items")), Return(value=Call(func=Name(id='ItemsView', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[])])], orelse=[], finalbody=[]), Try(body=[ImportFrom(module='logging.config', names=[alias(name='BaseConfigurator'), alias(name='valid_ident')], level=0)], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Assign(targets=[Name(id='IDENTIFIER', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='^[a-z_][a-z0-9_]*$'), Attribute(value=Name(id='re', ctx=Load()), attr='I', ctx=Load())], keywords=[])), FunctionDef(name='valid_ident', args=arguments(posonlyargs=[], args=[arg(arg='s')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='m', ctx=Store())], value=Call(func=Attribute(value=Name(id='IDENTIFIER', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='m', ctx=Load())), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='Not a valid Python identifier: %r'), op=Mod(), right=Name(id='s', ctx=Load()))], keywords=[]))], orelse=[]), Return(value=Constant(value=True))], decorator_list=[]), ClassDef(name='ConvertingDict', bases=[Name(id='dict', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A converting dictionary wrapper.')), FunctionDef(name='__getitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='dict', ctx=Load()), attr='__getitem__', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='key', ctx=Load())], keywords=[])), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='configurator', ctx=Load()), attr='convert', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='value', ctx=Load()), ops=[IsNot()], comparators=[Name(id='result', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='self', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Name(id='result', ctx=Load())), If(test=Compare(left=Call(func=Name(id='type', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[]), ops=[In()], comparators=[Tuple(elts=[Name(id='ConvertingDict', ctx=Load()), Name(id='ConvertingList', ctx=Load()), Name(id='ConvertingTuple', ctx=Load())], ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='parent', ctx=Store())], value=Name(id='self', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='key', ctx=Store())], value=Name(id='key', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[]), FunctionDef(name='get', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key'), arg(arg='default')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='dict', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='key', ctx=Load()), Name(id='default', ctx=Load())], keywords=[])), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='configurator', ctx=Load()), attr='convert', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='value', ctx=Load()), ops=[IsNot()], comparators=[Name(id='result', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='self', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Name(id='result', ctx=Load())), If(test=Compare(left=Call(func=Name(id='type', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[]), ops=[In()], comparators=[Tuple(elts=[Name(id='ConvertingDict', ctx=Load()), Name(id='ConvertingList', ctx=Load()), Name(id='ConvertingTuple', ctx=Load())], ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='parent', ctx=Store())], value=Name(id='self', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='key', ctx=Store())], value=Name(id='key', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[])], decorator_list=[]), FunctionDef(name='pop', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key'), arg(arg='default')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='dict', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='key', ctx=Load()), Name(id='default', ctx=Load())], keywords=[])), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='configurator', ctx=Load()), attr='convert', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='value', ctx=Load()), ops=[IsNot()], comparators=[Name(id='result', ctx=Load())]), body=[If(test=Compare(left=Call(func=Name(id='type', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[]), ops=[In()], comparators=[Tuple(elts=[Name(id='ConvertingDict', ctx=Load()), Name(id='ConvertingList', ctx=Load()), Name(id='ConvertingTuple', ctx=Load())], ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='parent', ctx=Store())], value=Name(id='self', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='key', ctx=Store())], value=Name(id='key', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[]), ClassDef(name='ConvertingList', bases=[Name(id='list', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A converting list wrapper.')), FunctionDef(name='__getitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='list', ctx=Load()), attr='__getitem__', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='key', ctx=Load())], keywords=[])), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='configurator', ctx=Load()), attr='convert', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='value', ctx=Load()), ops=[IsNot()], comparators=[Name(id='result', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='self', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Name(id='result', ctx=Load())), If(test=Compare(left=Call(func=Name(id='type', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[]), ops=[In()], comparators=[Tuple(elts=[Name(id='ConvertingDict', ctx=Load()), Name(id='ConvertingList', ctx=Load()), Name(id='ConvertingTuple', ctx=Load())], ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='parent', ctx=Store())], value=Name(id='self', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='key', ctx=Store())], value=Name(id='key', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[]), FunctionDef(name='pop', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='idx')], kwonlyargs=[], kw_defaults=[], defaults=[UnaryOp(op=USub(), operand=Constant(value=1))]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='list', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='idx', ctx=Load())], keywords=[])), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='configurator', ctx=Load()), attr='convert', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='value', ctx=Load()), ops=[IsNot()], comparators=[Name(id='result', ctx=Load())]), body=[If(test=Compare(left=Call(func=Name(id='type', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[]), ops=[In()], comparators=[Tuple(elts=[Name(id='ConvertingDict', ctx=Load()), Name(id='ConvertingList', ctx=Load()), Name(id='ConvertingTuple', ctx=Load())], ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='parent', ctx=Store())], value=Name(id='self', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='ConvertingTuple', bases=[Name(id='tuple', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A converting tuple wrapper.')), FunctionDef(name='__getitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='tuple', ctx=Load()), attr='__getitem__', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='key', ctx=Load())], keywords=[])), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='configurator', ctx=Load()), attr='convert', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='value', ctx=Load()), ops=[IsNot()], comparators=[Name(id='result', ctx=Load())]), body=[If(test=Compare(left=Call(func=Name(id='type', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[]), ops=[In()], comparators=[Tuple(elts=[Name(id='ConvertingDict', ctx=Load()), Name(id='ConvertingList', ctx=Load()), Name(id='ConvertingTuple', ctx=Load())], ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='parent', ctx=Store())], value=Name(id='self', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='key', ctx=Store())], value=Name(id='key', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='BaseConfigurator', bases=[Name(id='object', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n        The configurator base class which defines some useful defaults.\n        ')), Assign(targets=[Name(id='CONVERT_PATTERN', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='^(?P<prefix>[a-z]+)://(?P<suffix>.*)$')], keywords=[])), Assign(targets=[Name(id='WORD_PATTERN', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='^\\s*(\\w+)\\s*')], keywords=[])), Assign(targets=[Name(id='DOT_PATTERN', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='^\\.\\s*(\\w+)\\s*')], keywords=[])), Assign(targets=[Name(id='INDEX_PATTERN', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='^\\[\\s*(\\w+)\\s*\\]\\s*')], keywords=[])), Assign(targets=[Name(id='DIGIT_PATTERN', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='^\\d+$')], keywords=[])), Assign(targets=[Name(id='value_converters', ctx=Store())], value=Dict(keys=[Constant(value='ext'), Constant(value='cfg')], values=[Constant(value='ext_convert'), Constant(value='cfg_convert')])), Assign(targets=[Name(id='importer', ctx=Store())], value=Call(func=Name(id='staticmethod', ctx=Load()), args=[Name(id='__import__', ctx=Load())], keywords=[])), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='config')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Store())], value=Call(func=Name(id='ConvertingDict', ctx=Load()), args=[Name(id='config', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), attr='configurator', ctx=Store())], value=Name(id='self', ctx=Load()))], decorator_list=[]), FunctionDef(name='resolve', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='s')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n            Resolve strings to objects using standard import and attribute\n            syntax.\n            ')), Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[])), Assign(targets=[Name(id='used', ctx=Store())], value=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value=0)], keywords=[])), Try(body=[Assign(targets=[Name(id='found', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='importer', ctx=Load()), args=[Name(id='used', ctx=Load())], keywords=[])), For(target=Name(id='frag', ctx=Store()), iter=Name(id='name', ctx=Load()), body=[AugAssign(target=Name(id='used', ctx=Store()), op=Add(), value=BinOp(left=Constant(value='.'), op=Add(), right=Name(id='frag', ctx=Load()))), Try(body=[Assign(targets=[Name(id='found', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='found', ctx=Load()), Name(id='frag', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='importer', ctx=Load()), args=[Name(id='used', ctx=Load())], keywords=[])), Assign(targets=[Name(id='found', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='found', ctx=Load()), Name(id='frag', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], orelse=[]), Return(value=Name(id='found', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='e', ctx=Store()), Name(id='tb', ctx=Store())], ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='sys', ctx=Load()), attr='exc_info', ctx=Load()), args=[], keywords=[]), slice=Slice(lower=Constant(value=1)), ctx=Load())), Assign(targets=[Name(id='v', ctx=Store())], value=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='Cannot resolve %r: %s'), op=Mod(), right=Tuple(elts=[Name(id='s', ctx=Load()), Name(id='e', ctx=Load())], ctx=Load()))], keywords=[])), Assign(targets=[Tuple(elts=[Attribute(value=Name(id='v', ctx=Load()), attr='__cause__', ctx=Store()), Attribute(value=Name(id='v', ctx=Load()), attr='__traceback__', ctx=Store())], ctx=Store())], value=Tuple(elts=[Name(id='e', ctx=Load()), Name(id='tb', ctx=Load())], ctx=Load())), Raise(exc=Name(id='v', ctx=Load()))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='ext_convert', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Default converter for the ext:// protocol.')), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='resolve', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='cfg_convert', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Default converter for the cfg:// protocol.')), Assign(targets=[Name(id='rest', ctx=Store())], value=Name(id='value', ctx=Load())), Assign(targets=[Name(id='m', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='WORD_PATTERN', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='rest', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='m', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='Unable to convert %r'), op=Mod(), right=Name(id='value', ctx=Load()))], keywords=[]))], orelse=[Assign(targets=[Name(id='rest', ctx=Store())], value=Subscript(value=Name(id='rest', ctx=Load()), slice=Slice(lower=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='end', ctx=Load()), args=[], keywords=[])), ctx=Load())), Assign(targets=[Name(id='d', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), slice=Subscript(value=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='groups', ctx=Load()), args=[], keywords=[]), slice=Constant(value=0), ctx=Load()), ctx=Load())), While(test=Name(id='rest', ctx=Load()), body=[Assign(targets=[Name(id='m', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='DOT_PATTERN', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='rest', ctx=Load())], keywords=[])), If(test=Name(id='m', ctx=Load()), body=[Assign(targets=[Name(id='d', ctx=Store())], value=Subscript(value=Name(id='d', ctx=Load()), slice=Subscript(value=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='groups', ctx=Load()), args=[], keywords=[]), slice=Constant(value=0), ctx=Load()), ctx=Load()))], orelse=[Assign(targets=[Name(id='m', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='INDEX_PATTERN', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='rest', ctx=Load())], keywords=[])), If(test=Name(id='m', ctx=Load()), body=[Assign(targets=[Name(id='idx', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='groups', ctx=Load()), args=[], keywords=[]), slice=Constant(value=0), ctx=Load())), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='DIGIT_PATTERN', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='idx', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='d', ctx=Store())], value=Subscript(value=Name(id='d', ctx=Load()), slice=Name(id='idx', ctx=Load()), ctx=Load()))], orelse=[Try(body=[Assign(targets=[Name(id='n', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Name(id='idx', ctx=Load())], keywords=[])), Assign(targets=[Name(id='d', ctx=Store())], value=Subscript(value=Name(id='d', ctx=Load()), slice=Name(id='n', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='TypeError', ctx=Load()), body=[Assign(targets=[Name(id='d', ctx=Store())], value=Subscript(value=Name(id='d', ctx=Load()), slice=Name(id='idx', ctx=Load()), ctx=Load()))])], orelse=[], finalbody=[])])], orelse=[])]), If(test=Name(id='m', ctx=Load()), body=[Assign(targets=[Name(id='rest', ctx=Store())], value=Subscript(value=Name(id='rest', ctx=Load()), slice=Slice(lower=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='end', ctx=Load()), args=[], keywords=[])), ctx=Load()))], orelse=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='Unable to convert %r at %r'), op=Mod(), right=Tuple(elts=[Name(id='value', ctx=Load()), Name(id='rest', ctx=Load())], ctx=Load()))], keywords=[]))])], orelse=[])]), Return(value=Name(id='d', ctx=Load()))], decorator_list=[]), FunctionDef(name='convert', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n            Convert values to an appropriate type. dicts, lists and tuples are\n            replaced by their converting alternatives. Strings are checked to\n            see if they have a conversion format and are converted if they do.\n            ')), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='ConvertingDict', ctx=Load())], keywords=[])), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='dict', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Name(id='ConvertingDict', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='value', ctx=Load()), attr='configurator', ctx=Store())], value=Name(id='self', ctx=Load()))], orelse=[If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='ConvertingList', ctx=Load())], keywords=[])), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='list', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Name(id='ConvertingList', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='value', ctx=Load()), attr='configurator', ctx=Store())], value=Name(id='self', ctx=Load()))], orelse=[If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='ConvertingTuple', ctx=Load())], keywords=[])), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='tuple', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Name(id='ConvertingTuple', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='value', ctx=Load()), attr='configurator', ctx=Store())], value=Name(id='self', ctx=Load()))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='string_types', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='m', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='CONVERT_PATTERN', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])), If(test=Name(id='m', ctx=Load()), body=[Assign(targets=[Name(id='d', ctx=Store())], value=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='groupdict', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='prefix', ctx=Store())], value=Subscript(value=Name(id='d', ctx=Load()), slice=Constant(value='prefix'), ctx=Load())), Assign(targets=[Name(id='converter', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='value_converters', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='prefix', ctx=Load()), Constant(value=None)], keywords=[])), If(test=Name(id='converter', ctx=Load()), body=[Assign(targets=[Name(id='suffix', ctx=Store())], value=Subscript(value=Name(id='d', ctx=Load()), slice=Constant(value='suffix'), ctx=Load())), Assign(targets=[Name(id='converter', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='converter', ctx=Load())], keywords=[])), Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Name(id='converter', ctx=Load()), args=[Name(id='suffix', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[])])])]), Return(value=Name(id='value', ctx=Load()))], decorator_list=[]), FunctionDef(name='configure_custom', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='config')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Configure an object with a user-supplied factory.')), Assign(targets=[Name(id='c', ctx=Store())], value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='()')], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='callable', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='c', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='resolve', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='props', ctx=Store())], value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='.'), Constant(value=None)], keywords=[])), Assign(targets=[Name(id='kwargs', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[ListComp(elt=Tuple(elts=[Name(id='k', ctx=Load()), Subscript(value=Name(id='config', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Load())], ctx=Load()), generators=[comprehension(target=Name(id='k', ctx=Store()), iter=Name(id='config', ctx=Load()), ifs=[Call(func=Name(id='valid_ident', ctx=Load()), args=[Name(id='k', ctx=Load())], keywords=[])], is_async=0)])], keywords=[])), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='c', ctx=Load()), args=[], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))])), If(test=Name(id='props', ctx=Load()), body=[For(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='props', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='result', ctx=Load()), Name(id='name', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[]), FunctionDef(name='as_tuple', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Utility function which converts lists to tuples.')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='list', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='value', ctx=Load()))], decorator_list=[])], decorator_list=[])])], orelse=[], finalbody=[])], type_ignores=[])