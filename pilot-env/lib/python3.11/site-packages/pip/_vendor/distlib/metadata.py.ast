Module(body=[Expr(value=Constant(value='Implementation of the Metadata for Python packages PEPs.\n\nSupports all metadata formats (1.0, 1.1, 1.2, 1.3/2.1 and 2.2).\n')), ImportFrom(module='__future__', names=[alias(name='unicode_literals')], level=0), Import(names=[alias(name='codecs')]), ImportFrom(module='email', names=[alias(name='message_from_file')], level=0), Import(names=[alias(name='json')]), Import(names=[alias(name='logging')]), Import(names=[alias(name='re')]), ImportFrom(names=[alias(name='DistlibException'), alias(name='__version__')], level=1), ImportFrom(module='compat', names=[alias(name='StringIO'), alias(name='string_types'), alias(name='text_type')], level=1), ImportFrom(module='markers', names=[alias(name='interpret')], level=1), ImportFrom(module='util', names=[alias(name='extract_by_key'), alias(name='get_extras')], level=1), ImportFrom(module='version', names=[alias(name='get_scheme'), alias(name='PEP440_VERSION_RE')], level=1), Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), ClassDef(name='MetadataMissingError', bases=[Name(id='DistlibException', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A required metadata is missing'))], decorator_list=[]), ClassDef(name='MetadataConflictError', bases=[Name(id='DistlibException', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Attempt to read or write metadata fields that are conflictual.'))], decorator_list=[]), ClassDef(name='MetadataUnrecognizedVersionError', bases=[Name(id='DistlibException', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Unknown metadata version number.'))], decorator_list=[]), ClassDef(name='MetadataInvalidError', bases=[Name(id='DistlibException', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A metadata value is invalid'))], decorator_list=[]), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='Metadata'), Constant(value='PKG_INFO_ENCODING'), Constant(value='PKG_INFO_PREFERRED_VERSION')], ctx=Load())), Assign(targets=[Name(id='PKG_INFO_ENCODING', ctx=Store())], value=Constant(value='utf-8')), Assign(targets=[Name(id='PKG_INFO_PREFERRED_VERSION', ctx=Store())], value=Constant(value='1.1')), Assign(targets=[Name(id='_LINE_PREFIX_1_2', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='\n       \\|')], keywords=[])), Assign(targets=[Name(id='_LINE_PREFIX_PRE_1_2', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='\n        ')], keywords=[])), Assign(targets=[Name(id='_241_FIELDS', ctx=Store())], value=Tuple(elts=[Constant(value='Metadata-Version'), Constant(value='Name'), Constant(value='Version'), Constant(value='Platform'), Constant(value='Summary'), Constant(value='Description'), Constant(value='Keywords'), Constant(value='Home-page'), Constant(value='Author'), Constant(value='Author-email'), Constant(value='License')], ctx=Load())), Assign(targets=[Name(id='_314_FIELDS', ctx=Store())], value=Tuple(elts=[Constant(value='Metadata-Version'), Constant(value='Name'), Constant(value='Version'), Constant(value='Platform'), Constant(value='Supported-Platform'), Constant(value='Summary'), Constant(value='Description'), Constant(value='Keywords'), Constant(value='Home-page'), Constant(value='Author'), Constant(value='Author-email'), Constant(value='License'), Constant(value='Classifier'), Constant(value='Download-URL'), Constant(value='Obsoletes'), Constant(value='Provides'), Constant(value='Requires')], ctx=Load())), Assign(targets=[Name(id='_314_MARKERS', ctx=Store())], value=Tuple(elts=[Constant(value='Obsoletes'), Constant(value='Provides'), Constant(value='Requires'), Constant(value='Classifier'), Constant(value='Download-URL')], ctx=Load())), Assign(targets=[Name(id='_345_FIELDS', ctx=Store())], value=Tuple(elts=[Constant(value='Metadata-Version'), Constant(value='Name'), Constant(value='Version'), Constant(value='Platform'), Constant(value='Supported-Platform'), Constant(value='Summary'), Constant(value='Description'), Constant(value='Keywords'), Constant(value='Home-page'), Constant(value='Author'), Constant(value='Author-email'), Constant(value='Maintainer'), Constant(value='Maintainer-email'), Constant(value='License'), Constant(value='Classifier'), Constant(value='Download-URL'), Constant(value='Obsoletes-Dist'), Constant(value='Project-URL'), Constant(value='Provides-Dist'), Constant(value='Requires-Dist'), Constant(value='Requires-Python'), Constant(value='Requires-External')], ctx=Load())), Assign(targets=[Name(id='_345_MARKERS', ctx=Store())], value=Tuple(elts=[Constant(value='Provides-Dist'), Constant(value='Requires-Dist'), Constant(value='Requires-Python'), Constant(value='Obsoletes-Dist'), Constant(value='Requires-External'), Constant(value='Maintainer'), Constant(value='Maintainer-email'), Constant(value='Project-URL')], ctx=Load())), Assign(targets=[Name(id='_426_FIELDS', ctx=Store())], value=Tuple(elts=[Constant(value='Metadata-Version'), Constant(value='Name'), Constant(value='Version'), Constant(value='Platform'), Constant(value='Supported-Platform'), Constant(value='Summary'), Constant(value='Description'), Constant(value='Keywords'), Constant(value='Home-page'), Constant(value='Author'), Constant(value='Author-email'), Constant(value='Maintainer'), Constant(value='Maintainer-email'), Constant(value='License'), Constant(value='Classifier'), Constant(value='Download-URL'), Constant(value='Obsoletes-Dist'), Constant(value='Project-URL'), Constant(value='Provides-Dist'), Constant(value='Requires-Dist'), Constant(value='Requires-Python'), Constant(value='Requires-External'), Constant(value='Private-Version'), Constant(value='Obsoleted-By'), Constant(value='Setup-Requires-Dist'), Constant(value='Extension'), Constant(value='Provides-Extra')], ctx=Load())), Assign(targets=[Name(id='_426_MARKERS', ctx=Store())], value=Tuple(elts=[Constant(value='Private-Version'), Constant(value='Provides-Extra'), Constant(value='Obsoleted-By'), Constant(value='Setup-Requires-Dist'), Constant(value='Extension')], ctx=Load())), Assign(targets=[Name(id='_566_FIELDS', ctx=Store())], value=BinOp(left=Name(id='_426_FIELDS', ctx=Load()), op=Add(), right=Tuple(elts=[Constant(value='Description-Content-Type'), Constant(value='Requires'), Constant(value='Provides'), Constant(value='Obsoletes')], ctx=Load()))), Assign(targets=[Name(id='_566_MARKERS', ctx=Store())], value=Tuple(elts=[Constant(value='Description-Content-Type')], ctx=Load())), Assign(targets=[Name(id='_643_MARKERS', ctx=Store())], value=Tuple(elts=[Constant(value='Dynamic'), Constant(value='License-File')], ctx=Load())), Assign(targets=[Name(id='_643_FIELDS', ctx=Store())], value=BinOp(left=Name(id='_566_FIELDS', ctx=Load()), op=Add(), right=Name(id='_643_MARKERS', ctx=Load()))), Assign(targets=[Name(id='_ALL_FIELDS', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='_ALL_FIELDS', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='_241_FIELDS', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='_ALL_FIELDS', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='_314_FIELDS', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='_ALL_FIELDS', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='_345_FIELDS', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='_ALL_FIELDS', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='_426_FIELDS', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='_ALL_FIELDS', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='_566_FIELDS', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='_ALL_FIELDS', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='_643_FIELDS', ctx=Load())], keywords=[])), Assign(targets=[Name(id='EXTRA_RE', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='extra\\s*==\\s*("([^"]+)"|\'([^\']+)\')')], keywords=[])), FunctionDef(name='_version2fieldlist', args=arguments(posonlyargs=[], args=[arg(arg='version')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='version', ctx=Load()), ops=[Eq()], comparators=[Constant(value='1.0')]), body=[Return(value=Name(id='_241_FIELDS', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='version', ctx=Load()), ops=[Eq()], comparators=[Constant(value='1.1')]), body=[Return(value=Name(id='_314_FIELDS', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='version', ctx=Load()), ops=[Eq()], comparators=[Constant(value='1.2')]), body=[Return(value=Name(id='_345_FIELDS', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='version', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='1.3'), Constant(value='2.1')], ctx=Load())]), body=[Return(value=BinOp(left=Name(id='_345_FIELDS', ctx=Load()), op=Add(), right=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Name(id='f', ctx=Load()), generators=[comprehension(target=Name(id='f', ctx=Store()), iter=Name(id='_566_FIELDS', ctx=Load()), ifs=[Compare(left=Name(id='f', ctx=Load()), ops=[NotIn()], comparators=[Name(id='_345_FIELDS', ctx=Load())])], is_async=0)])], keywords=[])))], orelse=[If(test=Compare(left=Name(id='version', ctx=Load()), ops=[Eq()], comparators=[Constant(value='2.0')]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Metadata 2.0 is withdrawn and not supported')], keywords=[]))], orelse=[If(test=Compare(left=Name(id='version', ctx=Load()), ops=[Eq()], comparators=[Constant(value='2.2')]), body=[Return(value=Name(id='_643_FIELDS', ctx=Load()))], orelse=[])])])])])]), Raise(exc=Call(func=Name(id='MetadataUnrecognizedVersionError', ctx=Load()), args=[Name(id='version', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_best_version', args=arguments(posonlyargs=[], args=[arg(arg='fields')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Detect the best version depending on the fields used.')), FunctionDef(name='_has_marker', args=arguments(posonlyargs=[], args=[arg(arg='keys'), arg(arg='markers')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='marker', ctx=Store()), iter=Name(id='markers', ctx=Load()), body=[If(test=Compare(left=Name(id='marker', ctx=Load()), ops=[In()], comparators=[Name(id='keys', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[])], orelse=[]), Return(value=Constant(value=False))], decorator_list=[]), Assign(targets=[Name(id='keys', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='fields', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Name(id='value', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[List(elts=[], ctx=Load()), Constant(value='UNKNOWN'), Constant(value=None)], ctx=Load())]), body=[Continue()], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='keys', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='possible_versions', ctx=Store())], value=List(elts=[Constant(value='1.0'), Constant(value='1.1'), Constant(value='1.2'), Constant(value='1.3'), Constant(value='2.1'), Constant(value='2.2')], ctx=Load())), For(target=Name(id='key', ctx=Store()), iter=Name(id='keys', ctx=Load()), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='key', ctx=Load()), ops=[NotIn()], comparators=[Name(id='_241_FIELDS', ctx=Load())]), Compare(left=Constant(value='1.0'), ops=[In()], comparators=[Name(id='possible_versions', ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Name(id='possible_versions', ctx=Load()), attr='remove', ctx=Load()), args=[Constant(value='1.0')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Removed 1.0 due to %s'), Name(id='key', ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='key', ctx=Load()), ops=[NotIn()], comparators=[Name(id='_314_FIELDS', ctx=Load())]), Compare(left=Constant(value='1.1'), ops=[In()], comparators=[Name(id='possible_versions', ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Name(id='possible_versions', ctx=Load()), attr='remove', ctx=Load()), args=[Constant(value='1.1')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Removed 1.1 due to %s'), Name(id='key', ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='key', ctx=Load()), ops=[NotIn()], comparators=[Name(id='_345_FIELDS', ctx=Load())]), Compare(left=Constant(value='1.2'), ops=[In()], comparators=[Name(id='possible_versions', ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Name(id='possible_versions', ctx=Load()), attr='remove', ctx=Load()), args=[Constant(value='1.2')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Removed 1.2 due to %s'), Name(id='key', ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='key', ctx=Load()), ops=[NotIn()], comparators=[Name(id='_566_FIELDS', ctx=Load())]), Compare(left=Constant(value='1.3'), ops=[In()], comparators=[Name(id='possible_versions', ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Name(id='possible_versions', ctx=Load()), attr='remove', ctx=Load()), args=[Constant(value='1.3')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Removed 1.3 due to %s'), Name(id='key', ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='key', ctx=Load()), ops=[NotIn()], comparators=[Name(id='_566_FIELDS', ctx=Load())]), Compare(left=Constant(value='2.1'), ops=[In()], comparators=[Name(id='possible_versions', ctx=Load())])]), body=[If(test=Compare(left=Name(id='key', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='Description')]), body=[Expr(value=Call(func=Attribute(value=Name(id='possible_versions', ctx=Load()), attr='remove', ctx=Load()), args=[Constant(value='2.1')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Removed 2.1 due to %s'), Name(id='key', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='key', ctx=Load()), ops=[NotIn()], comparators=[Name(id='_643_FIELDS', ctx=Load())]), Compare(left=Constant(value='2.2'), ops=[In()], comparators=[Name(id='possible_versions', ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Name(id='possible_versions', ctx=Load()), attr='remove', ctx=Load()), args=[Constant(value='2.2')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Removed 2.2 due to %s'), Name(id='key', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='possible_versions', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Return(value=Subscript(value=Name(id='possible_versions', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='possible_versions', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Out of options - unknown metadata set: %s'), Name(id='fields', ctx=Load())], keywords=[])), Raise(exc=Call(func=Name(id='MetadataConflictError', ctx=Load()), args=[Constant(value='Unknown metadata set')], keywords=[]))], orelse=[])]), Assign(targets=[Name(id='is_1_1', ctx=Store())], value=BoolOp(op=And(), values=[Compare(left=Constant(value='1.1'), ops=[In()], comparators=[Name(id='possible_versions', ctx=Load())]), Call(func=Name(id='_has_marker', ctx=Load()), args=[Name(id='keys', ctx=Load()), Name(id='_314_MARKERS', ctx=Load())], keywords=[])])), Assign(targets=[Name(id='is_1_2', ctx=Store())], value=BoolOp(op=And(), values=[Compare(left=Constant(value='1.2'), ops=[In()], comparators=[Name(id='possible_versions', ctx=Load())]), Call(func=Name(id='_has_marker', ctx=Load()), args=[Name(id='keys', ctx=Load()), Name(id='_345_MARKERS', ctx=Load())], keywords=[])])), Assign(targets=[Name(id='is_2_1', ctx=Store())], value=BoolOp(op=And(), values=[Compare(left=Constant(value='2.1'), ops=[In()], comparators=[Name(id='possible_versions', ctx=Load())]), Call(func=Name(id='_has_marker', ctx=Load()), args=[Name(id='keys', ctx=Load()), Name(id='_566_MARKERS', ctx=Load())], keywords=[])])), Assign(targets=[Name(id='is_2_2', ctx=Store())], value=BoolOp(op=And(), values=[Compare(left=Constant(value='2.2'), ops=[In()], comparators=[Name(id='possible_versions', ctx=Load())]), Call(func=Name(id='_has_marker', ctx=Load()), args=[Name(id='keys', ctx=Load()), Name(id='_643_MARKERS', ctx=Load())], keywords=[])])), If(test=Compare(left=BinOp(left=BinOp(left=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Name(id='is_1_1', ctx=Load())], keywords=[]), op=Add(), right=Call(func=Name(id='int', ctx=Load()), args=[Name(id='is_1_2', ctx=Load())], keywords=[])), op=Add(), right=Call(func=Name(id='int', ctx=Load()), args=[Name(id='is_2_1', ctx=Load())], keywords=[])), op=Add(), right=Call(func=Name(id='int', ctx=Load()), args=[Name(id='is_2_2', ctx=Load())], keywords=[])), ops=[Gt()], comparators=[Constant(value=1)]), body=[Raise(exc=Call(func=Name(id='MetadataConflictError', ctx=Load()), args=[Constant(value='You used incompatible 1.1/1.2/2.1/2.2 fields')], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Name(id='is_1_1', ctx=Load())), UnaryOp(op=Not(), operand=Name(id='is_1_2', ctx=Load())), UnaryOp(op=Not(), operand=Name(id='is_2_1', ctx=Load())), UnaryOp(op=Not(), operand=Name(id='is_2_2', ctx=Load()))]), body=[If(test=Compare(left=Name(id='PKG_INFO_PREFERRED_VERSION', ctx=Load()), ops=[In()], comparators=[Name(id='possible_versions', ctx=Load())]), body=[Return(value=Name(id='PKG_INFO_PREFERRED_VERSION', ctx=Load()))], orelse=[])], orelse=[]), If(test=Name(id='is_1_1', ctx=Load()), body=[Return(value=Constant(value='1.1'))], orelse=[]), If(test=Name(id='is_1_2', ctx=Load()), body=[Return(value=Constant(value='1.2'))], orelse=[]), If(test=Name(id='is_2_1', ctx=Load()), body=[Return(value=Constant(value='2.1'))], orelse=[]), Return(value=Constant(value='2.2'))], decorator_list=[]), Assign(targets=[Name(id='_ATTR2FIELD', ctx=Store())], value=DictComp(key=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value='-'), Constant(value='_')], keywords=[]), value=Name(id='name', ctx=Load()), generators=[comprehension(target=Name(id='name', ctx=Store()), iter=Name(id='_ALL_FIELDS', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='_FIELD2ATTR', ctx=Store())], value=DictComp(key=Name(id='field', ctx=Load()), value=Name(id='attr', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='attr', ctx=Store()), Name(id='field', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='_ATTR2FIELD', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='_PREDICATE_FIELDS', ctx=Store())], value=Tuple(elts=[Constant(value='Requires-Dist'), Constant(value='Obsoletes-Dist'), Constant(value='Provides-Dist')], ctx=Load())), Assign(targets=[Name(id='_VERSIONS_FIELDS', ctx=Store())], value=Tuple(elts=[Constant(value='Requires-Python')], ctx=Load())), Assign(targets=[Name(id='_VERSION_FIELDS', ctx=Store())], value=Tuple(elts=[Constant(value='Version')], ctx=Load())), Assign(targets=[Name(id='_LISTFIELDS', ctx=Store())], value=Tuple(elts=[Constant(value='Platform'), Constant(value='Classifier'), Constant(value='Obsoletes'), Constant(value='Requires'), Constant(value='Provides'), Constant(value='Obsoletes-Dist'), Constant(value='Provides-Dist'), Constant(value='Requires-Dist'), Constant(value='Requires-External'), Constant(value='Project-URL'), Constant(value='Supported-Platform'), Constant(value='Setup-Requires-Dist'), Constant(value='Provides-Extra'), Constant(value='Extension'), Constant(value='License-File')], ctx=Load())), Assign(targets=[Name(id='_LISTTUPLEFIELDS', ctx=Store())], value=Tuple(elts=[Constant(value='Project-URL')], ctx=Load())), Assign(targets=[Name(id='_ELEMENTSFIELD', ctx=Store())], value=Tuple(elts=[Constant(value='Keywords')], ctx=Load())), Assign(targets=[Name(id='_UNICODEFIELDS', ctx=Store())], value=Tuple(elts=[Constant(value='Author'), Constant(value='Maintainer'), Constant(value='Summary'), Constant(value='Description')], ctx=Load())), Assign(targets=[Name(id='_MISSING', ctx=Store())], value=Call(func=Name(id='object', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='_FILESAFE', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='[^A-Za-z0-9.]+')], keywords=[])), FunctionDef(name='_get_name_and_version', args=arguments(posonlyargs=[], args=[arg(arg='name'), arg(arg='version'), arg(arg='for_filename')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value='Return the distribution name with version.\n\n    If for_filename is true, return a filename-escaped form.')), If(test=Name(id='for_filename', ctx=Load()), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Attribute(value=Name(id='_FILESAFE', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value='-'), Name(id='name', ctx=Load())], keywords=[])), Assign(targets=[Name(id='version', ctx=Store())], value=Call(func=Attribute(value=Name(id='_FILESAFE', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value='-'), Call(func=Attribute(value=Name(id='version', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value=' '), Constant(value='.')], keywords=[])], keywords=[]))], orelse=[]), Return(value=BinOp(left=Constant(value='%s-%s'), op=Mod(), right=Tuple(elts=[Name(id='name', ctx=Load()), Name(id='version', ctx=Load())], ctx=Load())))], decorator_list=[]), ClassDef(name='LegacyMetadata', bases=[Name(id='object', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='The legacy metadata of a release.\n\n    Supports versions 1.0, 1.1, 1.2, 2.0 and 1.3/2.1 (auto-detected). You can\n    instantiate the class with one of these arguments (or none):\n    - *path*, the path to a metadata file\n    - *fileobj* give a file-like object with metadata as content\n    - *mapping* is a dict-like object\n    - *scheme* is a version scheme name\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='path'), arg(arg='fileobj'), arg(arg='mapping'), arg(arg='scheme')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value='default')]), body=[If(test=Compare(left=Call(func=Attribute(value=List(elts=[Name(id='path', ctx=Load()), Name(id='fileobj', ctx=Load()), Name(id='mapping', ctx=Load())], ctx=Load()), attr='count', ctx=Load()), args=[Constant(value=None)], keywords=[]), ops=[Lt()], comparators=[Constant(value=2)]), body=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[Constant(value='path, fileobj and mapping are exclusive')], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_fields', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='requires_files', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_dependencies', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='scheme', ctx=Store())], value=Name(id='scheme', ctx=Load())), If(test=Compare(left=Name(id='path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='read', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='fileobj', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='read_file', ctx=Load()), args=[Name(id='fileobj', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='mapping', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='mapping', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_metadata_version', ctx=Load()), args=[], keywords=[]))], orelse=[])])])], decorator_list=[]), FunctionDef(name='set_metadata_version', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_fields', ctx=Load()), slice=Constant(value='Metadata-Version'), ctx=Store())], value=Call(func=Name(id='_best_version', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_fields', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_write_field', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='fileobj'), arg(arg='name'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='fileobj', ctx=Load()), attr='write', ctx=Load()), args=[BinOp(left=Constant(value='%s: %s\n'), op=Mod(), right=Tuple(elts=[Name(id='name', ctx=Load()), Name(id='value', ctx=Load())], ctx=Load()))], keywords=[]))], decorator_list=[]), FunctionDef(name='__getitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='__setitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='__delitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='field_name', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_convert_name', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), Try(body=[Delete(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_fields', ctx=Load()), slice=Name(id='field_name', ctx=Load()), ctx=Del())])], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='KeyError', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='__contains__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=Or(), values=[Compare(left=Name(id='name', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_fields', ctx=Load())]), Compare(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_convert_name', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_fields', ctx=Load())])]))], decorator_list=[]), FunctionDef(name='_convert_name', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='name', ctx=Load()), ops=[In()], comparators=[Name(id='_ALL_FIELDS', ctx=Load())]), body=[Return(value=Name(id='name', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='-'), Constant(value='_')], keywords=[]), attr='lower', ctx=Load()), args=[], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='_ATTR2FIELD', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='name', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_default_value', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='name', ctx=Load()), ops=[In()], comparators=[Name(id='_LISTFIELDS', ctx=Load())]), Compare(left=Name(id='name', ctx=Load()), ops=[In()], comparators=[Name(id='_ELEMENTSFIELD', ctx=Load())])]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Return(value=Constant(value='UNKNOWN'))], decorator_list=[]), FunctionDef(name='_remove_line_prefix', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='metadata_version', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='1.0'), Constant(value='1.1')], ctx=Load())]), body=[Return(value=Call(func=Attribute(value=Name(id='_LINE_PREFIX_PRE_1_2', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value='\n'), Name(id='value', ctx=Load())], keywords=[]))], orelse=[Return(value=Call(func=Attribute(value=Name(id='_LINE_PREFIX_1_2', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value='\n'), Name(id='value', ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='__getattr__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='name', ctx=Load()), ops=[In()], comparators=[Name(id='_ATTR2FIELD', ctx=Load())]), body=[Return(value=Subscript(value=Name(id='self', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load()))], orelse=[]), Raise(exc=Call(func=Name(id='AttributeError', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='get_fullname', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='filesafe')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value='Return the distribution name with version.\n\n        If filesafe is true, return a filename-escaped form.')), Return(value=Call(func=Name(id='_get_name_and_version', ctx=Load()), args=[Subscript(value=Name(id='self', ctx=Load()), slice=Constant(value='Name'), ctx=Load()), Subscript(value=Name(id='self', ctx=Load()), slice=Constant(value='Version'), ctx=Load()), Name(id='filesafe', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='is_field', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='return True if name is a valid metadata key')), Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_convert_name', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), Return(value=Compare(left=Name(id='name', ctx=Load()), ops=[In()], comparators=[Name(id='_ALL_FIELDS', ctx=Load())]))], decorator_list=[]), FunctionDef(name='is_multi_field', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_convert_name', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), Return(value=Compare(left=Name(id='name', ctx=Load()), ops=[In()], comparators=[Name(id='_LISTFIELDS', ctx=Load())]))], decorator_list=[]), FunctionDef(name='read', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='filepath')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Read the metadata values from a file path.')), Assign(targets=[Name(id='fp', ctx=Store())], value=Call(func=Attribute(value=Name(id='codecs', ctx=Load()), attr='open', ctx=Load()), args=[Name(id='filepath', ctx=Load()), Constant(value='r')], keywords=[keyword(arg='encoding', value=Constant(value='utf-8'))])), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='read_file', ctx=Load()), args=[Name(id='fp', ctx=Load())], keywords=[]))], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='fp', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))])], decorator_list=[]), FunctionDef(name='read_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='fileob')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Read the metadata values from a file object.')), Assign(targets=[Name(id='msg', ctx=Store())], value=Call(func=Name(id='message_from_file', ctx=Load()), args=[Name(id='fileob', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_fields', ctx=Load()), slice=Constant(value='Metadata-Version'), ctx=Store())], value=Subscript(value=Name(id='msg', ctx=Load()), slice=Constant(value='metadata-version'), ctx=Load())), For(target=Name(id='field', ctx=Store()), iter=Name(id='_ALL_FIELDS', ctx=Load()), body=[If(test=Compare(left=Name(id='field', ctx=Load()), ops=[NotIn()], comparators=[Name(id='msg', ctx=Load())]), body=[Continue()], orelse=[]), If(test=Compare(left=Name(id='field', ctx=Load()), ops=[In()], comparators=[Name(id='_LISTFIELDS', ctx=Load())]), body=[Assign(targets=[Name(id='values', ctx=Store())], value=Call(func=Attribute(value=Name(id='msg', ctx=Load()), attr='get_all', ctx=Load()), args=[Name(id='field', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='field', ctx=Load()), ops=[In()], comparators=[Name(id='_LISTTUPLEFIELDS', ctx=Load())]), Compare(left=Name(id='values', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Name(id='values', ctx=Store())], value=ListComp(elt=Call(func=Name(id='tuple', ctx=Load()), args=[Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=',')], keywords=[])], keywords=[]), generators=[comprehension(target=Name(id='value', ctx=Store()), iter=Name(id='values', ctx=Load()), ifs=[], is_async=0)]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set', ctx=Load()), args=[Name(id='field', ctx=Load()), Name(id='values', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='value', ctx=Store())], value=Subscript(value=Name(id='msg', ctx=Load()), slice=Name(id='field', ctx=Load()), ctx=Load())), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='value', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='value', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='UNKNOWN')])]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set', ctx=Load()), args=[Name(id='field', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]))], orelse=[])])], orelse=[]), Assign(targets=[Name(id='body', ctx=Store())], value=Call(func=Attribute(value=Name(id='msg', ctx=Load()), attr='get_payload', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Name(id='self', ctx=Load()), slice=Constant(value='Description'), ctx=Store())], value=IfExp(test=Name(id='body', ctx=Load()), body=Name(id='body', ctx=Load()), orelse=Subscript(value=Name(id='self', ctx=Load()), slice=Constant(value='Description'), ctx=Load())))], decorator_list=[]), FunctionDef(name='write', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='filepath'), arg(arg='skip_unknown')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value='Write the metadata fields to filepath.')), Assign(targets=[Name(id='fp', ctx=Store())], value=Call(func=Attribute(value=Name(id='codecs', ctx=Load()), attr='open', ctx=Load()), args=[Name(id='filepath', ctx=Load()), Constant(value='w')], keywords=[keyword(arg='encoding', value=Constant(value='utf-8'))])), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_file', ctx=Load()), args=[Name(id='fp', ctx=Load()), Name(id='skip_unknown', ctx=Load())], keywords=[]))], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='fp', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))])], decorator_list=[]), FunctionDef(name='write_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='fileobject'), arg(arg='skip_unknown')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value='Write the PKG-INFO format data to a file object.')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_metadata_version', ctx=Load()), args=[], keywords=[])), For(target=Name(id='field', ctx=Store()), iter=Call(func=Name(id='_version2fieldlist', ctx=Load()), args=[Subscript(value=Name(id='self', ctx=Load()), slice=Constant(value='Metadata-Version'), ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='values', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='field', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Name(id='skip_unknown', ctx=Load()), Compare(left=Name(id='values', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='UNKNOWN'), List(elts=[], ctx=Load()), List(elts=[Constant(value='UNKNOWN')], ctx=Load())], ctx=Load())])]), body=[Continue()], orelse=[]), If(test=Compare(left=Name(id='field', ctx=Load()), ops=[In()], comparators=[Name(id='_ELEMENTSFIELD', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_write_field', ctx=Load()), args=[Name(id='fileobject', ctx=Load()), Name(id='field', ctx=Load()), Call(func=Attribute(value=Constant(value=','), attr='join', ctx=Load()), args=[Name(id='values', ctx=Load())], keywords=[])], keywords=[])), Continue()], orelse=[]), If(test=Compare(left=Name(id='field', ctx=Load()), ops=[NotIn()], comparators=[Name(id='_LISTFIELDS', ctx=Load())]), body=[If(test=Compare(left=Name(id='field', ctx=Load()), ops=[Eq()], comparators=[Constant(value='Description')]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='metadata_version', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='1.0'), Constant(value='1.1')], ctx=Load())]), body=[Assign(targets=[Name(id='values', ctx=Store())], value=Call(func=Attribute(value=Name(id='values', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='\n'), Constant(value='\n        ')], keywords=[]))], orelse=[Assign(targets=[Name(id='values', ctx=Store())], value=Call(func=Attribute(value=Name(id='values', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='\n'), Constant(value='\n       |')], keywords=[]))])], orelse=[]), Assign(targets=[Name(id='values', ctx=Store())], value=List(elts=[Name(id='values', ctx=Load())], ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='field', ctx=Load()), ops=[In()], comparators=[Name(id='_LISTTUPLEFIELDS', ctx=Load())]), body=[Assign(targets=[Name(id='values', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Constant(value=','), attr='join', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='value', ctx=Store()), iter=Name(id='values', ctx=Load()), ifs=[], is_async=0)]))], orelse=[]), For(target=Name(id='value', ctx=Store()), iter=Name(id='values', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_write_field', ctx=Load()), args=[Name(id='fileobject', ctx=Load()), Name(id='field', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='update', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[Constant(value=None)]), body=[Expr(value=Constant(value="Set metadata values from the given iterable `other` and kwargs.\n\n        Behavior is like `dict.update`: If `other` has a ``keys`` method,\n        they are looped over and ``self[key]`` is assigned ``other[key]``.\n        Else, ``other`` is an iterable of ``(key, value)`` iterables.\n\n        Keys that don't match a metadata field or that have an empty value are\n        dropped.\n        ")), FunctionDef(name='_set', args=arguments(posonlyargs=[], args=[arg(arg='key'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='key', ctx=Load()), ops=[In()], comparators=[Name(id='_ATTR2FIELD', ctx=Load())]), Name(id='value', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_convert_name', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[]), Name(id='value', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), If(test=UnaryOp(op=Not(), operand=Name(id='other', ctx=Load())), body=[Pass()], orelse=[If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='other', ctx=Load()), Constant(value='keys')], keywords=[]), body=[For(target=Name(id='k', ctx=Store()), iter=Call(func=Attribute(value=Name(id='other', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Name(id='_set', ctx=Load()), args=[Name(id='k', ctx=Load()), Subscript(value=Name(id='other', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], orelse=[For(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Name(id='other', ctx=Load()), body=[Expr(value=Call(func=Name(id='_set', ctx=Load()), args=[Name(id='k', ctx=Load()), Name(id='v', ctx=Load())], keywords=[]))], orelse=[])])]), If(test=Name(id='kwargs', ctx=Load()), body=[For(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='kwargs', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Name(id='_set', ctx=Load()), args=[Name(id='k', ctx=Load()), Name(id='v', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='set', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Control then set a metadata field.')), Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_convert_name', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[BoolOp(op=Or(), values=[Compare(left=Name(id='name', ctx=Load()), ops=[In()], comparators=[Name(id='_ELEMENTSFIELD', ctx=Load())]), Compare(left=Name(id='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='Platform')])]), UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Tuple(elts=[Name(id='list', ctx=Load()), Name(id='tuple', ctx=Load())], ctx=Load())], keywords=[]))]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='string_types', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='v', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]), generators=[comprehension(target=Name(id='v', ctx=Store()), iter=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=',')], keywords=[]), ifs=[], is_async=0)]))], orelse=[Assign(targets=[Name(id='value', ctx=Store())], value=List(elts=[], ctx=Load()))])], orelse=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='name', ctx=Load()), ops=[In()], comparators=[Name(id='_LISTFIELDS', ctx=Load())]), UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Tuple(elts=[Name(id='list', ctx=Load()), Name(id='tuple', ctx=Load())], ctx=Load())], keywords=[]))]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='string_types', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=List(elts=[Name(id='value', ctx=Load())], ctx=Load()))], orelse=[Assign(targets=[Name(id='value', ctx=Store())], value=List(elts=[], ctx=Load()))])], orelse=[])]), If(test=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='isEnabledFor', ctx=Load()), args=[Attribute(value=Name(id='logging', ctx=Load()), attr='WARNING', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='project_name', ctx=Store())], value=Subscript(value=Name(id='self', ctx=Load()), slice=Constant(value='Name'), ctx=Load())), Assign(targets=[Name(id='scheme', ctx=Store())], value=Call(func=Name(id='get_scheme', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='scheme', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='name', ctx=Load()), ops=[In()], comparators=[Name(id='_PREDICATE_FIELDS', ctx=Load())]), Compare(left=Name(id='value', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[For(target=Name(id='v', ctx=Store()), iter=Name(id='value', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='scheme', ctx=Load()), attr='is_valid_matcher', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Name(id='v', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=';')], keywords=[]), slice=Constant(value=0), ctx=Load())], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value="'%s': '%s' is not valid (field '%s')"), Name(id='project_name', ctx=Load()), Name(id='v', ctx=Load()), Name(id='name', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='name', ctx=Load()), ops=[In()], comparators=[Name(id='_VERSIONS_FIELDS', ctx=Load())]), Compare(left=Name(id='value', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='scheme', ctx=Load()), attr='is_valid_constraint_list', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value="'%s': '%s' is not a valid version (field '%s')"), Name(id='project_name', ctx=Load()), Name(id='value', ctx=Load()), Name(id='name', ctx=Load())], keywords=[]))], orelse=[])], orelse=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='name', ctx=Load()), ops=[In()], comparators=[Name(id='_VERSION_FIELDS', ctx=Load())]), Compare(left=Name(id='value', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='scheme', ctx=Load()), attr='is_valid_version', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value="'%s': '%s' is not a valid version (field '%s')"), Name(id='project_name', ctx=Load()), Name(id='value', ctx=Load()), Name(id='name', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])])])], orelse=[]), If(test=Compare(left=Name(id='name', ctx=Load()), ops=[In()], comparators=[Name(id='_UNICODEFIELDS', ctx=Load())]), body=[If(test=Compare(left=Name(id='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='Description')]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_remove_line_prefix', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_fields', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[]), FunctionDef(name='get', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name'), arg(arg='default')], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='_MISSING', ctx=Load())]), body=[Expr(value=Constant(value='Get a metadata field.')), Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_convert_name', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='name', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_fields', ctx=Load())]), body=[If(test=Compare(left=Name(id='default', ctx=Load()), ops=[Is()], comparators=[Name(id='_MISSING', ctx=Load())]), body=[Assign(targets=[Name(id='default', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_default_value', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='default', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='name', ctx=Load()), ops=[In()], comparators=[Name(id='_UNICODEFIELDS', ctx=Load())]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_fields', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load())), Return(value=Name(id='value', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='name', ctx=Load()), ops=[In()], comparators=[Name(id='_LISTFIELDS', ctx=Load())]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_fields', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load())), If(test=Compare(left=Name(id='value', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='res', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='val', ctx=Store()), iter=Name(id='value', ctx=Load()), body=[If(test=Compare(left=Name(id='name', ctx=Load()), ops=[NotIn()], comparators=[Name(id='_LISTTUPLEFIELDS', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='res', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='val', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='res', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Subscript(value=Name(id='val', ctx=Load()), slice=Constant(value=0), ctx=Load()), Subscript(value=Name(id='val', ctx=Load()), slice=Constant(value=1), ctx=Load())], ctx=Load())], keywords=[]))])], orelse=[]), Return(value=Name(id='res', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='name', ctx=Load()), ops=[In()], comparators=[Name(id='_ELEMENTSFIELD', ctx=Load())]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_fields', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load())), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='string_types', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=',')], keywords=[]))], orelse=[])], orelse=[])])]), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_fields', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load()))], decorator_list=[]), FunctionDef(name='check', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='strict')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value='Check if the metadata is compliant. If strict is True then raise if\n        no Name or Version are provided')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_metadata_version', ctx=Load()), args=[], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='missing', ctx=Store()), Name(id='warnings', ctx=Store())], ctx=Store())], value=Tuple(elts=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load())], ctx=Load())), For(target=Name(id='attr', ctx=Store()), iter=Tuple(elts=[Constant(value='Name'), Constant(value='Version')], ctx=Load()), body=[If(test=Compare(left=Name(id='attr', ctx=Load()), ops=[NotIn()], comparators=[Name(id='self', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='missing', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='attr', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), If(test=BoolOp(op=And(), values=[Name(id='strict', ctx=Load()), Compare(left=Name(id='missing', ctx=Load()), ops=[NotEq()], comparators=[List(elts=[], ctx=Load())])]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=BinOp(left=Constant(value='missing required metadata: %s'), op=Mod(), right=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Name(id='missing', ctx=Load())], keywords=[]))), Raise(exc=Call(func=Name(id='MetadataMissingError', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='attr', ctx=Store()), iter=Tuple(elts=[Constant(value='Home-page'), Constant(value='Author')], ctx=Load()), body=[If(test=Compare(left=Name(id='attr', ctx=Load()), ops=[NotIn()], comparators=[Name(id='self', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='missing', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='attr', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='self', ctx=Load()), slice=Constant(value='Metadata-Version'), ctx=Load()), ops=[NotEq()], comparators=[Constant(value='1.2')]), body=[Return(value=Tuple(elts=[Name(id='missing', ctx=Load()), Name(id='warnings', ctx=Load())], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='scheme', ctx=Store())], value=Call(func=Name(id='get_scheme', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='scheme', ctx=Load())], keywords=[])), FunctionDef(name='are_valid_constraints', args=arguments(posonlyargs=[], args=[arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='v', ctx=Store()), iter=Name(id='value', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='scheme', ctx=Load()), attr='is_valid_matcher', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Name(id='v', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=';')], keywords=[]), slice=Constant(value=0), ctx=Load())], keywords=[])), body=[Return(value=Constant(value=False))], orelse=[])], orelse=[]), Return(value=Constant(value=True))], decorator_list=[]), For(target=Tuple(elts=[Name(id='fields', ctx=Store()), Name(id='controller', ctx=Store())], ctx=Store()), iter=Tuple(elts=[Tuple(elts=[Name(id='_PREDICATE_FIELDS', ctx=Load()), Name(id='are_valid_constraints', ctx=Load())], ctx=Load()), Tuple(elts=[Name(id='_VERSIONS_FIELDS', ctx=Load()), Attribute(value=Name(id='scheme', ctx=Load()), attr='is_valid_constraint_list', ctx=Load())], ctx=Load()), Tuple(elts=[Name(id='_VERSION_FIELDS', ctx=Load()), Attribute(value=Name(id='scheme', ctx=Load()), attr='is_valid_version', ctx=Load())], ctx=Load())], ctx=Load()), body=[For(target=Name(id='field', ctx=Store()), iter=Name(id='fields', ctx=Load()), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='field', ctx=Load()), Constant(value=None)], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='value', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), UnaryOp(op=Not(), operand=Call(func=Name(id='controller', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))]), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Constant(value="Wrong value for '%s': %s"), op=Mod(), right=Tuple(elts=[Name(id='field', ctx=Load()), Name(id='value', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[])], orelse=[])], orelse=[]), Return(value=Tuple(elts=[Name(id='missing', ctx=Load()), Name(id='warnings', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='todict', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='skip_missing')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value='Return fields as a dict.\n\n        Field names will be converted to use the underscore-lowercase style\n        instead of hyphen-mixed case (i.e. home_page instead of Home-page).\n        This is as per https://www.python.org/dev/peps/pep-0566/#id17.\n        ')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_metadata_version', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='fields', ctx=Store())], value=Call(func=Name(id='_version2fieldlist', ctx=Load()), args=[Subscript(value=Name(id='self', ctx=Load()), slice=Constant(value='Metadata-Version'), ctx=Load())], keywords=[])), Assign(targets=[Name(id='data', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='field_name', ctx=Store()), iter=Name(id='fields', ctx=Load()), body=[If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Name(id='skip_missing', ctx=Load())), Compare(left=Name(id='field_name', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_fields', ctx=Load())])]), body=[Assign(targets=[Name(id='key', ctx=Store())], value=Subscript(value=Name(id='_FIELD2ATTR', ctx=Load()), slice=Name(id='field_name', ctx=Load()), ctx=Load())), If(test=Compare(left=Name(id='key', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='project_url')]), body=[Assign(targets=[Subscript(value=Name(id='data', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='self', ctx=Load()), slice=Name(id='field_name', ctx=Load()), ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Name(id='data', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Constant(value=','), attr='join', ctx=Load()), args=[Name(id='u', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='u', ctx=Store()), iter=Subscript(value=Name(id='self', ctx=Load()), slice=Name(id='field_name', ctx=Load()), ctx=Load()), ifs=[], is_async=0)]))])], orelse=[])], orelse=[]), Return(value=Name(id='data', ctx=Load()))], decorator_list=[]), FunctionDef(name='add_requirements', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='requirements')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Subscript(value=Name(id='self', ctx=Load()), slice=Constant(value='Metadata-Version'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='1.1')]), body=[For(target=Name(id='field', ctx=Store()), iter=Tuple(elts=[Constant(value='Obsoletes'), Constant(value='Requires'), Constant(value='Provides')], ctx=Load()), body=[If(test=Compare(left=Name(id='field', ctx=Load()), ops=[In()], comparators=[Name(id='self', ctx=Load())]), body=[Delete(targets=[Subscript(value=Name(id='self', ctx=Load()), slice=Name(id='field', ctx=Load()), ctx=Del())])], orelse=[])], orelse=[])], orelse=[]), AugAssign(target=Subscript(value=Name(id='self', ctx=Load()), slice=Constant(value='Requires-Dist'), ctx=Store()), op=Add(), value=Name(id='requirements', ctx=Load()))], decorator_list=[]), FunctionDef(name='keys', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='_version2fieldlist', ctx=Load()), args=[Subscript(value=Name(id='self', ctx=Load()), slice=Constant(value='Metadata-Version'), ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='__iter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='key', ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Yield(value=Name(id='key', ctx=Load())))], orelse=[])], decorator_list=[]), FunctionDef(name='values', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=ListComp(elt=Subscript(value=Name(id='self', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='key', ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[]), FunctionDef(name='items', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=ListComp(elt=Tuple(elts=[Name(id='key', ctx=Load()), Subscript(value=Name(id='self', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load())], ctx=Load()), generators=[comprehension(target=Name(id='key', ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[]), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Constant(value='<%s %s %s>'), op=Mod(), right=Tuple(elts=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='version', ctx=Load())], ctx=Load())))], decorator_list=[])], decorator_list=[]), Assign(targets=[Name(id='METADATA_FILENAME', ctx=Store())], value=Constant(value='pydist.json')), Assign(targets=[Name(id='WHEEL_METADATA_FILENAME', ctx=Store())], value=Constant(value='metadata.json')), Assign(targets=[Name(id='LEGACY_METADATA_FILENAME', ctx=Store())], value=Constant(value='METADATA')), ClassDef(name='Metadata', bases=[Name(id='object', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    The metadata of a release. This implementation uses 2.1\n    metadata where possible. If not possible, it wraps a LegacyMetadata\n    instance which handles the key-value metadata format.\n    ')), Assign(targets=[Name(id='METADATA_VERSION_MATCHER', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='^\\d+(\\.\\d+)*$')], keywords=[])), Assign(targets=[Name(id='NAME_MATCHER', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='^[0-9A-Z]([0-9A-Z_.-]*[0-9A-Z])?$'), Attribute(value=Name(id='re', ctx=Load()), attr='I', ctx=Load())], keywords=[])), Assign(targets=[Name(id='FIELDNAME_MATCHER', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='^[A-Z]([0-9A-Z-]*[0-9A-Z])?$'), Attribute(value=Name(id='re', ctx=Load()), attr='I', ctx=Load())], keywords=[])), Assign(targets=[Name(id='VERSION_MATCHER', ctx=Store())], value=Name(id='PEP440_VERSION_RE', ctx=Load())), Assign(targets=[Name(id='SUMMARY_MATCHER', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='.{1,2047}')], keywords=[])), Assign(targets=[Name(id='METADATA_VERSION', ctx=Store())], value=Constant(value='2.0')), Assign(targets=[Name(id='GENERATOR', ctx=Store())], value=BinOp(left=Constant(value='distlib (%s)'), op=Mod(), right=Name(id='__version__', ctx=Load()))), Assign(targets=[Name(id='MANDATORY_KEYS', ctx=Store())], value=Dict(keys=[Constant(value='name'), Constant(value='version'), Constant(value='summary')], values=[Tuple(elts=[], ctx=Load()), Tuple(elts=[], ctx=Load()), Tuple(elts=[Constant(value='legacy')], ctx=Load())])), Assign(targets=[Name(id='INDEX_KEYS', ctx=Store())], value=Constant(value='name version license summary description author author_email keywords platform home_page classifiers download_url')), Assign(targets=[Name(id='DEPENDENCY_KEYS', ctx=Store())], value=Constant(value='extras run_requires test_requires build_requires dev_requires provides meta_requires obsoleted_by supports_environments')), Assign(targets=[Name(id='SYNTAX_VALIDATORS', ctx=Store())], value=Dict(keys=[Constant(value='metadata_version'), Constant(value='name'), Constant(value='version'), Constant(value='summary'), Constant(value='dynamic')], values=[Tuple(elts=[Name(id='METADATA_VERSION_MATCHER', ctx=Load()), Tuple(elts=[], ctx=Load())], ctx=Load()), Tuple(elts=[Name(id='NAME_MATCHER', ctx=Load()), Tuple(elts=[Constant(value='legacy')], ctx=Load())], ctx=Load()), Tuple(elts=[Name(id='VERSION_MATCHER', ctx=Load()), Tuple(elts=[Constant(value='legacy')], ctx=Load())], ctx=Load()), Tuple(elts=[Name(id='SUMMARY_MATCHER', ctx=Load()), Tuple(elts=[Constant(value='legacy')], ctx=Load())], ctx=Load()), Tuple(elts=[Name(id='FIELDNAME_MATCHER', ctx=Load()), Tuple(elts=[Constant(value='legacy')], ctx=Load())], ctx=Load())])), Assign(targets=[Name(id='__slots__', ctx=Store())], value=Tuple(elts=[Constant(value='_legacy'), Constant(value='_data'), Constant(value='scheme')], ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='path'), arg(arg='fileobj'), arg(arg='mapping'), arg(arg='scheme')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value='default')]), body=[If(test=Compare(left=Call(func=Attribute(value=List(elts=[Name(id='path', ctx=Load()), Name(id='fileobj', ctx=Load()), Name(id='mapping', ctx=Load())], ctx=Load()), attr='count', ctx=Load()), args=[Constant(value=None)], keywords=[]), ops=[Lt()], comparators=[Constant(value=2)]), body=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[Constant(value='path, fileobj and mapping are exclusive')], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_legacy', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='scheme', ctx=Store())], value=Name(id='scheme', ctx=Load())), If(test=Compare(left=Name(id='mapping', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_validate_mapping', ctx=Load()), args=[Name(id='mapping', ctx=Load()), Name(id='scheme', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Store())], value=Name(id='mapping', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='MetadataUnrecognizedVersionError', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_legacy', ctx=Store())], value=Call(func=Name(id='LegacyMetadata', ctx=Load()), args=[], keywords=[keyword(arg='mapping', value=Name(id='mapping', ctx=Load())), keyword(arg='scheme', value=Name(id='scheme', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='validate', ctx=Load()), args=[], keywords=[]))])], orelse=[], finalbody=[])], orelse=[Assign(targets=[Name(id='data', ctx=Store())], value=Constant(value=None)), If(test=Name(id='path', ctx=Load()), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='path', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]))])], orelse=[If(test=Name(id='fileobj', ctx=Load()), body=[Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Name(id='fileobj', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]))], orelse=[])]), If(test=Compare(left=Name(id='data', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Store())], value=Dict(keys=[Constant(value='metadata_version'), Constant(value='generator')], values=[Attribute(value=Name(id='self', ctx=Load()), attr='METADATA_VERSION', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='GENERATOR', ctx=Load())]))], orelse=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='data', ctx=Load()), Name(id='text_type', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[]))], orelse=[]), Try(body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='loads', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_validate_mapping', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load()), Name(id='scheme', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_legacy', ctx=Store())], value=Call(func=Name(id='LegacyMetadata', ctx=Load()), args=[], keywords=[keyword(arg='fileobj', value=Call(func=Name(id='StringIO', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])), keyword(arg='scheme', value=Name(id='scheme', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='validate', ctx=Load()), args=[], keywords=[]))])], orelse=[], finalbody=[])])])], decorator_list=[]), Assign(targets=[Name(id='common_keys', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Tuple(elts=[Constant(value='name'), Constant(value='version'), Constant(value='license'), Constant(value='keywords'), Constant(value='summary')], ctx=Load())], keywords=[])), Assign(targets=[Name(id='none_list', ctx=Store())], value=Tuple(elts=[Constant(value=None), Name(id='list', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='none_dict', ctx=Store())], value=Tuple(elts=[Constant(value=None), Name(id='dict', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='mapped_keys', ctx=Store())], value=Dict(keys=[Constant(value='run_requires'), Constant(value='build_requires'), Constant(value='dev_requires'), Constant(value='test_requires'), Constant(value='meta_requires'), Constant(value='extras'), Constant(value='modules'), Constant(value='namespaces'), Constant(value='exports'), Constant(value='commands'), Constant(value='classifiers'), Constant(value='source_url'), Constant(value='metadata_version')], values=[Tuple(elts=[Constant(value='Requires-Dist'), Name(id='list', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='Setup-Requires-Dist'), Name(id='list', ctx=Load())], ctx=Load()), Name(id='none_list', ctx=Load()), Name(id='none_list', ctx=Load()), Name(id='none_list', ctx=Load()), Tuple(elts=[Constant(value='Provides-Extra'), Name(id='list', ctx=Load())], ctx=Load()), Name(id='none_list', ctx=Load()), Name(id='none_list', ctx=Load()), Name(id='none_dict', ctx=Load()), Name(id='none_dict', ctx=Load()), Tuple(elts=[Constant(value='Classifier'), Name(id='list', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='Download-URL'), Constant(value=None)], ctx=Load()), Tuple(elts=[Constant(value='Metadata-Version'), Constant(value=None)], ctx=Load())])), Delete(targets=[Name(id='none_list', ctx=Del()), Name(id='none_dict', ctx=Del())]), FunctionDef(name='__getattribute__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='common', ctx=Store())], value=Call(func=Attribute(value=Name(id='object', ctx=Load()), attr='__getattribute__', ctx=Load()), args=[Name(id='self', ctx=Load()), Constant(value='common_keys')], keywords=[])), Assign(targets=[Name(id='mapped', ctx=Store())], value=Call(func=Attribute(value=Name(id='object', ctx=Load()), attr='__getattribute__', ctx=Load()), args=[Name(id='self', ctx=Load()), Constant(value='mapped_keys')], keywords=[])), If(test=Compare(left=Name(id='key', ctx=Load()), ops=[In()], comparators=[Name(id='mapped', ctx=Load())]), body=[Assign(targets=[Tuple(elts=[Name(id='lk', ctx=Store()), Name(id='maker', ctx=Store())], ctx=Store())], value=Subscript(value=Name(id='mapped', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load())), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_legacy', ctx=Load()), body=[If(test=Compare(left=Name(id='lk', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=IfExp(test=Compare(left=Name(id='maker', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Constant(value=None), orelse=Call(func=Name(id='maker', ctx=Load()), args=[], keywords=[])))], orelse=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_legacy', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='lk', ctx=Load())], keywords=[]))])], orelse=[Assign(targets=[Name(id='value', ctx=Store())], value=IfExp(test=Compare(left=Name(id='maker', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Constant(value=None), orelse=Call(func=Name(id='maker', ctx=Load()), args=[], keywords=[]))), If(test=Compare(left=Name(id='key', ctx=Load()), ops=[NotIn()], comparators=[Tuple(elts=[Constant(value='commands'), Constant(value='exports'), Constant(value='modules'), Constant(value='namespaces'), Constant(value='classifiers')], ctx=Load())]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='key', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='sentinel', ctx=Store())], value=Call(func=Name(id='object', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='result', ctx=Store())], value=Name(id='sentinel', ctx=Load())), Assign(targets=[Name(id='d', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='extensions')], keywords=[])), If(test=Name(id='d', ctx=Load()), body=[If(test=Compare(left=Name(id='key', ctx=Load()), ops=[Eq()], comparators=[Constant(value='commands')]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='d', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='python.commands'), Name(id='value', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='key', ctx=Load()), ops=[Eq()], comparators=[Constant(value='classifiers')]), body=[Assign(targets=[Name(id='d', ctx=Store())], value=Call(func=Attribute(value=Name(id='d', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='python.details')], keywords=[])), If(test=Name(id='d', ctx=Load()), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='d', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='key', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]))], orelse=[])], orelse=[Assign(targets=[Name(id='d', ctx=Store())], value=Call(func=Attribute(value=Name(id='d', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='python.exports')], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='d', ctx=Load())), body=[Assign(targets=[Name(id='d', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='python.exports')], keywords=[]))], orelse=[]), If(test=Name(id='d', ctx=Load()), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='d', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='key', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]))], orelse=[])])])], orelse=[]), If(test=Compare(left=Name(id='result', ctx=Load()), ops=[Is()], comparators=[Name(id='sentinel', ctx=Load())]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Name(id='value', ctx=Load()))], orelse=[])])])], orelse=[If(test=Compare(left=Name(id='key', ctx=Load()), ops=[NotIn()], comparators=[Name(id='common', ctx=Load())]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='object', ctx=Load()), attr='__getattribute__', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='key', ctx=Load())], keywords=[]))], orelse=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_legacy', ctx=Load()), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_legacy', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[]))])])]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[]), FunctionDef(name='_validate_value', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key'), arg(arg='value'), arg(arg='scheme')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='key', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='SYNTAX_VALIDATORS', ctx=Load())]), body=[Assign(targets=[Tuple(elts=[Name(id='pattern', ctx=Store()), Name(id='exclusions', ctx=Store())], ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='SYNTAX_VALIDATORS', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load())), If(test=Compare(left=BoolOp(op=Or(), values=[Name(id='scheme', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='scheme', ctx=Load())]), ops=[NotIn()], comparators=[Name(id='exclusions', ctx=Load())]), body=[Assign(targets=[Name(id='m', ctx=Store())], value=Call(func=Attribute(value=Name(id='pattern', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='m', ctx=Load())), body=[Raise(exc=Call(func=Name(id='MetadataInvalidError', ctx=Load()), args=[BinOp(left=Constant(value="'%s' is an invalid value for the '%s' property"), op=Mod(), right=Tuple(elts=[Name(id='value', ctx=Load()), Name(id='key', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[])], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='__setattr__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_validate_value', ctx=Load()), args=[Name(id='key', ctx=Load()), Name(id='value', ctx=Load())], keywords=[])), Assign(targets=[Name(id='common', ctx=Store())], value=Call(func=Attribute(value=Name(id='object', ctx=Load()), attr='__getattribute__', ctx=Load()), args=[Name(id='self', ctx=Load()), Constant(value='common_keys')], keywords=[])), Assign(targets=[Name(id='mapped', ctx=Store())], value=Call(func=Attribute(value=Name(id='object', ctx=Load()), attr='__getattribute__', ctx=Load()), args=[Name(id='self', ctx=Load()), Constant(value='mapped_keys')], keywords=[])), If(test=Compare(left=Name(id='key', ctx=Load()), ops=[In()], comparators=[Name(id='mapped', ctx=Load())]), body=[Assign(targets=[Tuple(elts=[Name(id='lk', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Subscript(value=Name(id='mapped', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load())), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_legacy', ctx=Load()), body=[If(test=Compare(left=Name(id='lk', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Name(id='NotImplementedError', ctx=Load()))], orelse=[]), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_legacy', ctx=Load()), slice=Name(id='lk', ctx=Load()), ctx=Store())], value=Name(id='value', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='key', ctx=Load()), ops=[NotIn()], comparators=[Tuple(elts=[Constant(value='commands'), Constant(value='exports'), Constant(value='modules'), Constant(value='namespaces'), Constant(value='classifiers')], ctx=Load())]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Name(id='value', ctx=Load()))], orelse=[Assign(targets=[Name(id='d', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load()), attr='setdefault', ctx=Load()), args=[Constant(value='extensions'), Dict(keys=[], values=[])], keywords=[])), If(test=Compare(left=Name(id='key', ctx=Load()), ops=[Eq()], comparators=[Constant(value='commands')]), body=[Assign(targets=[Subscript(value=Name(id='d', ctx=Load()), slice=Constant(value='python.commands'), ctx=Store())], value=Name(id='value', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='key', ctx=Load()), ops=[Eq()], comparators=[Constant(value='classifiers')]), body=[Assign(targets=[Name(id='d', ctx=Store())], value=Call(func=Attribute(value=Name(id='d', ctx=Load()), attr='setdefault', ctx=Load()), args=[Constant(value='python.details'), Dict(keys=[], values=[])], keywords=[])), Assign(targets=[Subscript(value=Name(id='d', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Name(id='value', ctx=Load()))], orelse=[Assign(targets=[Name(id='d', ctx=Store())], value=Call(func=Attribute(value=Name(id='d', ctx=Load()), attr='setdefault', ctx=Load()), args=[Constant(value='python.exports'), Dict(keys=[], values=[])], keywords=[])), Assign(targets=[Subscript(value=Name(id='d', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Name(id='value', ctx=Load()))])])])])], orelse=[If(test=Compare(left=Name(id='key', ctx=Load()), ops=[NotIn()], comparators=[Name(id='common', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='object', ctx=Load()), attr='__setattr__', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='key', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='key', ctx=Load()), ops=[Eq()], comparators=[Constant(value='keywords')]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='string_types', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[])), If(test=Name(id='value', ctx=Load()), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Name(id='value', ctx=Store())], value=List(elts=[], ctx=Load()))])], orelse=[])], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_legacy', ctx=Load()), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_legacy', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Name(id='value', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Name(id='value', ctx=Load()))])])])], decorator_list=[]), FunctionDef(name='name_and_version', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='_get_name_and_version', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='version', ctx=Load()), Constant(value=True)], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='provides', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_legacy', ctx=Load()), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_legacy', ctx=Load()), slice=Constant(value='Provides-Dist'), ctx=Load()))], orelse=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load()), attr='setdefault', ctx=Load()), args=[Constant(value='provides'), List(elts=[], ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='s', ctx=Store())], value=BinOp(left=Constant(value='%s (%s)'), op=Mod(), right=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='version', ctx=Load())], ctx=Load()))), If(test=Compare(left=Name(id='s', ctx=Load()), ops=[NotIn()], comparators=[Name(id='result', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='provides', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_legacy', ctx=Load()), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_legacy', ctx=Load()), slice=Constant(value='Provides-Dist'), ctx=Store())], value=Name(id='value', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load()), slice=Constant(value='provides'), ctx=Store())], value=Name(id='value', ctx=Load()))])], decorator_list=[Attribute(value=Name(id='provides', ctx=Load()), attr='setter', ctx=Load())]), FunctionDef(name='get_requirements', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='reqts'), arg(arg='extras'), arg(arg='env')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='\n        Base method to get dependencies, given a set of extras\n        to satisfy and an optional environment context.\n        :param reqts: A list of sometimes-wanted dependencies,\n                      perhaps dependent on extras and environment.\n        :param extras: A list of optional components being requested.\n        :param env: An optional environment for marker evaluation.\n        ')), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_legacy', ctx=Load()), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Name(id='reqts', ctx=Load()))], orelse=[Assign(targets=[Name(id='result', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='extras', ctx=Store())], value=Call(func=Name(id='get_extras', ctx=Load()), args=[BoolOp(op=Or(), values=[Name(id='extras', ctx=Load()), List(elts=[], ctx=Load())]), Attribute(value=Name(id='self', ctx=Load()), attr='extras', ctx=Load())], keywords=[])), For(target=Name(id='d', ctx=Store()), iter=Name(id='reqts', ctx=Load()), body=[If(test=BoolOp(op=And(), values=[Compare(left=Constant(value='extra'), ops=[NotIn()], comparators=[Name(id='d', ctx=Load())]), Compare(left=Constant(value='environment'), ops=[NotIn()], comparators=[Name(id='d', ctx=Load())])]), body=[Assign(targets=[Name(id='include', ctx=Store())], value=Constant(value=True))], orelse=[If(test=Compare(left=Constant(value='extra'), ops=[NotIn()], comparators=[Name(id='d', ctx=Load())]), body=[Assign(targets=[Name(id='include', ctx=Store())], value=Constant(value=True))], orelse=[Assign(targets=[Name(id='include', ctx=Store())], value=Compare(left=Call(func=Attribute(value=Name(id='d', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='extra')], keywords=[]), ops=[In()], comparators=[Name(id='extras', ctx=Load())]))]), If(test=Name(id='include', ctx=Load()), body=[Assign(targets=[Name(id='marker', ctx=Store())], value=Call(func=Attribute(value=Name(id='d', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='environment')], keywords=[])), If(test=Name(id='marker', ctx=Load()), body=[Assign(targets=[Name(id='include', ctx=Store())], value=Call(func=Name(id='interpret', ctx=Load()), args=[Name(id='marker', ctx=Load()), Name(id='env', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])]), If(test=Name(id='include', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='extend', ctx=Load()), args=[Subscript(value=Name(id='d', ctx=Load()), slice=Constant(value='requires'), ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), For(target=Name(id='key', ctx=Store()), iter=Tuple(elts=[Constant(value='build'), Constant(value='dev'), Constant(value='test')], ctx=Load()), body=[Assign(targets=[Name(id='e', ctx=Store())], value=BinOp(left=Constant(value=':%s:'), op=Mod(), right=Name(id='key', ctx=Load()))), If(test=Compare(left=Name(id='e', ctx=Load()), ops=[In()], comparators=[Name(id='extras', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='extras', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[])), Assign(targets=[Name(id='reqts', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load()), attr='get', ctx=Load()), args=[BinOp(left=Constant(value='%s_requires'), op=Mod(), right=Name(id='key', ctx=Load())), List(elts=[], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_requirements', ctx=Load()), args=[Name(id='reqts', ctx=Load())], keywords=[keyword(arg='extras', value=Name(id='extras', ctx=Load())), keyword(arg='env', value=Name(id='env', ctx=Load()))])], keywords=[]))], orelse=[])], orelse=[])]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[]), FunctionDef(name='dictionary', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_legacy', ctx=Load()), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_from_legacy', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='dependencies', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_legacy', ctx=Load()), body=[Raise(exc=Name(id='NotImplementedError', ctx=Load()))], orelse=[Return(value=Call(func=Name(id='extract_by_key', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='DEPENDENCY_KEYS', ctx=Load())], keywords=[]))])], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='dependencies', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_legacy', ctx=Load()), body=[Raise(exc=Name(id='NotImplementedError', ctx=Load()))], orelse=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))])], decorator_list=[Attribute(value=Name(id='dependencies', ctx=Load()), attr='setter', ctx=Load())]), FunctionDef(name='_validate_mapping', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='mapping'), arg(arg='scheme')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='mapping', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='metadata_version')], keywords=[]), ops=[NotEq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='METADATA_VERSION', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='MetadataUnrecognizedVersionError', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='missing', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='exclusions', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='MANDATORY_KEYS', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Name(id='key', ctx=Load()), ops=[NotIn()], comparators=[Name(id='mapping', ctx=Load())]), body=[If(test=Compare(left=Name(id='scheme', ctx=Load()), ops=[NotIn()], comparators=[Name(id='exclusions', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='missing', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[]), If(test=Name(id='missing', ctx=Load()), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=BinOp(left=Constant(value='Missing metadata items: %s'), op=Mod(), right=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Name(id='missing', ctx=Load())], keywords=[]))), Raise(exc=Call(func=Name(id='MetadataMissingError', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))], orelse=[]), For(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='mapping', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_validate_value', ctx=Load()), args=[Name(id='k', ctx=Load()), Name(id='v', ctx=Load()), Name(id='scheme', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='validate', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_legacy', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='missing', ctx=Store()), Name(id='warnings', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_legacy', ctx=Load()), attr='check', ctx=Load()), args=[Constant(value=True)], keywords=[])), If(test=BoolOp(op=Or(), values=[Name(id='missing', ctx=Load()), Name(id='warnings', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='Metadata: missing: %s, warnings: %s'), Name(id='missing', ctx=Load()), Name(id='warnings', ctx=Load())], keywords=[]))], orelse=[])], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_validate_mapping', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='scheme', ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='todict', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_legacy', ctx=Load()), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_legacy', ctx=Load()), attr='todict', ctx=Load()), args=[Constant(value=True)], keywords=[]))], orelse=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='extract_by_key', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='INDEX_KEYS', ctx=Load())], keywords=[])), Return(value=Name(id='result', ctx=Load()))])], decorator_list=[]), FunctionDef(name='_from_legacy', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='_legacy', ctx=Load()), UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load()))])), Assign(targets=[Name(id='result', ctx=Store())], value=Dict(keys=[Constant(value='metadata_version'), Constant(value='generator')], values=[Attribute(value=Name(id='self', ctx=Load()), attr='METADATA_VERSION', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='GENERATOR', ctx=Load())])), Assign(targets=[Name(id='lmd', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_legacy', ctx=Load()), attr='todict', ctx=Load()), args=[Constant(value=True)], keywords=[])), For(target=Name(id='k', ctx=Store()), iter=Tuple(elts=[Constant(value='name'), Constant(value='version'), Constant(value='license'), Constant(value='summary'), Constant(value='description'), Constant(value='classifier')], ctx=Load()), body=[If(test=Compare(left=Name(id='k', ctx=Load()), ops=[In()], comparators=[Name(id='lmd', ctx=Load())]), body=[If(test=Compare(left=Name(id='k', ctx=Load()), ops=[Eq()], comparators=[Constant(value='classifier')]), body=[Assign(targets=[Name(id='nk', ctx=Store())], value=Constant(value='classifiers'))], orelse=[Assign(targets=[Name(id='nk', ctx=Store())], value=Name(id='k', ctx=Load()))]), Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=Name(id='nk', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='lmd', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Name(id='kw', ctx=Store())], value=Call(func=Attribute(value=Name(id='lmd', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='Keywords'), List(elts=[], ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='kw', ctx=Load()), ops=[Eq()], comparators=[List(elts=[Constant(value='')], ctx=Load())]), body=[Assign(targets=[Name(id='kw', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[]), Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='keywords'), ctx=Store())], value=Name(id='kw', ctx=Load())), Assign(targets=[Name(id='keys', ctx=Store())], value=Tuple(elts=[Tuple(elts=[Constant(value='requires_dist'), Constant(value='run_requires')], ctx=Load()), Tuple(elts=[Constant(value='setup_requires_dist'), Constant(value='build_requires')], ctx=Load())], ctx=Load())), For(target=Tuple(elts=[Name(id='ok', ctx=Store()), Name(id='nk', ctx=Store())], ctx=Store()), iter=Name(id='keys', ctx=Load()), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='ok', ctx=Load()), ops=[In()], comparators=[Name(id='lmd', ctx=Load())]), Subscript(value=Name(id='lmd', ctx=Load()), slice=Name(id='ok', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=Name(id='nk', ctx=Load()), ctx=Store())], value=List(elts=[Dict(keys=[Constant(value='requires')], values=[Subscript(value=Name(id='lmd', ctx=Load()), slice=Name(id='ok', ctx=Load()), ctx=Load())])], ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='provides'), ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='provides', ctx=Load())), Assign(targets=[Name(id='author', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='maintainer', ctx=Store())], value=Dict(keys=[], values=[])), Return(value=Name(id='result', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='LEGACY_MAPPING', ctx=Store())], value=Dict(keys=[Constant(value='name'), Constant(value='version'), Tuple(elts=[Constant(value='extensions'), Constant(value='python.details'), Constant(value='license')], ctx=Load()), Constant(value='summary'), Constant(value='description'), Tuple(elts=[Constant(value='extensions'), Constant(value='python.project'), Constant(value='project_urls'), Constant(value='Home')], ctx=Load()), Tuple(elts=[Constant(value='extensions'), Constant(value='python.project'), Constant(value='contacts'), Constant(value=0), Constant(value='name')], ctx=Load()), Tuple(elts=[Constant(value='extensions'), Constant(value='python.project'), Constant(value='contacts'), Constant(value=0), Constant(value='email')], ctx=Load()), Constant(value='source_url'), Tuple(elts=[Constant(value='extensions'), Constant(value='python.details'), Constant(value='classifiers')], ctx=Load())], values=[Constant(value='Name'), Constant(value='Version'), Constant(value='License'), Constant(value='Summary'), Constant(value='Description'), Constant(value='Home-page'), Constant(value='Author'), Constant(value='Author-email'), Constant(value='Download-URL'), Constant(value='Classifier')])), FunctionDef(name='_to_legacy', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='process_entries', args=arguments(posonlyargs=[], args=[arg(arg='entries')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='reqts', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), For(target=Name(id='e', ctx=Store()), iter=Name(id='entries', ctx=Load()), body=[Assign(targets=[Name(id='extra', ctx=Store())], value=Call(func=Attribute(value=Name(id='e', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='extra')], keywords=[])), Assign(targets=[Name(id='env', ctx=Store())], value=Call(func=Attribute(value=Name(id='e', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='environment')], keywords=[])), Assign(targets=[Name(id='rlist', ctx=Store())], value=Subscript(value=Name(id='e', ctx=Load()), slice=Constant(value='requires'), ctx=Load())), For(target=Name(id='r', ctx=Store()), iter=Name(id='rlist', ctx=Load()), body=[If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Name(id='env', ctx=Load())), UnaryOp(op=Not(), operand=Name(id='extra', ctx=Load()))]), body=[Expr(value=Call(func=Attribute(value=Name(id='reqts', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='r', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='marker', ctx=Store())], value=Constant(value='')), If(test=Name(id='extra', ctx=Load()), body=[Assign(targets=[Name(id='marker', ctx=Store())], value=BinOp(left=Constant(value='extra == "%s"'), op=Mod(), right=Name(id='extra', ctx=Load())))], orelse=[]), If(test=Name(id='env', ctx=Load()), body=[If(test=Name(id='marker', ctx=Load()), body=[Assign(targets=[Name(id='marker', ctx=Store())], value=BinOp(left=Constant(value='(%s) and %s'), op=Mod(), right=Tuple(elts=[Name(id='env', ctx=Load()), Name(id='marker', ctx=Load())], ctx=Load())))], orelse=[Assign(targets=[Name(id='marker', ctx=Store())], value=Name(id='env', ctx=Load()))])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='reqts', ctx=Load()), attr='add', ctx=Load()), args=[Call(func=Attribute(value=Constant(value=';'), attr='join', ctx=Load()), args=[Tuple(elts=[Name(id='r', ctx=Load()), Name(id='marker', ctx=Load())], ctx=Load())], keywords=[])], keywords=[]))])], orelse=[])], orelse=[]), Return(value=Name(id='reqts', ctx=Load()))], decorator_list=[]), Assert(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load()), UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='_legacy', ctx=Load()))])), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='LegacyMetadata', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='nmd', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load())), For(target=Tuple(elts=[Name(id='nk', ctx=Store()), Name(id='ok', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='LEGACY_MAPPING', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='nk', ctx=Load()), Name(id='tuple', ctx=Load())], keywords=[])), body=[If(test=Compare(left=Name(id='nk', ctx=Load()), ops=[In()], comparators=[Name(id='nmd', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=Name(id='ok', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='nmd', ctx=Load()), slice=Name(id='nk', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[Assign(targets=[Name(id='d', ctx=Store())], value=Name(id='nmd', ctx=Load())), Assign(targets=[Name(id='found', ctx=Store())], value=Constant(value=True)), For(target=Name(id='k', ctx=Store()), iter=Name(id='nk', ctx=Load()), body=[Try(body=[Assign(targets=[Name(id='d', ctx=Store())], value=Subscript(value=Name(id='d', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='KeyError', ctx=Load()), Name(id='IndexError', ctx=Load())], ctx=Load()), body=[Assign(targets=[Name(id='found', ctx=Store())], value=Constant(value=False)), Break()])], orelse=[], finalbody=[])], orelse=[]), If(test=Name(id='found', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=Name(id='ok', ctx=Load()), ctx=Store())], value=Name(id='d', ctx=Load()))], orelse=[])])], orelse=[]), Assign(targets=[Name(id='r1', ctx=Store())], value=Call(func=Name(id='process_entries', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='run_requires', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='meta_requires', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='r2', ctx=Store())], value=Call(func=Name(id='process_entries', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='build_requires', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='dev_requires', ctx=Load()))], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='extras', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='Provides-Extra'), ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='extras', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='Requires-Dist'), ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='r1', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='Setup-Requires-Dist'), ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='r2', ctx=Load())], keywords=[])), Return(value=Name(id='result', ctx=Load()))], decorator_list=[]), FunctionDef(name='write', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='path'), arg(arg='fileobj'), arg(arg='legacy'), arg(arg='skip_unknown')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=False), Constant(value=True)]), body=[If(test=Compare(left=Call(func=Attribute(value=List(elts=[Name(id='path', ctx=Load()), Name(id='fileobj', ctx=Load())], ctx=Load()), attr='count', ctx=Load()), args=[Constant(value=None)], keywords=[]), ops=[NotEq()], comparators=[Constant(value=1)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Exactly one of path and fileobj is needed')], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='validate', ctx=Load()), args=[], keywords=[])), If(test=Name(id='legacy', ctx=Load()), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_legacy', ctx=Load()), body=[Assign(targets=[Name(id='legacy_md', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_legacy', ctx=Load()))], orelse=[Assign(targets=[Name(id='legacy_md', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_to_legacy', ctx=Load()), args=[], keywords=[]))]), If(test=Name(id='path', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='legacy_md', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[keyword(arg='skip_unknown', value=Name(id='skip_unknown', ctx=Load()))]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='legacy_md', ctx=Load()), attr='write_file', ctx=Load()), args=[Name(id='fileobj', ctx=Load())], keywords=[keyword(arg='skip_unknown', value=Name(id='skip_unknown', ctx=Load()))]))])], orelse=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_legacy', ctx=Load()), body=[Assign(targets=[Name(id='d', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_from_legacy', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Name(id='d', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load()))]), If(test=Name(id='fileobj', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[Name(id='d', ctx=Load()), Name(id='fileobj', ctx=Load())], keywords=[keyword(arg='ensure_ascii', value=Constant(value=True)), keyword(arg='indent', value=Constant(value=2)), keyword(arg='sort_keys', value=Constant(value=True))]))], orelse=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='codecs', ctx=Load()), attr='open', ctx=Load()), args=[Name(id='path', ctx=Load()), Constant(value='w'), Constant(value='utf-8')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[Name(id='d', ctx=Load()), Name(id='f', ctx=Load())], keywords=[keyword(arg='ensure_ascii', value=Constant(value=True)), keyword(arg='indent', value=Constant(value=2)), keyword(arg='sort_keys', value=Constant(value=True))]))])])])], decorator_list=[]), FunctionDef(name='add_requirements', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='requirements')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_legacy', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_legacy', ctx=Load()), attr='add_requirements', ctx=Load()), args=[Name(id='requirements', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='run_requires', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_data', ctx=Load()), attr='setdefault', ctx=Load()), args=[Constant(value='run_requires'), List(elts=[], ctx=Load())], keywords=[])), Assign(targets=[Name(id='always', ctx=Store())], value=Constant(value=None)), For(target=Name(id='entry', ctx=Store()), iter=Name(id='run_requires', ctx=Load()), body=[If(test=BoolOp(op=And(), values=[Compare(left=Constant(value='environment'), ops=[NotIn()], comparators=[Name(id='entry', ctx=Load())]), Compare(left=Constant(value='extra'), ops=[NotIn()], comparators=[Name(id='entry', ctx=Load())])]), body=[Assign(targets=[Name(id='always', ctx=Store())], value=Name(id='entry', ctx=Load())), Break()], orelse=[])], orelse=[]), If(test=Compare(left=Name(id='always', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='always', ctx=Store())], value=Dict(keys=[Constant(value='requires')], values=[Name(id='requirements', ctx=Load())])), Expr(value=Call(func=Attribute(value=Name(id='run_requires', ctx=Load()), attr='insert', ctx=Load()), args=[Constant(value=0), Name(id='always', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='rset', ctx=Store())], value=BinOp(left=Call(func=Name(id='set', ctx=Load()), args=[Subscript(value=Name(id='always', ctx=Load()), slice=Constant(value='requires'), ctx=Load())], keywords=[]), op=BitOr(), right=Call(func=Name(id='set', ctx=Load()), args=[Name(id='requirements', ctx=Load())], keywords=[]))), Assign(targets=[Subscript(value=Name(id='always', ctx=Load()), slice=Constant(value='requires'), ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='rset', ctx=Load())], keywords=[]))])])], decorator_list=[]), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='name', ctx=Store())], value=BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), Constant(value='(no name)')])), Assign(targets=[Name(id='version', ctx=Store())], value=BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='version', ctx=Load()), Constant(value='no version')])), Return(value=BinOp(left=Constant(value='<%s %s %s (%s)>'), op=Mod(), right=Tuple(elts=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='metadata_version', ctx=Load()), Name(id='name', ctx=Load()), Name(id='version', ctx=Load())], ctx=Load())))], decorator_list=[])], decorator_list=[])], type_ignores=[])