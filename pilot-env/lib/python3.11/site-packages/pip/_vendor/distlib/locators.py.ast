Module(body=[Import(names=[alias(name='gzip')]), ImportFrom(module='io', names=[alias(name='BytesIO')], level=0), Import(names=[alias(name='json')]), Import(names=[alias(name='logging')]), Import(names=[alias(name='os')]), Import(names=[alias(name='posixpath')]), Import(names=[alias(name='re')]), Try(body=[Import(names=[alias(name='threading')])], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Import(names=[alias(name='dummy_threading', asname='threading')])])], orelse=[], finalbody=[]), Import(names=[alias(name='zlib')]), ImportFrom(names=[alias(name='DistlibException')], level=1), ImportFrom(module='compat', names=[alias(name='urljoin'), alias(name='urlparse'), alias(name='urlunparse'), alias(name='url2pathname'), alias(name='pathname2url'), alias(name='queue'), alias(name='quote'), alias(name='unescape'), alias(name='build_opener'), alias(name='HTTPRedirectHandler', asname='BaseRedirectHandler'), alias(name='text_type'), alias(name='Request'), alias(name='HTTPError'), alias(name='URLError')], level=1), ImportFrom(module='database', names=[alias(name='Distribution'), alias(name='DistributionPath'), alias(name='make_dist')], level=1), ImportFrom(module='metadata', names=[alias(name='Metadata'), alias(name='MetadataInvalidError')], level=1), ImportFrom(module='util', names=[alias(name='cached_property'), alias(name='ensure_slash'), alias(name='split_filename'), alias(name='get_project_data'), alias(name='parse_requirement'), alias(name='parse_name_and_version'), alias(name='ServerProxy'), alias(name='normalize_name')], level=1), ImportFrom(module='version', names=[alias(name='get_scheme'), alias(name='UnsupportedVersionError')], level=1), ImportFrom(module='wheel', names=[alias(name='Wheel'), alias(name='is_compatible')], level=1), Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), Assign(targets=[Name(id='HASHER_HASH', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='^(\\w+)=([a-f0-9]+)')], keywords=[])), Assign(targets=[Name(id='CHARSET', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value=';\\s*charset\\s*=\\s*(.*)\\s*$'), Attribute(value=Name(id='re', ctx=Load()), attr='I', ctx=Load())], keywords=[])), Assign(targets=[Name(id='HTML_CONTENT_TYPE', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='text/html|application/x(ht)?ml')], keywords=[])), Assign(targets=[Name(id='DEFAULT_INDEX', ctx=Store())], value=Constant(value='https://pypi.org/pypi')), FunctionDef(name='get_all_distribution_names', args=arguments(posonlyargs=[], args=[arg(arg='url')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='\n    Return all distribution names known by an index.\n    :param url: The URL of the index.\n    :return: A list of all known distribution names.\n    ')), If(test=Compare(left=Name(id='url', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='url', ctx=Store())], value=Name(id='DEFAULT_INDEX', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='client', ctx=Store())], value=Call(func=Name(id='ServerProxy', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[keyword(arg='timeout', value=Constant(value=3.0))])), Try(body=[Return(value=Call(func=Attribute(value=Name(id='client', ctx=Load()), attr='list_packages', ctx=Load()), args=[], keywords=[]))], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Call(func=Name(id='client', ctx=Load()), args=[Constant(value='close')], keywords=[]), args=[], keywords=[]))])], decorator_list=[]), ClassDef(name='RedirectHandler', bases=[Name(id='BaseRedirectHandler', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    A class to work around a bug in some Python 3.2.x releases.\n    ')), FunctionDef(name='http_error_302', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='req'), arg(arg='fp'), arg(arg='code'), arg(arg='msg'), arg(arg='headers')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='newurl', ctx=Store())], value=Constant(value=None)), For(target=Name(id='key', ctx=Store()), iter=Tuple(elts=[Constant(value='location'), Constant(value='uri')], ctx=Load()), body=[If(test=Compare(left=Name(id='key', ctx=Load()), ops=[In()], comparators=[Name(id='headers', ctx=Load())]), body=[Assign(targets=[Name(id='newurl', ctx=Store())], value=Subscript(value=Name(id='headers', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load())), Break()], orelse=[])], orelse=[]), If(test=Compare(left=Name(id='newurl', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return()], orelse=[]), Assign(targets=[Name(id='urlparts', ctx=Store())], value=Call(func=Name(id='urlparse', ctx=Load()), args=[Name(id='newurl', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='urlparts', ctx=Load()), attr='scheme', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Assign(targets=[Name(id='newurl', ctx=Store())], value=Call(func=Name(id='urljoin', ctx=Load()), args=[Call(func=Attribute(value=Name(id='req', ctx=Load()), attr='get_full_url', ctx=Load()), args=[], keywords=[]), Name(id='newurl', ctx=Load())], keywords=[])), If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='headers', ctx=Load()), Constant(value='replace_header')], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='headers', ctx=Load()), attr='replace_header', ctx=Load()), args=[Name(id='key', ctx=Load()), Name(id='newurl', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Subscript(value=Name(id='headers', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Name(id='newurl', ctx=Load()))])], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='BaseRedirectHandler', ctx=Load()), attr='http_error_302', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='req', ctx=Load()), Name(id='fp', ctx=Load()), Name(id='code', ctx=Load()), Name(id='msg', ctx=Load()), Name(id='headers', ctx=Load())], keywords=[]))], decorator_list=[]), Assign(targets=[Name(id='http_error_301', ctx=Store()), Name(id='http_error_303', ctx=Store()), Name(id='http_error_307', ctx=Store())], value=Name(id='http_error_302', ctx=Load()))], decorator_list=[]), ClassDef(name='Locator', bases=[Name(id='object', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    A base class for locators - things that locate distributions.\n    ')), Assign(targets=[Name(id='source_extensions', ctx=Store())], value=Tuple(elts=[Constant(value='.tar.gz'), Constant(value='.tar.bz2'), Constant(value='.tar'), Constant(value='.zip'), Constant(value='.tgz'), Constant(value='.tbz')], ctx=Load())), Assign(targets=[Name(id='binary_extensions', ctx=Store())], value=Tuple(elts=[Constant(value='.egg'), Constant(value='.exe'), Constant(value='.whl')], ctx=Load())), Assign(targets=[Name(id='excluded_extensions', ctx=Store())], value=Tuple(elts=[Constant(value='.pdf')], ctx=Load())), Assign(targets=[Name(id='wheel_tags', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='downloadable_extensions', ctx=Store())], value=BinOp(left=Name(id='source_extensions', ctx=Load()), op=Add(), right=Tuple(elts=[Constant(value='.whl')], ctx=Load()))), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='scheme')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='default')]), body=[Expr(value=Constant(value="\n        Initialise an instance.\n        :param scheme: Because locators look for most recent versions, they\n                       need to know the version scheme to use. This specifies\n                       the current PEP-recommended scheme - use ``'legacy'``\n                       if you need to support existing distributions on PyPI.\n        ")), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_cache', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='scheme', ctx=Store())], value=Name(id='scheme', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='opener', ctx=Store())], value=Call(func=Name(id='build_opener', ctx=Load()), args=[Call(func=Name(id='RedirectHandler', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='matcher', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='errors', ctx=Store())], value=Call(func=Attribute(value=Name(id='queue', ctx=Load()), attr='Queue', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='get_errors', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return any errors which have occurred.\n        ')), Assign(targets=[Name(id='result', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='errors', ctx=Load()), attr='empty', ctx=Load()), args=[], keywords=[])), body=[Try(body=[Assign(targets=[Name(id='e', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='errors', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value=False)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='errors', ctx=Load()), attr='Empty', ctx=Load()), body=[Continue()])], orelse=[], finalbody=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='errors', ctx=Load()), attr='task_done', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[]), FunctionDef(name='clear_errors', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Clear any errors which may have been logged.\n        ')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_errors', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='clear_cache', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_cache', ctx=Load()), attr='clear', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='_get_scheme', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_scheme', ctx=Load()))], decorator_list=[]), FunctionDef(name='_set_scheme', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_scheme', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='scheme', ctx=Store())], value=Call(func=Name(id='property', ctx=Load()), args=[Name(id='_get_scheme', ctx=Load()), Name(id='_set_scheme', ctx=Load())], keywords=[])), FunctionDef(name='_get_project', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        For a given project, get a dictionary mapping available versions to Distribution\n        instances.\n\n        This should be implemented in subclasses.\n\n        If called from a locate() request, self.matcher will be set to a\n        matcher for the requirement to satisfy, otherwise it will be None.\n        ')), Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[Constant(value='Please implement in the subclass')], keywords=[]))], decorator_list=[]), FunctionDef(name='get_distribution_names', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return all the distribution names known to this locator.\n        ')), Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[Constant(value='Please implement in the subclass')], keywords=[]))], decorator_list=[]), FunctionDef(name='get_project', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        For a given project, get a dictionary mapping available versions to Distribution\n        instances.\n\n        This calls _get_project to do all the work, and just implements a caching layer on top.\n        ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_cache', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_project', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='name', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_cache', ctx=Load())]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_cache', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load()))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='clear_errors', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_project', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_cache', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Name(id='result', ctx=Load()))])]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[]), FunctionDef(name='score_url', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='url')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Give an url a score which can be used to choose preferred URLs\n        for a given project release.\n        ')), Assign(targets=[Name(id='t', ctx=Store())], value=Call(func=Name(id='urlparse', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[])), Assign(targets=[Name(id='basename', ctx=Store())], value=Call(func=Attribute(value=Name(id='posixpath', ctx=Load()), attr='basename', ctx=Load()), args=[Attribute(value=Name(id='t', ctx=Load()), attr='path', ctx=Load())], keywords=[])), Assign(targets=[Name(id='compatible', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='is_wheel', ctx=Store())], value=Call(func=Attribute(value=Name(id='basename', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='.whl')], keywords=[])), Assign(targets=[Name(id='is_downloadable', ctx=Store())], value=Call(func=Attribute(value=Name(id='basename', ctx=Load()), attr='endswith', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='downloadable_extensions', ctx=Load())], keywords=[])), If(test=Name(id='is_wheel', ctx=Load()), body=[Assign(targets=[Name(id='compatible', ctx=Store())], value=Call(func=Name(id='is_compatible', ctx=Load()), args=[Call(func=Name(id='Wheel', ctx=Load()), args=[Name(id='basename', ctx=Load())], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='wheel_tags', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Tuple(elts=[Compare(left=Attribute(value=Name(id='t', ctx=Load()), attr='scheme', ctx=Load()), ops=[Eq()], comparators=[Constant(value='https')]), Compare(left=Constant(value='pypi.org'), ops=[In()], comparators=[Attribute(value=Name(id='t', ctx=Load()), attr='netloc', ctx=Load())]), Name(id='is_downloadable', ctx=Load()), Name(id='is_wheel', ctx=Load()), Name(id='compatible', ctx=Load()), Name(id='basename', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='prefer_url', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='url1'), arg(arg='url2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Choose one of two URLs where both are candidates for distribution\n        archives for the same version of a distribution (for example,\n        .tar.gz vs. zip).\n\n        The current implementation favours https:// URLs over http://, archives\n        from PyPI over those from other locations, wheel compatibility (if a\n        wheel) and then the archive name.\n        ')), Assign(targets=[Name(id='result', ctx=Store())], value=Name(id='url2', ctx=Load())), If(test=Name(id='url1', ctx=Load()), body=[Assign(targets=[Name(id='s1', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='score_url', ctx=Load()), args=[Name(id='url1', ctx=Load())], keywords=[])), Assign(targets=[Name(id='s2', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='score_url', ctx=Load()), args=[Name(id='url2', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='s1', ctx=Load()), ops=[Gt()], comparators=[Name(id='s2', ctx=Load())]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Name(id='url1', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='result', ctx=Load()), ops=[NotEq()], comparators=[Name(id='url2', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Not replacing %r with %r'), Name(id='url1', ctx=Load()), Name(id='url2', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Replacing %r with %r'), Name(id='url1', ctx=Load()), Name(id='url2', ctx=Load())], keywords=[]))])], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[]), FunctionDef(name='split_filename', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='filename'), arg(arg='project_name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Attempt to split a filename in project name, version and Python version.\n        ')), Return(value=Call(func=Name(id='split_filename', ctx=Load()), args=[Name(id='filename', ctx=Load()), Name(id='project_name', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='convert_url_to_download_info', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='url'), arg(arg='project_name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        See if a URL is a candidate for a download URL for a project (the URL\n        has typically been scraped from an HTML page).\n\n        If it is, a dictionary is returned with keys "name", "version",\n        "filename" and "url"; otherwise, None is returned.\n        ')), FunctionDef(name='same_project', args=arguments(posonlyargs=[], args=[arg(arg='name1'), arg(arg='name2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Compare(left=Call(func=Name(id='normalize_name', ctx=Load()), args=[Name(id='name1', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='normalize_name', ctx=Load()), args=[Name(id='name2', ctx=Load())], keywords=[])]))], decorator_list=[]), Assign(targets=[Name(id='result', ctx=Store())], value=Constant(value=None)), Assign(targets=[Tuple(elts=[Name(id='scheme', ctx=Store()), Name(id='netloc', ctx=Store()), Name(id='path', ctx=Store()), Name(id='params', ctx=Store()), Name(id='query', ctx=Store()), Name(id='frag', ctx=Store())], ctx=Store())], value=Call(func=Name(id='urlparse', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='frag', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), attr='startswith', ctx=Load()), args=[Constant(value='egg=')], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='%s: version hint in fragment: %r'), Name(id='project_name', ctx=Load()), Name(id='frag', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='m', ctx=Store())], value=Call(func=Attribute(value=Name(id='HASHER_HASH', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='frag', ctx=Load())], keywords=[])), If(test=Name(id='m', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='algo', ctx=Store()), Name(id='digest', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='groups', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Tuple(elts=[Name(id='algo', ctx=Store()), Name(id='digest', ctx=Store())], ctx=Store())], value=Tuple(elts=[Constant(value=None), Constant(value=None)], ctx=Load()))]), Assign(targets=[Name(id='origpath', ctx=Store())], value=Name(id='path', ctx=Load())), If(test=BoolOp(op=And(), values=[Name(id='path', ctx=Load()), Compare(left=Subscript(value=Name(id='path', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), ops=[Eq()], comparators=[Constant(value='/')])]), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Subscript(value=Name(id='path', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))], orelse=[]), If(test=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='.whl')], keywords=[]), body=[Try(body=[Assign(targets=[Name(id='wheel', ctx=Store())], value=Call(func=Name(id='Wheel', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='is_compatible', ctx=Load()), args=[Name(id='wheel', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='wheel_tags', ctx=Load())], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Wheel not compatible: %s'), Name(id='path', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='project_name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='include', ctx=Store())], value=Constant(value=True))], orelse=[Assign(targets=[Name(id='include', ctx=Store())], value=Call(func=Name(id='same_project', ctx=Load()), args=[Attribute(value=Name(id='wheel', ctx=Load()), attr='name', ctx=Load()), Name(id='project_name', ctx=Load())], keywords=[]))]), If(test=Name(id='include', ctx=Load()), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Dict(keys=[Constant(value='name'), Constant(value='version'), Constant(value='filename'), Constant(value='url'), Constant(value='python-version')], values=[Attribute(value=Name(id='wheel', ctx=Load()), attr='name', ctx=Load()), Attribute(value=Name(id='wheel', ctx=Load()), attr='version', ctx=Load()), Attribute(value=Name(id='wheel', ctx=Load()), attr='filename', ctx=Load()), Call(func=Name(id='urlunparse', ctx=Load()), args=[Tuple(elts=[Name(id='scheme', ctx=Load()), Name(id='netloc', ctx=Load()), Name(id='origpath', ctx=Load()), Name(id='params', ctx=Load()), Name(id='query', ctx=Load()), Constant(value='')], ctx=Load())], keywords=[]), Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[ListComp(elt=Call(func=Attribute(value=Constant(value='.'), attr='join', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Subscript(value=Name(id='v', ctx=Load()), slice=Slice(lower=Constant(value=2)), ctx=Load())], keywords=[])], keywords=[]), generators=[comprehension(target=Name(id='v', ctx=Store()), iter=Attribute(value=Name(id='wheel', ctx=Load()), attr='pyver', ctx=Load()), ifs=[], is_async=0)])], keywords=[])]))], orelse=[])])], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='e', body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='invalid path for wheel: %s'), Name(id='path', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], orelse=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='endswith', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='downloadable_extensions', ctx=Load())], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Not downloadable: %s'), Name(id='path', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='path', ctx=Store()), Name(id='filename', ctx=Store())], value=Call(func=Attribute(value=Name(id='posixpath', ctx=Load()), attr='basename', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), For(target=Name(id='ext', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='downloadable_extensions', ctx=Load()), body=[If(test=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='endswith', ctx=Load()), args=[Name(id='ext', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Subscript(value=Name(id='path', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Call(func=Name(id='len', ctx=Load()), args=[Name(id='ext', ctx=Load())], keywords=[]))), ctx=Load())), Assign(targets=[Name(id='t', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='split_filename', ctx=Load()), args=[Name(id='path', ctx=Load()), Name(id='project_name', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='t', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='No match for project/version: %s'), Name(id='path', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Tuple(elts=[Name(id='name', ctx=Store()), Name(id='version', ctx=Store()), Name(id='pyver', ctx=Store())], ctx=Store())], value=Name(id='t', ctx=Load())), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Name(id='project_name', ctx=Load())), Call(func=Name(id='same_project', ctx=Load()), args=[Name(id='project_name', ctx=Load()), Name(id='name', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Dict(keys=[Constant(value='name'), Constant(value='version'), Constant(value='filename'), Constant(value='url')], values=[Name(id='name', ctx=Load()), Name(id='version', ctx=Load()), Name(id='filename', ctx=Load()), Call(func=Name(id='urlunparse', ctx=Load()), args=[Tuple(elts=[Name(id='scheme', ctx=Load()), Name(id='netloc', ctx=Load()), Name(id='origpath', ctx=Load()), Name(id='params', ctx=Load()), Name(id='query', ctx=Load()), Constant(value='')], ctx=Load())], keywords=[])])), If(test=Name(id='pyver', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='python-version'), ctx=Store())], value=Name(id='pyver', ctx=Load()))], orelse=[])], orelse=[])]), Break()], orelse=[])], orelse=[])])]), If(test=BoolOp(op=And(), values=[Name(id='result', ctx=Load()), Name(id='algo', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=BinOp(left=Constant(value='%s_digest'), op=Mod(), right=Name(id='algo', ctx=Load())), ctx=Store())], value=Name(id='digest', ctx=Load()))], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[]), FunctionDef(name='_get_digest', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Get a digest from a dictionary by looking at a "digests" dictionary\n        or keys of the form \'algo_digest\'.\n\n        Returns a 2-tuple (algo, digest) if found, else None. Currently\n        looks only for SHA256, then MD5.\n        ')), Assign(targets=[Name(id='result', ctx=Store())], value=Constant(value=None)), If(test=Compare(left=Constant(value='digests'), ops=[In()], comparators=[Name(id='info', ctx=Load())]), body=[Assign(targets=[Name(id='digests', ctx=Store())], value=Subscript(value=Name(id='info', ctx=Load()), slice=Constant(value='digests'), ctx=Load())), For(target=Name(id='algo', ctx=Store()), iter=Tuple(elts=[Constant(value='sha256'), Constant(value='md5')], ctx=Load()), body=[If(test=Compare(left=Name(id='algo', ctx=Load()), ops=[In()], comparators=[Name(id='digests', ctx=Load())]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Tuple(elts=[Name(id='algo', ctx=Load()), Subscript(value=Name(id='digests', ctx=Load()), slice=Name(id='algo', ctx=Load()), ctx=Load())], ctx=Load())), Break()], orelse=[])], orelse=[])], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='result', ctx=Load())), body=[For(target=Name(id='algo', ctx=Store()), iter=Tuple(elts=[Constant(value='sha256'), Constant(value='md5')], ctx=Load()), body=[Assign(targets=[Name(id='key', ctx=Store())], value=BinOp(left=Constant(value='%s_digest'), op=Mod(), right=Name(id='algo', ctx=Load()))), If(test=Compare(left=Name(id='key', ctx=Load()), ops=[In()], comparators=[Name(id='info', ctx=Load())]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Tuple(elts=[Name(id='algo', ctx=Load()), Subscript(value=Name(id='info', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load())], ctx=Load())), Break()], orelse=[])], orelse=[])], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[]), FunctionDef(name='_update_version_data', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='result'), arg(arg='info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Update a result dictionary (the final result from _get_project) with a\n        dictionary for a specific version, which typically holds information\n        gleaned from a filename or URL for an archive for the distribution.\n        ')), Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Attribute(value=Name(id='info', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='name')], keywords=[])), Assign(targets=[Name(id='version', ctx=Store())], value=Call(func=Attribute(value=Name(id='info', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='version')], keywords=[])), If(test=Compare(left=Name(id='version', ctx=Load()), ops=[In()], comparators=[Name(id='result', ctx=Load())]), body=[Assign(targets=[Name(id='dist', ctx=Store())], value=Subscript(value=Name(id='result', ctx=Load()), slice=Name(id='version', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='md', ctx=Store())], value=Attribute(value=Name(id='dist', ctx=Load()), attr='metadata', ctx=Load()))], orelse=[Assign(targets=[Name(id='dist', ctx=Store())], value=Call(func=Name(id='make_dist', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='version', ctx=Load())], keywords=[keyword(arg='scheme', value=Attribute(value=Name(id='self', ctx=Load()), attr='scheme', ctx=Load()))])), Assign(targets=[Name(id='md', ctx=Store())], value=Attribute(value=Name(id='dist', ctx=Load()), attr='metadata', ctx=Load()))]), Assign(targets=[Attribute(value=Name(id='dist', ctx=Load()), attr='digest', ctx=Store()), Name(id='digest', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_digest', ctx=Load()), args=[Name(id='info', ctx=Load())], keywords=[])), Assign(targets=[Name(id='url', ctx=Store())], value=Subscript(value=Name(id='info', ctx=Load()), slice=Constant(value='url'), ctx=Load())), Assign(targets=[Subscript(value=Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='digests'), ctx=Load()), slice=Name(id='url', ctx=Load()), ctx=Store())], value=Name(id='digest', ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='md', ctx=Load()), attr='source_url', ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Name(id='info', ctx=Load()), slice=Constant(value='url'), ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='md', ctx=Load()), attr='source_url', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='prefer_url', ctx=Load()), args=[Attribute(value=Name(id='md', ctx=Load()), attr='source_url', ctx=Load()), Name(id='url', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='urls'), ctx=Load()), attr='setdefault', ctx=Load()), args=[Name(id='version', ctx=Load()), Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])], keywords=[]), attr='add', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='dist', ctx=Load()), attr='locator', ctx=Store())], value=Name(id='self', ctx=Load())), Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=Name(id='version', ctx=Load()), ctx=Store())], value=Name(id='dist', ctx=Load()))], decorator_list=[]), FunctionDef(name='locate', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='requirement'), arg(arg='prereleases')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value="\n        Find the most recent distribution which matches the given\n        requirement.\n\n        :param requirement: A requirement of the form 'foo (1.0)' or perhaps\n                            'foo (>= 1.0, < 2.0, != 1.3)'\n        :param prereleases: If ``True``, allow pre-release versions\n                            to be located. Otherwise, pre-release versions\n                            are not returned.\n        :return: A :class:`Distribution` instance, or ``None`` if no such\n                 distribution could be located.\n        ")), Assign(targets=[Name(id='result', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='r', ctx=Store())], value=Call(func=Name(id='parse_requirement', ctx=Load()), args=[Name(id='requirement', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='r', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='DistlibException', ctx=Load()), args=[BinOp(left=Constant(value='Not a valid requirement: %r'), op=Mod(), right=Name(id='requirement', ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Name(id='scheme', ctx=Store())], value=Call(func=Name(id='get_scheme', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='scheme', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='matcher', ctx=Store()), Name(id='matcher', ctx=Store())], value=Call(func=Attribute(value=Name(id='scheme', ctx=Load()), attr='matcher', ctx=Load()), args=[Attribute(value=Name(id='r', ctx=Load()), attr='requirement', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='matcher: %s (%s)'), Name(id='matcher', ctx=Load()), Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='matcher', ctx=Load())], keywords=[]), attr='__name__', ctx=Load())], keywords=[])), Assign(targets=[Name(id='versions', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_project', ctx=Load()), args=[Attribute(value=Name(id='r', ctx=Load()), attr='name', ctx=Load())], keywords=[])), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='versions', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=2)]), body=[Assign(targets=[Name(id='slist', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='vcls', ctx=Store())], value=Attribute(value=Name(id='matcher', ctx=Load()), attr='version_class', ctx=Load())), For(target=Name(id='k', ctx=Store()), iter=Name(id='versions', ctx=Load()), body=[If(test=Compare(left=Name(id='k', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='urls'), Constant(value='digests')], ctx=Load())]), body=[Continue()], orelse=[]), Try(body=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='matcher', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='k', ctx=Load())], keywords=[])), body=[Pass()], orelse=[If(test=BoolOp(op=Or(), values=[Name(id='prereleases', ctx=Load()), UnaryOp(op=Not(), operand=Attribute(value=Call(func=Name(id='vcls', ctx=Load()), args=[Name(id='k', ctx=Load())], keywords=[]), attr='is_prerelease', ctx=Load()))]), body=[Expr(value=Call(func=Attribute(value=Name(id='slist', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='k', ctx=Load())], keywords=[]))], orelse=[])])], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='error matching %s with %r'), Name(id='matcher', ctx=Load()), Name(id='k', ctx=Load())], keywords=[])), Pass()])], orelse=[], finalbody=[])], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='slist', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='slist', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='slist', ctx=Load())], keywords=[keyword(arg='key', value=Attribute(value=Name(id='scheme', ctx=Load()), attr='key', ctx=Load()))]))], orelse=[]), If(test=Name(id='slist', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='sorted list: %s'), Name(id='slist', ctx=Load())], keywords=[])), Assign(targets=[Name(id='version', ctx=Store())], value=Subscript(value=Name(id='slist', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())), Assign(targets=[Name(id='result', ctx=Store())], value=Subscript(value=Name(id='versions', ctx=Load()), slice=Name(id='version', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), If(test=Name(id='result', ctx=Load()), body=[If(test=Attribute(value=Name(id='r', ctx=Load()), attr='extras', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='extras', ctx=Store())], value=Attribute(value=Name(id='r', ctx=Load()), attr='extras', ctx=Load()))], orelse=[]), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='download_urls', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='versions', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='urls'), Dict(keys=[], values=[])], keywords=[]), attr='get', ctx=Load()), args=[Name(id='version', ctx=Load()), Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='d', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='sd', ctx=Store())], value=Call(func=Attribute(value=Name(id='versions', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='digests'), Dict(keys=[], values=[])], keywords=[])), For(target=Name(id='url', ctx=Store()), iter=Attribute(value=Name(id='result', ctx=Load()), attr='download_urls', ctx=Load()), body=[If(test=Compare(left=Name(id='url', ctx=Load()), ops=[In()], comparators=[Name(id='sd', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='d', ctx=Load()), slice=Name(id='url', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='sd', ctx=Load()), slice=Name(id='url', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='digests', ctx=Store())], value=Name(id='d', ctx=Load()))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='matcher', ctx=Store())], value=Constant(value=None)), Return(value=Name(id='result', ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='PyPIRPCLocator', bases=[Name(id='Locator', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    This locator uses XML-RPC to locate distributions. It therefore\n    cannot be used with simple mirrors (that only mirror file content).\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='url')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Constant(value='\n        Initialise an instance.\n\n        :param url: The URL to use for XML-RPC.\n        :param kwargs: Passed to the superclass constructor.\n        ')), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[Name(id='PyPIRPCLocator', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='base_url', ctx=Store())], value=Name(id='url', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='client', ctx=Store())], value=Call(func=Name(id='ServerProxy', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[keyword(arg='timeout', value=Constant(value=3.0))]))], decorator_list=[]), FunctionDef(name='get_distribution_names', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return all the distribution names known to this locator.\n        ')), Return(value=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='client', ctx=Load()), attr='list_packages', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='_get_project', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Dict(keys=[Constant(value='urls'), Constant(value='digests')], values=[Dict(keys=[], values=[]), Dict(keys=[], values=[])])), Assign(targets=[Name(id='versions', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='client', ctx=Load()), attr='package_releases', ctx=Load()), args=[Name(id='name', ctx=Load()), Constant(value=True)], keywords=[])), For(target=Name(id='v', ctx=Store()), iter=Name(id='versions', ctx=Load()), body=[Assign(targets=[Name(id='urls', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='client', ctx=Load()), attr='release_urls', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='v', ctx=Load())], keywords=[])), Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='client', ctx=Load()), attr='release_data', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='v', ctx=Load())], keywords=[])), Assign(targets=[Name(id='metadata', ctx=Store())], value=Call(func=Name(id='Metadata', ctx=Load()), args=[], keywords=[keyword(arg='scheme', value=Attribute(value=Name(id='self', ctx=Load()), attr='scheme', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='metadata', ctx=Load()), attr='name', ctx=Store())], value=Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='name'), ctx=Load())), Assign(targets=[Attribute(value=Name(id='metadata', ctx=Load()), attr='version', ctx=Store())], value=Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='version'), ctx=Load())), Assign(targets=[Attribute(value=Name(id='metadata', ctx=Load()), attr='license', ctx=Store())], value=Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='license')], keywords=[])), Assign(targets=[Attribute(value=Name(id='metadata', ctx=Load()), attr='keywords', ctx=Store())], value=Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='keywords'), List(elts=[], ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='metadata', ctx=Load()), attr='summary', ctx=Store())], value=Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='summary')], keywords=[])), Assign(targets=[Name(id='dist', ctx=Store())], value=Call(func=Name(id='Distribution', ctx=Load()), args=[Name(id='metadata', ctx=Load())], keywords=[])), If(test=Name(id='urls', ctx=Load()), body=[Assign(targets=[Name(id='info', ctx=Store())], value=Subscript(value=Name(id='urls', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Attribute(value=Name(id='metadata', ctx=Load()), attr='source_url', ctx=Store())], value=Subscript(value=Name(id='info', ctx=Load()), slice=Constant(value='url'), ctx=Load())), Assign(targets=[Attribute(value=Name(id='dist', ctx=Load()), attr='digest', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_digest', ctx=Load()), args=[Name(id='info', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='dist', ctx=Load()), attr='locator', ctx=Store())], value=Name(id='self', ctx=Load())), Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=Name(id='v', ctx=Load()), ctx=Store())], value=Name(id='dist', ctx=Load())), For(target=Name(id='info', ctx=Store()), iter=Name(id='urls', ctx=Load()), body=[Assign(targets=[Name(id='url', ctx=Store())], value=Subscript(value=Name(id='info', ctx=Load()), slice=Constant(value='url'), ctx=Load())), Assign(targets=[Name(id='digest', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_digest', ctx=Load()), args=[Name(id='info', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='urls'), ctx=Load()), attr='setdefault', ctx=Load()), args=[Name(id='v', ctx=Load()), Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])], keywords=[]), attr='add', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='digests'), ctx=Load()), slice=Name(id='url', ctx=Load()), ctx=Store())], value=Name(id='digest', ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='PyPIJSONLocator', bases=[Name(id='Locator', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="\n    This locator uses PyPI's JSON interface. It's very limited in functionality\n    and probably not worth using.\n    ")), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='url')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[Name(id='PyPIJSONLocator', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='base_url', ctx=Store())], value=Call(func=Name(id='ensure_slash', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='get_distribution_names', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return all the distribution names known to this locator.\n        ')), Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[Constant(value='Not available from this locator')], keywords=[]))], decorator_list=[]), FunctionDef(name='_get_project', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Dict(keys=[Constant(value='urls'), Constant(value='digests')], values=[Dict(keys=[], values=[]), Dict(keys=[], values=[])])), Assign(targets=[Name(id='url', ctx=Store())], value=Call(func=Name(id='urljoin', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='base_url', ctx=Load()), BinOp(left=Constant(value='%s/json'), op=Mod(), right=Call(func=Name(id='quote', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]))], keywords=[])), Try(body=[Assign(targets=[Name(id='resp', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='opener', ctx=Load()), attr='open', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[])), Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='resp', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]), attr='decode', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='d', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='loads', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])), Assign(targets=[Name(id='md', ctx=Store())], value=Call(func=Name(id='Metadata', ctx=Load()), args=[], keywords=[keyword(arg='scheme', value=Attribute(value=Name(id='self', ctx=Load()), attr='scheme', ctx=Load()))])), Assign(targets=[Name(id='data', ctx=Store())], value=Subscript(value=Name(id='d', ctx=Load()), slice=Constant(value='info'), ctx=Load())), Assign(targets=[Attribute(value=Name(id='md', ctx=Load()), attr='name', ctx=Store())], value=Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='name'), ctx=Load())), Assign(targets=[Attribute(value=Name(id='md', ctx=Load()), attr='version', ctx=Store())], value=Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='version'), ctx=Load())), Assign(targets=[Attribute(value=Name(id='md', ctx=Load()), attr='license', ctx=Store())], value=Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='license')], keywords=[])), Assign(targets=[Attribute(value=Name(id='md', ctx=Load()), attr='keywords', ctx=Store())], value=Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='keywords'), List(elts=[], ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='md', ctx=Load()), attr='summary', ctx=Store())], value=Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='summary')], keywords=[])), Assign(targets=[Name(id='dist', ctx=Store())], value=Call(func=Name(id='Distribution', ctx=Load()), args=[Name(id='md', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='dist', ctx=Load()), attr='locator', ctx=Store())], value=Name(id='self', ctx=Load())), Assign(targets=[Name(id='urls', ctx=Store())], value=Subscript(value=Name(id='d', ctx=Load()), slice=Constant(value='urls'), ctx=Load())), Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=Attribute(value=Name(id='md', ctx=Load()), attr='version', ctx=Load()), ctx=Store())], value=Name(id='dist', ctx=Load())), For(target=Name(id='info', ctx=Store()), iter=Subscript(value=Name(id='d', ctx=Load()), slice=Constant(value='urls'), ctx=Load()), body=[Assign(targets=[Name(id='url', ctx=Store())], value=Subscript(value=Name(id='info', ctx=Load()), slice=Constant(value='url'), ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='dist', ctx=Load()), attr='download_urls', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='dist', ctx=Load()), attr='digests', ctx=Load()), slice=Name(id='url', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_digest', ctx=Load()), args=[Name(id='info', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='urls'), ctx=Load()), attr='setdefault', ctx=Load()), args=[Attribute(value=Name(id='md', ctx=Load()), attr='version', ctx=Load()), Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])], keywords=[]), attr='add', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='digests'), ctx=Load()), slice=Name(id='url', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_digest', ctx=Load()), args=[Name(id='info', ctx=Load())], keywords=[]))], orelse=[]), For(target=Tuple(elts=[Name(id='version', ctx=Store()), Name(id='infos', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Subscript(value=Name(id='d', ctx=Load()), slice=Constant(value='releases'), ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Name(id='version', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='md', ctx=Load()), attr='version', ctx=Load())]), body=[Continue()], orelse=[]), Assign(targets=[Name(id='omd', ctx=Store())], value=Call(func=Name(id='Metadata', ctx=Load()), args=[], keywords=[keyword(arg='scheme', value=Attribute(value=Name(id='self', ctx=Load()), attr='scheme', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='omd', ctx=Load()), attr='name', ctx=Store())], value=Attribute(value=Name(id='md', ctx=Load()), attr='name', ctx=Load())), Assign(targets=[Attribute(value=Name(id='omd', ctx=Load()), attr='version', ctx=Store())], value=Name(id='version', ctx=Load())), Assign(targets=[Name(id='odist', ctx=Store())], value=Call(func=Name(id='Distribution', ctx=Load()), args=[Name(id='omd', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='odist', ctx=Load()), attr='locator', ctx=Store())], value=Name(id='self', ctx=Load())), Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=Name(id='version', ctx=Load()), ctx=Store())], value=Name(id='odist', ctx=Load())), For(target=Name(id='info', ctx=Store()), iter=Name(id='infos', ctx=Load()), body=[Assign(targets=[Name(id='url', ctx=Store())], value=Subscript(value=Name(id='info', ctx=Load()), slice=Constant(value='url'), ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='odist', ctx=Load()), attr='download_urls', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='odist', ctx=Load()), attr='digests', ctx=Load()), slice=Name(id='url', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_digest', ctx=Load()), args=[Name(id='info', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='urls'), ctx=Load()), attr='setdefault', ctx=Load()), args=[Name(id='version', ctx=Load()), Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])], keywords=[]), attr='add', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='digests'), ctx=Load()), slice=Name(id='url', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_digest', ctx=Load()), args=[Name(id='info', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='e', body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='errors', ctx=Load()), attr='put', ctx=Load()), args=[Call(func=Name(id='text_type', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='exception', ctx=Load()), args=[Constant(value='JSON fetch failed: %s'), Name(id='e', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='Page', bases=[Name(id='object', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    This class represents a scraped HTML page.\n    ')), Assign(targets=[Name(id='_href', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='\n(rel\\s*=\\s*(?:"(?P<rel1>[^"]*)"|\'(?P<rel2>[^\']*)\'|(?P<rel3>[^>\\s\n]*))\\s+)?\nhref\\s*=\\s*(?:"(?P<url1>[^"]*)"|\'(?P<url2>[^\']*)\'|(?P<url3>[^>\\s\n]*))\n(\\s+rel\\s*=\\s*(?:"(?P<rel4>[^"]*)"|\'(?P<rel5>[^\']*)\'|(?P<rel6>[^>\\s\n]*)))?\n'), BinOp(left=BinOp(left=Attribute(value=Name(id='re', ctx=Load()), attr='I', ctx=Load()), op=BitOr(), right=Attribute(value=Name(id='re', ctx=Load()), attr='S', ctx=Load())), op=BitOr(), right=Attribute(value=Name(id='re', ctx=Load()), attr='X', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='_base', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='<base\\s+href\\s*=\\s*[\'"]?([^\'">]+)'), BinOp(left=Attribute(value=Name(id='re', ctx=Load()), attr='I', ctx=Load()), op=BitOr(), right=Attribute(value=Name(id='re', ctx=Load()), attr='S', ctx=Load()))], keywords=[])), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data'), arg(arg='url')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Initialise an instance with the Unicode page contents and the URL they\n        came from.\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='data', ctx=Store())], value=Name(id='data', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='base_url', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='url', ctx=Store())], value=Name(id='url', ctx=Load())), Assign(targets=[Name(id='m', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_base', ctx=Load()), attr='search', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='data', ctx=Load())], keywords=[])), If(test=Name(id='m', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='base_url', ctx=Store())], value=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value=1)], keywords=[]))], orelse=[])], decorator_list=[]), Assign(targets=[Name(id='_clean_re', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='[^a-z0-9$&+,/:;=?@.#%_\\\\|-]'), Attribute(value=Name(id='re', ctx=Load()), attr='I', ctx=Load())], keywords=[])), FunctionDef(name='links', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return the URLs of all the links on a page together with information\n        about their "rel" attribute, for determining which ones to treat as\n        downloads and which ones to queue for further scraping.\n        ')), FunctionDef(name='clean', args=arguments(posonlyargs=[], args=[arg(arg='url')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Tidy up an URL.')), Assign(targets=[Tuple(elts=[Name(id='scheme', ctx=Store()), Name(id='netloc', ctx=Store()), Name(id='path', ctx=Store()), Name(id='params', ctx=Store()), Name(id='query', ctx=Store()), Name(id='frag', ctx=Store())], ctx=Store())], value=Call(func=Name(id='urlparse', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='urlunparse', ctx=Load()), args=[Tuple(elts=[Name(id='scheme', ctx=Load()), Name(id='netloc', ctx=Load()), Call(func=Name(id='quote', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), Name(id='params', ctx=Load()), Name(id='query', ctx=Load()), Name(id='frag', ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[]), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), For(target=Name(id='match', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_href', ctx=Load()), attr='finditer', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='data', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='d', ctx=Store())], value=Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='groupdict', ctx=Load()), args=[Constant(value='')], keywords=[])), Assign(targets=[Name(id='rel', ctx=Store())], value=BoolOp(op=Or(), values=[Subscript(value=Name(id='d', ctx=Load()), slice=Constant(value='rel1'), ctx=Load()), Subscript(value=Name(id='d', ctx=Load()), slice=Constant(value='rel2'), ctx=Load()), Subscript(value=Name(id='d', ctx=Load()), slice=Constant(value='rel3'), ctx=Load()), Subscript(value=Name(id='d', ctx=Load()), slice=Constant(value='rel4'), ctx=Load()), Subscript(value=Name(id='d', ctx=Load()), slice=Constant(value='rel5'), ctx=Load()), Subscript(value=Name(id='d', ctx=Load()), slice=Constant(value='rel6'), ctx=Load())])), Assign(targets=[Name(id='url', ctx=Store())], value=BoolOp(op=Or(), values=[Subscript(value=Name(id='d', ctx=Load()), slice=Constant(value='url1'), ctx=Load()), Subscript(value=Name(id='d', ctx=Load()), slice=Constant(value='url2'), ctx=Load()), Subscript(value=Name(id='d', ctx=Load()), slice=Constant(value='url3'), ctx=Load())])), Assign(targets=[Name(id='url', ctx=Store())], value=Call(func=Name(id='urljoin', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='base_url', ctx=Load()), Name(id='url', ctx=Load())], keywords=[])), Assign(targets=[Name(id='url', ctx=Store())], value=Call(func=Name(id='unescape', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[])), Assign(targets=[Name(id='url', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_clean_re', ctx=Load()), attr='sub', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='m')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=BinOp(left=Constant(value='%%%2x'), op=Mod(), right=Call(func=Name(id='ord', ctx=Load()), args=[Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value=0)], keywords=[])], keywords=[]))), Name(id='url', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='add', ctx=Load()), args=[Tuple(elts=[Name(id='url', ctx=Load()), Name(id='rel', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[keyword(arg='key', value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='t')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()))), keyword(arg='reverse', value=Constant(value=True))])), Return(value=Name(id='result', ctx=Load()))], decorator_list=[Name(id='cached_property', ctx=Load())])], decorator_list=[]), ClassDef(name='SimpleScrapingLocator', bases=[Name(id='Locator', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="\n    A locator which scrapes HTML pages to locate downloads for a distribution.\n    This runs multiple threads to do the I/O; performance is at least as good\n    as pip's PackageFinder, which works in an analogous fashion.\n    ")), Assign(targets=[Name(id='decoders', ctx=Store())], value=Dict(keys=[Constant(value='deflate'), Constant(value='gzip'), Constant(value='none')], values=[Attribute(value=Name(id='zlib', ctx=Load()), attr='decompress', ctx=Load()), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='b')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='gzip', ctx=Load()), attr='GzipFile', ctx=Load()), args=[], keywords=[keyword(arg='fileobj', value=Call(func=Name(id='BytesIO', ctx=Load()), args=[Name(id='b', ctx=Load())], keywords=[]))]), attr='read', ctx=Load()), args=[], keywords=[])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='b')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Name(id='b', ctx=Load()))])), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='url'), arg(arg='timeout'), arg(arg='num_workers')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[Constant(value=None), Constant(value=10)]), body=[Expr(value=Constant(value='\n        Initialise an instance.\n        :param url: The root URL to use for scraping.\n        :param timeout: The timeout, in seconds, to be applied to requests.\n                        This defaults to ``None`` (no timeout specified).\n        :param num_workers: The number of worker threads you want to do I/O,\n                            This defaults to 10.\n        :param kwargs: Passed to the superclass.\n        ')), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[Name(id='SimpleScrapingLocator', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='base_url', ctx=Store())], value=Call(func=Name(id='ensure_slash', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='timeout', ctx=Store())], value=Name(id='timeout', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_page_cache', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_seen', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_to_fetch', ctx=Store())], value=Call(func=Attribute(value=Name(id='queue', ctx=Load()), attr='Queue', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_bad_hosts', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='skip_externals', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='num_workers', ctx=Store())], value=Name(id='num_workers', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_lock', ctx=Store())], value=Call(func=Attribute(value=Name(id='threading', ctx=Load()), attr='RLock', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_gplock', ctx=Store())], value=Call(func=Attribute(value=Name(id='threading', ctx=Load()), attr='RLock', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='platform_check', ctx=Store())], value=Constant(value=False))], decorator_list=[]), FunctionDef(name='_prepare_threads', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Threads are created only when get_project is called, and terminate\n        before it returns. They are there primarily to parallelise I/O (i.e.\n        fetching web pages).\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_threads', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='num_workers', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='t', ctx=Store())], value=Call(func=Attribute(value=Name(id='threading', ctx=Load()), attr='Thread', ctx=Load()), args=[], keywords=[keyword(arg='target', value=Attribute(value=Name(id='self', ctx=Load()), attr='_fetch', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='t', ctx=Load()), attr='daemon', ctx=Store())], value=Constant(value=True)), Expr(value=Call(func=Attribute(value=Name(id='t', ctx=Load()), attr='start', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_threads', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='_wait_threads', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Tell all the threads to terminate (by sending a sentinel value) and\n        wait for them to do so.\n        ')), For(target=Name(id='t', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_threads', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_to_fetch', ctx=Load()), attr='put', ctx=Load()), args=[Constant(value=None)], keywords=[]))], orelse=[]), For(target=Name(id='t', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_threads', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='t', ctx=Load()), attr='join', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_threads', ctx=Store())], value=List(elts=[], ctx=Load()))], decorator_list=[]), FunctionDef(name='_get_project', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Dict(keys=[Constant(value='urls'), Constant(value='digests')], values=[Dict(keys=[], values=[]), Dict(keys=[], values=[])])), With(items=[withitem(context_expr=Attribute(value=Name(id='self', ctx=Load()), attr='_gplock', ctx=Load()))], body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='result', ctx=Store())], value=Name(id='result', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='project_name', ctx=Store())], value=Name(id='name', ctx=Load())), Assign(targets=[Name(id='url', ctx=Store())], value=Call(func=Name(id='urljoin', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='base_url', ctx=Load()), BinOp(left=Constant(value='%s/'), op=Mod(), right=Call(func=Name(id='quote', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]))], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_seen', ctx=Load()), attr='clear', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_page_cache', ctx=Load()), attr='clear', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_prepare_threads', ctx=Load()), args=[], keywords=[])), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Queueing %s'), Name(id='url', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_to_fetch', ctx=Load()), attr='put', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_to_fetch', ctx=Load()), attr='join', ctx=Load()), args=[], keywords=[]))], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_wait_threads', ctx=Load()), args=[], keywords=[]))]), Delete(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='result', ctx=Del())])]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='platform_dependent', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='\\b(linux_(i\\d86|x86_64|arm\\w+)|win(32|_amd64)|macosx_?\\d+)\\b'), Attribute(value=Name(id='re', ctx=Load()), attr='I', ctx=Load())], keywords=[])), FunctionDef(name='_is_platform_dependent', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='url')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Does an URL refer to a platform-specific download?\n        ')), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='platform_dependent', ctx=Load()), attr='search', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_process_download', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='url')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        See if an URL is a suitable download for a project.\n\n        If it is, register information in the result dictionary (for\n        _get_project) about the specific version it's for.\n\n        Note that the return value isn't actually used other than as a boolean\n        value.\n        ")), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='platform_check', ctx=Load()), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_is_platform_dependent', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='info', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='info', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='convert_url_to_download_info', ctx=Load()), args=[Name(id='url', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='project_name', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='process_download: %s -> %s'), Name(id='url', ctx=Load()), Name(id='info', ctx=Load())], keywords=[])), If(test=Name(id='info', ctx=Load()), body=[With(items=[withitem(context_expr=Attribute(value=Name(id='self', ctx=Load()), attr='_lock', ctx=Load()))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_update_version_data', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='result', ctx=Load()), Name(id='info', ctx=Load())], keywords=[]))])], orelse=[]), Return(value=Name(id='info', ctx=Load()))], decorator_list=[]), FunctionDef(name='_should_queue', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='link'), arg(arg='referrer'), arg(arg='rel')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Determine whether a link URL from a referring page and with a\n        particular "rel" attribute should be queued for scraping.\n        ')), Assign(targets=[Tuple(elts=[Name(id='scheme', ctx=Store()), Name(id='netloc', ctx=Store()), Name(id='path', ctx=Store()), Name(id='_', ctx=Store()), Name(id='_', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Name(id='urlparse', ctx=Load()), args=[Name(id='link', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='endswith', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='source_extensions', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='binary_extensions', ctx=Load())), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='excluded_extensions', ctx=Load()))], keywords=[]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Constant(value=False))], orelse=[If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='skip_externals', ctx=Load()), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='link', ctx=Load()), attr='startswith', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='base_url', ctx=Load())], keywords=[]))]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Constant(value=False))], orelse=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='referrer', ctx=Load()), attr='startswith', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='base_url', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Constant(value=False))], orelse=[If(test=Compare(left=Name(id='rel', ctx=Load()), ops=[NotIn()], comparators=[Tuple(elts=[Constant(value='homepage'), Constant(value='download')], ctx=Load())]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Constant(value=False))], orelse=[If(test=Compare(left=Name(id='scheme', ctx=Load()), ops=[NotIn()], comparators=[Tuple(elts=[Constant(value='http'), Constant(value='https'), Constant(value='ftp')], ctx=Load())]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Constant(value=False))], orelse=[If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_is_platform_dependent', ctx=Load()), args=[Name(id='link', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Constant(value=False))], orelse=[Assign(targets=[Name(id='host', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='netloc', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=':'), Constant(value=1)], keywords=[]), slice=Constant(value=0), ctx=Load())), If(test=Compare(left=Call(func=Attribute(value=Name(id='host', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Constant(value='localhost')]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Constant(value=False))], orelse=[Assign(targets=[Name(id='result', ctx=Store())], value=Constant(value=True))])])])])])])]), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='should_queue: %s (%s) from %s -> %s'), Name(id='link', ctx=Load()), Name(id='rel', ctx=Load()), Name(id='referrer', ctx=Load()), Name(id='result', ctx=Load())], keywords=[])), Return(value=Name(id='result', ctx=Load()))], decorator_list=[]), FunctionDef(name='_fetch', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Get a URL to fetch from the work queue, get the HTML page, examine its\n        links for download candidates and candidates for further scraping.\n\n        This is a handy method to run in a thread.\n        ')), While(test=Constant(value=True), body=[Assign(targets=[Name(id='url', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_to_fetch', ctx=Load()), attr='get', ctx=Load()), args=[], keywords=[])), Try(body=[If(test=Name(id='url', ctx=Load()), body=[Assign(targets=[Name(id='page', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_page', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='page', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Continue()], orelse=[]), For(target=Tuple(elts=[Name(id='link', ctx=Store()), Name(id='rel', ctx=Store())], ctx=Store()), iter=Attribute(value=Name(id='page', ctx=Load()), attr='links', ctx=Load()), body=[If(test=Compare(left=Name(id='link', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_seen', ctx=Load())]), body=[Try(body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_seen', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='link', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_process_download', ctx=Load()), args=[Name(id='link', ctx=Load())], keywords=[])), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_should_queue', ctx=Load()), args=[Name(id='link', ctx=Load()), Name(id='url', ctx=Load()), Name(id='rel', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Queueing %s from %s'), Name(id='link', ctx=Load()), Name(id='url', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_to_fetch', ctx=Load()), attr='put', ctx=Load()), args=[Name(id='link', ctx=Load())], keywords=[]))], orelse=[])], handlers=[ExceptHandler(type=Name(id='MetadataInvalidError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], orelse=[])], orelse=[])], orelse=[])], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='e', body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='errors', ctx=Load()), attr='put', ctx=Load()), args=[Call(func=Name(id='text_type', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[])], keywords=[]))])], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_to_fetch', ctx=Load()), attr='task_done', ctx=Load()), args=[], keywords=[]))]), If(test=UnaryOp(op=Not(), operand=Name(id='url', ctx=Load())), body=[Break()], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='get_page', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='url')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Get the HTML for an URL, possibly from an in-memory cache.\n\n        XXX TODO Note: this cache is never actually cleared. It's assumed that\n        the data won't get stale over the lifetime of a locator instance (not\n        necessarily true for the default_locator).\n        ")), Assign(targets=[Tuple(elts=[Name(id='scheme', ctx=Store()), Name(id='netloc', ctx=Store()), Name(id='path', ctx=Store()), Name(id='_', ctx=Store()), Name(id='_', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Name(id='urlparse', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='scheme', ctx=Load()), ops=[Eq()], comparators=[Constant(value='file')]), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isdir', ctx=Load()), args=[Call(func=Name(id='url2pathname', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])], keywords=[])]), body=[Assign(targets=[Name(id='url', ctx=Store())], value=Call(func=Name(id='urljoin', ctx=Load()), args=[Call(func=Name(id='ensure_slash', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[]), Constant(value='index.html')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='url', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_page_cache', ctx=Load())]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_page_cache', ctx=Load()), slice=Name(id='url', ctx=Load()), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Returning %s from cache: %s'), Name(id='url', ctx=Load()), Name(id='result', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='host', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='netloc', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=':'), Constant(value=1)], keywords=[]), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='result', ctx=Store())], value=Constant(value=None)), If(test=Compare(left=Name(id='host', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_bad_hosts', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Skipping %s due to bad host %s'), Name(id='url', ctx=Load()), Name(id='host', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='req', ctx=Store())], value=Call(func=Name(id='Request', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[keyword(arg='headers', value=Dict(keys=[Constant(value='Accept-encoding')], values=[Constant(value='identity')]))])), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Fetching %s'), Name(id='url', ctx=Load())], keywords=[])), Assign(targets=[Name(id='resp', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='opener', ctx=Load()), attr='open', ctx=Load()), args=[Name(id='req', ctx=Load())], keywords=[keyword(arg='timeout', value=Attribute(value=Name(id='self', ctx=Load()), attr='timeout', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Fetched %s'), Name(id='url', ctx=Load())], keywords=[])), Assign(targets=[Name(id='headers', ctx=Store())], value=Call(func=Attribute(value=Name(id='resp', ctx=Load()), attr='info', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='content_type', ctx=Store())], value=Call(func=Attribute(value=Name(id='headers', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='Content-Type'), Constant(value='')], keywords=[])), If(test=Call(func=Attribute(value=Name(id='HTML_CONTENT_TYPE', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='content_type', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='final_url', ctx=Store())], value=Call(func=Attribute(value=Name(id='resp', ctx=Load()), attr='geturl', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Name(id='resp', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='encoding', ctx=Store())], value=Call(func=Attribute(value=Name(id='headers', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='Content-Encoding')], keywords=[])), If(test=Name(id='encoding', ctx=Load()), body=[Assign(targets=[Name(id='decoder', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='decoders', ctx=Load()), slice=Name(id='encoding', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Name(id='decoder', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='encoding', ctx=Store())], value=Constant(value='utf-8')), Assign(targets=[Name(id='m', ctx=Store())], value=Call(func=Attribute(value=Name(id='CHARSET', ctx=Load()), attr='search', ctx=Load()), args=[Name(id='content_type', ctx=Load())], keywords=[])), If(test=Name(id='m', ctx=Load()), body=[Assign(targets=[Name(id='encoding', ctx=Store())], value=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value=1)], keywords=[]))], orelse=[]), Try(body=[Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='decode', ctx=Load()), args=[Name(id='encoding', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='UnicodeError', ctx=Load()), body=[Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='latin-1')], keywords=[]))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='Page', ctx=Load()), args=[Name(id='data', ctx=Load()), Name(id='final_url', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_page_cache', ctx=Load()), slice=Name(id='final_url', ctx=Load()), ctx=Store())], value=Name(id='result', ctx=Load()))], orelse=[])], handlers=[ExceptHandler(type=Name(id='HTTPError', ctx=Load()), name='e', body=[If(test=Compare(left=Attribute(value=Name(id='e', ctx=Load()), attr='code', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=404)]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='exception', ctx=Load()), args=[Constant(value='Fetch failed: %s: %s'), Name(id='url', ctx=Load()), Name(id='e', ctx=Load())], keywords=[]))], orelse=[])]), ExceptHandler(type=Name(id='URLError', ctx=Load()), name='e', body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='exception', ctx=Load()), args=[Constant(value='Fetch failed: %s: %s'), Name(id='url', ctx=Load()), Name(id='e', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Attribute(value=Name(id='self', ctx=Load()), attr='_lock', ctx=Load()))], body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_bad_hosts', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='host', ctx=Load())], keywords=[]))])]), ExceptHandler(type=Name(id='Exception', ctx=Load()), name='e', body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='exception', ctx=Load()), args=[Constant(value='Fetch failed: %s: %s'), Name(id='url', ctx=Load()), Name(id='e', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_page_cache', ctx=Load()), slice=Name(id='url', ctx=Load()), ctx=Store())], value=Name(id='result', ctx=Load()))])])]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='_distname_re', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='<a href=[^>]*>([^<]+)<')], keywords=[])), FunctionDef(name='get_distribution_names', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return all the distribution names known to this locator.\n        ')), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='page', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_page', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='base_url', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='page', ctx=Load())), body=[Raise(exc=Call(func=Name(id='DistlibException', ctx=Load()), args=[BinOp(left=Constant(value='Unable to get %s'), op=Mod(), right=Attribute(value=Name(id='self', ctx=Load()), attr='base_url', ctx=Load()))], keywords=[]))], orelse=[]), For(target=Name(id='match', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distname_re', ctx=Load()), attr='finditer', ctx=Load()), args=[Attribute(value=Name(id='page', ctx=Load()), attr='data', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='add', ctx=Load()), args=[Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value=1)], keywords=[])], keywords=[]))], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='DirectoryLocator', bases=[Name(id='Locator', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    This class locates distributions in a directory tree.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='path')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Constant(value='\n        Initialise an instance.\n        :param path: The root of the directory tree to search.\n        :param kwargs: Passed to the superclass constructor,\n                       except for:\n                       * recursive - if True (the default), subdirectories are\n                         recursed into. If False, only the top-level directory\n                         is searched,\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='recursive', ctx=Store())], value=Call(func=Attribute(value=Name(id='kwargs', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='recursive'), Constant(value=True)], keywords=[])), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[Name(id='DirectoryLocator', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))])), Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isdir', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='DistlibException', ctx=Load()), args=[BinOp(left=Constant(value='Not a directory: %r'), op=Mod(), right=Name(id='path', ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='base_dir', ctx=Store())], value=Name(id='path', ctx=Load()))], decorator_list=[]), FunctionDef(name='should_include', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='filename'), arg(arg='parent')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Should a filename be considered as a candidate for a distribution\n        archive? As well as the filename, the directory which contains it\n        is provided, though not used by the current implementation.\n        ')), Return(value=Call(func=Attribute(value=Name(id='filename', ctx=Load()), attr='endswith', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='downloadable_extensions', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_get_project', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Dict(keys=[Constant(value='urls'), Constant(value='digests')], values=[Dict(keys=[], values=[]), Dict(keys=[], values=[])])), For(target=Tuple(elts=[Name(id='root', ctx=Store()), Name(id='dirs', ctx=Store()), Name(id='files', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='walk', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='base_dir', ctx=Load())], keywords=[]), body=[For(target=Name(id='fn', ctx=Store()), iter=Name(id='files', ctx=Load()), body=[If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='should_include', ctx=Load()), args=[Name(id='fn', ctx=Load()), Name(id='root', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='fn', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='root', ctx=Load()), Name(id='fn', ctx=Load())], keywords=[])), Assign(targets=[Name(id='url', ctx=Store())], value=Call(func=Name(id='urlunparse', ctx=Load()), args=[Tuple(elts=[Constant(value='file'), Constant(value=''), Call(func=Name(id='pathname2url', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Name(id='fn', ctx=Load())], keywords=[])], keywords=[]), Constant(value=''), Constant(value=''), Constant(value='')], ctx=Load())], keywords=[])), Assign(targets=[Name(id='info', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='convert_url_to_download_info', ctx=Load()), args=[Name(id='url', ctx=Load()), Name(id='name', ctx=Load())], keywords=[])), If(test=Name(id='info', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_update_version_data', ctx=Load()), args=[Name(id='result', ctx=Load()), Name(id='info', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[]), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='recursive', ctx=Load())), body=[Break()], orelse=[])], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_distribution_names', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return all the distribution names known to this locator.\n        ')), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='root', ctx=Store()), Name(id='dirs', ctx=Store()), Name(id='files', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='walk', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='base_dir', ctx=Load())], keywords=[]), body=[For(target=Name(id='fn', ctx=Store()), iter=Name(id='files', ctx=Load()), body=[If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='should_include', ctx=Load()), args=[Name(id='fn', ctx=Load()), Name(id='root', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='fn', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='root', ctx=Load()), Name(id='fn', ctx=Load())], keywords=[])), Assign(targets=[Name(id='url', ctx=Store())], value=Call(func=Name(id='urlunparse', ctx=Load()), args=[Tuple(elts=[Constant(value='file'), Constant(value=''), Call(func=Name(id='pathname2url', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Name(id='fn', ctx=Load())], keywords=[])], keywords=[]), Constant(value=''), Constant(value=''), Constant(value='')], ctx=Load())], keywords=[])), Assign(targets=[Name(id='info', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='convert_url_to_download_info', ctx=Load()), args=[Name(id='url', ctx=Load()), Constant(value=None)], keywords=[])), If(test=Name(id='info', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='add', ctx=Load()), args=[Subscript(value=Name(id='info', ctx=Load()), slice=Constant(value='name'), ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[]), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='recursive', ctx=Load())), body=[Break()], orelse=[])], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='JSONLocator', bases=[Name(id='Locator', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    This locator uses special extended metadata (not available on PyPI) and is\n    the basis of performant dependency resolution in distlib. Other locators\n    require archive downloads before dependencies can be determined! As you\n    might imagine, that can be slow.\n    ')), FunctionDef(name='get_distribution_names', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return all the distribution names known to this locator.\n        ')), Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[Constant(value='Not available from this locator')], keywords=[]))], decorator_list=[]), FunctionDef(name='_get_project', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Dict(keys=[Constant(value='urls'), Constant(value='digests')], values=[Dict(keys=[], values=[]), Dict(keys=[], values=[])])), Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Name(id='get_project_data', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), If(test=Name(id='data', ctx=Load()), body=[For(target=Name(id='info', ctx=Store()), iter=Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='files'), List(elts=[], ctx=Load())], keywords=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Subscript(value=Name(id='info', ctx=Load()), slice=Constant(value='ptype'), ctx=Load()), ops=[NotEq()], comparators=[Constant(value='sdist')]), Compare(left=Subscript(value=Name(id='info', ctx=Load()), slice=Constant(value='pyversion'), ctx=Load()), ops=[NotEq()], comparators=[Constant(value='source')])]), body=[Continue()], orelse=[]), Assign(targets=[Name(id='dist', ctx=Store())], value=Call(func=Name(id='make_dist', ctx=Load()), args=[Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='name'), ctx=Load()), Subscript(value=Name(id='info', ctx=Load()), slice=Constant(value='version'), ctx=Load())], keywords=[keyword(arg='summary', value=Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='summary'), Constant(value='Placeholder for summary')], keywords=[])), keyword(arg='scheme', value=Attribute(value=Name(id='self', ctx=Load()), attr='scheme', ctx=Load()))])), Assign(targets=[Name(id='md', ctx=Store())], value=Attribute(value=Name(id='dist', ctx=Load()), attr='metadata', ctx=Load())), Assign(targets=[Attribute(value=Name(id='md', ctx=Load()), attr='source_url', ctx=Store())], value=Subscript(value=Name(id='info', ctx=Load()), slice=Constant(value='url'), ctx=Load())), If(test=BoolOp(op=And(), values=[Compare(left=Constant(value='digest'), ops=[In()], comparators=[Name(id='info', ctx=Load())]), Subscript(value=Name(id='info', ctx=Load()), slice=Constant(value='digest'), ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='dist', ctx=Load()), attr='digest', ctx=Store())], value=Tuple(elts=[Constant(value='md5'), Subscript(value=Name(id='info', ctx=Load()), slice=Constant(value='digest'), ctx=Load())], ctx=Load()))], orelse=[]), Assign(targets=[Attribute(value=Name(id='md', ctx=Load()), attr='dependencies', ctx=Store())], value=Call(func=Attribute(value=Name(id='info', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='requirements'), Dict(keys=[], values=[])], keywords=[])), Assign(targets=[Attribute(value=Name(id='dist', ctx=Load()), attr='exports', ctx=Store())], value=Call(func=Attribute(value=Name(id='info', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='exports'), Dict(keys=[], values=[])], keywords=[])), Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=Attribute(value=Name(id='dist', ctx=Load()), attr='version', ctx=Load()), ctx=Store())], value=Name(id='dist', ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='urls'), ctx=Load()), attr='setdefault', ctx=Load()), args=[Attribute(value=Name(id='dist', ctx=Load()), attr='version', ctx=Load()), Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])], keywords=[]), attr='add', ctx=Load()), args=[Subscript(value=Name(id='info', ctx=Load()), slice=Constant(value='url'), ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='DistPathLocator', bases=[Name(id='Locator', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    This locator finds installed distributions in a path. It can be useful for\n    adding to an :class:`AggregatingLocator`.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='distpath')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Constant(value='\n        Initialise an instance.\n\n        :param distpath: A :class:`DistributionPath` instance to search.\n        ')), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[Name(id='DistPathLocator', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))])), Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='distpath', ctx=Load()), Name(id='DistributionPath', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='distpath', ctx=Store())], value=Name(id='distpath', ctx=Load()))], decorator_list=[]), FunctionDef(name='_get_project', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='dist', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='distpath', ctx=Load()), attr='get_distribution', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='dist', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Dict(keys=[Constant(value='urls'), Constant(value='digests')], values=[Dict(keys=[], values=[]), Dict(keys=[], values=[])]))], orelse=[Assign(targets=[Name(id='result', ctx=Store())], value=Dict(keys=[Attribute(value=Name(id='dist', ctx=Load()), attr='version', ctx=Load()), Constant(value='urls'), Constant(value='digests')], values=[Name(id='dist', ctx=Load()), Dict(keys=[Attribute(value=Name(id='dist', ctx=Load()), attr='version', ctx=Load())], values=[Call(func=Name(id='set', ctx=Load()), args=[List(elts=[Attribute(value=Name(id='dist', ctx=Load()), attr='source_url', ctx=Load())], ctx=Load())], keywords=[])]), Dict(keys=[Attribute(value=Name(id='dist', ctx=Load()), attr='version', ctx=Load())], values=[Call(func=Name(id='set', ctx=Load()), args=[List(elts=[Constant(value=None)], ctx=Load())], keywords=[])])]))]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='AggregatingLocator', bases=[Name(id='Locator', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    This class allows you to chain and/or merge a list of locators.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='locators'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Constant(value='\n        Initialise an instance.\n\n        :param locators: The list of locators to search.\n        :param kwargs: Passed to the superclass constructor,\n                       except for:\n                       * merge - if False (the default), the first successful\n                         search from any of the locators is returned. If True,\n                         the results from all locators are merged (this can be\n                         slow).\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='merge', ctx=Store())], value=Call(func=Attribute(value=Name(id='kwargs', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='merge'), Constant(value=False)], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='locators', ctx=Store())], value=Name(id='locators', ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[Name(id='AggregatingLocator', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='clear_cache', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[Name(id='AggregatingLocator', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]), attr='clear_cache', ctx=Load()), args=[], keywords=[])), For(target=Name(id='locator', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='locators', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='locator', ctx=Load()), attr='clear_cache', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='_set_scheme', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_scheme', ctx=Store())], value=Name(id='value', ctx=Load())), For(target=Name(id='locator', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='locators', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='locator', ctx=Load()), attr='scheme', ctx=Store())], value=Name(id='value', ctx=Load()))], orelse=[])], decorator_list=[]), Assign(targets=[Name(id='scheme', ctx=Store())], value=Call(func=Name(id='property', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='Locator', ctx=Load()), attr='scheme', ctx=Load()), attr='fget', ctx=Load()), Name(id='_set_scheme', ctx=Load())], keywords=[])), FunctionDef(name='_get_project', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='locator', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='locators', ctx=Load()), body=[Assign(targets=[Name(id='d', ctx=Store())], value=Call(func=Attribute(value=Name(id='locator', ctx=Load()), attr='get_project', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), If(test=Name(id='d', ctx=Load()), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='merge', ctx=Load()), body=[Assign(targets=[Name(id='files', ctx=Store())], value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='urls'), Dict(keys=[], values=[])], keywords=[])), Assign(targets=[Name(id='digests', ctx=Store())], value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='digests'), Dict(keys=[], values=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='d', ctx=Load())], keywords=[])), Assign(targets=[Name(id='df', ctx=Store())], value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='urls')], keywords=[])), If(test=BoolOp(op=And(), values=[Name(id='files', ctx=Load()), Name(id='df', ctx=Load())]), body=[For(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='files', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Name(id='k', ctx=Load()), ops=[In()], comparators=[Name(id='df', ctx=Load())]), body=[AugAssign(target=Subscript(value=Name(id='df', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Store()), op=BitOr(), value=Name(id='v', ctx=Load()))], orelse=[Assign(targets=[Subscript(value=Name(id='df', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Store())], value=Name(id='v', ctx=Load()))])], orelse=[])], orelse=[]), Assign(targets=[Name(id='dd', ctx=Store())], value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='digests')], keywords=[])), If(test=BoolOp(op=And(), values=[Name(id='digests', ctx=Load()), Name(id='dd', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='dd', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='digests', ctx=Load())], keywords=[]))], orelse=[])], orelse=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='matcher', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='found', ctx=Store())], value=Constant(value=True))], orelse=[Assign(targets=[Name(id='found', ctx=Store())], value=Constant(value=False)), For(target=Name(id='k', ctx=Store()), iter=Name(id='d', ctx=Load()), body=[If(test=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='matcher', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='k', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='found', ctx=Store())], value=Constant(value=True)), Break()], orelse=[])], orelse=[])]), If(test=Name(id='found', ctx=Load()), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Name(id='d', ctx=Load())), Break()], orelse=[])])], orelse=[])], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_distribution_names', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return all the distribution names known to this locator.\n        ')), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), For(target=Name(id='locator', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='locators', ctx=Load()), body=[Try(body=[AugAssign(target=Name(id='result', ctx=Store()), op=BitOr(), value=Call(func=Attribute(value=Name(id='locator', ctx=Load()), attr='get_distribution_names', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Name(id='NotImplementedError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[])], decorator_list=[]), Assign(targets=[Name(id='default_locator', ctx=Store())], value=Call(func=Name(id='AggregatingLocator', ctx=Load()), args=[Call(func=Name(id='SimpleScrapingLocator', ctx=Load()), args=[Constant(value='https://pypi.org/simple/')], keywords=[keyword(arg='timeout', value=Constant(value=3.0))])], keywords=[keyword(arg='scheme', value=Constant(value='legacy'))])), Assign(targets=[Name(id='locate', ctx=Store())], value=Attribute(value=Name(id='default_locator', ctx=Load()), attr='locate', ctx=Load())), ClassDef(name='DependencyFinder', bases=[Name(id='object', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Locate dependencies for distributions.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='locator')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='\n        Initialise an instance, using the specified locator\n        to locate distributions.\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='locator', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='locator', ctx=Load()), Name(id='default_locator', ctx=Load())])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='scheme', ctx=Store())], value=Call(func=Name(id='get_scheme', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='locator', ctx=Load()), attr='scheme', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='add_distribution', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dist')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Add a distribution to the finder. This will update internal information\n        about who provides what.\n        :param dist: The distribution to add.\n        ')), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='adding distribution %s'), Name(id='dist', ctx=Load())], keywords=[])), Assign(targets=[Name(id='name', ctx=Store())], value=Attribute(value=Name(id='dist', ctx=Load()), attr='key', ctx=Load())), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='dists_by_name', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Name(id='dist', ctx=Load())), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='dists', ctx=Load()), slice=Tuple(elts=[Name(id='name', ctx=Load()), Attribute(value=Name(id='dist', ctx=Load()), attr='version', ctx=Load())], ctx=Load()), ctx=Store())], value=Name(id='dist', ctx=Load())), For(target=Name(id='p', ctx=Store()), iter=Attribute(value=Name(id='dist', ctx=Load()), attr='provides', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='name', ctx=Store()), Name(id='version', ctx=Store())], ctx=Store())], value=Call(func=Name(id='parse_name_and_version', ctx=Load()), args=[Name(id='p', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Add to provided: %s, %s, %s'), Name(id='name', ctx=Load()), Name(id='version', ctx=Load()), Name(id='dist', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='provided', ctx=Load()), attr='setdefault', ctx=Load()), args=[Name(id='name', ctx=Load()), Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])], keywords=[]), attr='add', ctx=Load()), args=[Tuple(elts=[Name(id='version', ctx=Load()), Name(id='dist', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='remove_distribution', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dist')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Remove a distribution from the finder. This will update internal\n        information about who provides what.\n        :param dist: The distribution to remove.\n        ')), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='removing distribution %s'), Name(id='dist', ctx=Load())], keywords=[])), Assign(targets=[Name(id='name', ctx=Store())], value=Attribute(value=Name(id='dist', ctx=Load()), attr='key', ctx=Load())), Delete(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='dists_by_name', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Del())]), Delete(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='dists', ctx=Load()), slice=Tuple(elts=[Name(id='name', ctx=Load()), Attribute(value=Name(id='dist', ctx=Load()), attr='version', ctx=Load())], ctx=Load()), ctx=Del())]), For(target=Name(id='p', ctx=Store()), iter=Attribute(value=Name(id='dist', ctx=Load()), attr='provides', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='name', ctx=Store()), Name(id='version', ctx=Store())], ctx=Store())], value=Call(func=Name(id='parse_name_and_version', ctx=Load()), args=[Name(id='p', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Remove from provided: %s, %s, %s'), Name(id='name', ctx=Load()), Name(id='version', ctx=Load()), Name(id='dist', ctx=Load())], keywords=[])), Assign(targets=[Name(id='s', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='provided', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='remove', ctx=Load()), args=[Tuple(elts=[Name(id='version', ctx=Load()), Name(id='dist', ctx=Load())], ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='s', ctx=Load())), body=[Delete(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='provided', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Del())])], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='get_matcher', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='reqt')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Get a version matcher for a requirement.\n        :param reqt: The requirement\n        :type reqt: str\n        :return: A version matcher (an instance of\n                 :class:`distlib.version.Matcher`).\n        ')), Try(body=[Assign(targets=[Name(id='matcher', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='scheme', ctx=Load()), attr='matcher', ctx=Load()), args=[Name(id='reqt', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='UnsupportedVersionError', ctx=Load()), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='reqt', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[]), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='matcher', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='scheme', ctx=Load()), attr='matcher', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[]), Return(value=Name(id='matcher', ctx=Load()))], decorator_list=[]), FunctionDef(name='find_providers', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='reqt')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Find the distributions which can fulfill a requirement.\n\n        :param reqt: The requirement.\n         :type reqt: str\n        :return: A set of distribution which can fulfill the requirement.\n        ')), Assign(targets=[Name(id='matcher', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_matcher', ctx=Load()), args=[Name(id='reqt', ctx=Load())], keywords=[])), Assign(targets=[Name(id='name', ctx=Store())], value=Attribute(value=Name(id='matcher', ctx=Load()), attr='key', ctx=Load())), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='provided', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='provided', ctx=Load())), If(test=Compare(left=Name(id='name', ctx=Load()), ops=[In()], comparators=[Name(id='provided', ctx=Load())]), body=[For(target=Tuple(elts=[Name(id='version', ctx=Store()), Name(id='provider', ctx=Store())], ctx=Store()), iter=Subscript(value=Name(id='provided', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load()), body=[Try(body=[Assign(targets=[Name(id='match', ctx=Store())], value=Call(func=Attribute(value=Name(id='matcher', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='version', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='UnsupportedVersionError', ctx=Load()), body=[Assign(targets=[Name(id='match', ctx=Store())], value=Constant(value=False))])], orelse=[], finalbody=[]), If(test=Name(id='match', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='provider', ctx=Load())], keywords=[])), Break()], orelse=[])], orelse=[])], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[]), FunctionDef(name='try_to_replace', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='provider'), arg(arg='other'), arg(arg='problems')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Attempt to replace one provider with another. This is typically used\n        when resolving dependencies from multiple sources, e.g. A requires\n        (B >= 1.0) while C requires (B >= 1.1).\n\n        For successful replacement, ``provider`` must meet all the requirements\n        which ``other`` fulfills.\n\n        :param provider: The provider we are trying to replace with.\n        :param other: The provider we're trying to replace.\n        :param problems: If False is returned, this will contain what\n                         problems prevented replacement. This is currently\n                         a tuple of the literal string 'cantreplace',\n                         ``provider``, ``other``  and the set of requirements\n                         that ``provider`` couldn't fulfill.\n        :return: True if we can replace ``other`` with ``provider``, else\n                 False.\n        ")), Assign(targets=[Name(id='rlist', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='reqts', ctx=Load()), slice=Name(id='other', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='unmatched', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), For(target=Name(id='s', ctx=Store()), iter=Name(id='rlist', ctx=Load()), body=[Assign(targets=[Name(id='matcher', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_matcher', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='matcher', ctx=Load()), attr='match', ctx=Load()), args=[Attribute(value=Name(id='provider', ctx=Load()), attr='version', ctx=Load())], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id='unmatched', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), If(test=Name(id='unmatched', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='problems', ctx=Load()), attr='add', ctx=Load()), args=[Tuple(elts=[Constant(value='cantreplace'), Name(id='provider', ctx=Load()), Name(id='other', ctx=Load()), Call(func=Name(id='frozenset', ctx=Load()), args=[Name(id='unmatched', ctx=Load())], keywords=[])], ctx=Load())], keywords=[])), Assign(targets=[Name(id='result', ctx=Store())], value=Constant(value=False))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='remove_distribution', ctx=Load()), args=[Name(id='other', ctx=Load())], keywords=[])), Delete(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='reqts', ctx=Load()), slice=Name(id='other', ctx=Load()), ctx=Del())]), For(target=Name(id='s', ctx=Store()), iter=Name(id='rlist', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='reqts', ctx=Load()), attr='setdefault', ctx=Load()), args=[Name(id='provider', ctx=Load()), Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])], keywords=[]), attr='add', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='add_distribution', ctx=Load()), args=[Name(id='provider', ctx=Load())], keywords=[])), Assign(targets=[Name(id='result', ctx=Store())], value=Constant(value=True))]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[]), FunctionDef(name='find', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='requirement'), arg(arg='meta_extras'), arg(arg='prereleases')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=False)]), body=[Expr(value=Constant(value="\n        Find a distribution and all distributions it depends on.\n\n        :param requirement: The requirement specifying the distribution to\n                            find, or a Distribution instance.\n        :param meta_extras: A list of meta extras such as :test:, :build: and\n                            so on.\n        :param prereleases: If ``True``, allow pre-release versions to be\n                            returned - otherwise, don't return prereleases\n                            unless they're all that's available.\n\n        Return a set of :class:`Distribution` instances and a set of\n        problems.\n\n        The distributions returned should be such that they have the\n        :attr:`required` attribute set to ``True`` if they were\n        from the ``requirement`` passed to ``find()``, and they have the\n        :attr:`build_time_dependency` attribute set to ``True`` unless they\n        are post-installation dependencies of the ``requirement``.\n\n        The problems should be a tuple consisting of the string\n        ``'unsatisfied'`` and the requirement which couldn't be satisfied\n        by any distribution known to the locator.\n        ")), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='provided', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='dists', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='dists_by_name', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='reqts', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='meta_extras', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[BoolOp(op=Or(), values=[Name(id='meta_extras', ctx=Load()), List(elts=[], ctx=Load())])], keywords=[])), If(test=Compare(left=Constant(value=':*:'), ops=[In()], comparators=[Name(id='meta_extras', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='meta_extras', ctx=Load()), attr='remove', ctx=Load()), args=[Constant(value=':*:')], keywords=[])), AugAssign(target=Name(id='meta_extras', ctx=Store()), op=BitOr(), value=Call(func=Name(id='set', ctx=Load()), args=[List(elts=[Constant(value=':test:'), Constant(value=':build:'), Constant(value=':dev:')], ctx=Load())], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='requirement', ctx=Load()), Name(id='Distribution', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='dist', ctx=Store()), Name(id='odist', ctx=Store())], value=Name(id='requirement', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='passed %s as requirement'), Name(id='odist', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='dist', ctx=Store()), Name(id='odist', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='locator', ctx=Load()), attr='locate', ctx=Load()), args=[Name(id='requirement', ctx=Load())], keywords=[keyword(arg='prereleases', value=Name(id='prereleases', ctx=Load()))])), If(test=Compare(left=Name(id='dist', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='DistlibException', ctx=Load()), args=[BinOp(left=Constant(value='Unable to locate %r'), op=Mod(), right=Name(id='requirement', ctx=Load()))], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='located %s'), Name(id='odist', ctx=Load())], keywords=[]))]), Assign(targets=[Attribute(value=Name(id='dist', ctx=Load()), attr='requested', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='problems', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='todo', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[List(elts=[Name(id='dist', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='install_dists', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[List(elts=[Name(id='odist', ctx=Load())], ctx=Load())], keywords=[])), While(test=Name(id='todo', ctx=Load()), body=[Assign(targets=[Name(id='dist', ctx=Store())], value=Call(func=Attribute(value=Name(id='todo', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='name', ctx=Store())], value=Attribute(value=Name(id='dist', ctx=Load()), attr='key', ctx=Load())), If(test=Compare(left=Name(id='name', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='dists_by_name', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='add_distribution', ctx=Load()), args=[Name(id='dist', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='other', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='dists_by_name', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load())), If(test=Compare(left=Name(id='other', ctx=Load()), ops=[NotEq()], comparators=[Name(id='dist', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='try_to_replace', ctx=Load()), args=[Name(id='dist', ctx=Load()), Name(id='other', ctx=Load()), Name(id='problems', ctx=Load())], keywords=[]))], orelse=[])]), Assign(targets=[Name(id='ireqts', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='dist', ctx=Load()), attr='run_requires', ctx=Load()), op=BitOr(), right=Attribute(value=Name(id='dist', ctx=Load()), attr='meta_requires', ctx=Load()))), Assign(targets=[Name(id='sreqts', ctx=Store())], value=Attribute(value=Name(id='dist', ctx=Load()), attr='build_requires', ctx=Load())), Assign(targets=[Name(id='ereqts', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), If(test=BoolOp(op=And(), values=[Name(id='meta_extras', ctx=Load()), Compare(left=Name(id='dist', ctx=Load()), ops=[In()], comparators=[Name(id='install_dists', ctx=Load())])]), body=[For(target=Name(id='key', ctx=Store()), iter=Tuple(elts=[Constant(value='test'), Constant(value='build'), Constant(value='dev')], ctx=Load()), body=[Assign(targets=[Name(id='e', ctx=Store())], value=BinOp(left=Constant(value=':%s:'), op=Mod(), right=Name(id='key', ctx=Load()))), If(test=Compare(left=Name(id='e', ctx=Load()), ops=[In()], comparators=[Name(id='meta_extras', ctx=Load())]), body=[AugAssign(target=Name(id='ereqts', ctx=Store()), op=BitOr(), value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='dist', ctx=Load()), BinOp(left=Constant(value='%s_requires'), op=Mod(), right=Name(id='key', ctx=Load()))], keywords=[]))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='all_reqts', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='ireqts', ctx=Load()), op=BitOr(), right=Name(id='sreqts', ctx=Load())), op=BitOr(), right=Name(id='ereqts', ctx=Load()))), For(target=Name(id='r', ctx=Store()), iter=Name(id='all_reqts', ctx=Load()), body=[Assign(targets=[Name(id='providers', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='find_providers', ctx=Load()), args=[Name(id='r', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='providers', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='No providers found for %r'), Name(id='r', ctx=Load())], keywords=[])), Assign(targets=[Name(id='provider', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='locator', ctx=Load()), attr='locate', ctx=Load()), args=[Name(id='r', ctx=Load())], keywords=[keyword(arg='prereleases', value=Name(id='prereleases', ctx=Load()))])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='provider', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), UnaryOp(op=Not(), operand=Name(id='prereleases', ctx=Load()))]), body=[Assign(targets=[Name(id='provider', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='locator', ctx=Load()), attr='locate', ctx=Load()), args=[Name(id='r', ctx=Load())], keywords=[keyword(arg='prereleases', value=Constant(value=True))]))], orelse=[]), If(test=Compare(left=Name(id='provider', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Cannot satisfy %r'), Name(id='r', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='problems', ctx=Load()), attr='add', ctx=Load()), args=[Tuple(elts=[Constant(value='unsatisfied'), Name(id='r', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Tuple(elts=[Name(id='n', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='provider', ctx=Load()), attr='key', ctx=Load()), Attribute(value=Name(id='provider', ctx=Load()), attr='version', ctx=Load())], ctx=Load())), If(test=Compare(left=Tuple(elts=[Name(id='n', ctx=Load()), Name(id='v', ctx=Load())], ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='dists', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='todo', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='provider', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='providers', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='provider', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='r', ctx=Load()), ops=[In()], comparators=[Name(id='ireqts', ctx=Load())]), Compare(left=Name(id='dist', ctx=Load()), ops=[In()], comparators=[Name(id='install_dists', ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Name(id='install_dists', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='provider', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Adding %s to install_dists'), Attribute(value=Name(id='provider', ctx=Load()), attr='name_and_version', ctx=Load())], keywords=[]))], orelse=[])])], orelse=[]), For(target=Name(id='p', ctx=Store()), iter=Name(id='providers', ctx=Load()), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Attribute(value=Name(id='p', ctx=Load()), attr='key', ctx=Load())), If(test=Compare(left=Name(id='name', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='dists_by_name', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='reqts', ctx=Load()), attr='setdefault', ctx=Load()), args=[Name(id='p', ctx=Load()), Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])], keywords=[]), attr='add', ctx=Load()), args=[Name(id='r', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='other', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='dists_by_name', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load())), If(test=Compare(left=Name(id='other', ctx=Load()), ops=[NotEq()], comparators=[Name(id='p', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='try_to_replace', ctx=Load()), args=[Name(id='p', ctx=Load()), Name(id='other', ctx=Load()), Name(id='problems', ctx=Load())], keywords=[]))], orelse=[])])], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='dists', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='dists', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])), For(target=Name(id='dist', ctx=Store()), iter=Name(id='dists', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='dist', ctx=Load()), attr='build_time_dependency', ctx=Store())], value=Compare(left=Name(id='dist', ctx=Load()), ops=[NotIn()], comparators=[Name(id='install_dists', ctx=Load())])), If(test=Attribute(value=Name(id='dist', ctx=Load()), attr='build_time_dependency', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='%s is a build-time dependency only.'), Attribute(value=Name(id='dist', ctx=Load()), attr='name_and_version', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='find done for %s'), Name(id='odist', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Name(id='dists', ctx=Load()), Name(id='problems', ctx=Load())], ctx=Load()))], decorator_list=[])], decorator_list=[])], type_ignores=[])