Module(body=[Expr(value=Constant(value='\nImplementation of a flexible versioning scheme providing support for PEP-440,\nsetuptools-compatible and semantic versioning.\n')), Import(names=[alias(name='logging')]), Import(names=[alias(name='re')]), ImportFrom(module='compat', names=[alias(name='string_types')], level=1), ImportFrom(module='util', names=[alias(name='parse_requirement')], level=1), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='NormalizedVersion'), Constant(value='NormalizedMatcher'), Constant(value='LegacyVersion'), Constant(value='LegacyMatcher'), Constant(value='SemanticVersion'), Constant(value='SemanticMatcher'), Constant(value='UnsupportedVersionError'), Constant(value='get_scheme')], ctx=Load())), Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), ClassDef(name='UnsupportedVersionError', bases=[Name(id='ValueError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='This is an unsupported version.')), Pass()], decorator_list=[]), ClassDef(name='Version', bases=[Name(id='object', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='s')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_string', ctx=Store()), Name(id='s', ctx=Store())], value=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_parts', ctx=Store()), Name(id='parts', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='parse', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])), Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='parts', ctx=Load()), Name(id='tuple', ctx=Load())], keywords=[])), Assert(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='parts', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=0)]))], decorator_list=[]), FunctionDef(name='parse', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='s')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[Constant(value='please implement in a subclass')], keywords=[]))], decorator_list=[]), FunctionDef(name='_check_compatible', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='type', ctx=Load()), args=[Name(id='other', ctx=Load())], keywords=[])]), body=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[BinOp(left=Constant(value='cannot compare %r and %r'), op=Mod(), right=Tuple(elts=[Name(id='self', ctx=Load()), Name(id='other', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='__eq__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_check_compatible', ctx=Load()), args=[Name(id='other', ctx=Load())], keywords=[])), Return(value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_parts', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='other', ctx=Load()), attr='_parts', ctx=Load())]))], decorator_list=[]), FunctionDef(name='__ne__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='__eq__', ctx=Load()), args=[Name(id='other', ctx=Load())], keywords=[])))], decorator_list=[]), FunctionDef(name='__lt__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_check_compatible', ctx=Load()), args=[Name(id='other', ctx=Load())], keywords=[])), Return(value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_parts', ctx=Load()), ops=[Lt()], comparators=[Attribute(value=Name(id='other', ctx=Load()), attr='_parts', ctx=Load())]))], decorator_list=[]), FunctionDef(name='__gt__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=UnaryOp(op=Not(), operand=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='__lt__', ctx=Load()), args=[Name(id='other', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='__eq__', ctx=Load()), args=[Name(id='other', ctx=Load())], keywords=[])])))], decorator_list=[]), FunctionDef(name='__le__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='__lt__', ctx=Load()), args=[Name(id='other', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='__eq__', ctx=Load()), args=[Name(id='other', ctx=Load())], keywords=[])]))], decorator_list=[]), FunctionDef(name='__ge__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='__gt__', ctx=Load()), args=[Name(id='other', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='__eq__', ctx=Load()), args=[Name(id='other', ctx=Load())], keywords=[])]))], decorator_list=[]), FunctionDef(name='__hash__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='hash', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_parts', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Constant(value="%s('%s')"), op=Mod(), right=Tuple(elts=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_string', ctx=Load())], ctx=Load())))], decorator_list=[]), FunctionDef(name='__str__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_string', ctx=Load()))], decorator_list=[]), FunctionDef(name='is_prerelease', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[Constant(value='Please implement in subclasses.')], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())])], decorator_list=[]), ClassDef(name='Matcher', bases=[Name(id='object', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='version_class', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='_operators', ctx=Store())], value=Dict(keys=[Constant(value='<'), Constant(value='>'), Constant(value='<='), Constant(value='>='), Constant(value='=='), Constant(value='==='), Constant(value='~='), Constant(value='!=')], values=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='v'), arg(arg='c'), arg(arg='p')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Name(id='v', ctx=Load()), ops=[Lt()], comparators=[Name(id='c', ctx=Load())])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='v'), arg(arg='c'), arg(arg='p')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Name(id='v', ctx=Load()), ops=[Gt()], comparators=[Name(id='c', ctx=Load())])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='v'), arg(arg='c'), arg(arg='p')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=BoolOp(op=Or(), values=[Compare(left=Name(id='v', ctx=Load()), ops=[Eq()], comparators=[Name(id='c', ctx=Load())]), Compare(left=Name(id='v', ctx=Load()), ops=[Lt()], comparators=[Name(id='c', ctx=Load())])])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='v'), arg(arg='c'), arg(arg='p')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=BoolOp(op=Or(), values=[Compare(left=Name(id='v', ctx=Load()), ops=[Eq()], comparators=[Name(id='c', ctx=Load())]), Compare(left=Name(id='v', ctx=Load()), ops=[Gt()], comparators=[Name(id='c', ctx=Load())])])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='v'), arg(arg='c'), arg(arg='p')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Name(id='v', ctx=Load()), ops=[Eq()], comparators=[Name(id='c', ctx=Load())])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='v'), arg(arg='c'), arg(arg='p')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Name(id='v', ctx=Load()), ops=[Eq()], comparators=[Name(id='c', ctx=Load())])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='v'), arg(arg='c'), arg(arg='p')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=BoolOp(op=Or(), values=[Compare(left=Name(id='v', ctx=Load()), ops=[Eq()], comparators=[Name(id='c', ctx=Load())]), Compare(left=Name(id='v', ctx=Load()), ops=[Gt()], comparators=[Name(id='c', ctx=Load())])])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='v'), arg(arg='c'), arg(arg='p')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Compare(left=Name(id='v', ctx=Load()), ops=[NotEq()], comparators=[Name(id='c', ctx=Load())]))])), FunctionDef(name='parse_requirement', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='s')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='parse_requirement', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='s')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='version_class', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Please specify a version class')], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_string', ctx=Store()), Name(id='s', ctx=Store())], value=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='r', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='parse_requirement', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='r', ctx=Load())), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='Not valid: %r'), op=Mod(), right=Name(id='s', ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Store())], value=Attribute(value=Name(id='r', ctx=Load()), attr='name', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='key', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='clist', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=Attribute(value=Name(id='r', ctx=Load()), attr='constraints', ctx=Load()), body=[For(target=Tuple(elts=[Name(id='op', ctx=Store()), Name(id='s', ctx=Store())], ctx=Store()), iter=Attribute(value=Name(id='r', ctx=Load()), attr='constraints', ctx=Load()), body=[If(test=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='.*')], keywords=[]), body=[If(test=Compare(left=Name(id='op', ctx=Load()), ops=[NotIn()], comparators=[Tuple(elts=[Constant(value='=='), Constant(value='!=')], ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value="'.*' not allowed for %r constraints"), op=Mod(), right=Name(id='op', ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='vn', ctx=Store()), Name(id='prefix', ctx=Store())], ctx=Store())], value=Tuple(elts=[Subscript(value=Name(id='s', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=2))), ctx=Load()), Constant(value=True)], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='version_class', ctx=Load()), args=[Name(id='vn', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Tuple(elts=[Name(id='vn', ctx=Store()), Name(id='prefix', ctx=Store())], ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='version_class', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]), Constant(value=False)], ctx=Load()))]), Expr(value=Call(func=Attribute(value=Name(id='clist', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='op', ctx=Load()), Name(id='vn', ctx=Load()), Name(id='prefix', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_parts', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[Name(id='clist', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='match', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='version')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Check if the provided version matches the constraints.\n\n        :param version: The version to match against this instance.\n        :type version: String or :class:`Version` instance.\n        ')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='version', ctx=Load()), Name(id='string_types', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='version', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='version_class', ctx=Load()), args=[Name(id='version', ctx=Load())], keywords=[]))], orelse=[]), For(target=Tuple(elts=[Name(id='operator', ctx=Store()), Name(id='constraint', ctx=Store()), Name(id='prefix', ctx=Store())], ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_parts', ctx=Load()), body=[Assign(targets=[Name(id='f', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_operators', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='operator', ctx=Load())], keywords=[])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='f', ctx=Load()), Name(id='string_types', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='f', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='f', ctx=Load())], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='f', ctx=Load())), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=BinOp(left=Constant(value='%r not implemented for %s'), op=Mod(), right=Tuple(elts=[Name(id='operator', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load())], ctx=Load()))), Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='f', ctx=Load()), args=[Name(id='version', ctx=Load()), Name(id='constraint', ctx=Load()), Name(id='prefix', ctx=Load())], keywords=[])), body=[Return(value=Constant(value=False))], orelse=[])], orelse=[]), Return(value=Constant(value=True))], decorator_list=[]), FunctionDef(name='exact_version', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Constant(value=None)), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_parts', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Compare(left=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_parts', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='=='), Constant(value='===')], ctx=Load())])]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_parts', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value=1), ctx=Load()))], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='_check_compatible', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='type', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='type', ctx=Load()), args=[Name(id='other', ctx=Load())], keywords=[])]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='other', ctx=Load()), attr='name', ctx=Load())])]), body=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[BinOp(left=Constant(value='cannot compare %s and %s'), op=Mod(), right=Tuple(elts=[Name(id='self', ctx=Load()), Name(id='other', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='__eq__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_check_compatible', ctx=Load()), args=[Name(id='other', ctx=Load())], keywords=[])), Return(value=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='key', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='other', ctx=Load()), attr='key', ctx=Load())]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_parts', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='other', ctx=Load()), attr='_parts', ctx=Load())])]))], decorator_list=[]), FunctionDef(name='__ne__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='__eq__', ctx=Load()), args=[Name(id='other', ctx=Load())], keywords=[])))], decorator_list=[]), FunctionDef(name='__hash__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Call(func=Name(id='hash', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='key', ctx=Load())], keywords=[]), op=Add(), right=Call(func=Name(id='hash', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_parts', ctx=Load())], keywords=[])))], decorator_list=[]), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Constant(value='%s(%r)'), op=Mod(), right=Tuple(elts=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_string', ctx=Load())], ctx=Load())))], decorator_list=[]), FunctionDef(name='__str__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_string', ctx=Load()))], decorator_list=[])], decorator_list=[]), Assign(targets=[Name(id='PEP440_VERSION_RE', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='^v?(\\d+!)?(\\d+(\\.\\d+)*)((a|b|c|rc)(\\d+))?(\\.(post)(\\d+))?(\\.(dev)(\\d+))?(\\+([a-zA-Z\\d]+(\\.[a-zA-Z\\d]+)?))?$')], keywords=[])), FunctionDef(name='_pep_440_key', args=arguments(posonlyargs=[], args=[arg(arg='s')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='m', ctx=Store())], value=Call(func=Attribute(value=Name(id='PEP440_VERSION_RE', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='m', ctx=Load())), body=[Raise(exc=Call(func=Name(id='UnsupportedVersionError', ctx=Load()), args=[BinOp(left=Constant(value='Not a valid version: %s'), op=Mod(), right=Name(id='s', ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Name(id='groups', ctx=Store())], value=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='groups', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='nums', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='int', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='v', ctx=Store()), iter=Call(func=Attribute(value=Subscript(value=Name(id='groups', ctx=Load()), slice=Constant(value=1), ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[]), ifs=[], is_async=0)])], keywords=[])), While(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='nums', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), Compare(left=Subscript(value=Name(id='nums', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])]), body=[Assign(targets=[Name(id='nums', ctx=Store())], value=Subscript(value=Name(id='nums', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Subscript(value=Name(id='groups', ctx=Load()), slice=Constant(value=0), ctx=Load())), body=[Assign(targets=[Name(id='epoch', ctx=Store())], value=Constant(value=0))], orelse=[Assign(targets=[Name(id='epoch', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Subscript(value=Name(id='groups', ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='pre', ctx=Store())], value=Subscript(value=Name(id='groups', ctx=Load()), slice=Slice(lower=Constant(value=4), upper=Constant(value=6)), ctx=Load())), Assign(targets=[Name(id='post', ctx=Store())], value=Subscript(value=Name(id='groups', ctx=Load()), slice=Slice(lower=Constant(value=7), upper=Constant(value=9)), ctx=Load())), Assign(targets=[Name(id='dev', ctx=Store())], value=Subscript(value=Name(id='groups', ctx=Load()), slice=Slice(lower=Constant(value=10), upper=Constant(value=12)), ctx=Load())), Assign(targets=[Name(id='local', ctx=Store())], value=Subscript(value=Name(id='groups', ctx=Load()), slice=Constant(value=13), ctx=Load())), If(test=Compare(left=Name(id='pre', ctx=Load()), ops=[Eq()], comparators=[Tuple(elts=[Constant(value=None), Constant(value=None)], ctx=Load())]), body=[Assign(targets=[Name(id='pre', ctx=Store())], value=Tuple(elts=[], ctx=Load()))], orelse=[Assign(targets=[Name(id='pre', ctx=Store())], value=Tuple(elts=[Subscript(value=Name(id='pre', ctx=Load()), slice=Constant(value=0), ctx=Load()), Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='pre', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[])], ctx=Load()))]), If(test=Compare(left=Name(id='post', ctx=Load()), ops=[Eq()], comparators=[Tuple(elts=[Constant(value=None), Constant(value=None)], ctx=Load())]), body=[Assign(targets=[Name(id='post', ctx=Store())], value=Tuple(elts=[], ctx=Load()))], orelse=[Assign(targets=[Name(id='post', ctx=Store())], value=Tuple(elts=[Subscript(value=Name(id='post', ctx=Load()), slice=Constant(value=0), ctx=Load()), Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='post', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[])], ctx=Load()))]), If(test=Compare(left=Name(id='dev', ctx=Load()), ops=[Eq()], comparators=[Tuple(elts=[Constant(value=None), Constant(value=None)], ctx=Load())]), body=[Assign(targets=[Name(id='dev', ctx=Store())], value=Tuple(elts=[], ctx=Load()))], orelse=[Assign(targets=[Name(id='dev', ctx=Store())], value=Tuple(elts=[Subscript(value=Name(id='dev', ctx=Load()), slice=Constant(value=0), ctx=Load()), Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='dev', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[])], ctx=Load()))]), If(test=Compare(left=Name(id='local', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='local', ctx=Store())], value=Tuple(elts=[], ctx=Load()))], orelse=[Assign(targets=[Name(id='parts', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='part', ctx=Store()), iter=Call(func=Attribute(value=Name(id='local', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[]), body=[If(test=Call(func=Attribute(value=Name(id='part', ctx=Load()), attr='isdigit', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='part', ctx=Store())], value=Tuple(elts=[Constant(value=1), Call(func=Name(id='int', ctx=Load()), args=[Name(id='part', ctx=Load())], keywords=[])], ctx=Load()))], orelse=[Assign(targets=[Name(id='part', ctx=Store())], value=Tuple(elts=[Constant(value=0), Name(id='part', ctx=Load())], ctx=Load()))]), Expr(value=Call(func=Attribute(value=Name(id='parts', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='part', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='local', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[Name(id='parts', ctx=Load())], keywords=[]))]), If(test=UnaryOp(op=Not(), operand=Name(id='pre', ctx=Load())), body=[If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Name(id='post', ctx=Load())), Name(id='dev', ctx=Load())]), body=[Assign(targets=[Name(id='pre', ctx=Store())], value=Tuple(elts=[Constant(value='a'), UnaryOp(op=USub(), operand=Constant(value=1))], ctx=Load()))], orelse=[Assign(targets=[Name(id='pre', ctx=Store())], value=Tuple(elts=[Constant(value='z')], ctx=Load()))])], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='post', ctx=Load())), body=[Assign(targets=[Name(id='post', ctx=Store())], value=Tuple(elts=[Constant(value='_')], ctx=Load()))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='dev', ctx=Load())), body=[Assign(targets=[Name(id='dev', ctx=Store())], value=Tuple(elts=[Constant(value='final')], ctx=Load()))], orelse=[]), Return(value=Tuple(elts=[Name(id='epoch', ctx=Load()), Name(id='nums', ctx=Load()), Name(id='pre', ctx=Load()), Name(id='post', ctx=Load()), Name(id='dev', ctx=Load()), Name(id='local', ctx=Load())], ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='_normalized_key', ctx=Store())], value=Name(id='_pep_440_key', ctx=Load())), ClassDef(name='NormalizedVersion', bases=[Name(id='Version', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A rational version.\n\n    Good:\n        1.2         # equivalent to "1.2.0"\n        1.2.0\n        1.2a1\n        1.2.3a2\n        1.2.3b1\n        1.2.3c1\n        1.2.3.4\n        TODO: fill this out\n\n    Bad:\n        1           # minimum two numbers\n        1.2a        # release level must have a release serial\n        1.2.3b\n    ')), FunctionDef(name='parse', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='s')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='_normalized_key', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])), Assign(targets=[Name(id='m', ctx=Store())], value=Call(func=Attribute(value=Name(id='PEP440_VERSION_RE', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])), Assign(targets=[Name(id='groups', ctx=Store())], value=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='groups', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_release_clause', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='int', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='v', ctx=Store()), iter=Call(func=Attribute(value=Subscript(value=Name(id='groups', ctx=Load()), slice=Constant(value=1), ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[]), ifs=[], is_async=0)])], keywords=[])), Return(value=Name(id='result', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='PREREL_TAGS', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[List(elts=[Constant(value='a'), Constant(value='b'), Constant(value='c'), Constant(value='rc'), Constant(value='dev')], ctx=Load())], keywords=[])), FunctionDef(name='is_prerelease', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=Compare(left=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='PREREL_TAGS', ctx=Load())]), generators=[comprehension(target=Name(id='t', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_parts', ctx=Load()), ifs=[Name(id='t', ctx=Load())], is_async=0)])], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())])], decorator_list=[]), FunctionDef(name='_match_prefix', args=arguments(posonlyargs=[], args=[arg(arg='x'), arg(arg='y')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='x', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])), Assign(targets=[Name(id='y', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='y', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='x', ctx=Load()), ops=[Eq()], comparators=[Name(id='y', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='startswith', ctx=Load()), args=[Name(id='y', ctx=Load())], keywords=[])), body=[Return(value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='n', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='y', ctx=Load())], keywords=[])), Return(value=Compare(left=Subscript(value=Name(id='x', ctx=Load()), slice=Name(id='n', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Constant(value='.')]))], decorator_list=[]), ClassDef(name='NormalizedMatcher', bases=[Name(id='Matcher', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='version_class', ctx=Store())], value=Name(id='NormalizedVersion', ctx=Load())), Assign(targets=[Name(id='_operators', ctx=Store())], value=Dict(keys=[Constant(value='~='), Constant(value='<'), Constant(value='>'), Constant(value='<='), Constant(value='>='), Constant(value='=='), Constant(value='==='), Constant(value='!=')], values=[Constant(value='_match_compatible'), Constant(value='_match_lt'), Constant(value='_match_gt'), Constant(value='_match_le'), Constant(value='_match_ge'), Constant(value='_match_eq'), Constant(value='_match_arbitrary'), Constant(value='_match_ne')])), FunctionDef(name='_adjust_local', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='version'), arg(arg='constraint'), arg(arg='prefix')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Name(id='prefix', ctx=Load()), body=[Assign(targets=[Name(id='strip_local', ctx=Store())], value=BoolOp(op=And(), values=[Compare(left=Constant(value='+'), ops=[NotIn()], comparators=[Name(id='constraint', ctx=Load())]), Subscript(value=Attribute(value=Name(id='version', ctx=Load()), attr='_parts', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())]))], orelse=[Assign(targets=[Name(id='strip_local', ctx=Store())], value=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Subscript(value=Attribute(value=Name(id='constraint', ctx=Load()), attr='_parts', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())), Subscript(value=Attribute(value=Name(id='version', ctx=Load()), attr='_parts', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())]))]), If(test=Name(id='strip_local', ctx=Load()), body=[Assign(targets=[Name(id='s', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Attribute(value=Name(id='version', ctx=Load()), attr='_string', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='+'), Constant(value=1)], keywords=[]), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='version', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='version_class', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Tuple(elts=[Name(id='version', ctx=Load()), Name(id='constraint', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='_match_lt', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='version'), arg(arg='constraint'), arg(arg='prefix')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='version', ctx=Store()), Name(id='constraint', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_adjust_local', ctx=Load()), args=[Name(id='version', ctx=Load()), Name(id='constraint', ctx=Load()), Name(id='prefix', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='version', ctx=Load()), ops=[GtE()], comparators=[Name(id='constraint', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='release_clause', ctx=Store())], value=Attribute(value=Name(id='constraint', ctx=Load()), attr='_release_clause', ctx=Load())), Assign(targets=[Name(id='pfx', ctx=Store())], value=Call(func=Attribute(value=Constant(value='.'), attr='join', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='str', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Name(id='release_clause', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Return(value=UnaryOp(op=Not(), operand=Call(func=Name(id='_match_prefix', ctx=Load()), args=[Name(id='version', ctx=Load()), Name(id='pfx', ctx=Load())], keywords=[])))], decorator_list=[]), FunctionDef(name='_match_gt', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='version'), arg(arg='constraint'), arg(arg='prefix')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='version', ctx=Store()), Name(id='constraint', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_adjust_local', ctx=Load()), args=[Name(id='version', ctx=Load()), Name(id='constraint', ctx=Load()), Name(id='prefix', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='version', ctx=Load()), ops=[LtE()], comparators=[Name(id='constraint', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='release_clause', ctx=Store())], value=Attribute(value=Name(id='constraint', ctx=Load()), attr='_release_clause', ctx=Load())), Assign(targets=[Name(id='pfx', ctx=Store())], value=Call(func=Attribute(value=Constant(value='.'), attr='join', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='str', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Name(id='release_clause', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Return(value=UnaryOp(op=Not(), operand=Call(func=Name(id='_match_prefix', ctx=Load()), args=[Name(id='version', ctx=Load()), Name(id='pfx', ctx=Load())], keywords=[])))], decorator_list=[]), FunctionDef(name='_match_le', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='version'), arg(arg='constraint'), arg(arg='prefix')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='version', ctx=Store()), Name(id='constraint', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_adjust_local', ctx=Load()), args=[Name(id='version', ctx=Load()), Name(id='constraint', ctx=Load()), Name(id='prefix', ctx=Load())], keywords=[])), Return(value=Compare(left=Name(id='version', ctx=Load()), ops=[LtE()], comparators=[Name(id='constraint', ctx=Load())]))], decorator_list=[]), FunctionDef(name='_match_ge', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='version'), arg(arg='constraint'), arg(arg='prefix')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='version', ctx=Store()), Name(id='constraint', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_adjust_local', ctx=Load()), args=[Name(id='version', ctx=Load()), Name(id='constraint', ctx=Load()), Name(id='prefix', ctx=Load())], keywords=[])), Return(value=Compare(left=Name(id='version', ctx=Load()), ops=[GtE()], comparators=[Name(id='constraint', ctx=Load())]))], decorator_list=[]), FunctionDef(name='_match_eq', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='version'), arg(arg='constraint'), arg(arg='prefix')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='version', ctx=Store()), Name(id='constraint', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_adjust_local', ctx=Load()), args=[Name(id='version', ctx=Load()), Name(id='constraint', ctx=Load()), Name(id='prefix', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='prefix', ctx=Load())), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Compare(left=Name(id='version', ctx=Load()), ops=[Eq()], comparators=[Name(id='constraint', ctx=Load())]))], orelse=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='_match_prefix', ctx=Load()), args=[Name(id='version', ctx=Load()), Name(id='constraint', ctx=Load())], keywords=[]))]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[]), FunctionDef(name='_match_arbitrary', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='version'), arg(arg='constraint'), arg(arg='prefix')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Compare(left=Call(func=Name(id='str', ctx=Load()), args=[Name(id='version', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='constraint', ctx=Load())], keywords=[])]))], decorator_list=[]), FunctionDef(name='_match_ne', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='version'), arg(arg='constraint'), arg(arg='prefix')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='version', ctx=Store()), Name(id='constraint', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_adjust_local', ctx=Load()), args=[Name(id='version', ctx=Load()), Name(id='constraint', ctx=Load()), Name(id='prefix', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='prefix', ctx=Load())), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Compare(left=Name(id='version', ctx=Load()), ops=[NotEq()], comparators=[Name(id='constraint', ctx=Load())]))], orelse=[Assign(targets=[Name(id='result', ctx=Store())], value=UnaryOp(op=Not(), operand=Call(func=Name(id='_match_prefix', ctx=Load()), args=[Name(id='version', ctx=Load()), Name(id='constraint', ctx=Load())], keywords=[])))]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[]), FunctionDef(name='_match_compatible', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='version'), arg(arg='constraint'), arg(arg='prefix')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='version', ctx=Store()), Name(id='constraint', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_adjust_local', ctx=Load()), args=[Name(id='version', ctx=Load()), Name(id='constraint', ctx=Load()), Name(id='prefix', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='version', ctx=Load()), ops=[Eq()], comparators=[Name(id='constraint', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[]), If(test=Compare(left=Name(id='version', ctx=Load()), ops=[Lt()], comparators=[Name(id='constraint', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='release_clause', ctx=Store())], value=Attribute(value=Name(id='constraint', ctx=Load()), attr='_release_clause', ctx=Load())), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='release_clause', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='release_clause', ctx=Store())], value=Subscript(value=Name(id='release_clause', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='pfx', ctx=Store())], value=Call(func=Attribute(value=Constant(value='.'), attr='join', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='str', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Name(id='release_clause', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Return(value=Call(func=Name(id='_match_prefix', ctx=Load()), args=[Name(id='version', ctx=Load()), Name(id='pfx', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), Assign(targets=[Name(id='_REPLACEMENTS', ctx=Store())], value=Tuple(elts=[Tuple(elts=[Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='[.+-]$')], keywords=[]), Constant(value='')], ctx=Load()), Tuple(elts=[Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='^[.](\\d)')], keywords=[]), Constant(value='0.\\1')], ctx=Load()), Tuple(elts=[Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='^[.-]')], keywords=[]), Constant(value='')], ctx=Load()), Tuple(elts=[Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='^\\((.*)\\)$')], keywords=[]), Constant(value='\\1')], ctx=Load()), Tuple(elts=[Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='^v(ersion)?\\s*(\\d+)')], keywords=[]), Constant(value='\\2')], ctx=Load()), Tuple(elts=[Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='^r(ev)?\\s*(\\d+)')], keywords=[]), Constant(value='\\2')], ctx=Load()), Tuple(elts=[Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='[.]{2,}')], keywords=[]), Constant(value='.')], ctx=Load()), Tuple(elts=[Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='\\b(alfa|apha)\\b')], keywords=[]), Constant(value='alpha')], ctx=Load()), Tuple(elts=[Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='\\b(pre-alpha|prealpha)\\b')], keywords=[]), Constant(value='pre.alpha')], ctx=Load()), Tuple(elts=[Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='\\(beta\\)$')], keywords=[]), Constant(value='beta')], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='_SUFFIX_REPLACEMENTS', ctx=Store())], value=Tuple(elts=[Tuple(elts=[Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='^[:~._+-]+')], keywords=[]), Constant(value='')], ctx=Load()), Tuple(elts=[Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='[,*")([\\]]')], keywords=[]), Constant(value='')], ctx=Load()), Tuple(elts=[Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='[~:+_ -]')], keywords=[]), Constant(value='.')], ctx=Load()), Tuple(elts=[Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='[.]{2,}')], keywords=[]), Constant(value='.')], ctx=Load()), Tuple(elts=[Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='\\.$')], keywords=[]), Constant(value='')], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='_NUMERIC_PREFIX', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='(\\d+(\\.\\d+)*)')], keywords=[])), FunctionDef(name='_suggest_semantic_version', args=arguments(posonlyargs=[], args=[arg(arg='s')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    Try to suggest a semantic form for a version for which\n    _suggest_normalized_version couldn't come up with anything.\n    ")), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]), attr='lower', ctx=Load()), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='pat', ctx=Store()), Name(id='repl', ctx=Store())], ctx=Store()), iter=Name(id='_REPLACEMENTS', ctx=Load()), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='pat', ctx=Load()), attr='sub', ctx=Load()), args=[Name(id='repl', ctx=Load()), Name(id='result', ctx=Load())], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='result', ctx=Load())), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Constant(value='0.0.0'))], orelse=[]), Assign(targets=[Name(id='m', ctx=Store())], value=Call(func=Attribute(value=Name(id='_NUMERIC_PREFIX', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='m', ctx=Load())), body=[Assign(targets=[Name(id='prefix', ctx=Store())], value=Constant(value='0.0.0')), Assign(targets=[Name(id='suffix', ctx=Store())], value=Name(id='result', ctx=Load()))], orelse=[Assign(targets=[Name(id='prefix', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='groups', ctx=Load()), args=[], keywords=[]), slice=Constant(value=0), ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[])), Assign(targets=[Name(id='prefix', ctx=Store())], value=ListComp(elt=Call(func=Name(id='int', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Name(id='prefix', ctx=Load()), ifs=[], is_async=0)])), While(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='prefix', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Constant(value=3)]), body=[Expr(value=Call(func=Attribute(value=Name(id='prefix', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value=0)], keywords=[]))], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='prefix', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=3)]), body=[Assign(targets=[Name(id='suffix', ctx=Store())], value=Subscript(value=Name(id='result', ctx=Load()), slice=Slice(lower=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='end', ctx=Load()), args=[], keywords=[])), ctx=Load()))], orelse=[Assign(targets=[Name(id='suffix', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Constant(value='.'), attr='join', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='str', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Subscript(value=Name(id='prefix', ctx=Load()), slice=Slice(lower=Constant(value=3)), ctx=Load()), ifs=[], is_async=0)])], keywords=[]), op=Add(), right=Subscript(value=Name(id='result', ctx=Load()), slice=Slice(lower=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='end', ctx=Load()), args=[], keywords=[])), ctx=Load()))), Assign(targets=[Name(id='prefix', ctx=Store())], value=Subscript(value=Name(id='prefix', ctx=Load()), slice=Slice(upper=Constant(value=3)), ctx=Load()))]), Assign(targets=[Name(id='prefix', ctx=Store())], value=Call(func=Attribute(value=Constant(value='.'), attr='join', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='str', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Name(id='prefix', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Name(id='suffix', ctx=Store())], value=Call(func=Attribute(value=Name(id='suffix', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]))]), If(test=Name(id='suffix', ctx=Load()), body=[For(target=Tuple(elts=[Name(id='pat', ctx=Store()), Name(id='repl', ctx=Store())], ctx=Store()), iter=Name(id='_SUFFIX_REPLACEMENTS', ctx=Load()), body=[Assign(targets=[Name(id='suffix', ctx=Store())], value=Call(func=Attribute(value=Name(id='pat', ctx=Load()), attr='sub', ctx=Load()), args=[Name(id='repl', ctx=Load()), Name(id='suffix', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='suffix', ctx=Load())), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Name(id='prefix', ctx=Load()))], orelse=[Assign(targets=[Name(id='sep', ctx=Store())], value=IfExp(test=Compare(left=Constant(value='dev'), ops=[In()], comparators=[Name(id='suffix', ctx=Load())]), body=Constant(value='-'), orelse=Constant(value='+'))), Assign(targets=[Name(id='result', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='prefix', ctx=Load()), op=Add(), right=Name(id='sep', ctx=Load())), op=Add(), right=Name(id='suffix', ctx=Load())))]), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='is_semver', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Constant(value=None))], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[]), FunctionDef(name='_suggest_normalized_version', args=arguments(posonlyargs=[], args=[arg(arg='s')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Suggest a normalized version close to the given version string.\n\n    If you have a version string that isn't rational (i.e. NormalizedVersion\n    doesn't like it) then you might be able to get an equivalent (or close)\n    rational version from this function.\n\n    This does a number of simple normalizations to the given string, based\n    on observation of versions currently in use on PyPI. Given a dump of\n    those version during PyCon 2009, 4287 of them:\n    - 2312 (53.93%) match NormalizedVersion without change\n      with the automatic suggestion\n    - 3474 (81.04%) match when using this suggestion method\n\n    @param s {str} An irrational version string.\n    @returns A rational version string, or None, if couldn't determine one.\n    ")), Try(body=[Expr(value=Call(func=Name(id='_normalized_key', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])), Return(value=Name(id='s', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='UnsupportedVersionError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[]), Assign(targets=[Name(id='rs', ctx=Store())], value=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='orig', ctx=Store()), Name(id='repl', ctx=Store())], ctx=Store()), iter=Tuple(elts=[Tuple(elts=[Constant(value='-alpha'), Constant(value='a')], ctx=Load()), Tuple(elts=[Constant(value='-beta'), Constant(value='b')], ctx=Load()), Tuple(elts=[Constant(value='alpha'), Constant(value='a')], ctx=Load()), Tuple(elts=[Constant(value='beta'), Constant(value='b')], ctx=Load()), Tuple(elts=[Constant(value='rc'), Constant(value='c')], ctx=Load()), Tuple(elts=[Constant(value='-final'), Constant(value='')], ctx=Load()), Tuple(elts=[Constant(value='-pre'), Constant(value='c')], ctx=Load()), Tuple(elts=[Constant(value='-release'), Constant(value='')], ctx=Load()), Tuple(elts=[Constant(value='.release'), Constant(value='')], ctx=Load()), Tuple(elts=[Constant(value='-stable'), Constant(value='')], ctx=Load()), Tuple(elts=[Constant(value='+'), Constant(value='.')], ctx=Load()), Tuple(elts=[Constant(value='_'), Constant(value='.')], ctx=Load()), Tuple(elts=[Constant(value=' '), Constant(value='')], ctx=Load()), Tuple(elts=[Constant(value='.final'), Constant(value='')], ctx=Load()), Tuple(elts=[Constant(value='final'), Constant(value='')], ctx=Load())], ctx=Load()), body=[Assign(targets=[Name(id='rs', ctx=Store())], value=Call(func=Attribute(value=Name(id='rs', ctx=Load()), attr='replace', ctx=Load()), args=[Name(id='orig', ctx=Load()), Name(id='repl', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='rs', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value='pre$'), Constant(value='pre0'), Name(id='rs', ctx=Load())], keywords=[])), Assign(targets=[Name(id='rs', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value='dev$'), Constant(value='dev0'), Name(id='rs', ctx=Load())], keywords=[])), Assign(targets=[Name(id='rs', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value='([abc]|rc)[\\-\\.](\\d+)$'), Constant(value='\\1\\2'), Name(id='rs', ctx=Load())], keywords=[])), Assign(targets=[Name(id='rs', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value='[\\-\\.](dev)[\\-\\.]?r?(\\d+)$'), Constant(value='.\\1\\2'), Name(id='rs', ctx=Load())], keywords=[])), Assign(targets=[Name(id='rs', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value='[.~]?([abc])\\.?'), Constant(value='\\1'), Name(id='rs', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Name(id='rs', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='v')], keywords=[]), body=[Assign(targets=[Name(id='rs', ctx=Store())], value=Subscript(value=Name(id='rs', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='rs', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value='\\b0+(\\d+)(?!\\d)'), Constant(value='\\1'), Name(id='rs', ctx=Load())], keywords=[])), Assign(targets=[Name(id='rs', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value='(\\d+[abc])$'), Constant(value='\\g<1>0'), Name(id='rs', ctx=Load())], keywords=[])), Assign(targets=[Name(id='rs', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value='\\.?(dev-r|dev\\.r)\\.?(\\d+)$'), Constant(value='.dev\\2'), Name(id='rs', ctx=Load())], keywords=[])), Assign(targets=[Name(id='rs', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value='-(a|b|c)(\\d+)$'), Constant(value='\\1\\2'), Name(id='rs', ctx=Load())], keywords=[])), Assign(targets=[Name(id='rs', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value='[\\.\\-](dev|devel)$'), Constant(value='.dev0'), Name(id='rs', ctx=Load())], keywords=[])), Assign(targets=[Name(id='rs', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value='(?![\\.\\-])dev$'), Constant(value='.dev0'), Name(id='rs', ctx=Load())], keywords=[])), Assign(targets=[Name(id='rs', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value='(final|stable)$'), Constant(value=''), Name(id='rs', ctx=Load())], keywords=[])), Assign(targets=[Name(id='rs', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value='\\.?(r|-|-r)\\.?(\\d+)$'), Constant(value='.post\\2'), Name(id='rs', ctx=Load())], keywords=[])), Assign(targets=[Name(id='rs', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value='\\.?(dev|git|bzr)\\.?(\\d+)$'), Constant(value='.dev\\2'), Name(id='rs', ctx=Load())], keywords=[])), Assign(targets=[Name(id='rs', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value='\\.?(pre|preview|-c)(\\d+)$'), Constant(value='c\\g<2>'), Name(id='rs', ctx=Load())], keywords=[])), Assign(targets=[Name(id='rs', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value='p(\\d+)$'), Constant(value='.post\\1'), Name(id='rs', ctx=Load())], keywords=[])), Try(body=[Expr(value=Call(func=Name(id='_normalized_key', ctx=Load()), args=[Name(id='rs', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='UnsupportedVersionError', ctx=Load()), body=[Assign(targets=[Name(id='rs', ctx=Store())], value=Constant(value=None))])], orelse=[], finalbody=[]), Return(value=Name(id='rs', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='_VERSION_PART', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='([a-z]+|\\d+|[\\.-])'), Attribute(value=Name(id='re', ctx=Load()), attr='I', ctx=Load())], keywords=[])), Assign(targets=[Name(id='_VERSION_REPLACE', ctx=Store())], value=Dict(keys=[Constant(value='pre'), Constant(value='preview'), Constant(value='-'), Constant(value='rc'), Constant(value='dev'), Constant(value=''), Constant(value='.')], values=[Constant(value='c'), Constant(value='c'), Constant(value='final-'), Constant(value='c'), Constant(value='@'), Constant(value=None), Constant(value=None)])), FunctionDef(name='_legacy_key', args=arguments(posonlyargs=[], args=[arg(arg='s')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='get_parts', args=arguments(posonlyargs=[], args=[arg(arg='s')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='p', ctx=Store()), iter=Call(func=Attribute(value=Name(id='_VERSION_PART', ctx=Load()), attr='split', ctx=Load()), args=[Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Attribute(value=Name(id='_VERSION_REPLACE', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='p', ctx=Load()), Name(id='p', ctx=Load())], keywords=[])), If(test=Name(id='p', ctx=Load()), body=[If(test=Compare(left=Constant(value='0'), ops=[LtE(), LtE()], comparators=[Subscript(value=Name(id='p', ctx=Load()), slice=Slice(upper=Constant(value=1)), ctx=Load()), Constant(value='9')]), body=[Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='zfill', ctx=Load()), args=[Constant(value=8)], keywords=[]))], orelse=[Assign(targets=[Name(id='p', ctx=Store())], value=BinOp(left=Constant(value='*'), op=Add(), right=Name(id='p', ctx=Load())))]), Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='p', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='*final')], keywords=[])), Return(value=Name(id='result', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='result', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='p', ctx=Store()), iter=Call(func=Name(id='get_parts', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]), body=[If(test=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='*')], keywords=[]), body=[If(test=Compare(left=Name(id='p', ctx=Load()), ops=[Lt()], comparators=[Constant(value='*final')]), body=[While(test=BoolOp(op=And(), values=[Name(id='result', ctx=Load()), Compare(left=Subscript(value=Name(id='result', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), ops=[Eq()], comparators=[Constant(value='*final-')])]), body=[Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[]))], orelse=[])], orelse=[]), While(test=BoolOp(op=And(), values=[Name(id='result', ctx=Load()), Compare(left=Subscript(value=Name(id='result', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), ops=[Eq()], comparators=[Constant(value='00000000')])]), body=[Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[]))], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='p', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='tuple', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[]))], decorator_list=[]), ClassDef(name='LegacyVersion', bases=[Name(id='Version', ctx=Load())], keywords=[], body=[FunctionDef(name='parse', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='s')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='_legacy_key', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='is_prerelease', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Constant(value=False)), For(target=Name(id='x', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_parts', ctx=Load()), body=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='x', ctx=Load()), Name(id='string_types', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='x', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='*')], keywords=[]), Compare(left=Name(id='x', ctx=Load()), ops=[Lt()], comparators=[Constant(value='*final')])]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Constant(value=True)), Break()], orelse=[])], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())])], decorator_list=[]), ClassDef(name='LegacyMatcher', bases=[Name(id='Matcher', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='version_class', ctx=Store())], value=Name(id='LegacyVersion', ctx=Load())), Assign(targets=[Name(id='_operators', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[Attribute(value=Name(id='Matcher', ctx=Load()), attr='_operators', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='_operators', ctx=Load()), slice=Constant(value='~='), ctx=Store())], value=Constant(value='_match_compatible')), Assign(targets=[Name(id='numeric_re', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='^(\\d+(\\.\\d+)*)')], keywords=[])), FunctionDef(name='_match_compatible', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='version'), arg(arg='constraint'), arg(arg='prefix')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='version', ctx=Load()), ops=[Lt()], comparators=[Name(id='constraint', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='m', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='numeric_re', ctx=Load()), attr='match', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='constraint', ctx=Load())], keywords=[])], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='m', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='Cannot compute compatible match for version %s  and constraint %s'), Name(id='version', ctx=Load()), Name(id='constraint', ctx=Load())], keywords=[])), Return(value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='s', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='groups', ctx=Load()), args=[], keywords=[]), slice=Constant(value=0), ctx=Load())), If(test=Compare(left=Constant(value='.'), ops=[In()], comparators=[Name(id='s', ctx=Load())]), body=[Assign(targets=[Name(id='s', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='rsplit', ctx=Load()), args=[Constant(value='.'), Constant(value=1)], keywords=[]), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='_match_prefix', ctx=Load()), args=[Name(id='version', ctx=Load()), Name(id='s', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), Assign(targets=[Name(id='_SEMVER_RE', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='^(\\d+)\\.(\\d+)\\.(\\d+)(-[a-z0-9]+(\\.[a-z0-9-]+)*)?(\\+[a-z0-9]+(\\.[a-z0-9-]+)*)?$'), Attribute(value=Name(id='re', ctx=Load()), attr='I', ctx=Load())], keywords=[])), FunctionDef(name='is_semver', args=arguments(posonlyargs=[], args=[arg(arg='s')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='_SEMVER_RE', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_semantic_key', args=arguments(posonlyargs=[], args=[arg(arg='s')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='make_tuple', args=arguments(posonlyargs=[], args=[arg(arg='s'), arg(arg='absent')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='s', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Tuple(elts=[Name(id='absent', ctx=Load())], ctx=Load()))], orelse=[Assign(targets=[Name(id='parts', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='s', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[])), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[ListComp(elt=IfExp(test=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='isdigit', ctx=Load()), args=[], keywords=[]), body=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='zfill', ctx=Load()), args=[Constant(value=8)], keywords=[]), orelse=Name(id='p', ctx=Load())), generators=[comprehension(target=Name(id='p', ctx=Store()), iter=Name(id='parts', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='m', ctx=Store())], value=Call(func=Name(id='is_semver', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='m', ctx=Load())), body=[Raise(exc=Call(func=Name(id='UnsupportedVersionError', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='groups', ctx=Store())], value=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='groups', ctx=Load()), args=[], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='major', ctx=Store()), Name(id='minor', ctx=Store()), Name(id='patch', ctx=Store())], ctx=Store())], value=ListComp(elt=Call(func=Name(id='int', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Subscript(value=Name(id='groups', ctx=Load()), slice=Slice(upper=Constant(value=3)), ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Tuple(elts=[Name(id='pre', ctx=Store()), Name(id='build', ctx=Store())], ctx=Store())], value=Tuple(elts=[Call(func=Name(id='make_tuple', ctx=Load()), args=[Subscript(value=Name(id='groups', ctx=Load()), slice=Constant(value=3), ctx=Load()), Constant(value='|')], keywords=[]), Call(func=Name(id='make_tuple', ctx=Load()), args=[Subscript(value=Name(id='groups', ctx=Load()), slice=Constant(value=5), ctx=Load()), Constant(value='*')], keywords=[])], ctx=Load())), Return(value=Tuple(elts=[Tuple(elts=[Name(id='major', ctx=Load()), Name(id='minor', ctx=Load()), Name(id='patch', ctx=Load())], ctx=Load()), Name(id='pre', ctx=Load()), Name(id='build', ctx=Load())], ctx=Load()))], decorator_list=[]), ClassDef(name='SemanticVersion', bases=[Name(id='Version', ctx=Load())], keywords=[], body=[FunctionDef(name='parse', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='s')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='_semantic_key', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='is_prerelease', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Compare(left=Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_parts', ctx=Load()), slice=Constant(value=1), ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[NotEq()], comparators=[Constant(value='|')]))], decorator_list=[Name(id='property', ctx=Load())])], decorator_list=[]), ClassDef(name='SemanticMatcher', bases=[Name(id='Matcher', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='version_class', ctx=Store())], value=Name(id='SemanticVersion', ctx=Load()))], decorator_list=[]), ClassDef(name='VersionScheme', bases=[Name(id='object', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key'), arg(arg='matcher'), arg(arg='suggester')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='key', ctx=Store())], value=Name(id='key', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='matcher', ctx=Store())], value=Name(id='matcher', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='suggester', ctx=Store())], value=Name(id='suggester', ctx=Load()))], decorator_list=[]), FunctionDef(name='is_valid_version', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='s')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='matcher', ctx=Load()), attr='version_class', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])), Assign(targets=[Name(id='result', ctx=Store())], value=Constant(value=True))], handlers=[ExceptHandler(type=Name(id='UnsupportedVersionError', ctx=Load()), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Constant(value=False))])], orelse=[], finalbody=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[]), FunctionDef(name='is_valid_matcher', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='s')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='matcher', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])), Assign(targets=[Name(id='result', ctx=Store())], value=Constant(value=True))], handlers=[ExceptHandler(type=Name(id='UnsupportedVersionError', ctx=Load()), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Constant(value=False))])], orelse=[], finalbody=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[]), FunctionDef(name='is_valid_constraint_list', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='s')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Used for processing some metadata fields\n        ')), If(test=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value=',')], keywords=[]), body=[Assign(targets=[Name(id='s', ctx=Store())], value=Subscript(value=Name(id='s', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='is_valid_matcher', ctx=Load()), args=[BinOp(left=Constant(value='dummy_name (%s)'), op=Mod(), right=Name(id='s', ctx=Load()))], keywords=[]))], decorator_list=[]), FunctionDef(name='suggest', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='s')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='suggester', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='suggester', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]))]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[])], decorator_list=[]), Assign(targets=[Name(id='_SCHEMES', ctx=Store())], value=Dict(keys=[Constant(value='normalized'), Constant(value='legacy'), Constant(value='semantic')], values=[Call(func=Name(id='VersionScheme', ctx=Load()), args=[Name(id='_normalized_key', ctx=Load()), Name(id='NormalizedMatcher', ctx=Load()), Name(id='_suggest_normalized_version', ctx=Load())], keywords=[]), Call(func=Name(id='VersionScheme', ctx=Load()), args=[Name(id='_legacy_key', ctx=Load()), Name(id='LegacyMatcher', ctx=Load()), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='s')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Name(id='s', ctx=Load()))], keywords=[]), Call(func=Name(id='VersionScheme', ctx=Load()), args=[Name(id='_semantic_key', ctx=Load()), Name(id='SemanticMatcher', ctx=Load()), Name(id='_suggest_semantic_version', ctx=Load())], keywords=[])])), Assign(targets=[Subscript(value=Name(id='_SCHEMES', ctx=Load()), slice=Constant(value='default'), ctx=Store())], value=Subscript(value=Name(id='_SCHEMES', ctx=Load()), slice=Constant(value='normalized'), ctx=Load())), FunctionDef(name='get_scheme', args=arguments(posonlyargs=[], args=[arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='name', ctx=Load()), ops=[NotIn()], comparators=[Name(id='_SCHEMES', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='unknown scheme name: %r'), op=Mod(), right=Name(id='name', ctx=Load()))], keywords=[]))], orelse=[]), Return(value=Subscript(value=Name(id='_SCHEMES', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load()))], decorator_list=[])], type_ignores=[])