Module(body=[Import(names=[alias(name='codecs')]), ImportFrom(module='collections', names=[alias(name='deque')], level=0), Import(names=[alias(name='contextlib')]), Import(names=[alias(name='csv')]), ImportFrom(module='glob', names=[alias(name='iglob', asname='std_iglob')], level=0), Import(names=[alias(name='io')]), Import(names=[alias(name='json')]), Import(names=[alias(name='logging')]), Import(names=[alias(name='os')]), Import(names=[alias(name='py_compile')]), Import(names=[alias(name='re')]), Import(names=[alias(name='socket')]), Try(body=[Import(names=[alias(name='ssl')])], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Assign(targets=[Name(id='ssl', ctx=Store())], value=Constant(value=None))])], orelse=[], finalbody=[]), Import(names=[alias(name='subprocess')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='tarfile')]), Import(names=[alias(name='tempfile')]), Import(names=[alias(name='textwrap')]), Try(body=[Import(names=[alias(name='threading')])], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Import(names=[alias(name='dummy_threading', asname='threading')])])], orelse=[], finalbody=[]), Import(names=[alias(name='time')]), ImportFrom(names=[alias(name='DistlibException')], level=1), ImportFrom(module='compat', names=[alias(name='string_types'), alias(name='text_type'), alias(name='shutil'), alias(name='raw_input'), alias(name='StringIO'), alias(name='cache_from_source'), alias(name='urlopen'), alias(name='urljoin'), alias(name='httplib'), alias(name='xmlrpclib'), alias(name='splittype'), alias(name='HTTPHandler'), alias(name='BaseConfigurator'), alias(name='valid_ident'), alias(name='Container'), alias(name='configparser'), alias(name='URLError'), alias(name='ZipFile'), alias(name='fsdecode'), alias(name='unquote'), alias(name='urlparse')], level=1), Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), Assign(targets=[Name(id='IDENTIFIER', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='^([\\w\\.-]+)\\s*')], keywords=[])), Assign(targets=[Name(id='VERSION_IDENTIFIER', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='^([\\w\\.*+-]+)\\s*')], keywords=[])), Assign(targets=[Name(id='COMPARE_OP', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='^(<=?|>=?|={2,3}|[~!]=)\\s*')], keywords=[])), Assign(targets=[Name(id='MARKER_OP', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='^((<=?)|(>=?)|={2,3}|[~!]=|in|not\\s+in)\\s*')], keywords=[])), Assign(targets=[Name(id='OR', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='^or\\b\\s*')], keywords=[])), Assign(targets=[Name(id='AND', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='^and\\b\\s*')], keywords=[])), Assign(targets=[Name(id='NON_SPACE', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='(\\S+)\\s*')], keywords=[])), Assign(targets=[Name(id='STRING_CHUNK', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='([\\s\\w\\.{}()*+#:;,/?!~`@$%^&=|<>\\[\\]-]+)')], keywords=[])), FunctionDef(name='parse_marker', args=arguments(posonlyargs=[], args=[arg(arg='marker_string')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Parse a marker string and return a dictionary containing a marker expression.\n\n    The dictionary will contain keys "op", "lhs" and "rhs" for non-terminals in\n    the expression grammar, or strings. A string contained in quotes is to be\n    interpreted as a literal string, and a string not contained in quotes is a\n    variable (such as os_name).\n    ')), FunctionDef(name='marker_var', args=arguments(posonlyargs=[], args=[arg(arg='remaining')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='m', ctx=Store())], value=Call(func=Attribute(value=Name(id='IDENTIFIER', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='remaining', ctx=Load())], keywords=[])), If(test=Name(id='m', ctx=Load()), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='groups', ctx=Load()), args=[], keywords=[]), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='remaining', ctx=Store())], value=Subscript(value=Name(id='remaining', ctx=Load()), slice=Slice(lower=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='end', ctx=Load()), args=[], keywords=[])), ctx=Load()))], orelse=[If(test=UnaryOp(op=Not(), operand=Name(id='remaining', ctx=Load())), body=[Raise(exc=Call(func=Name(id='SyntaxError', ctx=Load()), args=[Constant(value='unexpected end of input')], keywords=[]))], orelse=[Assign(targets=[Name(id='q', ctx=Store())], value=Subscript(value=Name(id='remaining', ctx=Load()), slice=Constant(value=0), ctx=Load())), If(test=Compare(left=Name(id='q', ctx=Load()), ops=[NotIn()], comparators=[Constant(value='\'"')]), body=[Raise(exc=Call(func=Name(id='SyntaxError', ctx=Load()), args=[BinOp(left=Constant(value='invalid expression: %s'), op=Mod(), right=Name(id='remaining', ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Name(id='oq', ctx=Store())], value=Call(func=Attribute(value=Constant(value='\'"'), attr='replace', ctx=Load()), args=[Name(id='q', ctx=Load()), Constant(value='')], keywords=[])), Assign(targets=[Name(id='remaining', ctx=Store())], value=Subscript(value=Name(id='remaining', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())), Assign(targets=[Name(id='parts', ctx=Store())], value=List(elts=[Name(id='q', ctx=Load())], ctx=Load())), While(test=Name(id='remaining', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='remaining', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='q', ctx=Load())]), body=[Break()], orelse=[If(test=Compare(left=Subscript(value=Name(id='remaining', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Name(id='oq', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='parts', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='oq', ctx=Load())], keywords=[])), Assign(targets=[Name(id='remaining', ctx=Store())], value=Subscript(value=Name(id='remaining', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()))], orelse=[Assign(targets=[Name(id='m', ctx=Store())], value=Call(func=Attribute(value=Name(id='STRING_CHUNK', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='remaining', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='m', ctx=Load())), body=[Raise(exc=Call(func=Name(id='SyntaxError', ctx=Load()), args=[BinOp(left=Constant(value='error in string literal: %s'), op=Mod(), right=Name(id='remaining', ctx=Load()))], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='parts', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='groups', ctx=Load()), args=[], keywords=[]), slice=Constant(value=0), ctx=Load())], keywords=[])), Assign(targets=[Name(id='remaining', ctx=Store())], value=Subscript(value=Name(id='remaining', ctx=Load()), slice=Slice(lower=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='end', ctx=Load()), args=[], keywords=[])), ctx=Load()))])])], orelse=[Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Name(id='parts', ctx=Load())], keywords=[])), Raise(exc=Call(func=Name(id='SyntaxError', ctx=Load()), args=[BinOp(left=Constant(value='unterminated string: %s'), op=Mod(), right=Name(id='s', ctx=Load()))], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='parts', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='q', ctx=Load())], keywords=[])), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Name(id='parts', ctx=Load())], keywords=[])), Assign(targets=[Name(id='remaining', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='remaining', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), attr='lstrip', ctx=Load()), args=[], keywords=[]))])]), Return(value=Tuple(elts=[Name(id='result', ctx=Load()), Name(id='remaining', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='marker_expr', args=arguments(posonlyargs=[], args=[arg(arg='remaining')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[Name(id='remaining', ctx=Load()), Compare(left=Subscript(value=Name(id='remaining', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Constant(value='(')])]), body=[Assign(targets=[Tuple(elts=[Name(id='result', ctx=Store()), Name(id='remaining', ctx=Store())], ctx=Store())], value=Call(func=Name(id='marker', ctx=Load()), args=[Call(func=Attribute(value=Subscript(value=Name(id='remaining', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), attr='lstrip', ctx=Load()), args=[], keywords=[])], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='remaining', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[NotEq()], comparators=[Constant(value=')')]), body=[Raise(exc=Call(func=Name(id='SyntaxError', ctx=Load()), args=[BinOp(left=Constant(value='unterminated parenthesis: %s'), op=Mod(), right=Name(id='remaining', ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Name(id='remaining', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='remaining', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), attr='lstrip', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Tuple(elts=[Name(id='lhs', ctx=Store()), Name(id='remaining', ctx=Store())], ctx=Store())], value=Call(func=Name(id='marker_var', ctx=Load()), args=[Name(id='remaining', ctx=Load())], keywords=[])), While(test=Name(id='remaining', ctx=Load()), body=[Assign(targets=[Name(id='m', ctx=Store())], value=Call(func=Attribute(value=Name(id='MARKER_OP', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='remaining', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='m', ctx=Load())), body=[Break()], orelse=[]), Assign(targets=[Name(id='op', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='groups', ctx=Load()), args=[], keywords=[]), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='remaining', ctx=Store())], value=Subscript(value=Name(id='remaining', ctx=Load()), slice=Slice(lower=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='end', ctx=Load()), args=[], keywords=[])), ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='rhs', ctx=Store()), Name(id='remaining', ctx=Store())], ctx=Store())], value=Call(func=Name(id='marker_var', ctx=Load()), args=[Name(id='remaining', ctx=Load())], keywords=[])), Assign(targets=[Name(id='lhs', ctx=Store())], value=Dict(keys=[Constant(value='op'), Constant(value='lhs'), Constant(value='rhs')], values=[Name(id='op', ctx=Load()), Name(id='lhs', ctx=Load()), Name(id='rhs', ctx=Load())]))], orelse=[]), Assign(targets=[Name(id='result', ctx=Store())], value=Name(id='lhs', ctx=Load()))]), Return(value=Tuple(elts=[Name(id='result', ctx=Load()), Name(id='remaining', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='marker_and', args=arguments(posonlyargs=[], args=[arg(arg='remaining')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='lhs', ctx=Store()), Name(id='remaining', ctx=Store())], ctx=Store())], value=Call(func=Name(id='marker_expr', ctx=Load()), args=[Name(id='remaining', ctx=Load())], keywords=[])), While(test=Name(id='remaining', ctx=Load()), body=[Assign(targets=[Name(id='m', ctx=Store())], value=Call(func=Attribute(value=Name(id='AND', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='remaining', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='m', ctx=Load())), body=[Break()], orelse=[]), Assign(targets=[Name(id='remaining', ctx=Store())], value=Subscript(value=Name(id='remaining', ctx=Load()), slice=Slice(lower=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='end', ctx=Load()), args=[], keywords=[])), ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='rhs', ctx=Store()), Name(id='remaining', ctx=Store())], ctx=Store())], value=Call(func=Name(id='marker_expr', ctx=Load()), args=[Name(id='remaining', ctx=Load())], keywords=[])), Assign(targets=[Name(id='lhs', ctx=Store())], value=Dict(keys=[Constant(value='op'), Constant(value='lhs'), Constant(value='rhs')], values=[Constant(value='and'), Name(id='lhs', ctx=Load()), Name(id='rhs', ctx=Load())]))], orelse=[]), Return(value=Tuple(elts=[Name(id='lhs', ctx=Load()), Name(id='remaining', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='marker', args=arguments(posonlyargs=[], args=[arg(arg='remaining')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='lhs', ctx=Store()), Name(id='remaining', ctx=Store())], ctx=Store())], value=Call(func=Name(id='marker_and', ctx=Load()), args=[Name(id='remaining', ctx=Load())], keywords=[])), While(test=Name(id='remaining', ctx=Load()), body=[Assign(targets=[Name(id='m', ctx=Store())], value=Call(func=Attribute(value=Name(id='OR', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='remaining', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='m', ctx=Load())), body=[Break()], orelse=[]), Assign(targets=[Name(id='remaining', ctx=Store())], value=Subscript(value=Name(id='remaining', ctx=Load()), slice=Slice(lower=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='end', ctx=Load()), args=[], keywords=[])), ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='rhs', ctx=Store()), Name(id='remaining', ctx=Store())], ctx=Store())], value=Call(func=Name(id='marker_and', ctx=Load()), args=[Name(id='remaining', ctx=Load())], keywords=[])), Assign(targets=[Name(id='lhs', ctx=Store())], value=Dict(keys=[Constant(value='op'), Constant(value='lhs'), Constant(value='rhs')], values=[Constant(value='or'), Name(id='lhs', ctx=Load()), Name(id='rhs', ctx=Load())]))], orelse=[]), Return(value=Tuple(elts=[Name(id='lhs', ctx=Load()), Name(id='remaining', ctx=Load())], ctx=Load()))], decorator_list=[]), Return(value=Call(func=Name(id='marker', ctx=Load()), args=[Name(id='marker_string', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='parse_requirement', args=arguments(posonlyargs=[], args=[arg(arg='req')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Parse a requirement passed in as a string. Return a Container\n    whose attributes contain the various parts of the requirement.\n    ')), Assign(targets=[Name(id='remaining', ctx=Store())], value=Call(func=Attribute(value=Name(id='req', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[])), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Name(id='remaining', ctx=Load())), Call(func=Attribute(value=Name(id='remaining', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='#')], keywords=[])]), body=[Return(value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='m', ctx=Store())], value=Call(func=Attribute(value=Name(id='IDENTIFIER', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='remaining', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='m', ctx=Load())), body=[Raise(exc=Call(func=Name(id='SyntaxError', ctx=Load()), args=[BinOp(left=Constant(value='name expected: %s'), op=Mod(), right=Name(id='remaining', ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Name(id='distname', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='groups', ctx=Load()), args=[], keywords=[]), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='remaining', ctx=Store())], value=Subscript(value=Name(id='remaining', ctx=Load()), slice=Slice(lower=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='end', ctx=Load()), args=[], keywords=[])), ctx=Load())), Assign(targets=[Name(id='extras', ctx=Store()), Name(id='mark_expr', ctx=Store()), Name(id='versions', ctx=Store()), Name(id='uri', ctx=Store())], value=Constant(value=None)), If(test=BoolOp(op=And(), values=[Name(id='remaining', ctx=Load()), Compare(left=Subscript(value=Name(id='remaining', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Constant(value='[')])]), body=[Assign(targets=[Name(id='i', ctx=Store())], value=Call(func=Attribute(value=Name(id='remaining', ctx=Load()), attr='find', ctx=Load()), args=[Constant(value=']'), Constant(value=1)], keywords=[])), If(test=Compare(left=Name(id='i', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0)]), body=[Raise(exc=Call(func=Name(id='SyntaxError', ctx=Load()), args=[BinOp(left=Constant(value='unterminated extra: %s'), op=Mod(), right=Name(id='remaining', ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Name(id='s', ctx=Store())], value=Subscript(value=Name(id='remaining', ctx=Load()), slice=Slice(lower=Constant(value=1), upper=Name(id='i', ctx=Load())), ctx=Load())), Assign(targets=[Name(id='remaining', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='remaining', ctx=Load()), slice=Slice(lower=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1))), ctx=Load()), attr='lstrip', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='extras', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Name(id='s', ctx=Load()), body=[Assign(targets=[Name(id='m', ctx=Store())], value=Call(func=Attribute(value=Name(id='IDENTIFIER', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='m', ctx=Load())), body=[Raise(exc=Call(func=Name(id='SyntaxError', ctx=Load()), args=[BinOp(left=Constant(value='malformed extra: %s'), op=Mod(), right=Name(id='s', ctx=Load()))], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='extras', ctx=Load()), attr='append', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='groups', ctx=Load()), args=[], keywords=[]), slice=Constant(value=0), ctx=Load())], keywords=[])), Assign(targets=[Name(id='s', ctx=Store())], value=Subscript(value=Name(id='s', ctx=Load()), slice=Slice(lower=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='end', ctx=Load()), args=[], keywords=[])), ctx=Load())), If(test=UnaryOp(op=Not(), operand=Name(id='s', ctx=Load())), body=[Break()], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='s', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[NotEq()], comparators=[Constant(value=',')]), body=[Raise(exc=Call(func=Name(id='SyntaxError', ctx=Load()), args=[BinOp(left=Constant(value='comma expected in extras: %s'), op=Mod(), right=Name(id='s', ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='s', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), attr='lstrip', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='extras', ctx=Load())), body=[Assign(targets=[Name(id='extras', ctx=Store())], value=Constant(value=None))], orelse=[])], orelse=[]), If(test=Name(id='remaining', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='remaining', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Constant(value='@')]), body=[Assign(targets=[Name(id='remaining', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='remaining', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), attr='lstrip', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='m', ctx=Store())], value=Call(func=Attribute(value=Name(id='NON_SPACE', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='remaining', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='m', ctx=Load())), body=[Raise(exc=Call(func=Name(id='SyntaxError', ctx=Load()), args=[BinOp(left=Constant(value='invalid URI: %s'), op=Mod(), right=Name(id='remaining', ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Name(id='uri', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='groups', ctx=Load()), args=[], keywords=[]), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='t', ctx=Store())], value=Call(func=Name(id='urlparse', ctx=Load()), args=[Name(id='uri', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=BoolOp(op=And(), values=[Attribute(value=Name(id='t', ctx=Load()), attr='scheme', ctx=Load()), Attribute(value=Name(id='t', ctx=Load()), attr='netloc', ctx=Load())])), body=[Raise(exc=Call(func=Name(id='SyntaxError', ctx=Load()), args=[BinOp(left=Constant(value='Invalid URL: %s'), op=Mod(), right=Name(id='uri', ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Name(id='remaining', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='remaining', ctx=Load()), slice=Slice(lower=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='end', ctx=Load()), args=[], keywords=[])), ctx=Load()), attr='lstrip', ctx=Load()), args=[], keywords=[]))], orelse=[FunctionDef(name='get_versions', args=arguments(posonlyargs=[], args=[arg(arg='ver_remaining')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n                Return a list of operator, version tuples if any are\n                specified, else None.\n                ')), Assign(targets=[Name(id='m', ctx=Store())], value=Call(func=Attribute(value=Name(id='COMPARE_OP', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='ver_remaining', ctx=Load())], keywords=[])), Assign(targets=[Name(id='versions', ctx=Store())], value=Constant(value=None)), If(test=Name(id='m', ctx=Load()), body=[Assign(targets=[Name(id='versions', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Constant(value=True), body=[Assign(targets=[Name(id='op', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='groups', ctx=Load()), args=[], keywords=[]), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='ver_remaining', ctx=Store())], value=Subscript(value=Name(id='ver_remaining', ctx=Load()), slice=Slice(lower=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='end', ctx=Load()), args=[], keywords=[])), ctx=Load())), Assign(targets=[Name(id='m', ctx=Store())], value=Call(func=Attribute(value=Name(id='VERSION_IDENTIFIER', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='ver_remaining', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='m', ctx=Load())), body=[Raise(exc=Call(func=Name(id='SyntaxError', ctx=Load()), args=[BinOp(left=Constant(value='invalid version: %s'), op=Mod(), right=Name(id='ver_remaining', ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Name(id='v', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='groups', ctx=Load()), args=[], keywords=[]), slice=Constant(value=0), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='versions', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='op', ctx=Load()), Name(id='v', ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='ver_remaining', ctx=Store())], value=Subscript(value=Name(id='ver_remaining', ctx=Load()), slice=Slice(lower=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='end', ctx=Load()), args=[], keywords=[])), ctx=Load())), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Name(id='ver_remaining', ctx=Load())), Compare(left=Subscript(value=Name(id='ver_remaining', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[NotEq()], comparators=[Constant(value=',')])]), body=[Break()], orelse=[]), Assign(targets=[Name(id='ver_remaining', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='ver_remaining', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), attr='lstrip', ctx=Load()), args=[], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='ver_remaining', ctx=Load())), body=[Break()], orelse=[]), Assign(targets=[Name(id='m', ctx=Store())], value=Call(func=Attribute(value=Name(id='COMPARE_OP', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='ver_remaining', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='m', ctx=Load())), body=[Raise(exc=Call(func=Name(id='SyntaxError', ctx=Load()), args=[BinOp(left=Constant(value='invalid constraint: %s'), op=Mod(), right=Name(id='ver_remaining', ctx=Load()))], keywords=[]))], orelse=[])], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='versions', ctx=Load())), body=[Assign(targets=[Name(id='versions', ctx=Store())], value=Constant(value=None))], orelse=[])], orelse=[]), Return(value=Tuple(elts=[Name(id='versions', ctx=Load()), Name(id='ver_remaining', ctx=Load())], ctx=Load()))], decorator_list=[]), If(test=Compare(left=Subscript(value=Name(id='remaining', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[NotEq()], comparators=[Constant(value='(')]), body=[Assign(targets=[Tuple(elts=[Name(id='versions', ctx=Store()), Name(id='remaining', ctx=Store())], ctx=Store())], value=Call(func=Name(id='get_versions', ctx=Load()), args=[Name(id='remaining', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='i', ctx=Store())], value=Call(func=Attribute(value=Name(id='remaining', ctx=Load()), attr='find', ctx=Load()), args=[Constant(value=')'), Constant(value=1)], keywords=[])), If(test=Compare(left=Name(id='i', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0)]), body=[Raise(exc=Call(func=Name(id='SyntaxError', ctx=Load()), args=[BinOp(left=Constant(value='unterminated parenthesis: %s'), op=Mod(), right=Name(id='remaining', ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Name(id='s', ctx=Store())], value=Subscript(value=Name(id='remaining', ctx=Load()), slice=Slice(lower=Constant(value=1), upper=Name(id='i', ctx=Load())), ctx=Load())), Assign(targets=[Name(id='remaining', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='remaining', ctx=Load()), slice=Slice(lower=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1))), ctx=Load()), attr='lstrip', ctx=Load()), args=[], keywords=[])), If(test=Call(func=Attribute(value=Name(id='COMPARE_OP', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='versions', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Name(id='get_versions', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='m', ctx=Store())], value=Call(func=Attribute(value=Name(id='VERSION_IDENTIFIER', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='m', ctx=Load())), body=[Raise(exc=Call(func=Name(id='SyntaxError', ctx=Load()), args=[BinOp(left=Constant(value='invalid constraint: %s'), op=Mod(), right=Name(id='s', ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Name(id='v', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='groups', ctx=Load()), args=[], keywords=[]), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='s', ctx=Load()), slice=Slice(lower=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='end', ctx=Load()), args=[], keywords=[])), ctx=Load()), attr='lstrip', ctx=Load()), args=[], keywords=[])), If(test=Name(id='s', ctx=Load()), body=[Raise(exc=Call(func=Name(id='SyntaxError', ctx=Load()), args=[BinOp(left=Constant(value='invalid constraint: %s'), op=Mod(), right=Name(id='s', ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Name(id='versions', ctx=Store())], value=List(elts=[Tuple(elts=[Constant(value='~='), Name(id='v', ctx=Load())], ctx=Load())], ctx=Load()))])])])], orelse=[]), If(test=Name(id='remaining', ctx=Load()), body=[If(test=Compare(left=Subscript(value=Name(id='remaining', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[NotEq()], comparators=[Constant(value=';')]), body=[Raise(exc=Call(func=Name(id='SyntaxError', ctx=Load()), args=[BinOp(left=Constant(value='invalid requirement: %s'), op=Mod(), right=Name(id='remaining', ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Name(id='remaining', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='remaining', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), attr='lstrip', ctx=Load()), args=[], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='mark_expr', ctx=Store()), Name(id='remaining', ctx=Store())], ctx=Store())], value=Call(func=Name(id='parse_marker', ctx=Load()), args=[Name(id='remaining', ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Name(id='remaining', ctx=Load()), Compare(left=Subscript(value=Name(id='remaining', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[NotEq()], comparators=[Constant(value='#')])]), body=[Raise(exc=Call(func=Name(id='SyntaxError', ctx=Load()), args=[BinOp(left=Constant(value='unexpected trailing data: %s'), op=Mod(), right=Name(id='remaining', ctx=Load()))], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='versions', ctx=Load())), body=[Assign(targets=[Name(id='rs', ctx=Store())], value=Name(id='distname', ctx=Load()))], orelse=[Assign(targets=[Name(id='rs', ctx=Store())], value=BinOp(left=Constant(value='%s %s'), op=Mod(), right=Tuple(elts=[Name(id='distname', ctx=Load()), Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[ListComp(elt=BinOp(left=Constant(value='%s %s'), op=Mod(), right=Name(id='con', ctx=Load())), generators=[comprehension(target=Name(id='con', ctx=Store()), iter=Name(id='versions', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], ctx=Load())))]), Return(value=Call(func=Name(id='Container', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Name(id='distname', ctx=Load())), keyword(arg='extras', value=Name(id='extras', ctx=Load())), keyword(arg='constraints', value=Name(id='versions', ctx=Load())), keyword(arg='marker', value=Name(id='mark_expr', ctx=Load())), keyword(arg='url', value=Name(id='uri', ctx=Load())), keyword(arg='requirement', value=Name(id='rs', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='get_resources_dests', args=arguments(posonlyargs=[], args=[arg(arg='resources_root'), arg(arg='rules')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Find destinations for resources files')), FunctionDef(name='get_rel_path', args=arguments(posonlyargs=[], args=[arg(arg='root'), arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='root', ctx=Store())], value=Call(func=Attribute(value=Name(id='root', ctx=Load()), attr='replace', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='sep', ctx=Load()), Constant(value='/')], keywords=[])), Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='replace', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='sep', ctx=Load()), Constant(value='/')], keywords=[])), Assert(test=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='startswith', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Subscript(value=Name(id='path', ctx=Load()), slice=Slice(lower=Call(func=Name(id='len', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[])), ctx=Load()), attr='lstrip', ctx=Load()), args=[Constant(value='/')], keywords=[]))], decorator_list=[]), Assign(targets=[Name(id='destinations', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='base', ctx=Store()), Name(id='suffix', ctx=Store()), Name(id='dest', ctx=Store())], ctx=Store()), iter=Name(id='rules', ctx=Load()), body=[Assign(targets=[Name(id='prefix', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='resources_root', ctx=Load()), Name(id='base', ctx=Load())], keywords=[])), For(target=Name(id='abs_base', ctx=Store()), iter=Call(func=Name(id='iglob', ctx=Load()), args=[Name(id='prefix', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='abs_glob', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='abs_base', ctx=Load()), Name(id='suffix', ctx=Load())], keywords=[])), For(target=Name(id='abs_path', ctx=Store()), iter=Call(func=Name(id='iglob', ctx=Load()), args=[Name(id='abs_glob', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='resource_file', ctx=Store())], value=Call(func=Name(id='get_rel_path', ctx=Load()), args=[Name(id='resources_root', ctx=Load()), Name(id='abs_path', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='dest', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='destinations', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='resource_file', ctx=Load()), Constant(value=None)], keywords=[]))], orelse=[Assign(targets=[Name(id='rel_path', ctx=Store())], value=Call(func=Name(id='get_rel_path', ctx=Load()), args=[Name(id='abs_base', ctx=Load()), Name(id='abs_path', ctx=Load())], keywords=[])), Assign(targets=[Name(id='rel_dest', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='dest', ctx=Load()), attr='replace', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='sep', ctx=Load()), Constant(value='/')], keywords=[]), attr='rstrip', ctx=Load()), args=[Constant(value='/')], keywords=[])), Assign(targets=[Subscript(value=Name(id='destinations', ctx=Load()), slice=Name(id='resource_file', ctx=Load()), ctx=Store())], value=BinOp(left=BinOp(left=Name(id='rel_dest', ctx=Load()), op=Add(), right=Constant(value='/')), op=Add(), right=Name(id='rel_path', ctx=Load())))])], orelse=[])], orelse=[])], orelse=[]), Return(value=Name(id='destinations', ctx=Load()))], decorator_list=[]), FunctionDef(name='in_venv', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='sys', ctx=Load()), Constant(value='real_prefix')], keywords=[]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Constant(value=True))], orelse=[Assign(targets=[Name(id='result', ctx=Store())], value=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='prefix', ctx=Load()), ops=[NotEq()], comparators=[Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='sys', ctx=Load()), Constant(value='base_prefix'), Attribute(value=Name(id='sys', ctx=Load()), attr='prefix', ctx=Load())], keywords=[])]))]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_executable', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Attribute(value=Name(id='sys', ctx=Load()), attr='executable', ctx=Load())), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='result', ctx=Load()), Name(id='text_type', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='fsdecode', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[]), FunctionDef(name='proceed', args=arguments(posonlyargs=[], args=[arg(arg='prompt'), arg(arg='allowed_chars'), arg(arg='error_prompt'), arg(arg='default')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Assign(targets=[Name(id='p', ctx=Store())], value=Name(id='prompt', ctx=Load())), While(test=Constant(value=True), body=[Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Name(id='raw_input', ctx=Load()), args=[Name(id='p', ctx=Load())], keywords=[])), Assign(targets=[Name(id='p', ctx=Store())], value=Name(id='prompt', ctx=Load())), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Name(id='s', ctx=Load())), Name(id='default', ctx=Load())]), body=[Assign(targets=[Name(id='s', ctx=Store())], value=Name(id='default', ctx=Load()))], orelse=[]), If(test=Name(id='s', ctx=Load()), body=[Assign(targets=[Name(id='c', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='s', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='c', ctx=Load()), ops=[In()], comparators=[Name(id='allowed_chars', ctx=Load())]), body=[Break()], orelse=[]), If(test=Name(id='error_prompt', ctx=Load()), body=[Assign(targets=[Name(id='p', ctx=Store())], value=BinOp(left=Constant(value='%c: %s\n%s'), op=Mod(), right=Tuple(elts=[Name(id='c', ctx=Load()), Name(id='error_prompt', ctx=Load()), Name(id='prompt', ctx=Load())], ctx=Load())))], orelse=[])], orelse=[])], orelse=[]), Return(value=Name(id='c', ctx=Load()))], decorator_list=[]), FunctionDef(name='extract_by_key', args=arguments(posonlyargs=[], args=[arg(arg='d'), arg(arg='keys')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='keys', ctx=Load()), Name(id='string_types', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='keys', ctx=Store())], value=Call(func=Attribute(value=Name(id='keys', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='result', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='key', ctx=Store()), iter=Name(id='keys', ctx=Load()), body=[If(test=Compare(left=Name(id='key', ctx=Load()), ops=[In()], comparators=[Name(id='d', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='d', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[]), FunctionDef(name='read_exports', args=arguments(posonlyargs=[], args=[arg(arg='stream')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[GtE()], comparators=[Constant(value=3)]), body=[Assign(targets=[Name(id='stream', ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='codecs', ctx=Load()), attr='getreader', ctx=Load()), args=[Constant(value='utf-8')], keywords=[]), args=[Name(id='stream', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Name(id='stream', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='stream', ctx=Store())], value=Call(func=Name(id='StringIO', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])), Try(body=[Assign(targets=[Name(id='jdata', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='stream', ctx=Load())], keywords=[])), Assign(targets=[Name(id='result', ctx=Store())], value=Subscript(value=Subscript(value=Subscript(value=Name(id='jdata', ctx=Load()), slice=Constant(value='extensions'), ctx=Load()), slice=Constant(value='python.exports'), ctx=Load()), slice=Constant(value='exports'), ctx=Load())), For(target=Tuple(elts=[Name(id='group', ctx=Store()), Name(id='entries', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[For(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='entries', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='s', ctx=Store())], value=BinOp(left=Constant(value='%s = %s'), op=Mod(), right=Tuple(elts=[Name(id='k', ctx=Load()), Name(id='v', ctx=Load())], ctx=Load()))), Assign(targets=[Name(id='entry', ctx=Store())], value=Call(func=Name(id='get_export_entry', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])), Assert(test=Compare(left=Name(id='entry', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Subscript(value=Name(id='entries', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Store())], value=Name(id='entry', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='result', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='stream', ctx=Load()), attr='seek', ctx=Load()), args=[Constant(value=0), Constant(value=0)], keywords=[]))])], orelse=[], finalbody=[]), FunctionDef(name='read_stream', args=arguments(posonlyargs=[], args=[arg(arg='cp'), arg(arg='stream')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='cp', ctx=Load()), Constant(value='read_file')], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='cp', ctx=Load()), attr='read_file', ctx=Load()), args=[Name(id='stream', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='cp', ctx=Load()), attr='readfp', ctx=Load()), args=[Name(id='stream', ctx=Load())], keywords=[]))])], decorator_list=[]), Assign(targets=[Name(id='cp', ctx=Store())], value=Call(func=Attribute(value=Name(id='configparser', ctx=Load()), attr='ConfigParser', ctx=Load()), args=[], keywords=[])), Try(body=[Expr(value=Call(func=Name(id='read_stream', ctx=Load()), args=[Name(id='cp', ctx=Load()), Name(id='stream', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='configparser', ctx=Load()), attr='MissingSectionHeaderError', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='stream', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Name(id='textwrap', ctx=Load()), attr='dedent', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])), Assign(targets=[Name(id='stream', ctx=Store())], value=Call(func=Name(id='StringIO', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='read_stream', ctx=Load()), args=[Name(id='cp', ctx=Load()), Name(id='stream', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='result', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='key', ctx=Store()), iter=Call(func=Attribute(value=Name(id='cp', ctx=Load()), attr='sections', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store()), Name(id='entries', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='cp', ctx=Load()), attr='items', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='s', ctx=Store())], value=BinOp(left=Constant(value='%s = %s'), op=Mod(), right=Tuple(elts=[Name(id='name', ctx=Load()), Name(id='value', ctx=Load())], ctx=Load()))), Assign(targets=[Name(id='entry', ctx=Store())], value=Call(func=Name(id='get_export_entry', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])), Assert(test=Compare(left=Name(id='entry', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Subscript(value=Name(id='entries', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Name(id='entry', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[]), FunctionDef(name='write_exports', args=arguments(posonlyargs=[], args=[arg(arg='exports'), arg(arg='stream')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[GtE()], comparators=[Constant(value=3)]), body=[Assign(targets=[Name(id='stream', ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='codecs', ctx=Load()), attr='getwriter', ctx=Load()), args=[Constant(value='utf-8')], keywords=[]), args=[Name(id='stream', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='cp', ctx=Store())], value=Call(func=Attribute(value=Name(id='configparser', ctx=Load()), attr='ConfigParser', ctx=Load()), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='exports', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='cp', ctx=Load()), attr='add_section', ctx=Load()), args=[Name(id='k', ctx=Load())], keywords=[])), For(target=Name(id='entry', ctx=Store()), iter=Call(func=Attribute(value=Name(id='v', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Attribute(value=Name(id='entry', ctx=Load()), attr='suffix', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='s', ctx=Store())], value=Attribute(value=Name(id='entry', ctx=Load()), attr='prefix', ctx=Load()))], orelse=[Assign(targets=[Name(id='s', ctx=Store())], value=BinOp(left=Constant(value='%s:%s'), op=Mod(), right=Tuple(elts=[Attribute(value=Name(id='entry', ctx=Load()), attr='prefix', ctx=Load()), Attribute(value=Name(id='entry', ctx=Load()), attr='suffix', ctx=Load())], ctx=Load())))]), If(test=Attribute(value=Name(id='entry', ctx=Load()), attr='flags', ctx=Load()), body=[Assign(targets=[Name(id='s', ctx=Store())], value=BinOp(left=Constant(value='%s [%s]'), op=Mod(), right=Tuple(elts=[Name(id='s', ctx=Load()), Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Attribute(value=Name(id='entry', ctx=Load()), attr='flags', ctx=Load())], keywords=[])], ctx=Load())))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='cp', ctx=Load()), attr='set', ctx=Load()), args=[Name(id='k', ctx=Load()), Attribute(value=Name(id='entry', ctx=Load()), attr='name', ctx=Load()), Name(id='s', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='cp', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='stream', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='tempdir', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='td', ctx=Store())], value=Call(func=Attribute(value=Name(id='tempfile', ctx=Load()), attr='mkdtemp', ctx=Load()), args=[], keywords=[])), Try(body=[Expr(value=Yield(value=Name(id='td', ctx=Load())))], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='shutil', ctx=Load()), attr='rmtree', ctx=Load()), args=[Name(id='td', ctx=Load())], keywords=[]))])], decorator_list=[Attribute(value=Name(id='contextlib', ctx=Load()), attr='contextmanager', ctx=Load())]), FunctionDef(name='chdir', args=arguments(posonlyargs=[], args=[arg(arg='d')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='cwd', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getcwd', ctx=Load()), args=[], keywords=[])), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='chdir', ctx=Load()), args=[Name(id='d', ctx=Load())], keywords=[])), Expr(value=Yield())], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='chdir', ctx=Load()), args=[Name(id='cwd', ctx=Load())], keywords=[]))])], decorator_list=[Attribute(value=Name(id='contextlib', ctx=Load()), attr='contextmanager', ctx=Load())]), FunctionDef(name='socket_timeout', args=arguments(posonlyargs=[], args=[arg(arg='seconds')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=15)]), body=[Assign(targets=[Name(id='cto', ctx=Store())], value=Call(func=Attribute(value=Name(id='socket', ctx=Load()), attr='getdefaulttimeout', ctx=Load()), args=[], keywords=[])), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='socket', ctx=Load()), attr='setdefaulttimeout', ctx=Load()), args=[Name(id='seconds', ctx=Load())], keywords=[])), Expr(value=Yield())], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='socket', ctx=Load()), attr='setdefaulttimeout', ctx=Load()), args=[Name(id='cto', ctx=Load())], keywords=[]))])], decorator_list=[Attribute(value=Name(id='contextlib', ctx=Load()), attr='contextmanager', ctx=Load())]), ClassDef(name='cached_property', bases=[Name(id='object', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='func')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='func', ctx=Store())], value=Name(id='func', ctx=Load()))], decorator_list=[]), FunctionDef(name='__get__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='obj'), arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='obj', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Name(id='self', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='func', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='object', ctx=Load()), attr='__setattr__', ctx=Load()), args=[Name(id='obj', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='func', ctx=Load()), attr='__name__', ctx=Load()), Name(id='value', ctx=Load())], keywords=[])), Return(value=Name(id='value', ctx=Load()))], decorator_list=[])], decorator_list=[]), FunctionDef(name='convert_path', args=arguments(posonlyargs=[], args=[arg(arg='pathname')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Return 'pathname' as a name that will work on the native filesystem.\n\n    The path is split on '/' and put back together again using the current\n    directory separator.  Needed because filenames in the setup script are\n    always supplied in Unix style, and have to be converted to the local\n    convention before we can actually use them in the filesystem.  Raises\n    ValueError on non-Unix-ish systems if 'pathname' either starts or\n    ends with a slash.\n    ")), If(test=Compare(left=Attribute(value=Name(id='os', ctx=Load()), attr='sep', ctx=Load()), ops=[Eq()], comparators=[Constant(value='/')]), body=[Return(value=Name(id='pathname', ctx=Load()))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='pathname', ctx=Load())), body=[Return(value=Name(id='pathname', ctx=Load()))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='pathname', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Constant(value='/')]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value="path '%s' cannot be absolute"), op=Mod(), right=Name(id='pathname', ctx=Load()))], keywords=[]))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='pathname', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), ops=[Eq()], comparators=[Constant(value='/')]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value="path '%s' cannot end with '/'"), op=Mod(), right=Name(id='pathname', ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Name(id='paths', ctx=Store())], value=Call(func=Attribute(value=Name(id='pathname', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='/')], keywords=[])), While(test=Compare(left=Attribute(value=Name(id='os', ctx=Load()), attr='curdir', ctx=Load()), ops=[In()], comparators=[Name(id='paths', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='paths', ctx=Load()), attr='remove', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='curdir', ctx=Load())], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='paths', ctx=Load())), body=[Return(value=Attribute(value=Name(id='os', ctx=Load()), attr='curdir', ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Starred(value=Name(id='paths', ctx=Load()), ctx=Load())], keywords=[]))], decorator_list=[]), ClassDef(name='FileOperator', bases=[Name(id='object', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dry_run')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='dry_run', ctx=Store())], value=Name(id='dry_run', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='ensured', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_init_record', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='_init_record', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='record', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='files_written', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='dirs_created', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='record_as_written', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='record', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='files_written', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='newer', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='source'), arg(arg='target')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Tell if the target is newer than the source.\n\n        Returns true if \'source\' exists and is more recently modified than\n        \'target\', or if \'source\' exists and \'target\' doesn\'t.\n\n        Returns false if both exist and \'target\' is the same age or younger\n        than \'source\'. Raise PackagingFileError if \'source\' does not exist.\n\n        Note that this test is not very accurate: files created in the same\n        second will have the same "age".\n        ')), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='source', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='DistlibException', ctx=Load()), args=[BinOp(left=Constant(value="file '%r' does not exist"), op=Mod(), right=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Name(id='source', ctx=Load())], keywords=[]))], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='target', ctx=Load())], keywords=[])), body=[Return(value=Constant(value=True))], orelse=[]), Return(value=Compare(left=Attribute(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='stat', ctx=Load()), args=[Name(id='source', ctx=Load())], keywords=[]), attr='st_mtime', ctx=Load()), ops=[Gt()], comparators=[Attribute(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='stat', ctx=Load()), args=[Name(id='target', ctx=Load())], keywords=[]), attr='st_mtime', ctx=Load())]))], decorator_list=[]), FunctionDef(name='copy_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='infile'), arg(arg='outfile'), arg(arg='check')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Expr(value=Constant(value='Copy a file respecting dry-run and force flags.\n        ')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='ensure_dir', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Name(id='outfile', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Copying %s to %s'), Name(id='infile', ctx=Load()), Name(id='outfile', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='dry_run', ctx=Load())), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Constant(value=None)), If(test=Name(id='check', ctx=Load()), body=[If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='islink', ctx=Load()), args=[Name(id='outfile', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=BinOp(left=Constant(value='%s is a symlink'), op=Mod(), right=Name(id='outfile', ctx=Load())))], orelse=[If(test=BoolOp(op=And(), values=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='outfile', ctx=Load())], keywords=[]), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isfile', ctx=Load()), args=[Name(id='outfile', ctx=Load())], keywords=[]))]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=BinOp(left=Constant(value='%s is a non-regular file'), op=Mod(), right=Name(id='outfile', ctx=Load())))], orelse=[])])], orelse=[]), If(test=Name(id='msg', ctx=Load()), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Name(id='msg', ctx=Load()), op=Add(), right=Constant(value=' which would be overwritten'))], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='shutil', ctx=Load()), attr='copyfile', ctx=Load()), args=[Name(id='infile', ctx=Load()), Name(id='outfile', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='record_as_written', ctx=Load()), args=[Name(id='outfile', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='copy_stream', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='instream'), arg(arg='outfile'), arg(arg='encoding')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assert(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isdir', ctx=Load()), args=[Name(id='outfile', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='ensure_dir', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Name(id='outfile', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Copying stream %s to %s'), Name(id='instream', ctx=Load()), Name(id='outfile', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='dry_run', ctx=Load())), body=[If(test=Compare(left=Name(id='encoding', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='outstream', ctx=Store())], value=Call(func=Name(id='open', ctx=Load()), args=[Name(id='outfile', ctx=Load()), Constant(value='wb')], keywords=[]))], orelse=[Assign(targets=[Name(id='outstream', ctx=Store())], value=Call(func=Attribute(value=Name(id='codecs', ctx=Load()), attr='open', ctx=Load()), args=[Name(id='outfile', ctx=Load()), Constant(value='w')], keywords=[keyword(arg='encoding', value=Name(id='encoding', ctx=Load()))]))]), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='shutil', ctx=Load()), attr='copyfileobj', ctx=Load()), args=[Name(id='instream', ctx=Load()), Name(id='outstream', ctx=Load())], keywords=[]))], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='outstream', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='record_as_written', ctx=Load()), args=[Name(id='outfile', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='write_binary_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='path'), arg(arg='data')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='ensure_dir', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])], keywords=[])), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='dry_run', ctx=Load())), body=[If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='path', ctx=Load()), Constant(value='wb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='record_as_written', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='write_text_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='path'), arg(arg='data'), arg(arg='encoding')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='write_binary_file', ctx=Load()), args=[Name(id='path', ctx=Load()), Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='encode', ctx=Load()), args=[Name(id='encoding', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='set_mode', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='bits'), arg(arg='mask'), arg(arg='files')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='os', ctx=Load()), attr='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='posix')]), BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='os', ctx=Load()), attr='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='java')]), Compare(left=Attribute(value=Name(id='os', ctx=Load()), attr='_name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='posix')])])]), body=[For(target=Name(id='f', ctx=Store()), iter=Name(id='files', ctx=Load()), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='dry_run', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='changing mode of %s'), Name(id='f', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='mode', ctx=Store())], value=BinOp(left=BinOp(left=Attribute(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='stat', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]), attr='st_mode', ctx=Load()), op=BitOr(), right=Name(id='bits', ctx=Load())), op=BitAnd(), right=Name(id='mask', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='changing mode of %s to %o'), Name(id='f', ctx=Load()), Name(id='mode', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='chmod', ctx=Load()), args=[Name(id='f', ctx=Load()), Name(id='mode', ctx=Load())], keywords=[]))])], orelse=[])], orelse=[])], decorator_list=[]), Assign(targets=[Name(id='set_executable_mode', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='s'), arg(arg='f')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='set_mode', ctx=Load()), args=[Constant(value=365), Constant(value=4095), Name(id='f', ctx=Load())], keywords=[]))), FunctionDef(name='ensure_dir', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='path', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='ensured', ctx=Load())]), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='ensured', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='d', ctx=Store()), Name(id='f', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='split', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='ensure_dir', ctx=Load()), args=[Name(id='d', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[BinOp(left=Constant(value='Creating %s'), op=Mod(), right=Name(id='path', ctx=Load()))], keywords=[])), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='dry_run', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='mkdir', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='record', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='dirs_created', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='byte_compile', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='path'), arg(arg='optimize'), arg(arg='force'), arg(arg='prefix'), arg(arg='hashed_invalidation')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Constant(value=False), Constant(value=None), Constant(value=False)]), body=[Assign(targets=[Name(id='dpath', ctx=Store())], value=Call(func=Name(id='cache_from_source', ctx=Load()), args=[Name(id='path', ctx=Load()), UnaryOp(op=Not(), operand=Name(id='optimize', ctx=Load()))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Byte-compiling %s to %s'), Name(id='path', ctx=Load()), Name(id='dpath', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='dry_run', ctx=Load())), body=[If(test=BoolOp(op=Or(), values=[Name(id='force', ctx=Load()), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='newer', ctx=Load()), args=[Name(id='path', ctx=Load()), Name(id='dpath', ctx=Load())], keywords=[])]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='prefix', ctx=Load())), body=[Assign(targets=[Name(id='diagpath', ctx=Store())], value=Constant(value=None))], orelse=[Assert(test=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='startswith', ctx=Load()), args=[Name(id='prefix', ctx=Load())], keywords=[])), Assign(targets=[Name(id='diagpath', ctx=Store())], value=Subscript(value=Name(id='path', ctx=Load()), slice=Slice(lower=Call(func=Name(id='len', ctx=Load()), args=[Name(id='prefix', ctx=Load())], keywords=[])), ctx=Load()))])], orelse=[]), Assign(targets=[Name(id='compile_kwargs', ctx=Store())], value=Dict(keys=[], values=[])), If(test=BoolOp(op=And(), values=[Name(id='hashed_invalidation', ctx=Load()), Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='py_compile', ctx=Load()), Constant(value='PycInvalidationMode')], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='compile_kwargs', ctx=Load()), slice=Constant(value='invalidation_mode'), ctx=Store())], value=Attribute(value=Attribute(value=Name(id='py_compile', ctx=Load()), attr='PycInvalidationMode', ctx=Load()), attr='CHECKED_HASH', ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='py_compile', ctx=Load()), attr='compile', ctx=Load()), args=[Name(id='path', ctx=Load()), Name(id='dpath', ctx=Load()), Name(id='diagpath', ctx=Load()), Constant(value=True)], keywords=[keyword(value=Name(id='compile_kwargs', ctx=Load()))]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='record_as_written', ctx=Load()), args=[Name(id='dpath', ctx=Load())], keywords=[])), Return(value=Name(id='dpath', ctx=Load()))], decorator_list=[]), FunctionDef(name='ensure_removed', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), body=[If(test=BoolOp(op=And(), values=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isdir', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='islink', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Removing directory tree at %s'), Name(id='path', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='dry_run', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='shutil', ctx=Load()), attr='rmtree', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='record', ctx=Load()), body=[If(test=Compare(left=Name(id='path', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='dirs_created', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='dirs_created', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='islink', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='s', ctx=Store())], value=Constant(value='link'))], orelse=[Assign(targets=[Name(id='s', ctx=Store())], value=Constant(value='file'))]), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Removing %s %s'), Name(id='s', ctx=Load()), Name(id='path', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='dry_run', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='record', ctx=Load()), body=[If(test=Compare(left=Name(id='path', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='files_written', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='files_written', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])])], orelse=[])], decorator_list=[]), FunctionDef(name='is_writable', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Constant(value=False)), While(test=UnaryOp(op=Not(), operand=Name(id='result', ctx=Load())), body=[If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='access', ctx=Load()), args=[Name(id='path', ctx=Load()), Attribute(value=Name(id='os', ctx=Load()), attr='W_OK', ctx=Load())], keywords=[])), Break()], orelse=[]), Assign(targets=[Name(id='parent', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='parent', ctx=Load()), ops=[Eq()], comparators=[Name(id='path', ctx=Load())]), body=[Break()], orelse=[]), Assign(targets=[Name(id='path', ctx=Store())], value=Name(id='parent', ctx=Load()))], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[]), FunctionDef(name='commit', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Commit recorded changes, turn off recording, return\n        changes.\n        ')), Assert(test=Attribute(value=Name(id='self', ctx=Load()), attr='record', ctx=Load())), Assign(targets=[Name(id='result', ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='files_written', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='dirs_created', ctx=Load())], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_init_record', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='result', ctx=Load()))], decorator_list=[]), FunctionDef(name='rollback', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='dry_run', ctx=Load())), body=[For(target=Name(id='f', ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='files_written', ctx=Load())], keywords=[]), body=[If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='dirs', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='dirs_created', ctx=Load())], keywords=[keyword(arg='reverse', value=Constant(value=True))])), For(target=Name(id='d', ctx=Store()), iter=Name(id='dirs', ctx=Load()), body=[Assign(targets=[Name(id='flist', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='listdir', ctx=Load()), args=[Name(id='d', ctx=Load())], keywords=[])), If(test=Name(id='flist', ctx=Load()), body=[Assert(test=Compare(left=Name(id='flist', ctx=Load()), ops=[Eq()], comparators=[List(elts=[Constant(value='__pycache__')], ctx=Load())])), Assign(targets=[Name(id='sd', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='d', ctx=Load()), Subscript(value=Name(id='flist', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='rmdir', ctx=Load()), args=[Name(id='sd', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='rmdir', ctx=Load()), args=[Name(id='d', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_init_record', ctx=Load()), args=[], keywords=[]))], decorator_list=[])], decorator_list=[]), FunctionDef(name='resolve', args=arguments(posonlyargs=[], args=[arg(arg='module_name'), arg(arg='dotted_path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='module_name', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='sys', ctx=Load()), attr='modules', ctx=Load())]), body=[Assign(targets=[Name(id='mod', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='modules', ctx=Load()), slice=Name(id='module_name', ctx=Load()), ctx=Load()))], orelse=[Assign(targets=[Name(id='mod', ctx=Store())], value=Call(func=Name(id='__import__', ctx=Load()), args=[Name(id='module_name', ctx=Load())], keywords=[]))]), If(test=Compare(left=Name(id='dotted_path', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Name(id='mod', ctx=Load()))], orelse=[Assign(targets=[Name(id='parts', ctx=Store())], value=Call(func=Attribute(value=Name(id='dotted_path', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[])), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='mod', ctx=Load()), Call(func=Attribute(value=Name(id='parts', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value=0)], keywords=[])], keywords=[])), For(target=Name(id='p', ctx=Store()), iter=Name(id='parts', ctx=Load()), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='result', ctx=Load()), Name(id='p', ctx=Load())], keywords=[]))], orelse=[])]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[]), ClassDef(name='ExportEntry', bases=[Name(id='object', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name'), arg(arg='prefix'), arg(arg='suffix'), arg(arg='flags')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Store())], value=Name(id='name', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='prefix', ctx=Store())], value=Name(id='prefix', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='suffix', ctx=Store())], value=Name(id='suffix', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='flags', ctx=Store())], value=Name(id='flags', ctx=Load()))], decorator_list=[]), FunctionDef(name='value', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='resolve', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='prefix', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='suffix', ctx=Load())], keywords=[]))], decorator_list=[Name(id='cached_property', ctx=Load())]), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Constant(value='<ExportEntry %s = %s:%s %s>'), op=Mod(), right=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='prefix', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='suffix', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='flags', ctx=Load())], ctx=Load())))], decorator_list=[]), FunctionDef(name='__eq__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='other', ctx=Load()), Name(id='ExportEntry', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Constant(value=False))], orelse=[Assign(targets=[Name(id='result', ctx=Store())], value=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='other', ctx=Load()), attr='name', ctx=Load())]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='prefix', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='other', ctx=Load()), attr='prefix', ctx=Load())]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='suffix', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='other', ctx=Load()), attr='suffix', ctx=Load())]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='flags', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='other', ctx=Load()), attr='flags', ctx=Load())])]))]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='__hash__', ctx=Store())], value=Attribute(value=Name(id='object', ctx=Load()), attr='__hash__', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='ENTRY_RE', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='(?P<name>(\\w|[-.+])+)\n                      \\s*=\\s*(?P<callable>(\\w+)([:\\.]\\w+)*)\n                      \\s*(\\[\\s*(?P<flags>[\\w-]+(=\\w+)?(,\\s*\\w+(=\\w+)?)*)\\s*\\])?\n                      '), Attribute(value=Name(id='re', ctx=Load()), attr='VERBOSE', ctx=Load())], keywords=[])), FunctionDef(name='get_export_entry', args=arguments(posonlyargs=[], args=[arg(arg='specification')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='m', ctx=Store())], value=Call(func=Attribute(value=Name(id='ENTRY_RE', ctx=Load()), attr='search', ctx=Load()), args=[Name(id='specification', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='m', ctx=Load())), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Constant(value=None)), If(test=BoolOp(op=Or(), values=[Compare(left=Constant(value='['), ops=[In()], comparators=[Name(id='specification', ctx=Load())]), Compare(left=Constant(value=']'), ops=[In()], comparators=[Name(id='specification', ctx=Load())])]), body=[Raise(exc=Call(func=Name(id='DistlibException', ctx=Load()), args=[BinOp(left=Constant(value="Invalid specification '%s'"), op=Mod(), right=Name(id='specification', ctx=Load()))], keywords=[]))], orelse=[])], orelse=[Assign(targets=[Name(id='d', ctx=Store())], value=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='groupdict', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='name', ctx=Store())], value=Subscript(value=Name(id='d', ctx=Load()), slice=Constant(value='name'), ctx=Load())), Assign(targets=[Name(id='path', ctx=Store())], value=Subscript(value=Name(id='d', ctx=Load()), slice=Constant(value='callable'), ctx=Load())), Assign(targets=[Name(id='colons', ctx=Store())], value=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='count', ctx=Load()), args=[Constant(value=':')], keywords=[])), If(test=Compare(left=Name(id='colons', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Tuple(elts=[Name(id='prefix', ctx=Store()), Name(id='suffix', ctx=Store())], ctx=Store())], value=Tuple(elts=[Name(id='path', ctx=Load()), Constant(value=None)], ctx=Load()))], orelse=[If(test=Compare(left=Name(id='colons', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=1)]), body=[Raise(exc=Call(func=Name(id='DistlibException', ctx=Load()), args=[BinOp(left=Constant(value="Invalid specification '%s'"), op=Mod(), right=Name(id='specification', ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='prefix', ctx=Store()), Name(id='suffix', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=':')], keywords=[]))]), Assign(targets=[Name(id='flags', ctx=Store())], value=Subscript(value=Name(id='d', ctx=Load()), slice=Constant(value='flags'), ctx=Load())), If(test=Compare(left=Name(id='flags', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Constant(value='['), ops=[In()], comparators=[Name(id='specification', ctx=Load())]), Compare(left=Constant(value=']'), ops=[In()], comparators=[Name(id='specification', ctx=Load())])]), body=[Raise(exc=Call(func=Name(id='DistlibException', ctx=Load()), args=[BinOp(left=Constant(value="Invalid specification '%s'"), op=Mod(), right=Name(id='specification', ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Name(id='flags', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[Assign(targets=[Name(id='flags', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]), generators=[comprehension(target=Name(id='f', ctx=Store()), iter=Call(func=Attribute(value=Name(id='flags', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=',')], keywords=[]), ifs=[], is_async=0)]))]), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='ExportEntry', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='prefix', ctx=Load()), Name(id='suffix', ctx=Load()), Name(id='flags', ctx=Load())], keywords=[]))]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_cache_base', args=arguments(posonlyargs=[], args=[arg(arg='suffix')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value="\n    Return the default base location for distlib caches. If the directory does\n    not exist, it is created. Use the suffix provided for the base directory,\n    and default to '.distlib' if it isn't provided.\n\n    On Windows, if LOCALAPPDATA is defined in the environment, then it is\n    assumed to be a directory, and will be the parent directory of the result.\n    On POSIX, and on Windows if LOCALAPPDATA is not defined, the user's home\n    directory - using os.expanduser('~') - will be the parent directory of\n    the result.\n\n    The result is just the directory '.distlib' in the parent directory as\n    determined above, or with the name specified with ``suffix``.\n    ")), If(test=Compare(left=Name(id='suffix', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='suffix', ctx=Store())], value=Constant(value='.distlib'))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='os', ctx=Load()), attr='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='nt')]), Compare(left=Constant(value='LOCALAPPDATA'), ops=[In()], comparators=[Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load())])]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='expandvars', ctx=Load()), args=[Constant(value='$localappdata')], keywords=[]))], orelse=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='expanduser', ctx=Load()), args=[Constant(value='~')], keywords=[]))]), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isdir', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='usable', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='access', ctx=Load()), args=[Name(id='result', ctx=Load()), Attribute(value=Name(id='os', ctx=Load()), attr='W_OK', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='usable', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='Directory exists but is not writable: %s'), Name(id='result', ctx=Load())], keywords=[]))], orelse=[])], orelse=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[])), Assign(targets=[Name(id='usable', ctx=Store())], value=Constant(value=True))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='Unable to create %s'), Name(id='result', ctx=Load())], keywords=[keyword(arg='exc_info', value=Constant(value=True))])), Assign(targets=[Name(id='usable', ctx=Store())], value=Constant(value=False))])], orelse=[], finalbody=[])]), If(test=UnaryOp(op=Not(), operand=Name(id='usable', ctx=Load())), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='tempfile', ctx=Load()), attr='mkdtemp', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='Default location unusable, using %s'), Name(id='result', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='result', ctx=Load()), Name(id='suffix', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='path_to_cache_dir', args=arguments(posonlyargs=[], args=[arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    Convert an absolute path to a directory name for use in a cache.\n\n    The algorithm used is:\n\n    #. On Windows, any ``':'`` in the drive is replaced with ``'---'``.\n    #. Any occurrence of ``os.sep`` is replaced with ``'--'``.\n    #. ``'.cache'`` is appended.\n    ")), Assign(targets=[Tuple(elts=[Name(id='d', ctx=Store()), Name(id='p', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='splitdrive', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])], keywords=[])), If(test=Name(id='d', ctx=Load()), body=[Assign(targets=[Name(id='d', ctx=Store())], value=Call(func=Attribute(value=Name(id='d', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value=':'), Constant(value='---')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='replace', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='sep', ctx=Load()), Constant(value='--')], keywords=[])), Return(value=BinOp(left=BinOp(left=Name(id='d', ctx=Load()), op=Add(), right=Name(id='p', ctx=Load())), op=Add(), right=Constant(value='.cache')))], decorator_list=[]), FunctionDef(name='ensure_slash', args=arguments(posonlyargs=[], args=[arg(arg='s')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='/')], keywords=[])), body=[Return(value=BinOp(left=Name(id='s', ctx=Load()), op=Add(), right=Constant(value='/')))], orelse=[]), Return(value=Name(id='s', ctx=Load()))], decorator_list=[]), FunctionDef(name='parse_credentials', args=arguments(posonlyargs=[], args=[arg(arg='netloc')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='username', ctx=Store()), Name(id='password', ctx=Store())], value=Constant(value=None)), If(test=Compare(left=Constant(value='@'), ops=[In()], comparators=[Name(id='netloc', ctx=Load())]), body=[Assign(targets=[Tuple(elts=[Name(id='prefix', ctx=Store()), Name(id='netloc', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='netloc', ctx=Load()), attr='rsplit', ctx=Load()), args=[Constant(value='@'), Constant(value=1)], keywords=[])), If(test=Compare(left=Constant(value=':'), ops=[NotIn()], comparators=[Name(id='prefix', ctx=Load())]), body=[Assign(targets=[Name(id='username', ctx=Store())], value=Name(id='prefix', ctx=Load()))], orelse=[Assign(targets=[Tuple(elts=[Name(id='username', ctx=Store()), Name(id='password', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='prefix', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=':'), Constant(value=1)], keywords=[]))])], orelse=[]), If(test=Name(id='username', ctx=Load()), body=[Assign(targets=[Name(id='username', ctx=Store())], value=Call(func=Name(id='unquote', ctx=Load()), args=[Name(id='username', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='password', ctx=Load()), body=[Assign(targets=[Name(id='password', ctx=Store())], value=Call(func=Name(id='unquote', ctx=Load()), args=[Name(id='password', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Tuple(elts=[Name(id='username', ctx=Load()), Name(id='password', ctx=Load()), Name(id='netloc', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='get_process_umask', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='umask', ctx=Load()), args=[Constant(value=18)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='umask', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[])), Return(value=Name(id='result', ctx=Load()))], decorator_list=[]), FunctionDef(name='is_string_sequence', args=arguments(posonlyargs=[], args=[arg(arg='seq')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='i', ctx=Store())], value=Constant(value=None)), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='s', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='seq', ctx=Load())], keywords=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='s', ctx=Load()), Name(id='string_types', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Constant(value=False)), Break()], orelse=[])], orelse=[]), Assert(test=Compare(left=Name(id='i', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Return(value=Name(id='result', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='PROJECT_NAME_AND_VERSION', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='([a-z0-9_]+([.-][a-z_][a-z0-9_]*)*)-([a-z0-9_.+-]+)'), Attribute(value=Name(id='re', ctx=Load()), attr='I', ctx=Load())], keywords=[])), Assign(targets=[Name(id='PYTHON_VERSION', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='-py(\\d\\.?\\d?)')], keywords=[])), FunctionDef(name='split_filename', args=arguments(posonlyargs=[], args=[arg(arg='filename'), arg(arg='project_name')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='\n    Extract name, version, python version from a filename (no extension)\n\n    Return name, version, pyver or None\n    ')), Assign(targets=[Name(id='result', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='pyver', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='filename', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='unquote', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value=' '), Constant(value='-')], keywords=[])), Assign(targets=[Name(id='m', ctx=Store())], value=Call(func=Attribute(value=Name(id='PYTHON_VERSION', ctx=Load()), attr='search', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[])), If(test=Name(id='m', ctx=Load()), body=[Assign(targets=[Name(id='pyver', ctx=Store())], value=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value=1)], keywords=[])), Assign(targets=[Name(id='filename', ctx=Store())], value=Subscript(value=Name(id='filename', ctx=Load()), slice=Slice(upper=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='start', ctx=Load()), args=[], keywords=[])), ctx=Load()))], orelse=[]), If(test=BoolOp(op=And(), values=[Name(id='project_name', ctx=Load()), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='project_name', ctx=Load())], keywords=[]), op=Add(), right=Constant(value=1))])]), body=[Assign(targets=[Name(id='m', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='match', ctx=Load()), args=[BinOp(left=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='escape', ctx=Load()), args=[Name(id='project_name', ctx=Load())], keywords=[]), op=Add(), right=Constant(value='\\b')), Name(id='filename', ctx=Load())], keywords=[])), If(test=Name(id='m', ctx=Load()), body=[Assign(targets=[Name(id='n', ctx=Store())], value=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='end', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='result', ctx=Store())], value=Tuple(elts=[Subscript(value=Name(id='filename', ctx=Load()), slice=Slice(upper=Name(id='n', ctx=Load())), ctx=Load()), Subscript(value=Name(id='filename', ctx=Load()), slice=Slice(lower=BinOp(left=Name(id='n', ctx=Load()), op=Add(), right=Constant(value=1))), ctx=Load()), Name(id='pyver', ctx=Load())], ctx=Load()))], orelse=[])], orelse=[]), If(test=Compare(left=Name(id='result', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='m', ctx=Store())], value=Call(func=Attribute(value=Name(id='PROJECT_NAME_AND_VERSION', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[])), If(test=Name(id='m', ctx=Load()), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value=1)], keywords=[]), Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value=3)], keywords=[]), Name(id='pyver', ctx=Load())], ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='NAME_VERSION_RE', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='(?P<name>[\\w .-]+)\\s*\\(\\s*(?P<ver>[^\\s)]+)\\)$')], keywords=[])), FunctionDef(name='parse_name_and_version', args=arguments(posonlyargs=[], args=[arg(arg='p')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    A utility method used to get name and version from a string.\n\n    From e.g. a Provides-Dist value.\n\n    :param p: A value in a form 'foo (1.0)'\n    :return: The name and version as a tuple.\n    ")), Assign(targets=[Name(id='m', ctx=Store())], value=Call(func=Attribute(value=Name(id='NAME_VERSION_RE', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='p', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='m', ctx=Load())), body=[Raise(exc=Call(func=Name(id='DistlibException', ctx=Load()), args=[BinOp(left=Constant(value="Ill-formed name/version string: '%s'"), op=Mod(), right=Name(id='p', ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Name(id='d', ctx=Store())], value=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='groupdict', ctx=Load()), args=[], keywords=[])), Return(value=Tuple(elts=[Call(func=Attribute(value=Call(func=Attribute(value=Subscript(value=Name(id='d', ctx=Load()), slice=Constant(value='name'), ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]), attr='lower', ctx=Load()), args=[], keywords=[]), Subscript(value=Name(id='d', ctx=Load()), slice=Constant(value='ver'), ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='get_extras', args=arguments(posonlyargs=[], args=[arg(arg='requested'), arg(arg='available')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='requested', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[BoolOp(op=Or(), values=[Name(id='requested', ctx=Load()), List(elts=[], ctx=Load())])], keywords=[])), Assign(targets=[Name(id='available', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[BoolOp(op=Or(), values=[Name(id='available', ctx=Load()), List(elts=[], ctx=Load())])], keywords=[])), If(test=Compare(left=Constant(value='*'), ops=[In()], comparators=[Name(id='requested', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='requested', ctx=Load()), attr='remove', ctx=Load()), args=[Constant(value='*')], keywords=[])), AugAssign(target=Name(id='result', ctx=Store()), op=BitOr(), value=Name(id='available', ctx=Load()))], orelse=[]), For(target=Name(id='r', ctx=Store()), iter=Name(id='requested', ctx=Load()), body=[If(test=Compare(left=Name(id='r', ctx=Load()), ops=[Eq()], comparators=[Constant(value='-')]), body=[Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='r', ctx=Load())], keywords=[]))], orelse=[If(test=Call(func=Attribute(value=Name(id='r', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='-')], keywords=[]), body=[Assign(targets=[Name(id='unwanted', ctx=Store())], value=Subscript(value=Name(id='r', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())), If(test=Compare(left=Name(id='unwanted', ctx=Load()), ops=[NotIn()], comparators=[Name(id='available', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[BinOp(left=Constant(value='undeclared extra: %s'), op=Mod(), right=Name(id='unwanted', ctx=Load()))], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='unwanted', ctx=Load()), ops=[In()], comparators=[Name(id='result', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='unwanted', ctx=Load())], keywords=[]))], orelse=[])], orelse=[If(test=Compare(left=Name(id='r', ctx=Load()), ops=[NotIn()], comparators=[Name(id='available', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[BinOp(left=Constant(value='undeclared extra: %s'), op=Mod(), right=Name(id='r', ctx=Load()))], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='r', ctx=Load())], keywords=[]))])])], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[]), FunctionDef(name='_get_external_data', args=arguments(posonlyargs=[], args=[arg(arg='url')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Dict(keys=[], values=[])), Try(body=[Assign(targets=[Name(id='resp', ctx=Store())], value=Call(func=Name(id='urlopen', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[])), Assign(targets=[Name(id='headers', ctx=Store())], value=Call(func=Attribute(value=Name(id='resp', ctx=Load()), attr='info', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='ct', ctx=Store())], value=Call(func=Attribute(value=Name(id='headers', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='Content-Type')], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='ct', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='application/json')], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Unexpected response for JSON request: %s'), Name(id='ct', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='reader', ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='codecs', ctx=Load()), attr='getreader', ctx=Load()), args=[Constant(value='utf-8')], keywords=[]), args=[Name(id='resp', ctx=Load())], keywords=[])), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='reader', ctx=Load())], keywords=[]))])], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='e', body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='exception', ctx=Load()), args=[Constant(value='Failed to get external data for %s: %s'), Name(id='url', ctx=Load()), Name(id='e', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='_external_data_base_url', ctx=Store())], value=Constant(value='https://www.red-dove.com/pypi/projects/')), FunctionDef(name='get_project_data', args=arguments(posonlyargs=[], args=[arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='url', ctx=Store())], value=BinOp(left=Constant(value='%s/%s/project.json'), op=Mod(), right=Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='name', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='upper', ctx=Load()), args=[], keywords=[]), Name(id='name', ctx=Load())], ctx=Load()))), Assign(targets=[Name(id='url', ctx=Store())], value=Call(func=Name(id='urljoin', ctx=Load()), args=[Name(id='_external_data_base_url', ctx=Load()), Name(id='url', ctx=Load())], keywords=[])), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='_get_external_data', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[])), Return(value=Name(id='result', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_package_data', args=arguments(posonlyargs=[], args=[arg(arg='name'), arg(arg='version')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='url', ctx=Store())], value=BinOp(left=Constant(value='%s/%s/package-%s.json'), op=Mod(), right=Tuple(elts=[Call(func=Attribute(value=Subscript(value=Name(id='name', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='upper', ctx=Load()), args=[], keywords=[]), Name(id='name', ctx=Load()), Name(id='version', ctx=Load())], ctx=Load()))), Assign(targets=[Name(id='url', ctx=Store())], value=Call(func=Name(id='urljoin', ctx=Load()), args=[Name(id='_external_data_base_url', ctx=Load()), Name(id='url', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='_get_external_data', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[]))], decorator_list=[]), ClassDef(name='Cache', bases=[Name(id='object', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    A class implementing a cache for resources that need to live in the file system\n    e.g. shared libraries. This class was moved from resources to here because it\n    could be used by other modules, e.g. the wheel module.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='base')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Initialise an instance.\n\n        :param base: The base directory where the cache should be located.\n        ')), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isdir', ctx=Load()), args=[Name(id='base', ctx=Load())], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='makedirs', ctx=Load()), args=[Name(id='base', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=BinOp(left=Attribute(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='stat', ctx=Load()), args=[Name(id='base', ctx=Load())], keywords=[]), attr='st_mode', ctx=Load()), op=BitAnd(), right=Constant(value=63)), ops=[NotEq()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value="Directory '%s' is not private"), Name(id='base', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='base', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normpath', ctx=Load()), args=[Name(id='base', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='prefix_to_dir', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='prefix')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Converts a resource prefix to a directory name in the cache.\n        ')), Return(value=Call(func=Name(id='path_to_cache_dir', ctx=Load()), args=[Name(id='prefix', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='clear', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Clear the cache.\n        ')), Assign(targets=[Name(id='not_removed', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='fn', ctx=Store()), iter=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='listdir', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='base', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='fn', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='base', ctx=Load()), Name(id='fn', ctx=Load())], keywords=[])), Try(body=[If(test=BoolOp(op=Or(), values=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='islink', ctx=Load()), args=[Name(id='fn', ctx=Load())], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isfile', ctx=Load()), args=[Name(id='fn', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='fn', ctx=Load())], keywords=[]))], orelse=[If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isdir', ctx=Load()), args=[Name(id='fn', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='shutil', ctx=Load()), attr='rmtree', ctx=Load()), args=[Name(id='fn', ctx=Load())], keywords=[]))], orelse=[])])], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='not_removed', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='fn', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], orelse=[]), Return(value=Name(id='not_removed', ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='EventMixin', bases=[Name(id='object', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    A very simple publish/subscribe system.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_subscribers', ctx=Store())], value=Dict(keys=[], values=[]))], decorator_list=[]), FunctionDef(name='add', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='event'), arg(arg='subscriber'), arg(arg='append')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Expr(value=Constant(value='\n        Add a subscriber for an event.\n\n        :param event: The name of an event.\n        :param subscriber: The subscriber to be added (and called when the\n                           event is published).\n        :param append: Whether to append or prepend the subscriber to an\n                       existing subscriber list for the event.\n        ')), Assign(targets=[Name(id='subs', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_subscribers', ctx=Load())), If(test=Compare(left=Name(id='event', ctx=Load()), ops=[NotIn()], comparators=[Name(id='subs', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='subs', ctx=Load()), slice=Name(id='event', ctx=Load()), ctx=Store())], value=Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Name(id='subscriber', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='sq', ctx=Store())], value=Subscript(value=Name(id='subs', ctx=Load()), slice=Name(id='event', ctx=Load()), ctx=Load())), If(test=Name(id='append', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='sq', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='subscriber', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='sq', ctx=Load()), attr='appendleft', ctx=Load()), args=[Name(id='subscriber', ctx=Load())], keywords=[]))])])], decorator_list=[]), FunctionDef(name='remove', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='event'), arg(arg='subscriber')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Remove a subscriber for an event.\n\n        :param event: The name of an event.\n        :param subscriber: The subscriber to be removed.\n        ')), Assign(targets=[Name(id='subs', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_subscribers', ctx=Load())), If(test=Compare(left=Name(id='event', ctx=Load()), ops=[NotIn()], comparators=[Name(id='subs', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='No subscribers: %r'), op=Mod(), right=Name(id='event', ctx=Load()))], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='subs', ctx=Load()), slice=Name(id='event', ctx=Load()), ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='subscriber', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='get_subscribers', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='event')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return an iterator for the subscribers for an event.\n        :param event: The event to return subscribers for.\n        ')), Return(value=Call(func=Name(id='iter', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_subscribers', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='event', ctx=Load()), Tuple(elts=[], ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='publish', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='event')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Constant(value="\n        Publish a event and return a list of values returned by its\n        subscribers.\n\n        :param event: The event to publish.\n        :param args: The positional arguments to pass to the event's\n                     subscribers.\n        :param kwargs: The keyword arguments to pass to the event's\n                       subscribers.\n        ")), Assign(targets=[Name(id='result', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='subscriber', ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_subscribers', ctx=Load()), args=[Name(id='event', ctx=Load())], keywords=[]), body=[Try(body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Name(id='subscriber', ctx=Load()), args=[Name(id='event', ctx=Load()), Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='exception', ctx=Load()), args=[Constant(value='Exception during event publication')], keywords=[])), Assign(targets=[Name(id='value', ctx=Store())], value=Constant(value=None))])], orelse=[], finalbody=[]), Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='publish %s: args = %s, kwargs = %s, result = %s'), Name(id='event', ctx=Load()), Name(id='args', ctx=Load()), Name(id='kwargs', ctx=Load()), Name(id='result', ctx=Load())], keywords=[])), Return(value=Name(id='result', ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='Sequencer', bases=[Name(id='object', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_preds', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_succs', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_nodes', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='add_node', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='node')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_nodes', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='node', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='remove_node', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='node'), arg(arg='edges')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[If(test=Compare(left=Name(id='node', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_nodes', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_nodes', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='node', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='edges', ctx=Load()), body=[For(target=Name(id='p', ctx=Store()), iter=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_preds', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='node', ctx=Load()), Tuple(elts=[], ctx=Load())], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='p', ctx=Load()), Name(id='node', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='s', ctx=Store()), iter=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_succs', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='node', ctx=Load()), Tuple(elts=[], ctx=Load())], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='node', ctx=Load()), Name(id='s', ctx=Load())], keywords=[]))], orelse=[]), For(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_preds', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='v', ctx=Load())), body=[Delete(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_preds', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Del())])], orelse=[])], orelse=[]), For(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_succs', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='v', ctx=Load())), body=[Delete(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_succs', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Del())])], orelse=[])], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='add', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='pred'), arg(arg='succ')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Compare(left=Name(id='pred', ctx=Load()), ops=[NotEq()], comparators=[Name(id='succ', ctx=Load())])), Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_preds', ctx=Load()), attr='setdefault', ctx=Load()), args=[Name(id='succ', ctx=Load()), Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])], keywords=[]), attr='add', ctx=Load()), args=[Name(id='pred', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_succs', ctx=Load()), attr='setdefault', ctx=Load()), args=[Name(id='pred', ctx=Load()), Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])], keywords=[]), attr='add', ctx=Load()), args=[Name(id='succ', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='remove', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='pred'), arg(arg='succ')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Compare(left=Name(id='pred', ctx=Load()), ops=[NotEq()], comparators=[Name(id='succ', ctx=Load())])), Try(body=[Assign(targets=[Name(id='preds', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_preds', ctx=Load()), slice=Name(id='succ', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='succs', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_succs', ctx=Load()), slice=Name(id='pred', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='%r not a successor of anything'), op=Mod(), right=Name(id='succ', ctx=Load()))], keywords=[]))])], orelse=[], finalbody=[]), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='preds', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='pred', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='succs', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='succ', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='%r not a successor of %r'), op=Mod(), right=Tuple(elts=[Name(id='succ', ctx=Load()), Name(id='pred', ctx=Load())], ctx=Load()))], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='is_step', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='step')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=Or(), values=[Compare(left=Name(id='step', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_preds', ctx=Load())]), Compare(left=Name(id='step', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_succs', ctx=Load())]), Compare(left=Name(id='step', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_nodes', ctx=Load())])]))], decorator_list=[]), FunctionDef(name='get_steps', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='final')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='is_step', ctx=Load()), args=[Name(id='final', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='Unknown: %r'), op=Mod(), right=Name(id='final', ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Name(id='result', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='todo', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='seen', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='todo', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='final', ctx=Load())], keywords=[])), While(test=Name(id='todo', ctx=Load()), body=[Assign(targets=[Name(id='step', ctx=Store())], value=Call(func=Attribute(value=Name(id='todo', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value=0)], keywords=[])), If(test=Compare(left=Name(id='step', ctx=Load()), ops=[In()], comparators=[Name(id='seen', ctx=Load())]), body=[If(test=Compare(left=Name(id='step', ctx=Load()), ops=[NotEq()], comparators=[Name(id='final', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='step', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='step', ctx=Load())], keywords=[]))], orelse=[])], orelse=[Expr(value=Call(func=Attribute(value=Name(id='seen', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='step', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='step', ctx=Load())], keywords=[])), Assign(targets=[Name(id='preds', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_preds', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='step', ctx=Load()), Tuple(elts=[], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='todo', ctx=Load()), attr='extend', ctx=Load()), args=[Name(id='preds', ctx=Load())], keywords=[]))])], orelse=[]), Return(value=Call(func=Name(id='reversed', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='strong_connections', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='index_counter', ctx=Store())], value=List(elts=[Constant(value=0)], ctx=Load())), Assign(targets=[Name(id='stack', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='lowlinks', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='index', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='result', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='graph', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_succs', ctx=Load())), FunctionDef(name='strongconnect', args=arguments(posonlyargs=[], args=[arg(arg='node')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Name(id='index', ctx=Load()), slice=Name(id='node', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='index_counter', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Subscript(value=Name(id='lowlinks', ctx=Load()), slice=Name(id='node', ctx=Load()), ctx=Store())], value=Subscript(value=Name(id='index_counter', ctx=Load()), slice=Constant(value=0), ctx=Load())), AugAssign(target=Subscript(value=Name(id='index_counter', ctx=Load()), slice=Constant(value=0), ctx=Store()), op=Add(), value=Constant(value=1)), Expr(value=Call(func=Attribute(value=Name(id='stack', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='node', ctx=Load())], keywords=[])), Try(body=[Assign(targets=[Name(id='successors', ctx=Store())], value=Subscript(value=Name(id='graph', ctx=Load()), slice=Name(id='node', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Assign(targets=[Name(id='successors', ctx=Store())], value=List(elts=[], ctx=Load()))])], orelse=[], finalbody=[]), For(target=Name(id='successor', ctx=Store()), iter=Name(id='successors', ctx=Load()), body=[If(test=Compare(left=Name(id='successor', ctx=Load()), ops=[NotIn()], comparators=[Name(id='lowlinks', ctx=Load())]), body=[Expr(value=Call(func=Name(id='strongconnect', ctx=Load()), args=[Name(id='successor', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='lowlinks', ctx=Load()), slice=Name(id='node', ctx=Load()), ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[Subscript(value=Name(id='lowlinks', ctx=Load()), slice=Name(id='node', ctx=Load()), ctx=Load()), Subscript(value=Name(id='lowlinks', ctx=Load()), slice=Name(id='successor', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='successor', ctx=Load()), ops=[In()], comparators=[Name(id='stack', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='lowlinks', ctx=Load()), slice=Name(id='node', ctx=Load()), ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[Subscript(value=Name(id='lowlinks', ctx=Load()), slice=Name(id='node', ctx=Load()), ctx=Load()), Subscript(value=Name(id='index', ctx=Load()), slice=Name(id='successor', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])])], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='lowlinks', ctx=Load()), slice=Name(id='node', ctx=Load()), ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='index', ctx=Load()), slice=Name(id='node', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Name(id='connected_component', ctx=Store())], value=List(elts=[], ctx=Load())), While(test=Constant(value=True), body=[Assign(targets=[Name(id='successor', ctx=Store())], value=Call(func=Attribute(value=Name(id='stack', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='connected_component', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='successor', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='successor', ctx=Load()), ops=[Eq()], comparators=[Name(id='node', ctx=Load())]), body=[Break()], orelse=[])], orelse=[]), Assign(targets=[Name(id='component', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[Name(id='connected_component', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='component', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), For(target=Name(id='node', ctx=Store()), iter=Name(id='graph', ctx=Load()), body=[If(test=Compare(left=Name(id='node', ctx=Load()), ops=[NotIn()], comparators=[Name(id='lowlinks', ctx=Load())]), body=[Expr(value=Call(func=Name(id='strongconnect', ctx=Load()), args=[Name(id='node', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='dot', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=List(elts=[Constant(value='digraph G {')], ctx=Load())), For(target=Name(id='succ', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_preds', ctx=Load()), body=[Assign(targets=[Name(id='preds', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_preds', ctx=Load()), slice=Name(id='succ', ctx=Load()), ctx=Load())), For(target=Name(id='pred', ctx=Store()), iter=Name(id='preds', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Constant(value='  %s -> %s;'), op=Mod(), right=Tuple(elts=[Name(id='pred', ctx=Load()), Name(id='succ', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[])], orelse=[]), For(target=Name(id='node', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_nodes', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Constant(value='  %s;'), op=Mod(), right=Name(id='node', ctx=Load()))], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='}')], keywords=[])), Return(value=Call(func=Attribute(value=Constant(value='\n'), attr='join', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())])], decorator_list=[]), Assign(targets=[Name(id='ARCHIVE_EXTENSIONS', ctx=Store())], value=Tuple(elts=[Constant(value='.tar.gz'), Constant(value='.tar.bz2'), Constant(value='.tar'), Constant(value='.zip'), Constant(value='.tgz'), Constant(value='.tbz'), Constant(value='.whl')], ctx=Load())), FunctionDef(name='unarchive', args=arguments(posonlyargs=[], args=[arg(arg='archive_filename'), arg(arg='dest_dir'), arg(arg='format'), arg(arg='check')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=True)]), body=[FunctionDef(name='check_path', args=arguments(posonlyargs=[], args=[arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='path', ctx=Load()), Name(id='text_type', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='dest_dir', ctx=Load()), Name(id='path', ctx=Load())], keywords=[])], keywords=[])), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='startswith', ctx=Load()), args=[Name(id='dest_dir', ctx=Load())], keywords=[])), Compare(left=Subscript(value=Name(id='p', ctx=Load()), slice=Name(id='plen', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='os', ctx=Load()), attr='sep', ctx=Load())])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='path outside destination: %r'), op=Mod(), right=Name(id='p', ctx=Load()))], keywords=[]))], orelse=[])], decorator_list=[]), Assign(targets=[Name(id='dest_dir', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Name(id='dest_dir', ctx=Load())], keywords=[])), Assign(targets=[Name(id='plen', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='dest_dir', ctx=Load())], keywords=[])), Assign(targets=[Name(id='archive', ctx=Store())], value=Constant(value=None)), If(test=Compare(left=Name(id='format', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[If(test=Call(func=Attribute(value=Name(id='archive_filename', ctx=Load()), attr='endswith', ctx=Load()), args=[Tuple(elts=[Constant(value='.zip'), Constant(value='.whl')], ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='format', ctx=Store())], value=Constant(value='zip'))], orelse=[If(test=Call(func=Attribute(value=Name(id='archive_filename', ctx=Load()), attr='endswith', ctx=Load()), args=[Tuple(elts=[Constant(value='.tar.gz'), Constant(value='.tgz')], ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='format', ctx=Store())], value=Constant(value='tgz')), Assign(targets=[Name(id='mode', ctx=Store())], value=Constant(value='r:gz'))], orelse=[If(test=Call(func=Attribute(value=Name(id='archive_filename', ctx=Load()), attr='endswith', ctx=Load()), args=[Tuple(elts=[Constant(value='.tar.bz2'), Constant(value='.tbz')], ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='format', ctx=Store())], value=Constant(value='tbz')), Assign(targets=[Name(id='mode', ctx=Store())], value=Constant(value='r:bz2'))], orelse=[If(test=Call(func=Attribute(value=Name(id='archive_filename', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='.tar')], keywords=[]), body=[Assign(targets=[Name(id='format', ctx=Store())], value=Constant(value='tar')), Assign(targets=[Name(id='mode', ctx=Store())], value=Constant(value='r'))], orelse=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='Unknown format for %r'), op=Mod(), right=Name(id='archive_filename', ctx=Load()))], keywords=[]))])])])])], orelse=[]), Try(body=[If(test=Compare(left=Name(id='format', ctx=Load()), ops=[Eq()], comparators=[Constant(value='zip')]), body=[Assign(targets=[Name(id='archive', ctx=Store())], value=Call(func=Name(id='ZipFile', ctx=Load()), args=[Name(id='archive_filename', ctx=Load()), Constant(value='r')], keywords=[])), If(test=Name(id='check', ctx=Load()), body=[Assign(targets=[Name(id='names', ctx=Store())], value=Call(func=Attribute(value=Name(id='archive', ctx=Load()), attr='namelist', ctx=Load()), args=[], keywords=[])), For(target=Name(id='name', ctx=Store()), iter=Name(id='names', ctx=Load()), body=[Expr(value=Call(func=Name(id='check_path', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[Assign(targets=[Name(id='archive', ctx=Store())], value=Call(func=Attribute(value=Name(id='tarfile', ctx=Load()), attr='open', ctx=Load()), args=[Name(id='archive_filename', ctx=Load()), Name(id='mode', ctx=Load())], keywords=[])), If(test=Name(id='check', ctx=Load()), body=[Assign(targets=[Name(id='names', ctx=Store())], value=Call(func=Attribute(value=Name(id='archive', ctx=Load()), attr='getnames', ctx=Load()), args=[], keywords=[])), For(target=Name(id='name', ctx=Store()), iter=Name(id='names', ctx=Load()), body=[Expr(value=Call(func=Name(id='check_path', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='format', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='zip')]), Compare(left=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Constant(value=3)])]), body=[For(target=Name(id='tarinfo', ctx=Store()), iter=Call(func=Attribute(value=Name(id='archive', ctx=Load()), attr='getmembers', ctx=Load()), args=[], keywords=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='tarinfo', ctx=Load()), attr='name', ctx=Load()), Name(id='text_type', ctx=Load())], keywords=[])), body=[Assign(targets=[Attribute(value=Name(id='tarinfo', ctx=Load()), attr='name', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='tarinfo', ctx=Load()), attr='name', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[]))], orelse=[])], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='archive', ctx=Load()), attr='extractall', ctx=Load()), args=[Name(id='dest_dir', ctx=Load())], keywords=[]))], handlers=[], orelse=[], finalbody=[If(test=Name(id='archive', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='archive', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))], orelse=[])])], decorator_list=[]), FunctionDef(name='zip_dir', args=arguments(posonlyargs=[], args=[arg(arg='directory')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='zip a directory tree into a BytesIO object')), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='BytesIO', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='dlen', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='directory', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='ZipFile', ctx=Load()), args=[Name(id='result', ctx=Load()), Constant(value='w')], keywords=[]), optional_vars=Name(id='zf', ctx=Store()))], body=[For(target=Tuple(elts=[Name(id='root', ctx=Store()), Name(id='dirs', ctx=Store()), Name(id='files', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='walk', ctx=Load()), args=[Name(id='directory', ctx=Load())], keywords=[]), body=[For(target=Name(id='name', ctx=Store()), iter=Name(id='files', ctx=Load()), body=[Assign(targets=[Name(id='full', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='root', ctx=Load()), Name(id='name', ctx=Load())], keywords=[])), Assign(targets=[Name(id='rel', ctx=Store())], value=Subscript(value=Name(id='root', ctx=Load()), slice=Slice(lower=Name(id='dlen', ctx=Load())), ctx=Load())), Assign(targets=[Name(id='dest', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='rel', ctx=Load()), Name(id='name', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='zf', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='full', ctx=Load()), Name(id='dest', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='UNITS', ctx=Store())], value=Tuple(elts=[Constant(value=''), Constant(value='K'), Constant(value='M'), Constant(value='G'), Constant(value='T'), Constant(value='P')], ctx=Load())), ClassDef(name='Progress', bases=[Name(id='object', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='unknown', ctx=Store())], value=Constant(value='UNKNOWN')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='minval'), arg(arg='maxval')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0), Constant(value=100)]), body=[Assert(test=BoolOp(op=Or(), values=[Compare(left=Name(id='maxval', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Name(id='maxval', ctx=Load()), ops=[GtE()], comparators=[Name(id='minval', ctx=Load())])])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='min', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='cur', ctx=Store())], value=Name(id='minval', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='max', ctx=Store())], value=Name(id='maxval', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='started', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='elapsed', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='done', ctx=Store())], value=Constant(value=False))], decorator_list=[]), FunctionDef(name='update', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='curval')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='min', ctx=Load()), ops=[LtE()], comparators=[Name(id='curval', ctx=Load())])), Assert(test=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='max', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Name(id='curval', ctx=Load()), ops=[LtE()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='max', ctx=Load())])])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='cur', ctx=Store())], value=Name(id='curval', ctx=Load())), Assign(targets=[Name(id='now', ctx=Store())], value=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='time', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='started', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='started', ctx=Store())], value=Name(id='now', ctx=Load()))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='elapsed', ctx=Store())], value=BinOp(left=Name(id='now', ctx=Load()), op=Sub(), right=Attribute(value=Name(id='self', ctx=Load()), attr='started', ctx=Load())))])], decorator_list=[]), FunctionDef(name='increment', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='incr')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Compare(left=Name(id='incr', ctx=Load()), ops=[GtE()], comparators=[Constant(value=0)])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='update', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='cur', ctx=Load()), op=Add(), right=Name(id='incr', ctx=Load()))], keywords=[]))], decorator_list=[]), FunctionDef(name='start', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='update', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='min', ctx=Load())], keywords=[])), Return(value=Name(id='self', ctx=Load()))], decorator_list=[]), FunctionDef(name='stop', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='max', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='update', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='max', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='done', ctx=Store())], value=Constant(value=True))], decorator_list=[]), FunctionDef(name='maximum', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=IfExp(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='max', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Attribute(value=Name(id='self', ctx=Load()), attr='unknown', ctx=Load()), orelse=Attribute(value=Name(id='self', ctx=Load()), attr='max', ctx=Load())))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='percentage', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='done', ctx=Load()), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Constant(value='100 %'))], orelse=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='max', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Constant(value=' ?? %'))], orelse=[Assign(targets=[Name(id='v', ctx=Store())], value=BinOp(left=BinOp(left=Constant(value=100.0), op=Mult(), right=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='cur', ctx=Load()), op=Sub(), right=Attribute(value=Name(id='self', ctx=Load()), attr='min', ctx=Load()))), op=Div(), right=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='max', ctx=Load()), op=Sub(), right=Attribute(value=Name(id='self', ctx=Load()), attr='min', ctx=Load())))), Assign(targets=[Name(id='result', ctx=Store())], value=BinOp(left=Constant(value='%3d %%'), op=Mod(), right=Name(id='v', ctx=Load())))])]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='format_duration', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='duration')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[BoolOp(op=And(), values=[Compare(left=Name(id='duration', ctx=Load()), ops=[LtE()], comparators=[Constant(value=0)]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='max', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='cur', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='min', ctx=Load())])]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Constant(value='??:??:??'))], orelse=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='strftime', ctx=Load()), args=[Constant(value='%H:%M:%S'), Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='gmtime', ctx=Load()), args=[Name(id='duration', ctx=Load())], keywords=[])], keywords=[]))]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[]), FunctionDef(name='ETA', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='done', ctx=Load()), body=[Assign(targets=[Name(id='prefix', ctx=Store())], value=Constant(value='Done')), Assign(targets=[Name(id='t', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='elapsed', ctx=Load()))], orelse=[Assign(targets=[Name(id='prefix', ctx=Store())], value=Constant(value='ETA ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='max', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='t', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[If(test=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='elapsed', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='cur', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='min', ctx=Load())])]), body=[Assign(targets=[Name(id='t', ctx=Store())], value=Constant(value=0))], orelse=[Assign(targets=[Name(id='t', ctx=Store())], value=Call(func=Name(id='float', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='max', ctx=Load()), op=Sub(), right=Attribute(value=Name(id='self', ctx=Load()), attr='min', ctx=Load()))], keywords=[])), AugAssign(target=Name(id='t', ctx=Store()), op=Div(), value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='cur', ctx=Load()), op=Sub(), right=Attribute(value=Name(id='self', ctx=Load()), attr='min', ctx=Load()))), Assign(targets=[Name(id='t', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='t', ctx=Load()), op=Sub(), right=Constant(value=1)), op=Mult(), right=Attribute(value=Name(id='self', ctx=Load()), attr='elapsed', ctx=Load())))])])]), Return(value=BinOp(left=Constant(value='%s: %s'), op=Mod(), right=Tuple(elts=[Name(id='prefix', ctx=Load()), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='format_duration', ctx=Load()), args=[Name(id='t', ctx=Load())], keywords=[])], ctx=Load())))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='speed', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='elapsed', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Constant(value=0.0))], orelse=[Assign(targets=[Name(id='result', ctx=Store())], value=BinOp(left=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='cur', ctx=Load()), op=Sub(), right=Attribute(value=Name(id='self', ctx=Load()), attr='min', ctx=Load())), op=Div(), right=Attribute(value=Name(id='self', ctx=Load()), attr='elapsed', ctx=Load())))]), For(target=Name(id='unit', ctx=Store()), iter=Name(id='UNITS', ctx=Load()), body=[If(test=Compare(left=Name(id='result', ctx=Load()), ops=[Lt()], comparators=[Constant(value=1000)]), body=[Break()], orelse=[]), AugAssign(target=Name(id='result', ctx=Store()), op=Div(), value=Constant(value=1000.0))], orelse=[]), Return(value=BinOp(left=Constant(value='%d %sB/s'), op=Mod(), right=Tuple(elts=[Name(id='result', ctx=Load()), Name(id='unit', ctx=Load())], ctx=Load())))], decorator_list=[Name(id='property', ctx=Load())])], decorator_list=[]), Assign(targets=[Name(id='RICH_GLOB', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='\\{([^}]*)\\}')], keywords=[])), Assign(targets=[Name(id='_CHECK_RECURSIVE_GLOB', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='[^/\\\\,{]\\*\\*|\\*\\*[^/\\\\,}]')], keywords=[])), Assign(targets=[Name(id='_CHECK_MISMATCH_SET', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='^[^{]*\\}|\\{[^}]*$')], keywords=[])), FunctionDef(name='iglob', args=arguments(posonlyargs=[], args=[arg(arg='path_glob')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Extended globbing function that supports ** and {opt1,opt2,opt3}.')), If(test=Call(func=Attribute(value=Name(id='_CHECK_RECURSIVE_GLOB', ctx=Load()), attr='search', ctx=Load()), args=[Name(id='path_glob', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Constant(value='invalid glob %r: recursive glob "**" must be used alone')), Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Name(id='msg', ctx=Load()), op=Mod(), right=Name(id='path_glob', ctx=Load()))], keywords=[]))], orelse=[]), If(test=Call(func=Attribute(value=Name(id='_CHECK_MISMATCH_SET', ctx=Load()), attr='search', ctx=Load()), args=[Name(id='path_glob', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Constant(value="invalid glob %r: mismatching set marker '{' or '}'")), Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Name(id='msg', ctx=Load()), op=Mod(), right=Name(id='path_glob', ctx=Load()))], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='_iglob', ctx=Load()), args=[Name(id='path_glob', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_iglob', args=arguments(posonlyargs=[], args=[arg(arg='path_glob')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='rich_path_glob', ctx=Store())], value=Call(func=Attribute(value=Name(id='RICH_GLOB', ctx=Load()), attr='split', ctx=Load()), args=[Name(id='path_glob', ctx=Load()), Constant(value=1)], keywords=[])), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='rich_path_glob', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Assert(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='rich_path_glob', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=3)]), msg=Name(id='rich_path_glob', ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='prefix', ctx=Store()), Name(id='set', ctx=Store()), Name(id='suffix', ctx=Store())], ctx=Store())], value=Name(id='rich_path_glob', ctx=Load())), For(target=Name(id='item', ctx=Store()), iter=Call(func=Attribute(value=Name(id='set', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=',')], keywords=[]), body=[For(target=Name(id='path', ctx=Store()), iter=Call(func=Name(id='_iglob', ctx=Load()), args=[Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Tuple(elts=[Name(id='prefix', ctx=Load()), Name(id='item', ctx=Load()), Name(id='suffix', ctx=Load())], ctx=Load())], keywords=[])], keywords=[]), body=[Expr(value=Yield(value=Name(id='path', ctx=Load())))], orelse=[])], orelse=[])], orelse=[If(test=Compare(left=Constant(value='**'), ops=[NotIn()], comparators=[Name(id='path_glob', ctx=Load())]), body=[For(target=Name(id='item', ctx=Store()), iter=Call(func=Name(id='std_iglob', ctx=Load()), args=[Name(id='path_glob', ctx=Load())], keywords=[]), body=[Expr(value=Yield(value=Name(id='item', ctx=Load())))], orelse=[])], orelse=[Assign(targets=[Tuple(elts=[Name(id='prefix', ctx=Store()), Name(id='radical', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='path_glob', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='**'), Constant(value=1)], keywords=[])), If(test=Compare(left=Name(id='prefix', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Assign(targets=[Name(id='prefix', ctx=Store())], value=Constant(value='.'))], orelse=[]), If(test=Compare(left=Name(id='radical', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Assign(targets=[Name(id='radical', ctx=Store())], value=Constant(value='*'))], orelse=[Assign(targets=[Name(id='radical', ctx=Store())], value=Call(func=Attribute(value=Name(id='radical', ctx=Load()), attr='lstrip', ctx=Load()), args=[Constant(value='/')], keywords=[])), Assign(targets=[Name(id='radical', ctx=Store())], value=Call(func=Attribute(value=Name(id='radical', ctx=Load()), attr='lstrip', ctx=Load()), args=[Constant(value='\\')], keywords=[]))]), For(target=Tuple(elts=[Name(id='path', ctx=Store()), Name(id='dir', ctx=Store()), Name(id='files', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='walk', ctx=Load()), args=[Name(id='prefix', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normpath', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), For(target=Name(id='fn', ctx=Store()), iter=Call(func=Name(id='_iglob', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='path', ctx=Load()), Name(id='radical', ctx=Load())], keywords=[])], keywords=[]), body=[Expr(value=Yield(value=Name(id='fn', ctx=Load())))], orelse=[])], orelse=[])])])], decorator_list=[]), If(test=Name(id='ssl', ctx=Load()), body=[ImportFrom(module='compat', names=[alias(name='HTTPSHandler', asname='BaseHTTPSHandler'), alias(name='match_hostname'), alias(name='CertificateError')], level=1), ClassDef(name='HTTPSConnection', bases=[Attribute(value=Name(id='httplib', ctx=Load()), attr='HTTPSConnection', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='ca_certs', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='check_domain', ctx=Store())], value=Constant(value=True)), FunctionDef(name='connect', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='sock', ctx=Store())], value=Call(func=Attribute(value=Name(id='socket', ctx=Load()), attr='create_connection', ctx=Load()), args=[Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='host', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='port', ctx=Load())], ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='timeout', ctx=Load())], keywords=[])), If(test=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Constant(value='_tunnel_host'), Constant(value=False)], keywords=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='sock', ctx=Store())], value=Name(id='sock', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_tunnel', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='context', ctx=Store())], value=Call(func=Attribute(value=Name(id='ssl', ctx=Load()), attr='SSLContext', ctx=Load()), args=[Attribute(value=Name(id='ssl', ctx=Load()), attr='PROTOCOL_SSLv23', ctx=Load())], keywords=[])), If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='ssl', ctx=Load()), Constant(value='OP_NO_SSLv2')], keywords=[]), body=[AugAssign(target=Attribute(value=Name(id='context', ctx=Load()), attr='options', ctx=Store()), op=BitOr(), value=Attribute(value=Name(id='ssl', ctx=Load()), attr='OP_NO_SSLv2', ctx=Load()))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='cert_file', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='context', ctx=Load()), attr='load_cert_chain', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='cert_file', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='key_file', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='kwargs', ctx=Store())], value=Dict(keys=[], values=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='ca_certs', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='context', ctx=Load()), attr='verify_mode', ctx=Store())], value=Attribute(value=Name(id='ssl', ctx=Load()), attr='CERT_REQUIRED', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='context', ctx=Load()), attr='load_verify_locations', ctx=Load()), args=[], keywords=[keyword(arg='cafile', value=Attribute(value=Name(id='self', ctx=Load()), attr='ca_certs', ctx=Load()))])), If(test=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='ssl', ctx=Load()), Constant(value='HAS_SNI'), Constant(value=False)], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='kwargs', ctx=Load()), slice=Constant(value='server_hostname'), ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='host', ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='sock', ctx=Store())], value=Call(func=Attribute(value=Name(id='context', ctx=Load()), attr='wrap_socket', ctx=Load()), args=[Name(id='sock', ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))])), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='ca_certs', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='check_domain', ctx=Load())]), body=[Try(body=[Expr(value=Call(func=Name(id='match_hostname', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='sock', ctx=Load()), attr='getpeercert', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='host', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Host verified: %s'), Attribute(value=Name(id='self', ctx=Load()), attr='host', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='CertificateError', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='sock', ctx=Load()), attr='shutdown', ctx=Load()), args=[Attribute(value=Name(id='socket', ctx=Load()), attr='SHUT_RDWR', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='sock', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Raise()])], orelse=[], finalbody=[])], orelse=[])], decorator_list=[])], decorator_list=[]), ClassDef(name='HTTPSHandler', bases=[Name(id='BaseHTTPSHandler', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ca_certs'), arg(arg='check_domain')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Expr(value=Call(func=Attribute(value=Name(id='BaseHTTPSHandler', ctx=Load()), attr='__init__', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='ca_certs', ctx=Store())], value=Name(id='ca_certs', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='check_domain', ctx=Store())], value=Name(id='check_domain', ctx=Load()))], decorator_list=[]), FunctionDef(name='_conn_maker', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Constant(value="\n            This is called to create a connection instance. Normally you'd\n            pass a connection class to do_open, but it doesn't actually check for\n            a class, and just expects a callable. As long as we behave just as a\n            constructor would have, we should be OK. If it ever changes so that\n            we *must* pass a class, we'll create an UnsafeHTTPSConnection class\n            which just sets check_domain to False in the class definition, and\n            choose which one to pass to do_open.\n            ")), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='HTTPSConnection', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='ca_certs', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='ca_certs', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='ca_certs', ctx=Load())), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='check_domain', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='check_domain', ctx=Load()))], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[]), FunctionDef(name='https_open', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='req')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='do_open', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_conn_maker', ctx=Load()), Name(id='req', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='URLError', ctx=Load()), name='e', body=[If(test=Compare(left=Constant(value='certificate verify failed'), ops=[In()], comparators=[Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='e', ctx=Load()), attr='reason', ctx=Load())], keywords=[])]), body=[Raise(exc=Call(func=Name(id='CertificateError', ctx=Load()), args=[BinOp(left=Constant(value='Unable to verify server certificate for %s'), op=Mod(), right=Attribute(value=Name(id='req', ctx=Load()), attr='host', ctx=Load()))], keywords=[]))], orelse=[Raise()])])], orelse=[], finalbody=[])], decorator_list=[])], decorator_list=[]), ClassDef(name='HTTPSOnlyHandler', bases=[Name(id='HTTPSHandler', ctx=Load()), Name(id='HTTPHandler', ctx=Load())], keywords=[], body=[FunctionDef(name='http_open', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='req')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Call(func=Name(id='URLError', ctx=Load()), args=[BinOp(left=Constant(value='Unexpected HTTP request on what should be a secure connection: %s'), op=Mod(), right=Name(id='req', ctx=Load()))], keywords=[]))], decorator_list=[])], decorator_list=[])], orelse=[]), ClassDef(name='Transport', bases=[Attribute(value=Name(id='xmlrpclib', ctx=Load()), attr='Transport', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='timeout'), arg(arg='use_datetime')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='timeout', ctx=Store())], value=Name(id='timeout', ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='xmlrpclib', ctx=Load()), attr='Transport', ctx=Load()), attr='__init__', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='use_datetime', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='make_connection', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='host')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='h', ctx=Store()), Name(id='eh', ctx=Store()), Name(id='x509', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_host_info', ctx=Load()), args=[Name(id='host', ctx=Load())], keywords=[])), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='_connection', ctx=Load())), Compare(left=Name(id='host', ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_connection', ctx=Load()), slice=Constant(value=0), ctx=Load())])]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_extra_headers', ctx=Store())], value=Name(id='eh', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_connection', ctx=Store())], value=Tuple(elts=[Name(id='host', ctx=Load()), Call(func=Attribute(value=Name(id='httplib', ctx=Load()), attr='HTTPConnection', ctx=Load()), args=[Name(id='h', ctx=Load())], keywords=[])], ctx=Load()))], orelse=[]), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_connection', ctx=Load()), slice=Constant(value=1), ctx=Load()))], decorator_list=[])], decorator_list=[]), If(test=Name(id='ssl', ctx=Load()), body=[ClassDef(name='SafeTransport', bases=[Attribute(value=Name(id='xmlrpclib', ctx=Load()), attr='SafeTransport', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='timeout'), arg(arg='use_datetime')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='timeout', ctx=Store())], value=Name(id='timeout', ctx=Load())), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='xmlrpclib', ctx=Load()), attr='SafeTransport', ctx=Load()), attr='__init__', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='use_datetime', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='make_connection', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='host')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='h', ctx=Store()), Name(id='eh', ctx=Store()), Name(id='kwargs', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_host_info', ctx=Load()), args=[Name(id='host', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='kwargs', ctx=Load())), body=[Assign(targets=[Name(id='kwargs', ctx=Store())], value=Dict(keys=[], values=[]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='kwargs', ctx=Load()), slice=Constant(value='timeout'), ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='timeout', ctx=Load())), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='_connection', ctx=Load())), Compare(left=Name(id='host', ctx=Load()), ops=[NotEq()], comparators=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_connection', ctx=Load()), slice=Constant(value=0), ctx=Load())])]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_extra_headers', ctx=Store())], value=Name(id='eh', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_connection', ctx=Store())], value=Tuple(elts=[Name(id='host', ctx=Load()), Call(func=Attribute(value=Name(id='httplib', ctx=Load()), attr='HTTPSConnection', ctx=Load()), args=[Name(id='h', ctx=Load()), Constant(value=None)], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))])], ctx=Load()))], orelse=[]), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_connection', ctx=Load()), slice=Constant(value=1), ctx=Load()))], decorator_list=[])], decorator_list=[])], orelse=[]), ClassDef(name='ServerProxy', bases=[Attribute(value=Name(id='xmlrpclib', ctx=Load()), attr='ServerProxy', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='uri')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='timeout', ctx=Store()), Name(id='timeout', ctx=Store())], value=Call(func=Attribute(value=Name(id='kwargs', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='timeout'), Constant(value=None)], keywords=[])), If(test=Compare(left=Name(id='timeout', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='scheme', ctx=Store())], value=Subscript(value=Call(func=Name(id='urlparse', ctx=Load()), args=[Name(id='uri', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='use_datetime', ctx=Store())], value=Call(func=Attribute(value=Name(id='kwargs', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='use_datetime'), Constant(value=0)], keywords=[])), If(test=Compare(left=Name(id='scheme', ctx=Load()), ops=[Eq()], comparators=[Constant(value='https')]), body=[Assign(targets=[Name(id='tcls', ctx=Store())], value=Name(id='SafeTransport', ctx=Load()))], orelse=[Assign(targets=[Name(id='tcls', ctx=Store())], value=Name(id='Transport', ctx=Load()))]), Assign(targets=[Subscript(value=Name(id='kwargs', ctx=Load()), slice=Constant(value='transport'), ctx=Store()), Name(id='t', ctx=Store())], value=Call(func=Name(id='tcls', ctx=Load()), args=[Name(id='timeout', ctx=Load())], keywords=[keyword(arg='use_datetime', value=Name(id='use_datetime', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='transport', ctx=Store())], value=Name(id='t', ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='xmlrpclib', ctx=Load()), attr='ServerProxy', ctx=Load()), attr='__init__', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='uri', ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[])], decorator_list=[]), FunctionDef(name='_csv_open', args=arguments(posonlyargs=[], args=[arg(arg='fn'), arg(arg='mode')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[If(test=Compare(left=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Constant(value=3)]), body=[AugAssign(target=Name(id='mode', ctx=Store()), op=Add(), value=Constant(value='b'))], orelse=[Assign(targets=[Subscript(value=Name(id='kwargs', ctx=Load()), slice=Constant(value='newline'), ctx=Store())], value=Constant(value='')), Assign(targets=[Subscript(value=Name(id='kwargs', ctx=Load()), slice=Constant(value='encoding'), ctx=Store())], value=Constant(value='utf-8'))]), Return(value=Call(func=Name(id='open', ctx=Load()), args=[Name(id='fn', ctx=Load()), Name(id='mode', ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[]), ClassDef(name='CSVBase', bases=[Name(id='object', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='defaults', ctx=Store())], value=Dict(keys=[Constant(value='delimiter'), Constant(value='quotechar'), Constant(value='lineterminator')], values=[Call(func=Name(id='str', ctx=Load()), args=[Constant(value=',')], keywords=[]), Call(func=Name(id='str', ctx=Load()), args=[Constant(value='"')], keywords=[]), Call(func=Name(id='str', ctx=Load()), args=[Constant(value='\n')], keywords=[])])), FunctionDef(name='__enter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Name(id='self', ctx=Load()))], decorator_list=[]), FunctionDef(name='__exit__', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='exc_info'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='stream', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='CSVReader', bases=[Name(id='CSVBase', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[If(test=Compare(left=Constant(value='stream'), ops=[In()], comparators=[Name(id='kwargs', ctx=Load())]), body=[Assign(targets=[Name(id='stream', ctx=Store())], value=Subscript(value=Name(id='kwargs', ctx=Load()), slice=Constant(value='stream'), ctx=Load())), If(test=Compare(left=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[GtE()], comparators=[Constant(value=3)]), body=[Assign(targets=[Name(id='stream', ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='codecs', ctx=Load()), attr='getreader', ctx=Load()), args=[Constant(value='utf-8')], keywords=[]), args=[Name(id='stream', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='stream', ctx=Store())], value=Name(id='stream', ctx=Load()))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='stream', ctx=Store())], value=Call(func=Name(id='_csv_open', ctx=Load()), args=[Subscript(value=Name(id='kwargs', ctx=Load()), slice=Constant(value='path'), ctx=Load()), Constant(value='r')], keywords=[]))]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='reader', ctx=Store())], value=Call(func=Attribute(value=Name(id='csv', ctx=Load()), attr='reader', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='stream', ctx=Load())], keywords=[keyword(value=Attribute(value=Name(id='self', ctx=Load()), attr='defaults', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='__iter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Name(id='self', ctx=Load()))], decorator_list=[]), FunctionDef(name='next', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='next', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='reader', ctx=Load())], keywords=[])), If(test=Compare(left=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Constant(value=3)]), body=[For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='item', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='item', ctx=Load()), Name(id='text_type', ctx=Load())], keywords=[])), body=[Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Name(id='item', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[]))], orelse=[])], orelse=[])], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='__next__', ctx=Store())], value=Name(id='next', ctx=Load()))], decorator_list=[]), ClassDef(name='CSVWriter', bases=[Name(id='CSVBase', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='fn')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='stream', ctx=Store())], value=Call(func=Name(id='_csv_open', ctx=Load()), args=[Name(id='fn', ctx=Load()), Constant(value='w')], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='writer', ctx=Store())], value=Call(func=Attribute(value=Name(id='csv', ctx=Load()), attr='writer', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='stream', ctx=Load())], keywords=[keyword(value=Attribute(value=Name(id='self', ctx=Load()), attr='defaults', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='writerow', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='row')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Lt()], comparators=[Constant(value=3)]), body=[Assign(targets=[Name(id='r', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='item', ctx=Store()), iter=Name(id='row', ctx=Load()), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='item', ctx=Load()), Name(id='text_type', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='item', ctx=Store())], value=Call(func=Attribute(value=Name(id='item', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='r', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='item', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='row', ctx=Store())], value=Name(id='r', ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='writer', ctx=Load()), attr='writerow', ctx=Load()), args=[Name(id='row', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='Configurator', bases=[Name(id='BaseConfigurator', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='value_converters', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[Attribute(value=Name(id='BaseConfigurator', ctx=Load()), attr='value_converters', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='value_converters', ctx=Load()), slice=Constant(value='inc'), ctx=Store())], value=Constant(value='inc_convert')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='config'), arg(arg='base')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[Name(id='Configurator', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]), attr='__init__', ctx=Load()), args=[Name(id='config', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='base', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='base', ctx=Load()), Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getcwd', ctx=Load()), args=[], keywords=[])]))], decorator_list=[]), FunctionDef(name='configure_custom', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='config')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='convert', args=arguments(posonlyargs=[], args=[arg(arg='o')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='o', ctx=Load()), Tuple(elts=[Name(id='list', ctx=Load()), Name(id='tuple', ctx=Load())], ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Call(func=Name(id='type', ctx=Load()), args=[Name(id='o', ctx=Load())], keywords=[]), args=[ListComp(elt=Call(func=Name(id='convert', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Name(id='o', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='o', ctx=Load()), Name(id='dict', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Constant(value='()'), ops=[In()], comparators=[Name(id='o', ctx=Load())]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='configure_custom', ctx=Load()), args=[Name(id='o', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='result', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='k', ctx=Store()), iter=Name(id='o', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Store())], value=Call(func=Name(id='convert', ctx=Load()), args=[Subscript(value=Name(id='o', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])])], orelse=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='convert', ctx=Load()), args=[Name(id='o', ctx=Load())], keywords=[]))])]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='c', ctx=Store())], value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='()')], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='callable', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='c', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='resolve', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='props', ctx=Store())], value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='.'), Constant(value=None)], keywords=[])), Assign(targets=[Name(id='args', ctx=Store())], value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='[]'), Tuple(elts=[], ctx=Load())], keywords=[])), If(test=Name(id='args', ctx=Load()), body=[Assign(targets=[Name(id='args', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='convert', ctx=Load()), args=[Name(id='o', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='o', ctx=Store()), iter=Name(id='args', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='items', ctx=Store())], value=ListComp(elt=Tuple(elts=[Name(id='k', ctx=Load()), Call(func=Name(id='convert', ctx=Load()), args=[Subscript(value=Name(id='config', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Load())], keywords=[])], ctx=Load()), generators=[comprehension(target=Name(id='k', ctx=Store()), iter=Name(id='config', ctx=Load()), ifs=[Call(func=Name(id='valid_ident', ctx=Load()), args=[Name(id='k', ctx=Load())], keywords=[])], is_async=0)])), Assign(targets=[Name(id='kwargs', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[Name(id='items', ctx=Load())], keywords=[])), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='c', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))])), If(test=Name(id='props', ctx=Load()), body=[For(target=Tuple(elts=[Name(id='n', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='props', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='result', ctx=Load()), Name(id='n', ctx=Load()), Call(func=Name(id='convert', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[]), FunctionDef(name='__getitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load())), If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='result', ctx=Load()), Name(id='dict', ctx=Load())], keywords=[]), Compare(left=Constant(value='()'), ops=[In()], comparators=[Name(id='result', ctx=Load())])]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='config', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store()), Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='configure_custom', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[]), FunctionDef(name='inc_convert', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Default converter for the inc:// protocol.')), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isabs', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='base', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]))], orelse=[]), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='codecs', ctx=Load()), attr='open', ctx=Load()), args=[Name(id='value', ctx=Load()), Constant(value='r')], keywords=[keyword(arg='encoding', value=Constant(value='utf-8'))]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='SubprocessMixin', bases=[Name(id='object', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Mixin for running subprocesses and capturing their output\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='verbose'), arg(arg='progress')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='verbose', ctx=Store())], value=Name(id='verbose', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='progress', ctx=Store())], value=Name(id='progress', ctx=Load()))], decorator_list=[]), FunctionDef(name='reader', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='stream'), arg(arg='context')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Read lines from a subprocess' output stream and either pass to a progress\n        callable (if specified) or write progress information to sys.stderr.\n        ")), Assign(targets=[Name(id='progress', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='progress', ctx=Load())), Assign(targets=[Name(id='verbose', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='verbose', ctx=Load())), While(test=Constant(value=True), body=[Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Attribute(value=Name(id='stream', ctx=Load()), attr='readline', ctx=Load()), args=[], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='s', ctx=Load())), body=[Break()], orelse=[]), If(test=Compare(left=Name(id='progress', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Name(id='progress', ctx=Load()), args=[Name(id='s', ctx=Load()), Name(id='context', ctx=Load())], keywords=[]))], orelse=[If(test=UnaryOp(op=Not(), operand=Name(id='verbose', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value='.')], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[])], keywords=[]))]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()), attr='flush', ctx=Load()), args=[], keywords=[]))])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='stream', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='run_command', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='cmd')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Attribute(value=Name(id='subprocess', ctx=Load()), attr='Popen', ctx=Load()), args=[Name(id='cmd', ctx=Load())], keywords=[keyword(arg='stdout', value=Attribute(value=Name(id='subprocess', ctx=Load()), attr='PIPE', ctx=Load())), keyword(arg='stderr', value=Attribute(value=Name(id='subprocess', ctx=Load()), attr='PIPE', ctx=Load())), keyword(value=Name(id='kwargs', ctx=Load()))])), Assign(targets=[Name(id='t1', ctx=Store())], value=Call(func=Attribute(value=Name(id='threading', ctx=Load()), attr='Thread', ctx=Load()), args=[], keywords=[keyword(arg='target', value=Attribute(value=Name(id='self', ctx=Load()), attr='reader', ctx=Load())), keyword(arg='args', value=Tuple(elts=[Attribute(value=Name(id='p', ctx=Load()), attr='stdout', ctx=Load()), Constant(value='stdout')], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='t1', ctx=Load()), attr='start', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='t2', ctx=Store())], value=Call(func=Attribute(value=Name(id='threading', ctx=Load()), attr='Thread', ctx=Load()), args=[], keywords=[keyword(arg='target', value=Attribute(value=Name(id='self', ctx=Load()), attr='reader', ctx=Load())), keyword(arg='args', value=Tuple(elts=[Attribute(value=Name(id='p', ctx=Load()), attr='stderr', ctx=Load()), Constant(value='stderr')], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='t2', ctx=Load()), attr='start', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='wait', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='t1', ctx=Load()), attr='join', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='t2', ctx=Load()), attr='join', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='progress', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='progress', ctx=Load()), args=[Constant(value='done.'), Constant(value='main')], keywords=[]))], orelse=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='verbose', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value='done.\n')], keywords=[]))], orelse=[])]), Return(value=Name(id='p', ctx=Load()))], decorator_list=[])], decorator_list=[]), FunctionDef(name='normalize_name', args=arguments(posonlyargs=[], args=[arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Normalize a python package name a la PEP 503')), Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value='[-_.]+'), Constant(value='-'), Name(id='name', ctx=Load())], keywords=[]), attr='lower', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), ClassDef(name='PyPIRCFile', bases=[Name(id='object', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='DEFAULT_REPOSITORY', ctx=Store())], value=Constant(value='https://upload.pypi.org/legacy/')), Assign(targets=[Name(id='DEFAULT_REALM', ctx=Store())], value=Constant(value='pypi')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='fn'), arg(arg='url')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[If(test=Compare(left=Name(id='fn', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='fn', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='expanduser', ctx=Load()), args=[Constant(value='~')], keywords=[]), Constant(value='.pypirc')], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='filename', ctx=Store())], value=Name(id='fn', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='url', ctx=Store())], value=Name(id='url', ctx=Load()))], decorator_list=[]), FunctionDef(name='read', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Dict(keys=[], values=[])), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='filename', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='repository', ctx=Store())], value=BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='url', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='DEFAULT_REPOSITORY', ctx=Load())])), Assign(targets=[Name(id='config', ctx=Store())], value=Call(func=Attribute(value=Name(id='configparser', ctx=Load()), attr='RawConfigParser', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='read', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='filename', ctx=Load())], keywords=[])), Assign(targets=[Name(id='sections', ctx=Store())], value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='sections', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Constant(value='distutils'), ops=[In()], comparators=[Name(id='sections', ctx=Load())]), body=[Assign(targets=[Name(id='index_servers', ctx=Store())], value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='distutils'), Constant(value='index-servers')], keywords=[])), Assign(targets=[Name(id='_servers', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='server', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]), generators=[comprehension(target=Name(id='server', ctx=Store()), iter=Call(func=Attribute(value=Name(id='index_servers', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='\n')], keywords=[]), ifs=[Compare(left=Call(func=Attribute(value=Name(id='server', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]), ops=[NotEq()], comparators=[Constant(value='')])], is_async=0)])), If(test=Compare(left=Name(id='_servers', ctx=Load()), ops=[Eq()], comparators=[List(elts=[], ctx=Load())]), body=[If(test=Compare(left=Constant(value='pypi'), ops=[In()], comparators=[Name(id='sections', ctx=Load())]), body=[Assign(targets=[Name(id='_servers', ctx=Store())], value=List(elts=[Constant(value='pypi')], ctx=Load()))], orelse=[])], orelse=[For(target=Name(id='server', ctx=Store()), iter=Name(id='_servers', ctx=Load()), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Dict(keys=[Constant(value='server')], values=[Name(id='server', ctx=Load())])), Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='username'), ctx=Store())], value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='server', ctx=Load()), Constant(value='username')], keywords=[])), For(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='default', ctx=Store())], ctx=Store()), iter=Tuple(elts=[Tuple(elts=[Constant(value='repository'), Attribute(value=Name(id='self', ctx=Load()), attr='DEFAULT_REPOSITORY', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='realm'), Attribute(value=Name(id='self', ctx=Load()), attr='DEFAULT_REALM', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='password'), Constant(value=None)], ctx=Load())], ctx=Load()), body=[If(test=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='has_option', ctx=Load()), args=[Name(id='server', ctx=Load()), Name(id='key', ctx=Load())], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='server', ctx=Load()), Name(id='key', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Name(id='default', ctx=Load()))])], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='server', ctx=Load()), ops=[Eq()], comparators=[Constant(value='pypi')]), Compare(left=Name(id='repository', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='DEFAULT_REPOSITORY', ctx=Load()), Constant(value='pypi')], ctx=Load())])]), body=[Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='repository'), ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='DEFAULT_REPOSITORY', ctx=Load()))], orelse=[If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='server'), ctx=Load()), ops=[NotEq()], comparators=[Name(id='repository', ctx=Load())]), Compare(left=Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='repository'), ctx=Load()), ops=[NotEq()], comparators=[Name(id='repository', ctx=Load())])]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Dict(keys=[], values=[]))], orelse=[])])], orelse=[])])], orelse=[If(test=Compare(left=Constant(value='server-login'), ops=[In()], comparators=[Name(id='sections', ctx=Load())]), body=[Assign(targets=[Name(id='server', ctx=Store())], value=Constant(value='server-login')), If(test=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='has_option', ctx=Load()), args=[Name(id='server', ctx=Load()), Constant(value='repository')], keywords=[]), body=[Assign(targets=[Name(id='repository', ctx=Store())], value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='server', ctx=Load()), Constant(value='repository')], keywords=[]))], orelse=[Assign(targets=[Name(id='repository', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='DEFAULT_REPOSITORY', ctx=Load()))]), Assign(targets=[Name(id='result', ctx=Store())], value=Dict(keys=[Constant(value='username'), Constant(value='password'), Constant(value='repository'), Constant(value='server'), Constant(value='realm')], values=[Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='server', ctx=Load()), Constant(value='username')], keywords=[]), Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='server', ctx=Load()), Constant(value='password')], keywords=[]), Name(id='repository', ctx=Load()), Name(id='server', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='DEFAULT_REALM', ctx=Load())]))], orelse=[])])], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[]), FunctionDef(name='update', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='username'), arg(arg='password')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='config', ctx=Store())], value=Call(func=Attribute(value=Name(id='configparser', ctx=Load()), attr='RawConfigParser', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='fn', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='filename', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='read', ctx=Load()), args=[Name(id='fn', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='has_section', ctx=Load()), args=[Constant(value='pypi')], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='add_section', ctx=Load()), args=[Constant(value='pypi')], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='set', ctx=Load()), args=[Constant(value='pypi'), Constant(value='username'), Name(id='username', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='set', ctx=Load()), args=[Constant(value='pypi'), Constant(value='password'), Name(id='password', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='fn', ctx=Load()), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))])], decorator_list=[])], decorator_list=[]), FunctionDef(name='_load_pypirc', args=arguments(posonlyargs=[], args=[arg(arg='index')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Read the PyPI access configuration as supported by distutils.\n    ')), Return(value=Call(func=Attribute(value=Call(func=Name(id='PyPIRCFile', ctx=Load()), args=[], keywords=[keyword(arg='url', value=Attribute(value=Name(id='index', ctx=Load()), attr='url', ctx=Load()))]), attr='read', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='_store_pypirc', args=arguments(posonlyargs=[], args=[arg(arg='index')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='PyPIRCFile', ctx=Load()), args=[], keywords=[]), attr='update', ctx=Load()), args=[Attribute(value=Name(id='index', ctx=Load()), attr='username', ctx=Load()), Attribute(value=Name(id='index', ctx=Load()), attr='password', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='get_host_platform', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Return a string that identifies the current platform.  This is used mainly to\n    distinguish platform-specific build directories and platform-specific built\n    distributions.  Typically includes the OS name and version and the\n    architecture (as supplied by 'os.uname()'), although the exact information\n    included depends on the OS; eg. on Linux, the kernel version isn't\n    particularly important.\n\n    Examples of returned values:\n       linux-i586\n       linux-alpha (?)\n       solaris-2.6-sun4u\n\n    Windows will return one of:\n       win-amd64 (64bit Windows on AMD64 (aka x86_64, Intel64, EM64T, etc)\n       win32 (all others - specifically, sys.platform is returned)\n\n    For other non-POSIX platforms, currently just returns 'sys.platform'.\n\n    ")), If(test=Compare(left=Attribute(value=Name(id='os', ctx=Load()), attr='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='nt')]), body=[If(test=Compare(left=Constant(value='amd64'), ops=[In()], comparators=[Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])]), body=[Return(value=Constant(value='win-amd64'))], orelse=[]), If(test=Compare(left=Constant(value='(arm)'), ops=[In()], comparators=[Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])]), body=[Return(value=Constant(value='win-arm32'))], orelse=[]), If(test=Compare(left=Constant(value='(arm64)'), ops=[In()], comparators=[Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])]), body=[Return(value=Constant(value='win-arm64'))], orelse=[]), Return(value=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()))], orelse=[]), If(test=Compare(left=Constant(value='_PYTHON_HOST_PLATFORM'), ops=[In()], comparators=[Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load())]), body=[Return(value=Subscript(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), slice=Constant(value='_PYTHON_HOST_PLATFORM'), ctx=Load()))], orelse=[]), If(test=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='os', ctx=Load()), attr='name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='posix')]), UnaryOp(op=Not(), operand=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='os', ctx=Load()), Constant(value='uname')], keywords=[]))]), body=[Return(value=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='osname', ctx=Store()), Name(id='host', ctx=Store()), Name(id='release', ctx=Store()), Name(id='version', ctx=Store()), Name(id='machine', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='uname', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='osname', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='osname', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value='/'), Constant(value='')], keywords=[])), Assign(targets=[Name(id='machine', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='machine', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value=' '), Constant(value='_')], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value='/'), Constant(value='-')], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='osname', ctx=Load()), slice=Slice(upper=Constant(value=5)), ctx=Load()), ops=[Eq()], comparators=[Constant(value='linux')]), body=[Return(value=BinOp(left=Constant(value='%s-%s'), op=Mod(), right=Tuple(elts=[Name(id='osname', ctx=Load()), Name(id='machine', ctx=Load())], ctx=Load())))], orelse=[If(test=Compare(left=Subscript(value=Name(id='osname', ctx=Load()), slice=Slice(upper=Constant(value=5)), ctx=Load()), ops=[Eq()], comparators=[Constant(value='sunos')]), body=[If(test=Compare(left=Subscript(value=Name(id='release', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[GtE()], comparators=[Constant(value='5')]), body=[Assign(targets=[Name(id='osname', ctx=Store())], value=Constant(value='solaris')), Assign(targets=[Name(id='release', ctx=Store())], value=BinOp(left=Constant(value='%d.%s'), op=Mod(), right=Tuple(elts=[BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='release', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=3)), Subscript(value=Name(id='release', ctx=Load()), slice=Slice(lower=Constant(value=2)), ctx=Load())], ctx=Load()))), Assign(targets=[Name(id='bitness', ctx=Store())], value=Dict(keys=[Constant(value=2147483647), Constant(value=9223372036854775807)], values=[Constant(value='32bit'), Constant(value='64bit')])), AugAssign(target=Name(id='machine', ctx=Store()), op=Add(), value=BinOp(left=Constant(value='.%s'), op=Mod(), right=Subscript(value=Name(id='bitness', ctx=Load()), slice=Attribute(value=Name(id='sys', ctx=Load()), attr='maxsize', ctx=Load()), ctx=Load())))], orelse=[])], orelse=[If(test=Compare(left=Subscript(value=Name(id='osname', ctx=Load()), slice=Slice(upper=Constant(value=3)), ctx=Load()), ops=[Eq()], comparators=[Constant(value='aix')]), body=[ImportFrom(module='_aix_support', names=[alias(name='aix_platform')], level=0), Return(value=Call(func=Name(id='aix_platform', ctx=Load()), args=[], keywords=[]))], orelse=[If(test=Compare(left=Subscript(value=Name(id='osname', ctx=Load()), slice=Slice(upper=Constant(value=6)), ctx=Load()), ops=[Eq()], comparators=[Constant(value='cygwin')]), body=[Assign(targets=[Name(id='osname', ctx=Store())], value=Constant(value='cygwin')), Assign(targets=[Name(id='rel_re', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='[\\d.]+'), Attribute(value=Name(id='re', ctx=Load()), attr='ASCII', ctx=Load())], keywords=[])), Assign(targets=[Name(id='m', ctx=Store())], value=Call(func=Attribute(value=Name(id='rel_re', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='release', ctx=Load())], keywords=[])), If(test=Name(id='m', ctx=Load()), body=[Assign(targets=[Name(id='release', ctx=Store())], value=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='group', ctx=Load()), args=[], keywords=[]))], orelse=[])], orelse=[If(test=Compare(left=Subscript(value=Name(id='osname', ctx=Load()), slice=Slice(upper=Constant(value=6)), ctx=Load()), ops=[Eq()], comparators=[Constant(value='darwin')]), body=[Import(names=[alias(name='_osx_support'), alias(name='distutils.sysconfig')]), Assign(targets=[Tuple(elts=[Name(id='osname', ctx=Store()), Name(id='release', ctx=Store()), Name(id='machine', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='_osx_support', ctx=Load()), attr='get_platform_osx', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='distutils', ctx=Load()), attr='sysconfig', ctx=Load()), attr='get_config_vars', ctx=Load()), args=[], keywords=[]), Name(id='osname', ctx=Load()), Name(id='release', ctx=Load()), Name(id='machine', ctx=Load())], keywords=[]))], orelse=[])])])])]), Return(value=BinOp(left=Constant(value='%s-%s-%s'), op=Mod(), right=Tuple(elts=[Name(id='osname', ctx=Load()), Name(id='release', ctx=Load()), Name(id='machine', ctx=Load())], ctx=Load())))], decorator_list=[]), Assign(targets=[Name(id='_TARGET_TO_PLAT', ctx=Store())], value=Dict(keys=[Constant(value='x86'), Constant(value='x64'), Constant(value='arm')], values=[Constant(value='win32'), Constant(value='win-amd64'), Constant(value='win-arm32')])), FunctionDef(name='get_platform', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='os', ctx=Load()), attr='name', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='nt')]), body=[Return(value=Call(func=Name(id='get_host_platform', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='cross_compilation_target', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='VSCMD_ARG_TGT_ARCH')], keywords=[])), If(test=Compare(left=Name(id='cross_compilation_target', ctx=Load()), ops=[NotIn()], comparators=[Name(id='_TARGET_TO_PLAT', ctx=Load())]), body=[Return(value=Call(func=Name(id='get_host_platform', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Subscript(value=Name(id='_TARGET_TO_PLAT', ctx=Load()), slice=Name(id='cross_compilation_target', ctx=Load()), ctx=Load()))], decorator_list=[])], type_ignores=[])