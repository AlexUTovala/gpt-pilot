Module(body=[Import(names=[alias(name='time')]), Import(names=[alias(name='typing')]), If(test=Attribute(value=Name(id='typing', ctx=Load()), attr='TYPE_CHECKING', ctx=Load()), body=[Import(names=[alias(name='threading')])], orelse=[]), FunctionDef(name='sleep', args=arguments(posonlyargs=[], args=[arg(arg='seconds', annotation=Name(id='float', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Sleep strategy that delays execution for a given number of seconds.\n\n    This is the default strategy, and may be mocked out for unit testing.\n    ')), Expr(value=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='sleep', ctx=Load()), args=[Name(id='seconds', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), ClassDef(name='sleep_using_event', bases=[], keywords=[], body=[Expr(value=Constant(value='Sleep strategy that waits on an event to be set.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='event', annotation=Constant(value='threading.Event'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='event', ctx=Store())], value=Name(id='event', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__call__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='timeout', annotation=Subscript(value=Attribute(value=Name(id='typing', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='event', ctx=Load()), attr='wait', ctx=Load()), args=[], keywords=[keyword(arg='timeout', value=Name(id='timeout', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None))], decorator_list=[])], type_ignores=[])