Module(body=[Import(names=[alias(name='functools')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='threading')]), Import(names=[alias(name='time')]), Import(names=[alias(name='typing', asname='t')]), Import(names=[alias(name='warnings')]), ImportFrom(module='abc', names=[alias(name='ABC'), alias(name='abstractmethod')], level=0), ImportFrom(module='concurrent', names=[alias(name='futures')], level=0), ImportFrom(module='inspect', names=[alias(name='iscoroutinefunction')], level=0), ImportFrom(module='retry', names=[alias(name='retry_base')], level=1), ImportFrom(module='retry', names=[alias(name='retry_all')], level=1), ImportFrom(module='retry', names=[alias(name='retry_always')], level=1), ImportFrom(module='retry', names=[alias(name='retry_any')], level=1), ImportFrom(module='retry', names=[alias(name='retry_if_exception')], level=1), ImportFrom(module='retry', names=[alias(name='retry_if_exception_type')], level=1), ImportFrom(module='retry', names=[alias(name='retry_if_exception_cause_type')], level=1), ImportFrom(module='retry', names=[alias(name='retry_if_not_exception_type')], level=1), ImportFrom(module='retry', names=[alias(name='retry_if_not_result')], level=1), ImportFrom(module='retry', names=[alias(name='retry_if_result')], level=1), ImportFrom(module='retry', names=[alias(name='retry_never')], level=1), ImportFrom(module='retry', names=[alias(name='retry_unless_exception_type')], level=1), ImportFrom(module='retry', names=[alias(name='retry_if_exception_message')], level=1), ImportFrom(module='retry', names=[alias(name='retry_if_not_exception_message')], level=1), ImportFrom(module='nap', names=[alias(name='sleep')], level=1), ImportFrom(module='nap', names=[alias(name='sleep_using_event')], level=1), ImportFrom(module='stop', names=[alias(name='stop_after_attempt')], level=1), ImportFrom(module='stop', names=[alias(name='stop_after_delay')], level=1), ImportFrom(module='stop', names=[alias(name='stop_all')], level=1), ImportFrom(module='stop', names=[alias(name='stop_any')], level=1), ImportFrom(module='stop', names=[alias(name='stop_never')], level=1), ImportFrom(module='stop', names=[alias(name='stop_when_event_set')], level=1), ImportFrom(module='wait', names=[alias(name='wait_chain')], level=1), ImportFrom(module='wait', names=[alias(name='wait_combine')], level=1), ImportFrom(module='wait', names=[alias(name='wait_exponential')], level=1), ImportFrom(module='wait', names=[alias(name='wait_fixed')], level=1), ImportFrom(module='wait', names=[alias(name='wait_incrementing')], level=1), ImportFrom(module='wait', names=[alias(name='wait_none')], level=1), ImportFrom(module='wait', names=[alias(name='wait_random')], level=1), ImportFrom(module='wait', names=[alias(name='wait_random_exponential')], level=1), ImportFrom(module='wait', names=[alias(name='wait_random_exponential', asname='wait_full_jitter')], level=1), ImportFrom(module='wait', names=[alias(name='wait_exponential_jitter')], level=1), ImportFrom(module='before', names=[alias(name='before_log')], level=1), ImportFrom(module='before', names=[alias(name='before_nothing')], level=1), ImportFrom(module='after', names=[alias(name='after_log')], level=1), ImportFrom(module='after', names=[alias(name='after_nothing')], level=1), ImportFrom(module='before_sleep', names=[alias(name='before_sleep_log')], level=1), ImportFrom(module='before_sleep', names=[alias(name='before_sleep_nothing')], level=1), Assign(targets=[Name(id='tornado', ctx=Store())], value=Constant(value=None)), If(test=Attribute(value=Name(id='t', ctx=Load()), attr='TYPE_CHECKING', ctx=Load()), body=[Import(names=[alias(name='types')]), ImportFrom(module='retry', names=[alias(name='RetryBaseT')], level=1), ImportFrom(module='stop', names=[alias(name='StopBaseT')], level=1), ImportFrom(module='wait', names=[alias(name='WaitBaseT')], level=1)], orelse=[]), Assign(targets=[Name(id='WrappedFnReturnT', ctx=Store())], value=Call(func=Attribute(value=Name(id='t', ctx=Load()), attr='TypeVar', ctx=Load()), args=[Constant(value='WrappedFnReturnT')], keywords=[])), Assign(targets=[Name(id='WrappedFn', ctx=Store())], value=Call(func=Attribute(value=Name(id='t', ctx=Load()), attr='TypeVar', ctx=Load()), args=[Constant(value='WrappedFn')], keywords=[keyword(arg='bound', value=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Callable', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())], ctx=Load()), ctx=Load()))])), ClassDef(name='TryAgain', bases=[Name(id='Exception', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Always retry the executed function when raised.'))], decorator_list=[]), Assign(targets=[Name(id='NO_RESULT', ctx=Store())], value=Call(func=Name(id='object', ctx=Load()), args=[], keywords=[])), ClassDef(name='DoAttempt', bases=[], keywords=[], body=[Pass()], decorator_list=[]), ClassDef(name='DoSleep', bases=[Name(id='float', ctx=Load())], keywords=[], body=[Pass()], decorator_list=[]), ClassDef(name='BaseAction', bases=[], keywords=[], body=[Expr(value=Constant(value='Base class for representing actions to take by retry object.\n\n    Concrete implementations must define:\n    - __init__: to initialize all necessary fields\n    - REPR_FIELDS: class variable specifying attributes to include in repr(self)\n    - NAME: for identification in retry object methods and callbacks\n    ')), AnnAssign(target=Name(id='REPR_FIELDS', ctx=Store()), annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Sequence', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Tuple(elts=[], ctx=Load()), simple=1), AnnAssign(target=Name(id='NAME', ctx=Store()), annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=1), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='state_str', ctx=Store())], value=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[GeneratorExp(elt=JoinedStr(values=[FormattedValue(value=Name(id='field', ctx=Load()), conversion=-1), Constant(value='='), FormattedValue(value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='field', ctx=Load())], keywords=[]), conversion=114)]), generators=[comprehension(target=Name(id='field', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='REPR_FIELDS', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Return(value=JoinedStr(values=[FormattedValue(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), conversion=-1), Constant(value='('), FormattedValue(value=Name(id='state_str', ctx=Load()), conversion=-1), Constant(value=')')]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='__str__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='repr', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[]), ClassDef(name='RetryAction', bases=[Name(id='BaseAction', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='REPR_FIELDS', ctx=Store())], value=Tuple(elts=[Constant(value='sleep')], ctx=Load())), Assign(targets=[Name(id='NAME', ctx=Store())], value=Constant(value='retry')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='sleep', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='SupportsFloat', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='sleep', ctx=Store())], value=Call(func=Name(id='float', ctx=Load()), args=[Name(id='sleep', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), Assign(targets=[Name(id='_unset', ctx=Store())], value=Call(func=Name(id='object', ctx=Load()), args=[], keywords=[])), FunctionDef(name='_first_set', args=arguments(posonlyargs=[], args=[arg(arg='first', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Union', ctx=Load()), slice=Tuple(elts=[Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()), Name(id='object', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='second', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=IfExp(test=Compare(left=Name(id='first', ctx=Load()), ops=[Is()], comparators=[Name(id='_unset', ctx=Load())]), body=Name(id='second', ctx=Load()), orelse=Name(id='first', ctx=Load())))], decorator_list=[], returns=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), ClassDef(name='RetryError', bases=[Name(id='Exception', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Encapsulates the last attempt instance right before giving up.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='last_attempt', annotation=Constant(value='Future'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='last_attempt', ctx=Store())], value=Name(id='last_attempt', ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Name(id='last_attempt', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='reraise', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='last_attempt', ctx=Load()), attr='failed', ctx=Load()), body=[Raise(exc=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='last_attempt', ctx=Load()), attr='result', ctx=Load()), args=[], keywords=[]))], orelse=[]), Raise(exc=Name(id='self', ctx=Load()))], decorator_list=[], returns=Constant(value='t.NoReturn')), FunctionDef(name='__str__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[FormattedValue(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), conversion=-1), Constant(value='['), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='last_attempt', ctx=Load()), conversion=-1), Constant(value=']')]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[]), ClassDef(name='AttemptManager', bases=[], keywords=[], body=[Expr(value=Constant(value='Manage attempt context.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='retry_state', annotation=Constant(value='RetryCallState'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='retry_state', ctx=Store())], value=Name(id='retry_state', ctx=Load()))], decorator_list=[]), FunctionDef(name='__enter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__exit__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='exc_type', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Type', ctx=Load()), slice=Name(id='BaseException', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='exc_value', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='BaseException', ctx=Load()), ctx=Load())), arg(arg='traceback', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Constant(value='types.TracebackType'), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='exc_type', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='exc_value', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='retry_state', ctx=Load()), attr='set_exception', ctx=Load()), args=[Tuple(elts=[Name(id='exc_type', ctx=Load()), Name(id='exc_value', ctx=Load()), Name(id='traceback', ctx=Load())], ctx=Load())], keywords=[])), Return(value=Constant(value=True))], orelse=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='retry_state', ctx=Load()), attr='set_result', ctx=Load()), args=[Constant(value=None)], keywords=[])), Return(value=Constant(value=None))])], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load()))], decorator_list=[]), ClassDef(name='BaseRetrying', bases=[Name(id='ABC', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='sleep', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Union', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load())), arg(arg='stop', annotation=Constant(value='StopBaseT')), arg(arg='wait', annotation=Constant(value='WaitBaseT')), arg(arg='retry', annotation=Constant(value='RetryBaseT')), arg(arg='before', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Constant(value='RetryCallState')], ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load())), arg(arg='after', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Constant(value='RetryCallState')], ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load())), arg(arg='before_sleep', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Constant(value='RetryCallState')], ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='reraise', annotation=Name(id='bool', ctx=Load())), arg(arg='retry_error_cls', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Type', ctx=Load()), slice=Name(id='RetryError', ctx=Load()), ctx=Load())), arg(arg='retry_error_callback', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Constant(value='RetryCallState')], ctx=Load()), Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='sleep', ctx=Load()), Name(id='stop_never', ctx=Load()), Call(func=Name(id='wait_none', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='retry_if_exception_type', ctx=Load()), args=[], keywords=[]), Name(id='before_nothing', ctx=Load()), Name(id='after_nothing', ctx=Load()), Constant(value=None), Constant(value=False), Name(id='RetryError', ctx=Load()), Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='sleep', ctx=Store())], value=Name(id='sleep', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='stop', ctx=Store())], value=Name(id='stop', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='wait', ctx=Store())], value=Name(id='wait', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='retry', ctx=Store())], value=Name(id='retry', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='before', ctx=Store())], value=Name(id='before', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='after', ctx=Store())], value=Name(id='after', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='before_sleep', ctx=Store())], value=Name(id='before_sleep', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='reraise', ctx=Store())], value=Name(id='reraise', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_local', ctx=Store())], value=Call(func=Attribute(value=Name(id='threading', ctx=Load()), attr='local', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='retry_error_cls', ctx=Store())], value=Name(id='retry_error_cls', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='retry_error_callback', ctx=Store())], value=Name(id='retry_error_callback', ctx=Load()))], decorator_list=[]), FunctionDef(name='copy', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='sleep', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Union', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load()), Name(id='object', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='stop', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Union', ctx=Load()), slice=Tuple(elts=[Constant(value='StopBaseT'), Name(id='object', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='wait', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Union', ctx=Load()), slice=Tuple(elts=[Constant(value='WaitBaseT'), Name(id='object', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='retry', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Union', ctx=Load()), slice=Tuple(elts=[Name(id='retry_base', ctx=Load()), Name(id='object', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='before', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Constant(value='RetryCallState')], ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load()), Name(id='object', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='after', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Constant(value='RetryCallState')], ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load()), Name(id='object', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='before_sleep', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Constant(value='RetryCallState')], ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load()), ctx=Load()), Name(id='object', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='reraise', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Union', ctx=Load()), slice=Tuple(elts=[Name(id='bool', ctx=Load()), Name(id='object', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='retry_error_cls', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Type', ctx=Load()), slice=Name(id='RetryError', ctx=Load()), ctx=Load()), Name(id='object', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='retry_error_callback', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Constant(value='RetryCallState')], ctx=Load()), Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), Name(id='object', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='_unset', ctx=Load()), Name(id='_unset', ctx=Load()), Name(id='_unset', ctx=Load()), Name(id='_unset', ctx=Load()), Name(id='_unset', ctx=Load()), Name(id='_unset', ctx=Load()), Name(id='_unset', ctx=Load()), Name(id='_unset', ctx=Load()), Name(id='_unset', ctx=Load()), Name(id='_unset', ctx=Load())]), body=[Expr(value=Constant(value='Copy this object with some parameters changed if needed.')), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), args=[], keywords=[keyword(arg='sleep', value=Call(func=Name(id='_first_set', ctx=Load()), args=[Name(id='sleep', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='sleep', ctx=Load())], keywords=[])), keyword(arg='stop', value=Call(func=Name(id='_first_set', ctx=Load()), args=[Name(id='stop', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='stop', ctx=Load())], keywords=[])), keyword(arg='wait', value=Call(func=Name(id='_first_set', ctx=Load()), args=[Name(id='wait', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='wait', ctx=Load())], keywords=[])), keyword(arg='retry', value=Call(func=Name(id='_first_set', ctx=Load()), args=[Name(id='retry', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='retry', ctx=Load())], keywords=[])), keyword(arg='before', value=Call(func=Name(id='_first_set', ctx=Load()), args=[Name(id='before', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='before', ctx=Load())], keywords=[])), keyword(arg='after', value=Call(func=Name(id='_first_set', ctx=Load()), args=[Name(id='after', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='after', ctx=Load())], keywords=[])), keyword(arg='before_sleep', value=Call(func=Name(id='_first_set', ctx=Load()), args=[Name(id='before_sleep', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='before_sleep', ctx=Load())], keywords=[])), keyword(arg='reraise', value=Call(func=Name(id='_first_set', ctx=Load()), args=[Name(id='reraise', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='reraise', ctx=Load())], keywords=[])), keyword(arg='retry_error_cls', value=Call(func=Name(id='_first_set', ctx=Load()), args=[Name(id='retry_error_cls', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='retry_error_cls', ctx=Load())], keywords=[])), keyword(arg='retry_error_callback', value=Call(func=Name(id='_first_set', ctx=Load()), args=[Name(id='retry_error_callback', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='retry_error_callback', ctx=Load())], keywords=[]))]))], decorator_list=[], returns=Constant(value='BaseRetrying')), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[Constant(value='<'), FormattedValue(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), conversion=-1), Constant(value=' object at 0x'), FormattedValue(value=Call(func=Name(id='id', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), conversion=-1, format_spec=JoinedStr(values=[Constant(value='x')])), Constant(value=' (stop='), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='stop', ctx=Load()), conversion=-1), Constant(value=', wait='), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='wait', ctx=Load()), conversion=-1), Constant(value=', sleep='), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='sleep', ctx=Load()), conversion=-1), Constant(value=', retry='), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='retry', ctx=Load()), conversion=-1), Constant(value=', before='), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='before', ctx=Load()), conversion=-1), Constant(value=', after='), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='after', ctx=Load()), conversion=-1), Constant(value=')>')]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='statistics', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return a dictionary of runtime statistics.\n\n        This dictionary will be empty when the controller has never been\n        ran. When it is running or has ran previously it should have (but\n        may not) have useful and/or informational keys and values when\n        running is underway and/or completed.\n\n        .. warning:: The keys in this dictionary **should** be some what\n                     stable (not changing), but there existence **may**\n                     change between major releases as new statistics are\n                     gathered or removed so before accessing keys ensure that\n                     they actually exist and handle when they do not.\n\n        .. note:: The values in this dictionary are local to the thread\n                  running call (so if multiple threads share the same retrying\n                  object - either directly or indirectly) they will each have\n                  there own view of statistics they have collected (in the\n                  future we may provide a way to aggregate the various\n                  statistics from each thread).\n        ')), Try(body=[Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_local', ctx=Load()), attr='statistics', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Assign(targets=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_local', ctx=Load()), attr='statistics', ctx=Store())], value=Call(func=Attribute(value=Name(id='t', ctx=Load()), attr='cast', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())], ctx=Load()), ctx=Load()), Dict(keys=[], values=[])], keywords=[])), Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_local', ctx=Load()), attr='statistics', ctx=Load()))])], orelse=[], finalbody=[])], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='wraps', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='f', annotation=Name(id='WrappedFn', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Wrap a function for retrying.\n\n        :param f: A function to wraps for retrying.\n        ')), FunctionDef(name='wrapped_f', args=arguments(posonlyargs=[], args=[], vararg=arg(arg='args', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kw', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), defaults=[]), body=[Return(value=Call(func=Name(id='self', ctx=Load()), args=[Name(id='f', ctx=Load()), Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kw', ctx=Load()))]))], decorator_list=[Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='wraps', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[])], returns=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), FunctionDef(name='retry_with', args=arguments(posonlyargs=[], args=[], vararg=arg(arg='args', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), defaults=[]), body=[Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='copy', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]), attr='wraps', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='WrappedFn', ctx=Load())), Assign(targets=[Attribute(value=Name(id='wrapped_f', ctx=Load()), attr='retry', ctx=Store())], value=Name(id='self', ctx=Load())), Assign(targets=[Attribute(value=Name(id='wrapped_f', ctx=Load()), attr='retry_with', ctx=Store())], value=Name(id='retry_with', ctx=Load())), Return(value=Name(id='wrapped_f', ctx=Load()))], decorator_list=[], returns=Name(id='WrappedFn', ctx=Load())), FunctionDef(name='begin', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='statistics', ctx=Load()), attr='clear', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='statistics', ctx=Load()), slice=Constant(value='start_time'), ctx=Store())], value=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='monotonic', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='statistics', ctx=Load()), slice=Constant(value='attempt_number'), ctx=Store())], value=Constant(value=1)), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='statistics', ctx=Load()), slice=Constant(value='idle_for'), ctx=Store())], value=Constant(value=0))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='iter', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='retry_state', annotation=Constant(value='RetryCallState'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='fut', ctx=Store())], value=Attribute(value=Name(id='retry_state', ctx=Load()), attr='outcome', ctx=Load())), If(test=Compare(left=Name(id='fut', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='before', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='before', ctx=Load()), args=[Name(id='retry_state', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='DoAttempt', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='is_explicit_retry', ctx=Store())], value=BoolOp(op=And(), values=[Attribute(value=Name(id='fut', ctx=Load()), attr='failed', ctx=Load()), Call(func=Name(id='isinstance', ctx=Load()), args=[Call(func=Attribute(value=Name(id='fut', ctx=Load()), attr='exception', ctx=Load()), args=[], keywords=[]), Name(id='TryAgain', ctx=Load())], keywords=[])])), If(test=UnaryOp(op=Not(), operand=BoolOp(op=Or(), values=[Name(id='is_explicit_retry', ctx=Load()), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='retry', ctx=Load()), args=[Name(id='retry_state', ctx=Load())], keywords=[])])), body=[Return(value=Call(func=Attribute(value=Name(id='fut', ctx=Load()), attr='result', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='after', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='after', ctx=Load()), args=[Name(id='retry_state', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='statistics', ctx=Load()), slice=Constant(value='delay_since_first_attempt'), ctx=Store())], value=Attribute(value=Name(id='retry_state', ctx=Load()), attr='seconds_since_start', ctx=Load())), If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='stop', ctx=Load()), args=[Name(id='retry_state', ctx=Load())], keywords=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='retry_error_callback', ctx=Load()), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='retry_error_callback', ctx=Load()), args=[Name(id='retry_state', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='retry_exc', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='retry_error_cls', ctx=Load()), args=[Name(id='fut', ctx=Load())], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='reraise', ctx=Load()), body=[Raise(exc=Call(func=Attribute(value=Name(id='retry_exc', ctx=Load()), attr='reraise', ctx=Load()), args=[], keywords=[]))], orelse=[]), Raise(exc=Name(id='retry_exc', ctx=Load()), cause=Call(func=Attribute(value=Name(id='fut', ctx=Load()), attr='exception', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='wait', ctx=Load()), body=[Assign(targets=[Name(id='sleep', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='wait', ctx=Load()), args=[Name(id='retry_state', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='sleep', ctx=Store())], value=Constant(value=0.0))]), Assign(targets=[Attribute(value=Name(id='retry_state', ctx=Load()), attr='next_action', ctx=Store())], value=Call(func=Name(id='RetryAction', ctx=Load()), args=[Name(id='sleep', ctx=Load())], keywords=[])), AugAssign(target=Attribute(value=Name(id='retry_state', ctx=Load()), attr='idle_for', ctx=Store()), op=Add(), value=Name(id='sleep', ctx=Load())), AugAssign(target=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='statistics', ctx=Load()), slice=Constant(value='idle_for'), ctx=Store()), op=Add(), value=Name(id='sleep', ctx=Load())), AugAssign(target=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='statistics', ctx=Load()), slice=Constant(value='attempt_number'), ctx=Store()), op=Add(), value=Constant(value=1)), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='before_sleep', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='before_sleep', ctx=Load()), args=[Name(id='retry_state', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='DoSleep', ctx=Load()), args=[Name(id='sleep', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Union', ctx=Load()), slice=Tuple(elts=[Name(id='DoAttempt', ctx=Load()), Name(id='DoSleep', ctx=Load()), Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='__iter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='begin', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='retry_state', ctx=Store())], value=Call(func=Name(id='RetryCallState', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[keyword(arg='fn', value=Constant(value=None)), keyword(arg='args', value=Tuple(elts=[], ctx=Load())), keyword(arg='kwargs', value=Dict(keys=[], values=[]))])), While(test=Constant(value=True), body=[Assign(targets=[Name(id='do', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='iter', ctx=Load()), args=[], keywords=[keyword(arg='retry_state', value=Name(id='retry_state', ctx=Load()))])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='do', ctx=Load()), Name(id='DoAttempt', ctx=Load())], keywords=[]), body=[Expr(value=Yield(value=Call(func=Name(id='AttemptManager', ctx=Load()), args=[], keywords=[keyword(arg='retry_state', value=Name(id='retry_state', ctx=Load()))])))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='do', ctx=Load()), Name(id='DoSleep', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='retry_state', ctx=Load()), attr='prepare_for_next_attempt', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='sleep', ctx=Load()), args=[Name(id='do', ctx=Load())], keywords=[]))], orelse=[Break()])])], orelse=[])], decorator_list=[], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Generator', ctx=Load()), slice=Tuple(elts=[Name(id='AttemptManager', ctx=Load()), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='__call__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='fn', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Callable', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Name(id='WrappedFnReturnT', ctx=Load())], ctx=Load()), ctx=Load()))], vararg=arg(arg='args', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), defaults=[]), body=[Pass()], decorator_list=[Name(id='abstractmethod', ctx=Load())], returns=Name(id='WrappedFnReturnT', ctx=Load()))], decorator_list=[]), ClassDef(name='Retrying', bases=[Name(id='BaseRetrying', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Retrying controller.')), FunctionDef(name='__call__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='fn', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Callable', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Name(id='WrappedFnReturnT', ctx=Load())], ctx=Load()), ctx=Load()))], vararg=arg(arg='args', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='begin', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='retry_state', ctx=Store())], value=Call(func=Name(id='RetryCallState', ctx=Load()), args=[], keywords=[keyword(arg='retry_object', value=Name(id='self', ctx=Load())), keyword(arg='fn', value=Name(id='fn', ctx=Load())), keyword(arg='args', value=Name(id='args', ctx=Load())), keyword(arg='kwargs', value=Name(id='kwargs', ctx=Load()))])), While(test=Constant(value=True), body=[Assign(targets=[Name(id='do', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='iter', ctx=Load()), args=[], keywords=[keyword(arg='retry_state', value=Name(id='retry_state', ctx=Load()))])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='do', ctx=Load()), Name(id='DoAttempt', ctx=Load())], keywords=[]), body=[Try(body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='fn', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], handlers=[ExceptHandler(type=Name(id='BaseException', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='retry_state', ctx=Load()), attr='set_exception', ctx=Load()), args=[Call(func=Attribute(value=Name(id='sys', ctx=Load()), attr='exc_info', ctx=Load()), args=[], keywords=[])], keywords=[]))])], orelse=[Expr(value=Call(func=Attribute(value=Name(id='retry_state', ctx=Load()), attr='set_result', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[]))], finalbody=[])], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='do', ctx=Load()), Name(id='DoSleep', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='retry_state', ctx=Load()), attr='prepare_for_next_attempt', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='sleep', ctx=Load()), args=[Name(id='do', ctx=Load())], keywords=[]))], orelse=[Return(value=Name(id='do', ctx=Load()))])])], orelse=[])], decorator_list=[], returns=Name(id='WrappedFnReturnT', ctx=Load()))], decorator_list=[]), If(test=Compare(left=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), slice=Constant(value=1), ctx=Load()), ops=[GtE()], comparators=[Constant(value=9)]), body=[Assign(targets=[Name(id='FutureGenericT', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='futures', ctx=Load()), attr='Future', ctx=Load()), slice=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()), ctx=Load()))], orelse=[Assign(targets=[Name(id='FutureGenericT', ctx=Store())], value=Attribute(value=Name(id='futures', ctx=Load()), attr='Future', ctx=Load()))]), ClassDef(name='Future', bases=[Name(id='FutureGenericT', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Encapsulates a (future or past) attempted call to a target function.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='attempt_number', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='attempt_number', ctx=Store())], value=Name(id='attempt_number', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='failed', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return whether a exception is being held in this future.')), Return(value=Compare(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='exception', ctx=Load()), args=[], keywords=[]), ops=[IsNot()], comparators=[Constant(value=None)]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='construct', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='attempt_number', annotation=Name(id='int', ctx=Load())), arg(arg='value', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), arg(arg='has_exception', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Construct a new Future object.')), Assign(targets=[Name(id='fut', ctx=Store())], value=Call(func=Name(id='cls', ctx=Load()), args=[Name(id='attempt_number', ctx=Load())], keywords=[])), If(test=Name(id='has_exception', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='fut', ctx=Load()), attr='set_exception', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='fut', ctx=Load()), attr='set_result', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))]), Return(value=Name(id='fut', ctx=Load()))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Constant(value='Future'))], decorator_list=[]), ClassDef(name='RetryCallState', bases=[], keywords=[], body=[Expr(value=Constant(value='State related to a single call wrapped with Retrying.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='retry_object', annotation=Name(id='BaseRetrying', ctx=Load())), arg(arg='fn', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='WrappedFn', ctx=Load()), ctx=Load())), arg(arg='args', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), arg(arg='kwargs', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='start_time', ctx=Store())], value=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='monotonic', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='retry_object', ctx=Store())], value=Name(id='retry_object', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='fn', ctx=Store())], value=Name(id='fn', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='args', ctx=Store())], value=Name(id='args', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='kwargs', ctx=Store())], value=Name(id='kwargs', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='attempt_number', ctx=Store()), annotation=Name(id='int', ctx=Load()), value=Constant(value=1), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='outcome', ctx=Store()), annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='Future', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='outcome_timestamp', ctx=Store()), annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='idle_for', ctx=Store()), annotation=Name(id='float', ctx=Load()), value=Constant(value=0.0), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='next_action', ctx=Store()), annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='RetryAction', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0)], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='seconds_since_start', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='outcome_timestamp', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=None))], orelse=[]), Return(value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='outcome_timestamp', ctx=Load()), op=Sub(), right=Attribute(value=Name(id='self', ctx=Load()), attr='start_time', ctx=Load())))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load())), FunctionDef(name='prepare_for_next_attempt', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='outcome', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='outcome_timestamp', ctx=Store())], value=Constant(value=None)), AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='attempt_number', ctx=Store()), op=Add(), value=Constant(value=1)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='next_action', ctx=Store())], value=Constant(value=None))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='set_result', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='val', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='monotonic', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='fut', ctx=Store())], value=Call(func=Name(id='Future', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='attempt_number', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='fut', ctx=Load()), attr='set_result', ctx=Load()), args=[Name(id='val', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='outcome', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='outcome_timestamp', ctx=Store())], ctx=Store())], value=Tuple(elts=[Name(id='fut', ctx=Load()), Name(id='ts', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='set_exception', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='exc_info', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Type', ctx=Load()), slice=Name(id='BaseException', ctx=Load()), ctx=Load()), Name(id='BaseException', ctx=Load()), Constant(value='types.TracebackType| None')], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ts', ctx=Store())], value=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='monotonic', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='fut', ctx=Store())], value=Call(func=Name(id='Future', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='attempt_number', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='fut', ctx=Load()), attr='set_exception', ctx=Load()), args=[Subscript(value=Name(id='exc_info', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='outcome', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='outcome_timestamp', ctx=Store())], ctx=Store())], value=Tuple(elts=[Name(id='fut', ctx=Load()), Name(id='ts', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='outcome', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Constant(value='none yet'))], orelse=[If(test=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='outcome', ctx=Load()), attr='failed', ctx=Load()), body=[Assign(targets=[Name(id='exception', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='outcome', ctx=Load()), attr='exception', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='result', ctx=Store())], value=JoinedStr(values=[Constant(value='failed ('), FormattedValue(value=Attribute(value=Attribute(value=Name(id='exception', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), conversion=-1), Constant(value=' '), FormattedValue(value=Name(id='exception', ctx=Load()), conversion=-1), Constant(value=')')]))], orelse=[Assign(targets=[Name(id='result', ctx=Store())], value=JoinedStr(values=[Constant(value='returned '), FormattedValue(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='outcome', ctx=Load()), attr='result', ctx=Load()), args=[], keywords=[]), conversion=-1)]))])]), Assign(targets=[Name(id='slept', ctx=Store())], value=Call(func=Name(id='float', ctx=Load()), args=[Call(func=Name(id='round', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='idle_for', ctx=Load()), Constant(value=2)], keywords=[])], keywords=[])), Assign(targets=[Name(id='clsname', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load())), Return(value=JoinedStr(values=[Constant(value='<'), FormattedValue(value=Name(id='clsname', ctx=Load()), conversion=-1), Constant(value=' '), FormattedValue(value=Call(func=Name(id='id', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), conversion=-1), Constant(value=': attempt #'), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='attempt_number', ctx=Load()), conversion=-1), Constant(value='; slept for '), FormattedValue(value=Name(id='slept', ctx=Load()), conversion=-1), Constant(value='; last result: '), FormattedValue(value=Name(id='result', ctx=Load()), conversion=-1), Constant(value='>')]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[]), FunctionDef(name='retry', args=arguments(posonlyargs=[], args=[arg(arg='func', annotation=Name(id='WrappedFn', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=Ellipsis))], decorator_list=[Attribute(value=Name(id='t', ctx=Load()), attr='overload', ctx=Load())], returns=Name(id='WrappedFn', ctx=Load())), FunctionDef(name='retry', args=arguments(posonlyargs=[], args=[arg(arg='sleep', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Union', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load())), arg(arg='stop', annotation=Constant(value='StopBaseT')), arg(arg='wait', annotation=Constant(value='WaitBaseT')), arg(arg='retry', annotation=Constant(value='RetryBaseT')), arg(arg='before', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Constant(value='RetryCallState')], ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load())), arg(arg='after', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Constant(value='RetryCallState')], ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load())), arg(arg='before_sleep', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Constant(value='RetryCallState')], ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='reraise', annotation=Name(id='bool', ctx=Load())), arg(arg='retry_error_cls', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Type', ctx=Load()), slice=Constant(value='RetryError'), ctx=Load())), arg(arg='retry_error_callback', annotation=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Optional', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Constant(value='RetryCallState')], ctx=Load()), Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='sleep', ctx=Load()), Name(id='stop_never', ctx=Load()), Call(func=Name(id='wait_none', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='retry_if_exception_type', ctx=Load()), args=[], keywords=[]), Name(id='before_nothing', ctx=Load()), Name(id='after_nothing', ctx=Load()), Constant(value=None), Constant(value=False), Name(id='RetryError', ctx=Load()), Constant(value=None)]), body=[Expr(value=Constant(value=Ellipsis))], decorator_list=[Attribute(value=Name(id='t', ctx=Load()), attr='overload', ctx=Load())], returns=Subscript(value=Attribute(value=Name(id='t', ctx=Load()), attr='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='WrappedFn', ctx=Load())], ctx=Load()), Name(id='WrappedFn', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='retry', args=arguments(posonlyargs=[], args=[], vararg=arg(arg='dargs', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='dkw', annotation=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), defaults=[]), body=[Expr(value=Constant(value='Wrap a function with a new `Retrying` object.\n\n    :param dargs: positional arguments passed to Retrying object\n    :param dkw: keyword arguments passed to the Retrying object\n    ')), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='dargs', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), Call(func=Name(id='callable', ctx=Load()), args=[Subscript(value=Name(id='dargs', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])]), body=[Return(value=Call(func=Call(func=Name(id='retry', ctx=Load()), args=[], keywords=[]), args=[Subscript(value=Name(id='dargs', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], orelse=[FunctionDef(name='wrap', args=arguments(posonlyargs=[], args=[arg(arg='f', annotation=Name(id='WrappedFn', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='f', ctx=Load()), Name(id='retry_base', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[JoinedStr(values=[Constant(value='Got retry_base instance ('), FormattedValue(value=Attribute(value=Attribute(value=Name(id='f', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), conversion=-1), Constant(value=') as callable argument, this will probably hang indefinitely (did you mean retry='), FormattedValue(value=Attribute(value=Attribute(value=Name(id='f', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), conversion=-1), Constant(value='(...)?)')])], keywords=[]))], orelse=[]), AnnAssign(target=Name(id='r', ctx=Store()), annotation=Constant(value='BaseRetrying'), simple=1), If(test=Call(func=Name(id='iscoroutinefunction', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='r', ctx=Store())], value=Call(func=Name(id='AsyncRetrying', ctx=Load()), args=[Starred(value=Name(id='dargs', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='dkw', ctx=Load()))]))], orelse=[If(test=BoolOp(op=And(), values=[Name(id='tornado', ctx=Load()), Call(func=Name(id='hasattr', ctx=Load()), args=[Attribute(value=Name(id='tornado', ctx=Load()), attr='gen', ctx=Load()), Constant(value='is_coroutine_function')], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='tornado', ctx=Load()), attr='gen', ctx=Load()), attr='is_coroutine_function', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='r', ctx=Store())], value=Call(func=Name(id='TornadoRetrying', ctx=Load()), args=[Starred(value=Name(id='dargs', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='dkw', ctx=Load()))]))], orelse=[Assign(targets=[Name(id='r', ctx=Store())], value=Call(func=Name(id='Retrying', ctx=Load()), args=[Starred(value=Name(id='dargs', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='dkw', ctx=Load()))]))])]), Return(value=Call(func=Attribute(value=Name(id='r', ctx=Load()), attr='wraps', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='WrappedFn', ctx=Load())), Return(value=Name(id='wrap', ctx=Load()))])], decorator_list=[], returns=Attribute(value=Name(id='t', ctx=Load()), attr='Any', ctx=Load())), ImportFrom(module='pip._vendor.tenacity._asyncio', names=[alias(name='AsyncRetrying')], level=0), If(test=Name(id='tornado', ctx=Load()), body=[ImportFrom(module='pip._vendor.tenacity.tornadoweb', names=[alias(name='TornadoRetrying')], level=0)], orelse=[]), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='retry_base'), Constant(value='retry_all'), Constant(value='retry_always'), Constant(value='retry_any'), Constant(value='retry_if_exception'), Constant(value='retry_if_exception_type'), Constant(value='retry_if_exception_cause_type'), Constant(value='retry_if_not_exception_type'), Constant(value='retry_if_not_result'), Constant(value='retry_if_result'), Constant(value='retry_never'), Constant(value='retry_unless_exception_type'), Constant(value='retry_if_exception_message'), Constant(value='retry_if_not_exception_message'), Constant(value='sleep'), Constant(value='sleep_using_event'), Constant(value='stop_after_attempt'), Constant(value='stop_after_delay'), Constant(value='stop_all'), Constant(value='stop_any'), Constant(value='stop_never'), Constant(value='stop_when_event_set'), Constant(value='wait_chain'), Constant(value='wait_combine'), Constant(value='wait_exponential'), Constant(value='wait_fixed'), Constant(value='wait_incrementing'), Constant(value='wait_none'), Constant(value='wait_random'), Constant(value='wait_random_exponential'), Constant(value='wait_full_jitter'), Constant(value='wait_exponential_jitter'), Constant(value='before_log'), Constant(value='before_nothing'), Constant(value='after_log'), Constant(value='after_nothing'), Constant(value='before_sleep_log'), Constant(value='before_sleep_nothing'), Constant(value='retry'), Constant(value='WrappedFn'), Constant(value='TryAgain'), Constant(value='NO_RESULT'), Constant(value='DoAttempt'), Constant(value='DoSleep'), Constant(value='BaseAction'), Constant(value='RetryAction'), Constant(value='RetryError'), Constant(value='AttemptManager'), Constant(value='BaseRetrying'), Constant(value='Retrying'), Constant(value='Future'), Constant(value='RetryCallState'), Constant(value='AsyncRetrying')], ctx=Load()))], type_ignores=[])