Module(body=[ClassDef(name='BaseReporter', bases=[Name(id='object', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Delegate class to provider progress reporting for the resolver.')), FunctionDef(name='starting', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Called before the resolution actually starts.'))], decorator_list=[]), FunctionDef(name='starting_round', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='index')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Called before each round of resolution starts.\n\n        The index is zero-based.\n        '))], decorator_list=[]), FunctionDef(name='ending_round', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='index'), arg(arg='state')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Called before each round of resolution ends.\n\n        This is NOT called if the resolution ends at this round. Use `ending`\n        if you want to report finalization. The index is zero-based.\n        '))], decorator_list=[]), FunctionDef(name='ending', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='state')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Called before the resolution ends successfully.'))], decorator_list=[]), FunctionDef(name='adding_requirement', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='requirement'), arg(arg='parent')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Called when adding a new requirement into the resolve criteria.\n\n        :param requirement: The additional requirement to be applied to filter\n            the available candidaites.\n        :param parent: The candidate that requires ``requirement`` as a\n            dependency, or None if ``requirement`` is one of the root\n            requirements passed in from ``Resolver.resolve()``.\n        '))], decorator_list=[]), FunctionDef(name='resolving_conflicts', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='causes')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Called when starting to attempt requirement conflict resolution.\n\n        :param causes: The information on the collision that caused the backtracking.\n        '))], decorator_list=[]), FunctionDef(name='rejecting_candidate', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='criterion'), arg(arg='candidate')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Called when rejecting a candidate during backtracking.'))], decorator_list=[]), FunctionDef(name='pinning', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='candidate')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Called when adding a candidate to the potential solution.'))], decorator_list=[])], decorator_list=[])], type_ignores=[])