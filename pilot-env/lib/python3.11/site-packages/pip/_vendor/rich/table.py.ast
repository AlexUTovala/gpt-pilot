Module(body=[ImportFrom(module='dataclasses', names=[alias(name='dataclass'), alias(name='field'), alias(name='replace')], level=0), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING'), alias(name='Dict'), alias(name='Iterable'), alias(name='List'), alias(name='NamedTuple'), alias(name='Optional'), alias(name='Sequence'), alias(name='Tuple'), alias(name='Union')], level=0), ImportFrom(names=[alias(name='box'), alias(name='errors')], level=1), ImportFrom(module='_loop', names=[alias(name='loop_first_last'), alias(name='loop_last')], level=1), ImportFrom(module='_pick', names=[alias(name='pick_bool')], level=1), ImportFrom(module='_ratio', names=[alias(name='ratio_distribute'), alias(name='ratio_reduce')], level=1), ImportFrom(module='align', names=[alias(name='VerticalAlignMethod')], level=1), ImportFrom(module='jupyter', names=[alias(name='JupyterMixin')], level=1), ImportFrom(module='measure', names=[alias(name='Measurement')], level=1), ImportFrom(module='padding', names=[alias(name='Padding'), alias(name='PaddingDimensions')], level=1), ImportFrom(module='protocol', names=[alias(name='is_renderable')], level=1), ImportFrom(module='segment', names=[alias(name='Segment')], level=1), ImportFrom(module='style', names=[alias(name='Style'), alias(name='StyleType')], level=1), ImportFrom(module='text', names=[alias(name='Text'), alias(name='TextType')], level=1), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='console', names=[alias(name='Console'), alias(name='ConsoleOptions'), alias(name='JustifyMethod'), alias(name='OverflowMethod'), alias(name='RenderableType'), alias(name='RenderResult')], level=1)], orelse=[]), ClassDef(name='Column', bases=[], keywords=[], body=[Expr(value=Constant(value='Defines a column within a ~Table.\n\n    Args:\n        title (Union[str, Text], optional): The title of the table rendered at the top. Defaults to None.\n        caption (Union[str, Text], optional): The table caption rendered below. Defaults to None.\n        width (int, optional): The width in characters of the table, or ``None`` to automatically fit. Defaults to None.\n        min_width (Optional[int], optional): The minimum width of the table, or ``None`` for no minimum. Defaults to None.\n        box (box.Box, optional): One of the constants in box.py used to draw the edges (see :ref:`appendix_box`), or ``None`` for no box lines. Defaults to box.HEAVY_HEAD.\n        safe_box (Optional[bool], optional): Disable box characters that don\'t display on windows legacy terminal with *raster* fonts. Defaults to True.\n        padding (PaddingDimensions, optional): Padding for cells (top, right, bottom, left). Defaults to (0, 1).\n        collapse_padding (bool, optional): Enable collapsing of padding around cells. Defaults to False.\n        pad_edge (bool, optional): Enable padding of edge cells. Defaults to True.\n        expand (bool, optional): Expand the table to fit the available space if ``True``, otherwise the table width will be auto-calculated. Defaults to False.\n        show_header (bool, optional): Show a header row. Defaults to True.\n        show_footer (bool, optional): Show a footer row. Defaults to False.\n        show_edge (bool, optional): Draw a box around the outside of the table. Defaults to True.\n        show_lines (bool, optional): Draw lines between every row. Defaults to False.\n        leading (bool, optional): Number of blank lines between rows (precludes ``show_lines``). Defaults to 0.\n        style (Union[str, Style], optional): Default style for the table. Defaults to "none".\n        row_styles (List[Union, str], optional): Optional list of row styles, if more than one style is given then the styles will alternate. Defaults to None.\n        header_style (Union[str, Style], optional): Style of the header. Defaults to "table.header".\n        footer_style (Union[str, Style], optional): Style of the footer. Defaults to "table.footer".\n        border_style (Union[str, Style], optional): Style of the border. Defaults to None.\n        title_style (Union[str, Style], optional): Style of the title. Defaults to None.\n        caption_style (Union[str, Style], optional): Style of the caption. Defaults to None.\n        title_justify (str, optional): Justify method for title. Defaults to "center".\n        caption_justify (str, optional): Justify method for caption. Defaults to "center".\n        highlight (bool, optional): Highlight cell contents (if str). Defaults to False.\n    ')), AnnAssign(target=Name(id='header', ctx=Store()), annotation=Constant(value='RenderableType'), value=Constant(value=''), simple=1), Expr(value=Constant(value='RenderableType: Renderable for the header (typically a string)')), AnnAssign(target=Name(id='footer', ctx=Store()), annotation=Constant(value='RenderableType'), value=Constant(value=''), simple=1), Expr(value=Constant(value='RenderableType: Renderable for the footer (typically a string)')), AnnAssign(target=Name(id='header_style', ctx=Store()), annotation=Name(id='StyleType', ctx=Load()), value=Constant(value=''), simple=1), Expr(value=Constant(value='StyleType: The style of the header.')), AnnAssign(target=Name(id='footer_style', ctx=Store()), annotation=Name(id='StyleType', ctx=Load()), value=Constant(value=''), simple=1), Expr(value=Constant(value='StyleType: The style of the footer.')), AnnAssign(target=Name(id='style', ctx=Store()), annotation=Name(id='StyleType', ctx=Load()), value=Constant(value=''), simple=1), Expr(value=Constant(value='StyleType: The style of the column.')), AnnAssign(target=Name(id='justify', ctx=Store()), annotation=Constant(value='JustifyMethod'), value=Constant(value='left'), simple=1), Expr(value=Constant(value='str: How to justify text within the column ("left", "center", "right", or "full")')), AnnAssign(target=Name(id='vertical', ctx=Store()), annotation=Constant(value='VerticalAlignMethod'), value=Constant(value='top'), simple=1), Expr(value=Constant(value='str: How to vertically align content ("top", "middle", or "bottom")')), AnnAssign(target=Name(id='overflow', ctx=Store()), annotation=Constant(value='OverflowMethod'), value=Constant(value='ellipsis'), simple=1), Expr(value=Constant(value='str: Overflow method.')), AnnAssign(target=Name(id='width', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=1), Expr(value=Constant(value='Optional[int]: Width of the column, or ``None`` (default) to auto calculate width.')), AnnAssign(target=Name(id='min_width', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=1), Expr(value=Constant(value='Optional[int]: Minimum width of column, or ``None`` for no minimum. Defaults to None.')), AnnAssign(target=Name(id='max_width', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=1), Expr(value=Constant(value='Optional[int]: Maximum width of column, or ``None`` for no maximum. Defaults to None.')), AnnAssign(target=Name(id='ratio', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=1), Expr(value=Constant(value='Optional[int]: Ratio to use when calculating column width, or ``None`` (default) to adapt to column contents.')), AnnAssign(target=Name(id='no_wrap', ctx=Store()), annotation=Name(id='bool', ctx=Load()), value=Constant(value=False), simple=1), Expr(value=Constant(value='bool: Prevent wrapping of text within the column. Defaults to ``False``.')), AnnAssign(target=Name(id='_index', ctx=Store()), annotation=Name(id='int', ctx=Load()), value=Constant(value=0), simple=1), Expr(value=Constant(value='Index of column.')), AnnAssign(target=Name(id='_cells', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Constant(value='RenderableType'), ctx=Load()), value=Call(func=Name(id='field', ctx=Load()), args=[], keywords=[keyword(arg='default_factory', value=Name(id='list', ctx=Load()))]), simple=1), FunctionDef(name='copy', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return a copy of this Column.')), Return(value=Call(func=Name(id='replace', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[keyword(arg='_cells', value=List(elts=[], ctx=Load()))]))], decorator_list=[], returns=Constant(value='Column')), FunctionDef(name='cells', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get all cells in the column, not including header.')), Expr(value=YieldFrom(value=Attribute(value=Name(id='self', ctx=Load()), attr='_cells', ctx=Load())))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Constant(value='RenderableType'), ctx=Load())), FunctionDef(name='flexible', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check if this column is flexible.')), Return(value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='ratio', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load()))], decorator_list=[Name(id='dataclass', ctx=Load())]), ClassDef(name='Row', bases=[], keywords=[], body=[Expr(value=Constant(value='Information regarding a row.')), AnnAssign(target=Name(id='style', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='StyleType', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=1), Expr(value=Constant(value='Style to apply to row.')), AnnAssign(target=Name(id='end_section', ctx=Store()), annotation=Name(id='bool', ctx=Load()), value=Constant(value=False), simple=1), Expr(value=Constant(value='Indicated end of section, which will force a line beneath the row.'))], decorator_list=[Name(id='dataclass', ctx=Load())]), ClassDef(name='_Cell', bases=[Name(id='NamedTuple', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A single cell in a table.')), AnnAssign(target=Name(id='style', ctx=Store()), annotation=Name(id='StyleType', ctx=Load()), simple=1), Expr(value=Constant(value='Style to apply to cell.')), AnnAssign(target=Name(id='renderable', ctx=Store()), annotation=Constant(value='RenderableType'), simple=1), Expr(value=Constant(value='Cell renderable.')), AnnAssign(target=Name(id='vertical', ctx=Store()), annotation=Name(id='VerticalAlignMethod', ctx=Load()), simple=1), Expr(value=Constant(value='Cell vertical alignment.'))], decorator_list=[]), ClassDef(name='Table', bases=[Name(id='JupyterMixin', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A console renderable to draw a table.\n\n    Args:\n        *headers (Union[Column, str]): Column headers, either as a string, or :class:`~rich.table.Column` instance.\n        title (Union[str, Text], optional): The title of the table rendered at the top. Defaults to None.\n        caption (Union[str, Text], optional): The table caption rendered below. Defaults to None.\n        width (int, optional): The width in characters of the table, or ``None`` to automatically fit. Defaults to None.\n        min_width (Optional[int], optional): The minimum width of the table, or ``None`` for no minimum. Defaults to None.\n        box (box.Box, optional): One of the constants in box.py used to draw the edges (see :ref:`appendix_box`), or ``None`` for no box lines. Defaults to box.HEAVY_HEAD.\n        safe_box (Optional[bool], optional): Disable box characters that don\'t display on windows legacy terminal with *raster* fonts. Defaults to True.\n        padding (PaddingDimensions, optional): Padding for cells (top, right, bottom, left). Defaults to (0, 1).\n        collapse_padding (bool, optional): Enable collapsing of padding around cells. Defaults to False.\n        pad_edge (bool, optional): Enable padding of edge cells. Defaults to True.\n        expand (bool, optional): Expand the table to fit the available space if ``True``, otherwise the table width will be auto-calculated. Defaults to False.\n        show_header (bool, optional): Show a header row. Defaults to True.\n        show_footer (bool, optional): Show a footer row. Defaults to False.\n        show_edge (bool, optional): Draw a box around the outside of the table. Defaults to True.\n        show_lines (bool, optional): Draw lines between every row. Defaults to False.\n        leading (bool, optional): Number of blank lines between rows (precludes ``show_lines``). Defaults to 0.\n        style (Union[str, Style], optional): Default style for the table. Defaults to "none".\n        row_styles (List[Union, str], optional): Optional list of row styles, if more than one style is given then the styles will alternate. Defaults to None.\n        header_style (Union[str, Style], optional): Style of the header. Defaults to "table.header".\n        footer_style (Union[str, Style], optional): Style of the footer. Defaults to "table.footer".\n        border_style (Union[str, Style], optional): Style of the border. Defaults to None.\n        title_style (Union[str, Style], optional): Style of the title. Defaults to None.\n        caption_style (Union[str, Style], optional): Style of the caption. Defaults to None.\n        title_justify (str, optional): Justify method for title. Defaults to "center".\n        caption_justify (str, optional): Justify method for caption. Defaults to "center".\n        highlight (bool, optional): Highlight cell contents (if str). Defaults to False.\n    ')), AnnAssign(target=Name(id='columns', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Column', ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='rows', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Row', ctx=Load()), ctx=Load()), simple=1), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='headers', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='Column', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), kwonlyargs=[arg(arg='title', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TextType', ctx=Load()), ctx=Load())), arg(arg='caption', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TextType', ctx=Load()), ctx=Load())), arg(arg='width', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='min_width', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='box', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Attribute(value=Name(id='box', ctx=Load()), attr='Box', ctx=Load()), ctx=Load())), arg(arg='safe_box', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load())), arg(arg='padding', annotation=Name(id='PaddingDimensions', ctx=Load())), arg(arg='collapse_padding', annotation=Name(id='bool', ctx=Load())), arg(arg='pad_edge', annotation=Name(id='bool', ctx=Load())), arg(arg='expand', annotation=Name(id='bool', ctx=Load())), arg(arg='show_header', annotation=Name(id='bool', ctx=Load())), arg(arg='show_footer', annotation=Name(id='bool', ctx=Load())), arg(arg='show_edge', annotation=Name(id='bool', ctx=Load())), arg(arg='show_lines', annotation=Name(id='bool', ctx=Load())), arg(arg='leading', annotation=Name(id='int', ctx=Load())), arg(arg='style', annotation=Name(id='StyleType', ctx=Load())), arg(arg='row_styles', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='StyleType', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='header_style', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='StyleType', ctx=Load()), ctx=Load())), arg(arg='footer_style', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='StyleType', ctx=Load()), ctx=Load())), arg(arg='border_style', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='StyleType', ctx=Load()), ctx=Load())), arg(arg='title_style', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='StyleType', ctx=Load()), ctx=Load())), arg(arg='caption_style', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='StyleType', ctx=Load()), ctx=Load())), arg(arg='title_justify', annotation=Constant(value='JustifyMethod')), arg(arg='caption_justify', annotation=Constant(value='JustifyMethod')), arg(arg='highlight', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Attribute(value=Name(id='box', ctx=Load()), attr='HEAVY_HEAD', ctx=Load()), Constant(value=None), Tuple(elts=[Constant(value=0), Constant(value=1)], ctx=Load()), Constant(value=False), Constant(value=True), Constant(value=False), Constant(value=True), Constant(value=False), Constant(value=True), Constant(value=False), Constant(value=0), Constant(value='none'), Constant(value=None), Constant(value='table.header'), Constant(value='table.footer'), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value='center'), Constant(value='center'), Constant(value=False)], defaults=[]), body=[AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='columns', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Column', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='rows', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Row', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='title', ctx=Store())], value=Name(id='title', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='caption', ctx=Store())], value=Name(id='caption', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='width', ctx=Store())], value=Name(id='width', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='min_width', ctx=Store())], value=Name(id='min_width', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='box', ctx=Store())], value=Name(id='box', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='safe_box', ctx=Store())], value=Name(id='safe_box', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_padding', ctx=Store())], value=Call(func=Attribute(value=Name(id='Padding', ctx=Load()), attr='unpack', ctx=Load()), args=[Name(id='padding', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='pad_edge', ctx=Store())], value=Name(id='pad_edge', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_expand', ctx=Store())], value=Name(id='expand', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='show_header', ctx=Store())], value=Name(id='show_header', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='show_footer', ctx=Store())], value=Name(id='show_footer', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='show_edge', ctx=Store())], value=Name(id='show_edge', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='show_lines', ctx=Store())], value=Name(id='show_lines', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='leading', ctx=Store())], value=Name(id='leading', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='collapse_padding', ctx=Store())], value=Name(id='collapse_padding', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Store())], value=Name(id='style', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='header_style', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='header_style', ctx=Load()), Constant(value='')])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='footer_style', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='footer_style', ctx=Load()), Constant(value='')])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='border_style', ctx=Store())], value=Name(id='border_style', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='title_style', ctx=Store())], value=Name(id='title_style', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='caption_style', ctx=Store())], value=Name(id='caption_style', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='title_justify', ctx=Store()), annotation=Constant(value='JustifyMethod'), value=Name(id='title_justify', ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='caption_justify', ctx=Store()), annotation=Constant(value='JustifyMethod'), value=Name(id='caption_justify', ctx=Load()), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='highlight', ctx=Store())], value=Name(id='highlight', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='row_styles', ctx=Store()), annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='StyleType', ctx=Load()), ctx=Load()), value=Call(func=Name(id='list', ctx=Load()), args=[BoolOp(op=Or(), values=[Name(id='row_styles', ctx=Load()), List(elts=[], ctx=Load())])], keywords=[]), simple=0), Assign(targets=[Name(id='append_column', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='columns', ctx=Load()), attr='append', ctx=Load())), For(target=Name(id='header', ctx=Store()), iter=Name(id='headers', ctx=Load()), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='header', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='add_column', ctx=Load()), args=[], keywords=[keyword(arg='header', value=Name(id='header', ctx=Load()))]))], orelse=[Assign(targets=[Attribute(value=Name(id='header', ctx=Load()), attr='_index', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='columns', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='append_column', ctx=Load()), args=[Name(id='header', ctx=Load())], keywords=[]))])], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='grid', args=arguments(posonlyargs=[], args=[arg(arg='cls')], vararg=arg(arg='headers', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='Column', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), kwonlyargs=[arg(arg='padding', annotation=Name(id='PaddingDimensions', ctx=Load())), arg(arg='collapse_padding', annotation=Name(id='bool', ctx=Load())), arg(arg='pad_edge', annotation=Name(id='bool', ctx=Load())), arg(arg='expand', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=0), Constant(value=True), Constant(value=False), Constant(value=False)], defaults=[]), body=[Expr(value=Constant(value='Get a table with no lines, headers, or footer.\n\n        Args:\n            *headers (Union[Column, str]): Column headers, either as a string, or :class:`~rich.table.Column` instance.\n            padding (PaddingDimensions, optional): Get padding around cells. Defaults to 0.\n            collapse_padding (bool, optional): Enable collapsing of padding around cells. Defaults to True.\n            pad_edge (bool, optional): Enable padding around edges of table. Defaults to False.\n            expand (bool, optional): Expand the table to fit the available space if ``True``, otherwise the table width will be auto-calculated. Defaults to False.\n\n        Returns:\n            Table: A table instance.\n        ')), Return(value=Call(func=Name(id='cls', ctx=Load()), args=[Starred(value=Name(id='headers', ctx=Load()), ctx=Load())], keywords=[keyword(arg='box', value=Constant(value=None)), keyword(arg='padding', value=Name(id='padding', ctx=Load())), keyword(arg='collapse_padding', value=Name(id='collapse_padding', ctx=Load())), keyword(arg='show_header', value=Constant(value=False)), keyword(arg='show_footer', value=Constant(value=False)), keyword(arg='show_edge', value=Constant(value=False)), keyword(arg='pad_edge', value=Name(id='pad_edge', ctx=Load())), keyword(arg='expand', value=Name(id='expand', ctx=Load()))]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Constant(value='Table')), FunctionDef(name='expand', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Setting a non-None self.width implies expand.')), Return(value=BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='_expand', ctx=Load()), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='width', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='expand', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='expand', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Set expand.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_expand', ctx=Store())], value=Name(id='expand', ctx=Load()))], decorator_list=[Attribute(value=Name(id='expand', ctx=Load()), attr='setter', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='_extra_width', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get extra width to add to cell content.')), Assign(targets=[Name(id='width', ctx=Store())], value=Constant(value=0)), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='box', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='show_edge', ctx=Load())]), body=[AugAssign(target=Name(id='width', ctx=Store()), op=Add(), value=Constant(value=2))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='box', ctx=Load()), body=[AugAssign(target=Name(id='width', ctx=Store()), op=Add(), value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='columns', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1)))], orelse=[]), Return(value=Name(id='width', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load())), FunctionDef(name='row_count', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get the current number of rows.')), Return(value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='rows', ctx=Load())], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load())), FunctionDef(name='get_row_style', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='console', annotation=Constant(value='Console')), arg(arg='index', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get the current row style.')), Assign(targets=[Name(id='style', ctx=Store())], value=Call(func=Attribute(value=Name(id='Style', ctx=Load()), attr='null', ctx=Load()), args=[], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='row_styles', ctx=Load()), body=[AugAssign(target=Name(id='style', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='get_style', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='row_styles', ctx=Load()), slice=BinOp(left=Name(id='index', ctx=Load()), op=Mod(), right=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='row_styles', ctx=Load())], keywords=[])), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='row_style', ctx=Store())], value=Attribute(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='rows', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), attr='style', ctx=Load())), If(test=Compare(left=Name(id='row_style', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[AugAssign(target=Name(id='style', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='get_style', ctx=Load()), args=[Name(id='row_style', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='style', ctx=Load()))], decorator_list=[], returns=Name(id='StyleType', ctx=Load())), FunctionDef(name='__rich_measure__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='console', annotation=Constant(value='Console')), arg(arg='options', annotation=Constant(value='ConsoleOptions'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='max_width', ctx=Store())], value=Attribute(value=Name(id='options', ctx=Load()), attr='max_width', ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='width', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='max_width', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='width', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='max_width', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0)]), body=[Return(value=Call(func=Name(id='Measurement', ctx=Load()), args=[Constant(value=0), Constant(value=0)], keywords=[]))], orelse=[]), Assign(targets=[Name(id='extra_width', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_extra_width', ctx=Load())), Assign(targets=[Name(id='max_width', ctx=Store())], value=Call(func=Name(id='sum', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_calculate_column_widths', ctx=Load()), args=[Name(id='console', ctx=Load()), Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='update_width', ctx=Load()), args=[BinOp(left=Name(id='max_width', ctx=Load()), op=Sub(), right=Name(id='extra_width', ctx=Load()))], keywords=[])], keywords=[])], keywords=[])), Assign(targets=[Name(id='_measure_column', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_measure_column', ctx=Load())), Assign(targets=[Name(id='measurements', ctx=Store())], value=ListComp(elt=Call(func=Name(id='_measure_column', ctx=Load()), args=[Name(id='console', ctx=Load()), Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='update_width', ctx=Load()), args=[Name(id='max_width', ctx=Load())], keywords=[]), Name(id='column', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='column', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='columns', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='minimum_width', ctx=Store())], value=BinOp(left=Call(func=Name(id='sum', ctx=Load()), args=[GeneratorExp(elt=Attribute(value=Name(id='measurement', ctx=Load()), attr='minimum', ctx=Load()), generators=[comprehension(target=Name(id='measurement', ctx=Store()), iter=Name(id='measurements', ctx=Load()), ifs=[], is_async=0)])], keywords=[]), op=Add(), right=Name(id='extra_width', ctx=Load()))), Assign(targets=[Name(id='maximum_width', ctx=Store())], value=IfExp(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='width', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=BinOp(left=Call(func=Name(id='sum', ctx=Load()), args=[GeneratorExp(elt=Attribute(value=Name(id='measurement', ctx=Load()), attr='maximum', ctx=Load()), generators=[comprehension(target=Name(id='measurement', ctx=Store()), iter=Name(id='measurements', ctx=Load()), ifs=[], is_async=0)])], keywords=[]), op=Add(), right=Name(id='extra_width', ctx=Load())), orelse=Attribute(value=Name(id='self', ctx=Load()), attr='width', ctx=Load()))), Assign(targets=[Name(id='measurement', ctx=Store())], value=Call(func=Name(id='Measurement', ctx=Load()), args=[Name(id='minimum_width', ctx=Load()), Name(id='maximum_width', ctx=Load())], keywords=[])), Assign(targets=[Name(id='measurement', ctx=Store())], value=Call(func=Attribute(value=Name(id='measurement', ctx=Load()), attr='clamp', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='min_width', ctx=Load())], keywords=[])), Return(value=Name(id='measurement', ctx=Load()))], decorator_list=[], returns=Name(id='Measurement', ctx=Load())), FunctionDef(name='padding', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get cell padding.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_padding', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load()), Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='padding', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='padding', annotation=Name(id='PaddingDimensions', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Set cell padding.')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_padding', ctx=Store())], value=Call(func=Attribute(value=Name(id='Padding', ctx=Load()), attr='unpack', ctx=Load()), args=[Name(id='padding', ctx=Load())], keywords=[])), Return(value=Name(id='self', ctx=Load()))], decorator_list=[Attribute(value=Name(id='padding', ctx=Load()), attr='setter', ctx=Load())], returns=Constant(value='Table')), FunctionDef(name='add_column', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='header', annotation=Constant(value='RenderableType')), arg(arg='footer', annotation=Constant(value='RenderableType'))], kwonlyargs=[arg(arg='header_style', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='StyleType', ctx=Load()), ctx=Load())), arg(arg='footer_style', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='StyleType', ctx=Load()), ctx=Load())), arg(arg='style', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='StyleType', ctx=Load()), ctx=Load())), arg(arg='justify', annotation=Constant(value='JustifyMethod')), arg(arg='vertical', annotation=Constant(value='VerticalAlignMethod')), arg(arg='overflow', annotation=Constant(value='OverflowMethod')), arg(arg='width', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='min_width', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='max_width', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='ratio', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='no_wrap', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value='left'), Constant(value='top'), Constant(value='ellipsis'), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=False)], defaults=[Constant(value=''), Constant(value='')]), body=[Expr(value=Constant(value='Add a column to the table.\n\n        Args:\n            header (RenderableType, optional): Text or renderable for the header.\n                Defaults to "".\n            footer (RenderableType, optional): Text or renderable for the footer.\n                Defaults to "".\n            header_style (Union[str, Style], optional): Style for the header, or None for default. Defaults to None.\n            footer_style (Union[str, Style], optional): Style for the footer, or None for default. Defaults to None.\n            style (Union[str, Style], optional): Style for the column cells, or None for default. Defaults to None.\n            justify (JustifyMethod, optional): Alignment for cells. Defaults to "left".\n            vertical (VerticalAlignMethod, optional): Vertical alignment, one of "top", "middle", or "bottom". Defaults to "top".\n            overflow (OverflowMethod): Overflow method: "crop", "fold", "ellipsis". Defaults to "ellipsis".\n            width (int, optional): Desired width of column in characters, or None to fit to contents. Defaults to None.\n            min_width (Optional[int], optional): Minimum width of column, or ``None`` for no minimum. Defaults to None.\n            max_width (Optional[int], optional): Maximum width of column, or ``None`` for no maximum. Defaults to None.\n            ratio (int, optional): Flexible ratio for the column (requires ``Table.expand`` or ``Table.width``). Defaults to None.\n            no_wrap (bool, optional): Set to ``True`` to disable wrapping of this column.\n        ')), Assign(targets=[Name(id='column', ctx=Store())], value=Call(func=Name(id='Column', ctx=Load()), args=[], keywords=[keyword(arg='_index', value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='columns', ctx=Load())], keywords=[])), keyword(arg='header', value=Name(id='header', ctx=Load())), keyword(arg='footer', value=Name(id='footer', ctx=Load())), keyword(arg='header_style', value=BoolOp(op=Or(), values=[Name(id='header_style', ctx=Load()), Constant(value='')])), keyword(arg='footer_style', value=BoolOp(op=Or(), values=[Name(id='footer_style', ctx=Load()), Constant(value='')])), keyword(arg='style', value=BoolOp(op=Or(), values=[Name(id='style', ctx=Load()), Constant(value='')])), keyword(arg='justify', value=Name(id='justify', ctx=Load())), keyword(arg='vertical', value=Name(id='vertical', ctx=Load())), keyword(arg='overflow', value=Name(id='overflow', ctx=Load())), keyword(arg='width', value=Name(id='width', ctx=Load())), keyword(arg='min_width', value=Name(id='min_width', ctx=Load())), keyword(arg='max_width', value=Name(id='max_width', ctx=Load())), keyword(arg='ratio', value=Name(id='ratio', ctx=Load())), keyword(arg='no_wrap', value=Name(id='no_wrap', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='columns', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='column', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='add_row', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='renderables', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='RenderableType'), ctx=Load())), kwonlyargs=[arg(arg='style', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='StyleType', ctx=Load()), ctx=Load())), arg(arg='end_section', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=None), Constant(value=False)], defaults=[]), body=[Expr(value=Constant(value="Add a row of renderables.\n\n        Args:\n            *renderables (None or renderable): Each cell in a row must be a renderable object (including str),\n                or ``None`` for a blank cell.\n            style (StyleType, optional): An optional style to apply to the entire row. Defaults to None.\n            end_section (bool, optional): End a section and draw a line. Defaults to False.\n\n        Raises:\n            errors.NotRenderableError: If you add something that can't be rendered.\n        ")), FunctionDef(name='add_cell', args=arguments(posonlyargs=[], args=[arg(arg='column', annotation=Name(id='Column', ctx=Load())), arg(arg='renderable', annotation=Constant(value='RenderableType'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='column', ctx=Load()), attr='_cells', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='renderable', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), AnnAssign(target=Name(id='cell_renderables', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='RenderableType'), ctx=Load()), ctx=Load()), value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='renderables', ctx=Load())], keywords=[]), simple=1), Assign(targets=[Name(id='columns', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='columns', ctx=Load())), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='cell_renderables', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='columns', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='cell_renderables', ctx=Store())], value=List(elts=[Starred(value=Name(id='cell_renderables', ctx=Load()), ctx=Load()), Starred(value=BinOp(left=List(elts=[Constant(value=None)], ctx=Load()), op=Mult(), right=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='columns', ctx=Load())], keywords=[]), op=Sub(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='cell_renderables', ctx=Load())], keywords=[]))), ctx=Load())], ctx=Load()))], orelse=[]), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='renderable', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='cell_renderables', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='index', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='columns', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='column', ctx=Store())], value=Call(func=Name(id='Column', ctx=Load()), args=[], keywords=[keyword(arg='_index', value=Name(id='index', ctx=Load()))])), For(target=Name(id='_', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='rows', ctx=Load()), body=[Expr(value=Call(func=Name(id='add_cell', ctx=Load()), args=[Name(id='column', ctx=Load()), Call(func=Name(id='Text', ctx=Load()), args=[Constant(value='')], keywords=[])], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='columns', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='column', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='column', ctx=Store())], value=Subscript(value=Name(id='columns', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()))]), If(test=Compare(left=Name(id='renderable', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Name(id='add_cell', ctx=Load()), args=[Name(id='column', ctx=Load()), Constant(value='')], keywords=[]))], orelse=[If(test=Call(func=Name(id='is_renderable', ctx=Load()), args=[Name(id='renderable', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Name(id='add_cell', ctx=Load()), args=[Name(id='column', ctx=Load()), Name(id='renderable', ctx=Load())], keywords=[]))], orelse=[Raise(exc=Call(func=Attribute(value=Name(id='errors', ctx=Load()), attr='NotRenderableError', ctx=Load()), args=[JoinedStr(values=[Constant(value='unable to render '), FormattedValue(value=Attribute(value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='renderable', ctx=Load())], keywords=[]), attr='__name__', ctx=Load()), conversion=-1), Constant(value='; a string or other renderable object is required')])], keywords=[]))])])], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='rows', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='Row', ctx=Load()), args=[], keywords=[keyword(arg='style', value=Name(id='style', ctx=Load())), keyword(arg='end_section', value=Name(id='end_section', ctx=Load()))])], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='add_section', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Add a new section (draw a line after current row).')), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='rows', ctx=Load()), body=[Assign(targets=[Attribute(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='rows', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), attr='end_section', ctx=Store())], value=Constant(value=True))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__rich_console__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='console', annotation=Constant(value='Console')), arg(arg='options', annotation=Constant(value='ConsoleOptions'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='columns', ctx=Load())), body=[Expr(value=Yield(value=Call(func=Name(id='Segment', ctx=Load()), args=[Constant(value='\n')], keywords=[]))), Return()], orelse=[]), Assign(targets=[Name(id='max_width', ctx=Store())], value=Attribute(value=Name(id='options', ctx=Load()), attr='max_width', ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='width', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='max_width', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='width', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='extra_width', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_extra_width', ctx=Load())), Assign(targets=[Name(id='widths', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_calculate_column_widths', ctx=Load()), args=[Name(id='console', ctx=Load()), Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='update_width', ctx=Load()), args=[BinOp(left=Name(id='max_width', ctx=Load()), op=Sub(), right=Name(id='extra_width', ctx=Load()))], keywords=[])], keywords=[])), Assign(targets=[Name(id='table_width', ctx=Store())], value=BinOp(left=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='widths', ctx=Load())], keywords=[]), op=Add(), right=Name(id='extra_width', ctx=Load()))), Assign(targets=[Name(id='render_options', ctx=Store())], value=Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='update', ctx=Load()), args=[], keywords=[keyword(arg='width', value=Name(id='table_width', ctx=Load())), keyword(arg='highlight', value=Attribute(value=Name(id='self', ctx=Load()), attr='highlight', ctx=Load())), keyword(arg='height', value=Constant(value=None))])), FunctionDef(name='render_annotation', args=arguments(posonlyargs=[], args=[arg(arg='text', annotation=Name(id='TextType', ctx=Load())), arg(arg='style', annotation=Name(id='StyleType', ctx=Load())), arg(arg='justify', annotation=Constant(value='JustifyMethod'))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='center')]), body=[Assign(targets=[Name(id='render_text', ctx=Store())], value=IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='text', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='render_str', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[keyword(arg='style', value=Name(id='style', ctx=Load())), keyword(arg='highlight', value=Constant(value=False))]), orelse=Name(id='text', ctx=Load()))), Return(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='render', ctx=Load()), args=[Name(id='render_text', ctx=Load())], keywords=[keyword(arg='options', value=Call(func=Attribute(value=Name(id='render_options', ctx=Load()), attr='update', ctx=Load()), args=[], keywords=[keyword(arg='justify', value=Name(id='justify', ctx=Load()))]))]))], decorator_list=[], returns=Constant(value='RenderResult')), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='title', ctx=Load()), body=[Expr(value=YieldFrom(value=Call(func=Name(id='render_annotation', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='title', ctx=Load())], keywords=[keyword(arg='style', value=Call(func=Attribute(value=Name(id='Style', ctx=Load()), attr='pick_first', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='title_style', ctx=Load()), Constant(value='table.title')], keywords=[])), keyword(arg='justify', value=Attribute(value=Name(id='self', ctx=Load()), attr='title_justify', ctx=Load()))])))], orelse=[]), Expr(value=YieldFrom(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_render', ctx=Load()), args=[Name(id='console', ctx=Load()), Name(id='render_options', ctx=Load()), Name(id='widths', ctx=Load())], keywords=[]))), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='caption', ctx=Load()), body=[Expr(value=YieldFrom(value=Call(func=Name(id='render_annotation', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='caption', ctx=Load())], keywords=[keyword(arg='style', value=Call(func=Attribute(value=Name(id='Style', ctx=Load()), attr='pick_first', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='caption_style', ctx=Load()), Constant(value='table.caption')], keywords=[])), keyword(arg='justify', value=Attribute(value=Name(id='self', ctx=Load()), attr='caption_justify', ctx=Load()))])))], orelse=[])], decorator_list=[], returns=Constant(value='RenderResult')), FunctionDef(name='_calculate_column_widths', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='console', annotation=Constant(value='Console')), arg(arg='options', annotation=Constant(value='ConsoleOptions'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Calculate the widths of each column, including padding, not including borders.')), Assign(targets=[Name(id='max_width', ctx=Store())], value=Attribute(value=Name(id='options', ctx=Load()), attr='max_width', ctx=Load())), Assign(targets=[Name(id='columns', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='columns', ctx=Load())), Assign(targets=[Name(id='width_ranges', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_measure_column', ctx=Load()), args=[Name(id='console', ctx=Load()), Name(id='options', ctx=Load()), Name(id='column', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='column', ctx=Store()), iter=Name(id='columns', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='widths', ctx=Store())], value=ListComp(elt=BoolOp(op=Or(), values=[Attribute(value=Name(id='_range', ctx=Load()), attr='maximum', ctx=Load()), Constant(value=1)]), generators=[comprehension(target=Name(id='_range', ctx=Store()), iter=Name(id='width_ranges', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='get_padding_width', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_get_padding_width', ctx=Load())), Assign(targets=[Name(id='extra_width', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_extra_width', ctx=Load())), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='expand', ctx=Load()), body=[Assign(targets=[Name(id='ratios', ctx=Store())], value=ListComp(elt=BoolOp(op=Or(), values=[Attribute(value=Name(id='col', ctx=Load()), attr='ratio', ctx=Load()), Constant(value=0)]), generators=[comprehension(target=Name(id='col', ctx=Store()), iter=Name(id='columns', ctx=Load()), ifs=[Attribute(value=Name(id='col', ctx=Load()), attr='flexible', ctx=Load())], is_async=0)])), If(test=Call(func=Name(id='any', ctx=Load()), args=[Name(id='ratios', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='fixed_widths', ctx=Store())], value=ListComp(elt=IfExp(test=Attribute(value=Name(id='column', ctx=Load()), attr='flexible', ctx=Load()), body=Constant(value=0), orelse=Attribute(value=Name(id='_range', ctx=Load()), attr='maximum', ctx=Load())), generators=[comprehension(target=Tuple(elts=[Name(id='_range', ctx=Store()), Name(id='column', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Name(id='width_ranges', ctx=Load()), Name(id='columns', ctx=Load())], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='flex_minimum', ctx=Store())], value=ListComp(elt=BinOp(left=BoolOp(op=Or(), values=[Attribute(value=Name(id='column', ctx=Load()), attr='width', ctx=Load()), Constant(value=1)]), op=Add(), right=Call(func=Name(id='get_padding_width', ctx=Load()), args=[Attribute(value=Name(id='column', ctx=Load()), attr='_index', ctx=Load())], keywords=[])), generators=[comprehension(target=Name(id='column', ctx=Store()), iter=Name(id='columns', ctx=Load()), ifs=[Attribute(value=Name(id='column', ctx=Load()), attr='flexible', ctx=Load())], is_async=0)])), Assign(targets=[Name(id='flexible_width', ctx=Store())], value=BinOp(left=Name(id='max_width', ctx=Load()), op=Sub(), right=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='fixed_widths', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='flex_widths', ctx=Store())], value=Call(func=Name(id='ratio_distribute', ctx=Load()), args=[Name(id='flexible_width', ctx=Load()), Name(id='ratios', ctx=Load()), Name(id='flex_minimum', ctx=Load())], keywords=[])), Assign(targets=[Name(id='iter_flex_widths', ctx=Store())], value=Call(func=Name(id='iter', ctx=Load()), args=[Name(id='flex_widths', ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Name(id='column', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='columns', ctx=Load())], keywords=[]), body=[If(test=Attribute(value=Name(id='column', ctx=Load()), attr='flexible', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='widths', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Store())], value=BinOp(left=Subscript(value=Name(id='fixed_widths', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()), op=Add(), right=Call(func=Name(id='next', ctx=Load()), args=[Name(id='iter_flex_widths', ctx=Load())], keywords=[])))], orelse=[])], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='table_width', ctx=Store())], value=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='widths', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='table_width', ctx=Load()), ops=[Gt()], comparators=[Name(id='max_width', ctx=Load())]), body=[Assign(targets=[Name(id='widths', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_collapse_widths', ctx=Load()), args=[Name(id='widths', ctx=Load()), ListComp(elt=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='column', ctx=Load()), attr='width', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), UnaryOp(op=Not(), operand=Attribute(value=Name(id='column', ctx=Load()), attr='no_wrap', ctx=Load()))]), generators=[comprehension(target=Name(id='column', ctx=Store()), iter=Name(id='columns', ctx=Load()), ifs=[], is_async=0)]), Name(id='max_width', ctx=Load())], keywords=[])), Assign(targets=[Name(id='table_width', ctx=Store())], value=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='widths', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='table_width', ctx=Load()), ops=[Gt()], comparators=[Name(id='max_width', ctx=Load())]), body=[Assign(targets=[Name(id='excess_width', ctx=Store())], value=BinOp(left=Name(id='table_width', ctx=Load()), op=Sub(), right=Name(id='max_width', ctx=Load()))), Assign(targets=[Name(id='widths', ctx=Store())], value=Call(func=Name(id='ratio_reduce', ctx=Load()), args=[Name(id='excess_width', ctx=Load()), BinOp(left=List(elts=[Constant(value=1)], ctx=Load()), op=Mult(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='widths', ctx=Load())], keywords=[])), Name(id='widths', ctx=Load()), Name(id='widths', ctx=Load())], keywords=[])), Assign(targets=[Name(id='table_width', ctx=Store())], value=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='widths', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='width_ranges', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_measure_column', ctx=Load()), args=[Name(id='console', ctx=Load()), Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='update_width', ctx=Load()), args=[Name(id='width', ctx=Load())], keywords=[]), Name(id='column', ctx=Load())], keywords=[]), generators=[comprehension(target=Tuple(elts=[Name(id='width', ctx=Store()), Name(id='column', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Name(id='widths', ctx=Load()), Name(id='columns', ctx=Load())], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='widths', ctx=Store())], value=ListComp(elt=BoolOp(op=Or(), values=[Attribute(value=Name(id='_range', ctx=Load()), attr='maximum', ctx=Load()), Constant(value=0)]), generators=[comprehension(target=Name(id='_range', ctx=Store()), iter=Name(id='width_ranges', ctx=Load()), ifs=[], is_async=0)]))], orelse=[]), If(test=BoolOp(op=Or(), values=[BoolOp(op=And(), values=[Compare(left=Name(id='table_width', ctx=Load()), ops=[Lt()], comparators=[Name(id='max_width', ctx=Load())]), Attribute(value=Name(id='self', ctx=Load()), attr='expand', ctx=Load())]), BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='min_width', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='table_width', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='min_width', ctx=Load()), op=Sub(), right=Name(id='extra_width', ctx=Load()))])])]), body=[Assign(targets=[Name(id='_max_width', ctx=Store())], value=IfExp(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='min_width', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Name(id='max_width', ctx=Load()), orelse=Call(func=Name(id='min', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='min_width', ctx=Load()), op=Sub(), right=Name(id='extra_width', ctx=Load())), Name(id='max_width', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='pad_widths', ctx=Store())], value=Call(func=Name(id='ratio_distribute', ctx=Load()), args=[BinOp(left=Name(id='_max_width', ctx=Load()), op=Sub(), right=Name(id='table_width', ctx=Load())), Name(id='widths', ctx=Load())], keywords=[])), Assign(targets=[Name(id='widths', ctx=Store())], value=ListComp(elt=BinOp(left=Name(id='_width', ctx=Load()), op=Add(), right=Name(id='pad', ctx=Load())), generators=[comprehension(target=Tuple(elts=[Name(id='_width', ctx=Store()), Name(id='pad', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Name(id='widths', ctx=Load()), Name(id='pad_widths', ctx=Load())], keywords=[]), ifs=[], is_async=0)]))], orelse=[]), Return(value=Name(id='widths', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), FunctionDef(name='_collapse_widths', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='widths', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='wrapable', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load())), arg(arg='max_width', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Reduce widths so that the total is under max_width.\n\n        Args:\n            widths (List[int]): List of widths.\n            wrapable (List[bool]): List of booleans that indicate if a column may shrink.\n            max_width (int): Maximum width to reduce to.\n\n        Returns:\n            List[int]: A new list of widths.\n        ')), Assign(targets=[Name(id='total_width', ctx=Store())], value=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='widths', ctx=Load())], keywords=[])), Assign(targets=[Name(id='excess_width', ctx=Store())], value=BinOp(left=Name(id='total_width', ctx=Load()), op=Sub(), right=Name(id='max_width', ctx=Load()))), If(test=Call(func=Name(id='any', ctx=Load()), args=[Name(id='wrapable', ctx=Load())], keywords=[]), body=[While(test=BoolOp(op=And(), values=[Name(id='total_width', ctx=Load()), Compare(left=Name(id='excess_width', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)])]), body=[Assign(targets=[Name(id='max_column', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[GeneratorExp(elt=Name(id='width', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='width', ctx=Store()), Name(id='allow_wrap', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Name(id='widths', ctx=Load()), Name(id='wrapable', ctx=Load())], keywords=[]), ifs=[Name(id='allow_wrap', ctx=Load())], is_async=0)])], keywords=[])), Assign(targets=[Name(id='second_max_column', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[GeneratorExp(elt=IfExp(test=BoolOp(op=And(), values=[Name(id='allow_wrap', ctx=Load()), Compare(left=Name(id='width', ctx=Load()), ops=[NotEq()], comparators=[Name(id='max_column', ctx=Load())])]), body=Name(id='width', ctx=Load()), orelse=Constant(value=0)), generators=[comprehension(target=Tuple(elts=[Name(id='width', ctx=Store()), Name(id='allow_wrap', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Name(id='widths', ctx=Load()), Name(id='wrapable', ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Name(id='column_difference', ctx=Store())], value=BinOp(left=Name(id='max_column', ctx=Load()), op=Sub(), right=Name(id='second_max_column', ctx=Load()))), Assign(targets=[Name(id='ratios', ctx=Store())], value=ListComp(elt=IfExp(test=BoolOp(op=And(), values=[Compare(left=Name(id='width', ctx=Load()), ops=[Eq()], comparators=[Name(id='max_column', ctx=Load())]), Name(id='allow_wrap', ctx=Load())]), body=Constant(value=1), orelse=Constant(value=0)), generators=[comprehension(target=Tuple(elts=[Name(id='width', ctx=Store()), Name(id='allow_wrap', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Name(id='widths', ctx=Load()), Name(id='wrapable', ctx=Load())], keywords=[]), ifs=[], is_async=0)])), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Call(func=Name(id='any', ctx=Load()), args=[Name(id='ratios', ctx=Load())], keywords=[])), UnaryOp(op=Not(), operand=Name(id='column_difference', ctx=Load()))]), body=[Break()], orelse=[]), Assign(targets=[Name(id='max_reduce', ctx=Store())], value=BinOp(left=List(elts=[Call(func=Name(id='min', ctx=Load()), args=[Name(id='excess_width', ctx=Load()), Name(id='column_difference', ctx=Load())], keywords=[])], ctx=Load()), op=Mult(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='widths', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='widths', ctx=Store())], value=Call(func=Name(id='ratio_reduce', ctx=Load()), args=[Name(id='excess_width', ctx=Load()), Name(id='ratios', ctx=Load()), Name(id='max_reduce', ctx=Load()), Name(id='widths', ctx=Load())], keywords=[])), Assign(targets=[Name(id='total_width', ctx=Store())], value=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='widths', ctx=Load())], keywords=[])), Assign(targets=[Name(id='excess_width', ctx=Store())], value=BinOp(left=Name(id='total_width', ctx=Load()), op=Sub(), right=Name(id='max_width', ctx=Load())))], orelse=[])], orelse=[]), Return(value=Name(id='widths', ctx=Load()))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), FunctionDef(name='_get_cells', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='console', annotation=Constant(value='Console')), arg(arg='column_index', annotation=Name(id='int', ctx=Load())), arg(arg='column', annotation=Name(id='Column', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get all the cells with padding and optional header.')), Assign(targets=[Name(id='collapse_padding', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='collapse_padding', ctx=Load())), Assign(targets=[Name(id='pad_edge', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='pad_edge', ctx=Load())), Assign(targets=[Name(id='padding', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='padding', ctx=Load())), Assign(targets=[Name(id='any_padding', ctx=Store())], value=Call(func=Name(id='any', ctx=Load()), args=[Name(id='padding', ctx=Load())], keywords=[])), Assign(targets=[Name(id='first_column', ctx=Store())], value=Compare(left=Name(id='column_index', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])), Assign(targets=[Name(id='last_column', ctx=Store())], value=Compare(left=Name(id='column_index', ctx=Load()), ops=[Eq()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='columns', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))])), AnnAssign(target=Name(id='_padding_cache', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='bool', ctx=Load()), Name(id='bool', ctx=Load())], ctx=Load()), ctx=Load()), Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load()), Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=1), FunctionDef(name='get_padding', args=arguments(posonlyargs=[], args=[arg(arg='first_row', annotation=Name(id='bool', ctx=Load())), arg(arg='last_row', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='cached', ctx=Store())], value=Call(func=Attribute(value=Name(id='_padding_cache', ctx=Load()), attr='get', ctx=Load()), args=[Tuple(elts=[Name(id='first_row', ctx=Load()), Name(id='last_row', ctx=Load())], ctx=Load())], keywords=[])), If(test=Name(id='cached', ctx=Load()), body=[Return(value=Name(id='cached', ctx=Load()))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='top', ctx=Store()), Name(id='right', ctx=Store()), Name(id='bottom', ctx=Store()), Name(id='left', ctx=Store())], ctx=Store())], value=Name(id='padding', ctx=Load())), If(test=Name(id='collapse_padding', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Name(id='first_column', ctx=Load())), body=[Assign(targets=[Name(id='left', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Constant(value=0), BinOp(left=Name(id='left', ctx=Load()), op=Sub(), right=Name(id='right', ctx=Load()))], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='last_row', ctx=Load())), body=[Assign(targets=[Name(id='bottom', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Constant(value=0), BinOp(left=Name(id='top', ctx=Load()), op=Sub(), right=Name(id='bottom', ctx=Load()))], keywords=[]))], orelse=[])], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='pad_edge', ctx=Load())), body=[If(test=Name(id='first_column', ctx=Load()), body=[Assign(targets=[Name(id='left', ctx=Store())], value=Constant(value=0))], orelse=[]), If(test=Name(id='last_column', ctx=Load()), body=[Assign(targets=[Name(id='right', ctx=Store())], value=Constant(value=0))], orelse=[]), If(test=Name(id='first_row', ctx=Load()), body=[Assign(targets=[Name(id='top', ctx=Store())], value=Constant(value=0))], orelse=[]), If(test=Name(id='last_row', ctx=Load()), body=[Assign(targets=[Name(id='bottom', ctx=Store())], value=Constant(value=0))], orelse=[])], orelse=[]), Assign(targets=[Name(id='_padding', ctx=Store())], value=Tuple(elts=[Name(id='top', ctx=Load()), Name(id='right', ctx=Load()), Name(id='bottom', ctx=Load()), Name(id='left', ctx=Load())], ctx=Load())), Assign(targets=[Subscript(value=Name(id='_padding_cache', ctx=Load()), slice=Tuple(elts=[Name(id='first_row', ctx=Load()), Name(id='last_row', ctx=Load())], ctx=Load()), ctx=Store())], value=Name(id='_padding', ctx=Load())), Return(value=Name(id='_padding', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load()), Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())), AnnAssign(target=Name(id='raw_cells', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='StyleType', ctx=Load()), Constant(value='RenderableType')], ctx=Load()), ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), Assign(targets=[Name(id='_append', ctx=Store())], value=Attribute(value=Name(id='raw_cells', ctx=Load()), attr='append', ctx=Load())), Assign(targets=[Name(id='get_style', ctx=Store())], value=Attribute(value=Name(id='console', ctx=Load()), attr='get_style', ctx=Load())), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='show_header', ctx=Load()), body=[Assign(targets=[Name(id='header_style', ctx=Store())], value=BinOp(left=Call(func=Name(id='get_style', ctx=Load()), args=[BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='header_style', ctx=Load()), Constant(value='')])], keywords=[]), op=Add(), right=Call(func=Name(id='get_style', ctx=Load()), args=[Attribute(value=Name(id='column', ctx=Load()), attr='header_style', ctx=Load())], keywords=[]))), Expr(value=Call(func=Name(id='_append', ctx=Load()), args=[Tuple(elts=[Name(id='header_style', ctx=Load()), Attribute(value=Name(id='column', ctx=Load()), attr='header', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='cell_style', ctx=Store())], value=Call(func=Name(id='get_style', ctx=Load()), args=[BoolOp(op=Or(), values=[Attribute(value=Name(id='column', ctx=Load()), attr='style', ctx=Load()), Constant(value='')])], keywords=[])), For(target=Name(id='cell', ctx=Store()), iter=Attribute(value=Name(id='column', ctx=Load()), attr='cells', ctx=Load()), body=[Expr(value=Call(func=Name(id='_append', ctx=Load()), args=[Tuple(elts=[Name(id='cell_style', ctx=Load()), Name(id='cell', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='show_footer', ctx=Load()), body=[Assign(targets=[Name(id='footer_style', ctx=Store())], value=BinOp(left=Call(func=Name(id='get_style', ctx=Load()), args=[BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='footer_style', ctx=Load()), Constant(value='')])], keywords=[]), op=Add(), right=Call(func=Name(id='get_style', ctx=Load()), args=[Attribute(value=Name(id='column', ctx=Load()), attr='footer_style', ctx=Load())], keywords=[]))), Expr(value=Call(func=Name(id='_append', ctx=Load()), args=[Tuple(elts=[Name(id='footer_style', ctx=Load()), Attribute(value=Name(id='column', ctx=Load()), attr='footer', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='any_padding', ctx=Load()), body=[Assign(targets=[Name(id='_Padding', ctx=Store())], value=Name(id='Padding', ctx=Load())), For(target=Tuple(elts=[Name(id='first', ctx=Store()), Name(id='last', ctx=Store()), Tuple(elts=[Name(id='style', ctx=Store()), Name(id='renderable', ctx=Store())], ctx=Store())], ctx=Store()), iter=Call(func=Name(id='loop_first_last', ctx=Load()), args=[Name(id='raw_cells', ctx=Load())], keywords=[]), body=[Expr(value=Yield(value=Call(func=Name(id='_Cell', ctx=Load()), args=[Name(id='style', ctx=Load()), Call(func=Name(id='_Padding', ctx=Load()), args=[Name(id='renderable', ctx=Load()), Call(func=Name(id='get_padding', ctx=Load()), args=[Name(id='first', ctx=Load()), Name(id='last', ctx=Load())], keywords=[])], keywords=[]), BoolOp(op=Or(), values=[Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='renderable', ctx=Load()), Constant(value='vertical'), Constant(value=None)], keywords=[]), Attribute(value=Name(id='column', ctx=Load()), attr='vertical', ctx=Load())])], keywords=[])))], orelse=[])], orelse=[For(target=Tuple(elts=[Name(id='style', ctx=Store()), Name(id='renderable', ctx=Store())], ctx=Store()), iter=Name(id='raw_cells', ctx=Load()), body=[Expr(value=Yield(value=Call(func=Name(id='_Cell', ctx=Load()), args=[Name(id='style', ctx=Load()), Name(id='renderable', ctx=Load()), BoolOp(op=Or(), values=[Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='renderable', ctx=Load()), Constant(value='vertical'), Constant(value=None)], keywords=[]), Attribute(value=Name(id='column', ctx=Load()), attr='vertical', ctx=Load())])], keywords=[])))], orelse=[])])], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='_Cell', ctx=Load()), ctx=Load())), FunctionDef(name='_get_padding_width', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='column_index', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get extra width from padding.')), Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='pad_right', ctx=Store()), Name(id='_', ctx=Store()), Name(id='pad_left', ctx=Store())], ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='padding', ctx=Load())), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='collapse_padding', ctx=Load()), body=[If(test=Compare(left=Name(id='column_index', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='pad_left', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Constant(value=0), BinOp(left=Name(id='pad_left', ctx=Load()), op=Sub(), right=Name(id='pad_right', ctx=Load()))], keywords=[]))], orelse=[])], orelse=[]), Return(value=BinOp(left=Name(id='pad_left', ctx=Load()), op=Add(), right=Name(id='pad_right', ctx=Load())))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='_measure_column', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='console', annotation=Constant(value='Console')), arg(arg='options', annotation=Constant(value='ConsoleOptions')), arg(arg='column', annotation=Name(id='Column', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get the minimum and maximum width of the column.')), Assign(targets=[Name(id='max_width', ctx=Store())], value=Attribute(value=Name(id='options', ctx=Load()), attr='max_width', ctx=Load())), If(test=Compare(left=Name(id='max_width', ctx=Load()), ops=[Lt()], comparators=[Constant(value=1)]), body=[Return(value=Call(func=Name(id='Measurement', ctx=Load()), args=[Constant(value=0), Constant(value=0)], keywords=[]))], orelse=[]), Assign(targets=[Name(id='padding_width', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_padding_width', ctx=Load()), args=[Attribute(value=Name(id='column', ctx=Load()), attr='_index', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='column', ctx=Load()), attr='width', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=Call(func=Attribute(value=Call(func=Name(id='Measurement', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='column', ctx=Load()), attr='width', ctx=Load()), op=Add(), right=Name(id='padding_width', ctx=Load())), BinOp(left=Attribute(value=Name(id='column', ctx=Load()), attr='width', ctx=Load()), op=Add(), right=Name(id='padding_width', ctx=Load()))], keywords=[]), attr='with_maximum', ctx=Load()), args=[Name(id='max_width', ctx=Load())], keywords=[]))], orelse=[]), AnnAssign(target=Name(id='min_widths', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), AnnAssign(target=Name(id='max_widths', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), Assign(targets=[Name(id='append_min', ctx=Store())], value=Attribute(value=Name(id='min_widths', ctx=Load()), attr='append', ctx=Load())), Assign(targets=[Name(id='append_max', ctx=Store())], value=Attribute(value=Name(id='max_widths', ctx=Load()), attr='append', ctx=Load())), Assign(targets=[Name(id='get_render_width', ctx=Store())], value=Attribute(value=Name(id='Measurement', ctx=Load()), attr='get', ctx=Load())), For(target=Name(id='cell', ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_cells', ctx=Load()), args=[Name(id='console', ctx=Load()), Attribute(value=Name(id='column', ctx=Load()), attr='_index', ctx=Load()), Name(id='column', ctx=Load())], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='_min', ctx=Store()), Name(id='_max', ctx=Store())], ctx=Store())], value=Call(func=Name(id='get_render_width', ctx=Load()), args=[Name(id='console', ctx=Load()), Name(id='options', ctx=Load()), Attribute(value=Name(id='cell', ctx=Load()), attr='renderable', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='append_min', ctx=Load()), args=[Name(id='_min', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='append_max', ctx=Load()), args=[Name(id='_max', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='measurement', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='Measurement', ctx=Load()), args=[IfExp(test=Name(id='min_widths', ctx=Load()), body=Call(func=Name(id='max', ctx=Load()), args=[Name(id='min_widths', ctx=Load())], keywords=[]), orelse=Constant(value=1)), IfExp(test=Name(id='max_widths', ctx=Load()), body=Call(func=Name(id='max', ctx=Load()), args=[Name(id='max_widths', ctx=Load())], keywords=[]), orelse=Name(id='max_width', ctx=Load()))], keywords=[]), attr='with_maximum', ctx=Load()), args=[Name(id='max_width', ctx=Load())], keywords=[])), Assign(targets=[Name(id='measurement', ctx=Store())], value=Call(func=Attribute(value=Name(id='measurement', ctx=Load()), attr='clamp', ctx=Load()), args=[IfExp(test=Compare(left=Attribute(value=Name(id='column', ctx=Load()), attr='min_width', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Constant(value=None), orelse=BinOp(left=Attribute(value=Name(id='column', ctx=Load()), attr='min_width', ctx=Load()), op=Add(), right=Name(id='padding_width', ctx=Load()))), IfExp(test=Compare(left=Attribute(value=Name(id='column', ctx=Load()), attr='max_width', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Constant(value=None), orelse=BinOp(left=Attribute(value=Name(id='column', ctx=Load()), attr='max_width', ctx=Load()), op=Add(), right=Name(id='padding_width', ctx=Load())))], keywords=[])), Return(value=Name(id='measurement', ctx=Load()))], decorator_list=[], returns=Name(id='Measurement', ctx=Load())), FunctionDef(name='_render', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='console', annotation=Constant(value='Console')), arg(arg='options', annotation=Constant(value='ConsoleOptions')), arg(arg='widths', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='table_style', ctx=Store())], value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='get_style', ctx=Load()), args=[BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load()), Constant(value='')])], keywords=[])), Assign(targets=[Name(id='border_style', ctx=Store())], value=BinOp(left=Name(id='table_style', ctx=Load()), op=Add(), right=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='get_style', ctx=Load()), args=[BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='border_style', ctx=Load()), Constant(value='')])], keywords=[]))), Assign(targets=[Name(id='_column_cells', ctx=Store())], value=GeneratorExp(elt=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_cells', ctx=Load()), args=[Name(id='console', ctx=Load()), Name(id='column_index', ctx=Load()), Name(id='column', ctx=Load())], keywords=[]), generators=[comprehension(target=Tuple(elts=[Name(id='column_index', ctx=Store()), Name(id='column', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='columns', ctx=Load())], keywords=[]), ifs=[], is_async=0)])), AnnAssign(target=Name(id='row_cells', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='_Cell', ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load()), ctx=Load()), value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='zip', ctx=Load()), args=[Starred(value=Name(id='_column_cells', ctx=Load()), ctx=Load())], keywords=[])], keywords=[]), simple=1), Assign(targets=[Name(id='_box', ctx=Store())], value=IfExp(test=Attribute(value=Name(id='self', ctx=Load()), attr='box', ctx=Load()), body=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='box', ctx=Load()), attr='substitute', ctx=Load()), args=[Name(id='options', ctx=Load())], keywords=[keyword(arg='safe', value=Call(func=Name(id='pick_bool', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='safe_box', ctx=Load()), Attribute(value=Name(id='console', ctx=Load()), attr='safe_box', ctx=Load())], keywords=[]))]), orelse=Constant(value=None))), Assign(targets=[Name(id='_box', ctx=Store())], value=IfExp(test=BoolOp(op=And(), values=[Name(id='_box', ctx=Load()), UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='show_header', ctx=Load()))]), body=Call(func=Attribute(value=Name(id='_box', ctx=Load()), attr='get_plain_headed_box', ctx=Load()), args=[], keywords=[]), orelse=Name(id='_box', ctx=Load()))), Assign(targets=[Name(id='new_line', ctx=Store())], value=Call(func=Attribute(value=Name(id='Segment', ctx=Load()), attr='line', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='columns', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='columns', ctx=Load())), Assign(targets=[Name(id='show_header', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='show_header', ctx=Load())), Assign(targets=[Name(id='show_footer', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='show_footer', ctx=Load())), Assign(targets=[Name(id='show_edge', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='show_edge', ctx=Load())), Assign(targets=[Name(id='show_lines', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='show_lines', ctx=Load())), Assign(targets=[Name(id='leading', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='leading', ctx=Load())), Assign(targets=[Name(id='_Segment', ctx=Store())], value=Name(id='Segment', ctx=Load())), If(test=Name(id='_box', ctx=Load()), body=[Assign(targets=[Name(id='box_segments', ctx=Store())], value=List(elts=[Tuple(elts=[Call(func=Name(id='_Segment', ctx=Load()), args=[Attribute(value=Name(id='_box', ctx=Load()), attr='head_left', ctx=Load()), Name(id='border_style', ctx=Load())], keywords=[]), Call(func=Name(id='_Segment', ctx=Load()), args=[Attribute(value=Name(id='_box', ctx=Load()), attr='head_right', ctx=Load()), Name(id='border_style', ctx=Load())], keywords=[]), Call(func=Name(id='_Segment', ctx=Load()), args=[Attribute(value=Name(id='_box', ctx=Load()), attr='head_vertical', ctx=Load()), Name(id='border_style', ctx=Load())], keywords=[])], ctx=Load()), Tuple(elts=[Call(func=Name(id='_Segment', ctx=Load()), args=[Attribute(value=Name(id='_box', ctx=Load()), attr='foot_left', ctx=Load()), Name(id='border_style', ctx=Load())], keywords=[]), Call(func=Name(id='_Segment', ctx=Load()), args=[Attribute(value=Name(id='_box', ctx=Load()), attr='foot_right', ctx=Load()), Name(id='border_style', ctx=Load())], keywords=[]), Call(func=Name(id='_Segment', ctx=Load()), args=[Attribute(value=Name(id='_box', ctx=Load()), attr='foot_vertical', ctx=Load()), Name(id='border_style', ctx=Load())], keywords=[])], ctx=Load()), Tuple(elts=[Call(func=Name(id='_Segment', ctx=Load()), args=[Attribute(value=Name(id='_box', ctx=Load()), attr='mid_left', ctx=Load()), Name(id='border_style', ctx=Load())], keywords=[]), Call(func=Name(id='_Segment', ctx=Load()), args=[Attribute(value=Name(id='_box', ctx=Load()), attr='mid_right', ctx=Load()), Name(id='border_style', ctx=Load())], keywords=[]), Call(func=Name(id='_Segment', ctx=Load()), args=[Attribute(value=Name(id='_box', ctx=Load()), attr='mid_vertical', ctx=Load()), Name(id='border_style', ctx=Load())], keywords=[])], ctx=Load())], ctx=Load())), If(test=Name(id='show_edge', ctx=Load()), body=[Expr(value=Yield(value=Call(func=Name(id='_Segment', ctx=Load()), args=[Call(func=Attribute(value=Name(id='_box', ctx=Load()), attr='get_top', ctx=Load()), args=[Name(id='widths', ctx=Load())], keywords=[]), Name(id='border_style', ctx=Load())], keywords=[]))), Expr(value=Yield(value=Name(id='new_line', ctx=Load())))], orelse=[])], orelse=[Assign(targets=[Name(id='box_segments', ctx=Store())], value=List(elts=[], ctx=Load()))]), Assign(targets=[Name(id='get_row_style', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='get_row_style', ctx=Load())), Assign(targets=[Name(id='get_style', ctx=Store())], value=Attribute(value=Name(id='console', ctx=Load()), attr='get_style', ctx=Load())), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Tuple(elts=[Name(id='first', ctx=Store()), Name(id='last', ctx=Store()), Name(id='row_cell', ctx=Store())], ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Call(func=Name(id='loop_first_last', ctx=Load()), args=[Name(id='row_cells', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='header_row', ctx=Store())], value=BoolOp(op=And(), values=[Name(id='first', ctx=Load()), Name(id='show_header', ctx=Load())])), Assign(targets=[Name(id='footer_row', ctx=Store())], value=BoolOp(op=And(), values=[Name(id='last', ctx=Load()), Name(id='show_footer', ctx=Load())])), Assign(targets=[Name(id='row', ctx=Store())], value=IfExp(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Name(id='header_row', ctx=Load())), UnaryOp(op=Not(), operand=Name(id='footer_row', ctx=Load()))]), body=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='rows', ctx=Load()), slice=BinOp(left=Name(id='index', ctx=Load()), op=Sub(), right=Name(id='show_header', ctx=Load())), ctx=Load()), orelse=Constant(value=None))), Assign(targets=[Name(id='max_height', ctx=Store())], value=Constant(value=1)), AnnAssign(target=Name(id='cells', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Segment', ctx=Load()), ctx=Load()), ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), If(test=BoolOp(op=Or(), values=[Name(id='header_row', ctx=Load()), Name(id='footer_row', ctx=Load())]), body=[Assign(targets=[Name(id='row_style', ctx=Store())], value=Call(func=Attribute(value=Name(id='Style', ctx=Load()), attr='null', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Name(id='row_style', ctx=Store())], value=Call(func=Name(id='get_style', ctx=Load()), args=[Call(func=Name(id='get_row_style', ctx=Load()), args=[Name(id='console', ctx=Load()), IfExp(test=Name(id='show_header', ctx=Load()), body=BinOp(left=Name(id='index', ctx=Load()), op=Sub(), right=Constant(value=1)), orelse=Name(id='index', ctx=Load()))], keywords=[])], keywords=[]))]), For(target=Tuple(elts=[Name(id='width', ctx=Store()), Name(id='cell', ctx=Store()), Name(id='column', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Name(id='widths', ctx=Load()), Name(id='row_cell', ctx=Load()), Name(id='columns', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='render_options', ctx=Store())], value=Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='update', ctx=Load()), args=[], keywords=[keyword(arg='width', value=Name(id='width', ctx=Load())), keyword(arg='justify', value=Attribute(value=Name(id='column', ctx=Load()), attr='justify', ctx=Load())), keyword(arg='no_wrap', value=Attribute(value=Name(id='column', ctx=Load()), attr='no_wrap', ctx=Load())), keyword(arg='overflow', value=Attribute(value=Name(id='column', ctx=Load()), attr='overflow', ctx=Load())), keyword(arg='height', value=Constant(value=None))])), Assign(targets=[Name(id='lines', ctx=Store())], value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='render_lines', ctx=Load()), args=[Attribute(value=Name(id='cell', ctx=Load()), attr='renderable', ctx=Load()), Name(id='render_options', ctx=Load())], keywords=[keyword(arg='style', value=BinOp(left=Call(func=Name(id='get_style', ctx=Load()), args=[Attribute(value=Name(id='cell', ctx=Load()), attr='style', ctx=Load())], keywords=[]), op=Add(), right=Name(id='row_style', ctx=Load())))])), Assign(targets=[Name(id='max_height', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Name(id='max_height', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='lines', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='cells', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='lines', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='row_height', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='len', ctx=Load()), args=[Name(id='cell', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='cell', ctx=Store()), iter=Name(id='cells', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), FunctionDef(name='align_cell', args=arguments(posonlyargs=[], args=[arg(arg='cell', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Segment', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='vertical', annotation=Constant(value='VerticalAlignMethod')), arg(arg='width', annotation=Name(id='int', ctx=Load())), arg(arg='style', annotation=Name(id='Style', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Name(id='header_row', ctx=Load()), body=[Assign(targets=[Name(id='vertical', ctx=Store())], value=Constant(value='bottom'))], orelse=[If(test=Name(id='footer_row', ctx=Load()), body=[Assign(targets=[Name(id='vertical', ctx=Store())], value=Constant(value='top'))], orelse=[])]), If(test=Compare(left=Name(id='vertical', ctx=Load()), ops=[Eq()], comparators=[Constant(value='top')]), body=[Return(value=Call(func=Attribute(value=Name(id='_Segment', ctx=Load()), attr='align_top', ctx=Load()), args=[Name(id='cell', ctx=Load()), Name(id='width', ctx=Load()), Name(id='row_height', ctx=Load()), Name(id='style', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='vertical', ctx=Load()), ops=[Eq()], comparators=[Constant(value='middle')]), body=[Return(value=Call(func=Attribute(value=Name(id='_Segment', ctx=Load()), attr='align_middle', ctx=Load()), args=[Name(id='cell', ctx=Load()), Name(id='width', ctx=Load()), Name(id='row_height', ctx=Load()), Name(id='style', ctx=Load())], keywords=[]))], orelse=[])]), Return(value=Call(func=Attribute(value=Name(id='_Segment', ctx=Load()), attr='align_bottom', ctx=Load()), args=[Name(id='cell', ctx=Load()), Name(id='width', ctx=Load()), Name(id='row_height', ctx=Load()), Name(id='style', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Segment', ctx=Load()), ctx=Load()), ctx=Load())), Assign(targets=[Subscript(value=Name(id='cells', ctx=Load()), slice=Slice(), ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='_Segment', ctx=Load()), attr='set_shape', ctx=Load()), args=[Call(func=Name(id='align_cell', ctx=Load()), args=[Name(id='cell', ctx=Load()), Attribute(value=Name(id='_cell', ctx=Load()), attr='vertical', ctx=Load()), Name(id='width', ctx=Load()), BinOp(left=Call(func=Name(id='get_style', ctx=Load()), args=[Attribute(value=Name(id='_cell', ctx=Load()), attr='style', ctx=Load())], keywords=[]), op=Add(), right=Name(id='row_style', ctx=Load()))], keywords=[]), Name(id='width', ctx=Load()), Name(id='max_height', ctx=Load())], keywords=[]), generators=[comprehension(target=Tuple(elts=[Name(id='width', ctx=Store()), Name(id='_cell', ctx=Store()), Name(id='cell', ctx=Store()), Name(id='column', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Name(id='widths', ctx=Load()), Name(id='row_cell', ctx=Load()), Name(id='cells', ctx=Load()), Name(id='columns', ctx=Load())], keywords=[]), ifs=[], is_async=0)])), If(test=Name(id='_box', ctx=Load()), body=[If(test=BoolOp(op=And(), values=[Name(id='last', ctx=Load()), Name(id='show_footer', ctx=Load())]), body=[Expr(value=Yield(value=Call(func=Name(id='_Segment', ctx=Load()), args=[Call(func=Attribute(value=Name(id='_box', ctx=Load()), attr='get_row', ctx=Load()), args=[Name(id='widths', ctx=Load()), Constant(value='foot')], keywords=[keyword(arg='edge', value=Name(id='show_edge', ctx=Load()))]), Name(id='border_style', ctx=Load())], keywords=[]))), Expr(value=Yield(value=Name(id='new_line', ctx=Load())))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='left', ctx=Store()), Name(id='right', ctx=Store()), Name(id='_divider', ctx=Store())], ctx=Store())], value=Subscript(value=Name(id='box_segments', ctx=Load()), slice=IfExp(test=Name(id='first', ctx=Load()), body=Constant(value=0), orelse=IfExp(test=Name(id='last', ctx=Load()), body=Constant(value=2), orelse=Constant(value=1))), ctx=Load())), Assign(targets=[Name(id='divider', ctx=Store())], value=IfExp(test=Call(func=Attribute(value=Attribute(value=Name(id='_divider', ctx=Load()), attr='text', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]), body=Name(id='_divider', ctx=Load()), orelse=Call(func=Name(id='_Segment', ctx=Load()), args=[Attribute(value=Name(id='_divider', ctx=Load()), attr='text', ctx=Load()), BinOp(left=Attribute(value=Name(id='row_style', ctx=Load()), attr='background_style', ctx=Load()), op=Add(), right=Attribute(value=Name(id='_divider', ctx=Load()), attr='style', ctx=Load()))], keywords=[]))), For(target=Name(id='line_no', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='max_height', ctx=Load())], keywords=[]), body=[If(test=Name(id='show_edge', ctx=Load()), body=[Expr(value=Yield(value=Name(id='left', ctx=Load())))], orelse=[]), For(target=Tuple(elts=[Name(id='last_cell', ctx=Store()), Name(id='rendered_cell', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='loop_last', ctx=Load()), args=[Name(id='cells', ctx=Load())], keywords=[]), body=[Expr(value=YieldFrom(value=Subscript(value=Name(id='rendered_cell', ctx=Load()), slice=Name(id='line_no', ctx=Load()), ctx=Load()))), If(test=UnaryOp(op=Not(), operand=Name(id='last_cell', ctx=Load())), body=[Expr(value=Yield(value=Name(id='divider', ctx=Load())))], orelse=[])], orelse=[]), If(test=Name(id='show_edge', ctx=Load()), body=[Expr(value=Yield(value=Name(id='right', ctx=Load())))], orelse=[]), Expr(value=Yield(value=Name(id='new_line', ctx=Load())))], orelse=[])], orelse=[For(target=Name(id='line_no', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='max_height', ctx=Load())], keywords=[]), body=[For(target=Name(id='rendered_cell', ctx=Store()), iter=Name(id='cells', ctx=Load()), body=[Expr(value=YieldFrom(value=Subscript(value=Name(id='rendered_cell', ctx=Load()), slice=Name(id='line_no', ctx=Load()), ctx=Load())))], orelse=[]), Expr(value=Yield(value=Name(id='new_line', ctx=Load())))], orelse=[])]), If(test=BoolOp(op=And(), values=[Name(id='_box', ctx=Load()), Name(id='first', ctx=Load()), Name(id='show_header', ctx=Load())]), body=[Expr(value=Yield(value=Call(func=Name(id='_Segment', ctx=Load()), args=[Call(func=Attribute(value=Name(id='_box', ctx=Load()), attr='get_row', ctx=Load()), args=[Name(id='widths', ctx=Load()), Constant(value='head')], keywords=[keyword(arg='edge', value=Name(id='show_edge', ctx=Load()))]), Name(id='border_style', ctx=Load())], keywords=[]))), Expr(value=Yield(value=Name(id='new_line', ctx=Load())))], orelse=[]), Assign(targets=[Name(id='end_section', ctx=Store())], value=BoolOp(op=And(), values=[Name(id='row', ctx=Load()), Attribute(value=Name(id='row', ctx=Load()), attr='end_section', ctx=Load())])), If(test=BoolOp(op=And(), values=[Name(id='_box', ctx=Load()), BoolOp(op=Or(), values=[Name(id='show_lines', ctx=Load()), Name(id='leading', ctx=Load()), Name(id='end_section', ctx=Load())])]), body=[If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Name(id='last', ctx=Load())), UnaryOp(op=Not(), operand=BoolOp(op=And(), values=[Name(id='show_footer', ctx=Load()), Compare(left=Name(id='index', ctx=Load()), ops=[GtE()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='row_cells', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=2))])])), UnaryOp(op=Not(), operand=BoolOp(op=And(), values=[Name(id='show_header', ctx=Load()), Name(id='header_row', ctx=Load())]))]), body=[If(test=Name(id='leading', ctx=Load()), body=[Expr(value=Yield(value=Call(func=Name(id='_Segment', ctx=Load()), args=[BinOp(left=Call(func=Attribute(value=Name(id='_box', ctx=Load()), attr='get_row', ctx=Load()), args=[Name(id='widths', ctx=Load()), Constant(value='mid')], keywords=[keyword(arg='edge', value=Name(id='show_edge', ctx=Load()))]), op=Mult(), right=Name(id='leading', ctx=Load())), Name(id='border_style', ctx=Load())], keywords=[])))], orelse=[Expr(value=Yield(value=Call(func=Name(id='_Segment', ctx=Load()), args=[Call(func=Attribute(value=Name(id='_box', ctx=Load()), attr='get_row', ctx=Load()), args=[Name(id='widths', ctx=Load()), Constant(value='row')], keywords=[keyword(arg='edge', value=Name(id='show_edge', ctx=Load()))]), Name(id='border_style', ctx=Load())], keywords=[])))]), Expr(value=Yield(value=Name(id='new_line', ctx=Load())))], orelse=[])], orelse=[])], orelse=[]), If(test=BoolOp(op=And(), values=[Name(id='_box', ctx=Load()), Name(id='show_edge', ctx=Load())]), body=[Expr(value=Yield(value=Call(func=Name(id='_Segment', ctx=Load()), args=[Call(func=Attribute(value=Name(id='_box', ctx=Load()), attr='get_bottom', ctx=Load()), args=[Name(id='widths', ctx=Load())], keywords=[]), Name(id='border_style', ctx=Load())], keywords=[]))), Expr(value=Yield(value=Name(id='new_line', ctx=Load())))], orelse=[])], decorator_list=[], returns=Constant(value='RenderResult'))], decorator_list=[]), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__')]), body=[ImportFrom(module='pip._vendor.rich.console', names=[alias(name='Console')], level=0), ImportFrom(module='pip._vendor.rich.highlighter', names=[alias(name='ReprHighlighter')], level=0), ImportFrom(module='pip._vendor.rich.table', names=[alias(name='Table', asname='Table')], level=0), ImportFrom(module='_timer', names=[alias(name='timer')], level=1), With(items=[withitem(context_expr=Call(func=Name(id='timer', ctx=Load()), args=[Constant(value='Table render')], keywords=[]))], body=[Assign(targets=[Name(id='table', ctx=Store())], value=Call(func=Name(id='Table', ctx=Load()), args=[], keywords=[keyword(arg='title', value=Constant(value='Star Wars Movies')), keyword(arg='caption', value=Constant(value='Rich example table')), keyword(arg='caption_justify', value=Constant(value='right'))])), Expr(value=Call(func=Attribute(value=Name(id='table', ctx=Load()), attr='add_column', ctx=Load()), args=[Constant(value='Released')], keywords=[keyword(arg='header_style', value=Constant(value='bright_cyan')), keyword(arg='style', value=Constant(value='cyan')), keyword(arg='no_wrap', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Name(id='table', ctx=Load()), attr='add_column', ctx=Load()), args=[Constant(value='Title')], keywords=[keyword(arg='style', value=Constant(value='magenta'))])), Expr(value=Call(func=Attribute(value=Name(id='table', ctx=Load()), attr='add_column', ctx=Load()), args=[Constant(value='Box Office')], keywords=[keyword(arg='justify', value=Constant(value='right')), keyword(arg='style', value=Constant(value='green'))])), Expr(value=Call(func=Attribute(value=Name(id='table', ctx=Load()), attr='add_row', ctx=Load()), args=[Constant(value='Dec 20, 2019'), Constant(value='Star Wars: The Rise of Skywalker'), Constant(value='$952,110,690')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='table', ctx=Load()), attr='add_row', ctx=Load()), args=[Constant(value='May 25, 2018'), Constant(value='Solo: A Star Wars Story'), Constant(value='$393,151,347')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='table', ctx=Load()), attr='add_row', ctx=Load()), args=[Constant(value='Dec 15, 2017'), Constant(value='Star Wars Ep. V111: The Last Jedi'), Constant(value='$1,332,539,889')], keywords=[keyword(arg='style', value=Constant(value='on black')), keyword(arg='end_section', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Name(id='table', ctx=Load()), attr='add_row', ctx=Load()), args=[Constant(value='Dec 16, 2016'), Constant(value='Rogue One: A Star Wars Story'), Constant(value='$1,332,439,889')], keywords=[])), FunctionDef(name='header', args=arguments(posonlyargs=[], args=[arg(arg='text', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='print', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='rule', ctx=Load()), args=[Call(func=Name(id='highlight', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='print', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), Assign(targets=[Name(id='console', ctx=Store())], value=Call(func=Name(id='Console', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='highlight', ctx=Store())], value=Call(func=Name(id='ReprHighlighter', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Name(id='header', ctx=Load()), args=[Constant(value='Example Table')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='print', ctx=Load()), args=[Name(id='table', ctx=Load())], keywords=[keyword(arg='justify', value=Constant(value='center'))])), Assign(targets=[Attribute(value=Name(id='table', ctx=Load()), attr='expand', ctx=Store())], value=Constant(value=True)), Expr(value=Call(func=Name(id='header', ctx=Load()), args=[Constant(value='expand=True')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='print', ctx=Load()), args=[Name(id='table', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='table', ctx=Load()), attr='width', ctx=Store())], value=Constant(value=50)), Expr(value=Call(func=Name(id='header', ctx=Load()), args=[Constant(value='width=50')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='print', ctx=Load()), args=[Name(id='table', ctx=Load())], keywords=[keyword(arg='justify', value=Constant(value='center'))])), Assign(targets=[Attribute(value=Name(id='table', ctx=Load()), attr='width', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='table', ctx=Load()), attr='expand', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id='table', ctx=Load()), attr='row_styles', ctx=Store())], value=List(elts=[Constant(value='dim'), Constant(value='none')], ctx=Load())), Expr(value=Call(func=Name(id='header', ctx=Load()), args=[Constant(value="row_styles=['dim', 'none']")], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='print', ctx=Load()), args=[Name(id='table', ctx=Load())], keywords=[keyword(arg='justify', value=Constant(value='center'))])), Assign(targets=[Attribute(value=Name(id='table', ctx=Load()), attr='width', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='table', ctx=Load()), attr='expand', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id='table', ctx=Load()), attr='row_styles', ctx=Store())], value=List(elts=[Constant(value='dim'), Constant(value='none')], ctx=Load())), Assign(targets=[Attribute(value=Name(id='table', ctx=Load()), attr='leading', ctx=Store())], value=Constant(value=1)), Expr(value=Call(func=Name(id='header', ctx=Load()), args=[Constant(value="leading=1, row_styles=['dim', 'none']")], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='print', ctx=Load()), args=[Name(id='table', ctx=Load())], keywords=[keyword(arg='justify', value=Constant(value='center'))])), Assign(targets=[Attribute(value=Name(id='table', ctx=Load()), attr='width', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='table', ctx=Load()), attr='expand', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id='table', ctx=Load()), attr='row_styles', ctx=Store())], value=List(elts=[Constant(value='dim'), Constant(value='none')], ctx=Load())), Assign(targets=[Attribute(value=Name(id='table', ctx=Load()), attr='show_lines', ctx=Store())], value=Constant(value=True)), Assign(targets=[Attribute(value=Name(id='table', ctx=Load()), attr='leading', ctx=Store())], value=Constant(value=0)), Expr(value=Call(func=Name(id='header', ctx=Load()), args=[Constant(value="show_lines=True, row_styles=['dim', 'none']")], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='print', ctx=Load()), args=[Name(id='table', ctx=Load())], keywords=[keyword(arg='justify', value=Constant(value='center'))]))])], orelse=[])], type_ignores=[])