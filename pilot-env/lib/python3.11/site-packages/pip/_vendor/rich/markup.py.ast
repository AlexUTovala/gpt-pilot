Module(body=[Import(names=[alias(name='re')]), ImportFrom(module='ast', names=[alias(name='literal_eval')], level=0), ImportFrom(module='operator', names=[alias(name='attrgetter')], level=0), ImportFrom(module='typing', names=[alias(name='Callable'), alias(name='Iterable'), alias(name='List'), alias(name='Match'), alias(name='NamedTuple'), alias(name='Optional'), alias(name='Tuple'), alias(name='Union')], level=0), ImportFrom(module='_emoji_replace', names=[alias(name='_emoji_replace')], level=1), ImportFrom(module='emoji', names=[alias(name='EmojiVariant')], level=1), ImportFrom(module='errors', names=[alias(name='MarkupError')], level=1), ImportFrom(module='style', names=[alias(name='Style')], level=1), ImportFrom(module='text', names=[alias(name='Span'), alias(name='Text')], level=1), Assign(targets=[Name(id='RE_TAGS', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='((\\\\*)\\[([a-z#/@][^[]*?)])'), Attribute(value=Name(id='re', ctx=Load()), attr='VERBOSE', ctx=Load())], keywords=[])), Assign(targets=[Name(id='RE_HANDLER', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='^([\\w.]*?)(\\(.*?\\))?$')], keywords=[])), ClassDef(name='Tag', bases=[Name(id='NamedTuple', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A tag in console markup.')), AnnAssign(target=Name(id='name', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), Expr(value=Constant(value="The tag name. e.g. 'bold'.")), AnnAssign(target=Name(id='parameters', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), simple=1), Expr(value=Constant(value='Any additional parameters after the name.')), FunctionDef(name='__str__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=IfExp(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='parameters', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), orelse=JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), conversion=-1), Constant(value=' '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='parameters', ctx=Load()), conversion=-1)])))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='markup', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get the string representation of this tag.')), Return(value=IfExp(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='parameters', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=JoinedStr(values=[Constant(value='['), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), conversion=-1), Constant(value=']')]), orelse=JoinedStr(values=[Constant(value='['), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), conversion=-1), Constant(value='='), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='parameters', ctx=Load()), conversion=-1), Constant(value=']')])))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='_ReStringMatch', ctx=Store())], value=Subscript(value=Name(id='Match', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='_ReSubCallable', ctx=Store())], value=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='_ReStringMatch', ctx=Load())], ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='_EscapeSubMethod', ctx=Store())], value=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='_ReSubCallable', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='escape', args=arguments(posonlyargs=[], args=[arg(arg='markup', annotation=Name(id='str', ctx=Load())), arg(arg='_escape', annotation=Name(id='_EscapeSubMethod', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Attribute(value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='(\\\\*)(\\[[a-z#/@][^[]*?])')], keywords=[]), attr='sub', ctx=Load())]), body=[Expr(value=Constant(value="Escapes text so that it won't be interpreted as markup.\n\n    Args:\n        markup (str): Content to be inserted in to markup.\n\n    Returns:\n        str: Markup with square brackets escaped.\n    ")), FunctionDef(name='escape_backslashes', args=arguments(posonlyargs=[], args=[arg(arg='match', annotation=Subscript(value=Name(id='Match', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Called by re.sub replace matches.')), Assign(targets=[Tuple(elts=[Name(id='backslashes', ctx=Store()), Name(id='text', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='groups', ctx=Load()), args=[], keywords=[])), Return(value=JoinedStr(values=[FormattedValue(value=Name(id='backslashes', ctx=Load()), conversion=-1), FormattedValue(value=Name(id='backslashes', ctx=Load()), conversion=-1), Constant(value='\\'), FormattedValue(value=Name(id='text', ctx=Load()), conversion=-1)]))], decorator_list=[], returns=Name(id='str', ctx=Load())), Assign(targets=[Name(id='markup', ctx=Store())], value=Call(func=Name(id='_escape', ctx=Load()), args=[Name(id='escape_backslashes', ctx=Load()), Name(id='markup', ctx=Load())], keywords=[])), Return(value=Name(id='markup', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='_parse', args=arguments(posonlyargs=[], args=[arg(arg='markup', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Parse markup in to an iterable of tuples of (position, text, tag).\n\n    Args:\n        markup (str): A string containing console markup\n\n    ')), Assign(targets=[Name(id='position', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='_divmod', ctx=Store())], value=Name(id='divmod', ctx=Load())), Assign(targets=[Name(id='_Tag', ctx=Store())], value=Name(id='Tag', ctx=Load())), For(target=Name(id='match', ctx=Store()), iter=Call(func=Attribute(value=Name(id='RE_TAGS', ctx=Load()), attr='finditer', ctx=Load()), args=[Name(id='markup', ctx=Load())], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='full_text', ctx=Store()), Name(id='escapes', ctx=Store()), Name(id='tag_text', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='groups', ctx=Load()), args=[], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='start', ctx=Store()), Name(id='end', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='span', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='start', ctx=Load()), ops=[Gt()], comparators=[Name(id='position', ctx=Load())]), body=[Expr(value=Yield(value=Tuple(elts=[Name(id='start', ctx=Load()), Subscript(value=Name(id='markup', ctx=Load()), slice=Slice(lower=Name(id='position', ctx=Load()), upper=Name(id='start', ctx=Load())), ctx=Load()), Constant(value=None)], ctx=Load())))], orelse=[]), If(test=Name(id='escapes', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='backslashes', ctx=Store()), Name(id='escaped', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_divmod', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='escapes', ctx=Load())], keywords=[]), Constant(value=2)], keywords=[])), If(test=Name(id='backslashes', ctx=Load()), body=[Expr(value=Yield(value=Tuple(elts=[Name(id='start', ctx=Load()), BinOp(left=Constant(value='\\'), op=Mult(), right=Name(id='backslashes', ctx=Load())), Constant(value=None)], ctx=Load()))), AugAssign(target=Name(id='start', ctx=Store()), op=Add(), value=BinOp(left=Name(id='backslashes', ctx=Load()), op=Mult(), right=Constant(value=2)))], orelse=[]), If(test=Name(id='escaped', ctx=Load()), body=[Expr(value=Yield(value=Tuple(elts=[Name(id='start', ctx=Load()), Subscript(value=Name(id='full_text', ctx=Load()), slice=Slice(lower=Call(func=Name(id='len', ctx=Load()), args=[Name(id='escapes', ctx=Load())], keywords=[])), ctx=Load()), Constant(value=None)], ctx=Load()))), Assign(targets=[Name(id='position', ctx=Store())], value=Name(id='end', ctx=Load())), Continue()], orelse=[])], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='text', ctx=Store()), Name(id='equals', ctx=Store()), Name(id='parameters', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='tag_text', ctx=Load()), attr='partition', ctx=Load()), args=[Constant(value='=')], keywords=[])), Expr(value=Yield(value=Tuple(elts=[Name(id='start', ctx=Load()), Constant(value=None), Call(func=Name(id='_Tag', ctx=Load()), args=[Name(id='text', ctx=Load()), IfExp(test=Name(id='equals', ctx=Load()), body=Name(id='parameters', ctx=Load()), orelse=Constant(value=None))], keywords=[])], ctx=Load()))), Assign(targets=[Name(id='position', ctx=Store())], value=Name(id='end', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='position', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='markup', ctx=Load())], keywords=[])]), body=[Expr(value=Yield(value=Tuple(elts=[Name(id='position', ctx=Load()), Subscript(value=Name(id='markup', ctx=Load()), slice=Slice(lower=Name(id='position', ctx=Load())), ctx=Load()), Constant(value=None)], ctx=Load())))], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Tag', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='render', args=arguments(posonlyargs=[], args=[arg(arg='markup', annotation=Name(id='str', ctx=Load())), arg(arg='style', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Style', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='emoji', annotation=Name(id='bool', ctx=Load())), arg(arg='emoji_variant', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='EmojiVariant', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=''), Constant(value=True), Constant(value=None)]), body=[Expr(value=Constant(value='Render console markup in to a Text instance.\n\n    Args:\n        markup (str): A string containing console markup.\n        emoji (bool, optional): Also render emoji code. Defaults to True.\n\n    Raises:\n        MarkupError: If there is a syntax error in the markup.\n\n    Returns:\n        Text: A test instance.\n    ')), Assign(targets=[Name(id='emoji_replace', ctx=Store())], value=Name(id='_emoji_replace', ctx=Load())), If(test=Compare(left=Constant(value='['), ops=[NotIn()], comparators=[Name(id='markup', ctx=Load())]), body=[Return(value=Call(func=Name(id='Text', ctx=Load()), args=[IfExp(test=Name(id='emoji', ctx=Load()), body=Call(func=Name(id='emoji_replace', ctx=Load()), args=[Name(id='markup', ctx=Load())], keywords=[keyword(arg='default_variant', value=Name(id='emoji_variant', ctx=Load()))]), orelse=Name(id='markup', ctx=Load()))], keywords=[keyword(arg='style', value=Name(id='style', ctx=Load()))]))], orelse=[]), Assign(targets=[Name(id='text', ctx=Store())], value=Call(func=Name(id='Text', ctx=Load()), args=[], keywords=[keyword(arg='style', value=Name(id='style', ctx=Load()))])), Assign(targets=[Name(id='append', ctx=Store())], value=Attribute(value=Name(id='text', ctx=Load()), attr='append', ctx=Load())), Assign(targets=[Name(id='normalize', ctx=Store())], value=Attribute(value=Name(id='Style', ctx=Load()), attr='normalize', ctx=Load())), AnnAssign(target=Name(id='style_stack', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='Tag', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), Assign(targets=[Name(id='pop', ctx=Store())], value=Attribute(value=Name(id='style_stack', ctx=Load()), attr='pop', ctx=Load())), AnnAssign(target=Name(id='spans', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Span', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), Assign(targets=[Name(id='append_span', ctx=Store())], value=Attribute(value=Name(id='spans', ctx=Load()), attr='append', ctx=Load())), Assign(targets=[Name(id='_Span', ctx=Store())], value=Name(id='Span', ctx=Load())), Assign(targets=[Name(id='_Tag', ctx=Store())], value=Name(id='Tag', ctx=Load())), FunctionDef(name='pop_style', args=arguments(posonlyargs=[], args=[arg(arg='style_name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Pop tag matching given style name.')), For(target=Tuple(elts=[Name(id='index', ctx=Store()), Tuple(elts=[Name(id='_', ctx=Store()), Name(id='tag', ctx=Store())], ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Call(func=Name(id='reversed', ctx=Load()), args=[Name(id='style_stack', ctx=Load())], keywords=[]), Constant(value=1)], keywords=[]), body=[If(test=Compare(left=Attribute(value=Name(id='tag', ctx=Load()), attr='name', ctx=Load()), ops=[Eq()], comparators=[Name(id='style_name', ctx=Load())]), body=[Return(value=Call(func=Name(id='pop', ctx=Load()), args=[UnaryOp(op=USub(), operand=Name(id='index', ctx=Load()))], keywords=[]))], orelse=[])], orelse=[]), Raise(exc=Call(func=Name(id='KeyError', ctx=Load()), args=[Name(id='style_name', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='Tag', ctx=Load())], ctx=Load()), ctx=Load())), For(target=Tuple(elts=[Name(id='position', ctx=Store()), Name(id='plain_text', ctx=Store()), Name(id='tag', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='_parse', ctx=Load()), args=[Name(id='markup', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='plain_text', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='plain_text', ctx=Store())], value=Call(func=Attribute(value=Name(id='plain_text', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='\\['), Constant(value='[')], keywords=[])), Expr(value=Call(func=Name(id='append', ctx=Load()), args=[IfExp(test=Name(id='emoji', ctx=Load()), body=Call(func=Name(id='emoji_replace', ctx=Load()), args=[Name(id='plain_text', ctx=Load())], keywords=[]), orelse=Name(id='plain_text', ctx=Load()))], keywords=[]))], orelse=[If(test=Compare(left=Name(id='tag', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[If(test=Call(func=Attribute(value=Attribute(value=Name(id='tag', ctx=Load()), attr='name', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='/')], keywords=[]), body=[Assign(targets=[Name(id='style_name', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='tag', ctx=Load()), attr='name', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[])), If(test=Name(id='style_name', ctx=Load()), body=[Assign(targets=[Name(id='style_name', ctx=Store())], value=Call(func=Name(id='normalize', ctx=Load()), args=[Name(id='style_name', ctx=Load())], keywords=[])), Try(body=[Assign(targets=[Tuple(elts=[Name(id='start', ctx=Store()), Name(id='open_tag', ctx=Store())], ctx=Store())], value=Call(func=Name(id='pop_style', ctx=Load()), args=[Name(id='style_name', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='MarkupError', ctx=Load()), args=[JoinedStr(values=[Constant(value="closing tag '"), FormattedValue(value=Attribute(value=Name(id='tag', ctx=Load()), attr='markup', ctx=Load()), conversion=-1), Constant(value="' at position "), FormattedValue(value=Name(id='position', ctx=Load()), conversion=-1), Constant(value=" doesn't match any open tag")])], keywords=[]), cause=Constant(value=None))])], orelse=[], finalbody=[])], orelse=[Try(body=[Assign(targets=[Tuple(elts=[Name(id='start', ctx=Store()), Name(id='open_tag', ctx=Store())], ctx=Store())], value=Call(func=Name(id='pop', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Name(id='IndexError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='MarkupError', ctx=Load()), args=[JoinedStr(values=[Constant(value="closing tag '[/]' at position "), FormattedValue(value=Name(id='position', ctx=Load()), conversion=-1), Constant(value=' has nothing to close')])], keywords=[]), cause=Constant(value=None))])], orelse=[], finalbody=[])]), If(test=Call(func=Attribute(value=Attribute(value=Name(id='open_tag', ctx=Load()), attr='name', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='@')], keywords=[]), body=[If(test=Attribute(value=Name(id='open_tag', ctx=Load()), attr='parameters', ctx=Load()), body=[Assign(targets=[Name(id='handler_name', ctx=Store())], value=Constant(value='')), Assign(targets=[Name(id='parameters', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='open_tag', ctx=Load()), attr='parameters', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='handler_match', ctx=Store())], value=Call(func=Attribute(value=Name(id='RE_HANDLER', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='parameters', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='handler_match', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Tuple(elts=[Name(id='handler_name', ctx=Store()), Name(id='match_parameters', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='handler_match', ctx=Load()), attr='groups', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='parameters', ctx=Store())], value=IfExp(test=Compare(left=Name(id='match_parameters', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Constant(value='()'), orelse=Name(id='match_parameters', ctx=Load())))], orelse=[]), Try(body=[Assign(targets=[Name(id='meta_params', ctx=Store())], value=Call(func=Name(id='literal_eval', ctx=Load()), args=[Name(id='parameters', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='SyntaxError', ctx=Load()), name='error', body=[Raise(exc=Call(func=Name(id='MarkupError', ctx=Load()), args=[JoinedStr(values=[Constant(value='error parsing '), FormattedValue(value=Name(id='parameters', ctx=Load()), conversion=114), Constant(value=' in '), FormattedValue(value=Attribute(value=Name(id='open_tag', ctx=Load()), attr='parameters', ctx=Load()), conversion=114), Constant(value='; '), FormattedValue(value=Attribute(value=Name(id='error', ctx=Load()), attr='msg', ctx=Load()), conversion=-1)])], keywords=[]))]), ExceptHandler(type=Name(id='Exception', ctx=Load()), name='error', body=[Raise(exc=Call(func=Name(id='MarkupError', ctx=Load()), args=[JoinedStr(values=[Constant(value='error parsing '), FormattedValue(value=Attribute(value=Name(id='open_tag', ctx=Load()), attr='parameters', ctx=Load()), conversion=114), Constant(value='; '), FormattedValue(value=Name(id='error', ctx=Load()), conversion=-1)])], keywords=[]), cause=Constant(value=None))])], orelse=[], finalbody=[]), If(test=Name(id='handler_name', ctx=Load()), body=[Assign(targets=[Name(id='meta_params', ctx=Store())], value=Tuple(elts=[Name(id='handler_name', ctx=Load()), IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='meta_params', ctx=Load()), Name(id='tuple', ctx=Load())], keywords=[]), body=Name(id='meta_params', ctx=Load()), orelse=Tuple(elts=[Name(id='meta_params', ctx=Load())], ctx=Load()))], ctx=Load()))], orelse=[])], orelse=[Assign(targets=[Name(id='meta_params', ctx=Store())], value=Tuple(elts=[], ctx=Load()))]), Expr(value=Call(func=Name(id='append_span', ctx=Load()), args=[Call(func=Name(id='_Span', ctx=Load()), args=[Name(id='start', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[]), Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='meta', value=Dict(keys=[Attribute(value=Name(id='open_tag', ctx=Load()), attr='name', ctx=Load())], values=[Name(id='meta_params', ctx=Load())]))])], keywords=[])], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='append_span', ctx=Load()), args=[Call(func=Name(id='_Span', ctx=Load()), args=[Name(id='start', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[]), Call(func=Name(id='str', ctx=Load()), args=[Name(id='open_tag', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))])], orelse=[Assign(targets=[Name(id='normalized_tag', ctx=Store())], value=Call(func=Name(id='_Tag', ctx=Load()), args=[Call(func=Name(id='normalize', ctx=Load()), args=[Attribute(value=Name(id='tag', ctx=Load()), attr='name', ctx=Load())], keywords=[]), Attribute(value=Name(id='tag', ctx=Load()), attr='parameters', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='style_stack', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[]), Name(id='normalized_tag', ctx=Load())], ctx=Load())], keywords=[]))])], orelse=[])])], orelse=[]), Assign(targets=[Name(id='text_length', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[])), While(test=Name(id='style_stack', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='start', ctx=Store()), Name(id='tag', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='style_stack', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='style', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='tag', ctx=Load())], keywords=[])), If(test=Name(id='style', ctx=Load()), body=[Expr(value=Call(func=Name(id='append_span', ctx=Load()), args=[Call(func=Name(id='_Span', ctx=Load()), args=[Name(id='start', ctx=Load()), Name(id='text_length', ctx=Load()), Name(id='style', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Attribute(value=Name(id='text', ctx=Load()), attr='spans', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Subscript(value=Name(id='spans', ctx=Load()), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[keyword(arg='key', value=Call(func=Name(id='attrgetter', ctx=Load()), args=[Constant(value='start')], keywords=[]))])), Return(value=Name(id='text', ctx=Load()))], decorator_list=[], returns=Name(id='Text', ctx=Load())), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__')]), body=[Assign(targets=[Name(id='MARKUP', ctx=Store())], value=List(elts=[Constant(value='[red]Hello World[/red]'), Constant(value='[magenta]Hello [b]World[/b]'), Constant(value='[bold]Bold[italic] bold and italic [/bold]italic[/italic]'), Constant(value='Click [link=https://www.willmcgugan.com]here[/link] to visit my Blog'), Constant(value=':warning-emoji: [bold red blink] DANGER![/]')], ctx=Load())), ImportFrom(module='pip._vendor.rich', names=[alias(name='print')], level=0), ImportFrom(module='pip._vendor.rich.table', names=[alias(name='Table')], level=0), Assign(targets=[Name(id='grid', ctx=Store())], value=Call(func=Name(id='Table', ctx=Load()), args=[Constant(value='Markup'), Constant(value='Result')], keywords=[keyword(arg='padding', value=Tuple(elts=[Constant(value=0), Constant(value=1)], ctx=Load()))])), For(target=Name(id='markup', ctx=Store()), iter=Name(id='MARKUP', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='grid', ctx=Load()), attr='add_row', ctx=Load()), args=[Call(func=Name(id='Text', ctx=Load()), args=[Name(id='markup', ctx=Load())], keywords=[]), Name(id='markup', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Name(id='grid', ctx=Load())], keywords=[]))], orelse=[])], type_ignores=[])