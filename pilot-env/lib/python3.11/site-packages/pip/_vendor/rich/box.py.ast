Module(body=[Import(names=[alias(name='sys')]), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING'), alias(name='Iterable'), alias(name='List')], level=0), If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), ops=[GtE()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=8)], ctx=Load())]), body=[ImportFrom(module='typing', names=[alias(name='Literal')], level=0)], orelse=[ImportFrom(module='pip._vendor.typing_extensions', names=[alias(name='Literal')], level=0)]), ImportFrom(module='_loop', names=[alias(name='loop_last')], level=1), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='pip._vendor.rich.console', names=[alias(name='ConsoleOptions')], level=0)], orelse=[]), ClassDef(name='Box', bases=[], keywords=[], body=[Expr(value=Constant(value='Defines characters to render boxes.\n\n    ┌─┬┐ top\n    │ ││ head\n    ├─┼┤ head_row\n    │ ││ mid\n    ├─┼┤ row\n    ├─┼┤ foot_row\n    │ ││ foot\n    └─┴┘ bottom\n\n    Args:\n        box (str): Characters making up box.\n        ascii (bool, optional): True if this box uses ascii characters only. Default is False.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='box', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[arg(arg='ascii', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=False)], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_box', ctx=Store())], value=Name(id='box', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='ascii', ctx=Store())], value=Name(id='ascii', ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='line1', ctx=Store()), Name(id='line2', ctx=Store()), Name(id='line3', ctx=Store()), Name(id='line4', ctx=Store()), Name(id='line5', ctx=Store()), Name(id='line6', ctx=Store()), Name(id='line7', ctx=Store()), Name(id='line8', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='box', ctx=Load()), attr='splitlines', ctx=Load()), args=[], keywords=[])), Assign(targets=[Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='top_left', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='top', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='top_divider', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='top_right', ctx=Store())], ctx=Store())], value=Call(func=Name(id='iter', ctx=Load()), args=[Name(id='line1', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='head_left', ctx=Store()), Name(id='_', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='head_vertical', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='head_right', ctx=Store())], ctx=Store())], value=Call(func=Name(id='iter', ctx=Load()), args=[Name(id='line2', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='head_row_left', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='head_row_horizontal', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='head_row_cross', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='head_row_right', ctx=Store())], ctx=Store())], value=Call(func=Name(id='iter', ctx=Load()), args=[Name(id='line3', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='mid_left', ctx=Store()), Name(id='_', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='mid_vertical', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='mid_right', ctx=Store())], ctx=Store())], value=Call(func=Name(id='iter', ctx=Load()), args=[Name(id='line4', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='row_left', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='row_horizontal', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='row_cross', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='row_right', ctx=Store())], ctx=Store())], value=Call(func=Name(id='iter', ctx=Load()), args=[Name(id='line5', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='foot_row_left', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='foot_row_horizontal', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='foot_row_cross', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='foot_row_right', ctx=Store())], ctx=Store())], value=Call(func=Name(id='iter', ctx=Load()), args=[Name(id='line6', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='foot_left', ctx=Store()), Name(id='_', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='foot_vertical', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='foot_right', ctx=Store())], ctx=Store())], value=Call(func=Name(id='iter', ctx=Load()), args=[Name(id='line7', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='bottom_left', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='bottom', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='bottom_divider', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='bottom_right', ctx=Store())], ctx=Store())], value=Call(func=Name(id='iter', ctx=Load()), args=[Name(id='line8', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value='Box(...)'))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='__str__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_box', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='substitute', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='options', annotation=Constant(value='ConsoleOptions')), arg(arg='safe', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Expr(value=Constant(value="Substitute this box for another if it won't render due to platform issues.\n\n        Args:\n            options (ConsoleOptions): Console options used in rendering.\n            safe (bool, optional): Substitute this for another Box if there are known problems\n                displaying on the platform (currently only relevant on Windows). Default is True.\n\n        Returns:\n            Box: A different Box or the same Box.\n        ")), Assign(targets=[Name(id='box', ctx=Store())], value=Name(id='self', ctx=Load())), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='options', ctx=Load()), attr='legacy_windows', ctx=Load()), Name(id='safe', ctx=Load())]), body=[Assign(targets=[Name(id='box', ctx=Store())], value=Call(func=Attribute(value=Name(id='LEGACY_WINDOWS_SUBSTITUTIONS', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='box', ctx=Load()), Name(id='box', ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='options', ctx=Load()), attr='ascii_only', ctx=Load()), UnaryOp(op=Not(), operand=Attribute(value=Name(id='box', ctx=Load()), attr='ascii', ctx=Load()))]), body=[Assign(targets=[Name(id='box', ctx=Store())], value=Name(id='ASCII', ctx=Load()))], orelse=[]), Return(value=Name(id='box', ctx=Load()))], decorator_list=[], returns=Constant(value='Box')), FunctionDef(name='get_plain_headed_box', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="If this box uses special characters for the borders of the header, then\n        return the equivalent box that does not.\n\n        Returns:\n            Box: The most similar Box that doesn't use header-specific box characters.\n                If the current Box already satisfies this criterion, then it's returned.\n        ")), Return(value=Call(func=Attribute(value=Name(id='PLAIN_HEADED_SUBSTITUTIONS', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value='Box')), FunctionDef(name='get_top', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='widths', annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get the top of a simple box.\n\n        Args:\n            widths (List[int]): Widths of columns.\n\n        Returns:\n            str: A string of box characters.\n        ')), AnnAssign(target=Name(id='parts', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), Assign(targets=[Name(id='append', ctx=Store())], value=Attribute(value=Name(id='parts', ctx=Load()), attr='append', ctx=Load())), Expr(value=Call(func=Name(id='append', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='top_left', ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='last', ctx=Store()), Name(id='width', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='loop_last', ctx=Load()), args=[Name(id='widths', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Name(id='append', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='top', ctx=Load()), op=Mult(), right=Name(id='width', ctx=Load()))], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='last', ctx=Load())), body=[Expr(value=Call(func=Name(id='append', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='top_divider', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Expr(value=Call(func=Name(id='append', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='top_right', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Name(id='parts', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='get_row', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='widths', annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='level', annotation=Subscript(value=Name(id='Literal', ctx=Load()), slice=Tuple(elts=[Constant(value='head'), Constant(value='row'), Constant(value='foot'), Constant(value='mid')], ctx=Load()), ctx=Load())), arg(arg='edge', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='row'), Constant(value=True)]), body=[Expr(value=Constant(value='Get the top of a simple box.\n\n        Args:\n            width (List[int]): Widths of columns.\n\n        Returns:\n            str: A string of box characters.\n        ')), If(test=Compare(left=Name(id='level', ctx=Load()), ops=[Eq()], comparators=[Constant(value='head')]), body=[Assign(targets=[Name(id='left', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='head_row_left', ctx=Load())), Assign(targets=[Name(id='horizontal', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='head_row_horizontal', ctx=Load())), Assign(targets=[Name(id='cross', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='head_row_cross', ctx=Load())), Assign(targets=[Name(id='right', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='head_row_right', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='level', ctx=Load()), ops=[Eq()], comparators=[Constant(value='row')]), body=[Assign(targets=[Name(id='left', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='row_left', ctx=Load())), Assign(targets=[Name(id='horizontal', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='row_horizontal', ctx=Load())), Assign(targets=[Name(id='cross', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='row_cross', ctx=Load())), Assign(targets=[Name(id='right', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='row_right', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='level', ctx=Load()), ops=[Eq()], comparators=[Constant(value='mid')]), body=[Assign(targets=[Name(id='left', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='mid_left', ctx=Load())), Assign(targets=[Name(id='horizontal', ctx=Store())], value=Constant(value=' ')), Assign(targets=[Name(id='cross', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='mid_vertical', ctx=Load())), Assign(targets=[Name(id='right', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='mid_right', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='level', ctx=Load()), ops=[Eq()], comparators=[Constant(value='foot')]), body=[Assign(targets=[Name(id='left', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='foot_row_left', ctx=Load())), Assign(targets=[Name(id='horizontal', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='foot_row_horizontal', ctx=Load())), Assign(targets=[Name(id='cross', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='foot_row_cross', ctx=Load())), Assign(targets=[Name(id='right', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='foot_row_right', ctx=Load()))], orelse=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value="level must be 'head', 'row' or 'foot'")], keywords=[]))])])])]), AnnAssign(target=Name(id='parts', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), Assign(targets=[Name(id='append', ctx=Store())], value=Attribute(value=Name(id='parts', ctx=Load()), attr='append', ctx=Load())), If(test=Name(id='edge', ctx=Load()), body=[Expr(value=Call(func=Name(id='append', ctx=Load()), args=[Name(id='left', ctx=Load())], keywords=[]))], orelse=[]), For(target=Tuple(elts=[Name(id='last', ctx=Store()), Name(id='width', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='loop_last', ctx=Load()), args=[Name(id='widths', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Name(id='append', ctx=Load()), args=[BinOp(left=Name(id='horizontal', ctx=Load()), op=Mult(), right=Name(id='width', ctx=Load()))], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='last', ctx=Load())), body=[Expr(value=Call(func=Name(id='append', ctx=Load()), args=[Name(id='cross', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), If(test=Name(id='edge', ctx=Load()), body=[Expr(value=Call(func=Name(id='append', ctx=Load()), args=[Name(id='right', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Name(id='parts', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='get_bottom', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='widths', annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get the bottom of a simple box.\n\n        Args:\n            widths (List[int]): Widths of columns.\n\n        Returns:\n            str: A string of box characters.\n        ')), AnnAssign(target=Name(id='parts', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), Assign(targets=[Name(id='append', ctx=Store())], value=Attribute(value=Name(id='parts', ctx=Load()), attr='append', ctx=Load())), Expr(value=Call(func=Name(id='append', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='bottom_left', ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='last', ctx=Store()), Name(id='width', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='loop_last', ctx=Load()), args=[Name(id='widths', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Name(id='append', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='bottom', ctx=Load()), op=Mult(), right=Name(id='width', ctx=Load()))], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='last', ctx=Load())), body=[Expr(value=Call(func=Name(id='append', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='bottom_divider', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Expr(value=Call(func=Name(id='append', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='bottom_right', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Name(id='parts', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[]), AnnAssign(target=Name(id='ASCII', ctx=Store()), annotation=Name(id='Box', ctx=Load()), value=Call(func=Name(id='Box', ctx=Load()), args=[Constant(value='+--+\n| ||\n|-+|\n| ||\n|-+|\n|-+|\n| ||\n+--+\n')], keywords=[keyword(arg='ascii', value=Constant(value=True))]), simple=1), AnnAssign(target=Name(id='ASCII2', ctx=Store()), annotation=Name(id='Box', ctx=Load()), value=Call(func=Name(id='Box', ctx=Load()), args=[Constant(value='+-++\n| ||\n+-++\n| ||\n+-++\n+-++\n| ||\n+-++\n')], keywords=[keyword(arg='ascii', value=Constant(value=True))]), simple=1), AnnAssign(target=Name(id='ASCII_DOUBLE_HEAD', ctx=Store()), annotation=Name(id='Box', ctx=Load()), value=Call(func=Name(id='Box', ctx=Load()), args=[Constant(value='+-++\n| ||\n+=++\n| ||\n+-++\n+-++\n| ||\n+-++\n')], keywords=[keyword(arg='ascii', value=Constant(value=True))]), simple=1), AnnAssign(target=Name(id='SQUARE', ctx=Store()), annotation=Name(id='Box', ctx=Load()), value=Call(func=Name(id='Box', ctx=Load()), args=[Constant(value='┌─┬┐\n│ ││\n├─┼┤\n│ ││\n├─┼┤\n├─┼┤\n│ ││\n└─┴┘\n')], keywords=[]), simple=1), AnnAssign(target=Name(id='SQUARE_DOUBLE_HEAD', ctx=Store()), annotation=Name(id='Box', ctx=Load()), value=Call(func=Name(id='Box', ctx=Load()), args=[Constant(value='┌─┬┐\n│ ││\n╞═╪╡\n│ ││\n├─┼┤\n├─┼┤\n│ ││\n└─┴┘\n')], keywords=[]), simple=1), AnnAssign(target=Name(id='MINIMAL', ctx=Store()), annotation=Name(id='Box', ctx=Load()), value=Call(func=Name(id='Box', ctx=Load()), args=[Constant(value='  ╷ \n  │ \n╶─┼╴\n  │ \n╶─┼╴\n╶─┼╴\n  │ \n  ╵ \n')], keywords=[]), simple=1), AnnAssign(target=Name(id='MINIMAL_HEAVY_HEAD', ctx=Store()), annotation=Name(id='Box', ctx=Load()), value=Call(func=Name(id='Box', ctx=Load()), args=[Constant(value='  ╷ \n  │ \n╺━┿╸\n  │ \n╶─┼╴\n╶─┼╴\n  │ \n  ╵ \n')], keywords=[]), simple=1), AnnAssign(target=Name(id='MINIMAL_DOUBLE_HEAD', ctx=Store()), annotation=Name(id='Box', ctx=Load()), value=Call(func=Name(id='Box', ctx=Load()), args=[Constant(value='  ╷ \n  │ \n ═╪ \n  │ \n ─┼ \n ─┼ \n  │ \n  ╵ \n')], keywords=[]), simple=1), AnnAssign(target=Name(id='SIMPLE', ctx=Store()), annotation=Name(id='Box', ctx=Load()), value=Call(func=Name(id='Box', ctx=Load()), args=[Constant(value='    \n    \n ── \n    \n    \n ── \n    \n    \n')], keywords=[]), simple=1), AnnAssign(target=Name(id='SIMPLE_HEAD', ctx=Store()), annotation=Name(id='Box', ctx=Load()), value=Call(func=Name(id='Box', ctx=Load()), args=[Constant(value='    \n    \n ── \n    \n    \n    \n    \n    \n')], keywords=[]), simple=1), AnnAssign(target=Name(id='SIMPLE_HEAVY', ctx=Store()), annotation=Name(id='Box', ctx=Load()), value=Call(func=Name(id='Box', ctx=Load()), args=[Constant(value='    \n    \n ━━ \n    \n    \n ━━ \n    \n    \n')], keywords=[]), simple=1), AnnAssign(target=Name(id='HORIZONTALS', ctx=Store()), annotation=Name(id='Box', ctx=Load()), value=Call(func=Name(id='Box', ctx=Load()), args=[Constant(value=' ── \n    \n ── \n    \n ── \n ── \n    \n ── \n')], keywords=[]), simple=1), AnnAssign(target=Name(id='ROUNDED', ctx=Store()), annotation=Name(id='Box', ctx=Load()), value=Call(func=Name(id='Box', ctx=Load()), args=[Constant(value='╭─┬╮\n│ ││\n├─┼┤\n│ ││\n├─┼┤\n├─┼┤\n│ ││\n╰─┴╯\n')], keywords=[]), simple=1), AnnAssign(target=Name(id='HEAVY', ctx=Store()), annotation=Name(id='Box', ctx=Load()), value=Call(func=Name(id='Box', ctx=Load()), args=[Constant(value='┏━┳┓\n┃ ┃┃\n┣━╋┫\n┃ ┃┃\n┣━╋┫\n┣━╋┫\n┃ ┃┃\n┗━┻┛\n')], keywords=[]), simple=1), AnnAssign(target=Name(id='HEAVY_EDGE', ctx=Store()), annotation=Name(id='Box', ctx=Load()), value=Call(func=Name(id='Box', ctx=Load()), args=[Constant(value='┏━┯┓\n┃ │┃\n┠─┼┨\n┃ │┃\n┠─┼┨\n┠─┼┨\n┃ │┃\n┗━┷┛\n')], keywords=[]), simple=1), AnnAssign(target=Name(id='HEAVY_HEAD', ctx=Store()), annotation=Name(id='Box', ctx=Load()), value=Call(func=Name(id='Box', ctx=Load()), args=[Constant(value='┏━┳┓\n┃ ┃┃\n┡━╇┩\n│ ││\n├─┼┤\n├─┼┤\n│ ││\n└─┴┘\n')], keywords=[]), simple=1), AnnAssign(target=Name(id='DOUBLE', ctx=Store()), annotation=Name(id='Box', ctx=Load()), value=Call(func=Name(id='Box', ctx=Load()), args=[Constant(value='╔═╦╗\n║ ║║\n╠═╬╣\n║ ║║\n╠═╬╣\n╠═╬╣\n║ ║║\n╚═╩╝\n')], keywords=[]), simple=1), AnnAssign(target=Name(id='DOUBLE_EDGE', ctx=Store()), annotation=Name(id='Box', ctx=Load()), value=Call(func=Name(id='Box', ctx=Load()), args=[Constant(value='╔═╤╗\n║ │║\n╟─┼╢\n║ │║\n╟─┼╢\n╟─┼╢\n║ │║\n╚═╧╝\n')], keywords=[]), simple=1), AnnAssign(target=Name(id='MARKDOWN', ctx=Store()), annotation=Name(id='Box', ctx=Load()), value=Call(func=Name(id='Box', ctx=Load()), args=[Constant(value='    \n| ||\n|-||\n| ||\n|-||\n|-||\n| ||\n    \n')], keywords=[keyword(arg='ascii', value=Constant(value=True))]), simple=1), Assign(targets=[Name(id='LEGACY_WINDOWS_SUBSTITUTIONS', ctx=Store())], value=Dict(keys=[Name(id='ROUNDED', ctx=Load()), Name(id='MINIMAL_HEAVY_HEAD', ctx=Load()), Name(id='SIMPLE_HEAVY', ctx=Load()), Name(id='HEAVY', ctx=Load()), Name(id='HEAVY_EDGE', ctx=Load()), Name(id='HEAVY_HEAD', ctx=Load())], values=[Name(id='SQUARE', ctx=Load()), Name(id='MINIMAL', ctx=Load()), Name(id='SIMPLE', ctx=Load()), Name(id='SQUARE', ctx=Load()), Name(id='SQUARE', ctx=Load()), Name(id='SQUARE', ctx=Load())])), Assign(targets=[Name(id='PLAIN_HEADED_SUBSTITUTIONS', ctx=Store())], value=Dict(keys=[Name(id='HEAVY_HEAD', ctx=Load()), Name(id='SQUARE_DOUBLE_HEAD', ctx=Load()), Name(id='MINIMAL_DOUBLE_HEAD', ctx=Load()), Name(id='MINIMAL_HEAVY_HEAD', ctx=Load()), Name(id='ASCII_DOUBLE_HEAD', ctx=Load())], values=[Name(id='SQUARE', ctx=Load()), Name(id='SQUARE', ctx=Load()), Name(id='MINIMAL', ctx=Load()), Name(id='MINIMAL', ctx=Load()), Name(id='ASCII2', ctx=Load())])), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__')]), body=[ImportFrom(module='pip._vendor.rich.columns', names=[alias(name='Columns')], level=0), ImportFrom(module='pip._vendor.rich.panel', names=[alias(name='Panel')], level=0), ImportFrom(names=[alias(name='box', asname='box')], level=1), ImportFrom(module='console', names=[alias(name='Console')], level=1), ImportFrom(module='table', names=[alias(name='Table')], level=1), ImportFrom(module='text', names=[alias(name='Text')], level=1), Assign(targets=[Name(id='console', ctx=Store())], value=Call(func=Name(id='Console', ctx=Load()), args=[], keywords=[keyword(arg='record', value=Constant(value=True))])), Assign(targets=[Name(id='BOXES', ctx=Store())], value=List(elts=[Constant(value='ASCII'), Constant(value='ASCII2'), Constant(value='ASCII_DOUBLE_HEAD'), Constant(value='SQUARE'), Constant(value='SQUARE_DOUBLE_HEAD'), Constant(value='MINIMAL'), Constant(value='MINIMAL_HEAVY_HEAD'), Constant(value='MINIMAL_DOUBLE_HEAD'), Constant(value='SIMPLE'), Constant(value='SIMPLE_HEAD'), Constant(value='SIMPLE_HEAVY'), Constant(value='HORIZONTALS'), Constant(value='ROUNDED'), Constant(value='HEAVY'), Constant(value='HEAVY_EDGE'), Constant(value='HEAVY_HEAD'), Constant(value='DOUBLE'), Constant(value='DOUBLE_EDGE'), Constant(value='MARKDOWN')], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='print', ctx=Load()), args=[Call(func=Name(id='Panel', ctx=Load()), args=[Constant(value='[bold green]Box Constants')], keywords=[keyword(arg='style', value=Constant(value='green'))])], keywords=[keyword(arg='justify', value=Constant(value='center'))])), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='print', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='columns', ctx=Store())], value=Call(func=Name(id='Columns', ctx=Load()), args=[], keywords=[keyword(arg='expand', value=Constant(value=True)), keyword(arg='padding', value=Constant(value=2))])), For(target=Name(id='box_name', ctx=Store()), iter=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='BOXES', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='table', ctx=Store())], value=Call(func=Name(id='Table', ctx=Load()), args=[], keywords=[keyword(arg='show_footer', value=Constant(value=True)), keyword(arg='style', value=Constant(value='dim')), keyword(arg='border_style', value=Constant(value='not dim')), keyword(arg='expand', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Name(id='table', ctx=Load()), attr='add_column', ctx=Load()), args=[Constant(value='Header 1'), Constant(value='Footer 1')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='table', ctx=Load()), attr='add_column', ctx=Load()), args=[Constant(value='Header 2'), Constant(value='Footer 2')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='table', ctx=Load()), attr='add_row', ctx=Load()), args=[Constant(value='Cell'), Constant(value='Cell')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='table', ctx=Load()), attr='add_row', ctx=Load()), args=[Constant(value='Cell'), Constant(value='Cell')], keywords=[])), Assign(targets=[Attribute(value=Name(id='table', ctx=Load()), attr='box', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='box', ctx=Load()), Name(id='box_name', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='table', ctx=Load()), attr='title', ctx=Store())], value=Call(func=Name(id='Text', ctx=Load()), args=[JoinedStr(values=[Constant(value='box.'), FormattedValue(value=Name(id='box_name', ctx=Load()), conversion=-1)])], keywords=[keyword(arg='style', value=Constant(value='magenta'))])), Expr(value=Call(func=Attribute(value=Name(id='columns', ctx=Load()), attr='add_renderable', ctx=Load()), args=[Name(id='table', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='print', ctx=Load()), args=[Name(id='columns', ctx=Load())], keywords=[]))], orelse=[])], type_ignores=[])