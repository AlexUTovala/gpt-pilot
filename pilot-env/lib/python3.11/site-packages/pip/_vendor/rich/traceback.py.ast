Module(body=[ImportFrom(module='__future__', names=[alias(name='absolute_import')], level=0), Import(names=[alias(name='linecache')]), Import(names=[alias(name='os')]), Import(names=[alias(name='platform')]), Import(names=[alias(name='sys')]), ImportFrom(module='dataclasses', names=[alias(name='dataclass'), alias(name='field')], level=0), ImportFrom(module='traceback', names=[alias(name='walk_tb')], level=0), ImportFrom(module='types', names=[alias(name='ModuleType'), alias(name='TracebackType')], level=0), ImportFrom(module='typing', names=[alias(name='Any'), alias(name='Callable'), alias(name='Dict'), alias(name='Iterable'), alias(name='List'), alias(name='Optional'), alias(name='Sequence'), alias(name='Tuple'), alias(name='Type'), alias(name='Union')], level=0), ImportFrom(module='pip._vendor.pygments.lexers', names=[alias(name='guess_lexer_for_filename')], level=0), ImportFrom(module='pip._vendor.pygments.token', names=[alias(name='Comment'), alias(name='Keyword'), alias(name='Name'), alias(name='Number'), alias(name='Operator'), alias(name='String')], level=0), ImportFrom(module='pip._vendor.pygments.token', names=[alias(name='Text', asname='TextToken')], level=0), ImportFrom(module='pip._vendor.pygments.token', names=[alias(name='Token')], level=0), ImportFrom(module='pip._vendor.pygments.util', names=[alias(name='ClassNotFound')], level=0), ImportFrom(names=[alias(name='pretty')], level=1), ImportFrom(module='_loop', names=[alias(name='loop_last')], level=1), ImportFrom(module='columns', names=[alias(name='Columns')], level=1), ImportFrom(module='console', names=[alias(name='Console'), alias(name='ConsoleOptions'), alias(name='ConsoleRenderable'), alias(name='RenderResult'), alias(name='group')], level=1), ImportFrom(module='constrain', names=[alias(name='Constrain')], level=1), ImportFrom(module='highlighter', names=[alias(name='RegexHighlighter'), alias(name='ReprHighlighter')], level=1), ImportFrom(module='panel', names=[alias(name='Panel')], level=1), ImportFrom(module='scope', names=[alias(name='render_scope')], level=1), ImportFrom(module='style', names=[alias(name='Style')], level=1), ImportFrom(module='syntax', names=[alias(name='Syntax')], level=1), ImportFrom(module='text', names=[alias(name='Text')], level=1), ImportFrom(module='theme', names=[alias(name='Theme')], level=1), Assign(targets=[Name(id='WINDOWS', ctx=Store())], value=Compare(left=Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='system', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Constant(value='Windows')])), Assign(targets=[Name(id='LOCALS_MAX_LENGTH', ctx=Store())], value=Constant(value=10)), Assign(targets=[Name(id='LOCALS_MAX_STRING', ctx=Store())], value=Constant(value=80)), FunctionDef(name='install', args=arguments(posonlyargs=[], args=[], kwonlyargs=[arg(arg='console', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Console', ctx=Load()), ctx=Load())), arg(arg='width', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='extra_lines', annotation=Name(id='int', ctx=Load())), arg(arg='theme', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='word_wrap', annotation=Name(id='bool', ctx=Load())), arg(arg='show_locals', annotation=Name(id='bool', ctx=Load())), arg(arg='locals_max_length', annotation=Name(id='int', ctx=Load())), arg(arg='locals_max_string', annotation=Name(id='int', ctx=Load())), arg(arg='locals_hide_dunder', annotation=Name(id='bool', ctx=Load())), arg(arg='locals_hide_sunder', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load())), arg(arg='indent_guides', annotation=Name(id='bool', ctx=Load())), arg(arg='suppress', annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='ModuleType', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='max_frames', annotation=Name(id='int', ctx=Load()))], kw_defaults=[Constant(value=None), Constant(value=100), Constant(value=3), Constant(value=None), Constant(value=False), Constant(value=False), Name(id='LOCALS_MAX_LENGTH', ctx=Load()), Name(id='LOCALS_MAX_STRING', ctx=Load()), Constant(value=True), Constant(value=None), Constant(value=True), Tuple(elts=[], ctx=Load()), Constant(value=100)], defaults=[]), body=[Expr(value=Constant(value='Install a rich traceback handler.\n\n    Once installed, any tracebacks will be printed with syntax highlighting and rich formatting.\n\n\n    Args:\n        console (Optional[Console], optional): Console to write exception to. Default uses internal Console instance.\n        width (Optional[int], optional): Width (in characters) of traceback. Defaults to 100.\n        extra_lines (int, optional): Extra lines of code. Defaults to 3.\n        theme (Optional[str], optional): Pygments theme to use in traceback. Defaults to ``None`` which will pick\n            a theme appropriate for the platform.\n        word_wrap (bool, optional): Enable word wrapping of long lines. Defaults to False.\n        show_locals (bool, optional): Enable display of local variables. Defaults to False.\n        locals_max_length (int, optional): Maximum length of containers before abbreviating, or None for no abbreviation.\n            Defaults to 10.\n        locals_max_string (int, optional): Maximum length of string before truncating, or None to disable. Defaults to 80.\n        locals_hide_dunder (bool, optional): Hide locals prefixed with double underscore. Defaults to True.\n        locals_hide_sunder (bool, optional): Hide locals prefixed with single underscore. Defaults to False.\n        indent_guides (bool, optional): Enable indent guides in code and locals. Defaults to True.\n        suppress (Sequence[Union[str, ModuleType]]): Optional sequence of modules or paths to exclude from traceback.\n\n    Returns:\n        Callable: The previous exception handler that was replaced.\n\n    ')), Assign(targets=[Name(id='traceback_console', ctx=Store())], value=IfExp(test=Compare(left=Name(id='console', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Call(func=Name(id='Console', ctx=Load()), args=[], keywords=[keyword(arg='stderr', value=Constant(value=True))]), orelse=Name(id='console', ctx=Load()))), Assign(targets=[Name(id='locals_hide_sunder', ctx=Store())], value=IfExp(test=BoolOp(op=And(), values=[Attribute(value=Name(id='traceback_console', ctx=Load()), attr='is_jupyter', ctx=Load()), Compare(left=Name(id='locals_hide_sunder', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])]), body=Constant(value=True), orelse=Name(id='locals_hide_sunder', ctx=Load()))), FunctionDef(name='excepthook', args=arguments(posonlyargs=[], args=[arg(arg='type_', annotation=Subscript(value=Name(id='Type', ctx=Load()), slice=Name(id='BaseException', ctx=Load()), ctx=Load())), arg(arg='value', annotation=Name(id='BaseException', ctx=Load())), arg(arg='traceback', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TracebackType', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='traceback_console', ctx=Load()), attr='print', ctx=Load()), args=[Call(func=Attribute(value=Name(id='Traceback', ctx=Load()), attr='from_exception', ctx=Load()), args=[Name(id='type_', ctx=Load()), Name(id='value', ctx=Load()), Name(id='traceback', ctx=Load())], keywords=[keyword(arg='width', value=Name(id='width', ctx=Load())), keyword(arg='extra_lines', value=Name(id='extra_lines', ctx=Load())), keyword(arg='theme', value=Name(id='theme', ctx=Load())), keyword(arg='word_wrap', value=Name(id='word_wrap', ctx=Load())), keyword(arg='show_locals', value=Name(id='show_locals', ctx=Load())), keyword(arg='locals_max_length', value=Name(id='locals_max_length', ctx=Load())), keyword(arg='locals_max_string', value=Name(id='locals_max_string', ctx=Load())), keyword(arg='locals_hide_dunder', value=Name(id='locals_hide_dunder', ctx=Load())), keyword(arg='locals_hide_sunder', value=Call(func=Name(id='bool', ctx=Load()), args=[Name(id='locals_hide_sunder', ctx=Load())], keywords=[])), keyword(arg='indent_guides', value=Name(id='indent_guides', ctx=Load())), keyword(arg='suppress', value=Name(id='suppress', ctx=Load())), keyword(arg='max_frames', value=Name(id='max_frames', ctx=Load()))])], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='ipy_excepthook_closure', args=arguments(posonlyargs=[], args=[arg(arg='ip', annotation=Name(id='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='tb_data', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='default_showtraceback', ctx=Store())], value=Attribute(value=Name(id='ip', ctx=Load()), attr='showtraceback', ctx=Load())), FunctionDef(name='ipy_show_traceback', args=arguments(posonlyargs=[], args=[], vararg=arg(arg='args', annotation=Name(id='Any', ctx=Load())), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs', annotation=Name(id='Any', ctx=Load())), defaults=[]), body=[Expr(value=Constant(value='wrap the default ip.showtraceback to store info for ip._showtraceback')), Nonlocal(names=['tb_data']), Assign(targets=[Name(id='tb_data', ctx=Store())], value=Name(id='kwargs', ctx=Load())), Expr(value=Call(func=Name(id='default_showtraceback', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='ipy_display_traceback', args=arguments(posonlyargs=[], args=[], vararg=arg(arg='args', annotation=Name(id='Any', ctx=Load())), kwonlyargs=[arg(arg='is_syntax', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=False)], kwarg=arg(arg='kwargs', annotation=Name(id='Any', ctx=Load())), defaults=[]), body=[Expr(value=Constant(value='Internally called traceback from ip._showtraceback')), Nonlocal(names=['tb_data']), Assign(targets=[Name(id='exc_tuple', ctx=Store())], value=Call(func=Attribute(value=Name(id='ip', ctx=Load()), attr='_get_exc_info', ctx=Load()), args=[], keywords=[])), AnnAssign(target=Name(id='tb', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TracebackType', ctx=Load()), ctx=Load()), value=IfExp(test=Name(id='is_syntax', ctx=Load()), body=Constant(value=None), orelse=Subscript(value=Name(id='exc_tuple', ctx=Load()), slice=Constant(value=2), ctx=Load())), simple=1), Assign(targets=[Name(id='compiled', ctx=Store())], value=Call(func=Attribute(value=Name(id='tb_data', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='running_compiled_code'), Constant(value=False)], keywords=[])), Assign(targets=[Name(id='tb_offset', ctx=Store())], value=Call(func=Attribute(value=Name(id='tb_data', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='tb_offset'), IfExp(test=Name(id='compiled', ctx=Load()), body=Constant(value=1), orelse=Constant(value=0))], keywords=[])), For(target=Name(id='_', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='tb_offset', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='tb', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Break()], orelse=[]), Assign(targets=[Name(id='tb', ctx=Store())], value=Attribute(value=Name(id='tb', ctx=Load()), attr='tb_next', ctx=Load()))], orelse=[]), Expr(value=Call(func=Name(id='excepthook', ctx=Load()), args=[Subscript(value=Name(id='exc_tuple', ctx=Load()), slice=Constant(value=0), ctx=Load()), Subscript(value=Name(id='exc_tuple', ctx=Load()), slice=Constant(value=1), ctx=Load()), Name(id='tb', ctx=Load())], keywords=[])), Assign(targets=[Name(id='tb_data', ctx=Store())], value=Dict(keys=[], values=[]))], decorator_list=[], returns=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='ip', ctx=Load()), attr='_showtraceback', ctx=Store())], value=Name(id='ipy_display_traceback', ctx=Load())), Assign(targets=[Attribute(value=Name(id='ip', ctx=Load()), attr='showtraceback', ctx=Store())], value=Name(id='ipy_show_traceback', ctx=Load())), Assign(targets=[Attribute(value=Name(id='ip', ctx=Load()), attr='showsyntaxerror', ctx=Store())], value=Lambda(args=arguments(posonlyargs=[], args=[], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=Call(func=Name(id='ipy_display_traceback', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(arg='is_syntax', value=Constant(value=True)), keyword(value=Name(id='kwargs', ctx=Load()))])))], decorator_list=[], returns=Constant(value=None)), Try(body=[Assign(targets=[Name(id='ip', ctx=Store())], value=Call(func=Name(id='get_ipython', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Name(id='ipy_excepthook_closure', ctx=Load()), args=[Name(id='ip', ctx=Load())], keywords=[])), Return(value=Attribute(value=Name(id='sys', ctx=Load()), attr='excepthook', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Assign(targets=[Name(id='old_excepthook', ctx=Store())], value=Attribute(value=Name(id='sys', ctx=Load()), attr='excepthook', ctx=Load())), Assign(targets=[Attribute(value=Name(id='sys', ctx=Load()), attr='excepthook', ctx=Store())], value=Name(id='excepthook', ctx=Load())), Return(value=Name(id='old_excepthook', ctx=Load()))])], orelse=[], finalbody=[])], decorator_list=[], returns=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Subscript(value=Name(id='Type', ctx=Load()), slice=Name(id='BaseException', ctx=Load()), ctx=Load()), Name(id='BaseException', ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TracebackType', ctx=Load()), ctx=Load())], ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load())), ClassDef(name='Frame', bases=[], keywords=[], body=[AnnAssign(target=Name(id='filename', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='lineno', ctx=Store()), annotation=Name(id='int', ctx=Load()), simple=1), AnnAssign(target=Name(id='name', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='line', ctx=Store()), annotation=Name(id='str', ctx=Load()), value=Constant(value=''), simple=1), AnnAssign(target=Name(id='locals', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Attribute(value=Name(id='pretty', ctx=Load()), attr='Node', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), value=Constant(value=None), simple=1)], decorator_list=[Name(id='dataclass', ctx=Load())]), ClassDef(name='_SyntaxError', bases=[], keywords=[], body=[AnnAssign(target=Name(id='offset', ctx=Store()), annotation=Name(id='int', ctx=Load()), simple=1), AnnAssign(target=Name(id='filename', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='line', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='lineno', ctx=Store()), annotation=Name(id='int', ctx=Load()), simple=1), AnnAssign(target=Name(id='msg', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1)], decorator_list=[Name(id='dataclass', ctx=Load())]), ClassDef(name='Stack', bases=[], keywords=[], body=[AnnAssign(target=Name(id='exc_type', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='exc_value', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='syntax_error', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='_SyntaxError', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=1), AnnAssign(target=Name(id='is_cause', ctx=Store()), annotation=Name(id='bool', ctx=Load()), value=Constant(value=False), simple=1), AnnAssign(target=Name(id='frames', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Frame', ctx=Load()), ctx=Load()), value=Call(func=Name(id='field', ctx=Load()), args=[], keywords=[keyword(arg='default_factory', value=Name(id='list', ctx=Load()))]), simple=1)], decorator_list=[Name(id='dataclass', ctx=Load())]), ClassDef(name='Trace', bases=[], keywords=[], body=[AnnAssign(target=Name(id='stacks', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Stack', ctx=Load()), ctx=Load()), simple=1)], decorator_list=[Name(id='dataclass', ctx=Load())]), ClassDef(name='PathHighlighter', bases=[Name(id='RegexHighlighter', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='highlights', ctx=Store())], value=List(elts=[Constant(value='(?P<dim>.*/)(?P<bold>.+)')], ctx=Load()))], decorator_list=[]), ClassDef(name='Traceback', bases=[], keywords=[], body=[Expr(value=Constant(value='A Console renderable that renders a traceback.\n\n    Args:\n        trace (Trace, optional): A `Trace` object produced from `extract`. Defaults to None, which uses\n            the last exception.\n        width (Optional[int], optional): Number of characters used to traceback. Defaults to 100.\n        extra_lines (int, optional): Additional lines of code to render. Defaults to 3.\n        theme (str, optional): Override pygments theme used in traceback.\n        word_wrap (bool, optional): Enable word wrapping of long lines. Defaults to False.\n        show_locals (bool, optional): Enable display of local variables. Defaults to False.\n        indent_guides (bool, optional): Enable indent guides in code and locals. Defaults to True.\n        locals_max_length (int, optional): Maximum length of containers before abbreviating, or None for no abbreviation.\n            Defaults to 10.\n        locals_max_string (int, optional): Maximum length of string before truncating, or None to disable. Defaults to 80.\n        locals_hide_dunder (bool, optional): Hide locals prefixed with double underscore. Defaults to True.\n        locals_hide_sunder (bool, optional): Hide locals prefixed with single underscore. Defaults to False.\n        suppress (Sequence[Union[str, ModuleType]]): Optional sequence of modules or paths to exclude from traceback.\n        max_frames (int): Maximum number of frames to show in a traceback, 0 for no maximum. Defaults to 100.\n\n    ')), Assign(targets=[Name(id='LEXERS', ctx=Store())], value=Dict(keys=[Constant(value=''), Constant(value='.py'), Constant(value='.pxd'), Constant(value='.pyx'), Constant(value='.pxi')], values=[Constant(value='text'), Constant(value='python'), Constant(value='cython'), Constant(value='cython'), Constant(value='pyrex')])), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='trace', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Trace', ctx=Load()), ctx=Load()))], kwonlyargs=[arg(arg='width', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='extra_lines', annotation=Name(id='int', ctx=Load())), arg(arg='theme', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='word_wrap', annotation=Name(id='bool', ctx=Load())), arg(arg='show_locals', annotation=Name(id='bool', ctx=Load())), arg(arg='locals_max_length', annotation=Name(id='int', ctx=Load())), arg(arg='locals_max_string', annotation=Name(id='int', ctx=Load())), arg(arg='locals_hide_dunder', annotation=Name(id='bool', ctx=Load())), arg(arg='locals_hide_sunder', annotation=Name(id='bool', ctx=Load())), arg(arg='indent_guides', annotation=Name(id='bool', ctx=Load())), arg(arg='suppress', annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='ModuleType', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='max_frames', annotation=Name(id='int', ctx=Load()))], kw_defaults=[Constant(value=100), Constant(value=3), Constant(value=None), Constant(value=False), Constant(value=False), Name(id='LOCALS_MAX_LENGTH', ctx=Load()), Name(id='LOCALS_MAX_STRING', ctx=Load()), Constant(value=True), Constant(value=False), Constant(value=True), Tuple(elts=[], ctx=Load()), Constant(value=100)], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='trace', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Tuple(elts=[Name(id='exc_type', ctx=Store()), Name(id='exc_value', ctx=Store()), Name(id='traceback', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='sys', ctx=Load()), attr='exc_info', ctx=Load()), args=[], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='exc_type', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Name(id='exc_value', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Name(id='traceback', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value="Value for 'trace' required if not called in except: block")], keywords=[]))], orelse=[]), Assign(targets=[Name(id='trace', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='extract', ctx=Load()), args=[Name(id='exc_type', ctx=Load()), Name(id='exc_value', ctx=Load()), Name(id='traceback', ctx=Load())], keywords=[keyword(arg='show_locals', value=Name(id='show_locals', ctx=Load()))]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='trace', ctx=Store())], value=Name(id='trace', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='width', ctx=Store())], value=Name(id='width', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='extra_lines', ctx=Store())], value=Name(id='extra_lines', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='theme', ctx=Store())], value=Call(func=Attribute(value=Name(id='Syntax', ctx=Load()), attr='get_theme', ctx=Load()), args=[BoolOp(op=Or(), values=[Name(id='theme', ctx=Load()), Constant(value='ansi_dark')])], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='word_wrap', ctx=Store())], value=Name(id='word_wrap', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='show_locals', ctx=Store())], value=Name(id='show_locals', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='indent_guides', ctx=Store())], value=Name(id='indent_guides', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='locals_max_length', ctx=Store())], value=Name(id='locals_max_length', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='locals_max_string', ctx=Store())], value=Name(id='locals_max_string', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='locals_hide_dunder', ctx=Store())], value=Name(id='locals_hide_dunder', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='locals_hide_sunder', ctx=Store())], value=Name(id='locals_hide_sunder', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='suppress', ctx=Store()), annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=0), For(target=Name(id='suppress_entity', ctx=Store()), iter=Name(id='suppress', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='suppress_entity', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), body=[Assert(test=Compare(left=Attribute(value=Name(id='suppress_entity', ctx=Load()), attr='__file__', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), msg=JoinedStr(values=[FormattedValue(value=Name(id='suppress_entity', ctx=Load()), conversion=114), Constant(value=" must be a module with '__file__' attribute")])), Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Attribute(value=Name(id='suppress_entity', ctx=Load()), attr='__file__', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='path', ctx=Store())], value=Name(id='suppress_entity', ctx=Load()))]), Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normpath', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='suppress', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='max_frames', ctx=Store())], value=IfExp(test=Compare(left=Name(id='max_frames', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=Call(func=Name(id='max', ctx=Load()), args=[Constant(value=4), Name(id='max_frames', ctx=Load())], keywords=[]), orelse=Constant(value=0)))], decorator_list=[]), FunctionDef(name='from_exception', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='exc_type', annotation=Subscript(value=Name(id='Type', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load())), arg(arg='exc_value', annotation=Name(id='BaseException', ctx=Load())), arg(arg='traceback', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TracebackType', ctx=Load()), ctx=Load()))], kwonlyargs=[arg(arg='width', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='extra_lines', annotation=Name(id='int', ctx=Load())), arg(arg='theme', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='word_wrap', annotation=Name(id='bool', ctx=Load())), arg(arg='show_locals', annotation=Name(id='bool', ctx=Load())), arg(arg='locals_max_length', annotation=Name(id='int', ctx=Load())), arg(arg='locals_max_string', annotation=Name(id='int', ctx=Load())), arg(arg='locals_hide_dunder', annotation=Name(id='bool', ctx=Load())), arg(arg='locals_hide_sunder', annotation=Name(id='bool', ctx=Load())), arg(arg='indent_guides', annotation=Name(id='bool', ctx=Load())), arg(arg='suppress', annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='ModuleType', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='max_frames', annotation=Name(id='int', ctx=Load()))], kw_defaults=[Constant(value=100), Constant(value=3), Constant(value=None), Constant(value=False), Constant(value=False), Name(id='LOCALS_MAX_LENGTH', ctx=Load()), Name(id='LOCALS_MAX_STRING', ctx=Load()), Constant(value=True), Constant(value=False), Constant(value=True), Tuple(elts=[], ctx=Load()), Constant(value=100)], defaults=[]), body=[Expr(value=Constant(value='Create a traceback from exception info\n\n        Args:\n            exc_type (Type[BaseException]): Exception type.\n            exc_value (BaseException): Exception value.\n            traceback (TracebackType): Python Traceback object.\n            width (Optional[int], optional): Number of characters used to traceback. Defaults to 100.\n            extra_lines (int, optional): Additional lines of code to render. Defaults to 3.\n            theme (str, optional): Override pygments theme used in traceback.\n            word_wrap (bool, optional): Enable word wrapping of long lines. Defaults to False.\n            show_locals (bool, optional): Enable display of local variables. Defaults to False.\n            indent_guides (bool, optional): Enable indent guides in code and locals. Defaults to True.\n            locals_max_length (int, optional): Maximum length of containers before abbreviating, or None for no abbreviation.\n                Defaults to 10.\n            locals_max_string (int, optional): Maximum length of string before truncating, or None to disable. Defaults to 80.\n            locals_hide_dunder (bool, optional): Hide locals prefixed with double underscore. Defaults to True.\n            locals_hide_sunder (bool, optional): Hide locals prefixed with single underscore. Defaults to False.\n            suppress (Iterable[Union[str, ModuleType]]): Optional sequence of modules or paths to exclude from traceback.\n            max_frames (int): Maximum number of frames to show in a traceback, 0 for no maximum. Defaults to 100.\n\n        Returns:\n            Traceback: A Traceback instance that may be printed.\n        ')), Assign(targets=[Name(id='rich_traceback', ctx=Store())], value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='extract', ctx=Load()), args=[Name(id='exc_type', ctx=Load()), Name(id='exc_value', ctx=Load()), Name(id='traceback', ctx=Load())], keywords=[keyword(arg='show_locals', value=Name(id='show_locals', ctx=Load())), keyword(arg='locals_max_length', value=Name(id='locals_max_length', ctx=Load())), keyword(arg='locals_max_string', value=Name(id='locals_max_string', ctx=Load())), keyword(arg='locals_hide_dunder', value=Name(id='locals_hide_dunder', ctx=Load())), keyword(arg='locals_hide_sunder', value=Name(id='locals_hide_sunder', ctx=Load()))])), Return(value=Call(func=Name(id='cls', ctx=Load()), args=[Name(id='rich_traceback', ctx=Load())], keywords=[keyword(arg='width', value=Name(id='width', ctx=Load())), keyword(arg='extra_lines', value=Name(id='extra_lines', ctx=Load())), keyword(arg='theme', value=Name(id='theme', ctx=Load())), keyword(arg='word_wrap', value=Name(id='word_wrap', ctx=Load())), keyword(arg='show_locals', value=Name(id='show_locals', ctx=Load())), keyword(arg='indent_guides', value=Name(id='indent_guides', ctx=Load())), keyword(arg='locals_max_length', value=Name(id='locals_max_length', ctx=Load())), keyword(arg='locals_max_string', value=Name(id='locals_max_string', ctx=Load())), keyword(arg='locals_hide_dunder', value=Name(id='locals_hide_dunder', ctx=Load())), keyword(arg='locals_hide_sunder', value=Name(id='locals_hide_sunder', ctx=Load())), keyword(arg='suppress', value=Name(id='suppress', ctx=Load())), keyword(arg='max_frames', value=Name(id='max_frames', ctx=Load()))]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Constant(value='Traceback')), FunctionDef(name='extract', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='exc_type', annotation=Subscript(value=Name(id='Type', ctx=Load()), slice=Name(id='BaseException', ctx=Load()), ctx=Load())), arg(arg='exc_value', annotation=Name(id='BaseException', ctx=Load())), arg(arg='traceback', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TracebackType', ctx=Load()), ctx=Load()))], kwonlyargs=[arg(arg='show_locals', annotation=Name(id='bool', ctx=Load())), arg(arg='locals_max_length', annotation=Name(id='int', ctx=Load())), arg(arg='locals_max_string', annotation=Name(id='int', ctx=Load())), arg(arg='locals_hide_dunder', annotation=Name(id='bool', ctx=Load())), arg(arg='locals_hide_sunder', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=False), Name(id='LOCALS_MAX_LENGTH', ctx=Load()), Name(id='LOCALS_MAX_STRING', ctx=Load()), Constant(value=True), Constant(value=False)], defaults=[]), body=[Expr(value=Constant(value='Extract traceback information.\n\n        Args:\n            exc_type (Type[BaseException]): Exception type.\n            exc_value (BaseException): Exception value.\n            traceback (TracebackType): Python Traceback object.\n            show_locals (bool, optional): Enable display of local variables. Defaults to False.\n            locals_max_length (int, optional): Maximum length of containers before abbreviating, or None for no abbreviation.\n                Defaults to 10.\n            locals_max_string (int, optional): Maximum length of string before truncating, or None to disable. Defaults to 80.\n            locals_hide_dunder (bool, optional): Hide locals prefixed with double underscore. Defaults to True.\n            locals_hide_sunder (bool, optional): Hide locals prefixed with single underscore. Defaults to False.\n\n        Returns:\n            Trace: A Trace instance which you can use to construct a `Traceback`.\n        ')), AnnAssign(target=Name(id='stacks', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Stack', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), Assign(targets=[Name(id='is_cause', ctx=Store())], value=Constant(value=False)), ImportFrom(module='pip._vendor.rich', names=[alias(name='_IMPORT_CWD')], level=0), FunctionDef(name='safe_str', args=arguments(posonlyargs=[], args=[arg(arg='_object', annotation=Name(id='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Don't allow exceptions from __str__ to propagate.")), Try(body=[Return(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='_object', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Return(value=Constant(value='<exception str() failed>'))])], orelse=[], finalbody=[])], decorator_list=[], returns=Name(id='str', ctx=Load())), While(test=Constant(value=True), body=[Assign(targets=[Name(id='stack', ctx=Store())], value=Call(func=Name(id='Stack', ctx=Load()), args=[], keywords=[keyword(arg='exc_type', value=Call(func=Name(id='safe_str', ctx=Load()), args=[Attribute(value=Name(id='exc_type', ctx=Load()), attr='__name__', ctx=Load())], keywords=[])), keyword(arg='exc_value', value=Call(func=Name(id='safe_str', ctx=Load()), args=[Name(id='exc_value', ctx=Load())], keywords=[])), keyword(arg='is_cause', value=Name(id='is_cause', ctx=Load()))])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='exc_value', ctx=Load()), Name(id='SyntaxError', ctx=Load())], keywords=[]), body=[Assign(targets=[Attribute(value=Name(id='stack', ctx=Load()), attr='syntax_error', ctx=Store())], value=Call(func=Name(id='_SyntaxError', ctx=Load()), args=[], keywords=[keyword(arg='offset', value=BoolOp(op=Or(), values=[Attribute(value=Name(id='exc_value', ctx=Load()), attr='offset', ctx=Load()), Constant(value=0)])), keyword(arg='filename', value=BoolOp(op=Or(), values=[Attribute(value=Name(id='exc_value', ctx=Load()), attr='filename', ctx=Load()), Constant(value='?')])), keyword(arg='lineno', value=BoolOp(op=Or(), values=[Attribute(value=Name(id='exc_value', ctx=Load()), attr='lineno', ctx=Load()), Constant(value=0)])), keyword(arg='line', value=BoolOp(op=Or(), values=[Attribute(value=Name(id='exc_value', ctx=Load()), attr='text', ctx=Load()), Constant(value='')])), keyword(arg='msg', value=Attribute(value=Name(id='exc_value', ctx=Load()), attr='msg', ctx=Load()))]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='stacks', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='stack', ctx=Load())], keywords=[])), Assign(targets=[Name(id='append', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='stack', ctx=Load()), attr='frames', ctx=Load()), attr='append', ctx=Load())), FunctionDef(name='get_locals', args=arguments(posonlyargs=[], args=[arg(arg='iter_locals', annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='object', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Extract locals from an iterator of key pairs.')), If(test=UnaryOp(op=Not(), operand=BoolOp(op=Or(), values=[Name(id='locals_hide_dunder', ctx=Load()), Name(id='locals_hide_sunder', ctx=Load())])), body=[Expr(value=YieldFrom(value=Name(id='iter_locals', ctx=Load()))), Return()], orelse=[]), For(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Name(id='iter_locals', ctx=Load()), body=[If(test=BoolOp(op=And(), values=[Name(id='locals_hide_dunder', ctx=Load()), Call(func=Attribute(value=Name(id='key', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='__')], keywords=[])]), body=[Continue()], orelse=[]), If(test=BoolOp(op=And(), values=[Name(id='locals_hide_sunder', ctx=Load()), Call(func=Attribute(value=Name(id='key', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='_')], keywords=[])]), body=[Continue()], orelse=[]), Expr(value=Yield(value=Tuple(elts=[Name(id='key', ctx=Load()), Name(id='value', ctx=Load())], ctx=Load())))], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='object', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), For(target=Tuple(elts=[Name(id='frame_summary', ctx=Store()), Name(id='line_no', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='walk_tb', ctx=Load()), args=[Name(id='traceback', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='filename', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='frame_summary', ctx=Load()), attr='f_code', ctx=Load()), attr='co_filename', ctx=Load())), If(test=BoolOp(op=And(), values=[Name(id='filename', ctx=Load()), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='filename', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='<')], keywords=[]))]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isabs', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='filename', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='_IMPORT_CWD', ctx=Load()), Name(id='filename', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), If(test=Call(func=Attribute(value=Attribute(value=Name(id='frame_summary', ctx=Load()), attr='f_locals', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='_rich_traceback_omit'), Constant(value=False)], keywords=[]), body=[Continue()], orelse=[]), Assign(targets=[Name(id='frame', ctx=Store())], value=Call(func=Name(id='Frame', ctx=Load()), args=[], keywords=[keyword(arg='filename', value=BoolOp(op=Or(), values=[Name(id='filename', ctx=Load()), Constant(value='?')])), keyword(arg='lineno', value=Name(id='line_no', ctx=Load())), keyword(arg='name', value=Attribute(value=Attribute(value=Name(id='frame_summary', ctx=Load()), attr='f_code', ctx=Load()), attr='co_name', ctx=Load())), keyword(arg='locals', value=IfExp(test=Name(id='show_locals', ctx=Load()), body=DictComp(key=Name(id='key', ctx=Load()), value=Call(func=Attribute(value=Name(id='pretty', ctx=Load()), attr='traverse', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[keyword(arg='max_length', value=Name(id='locals_max_length', ctx=Load())), keyword(arg='max_string', value=Name(id='locals_max_string', ctx=Load()))]), generators=[comprehension(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='get_locals', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='frame_summary', ctx=Load()), attr='f_locals', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)]), orelse=Constant(value=None)))])), Expr(value=Call(func=Name(id='append', ctx=Load()), args=[Name(id='frame', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Attribute(value=Name(id='frame_summary', ctx=Load()), attr='f_locals', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='_rich_traceback_guard'), Constant(value=False)], keywords=[]), body=[Delete(targets=[Subscript(value=Attribute(value=Name(id='stack', ctx=Load()), attr='frames', ctx=Load()), slice=Slice(), ctx=Del())])], orelse=[])], orelse=[]), Assign(targets=[Name(id='cause', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='exc_value', ctx=Load()), Constant(value='__cause__'), Constant(value=None)], keywords=[])), If(test=Name(id='cause', ctx=Load()), body=[Assign(targets=[Name(id='exc_type', ctx=Store())], value=Attribute(value=Name(id='cause', ctx=Load()), attr='__class__', ctx=Load())), Assign(targets=[Name(id='exc_value', ctx=Store())], value=Name(id='cause', ctx=Load())), Assign(targets=[Name(id='traceback', ctx=Store())], value=Attribute(value=Name(id='cause', ctx=Load()), attr='__traceback__', ctx=Load())), Assign(targets=[Name(id='is_cause', ctx=Store())], value=Constant(value=True)), Continue()], orelse=[]), Assign(targets=[Name(id='cause', ctx=Store())], value=Attribute(value=Name(id='exc_value', ctx=Load()), attr='__context__', ctx=Load())), If(test=BoolOp(op=And(), values=[Name(id='cause', ctx=Load()), UnaryOp(op=Not(), operand=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='exc_value', ctx=Load()), Constant(value='__suppress_context__'), Constant(value=False)], keywords=[]))]), body=[Assign(targets=[Name(id='exc_type', ctx=Store())], value=Attribute(value=Name(id='cause', ctx=Load()), attr='__class__', ctx=Load())), Assign(targets=[Name(id='exc_value', ctx=Store())], value=Name(id='cause', ctx=Load())), Assign(targets=[Name(id='traceback', ctx=Store())], value=Attribute(value=Name(id='cause', ctx=Load()), attr='__traceback__', ctx=Load())), Assign(targets=[Name(id='is_cause', ctx=Store())], value=Constant(value=False)), Continue()], orelse=[]), Break()], orelse=[]), Assign(targets=[Name(id='trace', ctx=Store())], value=Call(func=Name(id='Trace', ctx=Load()), args=[], keywords=[keyword(arg='stacks', value=Name(id='stacks', ctx=Load()))])), Return(value=Name(id='trace', ctx=Load()))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Name(id='Trace', ctx=Load())), FunctionDef(name='__rich_console__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='console', annotation=Name(id='Console', ctx=Load())), arg(arg='options', annotation=Name(id='ConsoleOptions', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='theme', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='theme', ctx=Load())), Assign(targets=[Name(id='background_style', ctx=Store())], value=Call(func=Attribute(value=Name(id='theme', ctx=Load()), attr='get_background_style', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='token_style', ctx=Store())], value=Attribute(value=Name(id='theme', ctx=Load()), attr='get_style_for_token', ctx=Load())), Assign(targets=[Name(id='traceback_theme', ctx=Store())], value=Call(func=Name(id='Theme', ctx=Load()), args=[Dict(keys=[Constant(value='pretty'), Constant(value='pygments.text'), Constant(value='pygments.string'), Constant(value='pygments.function'), Constant(value='pygments.number'), Constant(value='repr.indent'), Constant(value='repr.str'), Constant(value='repr.brace'), Constant(value='repr.number'), Constant(value='repr.bool_true'), Constant(value='repr.bool_false'), Constant(value='repr.none'), Constant(value='scope.border'), Constant(value='scope.equals'), Constant(value='scope.key'), Constant(value='scope.key.special')], values=[Call(func=Name(id='token_style', ctx=Load()), args=[Name(id='TextToken', ctx=Load())], keywords=[]), Call(func=Name(id='token_style', ctx=Load()), args=[Name(id='Token', ctx=Load())], keywords=[]), Call(func=Name(id='token_style', ctx=Load()), args=[Name(id='String', ctx=Load())], keywords=[]), Call(func=Name(id='token_style', ctx=Load()), args=[Attribute(value=Name(id='Name', ctx=Load()), attr='Function', ctx=Load())], keywords=[]), Call(func=Name(id='token_style', ctx=Load()), args=[Name(id='Number', ctx=Load())], keywords=[]), BinOp(left=Call(func=Name(id='token_style', ctx=Load()), args=[Name(id='Comment', ctx=Load())], keywords=[]), op=Add(), right=Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='dim', value=Constant(value=True))])), Call(func=Name(id='token_style', ctx=Load()), args=[Name(id='String', ctx=Load())], keywords=[]), BinOp(left=Call(func=Name(id='token_style', ctx=Load()), args=[Name(id='TextToken', ctx=Load())], keywords=[]), op=Add(), right=Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='bold', value=Constant(value=True))])), Call(func=Name(id='token_style', ctx=Load()), args=[Name(id='Number', ctx=Load())], keywords=[]), Call(func=Name(id='token_style', ctx=Load()), args=[Attribute(value=Name(id='Keyword', ctx=Load()), attr='Constant', ctx=Load())], keywords=[]), Call(func=Name(id='token_style', ctx=Load()), args=[Attribute(value=Name(id='Keyword', ctx=Load()), attr='Constant', ctx=Load())], keywords=[]), Call(func=Name(id='token_style', ctx=Load()), args=[Attribute(value=Name(id='Keyword', ctx=Load()), attr='Constant', ctx=Load())], keywords=[]), Call(func=Name(id='token_style', ctx=Load()), args=[Attribute(value=Name(id='String', ctx=Load()), attr='Delimiter', ctx=Load())], keywords=[]), Call(func=Name(id='token_style', ctx=Load()), args=[Name(id='Operator', ctx=Load())], keywords=[]), Call(func=Name(id='token_style', ctx=Load()), args=[Name(id='Name', ctx=Load())], keywords=[]), BinOp(left=Call(func=Name(id='token_style', ctx=Load()), args=[Attribute(value=Name(id='Name', ctx=Load()), attr='Constant', ctx=Load())], keywords=[]), op=Add(), right=Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='dim', value=Constant(value=True))]))])], keywords=[keyword(arg='inherit', value=Constant(value=False))])), Assign(targets=[Name(id='highlighter', ctx=Store())], value=Call(func=Name(id='ReprHighlighter', ctx=Load()), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='last', ctx=Store()), Name(id='stack', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='loop_last', ctx=Load()), args=[Call(func=Name(id='reversed', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='trace', ctx=Load()), attr='stacks', ctx=Load())], keywords=[])], keywords=[]), body=[If(test=Attribute(value=Name(id='stack', ctx=Load()), attr='frames', ctx=Load()), body=[AnnAssign(target=Name(id='stack_renderable', ctx=Store()), annotation=Name(id='ConsoleRenderable', ctx=Load()), value=Call(func=Name(id='Panel', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_render_stack', ctx=Load()), args=[Name(id='stack', ctx=Load())], keywords=[])], keywords=[keyword(arg='title', value=Constant(value='[traceback.title]Traceback [dim](most recent call last)')), keyword(arg='style', value=Name(id='background_style', ctx=Load())), keyword(arg='border_style', value=Constant(value='traceback.border')), keyword(arg='expand', value=Constant(value=True)), keyword(arg='padding', value=Tuple(elts=[Constant(value=0), Constant(value=1)], ctx=Load()))]), simple=1), Assign(targets=[Name(id='stack_renderable', ctx=Store())], value=Call(func=Name(id='Constrain', ctx=Load()), args=[Name(id='stack_renderable', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='width', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='use_theme', ctx=Load()), args=[Name(id='traceback_theme', ctx=Load())], keywords=[]))], body=[Expr(value=Yield(value=Name(id='stack_renderable', ctx=Load())))])], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='stack', ctx=Load()), attr='syntax_error', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='use_theme', ctx=Load()), args=[Name(id='traceback_theme', ctx=Load())], keywords=[]))], body=[Expr(value=Yield(value=Call(func=Name(id='Constrain', ctx=Load()), args=[Call(func=Name(id='Panel', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_render_syntax_error', ctx=Load()), args=[Attribute(value=Name(id='stack', ctx=Load()), attr='syntax_error', ctx=Load())], keywords=[])], keywords=[keyword(arg='style', value=Name(id='background_style', ctx=Load())), keyword(arg='border_style', value=Constant(value='traceback.border.syntax_error')), keyword(arg='expand', value=Constant(value=True)), keyword(arg='padding', value=Tuple(elts=[Constant(value=0), Constant(value=1)], ctx=Load())), keyword(arg='width', value=Attribute(value=Name(id='self', ctx=Load()), attr='width', ctx=Load()))]), Attribute(value=Name(id='self', ctx=Load()), attr='width', ctx=Load())], keywords=[])))]), Expr(value=Yield(value=Call(func=Attribute(value=Name(id='Text', ctx=Load()), attr='assemble', ctx=Load()), args=[Tuple(elts=[JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='stack', ctx=Load()), attr='exc_type', ctx=Load()), conversion=-1), Constant(value=': ')]), Constant(value='traceback.exc_type')], ctx=Load()), Call(func=Name(id='highlighter', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='stack', ctx=Load()), attr='syntax_error', ctx=Load()), attr='msg', ctx=Load())], keywords=[])], keywords=[])))], orelse=[If(test=Attribute(value=Name(id='stack', ctx=Load()), attr='exc_value', ctx=Load()), body=[Expr(value=Yield(value=Call(func=Attribute(value=Name(id='Text', ctx=Load()), attr='assemble', ctx=Load()), args=[Tuple(elts=[JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='stack', ctx=Load()), attr='exc_type', ctx=Load()), conversion=-1), Constant(value=': ')]), Constant(value='traceback.exc_type')], ctx=Load()), Call(func=Name(id='highlighter', ctx=Load()), args=[Attribute(value=Name(id='stack', ctx=Load()), attr='exc_value', ctx=Load())], keywords=[])], keywords=[])))], orelse=[Expr(value=Yield(value=Call(func=Attribute(value=Name(id='Text', ctx=Load()), attr='assemble', ctx=Load()), args=[Tuple(elts=[JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='stack', ctx=Load()), attr='exc_type', ctx=Load()), conversion=-1)]), Constant(value='traceback.exc_type')], ctx=Load())], keywords=[])))])]), If(test=UnaryOp(op=Not(), operand=Name(id='last', ctx=Load())), body=[If(test=Attribute(value=Name(id='stack', ctx=Load()), attr='is_cause', ctx=Load()), body=[Expr(value=Yield(value=Call(func=Attribute(value=Name(id='Text', ctx=Load()), attr='from_markup', ctx=Load()), args=[Constant(value='\n[i]The above exception was the direct cause of the following exception:\n')], keywords=[])))], orelse=[Expr(value=Yield(value=Call(func=Attribute(value=Name(id='Text', ctx=Load()), attr='from_markup', ctx=Load()), args=[Constant(value='\n[i]During handling of the above exception, another exception occurred:\n')], keywords=[])))])], orelse=[])], orelse=[])], decorator_list=[], returns=Name(id='RenderResult', ctx=Load())), FunctionDef(name='_render_syntax_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='syntax_error', annotation=Name(id='_SyntaxError', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='highlighter', ctx=Store())], value=Call(func=Name(id='ReprHighlighter', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='path_highlighter', ctx=Store())], value=Call(func=Name(id='PathHighlighter', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='syntax_error', ctx=Load()), attr='filename', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='<stdin>')]), body=[If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Attribute(value=Name(id='syntax_error', ctx=Load()), attr='filename', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='text', ctx=Store())], value=Call(func=Attribute(value=Name(id='Text', ctx=Load()), attr='assemble', ctx=Load()), args=[Tuple(elts=[JoinedStr(values=[Constant(value=' '), FormattedValue(value=Attribute(value=Name(id='syntax_error', ctx=Load()), attr='filename', ctx=Load()), conversion=-1)]), Constant(value='pygments.string')], ctx=Load()), Tuple(elts=[Constant(value=':'), Constant(value='pygments.text')], ctx=Load()), Tuple(elts=[Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='syntax_error', ctx=Load()), attr='lineno', ctx=Load())], keywords=[]), Constant(value='pygments.number')], ctx=Load())], keywords=[keyword(arg='style', value=Constant(value='pygments.text'))])), Expr(value=Yield(value=Call(func=Name(id='path_highlighter', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[])))], orelse=[])], orelse=[]), Assign(targets=[Name(id='syntax_error_text', ctx=Store())], value=Call(func=Name(id='highlighter', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='syntax_error', ctx=Load()), attr='line', ctx=Load()), attr='rstrip', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Attribute(value=Name(id='syntax_error_text', ctx=Load()), attr='no_wrap', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='offset', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='syntax_error', ctx=Load()), attr='offset', ctx=Load()), op=Sub(), right=Constant(value=1)), Call(func=Name(id='len', ctx=Load()), args=[Name(id='syntax_error_text', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='syntax_error_text', ctx=Load()), attr='stylize', ctx=Load()), args=[Constant(value='bold underline'), Name(id='offset', ctx=Load()), Name(id='offset', ctx=Load())], keywords=[])), AugAssign(target=Name(id='syntax_error_text', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='Text', ctx=Load()), attr='from_markup', ctx=Load()), args=[BinOp(left=BinOp(left=Constant(value='\n'), op=Add(), right=BinOp(left=Constant(value=' '), op=Mult(), right=Name(id='offset', ctx=Load()))), op=Add(), right=Constant(value='[traceback.offset]▲[/]'))], keywords=[keyword(arg='style', value=Constant(value='pygments.text'))])), Expr(value=Yield(value=Name(id='syntax_error_text', ctx=Load())))], decorator_list=[Call(func=Name(id='group', ctx=Load()), args=[], keywords=[])], returns=Name(id='RenderResult', ctx=Load())), FunctionDef(name='_guess_lexer', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='filename', annotation=Name(id='str', ctx=Load())), arg(arg='code', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ext', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='splitext', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[]), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())), If(test=UnaryOp(op=Not(), operand=Name(id='ext', ctx=Load())), body=[Assign(targets=[Name(id='new_line_index', ctx=Store())], value=Call(func=Attribute(value=Name(id='code', ctx=Load()), attr='index', ctx=Load()), args=[Constant(value='\n')], keywords=[])), Assign(targets=[Name(id='first_line', ctx=Store())], value=IfExp(test=Compare(left=Name(id='new_line_index', ctx=Load()), ops=[NotEq()], comparators=[UnaryOp(op=USub(), operand=Constant(value=1))]), body=Subscript(value=Name(id='code', ctx=Load()), slice=Slice(upper=Name(id='new_line_index', ctx=Load())), ctx=Load()), orelse=Name(id='code', ctx=Load()))), If(test=BoolOp(op=And(), values=[Call(func=Attribute(value=Name(id='first_line', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='#!')], keywords=[]), Compare(left=Constant(value='python'), ops=[In()], comparators=[Call(func=Attribute(value=Name(id='first_line', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])])]), body=[Return(value=Constant(value='python'))], orelse=[])], orelse=[]), Try(body=[Return(value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Attribute(value=Name(id='cls', ctx=Load()), attr='LEXERS', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='ext', ctx=Load())], keywords=[]), Attribute(value=Call(func=Name(id='guess_lexer_for_filename', ctx=Load()), args=[Name(id='filename', ctx=Load()), Name(id='code', ctx=Load())], keywords=[]), attr='name', ctx=Load())]))], handlers=[ExceptHandler(type=Name(id='ClassNotFound', ctx=Load()), body=[Return(value=Constant(value='text'))])], orelse=[], finalbody=[])], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='_render_stack', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='stack', annotation=Name(id='Stack', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='path_highlighter', ctx=Store())], value=Call(func=Name(id='PathHighlighter', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='theme', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='theme', ctx=Load())), FunctionDef(name='read_code', args=arguments(posonlyargs=[], args=[arg(arg='filename', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Read files, and cache results on filename.\n\n            Args:\n                filename (str): Filename to read\n\n            Returns:\n                str: Contents of file\n            ')), Return(value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Call(func=Attribute(value=Name(id='linecache', ctx=Load()), attr='getlines', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='render_locals', args=arguments(posonlyargs=[], args=[arg(arg='frame', annotation=Name(id='Frame', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='frame', ctx=Load()), attr='locals', ctx=Load()), body=[Expr(value=Yield(value=Call(func=Name(id='render_scope', ctx=Load()), args=[Attribute(value=Name(id='frame', ctx=Load()), attr='locals', ctx=Load())], keywords=[keyword(arg='title', value=Constant(value='locals')), keyword(arg='indent_guides', value=Attribute(value=Name(id='self', ctx=Load()), attr='indent_guides', ctx=Load())), keyword(arg='max_length', value=Attribute(value=Name(id='self', ctx=Load()), attr='locals_max_length', ctx=Load())), keyword(arg='max_string', value=Attribute(value=Name(id='self', ctx=Load()), attr='locals_max_string', ctx=Load()))])))], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='ConsoleRenderable', ctx=Load()), ctx=Load())), AnnAssign(target=Name(id='exclude_frames', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='range', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=1), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='max_frames', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='exclude_frames', ctx=Store())], value=Call(func=Name(id='range', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='max_frames', ctx=Load()), op=FloorDiv(), right=Constant(value=2)), BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='stack', ctx=Load()), attr='frames', ctx=Load())], keywords=[]), op=Sub(), right=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='max_frames', ctx=Load()), op=FloorDiv(), right=Constant(value=2)))], keywords=[]))], orelse=[]), Assign(targets=[Name(id='excluded', ctx=Store())], value=Constant(value=False)), For(target=Tuple(elts=[Name(id='frame_index', ctx=Store()), Name(id='frame', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Attribute(value=Name(id='stack', ctx=Load()), attr='frames', ctx=Load())], keywords=[]), body=[If(test=BoolOp(op=And(), values=[Name(id='exclude_frames', ctx=Load()), Compare(left=Name(id='frame_index', ctx=Load()), ops=[In()], comparators=[Name(id='exclude_frames', ctx=Load())])]), body=[Assign(targets=[Name(id='excluded', ctx=Store())], value=Constant(value=True)), Continue()], orelse=[]), If(test=Name(id='excluded', ctx=Load()), body=[Assert(test=Compare(left=Name(id='exclude_frames', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Expr(value=Yield(value=Call(func=Name(id='Text', ctx=Load()), args=[JoinedStr(values=[Constant(value='\n... '), FormattedValue(value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='exclude_frames', ctx=Load())], keywords=[]), conversion=-1), Constant(value=' frames hidden ...')])], keywords=[keyword(arg='justify', value=Constant(value='center')), keyword(arg='style', value=Constant(value='traceback.error'))]))), Assign(targets=[Name(id='excluded', ctx=Store())], value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='first', ctx=Store())], value=Compare(left=Name(id='frame_index', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)])), Assign(targets=[Name(id='frame_filename', ctx=Store())], value=Attribute(value=Name(id='frame', ctx=Load()), attr='filename', ctx=Load())), Assign(targets=[Name(id='suppressed', ctx=Store())], value=Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Name(id='frame_filename', ctx=Load()), attr='startswith', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='path', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='suppress', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Attribute(value=Name(id='frame', ctx=Load()), attr='filename', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='text', ctx=Store())], value=Call(func=Attribute(value=Name(id='Text', ctx=Load()), attr='assemble', ctx=Load()), args=[Call(func=Name(id='path_highlighter', ctx=Load()), args=[Call(func=Name(id='Text', ctx=Load()), args=[Attribute(value=Name(id='frame', ctx=Load()), attr='filename', ctx=Load())], keywords=[keyword(arg='style', value=Constant(value='pygments.string'))])], keywords=[]), Tuple(elts=[Constant(value=':'), Constant(value='pygments.text')], ctx=Load()), Tuple(elts=[Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='frame', ctx=Load()), attr='lineno', ctx=Load())], keywords=[]), Constant(value='pygments.number')], ctx=Load()), Constant(value=' in '), Tuple(elts=[Attribute(value=Name(id='frame', ctx=Load()), attr='name', ctx=Load()), Constant(value='pygments.function')], ctx=Load())], keywords=[keyword(arg='style', value=Constant(value='pygments.text'))]))], orelse=[Assign(targets=[Name(id='text', ctx=Store())], value=Call(func=Attribute(value=Name(id='Text', ctx=Load()), attr='assemble', ctx=Load()), args=[Constant(value='in '), Tuple(elts=[Attribute(value=Name(id='frame', ctx=Load()), attr='name', ctx=Load()), Constant(value='pygments.function')], ctx=Load()), Tuple(elts=[Constant(value=':'), Constant(value='pygments.text')], ctx=Load()), Tuple(elts=[Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='frame', ctx=Load()), attr='lineno', ctx=Load())], keywords=[]), Constant(value='pygments.number')], ctx=Load())], keywords=[keyword(arg='style', value=Constant(value='pygments.text'))]))]), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='frame', ctx=Load()), attr='filename', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='<')], keywords=[])), UnaryOp(op=Not(), operand=Name(id='first', ctx=Load()))]), body=[Expr(value=Yield(value=Constant(value='')))], orelse=[]), Expr(value=Yield(value=Name(id='text', ctx=Load()))), If(test=Call(func=Attribute(value=Attribute(value=Name(id='frame', ctx=Load()), attr='filename', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='<')], keywords=[]), body=[Expr(value=YieldFrom(value=Call(func=Name(id='render_locals', ctx=Load()), args=[Name(id='frame', ctx=Load())], keywords=[]))), Continue()], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='suppressed', ctx=Load())), body=[Try(body=[Assign(targets=[Name(id='code', ctx=Store())], value=Call(func=Name(id='read_code', ctx=Load()), args=[Attribute(value=Name(id='frame', ctx=Load()), attr='filename', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='code', ctx=Load())), body=[Continue()], orelse=[]), Assign(targets=[Name(id='lexer_name', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_guess_lexer', ctx=Load()), args=[Attribute(value=Name(id='frame', ctx=Load()), attr='filename', ctx=Load()), Name(id='code', ctx=Load())], keywords=[])), Assign(targets=[Name(id='syntax', ctx=Store())], value=Call(func=Name(id='Syntax', ctx=Load()), args=[Name(id='code', ctx=Load()), Name(id='lexer_name', ctx=Load())], keywords=[keyword(arg='theme', value=Name(id='theme', ctx=Load())), keyword(arg='line_numbers', value=Constant(value=True)), keyword(arg='line_range', value=Tuple(elts=[BinOp(left=Attribute(value=Name(id='frame', ctx=Load()), attr='lineno', ctx=Load()), op=Sub(), right=Attribute(value=Name(id='self', ctx=Load()), attr='extra_lines', ctx=Load())), BinOp(left=Attribute(value=Name(id='frame', ctx=Load()), attr='lineno', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='extra_lines', ctx=Load()))], ctx=Load())), keyword(arg='highlight_lines', value=Set(elts=[Attribute(value=Name(id='frame', ctx=Load()), attr='lineno', ctx=Load())])), keyword(arg='word_wrap', value=Attribute(value=Name(id='self', ctx=Load()), attr='word_wrap', ctx=Load())), keyword(arg='code_width', value=Constant(value=88)), keyword(arg='indent_guides', value=Attribute(value=Name(id='self', ctx=Load()), attr='indent_guides', ctx=Load())), keyword(arg='dedent', value=Constant(value=False))])), Expr(value=Yield(value=Constant(value='')))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='error', body=[Expr(value=Yield(value=Call(func=Attribute(value=Name(id='Text', ctx=Load()), attr='assemble', ctx=Load()), args=[Tuple(elts=[JoinedStr(values=[Constant(value='\n'), FormattedValue(value=Name(id='error', ctx=Load()), conversion=-1)]), Constant(value='traceback.error')], ctx=Load())], keywords=[])))])], orelse=[Expr(value=Yield(value=IfExp(test=Attribute(value=Name(id='frame', ctx=Load()), attr='locals', ctx=Load()), body=Call(func=Name(id='Columns', ctx=Load()), args=[List(elts=[Name(id='syntax', ctx=Load()), Starred(value=Call(func=Name(id='render_locals', ctx=Load()), args=[Name(id='frame', ctx=Load())], keywords=[]), ctx=Load())], ctx=Load())], keywords=[keyword(arg='padding', value=Constant(value=1))]), orelse=Name(id='syntax', ctx=Load()))))], finalbody=[])], orelse=[])], orelse=[])], decorator_list=[Call(func=Name(id='group', ctx=Load()), args=[], keywords=[])], returns=Name(id='RenderResult', ctx=Load()))], decorator_list=[]), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__')]), body=[ImportFrom(module='console', names=[alias(name='Console')], level=1), Assign(targets=[Name(id='console', ctx=Store())], value=Call(func=Name(id='Console', ctx=Load()), args=[], keywords=[])), Import(names=[alias(name='sys')]), FunctionDef(name='bar', args=arguments(posonlyargs=[], args=[arg(arg='a', annotation=Name(id='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='one', ctx=Store())], value=Constant(value=1)), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[BinOp(left=Name(id='one', ctx=Load()), op=Div(), right=Name(id='a', ctx=Load()))], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='foo', args=arguments(posonlyargs=[], args=[arg(arg='a', annotation=Name(id='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='_rich_traceback_guard', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='zed', ctx=Store())], value=Dict(keys=[Constant(value='characters'), Constant(value='atomic_types')], values=[Set(elts=[Constant(value='Paul Atreides'), Constant(value='Vladimir Harkonnen'), Constant(value='Thufir Hawat'), Constant(value='Duncan Idaho')]), Tuple(elts=[Constant(value=None), Constant(value=False), Constant(value=True)], ctx=Load())])), Expr(value=Call(func=Name(id='bar', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='error', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Try(body=[Expr(value=Call(func=Name(id='foo', ctx=Load()), args=[Constant(value=0)], keywords=[]))], handlers=[ExceptHandler(body=[Expr(value=Name(id='slfkjsldkfj', ctx=Load()))])], orelse=[], finalbody=[])], handlers=[ExceptHandler(body=[Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='print_exception', ctx=Load()), args=[], keywords=[keyword(arg='show_locals', value=Constant(value=True))]))])], orelse=[], finalbody=[])], decorator_list=[], returns=Constant(value=None)), Expr(value=Call(func=Name(id='error', ctx=Load()), args=[], keywords=[]))], orelse=[])], type_ignores=[])