Module(body=[ImportFrom(module='__future__', names=[alias(name='absolute_import')], level=0), Import(names=[alias(name='inspect')]), ImportFrom(module='inspect', names=[alias(name='cleandoc'), alias(name='getdoc'), alias(name='getfile'), alias(name='isclass'), alias(name='ismodule'), alias(name='signature')], level=0), ImportFrom(module='typing', names=[alias(name='Any'), alias(name='Collection'), alias(name='Iterable'), alias(name='Optional'), alias(name='Tuple'), alias(name='Type'), alias(name='Union')], level=0), ImportFrom(module='console', names=[alias(name='Group'), alias(name='RenderableType')], level=1), ImportFrom(module='control', names=[alias(name='escape_control_codes')], level=1), ImportFrom(module='highlighter', names=[alias(name='ReprHighlighter')], level=1), ImportFrom(module='jupyter', names=[alias(name='JupyterMixin')], level=1), ImportFrom(module='panel', names=[alias(name='Panel')], level=1), ImportFrom(module='pretty', names=[alias(name='Pretty')], level=1), ImportFrom(module='table', names=[alias(name='Table')], level=1), ImportFrom(module='text', names=[alias(name='Text'), alias(name='TextType')], level=1), FunctionDef(name='_first_paragraph', args=arguments(posonlyargs=[], args=[arg(arg='doc', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get the first paragraph from a docstring.')), Assign(targets=[Tuple(elts=[Name(id='paragraph', ctx=Store()), Name(id='_', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='doc', ctx=Load()), attr='partition', ctx=Load()), args=[Constant(value='\n\n')], keywords=[])), Return(value=Name(id='paragraph', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), ClassDef(name='Inspect', bases=[Name(id='JupyterMixin', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A renderable to inspect any Python Object.\n\n    Args:\n        obj (Any): An object to inspect.\n        title (str, optional): Title to display over inspect result, or None use type. Defaults to None.\n        help (bool, optional): Show full help text rather than just first paragraph. Defaults to False.\n        methods (bool, optional): Enable inspection of callables. Defaults to False.\n        docs (bool, optional): Also render doc strings. Defaults to True.\n        private (bool, optional): Show private attributes (beginning with underscore). Defaults to False.\n        dunder (bool, optional): Show attributes starting with double underscore. Defaults to False.\n        sort (bool, optional): Sort attributes alphabetically. Defaults to True.\n        all (bool, optional): Show all attributes. Defaults to False.\n        value (bool, optional): Pretty print value of object. Defaults to True.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='obj', annotation=Name(id='Any', ctx=Load()))], kwonlyargs=[arg(arg='title', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TextType', ctx=Load()), ctx=Load())), arg(arg='help', annotation=Name(id='bool', ctx=Load())), arg(arg='methods', annotation=Name(id='bool', ctx=Load())), arg(arg='docs', annotation=Name(id='bool', ctx=Load())), arg(arg='private', annotation=Name(id='bool', ctx=Load())), arg(arg='dunder', annotation=Name(id='bool', ctx=Load())), arg(arg='sort', annotation=Name(id='bool', ctx=Load())), arg(arg='all', annotation=Name(id='bool', ctx=Load())), arg(arg='value', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=None), Constant(value=False), Constant(value=False), Constant(value=True), Constant(value=False), Constant(value=False), Constant(value=True), Constant(value=True), Constant(value=True)], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='highlighter', ctx=Store())], value=Call(func=Name(id='ReprHighlighter', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='obj', ctx=Store())], value=Name(id='obj', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='title', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='title', ctx=Load()), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_make_title', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[])])), If(test=Name(id='all', ctx=Load()), body=[Assign(targets=[Name(id='methods', ctx=Store()), Name(id='private', ctx=Store()), Name(id='dunder', ctx=Store())], value=Constant(value=True))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='help', ctx=Store())], value=Name(id='help', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='methods', ctx=Store())], value=Name(id='methods', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='docs', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='docs', ctx=Load()), Name(id='help', ctx=Load())])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='private', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='private', ctx=Load()), Name(id='dunder', ctx=Load())])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='dunder', ctx=Store())], value=Name(id='dunder', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='sort', ctx=Store())], value=Name(id='sort', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='value', ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_make_title', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='obj', annotation=Name(id='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Make a default title.')), Assign(targets=[Name(id='title_str', ctx=Store())], value=IfExp(test=BoolOp(op=Or(), values=[Call(func=Name(id='isclass', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]), Call(func=Name(id='callable', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]), Call(func=Name(id='ismodule', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[])]), body=Call(func=Name(id='str', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]), orelse=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='type', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[])], keywords=[]))), Assign(targets=[Name(id='title_text', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='highlighter', ctx=Load()), args=[Name(id='title_str', ctx=Load())], keywords=[])), Return(value=Name(id='title_text', ctx=Load()))], decorator_list=[], returns=Name(id='Text', ctx=Load())), FunctionDef(name='__rich__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='Panel', ctx=Load()), attr='fit', ctx=Load()), args=[Call(func=Name(id='Group', ctx=Load()), args=[Starred(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_render', ctx=Load()), args=[], keywords=[]), ctx=Load())], keywords=[])], keywords=[keyword(arg='title', value=Attribute(value=Name(id='self', ctx=Load()), attr='title', ctx=Load())), keyword(arg='border_style', value=Constant(value='scope.border')), keyword(arg='padding', value=Tuple(elts=[Constant(value=0), Constant(value=1)], ctx=Load()))]))], decorator_list=[], returns=Name(id='Panel', ctx=Load())), FunctionDef(name='_get_signature', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='obj', annotation=Name(id='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get a signature for a callable.')), Try(body=[Assign(targets=[Name(id='_signature', ctx=Store())], value=BinOp(left=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='signature', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[])], keywords=[]), op=Add(), right=Constant(value=':')))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Assign(targets=[Name(id='_signature', ctx=Store())], value=Constant(value='(...)'))]), ExceptHandler(type=Name(id='TypeError', ctx=Load()), body=[Return(value=Constant(value=None))])], orelse=[], finalbody=[]), AnnAssign(target=Name(id='source_filename', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=1), Try(body=[Assign(targets=[Name(id='source_filename', ctx=Store())], value=Call(func=Name(id='getfile', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='OSError', ctx=Load()), Name(id='TypeError', ctx=Load())], ctx=Load()), body=[Pass()])], orelse=[], finalbody=[]), Assign(targets=[Name(id='callable_name', ctx=Store())], value=Call(func=Name(id='Text', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[keyword(arg='style', value=Constant(value='inspect.callable'))])), If(test=Name(id='source_filename', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='callable_name', ctx=Load()), attr='stylize', ctx=Load()), args=[JoinedStr(values=[Constant(value='link file://'), FormattedValue(value=Name(id='source_filename', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='signature_text', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='highlighter', ctx=Load()), args=[Name(id='_signature', ctx=Load())], keywords=[])), Assign(targets=[Name(id='qualname', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='name', ctx=Load()), Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='obj', ctx=Load()), Constant(value='__qualname__'), Name(id='name', ctx=Load())], keywords=[])])), If(test=Call(func=Attribute(value=Name(id='inspect', ctx=Load()), attr='isclass', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='prefix', ctx=Store())], value=Constant(value='class'))], orelse=[If(test=Call(func=Attribute(value=Name(id='inspect', ctx=Load()), attr='iscoroutinefunction', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='prefix', ctx=Store())], value=Constant(value='async def'))], orelse=[Assign(targets=[Name(id='prefix', ctx=Store())], value=Constant(value='def'))])]), Assign(targets=[Name(id='qual_signature', ctx=Store())], value=Call(func=Attribute(value=Name(id='Text', ctx=Load()), attr='assemble', ctx=Load()), args=[Tuple(elts=[JoinedStr(values=[FormattedValue(value=Name(id='prefix', ctx=Load()), conversion=-1), Constant(value=' ')]), JoinedStr(values=[Constant(value='inspect.'), FormattedValue(value=Call(func=Attribute(value=Name(id='prefix', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value=' '), Constant(value='_')], keywords=[]), conversion=-1)])], ctx=Load()), Tuple(elts=[Name(id='qualname', ctx=Load()), Constant(value='inspect.callable')], ctx=Load()), Name(id='signature_text', ctx=Load())], keywords=[])), Return(value=Name(id='qual_signature', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Text', ctx=Load()), ctx=Load())), FunctionDef(name='_render', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Render object.')), FunctionDef(name='sort_items', args=arguments(posonlyargs=[], args=[arg(arg='item', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='key', ctx=Store()), Tuple(elts=[Name(id='_error', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store())], ctx=Store())], value=Name(id='item', ctx=Load())), Return(value=Tuple(elts=[Call(func=Name(id='callable', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]), Call(func=Attribute(value=Call(func=Attribute(value=Name(id='key', ctx=Load()), attr='strip', ctx=Load()), args=[Constant(value='_')], keywords=[]), attr='lower', ctx=Load()), args=[], keywords=[])], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='bool', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='safe_getattr', args=arguments(posonlyargs=[], args=[arg(arg='attr_name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get attribute or any exception.')), Try(body=[Return(value=Tuple(elts=[Constant(value=None), Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='obj', ctx=Load()), Name(id='attr_name', ctx=Load())], keywords=[])], ctx=Load()))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='error', body=[Return(value=Tuple(elts=[Name(id='error', ctx=Load()), Constant(value=None)], ctx=Load()))])], orelse=[], finalbody=[])], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='Any', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='obj', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='obj', ctx=Load())), Assign(targets=[Name(id='keys', ctx=Store())], value=Call(func=Name(id='dir', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[])), Assign(targets=[Name(id='total_items', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='keys', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='dunder', ctx=Load())), body=[Assign(targets=[Name(id='keys', ctx=Store())], value=ListComp(elt=Name(id='key', ctx=Load()), generators=[comprehension(target=Name(id='key', ctx=Store()), iter=Name(id='keys', ctx=Load()), ifs=[UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='key', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='__')], keywords=[]))], is_async=0)]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='private', ctx=Load())), body=[Assign(targets=[Name(id='keys', ctx=Store())], value=ListComp(elt=Name(id='key', ctx=Load()), generators=[comprehension(target=Name(id='key', ctx=Store()), iter=Name(id='keys', ctx=Load()), ifs=[UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='key', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='_')], keywords=[]))], is_async=0)]))], orelse=[]), Assign(targets=[Name(id='not_shown_count', ctx=Store())], value=BinOp(left=Name(id='total_items', ctx=Load()), op=Sub(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='keys', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='items', ctx=Store())], value=ListComp(elt=Tuple(elts=[Name(id='key', ctx=Load()), Call(func=Name(id='safe_getattr', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[])], ctx=Load()), generators=[comprehension(target=Name(id='key', ctx=Store()), iter=Name(id='keys', ctx=Load()), ifs=[], is_async=0)])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='sort', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='items', ctx=Load()), attr='sort', ctx=Load()), args=[], keywords=[keyword(arg='key', value=Name(id='sort_items', ctx=Load()))]))], orelse=[]), Assign(targets=[Name(id='items_table', ctx=Store())], value=Call(func=Attribute(value=Name(id='Table', ctx=Load()), attr='grid', ctx=Load()), args=[], keywords=[keyword(arg='padding', value=Tuple(elts=[Constant(value=0), Constant(value=1)], ctx=Load())), keyword(arg='expand', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='items_table', ctx=Load()), attr='add_column', ctx=Load()), args=[], keywords=[keyword(arg='justify', value=Constant(value='right'))])), Assign(targets=[Name(id='add_row', ctx=Store())], value=Attribute(value=Name(id='items_table', ctx=Load()), attr='add_row', ctx=Load())), Assign(targets=[Name(id='highlighter', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='highlighter', ctx=Load())), If(test=Call(func=Name(id='callable', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='signature', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_signature', ctx=Load()), args=[Constant(value=''), Name(id='obj', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='signature', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Yield(value=Name(id='signature', ctx=Load()))), Expr(value=Yield(value=Constant(value='')))], orelse=[])], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='docs', ctx=Load()), body=[Assign(targets=[Name(id='_doc', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_formatted_doc', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='_doc', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='doc_text', ctx=Store())], value=Call(func=Name(id='Text', ctx=Load()), args=[Name(id='_doc', ctx=Load())], keywords=[keyword(arg='style', value=Constant(value='inspect.help'))])), Assign(targets=[Name(id='doc_text', ctx=Store())], value=Call(func=Name(id='highlighter', ctx=Load()), args=[Name(id='doc_text', ctx=Load())], keywords=[])), Expr(value=Yield(value=Name(id='doc_text', ctx=Load()))), Expr(value=Yield(value=Constant(value='')))], orelse=[])], orelse=[]), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='value', ctx=Load()), UnaryOp(op=Not(), operand=BoolOp(op=Or(), values=[Call(func=Name(id='isclass', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]), Call(func=Name(id='callable', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]), Call(func=Name(id='ismodule', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[])]))]), body=[Expr(value=Yield(value=Call(func=Name(id='Panel', ctx=Load()), args=[Call(func=Name(id='Pretty', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[keyword(arg='indent_guides', value=Constant(value=True)), keyword(arg='max_length', value=Constant(value=10)), keyword(arg='max_string', value=Constant(value=60))])], keywords=[keyword(arg='border_style', value=Constant(value='inspect.value.border'))]))), Expr(value=Yield(value=Constant(value='')))], orelse=[]), For(target=Tuple(elts=[Name(id='key', ctx=Store()), Tuple(elts=[Name(id='error', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store())], ctx=Store()), iter=Name(id='items', ctx=Load()), body=[Assign(targets=[Name(id='key_text', ctx=Store())], value=Call(func=Attribute(value=Name(id='Text', ctx=Load()), attr='assemble', ctx=Load()), args=[Tuple(elts=[Name(id='key', ctx=Load()), IfExp(test=Call(func=Attribute(value=Name(id='key', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='__')], keywords=[]), body=Constant(value='inspect.attr.dunder'), orelse=Constant(value='inspect.attr'))], ctx=Load()), Tuple(elts=[Constant(value=' ='), Constant(value='inspect.equals')], ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='error', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='warning', ctx=Store())], value=Call(func=Attribute(value=Name(id='key_text', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='warning', ctx=Load()), attr='stylize', ctx=Load()), args=[Constant(value='inspect.error')], keywords=[])), Expr(value=Call(func=Name(id='add_row', ctx=Load()), args=[Name(id='warning', ctx=Load()), Call(func=Name(id='highlighter', ctx=Load()), args=[Call(func=Name(id='repr', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])], keywords=[])], keywords=[])), Continue()], orelse=[]), If(test=Call(func=Name(id='callable', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='methods', ctx=Load())), body=[Continue()], orelse=[]), Assign(targets=[Name(id='_signature_text', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_signature', ctx=Load()), args=[Name(id='key', ctx=Load()), Name(id='value', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='_signature_text', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Name(id='add_row', ctx=Load()), args=[Name(id='key_text', ctx=Load()), Call(func=Name(id='Pretty', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[keyword(arg='highlighter', value=Name(id='highlighter', ctx=Load()))])], keywords=[]))], orelse=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='docs', ctx=Load()), body=[Assign(targets=[Name(id='docs', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_formatted_doc', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='docs', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='_signature_text', ctx=Load()), attr='append', ctx=Load()), args=[IfExp(test=Compare(left=Constant(value='\n'), ops=[In()], comparators=[Name(id='docs', ctx=Load())]), body=Constant(value='\n'), orelse=Constant(value=' '))], keywords=[])), Assign(targets=[Name(id='doc', ctx=Store())], value=Call(func=Name(id='highlighter', ctx=Load()), args=[Name(id='docs', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='doc', ctx=Load()), attr='stylize', ctx=Load()), args=[Constant(value='inspect.doc')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='_signature_text', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='doc', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Expr(value=Call(func=Name(id='add_row', ctx=Load()), args=[Name(id='key_text', ctx=Load()), Name(id='_signature_text', ctx=Load())], keywords=[]))])], orelse=[Expr(value=Call(func=Name(id='add_row', ctx=Load()), args=[Name(id='key_text', ctx=Load()), Call(func=Name(id='Pretty', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[keyword(arg='highlighter', value=Name(id='highlighter', ctx=Load()))])], keywords=[]))])], orelse=[]), If(test=Attribute(value=Name(id='items_table', ctx=Load()), attr='row_count', ctx=Load()), body=[Expr(value=Yield(value=Name(id='items_table', ctx=Load())))], orelse=[If(test=Name(id='not_shown_count', ctx=Load()), body=[Expr(value=Yield(value=Call(func=Attribute(value=Name(id='Text', ctx=Load()), attr='from_markup', ctx=Load()), args=[JoinedStr(values=[Constant(value='[b cyan]'), FormattedValue(value=Name(id='not_shown_count', ctx=Load()), conversion=-1), Constant(value='[/][i] attribute(s) not shown.[/i] Run [b][magenta]inspect[/]([not b]inspect[/])[/b] for options.')])], keywords=[])))], orelse=[])])], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='RenderableType', ctx=Load()), ctx=Load())), FunctionDef(name='_get_formatted_doc', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='object_', annotation=Name(id='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Extract the docstring of an object, process it and returns it.\n        The processing consists in cleaning up the doctring's indentation,\n        taking only its 1st paragraph if `self.help` is not True,\n        and escape its control codes.\n\n        Args:\n            object_ (Any): the object to get the docstring from.\n\n        Returns:\n            Optional[str]: the processed docstring, or None if no docstring was found.\n        ")), Assign(targets=[Name(id='docs', ctx=Store())], value=Call(func=Name(id='getdoc', ctx=Load()), args=[Name(id='object_', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='docs', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='docs', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='cleandoc', ctx=Load()), args=[Name(id='docs', ctx=Load())], keywords=[]), attr='strip', ctx=Load()), args=[], keywords=[])), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='help', ctx=Load())), body=[Assign(targets=[Name(id='docs', ctx=Store())], value=Call(func=Name(id='_first_paragraph', ctx=Load()), args=[Name(id='docs', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='escape_control_codes', ctx=Load()), args=[Name(id='docs', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], decorator_list=[]), FunctionDef(name='get_object_types_mro', args=arguments(posonlyargs=[], args=[arg(arg='obj', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='object', ctx=Load()), Subscript(value=Name(id='Type', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Returns the MRO of an object's class, or of the object itself if it's a class.")), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='obj', ctx=Load()), Constant(value='__mro__')], keywords=[])), body=[Assign(targets=[Name(id='obj', ctx=Store())], value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='obj', ctx=Load()), Constant(value='__mro__'), Tuple(elts=[], ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='type', ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load())), FunctionDef(name='get_object_types_mro_as_strings', args=arguments(posonlyargs=[], args=[arg(arg='obj', annotation=Name(id='object', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    Returns the MRO of an object's class as full qualified names, or of the object itself if it's a class.\n\n    Examples:\n        `object_types_mro_as_strings(JSONDecoder)` will return `['json.decoder.JSONDecoder', 'builtins.object']`\n    ")), Return(value=ListComp(elt=JoinedStr(values=[FormattedValue(value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='type_', ctx=Load()), Constant(value='__module__'), Constant(value='')], keywords=[]), conversion=-1), Constant(value='.'), FormattedValue(value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='type_', ctx=Load()), Constant(value='__qualname__'), Constant(value='')], keywords=[]), conversion=-1)]), generators=[comprehension(target=Name(id='type_', ctx=Store()), iter=Call(func=Name(id='get_object_types_mro', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[], returns=Subscript(value=Name(id='Collection', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='is_object_one_of_types', args=arguments(posonlyargs=[], args=[arg(arg='obj', annotation=Name(id='object', ctx=Load())), arg(arg='fully_qualified_types_names', annotation=Subscript(value=Name(id='Collection', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    Returns `True` if the given object's class (or the object itself, if it's a class) has one of the\n    fully qualified names in its MRO.\n    ")), For(target=Name(id='type_name', ctx=Store()), iter=Call(func=Name(id='get_object_types_mro_as_strings', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='type_name', ctx=Load()), ops=[In()], comparators=[Name(id='fully_qualified_types_names', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[])], orelse=[]), Return(value=Constant(value=False))], decorator_list=[], returns=Name(id='bool', ctx=Load()))], type_ignores=[])