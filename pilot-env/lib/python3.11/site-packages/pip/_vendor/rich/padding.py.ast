Module(body=[ImportFrom(module='typing', names=[alias(name='cast'), alias(name='List'), alias(name='Optional'), alias(name='Tuple'), alias(name='TYPE_CHECKING'), alias(name='Union')], level=0), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='console', names=[alias(name='Console'), alias(name='ConsoleOptions'), alias(name='RenderableType'), alias(name='RenderResult')], level=1)], orelse=[]), ImportFrom(module='jupyter', names=[alias(name='JupyterMixin')], level=1), ImportFrom(module='measure', names=[alias(name='Measurement')], level=1), ImportFrom(module='style', names=[alias(name='Style')], level=1), ImportFrom(module='segment', names=[alias(name='Segment')], level=1), Assign(targets=[Name(id='PaddingDimensions', ctx=Store())], value=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Subscript(value=Name(id='Tuple', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()), Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()), Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load()), Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), ClassDef(name='Padding', bases=[Name(id='JupyterMixin', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Draw space around content.\n\n    Example:\n        >>> print(Padding("Hello", (2, 4), style="on blue"))\n\n    Args:\n        renderable (RenderableType): String or other renderable.\n        pad (Union[int, Tuple[int]]): Padding for top, right, bottom, and left borders.\n            May be specified with 1, 2, or 4 integers (CSS style).\n        style (Union[str, Style], optional): Style for padding characters. Defaults to "none".\n        expand (bool, optional): Expand padding to fit available width. Defaults to True.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='renderable', annotation=Constant(value='RenderableType')), arg(arg='pad', annotation=Constant(value='PaddingDimensions'))], kwonlyargs=[arg(arg='style', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Style', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='expand', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value='none'), Constant(value=True)], defaults=[Tuple(elts=[Constant(value=0), Constant(value=0), Constant(value=0), Constant(value=0)], ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='renderable', ctx=Store())], value=Name(id='renderable', ctx=Load())), Assign(targets=[Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='top', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='right', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='bottom', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='left', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='unpack', ctx=Load()), args=[Name(id='pad', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Store())], value=Name(id='style', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='expand', ctx=Store())], value=Name(id='expand', ctx=Load()))], decorator_list=[]), FunctionDef(name='indent', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='renderable', annotation=Constant(value='RenderableType')), arg(arg='level', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Make padding instance to render an indent.\n\n        Args:\n            renderable (RenderableType): String or other renderable.\n            level (int): Number of characters to indent.\n\n        Returns:\n            Padding: A Padding instance.\n        ')), Return(value=Call(func=Name(id='Padding', ctx=Load()), args=[Name(id='renderable', ctx=Load())], keywords=[keyword(arg='pad', value=Tuple(elts=[Constant(value=0), Constant(value=0), Constant(value=0), Name(id='level', ctx=Load())], ctx=Load())), keyword(arg='expand', value=Constant(value=False))]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Constant(value='Padding')), FunctionDef(name='unpack', args=arguments(posonlyargs=[], args=[arg(arg='pad', annotation=Constant(value='PaddingDimensions'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Unpack padding specified in CSS style.')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='pad', ctx=Load()), Name(id='int', ctx=Load())], keywords=[]), body=[Return(value=Tuple(elts=[Name(id='pad', ctx=Load()), Name(id='pad', ctx=Load()), Name(id='pad', ctx=Load()), Name(id='pad', ctx=Load())], ctx=Load()))], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='pad', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='_pad', ctx=Store())], value=Subscript(value=Name(id='pad', ctx=Load()), slice=Constant(value=0), ctx=Load())), Return(value=Tuple(elts=[Name(id='_pad', ctx=Load()), Name(id='_pad', ctx=Load()), Name(id='_pad', ctx=Load()), Name(id='_pad', ctx=Load())], ctx=Load()))], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='pad', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=2)]), body=[Assign(targets=[Tuple(elts=[Name(id='pad_top', ctx=Store()), Name(id='pad_right', ctx=Store())], ctx=Store())], value=Call(func=Name(id='cast', ctx=Load()), args=[Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()), Name(id='pad', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Name(id='pad_top', ctx=Load()), Name(id='pad_right', ctx=Load()), Name(id='pad_top', ctx=Load()), Name(id='pad_right', ctx=Load())], ctx=Load()))], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='pad', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=4)]), body=[Assign(targets=[Tuple(elts=[Name(id='top', ctx=Store()), Name(id='right', ctx=Store()), Name(id='bottom', ctx=Store()), Name(id='left', ctx=Store())], ctx=Store())], value=Call(func=Name(id='cast', ctx=Load()), args=[Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load()), Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()), Name(id='pad', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Name(id='top', ctx=Load()), Name(id='right', ctx=Load()), Name(id='bottom', ctx=Load()), Name(id='left', ctx=Load())], ctx=Load()))], orelse=[]), Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='1, 2 or 4 integers required for padding; '), FormattedValue(value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='pad', ctx=Load())], keywords=[]), conversion=-1), Constant(value=' given')])], keywords=[]))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load()), Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[Constant(value='Padding('), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='renderable', ctx=Load()), conversion=114), Constant(value=', ('), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='top', ctx=Load()), conversion=-1), Constant(value=','), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='right', ctx=Load()), conversion=-1), Constant(value=','), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='bottom', ctx=Load()), conversion=-1), Constant(value=','), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='left', ctx=Load()), conversion=-1), Constant(value='))')]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='__rich_console__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='console', annotation=Constant(value='Console')), arg(arg='options', annotation=Constant(value='ConsoleOptions'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='style', ctx=Store())], value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='get_style', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load())], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='expand', ctx=Load()), body=[Assign(targets=[Name(id='width', ctx=Store())], value=Attribute(value=Name(id='options', ctx=Load()), attr='max_width', ctx=Load()))], orelse=[Assign(targets=[Name(id='width', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[BinOp(left=BinOp(left=Attribute(value=Call(func=Attribute(value=Name(id='Measurement', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='console', ctx=Load()), Name(id='options', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='renderable', ctx=Load())], keywords=[]), attr='maximum', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='left', ctx=Load())), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='right', ctx=Load())), Attribute(value=Name(id='options', ctx=Load()), attr='max_width', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='render_options', ctx=Store())], value=Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='update_width', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='width', ctx=Load()), op=Sub(), right=Attribute(value=Name(id='self', ctx=Load()), attr='left', ctx=Load())), op=Sub(), right=Attribute(value=Name(id='self', ctx=Load()), attr='right', ctx=Load()))], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='render_options', ctx=Load()), attr='height', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='render_options', ctx=Store())], value=Call(func=Attribute(value=Name(id='render_options', ctx=Load()), attr='update_height', ctx=Load()), args=[], keywords=[keyword(arg='height', value=BinOp(left=BinOp(left=Attribute(value=Name(id='render_options', ctx=Load()), attr='height', ctx=Load()), op=Sub(), right=Attribute(value=Name(id='self', ctx=Load()), attr='top', ctx=Load())), op=Sub(), right=Attribute(value=Name(id='self', ctx=Load()), attr='bottom', ctx=Load())))]))], orelse=[]), Assign(targets=[Name(id='lines', ctx=Store())], value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='render_lines', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='renderable', ctx=Load()), Name(id='render_options', ctx=Load())], keywords=[keyword(arg='style', value=Name(id='style', ctx=Load())), keyword(arg='pad', value=Constant(value=True))])), Assign(targets=[Name(id='_Segment', ctx=Store())], value=Name(id='Segment', ctx=Load())), Assign(targets=[Name(id='left', ctx=Store())], value=IfExp(test=Attribute(value=Name(id='self', ctx=Load()), attr='left', ctx=Load()), body=Call(func=Name(id='_Segment', ctx=Load()), args=[BinOp(left=Constant(value=' '), op=Mult(), right=Attribute(value=Name(id='self', ctx=Load()), attr='left', ctx=Load())), Name(id='style', ctx=Load())], keywords=[]), orelse=Constant(value=None))), Assign(targets=[Name(id='right', ctx=Store())], value=IfExp(test=Attribute(value=Name(id='self', ctx=Load()), attr='right', ctx=Load()), body=List(elts=[Call(func=Name(id='_Segment', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=BinOp(left=Constant(value=' '), op=Mult(), right=Attribute(value=Name(id='self', ctx=Load()), attr='right', ctx=Load())), conversion=-1)]), Name(id='style', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='_Segment', ctx=Load()), attr='line', ctx=Load()), args=[], keywords=[])], ctx=Load()), orelse=List(elts=[Call(func=Attribute(value=Name(id='_Segment', ctx=Load()), attr='line', ctx=Load()), args=[], keywords=[])], ctx=Load()))), AnnAssign(target=Name(id='blank_line', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Segment', ctx=Load()), ctx=Load()), ctx=Load()), value=Constant(value=None), simple=1), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='top', ctx=Load()), body=[Assign(targets=[Name(id='blank_line', ctx=Store())], value=List(elts=[Call(func=Name(id='_Segment', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=BinOp(left=Constant(value=' '), op=Mult(), right=Name(id='width', ctx=Load())), conversion=-1), Constant(value='\n')]), Name(id='style', ctx=Load())], keywords=[])], ctx=Load())), Expr(value=YieldFrom(value=BinOp(left=Name(id='blank_line', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='self', ctx=Load()), attr='top', ctx=Load()))))], orelse=[]), If(test=Name(id='left', ctx=Load()), body=[For(target=Name(id='line', ctx=Store()), iter=Name(id='lines', ctx=Load()), body=[Expr(value=Yield(value=Name(id='left', ctx=Load()))), Expr(value=YieldFrom(value=Name(id='line', ctx=Load()))), Expr(value=YieldFrom(value=Name(id='right', ctx=Load())))], orelse=[])], orelse=[For(target=Name(id='line', ctx=Store()), iter=Name(id='lines', ctx=Load()), body=[Expr(value=YieldFrom(value=Name(id='line', ctx=Load()))), Expr(value=YieldFrom(value=Name(id='right', ctx=Load())))], orelse=[])]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='bottom', ctx=Load()), body=[Assign(targets=[Name(id='blank_line', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='blank_line', ctx=Load()), List(elts=[Call(func=Name(id='_Segment', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=BinOp(left=Constant(value=' '), op=Mult(), right=Name(id='width', ctx=Load())), conversion=-1), Constant(value='\n')]), Name(id='style', ctx=Load())], keywords=[])], ctx=Load())])), Expr(value=YieldFrom(value=BinOp(left=Name(id='blank_line', ctx=Load()), op=Mult(), right=Attribute(value=Name(id='self', ctx=Load()), attr='bottom', ctx=Load()))))], orelse=[])], decorator_list=[], returns=Constant(value='RenderResult')), FunctionDef(name='__rich_measure__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='console', annotation=Constant(value='Console')), arg(arg='options', annotation=Constant(value='ConsoleOptions'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='max_width', ctx=Store())], value=Attribute(value=Name(id='options', ctx=Load()), attr='max_width', ctx=Load())), Assign(targets=[Name(id='extra_width', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='left', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='right', ctx=Load()))), If(test=Compare(left=BinOp(left=Name(id='max_width', ctx=Load()), op=Sub(), right=Name(id='extra_width', ctx=Load())), ops=[Lt()], comparators=[Constant(value=1)]), body=[Return(value=Call(func=Name(id='Measurement', ctx=Load()), args=[Name(id='max_width', ctx=Load()), Name(id='max_width', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='measure_min', ctx=Store()), Name(id='measure_max', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='Measurement', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='console', ctx=Load()), Name(id='options', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='renderable', ctx=Load())], keywords=[])), Assign(targets=[Name(id='measurement', ctx=Store())], value=Call(func=Name(id='Measurement', ctx=Load()), args=[BinOp(left=Name(id='measure_min', ctx=Load()), op=Add(), right=Name(id='extra_width', ctx=Load())), BinOp(left=Name(id='measure_max', ctx=Load()), op=Add(), right=Name(id='extra_width', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='measurement', ctx=Store())], value=Call(func=Attribute(value=Name(id='measurement', ctx=Load()), attr='with_maximum', ctx=Load()), args=[Name(id='max_width', ctx=Load())], keywords=[])), Return(value=Name(id='measurement', ctx=Load()))], decorator_list=[], returns=Constant(value='Measurement'))], decorator_list=[]), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__')]), body=[ImportFrom(module='pip._vendor.rich', names=[alias(name='print')], level=0), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Name(id='Padding', ctx=Load()), args=[Constant(value='Hello, World'), Tuple(elts=[Constant(value=2), Constant(value=4)], ctx=Load())], keywords=[keyword(arg='style', value=Constant(value='on blue'))])], keywords=[]))], orelse=[])], type_ignores=[])