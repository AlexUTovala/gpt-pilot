Module(body=[Import(names=[alias(name='re')]), ImportFrom(module='abc', names=[alias(name='ABC'), alias(name='abstractmethod')], level=0), ImportFrom(module='typing', names=[alias(name='List'), alias(name='Union')], level=0), ImportFrom(module='text', names=[alias(name='Span'), alias(name='Text')], level=1), FunctionDef(name='_combine_regex', args=arguments(posonlyargs=[], args=[], vararg=arg(arg='regexes', annotation=Name(id='str', ctx=Load())), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Combine a number of regexes in to a single regex.\n\n    Returns:\n        str: New regex with all regexes ORed together.\n    ')), Return(value=Call(func=Attribute(value=Constant(value='|'), attr='join', ctx=Load()), args=[Name(id='regexes', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), ClassDef(name='Highlighter', bases=[Name(id='ABC', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Abstract base class for highlighters.')), FunctionDef(name='__call__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='text', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Text', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Highlight a str or Text instance.\n\n        Args:\n            text (Union[str, ~Text]): Text to highlight.\n\n        Raises:\n            TypeError: If not called with text or str.\n\n        Returns:\n            Text: A test instance with highlighting applied.\n        ')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='text', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='highlight_text', ctx=Store())], value=Call(func=Name(id='Text', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[]))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='text', ctx=Load()), Name(id='Text', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='highlight_text', ctx=Store())], value=Call(func=Attribute(value=Name(id='text', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[]))], orelse=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[JoinedStr(values=[Constant(value='str or Text instance required, not '), FormattedValue(value=Name(id='text', ctx=Load()), conversion=114)])], keywords=[]))])]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='highlight', ctx=Load()), args=[Name(id='highlight_text', ctx=Load())], keywords=[])), Return(value=Name(id='highlight_text', ctx=Load()))], decorator_list=[], returns=Name(id='Text', ctx=Load())), FunctionDef(name='highlight', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='text', annotation=Name(id='Text', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Apply highlighting in place to text.\n\n        Args:\n            text (~Text): A text object highlight.\n        '))], decorator_list=[Name(id='abstractmethod', ctx=Load())], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='NullHighlighter', bases=[Name(id='Highlighter', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="A highlighter object that doesn't highlight.\n\n    May be used to disable highlighting entirely.\n\n    ")), FunctionDef(name='highlight', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='text', annotation=Name(id='Text', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Nothing to do'))], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='RegexHighlighter', bases=[Name(id='Highlighter', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Applies highlighting from a list of regular expressions.')), AnnAssign(target=Name(id='highlights', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), AnnAssign(target=Name(id='base_style', ctx=Store()), annotation=Name(id='str', ctx=Load()), value=Constant(value=''), simple=1), FunctionDef(name='highlight', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='text', annotation=Name(id='Text', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Highlight :class:`rich.text.Text` using regular expressions.\n\n        Args:\n            text (~Text): Text to highlighted.\n\n        ')), Assign(targets=[Name(id='highlight_regex', ctx=Store())], value=Attribute(value=Name(id='text', ctx=Load()), attr='highlight_regex', ctx=Load())), For(target=Name(id='re_highlight', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='highlights', ctx=Load()), body=[Expr(value=Call(func=Name(id='highlight_regex', ctx=Load()), args=[Name(id='re_highlight', ctx=Load())], keywords=[keyword(arg='style_prefix', value=Attribute(value=Name(id='self', ctx=Load()), attr='base_style', ctx=Load()))]))], orelse=[])], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='ReprHighlighter', bases=[Name(id='RegexHighlighter', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Highlights the text typically produced from ``__repr__`` methods.')), Assign(targets=[Name(id='base_style', ctx=Store())], value=Constant(value='repr.')), Assign(targets=[Name(id='highlights', ctx=Store())], value=List(elts=[Constant(value='(?P<tag_start><)(?P<tag_name>[-\\w.:|]*)(?P<tag_contents>[\\w\\W]*)(?P<tag_end>>)'), Constant(value='(?P<attrib_name>[\\w_]{1,50})=(?P<attrib_value>"?[\\w_]+"?)?'), Constant(value='(?P<brace>[][{}()])'), Call(func=Name(id='_combine_regex', ctx=Load()), args=[Constant(value='(?P<ipv4>[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3})'), Constant(value='(?P<ipv6>([A-Fa-f0-9]{1,4}::?){1,7}[A-Fa-f0-9]{1,4})'), Constant(value='(?P<eui64>(?:[0-9A-Fa-f]{1,2}-){7}[0-9A-Fa-f]{1,2}|(?:[0-9A-Fa-f]{1,2}:){7}[0-9A-Fa-f]{1,2}|(?:[0-9A-Fa-f]{4}\\.){3}[0-9A-Fa-f]{4})'), Constant(value='(?P<eui48>(?:[0-9A-Fa-f]{1,2}-){5}[0-9A-Fa-f]{1,2}|(?:[0-9A-Fa-f]{1,2}:){5}[0-9A-Fa-f]{1,2}|(?:[0-9A-Fa-f]{4}\\.){2}[0-9A-Fa-f]{4})'), Constant(value='(?P<uuid>[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12})'), Constant(value='(?P<call>[\\w.]*?)\\('), Constant(value='\\b(?P<bool_true>True)\\b|\\b(?P<bool_false>False)\\b|\\b(?P<none>None)\\b'), Constant(value='(?P<ellipsis>\\.\\.\\.)'), Constant(value='(?P<number_complex>(?<!\\w)(?:\\-?[0-9]+\\.?[0-9]*(?:e[-+]?\\d+?)?)(?:[-+](?:[0-9]+\\.?[0-9]*(?:e[-+]?\\d+)?))?j)'), Constant(value='(?P<number>(?<!\\w)\\-?[0-9]+\\.?[0-9]*(e[-+]?\\d+?)?\\b|0x[0-9a-fA-F]*)'), Constant(value='(?P<path>\\B(/[-\\w._+]+)*\\/)(?P<filename>[-\\w._+]*)?'), Constant(value='(?<![\\\\\\w])(?P<str>b?\'\'\'.*?(?<!\\\\)\'\'\'|b?\'.*?(?<!\\\\)\'|b?\\"\\"\\".*?(?<!\\\\)\\"\\"\\"|b?\\".*?(?<!\\\\)\\")'), Constant(value='(?P<url>(file|https|http|ws|wss)://[-0-9a-zA-Z$_+!`(),.?/;:&=%#]*)')], keywords=[])], ctx=Load()))], decorator_list=[]), ClassDef(name='JSONHighlighter', bases=[Name(id='RegexHighlighter', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Highlights JSON')), Assign(targets=[Name(id='JSON_STR', ctx=Store())], value=Constant(value='(?<![\\\\\\w])(?P<str>b?\\".*?(?<!\\\\)\\")')), Assign(targets=[Name(id='JSON_WHITESPACE', ctx=Store())], value=Set(elts=[Constant(value=' '), Constant(value='\n'), Constant(value='\r'), Constant(value='\t')])), Assign(targets=[Name(id='base_style', ctx=Store())], value=Constant(value='json.')), Assign(targets=[Name(id='highlights', ctx=Store())], value=List(elts=[Call(func=Name(id='_combine_regex', ctx=Load()), args=[Constant(value='(?P<brace>[\\{\\[\\(\\)\\]\\}])'), Constant(value='\\b(?P<bool_true>true)\\b|\\b(?P<bool_false>false)\\b|\\b(?P<null>null)\\b'), Constant(value='(?P<number>(?<!\\w)\\-?[0-9]+\\.?[0-9]*(e[\\-\\+]?\\d+?)?\\b|0x[0-9a-fA-F]*)'), Name(id='JSON_STR', ctx=Load())], keywords=[])], ctx=Load())), FunctionDef(name='highlight', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='text', annotation=Name(id='Text', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='highlight', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[])), Assign(targets=[Name(id='plain', ctx=Store())], value=Attribute(value=Name(id='text', ctx=Load()), attr='plain', ctx=Load())), Assign(targets=[Name(id='append', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='text', ctx=Load()), attr='spans', ctx=Load()), attr='append', ctx=Load())), Assign(targets=[Name(id='whitespace', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='JSON_WHITESPACE', ctx=Load())), For(target=Name(id='match', ctx=Store()), iter=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='finditer', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='JSON_STR', ctx=Load()), Name(id='plain', ctx=Load())], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='start', ctx=Store()), Name(id='end', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='span', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='cursor', ctx=Store())], value=Name(id='end', ctx=Load())), While(test=Compare(left=Name(id='cursor', ctx=Load()), ops=[Lt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='plain', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='char', ctx=Store())], value=Subscript(value=Name(id='plain', ctx=Load()), slice=Name(id='cursor', ctx=Load()), ctx=Load())), AugAssign(target=Name(id='cursor', ctx=Store()), op=Add(), value=Constant(value=1)), If(test=Compare(left=Name(id='char', ctx=Load()), ops=[Eq()], comparators=[Constant(value=':')]), body=[Expr(value=Call(func=Name(id='append', ctx=Load()), args=[Call(func=Name(id='Span', ctx=Load()), args=[Name(id='start', ctx=Load()), Name(id='end', ctx=Load()), Constant(value='json.key')], keywords=[])], keywords=[]))], orelse=[If(test=Compare(left=Name(id='char', ctx=Load()), ops=[In()], comparators=[Name(id='whitespace', ctx=Load())]), body=[Continue()], orelse=[])]), Break()], orelse=[])], orelse=[])], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='ISO8601Highlighter', bases=[Name(id='RegexHighlighter', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Highlights the ISO8601 date time strings.\n    Regex reference: https://www.oreilly.com/library/view/regular-expressions-cookbook/9781449327453/ch04s07.html\n    ')), Assign(targets=[Name(id='base_style', ctx=Store())], value=Constant(value='iso8601.')), Assign(targets=[Name(id='highlights', ctx=Store())], value=List(elts=[Constant(value='^(?P<year>[0-9]{4})-(?P<month>1[0-2]|0[1-9])$'), Constant(value='^(?P<date>(?P<year>[0-9]{4})(?P<month>1[0-2]|0[1-9])(?P<day>3[01]|0[1-9]|[12][0-9]))$'), Constant(value='^(?P<date>(?P<year>[0-9]{4})-?(?P<day>36[0-6]|3[0-5][0-9]|[12][0-9]{2}|0[1-9][0-9]|00[1-9]))$'), Constant(value='^(?P<date>(?P<year>[0-9]{4})-?W(?P<week>5[0-3]|[1-4][0-9]|0[1-9]))$'), Constant(value='^(?P<date>(?P<year>[0-9]{4})-?W(?P<week>5[0-3]|[1-4][0-9]|0[1-9])-?(?P<day>[1-7]))$'), Constant(value='^(?P<time>(?P<hour>2[0-3]|[01][0-9]):?(?P<minute>[0-5][0-9]))$'), Constant(value='^(?P<time>(?P<hour>2[0-3]|[01][0-9])(?P<minute>[0-5][0-9])(?P<second>[0-5][0-9]))$'), Constant(value='^(?P<timezone>(Z|[+-](?:2[0-3]|[01][0-9])(?::?(?:[0-5][0-9]))?))$'), Constant(value='^(?P<time>(?P<hour>2[0-3]|[01][0-9])(?P<minute>[0-5][0-9])(?P<second>[0-5][0-9]))(?P<timezone>Z|[+-](?:2[0-3]|[01][0-9])(?::?(?:[0-5][0-9]))?)$'), Constant(value='^(?P<date>(?P<year>[0-9]{4})(?P<hyphen>-)?(?P<month>1[0-2]|0[1-9])(?(hyphen)-)(?P<day>3[01]|0[1-9]|[12][0-9])) (?P<time>(?P<hour>2[0-3]|[01][0-9])(?(hyphen):)(?P<minute>[0-5][0-9])(?(hyphen):)(?P<second>[0-5][0-9]))$'), Constant(value='^(?P<date>(?P<year>-?(?:[1-9][0-9]*)?[0-9]{4})-(?P<month>1[0-2]|0[1-9])-(?P<day>3[01]|0[1-9]|[12][0-9]))(?P<timezone>Z|[+-](?:2[0-3]|[01][0-9]):[0-5][0-9])?$'), Constant(value='^(?P<time>(?P<hour>2[0-3]|[01][0-9]):(?P<minute>[0-5][0-9]):(?P<second>[0-5][0-9])(?P<frac>\\.[0-9]+)?)(?P<timezone>Z|[+-](?:2[0-3]|[01][0-9]):[0-5][0-9])?$'), Constant(value='^(?P<date>(?P<year>-?(?:[1-9][0-9]*)?[0-9]{4})-(?P<month>1[0-2]|0[1-9])-(?P<day>3[01]|0[1-9]|[12][0-9]))T(?P<time>(?P<hour>2[0-3]|[01][0-9]):(?P<minute>[0-5][0-9]):(?P<second>[0-5][0-9])(?P<ms>\\.[0-9]+)?)(?P<timezone>Z|[+-](?:2[0-3]|[01][0-9]):[0-5][0-9])?$')], ctx=Load()))], decorator_list=[]), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__')]), body=[ImportFrom(module='console', names=[alias(name='Console')], level=1), Assign(targets=[Name(id='console', ctx=Store())], value=Call(func=Name(id='Console', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='print', ctx=Load()), args=[Constant(value='[bold green]hello world![/bold green]')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='print', ctx=Load()), args=[Constant(value="'[bold green]hello world![/bold green]'")], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='print', ctx=Load()), args=[Constant(value=' /foo')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='print', ctx=Load()), args=[Constant(value='/foo/')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='print', ctx=Load()), args=[Constant(value='/foo/bar')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='print', ctx=Load()), args=[Constant(value='foo/bar/baz')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='print', ctx=Load()), args=[Constant(value='/foo/bar/baz?foo=bar+egg&egg=baz')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='print', ctx=Load()), args=[Constant(value='/foo/bar/baz/')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='print', ctx=Load()), args=[Constant(value='/foo/bar/baz/egg')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='print', ctx=Load()), args=[Constant(value='/foo/bar/baz/egg.py')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='print', ctx=Load()), args=[Constant(value='/foo/bar/baz/egg.py word')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='print', ctx=Load()), args=[Constant(value=' /foo/bar/baz/egg.py word')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='print', ctx=Load()), args=[Constant(value='foo /foo/bar/baz/egg.py word')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='print', ctx=Load()), args=[Constant(value='foo /foo/bar/ba._++z/egg+.py word')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='print', ctx=Load()), args=[Constant(value='https://example.org?foo=bar#header')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='print', ctx=Load()), args=[Constant(value=1234567.34)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='print', ctx=Load()), args=[BinOp(left=Constant(value=1), op=Div(), right=Constant(value=2))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='print', ctx=Load()), args=[BinOp(left=UnaryOp(op=USub(), operand=Constant(value=1)), op=Div(), right=Constant(value=123123123123))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='print', ctx=Load()), args=[Constant(value='127.0.1.1 bar 192.168.1.4 2001:0db8:85a3:0000:0000:8a2e:0370:7334 foo')], keywords=[])), Import(names=[alias(name='json')]), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='print_json', ctx=Load()), args=[Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dumps', ctx=Load()), args=[], keywords=[keyword(arg='obj', value=Dict(keys=[Constant(value='name'), Constant(value='count')], values=[Constant(value='apple'), Constant(value=1)]))])], keywords=[keyword(arg='indent', value=Constant(value=None))]))], orelse=[])], type_ignores=[])