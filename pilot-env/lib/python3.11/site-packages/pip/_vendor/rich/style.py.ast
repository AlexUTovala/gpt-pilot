Module(body=[Import(names=[alias(name='sys')]), ImportFrom(module='functools', names=[alias(name='lru_cache')], level=0), ImportFrom(module='marshal', names=[alias(name='dumps'), alias(name='loads')], level=0), ImportFrom(module='random', names=[alias(name='randint')], level=0), ImportFrom(module='typing', names=[alias(name='Any'), alias(name='Dict'), alias(name='Iterable'), alias(name='List'), alias(name='Optional'), alias(name='Type'), alias(name='Union'), alias(name='cast')], level=0), ImportFrom(names=[alias(name='errors')], level=1), ImportFrom(module='color', names=[alias(name='Color'), alias(name='ColorParseError'), alias(name='ColorSystem'), alias(name='blend_rgb')], level=1), ImportFrom(module='repr', names=[alias(name='Result'), alias(name='rich_repr')], level=1), ImportFrom(module='terminal_theme', names=[alias(name='DEFAULT_TERMINAL_THEME'), alias(name='TerminalTheme')], level=1), Assign(targets=[Name(id='StyleType', ctx=Store())], value=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Constant(value='Style')], ctx=Load()), ctx=Load())), ClassDef(name='_Bit', bases=[], keywords=[], body=[Expr(value=Constant(value='A descriptor to get/set a style attribute bit.')), Assign(targets=[Name(id='__slots__', ctx=Store())], value=List(elts=[Constant(value='bit')], ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='bit_no', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='bit', ctx=Store())], value=BinOp(left=Constant(value=1), op=LShift(), right=Name(id='bit_no', ctx=Load())))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__get__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='obj', annotation=Constant(value='Style')), arg(arg='objtype', annotation=Subscript(value=Name(id='Type', ctx=Load()), slice=Constant(value='Style'), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BinOp(left=Attribute(value=Name(id='obj', ctx=Load()), attr='_set_attributes', ctx=Load()), op=BitAnd(), right=Attribute(value=Name(id='self', ctx=Load()), attr='bit', ctx=Load())), body=[Return(value=Compare(left=BinOp(left=Attribute(value=Name(id='obj', ctx=Load()), attr='_attributes', ctx=Load()), op=BitAnd(), right=Attribute(value=Name(id='self', ctx=Load()), attr='bit', ctx=Load())), ops=[NotEq()], comparators=[Constant(value=0)]))], orelse=[]), Return(value=Constant(value=None))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load()))], decorator_list=[]), ClassDef(name='Style', bases=[], keywords=[], body=[Expr(value=Constant(value='A terminal style.\n\n    A terminal style consists of a color (`color`), a background color (`bgcolor`), and a number of attributes, such\n    as bold, italic etc. The attributes have 3 states: they can either be on\n    (``True``), off (``False``), or not set (``None``).\n\n    Args:\n        color (Union[Color, str], optional): Color of terminal text. Defaults to None.\n        bgcolor (Union[Color, str], optional): Color of terminal background. Defaults to None.\n        bold (bool, optional): Enable bold text. Defaults to None.\n        dim (bool, optional): Enable dim text. Defaults to None.\n        italic (bool, optional): Enable italic text. Defaults to None.\n        underline (bool, optional): Enable underlined text. Defaults to None.\n        blink (bool, optional): Enabled blinking text. Defaults to None.\n        blink2 (bool, optional): Enable fast blinking text. Defaults to None.\n        reverse (bool, optional): Enabled reverse text. Defaults to None.\n        conceal (bool, optional): Enable concealed text. Defaults to None.\n        strike (bool, optional): Enable strikethrough text. Defaults to None.\n        underline2 (bool, optional): Enable doubly underlined text. Defaults to None.\n        frame (bool, optional): Enable framed text. Defaults to None.\n        encircle (bool, optional): Enable encircled text. Defaults to None.\n        overline (bool, optional): Enable overlined text. Defaults to None.\n        link (str, link): Link URL. Defaults to None.\n\n    ')), AnnAssign(target=Name(id='_color', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Color', ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='_bgcolor', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Color', ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='_attributes', ctx=Store()), annotation=Name(id='int', ctx=Load()), simple=1), AnnAssign(target=Name(id='_set_attributes', ctx=Store()), annotation=Name(id='int', ctx=Load()), simple=1), AnnAssign(target=Name(id='_hash', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='_null', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1), AnnAssign(target=Name(id='_meta', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bytes', ctx=Load()), ctx=Load()), simple=1), Assign(targets=[Name(id='__slots__', ctx=Store())], value=List(elts=[Constant(value='_color'), Constant(value='_bgcolor'), Constant(value='_attributes'), Constant(value='_set_attributes'), Constant(value='_link'), Constant(value='_link_id'), Constant(value='_ansi'), Constant(value='_style_definition'), Constant(value='_hash'), Constant(value='_null'), Constant(value='_meta')], ctx=Load())), Assign(targets=[Name(id='_style_map', ctx=Store())], value=Dict(keys=[Constant(value=0), Constant(value=1), Constant(value=2), Constant(value=3), Constant(value=4), Constant(value=5), Constant(value=6), Constant(value=7), Constant(value=8), Constant(value=9), Constant(value=10), Constant(value=11), Constant(value=12)], values=[Constant(value='1'), Constant(value='2'), Constant(value='3'), Constant(value='4'), Constant(value='5'), Constant(value='6'), Constant(value='7'), Constant(value='8'), Constant(value='9'), Constant(value='21'), Constant(value='51'), Constant(value='52'), Constant(value='53')])), Assign(targets=[Name(id='STYLE_ATTRIBUTES', ctx=Store())], value=Dict(keys=[Constant(value='dim'), Constant(value='d'), Constant(value='bold'), Constant(value='b'), Constant(value='italic'), Constant(value='i'), Constant(value='underline'), Constant(value='u'), Constant(value='blink'), Constant(value='blink2'), Constant(value='reverse'), Constant(value='r'), Constant(value='conceal'), Constant(value='c'), Constant(value='strike'), Constant(value='s'), Constant(value='underline2'), Constant(value='uu'), Constant(value='frame'), Constant(value='encircle'), Constant(value='overline'), Constant(value='o')], values=[Constant(value='dim'), Constant(value='dim'), Constant(value='bold'), Constant(value='bold'), Constant(value='italic'), Constant(value='italic'), Constant(value='underline'), Constant(value='underline'), Constant(value='blink'), Constant(value='blink2'), Constant(value='reverse'), Constant(value='reverse'), Constant(value='conceal'), Constant(value='conceal'), Constant(value='strike'), Constant(value='strike'), Constant(value='underline2'), Constant(value='underline2'), Constant(value='frame'), Constant(value='encircle'), Constant(value='overline'), Constant(value='overline')])), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[arg(arg='color', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='Color', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='bgcolor', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='Color', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='bold', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load())), arg(arg='dim', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load())), arg(arg='italic', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load())), arg(arg='underline', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load())), arg(arg='blink', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load())), arg(arg='blink2', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load())), arg(arg='reverse', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load())), arg(arg='conceal', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load())), arg(arg='strike', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load())), arg(arg='underline2', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load())), arg(arg='frame', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load())), arg(arg='encircle', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load())), arg(arg='overline', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load())), arg(arg='link', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='meta', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kw_defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None)], defaults=[]), body=[AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_ansi', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_style_definition', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0), FunctionDef(name='_make_color', args=arguments(posonlyargs=[], args=[arg(arg='color', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='Color', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='color', ctx=Load()), Name(id='Color', ctx=Load())], keywords=[]), body=Name(id='color', ctx=Load()), orelse=Call(func=Attribute(value=Name(id='Color', ctx=Load()), attr='parse', ctx=Load()), args=[Name(id='color', ctx=Load())], keywords=[])))], decorator_list=[], returns=Name(id='Color', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_color', ctx=Store())], value=IfExp(test=Compare(left=Name(id='color', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Constant(value=None), orelse=Call(func=Name(id='_make_color', ctx=Load()), args=[Name(id='color', ctx=Load())], keywords=[]))), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_bgcolor', ctx=Store())], value=IfExp(test=Compare(left=Name(id='bgcolor', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Constant(value=None), orelse=Call(func=Name(id='_make_color', ctx=Load()), args=[Name(id='bgcolor', ctx=Load())], keywords=[]))), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_set_attributes', ctx=Store())], value=Call(func=Name(id='sum', ctx=Load()), args=[Tuple(elts=[Compare(left=Name(id='bold', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), BoolOp(op=And(), values=[Compare(left=Name(id='dim', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Constant(value=2)]), BoolOp(op=And(), values=[Compare(left=Name(id='italic', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Constant(value=4)]), BoolOp(op=And(), values=[Compare(left=Name(id='underline', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Constant(value=8)]), BoolOp(op=And(), values=[Compare(left=Name(id='blink', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Constant(value=16)]), BoolOp(op=And(), values=[Compare(left=Name(id='blink2', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Constant(value=32)]), BoolOp(op=And(), values=[Compare(left=Name(id='reverse', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Constant(value=64)]), BoolOp(op=And(), values=[Compare(left=Name(id='conceal', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Constant(value=128)]), BoolOp(op=And(), values=[Compare(left=Name(id='strike', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Constant(value=256)]), BoolOp(op=And(), values=[Compare(left=Name(id='underline2', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Constant(value=512)]), BoolOp(op=And(), values=[Compare(left=Name(id='frame', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Constant(value=1024)]), BoolOp(op=And(), values=[Compare(left=Name(id='encircle', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Constant(value=2048)]), BoolOp(op=And(), values=[Compare(left=Name(id='overline', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Constant(value=4096)])], ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_attributes', ctx=Store())], value=IfExp(test=Attribute(value=Name(id='self', ctx=Load()), attr='_set_attributes', ctx=Load()), body=Call(func=Name(id='sum', ctx=Load()), args=[Tuple(elts=[BoolOp(op=Or(), values=[BoolOp(op=And(), values=[Name(id='bold', ctx=Load()), Constant(value=1)]), Constant(value=0)]), BoolOp(op=Or(), values=[BoolOp(op=And(), values=[Name(id='dim', ctx=Load()), Constant(value=2)]), Constant(value=0)]), BoolOp(op=Or(), values=[BoolOp(op=And(), values=[Name(id='italic', ctx=Load()), Constant(value=4)]), Constant(value=0)]), BoolOp(op=Or(), values=[BoolOp(op=And(), values=[Name(id='underline', ctx=Load()), Constant(value=8)]), Constant(value=0)]), BoolOp(op=Or(), values=[BoolOp(op=And(), values=[Name(id='blink', ctx=Load()), Constant(value=16)]), Constant(value=0)]), BoolOp(op=Or(), values=[BoolOp(op=And(), values=[Name(id='blink2', ctx=Load()), Constant(value=32)]), Constant(value=0)]), BoolOp(op=Or(), values=[BoolOp(op=And(), values=[Name(id='reverse', ctx=Load()), Constant(value=64)]), Constant(value=0)]), BoolOp(op=Or(), values=[BoolOp(op=And(), values=[Name(id='conceal', ctx=Load()), Constant(value=128)]), Constant(value=0)]), BoolOp(op=Or(), values=[BoolOp(op=And(), values=[Name(id='strike', ctx=Load()), Constant(value=256)]), Constant(value=0)]), BoolOp(op=Or(), values=[BoolOp(op=And(), values=[Name(id='underline2', ctx=Load()), Constant(value=512)]), Constant(value=0)]), BoolOp(op=Or(), values=[BoolOp(op=And(), values=[Name(id='frame', ctx=Load()), Constant(value=1024)]), Constant(value=0)]), BoolOp(op=Or(), values=[BoolOp(op=And(), values=[Name(id='encircle', ctx=Load()), Constant(value=2048)]), Constant(value=0)]), BoolOp(op=Or(), values=[BoolOp(op=And(), values=[Name(id='overline', ctx=Load()), Constant(value=4096)]), Constant(value=0)])], ctx=Load())], keywords=[]), orelse=Constant(value=0))), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_link', ctx=Store())], value=Name(id='link', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_meta', ctx=Store())], value=IfExp(test=Compare(left=Name(id='meta', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Constant(value=None), orelse=Call(func=Name(id='dumps', ctx=Load()), args=[Name(id='meta', ctx=Load())], keywords=[]))), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_link_id', ctx=Store())], value=IfExp(test=BoolOp(op=Or(), values=[Name(id='link', ctx=Load()), Name(id='meta', ctx=Load())]), body=JoinedStr(values=[FormattedValue(value=Call(func=Name(id='randint', ctx=Load()), args=[Constant(value=0), Constant(value=999999)], keywords=[]), conversion=-1), FormattedValue(value=Call(func=Name(id='hash', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_meta', ctx=Load())], keywords=[]), conversion=-1)]), orelse=Constant(value=''))), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_hash', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_null', ctx=Store())], value=UnaryOp(op=Not(), operand=BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='_set_attributes', ctx=Load()), Name(id='color', ctx=Load()), Name(id='bgcolor', ctx=Load()), Name(id='link', ctx=Load()), Name(id='meta', ctx=Load())])))], decorator_list=[]), FunctionDef(name='null', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Create an 'null' style, equivalent to Style(), but more performant.")), Return(value=Name(id='NULL_STYLE', ctx=Load()))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Constant(value='Style')), FunctionDef(name='from_color', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='color', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Color', ctx=Load()), ctx=Load())), arg(arg='bgcolor', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Color', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='Create a new style with colors and no attributes.\n\n        Returns:\n            color (Optional[Color]): A (foreground) color, or None for no color. Defaults to None.\n            bgcolor (Optional[Color]): A (background) color, or None for no color. Defaults to None.\n        ')), AnnAssign(target=Name(id='style', ctx=Store()), annotation=Name(id='Style', ctx=Load()), value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='__new__', ctx=Load()), args=[Name(id='Style', ctx=Load())], keywords=[]), simple=1), Assign(targets=[Attribute(value=Name(id='style', ctx=Load()), attr='_ansi', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='style', ctx=Load()), attr='_style_definition', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='style', ctx=Load()), attr='_color', ctx=Store())], value=Name(id='color', ctx=Load())), Assign(targets=[Attribute(value=Name(id='style', ctx=Load()), attr='_bgcolor', ctx=Store())], value=Name(id='bgcolor', ctx=Load())), Assign(targets=[Attribute(value=Name(id='style', ctx=Load()), attr='_set_attributes', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='style', ctx=Load()), attr='_attributes', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='style', ctx=Load()), attr='_link', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='style', ctx=Load()), attr='_link_id', ctx=Store())], value=Constant(value='')), Assign(targets=[Attribute(value=Name(id='style', ctx=Load()), attr='_meta', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='style', ctx=Load()), attr='_null', ctx=Store())], value=UnaryOp(op=Not(), operand=BoolOp(op=Or(), values=[Name(id='color', ctx=Load()), Name(id='bgcolor', ctx=Load())]))), Assign(targets=[Attribute(value=Name(id='style', ctx=Load()), attr='_hash', ctx=Store())], value=Constant(value=None)), Return(value=Name(id='style', ctx=Load()))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Constant(value='Style')), FunctionDef(name='from_meta', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='meta', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Create a new style with meta data.\n\n        Returns:\n            meta (Optional[Dict[str, Any]]): A dictionary of meta data. Defaults to None.\n        ')), AnnAssign(target=Name(id='style', ctx=Store()), annotation=Name(id='Style', ctx=Load()), value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='__new__', ctx=Load()), args=[Name(id='Style', ctx=Load())], keywords=[]), simple=1), Assign(targets=[Attribute(value=Name(id='style', ctx=Load()), attr='_ansi', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='style', ctx=Load()), attr='_style_definition', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='style', ctx=Load()), attr='_color', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='style', ctx=Load()), attr='_bgcolor', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='style', ctx=Load()), attr='_set_attributes', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='style', ctx=Load()), attr='_attributes', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='style', ctx=Load()), attr='_link', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='style', ctx=Load()), attr='_meta', ctx=Store())], value=Call(func=Name(id='dumps', ctx=Load()), args=[Name(id='meta', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='style', ctx=Load()), attr='_link_id', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Call(func=Name(id='randint', ctx=Load()), args=[Constant(value=0), Constant(value=999999)], keywords=[]), conversion=-1), FormattedValue(value=Call(func=Name(id='hash', ctx=Load()), args=[Attribute(value=Name(id='style', ctx=Load()), attr='_meta', ctx=Load())], keywords=[]), conversion=-1)])), Assign(targets=[Attribute(value=Name(id='style', ctx=Load()), attr='_hash', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='style', ctx=Load()), attr='_null', ctx=Store())], value=UnaryOp(op=Not(), operand=Name(id='meta', ctx=Load()))), Return(value=Name(id='style', ctx=Load()))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Constant(value='Style')), FunctionDef(name='on', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='meta', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='handlers', annotation=Name(id='Any', ctx=Load())), defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Create a blank style with meta information.\n\n        Example:\n            style = Style.on(click=self.on_click)\n\n        Args:\n            meta (Optional[Dict[str, Any]], optional): An optional dict of meta information.\n            **handlers (Any): Keyword arguments are translated in to handlers.\n\n        Returns:\n            Style: A Style with meta information attached.\n        ')), Assign(targets=[Name(id='meta', ctx=Store())], value=IfExp(test=Compare(left=Name(id='meta', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Dict(keys=[], values=[]), orelse=Name(id='meta', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='meta', ctx=Load()), attr='update', ctx=Load()), args=[DictComp(key=JoinedStr(values=[Constant(value='@'), FormattedValue(value=Name(id='key', ctx=Load()), conversion=-1)]), value=Name(id='value', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='handlers', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='from_meta', ctx=Load()), args=[Name(id='meta', ctx=Load())], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Constant(value='Style')), Assign(targets=[Name(id='bold', ctx=Store())], value=Call(func=Name(id='_Bit', ctx=Load()), args=[Constant(value=0)], keywords=[])), Assign(targets=[Name(id='dim', ctx=Store())], value=Call(func=Name(id='_Bit', ctx=Load()), args=[Constant(value=1)], keywords=[])), Assign(targets=[Name(id='italic', ctx=Store())], value=Call(func=Name(id='_Bit', ctx=Load()), args=[Constant(value=2)], keywords=[])), Assign(targets=[Name(id='underline', ctx=Store())], value=Call(func=Name(id='_Bit', ctx=Load()), args=[Constant(value=3)], keywords=[])), Assign(targets=[Name(id='blink', ctx=Store())], value=Call(func=Name(id='_Bit', ctx=Load()), args=[Constant(value=4)], keywords=[])), Assign(targets=[Name(id='blink2', ctx=Store())], value=Call(func=Name(id='_Bit', ctx=Load()), args=[Constant(value=5)], keywords=[])), Assign(targets=[Name(id='reverse', ctx=Store())], value=Call(func=Name(id='_Bit', ctx=Load()), args=[Constant(value=6)], keywords=[])), Assign(targets=[Name(id='conceal', ctx=Store())], value=Call(func=Name(id='_Bit', ctx=Load()), args=[Constant(value=7)], keywords=[])), Assign(targets=[Name(id='strike', ctx=Store())], value=Call(func=Name(id='_Bit', ctx=Load()), args=[Constant(value=8)], keywords=[])), Assign(targets=[Name(id='underline2', ctx=Store())], value=Call(func=Name(id='_Bit', ctx=Load()), args=[Constant(value=9)], keywords=[])), Assign(targets=[Name(id='frame', ctx=Store())], value=Call(func=Name(id='_Bit', ctx=Load()), args=[Constant(value=10)], keywords=[])), Assign(targets=[Name(id='encircle', ctx=Store())], value=Call(func=Name(id='_Bit', ctx=Load()), args=[Constant(value=11)], keywords=[])), Assign(targets=[Name(id='overline', ctx=Store())], value=Call(func=Name(id='_Bit', ctx=Load()), args=[Constant(value=12)], keywords=[])), FunctionDef(name='link_id', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get a link id, used in ansi code for links.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_link_id', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='__str__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Re-generate style definition from attributes.')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_style_definition', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[AnnAssign(target=Name(id='attributes', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), Assign(targets=[Name(id='append', ctx=Store())], value=Attribute(value=Name(id='attributes', ctx=Load()), attr='append', ctx=Load())), Assign(targets=[Name(id='bits', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_set_attributes', ctx=Load())), If(test=BinOp(left=Name(id='bits', ctx=Load()), op=BitAnd(), right=Constant(value=15)), body=[If(test=BinOp(left=Name(id='bits', ctx=Load()), op=BitAnd(), right=Constant(value=1)), body=[Expr(value=Call(func=Name(id='append', ctx=Load()), args=[IfExp(test=Attribute(value=Name(id='self', ctx=Load()), attr='bold', ctx=Load()), body=Constant(value='bold'), orelse=Constant(value='not bold'))], keywords=[]))], orelse=[]), If(test=BinOp(left=Name(id='bits', ctx=Load()), op=BitAnd(), right=BinOp(left=Constant(value=1), op=LShift(), right=Constant(value=1))), body=[Expr(value=Call(func=Name(id='append', ctx=Load()), args=[IfExp(test=Attribute(value=Name(id='self', ctx=Load()), attr='dim', ctx=Load()), body=Constant(value='dim'), orelse=Constant(value='not dim'))], keywords=[]))], orelse=[]), If(test=BinOp(left=Name(id='bits', ctx=Load()), op=BitAnd(), right=BinOp(left=Constant(value=1), op=LShift(), right=Constant(value=2))), body=[Expr(value=Call(func=Name(id='append', ctx=Load()), args=[IfExp(test=Attribute(value=Name(id='self', ctx=Load()), attr='italic', ctx=Load()), body=Constant(value='italic'), orelse=Constant(value='not italic'))], keywords=[]))], orelse=[]), If(test=BinOp(left=Name(id='bits', ctx=Load()), op=BitAnd(), right=BinOp(left=Constant(value=1), op=LShift(), right=Constant(value=3))), body=[Expr(value=Call(func=Name(id='append', ctx=Load()), args=[IfExp(test=Attribute(value=Name(id='self', ctx=Load()), attr='underline', ctx=Load()), body=Constant(value='underline'), orelse=Constant(value='not underline'))], keywords=[]))], orelse=[])], orelse=[]), If(test=BinOp(left=Name(id='bits', ctx=Load()), op=BitAnd(), right=Constant(value=496)), body=[If(test=BinOp(left=Name(id='bits', ctx=Load()), op=BitAnd(), right=BinOp(left=Constant(value=1), op=LShift(), right=Constant(value=4))), body=[Expr(value=Call(func=Name(id='append', ctx=Load()), args=[IfExp(test=Attribute(value=Name(id='self', ctx=Load()), attr='blink', ctx=Load()), body=Constant(value='blink'), orelse=Constant(value='not blink'))], keywords=[]))], orelse=[]), If(test=BinOp(left=Name(id='bits', ctx=Load()), op=BitAnd(), right=BinOp(left=Constant(value=1), op=LShift(), right=Constant(value=5))), body=[Expr(value=Call(func=Name(id='append', ctx=Load()), args=[IfExp(test=Attribute(value=Name(id='self', ctx=Load()), attr='blink2', ctx=Load()), body=Constant(value='blink2'), orelse=Constant(value='not blink2'))], keywords=[]))], orelse=[]), If(test=BinOp(left=Name(id='bits', ctx=Load()), op=BitAnd(), right=BinOp(left=Constant(value=1), op=LShift(), right=Constant(value=6))), body=[Expr(value=Call(func=Name(id='append', ctx=Load()), args=[IfExp(test=Attribute(value=Name(id='self', ctx=Load()), attr='reverse', ctx=Load()), body=Constant(value='reverse'), orelse=Constant(value='not reverse'))], keywords=[]))], orelse=[]), If(test=BinOp(left=Name(id='bits', ctx=Load()), op=BitAnd(), right=BinOp(left=Constant(value=1), op=LShift(), right=Constant(value=7))), body=[Expr(value=Call(func=Name(id='append', ctx=Load()), args=[IfExp(test=Attribute(value=Name(id='self', ctx=Load()), attr='conceal', ctx=Load()), body=Constant(value='conceal'), orelse=Constant(value='not conceal'))], keywords=[]))], orelse=[]), If(test=BinOp(left=Name(id='bits', ctx=Load()), op=BitAnd(), right=BinOp(left=Constant(value=1), op=LShift(), right=Constant(value=8))), body=[Expr(value=Call(func=Name(id='append', ctx=Load()), args=[IfExp(test=Attribute(value=Name(id='self', ctx=Load()), attr='strike', ctx=Load()), body=Constant(value='strike'), orelse=Constant(value='not strike'))], keywords=[]))], orelse=[])], orelse=[]), If(test=BinOp(left=Name(id='bits', ctx=Load()), op=BitAnd(), right=Constant(value=7680)), body=[If(test=BinOp(left=Name(id='bits', ctx=Load()), op=BitAnd(), right=BinOp(left=Constant(value=1), op=LShift(), right=Constant(value=9))), body=[Expr(value=Call(func=Name(id='append', ctx=Load()), args=[IfExp(test=Attribute(value=Name(id='self', ctx=Load()), attr='underline2', ctx=Load()), body=Constant(value='underline2'), orelse=Constant(value='not underline2'))], keywords=[]))], orelse=[]), If(test=BinOp(left=Name(id='bits', ctx=Load()), op=BitAnd(), right=BinOp(left=Constant(value=1), op=LShift(), right=Constant(value=10))), body=[Expr(value=Call(func=Name(id='append', ctx=Load()), args=[IfExp(test=Attribute(value=Name(id='self', ctx=Load()), attr='frame', ctx=Load()), body=Constant(value='frame'), orelse=Constant(value='not frame'))], keywords=[]))], orelse=[]), If(test=BinOp(left=Name(id='bits', ctx=Load()), op=BitAnd(), right=BinOp(left=Constant(value=1), op=LShift(), right=Constant(value=11))), body=[Expr(value=Call(func=Name(id='append', ctx=Load()), args=[IfExp(test=Attribute(value=Name(id='self', ctx=Load()), attr='encircle', ctx=Load()), body=Constant(value='encircle'), orelse=Constant(value='not encircle'))], keywords=[]))], orelse=[]), If(test=BinOp(left=Name(id='bits', ctx=Load()), op=BitAnd(), right=BinOp(left=Constant(value=1), op=LShift(), right=Constant(value=12))), body=[Expr(value=Call(func=Name(id='append', ctx=Load()), args=[IfExp(test=Attribute(value=Name(id='self', ctx=Load()), attr='overline', ctx=Load()), body=Constant(value='overline'), orelse=Constant(value='not overline'))], keywords=[]))], orelse=[])], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_color', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Name(id='append', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_color', ctx=Load()), attr='name', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_bgcolor', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Name(id='append', ctx=Load()), args=[Constant(value='on')], keywords=[])), Expr(value=Call(func=Name(id='append', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_bgcolor', ctx=Load()), attr='name', ctx=Load())], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_link', ctx=Load()), body=[Expr(value=Call(func=Name(id='append', ctx=Load()), args=[Constant(value='link')], keywords=[])), Expr(value=Call(func=Name(id='append', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_link', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_style_definition', ctx=Store())], value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Constant(value=' '), attr='join', ctx=Load()), args=[Name(id='attributes', ctx=Load())], keywords=[]), Constant(value='none')]))], orelse=[]), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_style_definition', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='__bool__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='A Style is false if it has no attributes, colors, or links.')), Return(value=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='_null', ctx=Load())))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='_make_ansi_codes', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='color_system', annotation=Name(id='ColorSystem', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Generate ANSI codes for this style.\n\n        Args:\n            color_system (ColorSystem): Color system.\n\n        Returns:\n            str: String containing codes.\n        ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_ansi', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[AnnAssign(target=Name(id='sgr', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), Assign(targets=[Name(id='append', ctx=Store())], value=Attribute(value=Name(id='sgr', ctx=Load()), attr='append', ctx=Load())), Assign(targets=[Name(id='_style_map', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_style_map', ctx=Load())), Assign(targets=[Name(id='attributes', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_attributes', ctx=Load()), op=BitAnd(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_set_attributes', ctx=Load()))), If(test=Name(id='attributes', ctx=Load()), body=[If(test=BinOp(left=Name(id='attributes', ctx=Load()), op=BitAnd(), right=Constant(value=1)), body=[Expr(value=Call(func=Name(id='append', ctx=Load()), args=[Subscript(value=Name(id='_style_map', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], orelse=[]), If(test=BinOp(left=Name(id='attributes', ctx=Load()), op=BitAnd(), right=Constant(value=2)), body=[Expr(value=Call(func=Name(id='append', ctx=Load()), args=[Subscript(value=Name(id='_style_map', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[]))], orelse=[]), If(test=BinOp(left=Name(id='attributes', ctx=Load()), op=BitAnd(), right=Constant(value=4)), body=[Expr(value=Call(func=Name(id='append', ctx=Load()), args=[Subscript(value=Name(id='_style_map', ctx=Load()), slice=Constant(value=2), ctx=Load())], keywords=[]))], orelse=[]), If(test=BinOp(left=Name(id='attributes', ctx=Load()), op=BitAnd(), right=Constant(value=8)), body=[Expr(value=Call(func=Name(id='append', ctx=Load()), args=[Subscript(value=Name(id='_style_map', ctx=Load()), slice=Constant(value=3), ctx=Load())], keywords=[]))], orelse=[]), If(test=BinOp(left=Name(id='attributes', ctx=Load()), op=BitAnd(), right=Constant(value=496)), body=[For(target=Name(id='bit', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=4), Constant(value=9)], keywords=[]), body=[If(test=BinOp(left=Name(id='attributes', ctx=Load()), op=BitAnd(), right=BinOp(left=Constant(value=1), op=LShift(), right=Name(id='bit', ctx=Load()))), body=[Expr(value=Call(func=Name(id='append', ctx=Load()), args=[Subscript(value=Name(id='_style_map', ctx=Load()), slice=Name(id='bit', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[]), If(test=BinOp(left=Name(id='attributes', ctx=Load()), op=BitAnd(), right=Constant(value=7680)), body=[For(target=Name(id='bit', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=9), Constant(value=13)], keywords=[]), body=[If(test=BinOp(left=Name(id='attributes', ctx=Load()), op=BitAnd(), right=BinOp(left=Constant(value=1), op=LShift(), right=Name(id='bit', ctx=Load()))), body=[Expr(value=Call(func=Name(id='append', ctx=Load()), args=[Subscript(value=Name(id='_style_map', ctx=Load()), slice=Name(id='bit', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[])], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_color', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='sgr', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_color', ctx=Load()), attr='downgrade', ctx=Load()), args=[Name(id='color_system', ctx=Load())], keywords=[]), attr='get_ansi_codes', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_bgcolor', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='sgr', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_bgcolor', ctx=Load()), attr='downgrade', ctx=Load()), args=[Name(id='color_system', ctx=Load())], keywords=[]), attr='get_ansi_codes', ctx=Load()), args=[], keywords=[keyword(arg='foreground', value=Constant(value=False))])], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_ansi', ctx=Store())], value=Call(func=Attribute(value=Constant(value=';'), attr='join', ctx=Load()), args=[Name(id='sgr', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ansi', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='normalize', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='style', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Normalize a style definition so that styles with the same effect have the same string\n        representation.\n\n        Args:\n            style (str): A style definition.\n\n        Returns:\n            str: Normal form of style definition.\n        ')), Try(body=[Return(value=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='parse', ctx=Load()), args=[Name(id='style', ctx=Load())], keywords=[])], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='errors', ctx=Load()), attr='StyleSyntaxError', ctx=Load()), body=[Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='style', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]), attr='lower', ctx=Load()), args=[], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[Name(id='classmethod', ctx=Load()), Call(func=Name(id='lru_cache', ctx=Load()), args=[], keywords=[keyword(arg='maxsize', value=Constant(value=1024))])], returns=Name(id='str', ctx=Load())), FunctionDef(name='pick_first', args=arguments(posonlyargs=[], args=[arg(arg='cls')], vararg=arg(arg='values', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='StyleType', ctx=Load()), ctx=Load())), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Pick first non-None style.')), For(target=Name(id='value', ctx=Store()), iter=Name(id='values', ctx=Load()), body=[If(test=Compare(left=Name(id='value', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=Name(id='value', ctx=Load()))], orelse=[])], orelse=[]), Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='expected at least one non-None style')], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Name(id='StyleType', ctx=Load())), FunctionDef(name='__rich_repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Yield(value=Tuple(elts=[Constant(value='color'), Attribute(value=Name(id='self', ctx=Load()), attr='color', ctx=Load()), Constant(value=None)], ctx=Load()))), Expr(value=Yield(value=Tuple(elts=[Constant(value='bgcolor'), Attribute(value=Name(id='self', ctx=Load()), attr='bgcolor', ctx=Load()), Constant(value=None)], ctx=Load()))), Expr(value=Yield(value=Tuple(elts=[Constant(value='bold'), Attribute(value=Name(id='self', ctx=Load()), attr='bold', ctx=Load()), Constant(value=None)], ctx=Load()))), Expr(value=Yield(value=Tuple(elts=[Constant(value='dim'), Attribute(value=Name(id='self', ctx=Load()), attr='dim', ctx=Load()), Constant(value=None)], ctx=Load()))), Expr(value=Yield(value=Tuple(elts=[Constant(value='italic'), Attribute(value=Name(id='self', ctx=Load()), attr='italic', ctx=Load()), Constant(value=None)], ctx=Load()))), Expr(value=Yield(value=Tuple(elts=[Constant(value='underline'), Attribute(value=Name(id='self', ctx=Load()), attr='underline', ctx=Load()), Constant(value=None)], ctx=Load()))), Expr(value=Yield(value=Tuple(elts=[Constant(value='blink'), Attribute(value=Name(id='self', ctx=Load()), attr='blink', ctx=Load()), Constant(value=None)], ctx=Load()))), Expr(value=Yield(value=Tuple(elts=[Constant(value='blink2'), Attribute(value=Name(id='self', ctx=Load()), attr='blink2', ctx=Load()), Constant(value=None)], ctx=Load()))), Expr(value=Yield(value=Tuple(elts=[Constant(value='reverse'), Attribute(value=Name(id='self', ctx=Load()), attr='reverse', ctx=Load()), Constant(value=None)], ctx=Load()))), Expr(value=Yield(value=Tuple(elts=[Constant(value='conceal'), Attribute(value=Name(id='self', ctx=Load()), attr='conceal', ctx=Load()), Constant(value=None)], ctx=Load()))), Expr(value=Yield(value=Tuple(elts=[Constant(value='strike'), Attribute(value=Name(id='self', ctx=Load()), attr='strike', ctx=Load()), Constant(value=None)], ctx=Load()))), Expr(value=Yield(value=Tuple(elts=[Constant(value='underline2'), Attribute(value=Name(id='self', ctx=Load()), attr='underline2', ctx=Load()), Constant(value=None)], ctx=Load()))), Expr(value=Yield(value=Tuple(elts=[Constant(value='frame'), Attribute(value=Name(id='self', ctx=Load()), attr='frame', ctx=Load()), Constant(value=None)], ctx=Load()))), Expr(value=Yield(value=Tuple(elts=[Constant(value='encircle'), Attribute(value=Name(id='self', ctx=Load()), attr='encircle', ctx=Load()), Constant(value=None)], ctx=Load()))), Expr(value=Yield(value=Tuple(elts=[Constant(value='link'), Attribute(value=Name(id='self', ctx=Load()), attr='link', ctx=Load()), Constant(value=None)], ctx=Load()))), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_meta', ctx=Load()), body=[Expr(value=Yield(value=Tuple(elts=[Constant(value='meta'), Attribute(value=Name(id='self', ctx=Load()), attr='meta', ctx=Load())], ctx=Load())))], orelse=[])], decorator_list=[], returns=Name(id='Result', ctx=Load())), FunctionDef(name='__eq__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other', annotation=Name(id='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='other', ctx=Load()), Name(id='Style', ctx=Load())], keywords=[])), body=[Return(value=Name(id='NotImplemented', ctx=Load()))], orelse=[]), Return(value=Compare(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='__hash__', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='other', ctx=Load()), attr='__hash__', ctx=Load()), args=[], keywords=[])]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='__ne__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other', annotation=Name(id='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='other', ctx=Load()), Name(id='Style', ctx=Load())], keywords=[])), body=[Return(value=Name(id='NotImplemented', ctx=Load()))], orelse=[]), Return(value=Compare(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='__hash__', ctx=Load()), args=[], keywords=[]), ops=[NotEq()], comparators=[Call(func=Attribute(value=Name(id='other', ctx=Load()), attr='__hash__', ctx=Load()), args=[], keywords=[])]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='__hash__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_hash', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_hash', ctx=Load()))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_hash', ctx=Store())], value=Call(func=Name(id='hash', ctx=Load()), args=[Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_color', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_bgcolor', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_attributes', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_set_attributes', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_link', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_meta', ctx=Load())], ctx=Load())], keywords=[])), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_hash', ctx=Load()))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='color', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='The foreground color or None if it is not set.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_color', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Color', ctx=Load()), ctx=Load())), FunctionDef(name='bgcolor', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='The background color or None if it is not set.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_bgcolor', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Color', ctx=Load()), ctx=Load())), FunctionDef(name='link', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Link text, if set.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_link', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='transparent_background', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check if the style specified a transparent background.')), Return(value=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='bgcolor', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='bgcolor', ctx=Load()), attr='is_default', ctx=Load())]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='background_style', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='A Style with background only.')), Return(value=Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='bgcolor', value=Attribute(value=Name(id='self', ctx=Load()), attr='bgcolor', ctx=Load()))]))], decorator_list=[Name(id='property', ctx=Load())], returns=Constant(value='Style')), FunctionDef(name='meta', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get meta information (can not be changed after construction).')), Return(value=IfExp(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_meta', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Dict(keys=[], values=[]), orelse=Call(func=Name(id='cast', ctx=Load()), args=[Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), Call(func=Name(id='loads', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_meta', ctx=Load())], keywords=[])], keywords=[])))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='without_color', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get a copy of the style with color removed.')), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_null', ctx=Load()), body=[Return(value=Name(id='NULL_STYLE', ctx=Load()))], orelse=[]), AnnAssign(target=Name(id='style', ctx=Store()), annotation=Name(id='Style', ctx=Load()), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='__new__', ctx=Load()), args=[Name(id='Style', ctx=Load())], keywords=[]), simple=1), Assign(targets=[Attribute(value=Name(id='style', ctx=Load()), attr='_ansi', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='style', ctx=Load()), attr='_style_definition', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='style', ctx=Load()), attr='_color', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='style', ctx=Load()), attr='_bgcolor', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='style', ctx=Load()), attr='_attributes', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_attributes', ctx=Load())), Assign(targets=[Attribute(value=Name(id='style', ctx=Load()), attr='_set_attributes', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_set_attributes', ctx=Load())), Assign(targets=[Attribute(value=Name(id='style', ctx=Load()), attr='_link', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_link', ctx=Load())), Assign(targets=[Attribute(value=Name(id='style', ctx=Load()), attr='_link_id', ctx=Store())], value=IfExp(test=Attribute(value=Name(id='self', ctx=Load()), attr='_link', ctx=Load()), body=JoinedStr(values=[FormattedValue(value=Call(func=Name(id='randint', ctx=Load()), args=[Constant(value=0), Constant(value=999999)], keywords=[]), conversion=-1)]), orelse=Constant(value=''))), Assign(targets=[Attribute(value=Name(id='style', ctx=Load()), attr='_null', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id='style', ctx=Load()), attr='_meta', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='style', ctx=Load()), attr='_hash', ctx=Store())], value=Constant(value=None)), Return(value=Name(id='style', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Constant(value='Style')), FunctionDef(name='parse', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='style_definition', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Parse a style definition.\n\n        Args:\n            style_definition (str): A string containing a style.\n\n        Raises:\n            errors.StyleSyntaxError: If the style definition syntax is invalid.\n\n        Returns:\n            `Style`: A Style instance.\n        ')), If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Attribute(value=Name(id='style_definition', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Constant(value='none')]), UnaryOp(op=Not(), operand=Name(id='style_definition', ctx=Load()))]), body=[Return(value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='null', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='STYLE_ATTRIBUTES', ctx=Store())], value=Attribute(value=Name(id='cls', ctx=Load()), attr='STYLE_ATTRIBUTES', ctx=Load())), AnnAssign(target=Name(id='color', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=1), AnnAssign(target=Name(id='bgcolor', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=1), AnnAssign(target=Name(id='attributes', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=1), AnnAssign(target=Name(id='link', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=1), Assign(targets=[Name(id='words', ctx=Store())], value=Call(func=Name(id='iter', ctx=Load()), args=[Call(func=Attribute(value=Name(id='style_definition', ctx=Load()), attr='split', ctx=Load()), args=[], keywords=[])], keywords=[])), For(target=Name(id='original_word', ctx=Store()), iter=Name(id='words', ctx=Load()), body=[Assign(targets=[Name(id='word', ctx=Store())], value=Call(func=Attribute(value=Name(id='original_word', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='word', ctx=Load()), ops=[Eq()], comparators=[Constant(value='on')]), body=[Assign(targets=[Name(id='word', ctx=Store())], value=Call(func=Name(id='next', ctx=Load()), args=[Name(id='words', ctx=Load()), Constant(value='')], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='word', ctx=Load())), body=[Raise(exc=Call(func=Attribute(value=Name(id='errors', ctx=Load()), attr='StyleSyntaxError', ctx=Load()), args=[Constant(value="color expected after 'on'")], keywords=[]))], orelse=[]), Try(body=[Expr(value=Compare(left=Call(func=Attribute(value=Name(id='Color', ctx=Load()), attr='parse', ctx=Load()), args=[Name(id='word', ctx=Load())], keywords=[]), ops=[Is()], comparators=[Constant(value=None)]))], handlers=[ExceptHandler(type=Name(id='ColorParseError', ctx=Load()), name='error', body=[Raise(exc=Call(func=Attribute(value=Name(id='errors', ctx=Load()), attr='StyleSyntaxError', ctx=Load()), args=[JoinedStr(values=[Constant(value='unable to parse '), FormattedValue(value=Name(id='word', ctx=Load()), conversion=114), Constant(value=' as background color; '), FormattedValue(value=Name(id='error', ctx=Load()), conversion=-1)])], keywords=[]), cause=Constant(value=None))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='bgcolor', ctx=Store())], value=Name(id='word', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='word', ctx=Load()), ops=[Eq()], comparators=[Constant(value='not')]), body=[Assign(targets=[Name(id='word', ctx=Store())], value=Call(func=Name(id='next', ctx=Load()), args=[Name(id='words', ctx=Load()), Constant(value='')], keywords=[])), Assign(targets=[Name(id='attribute', ctx=Store())], value=Call(func=Attribute(value=Name(id='STYLE_ATTRIBUTES', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='word', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='attribute', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Attribute(value=Name(id='errors', ctx=Load()), attr='StyleSyntaxError', ctx=Load()), args=[JoinedStr(values=[Constant(value="expected style attribute after 'not', found "), FormattedValue(value=Name(id='word', ctx=Load()), conversion=114)])], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='attributes', ctx=Load()), slice=Name(id='attribute', ctx=Load()), ctx=Store())], value=Constant(value=False))], orelse=[If(test=Compare(left=Name(id='word', ctx=Load()), ops=[Eq()], comparators=[Constant(value='link')]), body=[Assign(targets=[Name(id='word', ctx=Store())], value=Call(func=Name(id='next', ctx=Load()), args=[Name(id='words', ctx=Load()), Constant(value='')], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='word', ctx=Load())), body=[Raise(exc=Call(func=Attribute(value=Name(id='errors', ctx=Load()), attr='StyleSyntaxError', ctx=Load()), args=[Constant(value="URL expected after 'link'")], keywords=[]))], orelse=[]), Assign(targets=[Name(id='link', ctx=Store())], value=Name(id='word', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='word', ctx=Load()), ops=[In()], comparators=[Name(id='STYLE_ATTRIBUTES', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='attributes', ctx=Load()), slice=Subscript(value=Name(id='STYLE_ATTRIBUTES', ctx=Load()), slice=Name(id='word', ctx=Load()), ctx=Load()), ctx=Store())], value=Constant(value=True))], orelse=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='Color', ctx=Load()), attr='parse', ctx=Load()), args=[Name(id='word', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ColorParseError', ctx=Load()), name='error', body=[Raise(exc=Call(func=Attribute(value=Name(id='errors', ctx=Load()), attr='StyleSyntaxError', ctx=Load()), args=[JoinedStr(values=[Constant(value='unable to parse '), FormattedValue(value=Name(id='word', ctx=Load()), conversion=114), Constant(value=' as color; '), FormattedValue(value=Name(id='error', ctx=Load()), conversion=-1)])], keywords=[]), cause=Constant(value=None))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='color', ctx=Store())], value=Name(id='word', ctx=Load()))])])])])], orelse=[]), Assign(targets=[Name(id='style', ctx=Store())], value=Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='color', value=Name(id='color', ctx=Load())), keyword(arg='bgcolor', value=Name(id='bgcolor', ctx=Load())), keyword(arg='link', value=Name(id='link', ctx=Load())), keyword(value=Name(id='attributes', ctx=Load()))])), Return(value=Name(id='style', ctx=Load()))], decorator_list=[Name(id='classmethod', ctx=Load()), Call(func=Name(id='lru_cache', ctx=Load()), args=[], keywords=[keyword(arg='maxsize', value=Constant(value=4096))])], returns=Constant(value='Style')), FunctionDef(name='get_html_style', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='theme', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TerminalTheme', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Get a CSS style rule.')), Assign(targets=[Name(id='theme', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='theme', ctx=Load()), Name(id='DEFAULT_TERMINAL_THEME', ctx=Load())])), AnnAssign(target=Name(id='css', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), Assign(targets=[Name(id='append', ctx=Store())], value=Attribute(value=Name(id='css', ctx=Load()), attr='append', ctx=Load())), Assign(targets=[Name(id='color', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='color', ctx=Load())), Assign(targets=[Name(id='bgcolor', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='bgcolor', ctx=Load())), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='reverse', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='color', ctx=Store()), Name(id='bgcolor', ctx=Store())], ctx=Store())], value=Tuple(elts=[Name(id='bgcolor', ctx=Load()), Name(id='color', ctx=Load())], ctx=Load()))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='dim', ctx=Load()), body=[Assign(targets=[Name(id='foreground_color', ctx=Store())], value=IfExp(test=Compare(left=Name(id='color', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Attribute(value=Name(id='theme', ctx=Load()), attr='foreground_color', ctx=Load()), orelse=Call(func=Attribute(value=Name(id='color', ctx=Load()), attr='get_truecolor', ctx=Load()), args=[Name(id='theme', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='color', ctx=Store())], value=Call(func=Attribute(value=Name(id='Color', ctx=Load()), attr='from_triplet', ctx=Load()), args=[Call(func=Name(id='blend_rgb', ctx=Load()), args=[Name(id='foreground_color', ctx=Load()), Attribute(value=Name(id='theme', ctx=Load()), attr='background_color', ctx=Load()), Constant(value=0.5)], keywords=[])], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='color', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='theme_color', ctx=Store())], value=Call(func=Attribute(value=Name(id='color', ctx=Load()), attr='get_truecolor', ctx=Load()), args=[Name(id='theme', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='append', ctx=Load()), args=[JoinedStr(values=[Constant(value='color: '), FormattedValue(value=Attribute(value=Name(id='theme_color', ctx=Load()), attr='hex', ctx=Load()), conversion=-1)])], keywords=[])), Expr(value=Call(func=Name(id='append', ctx=Load()), args=[JoinedStr(values=[Constant(value='text-decoration-color: '), FormattedValue(value=Attribute(value=Name(id='theme_color', ctx=Load()), attr='hex', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='bgcolor', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='theme_color', ctx=Store())], value=Call(func=Attribute(value=Name(id='bgcolor', ctx=Load()), attr='get_truecolor', ctx=Load()), args=[Name(id='theme', ctx=Load())], keywords=[keyword(arg='foreground', value=Constant(value=False))])), Expr(value=Call(func=Name(id='append', ctx=Load()), args=[JoinedStr(values=[Constant(value='background-color: '), FormattedValue(value=Attribute(value=Name(id='theme_color', ctx=Load()), attr='hex', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='bold', ctx=Load()), body=[Expr(value=Call(func=Name(id='append', ctx=Load()), args=[Constant(value='font-weight: bold')], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='italic', ctx=Load()), body=[Expr(value=Call(func=Name(id='append', ctx=Load()), args=[Constant(value='font-style: italic')], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='underline', ctx=Load()), body=[Expr(value=Call(func=Name(id='append', ctx=Load()), args=[Constant(value='text-decoration: underline')], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='strike', ctx=Load()), body=[Expr(value=Call(func=Name(id='append', ctx=Load()), args=[Constant(value='text-decoration: line-through')], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='overline', ctx=Load()), body=[Expr(value=Call(func=Name(id='append', ctx=Load()), args=[Constant(value='text-decoration: overline')], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Constant(value='; '), attr='join', ctx=Load()), args=[Name(id='css', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Name(id='lru_cache', ctx=Load()), args=[], keywords=[keyword(arg='maxsize', value=Constant(value=1024))])], returns=Name(id='str', ctx=Load())), FunctionDef(name='combine', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='styles', annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Constant(value='Style'), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Combine styles and get result.\n\n        Args:\n            styles (Iterable[Style]): Styles to combine.\n\n        Returns:\n            Style: A new style instance.\n        ')), Assign(targets=[Name(id='iter_styles', ctx=Store())], value=Call(func=Name(id='iter', ctx=Load()), args=[Name(id='styles', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='iter_styles', ctx=Load()), Call(func=Name(id='next', ctx=Load()), args=[Name(id='iter_styles', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Constant(value='Style')), FunctionDef(name='chain', args=arguments(posonlyargs=[], args=[arg(arg='cls')], vararg=arg(arg='styles', annotation=Constant(value='Style')), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Combine styles from positional argument in to a single style.\n\n        Args:\n            *styles (Iterable[Style]): Styles to combine.\n\n        Returns:\n            Style: A new style instance.\n        ')), Assign(targets=[Name(id='iter_styles', ctx=Store())], value=Call(func=Name(id='iter', ctx=Load()), args=[Name(id='styles', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='sum', ctx=Load()), args=[Name(id='iter_styles', ctx=Load()), Call(func=Name(id='next', ctx=Load()), args=[Name(id='iter_styles', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Constant(value='Style')), FunctionDef(name='copy', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get a copy of this style.\n\n        Returns:\n            Style: A new Style instance with identical attributes.\n        ')), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_null', ctx=Load()), body=[Return(value=Name(id='NULL_STYLE', ctx=Load()))], orelse=[]), AnnAssign(target=Name(id='style', ctx=Store()), annotation=Name(id='Style', ctx=Load()), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='__new__', ctx=Load()), args=[Name(id='Style', ctx=Load())], keywords=[]), simple=1), Assign(targets=[Attribute(value=Name(id='style', ctx=Load()), attr='_ansi', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_ansi', ctx=Load())), Assign(targets=[Attribute(value=Name(id='style', ctx=Load()), attr='_style_definition', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_style_definition', ctx=Load())), Assign(targets=[Attribute(value=Name(id='style', ctx=Load()), attr='_color', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_color', ctx=Load())), Assign(targets=[Attribute(value=Name(id='style', ctx=Load()), attr='_bgcolor', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_bgcolor', ctx=Load())), Assign(targets=[Attribute(value=Name(id='style', ctx=Load()), attr='_attributes', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_attributes', ctx=Load())), Assign(targets=[Attribute(value=Name(id='style', ctx=Load()), attr='_set_attributes', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_set_attributes', ctx=Load())), Assign(targets=[Attribute(value=Name(id='style', ctx=Load()), attr='_link', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_link', ctx=Load())), Assign(targets=[Attribute(value=Name(id='style', ctx=Load()), attr='_link_id', ctx=Store())], value=IfExp(test=Attribute(value=Name(id='self', ctx=Load()), attr='_link', ctx=Load()), body=JoinedStr(values=[FormattedValue(value=Call(func=Name(id='randint', ctx=Load()), args=[Constant(value=0), Constant(value=999999)], keywords=[]), conversion=-1)]), orelse=Constant(value=''))), Assign(targets=[Attribute(value=Name(id='style', ctx=Load()), attr='_hash', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_hash', ctx=Load())), Assign(targets=[Attribute(value=Name(id='style', ctx=Load()), attr='_null', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id='style', ctx=Load()), attr='_meta', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_meta', ctx=Load())), Return(value=Name(id='style', ctx=Load()))], decorator_list=[], returns=Constant(value='Style')), FunctionDef(name='clear_meta_and_links', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get a copy of this style with link and meta information removed.\n\n        Returns:\n            Style: New style object.\n        ')), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_null', ctx=Load()), body=[Return(value=Name(id='NULL_STYLE', ctx=Load()))], orelse=[]), AnnAssign(target=Name(id='style', ctx=Store()), annotation=Name(id='Style', ctx=Load()), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='__new__', ctx=Load()), args=[Name(id='Style', ctx=Load())], keywords=[]), simple=1), Assign(targets=[Attribute(value=Name(id='style', ctx=Load()), attr='_ansi', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_ansi', ctx=Load())), Assign(targets=[Attribute(value=Name(id='style', ctx=Load()), attr='_style_definition', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_style_definition', ctx=Load())), Assign(targets=[Attribute(value=Name(id='style', ctx=Load()), attr='_color', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_color', ctx=Load())), Assign(targets=[Attribute(value=Name(id='style', ctx=Load()), attr='_bgcolor', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_bgcolor', ctx=Load())), Assign(targets=[Attribute(value=Name(id='style', ctx=Load()), attr='_attributes', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_attributes', ctx=Load())), Assign(targets=[Attribute(value=Name(id='style', ctx=Load()), attr='_set_attributes', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_set_attributes', ctx=Load())), Assign(targets=[Attribute(value=Name(id='style', ctx=Load()), attr='_link', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='style', ctx=Load()), attr='_link_id', ctx=Store())], value=Constant(value='')), Assign(targets=[Attribute(value=Name(id='style', ctx=Load()), attr='_hash', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_hash', ctx=Load())), Assign(targets=[Attribute(value=Name(id='style', ctx=Load()), attr='_null', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id='style', ctx=Load()), attr='_meta', ctx=Store())], value=Constant(value=None)), Return(value=Name(id='style', ctx=Load()))], decorator_list=[Call(func=Name(id='lru_cache', ctx=Load()), args=[], keywords=[keyword(arg='maxsize', value=Constant(value=128))])], returns=Constant(value='Style')), FunctionDef(name='update_link', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='link', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Get a copy with a different value for link.\n\n        Args:\n            link (str, optional): New value for link. Defaults to None.\n\n        Returns:\n            Style: A new Style instance.\n        ')), AnnAssign(target=Name(id='style', ctx=Store()), annotation=Name(id='Style', ctx=Load()), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='__new__', ctx=Load()), args=[Name(id='Style', ctx=Load())], keywords=[]), simple=1), Assign(targets=[Attribute(value=Name(id='style', ctx=Load()), attr='_ansi', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_ansi', ctx=Load())), Assign(targets=[Attribute(value=Name(id='style', ctx=Load()), attr='_style_definition', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_style_definition', ctx=Load())), Assign(targets=[Attribute(value=Name(id='style', ctx=Load()), attr='_color', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_color', ctx=Load())), Assign(targets=[Attribute(value=Name(id='style', ctx=Load()), attr='_bgcolor', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_bgcolor', ctx=Load())), Assign(targets=[Attribute(value=Name(id='style', ctx=Load()), attr='_attributes', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_attributes', ctx=Load())), Assign(targets=[Attribute(value=Name(id='style', ctx=Load()), attr='_set_attributes', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_set_attributes', ctx=Load())), Assign(targets=[Attribute(value=Name(id='style', ctx=Load()), attr='_link', ctx=Store())], value=Name(id='link', ctx=Load())), Assign(targets=[Attribute(value=Name(id='style', ctx=Load()), attr='_link_id', ctx=Store())], value=IfExp(test=Name(id='link', ctx=Load()), body=JoinedStr(values=[FormattedValue(value=Call(func=Name(id='randint', ctx=Load()), args=[Constant(value=0), Constant(value=999999)], keywords=[]), conversion=-1)]), orelse=Constant(value=''))), Assign(targets=[Attribute(value=Name(id='style', ctx=Load()), attr='_hash', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='style', ctx=Load()), attr='_null', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id='style', ctx=Load()), attr='_meta', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_meta', ctx=Load())), Return(value=Name(id='style', ctx=Load()))], decorator_list=[], returns=Constant(value='Style')), FunctionDef(name='render', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='text', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[arg(arg='color_system', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='ColorSystem', ctx=Load()), ctx=Load())), arg(arg='legacy_windows', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Attribute(value=Name(id='ColorSystem', ctx=Load()), attr='TRUECOLOR', ctx=Load()), Constant(value=False)], defaults=[Constant(value='')]), body=[Expr(value=Constant(value='Render the ANSI codes for the style.\n\n        Args:\n            text (str, optional): A string to style. Defaults to "".\n            color_system (Optional[ColorSystem], optional): Color system to render to. Defaults to ColorSystem.TRUECOLOR.\n\n        Returns:\n            str: A string containing ANSI style codes.\n        ')), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Name(id='text', ctx=Load())), Compare(left=Name(id='color_system', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])]), body=[Return(value=Name(id='text', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='attrs', ctx=Store())], value=BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='_ansi', ctx=Load()), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_make_ansi_codes', ctx=Load()), args=[Name(id='color_system', ctx=Load())], keywords=[])])), Assign(targets=[Name(id='rendered', ctx=Store())], value=IfExp(test=Name(id='attrs', ctx=Load()), body=JoinedStr(values=[Constant(value='\x1b['), FormattedValue(value=Name(id='attrs', ctx=Load()), conversion=-1), Constant(value='m'), FormattedValue(value=Name(id='text', ctx=Load()), conversion=-1), Constant(value='\x1b[0m')]), orelse=Name(id='text', ctx=Load()))), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='_link', ctx=Load()), UnaryOp(op=Not(), operand=Name(id='legacy_windows', ctx=Load()))]), body=[Assign(targets=[Name(id='rendered', ctx=Store())], value=JoinedStr(values=[Constant(value='\x1b]8;id='), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='_link_id', ctx=Load()), conversion=-1), Constant(value=';'), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='_link', ctx=Load()), conversion=-1), Constant(value='\x1b\\'), FormattedValue(value=Name(id='rendered', ctx=Load()), conversion=-1), Constant(value='\x1b]8;;\x1b\\')]))], orelse=[]), Return(value=Name(id='rendered', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='test', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='text', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Write text with style directly to terminal.\n\n        This method is for testing purposes only.\n\n        Args:\n            text (Optional[str], optional): Text to style or None for style name.\n\n        ')), Assign(targets=[Name(id='text', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='text', ctx=Load()), Call(func=Name(id='str', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load()), attr='write', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='render', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[]), conversion=-1), Constant(value='\n')])], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_add', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='style', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='Style'), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='style', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Attribute(value=Name(id='style', ctx=Load()), attr='_null', ctx=Load())]), body=[Return(value=Name(id='self', ctx=Load()))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_null', ctx=Load()), body=[Return(value=Name(id='style', ctx=Load()))], orelse=[]), AnnAssign(target=Name(id='new_style', ctx=Store()), annotation=Name(id='Style', ctx=Load()), value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='__new__', ctx=Load()), args=[Name(id='Style', ctx=Load())], keywords=[]), simple=1), Assign(targets=[Attribute(value=Name(id='new_style', ctx=Load()), attr='_ansi', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='new_style', ctx=Load()), attr='_style_definition', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='new_style', ctx=Load()), attr='_color', ctx=Store())], value=BoolOp(op=Or(), values=[Attribute(value=Name(id='style', ctx=Load()), attr='_color', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_color', ctx=Load())])), Assign(targets=[Attribute(value=Name(id='new_style', ctx=Load()), attr='_bgcolor', ctx=Store())], value=BoolOp(op=Or(), values=[Attribute(value=Name(id='style', ctx=Load()), attr='_bgcolor', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_bgcolor', ctx=Load())])), Assign(targets=[Attribute(value=Name(id='new_style', ctx=Load()), attr='_attributes', ctx=Store())], value=BinOp(left=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_attributes', ctx=Load()), op=BitAnd(), right=UnaryOp(op=Invert(), operand=Attribute(value=Name(id='style', ctx=Load()), attr='_set_attributes', ctx=Load()))), op=BitOr(), right=BinOp(left=Attribute(value=Name(id='style', ctx=Load()), attr='_attributes', ctx=Load()), op=BitAnd(), right=Attribute(value=Name(id='style', ctx=Load()), attr='_set_attributes', ctx=Load())))), Assign(targets=[Attribute(value=Name(id='new_style', ctx=Load()), attr='_set_attributes', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_set_attributes', ctx=Load()), op=BitOr(), right=Attribute(value=Name(id='style', ctx=Load()), attr='_set_attributes', ctx=Load()))), Assign(targets=[Attribute(value=Name(id='new_style', ctx=Load()), attr='_link', ctx=Store())], value=BoolOp(op=Or(), values=[Attribute(value=Name(id='style', ctx=Load()), attr='_link', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_link', ctx=Load())])), Assign(targets=[Attribute(value=Name(id='new_style', ctx=Load()), attr='_link_id', ctx=Store())], value=BoolOp(op=Or(), values=[Attribute(value=Name(id='style', ctx=Load()), attr='_link_id', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_link_id', ctx=Load())])), Assign(targets=[Attribute(value=Name(id='new_style', ctx=Load()), attr='_null', ctx=Store())], value=Attribute(value=Name(id='style', ctx=Load()), attr='_null', ctx=Load())), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='_meta', ctx=Load()), Attribute(value=Name(id='style', ctx=Load()), attr='_meta', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='new_style', ctx=Load()), attr='_meta', ctx=Store())], value=Call(func=Name(id='dumps', ctx=Load()), args=[Dict(keys=[None, None], values=[Attribute(value=Name(id='self', ctx=Load()), attr='meta', ctx=Load()), Attribute(value=Name(id='style', ctx=Load()), attr='meta', ctx=Load())])], keywords=[]))], orelse=[Assign(targets=[Attribute(value=Name(id='new_style', ctx=Load()), attr='_meta', ctx=Store())], value=BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='_meta', ctx=Load()), Attribute(value=Name(id='style', ctx=Load()), attr='_meta', ctx=Load())]))]), Assign(targets=[Attribute(value=Name(id='new_style', ctx=Load()), attr='_hash', ctx=Store())], value=Constant(value=None)), Return(value=Name(id='new_style', ctx=Load()))], decorator_list=[Call(func=Name(id='lru_cache', ctx=Load()), args=[], keywords=[keyword(arg='maxsize', value=Constant(value=1024))])], returns=Constant(value='Style')), FunctionDef(name='__add__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='style', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='Style'), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='combined_style', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_add', ctx=Load()), args=[Name(id='style', ctx=Load())], keywords=[])), Return(value=IfExp(test=Attribute(value=Name(id='combined_style', ctx=Load()), attr='link', ctx=Load()), body=Call(func=Attribute(value=Name(id='combined_style', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[]), orelse=Name(id='combined_style', ctx=Load())))], decorator_list=[], returns=Constant(value='Style'))], decorator_list=[Name(id='rich_repr', ctx=Load())]), Assign(targets=[Name(id='NULL_STYLE', ctx=Store())], value=Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[])), ClassDef(name='StyleStack', bases=[], keywords=[], body=[Expr(value=Constant(value='A stack of styles.')), Assign(targets=[Name(id='__slots__', ctx=Store())], value=List(elts=[Constant(value='_stack')], ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='default_style', annotation=Constant(value='Style'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_stack', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Style', ctx=Load()), ctx=Load()), value=List(elts=[Name(id='default_style', ctx=Load())], ctx=Load()), simple=0)], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[Constant(value='<stylestack '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='_stack', ctx=Load()), conversion=114), Constant(value='>')]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='current', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get the Style at the top of the stack.')), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_stack', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='Style', ctx=Load())), FunctionDef(name='push', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='style', annotation=Name(id='Style', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Push a new style on to the stack.\n\n        Args:\n            style (Style): New style to combine with current style.\n        ')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_stack', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_stack', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Add(), right=Name(id='style', ctx=Load()))], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='pop', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Pop last style and discard.\n\n        Returns:\n            Style: New current style (also available as stack.current)\n        ')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_stack', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_stack', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))], decorator_list=[], returns=Name(id='Style', ctx=Load()))], decorator_list=[])], type_ignores=[])