Module(body=[Import(names=[alias(name='os.path')]), Import(names=[alias(name='platform')]), Import(names=[alias(name='re')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='textwrap')]), ImportFrom(module='abc', names=[alias(name='ABC'), alias(name='abstractmethod')], level=0), ImportFrom(module='pathlib', names=[alias(name='Path')], level=0), ImportFrom(module='typing', names=[alias(name='Any'), alias(name='Dict'), alias(name='Iterable'), alias(name='List'), alias(name='NamedTuple'), alias(name='Optional'), alias(name='Sequence'), alias(name='Set'), alias(name='Tuple'), alias(name='Type'), alias(name='Union')], level=0), ImportFrom(module='pip._vendor.pygments.lexer', names=[alias(name='Lexer')], level=0), ImportFrom(module='pip._vendor.pygments.lexers', names=[alias(name='get_lexer_by_name'), alias(name='guess_lexer_for_filename')], level=0), ImportFrom(module='pip._vendor.pygments.style', names=[alias(name='Style', asname='PygmentsStyle')], level=0), ImportFrom(module='pip._vendor.pygments.styles', names=[alias(name='get_style_by_name')], level=0), ImportFrom(module='pip._vendor.pygments.token', names=[alias(name='Comment'), alias(name='Error'), alias(name='Generic'), alias(name='Keyword'), alias(name='Name'), alias(name='Number'), alias(name='Operator'), alias(name='String'), alias(name='Token'), alias(name='Whitespace')], level=0), ImportFrom(module='pip._vendor.pygments.util', names=[alias(name='ClassNotFound')], level=0), ImportFrom(module='pip._vendor.rich.containers', names=[alias(name='Lines')], level=0), ImportFrom(module='pip._vendor.rich.padding', names=[alias(name='Padding'), alias(name='PaddingDimensions')], level=0), ImportFrom(module='_loop', names=[alias(name='loop_first')], level=1), ImportFrom(module='cells', names=[alias(name='cell_len')], level=1), ImportFrom(module='color', names=[alias(name='Color'), alias(name='blend_rgb')], level=1), ImportFrom(module='console', names=[alias(name='Console'), alias(name='ConsoleOptions'), alias(name='JustifyMethod'), alias(name='RenderResult')], level=1), ImportFrom(module='jupyter', names=[alias(name='JupyterMixin')], level=1), ImportFrom(module='measure', names=[alias(name='Measurement')], level=1), ImportFrom(module='segment', names=[alias(name='Segment'), alias(name='Segments')], level=1), ImportFrom(module='style', names=[alias(name='Style'), alias(name='StyleType')], level=1), ImportFrom(module='text', names=[alias(name='Text')], level=1), Assign(targets=[Name(id='TokenType', ctx=Store())], value=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='WINDOWS', ctx=Store())], value=Compare(left=Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='system', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Constant(value='Windows')])), Assign(targets=[Name(id='DEFAULT_THEME', ctx=Store())], value=Constant(value='monokai')), AnnAssign(target=Name(id='ANSI_LIGHT', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='TokenType', ctx=Load()), Name(id='Style', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[Name(id='Token', ctx=Load()), Name(id='Whitespace', ctx=Load()), Name(id='Comment', ctx=Load()), Attribute(value=Name(id='Comment', ctx=Load()), attr='Preproc', ctx=Load()), Name(id='Keyword', ctx=Load()), Attribute(value=Name(id='Keyword', ctx=Load()), attr='Type', ctx=Load()), Attribute(value=Name(id='Operator', ctx=Load()), attr='Word', ctx=Load()), Attribute(value=Name(id='Name', ctx=Load()), attr='Builtin', ctx=Load()), Attribute(value=Name(id='Name', ctx=Load()), attr='Function', ctx=Load()), Attribute(value=Name(id='Name', ctx=Load()), attr='Namespace', ctx=Load()), Attribute(value=Name(id='Name', ctx=Load()), attr='Class', ctx=Load()), Attribute(value=Name(id='Name', ctx=Load()), attr='Exception', ctx=Load()), Attribute(value=Name(id='Name', ctx=Load()), attr='Decorator', ctx=Load()), Attribute(value=Name(id='Name', ctx=Load()), attr='Variable', ctx=Load()), Attribute(value=Name(id='Name', ctx=Load()), attr='Constant', ctx=Load()), Attribute(value=Name(id='Name', ctx=Load()), attr='Attribute', ctx=Load()), Attribute(value=Name(id='Name', ctx=Load()), attr='Tag', ctx=Load()), Name(id='String', ctx=Load()), Name(id='Number', ctx=Load()), Attribute(value=Name(id='Generic', ctx=Load()), attr='Deleted', ctx=Load()), Attribute(value=Name(id='Generic', ctx=Load()), attr='Inserted', ctx=Load()), Attribute(value=Name(id='Generic', ctx=Load()), attr='Heading', ctx=Load()), Attribute(value=Name(id='Generic', ctx=Load()), attr='Subheading', ctx=Load()), Attribute(value=Name(id='Generic', ctx=Load()), attr='Prompt', ctx=Load()), Attribute(value=Name(id='Generic', ctx=Load()), attr='Error', ctx=Load()), Name(id='Error', ctx=Load())], values=[Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='color', value=Constant(value='white'))]), Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='dim', value=Constant(value=True))]), Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='color', value=Constant(value='cyan'))]), Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='color', value=Constant(value='blue'))]), Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='color', value=Constant(value='cyan'))]), Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='color', value=Constant(value='magenta'))]), Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='color', value=Constant(value='cyan'))]), Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='color', value=Constant(value='green'))]), Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='color', value=Constant(value='cyan')), keyword(arg='underline', value=Constant(value=True))]), Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='color', value=Constant(value='green')), keyword(arg='underline', value=Constant(value=True))]), Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='color', value=Constant(value='cyan'))]), Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='color', value=Constant(value='magenta')), keyword(arg='bold', value=Constant(value=True))]), Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='color', value=Constant(value='red'))]), Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='color', value=Constant(value='red'))]), Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='color', value=Constant(value='cyan'))]), Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='color', value=Constant(value='bright_blue'))]), Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='color', value=Constant(value='yellow'))]), Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='color', value=Constant(value='blue'))]), Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='color', value=Constant(value='bright_red'))]), Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='color', value=Constant(value='green'))]), Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='bold', value=Constant(value=True))]), Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='color', value=Constant(value='magenta')), keyword(arg='bold', value=Constant(value=True))]), Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='bold', value=Constant(value=True))]), Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='color', value=Constant(value='bright_red'))]), Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='color', value=Constant(value='red')), keyword(arg='underline', value=Constant(value=True))])]), simple=1), AnnAssign(target=Name(id='ANSI_DARK', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='TokenType', ctx=Load()), Name(id='Style', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[Name(id='Token', ctx=Load()), Name(id='Whitespace', ctx=Load()), Name(id='Comment', ctx=Load()), Attribute(value=Name(id='Comment', ctx=Load()), attr='Preproc', ctx=Load()), Name(id='Keyword', ctx=Load()), Attribute(value=Name(id='Keyword', ctx=Load()), attr='Type', ctx=Load()), Attribute(value=Name(id='Operator', ctx=Load()), attr='Word', ctx=Load()), Attribute(value=Name(id='Name', ctx=Load()), attr='Builtin', ctx=Load()), Attribute(value=Name(id='Name', ctx=Load()), attr='Function', ctx=Load()), Attribute(value=Name(id='Name', ctx=Load()), attr='Namespace', ctx=Load()), Attribute(value=Name(id='Name', ctx=Load()), attr='Class', ctx=Load()), Attribute(value=Name(id='Name', ctx=Load()), attr='Exception', ctx=Load()), Attribute(value=Name(id='Name', ctx=Load()), attr='Decorator', ctx=Load()), Attribute(value=Name(id='Name', ctx=Load()), attr='Variable', ctx=Load()), Attribute(value=Name(id='Name', ctx=Load()), attr='Constant', ctx=Load()), Attribute(value=Name(id='Name', ctx=Load()), attr='Attribute', ctx=Load()), Attribute(value=Name(id='Name', ctx=Load()), attr='Tag', ctx=Load()), Name(id='String', ctx=Load()), Name(id='Number', ctx=Load()), Attribute(value=Name(id='Generic', ctx=Load()), attr='Deleted', ctx=Load()), Attribute(value=Name(id='Generic', ctx=Load()), attr='Inserted', ctx=Load()), Attribute(value=Name(id='Generic', ctx=Load()), attr='Heading', ctx=Load()), Attribute(value=Name(id='Generic', ctx=Load()), attr='Subheading', ctx=Load()), Attribute(value=Name(id='Generic', ctx=Load()), attr='Prompt', ctx=Load()), Attribute(value=Name(id='Generic', ctx=Load()), attr='Error', ctx=Load()), Name(id='Error', ctx=Load())], values=[Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='color', value=Constant(value='bright_black'))]), Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='dim', value=Constant(value=True))]), Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='color', value=Constant(value='bright_cyan'))]), Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='color', value=Constant(value='bright_blue'))]), Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='color', value=Constant(value='bright_cyan'))]), Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='color', value=Constant(value='bright_magenta'))]), Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='color', value=Constant(value='bright_cyan'))]), Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='color', value=Constant(value='bright_green'))]), Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='color', value=Constant(value='bright_cyan')), keyword(arg='underline', value=Constant(value=True))]), Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='color', value=Constant(value='bright_green')), keyword(arg='underline', value=Constant(value=True))]), Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='color', value=Constant(value='bright_cyan'))]), Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='color', value=Constant(value='bright_magenta')), keyword(arg='bold', value=Constant(value=True))]), Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='color', value=Constant(value='bright_red'))]), Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='color', value=Constant(value='bright_red'))]), Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='color', value=Constant(value='bright_cyan'))]), Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='color', value=Constant(value='bright_blue'))]), Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='color', value=Constant(value='yellow'))]), Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='color', value=Constant(value='bright_blue'))]), Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='color', value=Constant(value='bright_red'))]), Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='color', value=Constant(value='bright_green'))]), Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='bold', value=Constant(value=True))]), Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='color', value=Constant(value='bright_magenta')), keyword(arg='bold', value=Constant(value=True))]), Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='bold', value=Constant(value=True))]), Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='color', value=Constant(value='bright_red'))]), Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='color', value=Constant(value='red')), keyword(arg='underline', value=Constant(value=True))])]), simple=1), Assign(targets=[Name(id='RICH_SYNTAX_THEMES', ctx=Store())], value=Dict(keys=[Constant(value='ansi_light'), Constant(value='ansi_dark')], values=[Name(id='ANSI_LIGHT', ctx=Load()), Name(id='ANSI_DARK', ctx=Load())])), Assign(targets=[Name(id='NUMBERS_COLUMN_DEFAULT_PADDING', ctx=Store())], value=Constant(value=2)), ClassDef(name='SyntaxTheme', bases=[Name(id='ABC', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Base class for a syntax theme.')), FunctionDef(name='get_style_for_token', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='token_type', annotation=Name(id='TokenType', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get a style for a given Pygments token.')), Raise(exc=Name(id='NotImplementedError', ctx=Load()))], decorator_list=[Name(id='abstractmethod', ctx=Load())], returns=Name(id='Style', ctx=Load())), FunctionDef(name='get_background_style', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get the background color.')), Raise(exc=Name(id='NotImplementedError', ctx=Load()))], decorator_list=[Name(id='abstractmethod', ctx=Load())], returns=Name(id='Style', ctx=Load()))], decorator_list=[]), ClassDef(name='PygmentsSyntaxTheme', bases=[Name(id='SyntaxTheme', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Syntax theme that delegates to Pygments theme.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='theme', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Type', ctx=Load()), slice=Name(id='PygmentsStyle', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_style_cache', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='TokenType', ctx=Load()), Name(id='Style', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=0), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='theme', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Try(body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_pygments_style_class', ctx=Store())], value=Call(func=Name(id='get_style_by_name', ctx=Load()), args=[Name(id='theme', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ClassNotFound', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_pygments_style_class', ctx=Store())], value=Call(func=Name(id='get_style_by_name', ctx=Load()), args=[Constant(value='default')], keywords=[]))])], orelse=[], finalbody=[])], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_pygments_style_class', ctx=Store())], value=Name(id='theme', ctx=Load()))]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_background_color', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_pygments_style_class', ctx=Load()), attr='background_color', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_background_style', ctx=Store())], value=Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='bgcolor', value=Attribute(value=Name(id='self', ctx=Load()), attr='_background_color', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='get_style_for_token', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='token_type', annotation=Name(id='TokenType', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get a style from a Pygments class.')), Try(body=[Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_style_cache', ctx=Load()), slice=Name(id='token_type', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Try(body=[Assign(targets=[Name(id='pygments_style', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_pygments_style_class', ctx=Load()), attr='style_for_token', ctx=Load()), args=[Name(id='token_type', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Assign(targets=[Name(id='style', ctx=Store())], value=Call(func=Attribute(value=Name(id='Style', ctx=Load()), attr='null', ctx=Load()), args=[], keywords=[]))])], orelse=[Assign(targets=[Name(id='color', ctx=Store())], value=Subscript(value=Name(id='pygments_style', ctx=Load()), slice=Constant(value='color'), ctx=Load())), Assign(targets=[Name(id='bgcolor', ctx=Store())], value=Subscript(value=Name(id='pygments_style', ctx=Load()), slice=Constant(value='bgcolor'), ctx=Load())), Assign(targets=[Name(id='style', ctx=Store())], value=Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='color', value=IfExp(test=Name(id='color', ctx=Load()), body=BinOp(left=Constant(value='#'), op=Add(), right=Name(id='color', ctx=Load())), orelse=Constant(value='#000000'))), keyword(arg='bgcolor', value=IfExp(test=Name(id='bgcolor', ctx=Load()), body=BinOp(left=Constant(value='#'), op=Add(), right=Name(id='bgcolor', ctx=Load())), orelse=Attribute(value=Name(id='self', ctx=Load()), attr='_background_color', ctx=Load()))), keyword(arg='bold', value=Subscript(value=Name(id='pygments_style', ctx=Load()), slice=Constant(value='bold'), ctx=Load())), keyword(arg='italic', value=Subscript(value=Name(id='pygments_style', ctx=Load()), slice=Constant(value='italic'), ctx=Load())), keyword(arg='underline', value=Subscript(value=Name(id='pygments_style', ctx=Load()), slice=Constant(value='underline'), ctx=Load()))]))], finalbody=[]), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_style_cache', ctx=Load()), slice=Name(id='token_type', ctx=Load()), ctx=Store())], value=Name(id='style', ctx=Load()))])], orelse=[], finalbody=[]), Return(value=Name(id='style', ctx=Load()))], decorator_list=[], returns=Name(id='Style', ctx=Load())), FunctionDef(name='get_background_style', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_background_style', ctx=Load()))], decorator_list=[], returns=Name(id='Style', ctx=Load()))], decorator_list=[]), ClassDef(name='ANSISyntaxTheme', bases=[Name(id='SyntaxTheme', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Syntax theme to use standard colors.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='style_map', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='TokenType', ctx=Load()), Name(id='Style', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='style_map', ctx=Store())], value=Name(id='style_map', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_missing_style', ctx=Store())], value=Call(func=Attribute(value=Name(id='Style', ctx=Load()), attr='null', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_background_style', ctx=Store())], value=Call(func=Attribute(value=Name(id='Style', ctx=Load()), attr='null', ctx=Load()), args=[], keywords=[])), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_style_cache', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='TokenType', ctx=Load()), Name(id='Style', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=0)], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='get_style_for_token', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='token_type', annotation=Name(id='TokenType', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Look up style in the style map.')), Try(body=[Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_style_cache', ctx=Load()), slice=Name(id='token_type', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Assign(targets=[Name(id='get_style', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='style_map', ctx=Load()), attr='get', ctx=Load())), Assign(targets=[Name(id='token', ctx=Store())], value=Call(func=Name(id='tuple', ctx=Load()), args=[Name(id='token_type', ctx=Load())], keywords=[])), Assign(targets=[Name(id='style', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_missing_style', ctx=Load())), While(test=Name(id='token', ctx=Load()), body=[Assign(targets=[Name(id='_style', ctx=Store())], value=Call(func=Name(id='get_style', ctx=Load()), args=[Name(id='token', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='_style', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='style', ctx=Store())], value=Name(id='_style', ctx=Load())), Break()], orelse=[]), Assign(targets=[Name(id='token', ctx=Store())], value=Subscript(value=Name(id='token', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))], orelse=[]), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_style_cache', ctx=Load()), slice=Name(id='token_type', ctx=Load()), ctx=Store())], value=Name(id='style', ctx=Load())), Return(value=Name(id='style', ctx=Load()))])], orelse=[], finalbody=[])], decorator_list=[], returns=Name(id='Style', ctx=Load())), FunctionDef(name='get_background_style', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_background_style', ctx=Load()))], decorator_list=[], returns=Name(id='Style', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='SyntaxPosition', ctx=Store())], value=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())), ClassDef(name='_SyntaxHighlightRange', bases=[Name(id='NamedTuple', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    A range to highlight in a Syntax object.\n    `start` and `end` are 2-integers tuples, where the first integer is the line number\n    (starting from 1) and the second integer is the column index (starting from 0).\n    ')), AnnAssign(target=Name(id='style', ctx=Store()), annotation=Name(id='StyleType', ctx=Load()), simple=1), AnnAssign(target=Name(id='start', ctx=Store()), annotation=Name(id='SyntaxPosition', ctx=Load()), simple=1), AnnAssign(target=Name(id='end', ctx=Store()), annotation=Name(id='SyntaxPosition', ctx=Load()), simple=1)], decorator_list=[]), ClassDef(name='Syntax', bases=[Name(id='JupyterMixin', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Construct a Syntax object to render syntax highlighted code.\n\n    Args:\n        code (str): Code to highlight.\n        lexer (Lexer | str): Lexer to use (see https://pygments.org/docs/lexers/)\n        theme (str, optional): Color theme, aka Pygments style (see https://pygments.org/docs/styles/#getting-a-list-of-available-styles). Defaults to "monokai".\n        dedent (bool, optional): Enable stripping of initial whitespace. Defaults to False.\n        line_numbers (bool, optional): Enable rendering of line numbers. Defaults to False.\n        start_line (int, optional): Starting number for line numbers. Defaults to 1.\n        line_range (Tuple[int | None, int | None], optional): If given should be a tuple of the start and end line to render.\n            A value of None in the tuple indicates the range is open in that direction.\n        highlight_lines (Set[int]): A set of line numbers to highlight.\n        code_width: Width of code to render (not including line numbers), or ``None`` to use all available width.\n        tab_size (int, optional): Size of tabs. Defaults to 4.\n        word_wrap (bool, optional): Enable word wrapping.\n        background_color (str, optional): Optional background color, or None to use theme color. Defaults to None.\n        indent_guides (bool, optional): Show indent guides. Defaults to False.\n        padding (PaddingDimensions): Padding to apply around the syntax. Defaults to 0 (no padding).\n    ')), AnnAssign(target=Name(id='_pygments_style_class', ctx=Store()), annotation=Subscript(value=Name(id='Type', ctx=Load()), slice=Name(id='PygmentsStyle', ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='_theme', ctx=Store()), annotation=Name(id='SyntaxTheme', ctx=Load()), simple=1), FunctionDef(name='get_theme', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='name', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='SyntaxTheme', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get a syntax theme instance.')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='SyntaxTheme', ctx=Load())], keywords=[]), body=[Return(value=Name(id='name', ctx=Load()))], orelse=[]), AnnAssign(target=Name(id='theme', ctx=Store()), annotation=Name(id='SyntaxTheme', ctx=Load()), simple=1), If(test=Compare(left=Name(id='name', ctx=Load()), ops=[In()], comparators=[Name(id='RICH_SYNTAX_THEMES', ctx=Load())]), body=[Assign(targets=[Name(id='theme', ctx=Store())], value=Call(func=Name(id='ANSISyntaxTheme', ctx=Load()), args=[Subscript(value=Name(id='RICH_SYNTAX_THEMES', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='theme', ctx=Store())], value=Call(func=Name(id='PygmentsSyntaxTheme', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]))]), Return(value=Name(id='theme', ctx=Load()))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Name(id='SyntaxTheme', ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='code', annotation=Name(id='str', ctx=Load())), arg(arg='lexer', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='Lexer', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[arg(arg='theme', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='SyntaxTheme', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='dedent', annotation=Name(id='bool', ctx=Load())), arg(arg='line_numbers', annotation=Name(id='bool', ctx=Load())), arg(arg='start_line', annotation=Name(id='int', ctx=Load())), arg(arg='line_range', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='highlight_lines', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Set', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='code_width', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='tab_size', annotation=Name(id='int', ctx=Load())), arg(arg='word_wrap', annotation=Name(id='bool', ctx=Load())), arg(arg='background_color', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='indent_guides', annotation=Name(id='bool', ctx=Load())), arg(arg='padding', annotation=Name(id='PaddingDimensions', ctx=Load()))], kw_defaults=[Name(id='DEFAULT_THEME', ctx=Load()), Constant(value=False), Constant(value=False), Constant(value=1), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=4), Constant(value=False), Constant(value=None), Constant(value=False), Constant(value=0)], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='code', ctx=Store())], value=Name(id='code', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_lexer', ctx=Store())], value=Name(id='lexer', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='dedent', ctx=Store())], value=Name(id='dedent', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='line_numbers', ctx=Store())], value=Name(id='line_numbers', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='start_line', ctx=Store())], value=Name(id='start_line', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='line_range', ctx=Store())], value=Name(id='line_range', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='highlight_lines', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='highlight_lines', ctx=Load()), Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='code_width', ctx=Store())], value=Name(id='code_width', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='tab_size', ctx=Store())], value=Name(id='tab_size', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='word_wrap', ctx=Store())], value=Name(id='word_wrap', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='background_color', ctx=Store())], value=Name(id='background_color', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='background_style', ctx=Store())], value=IfExp(test=Name(id='background_color', ctx=Load()), body=Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='bgcolor', value=Name(id='background_color', ctx=Load()))]), orelse=Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[]))), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='indent_guides', ctx=Store())], value=Name(id='indent_guides', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='padding', ctx=Store())], value=Name(id='padding', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_theme', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_theme', ctx=Load()), args=[Name(id='theme', ctx=Load())], keywords=[])), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_stylized_ranges', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='_SyntaxHighlightRange', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=0)], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='from_path', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='path', annotation=Name(id='str', ctx=Load())), arg(arg='encoding', annotation=Name(id='str', ctx=Load())), arg(arg='lexer', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='Lexer', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='theme', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='SyntaxTheme', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='dedent', annotation=Name(id='bool', ctx=Load())), arg(arg='line_numbers', annotation=Name(id='bool', ctx=Load())), arg(arg='line_range', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='start_line', annotation=Name(id='int', ctx=Load())), arg(arg='highlight_lines', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Set', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='code_width', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='tab_size', annotation=Name(id='int', ctx=Load())), arg(arg='word_wrap', annotation=Name(id='bool', ctx=Load())), arg(arg='background_color', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='indent_guides', annotation=Name(id='bool', ctx=Load())), arg(arg='padding', annotation=Name(id='PaddingDimensions', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='utf-8'), Constant(value=None), Name(id='DEFAULT_THEME', ctx=Load()), Constant(value=False), Constant(value=False), Constant(value=None), Constant(value=1), Constant(value=None), Constant(value=None), Constant(value=4), Constant(value=False), Constant(value=None), Constant(value=False), Constant(value=0)]), body=[Expr(value=Constant(value='Construct a Syntax object from a file.\n\n        Args:\n            path (str): Path to file to highlight.\n            encoding (str): Encoding of file.\n            lexer (str | Lexer, optional): Lexer to use. If None, lexer will be auto-detected from path/file content.\n            theme (str, optional): Color theme, aka Pygments style (see https://pygments.org/docs/styles/#getting-a-list-of-available-styles). Defaults to "emacs".\n            dedent (bool, optional): Enable stripping of initial whitespace. Defaults to True.\n            line_numbers (bool, optional): Enable rendering of line numbers. Defaults to False.\n            start_line (int, optional): Starting number for line numbers. Defaults to 1.\n            line_range (Tuple[int, int], optional): If given should be a tuple of the start and end line to render.\n            highlight_lines (Set[int]): A set of line numbers to highlight.\n            code_width: Width of code to render (not including line numbers), or ``None`` to use all available width.\n            tab_size (int, optional): Size of tabs. Defaults to 4.\n            word_wrap (bool, optional): Enable word wrapping of code.\n            background_color (str, optional): Optional background color, or None to use theme color. Defaults to None.\n            indent_guides (bool, optional): Show indent guides. Defaults to False.\n            padding (PaddingDimensions): Padding to apply around the syntax. Defaults to 0 (no padding).\n\n        Returns:\n            [Syntax]: A Syntax object that may be printed to the console\n        ')), Assign(targets=[Name(id='code', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='Path', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), attr='read_text', ctx=Load()), args=[], keywords=[keyword(arg='encoding', value=Name(id='encoding', ctx=Load()))])), If(test=UnaryOp(op=Not(), operand=Name(id='lexer', ctx=Load())), body=[Assign(targets=[Name(id='lexer', ctx=Store())], value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='guess_lexer', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[keyword(arg='code', value=Name(id='code', ctx=Load()))]))], orelse=[]), Return(value=Call(func=Name(id='cls', ctx=Load()), args=[Name(id='code', ctx=Load()), Name(id='lexer', ctx=Load())], keywords=[keyword(arg='theme', value=Name(id='theme', ctx=Load())), keyword(arg='dedent', value=Name(id='dedent', ctx=Load())), keyword(arg='line_numbers', value=Name(id='line_numbers', ctx=Load())), keyword(arg='line_range', value=Name(id='line_range', ctx=Load())), keyword(arg='start_line', value=Name(id='start_line', ctx=Load())), keyword(arg='highlight_lines', value=Name(id='highlight_lines', ctx=Load())), keyword(arg='code_width', value=Name(id='code_width', ctx=Load())), keyword(arg='tab_size', value=Name(id='tab_size', ctx=Load())), keyword(arg='word_wrap', value=Name(id='word_wrap', ctx=Load())), keyword(arg='background_color', value=Name(id='background_color', ctx=Load())), keyword(arg='indent_guides', value=Name(id='indent_guides', ctx=Load())), keyword(arg='padding', value=Name(id='padding', ctx=Load()))]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Constant(value='Syntax')), FunctionDef(name='guess_lexer', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='path', annotation=Name(id='str', ctx=Load())), arg(arg='code', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Guess the alias of the Pygments lexer to use based on a path and an optional string of code.\n        If code is supplied, it will use a combination of the code and the filename to determine the\n        best lexer to use. For example, if the file is ``index.html`` and the file contains Django\n        templating syntax, then "html+django" will be returned. If the file is ``index.html``, and no\n        templating language is used, the "html" lexer will be used. If no string of code\n        is supplied, the lexer will be chosen based on the file extension..\n\n        Args:\n             path (AnyStr): The path to the file containing the code you wish to know the lexer for.\n             code (str, optional): Optional string of code that will be used as a fallback if no lexer\n                is found for the supplied path.\n\n        Returns:\n            str: The name of the Pygments lexer that best matches the supplied path/code.\n        ')), AnnAssign(target=Name(id='lexer', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Lexer', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=1), Assign(targets=[Name(id='lexer_name', ctx=Store())], value=Constant(value='default')), If(test=Name(id='code', ctx=Load()), body=[Try(body=[Assign(targets=[Name(id='lexer', ctx=Store())], value=Call(func=Name(id='guess_lexer_for_filename', ctx=Load()), args=[Name(id='path', ctx=Load()), Name(id='code', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ClassNotFound', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='lexer', ctx=Load())), body=[Try(body=[Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='ext', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='splitext', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), If(test=Name(id='ext', ctx=Load()), body=[Assign(targets=[Name(id='extension', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='ext', ctx=Load()), attr='lstrip', ctx=Load()), args=[Constant(value='.')], keywords=[]), attr='lower', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='lexer', ctx=Store())], value=Call(func=Name(id='get_lexer_by_name', ctx=Load()), args=[Name(id='extension', ctx=Load())], keywords=[]))], orelse=[])], handlers=[ExceptHandler(type=Name(id='ClassNotFound', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], orelse=[]), If(test=Name(id='lexer', ctx=Load()), body=[If(test=Attribute(value=Name(id='lexer', ctx=Load()), attr='aliases', ctx=Load()), body=[Assign(targets=[Name(id='lexer_name', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='lexer', ctx=Load()), attr='aliases', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Assign(targets=[Name(id='lexer_name', ctx=Store())], value=Attribute(value=Name(id='lexer', ctx=Load()), attr='name', ctx=Load()))])], orelse=[]), Return(value=Name(id='lexer_name', ctx=Load()))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='_get_base_style', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get the base style.')), Assign(targets=[Name(id='default_style', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_theme', ctx=Load()), attr='get_background_style', ctx=Load()), args=[], keywords=[]), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='background_style', ctx=Load()))), Return(value=Name(id='default_style', ctx=Load()))], decorator_list=[], returns=Name(id='Style', ctx=Load())), FunctionDef(name='_get_token_color', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='token_type', annotation=Name(id='TokenType', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get a color (if any) for the given token.\n\n        Args:\n            token_type (TokenType): A token type tuple from Pygments.\n\n        Returns:\n            Optional[Color]: Color from theme, or None for no color.\n        ')), Assign(targets=[Name(id='style', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_theme', ctx=Load()), attr='get_style_for_token', ctx=Load()), args=[Name(id='token_type', ctx=Load())], keywords=[])), Return(value=Attribute(value=Name(id='style', ctx=Load()), attr='color', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Color', ctx=Load()), ctx=Load())), FunctionDef(name='lexer', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='The lexer for this syntax, or None if no lexer was found.\n\n        Tries to find the lexer by name if a string was passed to the constructor.\n        ')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_lexer', ctx=Load()), Name(id='Lexer', ctx=Load())], keywords=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_lexer', ctx=Load()))], orelse=[]), Try(body=[Return(value=Call(func=Name(id='get_lexer_by_name', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_lexer', ctx=Load())], keywords=[keyword(arg='stripnl', value=Constant(value=False)), keyword(arg='ensurenl', value=Constant(value=True)), keyword(arg='tabsize', value=Attribute(value=Name(id='self', ctx=Load()), attr='tab_size', ctx=Load()))]))], handlers=[ExceptHandler(type=Name(id='ClassNotFound', ctx=Load()), body=[Return(value=Constant(value=None))])], orelse=[], finalbody=[])], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Lexer', ctx=Load()), ctx=Load())), FunctionDef(name='highlight', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='code', annotation=Name(id='str', ctx=Load())), arg(arg='line_range', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Highlight code and return a Text instance.\n\n        Args:\n            code (str): Code to highlight.\n            line_range(Tuple[int, int], optional): Optional line range to highlight.\n\n        Returns:\n            Text: A text instance containing highlighted syntax.\n        ')), Assign(targets=[Name(id='base_style', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_base_style', ctx=Load()), args=[], keywords=[])), AnnAssign(target=Name(id='justify', ctx=Store()), annotation=Name(id='JustifyMethod', ctx=Load()), value=IfExp(test=Attribute(value=Name(id='base_style', ctx=Load()), attr='transparent_background', ctx=Load()), body=Constant(value='default'), orelse=Constant(value='left')), simple=1), Assign(targets=[Name(id='text', ctx=Store())], value=Call(func=Name(id='Text', ctx=Load()), args=[], keywords=[keyword(arg='justify', value=Name(id='justify', ctx=Load())), keyword(arg='style', value=Name(id='base_style', ctx=Load())), keyword(arg='tab_size', value=Attribute(value=Name(id='self', ctx=Load()), attr='tab_size', ctx=Load())), keyword(arg='no_wrap', value=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='word_wrap', ctx=Load())))])), Assign(targets=[Name(id='_get_theme_style', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_theme', ctx=Load()), attr='get_style_for_token', ctx=Load())), Assign(targets=[Name(id='lexer', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='lexer', ctx=Load())), If(test=Compare(left=Name(id='lexer', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='text', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='code', ctx=Load())], keywords=[]))], orelse=[If(test=Name(id='line_range', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='line_start', ctx=Store()), Name(id='line_end', ctx=Store())], ctx=Store())], value=Name(id='line_range', ctx=Load())), FunctionDef(name='line_tokenize', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Split tokens to one per line.')), Assert(test=Name(id='lexer', ctx=Load())), For(target=Tuple(elts=[Name(id='token_type', ctx=Store()), Name(id='token', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='lexer', ctx=Load()), attr='get_tokens', ctx=Load()), args=[Name(id='code', ctx=Load())], keywords=[]), body=[While(test=Name(id='token', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='line_token', ctx=Store()), Name(id='new_line', ctx=Store()), Name(id='token', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='token', ctx=Load()), attr='partition', ctx=Load()), args=[Constant(value='\n')], keywords=[])), Expr(value=Yield(value=Tuple(elts=[Name(id='token_type', ctx=Load()), BinOp(left=Name(id='line_token', ctx=Load()), op=Add(), right=Name(id='new_line', ctx=Load()))], ctx=Load())))], orelse=[])], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='Any', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='tokens_to_spans', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Convert tokens to spans.')), Assign(targets=[Name(id='tokens', ctx=Store())], value=Call(func=Name(id='iter', ctx=Load()), args=[Call(func=Name(id='line_tokenize', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='line_no', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='_line_start', ctx=Store())], value=IfExp(test=Name(id='line_start', ctx=Load()), body=BinOp(left=Name(id='line_start', ctx=Load()), op=Sub(), right=Constant(value=1)), orelse=Constant(value=0))), While(test=Compare(left=Name(id='line_no', ctx=Load()), ops=[Lt()], comparators=[Name(id='_line_start', ctx=Load())]), body=[Try(body=[Assign(targets=[Tuple(elts=[Name(id='_token_type', ctx=Store()), Name(id='token', ctx=Store())], ctx=Store())], value=Call(func=Name(id='next', ctx=Load()), args=[Name(id='tokens', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='StopIteration', ctx=Load()), body=[Break()])], orelse=[], finalbody=[]), Expr(value=Yield(value=Tuple(elts=[Name(id='token', ctx=Load()), Constant(value=None)], ctx=Load()))), If(test=Call(func=Attribute(value=Name(id='token', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='\n')], keywords=[]), body=[AugAssign(target=Name(id='line_no', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])], orelse=[]), For(target=Tuple(elts=[Name(id='token_type', ctx=Store()), Name(id='token', ctx=Store())], ctx=Store()), iter=Name(id='tokens', ctx=Load()), body=[Expr(value=Yield(value=Tuple(elts=[Name(id='token', ctx=Load()), Call(func=Name(id='_get_theme_style', ctx=Load()), args=[Name(id='token_type', ctx=Load())], keywords=[])], ctx=Load()))), If(test=Call(func=Attribute(value=Name(id='token', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='\n')], keywords=[]), body=[AugAssign(target=Name(id='line_no', ctx=Store()), op=Add(), value=Constant(value=1)), If(test=BoolOp(op=And(), values=[Name(id='line_end', ctx=Load()), Compare(left=Name(id='line_no', ctx=Load()), ops=[GtE()], comparators=[Name(id='line_end', ctx=Load())])]), body=[Break()], orelse=[])], orelse=[])], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Style', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='text', ctx=Load()), attr='append_tokens', ctx=Load()), args=[Call(func=Name(id='tokens_to_spans', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='text', ctx=Load()), attr='append_tokens', ctx=Load()), args=[GeneratorExp(elt=Tuple(elts=[Name(id='token', ctx=Load()), Call(func=Name(id='_get_theme_style', ctx=Load()), args=[Name(id='token_type', ctx=Load())], keywords=[])], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='token_type', ctx=Store()), Name(id='token', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='lexer', ctx=Load()), attr='get_tokens', ctx=Load()), args=[Name(id='code', ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[]))]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='background_color', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='text', ctx=Load()), attr='stylize', ctx=Load()), args=[JoinedStr(values=[Constant(value='on '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='background_color', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[])]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_stylized_ranges', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_apply_stylized_ranges', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='text', ctx=Load()))], decorator_list=[], returns=Name(id='Text', ctx=Load())), FunctionDef(name='stylize_range', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='style', annotation=Name(id='StyleType', ctx=Load())), arg(arg='start', annotation=Name(id='SyntaxPosition', ctx=Load())), arg(arg='end', annotation=Name(id='SyntaxPosition', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Adds a custom style on a part of the code, that will be applied to the syntax display when it's rendered.\n        Line numbers are 1-based, while column indexes are 0-based.\n\n        Args:\n            style (StyleType): The style to apply.\n            start (Tuple[int, int]): The start of the range, in the form `[line number, column index]`.\n            end (Tuple[int, int]): The end of the range, in the form `[line number, column index]`.\n        ")), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_stylized_ranges', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='_SyntaxHighlightRange', ctx=Load()), args=[Name(id='style', ctx=Load()), Name(id='start', ctx=Load()), Name(id='end', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_get_line_numbers_color', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='blend', annotation=Name(id='float', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0.3)]), body=[Assign(targets=[Name(id='background_style', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_theme', ctx=Load()), attr='get_background_style', ctx=Load()), args=[], keywords=[]), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='background_style', ctx=Load()))), Assign(targets=[Name(id='background_color', ctx=Store())], value=Attribute(value=Name(id='background_style', ctx=Load()), attr='bgcolor', ctx=Load())), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='background_color', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Attribute(value=Name(id='background_color', ctx=Load()), attr='is_system_defined', ctx=Load())]), body=[Return(value=Call(func=Attribute(value=Name(id='Color', ctx=Load()), attr='default', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='foreground_color', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_token_color', ctx=Load()), args=[Attribute(value=Name(id='Token', ctx=Load()), attr='Text', ctx=Load())], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='foreground_color', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Attribute(value=Name(id='foreground_color', ctx=Load()), attr='is_system_defined', ctx=Load())]), body=[Return(value=BoolOp(op=Or(), values=[Name(id='foreground_color', ctx=Load()), Call(func=Attribute(value=Name(id='Color', ctx=Load()), attr='default', ctx=Load()), args=[], keywords=[])]))], orelse=[]), Assign(targets=[Name(id='new_color', ctx=Store())], value=Call(func=Name(id='blend_rgb', ctx=Load()), args=[Call(func=Attribute(value=Name(id='background_color', ctx=Load()), attr='get_truecolor', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='foreground_color', ctx=Load()), attr='get_truecolor', ctx=Load()), args=[], keywords=[])], keywords=[keyword(arg='cross_fade', value=Name(id='blend', ctx=Load()))])), Return(value=Call(func=Attribute(value=Name(id='Color', ctx=Load()), attr='from_triplet', ctx=Load()), args=[Name(id='new_color', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='Color', ctx=Load())), FunctionDef(name='_numbers_column_width', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get the number of characters used to render the numbers column.')), Assign(targets=[Name(id='column_width', ctx=Store())], value=Constant(value=0)), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='line_numbers', ctx=Load()), body=[Assign(targets=[Name(id='column_width', ctx=Store())], value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='start_line', ctx=Load()), op=Add(), right=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='code', ctx=Load()), attr='count', ctx=Load()), args=[Constant(value='\n')], keywords=[]))], keywords=[])], keywords=[]), op=Add(), right=Name(id='NUMBERS_COLUMN_DEFAULT_PADDING', ctx=Load())))], orelse=[]), Return(value=Name(id='column_width', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load())), FunctionDef(name='_get_number_styles', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='console', annotation=Name(id='Console', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get background, number, and highlight styles for line numbers.')), Assign(targets=[Name(id='background_style', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_base_style', ctx=Load()), args=[], keywords=[])), If(test=Attribute(value=Name(id='background_style', ctx=Load()), attr='transparent_background', ctx=Load()), body=[Return(value=Tuple(elts=[Call(func=Attribute(value=Name(id='Style', ctx=Load()), attr='null', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='dim', value=Constant(value=True))]), Call(func=Attribute(value=Name(id='Style', ctx=Load()), attr='null', ctx=Load()), args=[], keywords=[])], ctx=Load()))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='console', ctx=Load()), attr='color_system', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='256'), Constant(value='truecolor')], ctx=Load())]), body=[Assign(targets=[Name(id='number_style', ctx=Store())], value=Call(func=Attribute(value=Name(id='Style', ctx=Load()), attr='chain', ctx=Load()), args=[Name(id='background_style', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_theme', ctx=Load()), attr='get_style_for_token', ctx=Load()), args=[Attribute(value=Name(id='Token', ctx=Load()), attr='Text', ctx=Load())], keywords=[]), Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='color', value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_line_numbers_color', ctx=Load()), args=[], keywords=[]))]), Attribute(value=Name(id='self', ctx=Load()), attr='background_style', ctx=Load())], keywords=[])), Assign(targets=[Name(id='highlight_number_style', ctx=Store())], value=Call(func=Attribute(value=Name(id='Style', ctx=Load()), attr='chain', ctx=Load()), args=[Name(id='background_style', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_theme', ctx=Load()), attr='get_style_for_token', ctx=Load()), args=[Attribute(value=Name(id='Token', ctx=Load()), attr='Text', ctx=Load())], keywords=[]), Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='bold', value=Constant(value=True)), keyword(arg='color', value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_line_numbers_color', ctx=Load()), args=[Constant(value=0.9)], keywords=[]))]), Attribute(value=Name(id='self', ctx=Load()), attr='background_style', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='number_style', ctx=Store())], value=BinOp(left=Name(id='background_style', ctx=Load()), op=Add(), right=Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='dim', value=Constant(value=True))]))), Assign(targets=[Name(id='highlight_number_style', ctx=Store())], value=BinOp(left=Name(id='background_style', ctx=Load()), op=Add(), right=Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='dim', value=Constant(value=False))])))]), Return(value=Tuple(elts=[Name(id='background_style', ctx=Load()), Name(id='number_style', ctx=Load()), Name(id='highlight_number_style', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='Style', ctx=Load()), Name(id='Style', ctx=Load()), Name(id='Style', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='__rich_measure__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='console', annotation=Constant(value='Console')), arg(arg='options', annotation=Constant(value='ConsoleOptions'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='right', ctx=Store()), Name(id='_', ctx=Store()), Name(id='left', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='Padding', ctx=Load()), attr='unpack', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='padding', ctx=Load())], keywords=[])), Assign(targets=[Name(id='padding', ctx=Store())], value=BinOp(left=Name(id='left', ctx=Load()), op=Add(), right=Name(id='right', ctx=Load()))), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='code_width', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='width', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='code_width', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_numbers_column_width', ctx=Load())), op=Add(), right=Name(id='padding', ctx=Load())), op=Add(), right=Constant(value=1))), Return(value=Call(func=Name(id='Measurement', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_numbers_column_width', ctx=Load()), Name(id='width', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='lines', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='code', ctx=Load()), attr='splitlines', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='width', ctx=Store())], value=BinOp(left=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_numbers_column_width', ctx=Load()), op=Add(), right=Name(id='padding', ctx=Load())), op=Add(), right=IfExp(test=Name(id='lines', ctx=Load()), body=Call(func=Name(id='max', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='cell_len', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='line', ctx=Store()), iter=Name(id='lines', ctx=Load()), ifs=[], is_async=0)])], keywords=[]), orelse=Constant(value=0)))), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='line_numbers', ctx=Load()), body=[AugAssign(target=Name(id='width', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Return(value=Call(func=Name(id='Measurement', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_numbers_column_width', ctx=Load()), Name(id='width', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value='Measurement')), FunctionDef(name='__rich_console__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='console', annotation=Name(id='Console', ctx=Load())), arg(arg='options', annotation=Name(id='ConsoleOptions', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='segments', ctx=Store())], value=Call(func=Name(id='Segments', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_syntax', ctx=Load()), args=[Name(id='console', ctx=Load()), Name(id='options', ctx=Load())], keywords=[])], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='padding', ctx=Load()), body=[Expr(value=Yield(value=Call(func=Name(id='Padding', ctx=Load()), args=[Name(id='segments', ctx=Load())], keywords=[keyword(arg='style', value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_theme', ctx=Load()), attr='get_background_style', ctx=Load()), args=[], keywords=[])), keyword(arg='pad', value=Attribute(value=Name(id='self', ctx=Load()), attr='padding', ctx=Load()))])))], orelse=[Expr(value=Yield(value=Name(id='segments', ctx=Load())))])], decorator_list=[], returns=Name(id='RenderResult', ctx=Load())), FunctionDef(name='_get_syntax', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='console', annotation=Name(id='Console', ctx=Load())), arg(arg='options', annotation=Name(id='ConsoleOptions', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Get the Segments for the Syntax object, excluding any vertical/horizontal padding\n        ')), Assign(targets=[Name(id='transparent_background', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_base_style', ctx=Load()), args=[], keywords=[]), attr='transparent_background', ctx=Load())), Assign(targets=[Name(id='code_width', ctx=Store())], value=IfExp(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='code_width', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=IfExp(test=Attribute(value=Name(id='self', ctx=Load()), attr='line_numbers', ctx=Load()), body=BinOp(left=BinOp(left=Attribute(value=Name(id='options', ctx=Load()), attr='max_width', ctx=Load()), op=Sub(), right=Attribute(value=Name(id='self', ctx=Load()), attr='_numbers_column_width', ctx=Load())), op=Sub(), right=Constant(value=1)), orelse=Attribute(value=Name(id='options', ctx=Load()), attr='max_width', ctx=Load())), orelse=Attribute(value=Name(id='self', ctx=Load()), attr='code_width', ctx=Load()))), Assign(targets=[Tuple(elts=[Name(id='ends_on_nl', ctx=Store()), Name(id='processed_code', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_process_code', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='code', ctx=Load())], keywords=[])), Assign(targets=[Name(id='text', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='highlight', ctx=Load()), args=[Name(id='processed_code', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='line_range', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='line_numbers', ctx=Load())), UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='word_wrap', ctx=Load())), UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='line_range', ctx=Load()))]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='ends_on_nl', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='text', ctx=Load()), attr='remove_suffix', ctx=Load()), args=[Constant(value='\n')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='style', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_base_style', ctx=Load()), args=[], keywords=[]), op=Add(), right=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_theme', ctx=Load()), attr='get_style_for_token', ctx=Load()), args=[Name(id='Comment', ctx=Load())], keywords=[])), op=Add(), right=Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='dim', value=Constant(value=True))])), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='background_style', ctx=Load()))), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='indent_guides', ctx=Load()), UnaryOp(op=Not(), operand=Attribute(value=Name(id='options', ctx=Load()), attr='ascii_only', ctx=Load()))]), body=[Assign(targets=[Name(id='text', ctx=Store())], value=Call(func=Attribute(value=Name(id='text', ctx=Load()), attr='with_indent_guides', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='tab_size', ctx=Load())], keywords=[keyword(arg='style', value=Name(id='style', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='text', ctx=Load()), attr='overflow', ctx=Store())], value=Constant(value='crop'))], orelse=[]), If(test=Attribute(value=Name(id='style', ctx=Load()), attr='transparent_background', ctx=Load()), body=[Expr(value=YieldFrom(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='render', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[keyword(arg='options', value=Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='update', ctx=Load()), args=[], keywords=[keyword(arg='width', value=Name(id='code_width', ctx=Load()))]))])))], orelse=[Assign(targets=[Name(id='syntax_lines', ctx=Store())], value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='render_lines', ctx=Load()), args=[Name(id='text', ctx=Load()), Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='update', ctx=Load()), args=[], keywords=[keyword(arg='width', value=Name(id='code_width', ctx=Load())), keyword(arg='height', value=Constant(value=None)), keyword(arg='justify', value=Constant(value='left'))])], keywords=[keyword(arg='style', value=Attribute(value=Name(id='self', ctx=Load()), attr='background_style', ctx=Load())), keyword(arg='pad', value=Constant(value=True)), keyword(arg='new_lines', value=Constant(value=True))])), For(target=Name(id='syntax_line', ctx=Store()), iter=Name(id='syntax_lines', ctx=Load()), body=[Expr(value=YieldFrom(value=Name(id='syntax_line', ctx=Load())))], orelse=[])]), Return()], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='start_line', ctx=Store()), Name(id='end_line', ctx=Store())], ctx=Store())], value=BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='line_range', ctx=Load()), Tuple(elts=[Constant(value=None), Constant(value=None)], ctx=Load())])), Assign(targets=[Name(id='line_offset', ctx=Store())], value=Constant(value=0)), If(test=Name(id='start_line', ctx=Load()), body=[Assign(targets=[Name(id='line_offset', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Constant(value=0), BinOp(left=Name(id='start_line', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]))], orelse=[]), AnnAssign(target=Name(id='lines', ctx=Store()), annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Text', ctx=Load()), ctx=Load()), Name(id='Lines', ctx=Load())], ctx=Load()), ctx=Load()), value=Call(func=Attribute(value=Name(id='text', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='\n')], keywords=[keyword(arg='allow_blank', value=Name(id='ends_on_nl', ctx=Load()))]), simple=1), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='line_range', ctx=Load()), body=[If(test=Compare(left=Name(id='line_offset', ctx=Load()), ops=[Gt()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='lines', ctx=Load())], keywords=[])]), body=[Return()], orelse=[]), Assign(targets=[Name(id='lines', ctx=Store())], value=Subscript(value=Name(id='lines', ctx=Load()), slice=Slice(lower=Name(id='line_offset', ctx=Load()), upper=Name(id='end_line', ctx=Load())), ctx=Load()))], orelse=[]), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='indent_guides', ctx=Load()), UnaryOp(op=Not(), operand=Attribute(value=Name(id='options', ctx=Load()), attr='ascii_only', ctx=Load()))]), body=[Assign(targets=[Name(id='style', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_base_style', ctx=Load()), args=[], keywords=[]), op=Add(), right=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_theme', ctx=Load()), attr='get_style_for_token', ctx=Load()), args=[Name(id='Comment', ctx=Load())], keywords=[])), op=Add(), right=Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='dim', value=Constant(value=True))])), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='background_style', ctx=Load()))), Assign(targets=[Name(id='lines', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Name(id='Text', ctx=Load()), args=[Constant(value='\n')], keywords=[]), attr='join', ctx=Load()), args=[Name(id='lines', ctx=Load())], keywords=[]), attr='with_indent_guides', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='tab_size', ctx=Load())], keywords=[keyword(arg='style', value=BinOp(left=Name(id='style', ctx=Load()), op=Add(), right=Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='italic', value=Constant(value=False))])))]), attr='split', ctx=Load()), args=[Constant(value='\n')], keywords=[keyword(arg='allow_blank', value=Constant(value=True))]))], orelse=[]), Assign(targets=[Name(id='numbers_column_width', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_numbers_column_width', ctx=Load())), Assign(targets=[Name(id='render_options', ctx=Store())], value=Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='update', ctx=Load()), args=[], keywords=[keyword(arg='width', value=Name(id='code_width', ctx=Load()))])), Assign(targets=[Name(id='highlight_line', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='highlight_lines', ctx=Load()), attr='__contains__', ctx=Load())), Assign(targets=[Name(id='_Segment', ctx=Store())], value=Name(id='Segment', ctx=Load())), Assign(targets=[Name(id='new_line', ctx=Store())], value=Call(func=Name(id='_Segment', ctx=Load()), args=[Constant(value='\n')], keywords=[])), Assign(targets=[Name(id='line_pointer', ctx=Store())], value=IfExp(test=Attribute(value=Name(id='options', ctx=Load()), attr='legacy_windows', ctx=Load()), body=Constant(value='> '), orelse=Constant(value='❱ '))), Assign(targets=[Tuple(elts=[Name(id='background_style', ctx=Store()), Name(id='number_style', ctx=Store()), Name(id='highlight_number_style', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_number_styles', ctx=Load()), args=[Name(id='console', ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='line_no', ctx=Store()), Name(id='line', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='lines', ctx=Load()), BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='start_line', ctx=Load()), op=Add(), right=Name(id='line_offset', ctx=Load()))], keywords=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='word_wrap', ctx=Load()), body=[Assign(targets=[Name(id='wrapped_lines', ctx=Store())], value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='render_lines', ctx=Load()), args=[Name(id='line', ctx=Load()), Call(func=Attribute(value=Name(id='render_options', ctx=Load()), attr='update', ctx=Load()), args=[], keywords=[keyword(arg='height', value=Constant(value=None)), keyword(arg='justify', value=Constant(value='left'))])], keywords=[keyword(arg='style', value=Name(id='background_style', ctx=Load())), keyword(arg='pad', value=UnaryOp(op=Not(), operand=Name(id='transparent_background', ctx=Load())))]))], orelse=[Assign(targets=[Name(id='segments', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='render', ctx=Load()), args=[Name(id='console', ctx=Load())], keywords=[keyword(arg='end', value=Constant(value=''))])], keywords=[])), If(test=Attribute(value=Name(id='options', ctx=Load()), attr='no_wrap', ctx=Load()), body=[Assign(targets=[Name(id='wrapped_lines', ctx=Store())], value=List(elts=[Name(id='segments', ctx=Load())], ctx=Load()))], orelse=[Assign(targets=[Name(id='wrapped_lines', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='_Segment', ctx=Load()), attr='adjust_line_length', ctx=Load()), args=[Name(id='segments', ctx=Load()), Attribute(value=Name(id='render_options', ctx=Load()), attr='max_width', ctx=Load())], keywords=[keyword(arg='style', value=Name(id='background_style', ctx=Load())), keyword(arg='pad', value=UnaryOp(op=Not(), operand=Name(id='transparent_background', ctx=Load())))])], ctx=Load()))])]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='line_numbers', ctx=Load()), body=[Assign(targets=[Name(id='wrapped_line_left_pad', ctx=Store())], value=Call(func=Name(id='_Segment', ctx=Load()), args=[BinOp(left=BinOp(left=Constant(value=' '), op=Mult(), right=Name(id='numbers_column_width', ctx=Load())), op=Add(), right=Constant(value=' ')), Name(id='background_style', ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='first', ctx=Store()), Name(id='wrapped_line', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='loop_first', ctx=Load()), args=[Name(id='wrapped_lines', ctx=Load())], keywords=[]), body=[If(test=Name(id='first', ctx=Load()), body=[Assign(targets=[Name(id='line_column', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='line_no', ctx=Load())], keywords=[]), attr='rjust', ctx=Load()), args=[BinOp(left=Name(id='numbers_column_width', ctx=Load()), op=Sub(), right=Constant(value=2))], keywords=[]), op=Add(), right=Constant(value=' '))), If(test=Call(func=Name(id='highlight_line', ctx=Load()), args=[Name(id='line_no', ctx=Load())], keywords=[]), body=[Expr(value=Yield(value=Call(func=Name(id='_Segment', ctx=Load()), args=[Name(id='line_pointer', ctx=Load()), Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='color', value=Constant(value='red'))])], keywords=[]))), Expr(value=Yield(value=Call(func=Name(id='_Segment', ctx=Load()), args=[Name(id='line_column', ctx=Load()), Name(id='highlight_number_style', ctx=Load())], keywords=[])))], orelse=[Expr(value=Yield(value=Call(func=Name(id='_Segment', ctx=Load()), args=[Constant(value='  '), Name(id='highlight_number_style', ctx=Load())], keywords=[]))), Expr(value=Yield(value=Call(func=Name(id='_Segment', ctx=Load()), args=[Name(id='line_column', ctx=Load()), Name(id='number_style', ctx=Load())], keywords=[])))])], orelse=[Expr(value=Yield(value=Name(id='wrapped_line_left_pad', ctx=Load())))]), Expr(value=YieldFrom(value=Name(id='wrapped_line', ctx=Load()))), Expr(value=Yield(value=Name(id='new_line', ctx=Load())))], orelse=[])], orelse=[For(target=Name(id='wrapped_line', ctx=Store()), iter=Name(id='wrapped_lines', ctx=Load()), body=[Expr(value=YieldFrom(value=Name(id='wrapped_line', ctx=Load()))), Expr(value=Yield(value=Name(id='new_line', ctx=Load())))], orelse=[])])], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='Segment', ctx=Load()), ctx=Load())), FunctionDef(name='_apply_stylized_ranges', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='text', annotation=Name(id='Text', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Apply stylized ranges to a text instance,\n        using the given code to determine the right portion to apply the style to.\n\n        Args:\n            text (Text): Text instance to apply the style to.\n        ')), Assign(targets=[Name(id='code', ctx=Store())], value=Attribute(value=Name(id='text', ctx=Load()), attr='plain', ctx=Load())), Assign(targets=[Name(id='newlines_offsets', ctx=Store())], value=List(elts=[Constant(value=0), Starred(value=ListComp(elt=BinOp(left=Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='start', ctx=Load()), args=[], keywords=[]), op=Add(), right=Constant(value=1)), generators=[comprehension(target=Name(id='match', ctx=Store()), iter=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='finditer', ctx=Load()), args=[Constant(value='\n'), Name(id='code', ctx=Load())], keywords=[keyword(arg='flags', value=Attribute(value=Name(id='re', ctx=Load()), attr='MULTILINE', ctx=Load()))]), ifs=[], is_async=0)]), ctx=Load()), BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='code', ctx=Load())], keywords=[]), op=Add(), right=Constant(value=1))], ctx=Load())), For(target=Name(id='stylized_range', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_stylized_ranges', ctx=Load()), body=[Assign(targets=[Name(id='start', ctx=Store())], value=Call(func=Name(id='_get_code_index_for_syntax_position', ctx=Load()), args=[Name(id='newlines_offsets', ctx=Load()), Attribute(value=Name(id='stylized_range', ctx=Load()), attr='start', ctx=Load())], keywords=[])), Assign(targets=[Name(id='end', ctx=Store())], value=Call(func=Name(id='_get_code_index_for_syntax_position', ctx=Load()), args=[Name(id='newlines_offsets', ctx=Load()), Attribute(value=Name(id='stylized_range', ctx=Load()), attr='end', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='start', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='end', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Expr(value=Call(func=Attribute(value=Name(id='text', ctx=Load()), attr='stylize', ctx=Load()), args=[Attribute(value=Name(id='stylized_range', ctx=Load()), attr='style', ctx=Load()), Name(id='start', ctx=Load()), Name(id='end', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_process_code', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='code', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Applies various processing to a raw code string\n        (normalises it so it always ends with a line return, dedents it if necessary, etc.)\n\n        Args:\n            code (str): The raw code string to process\n\n        Returns:\n            Tuple[bool, str]: the boolean indicates whether the raw code ends with a line return,\n                while the string is the processed code.\n        ')), Assign(targets=[Name(id='ends_on_nl', ctx=Store())], value=Call(func=Attribute(value=Name(id='code', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='\n')], keywords=[])), Assign(targets=[Name(id='processed_code', ctx=Store())], value=IfExp(test=Name(id='ends_on_nl', ctx=Load()), body=Name(id='code', ctx=Load()), orelse=BinOp(left=Name(id='code', ctx=Load()), op=Add(), right=Constant(value='\n')))), Assign(targets=[Name(id='processed_code', ctx=Store())], value=IfExp(test=Attribute(value=Name(id='self', ctx=Load()), attr='dedent', ctx=Load()), body=Call(func=Attribute(value=Name(id='textwrap', ctx=Load()), attr='dedent', ctx=Load()), args=[Name(id='processed_code', ctx=Load())], keywords=[]), orelse=Name(id='processed_code', ctx=Load()))), Assign(targets=[Name(id='processed_code', ctx=Store())], value=Call(func=Attribute(value=Name(id='processed_code', ctx=Load()), attr='expandtabs', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='tab_size', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Name(id='ends_on_nl', ctx=Load()), Name(id='processed_code', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='bool', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()))], decorator_list=[]), FunctionDef(name='_get_code_index_for_syntax_position', args=arguments(posonlyargs=[], args=[arg(arg='newlines_offsets', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='position', annotation=Name(id='SyntaxPosition', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    Returns the index of the code string for the given positions.\n\n    Args:\n        newlines_offsets (Sequence[int]): The offset of each newline character found in the code snippet.\n        position (SyntaxPosition): The position to search for.\n\n    Returns:\n        Optional[int]: The index of the code string for this position, or `None`\n            if the given position's line number is out of range (if it's the column that is out of range\n            we silently clamp its value so that it reaches the end of the line)\n    ")), Assign(targets=[Name(id='lines_count', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='newlines_offsets', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='line_number', ctx=Store()), Name(id='column_index', ctx=Store())], ctx=Store())], value=Name(id='position', ctx=Load())), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='line_number', ctx=Load()), ops=[Gt()], comparators=[Name(id='lines_count', ctx=Load())]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='newlines_offsets', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[BinOp(left=Name(id='line_number', ctx=Load()), op=Add(), right=Constant(value=1))])]), body=[Return(value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='line_index', ctx=Store())], value=BinOp(left=Name(id='line_number', ctx=Load()), op=Sub(), right=Constant(value=1))), Assign(targets=[Name(id='line_length', ctx=Store())], value=BinOp(left=BinOp(left=Subscript(value=Name(id='newlines_offsets', ctx=Load()), slice=BinOp(left=Name(id='line_index', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load()), op=Sub(), right=Subscript(value=Name(id='newlines_offsets', ctx=Load()), slice=Name(id='line_index', ctx=Load()), ctx=Load())), op=Sub(), right=Constant(value=1))), Assign(targets=[Name(id='column_index', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[Name(id='line_length', ctx=Load()), Name(id='column_index', ctx=Load())], keywords=[])), Return(value=BinOp(left=Subscript(value=Name(id='newlines_offsets', ctx=Load()), slice=Name(id='line_index', ctx=Load()), ctx=Load()), op=Add(), right=Name(id='column_index', ctx=Load())))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__')]), body=[Import(names=[alias(name='argparse')]), Import(names=[alias(name='sys')]), Assign(targets=[Name(id='parser', ctx=Store())], value=Call(func=Attribute(value=Name(id='argparse', ctx=Load()), attr='ArgumentParser', ctx=Load()), args=[], keywords=[keyword(arg='description', value=Constant(value='Render syntax to the console with Rich'))])), Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='add_argument', ctx=Load()), args=[Constant(value='path')], keywords=[keyword(arg='metavar', value=Constant(value='PATH')), keyword(arg='help', value=Constant(value='path to file, or - for stdin'))])), Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='add_argument', ctx=Load()), args=[Constant(value='-c'), Constant(value='--force-color')], keywords=[keyword(arg='dest', value=Constant(value='force_color')), keyword(arg='action', value=Constant(value='store_true')), keyword(arg='default', value=Constant(value=None)), keyword(arg='help', value=Constant(value='force color for non-terminals'))])), Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='add_argument', ctx=Load()), args=[Constant(value='-i'), Constant(value='--indent-guides')], keywords=[keyword(arg='dest', value=Constant(value='indent_guides')), keyword(arg='action', value=Constant(value='store_true')), keyword(arg='default', value=Constant(value=False)), keyword(arg='help', value=Constant(value='display indent guides'))])), Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='add_argument', ctx=Load()), args=[Constant(value='-l'), Constant(value='--line-numbers')], keywords=[keyword(arg='dest', value=Constant(value='line_numbers')), keyword(arg='action', value=Constant(value='store_true')), keyword(arg='help', value=Constant(value='render line numbers'))])), Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='add_argument', ctx=Load()), args=[Constant(value='-w'), Constant(value='--width')], keywords=[keyword(arg='type', value=Name(id='int', ctx=Load())), keyword(arg='dest', value=Constant(value='width')), keyword(arg='default', value=Constant(value=None)), keyword(arg='help', value=Constant(value='width of output (default will auto-detect)'))])), Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='add_argument', ctx=Load()), args=[Constant(value='-r'), Constant(value='--wrap')], keywords=[keyword(arg='dest', value=Constant(value='word_wrap')), keyword(arg='action', value=Constant(value='store_true')), keyword(arg='default', value=Constant(value=False)), keyword(arg='help', value=Constant(value='word wrap long lines'))])), Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='add_argument', ctx=Load()), args=[Constant(value='-s'), Constant(value='--soft-wrap')], keywords=[keyword(arg='action', value=Constant(value='store_true')), keyword(arg='dest', value=Constant(value='soft_wrap')), keyword(arg='default', value=Constant(value=False)), keyword(arg='help', value=Constant(value='enable soft wrapping mode'))])), Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='add_argument', ctx=Load()), args=[Constant(value='-t'), Constant(value='--theme')], keywords=[keyword(arg='dest', value=Constant(value='theme')), keyword(arg='default', value=Constant(value='monokai')), keyword(arg='help', value=Constant(value='pygments theme'))])), Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='add_argument', ctx=Load()), args=[Constant(value='-b'), Constant(value='--background-color')], keywords=[keyword(arg='dest', value=Constant(value='background_color')), keyword(arg='default', value=Constant(value=None)), keyword(arg='help', value=Constant(value='Override background color'))])), Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='add_argument', ctx=Load()), args=[Constant(value='-x'), Constant(value='--lexer')], keywords=[keyword(arg='default', value=Constant(value=None)), keyword(arg='dest', value=Constant(value='lexer_name')), keyword(arg='help', value=Constant(value='Lexer name'))])), Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='add_argument', ctx=Load()), args=[Constant(value='-p'), Constant(value='--padding')], keywords=[keyword(arg='type', value=Name(id='int', ctx=Load())), keyword(arg='default', value=Constant(value=0)), keyword(arg='dest', value=Constant(value='padding')), keyword(arg='help', value=Constant(value='Padding'))])), Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='add_argument', ctx=Load()), args=[Constant(value='--highlight-line')], keywords=[keyword(arg='type', value=Name(id='int', ctx=Load())), keyword(arg='default', value=Constant(value=None)), keyword(arg='dest', value=Constant(value='highlight_line')), keyword(arg='help', value=Constant(value='The line number (not index!) to highlight'))])), Assign(targets=[Name(id='args', ctx=Store())], value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='parse_args', ctx=Load()), args=[], keywords=[])), ImportFrom(module='pip._vendor.rich.console', names=[alias(name='Console')], level=0), Assign(targets=[Name(id='console', ctx=Store())], value=Call(func=Name(id='Console', ctx=Load()), args=[], keywords=[keyword(arg='force_terminal', value=Attribute(value=Name(id='args', ctx=Load()), attr='force_color', ctx=Load())), keyword(arg='width', value=Attribute(value=Name(id='args', ctx=Load()), attr='width', ctx=Load()))])), If(test=Compare(left=Attribute(value=Name(id='args', ctx=Load()), attr='path', ctx=Load()), ops=[Eq()], comparators=[Constant(value='-')]), body=[Assign(targets=[Name(id='code', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stdin', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='syntax', ctx=Store())], value=Call(func=Name(id='Syntax', ctx=Load()), args=[], keywords=[keyword(arg='code', value=Name(id='code', ctx=Load())), keyword(arg='lexer', value=Attribute(value=Name(id='args', ctx=Load()), attr='lexer_name', ctx=Load())), keyword(arg='line_numbers', value=Attribute(value=Name(id='args', ctx=Load()), attr='line_numbers', ctx=Load())), keyword(arg='word_wrap', value=Attribute(value=Name(id='args', ctx=Load()), attr='word_wrap', ctx=Load())), keyword(arg='theme', value=Attribute(value=Name(id='args', ctx=Load()), attr='theme', ctx=Load())), keyword(arg='background_color', value=Attribute(value=Name(id='args', ctx=Load()), attr='background_color', ctx=Load())), keyword(arg='indent_guides', value=Attribute(value=Name(id='args', ctx=Load()), attr='indent_guides', ctx=Load())), keyword(arg='padding', value=Attribute(value=Name(id='args', ctx=Load()), attr='padding', ctx=Load())), keyword(arg='highlight_lines', value=Set(elts=[Attribute(value=Name(id='args', ctx=Load()), attr='highlight_line', ctx=Load())]))]))], orelse=[Assign(targets=[Name(id='syntax', ctx=Store())], value=Call(func=Attribute(value=Name(id='Syntax', ctx=Load()), attr='from_path', ctx=Load()), args=[Attribute(value=Name(id='args', ctx=Load()), attr='path', ctx=Load())], keywords=[keyword(arg='lexer', value=Attribute(value=Name(id='args', ctx=Load()), attr='lexer_name', ctx=Load())), keyword(arg='line_numbers', value=Attribute(value=Name(id='args', ctx=Load()), attr='line_numbers', ctx=Load())), keyword(arg='word_wrap', value=Attribute(value=Name(id='args', ctx=Load()), attr='word_wrap', ctx=Load())), keyword(arg='theme', value=Attribute(value=Name(id='args', ctx=Load()), attr='theme', ctx=Load())), keyword(arg='background_color', value=Attribute(value=Name(id='args', ctx=Load()), attr='background_color', ctx=Load())), keyword(arg='indent_guides', value=Attribute(value=Name(id='args', ctx=Load()), attr='indent_guides', ctx=Load())), keyword(arg='padding', value=Attribute(value=Name(id='args', ctx=Load()), attr='padding', ctx=Load())), keyword(arg='highlight_lines', value=Set(elts=[Attribute(value=Name(id='args', ctx=Load()), attr='highlight_line', ctx=Load())]))]))]), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='print', ctx=Load()), args=[Name(id='syntax', ctx=Load())], keywords=[keyword(arg='soft_wrap', value=Attribute(value=Name(id='args', ctx=Load()), attr='soft_wrap', ctx=Load()))]))], orelse=[])], type_ignores=[])