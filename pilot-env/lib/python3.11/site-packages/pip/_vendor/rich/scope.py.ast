Module(body=[ImportFrom(module='collections.abc', names=[alias(name='Mapping')], level=0), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING'), alias(name='Any'), alias(name='Optional'), alias(name='Tuple')], level=0), ImportFrom(module='highlighter', names=[alias(name='ReprHighlighter')], level=1), ImportFrom(module='panel', names=[alias(name='Panel')], level=1), ImportFrom(module='pretty', names=[alias(name='Pretty')], level=1), ImportFrom(module='table', names=[alias(name='Table')], level=1), ImportFrom(module='text', names=[alias(name='Text'), alias(name='TextType')], level=1), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='console', names=[alias(name='ConsoleRenderable')], level=1)], orelse=[]), FunctionDef(name='render_scope', args=arguments(posonlyargs=[], args=[arg(arg='scope', annotation=Constant(value='Mapping[str, Any]'))], kwonlyargs=[arg(arg='title', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TextType', ctx=Load()), ctx=Load())), arg(arg='sort_keys', annotation=Name(id='bool', ctx=Load())), arg(arg='indent_guides', annotation=Name(id='bool', ctx=Load())), arg(arg='max_length', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='max_string', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()))], kw_defaults=[Constant(value=None), Constant(value=True), Constant(value=False), Constant(value=None), Constant(value=None)], defaults=[]), body=[Expr(value=Constant(value='Render python variables in a given scope.\n\n    Args:\n        scope (Mapping): A mapping containing variable names and values.\n        title (str, optional): Optional title. Defaults to None.\n        sort_keys (bool, optional): Enable sorting of items. Defaults to True.\n        indent_guides (bool, optional): Enable indentation guides. Defaults to False.\n        max_length (int, optional): Maximum length of containers before abbreviating, or None for no abbreviation.\n            Defaults to None.\n        max_string (int, optional): Maximum length of string before truncating, or None to disable. Defaults to None.\n\n    Returns:\n        ConsoleRenderable: A renderable object.\n    ')), Assign(targets=[Name(id='highlighter', ctx=Store())], value=Call(func=Name(id='ReprHighlighter', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='items_table', ctx=Store())], value=Call(func=Attribute(value=Name(id='Table', ctx=Load()), attr='grid', ctx=Load()), args=[], keywords=[keyword(arg='padding', value=Tuple(elts=[Constant(value=0), Constant(value=1)], ctx=Load())), keyword(arg='expand', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='items_table', ctx=Load()), attr='add_column', ctx=Load()), args=[], keywords=[keyword(arg='justify', value=Constant(value='right'))])), FunctionDef(name='sort_items', args=arguments(posonlyargs=[], args=[arg(arg='item', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Sort special variables first, then alphabetically.')), Assign(targets=[Tuple(elts=[Name(id='key', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Name(id='item', ctx=Load())), Return(value=Tuple(elts=[UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='key', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='__')], keywords=[])), Call(func=Attribute(value=Name(id='key', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='bool', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='items', ctx=Store())], value=IfExp(test=Name(id='sort_keys', ctx=Load()), body=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Attribute(value=Name(id='scope', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[keyword(arg='key', value=Name(id='sort_items', ctx=Load()))]), orelse=Call(func=Attribute(value=Name(id='scope', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]))), For(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Name(id='items', ctx=Load()), body=[Assign(targets=[Name(id='key_text', ctx=Store())], value=Call(func=Attribute(value=Name(id='Text', ctx=Load()), attr='assemble', ctx=Load()), args=[Tuple(elts=[Name(id='key', ctx=Load()), IfExp(test=Call(func=Attribute(value=Name(id='key', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='__')], keywords=[]), body=Constant(value='scope.key.special'), orelse=Constant(value='scope.key'))], ctx=Load()), Tuple(elts=[Constant(value=' ='), Constant(value='scope.equals')], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='items_table', ctx=Load()), attr='add_row', ctx=Load()), args=[Name(id='key_text', ctx=Load()), Call(func=Name(id='Pretty', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[keyword(arg='highlighter', value=Name(id='highlighter', ctx=Load())), keyword(arg='indent_guides', value=Name(id='indent_guides', ctx=Load())), keyword(arg='max_length', value=Name(id='max_length', ctx=Load())), keyword(arg='max_string', value=Name(id='max_string', ctx=Load()))])], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='Panel', ctx=Load()), attr='fit', ctx=Load()), args=[Name(id='items_table', ctx=Load())], keywords=[keyword(arg='title', value=Name(id='title', ctx=Load())), keyword(arg='border_style', value=Constant(value='scope.border')), keyword(arg='padding', value=Tuple(elts=[Constant(value=0), Constant(value=1)], ctx=Load()))]))], decorator_list=[], returns=Constant(value='ConsoleRenderable')), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__')]), body=[ImportFrom(module='pip._vendor.rich', names=[alias(name='print')], level=0), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[], keywords=[])), FunctionDef(name='test', args=arguments(posonlyargs=[], args=[arg(arg='foo', annotation=Name(id='float', ctx=Load())), arg(arg='bar', annotation=Name(id='float', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='list_of_things', ctx=Store())], value=List(elts=[Constant(value=1), Constant(value=2), Constant(value=3), Constant(value=None), Constant(value=4), Constant(value=True), Constant(value=False), Constant(value='Hello World')], ctx=Load())), Assign(targets=[Name(id='dict_of_things', ctx=Store())], value=Dict(keys=[Constant(value='version'), Constant(value='method'), Constant(value='params'), Constant(value='id')], values=[Constant(value='1.1'), Constant(value='confirmFruitPurchase'), List(elts=[List(elts=[Constant(value='apple'), Constant(value='orange'), Constant(value='mangoes'), Constant(value='pomelo')], ctx=Load()), Constant(value=1.123)], ctx=Load()), Constant(value='194521489')])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Name(id='render_scope', ctx=Load()), args=[Call(func=Name(id='locals', ctx=Load()), args=[], keywords=[])], keywords=[keyword(arg='title', value=Constant(value='[i]locals')), keyword(arg='sort_keys', value=Constant(value=False))])], keywords=[]))], decorator_list=[], returns=Constant(value=None)), Expr(value=Call(func=Name(id='test', ctx=Load()), args=[Constant(value=20.3423), Constant(value=3.1427)], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[], keywords=[]))], orelse=[])], type_ignores=[])