Module(body=[ImportFrom(module='collections', names=[alias(name='defaultdict')], level=0), ImportFrom(module='itertools', names=[alias(name='chain')], level=0), ImportFrom(module='operator', names=[alias(name='itemgetter')], level=0), ImportFrom(module='typing', names=[alias(name='Dict'), alias(name='Iterable'), alias(name='List'), alias(name='Optional'), alias(name='Tuple')], level=0), ImportFrom(module='align', names=[alias(name='Align'), alias(name='AlignMethod')], level=1), ImportFrom(module='console', names=[alias(name='Console'), alias(name='ConsoleOptions'), alias(name='RenderableType'), alias(name='RenderResult')], level=1), ImportFrom(module='constrain', names=[alias(name='Constrain')], level=1), ImportFrom(module='measure', names=[alias(name='Measurement')], level=1), ImportFrom(module='padding', names=[alias(name='Padding'), alias(name='PaddingDimensions')], level=1), ImportFrom(module='table', names=[alias(name='Table')], level=1), ImportFrom(module='text', names=[alias(name='TextType')], level=1), ImportFrom(module='jupyter', names=[alias(name='JupyterMixin')], level=1), ClassDef(name='Columns', bases=[Name(id='JupyterMixin', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Display renderables in neat columns.\n\n    Args:\n        renderables (Iterable[RenderableType]): Any number of Rich renderables (including str).\n        width (int, optional): The desired width of the columns, or None to auto detect. Defaults to None.\n        padding (PaddingDimensions, optional): Optional padding around cells. Defaults to (0, 1).\n        expand (bool, optional): Expand columns to full width. Defaults to False.\n        equal (bool, optional): Arrange in to equal sized columns. Defaults to False.\n        column_first (bool, optional): Align items from top to bottom (rather than left to right). Defaults to False.\n        right_to_left (bool, optional): Start column from right hand side. Defaults to False.\n        align (str, optional): Align value ("left", "right", or "center") or None for default. Defaults to None.\n        title (TextType, optional): Optional title for Columns.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='renderables', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='RenderableType', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='padding', annotation=Name(id='PaddingDimensions', ctx=Load()))], kwonlyargs=[arg(arg='width', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='expand', annotation=Name(id='bool', ctx=Load())), arg(arg='equal', annotation=Name(id='bool', ctx=Load())), arg(arg='column_first', annotation=Name(id='bool', ctx=Load())), arg(arg='right_to_left', annotation=Name(id='bool', ctx=Load())), arg(arg='align', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='AlignMethod', ctx=Load()), ctx=Load())), arg(arg='title', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TextType', ctx=Load()), ctx=Load()))], kw_defaults=[Constant(value=None), Constant(value=False), Constant(value=False), Constant(value=False), Constant(value=False), Constant(value=None), Constant(value=None)], defaults=[Constant(value=None), Tuple(elts=[Constant(value=0), Constant(value=1)], ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='renderables', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[BoolOp(op=Or(), values=[Name(id='renderables', ctx=Load()), List(elts=[], ctx=Load())])], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='width', ctx=Store())], value=Name(id='width', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='padding', ctx=Store())], value=Name(id='padding', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='expand', ctx=Store())], value=Name(id='expand', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='equal', ctx=Store())], value=Name(id='equal', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='column_first', ctx=Store())], value=Name(id='column_first', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='right_to_left', ctx=Store())], value=Name(id='right_to_left', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='align', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='AlignMethod', ctx=Load()), ctx=Load()), value=Name(id='align', ctx=Load()), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='title', ctx=Store())], value=Name(id='title', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='add_renderable', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='renderable', annotation=Name(id='RenderableType', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Add a renderable to the columns.\n\n        Args:\n            renderable (RenderableType): Any renderable object.\n        ')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='renderables', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='renderable', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__rich_console__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='console', annotation=Name(id='Console', ctx=Load())), arg(arg='options', annotation=Name(id='ConsoleOptions', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='render_str', ctx=Store())], value=Attribute(value=Name(id='console', ctx=Load()), attr='render_str', ctx=Load())), Assign(targets=[Name(id='renderables', ctx=Store())], value=ListComp(elt=IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='renderable', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=Call(func=Name(id='render_str', ctx=Load()), args=[Name(id='renderable', ctx=Load())], keywords=[]), orelse=Name(id='renderable', ctx=Load())), generators=[comprehension(target=Name(id='renderable', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='renderables', ctx=Load()), ifs=[], is_async=0)])), If(test=UnaryOp(op=Not(), operand=Name(id='renderables', ctx=Load())), body=[Return()], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='_top', ctx=Store()), Name(id='right', ctx=Store()), Name(id='_bottom', ctx=Store()), Name(id='left', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='Padding', ctx=Load()), attr='unpack', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='padding', ctx=Load())], keywords=[])), Assign(targets=[Name(id='width_padding', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Name(id='left', ctx=Load()), Name(id='right', ctx=Load())], keywords=[])), Assign(targets=[Name(id='max_width', ctx=Store())], value=Attribute(value=Name(id='options', ctx=Load()), attr='max_width', ctx=Load())), AnnAssign(target=Name(id='widths', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()), value=Call(func=Name(id='defaultdict', ctx=Load()), args=[Name(id='int', ctx=Load())], keywords=[]), simple=1), Assign(targets=[Name(id='column_count', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='renderables', ctx=Load())], keywords=[])), Assign(targets=[Name(id='get_measurement', ctx=Store())], value=Attribute(value=Name(id='Measurement', ctx=Load()), attr='get', ctx=Load())), Assign(targets=[Name(id='renderable_widths', ctx=Store())], value=ListComp(elt=Attribute(value=Call(func=Name(id='get_measurement', ctx=Load()), args=[Name(id='console', ctx=Load()), Name(id='options', ctx=Load()), Name(id='renderable', ctx=Load())], keywords=[]), attr='maximum', ctx=Load()), generators=[comprehension(target=Name(id='renderable', ctx=Store()), iter=Name(id='renderables', ctx=Load()), ifs=[], is_async=0)])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='equal', ctx=Load()), body=[Assign(targets=[Name(id='renderable_widths', ctx=Store())], value=BinOp(left=List(elts=[Call(func=Name(id='max', ctx=Load()), args=[Name(id='renderable_widths', ctx=Load())], keywords=[])], ctx=Load()), op=Mult(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='renderable_widths', ctx=Load())], keywords=[])))], orelse=[]), FunctionDef(name='iter_renderables', args=arguments(posonlyargs=[], args=[arg(arg='column_count', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='item_count', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='renderables', ctx=Load())], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='column_first', ctx=Load()), body=[Assign(targets=[Name(id='width_renderables', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='zip', ctx=Load()), args=[Name(id='renderable_widths', ctx=Load()), Name(id='renderables', ctx=Load())], keywords=[])], keywords=[])), AnnAssign(target=Name(id='column_lengths', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()), value=BinOp(left=List(elts=[BinOp(left=Name(id='item_count', ctx=Load()), op=FloorDiv(), right=Name(id='column_count', ctx=Load()))], ctx=Load()), op=Mult(), right=Name(id='column_count', ctx=Load())), simple=1), For(target=Name(id='col_no', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[BinOp(left=Name(id='item_count', ctx=Load()), op=Mod(), right=Name(id='column_count', ctx=Load()))], keywords=[]), body=[AugAssign(target=Subscript(value=Name(id='column_lengths', ctx=Load()), slice=Name(id='col_no', ctx=Load()), ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[]), Assign(targets=[Name(id='row_count', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=Name(id='item_count', ctx=Load()), op=Add(), right=Name(id='column_count', ctx=Load())), op=Sub(), right=Constant(value=1)), op=FloorDiv(), right=Name(id='column_count', ctx=Load()))), Assign(targets=[Name(id='cells', ctx=Store())], value=ListComp(elt=BinOp(left=List(elts=[UnaryOp(op=USub(), operand=Constant(value=1))], ctx=Load()), op=Mult(), right=Name(id='column_count', ctx=Load())), generators=[comprehension(target=Name(id='_', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='row_count', ctx=Load())], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='row', ctx=Store()), Name(id='col', ctx=Store())], value=Constant(value=0)), For(target=Name(id='index', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='item_count', ctx=Load())], keywords=[]), body=[Assign(targets=[Subscript(value=Subscript(value=Name(id='cells', ctx=Load()), slice=Name(id='row', ctx=Load()), ctx=Load()), slice=Name(id='col', ctx=Load()), ctx=Store())], value=Name(id='index', ctx=Load())), AugAssign(target=Subscript(value=Name(id='column_lengths', ctx=Load()), slice=Name(id='col', ctx=Load()), ctx=Store()), op=Sub(), value=Constant(value=1)), If(test=Subscript(value=Name(id='column_lengths', ctx=Load()), slice=Name(id='col', ctx=Load()), ctx=Load()), body=[AugAssign(target=Name(id='row', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[AugAssign(target=Name(id='col', ctx=Store()), op=Add(), value=Constant(value=1)), Assign(targets=[Name(id='row', ctx=Store())], value=Constant(value=0))])], orelse=[]), For(target=Name(id='index', ctx=Store()), iter=Call(func=Attribute(value=Name(id='chain', ctx=Load()), attr='from_iterable', ctx=Load()), args=[Name(id='cells', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='index', ctx=Load()), ops=[Eq()], comparators=[UnaryOp(op=USub(), operand=Constant(value=1))]), body=[Break()], orelse=[]), Expr(value=Yield(value=Subscript(value=Name(id='width_renderables', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load())))], orelse=[])], orelse=[Expr(value=YieldFrom(value=Call(func=Name(id='zip', ctx=Load()), args=[Name(id='renderable_widths', ctx=Load()), Name(id='renderables', ctx=Load())], keywords=[])))]), If(test=BinOp(left=Name(id='item_count', ctx=Load()), op=Mod(), right=Name(id='column_count', ctx=Load())), body=[For(target=Name(id='_', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[BinOp(left=Name(id='column_count', ctx=Load()), op=Sub(), right=BinOp(left=Name(id='item_count', ctx=Load()), op=Mod(), right=Name(id='column_count', ctx=Load())))], keywords=[]), body=[Expr(value=Yield(value=Tuple(elts=[Constant(value=0), Constant(value=None)], ctx=Load())))], orelse=[])], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='RenderableType', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), Assign(targets=[Name(id='table', ctx=Store())], value=Call(func=Attribute(value=Name(id='Table', ctx=Load()), attr='grid', ctx=Load()), args=[], keywords=[keyword(arg='padding', value=Attribute(value=Name(id='self', ctx=Load()), attr='padding', ctx=Load())), keyword(arg='collapse_padding', value=Constant(value=True)), keyword(arg='pad_edge', value=Constant(value=False))])), Assign(targets=[Attribute(value=Name(id='table', ctx=Load()), attr='expand', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='expand', ctx=Load())), Assign(targets=[Attribute(value=Name(id='table', ctx=Load()), attr='title', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='title', ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='width', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='column_count', ctx=Store())], value=BinOp(left=Name(id='max_width', ctx=Load()), op=FloorDiv(), right=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='width', ctx=Load()), op=Add(), right=Name(id='width_padding', ctx=Load())))), For(target=Name(id='_', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='column_count', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='table', ctx=Load()), attr='add_column', ctx=Load()), args=[], keywords=[keyword(arg='width', value=Attribute(value=Name(id='self', ctx=Load()), attr='width', ctx=Load()))]))], orelse=[])], orelse=[While(test=Compare(left=Name(id='column_count', ctx=Load()), ops=[Gt()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Attribute(value=Name(id='widths', ctx=Load()), attr='clear', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='column_no', ctx=Store())], value=Constant(value=0)), For(target=Tuple(elts=[Name(id='renderable_width', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='iter_renderables', ctx=Load()), args=[Name(id='column_count', ctx=Load())], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='widths', ctx=Load()), slice=Name(id='column_no', ctx=Load()), ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Subscript(value=Name(id='widths', ctx=Load()), slice=Name(id='column_no', ctx=Load()), ctx=Load()), Name(id='renderable_width', ctx=Load())], keywords=[])), Assign(targets=[Name(id='total_width', ctx=Store())], value=BinOp(left=Call(func=Name(id='sum', ctx=Load()), args=[Call(func=Attribute(value=Name(id='widths', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]), op=Add(), right=BinOp(left=Name(id='width_padding', ctx=Load()), op=Mult(), right=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='widths', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))))), If(test=Compare(left=Name(id='total_width', ctx=Load()), ops=[Gt()], comparators=[Name(id='max_width', ctx=Load())]), body=[Assign(targets=[Name(id='column_count', ctx=Store())], value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='widths', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))), Break()], orelse=[Assign(targets=[Name(id='column_no', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='column_no', ctx=Load()), op=Add(), right=Constant(value=1)), op=Mod(), right=Name(id='column_count', ctx=Load())))])], orelse=[Break()])], orelse=[])]), Assign(targets=[Name(id='get_renderable', ctx=Store())], value=Call(func=Name(id='itemgetter', ctx=Load()), args=[Constant(value=1)], keywords=[])), Assign(targets=[Name(id='_renderables', ctx=Store())], value=ListComp(elt=Call(func=Name(id='get_renderable', ctx=Load()), args=[Name(id='_renderable', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='_renderable', ctx=Store()), iter=Call(func=Name(id='iter_renderables', ctx=Load()), args=[Name(id='column_count', ctx=Load())], keywords=[]), ifs=[], is_async=0)])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='equal', ctx=Load()), body=[Assign(targets=[Name(id='_renderables', ctx=Store())], value=ListComp(elt=IfExp(test=Compare(left=Name(id='renderable', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Constant(value=None), orelse=Call(func=Name(id='Constrain', ctx=Load()), args=[Name(id='renderable', ctx=Load()), Subscript(value=Name(id='renderable_widths', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])), generators=[comprehension(target=Name(id='renderable', ctx=Store()), iter=Name(id='_renderables', ctx=Load()), ifs=[], is_async=0)]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='align', ctx=Load()), body=[Assign(targets=[Name(id='align', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='align', ctx=Load())), Assign(targets=[Name(id='_Align', ctx=Store())], value=Name(id='Align', ctx=Load())), Assign(targets=[Name(id='_renderables', ctx=Store())], value=ListComp(elt=IfExp(test=Compare(left=Name(id='renderable', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Constant(value=None), orelse=Call(func=Name(id='_Align', ctx=Load()), args=[Name(id='renderable', ctx=Load()), Name(id='align', ctx=Load())], keywords=[])), generators=[comprehension(target=Name(id='renderable', ctx=Store()), iter=Name(id='_renderables', ctx=Load()), ifs=[], is_async=0)]))], orelse=[]), Assign(targets=[Name(id='right_to_left', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='right_to_left', ctx=Load())), Assign(targets=[Name(id='add_row', ctx=Store())], value=Attribute(value=Name(id='table', ctx=Load()), attr='add_row', ctx=Load())), For(target=Name(id='start', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Call(func=Name(id='len', ctx=Load()), args=[Name(id='_renderables', ctx=Load())], keywords=[]), Name(id='column_count', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='row', ctx=Store())], value=Subscript(value=Name(id='_renderables', ctx=Load()), slice=Slice(lower=Name(id='start', ctx=Load()), upper=BinOp(left=Name(id='start', ctx=Load()), op=Add(), right=Name(id='column_count', ctx=Load()))), ctx=Load())), If(test=Name(id='right_to_left', ctx=Load()), body=[Assign(targets=[Name(id='row', ctx=Store())], value=Subscript(value=Name(id='row', ctx=Load()), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))], orelse=[]), Expr(value=Call(func=Name(id='add_row', ctx=Load()), args=[Starred(value=Name(id='row', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Yield(value=Name(id='table', ctx=Load())))], decorator_list=[], returns=Name(id='RenderResult', ctx=Load()))], decorator_list=[]), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__')]), body=[Import(names=[alias(name='os')]), Assign(targets=[Name(id='console', ctx=Store())], value=Call(func=Name(id='Console', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='files', ctx=Store())], value=ListComp(elt=JoinedStr(values=[FormattedValue(value=Name(id='i', ctx=Load()), conversion=-1), Constant(value=' '), FormattedValue(value=Name(id='s', ctx=Load()), conversion=-1)]), generators=[comprehension(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='s', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='listdir', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='columns', ctx=Store())], value=Call(func=Name(id='Columns', ctx=Load()), args=[Name(id='files', ctx=Load())], keywords=[keyword(arg='padding', value=Tuple(elts=[Constant(value=0), Constant(value=1)], ctx=Load())), keyword(arg='expand', value=Constant(value=False)), keyword(arg='equal', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='print', ctx=Load()), args=[Name(id='columns', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='rule', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='columns', ctx=Load()), attr='column_first', ctx=Store())], value=Constant(value=True)), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='print', ctx=Load()), args=[Name(id='columns', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='columns', ctx=Load()), attr='right_to_left', ctx=Store())], value=Constant(value=True)), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='rule', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='print', ctx=Load()), args=[Name(id='columns', ctx=Load())], keywords=[]))], orelse=[])], type_ignores=[])