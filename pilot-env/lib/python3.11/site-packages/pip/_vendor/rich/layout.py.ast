Module(body=[ImportFrom(module='abc', names=[alias(name='ABC'), alias(name='abstractmethod')], level=0), ImportFrom(module='itertools', names=[alias(name='islice')], level=0), ImportFrom(module='operator', names=[alias(name='itemgetter')], level=0), ImportFrom(module='threading', names=[alias(name='RLock')], level=0), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING'), alias(name='Dict'), alias(name='Iterable'), alias(name='List'), alias(name='NamedTuple'), alias(name='Optional'), alias(name='Sequence'), alias(name='Tuple'), alias(name='Union')], level=0), ImportFrom(module='_ratio', names=[alias(name='ratio_resolve')], level=1), ImportFrom(module='align', names=[alias(name='Align')], level=1), ImportFrom(module='console', names=[alias(name='Console'), alias(name='ConsoleOptions'), alias(name='RenderableType'), alias(name='RenderResult')], level=1), ImportFrom(module='highlighter', names=[alias(name='ReprHighlighter')], level=1), ImportFrom(module='panel', names=[alias(name='Panel')], level=1), ImportFrom(module='pretty', names=[alias(name='Pretty')], level=1), ImportFrom(module='region', names=[alias(name='Region')], level=1), ImportFrom(module='repr', names=[alias(name='Result'), alias(name='rich_repr')], level=1), ImportFrom(module='segment', names=[alias(name='Segment')], level=1), ImportFrom(module='style', names=[alias(name='StyleType')], level=1), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='pip._vendor.rich.tree', names=[alias(name='Tree')], level=0)], orelse=[]), ClassDef(name='LayoutRender', bases=[Name(id='NamedTuple', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='An individual layout render.')), AnnAssign(target=Name(id='region', ctx=Store()), annotation=Name(id='Region', ctx=Load()), simple=1), AnnAssign(target=Name(id='render', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Segment', ctx=Load()), ctx=Load()), ctx=Load()), simple=1)], decorator_list=[]), Assign(targets=[Name(id='RegionMap', ctx=Store())], value=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Constant(value='Layout'), Name(id='Region', ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='RenderMap', ctx=Store())], value=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Constant(value='Layout'), Name(id='LayoutRender', ctx=Load())], ctx=Load()), ctx=Load())), ClassDef(name='LayoutError', bases=[Name(id='Exception', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Layout related error.'))], decorator_list=[]), ClassDef(name='NoSplitter', bases=[Name(id='LayoutError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Requested splitter does not exist.'))], decorator_list=[]), ClassDef(name='_Placeholder', bases=[], keywords=[], body=[Expr(value=Constant(value='An internal renderable used as a Layout placeholder.')), Assign(targets=[Name(id='highlighter', ctx=Store())], value=Call(func=Name(id='ReprHighlighter', ctx=Load()), args=[], keywords=[])), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='layout', annotation=Constant(value='Layout')), arg(arg='style', annotation=Name(id='StyleType', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='')]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='layout', ctx=Store())], value=Name(id='layout', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Store())], value=Name(id='style', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__rich_console__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='console', annotation=Name(id='Console', ctx=Load())), arg(arg='options', annotation=Name(id='ConsoleOptions', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='width', ctx=Store())], value=Attribute(value=Name(id='options', ctx=Load()), attr='max_width', ctx=Load())), Assign(targets=[Name(id='height', ctx=Store())], value=BoolOp(op=Or(), values=[Attribute(value=Name(id='options', ctx=Load()), attr='height', ctx=Load()), Attribute(value=Attribute(value=Name(id='options', ctx=Load()), attr='size', ctx=Load()), attr='height', ctx=Load())])), Assign(targets=[Name(id='layout', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='layout', ctx=Load())), Assign(targets=[Name(id='title', ctx=Store())], value=IfExp(test=Attribute(value=Name(id='layout', ctx=Load()), attr='name', ctx=Load()), body=JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='layout', ctx=Load()), attr='name', ctx=Load()), conversion=114), Constant(value=' ('), FormattedValue(value=Name(id='width', ctx=Load()), conversion=-1), Constant(value=' x '), FormattedValue(value=Name(id='height', ctx=Load()), conversion=-1), Constant(value=')')]), orelse=JoinedStr(values=[Constant(value='('), FormattedValue(value=Name(id='width', ctx=Load()), conversion=-1), Constant(value=' x '), FormattedValue(value=Name(id='height', ctx=Load()), conversion=-1), Constant(value=')')]))), Expr(value=Yield(value=Call(func=Name(id='Panel', ctx=Load()), args=[Call(func=Attribute(value=Name(id='Align', ctx=Load()), attr='center', ctx=Load()), args=[Call(func=Name(id='Pretty', ctx=Load()), args=[Name(id='layout', ctx=Load())], keywords=[])], keywords=[keyword(arg='vertical', value=Constant(value='middle'))])], keywords=[keyword(arg='style', value=Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load())), keyword(arg='title', value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='highlighter', ctx=Load()), args=[Name(id='title', ctx=Load())], keywords=[])), keyword(arg='border_style', value=Constant(value='blue')), keyword(arg='height', value=Name(id='height', ctx=Load()))])))], decorator_list=[], returns=Name(id='RenderResult', ctx=Load()))], decorator_list=[]), ClassDef(name='Splitter', bases=[Name(id='ABC', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Base class for a splitter.')), AnnAssign(target=Name(id='name', ctx=Store()), annotation=Name(id='str', ctx=Load()), value=Constant(value=''), simple=1), FunctionDef(name='get_tree_icon', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get the icon (emoji) used in layout.tree'))], decorator_list=[Name(id='abstractmethod', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='divide', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='children', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Constant(value='Layout'), ctx=Load())), arg(arg='region', annotation=Name(id='Region', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Divide a region amongst several child layouts.\n\n        Args:\n            children (Sequence(Layout)): A number of child layouts.\n            region (Region): A rectangular region to divide.\n        '))], decorator_list=[Name(id='abstractmethod', ctx=Load())], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Constant(value='Layout'), Name(id='Region', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], decorator_list=[]), ClassDef(name='RowSplitter', bases=[Name(id='Splitter', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Split a layout region in to rows.')), Assign(targets=[Name(id='name', ctx=Store())], value=Constant(value='row')), FunctionDef(name='get_tree_icon', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value='[layout.tree.row]⬌'))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='divide', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='children', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Constant(value='Layout'), ctx=Load())), arg(arg='region', annotation=Name(id='Region', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='x', ctx=Store()), Name(id='y', ctx=Store()), Name(id='width', ctx=Store()), Name(id='height', ctx=Store())], ctx=Store())], value=Name(id='region', ctx=Load())), Assign(targets=[Name(id='render_widths', ctx=Store())], value=Call(func=Name(id='ratio_resolve', ctx=Load()), args=[Name(id='width', ctx=Load()), Name(id='children', ctx=Load())], keywords=[])), Assign(targets=[Name(id='offset', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='_Region', ctx=Store())], value=Name(id='Region', ctx=Load())), For(target=Tuple(elts=[Name(id='child', ctx=Store()), Name(id='child_width', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Name(id='children', ctx=Load()), Name(id='render_widths', ctx=Load())], keywords=[]), body=[Expr(value=Yield(value=Tuple(elts=[Name(id='child', ctx=Load()), Call(func=Name(id='_Region', ctx=Load()), args=[BinOp(left=Name(id='x', ctx=Load()), op=Add(), right=Name(id='offset', ctx=Load())), Name(id='y', ctx=Load()), Name(id='child_width', ctx=Load()), Name(id='height', ctx=Load())], keywords=[])], ctx=Load()))), AugAssign(target=Name(id='offset', ctx=Store()), op=Add(), value=Name(id='child_width', ctx=Load()))], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Constant(value='Layout'), Name(id='Region', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], decorator_list=[]), ClassDef(name='ColumnSplitter', bases=[Name(id='Splitter', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Split a layout region in to columns.')), Assign(targets=[Name(id='name', ctx=Store())], value=Constant(value='column')), FunctionDef(name='get_tree_icon', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value='[layout.tree.column]⬍'))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='divide', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='children', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Constant(value='Layout'), ctx=Load())), arg(arg='region', annotation=Name(id='Region', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='x', ctx=Store()), Name(id='y', ctx=Store()), Name(id='width', ctx=Store()), Name(id='height', ctx=Store())], ctx=Store())], value=Name(id='region', ctx=Load())), Assign(targets=[Name(id='render_heights', ctx=Store())], value=Call(func=Name(id='ratio_resolve', ctx=Load()), args=[Name(id='height', ctx=Load()), Name(id='children', ctx=Load())], keywords=[])), Assign(targets=[Name(id='offset', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='_Region', ctx=Store())], value=Name(id='Region', ctx=Load())), For(target=Tuple(elts=[Name(id='child', ctx=Store()), Name(id='child_height', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Name(id='children', ctx=Load()), Name(id='render_heights', ctx=Load())], keywords=[]), body=[Expr(value=Yield(value=Tuple(elts=[Name(id='child', ctx=Load()), Call(func=Name(id='_Region', ctx=Load()), args=[Name(id='x', ctx=Load()), BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Name(id='offset', ctx=Load())), Name(id='width', ctx=Load()), Name(id='child_height', ctx=Load())], keywords=[])], ctx=Load()))), AugAssign(target=Name(id='offset', ctx=Store()), op=Add(), value=Name(id='child_height', ctx=Load()))], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Constant(value='Layout'), Name(id='Region', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], decorator_list=[]), ClassDef(name='Layout', bases=[], keywords=[], body=[Expr(value=Constant(value='A renderable to divide a fixed height in to rows or columns.\n\n    Args:\n        renderable (RenderableType, optional): Renderable content, or None for placeholder. Defaults to None.\n        name (str, optional): Optional identifier for Layout. Defaults to None.\n        size (int, optional): Optional fixed size of layout. Defaults to None.\n        minimum_size (int, optional): Minimum size of layout. Defaults to 1.\n        ratio (int, optional): Optional ratio for flexible layout. Defaults to 1.\n        visible (bool, optional): Visibility of layout. Defaults to True.\n    ')), Assign(targets=[Name(id='splitters', ctx=Store())], value=Dict(keys=[Constant(value='row'), Constant(value='column')], values=[Name(id='RowSplitter', ctx=Load()), Name(id='ColumnSplitter', ctx=Load())])), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='renderable', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='RenderableType', ctx=Load()), ctx=Load()))], kwonlyargs=[arg(arg='name', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='size', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='minimum_size', annotation=Name(id='int', ctx=Load())), arg(arg='ratio', annotation=Name(id='int', ctx=Load())), arg(arg='visible', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=None), Constant(value=None), Constant(value=1), Constant(value=1), Constant(value=True)], defaults=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_renderable', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='renderable', ctx=Load()), Call(func=Name(id='_Placeholder', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='size', ctx=Store())], value=Name(id='size', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='minimum_size', ctx=Store())], value=Name(id='minimum_size', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='ratio', ctx=Store())], value=Name(id='ratio', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Store())], value=Name(id='name', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='visible', ctx=Store())], value=Name(id='visible', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='splitter', ctx=Store()), annotation=Name(id='Splitter', ctx=Load()), value=Call(func=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='splitters', ctx=Load()), slice=Constant(value='column'), ctx=Load()), args=[], keywords=[]), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_children', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Layout', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_render_map', ctx=Store()), annotation=Name(id='RenderMap', ctx=Load()), value=Dict(keys=[], values=[]), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_lock', ctx=Store())], value=Call(func=Name(id='RLock', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__rich_repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Yield(value=Tuple(elts=[Constant(value='name'), Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), Constant(value=None)], ctx=Load()))), Expr(value=Yield(value=Tuple(elts=[Constant(value='size'), Attribute(value=Name(id='self', ctx=Load()), attr='size', ctx=Load()), Constant(value=None)], ctx=Load()))), Expr(value=Yield(value=Tuple(elts=[Constant(value='minimum_size'), Attribute(value=Name(id='self', ctx=Load()), attr='minimum_size', ctx=Load()), Constant(value=1)], ctx=Load()))), Expr(value=Yield(value=Tuple(elts=[Constant(value='ratio'), Attribute(value=Name(id='self', ctx=Load()), attr='ratio', ctx=Load()), Constant(value=1)], ctx=Load())))], decorator_list=[], returns=Name(id='Result', ctx=Load())), FunctionDef(name='renderable', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Layout renderable.')), Return(value=IfExp(test=Attribute(value=Name(id='self', ctx=Load()), attr='_children', ctx=Load()), body=Name(id='self', ctx=Load()), orelse=Attribute(value=Name(id='self', ctx=Load()), attr='_renderable', ctx=Load())))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='RenderableType', ctx=Load())), FunctionDef(name='children', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Gets (visible) layout children.')), Return(value=ListComp(elt=Name(id='child', ctx=Load()), generators=[comprehension(target=Name(id='child', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_children', ctx=Load()), ifs=[Attribute(value=Name(id='child', ctx=Load()), attr='visible', ctx=Load())], is_async=0)]))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Constant(value='Layout'), ctx=Load())), FunctionDef(name='map', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get a map of the last render.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_render_map', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='RenderMap', ctx=Load())), FunctionDef(name='get', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Get a named layout, or None if it doesn't exist.\n\n        Args:\n            name (str): Name of layout.\n\n        Returns:\n            Optional[Layout]: Layout instance or None if no layout was found.\n        ")), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), ops=[Eq()], comparators=[Name(id='name', ctx=Load())]), body=[Return(value=Name(id='self', ctx=Load()))], orelse=[For(target=Name(id='child', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_children', ctx=Load()), body=[Assign(targets=[Name(id='named_layout', ctx=Store())], value=Call(func=Attribute(value=Name(id='child', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='named_layout', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=Name(id='named_layout', ctx=Load()))], orelse=[])], orelse=[])]), Return(value=Constant(value=None))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='Layout'), ctx=Load())), FunctionDef(name='__getitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='layout', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='layout', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='KeyError', ctx=Load()), args=[JoinedStr(values=[Constant(value='No layout with name '), FormattedValue(value=Name(id='name', ctx=Load()), conversion=114)])], keywords=[]))], orelse=[]), Return(value=Name(id='layout', ctx=Load()))], decorator_list=[], returns=Constant(value='Layout')), FunctionDef(name='tree', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get a tree renderable to show layout structure.')), ImportFrom(module='pip._vendor.rich.styled', names=[alias(name='Styled')], level=0), ImportFrom(module='pip._vendor.rich.table', names=[alias(name='Table')], level=0), ImportFrom(module='pip._vendor.rich.tree', names=[alias(name='Tree')], level=0), FunctionDef(name='summary', args=arguments(posonlyargs=[], args=[arg(arg='layout', annotation=Constant(value='Layout'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='icon', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='layout', ctx=Load()), attr='splitter', ctx=Load()), attr='get_tree_icon', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='table', ctx=Store())], value=Call(func=Attribute(value=Name(id='Table', ctx=Load()), attr='grid', ctx=Load()), args=[], keywords=[keyword(arg='padding', value=Tuple(elts=[Constant(value=0), Constant(value=1), Constant(value=0), Constant(value=0)], ctx=Load()))])), AnnAssign(target=Name(id='text', ctx=Store()), annotation=Name(id='RenderableType', ctx=Load()), value=IfExp(test=Attribute(value=Name(id='layout', ctx=Load()), attr='visible', ctx=Load()), body=Call(func=Name(id='Pretty', ctx=Load()), args=[Name(id='layout', ctx=Load())], keywords=[]), orelse=Call(func=Name(id='Styled', ctx=Load()), args=[Call(func=Name(id='Pretty', ctx=Load()), args=[Name(id='layout', ctx=Load())], keywords=[]), Constant(value='dim')], keywords=[])), simple=1), Expr(value=Call(func=Attribute(value=Name(id='table', ctx=Load()), attr='add_row', ctx=Load()), args=[Name(id='icon', ctx=Load()), Name(id='text', ctx=Load())], keywords=[])), Assign(targets=[Name(id='_summary', ctx=Store())], value=Name(id='table', ctx=Load())), Return(value=Name(id='_summary', ctx=Load()))], decorator_list=[], returns=Name(id='Table', ctx=Load())), Assign(targets=[Name(id='layout', ctx=Store())], value=Name(id='self', ctx=Load())), Assign(targets=[Name(id='tree', ctx=Store())], value=Call(func=Name(id='Tree', ctx=Load()), args=[Call(func=Name(id='summary', ctx=Load()), args=[Name(id='layout', ctx=Load())], keywords=[])], keywords=[keyword(arg='guide_style', value=JoinedStr(values=[Constant(value='layout.tree.'), FormattedValue(value=Attribute(value=Attribute(value=Name(id='layout', ctx=Load()), attr='splitter', ctx=Load()), attr='name', ctx=Load()), conversion=-1)])), keyword(arg='highlight', value=Constant(value=True))])), FunctionDef(name='recurse', args=arguments(posonlyargs=[], args=[arg(arg='tree', annotation=Constant(value='Tree')), arg(arg='layout', annotation=Constant(value='Layout'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='child', ctx=Store()), iter=Attribute(value=Name(id='layout', ctx=Load()), attr='_children', ctx=Load()), body=[Expr(value=Call(func=Name(id='recurse', ctx=Load()), args=[Call(func=Attribute(value=Name(id='tree', ctx=Load()), attr='add', ctx=Load()), args=[Call(func=Name(id='summary', ctx=Load()), args=[Name(id='child', ctx=Load())], keywords=[])], keywords=[keyword(arg='guide_style', value=JoinedStr(values=[Constant(value='layout.tree.'), FormattedValue(value=Attribute(value=Attribute(value=Name(id='child', ctx=Load()), attr='splitter', ctx=Load()), attr='name', ctx=Load()), conversion=-1)]))]), Name(id='child', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), Expr(value=Call(func=Name(id='recurse', ctx=Load()), args=[Name(id='tree', ctx=Load()), Name(id='self', ctx=Load())], keywords=[])), Return(value=Name(id='tree', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Constant(value='Tree')), FunctionDef(name='split', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='layouts', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Constant(value='Layout'), Name(id='RenderableType', ctx=Load())], ctx=Load()), ctx=Load())), kwonlyargs=[arg(arg='splitter', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='Splitter', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()))], kw_defaults=[Constant(value='column')], defaults=[]), body=[Expr(value=Constant(value='Split the layout in to multiple sub-layouts.\n\n        Args:\n            *layouts (Layout): Positional arguments should be (sub) Layout instances.\n            splitter (Union[Splitter, str]): Splitter instance or name of splitter.\n        ')), Assign(targets=[Name(id='_layouts', ctx=Store())], value=ListComp(elt=IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='layout', ctx=Load()), Name(id='Layout', ctx=Load())], keywords=[]), body=Name(id='layout', ctx=Load()), orelse=Call(func=Name(id='Layout', ctx=Load()), args=[Name(id='layout', ctx=Load())], keywords=[])), generators=[comprehension(target=Name(id='layout', ctx=Store()), iter=Name(id='layouts', ctx=Load()), ifs=[], is_async=0)])), Try(body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='splitter', ctx=Store())], value=IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='splitter', ctx=Load()), Name(id='Splitter', ctx=Load())], keywords=[]), body=Name(id='splitter', ctx=Load()), orelse=Call(func=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='splitters', ctx=Load()), slice=Name(id='splitter', ctx=Load()), ctx=Load()), args=[], keywords=[])))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='NoSplitter', ctx=Load()), args=[JoinedStr(values=[Constant(value='No splitter called '), FormattedValue(value=Name(id='splitter', ctx=Load()), conversion=114)])], keywords=[]))])], orelse=[], finalbody=[]), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_children', ctx=Load()), slice=Slice(), ctx=Store())], value=Name(id='_layouts', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='add_split', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='layouts', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Constant(value='Layout'), Name(id='RenderableType', ctx=Load())], ctx=Load()), ctx=Load())), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Add a new layout(s) to existing split.\n\n        Args:\n            *layouts (Union[Layout, RenderableType]): Positional arguments should be renderables or (sub) Layout instances.\n\n        ')), Assign(targets=[Name(id='_layouts', ctx=Store())], value=GeneratorExp(elt=IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='layout', ctx=Load()), Name(id='Layout', ctx=Load())], keywords=[]), body=Name(id='layout', ctx=Load()), orelse=Call(func=Name(id='Layout', ctx=Load()), args=[Name(id='layout', ctx=Load())], keywords=[])), generators=[comprehension(target=Name(id='layout', ctx=Store()), iter=Name(id='layouts', ctx=Load()), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_children', ctx=Load()), attr='extend', ctx=Load()), args=[Name(id='_layouts', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='split_row', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='layouts', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Constant(value='Layout'), Name(id='RenderableType', ctx=Load())], ctx=Load()), ctx=Load())), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Split the layout in to a row (layouts side by side).\n\n        Args:\n            *layouts (Layout): Positional arguments should be (sub) Layout instances.\n        ')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='split', ctx=Load()), args=[Starred(value=Name(id='layouts', ctx=Load()), ctx=Load())], keywords=[keyword(arg='splitter', value=Constant(value='row'))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='split_column', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='layouts', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Constant(value='Layout'), Name(id='RenderableType', ctx=Load())], ctx=Load()), ctx=Load())), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Split the layout in to a column (layouts stacked on top of each other).\n\n        Args:\n            *layouts (Layout): Positional arguments should be (sub) Layout instances.\n        ')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='split', ctx=Load()), args=[Starred(value=Name(id='layouts', ctx=Load()), ctx=Load())], keywords=[keyword(arg='splitter', value=Constant(value='column'))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='unsplit', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Reset splits to initial state.')), Delete(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_children', ctx=Load()), slice=Slice(), ctx=Del())])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='update', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='renderable', annotation=Name(id='RenderableType', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Update renderable.\n\n        Args:\n            renderable (RenderableType): New renderable object.\n        ')), With(items=[withitem(context_expr=Attribute(value=Name(id='self', ctx=Load()), attr='_lock', ctx=Load()))], body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_renderable', ctx=Store())], value=Name(id='renderable', ctx=Load()))])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='refresh_screen', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='console', annotation=Constant(value='Console')), arg(arg='layout_name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Refresh a sub-layout.\n\n        Args:\n            console (Console): Console instance where Layout is to be rendered.\n            layout_name (str): Name of layout.\n        ')), With(items=[withitem(context_expr=Attribute(value=Name(id='self', ctx=Load()), attr='_lock', ctx=Load()))], body=[Assign(targets=[Name(id='layout', ctx=Store())], value=Subscript(value=Name(id='self', ctx=Load()), slice=Name(id='layout_name', ctx=Load()), ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='region', ctx=Store()), Name(id='_lines', ctx=Store())], ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_render_map', ctx=Load()), slice=Name(id='layout', ctx=Load()), ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='x', ctx=Store()), Name(id='y', ctx=Store()), Name(id='width', ctx=Store()), Name(id='height', ctx=Store())], ctx=Store())], value=Name(id='region', ctx=Load())), Assign(targets=[Name(id='lines', ctx=Store())], value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='render_lines', ctx=Load()), args=[Name(id='layout', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='console', ctx=Load()), attr='options', ctx=Load()), attr='update_dimensions', ctx=Load()), args=[Name(id='width', ctx=Load()), Name(id='height', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_render_map', ctx=Load()), slice=Name(id='layout', ctx=Load()), ctx=Store())], value=Call(func=Name(id='LayoutRender', ctx=Load()), args=[Name(id='region', ctx=Load()), Name(id='lines', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='update_screen_lines', ctx=Load()), args=[Name(id='lines', ctx=Load()), Name(id='x', ctx=Load()), Name(id='y', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_make_region_map', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='width', annotation=Name(id='int', ctx=Load())), arg(arg='height', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Create a dict that maps layout on to Region.')), AnnAssign(target=Name(id='stack', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='Layout', ctx=Load()), Name(id='Region', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), value=List(elts=[Tuple(elts=[Name(id='self', ctx=Load()), Call(func=Name(id='Region', ctx=Load()), args=[Constant(value=0), Constant(value=0), Name(id='width', ctx=Load()), Name(id='height', ctx=Load())], keywords=[])], ctx=Load())], ctx=Load()), simple=1), Assign(targets=[Name(id='push', ctx=Store())], value=Attribute(value=Name(id='stack', ctx=Load()), attr='append', ctx=Load())), Assign(targets=[Name(id='pop', ctx=Store())], value=Attribute(value=Name(id='stack', ctx=Load()), attr='pop', ctx=Load())), AnnAssign(target=Name(id='layout_regions', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='Layout', ctx=Load()), Name(id='Region', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), Assign(targets=[Name(id='append_layout_region', ctx=Store())], value=Attribute(value=Name(id='layout_regions', ctx=Load()), attr='append', ctx=Load())), While(test=Name(id='stack', ctx=Load()), body=[Expr(value=Call(func=Name(id='append_layout_region', ctx=Load()), args=[Call(func=Name(id='pop', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='layout', ctx=Store()), Name(id='region', ctx=Store())], ctx=Store())], value=Subscript(value=Name(id='layout_regions', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())), Assign(targets=[Name(id='children', ctx=Store())], value=Attribute(value=Name(id='layout', ctx=Load()), attr='children', ctx=Load())), If(test=Name(id='children', ctx=Load()), body=[For(target=Name(id='child_and_region', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='layout', ctx=Load()), attr='splitter', ctx=Load()), attr='divide', ctx=Load()), args=[Name(id='children', ctx=Load()), Name(id='region', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Name(id='push', ctx=Load()), args=[Name(id='child_and_region', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='region_map', ctx=Store())], value=DictComp(key=Name(id='layout', ctx=Load()), value=Name(id='region', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='layout', ctx=Store()), Name(id='region', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='layout_regions', ctx=Load())], keywords=[keyword(arg='key', value=Call(func=Name(id='itemgetter', ctx=Load()), args=[Constant(value=1)], keywords=[]))]), ifs=[], is_async=0)])), Return(value=Name(id='region_map', ctx=Load()))], decorator_list=[], returns=Name(id='RegionMap', ctx=Load())), FunctionDef(name='render', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='console', annotation=Name(id='Console', ctx=Load())), arg(arg='options', annotation=Name(id='ConsoleOptions', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Render the sub_layouts.\n\n        Args:\n            console (Console): Console instance.\n            options (ConsoleOptions): Console options.\n\n        Returns:\n            RenderMap: A dict that maps Layout on to a tuple of Region, lines\n        ')), Assign(targets=[Name(id='render_width', ctx=Store())], value=Attribute(value=Name(id='options', ctx=Load()), attr='max_width', ctx=Load())), Assign(targets=[Name(id='render_height', ctx=Store())], value=BoolOp(op=Or(), values=[Attribute(value=Name(id='options', ctx=Load()), attr='height', ctx=Load()), Attribute(value=Name(id='console', ctx=Load()), attr='height', ctx=Load())])), Assign(targets=[Name(id='region_map', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_make_region_map', ctx=Load()), args=[Name(id='render_width', ctx=Load()), Name(id='render_height', ctx=Load())], keywords=[])), Assign(targets=[Name(id='layout_regions', ctx=Store())], value=ListComp(elt=Tuple(elts=[Name(id='layout', ctx=Load()), Name(id='region', ctx=Load())], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='layout', ctx=Store()), Name(id='region', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='region_map', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[UnaryOp(op=Not(), operand=Attribute(value=Name(id='layout', ctx=Load()), attr='children', ctx=Load()))], is_async=0)])), AnnAssign(target=Name(id='render_map', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Constant(value='Layout'), Constant(value='LayoutRender')], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=1), Assign(targets=[Name(id='render_lines', ctx=Store())], value=Attribute(value=Name(id='console', ctx=Load()), attr='render_lines', ctx=Load())), Assign(targets=[Name(id='update_dimensions', ctx=Store())], value=Attribute(value=Name(id='options', ctx=Load()), attr='update_dimensions', ctx=Load())), For(target=Tuple(elts=[Name(id='layout', ctx=Store()), Name(id='region', ctx=Store())], ctx=Store()), iter=Name(id='layout_regions', ctx=Load()), body=[Assign(targets=[Name(id='lines', ctx=Store())], value=Call(func=Name(id='render_lines', ctx=Load()), args=[Attribute(value=Name(id='layout', ctx=Load()), attr='renderable', ctx=Load()), Call(func=Name(id='update_dimensions', ctx=Load()), args=[Attribute(value=Name(id='region', ctx=Load()), attr='width', ctx=Load()), Attribute(value=Name(id='region', ctx=Load()), attr='height', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Subscript(value=Name(id='render_map', ctx=Load()), slice=Name(id='layout', ctx=Load()), ctx=Store())], value=Call(func=Name(id='LayoutRender', ctx=Load()), args=[Name(id='region', ctx=Load()), Name(id='lines', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='render_map', ctx=Load()))], decorator_list=[], returns=Name(id='RenderMap', ctx=Load())), FunctionDef(name='__rich_console__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='console', annotation=Name(id='Console', ctx=Load())), arg(arg='options', annotation=Name(id='ConsoleOptions', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Attribute(value=Name(id='self', ctx=Load()), attr='_lock', ctx=Load()))], body=[Assign(targets=[Name(id='width', ctx=Store())], value=BoolOp(op=Or(), values=[Attribute(value=Name(id='options', ctx=Load()), attr='max_width', ctx=Load()), Attribute(value=Name(id='console', ctx=Load()), attr='width', ctx=Load())])), Assign(targets=[Name(id='height', ctx=Store())], value=BoolOp(op=Or(), values=[Attribute(value=Name(id='options', ctx=Load()), attr='height', ctx=Load()), Attribute(value=Name(id='console', ctx=Load()), attr='height', ctx=Load())])), Assign(targets=[Name(id='render_map', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='render', ctx=Load()), args=[Name(id='console', ctx=Load()), Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='update_dimensions', ctx=Load()), args=[Name(id='width', ctx=Load()), Name(id='height', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_render_map', ctx=Store())], value=Name(id='render_map', ctx=Load())), AnnAssign(target=Name(id='layout_lines', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Segment', ctx=Load()), ctx=Load()), ctx=Load()), value=ListComp(elt=List(elts=[], ctx=Load()), generators=[comprehension(target=Name(id='_', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='height', ctx=Load())], keywords=[]), ifs=[], is_async=0)]), simple=1), Assign(targets=[Name(id='_islice', ctx=Store())], value=Name(id='islice', ctx=Load())), For(target=Tuple(elts=[Name(id='region', ctx=Store()), Name(id='lines', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='render_map', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='_x', ctx=Store()), Name(id='y', ctx=Store()), Name(id='_layout_width', ctx=Store()), Name(id='layout_height', ctx=Store())], ctx=Store())], value=Name(id='region', ctx=Load())), For(target=Tuple(elts=[Name(id='row', ctx=Store()), Name(id='line', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Call(func=Name(id='_islice', ctx=Load()), args=[Name(id='layout_lines', ctx=Load()), Name(id='y', ctx=Load()), BinOp(left=Name(id='y', ctx=Load()), op=Add(), right=Name(id='layout_height', ctx=Load()))], keywords=[]), Name(id='lines', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='row', ctx=Load()), attr='extend', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='new_line', ctx=Store())], value=Call(func=Attribute(value=Name(id='Segment', ctx=Load()), attr='line', ctx=Load()), args=[], keywords=[])), For(target=Name(id='layout_row', ctx=Store()), iter=Name(id='layout_lines', ctx=Load()), body=[Expr(value=YieldFrom(value=Name(id='layout_row', ctx=Load()))), Expr(value=Yield(value=Name(id='new_line', ctx=Load())))], orelse=[])])], decorator_list=[], returns=Name(id='RenderResult', ctx=Load()))], decorator_list=[Name(id='rich_repr', ctx=Load())]), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__')]), body=[ImportFrom(module='pip._vendor.rich.console', names=[alias(name='Console')], level=0), Assign(targets=[Name(id='console', ctx=Store())], value=Call(func=Name(id='Console', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='layout', ctx=Store())], value=Call(func=Name(id='Layout', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='layout', ctx=Load()), attr='split_column', ctx=Load()), args=[Call(func=Name(id='Layout', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='header')), keyword(arg='size', value=Constant(value=3))]), Call(func=Name(id='Layout', ctx=Load()), args=[], keywords=[keyword(arg='ratio', value=Constant(value=1)), keyword(arg='name', value=Constant(value='main'))]), Call(func=Name(id='Layout', ctx=Load()), args=[], keywords=[keyword(arg='size', value=Constant(value=10)), keyword(arg='name', value=Constant(value='footer'))])], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='layout', ctx=Load()), slice=Constant(value='main'), ctx=Load()), attr='split_row', ctx=Load()), args=[Call(func=Name(id='Layout', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='side'))]), Call(func=Name(id='Layout', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='body')), keyword(arg='ratio', value=Constant(value=2))])], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='layout', ctx=Load()), slice=Constant(value='body'), ctx=Load()), attr='split_row', ctx=Load()), args=[Call(func=Name(id='Layout', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='content')), keyword(arg='ratio', value=Constant(value=2))]), Call(func=Name(id='Layout', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='s2'))])], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='layout', ctx=Load()), slice=Constant(value='s2'), ctx=Load()), attr='split_column', ctx=Load()), args=[Call(func=Name(id='Layout', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='top'))]), Call(func=Name(id='Layout', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='middle'))]), Call(func=Name(id='Layout', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='bottom'))])], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='layout', ctx=Load()), slice=Constant(value='side'), ctx=Load()), attr='split_column', ctx=Load()), args=[Call(func=Name(id='Layout', ctx=Load()), args=[Attribute(value=Name(id='layout', ctx=Load()), attr='tree', ctx=Load())], keywords=[keyword(arg='name', value=Constant(value='left1'))]), Call(func=Name(id='Layout', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='left2'))])], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='layout', ctx=Load()), slice=Constant(value='content'), ctx=Load()), attr='update', ctx=Load()), args=[Constant(value='foo')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='print', ctx=Load()), args=[Name(id='layout', ctx=Load())], keywords=[]))], orelse=[])], type_ignores=[])