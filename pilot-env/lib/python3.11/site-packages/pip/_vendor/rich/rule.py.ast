Module(body=[ImportFrom(module='typing', names=[alias(name='Union')], level=0), ImportFrom(module='align', names=[alias(name='AlignMethod')], level=1), ImportFrom(module='cells', names=[alias(name='cell_len'), alias(name='set_cell_size')], level=1), ImportFrom(module='console', names=[alias(name='Console'), alias(name='ConsoleOptions'), alias(name='RenderResult')], level=1), ImportFrom(module='jupyter', names=[alias(name='JupyterMixin')], level=1), ImportFrom(module='measure', names=[alias(name='Measurement')], level=1), ImportFrom(module='style', names=[alias(name='Style')], level=1), ImportFrom(module='text', names=[alias(name='Text')], level=1), ClassDef(name='Rule', bases=[Name(id='JupyterMixin', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A console renderable to draw a horizontal rule (line).\n\n    Args:\n        title (Union[str, Text], optional): Text to render in the rule. Defaults to "".\n        characters (str, optional): Character(s) used to draw the line. Defaults to "─".\n        style (StyleType, optional): Style of Rule. Defaults to "rule.line".\n        end (str, optional): Character at end of Rule. defaults to "\\\\n"\n        align (str, optional): How to align the title, one of "left", "center", or "right". Defaults to "center".\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='title', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Text', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[arg(arg='characters', annotation=Name(id='str', ctx=Load())), arg(arg='style', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Style', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='end', annotation=Name(id='str', ctx=Load())), arg(arg='align', annotation=Name(id='AlignMethod', ctx=Load()))], kw_defaults=[Constant(value='─'), Constant(value='rule.line'), Constant(value='\n'), Constant(value='center')], defaults=[Constant(value='')]), body=[If(test=Compare(left=Call(func=Name(id='cell_len', ctx=Load()), args=[Name(id='characters', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Constant(value=1)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value="'characters' argument must have a cell width of at least 1")], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='align', ctx=Load()), ops=[NotIn()], comparators=[Tuple(elts=[Constant(value='left'), Constant(value='center'), Constant(value='right')], ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='invalid value for align, expected "left", "center", "right" (not '), FormattedValue(value=Name(id='align', ctx=Load()), conversion=114), Constant(value=')')])], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='title', ctx=Store())], value=Name(id='title', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='characters', ctx=Store())], value=Name(id='characters', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Store())], value=Name(id='style', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='end', ctx=Store())], value=Name(id='end', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='align', ctx=Store())], value=Name(id='align', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[Constant(value='Rule('), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='title', ctx=Load()), conversion=114), Constant(value=', '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='characters', ctx=Load()), conversion=114), Constant(value=')')]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='__rich_console__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='console', annotation=Name(id='Console', ctx=Load())), arg(arg='options', annotation=Name(id='ConsoleOptions', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='width', ctx=Store())], value=Attribute(value=Name(id='options', ctx=Load()), attr='max_width', ctx=Load())), Assign(targets=[Name(id='characters', ctx=Store())], value=IfExp(test=BoolOp(op=And(), values=[Attribute(value=Name(id='options', ctx=Load()), attr='ascii_only', ctx=Load()), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='characters', ctx=Load()), attr='isascii', ctx=Load()), args=[], keywords=[]))]), body=Constant(value='-'), orelse=Attribute(value=Name(id='self', ctx=Load()), attr='characters', ctx=Load()))), Assign(targets=[Name(id='chars_len', ctx=Store())], value=Call(func=Name(id='cell_len', ctx=Load()), args=[Name(id='characters', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='title', ctx=Load())), body=[Expr(value=Yield(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_rule_line', ctx=Load()), args=[Name(id='chars_len', ctx=Load()), Name(id='width', ctx=Load())], keywords=[]))), Return()], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='title', ctx=Load()), Name(id='Text', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='title_text', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='title', ctx=Load()))], orelse=[Assign(targets=[Name(id='title_text', ctx=Store())], value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='render_str', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='title', ctx=Load())], keywords=[keyword(arg='style', value=Constant(value='rule.text'))]))]), Assign(targets=[Attribute(value=Name(id='title_text', ctx=Load()), attr='plain', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='title_text', ctx=Load()), attr='plain', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='\n'), Constant(value=' ')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='title_text', ctx=Load()), attr='expand_tabs', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='required_space', ctx=Store())], value=IfExp(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='align', ctx=Load()), ops=[Eq()], comparators=[Constant(value='center')]), body=Constant(value=4), orelse=Constant(value=2))), Assign(targets=[Name(id='truncate_width', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Constant(value=0), BinOp(left=Name(id='width', ctx=Load()), op=Sub(), right=Name(id='required_space', ctx=Load()))], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='truncate_width', ctx=Load())), body=[Expr(value=Yield(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_rule_line', ctx=Load()), args=[Name(id='chars_len', ctx=Load()), Name(id='width', ctx=Load())], keywords=[]))), Return()], orelse=[]), Assign(targets=[Name(id='rule_text', ctx=Store())], value=Call(func=Name(id='Text', ctx=Load()), args=[], keywords=[keyword(arg='end', value=Attribute(value=Name(id='self', ctx=Load()), attr='end', ctx=Load()))])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='align', ctx=Load()), ops=[Eq()], comparators=[Constant(value='center')]), body=[Expr(value=Call(func=Attribute(value=Name(id='title_text', ctx=Load()), attr='truncate', ctx=Load()), args=[Name(id='truncate_width', ctx=Load())], keywords=[keyword(arg='overflow', value=Constant(value='ellipsis'))])), Assign(targets=[Name(id='side_width', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='width', ctx=Load()), op=Sub(), right=Call(func=Name(id='cell_len', ctx=Load()), args=[Attribute(value=Name(id='title_text', ctx=Load()), attr='plain', ctx=Load())], keywords=[])), op=FloorDiv(), right=Constant(value=2))), Assign(targets=[Name(id='left', ctx=Store())], value=Call(func=Name(id='Text', ctx=Load()), args=[BinOp(left=Name(id='characters', ctx=Load()), op=Mult(), right=BinOp(left=BinOp(left=Name(id='side_width', ctx=Load()), op=FloorDiv(), right=Name(id='chars_len', ctx=Load())), op=Add(), right=Constant(value=1)))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='left', ctx=Load()), attr='truncate', ctx=Load()), args=[BinOp(left=Name(id='side_width', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])), Assign(targets=[Name(id='right_length', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='width', ctx=Load()), op=Sub(), right=Call(func=Name(id='cell_len', ctx=Load()), args=[Attribute(value=Name(id='left', ctx=Load()), attr='plain', ctx=Load())], keywords=[])), op=Sub(), right=Call(func=Name(id='cell_len', ctx=Load()), args=[Attribute(value=Name(id='title_text', ctx=Load()), attr='plain', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='right', ctx=Store())], value=Call(func=Name(id='Text', ctx=Load()), args=[BinOp(left=Name(id='characters', ctx=Load()), op=Mult(), right=BinOp(left=BinOp(left=Name(id='side_width', ctx=Load()), op=FloorDiv(), right=Name(id='chars_len', ctx=Load())), op=Add(), right=Constant(value=1)))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='right', ctx=Load()), attr='truncate', ctx=Load()), args=[Name(id='right_length', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='rule_text', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='left', ctx=Load()), attr='plain', ctx=Load()), op=Add(), right=Constant(value=' ')), Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='rule_text', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='title_text', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='rule_text', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Constant(value=' '), op=Add(), right=Attribute(value=Name(id='right', ctx=Load()), attr='plain', ctx=Load())), Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='align', ctx=Load()), ops=[Eq()], comparators=[Constant(value='left')]), body=[Expr(value=Call(func=Attribute(value=Name(id='title_text', ctx=Load()), attr='truncate', ctx=Load()), args=[Name(id='truncate_width', ctx=Load())], keywords=[keyword(arg='overflow', value=Constant(value='ellipsis'))])), Expr(value=Call(func=Attribute(value=Name(id='rule_text', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='title_text', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='rule_text', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value=' ')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='rule_text', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Name(id='characters', ctx=Load()), op=Mult(), right=BinOp(left=Name(id='width', ctx=Load()), op=Sub(), right=Attribute(value=Name(id='rule_text', ctx=Load()), attr='cell_len', ctx=Load()))), Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='align', ctx=Load()), ops=[Eq()], comparators=[Constant(value='right')]), body=[Expr(value=Call(func=Attribute(value=Name(id='title_text', ctx=Load()), attr='truncate', ctx=Load()), args=[Name(id='truncate_width', ctx=Load())], keywords=[keyword(arg='overflow', value=Constant(value='ellipsis'))])), Expr(value=Call(func=Attribute(value=Name(id='rule_text', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Name(id='characters', ctx=Load()), op=Mult(), right=BinOp(left=BinOp(left=Name(id='width', ctx=Load()), op=Sub(), right=Attribute(value=Name(id='title_text', ctx=Load()), attr='cell_len', ctx=Load())), op=Sub(), right=Constant(value=1))), Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='rule_text', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value=' ')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='rule_text', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='title_text', ctx=Load())], keywords=[]))], orelse=[])])]), Assign(targets=[Attribute(value=Name(id='rule_text', ctx=Load()), attr='plain', ctx=Store())], value=Call(func=Name(id='set_cell_size', ctx=Load()), args=[Attribute(value=Name(id='rule_text', ctx=Load()), attr='plain', ctx=Load()), Name(id='width', ctx=Load())], keywords=[])), Expr(value=Yield(value=Name(id='rule_text', ctx=Load())))], decorator_list=[], returns=Name(id='RenderResult', ctx=Load())), FunctionDef(name='_rule_line', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='chars_len', annotation=Name(id='int', ctx=Load())), arg(arg='width', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='rule_text', ctx=Store())], value=Call(func=Name(id='Text', ctx=Load()), args=[BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='characters', ctx=Load()), op=Mult(), right=BinOp(left=BinOp(left=Name(id='width', ctx=Load()), op=FloorDiv(), right=Name(id='chars_len', ctx=Load())), op=Add(), right=Constant(value=1))), Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='rule_text', ctx=Load()), attr='truncate', ctx=Load()), args=[Name(id='width', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='rule_text', ctx=Load()), attr='plain', ctx=Store())], value=Call(func=Name(id='set_cell_size', ctx=Load()), args=[Attribute(value=Name(id='rule_text', ctx=Load()), attr='plain', ctx=Load()), Name(id='width', ctx=Load())], keywords=[])), Return(value=Name(id='rule_text', ctx=Load()))], decorator_list=[], returns=Name(id='Text', ctx=Load())), FunctionDef(name='__rich_measure__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='console', annotation=Name(id='Console', ctx=Load())), arg(arg='options', annotation=Name(id='ConsoleOptions', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='Measurement', ctx=Load()), args=[Constant(value=1), Constant(value=1)], keywords=[]))], decorator_list=[], returns=Name(id='Measurement', ctx=Load()))], decorator_list=[]), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__')]), body=[Import(names=[alias(name='sys')]), ImportFrom(module='pip._vendor.rich.console', names=[alias(name='Console')], level=0), Try(body=[Assign(targets=[Name(id='text', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='argv', ctx=Load()), slice=Constant(value=1), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='IndexError', ctx=Load()), body=[Assign(targets=[Name(id='text', ctx=Store())], value=Constant(value='Hello, World'))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='console', ctx=Store())], value=Call(func=Name(id='Console', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='print', ctx=Load()), args=[Call(func=Name(id='Rule', ctx=Load()), args=[], keywords=[keyword(arg='title', value=Name(id='text', ctx=Load()))])], keywords=[])), Assign(targets=[Name(id='console', ctx=Store())], value=Call(func=Name(id='Console', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='print', ctx=Load()), args=[Call(func=Name(id='Rule', ctx=Load()), args=[Constant(value='foo')], keywords=[])], keywords=[keyword(arg='width', value=Constant(value=4))]))], orelse=[])], type_ignores=[])