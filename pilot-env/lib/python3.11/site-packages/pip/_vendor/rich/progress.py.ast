Module(body=[Import(names=[alias(name='io')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='typing')]), Import(names=[alias(name='warnings')]), ImportFrom(module='abc', names=[alias(name='ABC'), alias(name='abstractmethod')], level=0), ImportFrom(module='collections', names=[alias(name='deque')], level=0), ImportFrom(module='dataclasses', names=[alias(name='dataclass'), alias(name='field')], level=0), ImportFrom(module='datetime', names=[alias(name='timedelta')], level=0), ImportFrom(module='io', names=[alias(name='RawIOBase'), alias(name='UnsupportedOperation')], level=0), ImportFrom(module='math', names=[alias(name='ceil')], level=0), ImportFrom(module='mmap', names=[alias(name='mmap')], level=0), ImportFrom(module='operator', names=[alias(name='length_hint')], level=0), ImportFrom(module='os', names=[alias(name='PathLike'), alias(name='stat')], level=0), ImportFrom(module='threading', names=[alias(name='Event'), alias(name='RLock'), alias(name='Thread')], level=0), ImportFrom(module='types', names=[alias(name='TracebackType')], level=0), ImportFrom(module='typing', names=[alias(name='Any'), alias(name='BinaryIO'), alias(name='Callable'), alias(name='ContextManager'), alias(name='Deque'), alias(name='Dict'), alias(name='Generic'), alias(name='Iterable'), alias(name='List'), alias(name='NamedTuple'), alias(name='NewType'), alias(name='Optional'), alias(name='Sequence'), alias(name='TextIO'), alias(name='Tuple'), alias(name='Type'), alias(name='TypeVar'), alias(name='Union')], level=0), If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), ops=[GtE()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=8)], ctx=Load())]), body=[ImportFrom(module='typing', names=[alias(name='Literal')], level=0)], orelse=[ImportFrom(module='pip._vendor.typing_extensions', names=[alias(name='Literal')], level=0)]), ImportFrom(names=[alias(name='filesize'), alias(name='get_console')], level=1), ImportFrom(module='console', names=[alias(name='Console'), alias(name='Group'), alias(name='JustifyMethod'), alias(name='RenderableType')], level=1), ImportFrom(module='highlighter', names=[alias(name='Highlighter')], level=1), ImportFrom(module='jupyter', names=[alias(name='JupyterMixin')], level=1), ImportFrom(module='live', names=[alias(name='Live')], level=1), ImportFrom(module='progress_bar', names=[alias(name='ProgressBar')], level=1), ImportFrom(module='spinner', names=[alias(name='Spinner')], level=1), ImportFrom(module='style', names=[alias(name='StyleType')], level=1), ImportFrom(module='table', names=[alias(name='Column'), alias(name='Table')], level=1), ImportFrom(module='text', names=[alias(name='Text'), alias(name='TextType')], level=1), Assign(targets=[Name(id='TaskID', ctx=Store())], value=Call(func=Name(id='NewType', ctx=Load()), args=[Constant(value='TaskID'), Name(id='int', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ProgressType', ctx=Store())], value=Call(func=Name(id='TypeVar', ctx=Load()), args=[Constant(value='ProgressType')], keywords=[])), Assign(targets=[Name(id='GetTimeCallable', ctx=Store())], value=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='_I', ctx=Store())], value=Call(func=Attribute(value=Name(id='typing', ctx=Load()), attr='TypeVar', ctx=Load()), args=[Constant(value='_I'), Name(id='TextIO', ctx=Load()), Name(id='BinaryIO', ctx=Load())], keywords=[])), ClassDef(name='_TrackThread', bases=[Name(id='Thread', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A thread to periodically update progress.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='progress', annotation=Constant(value='Progress')), arg(arg='task_id', annotation=Constant(value='TaskID')), arg(arg='update_period', annotation=Name(id='float', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='progress', ctx=Store())], value=Name(id='progress', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='task_id', ctx=Store())], value=Name(id='task_id', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='update_period', ctx=Store())], value=Name(id='update_period', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='done', ctx=Store())], value=Call(func=Name(id='Event', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='completed', ctx=Store())], value=Constant(value=0)), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='run', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='task_id', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='task_id', ctx=Load())), Assign(targets=[Name(id='advance', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='progress', ctx=Load()), attr='advance', ctx=Load())), Assign(targets=[Name(id='update_period', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='update_period', ctx=Load())), Assign(targets=[Name(id='last_completed', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='wait', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='done', ctx=Load()), attr='wait', ctx=Load())), While(test=UnaryOp(op=Not(), operand=Call(func=Name(id='wait', ctx=Load()), args=[Name(id='update_period', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='completed', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='completed', ctx=Load())), If(test=Compare(left=Name(id='last_completed', ctx=Load()), ops=[NotEq()], comparators=[Name(id='completed', ctx=Load())]), body=[Expr(value=Call(func=Name(id='advance', ctx=Load()), args=[Name(id='task_id', ctx=Load()), BinOp(left=Name(id='completed', ctx=Load()), op=Sub(), right=Name(id='last_completed', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='last_completed', ctx=Store())], value=Name(id='completed', ctx=Load()))], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='progress', ctx=Load()), attr='update', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='task_id', ctx=Load())], keywords=[keyword(arg='completed', value=Attribute(value=Name(id='self', ctx=Load()), attr='completed', ctx=Load())), keyword(arg='refresh', value=Constant(value=True))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__enter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='start', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='self', ctx=Load()))], decorator_list=[], returns=Constant(value='_TrackThread')), FunctionDef(name='__exit__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='exc_type', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Type', ctx=Load()), slice=Name(id='BaseException', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='exc_val', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='BaseException', ctx=Load()), ctx=Load())), arg(arg='exc_tb', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TracebackType', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='done', ctx=Load()), attr='set', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='join', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), FunctionDef(name='track', args=arguments(posonlyargs=[], args=[arg(arg='sequence', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='ProgressType', ctx=Load()), ctx=Load()), Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='ProgressType', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='description', annotation=Name(id='str', ctx=Load())), arg(arg='total', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load())), arg(arg='auto_refresh', annotation=Name(id='bool', ctx=Load())), arg(arg='console', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Console', ctx=Load()), ctx=Load())), arg(arg='transient', annotation=Name(id='bool', ctx=Load())), arg(arg='get_time', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='refresh_per_second', annotation=Name(id='float', ctx=Load())), arg(arg='style', annotation=Name(id='StyleType', ctx=Load())), arg(arg='complete_style', annotation=Name(id='StyleType', ctx=Load())), arg(arg='finished_style', annotation=Name(id='StyleType', ctx=Load())), arg(arg='pulse_style', annotation=Name(id='StyleType', ctx=Load())), arg(arg='update_period', annotation=Name(id='float', ctx=Load())), arg(arg='disable', annotation=Name(id='bool', ctx=Load())), arg(arg='show_speed', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='Working...'), Constant(value=None), Constant(value=True), Constant(value=None), Constant(value=False), Constant(value=None), Constant(value=10), Constant(value='bar.back'), Constant(value='bar.complete'), Constant(value='bar.finished'), Constant(value='bar.pulse'), Constant(value=0.1), Constant(value=False), Constant(value=True)]), body=[Expr(value=Constant(value='Track progress by iterating over a sequence.\n\n    Args:\n        sequence (Iterable[ProgressType]): A sequence (must support "len") you wish to iterate over.\n        description (str, optional): Description of task show next to progress bar. Defaults to "Working".\n        total: (float, optional): Total number of steps. Default is len(sequence).\n        auto_refresh (bool, optional): Automatic refresh, disable to force a refresh after each iteration. Default is True.\n        transient: (bool, optional): Clear the progress on exit. Defaults to False.\n        console (Console, optional): Console to write to. Default creates internal Console instance.\n        refresh_per_second (float): Number of times per second to refresh the progress information. Defaults to 10.\n        style (StyleType, optional): Style for the bar background. Defaults to "bar.back".\n        complete_style (StyleType, optional): Style for the completed bar. Defaults to "bar.complete".\n        finished_style (StyleType, optional): Style for a finished bar. Defaults to "bar.finished".\n        pulse_style (StyleType, optional): Style for pulsing bars. Defaults to "bar.pulse".\n        update_period (float, optional): Minimum time (in seconds) between calls to update(). Defaults to 0.1.\n        disable (bool, optional): Disable display of progress.\n        show_speed (bool, optional): Show speed if total isn\'t known. Defaults to True.\n    Returns:\n        Iterable[ProgressType]: An iterable of the values in the sequence.\n\n    ')), AnnAssign(target=Name(id='columns', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Constant(value='ProgressColumn'), ctx=Load()), value=IfExp(test=Name(id='description', ctx=Load()), body=List(elts=[Call(func=Name(id='TextColumn', ctx=Load()), args=[Constant(value='[progress.description]{task.description}')], keywords=[])], ctx=Load()), orelse=List(elts=[], ctx=Load())), simple=1), Expr(value=Call(func=Attribute(value=Name(id='columns', ctx=Load()), attr='extend', ctx=Load()), args=[Tuple(elts=[Call(func=Name(id='BarColumn', ctx=Load()), args=[], keywords=[keyword(arg='style', value=Name(id='style', ctx=Load())), keyword(arg='complete_style', value=Name(id='complete_style', ctx=Load())), keyword(arg='finished_style', value=Name(id='finished_style', ctx=Load())), keyword(arg='pulse_style', value=Name(id='pulse_style', ctx=Load()))]), Call(func=Name(id='TaskProgressColumn', ctx=Load()), args=[], keywords=[keyword(arg='show_speed', value=Name(id='show_speed', ctx=Load()))]), Call(func=Name(id='TimeRemainingColumn', ctx=Load()), args=[], keywords=[keyword(arg='elapsed_when_finished', value=Constant(value=True))])], ctx=Load())], keywords=[])), Assign(targets=[Name(id='progress', ctx=Store())], value=Call(func=Name(id='Progress', ctx=Load()), args=[Starred(value=Name(id='columns', ctx=Load()), ctx=Load())], keywords=[keyword(arg='auto_refresh', value=Name(id='auto_refresh', ctx=Load())), keyword(arg='console', value=Name(id='console', ctx=Load())), keyword(arg='transient', value=Name(id='transient', ctx=Load())), keyword(arg='get_time', value=Name(id='get_time', ctx=Load())), keyword(arg='refresh_per_second', value=BoolOp(op=Or(), values=[Name(id='refresh_per_second', ctx=Load()), Constant(value=10)])), keyword(arg='disable', value=Name(id='disable', ctx=Load()))])), With(items=[withitem(context_expr=Name(id='progress', ctx=Load()))], body=[Expr(value=YieldFrom(value=Call(func=Attribute(value=Name(id='progress', ctx=Load()), attr='track', ctx=Load()), args=[Name(id='sequence', ctx=Load())], keywords=[keyword(arg='total', value=Name(id='total', ctx=Load())), keyword(arg='description', value=Name(id='description', ctx=Load())), keyword(arg='update_period', value=Name(id='update_period', ctx=Load()))])))])], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='ProgressType', ctx=Load()), ctx=Load())), ClassDef(name='_Reader', bases=[Name(id='RawIOBase', ctx=Load()), Name(id='BinaryIO', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="A reader that tracks progress while it's being read from.")), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='handle', annotation=Name(id='BinaryIO', ctx=Load())), arg(arg='progress', annotation=Constant(value='Progress')), arg(arg='task', annotation=Name(id='TaskID', ctx=Load())), arg(arg='close_handle', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='handle', ctx=Store())], value=Name(id='handle', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='progress', ctx=Store())], value=Name(id='progress', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='task', ctx=Store())], value=Name(id='task', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='close_handle', ctx=Store())], value=Name(id='close_handle', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_closed', ctx=Store())], value=Constant(value=False))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__enter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='handle', ctx=Load()), attr='__enter__', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='self', ctx=Load()))], decorator_list=[], returns=Constant(value='_Reader')), FunctionDef(name='__exit__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='exc_type', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Type', ctx=Load()), slice=Name(id='BaseException', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='exc_val', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='BaseException', ctx=Load()), ctx=Load())), arg(arg='exc_tb', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TracebackType', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__iter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Name(id='self', ctx=Load()))], decorator_list=[], returns=Name(id='BinaryIO', ctx=Load())), FunctionDef(name='__next__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='line', ctx=Store())], value=Call(func=Name(id='next', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='handle', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='progress', ctx=Load()), attr='advance', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='task', ctx=Load())], keywords=[keyword(arg='advance', value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[]))])), Return(value=Name(id='line', ctx=Load()))], decorator_list=[], returns=Name(id='bytes', ctx=Load())), FunctionDef(name='closed', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_closed', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='fileno', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='handle', ctx=Load()), attr='fileno', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='isatty', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='handle', ctx=Load()), attr='isatty', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='mode', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='handle', ctx=Load()), attr='mode', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='name', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='handle', ctx=Load()), attr='name', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='readable', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='handle', ctx=Load()), attr='readable', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='seekable', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='handle', ctx=Load()), attr='seekable', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='writable', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=False))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='read', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='size', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[UnaryOp(op=USub(), operand=Constant(value=1))]), body=[Assign(targets=[Name(id='block', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='handle', ctx=Load()), attr='read', ctx=Load()), args=[Name(id='size', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='progress', ctx=Load()), attr='advance', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='task', ctx=Load())], keywords=[keyword(arg='advance', value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='block', ctx=Load())], keywords=[]))])), Return(value=Name(id='block', ctx=Load()))], decorator_list=[], returns=Name(id='bytes', ctx=Load())), FunctionDef(name='readinto', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='b', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='bytearray', ctx=Load()), Name(id='memoryview', ctx=Load()), Name(id='mmap', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='n', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='handle', ctx=Load()), attr='readinto', ctx=Load()), args=[Name(id='b', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='progress', ctx=Load()), attr='advance', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='task', ctx=Load())], keywords=[keyword(arg='advance', value=Name(id='n', ctx=Load()))])), Return(value=Name(id='n', ctx=Load()))], decorator_list=[]), FunctionDef(name='readline', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='size', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[UnaryOp(op=USub(), operand=Constant(value=1))]), body=[Assign(targets=[Name(id='line', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='handle', ctx=Load()), attr='readline', ctx=Load()), args=[Name(id='size', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='progress', ctx=Load()), attr='advance', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='task', ctx=Load())], keywords=[keyword(arg='advance', value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[]))])), Return(value=Name(id='line', ctx=Load()))], decorator_list=[], returns=Name(id='bytes', ctx=Load())), FunctionDef(name='readlines', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='hint', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[UnaryOp(op=USub(), operand=Constant(value=1))]), body=[Assign(targets=[Name(id='lines', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='handle', ctx=Load()), attr='readlines', ctx=Load()), args=[Name(id='hint', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='progress', ctx=Load()), attr='advance', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='task', ctx=Load())], keywords=[keyword(arg='advance', value=Call(func=Name(id='sum', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Name(id='len', ctx=Load()), Name(id='lines', ctx=Load())], keywords=[])], keywords=[]))])), Return(value=Name(id='lines', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='bytes', ctx=Load()), ctx=Load())), FunctionDef(name='close', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='close_handle', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='handle', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_closed', ctx=Store())], value=Constant(value=True))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='seek', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='offset', annotation=Name(id='int', ctx=Load())), arg(arg='whence', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[Assign(targets=[Name(id='pos', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='handle', ctx=Load()), attr='seek', ctx=Load()), args=[Name(id='offset', ctx=Load()), Name(id='whence', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='progress', ctx=Load()), attr='update', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='task', ctx=Load())], keywords=[keyword(arg='completed', value=Name(id='pos', ctx=Load()))])), Return(value=Name(id='pos', ctx=Load()))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='tell', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='handle', ctx=Load()), attr='tell', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='write', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='s', annotation=Name(id='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Call(func=Name(id='UnsupportedOperation', ctx=Load()), args=[Constant(value='write')], keywords=[]))], decorator_list=[], returns=Name(id='int', ctx=Load()))], decorator_list=[]), ClassDef(name='_ReadContext', bases=[Subscript(value=Name(id='ContextManager', ctx=Load()), slice=Name(id='_I', ctx=Load()), ctx=Load()), Subscript(value=Name(id='Generic', ctx=Load()), slice=Name(id='_I', ctx=Load()), ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A utility class to handle a context for both a reader and a progress.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='progress', annotation=Constant(value='Progress')), arg(arg='reader', annotation=Name(id='_I', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='progress', ctx=Store())], value=Name(id='progress', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='reader', ctx=Store()), annotation=Name(id='_I', ctx=Load()), value=Name(id='reader', ctx=Load()), simple=0)], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__enter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='progress', ctx=Load()), attr='start', ctx=Load()), args=[], keywords=[])), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='reader', ctx=Load()), attr='__enter__', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='_I', ctx=Load())), FunctionDef(name='__exit__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='exc_type', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Type', ctx=Load()), slice=Name(id='BaseException', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='exc_val', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='BaseException', ctx=Load()), ctx=Load())), arg(arg='exc_tb', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TracebackType', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='progress', ctx=Load()), attr='stop', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='reader', ctx=Load()), attr='__exit__', ctx=Load()), args=[Name(id='exc_type', ctx=Load()), Name(id='exc_val', ctx=Load()), Name(id='exc_tb', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), FunctionDef(name='wrap_file', args=arguments(posonlyargs=[], args=[arg(arg='file', annotation=Name(id='BinaryIO', ctx=Load())), arg(arg='total', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[arg(arg='description', annotation=Name(id='str', ctx=Load())), arg(arg='auto_refresh', annotation=Name(id='bool', ctx=Load())), arg(arg='console', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Console', ctx=Load()), ctx=Load())), arg(arg='transient', annotation=Name(id='bool', ctx=Load())), arg(arg='get_time', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='refresh_per_second', annotation=Name(id='float', ctx=Load())), arg(arg='style', annotation=Name(id='StyleType', ctx=Load())), arg(arg='complete_style', annotation=Name(id='StyleType', ctx=Load())), arg(arg='finished_style', annotation=Name(id='StyleType', ctx=Load())), arg(arg='pulse_style', annotation=Name(id='StyleType', ctx=Load())), arg(arg='disable', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value='Reading...'), Constant(value=True), Constant(value=None), Constant(value=False), Constant(value=None), Constant(value=10), Constant(value='bar.back'), Constant(value='bar.complete'), Constant(value='bar.finished'), Constant(value='bar.pulse'), Constant(value=False)], defaults=[]), body=[Expr(value=Constant(value='Read bytes from a file while tracking progress.\n\n    Args:\n        file (Union[str, PathLike[str], BinaryIO]): The path to the file to read, or a file-like object in binary mode.\n        total (int): Total number of bytes to read.\n        description (str, optional): Description of task show next to progress bar. Defaults to "Reading".\n        auto_refresh (bool, optional): Automatic refresh, disable to force a refresh after each iteration. Default is True.\n        transient: (bool, optional): Clear the progress on exit. Defaults to False.\n        console (Console, optional): Console to write to. Default creates internal Console instance.\n        refresh_per_second (float): Number of times per second to refresh the progress information. Defaults to 10.\n        style (StyleType, optional): Style for the bar background. Defaults to "bar.back".\n        complete_style (StyleType, optional): Style for the completed bar. Defaults to "bar.complete".\n        finished_style (StyleType, optional): Style for a finished bar. Defaults to "bar.finished".\n        pulse_style (StyleType, optional): Style for pulsing bars. Defaults to "bar.pulse".\n        disable (bool, optional): Disable display of progress.\n    Returns:\n        ContextManager[BinaryIO]: A context manager yielding a progress reader.\n\n    ')), AnnAssign(target=Name(id='columns', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Constant(value='ProgressColumn'), ctx=Load()), value=IfExp(test=Name(id='description', ctx=Load()), body=List(elts=[Call(func=Name(id='TextColumn', ctx=Load()), args=[Constant(value='[progress.description]{task.description}')], keywords=[])], ctx=Load()), orelse=List(elts=[], ctx=Load())), simple=1), Expr(value=Call(func=Attribute(value=Name(id='columns', ctx=Load()), attr='extend', ctx=Load()), args=[Tuple(elts=[Call(func=Name(id='BarColumn', ctx=Load()), args=[], keywords=[keyword(arg='style', value=Name(id='style', ctx=Load())), keyword(arg='complete_style', value=Name(id='complete_style', ctx=Load())), keyword(arg='finished_style', value=Name(id='finished_style', ctx=Load())), keyword(arg='pulse_style', value=Name(id='pulse_style', ctx=Load()))]), Call(func=Name(id='DownloadColumn', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='TimeRemainingColumn', ctx=Load()), args=[], keywords=[])], ctx=Load())], keywords=[])), Assign(targets=[Name(id='progress', ctx=Store())], value=Call(func=Name(id='Progress', ctx=Load()), args=[Starred(value=Name(id='columns', ctx=Load()), ctx=Load())], keywords=[keyword(arg='auto_refresh', value=Name(id='auto_refresh', ctx=Load())), keyword(arg='console', value=Name(id='console', ctx=Load())), keyword(arg='transient', value=Name(id='transient', ctx=Load())), keyword(arg='get_time', value=Name(id='get_time', ctx=Load())), keyword(arg='refresh_per_second', value=BoolOp(op=Or(), values=[Name(id='refresh_per_second', ctx=Load()), Constant(value=10)])), keyword(arg='disable', value=Name(id='disable', ctx=Load()))])), Assign(targets=[Name(id='reader', ctx=Store())], value=Call(func=Attribute(value=Name(id='progress', ctx=Load()), attr='wrap_file', ctx=Load()), args=[Name(id='file', ctx=Load())], keywords=[keyword(arg='total', value=Name(id='total', ctx=Load())), keyword(arg='description', value=Name(id='description', ctx=Load()))])), Return(value=Call(func=Name(id='_ReadContext', ctx=Load()), args=[Name(id='progress', ctx=Load()), Name(id='reader', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='ContextManager', ctx=Load()), slice=Name(id='BinaryIO', ctx=Load()), ctx=Load())), FunctionDef(name='open', args=arguments(posonlyargs=[], args=[arg(arg='file', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Constant(value='PathLike[str]'), Name(id='bytes', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='mode', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='rt'), ctx=Load()), Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='r'), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='buffering', annotation=Name(id='int', ctx=Load())), arg(arg='encoding', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='errors', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='newline', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[arg(arg='total', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='description', annotation=Name(id='str', ctx=Load())), arg(arg='auto_refresh', annotation=Name(id='bool', ctx=Load())), arg(arg='console', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Console', ctx=Load()), ctx=Load())), arg(arg='transient', annotation=Name(id='bool', ctx=Load())), arg(arg='get_time', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='refresh_per_second', annotation=Name(id='float', ctx=Load())), arg(arg='style', annotation=Name(id='StyleType', ctx=Load())), arg(arg='complete_style', annotation=Name(id='StyleType', ctx=Load())), arg(arg='finished_style', annotation=Name(id='StyleType', ctx=Load())), arg(arg='pulse_style', annotation=Name(id='StyleType', ctx=Load())), arg(arg='disable', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=None), Constant(value='Reading...'), Constant(value=True), Constant(value=None), Constant(value=False), Constant(value=None), Constant(value=10), Constant(value='bar.back'), Constant(value='bar.complete'), Constant(value='bar.finished'), Constant(value='bar.pulse'), Constant(value=False)], defaults=[UnaryOp(op=USub(), operand=Constant(value=1)), Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Pass()], decorator_list=[Attribute(value=Name(id='typing', ctx=Load()), attr='overload', ctx=Load())], returns=Subscript(value=Name(id='ContextManager', ctx=Load()), slice=Name(id='TextIO', ctx=Load()), ctx=Load())), FunctionDef(name='open', args=arguments(posonlyargs=[], args=[arg(arg='file', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Constant(value='PathLike[str]'), Name(id='bytes', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='mode', annotation=Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='rb'), ctx=Load())), arg(arg='buffering', annotation=Name(id='int', ctx=Load())), arg(arg='encoding', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='errors', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='newline', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[arg(arg='total', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='description', annotation=Name(id='str', ctx=Load())), arg(arg='auto_refresh', annotation=Name(id='bool', ctx=Load())), arg(arg='console', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Console', ctx=Load()), ctx=Load())), arg(arg='transient', annotation=Name(id='bool', ctx=Load())), arg(arg='get_time', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='refresh_per_second', annotation=Name(id='float', ctx=Load())), arg(arg='style', annotation=Name(id='StyleType', ctx=Load())), arg(arg='complete_style', annotation=Name(id='StyleType', ctx=Load())), arg(arg='finished_style', annotation=Name(id='StyleType', ctx=Load())), arg(arg='pulse_style', annotation=Name(id='StyleType', ctx=Load())), arg(arg='disable', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=None), Constant(value='Reading...'), Constant(value=True), Constant(value=None), Constant(value=False), Constant(value=None), Constant(value=10), Constant(value='bar.back'), Constant(value='bar.complete'), Constant(value='bar.finished'), Constant(value='bar.pulse'), Constant(value=False)], defaults=[UnaryOp(op=USub(), operand=Constant(value=1)), Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Pass()], decorator_list=[Attribute(value=Name(id='typing', ctx=Load()), attr='overload', ctx=Load())], returns=Subscript(value=Name(id='ContextManager', ctx=Load()), slice=Name(id='BinaryIO', ctx=Load()), ctx=Load())), FunctionDef(name='open', args=arguments(posonlyargs=[], args=[arg(arg='file', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Constant(value='PathLike[str]'), Name(id='bytes', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='mode', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='rb'), ctx=Load()), Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='rt'), ctx=Load()), Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='r'), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='buffering', annotation=Name(id='int', ctx=Load())), arg(arg='encoding', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='errors', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='newline', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[arg(arg='total', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='description', annotation=Name(id='str', ctx=Load())), arg(arg='auto_refresh', annotation=Name(id='bool', ctx=Load())), arg(arg='console', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Console', ctx=Load()), ctx=Load())), arg(arg='transient', annotation=Name(id='bool', ctx=Load())), arg(arg='get_time', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='refresh_per_second', annotation=Name(id='float', ctx=Load())), arg(arg='style', annotation=Name(id='StyleType', ctx=Load())), arg(arg='complete_style', annotation=Name(id='StyleType', ctx=Load())), arg(arg='finished_style', annotation=Name(id='StyleType', ctx=Load())), arg(arg='pulse_style', annotation=Name(id='StyleType', ctx=Load())), arg(arg='disable', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=None), Constant(value='Reading...'), Constant(value=True), Constant(value=None), Constant(value=False), Constant(value=None), Constant(value=10), Constant(value='bar.back'), Constant(value='bar.complete'), Constant(value='bar.finished'), Constant(value='bar.pulse'), Constant(value=False)], defaults=[Constant(value='r'), UnaryOp(op=USub(), operand=Constant(value=1)), Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='Read bytes from a file while tracking progress.\n\n    Args:\n        path (Union[str, PathLike[str], BinaryIO]): The path to the file to read, or a file-like object in binary mode.\n        mode (str): The mode to use to open the file. Only supports "r", "rb" or "rt".\n        buffering (int): The buffering strategy to use, see :func:`io.open`.\n        encoding (str, optional): The encoding to use when reading in text mode, see :func:`io.open`.\n        errors (str, optional): The error handling strategy for decoding errors, see :func:`io.open`.\n        newline (str, optional): The strategy for handling newlines in text mode, see :func:`io.open`\n        total: (int, optional): Total number of bytes to read. Must be provided if reading from a file handle. Default for a path is os.stat(file).st_size.\n        description (str, optional): Description of task show next to progress bar. Defaults to "Reading".\n        auto_refresh (bool, optional): Automatic refresh, disable to force a refresh after each iteration. Default is True.\n        transient: (bool, optional): Clear the progress on exit. Defaults to False.\n        console (Console, optional): Console to write to. Default creates internal Console instance.\n        refresh_per_second (float): Number of times per second to refresh the progress information. Defaults to 10.\n        style (StyleType, optional): Style for the bar background. Defaults to "bar.back".\n        complete_style (StyleType, optional): Style for the completed bar. Defaults to "bar.complete".\n        finished_style (StyleType, optional): Style for a finished bar. Defaults to "bar.finished".\n        pulse_style (StyleType, optional): Style for pulsing bars. Defaults to "bar.pulse".\n        disable (bool, optional): Disable display of progress.\n        encoding (str, optional): The encoding to use when reading in text mode.\n\n    Returns:\n        ContextManager[BinaryIO]: A context manager yielding a progress reader.\n\n    ')), AnnAssign(target=Name(id='columns', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Constant(value='ProgressColumn'), ctx=Load()), value=IfExp(test=Name(id='description', ctx=Load()), body=List(elts=[Call(func=Name(id='TextColumn', ctx=Load()), args=[Constant(value='[progress.description]{task.description}')], keywords=[])], ctx=Load()), orelse=List(elts=[], ctx=Load())), simple=1), Expr(value=Call(func=Attribute(value=Name(id='columns', ctx=Load()), attr='extend', ctx=Load()), args=[Tuple(elts=[Call(func=Name(id='BarColumn', ctx=Load()), args=[], keywords=[keyword(arg='style', value=Name(id='style', ctx=Load())), keyword(arg='complete_style', value=Name(id='complete_style', ctx=Load())), keyword(arg='finished_style', value=Name(id='finished_style', ctx=Load())), keyword(arg='pulse_style', value=Name(id='pulse_style', ctx=Load()))]), Call(func=Name(id='DownloadColumn', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='TimeRemainingColumn', ctx=Load()), args=[], keywords=[])], ctx=Load())], keywords=[])), Assign(targets=[Name(id='progress', ctx=Store())], value=Call(func=Name(id='Progress', ctx=Load()), args=[Starred(value=Name(id='columns', ctx=Load()), ctx=Load())], keywords=[keyword(arg='auto_refresh', value=Name(id='auto_refresh', ctx=Load())), keyword(arg='console', value=Name(id='console', ctx=Load())), keyword(arg='transient', value=Name(id='transient', ctx=Load())), keyword(arg='get_time', value=Name(id='get_time', ctx=Load())), keyword(arg='refresh_per_second', value=BoolOp(op=Or(), values=[Name(id='refresh_per_second', ctx=Load()), Constant(value=10)])), keyword(arg='disable', value=Name(id='disable', ctx=Load()))])), Assign(targets=[Name(id='reader', ctx=Store())], value=Call(func=Attribute(value=Name(id='progress', ctx=Load()), attr='open', ctx=Load()), args=[Name(id='file', ctx=Load())], keywords=[keyword(arg='mode', value=Name(id='mode', ctx=Load())), keyword(arg='buffering', value=Name(id='buffering', ctx=Load())), keyword(arg='encoding', value=Name(id='encoding', ctx=Load())), keyword(arg='errors', value=Name(id='errors', ctx=Load())), keyword(arg='newline', value=Name(id='newline', ctx=Load())), keyword(arg='total', value=Name(id='total', ctx=Load())), keyword(arg='description', value=Name(id='description', ctx=Load()))])), Return(value=Call(func=Name(id='_ReadContext', ctx=Load()), args=[Name(id='progress', ctx=Load()), Name(id='reader', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='ContextManager', ctx=Load()), slice=Name(id='BinaryIO', ctx=Load()), ctx=Load()), Subscript(value=Name(id='ContextManager', ctx=Load()), slice=Name(id='TextIO', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), ClassDef(name='ProgressColumn', bases=[Name(id='ABC', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Base class for a widget to use in progress display.')), AnnAssign(target=Name(id='max_refresh', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=1), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='table_column', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Column', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_table_column', ctx=Store())], value=Name(id='table_column', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_renderable_cache', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='TaskID', ctx=Load()), Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='RenderableType', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_update_time', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0)], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='get_table_column', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get a table column, used to build tasks table.')), Return(value=BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='_table_column', ctx=Load()), Call(func=Name(id='Column', ctx=Load()), args=[], keywords=[])]))], decorator_list=[], returns=Name(id='Column', ctx=Load())), FunctionDef(name='__call__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='task', annotation=Constant(value='Task'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Called by the Progress object to return a renderable for the given task.\n\n        Args:\n            task (Task): An object containing information regarding the task.\n\n        Returns:\n            RenderableType: Anything renderable (including str).\n        ')), Assign(targets=[Name(id='current_time', ctx=Store())], value=Call(func=Attribute(value=Name(id='task', ctx=Load()), attr='get_time', ctx=Load()), args=[], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='max_refresh', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), UnaryOp(op=Not(), operand=Attribute(value=Name(id='task', ctx=Load()), attr='completed', ctx=Load()))]), body=[Try(body=[Assign(targets=[Tuple(elts=[Name(id='timestamp', ctx=Store()), Name(id='renderable', ctx=Store())], ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_renderable_cache', ctx=Load()), slice=Attribute(value=Name(id='task', ctx=Load()), attr='id', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Pass()])], orelse=[If(test=Compare(left=BinOp(left=Name(id='timestamp', ctx=Load()), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='max_refresh', ctx=Load())), ops=[Gt()], comparators=[Name(id='current_time', ctx=Load())]), body=[Return(value=Name(id='renderable', ctx=Load()))], orelse=[])], finalbody=[])], orelse=[]), Assign(targets=[Name(id='renderable', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='render', ctx=Load()), args=[Name(id='task', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_renderable_cache', ctx=Load()), slice=Attribute(value=Name(id='task', ctx=Load()), attr='id', ctx=Load()), ctx=Store())], value=Tuple(elts=[Name(id='current_time', ctx=Load()), Name(id='renderable', ctx=Load())], ctx=Load())), Return(value=Name(id='renderable', ctx=Load()))], decorator_list=[], returns=Name(id='RenderableType', ctx=Load())), FunctionDef(name='render', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='task', annotation=Constant(value='Task'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Should return a renderable object.'))], decorator_list=[Name(id='abstractmethod', ctx=Load())], returns=Name(id='RenderableType', ctx=Load()))], decorator_list=[]), ClassDef(name='RenderableColumn', bases=[Name(id='ProgressColumn', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A column to insert an arbitrary column.\n\n    Args:\n        renderable (RenderableType, optional): Any renderable. Defaults to empty string.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='renderable', annotation=Name(id='RenderableType', ctx=Load()))], kwonlyargs=[arg(arg='table_column', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Column', ctx=Load()), ctx=Load()))], kw_defaults=[Constant(value=None)], defaults=[Constant(value='')]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='renderable', ctx=Store())], value=Name(id='renderable', ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='table_column', value=Name(id='table_column', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='render', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='task', annotation=Constant(value='Task'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='renderable', ctx=Load()))], decorator_list=[], returns=Name(id='RenderableType', ctx=Load()))], decorator_list=[]), ClassDef(name='SpinnerColumn', bases=[Name(id='ProgressColumn', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A column with a \'spinner\' animation.\n\n    Args:\n        spinner_name (str, optional): Name of spinner animation. Defaults to "dots".\n        style (StyleType, optional): Style of spinner. Defaults to "progress.spinner".\n        speed (float, optional): Speed factor of spinner. Defaults to 1.0.\n        finished_text (TextType, optional): Text used when task is finished. Defaults to " ".\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='spinner_name', annotation=Name(id='str', ctx=Load())), arg(arg='style', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='StyleType', ctx=Load()), ctx=Load())), arg(arg='speed', annotation=Name(id='float', ctx=Load())), arg(arg='finished_text', annotation=Name(id='TextType', ctx=Load())), arg(arg='table_column', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Column', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='dots'), Constant(value='progress.spinner'), Constant(value=1.0), Constant(value=' '), Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='spinner', ctx=Store())], value=Call(func=Name(id='Spinner', ctx=Load()), args=[Name(id='spinner_name', ctx=Load())], keywords=[keyword(arg='style', value=Name(id='style', ctx=Load())), keyword(arg='speed', value=Name(id='speed', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='finished_text', ctx=Store())], value=IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='finished_text', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=Call(func=Attribute(value=Name(id='Text', ctx=Load()), attr='from_markup', ctx=Load()), args=[Name(id='finished_text', ctx=Load())], keywords=[]), orelse=Name(id='finished_text', ctx=Load()))), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='table_column', value=Name(id='table_column', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='set_spinner', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='spinner_name', annotation=Name(id='str', ctx=Load())), arg(arg='spinner_style', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='StyleType', ctx=Load()), ctx=Load())), arg(arg='speed', annotation=Name(id='float', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='progress.spinner'), Constant(value=1.0)]), body=[Expr(value=Constant(value='Set a new spinner.\n\n        Args:\n            spinner_name (str): Spinner name, see python -m rich.spinner.\n            spinner_style (Optional[StyleType], optional): Spinner style. Defaults to "progress.spinner".\n            speed (float, optional): Speed factor of spinner. Defaults to 1.0.\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='spinner', ctx=Store())], value=Call(func=Name(id='Spinner', ctx=Load()), args=[Name(id='spinner_name', ctx=Load())], keywords=[keyword(arg='style', value=Name(id='spinner_style', ctx=Load())), keyword(arg='speed', value=Name(id='speed', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='render', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='task', annotation=Constant(value='Task'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='text', ctx=Store())], value=IfExp(test=Attribute(value=Name(id='task', ctx=Load()), attr='finished', ctx=Load()), body=Attribute(value=Name(id='self', ctx=Load()), attr='finished_text', ctx=Load()), orelse=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='spinner', ctx=Load()), attr='render', ctx=Load()), args=[Call(func=Attribute(value=Name(id='task', ctx=Load()), attr='get_time', ctx=Load()), args=[], keywords=[])], keywords=[]))), Return(value=Name(id='text', ctx=Load()))], decorator_list=[], returns=Name(id='RenderableType', ctx=Load()))], decorator_list=[]), ClassDef(name='TextColumn', bases=[Name(id='ProgressColumn', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A column containing text.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='text_format', annotation=Name(id='str', ctx=Load())), arg(arg='style', annotation=Name(id='StyleType', ctx=Load())), arg(arg='justify', annotation=Name(id='JustifyMethod', ctx=Load())), arg(arg='markup', annotation=Name(id='bool', ctx=Load())), arg(arg='highlighter', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Highlighter', ctx=Load()), ctx=Load())), arg(arg='table_column', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Column', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='none'), Constant(value='left'), Constant(value=True), Constant(value=None), Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='text_format', ctx=Store())], value=Name(id='text_format', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='justify', ctx=Store()), annotation=Name(id='JustifyMethod', ctx=Load()), value=Name(id='justify', ctx=Load()), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Store())], value=Name(id='style', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='markup', ctx=Store())], value=Name(id='markup', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='highlighter', ctx=Store())], value=Name(id='highlighter', ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='table_column', value=BoolOp(op=Or(), values=[Name(id='table_column', ctx=Load()), Call(func=Name(id='Column', ctx=Load()), args=[], keywords=[keyword(arg='no_wrap', value=Constant(value=True))])]))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='render', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='task', annotation=Constant(value='Task'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='_text', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='text_format', ctx=Load()), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='task', value=Name(id='task', ctx=Load()))])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='markup', ctx=Load()), body=[Assign(targets=[Name(id='text', ctx=Store())], value=Call(func=Attribute(value=Name(id='Text', ctx=Load()), attr='from_markup', ctx=Load()), args=[Name(id='_text', ctx=Load())], keywords=[keyword(arg='style', value=Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load())), keyword(arg='justify', value=Attribute(value=Name(id='self', ctx=Load()), attr='justify', ctx=Load()))]))], orelse=[Assign(targets=[Name(id='text', ctx=Store())], value=Call(func=Name(id='Text', ctx=Load()), args=[Name(id='_text', ctx=Load())], keywords=[keyword(arg='style', value=Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load())), keyword(arg='justify', value=Attribute(value=Name(id='self', ctx=Load()), attr='justify', ctx=Load()))]))]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='highlighter', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='highlighter', ctx=Load()), attr='highlight', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='text', ctx=Load()))], decorator_list=[], returns=Name(id='Text', ctx=Load()))], decorator_list=[]), ClassDef(name='BarColumn', bases=[Name(id='ProgressColumn', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Renders a visual progress bar.\n\n    Args:\n        bar_width (Optional[int], optional): Width of bar or None for full width. Defaults to 40.\n        style (StyleType, optional): Style for the bar background. Defaults to "bar.back".\n        complete_style (StyleType, optional): Style for the completed bar. Defaults to "bar.complete".\n        finished_style (StyleType, optional): Style for a finished bar. Defaults to "bar.finished".\n        pulse_style (StyleType, optional): Style for pulsing bars. Defaults to "bar.pulse".\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='bar_width', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='style', annotation=Name(id='StyleType', ctx=Load())), arg(arg='complete_style', annotation=Name(id='StyleType', ctx=Load())), arg(arg='finished_style', annotation=Name(id='StyleType', ctx=Load())), arg(arg='pulse_style', annotation=Name(id='StyleType', ctx=Load())), arg(arg='table_column', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Column', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=40), Constant(value='bar.back'), Constant(value='bar.complete'), Constant(value='bar.finished'), Constant(value='bar.pulse'), Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='bar_width', ctx=Store())], value=Name(id='bar_width', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Store())], value=Name(id='style', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='complete_style', ctx=Store())], value=Name(id='complete_style', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='finished_style', ctx=Store())], value=Name(id='finished_style', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='pulse_style', ctx=Store())], value=Name(id='pulse_style', ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='table_column', value=Name(id='table_column', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='render', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='task', annotation=Constant(value='Task'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Gets a progress bar widget for a task.')), Return(value=Call(func=Name(id='ProgressBar', ctx=Load()), args=[], keywords=[keyword(arg='total', value=IfExp(test=Compare(left=Attribute(value=Name(id='task', ctx=Load()), attr='total', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Call(func=Name(id='max', ctx=Load()), args=[Constant(value=0), Attribute(value=Name(id='task', ctx=Load()), attr='total', ctx=Load())], keywords=[]), orelse=Constant(value=None))), keyword(arg='completed', value=Call(func=Name(id='max', ctx=Load()), args=[Constant(value=0), Attribute(value=Name(id='task', ctx=Load()), attr='completed', ctx=Load())], keywords=[])), keyword(arg='width', value=IfExp(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='bar_width', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Constant(value=None), orelse=Call(func=Name(id='max', ctx=Load()), args=[Constant(value=1), Attribute(value=Name(id='self', ctx=Load()), attr='bar_width', ctx=Load())], keywords=[]))), keyword(arg='pulse', value=UnaryOp(op=Not(), operand=Attribute(value=Name(id='task', ctx=Load()), attr='started', ctx=Load()))), keyword(arg='animation_time', value=Call(func=Attribute(value=Name(id='task', ctx=Load()), attr='get_time', ctx=Load()), args=[], keywords=[])), keyword(arg='style', value=Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load())), keyword(arg='complete_style', value=Attribute(value=Name(id='self', ctx=Load()), attr='complete_style', ctx=Load())), keyword(arg='finished_style', value=Attribute(value=Name(id='self', ctx=Load()), attr='finished_style', ctx=Load())), keyword(arg='pulse_style', value=Attribute(value=Name(id='self', ctx=Load()), attr='pulse_style', ctx=Load()))]))], decorator_list=[], returns=Name(id='ProgressBar', ctx=Load()))], decorator_list=[]), ClassDef(name='TimeElapsedColumn', bases=[Name(id='ProgressColumn', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Renders time elapsed.')), FunctionDef(name='render', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='task', annotation=Constant(value='Task'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Show time elapsed.')), Assign(targets=[Name(id='elapsed', ctx=Store())], value=IfExp(test=Attribute(value=Name(id='task', ctx=Load()), attr='finished', ctx=Load()), body=Attribute(value=Name(id='task', ctx=Load()), attr='finished_time', ctx=Load()), orelse=Attribute(value=Name(id='task', ctx=Load()), attr='elapsed', ctx=Load()))), If(test=Compare(left=Name(id='elapsed', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Call(func=Name(id='Text', ctx=Load()), args=[Constant(value='-:--:--')], keywords=[keyword(arg='style', value=Constant(value='progress.elapsed'))]))], orelse=[]), Assign(targets=[Name(id='delta', ctx=Store())], value=Call(func=Name(id='timedelta', ctx=Load()), args=[], keywords=[keyword(arg='seconds', value=Call(func=Name(id='int', ctx=Load()), args=[Name(id='elapsed', ctx=Load())], keywords=[]))])), Return(value=Call(func=Name(id='Text', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='delta', ctx=Load())], keywords=[])], keywords=[keyword(arg='style', value=Constant(value='progress.elapsed'))]))], decorator_list=[], returns=Name(id='Text', ctx=Load()))], decorator_list=[]), ClassDef(name='TaskProgressColumn', bases=[Name(id='TextColumn', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Show task progress as a percentage.\n\n    Args:\n        text_format (str, optional): Format for percentage display. Defaults to "[progress.percentage]{task.percentage:>3.0f}%".\n        text_format_no_percentage (str, optional): Format if percentage is unknown. Defaults to "".\n        style (StyleType, optional): Style of output. Defaults to "none".\n        justify (JustifyMethod, optional): Text justification. Defaults to "left".\n        markup (bool, optional): Enable markup. Defaults to True.\n        highlighter (Optional[Highlighter], optional): Highlighter to apply to output. Defaults to None.\n        table_column (Optional[Column], optional): Table Column to use. Defaults to None.\n        show_speed (bool, optional): Show speed if total is unknown. Defaults to False.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='text_format', annotation=Name(id='str', ctx=Load())), arg(arg='text_format_no_percentage', annotation=Name(id='str', ctx=Load())), arg(arg='style', annotation=Name(id='StyleType', ctx=Load())), arg(arg='justify', annotation=Name(id='JustifyMethod', ctx=Load())), arg(arg='markup', annotation=Name(id='bool', ctx=Load())), arg(arg='highlighter', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Highlighter', ctx=Load()), ctx=Load())), arg(arg='table_column', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Column', ctx=Load()), ctx=Load())), arg(arg='show_speed', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='[progress.percentage]{task.percentage:>3.0f}%'), Constant(value=''), Constant(value='none'), Constant(value='left'), Constant(value=True), Constant(value=None), Constant(value=None), Constant(value=False)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='text_format_no_percentage', ctx=Store())], value=Name(id='text_format_no_percentage', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='show_speed', ctx=Store())], value=Name(id='show_speed', ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='text_format', value=Name(id='text_format', ctx=Load())), keyword(arg='style', value=Name(id='style', ctx=Load())), keyword(arg='justify', value=Name(id='justify', ctx=Load())), keyword(arg='markup', value=Name(id='markup', ctx=Load())), keyword(arg='highlighter', value=Name(id='highlighter', ctx=Load())), keyword(arg='table_column', value=Name(id='table_column', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='render_speed', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='speed', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Render the speed in iterations per second.\n\n        Args:\n            task (Task): A Task object.\n\n        Returns:\n            Text: Text object containing the task speed.\n        ')), If(test=Compare(left=Name(id='speed', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Call(func=Name(id='Text', ctx=Load()), args=[Constant(value='')], keywords=[keyword(arg='style', value=Constant(value='progress.percentage'))]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='unit', ctx=Store()), Name(id='suffix', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='filesize', ctx=Load()), attr='pick_unit_and_suffix', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Name(id='speed', ctx=Load())], keywords=[]), List(elts=[Constant(value=''), Constant(value='×10³'), Constant(value='×10⁶'), Constant(value='×10⁹'), Constant(value='×10¹²')], ctx=Load()), Constant(value=1000)], keywords=[])), Assign(targets=[Name(id='data_speed', ctx=Store())], value=BinOp(left=Name(id='speed', ctx=Load()), op=Div(), right=Name(id='unit', ctx=Load()))), Return(value=Call(func=Name(id='Text', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='data_speed', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='.1f')])), FormattedValue(value=Name(id='suffix', ctx=Load()), conversion=-1), Constant(value=' it/s')])], keywords=[keyword(arg='style', value=Constant(value='progress.percentage'))]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Name(id='Text', ctx=Load())), FunctionDef(name='render', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='task', annotation=Constant(value='Task'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='task', ctx=Load()), attr='total', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Attribute(value=Name(id='self', ctx=Load()), attr='show_speed', ctx=Load())]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='render_speed', ctx=Load()), args=[BoolOp(op=Or(), values=[Attribute(value=Name(id='task', ctx=Load()), attr='finished_speed', ctx=Load()), Attribute(value=Name(id='task', ctx=Load()), attr='speed', ctx=Load())])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='text_format', ctx=Store())], value=IfExp(test=Compare(left=Attribute(value=Name(id='task', ctx=Load()), attr='total', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Attribute(value=Name(id='self', ctx=Load()), attr='text_format_no_percentage', ctx=Load()), orelse=Attribute(value=Name(id='self', ctx=Load()), attr='text_format', ctx=Load()))), Assign(targets=[Name(id='_text', ctx=Store())], value=Call(func=Attribute(value=Name(id='text_format', ctx=Load()), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='task', value=Name(id='task', ctx=Load()))])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='markup', ctx=Load()), body=[Assign(targets=[Name(id='text', ctx=Store())], value=Call(func=Attribute(value=Name(id='Text', ctx=Load()), attr='from_markup', ctx=Load()), args=[Name(id='_text', ctx=Load())], keywords=[keyword(arg='style', value=Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load())), keyword(arg='justify', value=Attribute(value=Name(id='self', ctx=Load()), attr='justify', ctx=Load()))]))], orelse=[Assign(targets=[Name(id='text', ctx=Store())], value=Call(func=Name(id='Text', ctx=Load()), args=[Name(id='_text', ctx=Load())], keywords=[keyword(arg='style', value=Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load())), keyword(arg='justify', value=Attribute(value=Name(id='self', ctx=Load()), attr='justify', ctx=Load()))]))]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='highlighter', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='highlighter', ctx=Load()), attr='highlight', ctx=Load()), args=[Name(id='text', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='text', ctx=Load()))], decorator_list=[], returns=Name(id='Text', ctx=Load()))], decorator_list=[]), ClassDef(name='TimeRemainingColumn', bases=[Name(id='ProgressColumn', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Renders estimated time remaining.\n\n    Args:\n        compact (bool, optional): Render MM:SS when time remaining is less than an hour. Defaults to False.\n        elapsed_when_finished (bool, optional): Render time elapsed when the task is finished. Defaults to False.\n    ')), Assign(targets=[Name(id='max_refresh', ctx=Store())], value=Constant(value=0.5)), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='compact', annotation=Name(id='bool', ctx=Load())), arg(arg='elapsed_when_finished', annotation=Name(id='bool', ctx=Load())), arg(arg='table_column', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Column', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Constant(value=False), Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='compact', ctx=Store())], value=Name(id='compact', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='elapsed_when_finished', ctx=Store())], value=Name(id='elapsed_when_finished', ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='table_column', value=Name(id='table_column', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='render', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='task', annotation=Constant(value='Task'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Show time remaining.')), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='elapsed_when_finished', ctx=Load()), Attribute(value=Name(id='task', ctx=Load()), attr='finished', ctx=Load())]), body=[Assign(targets=[Name(id='task_time', ctx=Store())], value=Attribute(value=Name(id='task', ctx=Load()), attr='finished_time', ctx=Load())), Assign(targets=[Name(id='style', ctx=Store())], value=Constant(value='progress.elapsed'))], orelse=[Assign(targets=[Name(id='task_time', ctx=Store())], value=Attribute(value=Name(id='task', ctx=Load()), attr='time_remaining', ctx=Load())), Assign(targets=[Name(id='style', ctx=Store())], value=Constant(value='progress.remaining'))]), If(test=Compare(left=Attribute(value=Name(id='task', ctx=Load()), attr='total', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Call(func=Name(id='Text', ctx=Load()), args=[Constant(value='')], keywords=[keyword(arg='style', value=Name(id='style', ctx=Load()))]))], orelse=[]), If(test=Compare(left=Name(id='task_time', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Call(func=Name(id='Text', ctx=Load()), args=[IfExp(test=Attribute(value=Name(id='self', ctx=Load()), attr='compact', ctx=Load()), body=Constant(value='--:--'), orelse=Constant(value='-:--:--'))], keywords=[keyword(arg='style', value=Name(id='style', ctx=Load()))]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='minutes', ctx=Store()), Name(id='seconds', ctx=Store())], ctx=Store())], value=Call(func=Name(id='divmod', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Name(id='task_time', ctx=Load())], keywords=[]), Constant(value=60)], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='hours', ctx=Store()), Name(id='minutes', ctx=Store())], ctx=Store())], value=Call(func=Name(id='divmod', ctx=Load()), args=[Name(id='minutes', ctx=Load()), Constant(value=60)], keywords=[])), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='compact', ctx=Load()), UnaryOp(op=Not(), operand=Name(id='hours', ctx=Load()))]), body=[Assign(targets=[Name(id='formatted', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='minutes', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='02d')])), Constant(value=':'), FormattedValue(value=Name(id='seconds', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='02d')]))]))], orelse=[Assign(targets=[Name(id='formatted', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='hours', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='d')])), Constant(value=':'), FormattedValue(value=Name(id='minutes', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='02d')])), Constant(value=':'), FormattedValue(value=Name(id='seconds', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='02d')]))]))]), Return(value=Call(func=Name(id='Text', ctx=Load()), args=[Name(id='formatted', ctx=Load())], keywords=[keyword(arg='style', value=Name(id='style', ctx=Load()))]))], decorator_list=[], returns=Name(id='Text', ctx=Load()))], decorator_list=[]), ClassDef(name='FileSizeColumn', bases=[Name(id='ProgressColumn', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Renders completed filesize.')), FunctionDef(name='render', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='task', annotation=Constant(value='Task'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Show data completed.')), Assign(targets=[Name(id='data_size', ctx=Store())], value=Call(func=Attribute(value=Name(id='filesize', ctx=Load()), attr='decimal', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Attribute(value=Name(id='task', ctx=Load()), attr='completed', ctx=Load())], keywords=[])], keywords=[])), Return(value=Call(func=Name(id='Text', ctx=Load()), args=[Name(id='data_size', ctx=Load())], keywords=[keyword(arg='style', value=Constant(value='progress.filesize'))]))], decorator_list=[], returns=Name(id='Text', ctx=Load()))], decorator_list=[]), ClassDef(name='TotalFileSizeColumn', bases=[Name(id='ProgressColumn', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Renders total filesize.')), FunctionDef(name='render', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='task', annotation=Constant(value='Task'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Show data completed.')), Assign(targets=[Name(id='data_size', ctx=Store())], value=IfExp(test=Compare(left=Attribute(value=Name(id='task', ctx=Load()), attr='total', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Call(func=Attribute(value=Name(id='filesize', ctx=Load()), attr='decimal', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Attribute(value=Name(id='task', ctx=Load()), attr='total', ctx=Load())], keywords=[])], keywords=[]), orelse=Constant(value=''))), Return(value=Call(func=Name(id='Text', ctx=Load()), args=[Name(id='data_size', ctx=Load())], keywords=[keyword(arg='style', value=Constant(value='progress.filesize.total'))]))], decorator_list=[], returns=Name(id='Text', ctx=Load()))], decorator_list=[]), ClassDef(name='MofNCompleteColumn', bases=[Name(id='ProgressColumn', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Renders completed count/total, e.g. \'  10/1000\'.\n\n    Best for bounded tasks with int quantities.\n\n    Space pads the completed count so that progress length does not change as task progresses\n    past powers of 10.\n\n    Args:\n        separator (str, optional): Text to separate completed and total values. Defaults to "/".\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='separator', annotation=Name(id='str', ctx=Load())), arg(arg='table_column', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Column', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='/'), Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='separator', ctx=Store())], value=Name(id='separator', ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='table_column', value=Name(id='table_column', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='render', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='task', annotation=Constant(value='Task'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Show completed/total.')), Assign(targets=[Name(id='completed', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Attribute(value=Name(id='task', ctx=Load()), attr='completed', ctx=Load())], keywords=[])), Assign(targets=[Name(id='total', ctx=Store())], value=IfExp(test=Compare(left=Attribute(value=Name(id='task', ctx=Load()), attr='total', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Call(func=Name(id='int', ctx=Load()), args=[Attribute(value=Name(id='task', ctx=Load()), attr='total', ctx=Load())], keywords=[]), orelse=Constant(value='?'))), Assign(targets=[Name(id='total_width', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='total', ctx=Load())], keywords=[])], keywords=[])), Return(value=Call(func=Name(id='Text', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='completed', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[FormattedValue(value=Name(id='total_width', ctx=Load()), conversion=-1), Constant(value='d')])), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='separator', ctx=Load()), conversion=-1), FormattedValue(value=Name(id='total', ctx=Load()), conversion=-1)])], keywords=[keyword(arg='style', value=Constant(value='progress.download'))]))], decorator_list=[], returns=Name(id='Text', ctx=Load()))], decorator_list=[]), ClassDef(name='DownloadColumn', bases=[Name(id='ProgressColumn', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="Renders file size downloaded and total, e.g. '0.5/2.3 GB'.\n\n    Args:\n        binary_units (bool, optional): Use binary units, KiB, MiB etc. Defaults to False.\n    ")), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='binary_units', annotation=Name(id='bool', ctx=Load())), arg(arg='table_column', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Column', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='binary_units', ctx=Store())], value=Name(id='binary_units', ctx=Load())), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='table_column', value=Name(id='table_column', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='render', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='task', annotation=Constant(value='Task'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Calculate common unit for completed and total.')), Assign(targets=[Name(id='completed', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Attribute(value=Name(id='task', ctx=Load()), attr='completed', ctx=Load())], keywords=[])), Assign(targets=[Name(id='unit_and_suffix_calculation_base', ctx=Store())], value=IfExp(test=Compare(left=Attribute(value=Name(id='task', ctx=Load()), attr='total', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Call(func=Name(id='int', ctx=Load()), args=[Attribute(value=Name(id='task', ctx=Load()), attr='total', ctx=Load())], keywords=[]), orelse=Name(id='completed', ctx=Load()))), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='binary_units', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='unit', ctx=Store()), Name(id='suffix', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='filesize', ctx=Load()), attr='pick_unit_and_suffix', ctx=Load()), args=[Name(id='unit_and_suffix_calculation_base', ctx=Load()), List(elts=[Constant(value='bytes'), Constant(value='KiB'), Constant(value='MiB'), Constant(value='GiB'), Constant(value='TiB'), Constant(value='PiB'), Constant(value='EiB'), Constant(value='ZiB'), Constant(value='YiB')], ctx=Load()), Constant(value=1024)], keywords=[]))], orelse=[Assign(targets=[Tuple(elts=[Name(id='unit', ctx=Store()), Name(id='suffix', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='filesize', ctx=Load()), attr='pick_unit_and_suffix', ctx=Load()), args=[Name(id='unit_and_suffix_calculation_base', ctx=Load()), List(elts=[Constant(value='bytes'), Constant(value='kB'), Constant(value='MB'), Constant(value='GB'), Constant(value='TB'), Constant(value='PB'), Constant(value='EB'), Constant(value='ZB'), Constant(value='YB')], ctx=Load()), Constant(value=1000)], keywords=[]))]), Assign(targets=[Name(id='precision', ctx=Store())], value=IfExp(test=Compare(left=Name(id='unit', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=Constant(value=0), orelse=Constant(value=1))), Assign(targets=[Name(id='completed_ratio', ctx=Store())], value=BinOp(left=Name(id='completed', ctx=Load()), op=Div(), right=Name(id='unit', ctx=Load()))), Assign(targets=[Name(id='completed_str', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='completed_ratio', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value=',.'), FormattedValue(value=Name(id='precision', ctx=Load()), conversion=-1), Constant(value='f')]))])), If(test=Compare(left=Attribute(value=Name(id='task', ctx=Load()), attr='total', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='total', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Attribute(value=Name(id='task', ctx=Load()), attr='total', ctx=Load())], keywords=[])), Assign(targets=[Name(id='total_ratio', ctx=Store())], value=BinOp(left=Name(id='total', ctx=Load()), op=Div(), right=Name(id='unit', ctx=Load()))), Assign(targets=[Name(id='total_str', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='total_ratio', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value=',.'), FormattedValue(value=Name(id='precision', ctx=Load()), conversion=-1), Constant(value='f')]))]))], orelse=[Assign(targets=[Name(id='total_str', ctx=Store())], value=Constant(value='?'))]), Assign(targets=[Name(id='download_status', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='completed_str', ctx=Load()), conversion=-1), Constant(value='/'), FormattedValue(value=Name(id='total_str', ctx=Load()), conversion=-1), Constant(value=' '), FormattedValue(value=Name(id='suffix', ctx=Load()), conversion=-1)])), Assign(targets=[Name(id='download_text', ctx=Store())], value=Call(func=Name(id='Text', ctx=Load()), args=[Name(id='download_status', ctx=Load())], keywords=[keyword(arg='style', value=Constant(value='progress.download'))])), Return(value=Name(id='download_text', ctx=Load()))], decorator_list=[], returns=Name(id='Text', ctx=Load()))], decorator_list=[]), ClassDef(name='TransferSpeedColumn', bases=[Name(id='ProgressColumn', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Renders human readable transfer speed.')), FunctionDef(name='render', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='task', annotation=Constant(value='Task'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Show data transfer speed.')), Assign(targets=[Name(id='speed', ctx=Store())], value=BoolOp(op=Or(), values=[Attribute(value=Name(id='task', ctx=Load()), attr='finished_speed', ctx=Load()), Attribute(value=Name(id='task', ctx=Load()), attr='speed', ctx=Load())])), If(test=Compare(left=Name(id='speed', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Call(func=Name(id='Text', ctx=Load()), args=[Constant(value='?')], keywords=[keyword(arg='style', value=Constant(value='progress.data.speed'))]))], orelse=[]), Assign(targets=[Name(id='data_speed', ctx=Store())], value=Call(func=Attribute(value=Name(id='filesize', ctx=Load()), attr='decimal', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Name(id='speed', ctx=Load())], keywords=[])], keywords=[])), Return(value=Call(func=Name(id='Text', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='data_speed', ctx=Load()), conversion=-1), Constant(value='/s')])], keywords=[keyword(arg='style', value=Constant(value='progress.data.speed'))]))], decorator_list=[], returns=Name(id='Text', ctx=Load()))], decorator_list=[]), ClassDef(name='ProgressSample', bases=[Name(id='NamedTuple', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Sample of progress for a given time.')), AnnAssign(target=Name(id='timestamp', ctx=Store()), annotation=Name(id='float', ctx=Load()), simple=1), Expr(value=Constant(value='Timestamp of sample.')), AnnAssign(target=Name(id='completed', ctx=Store()), annotation=Name(id='float', ctx=Load()), simple=1), Expr(value=Constant(value='Number of steps completed.'))], decorator_list=[]), ClassDef(name='Task', bases=[], keywords=[], body=[Expr(value=Constant(value='Information regarding a progress task.\n\n    This object should be considered read-only outside of the :class:`~Progress` class.\n\n    ')), AnnAssign(target=Name(id='id', ctx=Store()), annotation=Name(id='TaskID', ctx=Load()), simple=1), Expr(value=Constant(value='Task ID associated with this task (used in Progress methods).')), AnnAssign(target=Name(id='description', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), Expr(value=Constant(value='str: Description of the task.')), AnnAssign(target=Name(id='total', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load()), simple=1), Expr(value=Constant(value='Optional[float]: Total number of steps in this task.')), AnnAssign(target=Name(id='completed', ctx=Store()), annotation=Name(id='float', ctx=Load()), simple=1), Expr(value=Constant(value='float: Number of steps completed')), AnnAssign(target=Name(id='_get_time', ctx=Store()), annotation=Name(id='GetTimeCallable', ctx=Load()), simple=1), Expr(value=Constant(value='Callable to get the current time.')), AnnAssign(target=Name(id='finished_time', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=1), Expr(value=Constant(value='float: Time task was finished.')), AnnAssign(target=Name(id='visible', ctx=Store()), annotation=Name(id='bool', ctx=Load()), value=Constant(value=True), simple=1), Expr(value=Constant(value='bool: Indicates if this task is visible in the progress display.')), AnnAssign(target=Name(id='fields', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), value=Call(func=Name(id='field', ctx=Load()), args=[], keywords=[keyword(arg='default_factory', value=Name(id='dict', ctx=Load()))]), simple=1), Expr(value=Constant(value='dict: Arbitrary fields passed in via Progress.update.')), AnnAssign(target=Name(id='start_time', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load()), value=Call(func=Name(id='field', ctx=Load()), args=[], keywords=[keyword(arg='default', value=Constant(value=None)), keyword(arg='init', value=Constant(value=False)), keyword(arg='repr', value=Constant(value=False))]), simple=1), Expr(value=Constant(value='Optional[float]: Time this task was started, or None if not started.')), AnnAssign(target=Name(id='stop_time', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load()), value=Call(func=Name(id='field', ctx=Load()), args=[], keywords=[keyword(arg='default', value=Constant(value=None)), keyword(arg='init', value=Constant(value=False)), keyword(arg='repr', value=Constant(value=False))]), simple=1), Expr(value=Constant(value='Optional[float]: Time this task was stopped, or None if not stopped.')), AnnAssign(target=Name(id='finished_speed', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=1), Expr(value=Constant(value='Optional[float]: The last speed for a finished task.')), AnnAssign(target=Name(id='_progress', ctx=Store()), annotation=Subscript(value=Name(id='Deque', ctx=Load()), slice=Name(id='ProgressSample', ctx=Load()), ctx=Load()), value=Call(func=Name(id='field', ctx=Load()), args=[], keywords=[keyword(arg='default_factory', value=Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='deque', ctx=Load()), args=[], keywords=[keyword(arg='maxlen', value=Constant(value=1000))]))), keyword(arg='init', value=Constant(value=False)), keyword(arg='repr', value=Constant(value=False))]), simple=1), AnnAssign(target=Name(id='_lock', ctx=Store()), annotation=Name(id='RLock', ctx=Load()), value=Call(func=Name(id='field', ctx=Load()), args=[], keywords=[keyword(arg='repr', value=Constant(value=False)), keyword(arg='default_factory', value=Name(id='RLock', ctx=Load()))]), simple=1), Expr(value=Constant(value='Thread lock.')), FunctionDef(name='get_time', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='float: Get the current time, in seconds.')), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_time', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='float', ctx=Load())), FunctionDef(name='started', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='bool: Check if the task as started.')), Return(value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='start_time', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='remaining', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Optional[float]: Get the number of steps remaining, if a non-None total was set.')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='total', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=None))], orelse=[]), Return(value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='total', ctx=Load()), op=Sub(), right=Attribute(value=Name(id='self', ctx=Load()), attr='completed', ctx=Load())))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load())), FunctionDef(name='elapsed', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Optional[float]: Time elapsed since task was started, or ``None`` if the task hasn't started.")), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='start_time', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=None))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='stop_time', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='stop_time', ctx=Load()), op=Sub(), right=Attribute(value=Name(id='self', ctx=Load()), attr='start_time', ctx=Load())))], orelse=[]), Return(value=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_time', ctx=Load()), args=[], keywords=[]), op=Sub(), right=Attribute(value=Name(id='self', ctx=Load()), attr='start_time', ctx=Load())))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load())), FunctionDef(name='finished', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check if the task has finished.')), Return(value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='finished_time', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='percentage', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='float: Get progress of task as a percentage. If a None total was set, returns 0')), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='total', ctx=Load())), body=[Return(value=Constant(value=0.0))], orelse=[]), Assign(targets=[Name(id='completed', ctx=Store())], value=BinOp(left=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='completed', ctx=Load()), op=Div(), right=Attribute(value=Name(id='self', ctx=Load()), attr='total', ctx=Load())), op=Mult(), right=Constant(value=100.0))), Assign(targets=[Name(id='completed', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[Constant(value=100.0), Call(func=Name(id='max', ctx=Load()), args=[Constant(value=0.0), Name(id='completed', ctx=Load())], keywords=[])], keywords=[])), Return(value=Name(id='completed', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='float', ctx=Load())), FunctionDef(name='speed', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Optional[float]: Get the estimated speed in steps per second.')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='start_time', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=None))], orelse=[]), With(items=[withitem(context_expr=Attribute(value=Name(id='self', ctx=Load()), attr='_lock', ctx=Load()))], body=[Assign(targets=[Name(id='progress', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_progress', ctx=Load())), If(test=UnaryOp(op=Not(), operand=Name(id='progress', ctx=Load())), body=[Return(value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='total_time', ctx=Store())], value=BinOp(left=Attribute(value=Subscript(value=Name(id='progress', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), attr='timestamp', ctx=Load()), op=Sub(), right=Attribute(value=Subscript(value=Name(id='progress', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='timestamp', ctx=Load()))), If(test=Compare(left=Name(id='total_time', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return(value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='iter_progress', ctx=Store())], value=Call(func=Name(id='iter', ctx=Load()), args=[Name(id='progress', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='next', ctx=Load()), args=[Name(id='iter_progress', ctx=Load())], keywords=[])), Assign(targets=[Name(id='total_completed', ctx=Store())], value=Call(func=Name(id='sum', ctx=Load()), args=[GeneratorExp(elt=Attribute(value=Name(id='sample', ctx=Load()), attr='completed', ctx=Load()), generators=[comprehension(target=Name(id='sample', ctx=Store()), iter=Name(id='iter_progress', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Name(id='speed', ctx=Store())], value=BinOp(left=Name(id='total_completed', ctx=Load()), op=Div(), right=Name(id='total_time', ctx=Load()))), Return(value=Name(id='speed', ctx=Load()))])], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load())), FunctionDef(name='time_remaining', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Optional[float]: Get estimated time to completion, or ``None`` if no data.')), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='finished', ctx=Load()), body=[Return(value=Constant(value=0.0))], orelse=[]), Assign(targets=[Name(id='speed', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='speed', ctx=Load())), If(test=UnaryOp(op=Not(), operand=Name(id='speed', ctx=Load())), body=[Return(value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='remaining', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='remaining', ctx=Load())), If(test=Compare(left=Name(id='remaining', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='estimate', ctx=Store())], value=Call(func=Name(id='ceil', ctx=Load()), args=[BinOp(left=Name(id='remaining', ctx=Load()), op=Div(), right=Name(id='speed', ctx=Load()))], keywords=[])), Return(value=Name(id='estimate', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load())), FunctionDef(name='_reset', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Reset progress.')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_progress', ctx=Load()), attr='clear', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='finished_time', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='finished_speed', ctx=Store())], value=Constant(value=None))], decorator_list=[], returns=Constant(value=None))], decorator_list=[Name(id='dataclass', ctx=Load())]), ClassDef(name='Progress', bases=[Name(id='JupyterMixin', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Renders an auto-updating progress bar(s).\n\n    Args:\n        console (Console, optional): Optional Console instance. Default will an internal Console instance writing to stdout.\n        auto_refresh (bool, optional): Enable auto refresh. If disabled, you will need to call `refresh()`.\n        refresh_per_second (Optional[float], optional): Number of times per second to refresh the progress information or None to use default (10). Defaults to None.\n        speed_estimate_period: (float, optional): Period (in seconds) used to calculate the speed estimate. Defaults to 30.\n        transient: (bool, optional): Clear the progress on exit. Defaults to False.\n        redirect_stdout: (bool, optional): Enable redirection of stdout, so ``print`` may be used. Defaults to True.\n        redirect_stderr: (bool, optional): Enable redirection of stderr. Defaults to True.\n        get_time: (Callable, optional): A callable that gets the current time, or None to use Console.get_time. Defaults to None.\n        disable (bool, optional): Disable progress display. Defaults to False\n        expand (bool, optional): Expand tasks table to fit width. Defaults to False.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='columns', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='ProgressColumn', ctx=Load())], ctx=Load()), ctx=Load())), kwonlyargs=[arg(arg='console', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Console', ctx=Load()), ctx=Load())), arg(arg='auto_refresh', annotation=Name(id='bool', ctx=Load())), arg(arg='refresh_per_second', annotation=Name(id='float', ctx=Load())), arg(arg='speed_estimate_period', annotation=Name(id='float', ctx=Load())), arg(arg='transient', annotation=Name(id='bool', ctx=Load())), arg(arg='redirect_stdout', annotation=Name(id='bool', ctx=Load())), arg(arg='redirect_stderr', annotation=Name(id='bool', ctx=Load())), arg(arg='get_time', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='GetTimeCallable', ctx=Load()), ctx=Load())), arg(arg='disable', annotation=Name(id='bool', ctx=Load())), arg(arg='expand', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=None), Constant(value=True), Constant(value=10), Constant(value=30.0), Constant(value=False), Constant(value=True), Constant(value=True), Constant(value=None), Constant(value=False), Constant(value=False)], defaults=[]), body=[Assert(test=Compare(left=Name(id='refresh_per_second', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), msg=Constant(value='refresh_per_second must be > 0')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_lock', ctx=Store())], value=Call(func=Name(id='RLock', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='columns', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='columns', ctx=Load()), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_default_columns', ctx=Load()), args=[], keywords=[])])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='speed_estimate_period', ctx=Store())], value=Name(id='speed_estimate_period', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='disable', ctx=Store())], value=Name(id='disable', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='expand', ctx=Store())], value=Name(id='expand', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_tasks', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='TaskID', ctx=Load()), Name(id='Task', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_task_index', ctx=Store()), annotation=Name(id='TaskID', ctx=Load()), value=Call(func=Name(id='TaskID', ctx=Load()), args=[Constant(value=0)], keywords=[]), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='live', ctx=Store())], value=Call(func=Name(id='Live', ctx=Load()), args=[], keywords=[keyword(arg='console', value=BoolOp(op=Or(), values=[Name(id='console', ctx=Load()), Call(func=Name(id='get_console', ctx=Load()), args=[], keywords=[])])), keyword(arg='auto_refresh', value=Name(id='auto_refresh', ctx=Load())), keyword(arg='refresh_per_second', value=Name(id='refresh_per_second', ctx=Load())), keyword(arg='transient', value=Name(id='transient', ctx=Load())), keyword(arg='redirect_stdout', value=Name(id='redirect_stdout', ctx=Load())), keyword(arg='redirect_stderr', value=Name(id='redirect_stderr', ctx=Load())), keyword(arg='get_renderable', value=Attribute(value=Name(id='self', ctx=Load()), attr='get_renderable', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='get_time', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='get_time', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='console', ctx=Load()), attr='get_time', ctx=Load())])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='print', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='console', ctx=Load()), attr='print', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='log', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='console', ctx=Load()), attr='log', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='get_default_columns', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get the default columns used for a new Progress instance:\n           - a text column for the description (TextColumn)\n           - the bar itself (BarColumn)\n           - a text column showing completion percentage (TextColumn)\n           - an estimated-time-remaining column (TimeRemainingColumn)\n        If the Progress instance is created without passing a columns argument,\n        the default columns defined here will be used.\n\n        You can also create a Progress instance using custom columns before\n        and/or after the defaults, as in this example:\n\n            progress = Progress(\n                SpinnerColumn(),\n                *Progress.default_columns(),\n                "Elapsed:",\n                TimeElapsedColumn(),\n            )\n\n        This code shows the creation of a Progress display, containing\n        a spinner to the left, the default columns, and a labeled elapsed\n        time column.\n        ')), Return(value=Tuple(elts=[Call(func=Name(id='TextColumn', ctx=Load()), args=[Constant(value='[progress.description]{task.description}')], keywords=[]), Call(func=Name(id='BarColumn', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='TaskProgressColumn', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='TimeRemainingColumn', ctx=Load()), args=[], keywords=[])], ctx=Load()))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='ProgressColumn', ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load())), FunctionDef(name='console', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='live', ctx=Load()), attr='console', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='Console', ctx=Load())), FunctionDef(name='tasks', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get a list of Task instances.')), With(items=[withitem(context_expr=Attribute(value=Name(id='self', ctx=Load()), attr='_lock', ctx=Load()))], body=[Return(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tasks', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]))])], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Task', ctx=Load()), ctx=Load())), FunctionDef(name='task_ids', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='A list of task IDs.')), With(items=[withitem(context_expr=Attribute(value=Name(id='self', ctx=Load()), attr='_lock', ctx=Load()))], body=[Return(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tasks', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[]))])], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='TaskID', ctx=Load()), ctx=Load())), FunctionDef(name='finished', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check if all tasks have been completed.')), With(items=[withitem(context_expr=Attribute(value=Name(id='self', ctx=Load()), attr='_lock', ctx=Load()))], body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='_tasks', ctx=Load())), body=[Return(value=Constant(value=True))], orelse=[]), Return(value=Call(func=Name(id='all', ctx=Load()), args=[GeneratorExp(elt=Attribute(value=Name(id='task', ctx=Load()), attr='finished', ctx=Load()), generators=[comprehension(target=Name(id='task', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tasks', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[]))])], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='start', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Start the progress display.')), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='disable', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='live', ctx=Load()), attr='start', ctx=Load()), args=[], keywords=[keyword(arg='refresh', value=Constant(value=True))]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='stop', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Stop the progress display.')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='live', ctx=Load()), attr='stop', ctx=Load()), args=[], keywords=[])), If(test=UnaryOp(op=Not(), operand=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='console', ctx=Load()), attr='is_interactive', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='console', ctx=Load()), attr='print', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__enter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='start', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='self', ctx=Load()))], decorator_list=[], returns=Constant(value='Progress')), FunctionDef(name='__exit__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='exc_type', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Type', ctx=Load()), slice=Name(id='BaseException', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='exc_val', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='BaseException', ctx=Load()), ctx=Load())), arg(arg='exc_tb', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TracebackType', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='stop', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='track', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='sequence', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='ProgressType', ctx=Load()), ctx=Load()), Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='ProgressType', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='total', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load())), arg(arg='task_id', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TaskID', ctx=Load()), ctx=Load())), arg(arg='description', annotation=Name(id='str', ctx=Load())), arg(arg='update_period', annotation=Name(id='float', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value='Working...'), Constant(value=0.1)]), body=[Expr(value=Constant(value='Track progress by iterating over a sequence.\n\n        Args:\n            sequence (Sequence[ProgressType]): A sequence of values you want to iterate over and track progress.\n            total: (float, optional): Total number of steps. Default is len(sequence).\n            task_id: (TaskID): Task to track. Default is new task.\n            description: (str, optional): Description of task, if new task is created.\n            update_period (float, optional): Minimum time (in seconds) between calls to update(). Defaults to 0.1.\n\n        Returns:\n            Iterable[ProgressType]: An iterable of values taken from the provided sequence.\n        ')), If(test=Compare(left=Name(id='total', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='total', ctx=Store())], value=BoolOp(op=Or(), values=[Call(func=Name(id='float', ctx=Load()), args=[Call(func=Name(id='length_hint', ctx=Load()), args=[Name(id='sequence', ctx=Load())], keywords=[])], keywords=[]), Constant(value=None)]))], orelse=[]), If(test=Compare(left=Name(id='task_id', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='task_id', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='add_task', ctx=Load()), args=[Name(id='description', ctx=Load())], keywords=[keyword(arg='total', value=Name(id='total', ctx=Load()))]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='task_id', ctx=Load())], keywords=[keyword(arg='total', value=Name(id='total', ctx=Load()))]))]), If(test=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='live', ctx=Load()), attr='auto_refresh', ctx=Load()), body=[With(items=[withitem(context_expr=Call(func=Name(id='_TrackThread', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='task_id', ctx=Load()), Name(id='update_period', ctx=Load())], keywords=[]), optional_vars=Name(id='track_thread', ctx=Store()))], body=[For(target=Name(id='value', ctx=Store()), iter=Name(id='sequence', ctx=Load()), body=[Expr(value=Yield(value=Name(id='value', ctx=Load()))), AugAssign(target=Attribute(value=Name(id='track_thread', ctx=Load()), attr='completed', ctx=Store()), op=Add(), value=Constant(value=1))], orelse=[])])], orelse=[Assign(targets=[Name(id='advance', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='advance', ctx=Load())), Assign(targets=[Name(id='refresh', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='refresh', ctx=Load())), For(target=Name(id='value', ctx=Store()), iter=Name(id='sequence', ctx=Load()), body=[Expr(value=Yield(value=Name(id='value', ctx=Load()))), Expr(value=Call(func=Name(id='advance', ctx=Load()), args=[Name(id='task_id', ctx=Load()), Constant(value=1)], keywords=[])), Expr(value=Call(func=Name(id='refresh', ctx=Load()), args=[], keywords=[]))], orelse=[])])], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='ProgressType', ctx=Load()), ctx=Load())), FunctionDef(name='wrap_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='file', annotation=Name(id='BinaryIO', ctx=Load())), arg(arg='total', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()))], kwonlyargs=[arg(arg='task_id', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TaskID', ctx=Load()), ctx=Load())), arg(arg='description', annotation=Name(id='str', ctx=Load()))], kw_defaults=[Constant(value=None), Constant(value='Reading...')], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Track progress file reading from a binary file.\n\n        Args:\n            file (BinaryIO): A file-like object opened in binary mode.\n            total (int, optional): Total number of bytes to read. This must be provided unless a task with a total is also given.\n            task_id (TaskID): Task to track. Default is new task.\n            description (str, optional): Description of task, if new task is created.\n\n        Returns:\n            BinaryIO: A readable file-like object in binary mode.\n\n        Raises:\n            ValueError: When no total value can be extracted from the arguments or the task.\n        ')), AnnAssign(target=Name(id='total_bytes', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=1), If(test=Compare(left=Name(id='total', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='total_bytes', ctx=Store())], value=Name(id='total', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='task_id', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[With(items=[withitem(context_expr=Attribute(value=Name(id='self', ctx=Load()), attr='_lock', ctx=Load()))], body=[Assign(targets=[Name(id='total_bytes', ctx=Store())], value=Attribute(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tasks', ctx=Load()), slice=Name(id='task_id', ctx=Load()), ctx=Load()), attr='total', ctx=Load()))])], orelse=[])]), If(test=Compare(left=Name(id='total_bytes', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value="unable to get the total number of bytes, please specify 'total'")])], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='task_id', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='task_id', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='add_task', ctx=Load()), args=[Name(id='description', ctx=Load())], keywords=[keyword(arg='total', value=Name(id='total_bytes', ctx=Load()))]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='task_id', ctx=Load())], keywords=[keyword(arg='total', value=Name(id='total_bytes', ctx=Load()))]))]), Return(value=Call(func=Name(id='_Reader', ctx=Load()), args=[Name(id='file', ctx=Load()), Name(id='self', ctx=Load()), Name(id='task_id', ctx=Load())], keywords=[keyword(arg='close_handle', value=Constant(value=False))]))], decorator_list=[], returns=Name(id='BinaryIO', ctx=Load())), FunctionDef(name='open', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='file', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Constant(value='PathLike[str]'), Name(id='bytes', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='mode', annotation=Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='rb'), ctx=Load())), arg(arg='buffering', annotation=Name(id='int', ctx=Load())), arg(arg='encoding', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='errors', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='newline', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[arg(arg='total', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='task_id', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TaskID', ctx=Load()), ctx=Load())), arg(arg='description', annotation=Name(id='str', ctx=Load()))], kw_defaults=[Constant(value=None), Constant(value=None), Constant(value='Reading...')], defaults=[UnaryOp(op=USub(), operand=Constant(value=1)), Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Pass()], decorator_list=[Attribute(value=Name(id='typing', ctx=Load()), attr='overload', ctx=Load())], returns=Name(id='BinaryIO', ctx=Load())), FunctionDef(name='open', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='file', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Constant(value='PathLike[str]'), Name(id='bytes', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='mode', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='r'), ctx=Load()), Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='rt'), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='buffering', annotation=Name(id='int', ctx=Load())), arg(arg='encoding', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='errors', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='newline', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[arg(arg='total', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='task_id', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TaskID', ctx=Load()), ctx=Load())), arg(arg='description', annotation=Name(id='str', ctx=Load()))], kw_defaults=[Constant(value=None), Constant(value=None), Constant(value='Reading...')], defaults=[UnaryOp(op=USub(), operand=Constant(value=1)), Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Pass()], decorator_list=[Attribute(value=Name(id='typing', ctx=Load()), attr='overload', ctx=Load())], returns=Name(id='TextIO', ctx=Load())), FunctionDef(name='open', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='file', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Constant(value='PathLike[str]'), Name(id='bytes', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='mode', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='rb'), ctx=Load()), Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='rt'), ctx=Load()), Subscript(value=Name(id='Literal', ctx=Load()), slice=Constant(value='r'), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='buffering', annotation=Name(id='int', ctx=Load())), arg(arg='encoding', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='errors', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='newline', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[arg(arg='total', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='task_id', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TaskID', ctx=Load()), ctx=Load())), arg(arg='description', annotation=Name(id='str', ctx=Load()))], kw_defaults=[Constant(value=None), Constant(value=None), Constant(value='Reading...')], defaults=[Constant(value='r'), UnaryOp(op=USub(), operand=Constant(value=1)), Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='Track progress while reading from a binary file.\n\n        Args:\n            path (Union[str, PathLike[str]]): The path to the file to read.\n            mode (str): The mode to use to open the file. Only supports "r", "rb" or "rt".\n            buffering (int): The buffering strategy to use, see :func:`io.open`.\n            encoding (str, optional): The encoding to use when reading in text mode, see :func:`io.open`.\n            errors (str, optional): The error handling strategy for decoding errors, see :func:`io.open`.\n            newline (str, optional): The strategy for handling newlines in text mode, see :func:`io.open`.\n            total (int, optional): Total number of bytes to read. If none given, os.stat(path).st_size is used.\n            task_id (TaskID): Task to track. Default is new task.\n            description (str, optional): Description of task, if new task is created.\n\n        Returns:\n            BinaryIO: A readable file-like object in binary mode.\n\n        Raises:\n            ValueError: When an invalid mode is given.\n        ')), Assign(targets=[Name(id='_mode', ctx=Store())], value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='mode', ctx=Load())], keywords=[keyword(arg='reverse', value=Constant(value=False))])], keywords=[])), If(test=Compare(left=Name(id='_mode', ctx=Load()), ops=[NotIn()], comparators=[Tuple(elts=[Constant(value='br'), Constant(value='rt'), Constant(value='r')], ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='invalid mode {!r}'), attr='format', ctx=Load()), args=[Name(id='mode', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='line_buffering', ctx=Store())], value=Compare(left=Name(id='buffering', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='_mode', ctx=Load()), ops=[Eq()], comparators=[Constant(value='br')]), Compare(left=Name(id='buffering', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)])]), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value="line buffering (buffering=1) isn't supported in binary mode, the default buffer size will be used"), Name(id='RuntimeWarning', ctx=Load())], keywords=[])), Assign(targets=[Name(id='buffering', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[If(test=Compare(left=Name(id='_mode', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='rt'), Constant(value='r')], ctx=Load())]), body=[If(test=Compare(left=Name(id='buffering', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value="can't have unbuffered text I/O")], keywords=[]))], orelse=[If(test=Compare(left=Name(id='buffering', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='buffering', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[])])], orelse=[])]), If(test=Compare(left=Name(id='total', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='total', ctx=Store())], value=Attribute(value=Call(func=Name(id='stat', ctx=Load()), args=[Name(id='file', ctx=Load())], keywords=[]), attr='st_size', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='task_id', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='task_id', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='add_task', ctx=Load()), args=[Name(id='description', ctx=Load())], keywords=[keyword(arg='total', value=Name(id='total', ctx=Load()))]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='task_id', ctx=Load())], keywords=[keyword(arg='total', value=Name(id='total', ctx=Load()))]))]), Assign(targets=[Name(id='handle', ctx=Store())], value=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='open', ctx=Load()), args=[Name(id='file', ctx=Load()), Constant(value='rb')], keywords=[keyword(arg='buffering', value=Name(id='buffering', ctx=Load()))])), Assign(targets=[Name(id='reader', ctx=Store())], value=Call(func=Name(id='_Reader', ctx=Load()), args=[Name(id='handle', ctx=Load()), Name(id='self', ctx=Load()), Name(id='task_id', ctx=Load())], keywords=[keyword(arg='close_handle', value=Constant(value=True))])), If(test=Compare(left=Name(id='mode', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='r'), Constant(value='rt')], ctx=Load())]), body=[Return(value=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='TextIOWrapper', ctx=Load()), args=[Name(id='reader', ctx=Load())], keywords=[keyword(arg='encoding', value=Name(id='encoding', ctx=Load())), keyword(arg='errors', value=Name(id='errors', ctx=Load())), keyword(arg='newline', value=Name(id='newline', ctx=Load())), keyword(arg='line_buffering', value=Name(id='line_buffering', ctx=Load()))]))], orelse=[]), Return(value=Name(id='reader', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='BinaryIO', ctx=Load()), Name(id='TextIO', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='start_task', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='task_id', annotation=Name(id='TaskID', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Start a task.\n\n        Starts a task (used when calculating elapsed time). You may need to call this manually,\n        if you called ``add_task`` with ``start=False``.\n\n        Args:\n            task_id (TaskID): ID of task.\n        ')), With(items=[withitem(context_expr=Attribute(value=Name(id='self', ctx=Load()), attr='_lock', ctx=Load()))], body=[Assign(targets=[Name(id='task', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tasks', ctx=Load()), slice=Name(id='task_id', ctx=Load()), ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='task', ctx=Load()), attr='start_time', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='task', ctx=Load()), attr='start_time', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_time', ctx=Load()), args=[], keywords=[]))], orelse=[])])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='stop_task', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='task_id', annotation=Name(id='TaskID', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Stop a task.\n\n        This will freeze the elapsed time on the task.\n\n        Args:\n            task_id (TaskID): ID of task.\n        ')), With(items=[withitem(context_expr=Attribute(value=Name(id='self', ctx=Load()), attr='_lock', ctx=Load()))], body=[Assign(targets=[Name(id='task', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tasks', ctx=Load()), slice=Name(id='task_id', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='current_time', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_time', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='task', ctx=Load()), attr='start_time', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='task', ctx=Load()), attr='start_time', ctx=Store())], value=Name(id='current_time', ctx=Load()))], orelse=[]), Assign(targets=[Attribute(value=Name(id='task', ctx=Load()), attr='stop_time', ctx=Store())], value=Name(id='current_time', ctx=Load()))])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='update', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='task_id', annotation=Name(id='TaskID', ctx=Load()))], kwonlyargs=[arg(arg='total', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load())), arg(arg='completed', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load())), arg(arg='advance', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load())), arg(arg='description', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='visible', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load())), arg(arg='refresh', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=False)], kwarg=arg(arg='fields', annotation=Name(id='Any', ctx=Load())), defaults=[]), body=[Expr(value=Constant(value='Update information associated with a task.\n\n        Args:\n            task_id (TaskID): Task id (returned by add_task).\n            total (float, optional): Updates task.total if not None.\n            completed (float, optional): Updates task.completed if not None.\n            advance (float, optional): Add a value to task.completed if not None.\n            description (str, optional): Change task description if not None.\n            visible (bool, optional): Set visible flag if not None.\n            refresh (bool): Force a refresh of progress information. Default is False.\n            **fields (Any): Additional data fields required for rendering.\n        ')), With(items=[withitem(context_expr=Attribute(value=Name(id='self', ctx=Load()), attr='_lock', ctx=Load()))], body=[Assign(targets=[Name(id='task', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tasks', ctx=Load()), slice=Name(id='task_id', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='completed_start', ctx=Store())], value=Attribute(value=Name(id='task', ctx=Load()), attr='completed', ctx=Load())), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='total', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='total', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='task', ctx=Load()), attr='total', ctx=Load())])]), body=[Assign(targets=[Attribute(value=Name(id='task', ctx=Load()), attr='total', ctx=Store())], value=Name(id='total', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='task', ctx=Load()), attr='_reset', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='advance', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[AugAssign(target=Attribute(value=Name(id='task', ctx=Load()), attr='completed', ctx=Store()), op=Add(), value=Name(id='advance', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='completed', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='task', ctx=Load()), attr='completed', ctx=Store())], value=Name(id='completed', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='description', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='task', ctx=Load()), attr='description', ctx=Store())], value=Name(id='description', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='visible', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='task', ctx=Load()), attr='visible', ctx=Store())], value=Name(id='visible', ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='task', ctx=Load()), attr='fields', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='fields', ctx=Load())], keywords=[])), Assign(targets=[Name(id='update_completed', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='task', ctx=Load()), attr='completed', ctx=Load()), op=Sub(), right=Name(id='completed_start', ctx=Load()))), Assign(targets=[Name(id='current_time', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_time', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='old_sample_time', ctx=Store())], value=BinOp(left=Name(id='current_time', ctx=Load()), op=Sub(), right=Attribute(value=Name(id='self', ctx=Load()), attr='speed_estimate_period', ctx=Load()))), Assign(targets=[Name(id='_progress', ctx=Store())], value=Attribute(value=Name(id='task', ctx=Load()), attr='_progress', ctx=Load())), Assign(targets=[Name(id='popleft', ctx=Store())], value=Attribute(value=Name(id='_progress', ctx=Load()), attr='popleft', ctx=Load())), While(test=BoolOp(op=And(), values=[Name(id='_progress', ctx=Load()), Compare(left=Attribute(value=Subscript(value=Name(id='_progress', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='timestamp', ctx=Load()), ops=[Lt()], comparators=[Name(id='old_sample_time', ctx=Load())])]), body=[Expr(value=Call(func=Name(id='popleft', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='update_completed', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='_progress', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='ProgressSample', ctx=Load()), args=[Name(id='current_time', ctx=Load()), Name(id='update_completed', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='task', ctx=Load()), attr='total', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='task', ctx=Load()), attr='completed', ctx=Load()), ops=[GtE()], comparators=[Attribute(value=Name(id='task', ctx=Load()), attr='total', ctx=Load())]), Compare(left=Attribute(value=Name(id='task', ctx=Load()), attr='finished_time', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Attribute(value=Name(id='task', ctx=Load()), attr='finished_time', ctx=Store())], value=Attribute(value=Name(id='task', ctx=Load()), attr='elapsed', ctx=Load()))], orelse=[])]), If(test=Name(id='refresh', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='refresh', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='reset', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='task_id', annotation=Name(id='TaskID', ctx=Load()))], kwonlyargs=[arg(arg='start', annotation=Name(id='bool', ctx=Load())), arg(arg='total', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load())), arg(arg='completed', annotation=Name(id='int', ctx=Load())), arg(arg='visible', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load())), arg(arg='description', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kw_defaults=[Constant(value=True), Constant(value=None), Constant(value=0), Constant(value=None), Constant(value=None)], kwarg=arg(arg='fields', annotation=Name(id='Any', ctx=Load())), defaults=[]), body=[Expr(value=Constant(value='Reset a task so completed is 0 and the clock is reset.\n\n        Args:\n            task_id (TaskID): ID of task.\n            start (bool, optional): Start the task after reset. Defaults to True.\n            total (float, optional): New total steps in task, or None to use current total. Defaults to None.\n            completed (int, optional): Number of steps completed. Defaults to 0.\n            visible (bool, optional): Enable display of the task. Defaults to True.\n            description (str, optional): Change task description if not None. Defaults to None.\n            **fields (str): Additional data fields required for rendering.\n        ')), Assign(targets=[Name(id='current_time', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_time', ctx=Load()), args=[], keywords=[])), With(items=[withitem(context_expr=Attribute(value=Name(id='self', ctx=Load()), attr='_lock', ctx=Load()))], body=[Assign(targets=[Name(id='task', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tasks', ctx=Load()), slice=Name(id='task_id', ctx=Load()), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='task', ctx=Load()), attr='_reset', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='task', ctx=Load()), attr='start_time', ctx=Store())], value=IfExp(test=Name(id='start', ctx=Load()), body=Name(id='current_time', ctx=Load()), orelse=Constant(value=None))), If(test=Compare(left=Name(id='total', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='task', ctx=Load()), attr='total', ctx=Store())], value=Name(id='total', ctx=Load()))], orelse=[]), Assign(targets=[Attribute(value=Name(id='task', ctx=Load()), attr='completed', ctx=Store())], value=Name(id='completed', ctx=Load())), If(test=Compare(left=Name(id='visible', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='task', ctx=Load()), attr='visible', ctx=Store())], value=Name(id='visible', ctx=Load()))], orelse=[]), If(test=Name(id='fields', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='task', ctx=Load()), attr='fields', ctx=Store())], value=Name(id='fields', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='description', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='task', ctx=Load()), attr='description', ctx=Store())], value=Name(id='description', ctx=Load()))], orelse=[]), Assign(targets=[Attribute(value=Name(id='task', ctx=Load()), attr='finished_time', ctx=Store())], value=Constant(value=None))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='refresh', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='advance', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='task_id', annotation=Name(id='TaskID', ctx=Load())), arg(arg='advance', annotation=Name(id='float', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=1)]), body=[Expr(value=Constant(value='Advance task by a number of steps.\n\n        Args:\n            task_id (TaskID): ID of task.\n            advance (float): Number of steps to advance. Default is 1.\n        ')), Assign(targets=[Name(id='current_time', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_time', ctx=Load()), args=[], keywords=[])), With(items=[withitem(context_expr=Attribute(value=Name(id='self', ctx=Load()), attr='_lock', ctx=Load()))], body=[Assign(targets=[Name(id='task', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tasks', ctx=Load()), slice=Name(id='task_id', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='completed_start', ctx=Store())], value=Attribute(value=Name(id='task', ctx=Load()), attr='completed', ctx=Load())), AugAssign(target=Attribute(value=Name(id='task', ctx=Load()), attr='completed', ctx=Store()), op=Add(), value=Name(id='advance', ctx=Load())), Assign(targets=[Name(id='update_completed', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='task', ctx=Load()), attr='completed', ctx=Load()), op=Sub(), right=Name(id='completed_start', ctx=Load()))), Assign(targets=[Name(id='old_sample_time', ctx=Store())], value=BinOp(left=Name(id='current_time', ctx=Load()), op=Sub(), right=Attribute(value=Name(id='self', ctx=Load()), attr='speed_estimate_period', ctx=Load()))), Assign(targets=[Name(id='_progress', ctx=Store())], value=Attribute(value=Name(id='task', ctx=Load()), attr='_progress', ctx=Load())), Assign(targets=[Name(id='popleft', ctx=Store())], value=Attribute(value=Name(id='_progress', ctx=Load()), attr='popleft', ctx=Load())), While(test=BoolOp(op=And(), values=[Name(id='_progress', ctx=Load()), Compare(left=Attribute(value=Subscript(value=Name(id='_progress', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='timestamp', ctx=Load()), ops=[Lt()], comparators=[Name(id='old_sample_time', ctx=Load())])]), body=[Expr(value=Call(func=Name(id='popleft', ctx=Load()), args=[], keywords=[]))], orelse=[]), While(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='_progress', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1000)]), body=[Expr(value=Call(func=Name(id='popleft', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='_progress', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='ProgressSample', ctx=Load()), args=[Name(id='current_time', ctx=Load()), Name(id='update_completed', ctx=Load())], keywords=[])], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='task', ctx=Load()), attr='total', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='task', ctx=Load()), attr='completed', ctx=Load()), ops=[GtE()], comparators=[Attribute(value=Name(id='task', ctx=Load()), attr='total', ctx=Load())]), Compare(left=Attribute(value=Name(id='task', ctx=Load()), attr='finished_time', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Attribute(value=Name(id='task', ctx=Load()), attr='finished_time', ctx=Store())], value=Attribute(value=Name(id='task', ctx=Load()), attr='elapsed', ctx=Load())), Assign(targets=[Attribute(value=Name(id='task', ctx=Load()), attr='finished_speed', ctx=Store())], value=Attribute(value=Name(id='task', ctx=Load()), attr='speed', ctx=Load()))], orelse=[])])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='refresh', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Refresh (render) the progress information.')), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='disable', ctx=Load())), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='live', ctx=Load()), attr='is_started', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='live', ctx=Load()), attr='refresh', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='get_renderable', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get a renderable for the progress display.')), Assign(targets=[Name(id='renderable', ctx=Store())], value=Call(func=Name(id='Group', ctx=Load()), args=[Starred(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_renderables', ctx=Load()), args=[], keywords=[]), ctx=Load())], keywords=[])), Return(value=Name(id='renderable', ctx=Load()))], decorator_list=[], returns=Name(id='RenderableType', ctx=Load())), FunctionDef(name='get_renderables', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get a number of renderables for the progress display.')), Assign(targets=[Name(id='table', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='make_tasks_table', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='tasks', ctx=Load())], keywords=[])), Expr(value=Yield(value=Name(id='table', ctx=Load())))], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='RenderableType', ctx=Load()), ctx=Load())), FunctionDef(name='make_tasks_table', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='tasks', annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='Task', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get a table to render the Progress display.\n\n        Args:\n            tasks (Iterable[Task]): An iterable of Task instances, one per row of the table.\n\n        Returns:\n            Table: A table instance.\n        ')), Assign(targets=[Name(id='table_columns', ctx=Store())], value=GeneratorExp(elt=IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='_column', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=Call(func=Name(id='Column', ctx=Load()), args=[], keywords=[keyword(arg='no_wrap', value=Constant(value=True))]), orelse=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='_column', ctx=Load()), attr='get_table_column', ctx=Load()), args=[], keywords=[]), attr='copy', ctx=Load()), args=[], keywords=[])), generators=[comprehension(target=Name(id='_column', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='columns', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='table', ctx=Store())], value=Call(func=Attribute(value=Name(id='Table', ctx=Load()), attr='grid', ctx=Load()), args=[Starred(value=Name(id='table_columns', ctx=Load()), ctx=Load())], keywords=[keyword(arg='padding', value=Tuple(elts=[Constant(value=0), Constant(value=1)], ctx=Load())), keyword(arg='expand', value=Attribute(value=Name(id='self', ctx=Load()), attr='expand', ctx=Load()))])), For(target=Name(id='task', ctx=Store()), iter=Name(id='tasks', ctx=Load()), body=[If(test=Attribute(value=Name(id='task', ctx=Load()), attr='visible', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='table', ctx=Load()), attr='add_row', ctx=Load()), args=[Starred(value=GeneratorExp(elt=IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='column', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=Call(func=Attribute(value=Name(id='column', ctx=Load()), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='task', value=Name(id='task', ctx=Load()))]), orelse=Call(func=Name(id='column', ctx=Load()), args=[Name(id='task', ctx=Load())], keywords=[])), generators=[comprehension(target=Name(id='column', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='columns', ctx=Load()), ifs=[], is_async=0)]), ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='table', ctx=Load()))], decorator_list=[], returns=Name(id='Table', ctx=Load())), FunctionDef(name='__rich__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Makes the Progress class itself renderable.')), With(items=[withitem(context_expr=Attribute(value=Name(id='self', ctx=Load()), attr='_lock', ctx=Load()))], body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_renderable', ctx=Load()), args=[], keywords=[]))])], decorator_list=[], returns=Name(id='RenderableType', ctx=Load())), FunctionDef(name='add_task', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='description', annotation=Name(id='str', ctx=Load())), arg(arg='start', annotation=Name(id='bool', ctx=Load())), arg(arg='total', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load())), arg(arg='completed', annotation=Name(id='int', ctx=Load())), arg(arg='visible', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='fields', annotation=Name(id='Any', ctx=Load())), defaults=[Constant(value=True), Constant(value=100.0), Constant(value=0), Constant(value=True)]), body=[Expr(value=Constant(value="Add a new 'task' to the Progress display.\n\n        Args:\n            description (str): A description of the task.\n            start (bool, optional): Start the task immediately (to calculate elapsed time). If set to False,\n                you will need to call `start` manually. Defaults to True.\n            total (float, optional): Number of total steps in the progress if known.\n                Set to None to render a pulsing animation. Defaults to 100.\n            completed (int, optional): Number of steps completed so far. Defaults to 0.\n            visible (bool, optional): Enable display of the task. Defaults to True.\n            **fields (str): Additional data fields required for rendering.\n\n        Returns:\n            TaskID: An ID you can use when calling `update`.\n        ")), With(items=[withitem(context_expr=Attribute(value=Name(id='self', ctx=Load()), attr='_lock', ctx=Load()))], body=[Assign(targets=[Name(id='task', ctx=Store())], value=Call(func=Name(id='Task', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_task_index', ctx=Load()), Name(id='description', ctx=Load()), Name(id='total', ctx=Load()), Name(id='completed', ctx=Load())], keywords=[keyword(arg='visible', value=Name(id='visible', ctx=Load())), keyword(arg='fields', value=Name(id='fields', ctx=Load())), keyword(arg='_get_time', value=Attribute(value=Name(id='self', ctx=Load()), attr='get_time', ctx=Load())), keyword(arg='_lock', value=Attribute(value=Name(id='self', ctx=Load()), attr='_lock', ctx=Load()))])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tasks', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='_task_index', ctx=Load()), ctx=Store())], value=Name(id='task', ctx=Load())), If(test=Name(id='start', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='start_task', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_task_index', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='new_task_index', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_task_index', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_task_index', ctx=Store())], value=Call(func=Name(id='TaskID', ctx=Load()), args=[BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_task_index', ctx=Load())], keywords=[]), op=Add(), right=Constant(value=1))], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='refresh', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='new_task_index', ctx=Load()))], decorator_list=[], returns=Name(id='TaskID', ctx=Load())), FunctionDef(name='remove_task', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='task_id', annotation=Name(id='TaskID', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Delete a task if it exists.\n\n        Args:\n            task_id (TaskID): A task ID.\n\n        ')), With(items=[withitem(context_expr=Attribute(value=Name(id='self', ctx=Load()), attr='_lock', ctx=Load()))], body=[Delete(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_tasks', ctx=Load()), slice=Name(id='task_id', ctx=Load()), ctx=Del())])])], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__')]), body=[Import(names=[alias(name='random')]), Import(names=[alias(name='time')]), ImportFrom(module='panel', names=[alias(name='Panel')], level=1), ImportFrom(module='rule', names=[alias(name='Rule')], level=1), ImportFrom(module='syntax', names=[alias(name='Syntax')], level=1), ImportFrom(module='table', names=[alias(name='Table')], level=1), Assign(targets=[Name(id='syntax', ctx=Store())], value=Call(func=Name(id='Syntax', ctx=Load()), args=[Constant(value='def loop_last(values: Iterable[T]) -> Iterable[Tuple[bool, T]]:\n    """Iterate and generate a tuple with a flag for last value."""\n    iter_values = iter(values)\n    try:\n        previous_value = next(iter_values)\n    except StopIteration:\n        return\n    for value in iter_values:\n        yield False, previous_value\n        previous_value = value\n    yield True, previous_value'), Constant(value='python')], keywords=[keyword(arg='line_numbers', value=Constant(value=True))])), Assign(targets=[Name(id='table', ctx=Store())], value=Call(func=Name(id='Table', ctx=Load()), args=[Constant(value='foo'), Constant(value='bar'), Constant(value='baz')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='table', ctx=Load()), attr='add_row', ctx=Load()), args=[Constant(value='1'), Constant(value='2'), Constant(value='3')], keywords=[])), Assign(targets=[Name(id='progress_renderables', ctx=Store())], value=List(elts=[Constant(value='Text may be printed while the progress bars are rendering.'), Call(func=Name(id='Panel', ctx=Load()), args=[Constant(value='In fact, [i]any[/i] renderable will work')], keywords=[]), Constant(value='Such as [magenta]tables[/]...'), Name(id='table', ctx=Load()), Constant(value='Pretty printed structures...'), Dict(keys=[Constant(value='type'), Constant(value='text')], values=[Constant(value='example'), Constant(value='Pretty printed')]), Constant(value='Syntax...'), Name(id='syntax', ctx=Load()), Call(func=Name(id='Rule', ctx=Load()), args=[Constant(value='Give it a try!')], keywords=[])], ctx=Load())), ImportFrom(module='itertools', names=[alias(name='cycle')], level=0), Assign(targets=[Name(id='examples', ctx=Store())], value=Call(func=Name(id='cycle', ctx=Load()), args=[Name(id='progress_renderables', ctx=Load())], keywords=[])), Assign(targets=[Name(id='console', ctx=Store())], value=Call(func=Name(id='Console', ctx=Load()), args=[], keywords=[keyword(arg='record', value=Constant(value=True))])), With(items=[withitem(context_expr=Call(func=Name(id='Progress', ctx=Load()), args=[Call(func=Name(id='SpinnerColumn', ctx=Load()), args=[], keywords=[]), Starred(value=Call(func=Attribute(value=Name(id='Progress', ctx=Load()), attr='get_default_columns', ctx=Load()), args=[], keywords=[]), ctx=Load()), Call(func=Name(id='TimeElapsedColumn', ctx=Load()), args=[], keywords=[])], keywords=[keyword(arg='console', value=Name(id='console', ctx=Load())), keyword(arg='transient', value=Constant(value=False))]), optional_vars=Name(id='progress', ctx=Store()))], body=[Assign(targets=[Name(id='task1', ctx=Store())], value=Call(func=Attribute(value=Name(id='progress', ctx=Load()), attr='add_task', ctx=Load()), args=[Constant(value='[red]Downloading')], keywords=[keyword(arg='total', value=Constant(value=1000))])), Assign(targets=[Name(id='task2', ctx=Store())], value=Call(func=Attribute(value=Name(id='progress', ctx=Load()), attr='add_task', ctx=Load()), args=[Constant(value='[green]Processing')], keywords=[keyword(arg='total', value=Constant(value=1000))])), Assign(targets=[Name(id='task3', ctx=Store())], value=Call(func=Attribute(value=Name(id='progress', ctx=Load()), attr='add_task', ctx=Load()), args=[Constant(value='[yellow]Thinking')], keywords=[keyword(arg='total', value=Constant(value=None))])), While(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='progress', ctx=Load()), attr='finished', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='progress', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='task1', ctx=Load())], keywords=[keyword(arg='advance', value=Constant(value=0.5))])), Expr(value=Call(func=Attribute(value=Name(id='progress', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='task2', ctx=Load())], keywords=[keyword(arg='advance', value=Constant(value=0.3))])), Expr(value=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='sleep', ctx=Load()), args=[Constant(value=0.01)], keywords=[])), If(test=Compare(left=Call(func=Attribute(value=Name(id='random', ctx=Load()), attr='randint', ctx=Load()), args=[Constant(value=0), Constant(value=100)], keywords=[]), ops=[Lt()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Attribute(value=Name(id='progress', ctx=Load()), attr='log', ctx=Load()), args=[Call(func=Name(id='next', ctx=Load()), args=[Name(id='examples', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], orelse=[])])], orelse=[])], type_ignores=[])