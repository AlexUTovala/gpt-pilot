Module(body=[Import(names=[alias(name='platform')]), Import(names=[alias(name='re')]), ImportFrom(module='colorsys', names=[alias(name='rgb_to_hls')], level=0), ImportFrom(module='enum', names=[alias(name='IntEnum')], level=0), ImportFrom(module='functools', names=[alias(name='lru_cache')], level=0), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING'), alias(name='NamedTuple'), alias(name='Optional'), alias(name='Tuple')], level=0), ImportFrom(module='_palettes', names=[alias(name='EIGHT_BIT_PALETTE'), alias(name='STANDARD_PALETTE'), alias(name='WINDOWS_PALETTE')], level=1), ImportFrom(module='color_triplet', names=[alias(name='ColorTriplet')], level=1), ImportFrom(module='repr', names=[alias(name='Result'), alias(name='rich_repr')], level=1), ImportFrom(module='terminal_theme', names=[alias(name='DEFAULT_TERMINAL_THEME')], level=1), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='terminal_theme', names=[alias(name='TerminalTheme')], level=1), ImportFrom(module='text', names=[alias(name='Text')], level=1)], orelse=[]), Assign(targets=[Name(id='WINDOWS', ctx=Store())], value=Compare(left=Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='system', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Constant(value='Windows')])), ClassDef(name='ColorSystem', bases=[Name(id='IntEnum', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='One of the 3 color system supported by terminals.')), Assign(targets=[Name(id='STANDARD', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='EIGHT_BIT', ctx=Store())], value=Constant(value=2)), Assign(targets=[Name(id='TRUECOLOR', ctx=Store())], value=Constant(value=3)), Assign(targets=[Name(id='WINDOWS', ctx=Store())], value=Constant(value=4)), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[Constant(value='ColorSystem.'), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), conversion=-1)]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='__str__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='repr', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[]), ClassDef(name='ColorType', bases=[Name(id='IntEnum', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Type of color stored in Color class.')), Assign(targets=[Name(id='DEFAULT', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='STANDARD', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='EIGHT_BIT', ctx=Store())], value=Constant(value=2)), Assign(targets=[Name(id='TRUECOLOR', ctx=Store())], value=Constant(value=3)), Assign(targets=[Name(id='WINDOWS', ctx=Store())], value=Constant(value=4)), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[Constant(value='ColorType.'), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), conversion=-1)]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='ANSI_COLOR_NAMES', ctx=Store())], value=Dict(keys=[Constant(value='black'), Constant(value='red'), Constant(value='green'), Constant(value='yellow'), Constant(value='blue'), Constant(value='magenta'), Constant(value='cyan'), Constant(value='white'), Constant(value='bright_black'), Constant(value='bright_red'), Constant(value='bright_green'), Constant(value='bright_yellow'), Constant(value='bright_blue'), Constant(value='bright_magenta'), Constant(value='bright_cyan'), Constant(value='bright_white'), Constant(value='grey0'), Constant(value='gray0'), Constant(value='navy_blue'), Constant(value='dark_blue'), Constant(value='blue3'), Constant(value='blue1'), Constant(value='dark_green'), Constant(value='deep_sky_blue4'), Constant(value='dodger_blue3'), Constant(value='dodger_blue2'), Constant(value='green4'), Constant(value='spring_green4'), Constant(value='turquoise4'), Constant(value='deep_sky_blue3'), Constant(value='dodger_blue1'), Constant(value='green3'), Constant(value='spring_green3'), Constant(value='dark_cyan'), Constant(value='light_sea_green'), Constant(value='deep_sky_blue2'), Constant(value='deep_sky_blue1'), Constant(value='spring_green2'), Constant(value='cyan3'), Constant(value='dark_turquoise'), Constant(value='turquoise2'), Constant(value='green1'), Constant(value='spring_green1'), Constant(value='medium_spring_green'), Constant(value='cyan2'), Constant(value='cyan1'), Constant(value='dark_red'), Constant(value='deep_pink4'), Constant(value='purple4'), Constant(value='purple3'), Constant(value='blue_violet'), Constant(value='orange4'), Constant(value='grey37'), Constant(value='gray37'), Constant(value='medium_purple4'), Constant(value='slate_blue3'), Constant(value='royal_blue1'), Constant(value='chartreuse4'), Constant(value='dark_sea_green4'), Constant(value='pale_turquoise4'), Constant(value='steel_blue'), Constant(value='steel_blue3'), Constant(value='cornflower_blue'), Constant(value='chartreuse3'), Constant(value='cadet_blue'), Constant(value='sky_blue3'), Constant(value='steel_blue1'), Constant(value='pale_green3'), Constant(value='sea_green3'), Constant(value='aquamarine3'), Constant(value='medium_turquoise'), Constant(value='chartreuse2'), Constant(value='sea_green2'), Constant(value='sea_green1'), Constant(value='aquamarine1'), Constant(value='dark_slate_gray2'), Constant(value='dark_magenta'), Constant(value='dark_violet'), Constant(value='purple'), Constant(value='light_pink4'), Constant(value='plum4'), Constant(value='medium_purple3'), Constant(value='slate_blue1'), Constant(value='yellow4'), Constant(value='wheat4'), Constant(value='grey53'), Constant(value='gray53'), Constant(value='light_slate_grey'), Constant(value='light_slate_gray'), Constant(value='medium_purple'), Constant(value='light_slate_blue'), Constant(value='dark_olive_green3'), Constant(value='dark_sea_green'), Constant(value='light_sky_blue3'), Constant(value='sky_blue2'), Constant(value='dark_sea_green3'), Constant(value='dark_slate_gray3'), Constant(value='sky_blue1'), Constant(value='chartreuse1'), Constant(value='light_green'), Constant(value='pale_green1'), Constant(value='dark_slate_gray1'), Constant(value='red3'), Constant(value='medium_violet_red'), Constant(value='magenta3'), Constant(value='dark_orange3'), Constant(value='indian_red'), Constant(value='hot_pink3'), Constant(value='medium_orchid3'), Constant(value='medium_orchid'), Constant(value='medium_purple2'), Constant(value='dark_goldenrod'), Constant(value='light_salmon3'), Constant(value='rosy_brown'), Constant(value='grey63'), Constant(value='gray63'), Constant(value='medium_purple1'), Constant(value='gold3'), Constant(value='dark_khaki'), Constant(value='navajo_white3'), Constant(value='grey69'), Constant(value='gray69'), Constant(value='light_steel_blue3'), Constant(value='light_steel_blue'), Constant(value='yellow3'), Constant(value='dark_sea_green2'), Constant(value='light_cyan3'), Constant(value='light_sky_blue1'), Constant(value='green_yellow'), Constant(value='dark_olive_green2'), Constant(value='dark_sea_green1'), Constant(value='pale_turquoise1'), Constant(value='deep_pink3'), Constant(value='magenta2'), Constant(value='hot_pink2'), Constant(value='orchid'), Constant(value='medium_orchid1'), Constant(value='orange3'), Constant(value='light_pink3'), Constant(value='pink3'), Constant(value='plum3'), Constant(value='violet'), Constant(value='light_goldenrod3'), Constant(value='tan'), Constant(value='misty_rose3'), Constant(value='thistle3'), Constant(value='plum2'), Constant(value='khaki3'), Constant(value='light_goldenrod2'), Constant(value='light_yellow3'), Constant(value='grey84'), Constant(value='gray84'), Constant(value='light_steel_blue1'), Constant(value='yellow2'), Constant(value='dark_olive_green1'), Constant(value='honeydew2'), Constant(value='light_cyan1'), Constant(value='red1'), Constant(value='deep_pink2'), Constant(value='deep_pink1'), Constant(value='magenta1'), Constant(value='orange_red1'), Constant(value='indian_red1'), Constant(value='hot_pink'), Constant(value='dark_orange'), Constant(value='salmon1'), Constant(value='light_coral'), Constant(value='pale_violet_red1'), Constant(value='orchid2'), Constant(value='orchid1'), Constant(value='orange1'), Constant(value='sandy_brown'), Constant(value='light_salmon1'), Constant(value='light_pink1'), Constant(value='pink1'), Constant(value='plum1'), Constant(value='gold1'), Constant(value='navajo_white1'), Constant(value='misty_rose1'), Constant(value='thistle1'), Constant(value='yellow1'), Constant(value='light_goldenrod1'), Constant(value='khaki1'), Constant(value='wheat1'), Constant(value='cornsilk1'), Constant(value='grey100'), Constant(value='gray100'), Constant(value='grey3'), Constant(value='gray3'), Constant(value='grey7'), Constant(value='gray7'), Constant(value='grey11'), Constant(value='gray11'), Constant(value='grey15'), Constant(value='gray15'), Constant(value='grey19'), Constant(value='gray19'), Constant(value='grey23'), Constant(value='gray23'), Constant(value='grey27'), Constant(value='gray27'), Constant(value='grey30'), Constant(value='gray30'), Constant(value='grey35'), Constant(value='gray35'), Constant(value='grey39'), Constant(value='gray39'), Constant(value='grey42'), Constant(value='gray42'), Constant(value='grey46'), Constant(value='gray46'), Constant(value='grey50'), Constant(value='gray50'), Constant(value='grey54'), Constant(value='gray54'), Constant(value='grey58'), Constant(value='gray58'), Constant(value='grey62'), Constant(value='gray62'), Constant(value='grey66'), Constant(value='gray66'), Constant(value='grey70'), Constant(value='gray70'), Constant(value='grey74'), Constant(value='gray74'), Constant(value='grey78'), Constant(value='gray78'), Constant(value='grey82'), Constant(value='gray82'), Constant(value='grey85'), Constant(value='gray85'), Constant(value='grey89'), Constant(value='gray89'), Constant(value='grey93'), Constant(value='gray93')], values=[Constant(value=0), Constant(value=1), Constant(value=2), Constant(value=3), Constant(value=4), Constant(value=5), Constant(value=6), Constant(value=7), Constant(value=8), Constant(value=9), Constant(value=10), Constant(value=11), Constant(value=12), Constant(value=13), Constant(value=14), Constant(value=15), Constant(value=16), Constant(value=16), Constant(value=17), Constant(value=18), Constant(value=20), Constant(value=21), Constant(value=22), Constant(value=25), Constant(value=26), Constant(value=27), Constant(value=28), Constant(value=29), Constant(value=30), Constant(value=32), Constant(value=33), Constant(value=40), Constant(value=41), Constant(value=36), Constant(value=37), Constant(value=38), Constant(value=39), Constant(value=47), Constant(value=43), Constant(value=44), Constant(value=45), Constant(value=46), Constant(value=48), Constant(value=49), Constant(value=50), Constant(value=51), Constant(value=88), Constant(value=125), Constant(value=55), Constant(value=56), Constant(value=57), Constant(value=94), Constant(value=59), Constant(value=59), Constant(value=60), Constant(value=62), Constant(value=63), Constant(value=64), Constant(value=71), Constant(value=66), Constant(value=67), Constant(value=68), Constant(value=69), Constant(value=76), Constant(value=73), Constant(value=74), Constant(value=81), Constant(value=114), Constant(value=78), Constant(value=79), Constant(value=80), Constant(value=112), Constant(value=83), Constant(value=85), Constant(value=122), Constant(value=87), Constant(value=91), Constant(value=128), Constant(value=129), Constant(value=95), Constant(value=96), Constant(value=98), Constant(value=99), Constant(value=106), Constant(value=101), Constant(value=102), Constant(value=102), Constant(value=103), Constant(value=103), Constant(value=104), Constant(value=105), Constant(value=149), Constant(value=108), Constant(value=110), Constant(value=111), Constant(value=150), Constant(value=116), Constant(value=117), Constant(value=118), Constant(value=120), Constant(value=156), Constant(value=123), Constant(value=160), Constant(value=126), Constant(value=164), Constant(value=166), Constant(value=167), Constant(value=168), Constant(value=133), Constant(value=134), Constant(value=140), Constant(value=136), Constant(value=173), Constant(value=138), Constant(value=139), Constant(value=139), Constant(value=141), Constant(value=178), Constant(value=143), Constant(value=144), Constant(value=145), Constant(value=145), Constant(value=146), Constant(value=147), Constant(value=184), Constant(value=157), Constant(value=152), Constant(value=153), Constant(value=154), Constant(value=155), Constant(value=193), Constant(value=159), Constant(value=162), Constant(value=200), Constant(value=169), Constant(value=170), Constant(value=207), Constant(value=172), Constant(value=174), Constant(value=175), Constant(value=176), Constant(value=177), Constant(value=179), Constant(value=180), Constant(value=181), Constant(value=182), Constant(value=183), Constant(value=185), Constant(value=222), Constant(value=187), Constant(value=188), Constant(value=188), Constant(value=189), Constant(value=190), Constant(value=192), Constant(value=194), Constant(value=195), Constant(value=196), Constant(value=197), Constant(value=199), Constant(value=201), Constant(value=202), Constant(value=204), Constant(value=206), Constant(value=208), Constant(value=209), Constant(value=210), Constant(value=211), Constant(value=212), Constant(value=213), Constant(value=214), Constant(value=215), Constant(value=216), Constant(value=217), Constant(value=218), Constant(value=219), Constant(value=220), Constant(value=223), Constant(value=224), Constant(value=225), Constant(value=226), Constant(value=227), Constant(value=228), Constant(value=229), Constant(value=230), Constant(value=231), Constant(value=231), Constant(value=232), Constant(value=232), Constant(value=233), Constant(value=233), Constant(value=234), Constant(value=234), Constant(value=235), Constant(value=235), Constant(value=236), Constant(value=236), Constant(value=237), Constant(value=237), Constant(value=238), Constant(value=238), Constant(value=239), Constant(value=239), Constant(value=240), Constant(value=240), Constant(value=241), Constant(value=241), Constant(value=242), Constant(value=242), Constant(value=243), Constant(value=243), Constant(value=244), Constant(value=244), Constant(value=245), Constant(value=245), Constant(value=246), Constant(value=246), Constant(value=247), Constant(value=247), Constant(value=248), Constant(value=248), Constant(value=249), Constant(value=249), Constant(value=250), Constant(value=250), Constant(value=251), Constant(value=251), Constant(value=252), Constant(value=252), Constant(value=253), Constant(value=253), Constant(value=254), Constant(value=254), Constant(value=255), Constant(value=255)])), ClassDef(name='ColorParseError', bases=[Name(id='Exception', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='The color could not be parsed.'))], decorator_list=[]), Assign(targets=[Name(id='RE_COLOR', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='^\n\\#([0-9a-f]{6})$|\ncolor\\(([0-9]{1,3})\\)$|\nrgb\\(([\\d\\s,]+)\\)$\n'), Attribute(value=Name(id='re', ctx=Load()), attr='VERBOSE', ctx=Load())], keywords=[])), ClassDef(name='Color', bases=[Name(id='NamedTuple', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Terminal color definition.')), AnnAssign(target=Name(id='name', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), Expr(value=Constant(value='The name of the color (typically the input to Color.parse).')), AnnAssign(target=Name(id='type', ctx=Store()), annotation=Name(id='ColorType', ctx=Load()), simple=1), Expr(value=Constant(value='The type of the color.')), AnnAssign(target=Name(id='number', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=1), Expr(value=Constant(value='The color number, if a standard color, or None.')), AnnAssign(target=Name(id='triplet', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='ColorTriplet', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=1), Expr(value=Constant(value='A triplet of color components, if an RGB color.')), FunctionDef(name='__rich__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Displays the actual color if Rich printed.')), ImportFrom(module='style', names=[alias(name='Style')], level=1), ImportFrom(module='text', names=[alias(name='Text')], level=1), Return(value=Call(func=Attribute(value=Name(id='Text', ctx=Load()), attr='assemble', ctx=Load()), args=[JoinedStr(values=[Constant(value='<color '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), conversion=114), Constant(value=' ('), FormattedValue(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='type', ctx=Load()), attr='name', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), conversion=-1), Constant(value=')')]), Tuple(elts=[Constant(value='⬤'), Call(func=Name(id='Style', ctx=Load()), args=[], keywords=[keyword(arg='color', value=Name(id='self', ctx=Load()))])], ctx=Load()), Constant(value=' >')], keywords=[]))], decorator_list=[], returns=Constant(value='Text')), FunctionDef(name='__rich_repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Yield(value=Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()))), Expr(value=Yield(value=Attribute(value=Name(id='self', ctx=Load()), attr='type', ctx=Load()))), Expr(value=Yield(value=Tuple(elts=[Constant(value='number'), Attribute(value=Name(id='self', ctx=Load()), attr='number', ctx=Load()), Constant(value=None)], ctx=Load()))), Expr(value=Yield(value=Tuple(elts=[Constant(value='triplet'), Attribute(value=Name(id='self', ctx=Load()), attr='triplet', ctx=Load()), Constant(value=None)], ctx=Load())))], decorator_list=[], returns=Name(id='Result', ctx=Load())), FunctionDef(name='system', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get the native color system for this color.')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='type', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='ColorType', ctx=Load()), attr='DEFAULT', ctx=Load())]), body=[Return(value=Attribute(value=Name(id='ColorSystem', ctx=Load()), attr='STANDARD', ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='ColorSystem', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='type', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='ColorSystem', ctx=Load())), FunctionDef(name='is_system_defined', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check if the color is ultimately defined by the system.')), Return(value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='system', ctx=Load()), ops=[NotIn()], comparators=[Tuple(elts=[Attribute(value=Name(id='ColorSystem', ctx=Load()), attr='EIGHT_BIT', ctx=Load()), Attribute(value=Name(id='ColorSystem', ctx=Load()), attr='TRUECOLOR', ctx=Load())], ctx=Load())]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='is_default', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check if the color is a default color.')), Return(value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='type', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='ColorType', ctx=Load()), attr='DEFAULT', ctx=Load())]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='get_truecolor', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='theme', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='TerminalTheme'), ctx=Load())), arg(arg='foreground', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=True)]), body=[Expr(value=Constant(value='Get an equivalent color triplet for this color.\n\n        Args:\n            theme (TerminalTheme, optional): Optional terminal theme, or None to use default. Defaults to None.\n            foreground (bool, optional): True for a foreground color, or False for background. Defaults to True.\n\n        Returns:\n            ColorTriplet: A color triplet containing RGB components.\n        ')), If(test=Compare(left=Name(id='theme', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='theme', ctx=Store())], value=Name(id='DEFAULT_TERMINAL_THEME', ctx=Load()))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='type', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='ColorType', ctx=Load()), attr='TRUECOLOR', ctx=Load())]), body=[Assert(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='triplet', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='triplet', ctx=Load()))], orelse=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='type', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='ColorType', ctx=Load()), attr='EIGHT_BIT', ctx=Load())]), body=[Assert(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='number', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Return(value=Subscript(value=Name(id='EIGHT_BIT_PALETTE', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='number', ctx=Load()), ctx=Load()))], orelse=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='type', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='ColorType', ctx=Load()), attr='STANDARD', ctx=Load())]), body=[Assert(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='number', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Return(value=Subscript(value=Attribute(value=Name(id='theme', ctx=Load()), attr='ansi_colors', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='number', ctx=Load()), ctx=Load()))], orelse=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='type', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='ColorType', ctx=Load()), attr='WINDOWS', ctx=Load())]), body=[Assert(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='number', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Return(value=Subscript(value=Name(id='WINDOWS_PALETTE', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='number', ctx=Load()), ctx=Load()))], orelse=[Assert(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='number', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])), Return(value=IfExp(test=Name(id='foreground', ctx=Load()), body=Attribute(value=Name(id='theme', ctx=Load()), attr='foreground_color', ctx=Load()), orelse=Attribute(value=Name(id='theme', ctx=Load()), attr='background_color', ctx=Load())))])])])])], decorator_list=[], returns=Name(id='ColorTriplet', ctx=Load())), FunctionDef(name='from_ansi', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='number', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Create a Color number from it's 8-bit ansi number.\n\n        Args:\n            number (int): A number between 0-255 inclusive.\n\n        Returns:\n            Color: A new Color instance.\n        ")), Return(value=Call(func=Name(id='cls', ctx=Load()), args=[], keywords=[keyword(arg='name', value=JoinedStr(values=[Constant(value='color('), FormattedValue(value=Name(id='number', ctx=Load()), conversion=-1), Constant(value=')')])), keyword(arg='type', value=IfExp(test=Compare(left=Name(id='number', ctx=Load()), ops=[Lt()], comparators=[Constant(value=16)]), body=Attribute(value=Name(id='ColorType', ctx=Load()), attr='STANDARD', ctx=Load()), orelse=Attribute(value=Name(id='ColorType', ctx=Load()), attr='EIGHT_BIT', ctx=Load()))), keyword(arg='number', value=Name(id='number', ctx=Load()))]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Constant(value='Color')), FunctionDef(name='from_triplet', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='triplet', annotation=Constant(value='ColorTriplet'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Create a truecolor RGB color from a triplet of values.\n\n        Args:\n            triplet (ColorTriplet): A color triplet containing red, green and blue components.\n\n        Returns:\n            Color: A new color object.\n        ')), Return(value=Call(func=Name(id='cls', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Attribute(value=Name(id='triplet', ctx=Load()), attr='hex', ctx=Load())), keyword(arg='type', value=Attribute(value=Name(id='ColorType', ctx=Load()), attr='TRUECOLOR', ctx=Load())), keyword(arg='triplet', value=Name(id='triplet', ctx=Load()))]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Constant(value='Color')), FunctionDef(name='from_rgb', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='red', annotation=Name(id='float', ctx=Load())), arg(arg='green', annotation=Name(id='float', ctx=Load())), arg(arg='blue', annotation=Name(id='float', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Create a truecolor from three color components in the range(0->255).\n\n        Args:\n            red (float): Red component in range 0-255.\n            green (float): Green component in range 0-255.\n            blue (float): Blue component in range 0-255.\n\n        Returns:\n            Color: A new color object.\n        ')), Return(value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='from_triplet', ctx=Load()), args=[Call(func=Name(id='ColorTriplet', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Name(id='red', ctx=Load())], keywords=[]), Call(func=Name(id='int', ctx=Load()), args=[Name(id='green', ctx=Load())], keywords=[]), Call(func=Name(id='int', ctx=Load()), args=[Name(id='blue', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Constant(value='Color')), FunctionDef(name='default', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get a Color instance representing the default color.\n\n        Returns:\n            Color: Default color.\n        ')), Return(value=Call(func=Name(id='cls', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='default')), keyword(arg='type', value=Attribute(value=Name(id='ColorType', ctx=Load()), attr='DEFAULT', ctx=Load()))]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Constant(value='Color')), FunctionDef(name='parse', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='color', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Parse a color definition.')), Assign(targets=[Name(id='original_color', ctx=Store())], value=Name(id='color', ctx=Load())), Assign(targets=[Name(id='color', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='color', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), attr='strip', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='color', ctx=Load()), ops=[Eq()], comparators=[Constant(value='default')]), body=[Return(value=Call(func=Name(id='cls', ctx=Load()), args=[Name(id='color', ctx=Load())], keywords=[keyword(arg='type', value=Attribute(value=Name(id='ColorType', ctx=Load()), attr='DEFAULT', ctx=Load()))]))], orelse=[]), Assign(targets=[Name(id='color_number', ctx=Store())], value=Call(func=Attribute(value=Name(id='ANSI_COLOR_NAMES', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='color', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='color_number', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=Call(func=Name(id='cls', ctx=Load()), args=[Name(id='color', ctx=Load())], keywords=[keyword(arg='type', value=IfExp(test=Compare(left=Name(id='color_number', ctx=Load()), ops=[Lt()], comparators=[Constant(value=16)]), body=Attribute(value=Name(id='ColorType', ctx=Load()), attr='STANDARD', ctx=Load()), orelse=Attribute(value=Name(id='ColorType', ctx=Load()), attr='EIGHT_BIT', ctx=Load()))), keyword(arg='number', value=Name(id='color_number', ctx=Load()))]))], orelse=[]), Assign(targets=[Name(id='color_match', ctx=Store())], value=Call(func=Attribute(value=Name(id='RE_COLOR', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='color', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='color_match', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ColorParseError', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='original_color', ctx=Load()), conversion=114), Constant(value=' is not a valid color')])], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='color_24', ctx=Store()), Name(id='color_8', ctx=Store()), Name(id='color_rgb', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='color_match', ctx=Load()), attr='groups', ctx=Load()), args=[], keywords=[])), If(test=Name(id='color_24', ctx=Load()), body=[Assign(targets=[Name(id='triplet', ctx=Store())], value=Call(func=Name(id='ColorTriplet', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='color_24', ctx=Load()), slice=Slice(lower=Constant(value=0), upper=Constant(value=2)), ctx=Load()), Constant(value=16)], keywords=[]), Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='color_24', ctx=Load()), slice=Slice(lower=Constant(value=2), upper=Constant(value=4)), ctx=Load()), Constant(value=16)], keywords=[]), Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='color_24', ctx=Load()), slice=Slice(lower=Constant(value=4), upper=Constant(value=6)), ctx=Load()), Constant(value=16)], keywords=[])], keywords=[])), Return(value=Call(func=Name(id='cls', ctx=Load()), args=[Name(id='color', ctx=Load()), Attribute(value=Name(id='ColorType', ctx=Load()), attr='TRUECOLOR', ctx=Load())], keywords=[keyword(arg='triplet', value=Name(id='triplet', ctx=Load()))]))], orelse=[If(test=Name(id='color_8', ctx=Load()), body=[Assign(targets=[Name(id='number', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Name(id='color_8', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='number', ctx=Load()), ops=[Gt()], comparators=[Constant(value=255)]), body=[Raise(exc=Call(func=Name(id='ColorParseError', ctx=Load()), args=[JoinedStr(values=[Constant(value='color number must be <= 255 in '), FormattedValue(value=Name(id='color', ctx=Load()), conversion=114)])], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='cls', ctx=Load()), args=[Name(id='color', ctx=Load())], keywords=[keyword(arg='type', value=IfExp(test=Compare(left=Name(id='number', ctx=Load()), ops=[Lt()], comparators=[Constant(value=16)]), body=Attribute(value=Name(id='ColorType', ctx=Load()), attr='STANDARD', ctx=Load()), orelse=Attribute(value=Name(id='ColorType', ctx=Load()), attr='EIGHT_BIT', ctx=Load()))), keyword(arg='number', value=Name(id='number', ctx=Load()))]))], orelse=[Assign(targets=[Name(id='components', ctx=Store())], value=Call(func=Attribute(value=Name(id='color_rgb', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=',')], keywords=[])), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='components', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Constant(value=3)]), body=[Raise(exc=Call(func=Name(id='ColorParseError', ctx=Load()), args=[JoinedStr(values=[Constant(value='expected three components in '), FormattedValue(value=Name(id='original_color', ctx=Load()), conversion=114)])], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='red', ctx=Store()), Name(id='green', ctx=Store()), Name(id='blue', ctx=Store())], ctx=Store())], value=Name(id='components', ctx=Load())), Assign(targets=[Name(id='triplet', ctx=Store())], value=Call(func=Name(id='ColorTriplet', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Name(id='red', ctx=Load())], keywords=[]), Call(func=Name(id='int', ctx=Load()), args=[Name(id='green', ctx=Load())], keywords=[]), Call(func=Name(id='int', ctx=Load()), args=[Name(id='blue', ctx=Load())], keywords=[])], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='all', ctx=Load()), args=[GeneratorExp(elt=Compare(left=Name(id='component', ctx=Load()), ops=[LtE()], comparators=[Constant(value=255)]), generators=[comprehension(target=Name(id='component', ctx=Store()), iter=Name(id='triplet', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), body=[Raise(exc=Call(func=Name(id='ColorParseError', ctx=Load()), args=[JoinedStr(values=[Constant(value='color components must be <= 255 in '), FormattedValue(value=Name(id='original_color', ctx=Load()), conversion=114)])], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='cls', ctx=Load()), args=[Name(id='color', ctx=Load()), Attribute(value=Name(id='ColorType', ctx=Load()), attr='TRUECOLOR', ctx=Load())], keywords=[keyword(arg='triplet', value=Name(id='triplet', ctx=Load()))]))])])], decorator_list=[Name(id='classmethod', ctx=Load()), Call(func=Name(id='lru_cache', ctx=Load()), args=[], keywords=[keyword(arg='maxsize', value=Constant(value=1024))])], returns=Constant(value='Color')), FunctionDef(name='get_ansi_codes', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='foreground', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Expr(value=Constant(value='Get the ANSI escape codes for this color.')), Assign(targets=[Name(id='_type', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='type', ctx=Load())), If(test=Compare(left=Name(id='_type', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='ColorType', ctx=Load()), attr='DEFAULT', ctx=Load())]), body=[Return(value=Tuple(elts=[IfExp(test=Name(id='foreground', ctx=Load()), body=Constant(value='39'), orelse=Constant(value='49'))], ctx=Load()))], orelse=[If(test=Compare(left=Name(id='_type', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='ColorType', ctx=Load()), attr='WINDOWS', ctx=Load())]), body=[Assign(targets=[Name(id='number', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='number', ctx=Load())), Assert(test=Compare(left=Name(id='number', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Tuple(elts=[Name(id='fore', ctx=Store()), Name(id='back', ctx=Store())], ctx=Store())], value=IfExp(test=Compare(left=Name(id='number', ctx=Load()), ops=[Lt()], comparators=[Constant(value=8)]), body=Tuple(elts=[Constant(value=30), Constant(value=40)], ctx=Load()), orelse=Tuple(elts=[Constant(value=82), Constant(value=92)], ctx=Load()))), Return(value=Tuple(elts=[Call(func=Name(id='str', ctx=Load()), args=[IfExp(test=Name(id='foreground', ctx=Load()), body=BinOp(left=Name(id='fore', ctx=Load()), op=Add(), right=Name(id='number', ctx=Load())), orelse=BinOp(left=Name(id='back', ctx=Load()), op=Add(), right=Name(id='number', ctx=Load())))], keywords=[])], ctx=Load()))], orelse=[If(test=Compare(left=Name(id='_type', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='ColorType', ctx=Load()), attr='STANDARD', ctx=Load())]), body=[Assign(targets=[Name(id='number', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='number', ctx=Load())), Assert(test=Compare(left=Name(id='number', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Tuple(elts=[Name(id='fore', ctx=Store()), Name(id='back', ctx=Store())], ctx=Store())], value=IfExp(test=Compare(left=Name(id='number', ctx=Load()), ops=[Lt()], comparators=[Constant(value=8)]), body=Tuple(elts=[Constant(value=30), Constant(value=40)], ctx=Load()), orelse=Tuple(elts=[Constant(value=82), Constant(value=92)], ctx=Load()))), Return(value=Tuple(elts=[Call(func=Name(id='str', ctx=Load()), args=[IfExp(test=Name(id='foreground', ctx=Load()), body=BinOp(left=Name(id='fore', ctx=Load()), op=Add(), right=Name(id='number', ctx=Load())), orelse=BinOp(left=Name(id='back', ctx=Load()), op=Add(), right=Name(id='number', ctx=Load())))], keywords=[])], ctx=Load()))], orelse=[If(test=Compare(left=Name(id='_type', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='ColorType', ctx=Load()), attr='EIGHT_BIT', ctx=Load())]), body=[Assert(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='number', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Return(value=Tuple(elts=[IfExp(test=Name(id='foreground', ctx=Load()), body=Constant(value='38'), orelse=Constant(value='48')), Constant(value='5'), Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='number', ctx=Load())], keywords=[])], ctx=Load()))], orelse=[Assert(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='triplet', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Tuple(elts=[Name(id='red', ctx=Store()), Name(id='green', ctx=Store()), Name(id='blue', ctx=Store())], ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='triplet', ctx=Load())), Return(value=Tuple(elts=[IfExp(test=Name(id='foreground', ctx=Load()), body=Constant(value='38'), orelse=Constant(value='48')), Constant(value='2'), Call(func=Name(id='str', ctx=Load()), args=[Name(id='red', ctx=Load())], keywords=[]), Call(func=Name(id='str', ctx=Load()), args=[Name(id='green', ctx=Load())], keywords=[]), Call(func=Name(id='str', ctx=Load()), args=[Name(id='blue', ctx=Load())], keywords=[])], ctx=Load()))])])])])], decorator_list=[Call(func=Name(id='lru_cache', ctx=Load()), args=[], keywords=[keyword(arg='maxsize', value=Constant(value=1024))])], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load())), FunctionDef(name='downgrade', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='system', annotation=Name(id='ColorSystem', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Downgrade a color system to a system with fewer colors.')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='type', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Attribute(value=Name(id='ColorType', ctx=Load()), attr='DEFAULT', ctx=Load()), Name(id='system', ctx=Load())], ctx=Load())]), body=[Return(value=Name(id='self', ctx=Load()))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='system', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='ColorSystem', ctx=Load()), attr='EIGHT_BIT', ctx=Load())]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='system', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='ColorSystem', ctx=Load()), attr='TRUECOLOR', ctx=Load())])]), body=[Assert(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='triplet', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Tuple(elts=[Name(id='_h', ctx=Store()), Name(id='l', ctx=Store()), Name(id='s', ctx=Store())], ctx=Store())], value=Call(func=Name(id='rgb_to_hls', ctx=Load()), args=[Starred(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='triplet', ctx=Load()), attr='normalized', ctx=Load()), ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='s', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0.15)]), body=[Assign(targets=[Name(id='gray', ctx=Store())], value=Call(func=Name(id='round', ctx=Load()), args=[BinOp(left=Name(id='l', ctx=Load()), op=Mult(), right=Constant(value=25.0))], keywords=[])), If(test=Compare(left=Name(id='gray', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='color_number', ctx=Store())], value=Constant(value=16))], orelse=[If(test=Compare(left=Name(id='gray', ctx=Load()), ops=[Eq()], comparators=[Constant(value=25)]), body=[Assign(targets=[Name(id='color_number', ctx=Store())], value=Constant(value=231))], orelse=[Assign(targets=[Name(id='color_number', ctx=Store())], value=BinOp(left=Constant(value=231), op=Add(), right=Name(id='gray', ctx=Load())))])]), Return(value=Call(func=Name(id='Color', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), Attribute(value=Name(id='ColorType', ctx=Load()), attr='EIGHT_BIT', ctx=Load())], keywords=[keyword(arg='number', value=Name(id='color_number', ctx=Load()))]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='red', ctx=Store()), Name(id='green', ctx=Store()), Name(id='blue', ctx=Store())], ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='triplet', ctx=Load())), Assign(targets=[Name(id='six_red', ctx=Store())], value=IfExp(test=Compare(left=Name(id='red', ctx=Load()), ops=[Lt()], comparators=[Constant(value=95)]), body=BinOp(left=Name(id='red', ctx=Load()), op=Div(), right=Constant(value=95)), orelse=BinOp(left=Constant(value=1), op=Add(), right=BinOp(left=BinOp(left=Name(id='red', ctx=Load()), op=Sub(), right=Constant(value=95)), op=Div(), right=Constant(value=40))))), Assign(targets=[Name(id='six_green', ctx=Store())], value=IfExp(test=Compare(left=Name(id='green', ctx=Load()), ops=[Lt()], comparators=[Constant(value=95)]), body=BinOp(left=Name(id='green', ctx=Load()), op=Div(), right=Constant(value=95)), orelse=BinOp(left=Constant(value=1), op=Add(), right=BinOp(left=BinOp(left=Name(id='green', ctx=Load()), op=Sub(), right=Constant(value=95)), op=Div(), right=Constant(value=40))))), Assign(targets=[Name(id='six_blue', ctx=Store())], value=IfExp(test=Compare(left=Name(id='blue', ctx=Load()), ops=[Lt()], comparators=[Constant(value=95)]), body=BinOp(left=Name(id='blue', ctx=Load()), op=Div(), right=Constant(value=95)), orelse=BinOp(left=Constant(value=1), op=Add(), right=BinOp(left=BinOp(left=Name(id='blue', ctx=Load()), op=Sub(), right=Constant(value=95)), op=Div(), right=Constant(value=40))))), Assign(targets=[Name(id='color_number', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=Constant(value=16), op=Add(), right=BinOp(left=Constant(value=36), op=Mult(), right=Call(func=Name(id='round', ctx=Load()), args=[Name(id='six_red', ctx=Load())], keywords=[]))), op=Add(), right=BinOp(left=Constant(value=6), op=Mult(), right=Call(func=Name(id='round', ctx=Load()), args=[Name(id='six_green', ctx=Load())], keywords=[]))), op=Add(), right=Call(func=Name(id='round', ctx=Load()), args=[Name(id='six_blue', ctx=Load())], keywords=[]))), Return(value=Call(func=Name(id='Color', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), Attribute(value=Name(id='ColorType', ctx=Load()), attr='EIGHT_BIT', ctx=Load())], keywords=[keyword(arg='number', value=Name(id='color_number', ctx=Load()))]))], orelse=[If(test=Compare(left=Name(id='system', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='ColorSystem', ctx=Load()), attr='STANDARD', ctx=Load())]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='system', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='ColorSystem', ctx=Load()), attr='TRUECOLOR', ctx=Load())]), body=[Assert(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='triplet', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Name(id='triplet', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='triplet', ctx=Load()))], orelse=[Assert(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='number', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Name(id='triplet', ctx=Store())], value=Call(func=Name(id='ColorTriplet', ctx=Load()), args=[Starred(value=Subscript(value=Name(id='EIGHT_BIT_PALETTE', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='number', ctx=Load()), ctx=Load()), ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='color_number', ctx=Store())], value=Call(func=Attribute(value=Name(id='STANDARD_PALETTE', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='triplet', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='Color', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), Attribute(value=Name(id='ColorType', ctx=Load()), attr='STANDARD', ctx=Load())], keywords=[keyword(arg='number', value=Name(id='color_number', ctx=Load()))]))], orelse=[If(test=Compare(left=Name(id='system', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='ColorSystem', ctx=Load()), attr='WINDOWS', ctx=Load())]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='system', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='ColorSystem', ctx=Load()), attr='TRUECOLOR', ctx=Load())]), body=[Assert(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='triplet', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Name(id='triplet', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='triplet', ctx=Load()))], orelse=[Assert(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='number', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='number', ctx=Load()), ops=[Lt()], comparators=[Constant(value=16)]), body=[Return(value=Call(func=Name(id='Color', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), Attribute(value=Name(id='ColorType', ctx=Load()), attr='WINDOWS', ctx=Load())], keywords=[keyword(arg='number', value=Attribute(value=Name(id='self', ctx=Load()), attr='number', ctx=Load()))]))], orelse=[]), Assign(targets=[Name(id='triplet', ctx=Store())], value=Call(func=Name(id='ColorTriplet', ctx=Load()), args=[Starred(value=Subscript(value=Name(id='EIGHT_BIT_PALETTE', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='number', ctx=Load()), ctx=Load()), ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='color_number', ctx=Store())], value=Call(func=Attribute(value=Name(id='WINDOWS_PALETTE', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='triplet', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='Color', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), Attribute(value=Name(id='ColorType', ctx=Load()), attr='WINDOWS', ctx=Load())], keywords=[keyword(arg='number', value=Name(id='color_number', ctx=Load()))]))], orelse=[])])]), Return(value=Name(id='self', ctx=Load()))], decorator_list=[Call(func=Name(id='lru_cache', ctx=Load()), args=[], keywords=[keyword(arg='maxsize', value=Constant(value=1024))])], returns=Constant(value='Color'))], decorator_list=[Name(id='rich_repr', ctx=Load())]), FunctionDef(name='parse_rgb_hex', args=arguments(posonlyargs=[], args=[arg(arg='hex_color', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Parse six hex characters in to RGB triplet.')), Assert(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='hex_color', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=6)]), msg=Constant(value='must be 6 characters')), Assign(targets=[Name(id='color', ctx=Store())], value=Call(func=Name(id='ColorTriplet', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='hex_color', ctx=Load()), slice=Slice(lower=Constant(value=0), upper=Constant(value=2)), ctx=Load()), Constant(value=16)], keywords=[]), Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='hex_color', ctx=Load()), slice=Slice(lower=Constant(value=2), upper=Constant(value=4)), ctx=Load()), Constant(value=16)], keywords=[]), Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='hex_color', ctx=Load()), slice=Slice(lower=Constant(value=4), upper=Constant(value=6)), ctx=Load()), Constant(value=16)], keywords=[])], keywords=[])), Return(value=Name(id='color', ctx=Load()))], decorator_list=[], returns=Name(id='ColorTriplet', ctx=Load())), FunctionDef(name='blend_rgb', args=arguments(posonlyargs=[], args=[arg(arg='color1', annotation=Name(id='ColorTriplet', ctx=Load())), arg(arg='color2', annotation=Name(id='ColorTriplet', ctx=Load())), arg(arg='cross_fade', annotation=Name(id='float', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0.5)]), body=[Expr(value=Constant(value='Blend one RGB color in to another.')), Assign(targets=[Tuple(elts=[Name(id='r1', ctx=Store()), Name(id='g1', ctx=Store()), Name(id='b1', ctx=Store())], ctx=Store())], value=Name(id='color1', ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='r2', ctx=Store()), Name(id='g2', ctx=Store()), Name(id='b2', ctx=Store())], ctx=Store())], value=Name(id='color2', ctx=Load())), Assign(targets=[Name(id='new_color', ctx=Store())], value=Call(func=Name(id='ColorTriplet', ctx=Load()), args=[Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Name(id='r1', ctx=Load()), op=Add(), right=BinOp(left=BinOp(left=Name(id='r2', ctx=Load()), op=Sub(), right=Name(id='r1', ctx=Load())), op=Mult(), right=Name(id='cross_fade', ctx=Load())))], keywords=[]), Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Name(id='g1', ctx=Load()), op=Add(), right=BinOp(left=BinOp(left=Name(id='g2', ctx=Load()), op=Sub(), right=Name(id='g1', ctx=Load())), op=Mult(), right=Name(id='cross_fade', ctx=Load())))], keywords=[]), Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Name(id='b1', ctx=Load()), op=Add(), right=BinOp(left=BinOp(left=Name(id='b2', ctx=Load()), op=Sub(), right=Name(id='b1', ctx=Load())), op=Mult(), right=Name(id='cross_fade', ctx=Load())))], keywords=[])], keywords=[])), Return(value=Name(id='new_color', ctx=Load()))], decorator_list=[], returns=Name(id='ColorTriplet', ctx=Load())), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__')]), body=[ImportFrom(module='console', names=[alias(name='Console')], level=1), ImportFrom(module='table', names=[alias(name='Table')], level=1), ImportFrom(module='text', names=[alias(name='Text')], level=1), Assign(targets=[Name(id='console', ctx=Store())], value=Call(func=Name(id='Console', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='table', ctx=Store())], value=Call(func=Name(id='Table', ctx=Load()), args=[], keywords=[keyword(arg='show_footer', value=Constant(value=False)), keyword(arg='show_edge', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Name(id='table', ctx=Load()), attr='add_column', ctx=Load()), args=[Constant(value='Color')], keywords=[keyword(arg='width', value=Constant(value=10)), keyword(arg='overflow', value=Constant(value='ellipsis'))])), Expr(value=Call(func=Attribute(value=Name(id='table', ctx=Load()), attr='add_column', ctx=Load()), args=[Constant(value='Number')], keywords=[keyword(arg='justify', value=Constant(value='right')), keyword(arg='style', value=Constant(value='yellow'))])), Expr(value=Call(func=Attribute(value=Name(id='table', ctx=Load()), attr='add_column', ctx=Load()), args=[Constant(value='Name')], keywords=[keyword(arg='style', value=Constant(value='green'))])), Expr(value=Call(func=Attribute(value=Name(id='table', ctx=Load()), attr='add_column', ctx=Load()), args=[Constant(value='Hex')], keywords=[keyword(arg='style', value=Constant(value='blue'))])), Expr(value=Call(func=Attribute(value=Name(id='table', ctx=Load()), attr='add_column', ctx=Load()), args=[Constant(value='RGB')], keywords=[keyword(arg='style', value=Constant(value='magenta'))])), Assign(targets=[Name(id='colors', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[GeneratorExp(elt=Tuple(elts=[Name(id='v', ctx=Load()), Name(id='k', ctx=Load())], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='ANSI_COLOR_NAMES', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[])), For(target=Tuple(elts=[Name(id='color_number', ctx=Store()), Name(id='name', ctx=Store())], ctx=Store()), iter=Name(id='colors', ctx=Load()), body=[If(test=Compare(left=Constant(value='grey'), ops=[In()], comparators=[Name(id='name', ctx=Load())]), body=[Continue()], orelse=[]), Assign(targets=[Name(id='color_cell', ctx=Store())], value=Call(func=Name(id='Text', ctx=Load()), args=[BinOp(left=Constant(value=' '), op=Mult(), right=Constant(value=10))], keywords=[keyword(arg='style', value=JoinedStr(values=[Constant(value='on '), FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1)]))])), If(test=Compare(left=Name(id='color_number', ctx=Load()), ops=[Lt()], comparators=[Constant(value=16)]), body=[Expr(value=Call(func=Attribute(value=Name(id='table', ctx=Load()), attr='add_row', ctx=Load()), args=[Name(id='color_cell', ctx=Load()), JoinedStr(values=[FormattedValue(value=Name(id='color_number', ctx=Load()), conversion=-1)]), Call(func=Name(id='Text', ctx=Load()), args=[JoinedStr(values=[Constant(value='"'), FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1), Constant(value='"')])], keywords=[])], keywords=[]))], orelse=[Assign(targets=[Name(id='color', ctx=Store())], value=Subscript(value=Name(id='EIGHT_BIT_PALETTE', ctx=Load()), slice=Name(id='color_number', ctx=Load()), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='table', ctx=Load()), attr='add_row', ctx=Load()), args=[Name(id='color_cell', ctx=Load()), Call(func=Name(id='str', ctx=Load()), args=[Name(id='color_number', ctx=Load())], keywords=[]), Call(func=Name(id='Text', ctx=Load()), args=[JoinedStr(values=[Constant(value='"'), FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1), Constant(value='"')])], keywords=[]), Attribute(value=Name(id='color', ctx=Load()), attr='hex', ctx=Load()), Attribute(value=Name(id='color', ctx=Load()), attr='rgb', ctx=Load())], keywords=[]))])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='print', ctx=Load()), args=[Name(id='table', ctx=Load())], keywords=[]))], orelse=[])], type_ignores=[])