Module(body=[Import(names=[alias(name='configparser')]), ImportFrom(module='typing', names=[alias(name='Dict'), alias(name='List'), alias(name='IO'), alias(name='Mapping'), alias(name='Optional')], level=0), ImportFrom(module='default_styles', names=[alias(name='DEFAULT_STYLES')], level=1), ImportFrom(module='style', names=[alias(name='Style'), alias(name='StyleType')], level=1), ClassDef(name='Theme', bases=[], keywords=[], body=[Expr(value=Constant(value='A container for style information, used by :class:`~rich.console.Console`.\n\n    Args:\n        styles (Dict[str, Style], optional): A mapping of style names on to styles. Defaults to None for a theme with no styles.\n        inherit (bool, optional): Inherit default styles. Defaults to True.\n    ')), AnnAssign(target=Name(id='styles', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Style', ctx=Load())], ctx=Load()), ctx=Load()), simple=1), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='styles', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Mapping', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='StyleType', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='inherit', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=True)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='styles', ctx=Store())], value=IfExp(test=Name(id='inherit', ctx=Load()), body=Call(func=Attribute(value=Name(id='DEFAULT_STYLES', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[]), orelse=Dict(keys=[], values=[]))), If(test=Compare(left=Name(id='styles', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='styles', ctx=Load()), attr='update', ctx=Load()), args=[DictComp(key=Name(id='name', ctx=Load()), value=IfExp(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='style', ctx=Load()), Name(id='Style', ctx=Load())], keywords=[]), body=Name(id='style', ctx=Load()), orelse=Call(func=Attribute(value=Name(id='Style', ctx=Load()), attr='parse', ctx=Load()), args=[Name(id='style', ctx=Load())], keywords=[])), generators=[comprehension(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='style', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='styles', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='config', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get contents of a config file for this theme.')), Assign(targets=[Name(id='config', ctx=Store())], value=BinOp(left=Constant(value='[styles]\n'), op=Add(), right=Call(func=Attribute(value=Constant(value='\n'), attr='join', ctx=Load()), args=[GeneratorExp(elt=JoinedStr(values=[FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1), Constant(value=' = '), FormattedValue(value=Name(id='style', ctx=Load()), conversion=-1)]), generators=[comprehension(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='style', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='styles', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[]), ifs=[], is_async=0)])], keywords=[]))), Return(value=Name(id='config', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='from_file', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='config_file', annotation=Subscript(value=Name(id='IO', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='source', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='inherit', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=True)]), body=[Expr(value=Constant(value='Load a theme from a text mode file.\n\n        Args:\n            config_file (IO[str]): An open conf file.\n            source (str, optional): The filename of the open file. Defaults to None.\n            inherit (bool, optional): Inherit default styles. Defaults to True.\n\n        Returns:\n            Theme: A New theme instance.\n        ')), Assign(targets=[Name(id='config', ctx=Store())], value=Call(func=Attribute(value=Name(id='configparser', ctx=Load()), attr='ConfigParser', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='read_file', ctx=Load()), args=[Name(id='config_file', ctx=Load())], keywords=[keyword(arg='source', value=Name(id='source', ctx=Load()))])), Assign(targets=[Name(id='styles', ctx=Store())], value=DictComp(key=Name(id='name', ctx=Load()), value=Call(func=Attribute(value=Name(id='Style', ctx=Load()), attr='parse', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]), generators=[comprehension(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='items', ctx=Load()), args=[Constant(value='styles')], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='theme', ctx=Store())], value=Call(func=Name(id='Theme', ctx=Load()), args=[Name(id='styles', ctx=Load())], keywords=[keyword(arg='inherit', value=Name(id='inherit', ctx=Load()))])), Return(value=Name(id='theme', ctx=Load()))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Constant(value='Theme')), FunctionDef(name='read', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='path', annotation=Name(id='str', ctx=Load())), arg(arg='inherit', annotation=Name(id='bool', ctx=Load())), arg(arg='encoding', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None)]), body=[Expr(value=Constant(value='Read a theme from a path.\n\n        Args:\n            path (str): Path to a config file readable by Python configparser module.\n            inherit (bool, optional): Inherit default styles. Defaults to True.\n            encoding (str, optional): Encoding of the config file. Defaults to None.\n\n        Returns:\n            Theme: A new theme instance.\n        ')), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='path', ctx=Load()), Constant(value='rt')], keywords=[keyword(arg='encoding', value=Name(id='encoding', ctx=Load()))]), optional_vars=Name(id='config_file', ctx=Store()))], body=[Return(value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='from_file', ctx=Load()), args=[Name(id='config_file', ctx=Load())], keywords=[keyword(arg='source', value=Name(id='path', ctx=Load())), keyword(arg='inherit', value=Name(id='inherit', ctx=Load()))]))])], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Constant(value='Theme'))], decorator_list=[]), ClassDef(name='ThemeStackError', bases=[Name(id='Exception', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Base exception for errors related to the theme stack.'))], decorator_list=[]), ClassDef(name='ThemeStack', bases=[], keywords=[], body=[Expr(value=Constant(value='A stack of themes.\n\n    Args:\n        theme (Theme): A theme instance\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='theme', annotation=Name(id='Theme', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_entries', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Style', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), value=List(elts=[Attribute(value=Name(id='theme', ctx=Load()), attr='styles', ctx=Load())], ctx=Load()), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='get', ctx=Store())], value=Attribute(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_entries', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), attr='get', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='push_theme', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='theme', annotation=Name(id='Theme', ctx=Load())), arg(arg='inherit', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Expr(value=Constant(value='Push a theme on the top of the stack.\n\n        Args:\n            theme (Theme): A Theme instance.\n            inherit (boolean, optional): Inherit styles from current top of stack.\n        ')), AnnAssign(target=Name(id='styles', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Style', ctx=Load())], ctx=Load()), ctx=Load()), simple=1), Assign(targets=[Name(id='styles', ctx=Store())], value=IfExp(test=Name(id='inherit', ctx=Load()), body=Dict(keys=[None, None], values=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_entries', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), Attribute(value=Name(id='theme', ctx=Load()), attr='styles', ctx=Load())]), orelse=Call(func=Attribute(value=Attribute(value=Name(id='theme', ctx=Load()), attr='styles', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[]))), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_entries', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='styles', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='get', ctx=Store())], value=Attribute(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_entries', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), attr='get', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='pop_theme', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Pop (and discard) the top-most theme.')), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_entries', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Raise(exc=Call(func=Name(id='ThemeStackError', ctx=Load()), args=[Constant(value='Unable to pop base theme')], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_entries', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='get', ctx=Store())], value=Attribute(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_entries', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), attr='get', ctx=Load()))], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__')]), body=[Assign(targets=[Name(id='theme', ctx=Store())], value=Call(func=Name(id='Theme', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Attribute(value=Name(id='theme', ctx=Load()), attr='config', ctx=Load())], keywords=[]))], orelse=[])], type_ignores=[])