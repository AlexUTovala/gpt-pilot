Module(body=[Import(names=[alias(name='logging')]), ImportFrom(module='datetime', names=[alias(name='datetime')], level=0), ImportFrom(module='logging', names=[alias(name='Handler'), alias(name='LogRecord')], level=0), ImportFrom(module='pathlib', names=[alias(name='Path')], level=0), ImportFrom(module='types', names=[alias(name='ModuleType')], level=0), ImportFrom(module='typing', names=[alias(name='ClassVar'), alias(name='Iterable'), alias(name='List'), alias(name='Optional'), alias(name='Type'), alias(name='Union')], level=0), ImportFrom(module='pip._vendor.rich._null_file', names=[alias(name='NullFile')], level=0), ImportFrom(names=[alias(name='get_console')], level=1), ImportFrom(module='_log_render', names=[alias(name='FormatTimeCallable'), alias(name='LogRender')], level=1), ImportFrom(module='console', names=[alias(name='Console'), alias(name='ConsoleRenderable')], level=1), ImportFrom(module='highlighter', names=[alias(name='Highlighter'), alias(name='ReprHighlighter')], level=1), ImportFrom(module='text', names=[alias(name='Text')], level=1), ImportFrom(module='traceback', names=[alias(name='Traceback')], level=1), ClassDef(name='RichHandler', bases=[Name(id='Handler', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A logging handler that renders output with Rich. The time / level / message and file are displayed in columns.\n    The level is color coded, and the message is syntax highlighted.\n\n    Note:\n        Be careful when enabling console markup in log messages if you have configured logging for libraries not\n        under your control. If a dependency writes messages containing square brackets, it may not produce the intended output.\n\n    Args:\n        level (Union[int, str], optional): Log level. Defaults to logging.NOTSET.\n        console (:class:`~rich.console.Console`, optional): Optional console instance to write logs.\n            Default will use a global console instance writing to stdout.\n        show_time (bool, optional): Show a column for the time. Defaults to True.\n        omit_repeated_times (bool, optional): Omit repetition of the same time. Defaults to True.\n        show_level (bool, optional): Show a column for the level. Defaults to True.\n        show_path (bool, optional): Show the path to the original log call. Defaults to True.\n        enable_link_path (bool, optional): Enable terminal link of path column to file. Defaults to True.\n        highlighter (Highlighter, optional): Highlighter to style log messages, or None to use ReprHighlighter. Defaults to None.\n        markup (bool, optional): Enable console markup in log messages. Defaults to False.\n        rich_tracebacks (bool, optional): Enable rich tracebacks with syntax highlighting and formatting. Defaults to False.\n        tracebacks_width (Optional[int], optional): Number of characters used to render tracebacks, or None for full width. Defaults to None.\n        tracebacks_extra_lines (int, optional): Additional lines of code to render tracebacks, or None for full width. Defaults to None.\n        tracebacks_theme (str, optional): Override pygments theme used in traceback.\n        tracebacks_word_wrap (bool, optional): Enable word wrapping of long tracebacks lines. Defaults to True.\n        tracebacks_show_locals (bool, optional): Enable display of locals in tracebacks. Defaults to False.\n        tracebacks_suppress (Sequence[Union[str, ModuleType]]): Optional sequence of modules or paths to exclude from traceback.\n        locals_max_length (int, optional): Maximum length of containers before abbreviating, or None for no abbreviation.\n            Defaults to 10.\n        locals_max_string (int, optional): Maximum length of string before truncating, or None to disable. Defaults to 80.\n        log_time_format (Union[str, TimeFormatterCallable], optional): If ``log_time`` is enabled, either string for strftime or callable that formats the time. Defaults to "[%x %X] ".\n        keywords (List[str], optional): List of words to highlight instead of ``RichHandler.KEYWORDS``.\n    ')), AnnAssign(target=Name(id='KEYWORDS', ctx=Store()), annotation=Subscript(value=Name(id='ClassVar', ctx=Load()), slice=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load()), ctx=Load()), value=List(elts=[Constant(value='GET'), Constant(value='POST'), Constant(value='HEAD'), Constant(value='PUT'), Constant(value='DELETE'), Constant(value='OPTIONS'), Constant(value='TRACE'), Constant(value='PATCH')], ctx=Load()), simple=1), AnnAssign(target=Name(id='HIGHLIGHTER_CLASS', ctx=Store()), annotation=Subscript(value=Name(id='ClassVar', ctx=Load()), slice=Subscript(value=Name(id='Type', ctx=Load()), slice=Name(id='Highlighter', ctx=Load()), ctx=Load()), ctx=Load()), value=Name(id='ReprHighlighter', ctx=Load()), simple=1), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='level', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='console', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Console', ctx=Load()), ctx=Load()))], kwonlyargs=[arg(arg='show_time', annotation=Name(id='bool', ctx=Load())), arg(arg='omit_repeated_times', annotation=Name(id='bool', ctx=Load())), arg(arg='show_level', annotation=Name(id='bool', ctx=Load())), arg(arg='show_path', annotation=Name(id='bool', ctx=Load())), arg(arg='enable_link_path', annotation=Name(id='bool', ctx=Load())), arg(arg='highlighter', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Highlighter', ctx=Load()), ctx=Load())), arg(arg='markup', annotation=Name(id='bool', ctx=Load())), arg(arg='rich_tracebacks', annotation=Name(id='bool', ctx=Load())), arg(arg='tracebacks_width', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='tracebacks_extra_lines', annotation=Name(id='int', ctx=Load())), arg(arg='tracebacks_theme', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='tracebacks_word_wrap', annotation=Name(id='bool', ctx=Load())), arg(arg='tracebacks_show_locals', annotation=Name(id='bool', ctx=Load())), arg(arg='tracebacks_suppress', annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='ModuleType', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='locals_max_length', annotation=Name(id='int', ctx=Load())), arg(arg='locals_max_string', annotation=Name(id='int', ctx=Load())), arg(arg='log_time_format', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='FormatTimeCallable', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='keywords', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load()))], kw_defaults=[Constant(value=True), Constant(value=True), Constant(value=True), Constant(value=True), Constant(value=True), Constant(value=None), Constant(value=False), Constant(value=False), Constant(value=None), Constant(value=3), Constant(value=None), Constant(value=True), Constant(value=False), Tuple(elts=[], ctx=Load()), Constant(value=10), Constant(value=80), Constant(value='[%x %X]'), Constant(value=None)], defaults=[Attribute(value=Name(id='logging', ctx=Load()), attr='NOTSET', ctx=Load()), Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='level', value=Name(id='level', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='console', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='console', ctx=Load()), Call(func=Name(id='get_console', ctx=Load()), args=[], keywords=[])])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='highlighter', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='highlighter', ctx=Load()), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='HIGHLIGHTER_CLASS', ctx=Load()), args=[], keywords=[])])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_log_render', ctx=Store())], value=Call(func=Name(id='LogRender', ctx=Load()), args=[], keywords=[keyword(arg='show_time', value=Name(id='show_time', ctx=Load())), keyword(arg='show_level', value=Name(id='show_level', ctx=Load())), keyword(arg='show_path', value=Name(id='show_path', ctx=Load())), keyword(arg='time_format', value=Name(id='log_time_format', ctx=Load())), keyword(arg='omit_repeated_times', value=Name(id='omit_repeated_times', ctx=Load())), keyword(arg='level_width', value=Constant(value=None))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='enable_link_path', ctx=Store())], value=Name(id='enable_link_path', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='markup', ctx=Store())], value=Name(id='markup', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='rich_tracebacks', ctx=Store())], value=Name(id='rich_tracebacks', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='tracebacks_width', ctx=Store())], value=Name(id='tracebacks_width', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='tracebacks_extra_lines', ctx=Store())], value=Name(id='tracebacks_extra_lines', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='tracebacks_theme', ctx=Store())], value=Name(id='tracebacks_theme', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='tracebacks_word_wrap', ctx=Store())], value=Name(id='tracebacks_word_wrap', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='tracebacks_show_locals', ctx=Store())], value=Name(id='tracebacks_show_locals', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='tracebacks_suppress', ctx=Store())], value=Name(id='tracebacks_suppress', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='locals_max_length', ctx=Store())], value=Name(id='locals_max_length', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='locals_max_string', ctx=Store())], value=Name(id='locals_max_string', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='keywords', ctx=Store())], value=Name(id='keywords', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='get_level_text', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='record', annotation=Name(id='LogRecord', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get the level name from the record.\n\n        Args:\n            record (LogRecord): LogRecord instance.\n\n        Returns:\n            Text: A tuple of the style and level name.\n        ')), Assign(targets=[Name(id='level_name', ctx=Store())], value=Attribute(value=Name(id='record', ctx=Load()), attr='levelname', ctx=Load())), Assign(targets=[Name(id='level_text', ctx=Store())], value=Call(func=Attribute(value=Name(id='Text', ctx=Load()), attr='styled', ctx=Load()), args=[Call(func=Attribute(value=Name(id='level_name', ctx=Load()), attr='ljust', ctx=Load()), args=[Constant(value=8)], keywords=[]), JoinedStr(values=[Constant(value='logging.level.'), FormattedValue(value=Call(func=Attribute(value=Name(id='level_name', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), conversion=-1)])], keywords=[])), Return(value=Name(id='level_text', ctx=Load()))], decorator_list=[], returns=Name(id='Text', ctx=Load())), FunctionDef(name='emit', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='record', annotation=Name(id='LogRecord', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Invoked by logging.')), Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='format', ctx=Load()), args=[Name(id='record', ctx=Load())], keywords=[])), Assign(targets=[Name(id='traceback', ctx=Store())], value=Constant(value=None)), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='rich_tracebacks', ctx=Load()), Attribute(value=Name(id='record', ctx=Load()), attr='exc_info', ctx=Load()), Compare(left=Attribute(value=Name(id='record', ctx=Load()), attr='exc_info', ctx=Load()), ops=[NotEq()], comparators=[Tuple(elts=[Constant(value=None), Constant(value=None), Constant(value=None)], ctx=Load())])]), body=[Assign(targets=[Tuple(elts=[Name(id='exc_type', ctx=Store()), Name(id='exc_value', ctx=Store()), Name(id='exc_traceback', ctx=Store())], ctx=Store())], value=Attribute(value=Name(id='record', ctx=Load()), attr='exc_info', ctx=Load())), Assert(test=Compare(left=Name(id='exc_type', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assert(test=Compare(left=Name(id='exc_value', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Name(id='traceback', ctx=Store())], value=Call(func=Attribute(value=Name(id='Traceback', ctx=Load()), attr='from_exception', ctx=Load()), args=[Name(id='exc_type', ctx=Load()), Name(id='exc_value', ctx=Load()), Name(id='exc_traceback', ctx=Load())], keywords=[keyword(arg='width', value=Attribute(value=Name(id='self', ctx=Load()), attr='tracebacks_width', ctx=Load())), keyword(arg='extra_lines', value=Attribute(value=Name(id='self', ctx=Load()), attr='tracebacks_extra_lines', ctx=Load())), keyword(arg='theme', value=Attribute(value=Name(id='self', ctx=Load()), attr='tracebacks_theme', ctx=Load())), keyword(arg='word_wrap', value=Attribute(value=Name(id='self', ctx=Load()), attr='tracebacks_word_wrap', ctx=Load())), keyword(arg='show_locals', value=Attribute(value=Name(id='self', ctx=Load()), attr='tracebacks_show_locals', ctx=Load())), keyword(arg='locals_max_length', value=Attribute(value=Name(id='self', ctx=Load()), attr='locals_max_length', ctx=Load())), keyword(arg='locals_max_string', value=Attribute(value=Name(id='self', ctx=Load()), attr='locals_max_string', ctx=Load())), keyword(arg='suppress', value=Attribute(value=Name(id='self', ctx=Load()), attr='tracebacks_suppress', ctx=Load()))])), Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Attribute(value=Name(id='record', ctx=Load()), attr='getMessage', ctx=Load()), args=[], keywords=[])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='formatter', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='record', ctx=Load()), attr='message', ctx=Store())], value=Call(func=Attribute(value=Name(id='record', ctx=Load()), attr='getMessage', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='formatter', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='formatter', ctx=Load())), If(test=BoolOp(op=And(), values=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='formatter', ctx=Load()), Constant(value='usesTime')], keywords=[]), Call(func=Attribute(value=Name(id='formatter', ctx=Load()), attr='usesTime', ctx=Load()), args=[], keywords=[])]), body=[Assign(targets=[Attribute(value=Name(id='record', ctx=Load()), attr='asctime', ctx=Store())], value=Call(func=Attribute(value=Name(id='formatter', ctx=Load()), attr='formatTime', ctx=Load()), args=[Name(id='record', ctx=Load()), Attribute(value=Name(id='formatter', ctx=Load()), attr='datefmt', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Attribute(value=Name(id='formatter', ctx=Load()), attr='formatMessage', ctx=Load()), args=[Name(id='record', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='message_renderable', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='render_message', ctx=Load()), args=[Name(id='record', ctx=Load()), Name(id='message', ctx=Load())], keywords=[])), Assign(targets=[Name(id='log_renderable', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='render', ctx=Load()), args=[], keywords=[keyword(arg='record', value=Name(id='record', ctx=Load())), keyword(arg='traceback', value=Name(id='traceback', ctx=Load())), keyword(arg='message_renderable', value=Name(id='message_renderable', ctx=Load()))])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='console', ctx=Load()), attr='file', ctx=Load()), Name(id='NullFile', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='handleError', ctx=Load()), args=[Name(id='record', ctx=Load())], keywords=[]))], orelse=[Try(body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='console', ctx=Load()), attr='print', ctx=Load()), args=[Name(id='log_renderable', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='handleError', ctx=Load()), args=[Name(id='record', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='render_message', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='record', annotation=Name(id='LogRecord', ctx=Load())), arg(arg='message', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Render message text in to Text.\n\n        Args:\n            record (LogRecord): logging Record.\n            message (str): String containing log message.\n\n        Returns:\n            ConsoleRenderable: Renderable to display log message.\n        ')), Assign(targets=[Name(id='use_markup', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='record', ctx=Load()), Constant(value='markup'), Attribute(value=Name(id='self', ctx=Load()), attr='markup', ctx=Load())], keywords=[])), Assign(targets=[Name(id='message_text', ctx=Store())], value=IfExp(test=Name(id='use_markup', ctx=Load()), body=Call(func=Attribute(value=Name(id='Text', ctx=Load()), attr='from_markup', ctx=Load()), args=[Name(id='message', ctx=Load())], keywords=[]), orelse=Call(func=Name(id='Text', ctx=Load()), args=[Name(id='message', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='highlighter', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='record', ctx=Load()), Constant(value='highlighter'), Attribute(value=Name(id='self', ctx=Load()), attr='highlighter', ctx=Load())], keywords=[])), If(test=Name(id='highlighter', ctx=Load()), body=[Assign(targets=[Name(id='message_text', ctx=Store())], value=Call(func=Name(id='highlighter', ctx=Load()), args=[Name(id='message_text', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='keywords', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='keywords', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='KEYWORDS', ctx=Load()))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='keywords', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='message_text', ctx=Load()), attr='highlight_words', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='keywords', ctx=Load()), Constant(value='logging.keyword')], keywords=[]))], orelse=[]), Return(value=Name(id='message_text', ctx=Load()))], decorator_list=[], returns=Constant(value='ConsoleRenderable')), FunctionDef(name='render', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[arg(arg='record', annotation=Name(id='LogRecord', ctx=Load())), arg(arg='traceback', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Traceback', ctx=Load()), ctx=Load())), arg(arg='message_renderable', annotation=Constant(value='ConsoleRenderable'))], kw_defaults=[None, None, None], defaults=[]), body=[Expr(value=Constant(value='Render log for display.\n\n        Args:\n            record (LogRecord): logging Record.\n            traceback (Optional[Traceback]): Traceback instance or None for no Traceback.\n            message_renderable (ConsoleRenderable): Renderable (typically Text) containing log message contents.\n\n        Returns:\n            ConsoleRenderable: Renderable to display log.\n        ')), Assign(targets=[Name(id='path', ctx=Store())], value=Attribute(value=Call(func=Name(id='Path', ctx=Load()), args=[Attribute(value=Name(id='record', ctx=Load()), attr='pathname', ctx=Load())], keywords=[]), attr='name', ctx=Load())), Assign(targets=[Name(id='level', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_level_text', ctx=Load()), args=[Name(id='record', ctx=Load())], keywords=[])), Assign(targets=[Name(id='time_format', ctx=Store())], value=IfExp(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='formatter', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Constant(value=None), orelse=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='formatter', ctx=Load()), attr='datefmt', ctx=Load()))), Assign(targets=[Name(id='log_time', ctx=Store())], value=Call(func=Attribute(value=Name(id='datetime', ctx=Load()), attr='fromtimestamp', ctx=Load()), args=[Attribute(value=Name(id='record', ctx=Load()), attr='created', ctx=Load())], keywords=[])), Assign(targets=[Name(id='log_renderable', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_log_render', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='console', ctx=Load()), IfExp(test=UnaryOp(op=Not(), operand=Name(id='traceback', ctx=Load())), body=List(elts=[Name(id='message_renderable', ctx=Load())], ctx=Load()), orelse=List(elts=[Name(id='message_renderable', ctx=Load()), Name(id='traceback', ctx=Load())], ctx=Load()))], keywords=[keyword(arg='log_time', value=Name(id='log_time', ctx=Load())), keyword(arg='time_format', value=Name(id='time_format', ctx=Load())), keyword(arg='level', value=Name(id='level', ctx=Load())), keyword(arg='path', value=Name(id='path', ctx=Load())), keyword(arg='line_no', value=Attribute(value=Name(id='record', ctx=Load()), attr='lineno', ctx=Load())), keyword(arg='link_path', value=IfExp(test=Attribute(value=Name(id='self', ctx=Load()), attr='enable_link_path', ctx=Load()), body=Attribute(value=Name(id='record', ctx=Load()), attr='pathname', ctx=Load()), orelse=Constant(value=None)))])), Return(value=Name(id='log_renderable', ctx=Load()))], decorator_list=[], returns=Constant(value='ConsoleRenderable'))], decorator_list=[]), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__')]), body=[ImportFrom(module='time', names=[alias(name='sleep')], level=0), Assign(targets=[Name(id='FORMAT', ctx=Store())], value=Constant(value='%(message)s')), Expr(value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='basicConfig', ctx=Load()), args=[], keywords=[keyword(arg='level', value=Constant(value='NOTSET')), keyword(arg='format', value=Name(id='FORMAT', ctx=Load())), keyword(arg='datefmt', value=Constant(value='[%X]')), keyword(arg='handlers', value=List(elts=[Call(func=Name(id='RichHandler', ctx=Load()), args=[], keywords=[keyword(arg='rich_tracebacks', value=Constant(value=True)), keyword(arg='tracebacks_show_locals', value=Constant(value=True))])], ctx=Load()))])), Assign(targets=[Name(id='log', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Constant(value='rich')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Server starting...')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Listening on http://127.0.0.1:8080')], keywords=[])), Expr(value=Call(func=Name(id='sleep', ctx=Load()), args=[Constant(value=1)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='GET /index.html 200 1298')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='GET /imgs/backgrounds/back1.jpg 200 54386')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='GET /css/styles.css 200 54386')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='GET /favicon.ico 404 242')], keywords=[])), Expr(value=Call(func=Name(id='sleep', ctx=Load()), args=[Constant(value=1)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='JSONRPC request\n--> %r\n<-- %r'), Dict(keys=[Constant(value='version'), Constant(value='method'), Constant(value='params'), Constant(value='id')], values=[Constant(value='1.1'), Constant(value='confirmFruitPurchase'), List(elts=[List(elts=[Constant(value='apple'), Constant(value='orange'), Constant(value='mangoes'), Constant(value='pomelo')], ctx=Load()), Constant(value=1.123)], ctx=Load()), Constant(value='194521489')]), Dict(keys=[Constant(value='version'), Constant(value='result'), Constant(value='error'), Constant(value='id')], values=[Constant(value='1.1'), Constant(value=True), Constant(value=None), Constant(value='194521489')])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Loading configuration file /adasd/asdasd/qeqwe/qwrqwrqwr/sdgsdgsdg/werwerwer/dfgerert/ertertert/ertetert/werwerwer')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='error', ctx=Load()), args=[Constant(value="Unable to find 'pomelo' in database!")], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='POST /jsonrpc/ 200 65532')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='POST /admin/ 401 42234')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='password was rejected for admin site.')], keywords=[])), FunctionDef(name='divide', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='number', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='divisor', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='foos', ctx=Store())], value=BinOp(left=List(elts=[Constant(value='foo')], ctx=Load()), op=Mult(), right=Constant(value=100))), Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='in divide')], keywords=[])), Try(body=[Expr(value=BinOp(left=Name(id='number', ctx=Load()), op=Div(), right=Name(id='divisor', ctx=Load())))], handlers=[ExceptHandler(body=[Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='exception', ctx=Load()), args=[Constant(value='An error of some kind occurred!')], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[], returns=Constant(value=None)), Expr(value=Call(func=Name(id='divide', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Name(id='sleep', ctx=Load()), args=[Constant(value=1)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='critical', ctx=Load()), args=[Constant(value='Out of memory!')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Server exited with code=-1')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='log', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='[bold]EXITING...[/bold]')], keywords=[keyword(arg='extra', value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='markup', value=Constant(value=True))]))]))], orelse=[])], type_ignores=[])