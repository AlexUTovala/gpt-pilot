Module(body=[ImportFrom(module='typing', names=[alias(name='NamedTuple'), alias(name='Tuple')], level=0), ClassDef(name='ColorTriplet', bases=[Name(id='NamedTuple', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='The red, green, and blue components of a color.')), AnnAssign(target=Name(id='red', ctx=Store()), annotation=Name(id='int', ctx=Load()), simple=1), Expr(value=Constant(value='Red component in 0 to 255 range.')), AnnAssign(target=Name(id='green', ctx=Store()), annotation=Name(id='int', ctx=Load()), simple=1), Expr(value=Constant(value='Green component in 0 to 255 range.')), AnnAssign(target=Name(id='blue', ctx=Store()), annotation=Name(id='int', ctx=Load()), simple=1), Expr(value=Constant(value='Blue component in 0 to 255 range.')), FunctionDef(name='hex', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='get the color triplet in CSS style.')), Assign(targets=[Tuple(elts=[Name(id='red', ctx=Store()), Name(id='green', ctx=Store()), Name(id='blue', ctx=Store())], ctx=Store())], value=Name(id='self', ctx=Load())), Return(value=JoinedStr(values=[Constant(value='#'), FormattedValue(value=Name(id='red', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='02x')])), FormattedValue(value=Name(id='green', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='02x')])), FormattedValue(value=Name(id='blue', ctx=Load()), conversion=-1, format_spec=JoinedStr(values=[Constant(value='02x')]))]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='rgb', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='The color in RGB format.\n\n        Returns:\n            str: An rgb color, e.g. ``"rgb(100,23,255)"``.\n        ')), Assign(targets=[Tuple(elts=[Name(id='red', ctx=Store()), Name(id='green', ctx=Store()), Name(id='blue', ctx=Store())], ctx=Store())], value=Name(id='self', ctx=Load())), Return(value=JoinedStr(values=[Constant(value='rgb('), FormattedValue(value=Name(id='red', ctx=Load()), conversion=-1), Constant(value=','), FormattedValue(value=Name(id='green', ctx=Load()), conversion=-1), Constant(value=','), FormattedValue(value=Name(id='blue', ctx=Load()), conversion=-1), Constant(value=')')]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='normalized', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Convert components into floats between 0 and 1.\n\n        Returns:\n            Tuple[float, float, float]: A tuple of three normalized colour components.\n        ')), Assign(targets=[Tuple(elts=[Name(id='red', ctx=Store()), Name(id='green', ctx=Store()), Name(id='blue', ctx=Store())], ctx=Store())], value=Name(id='self', ctx=Load())), Return(value=Tuple(elts=[BinOp(left=Name(id='red', ctx=Load()), op=Div(), right=Constant(value=255.0)), BinOp(left=Name(id='green', ctx=Load()), op=Div(), right=Constant(value=255.0)), BinOp(left=Name(id='blue', ctx=Load()), op=Div(), right=Constant(value=255.0))], ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='float', ctx=Load()), Name(id='float', ctx=Load()), Name(id='float', ctx=Load())], ctx=Load()), ctx=Load()))], decorator_list=[])], type_ignores=[])