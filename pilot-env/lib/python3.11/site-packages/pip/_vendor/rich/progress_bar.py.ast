Module(body=[Import(names=[alias(name='math')]), ImportFrom(module='functools', names=[alias(name='lru_cache')], level=0), ImportFrom(module='time', names=[alias(name='monotonic')], level=0), ImportFrom(module='typing', names=[alias(name='Iterable'), alias(name='List'), alias(name='Optional')], level=0), ImportFrom(module='color', names=[alias(name='Color'), alias(name='blend_rgb')], level=1), ImportFrom(module='color_triplet', names=[alias(name='ColorTriplet')], level=1), ImportFrom(module='console', names=[alias(name='Console'), alias(name='ConsoleOptions'), alias(name='RenderResult')], level=1), ImportFrom(module='jupyter', names=[alias(name='JupyterMixin')], level=1), ImportFrom(module='measure', names=[alias(name='Measurement')], level=1), ImportFrom(module='segment', names=[alias(name='Segment')], level=1), ImportFrom(module='style', names=[alias(name='Style'), alias(name='StyleType')], level=1), Assign(targets=[Name(id='PULSE_SIZE', ctx=Store())], value=Constant(value=20)), ClassDef(name='ProgressBar', bases=[Name(id='JupyterMixin', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Renders a (progress) bar. Used by rich.progress.\n\n    Args:\n        total (float, optional): Number of steps in the bar. Defaults to 100. Set to None to render a pulsing animation.\n        completed (float, optional): Number of steps completed. Defaults to 0.\n        width (int, optional): Width of the bar, or ``None`` for maximum width. Defaults to None.\n        pulse (bool, optional): Enable pulse effect. Defaults to False. Will pulse if a None total was passed.\n        style (StyleType, optional): Style for the bar background. Defaults to "bar.back".\n        complete_style (StyleType, optional): Style for the completed bar. Defaults to "bar.complete".\n        finished_style (StyleType, optional): Style for a finished bar. Defaults to "bar.finished".\n        pulse_style (StyleType, optional): Style for pulsing bars. Defaults to "bar.pulse".\n        animation_time (Optional[float], optional): Time in seconds to use for animation, or None to use system time.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='total', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load())), arg(arg='completed', annotation=Name(id='float', ctx=Load())), arg(arg='width', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='pulse', annotation=Name(id='bool', ctx=Load())), arg(arg='style', annotation=Name(id='StyleType', ctx=Load())), arg(arg='complete_style', annotation=Name(id='StyleType', ctx=Load())), arg(arg='finished_style', annotation=Name(id='StyleType', ctx=Load())), arg(arg='pulse_style', annotation=Name(id='StyleType', ctx=Load())), arg(arg='animation_time', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=100.0), Constant(value=0), Constant(value=None), Constant(value=False), Constant(value='bar.back'), Constant(value='bar.complete'), Constant(value='bar.finished'), Constant(value='bar.pulse'), Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='total', ctx=Store())], value=Name(id='total', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='completed', ctx=Store())], value=Name(id='completed', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='width', ctx=Store())], value=Name(id='width', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='pulse', ctx=Store())], value=Name(id='pulse', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Store())], value=Name(id='style', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='complete_style', ctx=Store())], value=Name(id='complete_style', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='finished_style', ctx=Store())], value=Name(id='finished_style', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='pulse_style', ctx=Store())], value=Name(id='pulse_style', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='animation_time', ctx=Store())], value=Name(id='animation_time', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_pulse_segments', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Segment', ctx=Load()), ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0)], decorator_list=[]), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[Constant(value='<Bar '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='completed', ctx=Load()), conversion=114), Constant(value=' of '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='total', ctx=Load()), conversion=114), Constant(value='>')]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='percentage_completed', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Calculate percentage complete.')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='total', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='completed', ctx=Store())], value=BinOp(left=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='completed', ctx=Load()), op=Div(), right=Attribute(value=Name(id='self', ctx=Load()), attr='total', ctx=Load())), op=Mult(), right=Constant(value=100.0))), Assign(targets=[Name(id='completed', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[Constant(value=100), Call(func=Name(id='max', ctx=Load()), args=[Constant(value=0.0), Name(id='completed', ctx=Load())], keywords=[])], keywords=[])), Return(value=Name(id='completed', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load())), FunctionDef(name='_get_pulse_segments', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='fore_style', annotation=Name(id='Style', ctx=Load())), arg(arg='back_style', annotation=Name(id='Style', ctx=Load())), arg(arg='color_system', annotation=Name(id='str', ctx=Load())), arg(arg='no_color', annotation=Name(id='bool', ctx=Load())), arg(arg='ascii', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value='Get a list of segments to render a pulse animation.\n\n        Returns:\n            List[Segment]: A list of segments, one segment per character.\n        ')), Assign(targets=[Name(id='bar', ctx=Store())], value=IfExp(test=Name(id='ascii', ctx=Load()), body=Constant(value='-'), orelse=Constant(value='‚îÅ'))), AnnAssign(target=Name(id='segments', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Segment', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='color_system', ctx=Load()), ops=[NotIn()], comparators=[Tuple(elts=[Constant(value='standard'), Constant(value='eight_bit'), Constant(value='truecolor')], ctx=Load())]), Name(id='no_color', ctx=Load())]), body=[AugAssign(target=Name(id='segments', ctx=Store()), op=Add(), value=BinOp(left=List(elts=[Call(func=Name(id='Segment', ctx=Load()), args=[Name(id='bar', ctx=Load()), Name(id='fore_style', ctx=Load())], keywords=[])], ctx=Load()), op=Mult(), right=BinOp(left=Name(id='PULSE_SIZE', ctx=Load()), op=FloorDiv(), right=Constant(value=2)))), AugAssign(target=Name(id='segments', ctx=Store()), op=Add(), value=BinOp(left=List(elts=[Call(func=Name(id='Segment', ctx=Load()), args=[IfExp(test=Name(id='no_color', ctx=Load()), body=Constant(value=' '), orelse=Name(id='bar', ctx=Load())), Name(id='back_style', ctx=Load())], keywords=[])], ctx=Load()), op=Mult(), right=BinOp(left=Name(id='PULSE_SIZE', ctx=Load()), op=Sub(), right=BinOp(left=Name(id='PULSE_SIZE', ctx=Load()), op=FloorDiv(), right=Constant(value=2))))), Return(value=Name(id='segments', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='append', ctx=Store())], value=Attribute(value=Name(id='segments', ctx=Load()), attr='append', ctx=Load())), Assign(targets=[Name(id='fore_color', ctx=Store())], value=IfExp(test=Attribute(value=Name(id='fore_style', ctx=Load()), attr='color', ctx=Load()), body=Call(func=Attribute(value=Attribute(value=Name(id='fore_style', ctx=Load()), attr='color', ctx=Load()), attr='get_truecolor', ctx=Load()), args=[], keywords=[]), orelse=Call(func=Name(id='ColorTriplet', ctx=Load()), args=[Constant(value=255), Constant(value=0), Constant(value=255)], keywords=[]))), Assign(targets=[Name(id='back_color', ctx=Store())], value=IfExp(test=Attribute(value=Name(id='back_style', ctx=Load()), attr='color', ctx=Load()), body=Call(func=Attribute(value=Attribute(value=Name(id='back_style', ctx=Load()), attr='color', ctx=Load()), attr='get_truecolor', ctx=Load()), args=[], keywords=[]), orelse=Call(func=Name(id='ColorTriplet', ctx=Load()), args=[Constant(value=0), Constant(value=0), Constant(value=0)], keywords=[]))), Assign(targets=[Name(id='cos', ctx=Store())], value=Attribute(value=Name(id='math', ctx=Load()), attr='cos', ctx=Load())), Assign(targets=[Name(id='pi', ctx=Store())], value=Attribute(value=Name(id='math', ctx=Load()), attr='pi', ctx=Load())), Assign(targets=[Name(id='_Segment', ctx=Store())], value=Name(id='Segment', ctx=Load())), Assign(targets=[Name(id='_Style', ctx=Store())], value=Name(id='Style', ctx=Load())), Assign(targets=[Name(id='from_triplet', ctx=Store())], value=Attribute(value=Name(id='Color', ctx=Load()), attr='from_triplet', ctx=Load())), For(target=Name(id='index', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='PULSE_SIZE', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='position', ctx=Store())], value=BinOp(left=Name(id='index', ctx=Load()), op=Div(), right=Name(id='PULSE_SIZE', ctx=Load()))), Assign(targets=[Name(id='fade', ctx=Store())], value=BinOp(left=Constant(value=0.5), op=Add(), right=BinOp(left=Call(func=Name(id='cos', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='position', ctx=Load()), op=Mult(), right=Name(id='pi', ctx=Load())), op=Mult(), right=Constant(value=2))], keywords=[]), op=Div(), right=Constant(value=2.0)))), Assign(targets=[Name(id='color', ctx=Store())], value=Call(func=Name(id='blend_rgb', ctx=Load()), args=[Name(id='fore_color', ctx=Load()), Name(id='back_color', ctx=Load())], keywords=[keyword(arg='cross_fade', value=Name(id='fade', ctx=Load()))])), Expr(value=Call(func=Name(id='append', ctx=Load()), args=[Call(func=Name(id='_Segment', ctx=Load()), args=[Name(id='bar', ctx=Load()), Call(func=Name(id='_Style', ctx=Load()), args=[], keywords=[keyword(arg='color', value=Call(func=Name(id='from_triplet', ctx=Load()), args=[Name(id='color', ctx=Load())], keywords=[]))])], keywords=[])], keywords=[]))], orelse=[]), Return(value=Name(id='segments', ctx=Load()))], decorator_list=[Call(func=Name(id='lru_cache', ctx=Load()), args=[], keywords=[keyword(arg='maxsize', value=Constant(value=16))])], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Segment', ctx=Load()), ctx=Load())), FunctionDef(name='update', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='completed', annotation=Name(id='float', ctx=Load())), arg(arg='total', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Update progress with new values.\n\n        Args:\n            completed (float): Number of steps completed.\n            total (float, optional): Total number of steps, or ``None`` to not change. Defaults to None.\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='completed', ctx=Store())], value=Name(id='completed', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='total', ctx=Store())], value=IfExp(test=Compare(left=Name(id='total', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Name(id='total', ctx=Load()), orelse=Attribute(value=Name(id='self', ctx=Load()), attr='total', ctx=Load())))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_render_pulse', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='console', annotation=Name(id='Console', ctx=Load())), arg(arg='width', annotation=Name(id='int', ctx=Load())), arg(arg='ascii', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value='Renders the pulse animation.\n\n        Args:\n            console (Console): Console instance.\n            width (int): Width in characters of pulse animation.\n\n        Returns:\n            RenderResult: [description]\n\n        Yields:\n            Iterator[Segment]: Segments to render pulse\n        ')), Assign(targets=[Name(id='fore_style', ctx=Store())], value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='get_style', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='pulse_style', ctx=Load())], keywords=[keyword(arg='default', value=Constant(value='white'))])), Assign(targets=[Name(id='back_style', ctx=Store())], value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='get_style', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load())], keywords=[keyword(arg='default', value=Constant(value='black'))])), Assign(targets=[Name(id='pulse_segments', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_pulse_segments', ctx=Load()), args=[Name(id='fore_style', ctx=Load()), Name(id='back_style', ctx=Load()), Attribute(value=Name(id='console', ctx=Load()), attr='color_system', ctx=Load()), Attribute(value=Name(id='console', ctx=Load()), attr='no_color', ctx=Load())], keywords=[keyword(arg='ascii', value=Name(id='ascii', ctx=Load()))])), Assign(targets=[Name(id='segment_count', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='pulse_segments', ctx=Load())], keywords=[])), Assign(targets=[Name(id='current_time', ctx=Store())], value=IfExp(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='animation_time', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Call(func=Name(id='monotonic', ctx=Load()), args=[], keywords=[]), orelse=Attribute(value=Name(id='self', ctx=Load()), attr='animation_time', ctx=Load()))), Assign(targets=[Name(id='segments', ctx=Store())], value=BinOp(left=Name(id='pulse_segments', ctx=Load()), op=Mult(), right=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Name(id='width', ctx=Load()), op=Div(), right=Name(id='segment_count', ctx=Load()))], keywords=[]), op=Add(), right=Constant(value=2)))), Assign(targets=[Name(id='offset', ctx=Store())], value=BinOp(left=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=UnaryOp(op=USub(), operand=Name(id='current_time', ctx=Load())), op=Mult(), right=Constant(value=15))], keywords=[]), op=Mod(), right=Name(id='segment_count', ctx=Load()))), Assign(targets=[Name(id='segments', ctx=Store())], value=Subscript(value=Name(id='segments', ctx=Load()), slice=Slice(lower=Name(id='offset', ctx=Load()), upper=BinOp(left=Name(id='offset', ctx=Load()), op=Add(), right=Name(id='width', ctx=Load()))), ctx=Load())), Expr(value=YieldFrom(value=Name(id='segments', ctx=Load())))], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='Segment', ctx=Load()), ctx=Load())), FunctionDef(name='__rich_console__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='console', annotation=Name(id='Console', ctx=Load())), arg(arg='options', annotation=Name(id='ConsoleOptions', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='width', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='width', ctx=Load()), Attribute(value=Name(id='options', ctx=Load()), attr='max_width', ctx=Load())]), Attribute(value=Name(id='options', ctx=Load()), attr='max_width', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ascii', ctx=Store())], value=BoolOp(op=Or(), values=[Attribute(value=Name(id='options', ctx=Load()), attr='legacy_windows', ctx=Load()), Attribute(value=Name(id='options', ctx=Load()), attr='ascii_only', ctx=Load())])), Assign(targets=[Name(id='should_pulse', ctx=Store())], value=BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='pulse', ctx=Load()), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='total', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])])), If(test=Name(id='should_pulse', ctx=Load()), body=[Expr(value=YieldFrom(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_render_pulse', ctx=Load()), args=[Name(id='console', ctx=Load()), Name(id='width', ctx=Load())], keywords=[keyword(arg='ascii', value=Name(id='ascii', ctx=Load()))]))), Return()], orelse=[]), AnnAssign(target=Name(id='completed', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='float', ctx=Load()), ctx=Load()), value=IfExp(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='total', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Call(func=Name(id='min', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='total', ctx=Load()), Call(func=Name(id='max', ctx=Load()), args=[Constant(value=0), Attribute(value=Name(id='self', ctx=Load()), attr='completed', ctx=Load())], keywords=[])], keywords=[]), orelse=Constant(value=None)), simple=1), Assign(targets=[Name(id='bar', ctx=Store())], value=IfExp(test=Name(id='ascii', ctx=Load()), body=Constant(value='-'), orelse=Constant(value='‚îÅ'))), Assign(targets=[Name(id='half_bar_right', ctx=Store())], value=IfExp(test=Name(id='ascii', ctx=Load()), body=Constant(value=' '), orelse=Constant(value='‚ï∏'))), Assign(targets=[Name(id='half_bar_left', ctx=Store())], value=IfExp(test=Name(id='ascii', ctx=Load()), body=Constant(value=' '), orelse=Constant(value='‚ï∫'))), Assign(targets=[Name(id='complete_halves', ctx=Store())], value=IfExp(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='total', ctx=Load()), Compare(left=Name(id='completed', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=Name(id='width', ctx=Load()), op=Mult(), right=Constant(value=2)), op=Mult(), right=Name(id='completed', ctx=Load())), op=Div(), right=Attribute(value=Name(id='self', ctx=Load()), attr='total', ctx=Load()))], keywords=[]), orelse=BinOp(left=Name(id='width', ctx=Load()), op=Mult(), right=Constant(value=2)))), Assign(targets=[Name(id='bar_count', ctx=Store())], value=BinOp(left=Name(id='complete_halves', ctx=Load()), op=FloorDiv(), right=Constant(value=2))), Assign(targets=[Name(id='half_bar_count', ctx=Store())], value=BinOp(left=Name(id='complete_halves', ctx=Load()), op=Mod(), right=Constant(value=2))), Assign(targets=[Name(id='style', ctx=Store())], value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='get_style', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='style', ctx=Load())], keywords=[])), Assign(targets=[Name(id='is_finished', ctx=Store())], value=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='total', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='completed', ctx=Load()), ops=[GtE()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='total', ctx=Load())])])), Assign(targets=[Name(id='complete_style', ctx=Store())], value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='get_style', ctx=Load()), args=[IfExp(test=Name(id='is_finished', ctx=Load()), body=Attribute(value=Name(id='self', ctx=Load()), attr='finished_style', ctx=Load()), orelse=Attribute(value=Name(id='self', ctx=Load()), attr='complete_style', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='_Segment', ctx=Store())], value=Name(id='Segment', ctx=Load())), If(test=Name(id='bar_count', ctx=Load()), body=[Expr(value=Yield(value=Call(func=Name(id='_Segment', ctx=Load()), args=[BinOp(left=Name(id='bar', ctx=Load()), op=Mult(), right=Name(id='bar_count', ctx=Load())), Name(id='complete_style', ctx=Load())], keywords=[])))], orelse=[]), If(test=Name(id='half_bar_count', ctx=Load()), body=[Expr(value=Yield(value=Call(func=Name(id='_Segment', ctx=Load()), args=[BinOp(left=Name(id='half_bar_right', ctx=Load()), op=Mult(), right=Name(id='half_bar_count', ctx=Load())), Name(id='complete_style', ctx=Load())], keywords=[])))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='console', ctx=Load()), attr='no_color', ctx=Load())), body=[Assign(targets=[Name(id='remaining_bars', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='width', ctx=Load()), op=Sub(), right=Name(id='bar_count', ctx=Load())), op=Sub(), right=Name(id='half_bar_count', ctx=Load()))), If(test=BoolOp(op=And(), values=[Name(id='remaining_bars', ctx=Load()), Compare(left=Attribute(value=Name(id='console', ctx=Load()), attr='color_system', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Name(id='half_bar_count', ctx=Load())), Name(id='bar_count', ctx=Load())]), body=[Expr(value=Yield(value=Call(func=Name(id='_Segment', ctx=Load()), args=[Name(id='half_bar_left', ctx=Load()), Name(id='style', ctx=Load())], keywords=[]))), AugAssign(target=Name(id='remaining_bars', ctx=Store()), op=Sub(), value=Constant(value=1))], orelse=[]), If(test=Name(id='remaining_bars', ctx=Load()), body=[Expr(value=Yield(value=Call(func=Name(id='_Segment', ctx=Load()), args=[BinOp(left=Name(id='bar', ctx=Load()), op=Mult(), right=Name(id='remaining_bars', ctx=Load())), Name(id='style', ctx=Load())], keywords=[])))], orelse=[])], orelse=[])], orelse=[])], decorator_list=[], returns=Name(id='RenderResult', ctx=Load())), FunctionDef(name='__rich_measure__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='console', annotation=Name(id='Console', ctx=Load())), arg(arg='options', annotation=Name(id='ConsoleOptions', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=IfExp(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='width', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Call(func=Name(id='Measurement', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='width', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='width', ctx=Load())], keywords=[]), orelse=Call(func=Name(id='Measurement', ctx=Load()), args=[Constant(value=4), Attribute(value=Name(id='options', ctx=Load()), attr='max_width', ctx=Load())], keywords=[])))], decorator_list=[], returns=Name(id='Measurement', ctx=Load()))], decorator_list=[]), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__')]), body=[Assign(targets=[Name(id='console', ctx=Store())], value=Call(func=Name(id='Console', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='bar', ctx=Store())], value=Call(func=Name(id='ProgressBar', ctx=Load()), args=[], keywords=[keyword(arg='width', value=Constant(value=50)), keyword(arg='total', value=Constant(value=100))])), Import(names=[alias(name='time')]), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='show_cursor', ctx=Load()), args=[Constant(value=False)], keywords=[])), For(target=Name(id='n', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Constant(value=101), Constant(value=1)], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='bar', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='n', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='print', ctx=Load()), args=[Name(id='bar', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='console', ctx=Load()), attr='file', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value='\r')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='sleep', ctx=Load()), args=[Constant(value=0.05)], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='show_cursor', ctx=Load()), args=[Constant(value=True)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='print', ctx=Load()), args=[], keywords=[]))], orelse=[])], type_ignores=[])