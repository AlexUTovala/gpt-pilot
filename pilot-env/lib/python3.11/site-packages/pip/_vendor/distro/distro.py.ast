Module(body=[Expr(value=Constant(value="\nThe ``distro`` package (``distro`` stands for Linux Distribution) provides\ninformation about the Linux distribution it runs on, such as a reliable\nmachine-readable distro ID, or version information.\n\nIt is the recommended replacement for Python's original\n:py:func:`platform.linux_distribution` function, but it provides much more\nfunctionality. An alternative implementation became necessary because Python\n3.5 deprecated this function, and Python 3.8 removed it altogether. Its\npredecessor function :py:func:`platform.dist` was already deprecated since\nPython 2.6 and removed in Python 3.8. Still, there are many cases in which\naccess to OS distribution information is needed. See `Python issue 1322\n<https://bugs.python.org/issue1322>`_ for more information.\n")), Import(names=[alias(name='argparse')]), Import(names=[alias(name='json')]), Import(names=[alias(name='logging')]), Import(names=[alias(name='os')]), Import(names=[alias(name='re')]), Import(names=[alias(name='shlex')]), Import(names=[alias(name='subprocess')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='warnings')]), ImportFrom(module='typing', names=[alias(name='Any'), alias(name='Callable'), alias(name='Dict'), alias(name='Iterable'), alias(name='Optional'), alias(name='Sequence'), alias(name='TextIO'), alias(name='Tuple'), alias(name='Type')], level=0), Try(body=[ImportFrom(module='typing', names=[alias(name='TypedDict')], level=0)], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Assign(targets=[Name(id='TypedDict', ctx=Store())], value=Name(id='dict', ctx=Load()))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='__version__', ctx=Store())], value=Constant(value='1.8.0')), ClassDef(name='VersionDict', bases=[Name(id='TypedDict', ctx=Load())], keywords=[], body=[AnnAssign(target=Name(id='major', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='minor', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='build_number', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1)], decorator_list=[]), ClassDef(name='InfoDict', bases=[Name(id='TypedDict', ctx=Load())], keywords=[], body=[AnnAssign(target=Name(id='id', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='version', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='version_parts', ctx=Store()), annotation=Name(id='VersionDict', ctx=Load()), simple=1), AnnAssign(target=Name(id='like', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='codename', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1)], decorator_list=[]), Assign(targets=[Name(id='_UNIXCONFDIR', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='UNIXCONFDIR'), Constant(value='/etc')], keywords=[])), Assign(targets=[Name(id='_UNIXUSRLIBDIR', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='UNIXUSRLIBDIR'), Constant(value='/usr/lib')], keywords=[])), Assign(targets=[Name(id='_OS_RELEASE_BASENAME', ctx=Store())], value=Constant(value='os-release')), Assign(targets=[Name(id='NORMALIZED_OS_ID', ctx=Store())], value=Dict(keys=[Constant(value='ol'), Constant(value='opensuse-leap')], values=[Constant(value='oracle'), Constant(value='opensuse')])), Assign(targets=[Name(id='NORMALIZED_LSB_ID', ctx=Store())], value=Dict(keys=[Constant(value='enterpriseenterpriseas'), Constant(value='enterpriseenterpriseserver'), Constant(value='redhatenterpriseworkstation'), Constant(value='redhatenterpriseserver'), Constant(value='redhatenterprisecomputenode')], values=[Constant(value='oracle'), Constant(value='oracle'), Constant(value='rhel'), Constant(value='rhel'), Constant(value='rhel')])), Assign(targets=[Name(id='NORMALIZED_DISTRO_ID', ctx=Store())], value=Dict(keys=[Constant(value='redhat')], values=[Constant(value='rhel')])), Assign(targets=[Name(id='_DISTRO_RELEASE_CONTENT_REVERSED_PATTERN', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='(?:[^)]*\\)(.*)\\()? *(?:STL )?([\\d.+\\-a-z]*\\d) *(?:esaeler *)?(.+)')], keywords=[])), Assign(targets=[Name(id='_DISTRO_RELEASE_BASENAME_PATTERN', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='(\\w+)[-_](release|version)$')], keywords=[])), Assign(targets=[Name(id='_DISTRO_RELEASE_BASENAMES', ctx=Store())], value=List(elts=[Constant(value='SuSE-release'), Constant(value='arch-release'), Constant(value='base-release'), Constant(value='centos-release'), Constant(value='fedora-release'), Constant(value='gentoo-release'), Constant(value='mageia-release'), Constant(value='mandrake-release'), Constant(value='mandriva-release'), Constant(value='mandrivalinux-release'), Constant(value='manjaro-release'), Constant(value='oracle-release'), Constant(value='redhat-release'), Constant(value='rocky-release'), Constant(value='sl-release'), Constant(value='slackware-version')], ctx=Load())), Assign(targets=[Name(id='_DISTRO_RELEASE_IGNORE_BASENAMES', ctx=Store())], value=Tuple(elts=[Constant(value='debian_version'), Constant(value='lsb-release'), Constant(value='oem-release'), Name(id='_OS_RELEASE_BASENAME', ctx=Load()), Constant(value='system-release'), Constant(value='plesk-release'), Constant(value='iredmail-release')], ctx=Load())), FunctionDef(name='linux_distribution', args=arguments(posonlyargs=[], args=[arg(arg='full_distribution_name', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Expr(value=Constant(value="\n    .. deprecated:: 1.6.0\n\n        :func:`distro.linux_distribution()` is deprecated. It should only be\n        used as a compatibility shim with Python's\n        :py:func:`platform.linux_distribution()`. Please use :func:`distro.id`,\n        :func:`distro.version` and :func:`distro.name` instead.\n\n    Return information about the current OS distribution as a tuple\n    ``(id_name, version, codename)`` with items as follows:\n\n    * ``id_name``:  If *full_distribution_name* is false, the result of\n      :func:`distro.id`. Otherwise, the result of :func:`distro.name`.\n\n    * ``version``:  The result of :func:`distro.version`.\n\n    * ``codename``:  The extra item (usually in parentheses) after the\n      os-release version number, or the result of :func:`distro.codename`.\n\n    The interface of this function is compatible with the original\n    :py:func:`platform.linux_distribution` function, supporting a subset of\n    its parameters.\n\n    The data it returns may not exactly be the same, because it uses more data\n    sources than the original function, and that may lead to different data if\n    the OS distribution is not consistent across multiple data sources it\n    provides (there are indeed such distributions ...).\n\n    Another reason for differences is the fact that the :func:`distro.id`\n    method normalizes the distro ID string to a reliable machine-readable value\n    for a number of popular OS distributions.\n    ")), Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value="distro.linux_distribution() is deprecated. It should only be used as a compatibility shim with Python's platform.linux_distribution(). Please use distro.id(), distro.version() and distro.name() instead."), Name(id='DeprecationWarning', ctx=Load())], keywords=[keyword(arg='stacklevel', value=Constant(value=2))])), Return(value=Call(func=Attribute(value=Name(id='_distro', ctx=Load()), attr='linux_distribution', ctx=Load()), args=[Name(id='full_distribution_name', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='id', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Return the distro ID of the current distribution, as a\n    machine-readable string.\n\n    For a number of OS distributions, the returned distro ID value is\n    *reliable*, in the sense that it is documented and that it does not change\n    across releases of the distribution.\n\n    This package maintains the following reliable distro ID values:\n\n    ==============  =========================================\n    Distro ID       Distribution\n    ==============  =========================================\n    "ubuntu"        Ubuntu\n    "debian"        Debian\n    "rhel"          RedHat Enterprise Linux\n    "centos"        CentOS\n    "fedora"        Fedora\n    "sles"          SUSE Linux Enterprise Server\n    "opensuse"      openSUSE\n    "amzn"          Amazon Linux\n    "arch"          Arch Linux\n    "buildroot"     Buildroot\n    "cloudlinux"    CloudLinux OS\n    "exherbo"       Exherbo Linux\n    "gentoo"        GenToo Linux\n    "ibm_powerkvm"  IBM PowerKVM\n    "kvmibm"        KVM for IBM z Systems\n    "linuxmint"     Linux Mint\n    "mageia"        Mageia\n    "mandriva"      Mandriva Linux\n    "parallels"     Parallels\n    "pidora"        Pidora\n    "raspbian"      Raspbian\n    "oracle"        Oracle Linux (and Oracle Enterprise Linux)\n    "scientific"    Scientific Linux\n    "slackware"     Slackware\n    "xenserver"     XenServer\n    "openbsd"       OpenBSD\n    "netbsd"        NetBSD\n    "freebsd"       FreeBSD\n    "midnightbsd"   MidnightBSD\n    "rocky"         Rocky Linux\n    "aix"           AIX\n    "guix"          Guix System\n    ==============  =========================================\n\n    If you have a need to get distros for reliable IDs added into this set,\n    or if you find that the :func:`distro.id` function returns a different\n    distro ID for one of the listed distros, please create an issue in the\n    `distro issue tracker`_.\n\n    **Lookup hierarchy and transformations:**\n\n    First, the ID is obtained from the following sources, in the specified\n    order. The first available and non-empty value is used:\n\n    * the value of the "ID" attribute of the os-release file,\n\n    * the value of the "Distributor ID" attribute returned by the lsb_release\n      command,\n\n    * the first part of the file name of the distro release file,\n\n    The so determined ID value then passes the following transformations,\n    before it is returned by this method:\n\n    * it is translated to lower case,\n\n    * blanks (which should not be there anyway) are translated to underscores,\n\n    * a normalization of the ID is performed, based upon\n      `normalization tables`_. The purpose of this normalization is to ensure\n      that the ID is as reliable as possible, even across incompatible changes\n      in the OS distributions. A common reason for an incompatible change is\n      the addition of an os-release file, or the addition of the lsb_release\n      command, with ID values that differ from what was previously determined\n      from the distro release file name.\n    ')), Return(value=Call(func=Attribute(value=Name(id='_distro', ctx=Load()), attr='id', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='name', args=arguments(posonlyargs=[], args=[arg(arg='pretty', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value='\n    Return the name of the current OS distribution, as a human-readable\n    string.\n\n    If *pretty* is false, the name is returned without version or codename.\n    (e.g. "CentOS Linux")\n\n    If *pretty* is true, the version and codename are appended.\n    (e.g. "CentOS Linux 7.1.1503 (Core)")\n\n    **Lookup hierarchy:**\n\n    The name is obtained from the following sources, in the specified order.\n    The first available and non-empty value is used:\n\n    * If *pretty* is false:\n\n      - the value of the "NAME" attribute of the os-release file,\n\n      - the value of the "Distributor ID" attribute returned by the lsb_release\n        command,\n\n      - the value of the "<name>" field of the distro release file.\n\n    * If *pretty* is true:\n\n      - the value of the "PRETTY_NAME" attribute of the os-release file,\n\n      - the value of the "Description" attribute returned by the lsb_release\n        command,\n\n      - the value of the "<name>" field of the distro release file, appended\n        with the value of the pretty version ("<version_id>" and "<codename>"\n        fields) of the distro release file, if available.\n    ')), Return(value=Call(func=Attribute(value=Name(id='_distro', ctx=Load()), attr='name', ctx=Load()), args=[Name(id='pretty', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='version', args=arguments(posonlyargs=[], args=[arg(arg='pretty', annotation=Name(id='bool', ctx=Load())), arg(arg='best', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Constant(value=False)]), body=[Expr(value=Constant(value='\n    Return the version of the current OS distribution, as a human-readable\n    string.\n\n    If *pretty* is false, the version is returned without codename (e.g.\n    "7.0").\n\n    If *pretty* is true, the codename in parenthesis is appended, if the\n    codename is non-empty (e.g. "7.0 (Maipo)").\n\n    Some distributions provide version numbers with different precisions in\n    the different sources of distribution information. Examining the different\n    sources in a fixed priority order does not always yield the most precise\n    version (e.g. for Debian 8.2, or CentOS 7.1).\n\n    Some other distributions may not provide this kind of information. In these\n    cases, an empty string would be returned. This behavior can be observed\n    with rolling releases distributions (e.g. Arch Linux).\n\n    The *best* parameter can be used to control the approach for the returned\n    version:\n\n    If *best* is false, the first non-empty version number in priority order of\n    the examined sources is returned.\n\n    If *best* is true, the most precise version number out of all examined\n    sources is returned.\n\n    **Lookup hierarchy:**\n\n    In all cases, the version number is obtained from the following sources.\n    If *best* is false, this order represents the priority order:\n\n    * the value of the "VERSION_ID" attribute of the os-release file,\n    * the value of the "Release" attribute returned by the lsb_release\n      command,\n    * the version number parsed from the "<version_id>" field of the first line\n      of the distro release file,\n    * the version number parsed from the "PRETTY_NAME" attribute of the\n      os-release file, if it follows the format of the distro release files.\n    * the version number parsed from the "Description" attribute returned by\n      the lsb_release command, if it follows the format of the distro release\n      files.\n    ')), Return(value=Call(func=Attribute(value=Name(id='_distro', ctx=Load()), attr='version', ctx=Load()), args=[Name(id='pretty', ctx=Load()), Name(id='best', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='version_parts', args=arguments(posonlyargs=[], args=[arg(arg='best', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value='\n    Return the version of the current OS distribution as a tuple\n    ``(major, minor, build_number)`` with items as follows:\n\n    * ``major``:  The result of :func:`distro.major_version`.\n\n    * ``minor``:  The result of :func:`distro.minor_version`.\n\n    * ``build_number``:  The result of :func:`distro.build_number`.\n\n    For a description of the *best* parameter, see the :func:`distro.version`\n    method.\n    ')), Return(value=Call(func=Attribute(value=Name(id='_distro', ctx=Load()), attr='version_parts', ctx=Load()), args=[Name(id='best', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='major_version', args=arguments(posonlyargs=[], args=[arg(arg='best', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value='\n    Return the major version of the current OS distribution, as a string,\n    if provided.\n    Otherwise, the empty string is returned. The major version is the first\n    part of the dot-separated version string.\n\n    For a description of the *best* parameter, see the :func:`distro.version`\n    method.\n    ')), Return(value=Call(func=Attribute(value=Name(id='_distro', ctx=Load()), attr='major_version', ctx=Load()), args=[Name(id='best', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='minor_version', args=arguments(posonlyargs=[], args=[arg(arg='best', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value='\n    Return the minor version of the current OS distribution, as a string,\n    if provided.\n    Otherwise, the empty string is returned. The minor version is the second\n    part of the dot-separated version string.\n\n    For a description of the *best* parameter, see the :func:`distro.version`\n    method.\n    ')), Return(value=Call(func=Attribute(value=Name(id='_distro', ctx=Load()), attr='minor_version', ctx=Load()), args=[Name(id='best', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='build_number', args=arguments(posonlyargs=[], args=[arg(arg='best', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value='\n    Return the build number of the current OS distribution, as a string,\n    if provided.\n    Otherwise, the empty string is returned. The build number is the third part\n    of the dot-separated version string.\n\n    For a description of the *best* parameter, see the :func:`distro.version`\n    method.\n    ')), Return(value=Call(func=Attribute(value=Name(id='_distro', ctx=Load()), attr='build_number', ctx=Load()), args=[Name(id='best', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='like', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Return a space-separated list of distro IDs of distributions that are\n    closely related to the current OS distribution in regards to packaging\n    and programming interfaces, for example distributions the current\n    distribution is a derivative from.\n\n    **Lookup hierarchy:**\n\n    This information item is only provided by the os-release file.\n    For details, see the description of the "ID_LIKE" attribute in the\n    `os-release man page\n    <http://www.freedesktop.org/software/systemd/man/os-release.html>`_.\n    ')), Return(value=Call(func=Attribute(value=Name(id='_distro', ctx=Load()), attr='like', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='codename', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Return the codename for the release of the current OS distribution,\n    as a string.\n\n    If the distribution does not have a codename, an empty string is returned.\n\n    Note that the returned codename is not always really a codename. For\n    example, openSUSE returns "x86_64". This function does not handle such\n    cases in any special way and just returns the string it finds, if any.\n\n    **Lookup hierarchy:**\n\n    * the codename within the "VERSION" attribute of the os-release file, if\n      provided,\n\n    * the value of the "Codename" attribute returned by the lsb_release\n      command,\n\n    * the value of the "<codename>" field of the distro release file.\n    ')), Return(value=Call(func=Attribute(value=Name(id='_distro', ctx=Load()), attr='codename', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='info', args=arguments(posonlyargs=[], args=[arg(arg='pretty', annotation=Name(id='bool', ctx=Load())), arg(arg='best', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Constant(value=False)]), body=[Expr(value=Constant(value="\n    Return certain machine-readable information items about the current OS\n    distribution in a dictionary, as shown in the following example:\n\n    .. sourcecode:: python\n\n        {\n            'id': 'rhel',\n            'version': '7.0',\n            'version_parts': {\n                'major': '7',\n                'minor': '0',\n                'build_number': ''\n            },\n            'like': 'fedora',\n            'codename': 'Maipo'\n        }\n\n    The dictionary structure and keys are always the same, regardless of which\n    information items are available in the underlying data sources. The values\n    for the various keys are as follows:\n\n    * ``id``:  The result of :func:`distro.id`.\n\n    * ``version``:  The result of :func:`distro.version`.\n\n    * ``version_parts -> major``:  The result of :func:`distro.major_version`.\n\n    * ``version_parts -> minor``:  The result of :func:`distro.minor_version`.\n\n    * ``version_parts -> build_number``:  The result of\n      :func:`distro.build_number`.\n\n    * ``like``:  The result of :func:`distro.like`.\n\n    * ``codename``:  The result of :func:`distro.codename`.\n\n    For a description of the *pretty* and *best* parameters, see the\n    :func:`distro.version` method.\n    ")), Return(value=Call(func=Attribute(value=Name(id='_distro', ctx=Load()), attr='info', ctx=Load()), args=[Name(id='pretty', ctx=Load()), Name(id='best', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='InfoDict', ctx=Load())), FunctionDef(name='os_release_info', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Return a dictionary containing key-value pairs for the information items\n    from the os-release file data source of the current OS distribution.\n\n    See `os-release file`_ for details about these information items.\n    ')), Return(value=Call(func=Attribute(value=Name(id='_distro', ctx=Load()), attr='os_release_info', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='lsb_release_info', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Return a dictionary containing key-value pairs for the information items\n    from the lsb_release command data source of the current OS distribution.\n\n    See `lsb_release command output`_ for details about these information\n    items.\n    ')), Return(value=Call(func=Attribute(value=Name(id='_distro', ctx=Load()), attr='lsb_release_info', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='distro_release_info', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Return a dictionary containing key-value pairs for the information items\n    from the distro release file data source of the current OS distribution.\n\n    See `distro release file`_ for details about these information items.\n    ')), Return(value=Call(func=Attribute(value=Name(id='_distro', ctx=Load()), attr='distro_release_info', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='uname_info', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Return a dictionary containing key-value pairs for the information items\n    from the distro release file data source of the current OS distribution.\n    ')), Return(value=Call(func=Attribute(value=Name(id='_distro', ctx=Load()), attr='uname_info', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='os_release_attr', args=arguments(posonlyargs=[], args=[arg(arg='attribute', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Return a single named information item from the os-release file data source\n    of the current OS distribution.\n\n    Parameters:\n\n    * ``attribute`` (string): Key of the information item.\n\n    Returns:\n\n    * (string): Value of the information item, if the item exists.\n      The empty string, if the item does not exist.\n\n    See `os-release file`_ for details about these information items.\n    ')), Return(value=Call(func=Attribute(value=Name(id='_distro', ctx=Load()), attr='os_release_attr', ctx=Load()), args=[Name(id='attribute', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='lsb_release_attr', args=arguments(posonlyargs=[], args=[arg(arg='attribute', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Return a single named information item from the lsb_release command output\n    data source of the current OS distribution.\n\n    Parameters:\n\n    * ``attribute`` (string): Key of the information item.\n\n    Returns:\n\n    * (string): Value of the information item, if the item exists.\n      The empty string, if the item does not exist.\n\n    See `lsb_release command output`_ for details about these information\n    items.\n    ')), Return(value=Call(func=Attribute(value=Name(id='_distro', ctx=Load()), attr='lsb_release_attr', ctx=Load()), args=[Name(id='attribute', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='distro_release_attr', args=arguments(posonlyargs=[], args=[arg(arg='attribute', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Return a single named information item from the distro release file\n    data source of the current OS distribution.\n\n    Parameters:\n\n    * ``attribute`` (string): Key of the information item.\n\n    Returns:\n\n    * (string): Value of the information item, if the item exists.\n      The empty string, if the item does not exist.\n\n    See `distro release file`_ for details about these information items.\n    ')), Return(value=Call(func=Attribute(value=Name(id='_distro', ctx=Load()), attr='distro_release_attr', ctx=Load()), args=[Name(id='attribute', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='uname_attr', args=arguments(posonlyargs=[], args=[arg(arg='attribute', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Return a single named information item from the distro release file\n    data source of the current OS distribution.\n\n    Parameters:\n\n    * ``attribute`` (string): Key of the information item.\n\n    Returns:\n\n    * (string): Value of the information item, if the item exists.\n                The empty string, if the item does not exist.\n    ')), Return(value=Call(func=Attribute(value=Name(id='_distro', ctx=Load()), attr='uname_attr', ctx=Load()), args=[Name(id='attribute', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), Try(body=[ImportFrom(module='functools', names=[alias(name='cached_property')], level=0)], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[ClassDef(name='cached_property', bases=[], keywords=[], body=[Expr(value=Constant(value='A version of @property which caches the value.  On access, it calls the\n        underlying function and sets the value in `__dict__` so future accesses\n        will not re-call the property.\n        ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='f', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='Any', ctx=Load())], ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_fname', ctx=Store())], value=Attribute(value=Name(id='f', ctx=Load()), attr='__name__', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_f', ctx=Store())], value=Name(id='f', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__get__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='obj', annotation=Name(id='Any', ctx=Load())), arg(arg='owner', annotation=Subscript(value=Name(id='Type', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Compare(left=Name(id='obj', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), msg=JoinedStr(values=[Constant(value='call '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='_fname', ctx=Load()), conversion=-1), Constant(value=' on an instance')])), Assign(targets=[Name(id='ret', ctx=Store()), Subscript(value=Attribute(value=Name(id='obj', ctx=Load()), attr='__dict__', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='_fname', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_f', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[])), Return(value=Name(id='ret', ctx=Load()))], decorator_list=[], returns=Name(id='Any', ctx=Load()))], decorator_list=[])])], orelse=[], finalbody=[]), ClassDef(name='LinuxDistribution', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    Provides information about a OS distribution.\n\n    This package creates a private module-global instance of this class with\n    default initialization arguments, that is used by the\n    `consolidated accessor functions`_ and `single source accessor functions`_.\n    By using default initialization arguments, that module-global instance\n    returns data about the current OS distribution (i.e. the distro this\n    package runs on).\n\n    Normally, it is not necessary to create additional instances of this class.\n    However, in situations where control is needed over the exact data sources\n    that are used, instances of this class can be created with a specific\n    distro release file, or a specific os-release file, or without invoking the\n    lsb_release command.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='include_lsb', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load())), arg(arg='os_release_file', annotation=Name(id='str', ctx=Load())), arg(arg='distro_release_file', annotation=Name(id='str', ctx=Load())), arg(arg='include_uname', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load())), arg(arg='root_dir', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='include_oslevel', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=''), Constant(value=''), Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='\n        The initialization method of this class gathers information from the\n        available data sources, and stores that in private instance attributes.\n        Subsequent access to the information items uses these private instance\n        attributes, so that the data sources are read only once.\n\n        Parameters:\n\n        * ``include_lsb`` (bool): Controls whether the\n          `lsb_release command output`_ is included as a data source.\n\n          If the lsb_release command is not available in the program execution\n          path, the data source for the lsb_release command will be empty.\n\n        * ``os_release_file`` (string): The path name of the\n          `os-release file`_ that is to be used as a data source.\n\n          An empty string (the default) will cause the default path name to\n          be used (see `os-release file`_ for details).\n\n          If the specified or defaulted os-release file does not exist, the\n          data source for the os-release file will be empty.\n\n        * ``distro_release_file`` (string): The path name of the\n          `distro release file`_ that is to be used as a data source.\n\n          An empty string (the default) will cause a default search algorithm\n          to be used (see `distro release file`_ for details).\n\n          If the specified distro release file does not exist, or if no default\n          distro release file can be found, the data source for the distro\n          release file will be empty.\n\n        * ``include_uname`` (bool): Controls whether uname command output is\n          included as a data source. If the uname command is not available in\n          the program execution path the data source for the uname command will\n          be empty.\n\n        * ``root_dir`` (string): The absolute path to the root directory to use\n          to find distro-related information files. Note that ``include_*``\n          parameters must not be enabled in combination with ``root_dir``.\n\n        * ``include_oslevel`` (bool): Controls whether (AIX) oslevel command\n          output is included as a data source. If the oslevel command is not\n          available in the program execution path the data source will be\n          empty.\n\n        Public instance attributes:\n\n        * ``os_release_file`` (string): The path name of the\n          `os-release file`_ that is actually used as a data source. The\n          empty string if no distro release file is used as a data source.\n\n        * ``distro_release_file`` (string): The path name of the\n          `distro release file`_ that is actually used as a data source. The\n          empty string if no distro release file is used as a data source.\n\n        * ``include_lsb`` (bool): The result of the ``include_lsb`` parameter.\n          This controls whether the lsb information will be loaded.\n\n        * ``include_uname`` (bool): The result of the ``include_uname``\n          parameter. This controls whether the uname information will\n          be loaded.\n\n        * ``include_oslevel`` (bool): The result of the ``include_oslevel``\n          parameter. This controls whether (AIX) oslevel information will be\n          loaded.\n\n        * ``root_dir`` (string): The result of the ``root_dir`` parameter.\n          The absolute path to the root directory to use to find distro-related\n          information files.\n\n        Raises:\n\n        * :py:exc:`ValueError`: Initialization parameters combination is not\n           supported.\n\n        * :py:exc:`OSError`: Some I/O issue with an os-release file or distro\n          release file.\n\n        * :py:exc:`UnicodeError`: A data source has unexpected characters or\n          uses an unexpected encoding.\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='root_dir', ctx=Store())], value=Name(id='root_dir', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='etc_dir', ctx=Store())], value=IfExp(test=Name(id='root_dir', ctx=Load()), body=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='root_dir', ctx=Load()), Constant(value='etc')], keywords=[]), orelse=Name(id='_UNIXCONFDIR', ctx=Load()))), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='usr_lib_dir', ctx=Store())], value=IfExp(test=Name(id='root_dir', ctx=Load()), body=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='root_dir', ctx=Load()), Constant(value='usr/lib')], keywords=[]), orelse=Name(id='_UNIXUSRLIBDIR', ctx=Load()))), If(test=Name(id='os_release_file', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='os_release_file', ctx=Store())], value=Name(id='os_release_file', ctx=Load()))], orelse=[Assign(targets=[Name(id='etc_dir_os_release_file', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='etc_dir', ctx=Load()), Name(id='_OS_RELEASE_BASENAME', ctx=Load())], keywords=[])), Assign(targets=[Name(id='usr_lib_os_release_file', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='usr_lib_dir', ctx=Load()), Name(id='_OS_RELEASE_BASENAME', ctx=Load())], keywords=[])), If(test=BoolOp(op=Or(), values=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isfile', ctx=Load()), args=[Name(id='etc_dir_os_release_file', ctx=Load())], keywords=[]), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isfile', ctx=Load()), args=[Name(id='usr_lib_os_release_file', ctx=Load())], keywords=[]))]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='os_release_file', ctx=Store())], value=Name(id='etc_dir_os_release_file', ctx=Load()))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='os_release_file', ctx=Store())], value=Name(id='usr_lib_os_release_file', ctx=Load()))])]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='distro_release_file', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='distro_release_file', ctx=Load()), Constant(value='')])), Assign(targets=[Name(id='is_root_dir_defined', ctx=Store())], value=Compare(left=Name(id='root_dir', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), If(test=BoolOp(op=And(), values=[Name(id='is_root_dir_defined', ctx=Load()), BoolOp(op=Or(), values=[Name(id='include_lsb', ctx=Load()), Name(id='include_uname', ctx=Load()), Name(id='include_oslevel', ctx=Load())])]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Including subprocess data sources from specific root_dir is disallowed to prevent false information')], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='include_lsb', ctx=Store())], value=IfExp(test=Compare(left=Name(id='include_lsb', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Name(id='include_lsb', ctx=Load()), orelse=UnaryOp(op=Not(), operand=Name(id='is_root_dir_defined', ctx=Load())))), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='include_uname', ctx=Store())], value=IfExp(test=Compare(left=Name(id='include_uname', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Name(id='include_uname', ctx=Load()), orelse=UnaryOp(op=Not(), operand=Name(id='is_root_dir_defined', ctx=Load())))), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='include_oslevel', ctx=Store())], value=IfExp(test=Compare(left=Name(id='include_oslevel', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Name(id='include_oslevel', ctx=Load()), orelse=UnaryOp(op=Not(), operand=Name(id='is_root_dir_defined', ctx=Load()))))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return repr of all info')), Return(value=Call(func=Attribute(value=Constant(value='LinuxDistribution(os_release_file={self.os_release_file!r}, distro_release_file={self.distro_release_file!r}, include_lsb={self.include_lsb!r}, include_uname={self.include_uname!r}, include_oslevel={self.include_oslevel!r}, root_dir={self.root_dir!r}, _os_release_info={self._os_release_info!r}, _lsb_release_info={self._lsb_release_info!r}, _distro_release_info={self._distro_release_info!r}, _uname_info={self._uname_info!r}, _oslevel_info={self._oslevel_info!r})'), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='self', value=Name(id='self', ctx=Load()))]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='linux_distribution', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='full_distribution_name', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Expr(value=Constant(value="\n        Return information about the OS distribution that is compatible\n        with Python's :func:`platform.linux_distribution`, supporting a subset\n        of its parameters.\n\n        For details, see :func:`distro.linux_distribution`.\n        ")), Return(value=Tuple(elts=[IfExp(test=Name(id='full_distribution_name', ctx=Load()), body=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), args=[], keywords=[]), orelse=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='id', ctx=Load()), args=[], keywords=[])), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='version', ctx=Load()), args=[], keywords=[]), BoolOp(op=Or(), values=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_os_release_info', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='release_codename')], keywords=[]), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='codename', ctx=Load()), args=[], keywords=[])])], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='id', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the distro ID of the OS distribution, as a string.\n\n        For details, see :func:`distro.id`.\n        ')), FunctionDef(name='normalize', args=arguments(posonlyargs=[], args=[arg(arg='distro_id', annotation=Name(id='str', ctx=Load())), arg(arg='table', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='distro_id', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='distro_id', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value=' '), Constant(value='_')], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='table', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='distro_id', ctx=Load()), Name(id='distro_id', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), Assign(targets=[Name(id='distro_id', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='os_release_attr', ctx=Load()), args=[Constant(value='id')], keywords=[])), If(test=Name(id='distro_id', ctx=Load()), body=[Return(value=Call(func=Name(id='normalize', ctx=Load()), args=[Name(id='distro_id', ctx=Load()), Name(id='NORMALIZED_OS_ID', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='distro_id', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='lsb_release_attr', ctx=Load()), args=[Constant(value='distributor_id')], keywords=[])), If(test=Name(id='distro_id', ctx=Load()), body=[Return(value=Call(func=Name(id='normalize', ctx=Load()), args=[Name(id='distro_id', ctx=Load()), Name(id='NORMALIZED_LSB_ID', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='distro_id', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='distro_release_attr', ctx=Load()), args=[Constant(value='id')], keywords=[])), If(test=Name(id='distro_id', ctx=Load()), body=[Return(value=Call(func=Name(id='normalize', ctx=Load()), args=[Name(id='distro_id', ctx=Load()), Name(id='NORMALIZED_DISTRO_ID', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='distro_id', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='uname_attr', ctx=Load()), args=[Constant(value='id')], keywords=[])), If(test=Name(id='distro_id', ctx=Load()), body=[Return(value=Call(func=Name(id='normalize', ctx=Load()), args=[Name(id='distro_id', ctx=Load()), Name(id='NORMALIZED_DISTRO_ID', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Constant(value=''))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='name', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='pretty', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value='\n        Return the name of the OS distribution, as a string.\n\n        For details, see :func:`distro.name`.\n        ')), Assign(targets=[Name(id='name', ctx=Store())], value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='os_release_attr', ctx=Load()), args=[Constant(value='name')], keywords=[]), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='lsb_release_attr', ctx=Load()), args=[Constant(value='distributor_id')], keywords=[]), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='distro_release_attr', ctx=Load()), args=[Constant(value='name')], keywords=[]), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='uname_attr', ctx=Load()), args=[Constant(value='name')], keywords=[])])), If(test=Name(id='pretty', ctx=Load()), body=[Assign(targets=[Name(id='name', ctx=Store())], value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='os_release_attr', ctx=Load()), args=[Constant(value='pretty_name')], keywords=[]), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='lsb_release_attr', ctx=Load()), args=[Constant(value='description')], keywords=[])])), If(test=UnaryOp(op=Not(), operand=Name(id='name', ctx=Load())), body=[Assign(targets=[Name(id='name', ctx=Store())], value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='distro_release_attr', ctx=Load()), args=[Constant(value='name')], keywords=[]), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='uname_attr', ctx=Load()), args=[Constant(value='name')], keywords=[])])), Assign(targets=[Name(id='version', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='version', ctx=Load()), args=[], keywords=[keyword(arg='pretty', value=Constant(value=True))])), If(test=Name(id='version', ctx=Load()), body=[Assign(targets=[Name(id='name', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1), Constant(value=' '), FormattedValue(value=Name(id='version', ctx=Load()), conversion=-1)]))], orelse=[])], orelse=[])], orelse=[]), Return(value=BoolOp(op=Or(), values=[Name(id='name', ctx=Load()), Constant(value='')]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='version', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='pretty', annotation=Name(id='bool', ctx=Load())), arg(arg='best', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Constant(value=False)]), body=[Expr(value=Constant(value='\n        Return the version of the OS distribution, as a string.\n\n        For details, see :func:`distro.version`.\n        ')), Assign(targets=[Name(id='versions', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='os_release_attr', ctx=Load()), args=[Constant(value='version_id')], keywords=[]), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='lsb_release_attr', ctx=Load()), args=[Constant(value='release')], keywords=[]), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='distro_release_attr', ctx=Load()), args=[Constant(value='version_id')], keywords=[]), Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_parse_distro_release_content', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='os_release_attr', ctx=Load()), args=[Constant(value='pretty_name')], keywords=[])], keywords=[]), attr='get', ctx=Load()), args=[Constant(value='version_id'), Constant(value='')], keywords=[]), Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_parse_distro_release_content', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='lsb_release_attr', ctx=Load()), args=[Constant(value='description')], keywords=[])], keywords=[]), attr='get', ctx=Load()), args=[Constant(value='version_id'), Constant(value='')], keywords=[]), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='uname_attr', ctx=Load()), args=[Constant(value='release')], keywords=[])], ctx=Load())), If(test=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='uname_attr', ctx=Load()), args=[Constant(value='id')], keywords=[]), attr='startswith', ctx=Load()), args=[Constant(value='aix')], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='versions', ctx=Load()), attr='insert', ctx=Load()), args=[Constant(value=0), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='oslevel_info', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='id', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Constant(value='debian')]), Compare(left=Constant(value='debian'), ops=[In()], comparators=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='like', ctx=Load()), args=[], keywords=[]), attr='split', ctx=Load()), args=[], keywords=[])])]), body=[Expr(value=Call(func=Attribute(value=Name(id='versions', ctx=Load()), attr='append', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_debian_version', ctx=Load())], keywords=[]))], orelse=[])]), Assign(targets=[Name(id='version', ctx=Store())], value=Constant(value='')), If(test=Name(id='best', ctx=Load()), body=[For(target=Name(id='v', ctx=Store()), iter=Name(id='versions', ctx=Load()), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Call(func=Attribute(value=Name(id='v', ctx=Load()), attr='count', ctx=Load()), args=[Constant(value='.')], keywords=[]), ops=[Gt()], comparators=[Call(func=Attribute(value=Name(id='version', ctx=Load()), attr='count', ctx=Load()), args=[Constant(value='.')], keywords=[])]), Compare(left=Name(id='version', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')])]), body=[Assign(targets=[Name(id='version', ctx=Store())], value=Name(id='v', ctx=Load()))], orelse=[])], orelse=[])], orelse=[For(target=Name(id='v', ctx=Store()), iter=Name(id='versions', ctx=Load()), body=[If(test=Compare(left=Name(id='v', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='')]), body=[Assign(targets=[Name(id='version', ctx=Store())], value=Name(id='v', ctx=Load())), Break()], orelse=[])], orelse=[])]), If(test=BoolOp(op=And(), values=[Name(id='pretty', ctx=Load()), Name(id='version', ctx=Load()), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='codename', ctx=Load()), args=[], keywords=[])]), body=[Assign(targets=[Name(id='version', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='version', ctx=Load()), conversion=-1), Constant(value=' ('), FormattedValue(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='codename', ctx=Load()), args=[], keywords=[]), conversion=-1), Constant(value=')')]))], orelse=[]), Return(value=Name(id='version', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='version_parts', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='best', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value='\n        Return the version of the OS distribution, as a tuple of version\n        numbers.\n\n        For details, see :func:`distro.version_parts`.\n        ')), Assign(targets=[Name(id='version_str', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='version', ctx=Load()), args=[], keywords=[keyword(arg='best', value=Name(id='best', ctx=Load()))])), If(test=Name(id='version_str', ctx=Load()), body=[Assign(targets=[Name(id='version_regex', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='(\\d+)\\.?(\\d+)?\\.?(\\d+)?')], keywords=[])), Assign(targets=[Name(id='matches', ctx=Store())], value=Call(func=Attribute(value=Name(id='version_regex', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='version_str', ctx=Load())], keywords=[])), If(test=Name(id='matches', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='major', ctx=Store()), Name(id='minor', ctx=Store()), Name(id='build_number', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='matches', ctx=Load()), attr='groups', ctx=Load()), args=[], keywords=[])), Return(value=Tuple(elts=[Name(id='major', ctx=Load()), BoolOp(op=Or(), values=[Name(id='minor', ctx=Load()), Constant(value='')]), BoolOp(op=Or(), values=[Name(id='build_number', ctx=Load()), Constant(value='')])], ctx=Load()))], orelse=[])], orelse=[]), Return(value=Tuple(elts=[Constant(value=''), Constant(value=''), Constant(value='')], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='major_version', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='best', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value='\n        Return the major version number of the current distribution.\n\n        For details, see :func:`distro.major_version`.\n        ')), Return(value=Subscript(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='version_parts', ctx=Load()), args=[Name(id='best', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='minor_version', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='best', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value='\n        Return the minor version number of the current distribution.\n\n        For details, see :func:`distro.minor_version`.\n        ')), Return(value=Subscript(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='version_parts', ctx=Load()), args=[Name(id='best', ctx=Load())], keywords=[]), slice=Constant(value=1), ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='build_number', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='best', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value='\n        Return the build number of the current distribution.\n\n        For details, see :func:`distro.build_number`.\n        ')), Return(value=Subscript(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='version_parts', ctx=Load()), args=[Name(id='best', ctx=Load())], keywords=[]), slice=Constant(value=2), ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='like', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return the IDs of distributions that are like the OS distribution.\n\n        For details, see :func:`distro.like`.\n        ')), Return(value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='os_release_attr', ctx=Load()), args=[Constant(value='id_like')], keywords=[]), Constant(value='')]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='codename', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return the codename of the OS distribution.\n\n        For details, see :func:`distro.codename`.\n        ')), Try(body=[Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_os_release_info', ctx=Load()), slice=Constant(value='codename'), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Return(value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='lsb_release_attr', ctx=Load()), args=[Constant(value='codename')], keywords=[]), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='distro_release_attr', ctx=Load()), args=[Constant(value='codename')], keywords=[]), Constant(value='')]))])], orelse=[], finalbody=[])], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='info', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='pretty', annotation=Name(id='bool', ctx=Load())), arg(arg='best', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Constant(value=False)]), body=[Expr(value=Constant(value='\n        Return certain machine-readable information about the OS\n        distribution.\n\n        For details, see :func:`distro.info`.\n        ')), Return(value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='id', value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='id', ctx=Load()), args=[], keywords=[])), keyword(arg='version', value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='version', ctx=Load()), args=[Name(id='pretty', ctx=Load()), Name(id='best', ctx=Load())], keywords=[])), keyword(arg='version_parts', value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='major', value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='major_version', ctx=Load()), args=[Name(id='best', ctx=Load())], keywords=[])), keyword(arg='minor', value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='minor_version', ctx=Load()), args=[Name(id='best', ctx=Load())], keywords=[])), keyword(arg='build_number', value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='build_number', ctx=Load()), args=[Name(id='best', ctx=Load())], keywords=[]))])), keyword(arg='like', value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='like', ctx=Load()), args=[], keywords=[])), keyword(arg='codename', value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='codename', ctx=Load()), args=[], keywords=[]))]))], decorator_list=[], returns=Name(id='InfoDict', ctx=Load())), FunctionDef(name='os_release_info', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return a dictionary containing key-value pairs for the information\n        items from the os-release file data source of the OS distribution.\n\n        For details, see :func:`distro.os_release_info`.\n        ')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_os_release_info', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='lsb_release_info', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return a dictionary containing key-value pairs for the information\n        items from the lsb_release command data source of the OS\n        distribution.\n\n        For details, see :func:`distro.lsb_release_info`.\n        ')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_lsb_release_info', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='distro_release_info', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return a dictionary containing key-value pairs for the information\n        items from the distro release file data source of the OS\n        distribution.\n\n        For details, see :func:`distro.distro_release_info`.\n        ')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distro_release_info', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='uname_info', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return a dictionary containing key-value pairs for the information\n        items from the uname command data source of the OS distribution.\n\n        For details, see :func:`distro.uname_info`.\n        ')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_uname_info', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='oslevel_info', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Return AIX' oslevel command output.\n        ")), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_oslevel_info', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='os_release_attr', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='attribute', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return a single named information item from the os-release file data\n        source of the OS distribution.\n\n        For details, see :func:`distro.os_release_attr`.\n        ')), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_os_release_info', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='attribute', ctx=Load()), Constant(value='')], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='lsb_release_attr', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='attribute', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return a single named information item from the lsb_release command\n        output data source of the OS distribution.\n\n        For details, see :func:`distro.lsb_release_attr`.\n        ')), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_lsb_release_info', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='attribute', ctx=Load()), Constant(value='')], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='distro_release_attr', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='attribute', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return a single named information item from the distro release file\n        data source of the OS distribution.\n\n        For details, see :func:`distro.distro_release_attr`.\n        ')), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_distro_release_info', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='attribute', ctx=Load()), Constant(value='')], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='uname_attr', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='attribute', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return a single named information item from the uname command\n        output data source of the OS distribution.\n\n        For details, see :func:`distro.uname_attr`.\n        ')), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_uname_info', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='attribute', ctx=Load()), Constant(value='')], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='_os_release_info', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Get the information items from the specified os-release file.\n\n        Returns:\n            A dictionary containing all information items.\n        ')), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isfile', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='os_release_file', ctx=Load())], keywords=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='os_release_file', ctx=Load())], keywords=[keyword(arg='encoding', value=Constant(value='utf-8'))]), optional_vars=Name(id='release_file', ctx=Store()))], body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_parse_os_release_content', ctx=Load()), args=[Name(id='release_file', ctx=Load())], keywords=[]))])], orelse=[]), Return(value=Dict(keys=[], values=[]))], decorator_list=[Name(id='cached_property', ctx=Load())], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='_parse_os_release_content', args=arguments(posonlyargs=[], args=[arg(arg='lines', annotation=Name(id='TextIO', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Parse the lines of an os-release file.\n\n        Parameters:\n\n        * lines: Iterable through the lines in the os-release file.\n                 Each line must be a unicode string or a UTF-8 encoded byte\n                 string.\n\n        Returns:\n            A dictionary containing all information items.\n        ')), Assign(targets=[Name(id='props', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='lexer', ctx=Store())], value=Call(func=Attribute(value=Name(id='shlex', ctx=Load()), attr='shlex', ctx=Load()), args=[Name(id='lines', ctx=Load())], keywords=[keyword(arg='posix', value=Constant(value=True))])), Assign(targets=[Attribute(value=Name(id='lexer', ctx=Load()), attr='whitespace_split', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='tokens', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='lexer', ctx=Load())], keywords=[])), For(target=Name(id='token', ctx=Store()), iter=Name(id='tokens', ctx=Load()), body=[If(test=Compare(left=Constant(value='='), ops=[In()], comparators=[Name(id='token', ctx=Load())]), body=[Assign(targets=[Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='token', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='='), Constant(value=1)], keywords=[])), Assign(targets=[Subscript(value=Name(id='props', ctx=Load()), slice=Call(func=Attribute(value=Name(id='k', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), ctx=Store())], value=Name(id='v', ctx=Load()))], orelse=[])], orelse=[]), If(test=Compare(left=Constant(value='version'), ops=[In()], comparators=[Name(id='props', ctx=Load())]), body=[Assign(targets=[Name(id='match', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='search', ctx=Load()), args=[Constant(value='\\((\\D+)\\)|,\\s*(\\D+)'), Subscript(value=Name(id='props', ctx=Load()), slice=Constant(value='version'), ctx=Load())], keywords=[])), If(test=Name(id='match', ctx=Load()), body=[Assign(targets=[Name(id='release_codename', ctx=Store())], value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value=1)], keywords=[]), Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value=2)], keywords=[])])), Assign(targets=[Subscript(value=Name(id='props', ctx=Load()), slice=Constant(value='codename'), ctx=Store()), Subscript(value=Name(id='props', ctx=Load()), slice=Constant(value='release_codename'), ctx=Store())], value=Name(id='release_codename', ctx=Load()))], orelse=[])], orelse=[]), If(test=Compare(left=Constant(value='version_codename'), ops=[In()], comparators=[Name(id='props', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='props', ctx=Load()), slice=Constant(value='codename'), ctx=Store())], value=Subscript(value=Name(id='props', ctx=Load()), slice=Constant(value='version_codename'), ctx=Load()))], orelse=[If(test=Compare(left=Constant(value='ubuntu_codename'), ops=[In()], comparators=[Name(id='props', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='props', ctx=Load()), slice=Constant(value='codename'), ctx=Store())], value=Subscript(value=Name(id='props', ctx=Load()), slice=Constant(value='ubuntu_codename'), ctx=Load()))], orelse=[])]), Return(value=Name(id='props', ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='_lsb_release_info', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Get the information items from the lsb_release command output.\n\n        Returns:\n            A dictionary containing all information items.\n        ')), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='include_lsb', ctx=Load())), body=[Return(value=Dict(keys=[], values=[]))], orelse=[]), Try(body=[Assign(targets=[Name(id='cmd', ctx=Store())], value=Tuple(elts=[Constant(value='lsb_release'), Constant(value='-a')], ctx=Load())), Assign(targets=[Name(id='stdout', ctx=Store())], value=Call(func=Attribute(value=Name(id='subprocess', ctx=Load()), attr='check_output', ctx=Load()), args=[Name(id='cmd', ctx=Load())], keywords=[keyword(arg='stderr', value=Attribute(value=Name(id='subprocess', ctx=Load()), attr='DEVNULL', ctx=Load()))]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='OSError', ctx=Load()), Attribute(value=Name(id='subprocess', ctx=Load()), attr='CalledProcessError', ctx=Load())], ctx=Load()), body=[Return(value=Dict(keys=[], values=[]))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='content', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_to_str', ctx=Load()), args=[Name(id='stdout', ctx=Load())], keywords=[]), attr='splitlines', ctx=Load()), args=[], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_parse_lsb_release_content', ctx=Load()), args=[Name(id='content', ctx=Load())], keywords=[]))], decorator_list=[Name(id='cached_property', ctx=Load())], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='_parse_lsb_release_content', args=arguments(posonlyargs=[], args=[arg(arg='lines', annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Parse the output of the lsb_release command.\n\n        Parameters:\n\n        * lines: Iterable through the lines of the lsb_release output.\n                 Each line must be a unicode string or a UTF-8 encoded byte\n                 string.\n\n        Returns:\n            A dictionary containing all information items.\n        ')), Assign(targets=[Name(id='props', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='line', ctx=Store()), iter=Name(id='lines', ctx=Load()), body=[Assign(targets=[Name(id='kv', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='strip', ctx=Load()), args=[Constant(value='\n')], keywords=[]), attr='split', ctx=Load()), args=[Constant(value=':'), Constant(value=1)], keywords=[])), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='kv', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Constant(value=2)]), body=[Continue()], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store())], value=Name(id='kv', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='props', ctx=Load()), attr='update', ctx=Load()), args=[Dict(keys=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='k', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value=' '), Constant(value='_')], keywords=[]), attr='lower', ctx=Load()), args=[], keywords=[])], values=[Call(func=Attribute(value=Name(id='v', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[])])], keywords=[]))], orelse=[]), Return(value=Name(id='props', ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='_uname_info', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='include_uname', ctx=Load())), body=[Return(value=Dict(keys=[], values=[]))], orelse=[]), Try(body=[Assign(targets=[Name(id='cmd', ctx=Store())], value=Tuple(elts=[Constant(value='uname'), Constant(value='-rs')], ctx=Load())), Assign(targets=[Name(id='stdout', ctx=Store())], value=Call(func=Attribute(value=Name(id='subprocess', ctx=Load()), attr='check_output', ctx=Load()), args=[Name(id='cmd', ctx=Load())], keywords=[keyword(arg='stderr', value=Attribute(value=Name(id='subprocess', ctx=Load()), attr='DEVNULL', ctx=Load()))]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), body=[Return(value=Dict(keys=[], values=[]))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='content', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_to_str', ctx=Load()), args=[Name(id='stdout', ctx=Load())], keywords=[]), attr='splitlines', ctx=Load()), args=[], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_parse_uname_content', ctx=Load()), args=[Name(id='content', ctx=Load())], keywords=[]))], decorator_list=[Name(id='cached_property', ctx=Load())], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='_oslevel_info', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='include_oslevel', ctx=Load())), body=[Return(value=Constant(value=''))], orelse=[]), Try(body=[Assign(targets=[Name(id='stdout', ctx=Store())], value=Call(func=Attribute(value=Name(id='subprocess', ctx=Load()), attr='check_output', ctx=Load()), args=[Constant(value='oslevel')], keywords=[keyword(arg='stderr', value=Attribute(value=Name(id='subprocess', ctx=Load()), attr='DEVNULL', ctx=Load()))]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='OSError', ctx=Load()), Attribute(value=Name(id='subprocess', ctx=Load()), attr='CalledProcessError', ctx=Load())], ctx=Load()), body=[Return(value=Constant(value=''))])], orelse=[], finalbody=[]), Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_to_str', ctx=Load()), args=[Name(id='stdout', ctx=Load())], keywords=[]), attr='strip', ctx=Load()), args=[], keywords=[]))], decorator_list=[Name(id='cached_property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='_debian_version', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='etc_dir', ctx=Load()), Constant(value='debian_version')], keywords=[])], keywords=[keyword(arg='encoding', value=Constant(value='ascii'))]), optional_vars=Name(id='fp', ctx=Store()))], body=[Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='fp', ctx=Load()), attr='readline', ctx=Load()), args=[], keywords=[]), attr='rstrip', ctx=Load()), args=[], keywords=[]))])], handlers=[ExceptHandler(type=Name(id='FileNotFoundError', ctx=Load()), body=[Return(value=Constant(value=''))])], orelse=[], finalbody=[])], decorator_list=[Name(id='cached_property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='_parse_uname_content', args=arguments(posonlyargs=[], args=[arg(arg='lines', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='lines', ctx=Load())), body=[Return(value=Dict(keys=[], values=[]))], orelse=[]), Assign(targets=[Name(id='props', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='match', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='search', ctx=Load()), args=[Constant(value='^([^\\s]+)\\s+([\\d\\.]+)'), Call(func=Attribute(value=Subscript(value=Name(id='lines', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[])], keywords=[])), If(test=Name(id='match', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='name', ctx=Store()), Name(id='version', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='groups', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='Linux')]), body=[Return(value=Dict(keys=[], values=[]))], orelse=[]), Assign(targets=[Subscript(value=Name(id='props', ctx=Load()), slice=Constant(value='id'), ctx=Store())], value=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Name(id='props', ctx=Load()), slice=Constant(value='name'), ctx=Store())], value=Name(id='name', ctx=Load())), Assign(targets=[Subscript(value=Name(id='props', ctx=Load()), slice=Constant(value='release'), ctx=Store())], value=Name(id='version', ctx=Load()))], orelse=[]), Return(value=Name(id='props', ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='_to_str', args=arguments(posonlyargs=[], args=[arg(arg='bytestring', annotation=Name(id='bytes', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='encoding', ctx=Store())], value=Call(func=Attribute(value=Name(id='sys', ctx=Load()), attr='getfilesystemencoding', ctx=Load()), args=[], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='bytestring', ctx=Load()), attr='decode', ctx=Load()), args=[Name(id='encoding', ctx=Load())], keywords=[]))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='_distro_release_info', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Get the information items from the specified distro release file.\n\n        Returns:\n            A dictionary containing all information items.\n        ')), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='distro_release_file', ctx=Load()), body=[Assign(targets=[Name(id='distro_info', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_parse_distro_release_file', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='distro_release_file', ctx=Load())], keywords=[])), Assign(targets=[Name(id='basename', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='basename', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='distro_release_file', ctx=Load())], keywords=[])), Assign(targets=[Name(id='match', ctx=Store())], value=Call(func=Attribute(value=Name(id='_DISTRO_RELEASE_BASENAME_PATTERN', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='basename', ctx=Load())], keywords=[]))], orelse=[Try(body=[Assign(targets=[Name(id='basenames', ctx=Store())], value=ListComp(elt=Name(id='basename', ctx=Load()), generators=[comprehension(target=Name(id='basename', ctx=Store()), iter=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='listdir', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='etc_dir', ctx=Load())], keywords=[]), ifs=[BoolOp(op=And(), values=[Compare(left=Name(id='basename', ctx=Load()), ops=[NotIn()], comparators=[Name(id='_DISTRO_RELEASE_IGNORE_BASENAMES', ctx=Load())]), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isfile', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='etc_dir', ctx=Load()), Name(id='basename', ctx=Load())], keywords=[])], keywords=[])])], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='basenames', ctx=Load()), attr='sort', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), body=[Assign(targets=[Name(id='basenames', ctx=Store())], value=Name(id='_DISTRO_RELEASE_BASENAMES', ctx=Load()))])], orelse=[], finalbody=[]), For(target=Name(id='basename', ctx=Store()), iter=Name(id='basenames', ctx=Load()), body=[Assign(targets=[Name(id='match', ctx=Store())], value=Call(func=Attribute(value=Name(id='_DISTRO_RELEASE_BASENAME_PATTERN', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='basename', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='match', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Continue()], orelse=[]), Assign(targets=[Name(id='filepath', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='etc_dir', ctx=Load()), Name(id='basename', ctx=Load())], keywords=[])), Assign(targets=[Name(id='distro_info', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_parse_distro_release_file', ctx=Load()), args=[Name(id='filepath', ctx=Load())], keywords=[])), If(test=Compare(left=Constant(value='name'), ops=[NotIn()], comparators=[Name(id='distro_info', ctx=Load())]), body=[Continue()], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='distro_release_file', ctx=Store())], value=Name(id='filepath', ctx=Load())), Break()], orelse=[Return(value=Dict(keys=[], values=[]))])]), If(test=Compare(left=Name(id='match', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Subscript(value=Name(id='distro_info', ctx=Load()), slice=Constant(value='id'), ctx=Store())], value=Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value=1)], keywords=[]))], orelse=[]), If(test=Compare(left=Constant(value='cloudlinux'), ops=[In()], comparators=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='distro_info', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='name'), Constant(value='')], keywords=[]), attr='lower', ctx=Load()), args=[], keywords=[])]), body=[Assign(targets=[Subscript(value=Name(id='distro_info', ctx=Load()), slice=Constant(value='id'), ctx=Store())], value=Constant(value='cloudlinux'))], orelse=[]), Return(value=Name(id='distro_info', ctx=Load()))], decorator_list=[Name(id='cached_property', ctx=Load())], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='_parse_distro_release_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='filepath', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Parse a distro release file.\n\n        Parameters:\n\n        * filepath: Path name of the distro release file.\n\n        Returns:\n            A dictionary containing all information items.\n        ')), Try(body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='filepath', ctx=Load())], keywords=[keyword(arg='encoding', value=Constant(value='utf-8'))]), optional_vars=Name(id='fp', ctx=Store()))], body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_parse_distro_release_content', ctx=Load()), args=[Call(func=Attribute(value=Name(id='fp', ctx=Load()), attr='readline', ctx=Load()), args=[], keywords=[])], keywords=[]))])], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), body=[Return(value=Dict(keys=[], values=[]))])], orelse=[], finalbody=[])], decorator_list=[], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='_parse_distro_release_content', args=arguments(posonlyargs=[], args=[arg(arg='line', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Parse a line from a distro release file.\n\n        Parameters:\n        * line: Line from the distro release file. Must be a unicode string\n                or a UTF-8 encoded byte string.\n\n        Returns:\n            A dictionary containing all information items.\n        ')), Assign(targets=[Name(id='matches', ctx=Store())], value=Call(func=Attribute(value=Name(id='_DISTRO_RELEASE_CONTENT_REVERSED_PATTERN', ctx=Load()), attr='match', ctx=Load()), args=[Subscript(value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])), Assign(targets=[Name(id='distro_info', ctx=Store())], value=Dict(keys=[], values=[])), If(test=Name(id='matches', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='distro_info', ctx=Load()), slice=Constant(value='name'), ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='matches', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value=3)], keywords=[]), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())), If(test=Call(func=Attribute(value=Name(id='matches', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value=2)], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='distro_info', ctx=Load()), slice=Constant(value='version_id'), ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='matches', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value=2)], keywords=[]), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))], orelse=[]), If(test=Call(func=Attribute(value=Name(id='matches', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value=1)], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='distro_info', ctx=Load()), slice=Constant(value='codename'), ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='matches', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value=1)], keywords=[]), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))], orelse=[])], orelse=[If(test=Name(id='line', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='distro_info', ctx=Load()), slice=Constant(value='name'), ctx=Store())], value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]))], orelse=[])]), Return(value=Name(id='distro_info', ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='_distro', ctx=Store())], value=Call(func=Name(id='LinuxDistribution', ctx=Load()), args=[], keywords=[])), FunctionDef(name='main', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='setLevel', ctx=Load()), args=[Attribute(value=Name(id='logging', ctx=Load()), attr='DEBUG', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='addHandler', ctx=Load()), args=[Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='StreamHandler', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='parser', ctx=Store())], value=Call(func=Attribute(value=Name(id='argparse', ctx=Load()), attr='ArgumentParser', ctx=Load()), args=[], keywords=[keyword(arg='description', value=Constant(value='OS distro info tool'))])), Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='add_argument', ctx=Load()), args=[Constant(value='--json'), Constant(value='-j')], keywords=[keyword(arg='help', value=Constant(value='Output in machine readable format')), keyword(arg='action', value=Constant(value='store_true'))])), Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='add_argument', ctx=Load()), args=[Constant(value='--root-dir'), Constant(value='-r')], keywords=[keyword(arg='type', value=Name(id='str', ctx=Load())), keyword(arg='dest', value=Constant(value='root_dir')), keyword(arg='help', value=Constant(value='Path to the root filesystem directory (defaults to /)'))])), Assign(targets=[Name(id='args', ctx=Store())], value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='parse_args', ctx=Load()), args=[], keywords=[])), If(test=Attribute(value=Name(id='args', ctx=Load()), attr='root_dir', ctx=Load()), body=[Assign(targets=[Name(id='dist', ctx=Store())], value=Call(func=Name(id='LinuxDistribution', ctx=Load()), args=[], keywords=[keyword(arg='include_lsb', value=Constant(value=False)), keyword(arg='include_uname', value=Constant(value=False)), keyword(arg='include_oslevel', value=Constant(value=False)), keyword(arg='root_dir', value=Attribute(value=Name(id='args', ctx=Load()), attr='root_dir', ctx=Load()))]))], orelse=[Assign(targets=[Name(id='dist', ctx=Store())], value=Name(id='_distro', ctx=Load()))]), If(test=Attribute(value=Name(id='args', ctx=Load()), attr='json', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dumps', ctx=Load()), args=[Call(func=Attribute(value=Name(id='dist', ctx=Load()), attr='info', ctx=Load()), args=[], keywords=[])], keywords=[keyword(arg='indent', value=Constant(value=4)), keyword(arg='sort_keys', value=Constant(value=True))])], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Name: %s'), Call(func=Attribute(value=Name(id='dist', ctx=Load()), attr='name', ctx=Load()), args=[], keywords=[keyword(arg='pretty', value=Constant(value=True))])], keywords=[])), Assign(targets=[Name(id='distribution_version', ctx=Store())], value=Call(func=Attribute(value=Name(id='dist', ctx=Load()), attr='version', ctx=Load()), args=[], keywords=[keyword(arg='pretty', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Version: %s'), Name(id='distribution_version', ctx=Load())], keywords=[])), Assign(targets=[Name(id='distribution_codename', ctx=Store())], value=Call(func=Attribute(value=Name(id='dist', ctx=Load()), attr='codename', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Codename: %s'), Name(id='distribution_codename', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None)), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__')]), body=[Expr(value=Call(func=Name(id='main', ctx=Load()), args=[], keywords=[]))], orelse=[])], type_ignores=[])