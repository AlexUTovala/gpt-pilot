Module(body=[Expr(value=Constant(value='\nbackports.makefile\n~~~~~~~~~~~~~~~~~~\n\nBackports the Python 3 ``socket.makefile`` method for use with anything that\nwants to create a "fake" socket object.\n')), Import(names=[alias(name='io')]), ImportFrom(module='socket', names=[alias(name='SocketIO')], level=0), FunctionDef(name='backport_makefile', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='mode'), arg(arg='buffering'), arg(arg='encoding'), arg(arg='errors'), arg(arg='newline')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='r'), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='\n    Backport of ``socket.makefile`` from Python 3.5.\n    ')), If(test=UnaryOp(op=Not(), operand=Compare(left=Call(func=Name(id='set', ctx=Load()), args=[Name(id='mode', ctx=Load())], keywords=[]), ops=[LtE()], comparators=[Set(elts=[Constant(value='r'), Constant(value='w'), Constant(value='b')])])), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='invalid mode %r (only r, w, b allowed)'), op=Mod(), right=Tuple(elts=[Name(id='mode', ctx=Load())], ctx=Load()))], keywords=[]))], orelse=[]), Assign(targets=[Name(id='writing', ctx=Store())], value=Compare(left=Constant(value='w'), ops=[In()], comparators=[Name(id='mode', ctx=Load())])), Assign(targets=[Name(id='reading', ctx=Store())], value=BoolOp(op=Or(), values=[Compare(left=Constant(value='r'), ops=[In()], comparators=[Name(id='mode', ctx=Load())]), UnaryOp(op=Not(), operand=Name(id='writing', ctx=Load()))])), Assert(test=BoolOp(op=Or(), values=[Name(id='reading', ctx=Load()), Name(id='writing', ctx=Load())])), Assign(targets=[Name(id='binary', ctx=Store())], value=Compare(left=Constant(value='b'), ops=[In()], comparators=[Name(id='mode', ctx=Load())])), Assign(targets=[Name(id='rawmode', ctx=Store())], value=Constant(value='')), If(test=Name(id='reading', ctx=Load()), body=[AugAssign(target=Name(id='rawmode', ctx=Store()), op=Add(), value=Constant(value='r'))], orelse=[]), If(test=Name(id='writing', ctx=Load()), body=[AugAssign(target=Name(id='rawmode', ctx=Store()), op=Add(), value=Constant(value='w'))], orelse=[]), Assign(targets=[Name(id='raw', ctx=Store())], value=Call(func=Name(id='SocketIO', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='rawmode', ctx=Load())], keywords=[])), AugAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_makefile_refs', ctx=Store()), op=Add(), value=Constant(value=1)), If(test=Compare(left=Name(id='buffering', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='buffering', ctx=Store())], value=UnaryOp(op=USub(), operand=Constant(value=1)))], orelse=[]), If(test=Compare(left=Name(id='buffering', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0)]), body=[Assign(targets=[Name(id='buffering', ctx=Store())], value=Attribute(value=Name(id='io', ctx=Load()), attr='DEFAULT_BUFFER_SIZE', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='buffering', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='binary', ctx=Load())), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='unbuffered streams must be binary')], keywords=[]))], orelse=[]), Return(value=Name(id='raw', ctx=Load()))], orelse=[]), If(test=BoolOp(op=And(), values=[Name(id='reading', ctx=Load()), Name(id='writing', ctx=Load())]), body=[Assign(targets=[Name(id='buffer', ctx=Store())], value=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='BufferedRWPair', ctx=Load()), args=[Name(id='raw', ctx=Load()), Name(id='raw', ctx=Load()), Name(id='buffering', ctx=Load())], keywords=[]))], orelse=[If(test=Name(id='reading', ctx=Load()), body=[Assign(targets=[Name(id='buffer', ctx=Store())], value=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='BufferedReader', ctx=Load()), args=[Name(id='raw', ctx=Load()), Name(id='buffering', ctx=Load())], keywords=[]))], orelse=[Assert(test=Name(id='writing', ctx=Load())), Assign(targets=[Name(id='buffer', ctx=Store())], value=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='BufferedWriter', ctx=Load()), args=[Name(id='raw', ctx=Load()), Name(id='buffering', ctx=Load())], keywords=[]))])]), If(test=Name(id='binary', ctx=Load()), body=[Return(value=Name(id='buffer', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='text', ctx=Store())], value=Call(func=Attribute(value=Name(id='io', ctx=Load()), attr='TextIOWrapper', ctx=Load()), args=[Name(id='buffer', ctx=Load()), Name(id='encoding', ctx=Load()), Name(id='errors', ctx=Load()), Name(id='newline', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='text', ctx=Load()), attr='mode', ctx=Store())], value=Name(id='mode', ctx=Load())), Return(value=Name(id='text', ctx=Load()))], decorator_list=[])], type_ignores=[])