Module(body=[Expr(value=Constant(value='\nLow-level helpers for the SecureTransport bindings.\n\nThese are Python functions that are not directly related to the high-level APIs\nbut are necessary to get them to work. They include a whole bunch of low-level\nCoreFoundation messing about and memory management. The concerns in this module\nare almost entirely about trying to avoid memory leaks and providing\nappropriate and useful assistance to the higher-level code.\n')), Import(names=[alias(name='base64')]), Import(names=[alias(name='ctypes')]), Import(names=[alias(name='itertools')]), Import(names=[alias(name='os')]), Import(names=[alias(name='re')]), Import(names=[alias(name='ssl')]), Import(names=[alias(name='struct')]), Import(names=[alias(name='tempfile')]), ImportFrom(module='bindings', names=[alias(name='CFConst'), alias(name='CoreFoundation'), alias(name='Security')], level=1), Assign(targets=[Name(id='_PEM_CERTS_RE', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value=b'-----BEGIN CERTIFICATE-----\n(.*?)\n-----END CERTIFICATE-----'), Attribute(value=Name(id='re', ctx=Load()), attr='DOTALL', ctx=Load())], keywords=[])), FunctionDef(name='_cf_data_from_bytes', args=arguments(posonlyargs=[], args=[arg(arg='bytestring')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Given a bytestring, create a CFData object from it. This CFData object must\n    be CFReleased by the caller.\n    ')), Return(value=Call(func=Attribute(value=Name(id='CoreFoundation', ctx=Load()), attr='CFDataCreate', ctx=Load()), args=[Attribute(value=Name(id='CoreFoundation', ctx=Load()), attr='kCFAllocatorDefault', ctx=Load()), Name(id='bytestring', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='bytestring', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='_cf_dictionary_from_tuples', args=arguments(posonlyargs=[], args=[arg(arg='tuples')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Given a list of Python tuples, create an associated CFDictionary.\n    ')), Assign(targets=[Name(id='dictionary_size', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='tuples', ctx=Load())], keywords=[])), Assign(targets=[Name(id='keys', ctx=Store())], value=GeneratorExp(elt=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=0), ctx=Load()), generators=[comprehension(target=Name(id='t', ctx=Store()), iter=Name(id='tuples', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='values', ctx=Store())], value=GeneratorExp(elt=Subscript(value=Name(id='t', ctx=Load()), slice=Constant(value=1), ctx=Load()), generators=[comprehension(target=Name(id='t', ctx=Store()), iter=Name(id='tuples', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='cf_keys', ctx=Store())], value=Call(func=BinOp(left=Attribute(value=Name(id='CoreFoundation', ctx=Load()), attr='CFTypeRef', ctx=Load()), op=Mult(), right=Name(id='dictionary_size', ctx=Load())), args=[Starred(value=Name(id='keys', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='cf_values', ctx=Store())], value=Call(func=BinOp(left=Attribute(value=Name(id='CoreFoundation', ctx=Load()), attr='CFTypeRef', ctx=Load()), op=Mult(), right=Name(id='dictionary_size', ctx=Load())), args=[Starred(value=Name(id='values', ctx=Load()), ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='CoreFoundation', ctx=Load()), attr='CFDictionaryCreate', ctx=Load()), args=[Attribute(value=Name(id='CoreFoundation', ctx=Load()), attr='kCFAllocatorDefault', ctx=Load()), Name(id='cf_keys', ctx=Load()), Name(id='cf_values', ctx=Load()), Name(id='dictionary_size', ctx=Load()), Attribute(value=Name(id='CoreFoundation', ctx=Load()), attr='kCFTypeDictionaryKeyCallBacks', ctx=Load()), Attribute(value=Name(id='CoreFoundation', ctx=Load()), attr='kCFTypeDictionaryValueCallBacks', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_cfstr', args=arguments(posonlyargs=[], args=[arg(arg='py_bstr')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Given a Python binary data, create a CFString.\n    The string must be CFReleased by the caller.\n    ')), Assign(targets=[Name(id='c_str', ctx=Store())], value=Call(func=Attribute(value=Name(id='ctypes', ctx=Load()), attr='c_char_p', ctx=Load()), args=[Name(id='py_bstr', ctx=Load())], keywords=[])), Assign(targets=[Name(id='cf_str', ctx=Store())], value=Call(func=Attribute(value=Name(id='CoreFoundation', ctx=Load()), attr='CFStringCreateWithCString', ctx=Load()), args=[Attribute(value=Name(id='CoreFoundation', ctx=Load()), attr='kCFAllocatorDefault', ctx=Load()), Name(id='c_str', ctx=Load()), Attribute(value=Name(id='CFConst', ctx=Load()), attr='kCFStringEncodingUTF8', ctx=Load())], keywords=[])), Return(value=Name(id='cf_str', ctx=Load()))], decorator_list=[]), FunctionDef(name='_create_cfstring_array', args=arguments(posonlyargs=[], args=[arg(arg='lst')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Given a list of Python binary data, create an associated CFMutableArray.\n    The array must be CFReleased by the caller.\n\n    Raises an ssl.SSLError on failure.\n    ')), Assign(targets=[Name(id='cf_arr', ctx=Store())], value=Constant(value=None)), Try(body=[Assign(targets=[Name(id='cf_arr', ctx=Store())], value=Call(func=Attribute(value=Name(id='CoreFoundation', ctx=Load()), attr='CFArrayCreateMutable', ctx=Load()), args=[Attribute(value=Name(id='CoreFoundation', ctx=Load()), attr='kCFAllocatorDefault', ctx=Load()), Constant(value=0), Call(func=Attribute(value=Name(id='ctypes', ctx=Load()), attr='byref', ctx=Load()), args=[Attribute(value=Name(id='CoreFoundation', ctx=Load()), attr='kCFTypeArrayCallBacks', ctx=Load())], keywords=[])], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='cf_arr', ctx=Load())), body=[Raise(exc=Call(func=Name(id='MemoryError', ctx=Load()), args=[Constant(value='Unable to allocate memory!')], keywords=[]))], orelse=[]), For(target=Name(id='item', ctx=Store()), iter=Name(id='lst', ctx=Load()), body=[Assign(targets=[Name(id='cf_str', ctx=Store())], value=Call(func=Name(id='_cfstr', ctx=Load()), args=[Name(id='item', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='cf_str', ctx=Load())), body=[Raise(exc=Call(func=Name(id='MemoryError', ctx=Load()), args=[Constant(value='Unable to allocate memory!')], keywords=[]))], orelse=[]), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='CoreFoundation', ctx=Load()), attr='CFArrayAppendValue', ctx=Load()), args=[Name(id='cf_arr', ctx=Load()), Name(id='cf_str', ctx=Load())], keywords=[]))], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='CoreFoundation', ctx=Load()), attr='CFRelease', ctx=Load()), args=[Name(id='cf_str', ctx=Load())], keywords=[]))])], orelse=[])], handlers=[ExceptHandler(type=Name(id='BaseException', ctx=Load()), name='e', body=[If(test=Name(id='cf_arr', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='CoreFoundation', ctx=Load()), attr='CFRelease', ctx=Load()), args=[Name(id='cf_arr', ctx=Load())], keywords=[]))], orelse=[]), Raise(exc=Call(func=Attribute(value=Name(id='ssl', ctx=Load()), attr='SSLError', ctx=Load()), args=[BinOp(left=Constant(value='Unable to allocate array: %s'), op=Mod(), right=Tuple(elts=[Name(id='e', ctx=Load())], ctx=Load()))], keywords=[]))])], orelse=[], finalbody=[]), Return(value=Name(id='cf_arr', ctx=Load()))], decorator_list=[]), FunctionDef(name='_cf_string_to_unicode', args=arguments(posonlyargs=[], args=[arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Creates a Unicode string from a CFString object. Used entirely for error\n    reporting.\n\n    Yes, it annoys me quite a lot that this function is this complex.\n    ')), Assign(targets=[Name(id='value_as_void_p', ctx=Store())], value=Call(func=Attribute(value=Name(id='ctypes', ctx=Load()), attr='cast', ctx=Load()), args=[Name(id='value', ctx=Load()), Call(func=Attribute(value=Name(id='ctypes', ctx=Load()), attr='POINTER', ctx=Load()), args=[Attribute(value=Name(id='ctypes', ctx=Load()), attr='c_void_p', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='string', ctx=Store())], value=Call(func=Attribute(value=Name(id='CoreFoundation', ctx=Load()), attr='CFStringGetCStringPtr', ctx=Load()), args=[Name(id='value_as_void_p', ctx=Load()), Attribute(value=Name(id='CFConst', ctx=Load()), attr='kCFStringEncodingUTF8', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='string', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='buffer', ctx=Store())], value=Call(func=Attribute(value=Name(id='ctypes', ctx=Load()), attr='create_string_buffer', ctx=Load()), args=[Constant(value=1024)], keywords=[])), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='CoreFoundation', ctx=Load()), attr='CFStringGetCString', ctx=Load()), args=[Name(id='value_as_void_p', ctx=Load()), Name(id='buffer', ctx=Load()), Constant(value=1024), Attribute(value=Name(id='CFConst', ctx=Load()), attr='kCFStringEncodingUTF8', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='result', ctx=Load())), body=[Raise(exc=Call(func=Name(id='OSError', ctx=Load()), args=[Constant(value='Error copying C string from CFStringRef')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='string', ctx=Store())], value=Attribute(value=Name(id='buffer', ctx=Load()), attr='value', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='string', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='string', ctx=Store())], value=Call(func=Attribute(value=Name(id='string', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[]))], orelse=[]), Return(value=Name(id='string', ctx=Load()))], decorator_list=[]), FunctionDef(name='_assert_no_error', args=arguments(posonlyargs=[], args=[arg(arg='error'), arg(arg='exception_class')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='\n    Checks the return code and throws an exception if there is an error to\n    report\n    ')), If(test=Compare(left=Name(id='error', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[Return()], orelse=[]), Assign(targets=[Name(id='cf_error_string', ctx=Store())], value=Call(func=Attribute(value=Name(id='Security', ctx=Load()), attr='SecCopyErrorMessageString', ctx=Load()), args=[Name(id='error', ctx=Load()), Constant(value=None)], keywords=[])), Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Name(id='_cf_string_to_unicode', ctx=Load()), args=[Name(id='cf_error_string', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='CoreFoundation', ctx=Load()), attr='CFRelease', ctx=Load()), args=[Name(id='cf_error_string', ctx=Load())], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='output', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Name(id='output', ctx=Load()), ops=[Eq()], comparators=[Constant(value='', kind='u')])]), body=[Assign(targets=[Name(id='output', ctx=Store())], value=BinOp(left=Constant(value='OSStatus %s', kind='u'), op=Mod(), right=Name(id='error', ctx=Load())))], orelse=[]), If(test=Compare(left=Name(id='exception_class', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='exception_class', ctx=Store())], value=Attribute(value=Name(id='ssl', ctx=Load()), attr='SSLError', ctx=Load()))], orelse=[]), Raise(exc=Call(func=Name(id='exception_class', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_cert_array_from_pem', args=arguments(posonlyargs=[], args=[arg(arg='pem_bundle')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Given a bundle of certs in PEM format, turns them into a CFArray of certs\n    that can be used to validate a cert chain.\n    ')), Assign(targets=[Name(id='pem_bundle', ctx=Store())], value=Call(func=Attribute(value=Name(id='pem_bundle', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value=b'\r\n'), Constant(value=b'\n')], keywords=[])), Assign(targets=[Name(id='der_certs', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='base64', ctx=Load()), attr='b64decode', ctx=Load()), args=[Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value=1)], keywords=[])], keywords=[]), generators=[comprehension(target=Name(id='match', ctx=Store()), iter=Call(func=Attribute(value=Name(id='_PEM_CERTS_RE', ctx=Load()), attr='finditer', ctx=Load()), args=[Name(id='pem_bundle', ctx=Load())], keywords=[]), ifs=[], is_async=0)])), If(test=UnaryOp(op=Not(), operand=Name(id='der_certs', ctx=Load())), body=[Raise(exc=Call(func=Attribute(value=Name(id='ssl', ctx=Load()), attr='SSLError', ctx=Load()), args=[Constant(value='No root certificates specified')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='cert_array', ctx=Store())], value=Call(func=Attribute(value=Name(id='CoreFoundation', ctx=Load()), attr='CFArrayCreateMutable', ctx=Load()), args=[Attribute(value=Name(id='CoreFoundation', ctx=Load()), attr='kCFAllocatorDefault', ctx=Load()), Constant(value=0), Call(func=Attribute(value=Name(id='ctypes', ctx=Load()), attr='byref', ctx=Load()), args=[Attribute(value=Name(id='CoreFoundation', ctx=Load()), attr='kCFTypeArrayCallBacks', ctx=Load())], keywords=[])], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='cert_array', ctx=Load())), body=[Raise(exc=Call(func=Attribute(value=Name(id='ssl', ctx=Load()), attr='SSLError', ctx=Load()), args=[Constant(value='Unable to allocate memory!')], keywords=[]))], orelse=[]), Try(body=[For(target=Name(id='der_bytes', ctx=Store()), iter=Name(id='der_certs', ctx=Load()), body=[Assign(targets=[Name(id='certdata', ctx=Store())], value=Call(func=Name(id='_cf_data_from_bytes', ctx=Load()), args=[Name(id='der_bytes', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='certdata', ctx=Load())), body=[Raise(exc=Call(func=Attribute(value=Name(id='ssl', ctx=Load()), attr='SSLError', ctx=Load()), args=[Constant(value='Unable to allocate memory!')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='cert', ctx=Store())], value=Call(func=Attribute(value=Name(id='Security', ctx=Load()), attr='SecCertificateCreateWithData', ctx=Load()), args=[Attribute(value=Name(id='CoreFoundation', ctx=Load()), attr='kCFAllocatorDefault', ctx=Load()), Name(id='certdata', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='CoreFoundation', ctx=Load()), attr='CFRelease', ctx=Load()), args=[Name(id='certdata', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='cert', ctx=Load())), body=[Raise(exc=Call(func=Attribute(value=Name(id='ssl', ctx=Load()), attr='SSLError', ctx=Load()), args=[Constant(value='Unable to build cert object!')], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='CoreFoundation', ctx=Load()), attr='CFArrayAppendValue', ctx=Load()), args=[Name(id='cert_array', ctx=Load()), Name(id='cert', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='CoreFoundation', ctx=Load()), attr='CFRelease', ctx=Load()), args=[Name(id='cert', ctx=Load())], keywords=[]))], orelse=[])], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='CoreFoundation', ctx=Load()), attr='CFRelease', ctx=Load()), args=[Name(id='cert_array', ctx=Load())], keywords=[])), Raise()])], orelse=[], finalbody=[]), Return(value=Name(id='cert_array', ctx=Load()))], decorator_list=[]), FunctionDef(name='_is_cert', args=arguments(posonlyargs=[], args=[arg(arg='item')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Returns True if a given CFTypeRef is a certificate.\n    ')), Assign(targets=[Name(id='expected', ctx=Store())], value=Call(func=Attribute(value=Name(id='Security', ctx=Load()), attr='SecCertificateGetTypeID', ctx=Load()), args=[], keywords=[])), Return(value=Compare(left=Call(func=Attribute(value=Name(id='CoreFoundation', ctx=Load()), attr='CFGetTypeID', ctx=Load()), args=[Name(id='item', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Name(id='expected', ctx=Load())]))], decorator_list=[]), FunctionDef(name='_is_identity', args=arguments(posonlyargs=[], args=[arg(arg='item')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Returns True if a given CFTypeRef is an identity.\n    ')), Assign(targets=[Name(id='expected', ctx=Store())], value=Call(func=Attribute(value=Name(id='Security', ctx=Load()), attr='SecIdentityGetTypeID', ctx=Load()), args=[], keywords=[])), Return(value=Compare(left=Call(func=Attribute(value=Name(id='CoreFoundation', ctx=Load()), attr='CFGetTypeID', ctx=Load()), args=[Name(id='item', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Name(id='expected', ctx=Load())]))], decorator_list=[]), FunctionDef(name='_temporary_keychain', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    This function creates a temporary Mac keychain that we can use to work with\n    credentials. This keychain uses a one-time password and a temporary file to\n    store the data. We expect to have one keychain per socket. The returned\n    SecKeychainRef must be freed by the caller, including calling\n    SecKeychainDelete.\n\n    Returns a tuple of the SecKeychainRef and the path to the temporary\n    directory that contains it.\n    ')), Assign(targets=[Name(id='random_bytes', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='urandom', ctx=Load()), args=[Constant(value=40)], keywords=[])), Assign(targets=[Name(id='filename', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='base64', ctx=Load()), attr='b16encode', ctx=Load()), args=[Subscript(value=Name(id='random_bytes', ctx=Load()), slice=Slice(upper=Constant(value=8)), ctx=Load())], keywords=[]), attr='decode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[])), Assign(targets=[Name(id='password', ctx=Store())], value=Call(func=Attribute(value=Name(id='base64', ctx=Load()), attr='b16encode', ctx=Load()), args=[Subscript(value=Name(id='random_bytes', ctx=Load()), slice=Slice(lower=Constant(value=8)), ctx=Load())], keywords=[])), Assign(targets=[Name(id='tempdirectory', ctx=Store())], value=Call(func=Attribute(value=Name(id='tempfile', ctx=Load()), attr='mkdtemp', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='keychain_path', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='tempdirectory', ctx=Load()), Name(id='filename', ctx=Load())], keywords=[]), attr='encode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[])), Assign(targets=[Name(id='keychain', ctx=Store())], value=Call(func=Attribute(value=Name(id='Security', ctx=Load()), attr='SecKeychainRef', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='status', ctx=Store())], value=Call(func=Attribute(value=Name(id='Security', ctx=Load()), attr='SecKeychainCreate', ctx=Load()), args=[Name(id='keychain_path', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='password', ctx=Load())], keywords=[]), Name(id='password', ctx=Load()), Constant(value=False), Constant(value=None), Call(func=Attribute(value=Name(id='ctypes', ctx=Load()), attr='byref', ctx=Load()), args=[Name(id='keychain', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Name(id='_assert_no_error', ctx=Load()), args=[Name(id='status', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Name(id='keychain', ctx=Load()), Name(id='tempdirectory', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='_load_items_from_file', args=arguments(posonlyargs=[], args=[arg(arg='keychain'), arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Given a single file, loads all the trust objects from it into arrays and\n    the keychain.\n    Returns a tuple of lists: the first list is a list of identities, the\n    second a list of certs.\n    ')), Assign(targets=[Name(id='certificates', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='identities', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='result_array', ctx=Store())], value=Constant(value=None)), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='path', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='raw_filedata', ctx=Store())], value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]))]), Try(body=[Assign(targets=[Name(id='filedata', ctx=Store())], value=Call(func=Attribute(value=Name(id='CoreFoundation', ctx=Load()), attr='CFDataCreate', ctx=Load()), args=[Attribute(value=Name(id='CoreFoundation', ctx=Load()), attr='kCFAllocatorDefault', ctx=Load()), Name(id='raw_filedata', ctx=Load()), Call(func=Name(id='len', ctx=Load()), args=[Name(id='raw_filedata', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='result_array', ctx=Store())], value=Call(func=Attribute(value=Name(id='CoreFoundation', ctx=Load()), attr='CFArrayRef', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='Security', ctx=Load()), attr='SecItemImport', ctx=Load()), args=[Name(id='filedata', ctx=Load()), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=0), Constant(value=None), Name(id='keychain', ctx=Load()), Call(func=Attribute(value=Name(id='ctypes', ctx=Load()), attr='byref', ctx=Load()), args=[Name(id='result_array', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Name(id='_assert_no_error', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[])), Assign(targets=[Name(id='result_count', ctx=Store())], value=Call(func=Attribute(value=Name(id='CoreFoundation', ctx=Load()), attr='CFArrayGetCount', ctx=Load()), args=[Name(id='result_array', ctx=Load())], keywords=[])), For(target=Name(id='index', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Name(id='result_count', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='item', ctx=Store())], value=Call(func=Attribute(value=Name(id='CoreFoundation', ctx=Load()), attr='CFArrayGetValueAtIndex', ctx=Load()), args=[Name(id='result_array', ctx=Load()), Name(id='index', ctx=Load())], keywords=[])), Assign(targets=[Name(id='item', ctx=Store())], value=Call(func=Attribute(value=Name(id='ctypes', ctx=Load()), attr='cast', ctx=Load()), args=[Name(id='item', ctx=Load()), Attribute(value=Name(id='CoreFoundation', ctx=Load()), attr='CFTypeRef', ctx=Load())], keywords=[])), If(test=Call(func=Name(id='_is_cert', ctx=Load()), args=[Name(id='item', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='CoreFoundation', ctx=Load()), attr='CFRetain', ctx=Load()), args=[Name(id='item', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='certificates', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='item', ctx=Load())], keywords=[]))], orelse=[If(test=Call(func=Name(id='_is_identity', ctx=Load()), args=[Name(id='item', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='CoreFoundation', ctx=Load()), attr='CFRetain', ctx=Load()), args=[Name(id='item', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='identities', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='item', ctx=Load())], keywords=[]))], orelse=[])])], orelse=[])], handlers=[], orelse=[], finalbody=[If(test=Name(id='result_array', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='CoreFoundation', ctx=Load()), attr='CFRelease', ctx=Load()), args=[Name(id='result_array', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='CoreFoundation', ctx=Load()), attr='CFRelease', ctx=Load()), args=[Name(id='filedata', ctx=Load())], keywords=[]))]), Return(value=Tuple(elts=[Name(id='identities', ctx=Load()), Name(id='certificates', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='_load_client_cert_chain', args=arguments(posonlyargs=[], args=[arg(arg='keychain')], vararg=arg(arg='paths'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Load certificates and maybe keys from a number of files. Has the end goal\n    of returning a CFArray containing one SecIdentityRef, and then zero or more\n    SecCertificateRef objects, suitable for use as a client certificate trust\n    chain.\n    ')), Assign(targets=[Name(id='certificates', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='identities', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='paths', ctx=Store())], value=GeneratorExp(elt=Name(id='path', ctx=Load()), generators=[comprehension(target=Name(id='path', ctx=Store()), iter=Name(id='paths', ctx=Load()), ifs=[Name(id='path', ctx=Load())], is_async=0)])), Try(body=[For(target=Name(id='file_path', ctx=Store()), iter=Name(id='paths', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='new_identities', ctx=Store()), Name(id='new_certs', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_load_items_from_file', ctx=Load()), args=[Name(id='keychain', ctx=Load()), Name(id='file_path', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='identities', ctx=Load()), attr='extend', ctx=Load()), args=[Name(id='new_identities', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='certificates', ctx=Load()), attr='extend', ctx=Load()), args=[Name(id='new_certs', ctx=Load())], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='identities', ctx=Load())), body=[Assign(targets=[Name(id='new_identity', ctx=Store())], value=Call(func=Attribute(value=Name(id='Security', ctx=Load()), attr='SecIdentityRef', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='status', ctx=Store())], value=Call(func=Attribute(value=Name(id='Security', ctx=Load()), attr='SecIdentityCreateWithCertificate', ctx=Load()), args=[Name(id='keychain', ctx=Load()), Subscript(value=Name(id='certificates', ctx=Load()), slice=Constant(value=0), ctx=Load()), Call(func=Attribute(value=Name(id='ctypes', ctx=Load()), attr='byref', ctx=Load()), args=[Name(id='new_identity', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Name(id='_assert_no_error', ctx=Load()), args=[Name(id='status', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='identities', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='new_identity', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='CoreFoundation', ctx=Load()), attr='CFRelease', ctx=Load()), args=[Call(func=Attribute(value=Name(id='certificates', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value=0)], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='trust_chain', ctx=Store())], value=Call(func=Attribute(value=Name(id='CoreFoundation', ctx=Load()), attr='CFArrayCreateMutable', ctx=Load()), args=[Attribute(value=Name(id='CoreFoundation', ctx=Load()), attr='kCFAllocatorDefault', ctx=Load()), Constant(value=0), Call(func=Attribute(value=Name(id='ctypes', ctx=Load()), attr='byref', ctx=Load()), args=[Attribute(value=Name(id='CoreFoundation', ctx=Load()), attr='kCFTypeArrayCallBacks', ctx=Load())], keywords=[])], keywords=[])), For(target=Name(id='item', ctx=Store()), iter=Call(func=Attribute(value=Name(id='itertools', ctx=Load()), attr='chain', ctx=Load()), args=[Name(id='identities', ctx=Load()), Name(id='certificates', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='CoreFoundation', ctx=Load()), attr='CFArrayAppendValue', ctx=Load()), args=[Name(id='trust_chain', ctx=Load()), Name(id='item', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='trust_chain', ctx=Load()))], handlers=[], orelse=[], finalbody=[For(target=Name(id='obj', ctx=Store()), iter=Call(func=Attribute(value=Name(id='itertools', ctx=Load()), attr='chain', ctx=Load()), args=[Name(id='identities', ctx=Load()), Name(id='certificates', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='CoreFoundation', ctx=Load()), attr='CFRelease', ctx=Load()), args=[Name(id='obj', ctx=Load())], keywords=[]))], orelse=[])])], decorator_list=[]), Assign(targets=[Name(id='TLS_PROTOCOL_VERSIONS', ctx=Store())], value=Dict(keys=[Constant(value='SSLv2'), Constant(value='SSLv3'), Constant(value='TLSv1'), Constant(value='TLSv1.1'), Constant(value='TLSv1.2')], values=[Tuple(elts=[Constant(value=0), Constant(value=2)], ctx=Load()), Tuple(elts=[Constant(value=3), Constant(value=0)], ctx=Load()), Tuple(elts=[Constant(value=3), Constant(value=1)], ctx=Load()), Tuple(elts=[Constant(value=3), Constant(value=2)], ctx=Load()), Tuple(elts=[Constant(value=3), Constant(value=3)], ctx=Load())])), FunctionDef(name='_build_tls_unknown_ca_alert', args=arguments(posonlyargs=[], args=[arg(arg='version')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Builds a TLS alert record for an unknown CA.\n    ')), Assign(targets=[Tuple(elts=[Name(id='ver_maj', ctx=Store()), Name(id='ver_min', ctx=Store())], ctx=Store())], value=Subscript(value=Name(id='TLS_PROTOCOL_VERSIONS', ctx=Load()), slice=Name(id='version', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='severity_fatal', ctx=Store())], value=Constant(value=2)), Assign(targets=[Name(id='description_unknown_ca', ctx=Store())], value=Constant(value=48)), Assign(targets=[Name(id='msg', ctx=Store())], value=Call(func=Attribute(value=Name(id='struct', ctx=Load()), attr='pack', ctx=Load()), args=[Constant(value='>BB'), Name(id='severity_fatal', ctx=Load()), Name(id='description_unknown_ca', ctx=Load())], keywords=[])), Assign(targets=[Name(id='msg_len', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[])), Assign(targets=[Name(id='record_type_alert', ctx=Store())], value=Constant(value=21)), Assign(targets=[Name(id='record', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='struct', ctx=Load()), attr='pack', ctx=Load()), args=[Constant(value='>BBBH'), Name(id='record_type_alert', ctx=Load()), Name(id='ver_maj', ctx=Load()), Name(id='ver_min', ctx=Load()), Name(id='msg_len', ctx=Load())], keywords=[]), op=Add(), right=Name(id='msg', ctx=Load()))), Return(value=Name(id='record', ctx=Load()))], decorator_list=[])], type_ignores=[])