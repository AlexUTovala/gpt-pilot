Module(body=[ImportFrom(module='__future__', names=[alias(name='absolute_import')], level=0), ImportFrom(module='packages.six.moves.http_client', names=[alias(name='IncompleteRead', asname='httplib_IncompleteRead')], level=1), ClassDef(name='HTTPError', bases=[Name(id='Exception', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Base exception used by this module.')), Pass()], decorator_list=[]), ClassDef(name='HTTPWarning', bases=[Name(id='Warning', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Base warning used by this module.')), Pass()], decorator_list=[]), ClassDef(name='PoolError', bases=[Name(id='HTTPError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Base exception for errors caused within a pool.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='pool'), arg(arg='message')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='pool', ctx=Store())], value=Name(id='pool', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='HTTPError', ctx=Load()), attr='__init__', ctx=Load()), args=[Name(id='self', ctx=Load()), BinOp(left=Constant(value='%s: %s'), op=Mod(), right=Tuple(elts=[Name(id='pool', ctx=Load()), Name(id='message', ctx=Load())], ctx=Load()))], keywords=[]))], decorator_list=[]), FunctionDef(name='__reduce__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), Tuple(elts=[Constant(value=None), Constant(value=None)], ctx=Load())], ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='RequestError', bases=[Name(id='PoolError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Base exception for PoolErrors that have associated URLs.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='pool'), arg(arg='url'), arg(arg='message')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='url', ctx=Store())], value=Name(id='url', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='PoolError', ctx=Load()), attr='__init__', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='pool', ctx=Load()), Name(id='message', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='__reduce__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), Tuple(elts=[Constant(value=None), Attribute(value=Name(id='self', ctx=Load()), attr='url', ctx=Load()), Constant(value=None)], ctx=Load())], ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='SSLError', bases=[Name(id='HTTPError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Raised when SSL certificate fails in an HTTPS connection.')), Pass()], decorator_list=[]), ClassDef(name='ProxyError', bases=[Name(id='HTTPError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Raised when the connection to a proxy fails.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='message'), arg(arg='error')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[Name(id='ProxyError', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]), attr='__init__', ctx=Load()), args=[Name(id='message', ctx=Load()), Name(id='error', ctx=Load()), Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='original_error', ctx=Store())], value=Name(id='error', ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='DecodeError', bases=[Name(id='HTTPError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Raised when automatic decoding based on Content-Type fails.')), Pass()], decorator_list=[]), ClassDef(name='ProtocolError', bases=[Name(id='HTTPError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Raised when something unexpected happens mid-request/response.')), Pass()], decorator_list=[]), Assign(targets=[Name(id='ConnectionError', ctx=Store())], value=Name(id='ProtocolError', ctx=Load())), ClassDef(name='MaxRetryError', bases=[Name(id='RequestError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Raised when the maximum number of retries is exceeded.\n\n    :param pool: The connection pool\n    :type pool: :class:`~urllib3.connectionpool.HTTPConnectionPool`\n    :param string url: The requested Url\n    :param exceptions.Exception reason: The underlying error\n\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='pool'), arg(arg='url'), arg(arg='reason')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='reason', ctx=Store())], value=Name(id='reason', ctx=Load())), Assign(targets=[Name(id='message', ctx=Store())], value=BinOp(left=Constant(value='Max retries exceeded with url: %s (Caused by %r)'), op=Mod(), right=Tuple(elts=[Name(id='url', ctx=Load()), Name(id='reason', ctx=Load())], ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='RequestError', ctx=Load()), attr='__init__', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='pool', ctx=Load()), Name(id='url', ctx=Load()), Name(id='message', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='HostChangedError', bases=[Name(id='RequestError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Raised when an existing pool gets a request for a foreign host.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='pool'), arg(arg='url'), arg(arg='retries')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=3)]), body=[Assign(targets=[Name(id='message', ctx=Store())], value=BinOp(left=Constant(value='Tried to open a foreign host with url: %s'), op=Mod(), right=Name(id='url', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='RequestError', ctx=Load()), attr='__init__', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='pool', ctx=Load()), Name(id='url', ctx=Load()), Name(id='message', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='retries', ctx=Store())], value=Name(id='retries', ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='TimeoutStateError', bases=[Name(id='HTTPError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Raised when passing an invalid state to a timeout')), Pass()], decorator_list=[]), ClassDef(name='TimeoutError', bases=[Name(id='HTTPError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Raised when a socket timeout error occurs.\n\n    Catching this error will catch both :exc:`ReadTimeoutErrors\n    <ReadTimeoutError>` and :exc:`ConnectTimeoutErrors <ConnectTimeoutError>`.\n    ')), Pass()], decorator_list=[]), ClassDef(name='ReadTimeoutError', bases=[Name(id='TimeoutError', ctx=Load()), Name(id='RequestError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Raised when a socket timeout occurs while receiving data from a server')), Pass()], decorator_list=[]), ClassDef(name='ConnectTimeoutError', bases=[Name(id='TimeoutError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Raised when a socket timeout occurs while connecting to a server')), Pass()], decorator_list=[]), ClassDef(name='NewConnectionError', bases=[Name(id='ConnectTimeoutError', ctx=Load()), Name(id='PoolError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Raised when we fail to establish a new connection. Usually ECONNREFUSED.')), Pass()], decorator_list=[]), ClassDef(name='EmptyPoolError', bases=[Name(id='PoolError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Raised when a pool runs out of connections and no more are allowed.')), Pass()], decorator_list=[]), ClassDef(name='ClosedPoolError', bases=[Name(id='PoolError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Raised when a request enters a pool after the pool has been closed.')), Pass()], decorator_list=[]), ClassDef(name='LocationValueError', bases=[Name(id='ValueError', ctx=Load()), Name(id='HTTPError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Raised when there is something wrong with a given URL input.')), Pass()], decorator_list=[]), ClassDef(name='LocationParseError', bases=[Name(id='LocationValueError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Raised when get_host or similar fails to parse the URL input.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='location')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='message', ctx=Store())], value=BinOp(left=Constant(value='Failed to parse: %s'), op=Mod(), right=Name(id='location', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='HTTPError', ctx=Load()), attr='__init__', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='message', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='location', ctx=Store())], value=Name(id='location', ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='URLSchemeUnknown', bases=[Name(id='LocationValueError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Raised when a URL input has an unsupported scheme.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='scheme')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='message', ctx=Store())], value=BinOp(left=Constant(value='Not supported URL scheme %s'), op=Mod(), right=Name(id='scheme', ctx=Load()))), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[Name(id='URLSchemeUnknown', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]), attr='__init__', ctx=Load()), args=[Name(id='message', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='scheme', ctx=Store())], value=Name(id='scheme', ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='ResponseError', bases=[Name(id='HTTPError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Used as a container for an error reason supplied in a MaxRetryError.')), Assign(targets=[Name(id='GENERIC_ERROR', ctx=Store())], value=Constant(value='too many error responses')), Assign(targets=[Name(id='SPECIFIC_ERROR', ctx=Store())], value=Constant(value='too many {status_code} error responses'))], decorator_list=[]), ClassDef(name='SecurityWarning', bases=[Name(id='HTTPWarning', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Warned when performing security reducing actions')), Pass()], decorator_list=[]), ClassDef(name='SubjectAltNameWarning', bases=[Name(id='SecurityWarning', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Warned when connecting to a host with a certificate missing a SAN.')), Pass()], decorator_list=[]), ClassDef(name='InsecureRequestWarning', bases=[Name(id='SecurityWarning', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Warned when making an unverified HTTPS request.')), Pass()], decorator_list=[]), ClassDef(name='SystemTimeWarning', bases=[Name(id='SecurityWarning', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Warned when system time is suspected to be wrong')), Pass()], decorator_list=[]), ClassDef(name='InsecurePlatformWarning', bases=[Name(id='SecurityWarning', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Warned when certain TLS/SSL configuration is not available on a platform.')), Pass()], decorator_list=[]), ClassDef(name='SNIMissingWarning', bases=[Name(id='HTTPWarning', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Warned when making a HTTPS request without SNI available.')), Pass()], decorator_list=[]), ClassDef(name='DependencyWarning', bases=[Name(id='HTTPWarning', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Warned when an attempt is made to import a module with missing optional\n    dependencies.\n    ')), Pass()], decorator_list=[]), ClassDef(name='ResponseNotChunked', bases=[Name(id='ProtocolError', ctx=Load()), Name(id='ValueError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Response needs to be chunked in order to read it as chunks.')), Pass()], decorator_list=[]), ClassDef(name='BodyNotHttplibCompatible', bases=[Name(id='HTTPError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Body should be :class:`http.client.HTTPResponse` like\n    (have an fp attribute which returns raw chunks) for read_chunked().\n    ')), Pass()], decorator_list=[]), ClassDef(name='IncompleteRead', bases=[Name(id='HTTPError', ctx=Load()), Name(id='httplib_IncompleteRead', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="\n    Response length doesn't match expected Content-Length\n\n    Subclass of :class:`http.client.IncompleteRead` to allow int value\n    for ``partial`` to avoid creating large objects on streamed reads.\n    ")), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='partial'), arg(arg='expected')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[Name(id='IncompleteRead', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]), attr='__init__', ctx=Load()), args=[Name(id='partial', ctx=Load()), Name(id='expected', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Constant(value='IncompleteRead(%i bytes read, %i more expected)'), op=Mod(), right=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='partial', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='expected', ctx=Load())], ctx=Load())))], decorator_list=[])], decorator_list=[]), ClassDef(name='InvalidChunkLength', bases=[Name(id='HTTPError', ctx=Load()), Name(id='httplib_IncompleteRead', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Invalid chunk length in a chunked response.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='response'), arg(arg='length')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[Name(id='InvalidChunkLength', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]), attr='__init__', ctx=Load()), args=[Call(func=Attribute(value=Name(id='response', ctx=Load()), attr='tell', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='response', ctx=Load()), attr='length_remaining', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='response', ctx=Store())], value=Name(id='response', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='length', ctx=Store())], value=Name(id='length', ctx=Load()))], decorator_list=[]), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BinOp(left=Constant(value='InvalidChunkLength(got length %r, %i bytes read)'), op=Mod(), right=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='length', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='partial', ctx=Load())], ctx=Load())))], decorator_list=[])], decorator_list=[]), ClassDef(name='InvalidHeader', bases=[Name(id='HTTPError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='The header provided was somehow invalid.')), Pass()], decorator_list=[]), ClassDef(name='ProxySchemeUnknown', bases=[Name(id='AssertionError', ctx=Load()), Name(id='URLSchemeUnknown', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='ProxyManager does not support the supplied scheme')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='scheme')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='scheme', ctx=Load()), ops=[Eq()], comparators=[Constant(value='localhost')]), body=[Assign(targets=[Name(id='scheme', ctx=Store())], value=Constant(value=None))], orelse=[]), If(test=Compare(left=Name(id='scheme', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='message', ctx=Store())], value=Constant(value='Proxy URL had no scheme, should start with http:// or https://'))], orelse=[Assign(targets=[Name(id='message', ctx=Store())], value=BinOp(left=Constant(value='Proxy URL had unsupported scheme %s, should use http:// or https://'), op=Mod(), right=Name(id='scheme', ctx=Load())))]), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[Name(id='ProxySchemeUnknown', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]), attr='__init__', ctx=Load()), args=[Name(id='message', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='ProxySchemeUnsupported', bases=[Name(id='ValueError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Fetching HTTPS resources through HTTPS proxies is unsupported')), Pass()], decorator_list=[]), ClassDef(name='HeaderParsingError', bases=[Name(id='HTTPError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Raised by assert_header_parsing, but we convert it to a log.warning statement.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='defects'), arg(arg='unparsed_data')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='message', ctx=Store())], value=BinOp(left=Constant(value='%s, unparsed data: %r'), op=Mod(), right=Tuple(elts=[BoolOp(op=Or(), values=[Name(id='defects', ctx=Load()), Constant(value='Unknown')]), Name(id='unparsed_data', ctx=Load())], ctx=Load()))), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[Name(id='HeaderParsingError', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]), attr='__init__', ctx=Load()), args=[Name(id='message', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='UnrewindableBodyError', bases=[Name(id='HTTPError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='urllib3 encountered an error when trying to rewind a body')), Pass()], decorator_list=[])], type_ignores=[])