Module(body=[ImportFrom(module='__future__', names=[alias(name='absolute_import')], level=0), Import(names=[alias(name='re')]), ImportFrom(module='collections', names=[alias(name='namedtuple')], level=0), ImportFrom(module='exceptions', names=[alias(name='LocationParseError')], level=2), ImportFrom(module='packages', names=[alias(name='six')], level=2), Assign(targets=[Name(id='url_attrs', ctx=Store())], value=List(elts=[Constant(value='scheme'), Constant(value='auth'), Constant(value='host'), Constant(value='port'), Constant(value='path'), Constant(value='query'), Constant(value='fragment')], ctx=Load())), Assign(targets=[Name(id='NORMALIZABLE_SCHEMES', ctx=Store())], value=Tuple(elts=[Constant(value='http'), Constant(value='https'), Constant(value=None)], ctx=Load())), Assign(targets=[Name(id='PERCENT_RE', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='%[a-fA-F0-9]{2}')], keywords=[])), Assign(targets=[Name(id='SCHEME_RE', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='^(?:[a-zA-Z][a-zA-Z0-9+-]*:|/)')], keywords=[])), Assign(targets=[Name(id='URI_RE', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='^(?:([a-zA-Z][a-zA-Z0-9+.-]*):)?(?://([^\\\\/?#]*))?([^?#]*)(?:\\?([^#]*))?(?:#(.*))?$'), BinOp(left=Attribute(value=Name(id='re', ctx=Load()), attr='UNICODE', ctx=Load()), op=BitOr(), right=Attribute(value=Name(id='re', ctx=Load()), attr='DOTALL', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='IPV4_PAT', ctx=Store())], value=Constant(value='(?:[0-9]{1,3}\\.){3}[0-9]{1,3}')), Assign(targets=[Name(id='HEX_PAT', ctx=Store())], value=Constant(value='[0-9A-Fa-f]{1,4}')), Assign(targets=[Name(id='LS32_PAT', ctx=Store())], value=Call(func=Attribute(value=Constant(value='(?:{hex}:{hex}|{ipv4})'), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='hex', value=Name(id='HEX_PAT', ctx=Load())), keyword(arg='ipv4', value=Name(id='IPV4_PAT', ctx=Load()))])), Assign(targets=[Name(id='_subs', ctx=Store())], value=Dict(keys=[Constant(value='hex'), Constant(value='ls32')], values=[Name(id='HEX_PAT', ctx=Load()), Name(id='LS32_PAT', ctx=Load())])), Assign(targets=[Name(id='_variations', ctx=Store())], value=List(elts=[Constant(value='(?:%(hex)s:){6}%(ls32)s'), Constant(value='::(?:%(hex)s:){5}%(ls32)s'), Constant(value='(?:%(hex)s)?::(?:%(hex)s:){4}%(ls32)s'), Constant(value='(?:(?:%(hex)s:)?%(hex)s)?::(?:%(hex)s:){3}%(ls32)s'), Constant(value='(?:(?:%(hex)s:){0,2}%(hex)s)?::(?:%(hex)s:){2}%(ls32)s'), Constant(value='(?:(?:%(hex)s:){0,3}%(hex)s)?::%(hex)s:%(ls32)s'), Constant(value='(?:(?:%(hex)s:){0,4}%(hex)s)?::%(ls32)s'), Constant(value='(?:(?:%(hex)s:){0,5}%(hex)s)?::%(hex)s'), Constant(value='(?:(?:%(hex)s:){0,6}%(hex)s)?::')], ctx=Load())), Assign(targets=[Name(id='UNRESERVED_PAT', ctx=Store())], value=Constant(value='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789._\\-~')), Assign(targets=[Name(id='IPV6_PAT', ctx=Store())], value=BinOp(left=BinOp(left=Constant(value='(?:'), op=Add(), right=Call(func=Attribute(value=Constant(value='|'), attr='join', ctx=Load()), args=[ListComp(elt=BinOp(left=Name(id='x', ctx=Load()), op=Mod(), right=Name(id='_subs', ctx=Load())), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='_variations', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), op=Add(), right=Constant(value=')'))), Assign(targets=[Name(id='ZONE_ID_PAT', ctx=Store())], value=BinOp(left=BinOp(left=Constant(value='(?:%25|%)(?:['), op=Add(), right=Name(id='UNRESERVED_PAT', ctx=Load())), op=Add(), right=Constant(value=']|%[a-fA-F0-9]{2})+'))), Assign(targets=[Name(id='IPV6_ADDRZ_PAT', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Constant(value='\\['), op=Add(), right=Name(id='IPV6_PAT', ctx=Load())), op=Add(), right=Constant(value='(?:')), op=Add(), right=Name(id='ZONE_ID_PAT', ctx=Load())), op=Add(), right=Constant(value=')?\\]'))), Assign(targets=[Name(id='REG_NAME_PAT', ctx=Store())], value=Constant(value='(?:[^\\[\\]%:/?#]|%[a-fA-F0-9]{2})*')), Assign(targets=[Name(id='TARGET_RE', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='^(/[^?#]*)(?:\\?([^#]*))?(?:#.*)?$')], keywords=[])), Assign(targets=[Name(id='IPV4_RE', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[BinOp(left=BinOp(left=Constant(value='^'), op=Add(), right=Name(id='IPV4_PAT', ctx=Load())), op=Add(), right=Constant(value='$'))], keywords=[])), Assign(targets=[Name(id='IPV6_RE', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[BinOp(left=BinOp(left=Constant(value='^'), op=Add(), right=Name(id='IPV6_PAT', ctx=Load())), op=Add(), right=Constant(value='$'))], keywords=[])), Assign(targets=[Name(id='IPV6_ADDRZ_RE', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[BinOp(left=BinOp(left=Constant(value='^'), op=Add(), right=Name(id='IPV6_ADDRZ_PAT', ctx=Load())), op=Add(), right=Constant(value='$'))], keywords=[])), Assign(targets=[Name(id='BRACELESS_IPV6_ADDRZ_RE', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[BinOp(left=BinOp(left=Constant(value='^'), op=Add(), right=Subscript(value=Name(id='IPV6_ADDRZ_PAT', ctx=Load()), slice=Slice(lower=Constant(value=2), upper=UnaryOp(op=USub(), operand=Constant(value=2))), ctx=Load())), op=Add(), right=Constant(value='$'))], keywords=[])), Assign(targets=[Name(id='ZONE_ID_RE', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[BinOp(left=BinOp(left=Constant(value='('), op=Add(), right=Name(id='ZONE_ID_PAT', ctx=Load())), op=Add(), right=Constant(value=')\\]$'))], keywords=[])), Assign(targets=[Name(id='_HOST_PORT_PAT', ctx=Store())], value=BinOp(left=Constant(value='^(%s|%s|%s)(?::0*?(|0|[1-9][0-9]{0,4}))?$'), op=Mod(), right=Tuple(elts=[Name(id='REG_NAME_PAT', ctx=Load()), Name(id='IPV4_PAT', ctx=Load()), Name(id='IPV6_ADDRZ_PAT', ctx=Load())], ctx=Load()))), Assign(targets=[Name(id='_HOST_PORT_RE', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Name(id='_HOST_PORT_PAT', ctx=Load()), BinOp(left=Attribute(value=Name(id='re', ctx=Load()), attr='UNICODE', ctx=Load()), op=BitOr(), right=Attribute(value=Name(id='re', ctx=Load()), attr='DOTALL', ctx=Load()))], keywords=[])), Assign(targets=[Name(id='UNRESERVED_CHARS', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Constant(value='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789._-~')], keywords=[])), Assign(targets=[Name(id='SUB_DELIM_CHARS', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Constant(value="!$&'()*+,;=")], keywords=[])), Assign(targets=[Name(id='USERINFO_CHARS', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='UNRESERVED_CHARS', ctx=Load()), op=BitOr(), right=Name(id='SUB_DELIM_CHARS', ctx=Load())), op=BitOr(), right=Set(elts=[Constant(value=':')]))), Assign(targets=[Name(id='PATH_CHARS', ctx=Store())], value=BinOp(left=Name(id='USERINFO_CHARS', ctx=Load()), op=BitOr(), right=Set(elts=[Constant(value='@'), Constant(value='/')]))), Assign(targets=[Name(id='QUERY_CHARS', ctx=Store()), Name(id='FRAGMENT_CHARS', ctx=Store())], value=BinOp(left=Name(id='PATH_CHARS', ctx=Load()), op=BitOr(), right=Set(elts=[Constant(value='?')]))), ClassDef(name='Url', bases=[Call(func=Name(id='namedtuple', ctx=Load()), args=[Constant(value='Url'), Name(id='url_attrs', ctx=Load())], keywords=[])], keywords=[], body=[Expr(value=Constant(value='\n    Data structure for representing an HTTP URL. Used as a return value for\n    :func:`parse_url`. Both the scheme and host are normalized as they are\n    both case-insensitive according to RFC 3986.\n    ')), Assign(targets=[Name(id='__slots__', ctx=Store())], value=Tuple(elts=[], ctx=Load())), FunctionDef(name='__new__', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='scheme'), arg(arg='auth'), arg(arg='host'), arg(arg='port'), arg(arg='path'), arg(arg='query'), arg(arg='fragment')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None)]), body=[If(test=BoolOp(op=And(), values=[Name(id='path', ctx=Load()), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='/')], keywords=[]))]), body=[Assign(targets=[Name(id='path', ctx=Store())], value=BinOp(left=Constant(value='/'), op=Add(), right=Name(id='path', ctx=Load())))], orelse=[]), If(test=Compare(left=Name(id='scheme', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='scheme', ctx=Store())], value=Call(func=Attribute(value=Name(id='scheme', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[Name(id='Url', ctx=Load()), Name(id='cls', ctx=Load())], keywords=[]), attr='__new__', ctx=Load()), args=[Name(id='cls', ctx=Load()), Name(id='scheme', ctx=Load()), Name(id='auth', ctx=Load()), Name(id='host', ctx=Load()), Name(id='port', ctx=Load()), Name(id='path', ctx=Load()), Name(id='query', ctx=Load()), Name(id='fragment', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='hostname', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="For backwards-compatibility with urlparse. We're nice like that.")), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='host', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='request_uri', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Absolute path including the query string.')), Assign(targets=[Name(id='uri', ctx=Store())], value=BoolOp(op=Or(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='path', ctx=Load()), Constant(value='/')])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='query', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[AugAssign(target=Name(id='uri', ctx=Store()), op=Add(), value=BinOp(left=Constant(value='?'), op=Add(), right=Attribute(value=Name(id='self', ctx=Load()), attr='query', ctx=Load())))], orelse=[]), Return(value=Name(id='uri', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='netloc', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Network location including host and port')), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='port', ctx=Load()), body=[Return(value=BinOp(left=Constant(value='%s:%d'), op=Mod(), right=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='host', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='port', ctx=Load())], ctx=Load())))], orelse=[]), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='host', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='url', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Convert self into a url\n\n        This function should more or less round-trip with :func:`.parse_url`. The\n        returned url may not be exactly the same as the url inputted to\n        :func:`.parse_url`, but it should be equivalent by the RFC (e.g., urls\n        with a blank port will have : removed).\n\n        Example: ::\n\n            >>> U = parse_url('http://google.com/mail/')\n            >>> U.url\n            'http://google.com/mail/'\n            >>> Url('http', 'username:password', 'host.com', 80,\n            ... '/path', 'query', 'fragment').url\n            'http://username:password@host.com:80/path?query#fragment'\n        ")), Assign(targets=[Tuple(elts=[Name(id='scheme', ctx=Store()), Name(id='auth', ctx=Store()), Name(id='host', ctx=Store()), Name(id='port', ctx=Store()), Name(id='path', ctx=Store()), Name(id='query', ctx=Store()), Name(id='fragment', ctx=Store())], ctx=Store())], value=Name(id='self', ctx=Load())), Assign(targets=[Name(id='url', ctx=Store())], value=Constant(value='', kind='u')), If(test=Compare(left=Name(id='scheme', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[AugAssign(target=Name(id='url', ctx=Store()), op=Add(), value=BinOp(left=Name(id='scheme', ctx=Load()), op=Add(), right=Constant(value='://', kind='u')))], orelse=[]), If(test=Compare(left=Name(id='auth', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[AugAssign(target=Name(id='url', ctx=Store()), op=Add(), value=BinOp(left=Name(id='auth', ctx=Load()), op=Add(), right=Constant(value='@', kind='u')))], orelse=[]), If(test=Compare(left=Name(id='host', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[AugAssign(target=Name(id='url', ctx=Store()), op=Add(), value=Name(id='host', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='port', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[AugAssign(target=Name(id='url', ctx=Store()), op=Add(), value=BinOp(left=Constant(value=':', kind='u'), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Name(id='port', ctx=Load())], keywords=[])))], orelse=[]), If(test=Compare(left=Name(id='path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[AugAssign(target=Name(id='url', ctx=Store()), op=Add(), value=Name(id='path', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='query', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[AugAssign(target=Name(id='url', ctx=Store()), op=Add(), value=BinOp(left=Constant(value='?', kind='u'), op=Add(), right=Name(id='query', ctx=Load())))], orelse=[]), If(test=Compare(left=Name(id='fragment', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[AugAssign(target=Name(id='url', ctx=Store()), op=Add(), value=BinOp(left=Constant(value='#', kind='u'), op=Add(), right=Name(id='fragment', ctx=Load())))], orelse=[]), Return(value=Name(id='url', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='__str__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='url', ctx=Load()))], decorator_list=[])], decorator_list=[]), FunctionDef(name='split_first', args=arguments(posonlyargs=[], args=[arg(arg='s'), arg(arg='delims')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    .. deprecated:: 1.25\n\n    Given a string and an iterable of delimiters, split on the first found\n    delimiter. Return two split parts and the matched delimiter.\n\n    If not found, then the first part is the full input string.\n\n    Example::\n\n        >>> split_first('foo/bar?baz', '?/=')\n        ('foo', 'bar?baz', '/')\n        >>> split_first('foo/bar?baz', '123')\n        ('foo/bar?baz', '', None)\n\n    Scales linearly with number of delims. Not ideal for large number of delims.\n    ")), Assign(targets=[Name(id='min_idx', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='min_delim', ctx=Store())], value=Constant(value=None)), For(target=Name(id='d', ctx=Store()), iter=Name(id='delims', ctx=Load()), body=[Assign(targets=[Name(id='idx', ctx=Store())], value=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='find', ctx=Load()), args=[Name(id='d', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='idx', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0)]), body=[Continue()], orelse=[]), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='min_idx', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Name(id='idx', ctx=Load()), ops=[Lt()], comparators=[Name(id='min_idx', ctx=Load())])]), body=[Assign(targets=[Name(id='min_idx', ctx=Store())], value=Name(id='idx', ctx=Load())), Assign(targets=[Name(id='min_delim', ctx=Store())], value=Name(id='d', ctx=Load()))], orelse=[])], orelse=[]), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='min_idx', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Name(id='min_idx', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0)])]), body=[Return(value=Tuple(elts=[Name(id='s', ctx=Load()), Constant(value=''), Constant(value=None)], ctx=Load()))], orelse=[]), Return(value=Tuple(elts=[Subscript(value=Name(id='s', ctx=Load()), slice=Slice(upper=Name(id='min_idx', ctx=Load())), ctx=Load()), Subscript(value=Name(id='s', ctx=Load()), slice=Slice(lower=BinOp(left=Name(id='min_idx', ctx=Load()), op=Add(), right=Constant(value=1))), ctx=Load()), Name(id='min_delim', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='_encode_invalid_chars', args=arguments(posonlyargs=[], args=[arg(arg='component'), arg(arg='allowed_chars'), arg(arg='encoding')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='utf-8')]), body=[Expr(value=Constant(value='Percent-encodes a URI component without reapplying\n    onto an already percent-encoded component.\n    ')), If(test=Compare(left=Name(id='component', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Name(id='component', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='component', ctx=Store())], value=Call(func=Attribute(value=Name(id='six', ctx=Load()), attr='ensure_text', ctx=Load()), args=[Name(id='component', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='component', ctx=Store()), Name(id='percent_encodings', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='PERCENT_RE', ctx=Load()), attr='subn', ctx=Load()), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='match')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value=0)], keywords=[]), attr='upper', ctx=Load()), args=[], keywords=[])), Name(id='component', ctx=Load())], keywords=[])), Assign(targets=[Name(id='uri_bytes', ctx=Store())], value=Call(func=Attribute(value=Name(id='component', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='utf-8'), Constant(value='surrogatepass')], keywords=[])), Assign(targets=[Name(id='is_percent_encoded', ctx=Store())], value=Compare(left=Name(id='percent_encodings', ctx=Load()), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='uri_bytes', ctx=Load()), attr='count', ctx=Load()), args=[Constant(value=b'%')], keywords=[])])), Assign(targets=[Name(id='encoded_component', ctx=Store())], value=Call(func=Name(id='bytearray', ctx=Load()), args=[], keywords=[])), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Call(func=Name(id='len', ctx=Load()), args=[Name(id='uri_bytes', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='byte', ctx=Store())], value=Subscript(value=Name(id='uri_bytes', ctx=Load()), slice=Slice(lower=Name(id='i', ctx=Load()), upper=BinOp(left=Name(id='i', ctx=Load()), op=Add(), right=Constant(value=1))), ctx=Load())), Assign(targets=[Name(id='byte_ord', ctx=Store())], value=Call(func=Name(id='ord', ctx=Load()), args=[Name(id='byte', ctx=Load())], keywords=[])), If(test=BoolOp(op=Or(), values=[BoolOp(op=And(), values=[Name(id='is_percent_encoded', ctx=Load()), Compare(left=Name(id='byte', ctx=Load()), ops=[Eq()], comparators=[Constant(value=b'%')])]), BoolOp(op=And(), values=[Compare(left=Name(id='byte_ord', ctx=Load()), ops=[Lt()], comparators=[Constant(value=128)]), Compare(left=Call(func=Attribute(value=Name(id='byte', ctx=Load()), attr='decode', ctx=Load()), args=[], keywords=[]), ops=[In()], comparators=[Name(id='allowed_chars', ctx=Load())])])]), body=[AugAssign(target=Name(id='encoded_component', ctx=Store()), op=Add(), value=Name(id='byte', ctx=Load())), Continue()], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='encoded_component', ctx=Load()), attr='extend', ctx=Load()), args=[BinOp(left=Constant(value=b'%'), op=Add(), right=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Subscript(value=Call(func=Name(id='hex', ctx=Load()), args=[Name(id='byte_ord', ctx=Load())], keywords=[]), slice=Slice(lower=Constant(value=2)), ctx=Load()), attr='encode', ctx=Load()), args=[], keywords=[]), attr='zfill', ctx=Load()), args=[Constant(value=2)], keywords=[]), attr='upper', ctx=Load()), args=[], keywords=[]))], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='encoded_component', ctx=Load()), attr='decode', ctx=Load()), args=[Name(id='encoding', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_remove_path_dot_segments', args=arguments(posonlyargs=[], args=[arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='segments', ctx=Store())], value=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='/')], keywords=[])), Assign(targets=[Name(id='output', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='segment', ctx=Store()), iter=Name(id='segments', ctx=Load()), body=[If(test=Compare(left=Name(id='segment', ctx=Load()), ops=[Eq()], comparators=[Constant(value='.')]), body=[Continue()], orelse=[If(test=Compare(left=Name(id='segment', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='..')]), body=[Expr(value=Call(func=Attribute(value=Name(id='output', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='segment', ctx=Load())], keywords=[]))], orelse=[If(test=Name(id='output', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='output', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[]))], orelse=[])])])], orelse=[]), If(test=BoolOp(op=And(), values=[Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='/')], keywords=[]), BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Name(id='output', ctx=Load())), Subscript(value=Name(id='output', ctx=Load()), slice=Constant(value=0), ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Name(id='output', ctx=Load()), attr='insert', ctx=Load()), args=[Constant(value=0), Constant(value='')], keywords=[]))], orelse=[]), If(test=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='endswith', ctx=Load()), args=[Tuple(elts=[Constant(value='/.'), Constant(value='/..')], ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='output', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='')], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Constant(value='/'), attr='join', ctx=Load()), args=[Name(id='output', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='_normalize_host', args=arguments(posonlyargs=[], args=[arg(arg='host'), arg(arg='scheme')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Name(id='host', ctx=Load()), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='host', ctx=Load()), Attribute(value=Name(id='six', ctx=Load()), attr='binary_type', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='host', ctx=Store())], value=Call(func=Attribute(value=Name(id='six', ctx=Load()), attr='ensure_str', ctx=Load()), args=[Name(id='host', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='scheme', ctx=Load()), ops=[In()], comparators=[Name(id='NORMALIZABLE_SCHEMES', ctx=Load())]), body=[Assign(targets=[Name(id='is_ipv6', ctx=Store())], value=Call(func=Attribute(value=Name(id='IPV6_ADDRZ_RE', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='host', ctx=Load())], keywords=[])), If(test=Name(id='is_ipv6', ctx=Load()), body=[Assign(targets=[Name(id='match', ctx=Store())], value=Call(func=Attribute(value=Name(id='ZONE_ID_RE', ctx=Load()), attr='search', ctx=Load()), args=[Name(id='host', ctx=Load())], keywords=[])), If(test=Name(id='match', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='start', ctx=Store()), Name(id='end', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='span', ctx=Load()), args=[Constant(value=1)], keywords=[])), Assign(targets=[Name(id='zone_id', ctx=Store())], value=Subscript(value=Name(id='host', ctx=Load()), slice=Slice(lower=Name(id='start', ctx=Load()), upper=Name(id='end', ctx=Load())), ctx=Load())), If(test=BoolOp(op=And(), values=[Call(func=Attribute(value=Name(id='zone_id', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='%25')], keywords=[]), Compare(left=Name(id='zone_id', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='%25')])]), body=[Assign(targets=[Name(id='zone_id', ctx=Store())], value=Subscript(value=Name(id='zone_id', ctx=Load()), slice=Slice(lower=Constant(value=3)), ctx=Load()))], orelse=[Assign(targets=[Name(id='zone_id', ctx=Store())], value=Subscript(value=Name(id='zone_id', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()))]), Assign(targets=[Name(id='zone_id', ctx=Store())], value=BinOp(left=Constant(value='%'), op=Add(), right=Call(func=Name(id='_encode_invalid_chars', ctx=Load()), args=[Name(id='zone_id', ctx=Load()), Name(id='UNRESERVED_CHARS', ctx=Load())], keywords=[]))), Return(value=BinOp(left=BinOp(left=Call(func=Attribute(value=Subscript(value=Name(id='host', ctx=Load()), slice=Slice(upper=Name(id='start', ctx=Load())), ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), op=Add(), right=Name(id='zone_id', ctx=Load())), op=Add(), right=Subscript(value=Name(id='host', ctx=Load()), slice=Slice(lower=Name(id='end', ctx=Load())), ctx=Load())))], orelse=[Return(value=Call(func=Attribute(value=Name(id='host', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]))])], orelse=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='IPV4_RE', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='host', ctx=Load())], keywords=[])), body=[Return(value=Call(func=Attribute(value=Name(id='six', ctx=Load()), attr='ensure_str', ctx=Load()), args=[Call(func=Attribute(value=Constant(value=b'.'), attr='join', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='_idna_encode', ctx=Load()), args=[Name(id='label', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='label', ctx=Store()), iter=Call(func=Attribute(value=Name(id='host', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[]), ifs=[], is_async=0)])], keywords=[])], keywords=[]))], orelse=[])])], orelse=[])], orelse=[]), Return(value=Name(id='host', ctx=Load()))], decorator_list=[]), FunctionDef(name='_idna_encode', args=arguments(posonlyargs=[], args=[arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[Name(id='name', ctx=Load()), Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=Compare(left=Call(func=Name(id='ord', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[]), ops=[GtE()], comparators=[Constant(value=128)]), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='name', ctx=Load()), ifs=[], is_async=0)])], keywords=[])]), body=[Try(body=[ImportFrom(module='pip._vendor', names=[alias(name='idna')], level=0)], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='six', ctx=Load()), attr='raise_from', ctx=Load()), args=[Call(func=Name(id='LocationParseError', ctx=Load()), args=[Constant(value="Unable to parse URL without the 'idna' module")], keywords=[]), Constant(value=None)], keywords=[]))])], orelse=[], finalbody=[]), Try(body=[Return(value=Call(func=Attribute(value=Name(id='idna', ctx=Load()), attr='encode', ctx=Load()), args=[Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])], keywords=[keyword(arg='strict', value=Constant(value=True)), keyword(arg='std3_rules', value=Constant(value=True))]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='idna', ctx=Load()), attr='IDNAError', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='six', ctx=Load()), attr='raise_from', ctx=Load()), args=[Call(func=Name(id='LocationParseError', ctx=Load()), args=[BinOp(left=Constant(value="Name '%s' is not a valid IDNA label", kind='u'), op=Mod(), right=Name(id='name', ctx=Load()))], keywords=[]), Constant(value=None)], keywords=[]))])], orelse=[], finalbody=[])], orelse=[]), Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]))], decorator_list=[]), FunctionDef(name='_encode_target', args=arguments(posonlyargs=[], args=[arg(arg='target')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Percent-encodes a request target so that there are no invalid characters')), Assign(targets=[Tuple(elts=[Name(id='path', ctx=Store()), Name(id='query', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='TARGET_RE', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='target', ctx=Load())], keywords=[]), attr='groups', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='target', ctx=Store())], value=Call(func=Name(id='_encode_invalid_chars', ctx=Load()), args=[Name(id='path', ctx=Load()), Name(id='PATH_CHARS', ctx=Load())], keywords=[])), Assign(targets=[Name(id='query', ctx=Store())], value=Call(func=Name(id='_encode_invalid_chars', ctx=Load()), args=[Name(id='query', ctx=Load()), Name(id='QUERY_CHARS', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='query', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[AugAssign(target=Name(id='target', ctx=Store()), op=Add(), value=BinOp(left=Constant(value='?'), op=Add(), right=Name(id='query', ctx=Load())))], orelse=[]), Return(value=Name(id='target', ctx=Load()))], decorator_list=[]), FunctionDef(name='parse_url', args=arguments(posonlyargs=[], args=[arg(arg='url')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    Given a url, return a parsed :class:`.Url` namedtuple. Best-effort is\n    performed to parse incomplete urls. Fields not provided will be None.\n    This parser is RFC 3986 and RFC 6874 compliant.\n\n    The parser logic and helper functions are based heavily on\n    work done in the ``rfc3986`` module.\n\n    :param str url: URL to parse into a :class:`.Url` namedtuple.\n\n    Partly backwards-compatible with :mod:`urlparse`.\n\n    Example::\n\n        >>> parse_url('http://google.com/mail/')\n        Url(scheme='http', host='google.com', port=None, path='/mail/', ...)\n        >>> parse_url('google.com:80')\n        Url(scheme=None, host='google.com', port=80, path=None, ...)\n        >>> parse_url('/foo?bar')\n        Url(scheme=None, host=None, port=None, path='/foo', query='bar', ...)\n    ")), If(test=UnaryOp(op=Not(), operand=Name(id='url', ctx=Load())), body=[Return(value=Call(func=Name(id='Url', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='source_url', ctx=Store())], value=Name(id='url', ctx=Load())), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='SCHEME_RE', ctx=Load()), attr='search', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='url', ctx=Store())], value=BinOp(left=Constant(value='//'), op=Add(), right=Name(id='url', ctx=Load())))], orelse=[]), Try(body=[Assign(targets=[Tuple(elts=[Name(id='scheme', ctx=Store()), Name(id='authority', ctx=Store()), Name(id='path', ctx=Store()), Name(id='query', ctx=Store()), Name(id='fragment', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='URI_RE', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[]), attr='groups', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='normalize_uri', ctx=Store())], value=BoolOp(op=Or(), values=[Compare(left=Name(id='scheme', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Call(func=Attribute(value=Name(id='scheme', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), ops=[In()], comparators=[Name(id='NORMALIZABLE_SCHEMES', ctx=Load())])])), If(test=Name(id='scheme', ctx=Load()), body=[Assign(targets=[Name(id='scheme', ctx=Store())], value=Call(func=Attribute(value=Name(id='scheme', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Name(id='authority', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='auth', ctx=Store()), Name(id='_', ctx=Store()), Name(id='host_port', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='authority', ctx=Load()), attr='rpartition', ctx=Load()), args=[Constant(value='@')], keywords=[])), Assign(targets=[Name(id='auth', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='auth', ctx=Load()), Constant(value=None)])), Assign(targets=[Tuple(elts=[Name(id='host', ctx=Store()), Name(id='port', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='_HOST_PORT_RE', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='host_port', ctx=Load())], keywords=[]), attr='groups', ctx=Load()), args=[], keywords=[])), If(test=BoolOp(op=And(), values=[Name(id='auth', ctx=Load()), Name(id='normalize_uri', ctx=Load())]), body=[Assign(targets=[Name(id='auth', ctx=Store())], value=Call(func=Name(id='_encode_invalid_chars', ctx=Load()), args=[Name(id='auth', ctx=Load()), Name(id='USERINFO_CHARS', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='port', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Assign(targets=[Name(id='port', ctx=Store())], value=Constant(value=None))], orelse=[])], orelse=[Assign(targets=[Tuple(elts=[Name(id='auth', ctx=Store()), Name(id='host', ctx=Store()), Name(id='port', ctx=Store())], ctx=Store())], value=Tuple(elts=[Constant(value=None), Constant(value=None), Constant(value=None)], ctx=Load()))]), If(test=Compare(left=Name(id='port', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='port', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Name(id='port', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Compare(left=Constant(value=0), ops=[LtE(), LtE()], comparators=[Name(id='port', ctx=Load()), Constant(value=65535)])), body=[Raise(exc=Call(func=Name(id='LocationParseError', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='host', ctx=Store())], value=Call(func=Name(id='_normalize_host', ctx=Load()), args=[Name(id='host', ctx=Load()), Name(id='scheme', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Name(id='normalize_uri', ctx=Load()), Name(id='path', ctx=Load())]), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Name(id='_remove_path_dot_segments', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Name(id='_encode_invalid_chars', ctx=Load()), args=[Name(id='path', ctx=Load()), Name(id='PATH_CHARS', ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Name(id='normalize_uri', ctx=Load()), Name(id='query', ctx=Load())]), body=[Assign(targets=[Name(id='query', ctx=Store())], value=Call(func=Name(id='_encode_invalid_chars', ctx=Load()), args=[Name(id='query', ctx=Load()), Name(id='QUERY_CHARS', ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Name(id='normalize_uri', ctx=Load()), Name(id='fragment', ctx=Load())]), body=[Assign(targets=[Name(id='fragment', ctx=Store())], value=Call(func=Name(id='_encode_invalid_chars', ctx=Load()), args=[Name(id='fragment', ctx=Load()), Name(id='FRAGMENT_CHARS', ctx=Load())], keywords=[]))], orelse=[])], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='ValueError', ctx=Load()), Name(id='AttributeError', ctx=Load())], ctx=Load()), body=[Return(value=Call(func=Attribute(value=Name(id='six', ctx=Load()), attr='raise_from', ctx=Load()), args=[Call(func=Name(id='LocationParseError', ctx=Load()), args=[Name(id='source_url', ctx=Load())], keywords=[]), Constant(value=None)], keywords=[]))])], orelse=[], finalbody=[]), If(test=UnaryOp(op=Not(), operand=Name(id='path', ctx=Load())), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='query', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='fragment', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Constant(value=''))], orelse=[Assign(targets=[Name(id='path', ctx=Store())], value=Constant(value=None))])], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='url', ctx=Load()), Attribute(value=Name(id='six', ctx=Load()), attr='text_type', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='ensure_func', ctx=Store())], value=Attribute(value=Name(id='six', ctx=Load()), attr='ensure_text', ctx=Load()))], orelse=[Assign(targets=[Name(id='ensure_func', ctx=Store())], value=Attribute(value=Name(id='six', ctx=Load()), attr='ensure_str', ctx=Load()))]), FunctionDef(name='ensure_type', args=arguments(posonlyargs=[], args=[arg(arg='x')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=IfExp(test=Compare(left=Name(id='x', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Name(id='x', ctx=Load()), orelse=Call(func=Name(id='ensure_func', ctx=Load()), args=[Name(id='x', ctx=Load())], keywords=[])))], decorator_list=[]), Return(value=Call(func=Name(id='Url', ctx=Load()), args=[], keywords=[keyword(arg='scheme', value=Call(func=Name(id='ensure_type', ctx=Load()), args=[Name(id='scheme', ctx=Load())], keywords=[])), keyword(arg='auth', value=Call(func=Name(id='ensure_type', ctx=Load()), args=[Name(id='auth', ctx=Load())], keywords=[])), keyword(arg='host', value=Call(func=Name(id='ensure_type', ctx=Load()), args=[Name(id='host', ctx=Load())], keywords=[])), keyword(arg='port', value=Name(id='port', ctx=Load())), keyword(arg='path', value=Call(func=Name(id='ensure_type', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), keyword(arg='query', value=Call(func=Name(id='ensure_type', ctx=Load()), args=[Name(id='query', ctx=Load())], keywords=[])), keyword(arg='fragment', value=Call(func=Name(id='ensure_type', ctx=Load()), args=[Name(id='fragment', ctx=Load())], keywords=[]))]))], decorator_list=[]), FunctionDef(name='get_host', args=arguments(posonlyargs=[], args=[arg(arg='url')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Deprecated. Use :func:`parse_url` instead.\n    ')), Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Name(id='parse_url', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[BoolOp(op=Or(), values=[Attribute(value=Name(id='p', ctx=Load()), attr='scheme', ctx=Load()), Constant(value='http')]), Attribute(value=Name(id='p', ctx=Load()), attr='hostname', ctx=Load()), Attribute(value=Name(id='p', ctx=Load()), attr='port', ctx=Load())], ctx=Load()))], decorator_list=[])], type_ignores=[])