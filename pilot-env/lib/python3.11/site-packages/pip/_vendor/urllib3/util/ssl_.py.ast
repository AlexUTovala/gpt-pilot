Module(body=[ImportFrom(module='__future__', names=[alias(name='absolute_import')], level=0), Import(names=[alias(name='hmac')]), Import(names=[alias(name='os')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='warnings')]), ImportFrom(module='binascii', names=[alias(name='hexlify'), alias(name='unhexlify')], level=0), ImportFrom(module='hashlib', names=[alias(name='md5'), alias(name='sha1'), alias(name='sha256')], level=0), ImportFrom(module='exceptions', names=[alias(name='InsecurePlatformWarning'), alias(name='ProxySchemeUnsupported'), alias(name='SNIMissingWarning'), alias(name='SSLError')], level=2), ImportFrom(module='packages', names=[alias(name='six')], level=2), ImportFrom(module='url', names=[alias(name='BRACELESS_IPV6_ADDRZ_RE'), alias(name='IPV4_RE')], level=1), Assign(targets=[Name(id='SSLContext', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='SSLTransport', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='HAS_SNI', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='IS_PYOPENSSL', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='IS_SECURETRANSPORT', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='ALPN_PROTOCOLS', ctx=Store())], value=List(elts=[Constant(value='http/1.1')], ctx=Load())), Assign(targets=[Name(id='HASHFUNC_MAP', ctx=Store())], value=Dict(keys=[Constant(value=32), Constant(value=40), Constant(value=64)], values=[Name(id='md5', ctx=Load()), Name(id='sha1', ctx=Load()), Name(id='sha256', ctx=Load())])), FunctionDef(name='_const_compare_digest_backport', args=arguments(posonlyargs=[], args=[arg(arg='a'), arg(arg='b')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Compare two digests of equal length in constant time.\n\n    The digests must be of type str/bytes.\n    Returns True if the digests match, and False otherwise.\n    ')), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Name(id='abs', ctx=Load()), args=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[]), op=Sub(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='b', ctx=Load())], keywords=[]))], keywords=[])), For(target=Tuple(elts=[Name(id='left', ctx=Store()), Name(id='right', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Call(func=Name(id='bytearray', ctx=Load()), args=[Name(id='a', ctx=Load())], keywords=[]), Call(func=Name(id='bytearray', ctx=Load()), args=[Name(id='b', ctx=Load())], keywords=[])], keywords=[]), body=[AugAssign(target=Name(id='result', ctx=Store()), op=BitOr(), value=BinOp(left=Name(id='left', ctx=Load()), op=BitXor(), right=Name(id='right', ctx=Load())))], orelse=[]), Return(value=Compare(left=Name(id='result', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]))], decorator_list=[]), Assign(targets=[Name(id='_const_compare_digest', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='hmac', ctx=Load()), Constant(value='compare_digest'), Name(id='_const_compare_digest_backport', ctx=Load())], keywords=[])), Try(body=[Import(names=[alias(name='ssl')]), ImportFrom(module='ssl', names=[alias(name='CERT_REQUIRED'), alias(name='wrap_socket')], level=0)], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[]), Try(body=[ImportFrom(module='ssl', names=[alias(name='HAS_SNI')], level=0)], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[]), Try(body=[ImportFrom(module='ssltransport', names=[alias(name='SSLTransport')], level=1)], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[]), Try(body=[ImportFrom(module='ssl', names=[alias(name='PROTOCOL_TLS')], level=0), Assign(targets=[Name(id='PROTOCOL_SSLv23', ctx=Store())], value=Name(id='PROTOCOL_TLS', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Try(body=[ImportFrom(module='ssl', names=[alias(name='PROTOCOL_SSLv23', asname='PROTOCOL_TLS')], level=0), Assign(targets=[Name(id='PROTOCOL_SSLv23', ctx=Store())], value=Name(id='PROTOCOL_TLS', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Assign(targets=[Name(id='PROTOCOL_SSLv23', ctx=Store()), Name(id='PROTOCOL_TLS', ctx=Store())], value=Constant(value=2))])], orelse=[], finalbody=[])])], orelse=[], finalbody=[]), Try(body=[ImportFrom(module='ssl', names=[alias(name='PROTOCOL_TLS_CLIENT')], level=0)], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Assign(targets=[Name(id='PROTOCOL_TLS_CLIENT', ctx=Store())], value=Name(id='PROTOCOL_TLS', ctx=Load()))])], orelse=[], finalbody=[]), Try(body=[ImportFrom(module='ssl', names=[alias(name='OP_NO_COMPRESSION'), alias(name='OP_NO_SSLv2'), alias(name='OP_NO_SSLv3')], level=0)], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='OP_NO_SSLv2', ctx=Store()), Name(id='OP_NO_SSLv3', ctx=Store())], ctx=Store())], value=Tuple(elts=[Constant(value=16777216), Constant(value=33554432)], ctx=Load())), Assign(targets=[Name(id='OP_NO_COMPRESSION', ctx=Store())], value=Constant(value=131072))])], orelse=[], finalbody=[]), Try(body=[ImportFrom(module='ssl', names=[alias(name='OP_NO_TICKET')], level=0)], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Assign(targets=[Name(id='OP_NO_TICKET', ctx=Store())], value=Constant(value=16384))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='DEFAULT_CIPHERS', ctx=Store())], value=Call(func=Attribute(value=Constant(value=':'), attr='join', ctx=Load()), args=[List(elts=[Constant(value='ECDHE+AESGCM'), Constant(value='ECDHE+CHACHA20'), Constant(value='DHE+AESGCM'), Constant(value='DHE+CHACHA20'), Constant(value='ECDH+AESGCM'), Constant(value='DH+AESGCM'), Constant(value='ECDH+AES'), Constant(value='DH+AES'), Constant(value='RSA+AESGCM'), Constant(value='RSA+AES'), Constant(value='!aNULL'), Constant(value='!eNULL'), Constant(value='!MD5'), Constant(value='!DSS')], ctx=Load())], keywords=[])), Try(body=[ImportFrom(module='ssl', names=[alias(name='SSLContext')], level=0)], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[ClassDef(name='SSLContext', bases=[Name(id='object', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='protocol_version')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='protocol', ctx=Store())], value=Name(id='protocol_version', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='check_hostname', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='verify_mode', ctx=Store())], value=Attribute(value=Name(id='ssl', ctx=Load()), attr='CERT_NONE', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='ca_certs', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Store())], value=Constant(value=0)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='certfile', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='keyfile', ctx=Store())], value=Constant(value=None)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='ciphers', ctx=Store())], value=Constant(value=None))], decorator_list=[]), FunctionDef(name='load_cert_chain', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='certfile'), arg(arg='keyfile')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='certfile', ctx=Store())], value=Name(id='certfile', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='keyfile', ctx=Store())], value=Name(id='keyfile', ctx=Load()))], decorator_list=[]), FunctionDef(name='load_verify_locations', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='cafile'), arg(arg='capath'), arg(arg='cadata')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='ca_certs', ctx=Store())], value=Name(id='cafile', ctx=Load())), If(test=Compare(left=Name(id='capath', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='SSLError', ctx=Load()), args=[Constant(value='CA directories not supported in older Pythons')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='cadata', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='SSLError', ctx=Load()), args=[Constant(value='CA data not supported in older Pythons')], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='set_ciphers', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='cipher_suite')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='ciphers', ctx=Store())], value=Name(id='cipher_suite', ctx=Load()))], decorator_list=[]), FunctionDef(name='wrap_socket', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='socket'), arg(arg='server_hostname'), arg(arg='server_side')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=False)]), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value='A true SSLContext object is not available. This prevents urllib3 from configuring SSL appropriately and may cause certain SSL connections to fail. You can upgrade to a newer version of Python to solve this. For more information, see https://urllib3.readthedocs.io/en/1.26.x/advanced-usage.html#ssl-warnings'), Name(id='InsecurePlatformWarning', ctx=Load())], keywords=[])), Assign(targets=[Name(id='kwargs', ctx=Store())], value=Dict(keys=[Constant(value='keyfile'), Constant(value='certfile'), Constant(value='ca_certs'), Constant(value='cert_reqs'), Constant(value='ssl_version'), Constant(value='server_side')], values=[Attribute(value=Name(id='self', ctx=Load()), attr='keyfile', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='certfile', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='ca_certs', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='verify_mode', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='protocol', ctx=Load()), Name(id='server_side', ctx=Load())])), Return(value=Call(func=Name(id='wrap_socket', ctx=Load()), args=[Name(id='socket', ctx=Load())], keywords=[keyword(arg='ciphers', value=Attribute(value=Name(id='self', ctx=Load()), attr='ciphers', ctx=Load())), keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[])], decorator_list=[])])], orelse=[], finalbody=[]), FunctionDef(name='assert_fingerprint', args=arguments(posonlyargs=[], args=[arg(arg='cert'), arg(arg='fingerprint')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Checks if given fingerprint matches the supplied certificate.\n\n    :param cert:\n        Certificate as bytes object.\n    :param fingerprint:\n        Fingerprint as string of hexdigits, can be interspersed by colons.\n    ')), Assign(targets=[Name(id='fingerprint', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='fingerprint', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value=':'), Constant(value='')], keywords=[]), attr='lower', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='digest_length', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='fingerprint', ctx=Load())], keywords=[])), Assign(targets=[Name(id='hashfunc', ctx=Store())], value=Call(func=Attribute(value=Name(id='HASHFUNC_MAP', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='digest_length', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='hashfunc', ctx=Load())), body=[Raise(exc=Call(func=Name(id='SSLError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Fingerprint of invalid length: {0}'), attr='format', ctx=Load()), args=[Name(id='fingerprint', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='fingerprint_bytes', ctx=Store())], value=Call(func=Name(id='unhexlify', ctx=Load()), args=[Call(func=Attribute(value=Name(id='fingerprint', ctx=Load()), attr='encode', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='cert_digest', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='hashfunc', ctx=Load()), args=[Name(id='cert', ctx=Load())], keywords=[]), attr='digest', ctx=Load()), args=[], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='_const_compare_digest', ctx=Load()), args=[Name(id='cert_digest', ctx=Load()), Name(id='fingerprint_bytes', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='SSLError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Fingerprints did not match. Expected "{0}", got "{1}".'), attr='format', ctx=Load()), args=[Name(id='fingerprint', ctx=Load()), Call(func=Name(id='hexlify', ctx=Load()), args=[Name(id='cert_digest', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='resolve_cert_reqs', args=arguments(posonlyargs=[], args=[arg(arg='candidate')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    Resolves the argument to a numeric constant, which can be passed to\n    the wrap_socket function/method from the ssl module.\n    Defaults to :data:`ssl.CERT_REQUIRED`.\n    If given a string it is assumed to be the name of the constant in the\n    :mod:`ssl` module or its abbreviation.\n    (So you can specify `REQUIRED` instead of `CERT_REQUIRED`.\n    If it's neither `None` nor a string we assume it is already the numeric\n    constant which can directly be passed to wrap_socket.\n    ")), If(test=Compare(left=Name(id='candidate', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Name(id='CERT_REQUIRED', ctx=Load()))], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='candidate', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='res', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='ssl', ctx=Load()), Name(id='candidate', ctx=Load()), Constant(value=None)], keywords=[])), If(test=Compare(left=Name(id='res', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='res', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='ssl', ctx=Load()), BinOp(left=Constant(value='CERT_'), op=Add(), right=Name(id='candidate', ctx=Load()))], keywords=[]))], orelse=[]), Return(value=Name(id='res', ctx=Load()))], orelse=[]), Return(value=Name(id='candidate', ctx=Load()))], decorator_list=[]), FunctionDef(name='resolve_ssl_version', args=arguments(posonlyargs=[], args=[arg(arg='candidate')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    like resolve_cert_reqs\n    ')), If(test=Compare(left=Name(id='candidate', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Name(id='PROTOCOL_TLS', ctx=Load()))], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='candidate', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='res', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='ssl', ctx=Load()), Name(id='candidate', ctx=Load()), Constant(value=None)], keywords=[])), If(test=Compare(left=Name(id='res', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='res', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='ssl', ctx=Load()), BinOp(left=Constant(value='PROTOCOL_'), op=Add(), right=Name(id='candidate', ctx=Load()))], keywords=[]))], orelse=[]), Return(value=Name(id='res', ctx=Load()))], orelse=[]), Return(value=Name(id='candidate', ctx=Load()))], decorator_list=[]), FunctionDef(name='create_urllib3_context', args=arguments(posonlyargs=[], args=[arg(arg='ssl_version'), arg(arg='cert_reqs'), arg(arg='options'), arg(arg='ciphers')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='All arguments have the same meaning as ``ssl_wrap_socket``.\n\n    By default, this function does a lot of the same work that\n    ``ssl.create_default_context`` does on Python 3.4+. It:\n\n    - Disables SSLv2, SSLv3, and compression\n    - Sets a restricted set of server ciphers\n\n    If you wish to enable SSLv3, you can do::\n\n        from pip._vendor.urllib3.util import ssl_\n        context = ssl_.create_urllib3_context()\n        context.options &= ~ssl_.OP_NO_SSLv3\n\n    You can do the same to enable compression (substituting ``COMPRESSION``\n    for ``SSLv3`` in the last line above).\n\n    :param ssl_version:\n        The desired protocol version to use. This will default to\n        PROTOCOL_SSLv23 which will negotiate the highest protocol that both\n        the server and your installation of OpenSSL support.\n    :param cert_reqs:\n        Whether to require the certificate verification. This defaults to\n        ``ssl.CERT_REQUIRED``.\n    :param options:\n        Specific OpenSSL options. These default to ``ssl.OP_NO_SSLv2``,\n        ``ssl.OP_NO_SSLv3``, ``ssl.OP_NO_COMPRESSION``, and ``ssl.OP_NO_TICKET``.\n    :param ciphers:\n        Which cipher suites to allow the server to select.\n    :returns:\n        Constructed SSLContext object with specified options\n    :rtype: SSLContext\n    ')), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Name(id='ssl_version', ctx=Load())), Compare(left=Name(id='ssl_version', ctx=Load()), ops=[Eq()], comparators=[Name(id='PROTOCOL_TLS', ctx=Load())])]), body=[Assign(targets=[Name(id='ssl_version', ctx=Store())], value=Name(id='PROTOCOL_TLS_CLIENT', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='context', ctx=Store())], value=Call(func=Name(id='SSLContext', ctx=Load()), args=[Name(id='ssl_version', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='context', ctx=Load()), attr='set_ciphers', ctx=Load()), args=[BoolOp(op=Or(), values=[Name(id='ciphers', ctx=Load()), Name(id='DEFAULT_CIPHERS', ctx=Load())])], keywords=[])), Assign(targets=[Name(id='cert_reqs', ctx=Store())], value=IfExp(test=Compare(left=Name(id='cert_reqs', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Attribute(value=Name(id='ssl', ctx=Load()), attr='CERT_REQUIRED', ctx=Load()), orelse=Name(id='cert_reqs', ctx=Load()))), If(test=Compare(left=Name(id='options', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='options', ctx=Store())], value=Constant(value=0)), AugAssign(target=Name(id='options', ctx=Store()), op=BitOr(), value=Name(id='OP_NO_SSLv2', ctx=Load())), AugAssign(target=Name(id='options', ctx=Store()), op=BitOr(), value=Name(id='OP_NO_SSLv3', ctx=Load())), AugAssign(target=Name(id='options', ctx=Store()), op=BitOr(), value=Name(id='OP_NO_COMPRESSION', ctx=Load())), AugAssign(target=Name(id='options', ctx=Store()), op=BitOr(), value=Name(id='OP_NO_TICKET', ctx=Load()))], orelse=[]), AugAssign(target=Attribute(value=Name(id='context', ctx=Load()), attr='options', ctx=Store()), op=BitOr(), value=Name(id='options', ctx=Load())), If(test=BoolOp(op=And(), values=[BoolOp(op=Or(), values=[Compare(left=Name(id='cert_reqs', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='ssl', ctx=Load()), attr='CERT_REQUIRED', ctx=Load())]), Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), ops=[GtE()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=7), Constant(value=4)], ctx=Load())])]), Compare(left=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='context', ctx=Load()), Constant(value='post_handshake_auth'), Constant(value=None)], keywords=[]), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Attribute(value=Name(id='context', ctx=Load()), attr='post_handshake_auth', ctx=Store())], value=Constant(value=True))], orelse=[]), FunctionDef(name='disable_check_hostname', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='context', ctx=Load()), Constant(value='check_hostname'), Constant(value=None)], keywords=[]), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='context', ctx=Load()), attr='check_hostname', ctx=Store())], value=Constant(value=False))], orelse=[])], decorator_list=[]), If(test=Compare(left=Name(id='cert_reqs', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='ssl', ctx=Load()), attr='CERT_REQUIRED', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='context', ctx=Load()), attr='verify_mode', ctx=Store())], value=Name(id='cert_reqs', ctx=Load())), Expr(value=Call(func=Name(id='disable_check_hostname', ctx=Load()), args=[], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='disable_check_hostname', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='context', ctx=Load()), attr='verify_mode', ctx=Store())], value=Name(id='cert_reqs', ctx=Load()))]), If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='context', ctx=Load()), Constant(value='keylog_filename')], keywords=[]), body=[Assign(targets=[Name(id='sslkeylogfile', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='SSLKEYLOGFILE')], keywords=[])), If(test=Name(id='sslkeylogfile', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='context', ctx=Load()), attr='keylog_filename', ctx=Store())], value=Name(id='sslkeylogfile', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='context', ctx=Load()))], decorator_list=[]), FunctionDef(name='ssl_wrap_socket', args=arguments(posonlyargs=[], args=[arg(arg='sock'), arg(arg='keyfile'), arg(arg='certfile'), arg(arg='cert_reqs'), arg(arg='ca_certs'), arg(arg='server_hostname'), arg(arg='ssl_version'), arg(arg='ciphers'), arg(arg='ssl_context'), arg(arg='ca_cert_dir'), arg(arg='key_password'), arg(arg='ca_cert_data'), arg(arg='tls_in_tls')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=False)]), body=[Expr(value=Constant(value="\n    All arguments except for server_hostname, ssl_context, and ca_cert_dir have\n    the same meaning as they do when using :func:`ssl.wrap_socket`.\n\n    :param server_hostname:\n        When SNI is supported, the expected hostname of the certificate\n    :param ssl_context:\n        A pre-made :class:`SSLContext` object. If none is provided, one will\n        be created using :func:`create_urllib3_context`.\n    :param ciphers:\n        A string of ciphers we wish the client to support.\n    :param ca_cert_dir:\n        A directory containing CA certificates in multiple separate files, as\n        supported by OpenSSL's -CApath flag or the capath argument to\n        SSLContext.load_verify_locations().\n    :param key_password:\n        Optional password if the keyfile is encrypted.\n    :param ca_cert_data:\n        Optional string containing CA certificates in PEM format suitable for\n        passing as the cadata parameter to SSLContext.load_verify_locations()\n    :param tls_in_tls:\n        Use SSLTransport to wrap the existing socket.\n    ")), Assign(targets=[Name(id='context', ctx=Store())], value=Name(id='ssl_context', ctx=Load())), If(test=Compare(left=Name(id='context', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='context', ctx=Store())], value=Call(func=Name(id='create_urllib3_context', ctx=Load()), args=[Name(id='ssl_version', ctx=Load()), Name(id='cert_reqs', ctx=Load())], keywords=[keyword(arg='ciphers', value=Name(id='ciphers', ctx=Load()))]))], orelse=[]), If(test=BoolOp(op=Or(), values=[Name(id='ca_certs', ctx=Load()), Name(id='ca_cert_dir', ctx=Load()), Name(id='ca_cert_data', ctx=Load())]), body=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='context', ctx=Load()), attr='load_verify_locations', ctx=Load()), args=[Name(id='ca_certs', ctx=Load()), Name(id='ca_cert_dir', ctx=Load()), Name(id='ca_cert_data', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='IOError', ctx=Load()), Name(id='OSError', ctx=Load())], ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='SSLError', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], orelse=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='ssl_context', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='context', ctx=Load()), Constant(value='load_default_certs')], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='context', ctx=Load()), attr='load_default_certs', ctx=Load()), args=[], keywords=[]))], orelse=[])]), If(test=BoolOp(op=And(), values=[Name(id='keyfile', ctx=Load()), Compare(left=Name(id='key_password', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Call(func=Name(id='_is_key_file_encrypted', ctx=Load()), args=[Name(id='keyfile', ctx=Load())], keywords=[])]), body=[Raise(exc=Call(func=Name(id='SSLError', ctx=Load()), args=[Constant(value='Client private key is encrypted, password is required')], keywords=[]))], orelse=[]), If(test=Name(id='certfile', ctx=Load()), body=[If(test=Compare(left=Name(id='key_password', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='context', ctx=Load()), attr='load_cert_chain', ctx=Load()), args=[Name(id='certfile', ctx=Load()), Name(id='keyfile', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='context', ctx=Load()), attr='load_cert_chain', ctx=Load()), args=[Name(id='certfile', ctx=Load()), Name(id='keyfile', ctx=Load()), Name(id='key_password', ctx=Load())], keywords=[]))])], orelse=[]), Try(body=[If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='context', ctx=Load()), Constant(value='set_alpn_protocols')], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='context', ctx=Load()), attr='set_alpn_protocols', ctx=Load()), args=[Name(id='ALPN_PROTOCOLS', ctx=Load())], keywords=[]))], orelse=[])], handlers=[ExceptHandler(type=Name(id='NotImplementedError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[]), Assign(targets=[Name(id='use_sni_hostname', ctx=Store())], value=BoolOp(op=And(), values=[Name(id='server_hostname', ctx=Load()), UnaryOp(op=Not(), operand=Call(func=Name(id='is_ipaddress', ctx=Load()), args=[Name(id='server_hostname', ctx=Load())], keywords=[]))])), Assign(targets=[Name(id='send_sni', ctx=Store())], value=BoolOp(op=Or(), values=[BoolOp(op=And(), values=[Name(id='use_sni_hostname', ctx=Load()), Name(id='HAS_SNI', ctx=Load())]), BoolOp(op=And(), values=[Name(id='IS_SECURETRANSPORT', ctx=Load()), Name(id='server_hostname', ctx=Load())])])), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Name(id='HAS_SNI', ctx=Load())), Name(id='use_sni_hostname', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value='An HTTPS request has been made, but the SNI (Server Name Indication) extension to TLS is not available on this platform. This may cause the server to present an incorrect TLS certificate, which can cause validation failures. You can upgrade to a newer version of Python to solve this. For more information, see https://urllib3.readthedocs.io/en/1.26.x/advanced-usage.html#ssl-warnings'), Name(id='SNIMissingWarning', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='send_sni', ctx=Load()), body=[Assign(targets=[Name(id='ssl_sock', ctx=Store())], value=Call(func=Name(id='_ssl_wrap_socket_impl', ctx=Load()), args=[Name(id='sock', ctx=Load()), Name(id='context', ctx=Load()), Name(id='tls_in_tls', ctx=Load())], keywords=[keyword(arg='server_hostname', value=Name(id='server_hostname', ctx=Load()))]))], orelse=[Assign(targets=[Name(id='ssl_sock', ctx=Store())], value=Call(func=Name(id='_ssl_wrap_socket_impl', ctx=Load()), args=[Name(id='sock', ctx=Load()), Name(id='context', ctx=Load()), Name(id='tls_in_tls', ctx=Load())], keywords=[]))]), Return(value=Name(id='ssl_sock', ctx=Load()))], decorator_list=[]), FunctionDef(name='is_ipaddress', args=arguments(posonlyargs=[], args=[arg(arg='hostname')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Detects whether the hostname given is an IPv4 or IPv6 address.\n    Also detects IPv6 addresses with Zone IDs.\n\n    :param str hostname: Hostname to examine.\n    :return: True if the hostname is an IP address, False otherwise.\n    ')), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Attribute(value=Name(id='six', ctx=Load()), attr='PY2', ctx=Load())), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='hostname', ctx=Load()), Name(id='bytes', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='hostname', ctx=Store())], value=Call(func=Attribute(value=Name(id='hostname', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='bool', ctx=Load()), args=[BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='IPV4_RE', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='hostname', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='BRACELESS_IPV6_ADDRZ_RE', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='hostname', ctx=Load())], keywords=[])])], keywords=[]))], decorator_list=[]), FunctionDef(name='_is_key_file_encrypted', args=arguments(posonlyargs=[], args=[arg(arg='key_file')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Detects if a key file is encrypted or not.')), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='key_file', ctx=Load()), Constant(value='r')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[For(target=Name(id='line', ctx=Store()), iter=Name(id='f', ctx=Load()), body=[If(test=Compare(left=Constant(value='ENCRYPTED'), ops=[In()], comparators=[Name(id='line', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[])], orelse=[])]), Return(value=Constant(value=False))], decorator_list=[]), FunctionDef(name='_ssl_wrap_socket_impl', args=arguments(posonlyargs=[], args=[arg(arg='sock'), arg(arg='ssl_context'), arg(arg='tls_in_tls'), arg(arg='server_hostname')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Name(id='tls_in_tls', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Name(id='SSLTransport', ctx=Load())), body=[Raise(exc=Call(func=Name(id='ProxySchemeUnsupported', ctx=Load()), args=[Constant(value="TLS in TLS requires support for the 'ssl' module")], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='SSLTransport', ctx=Load()), attr='_validate_ssl_context_for_tls_in_tls', ctx=Load()), args=[Name(id='ssl_context', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='SSLTransport', ctx=Load()), args=[Name(id='sock', ctx=Load()), Name(id='ssl_context', ctx=Load()), Name(id='server_hostname', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='server_hostname', ctx=Load()), body=[Return(value=Call(func=Attribute(value=Name(id='ssl_context', ctx=Load()), attr='wrap_socket', ctx=Load()), args=[Name(id='sock', ctx=Load())], keywords=[keyword(arg='server_hostname', value=Name(id='server_hostname', ctx=Load()))]))], orelse=[Return(value=Call(func=Attribute(value=Name(id='ssl_context', ctx=Load()), attr='wrap_socket', ctx=Load()), args=[Name(id='sock', ctx=Load())], keywords=[]))])], decorator_list=[])], type_ignores=[])