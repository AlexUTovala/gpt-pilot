Module(body=[ImportFrom(module='__future__', names=[alias(name='absolute_import')], level=0), Import(names=[alias(name='socket')]), ImportFrom(module='contrib', names=[alias(name='_appengine_environ')], level=2), ImportFrom(module='exceptions', names=[alias(name='LocationParseError')], level=2), ImportFrom(module='packages', names=[alias(name='six')], level=2), ImportFrom(module='wait', names=[alias(name='NoWayToWaitForSocketError'), alias(name='wait_for_read')], level=1), FunctionDef(name='is_connection_dropped', args=arguments(posonlyargs=[], args=[arg(arg='conn')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Returns True if the connection is dropped and should be closed.\n\n    :param conn:\n        :class:`http.client.HTTPConnection` object.\n\n    Note: For platforms like AppEngine, this will always return ``False`` to\n    let the platform handle connection recycling transparently for us.\n    ')), Assign(targets=[Name(id='sock', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='conn', ctx=Load()), Constant(value='sock'), Constant(value=False)], keywords=[])), If(test=Compare(left=Name(id='sock', ctx=Load()), ops=[Is()], comparators=[Constant(value=False)]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Compare(left=Name(id='sock', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=True))], orelse=[]), Try(body=[Return(value=Call(func=Name(id='wait_for_read', ctx=Load()), args=[Name(id='sock', ctx=Load())], keywords=[keyword(arg='timeout', value=Constant(value=0.0))]))], handlers=[ExceptHandler(type=Name(id='NoWayToWaitForSocketError', ctx=Load()), body=[Return(value=Constant(value=False))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='create_connection', args=arguments(posonlyargs=[], args=[arg(arg='address'), arg(arg='timeout'), arg(arg='source_address'), arg(arg='socket_options')], kwonlyargs=[], kw_defaults=[], defaults=[Attribute(value=Name(id='socket', ctx=Load()), attr='_GLOBAL_DEFAULT_TIMEOUT', ctx=Load()), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value="Connect to *address* and return the socket object.\n\n    Convenience function.  Connect to *address* (a 2-tuple ``(host,\n    port)``) and return the socket object.  Passing the optional\n    *timeout* parameter will set the timeout on the socket instance\n    before attempting to connect.  If no *timeout* is supplied, the\n    global default timeout setting returned by :func:`socket.getdefaulttimeout`\n    is used.  If *source_address* is set it must be a tuple of (host, port)\n    for the socket to bind as a source address before making the connection.\n    An host of '' or port 0 tells the OS to use the default.\n    ")), Assign(targets=[Tuple(elts=[Name(id='host', ctx=Store()), Name(id='port', ctx=Store())], ctx=Store())], value=Name(id='address', ctx=Load())), If(test=Call(func=Attribute(value=Name(id='host', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='[')], keywords=[]), body=[Assign(targets=[Name(id='host', ctx=Store())], value=Call(func=Attribute(value=Name(id='host', ctx=Load()), attr='strip', ctx=Load()), args=[Constant(value='[]')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='err', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='family', ctx=Store())], value=Call(func=Name(id='allowed_gai_family', ctx=Load()), args=[], keywords=[])), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='host', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='idna')], keywords=[]))], handlers=[ExceptHandler(type=Name(id='UnicodeError', ctx=Load()), body=[Return(value=Call(func=Attribute(value=Name(id='six', ctx=Load()), attr='raise_from', ctx=Load()), args=[Call(func=Name(id='LocationParseError', ctx=Load()), args=[BinOp(left=Constant(value="'%s', label empty or too long", kind='u'), op=Mod(), right=Name(id='host', ctx=Load()))], keywords=[]), Constant(value=None)], keywords=[]))])], orelse=[], finalbody=[]), For(target=Name(id='res', ctx=Store()), iter=Call(func=Attribute(value=Name(id='socket', ctx=Load()), attr='getaddrinfo', ctx=Load()), args=[Name(id='host', ctx=Load()), Name(id='port', ctx=Load()), Name(id='family', ctx=Load()), Attribute(value=Name(id='socket', ctx=Load()), attr='SOCK_STREAM', ctx=Load())], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='af', ctx=Store()), Name(id='socktype', ctx=Store()), Name(id='proto', ctx=Store()), Name(id='canonname', ctx=Store()), Name(id='sa', ctx=Store())], ctx=Store())], value=Name(id='res', ctx=Load())), Assign(targets=[Name(id='sock', ctx=Store())], value=Constant(value=None)), Try(body=[Assign(targets=[Name(id='sock', ctx=Store())], value=Call(func=Attribute(value=Name(id='socket', ctx=Load()), attr='socket', ctx=Load()), args=[Name(id='af', ctx=Load()), Name(id='socktype', ctx=Load()), Name(id='proto', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='_set_socket_options', ctx=Load()), args=[Name(id='sock', ctx=Load()), Name(id='socket_options', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='timeout', ctx=Load()), ops=[IsNot()], comparators=[Attribute(value=Name(id='socket', ctx=Load()), attr='_GLOBAL_DEFAULT_TIMEOUT', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='sock', ctx=Load()), attr='settimeout', ctx=Load()), args=[Name(id='timeout', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='source_address', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='sock', ctx=Load()), attr='bind', ctx=Load()), args=[Name(id='source_address', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='sock', ctx=Load()), attr='connect', ctx=Load()), args=[Name(id='sa', ctx=Load())], keywords=[])), Return(value=Name(id='sock', ctx=Load()))], handlers=[ExceptHandler(type=Attribute(value=Name(id='socket', ctx=Load()), attr='error', ctx=Load()), name='e', body=[Assign(targets=[Name(id='err', ctx=Store())], value=Name(id='e', ctx=Load())), If(test=Compare(left=Name(id='sock', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='sock', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='sock', ctx=Store())], value=Constant(value=None))], orelse=[])])], orelse=[], finalbody=[])], orelse=[]), If(test=Compare(left=Name(id='err', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Raise(exc=Name(id='err', ctx=Load()))], orelse=[]), Raise(exc=Call(func=Attribute(value=Name(id='socket', ctx=Load()), attr='error', ctx=Load()), args=[Constant(value='getaddrinfo returns an empty list')], keywords=[]))], decorator_list=[]), FunctionDef(name='_set_socket_options', args=arguments(posonlyargs=[], args=[arg(arg='sock'), arg(arg='options')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='options', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return()], orelse=[]), For(target=Name(id='opt', ctx=Store()), iter=Name(id='options', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='sock', ctx=Load()), attr='setsockopt', ctx=Load()), args=[Starred(value=Name(id='opt', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='allowed_gai_family', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='This function is designed to work in the context of\n    getaddrinfo, where family=socket.AF_UNSPEC is the default and\n    will perform a DNS search for both IPv6 and IPv4 records.')), Assign(targets=[Name(id='family', ctx=Store())], value=Attribute(value=Name(id='socket', ctx=Load()), attr='AF_INET', ctx=Load())), If(test=Name(id='HAS_IPV6', ctx=Load()), body=[Assign(targets=[Name(id='family', ctx=Store())], value=Attribute(value=Name(id='socket', ctx=Load()), attr='AF_UNSPEC', ctx=Load()))], orelse=[]), Return(value=Name(id='family', ctx=Load()))], decorator_list=[]), FunctionDef(name='_has_ipv6', args=arguments(posonlyargs=[], args=[arg(arg='host')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Returns True if the system can bind an IPv6 address.')), Assign(targets=[Name(id='sock', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='has_ipv6', ctx=Store())], value=Constant(value=False)), If(test=Call(func=Attribute(value=Name(id='_appengine_environ', ctx=Load()), attr='is_appengine_sandbox', ctx=Load()), args=[], keywords=[]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Attribute(value=Name(id='socket', ctx=Load()), attr='has_ipv6', ctx=Load()), body=[Try(body=[Assign(targets=[Name(id='sock', ctx=Store())], value=Call(func=Attribute(value=Name(id='socket', ctx=Load()), attr='socket', ctx=Load()), args=[Attribute(value=Name(id='socket', ctx=Load()), attr='AF_INET6', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='sock', ctx=Load()), attr='bind', ctx=Load()), args=[Tuple(elts=[Name(id='host', ctx=Load()), Constant(value=0)], ctx=Load())], keywords=[])), Assign(targets=[Name(id='has_ipv6', ctx=Store())], value=Constant(value=True))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], orelse=[]), If(test=Name(id='sock', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='sock', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Name(id='has_ipv6', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='HAS_IPV6', ctx=Store())], value=Call(func=Name(id='_has_ipv6', ctx=Load()), args=[Constant(value='::1')], keywords=[]))], type_ignores=[])