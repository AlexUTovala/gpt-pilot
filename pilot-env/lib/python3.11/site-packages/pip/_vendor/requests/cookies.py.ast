Module(body=[Expr(value=Constant(value='\nrequests.cookies\n~~~~~~~~~~~~~~~~\n\nCompatibility code to be able to use `cookielib.CookieJar` with requests.\n\nrequests.utils imports from here, so be careful with imports.\n')), Import(names=[alias(name='calendar')]), Import(names=[alias(name='copy')]), Import(names=[alias(name='time')]), ImportFrom(module='_internal_utils', names=[alias(name='to_native_string')], level=1), ImportFrom(module='compat', names=[alias(name='Morsel'), alias(name='MutableMapping'), alias(name='cookielib'), alias(name='urlparse'), alias(name='urlunparse')], level=1), Try(body=[Import(names=[alias(name='threading')])], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Import(names=[alias(name='dummy_threading', asname='threading')])])], orelse=[], finalbody=[]), ClassDef(name='MockRequest', bases=[], keywords=[], body=[Expr(value=Constant(value='Wraps a `requests.Request` to mimic a `urllib2.Request`.\n\n    The code in `cookielib.CookieJar` expects this interface in order to correctly\n    manage cookie policies, i.e., determine whether a cookie can be set, given the\n    domains of the request and the cookie.\n\n    The original request object is read-only. The client is responsible for collecting\n    the new headers via `get_new_headers()` and interpreting them appropriately. You\n    probably want `get_cookie_header`, defined below.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='request')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_r', ctx=Store())], value=Name(id='request', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_new_headers', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='type', ctx=Store())], value=Attribute(value=Call(func=Name(id='urlparse', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_r', ctx=Load()), attr='url', ctx=Load())], keywords=[]), attr='scheme', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_type', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='type', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_host', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Call(func=Name(id='urlparse', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_r', ctx=Load()), attr='url', ctx=Load())], keywords=[]), attr='netloc', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_origin_req_host', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_host', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='get_full_url', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_r', ctx=Load()), attr='headers', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='Host')], keywords=[])), body=[Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_r', ctx=Load()), attr='url', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='host', ctx=Store())], value=Call(func=Name(id='to_native_string', ctx=Load()), args=[Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_r', ctx=Load()), attr='headers', ctx=Load()), slice=Constant(value='Host'), ctx=Load())], keywords=[keyword(arg='encoding', value=Constant(value='utf-8'))])), Assign(targets=[Name(id='parsed', ctx=Store())], value=Call(func=Name(id='urlparse', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_r', ctx=Load()), attr='url', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='urlunparse', ctx=Load()), args=[List(elts=[Attribute(value=Name(id='parsed', ctx=Load()), attr='scheme', ctx=Load()), Name(id='host', ctx=Load()), Attribute(value=Name(id='parsed', ctx=Load()), attr='path', ctx=Load()), Attribute(value=Name(id='parsed', ctx=Load()), attr='params', ctx=Load()), Attribute(value=Name(id='parsed', ctx=Load()), attr='query', ctx=Load()), Attribute(value=Name(id='parsed', ctx=Load()), attr='fragment', ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='is_unverifiable', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=True))], decorator_list=[]), FunctionDef(name='has_header', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=Or(), values=[Compare(left=Name(id='name', ctx=Load()), ops=[In()], comparators=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_r', ctx=Load()), attr='headers', ctx=Load())]), Compare(left=Name(id='name', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_new_headers', ctx=Load())])]))], decorator_list=[]), FunctionDef(name='get_header', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name'), arg(arg='default')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_r', ctx=Load()), attr='headers', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='name', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_new_headers', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='default', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='add_header', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key'), arg(arg='val')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='cookielib has no legitimate use for this method; add it back if you find one.')), Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[Constant(value='Cookie headers should be added with add_unredirected_header()')], keywords=[]))], decorator_list=[]), FunctionDef(name='add_unredirected_header', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_new_headers', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_new_headers', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_new_headers', ctx=Load()))], decorator_list=[]), FunctionDef(name='unverifiable', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='is_unverifiable', ctx=Load()), args=[], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='origin_req_host', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_origin_req_host', ctx=Load()), args=[], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='host', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_host', ctx=Load()), args=[], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())])], decorator_list=[]), ClassDef(name='MockResponse', bases=[], keywords=[], body=[Expr(value=Constant(value='Wraps a `httplib.HTTPMessage` to mimic a `urllib.addinfourl`.\n\n    ...what? Basically, expose the parsed HTTP headers from the server response\n    the way `cookielib` expects to see them.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='headers')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Make a MockResponse for `cookielib` to read.\n\n        :param headers: a httplib.HTTPMessage or analogous carrying the headers\n        ')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_headers', ctx=Store())], value=Name(id='headers', ctx=Load()))], decorator_list=[]), FunctionDef(name='info', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_headers', ctx=Load()))], decorator_list=[]), FunctionDef(name='getheaders', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_headers', ctx=Load()), attr='getheaders', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), FunctionDef(name='extract_cookies_to_jar', args=arguments(posonlyargs=[], args=[arg(arg='jar'), arg(arg='request'), arg(arg='response')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Extract the cookies from the response into a CookieJar.\n\n    :param jar: cookielib.CookieJar (not necessarily a RequestsCookieJar)\n    :param request: our own requests.Request object\n    :param response: urllib3.HTTPResponse object\n    ')), If(test=UnaryOp(op=Not(), operand=BoolOp(op=And(), values=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='response', ctx=Load()), Constant(value='_original_response')], keywords=[]), Attribute(value=Name(id='response', ctx=Load()), attr='_original_response', ctx=Load())])), body=[Return()], orelse=[]), Assign(targets=[Name(id='req', ctx=Store())], value=Call(func=Name(id='MockRequest', ctx=Load()), args=[Name(id='request', ctx=Load())], keywords=[])), Assign(targets=[Name(id='res', ctx=Store())], value=Call(func=Name(id='MockResponse', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='response', ctx=Load()), attr='_original_response', ctx=Load()), attr='msg', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='jar', ctx=Load()), attr='extract_cookies', ctx=Load()), args=[Name(id='res', ctx=Load()), Name(id='req', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='get_cookie_header', args=arguments(posonlyargs=[], args=[arg(arg='jar'), arg(arg='request')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Produce an appropriate Cookie header string to be sent with `request`, or None.\n\n    :rtype: str\n    ')), Assign(targets=[Name(id='r', ctx=Store())], value=Call(func=Name(id='MockRequest', ctx=Load()), args=[Name(id='request', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='jar', ctx=Load()), attr='add_cookie_header', ctx=Load()), args=[Name(id='r', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='r', ctx=Load()), attr='get_new_headers', ctx=Load()), args=[], keywords=[]), attr='get', ctx=Load()), args=[Constant(value='Cookie')], keywords=[]))], decorator_list=[]), FunctionDef(name='remove_cookie_by_name', args=arguments(posonlyargs=[], args=[arg(arg='cookiejar'), arg(arg='name'), arg(arg='domain'), arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='Unsets a cookie by name, by default over all domains and paths.\n\n    Wraps CookieJar.clear(), is O(n).\n    ')), Assign(targets=[Name(id='clearables', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='cookie', ctx=Store()), iter=Name(id='cookiejar', ctx=Load()), body=[If(test=Compare(left=Attribute(value=Name(id='cookie', ctx=Load()), attr='name', ctx=Load()), ops=[NotEq()], comparators=[Name(id='name', ctx=Load())]), body=[Continue()], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='domain', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='domain', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='cookie', ctx=Load()), attr='domain', ctx=Load())])]), body=[Continue()], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='path', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='cookie', ctx=Load()), attr='path', ctx=Load())])]), body=[Continue()], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='clearables', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Attribute(value=Name(id='cookie', ctx=Load()), attr='domain', ctx=Load()), Attribute(value=Name(id='cookie', ctx=Load()), attr='path', ctx=Load()), Attribute(value=Name(id='cookie', ctx=Load()), attr='name', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), For(target=Tuple(elts=[Name(id='domain', ctx=Store()), Name(id='path', ctx=Store()), Name(id='name', ctx=Store())], ctx=Store()), iter=Name(id='clearables', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='cookiejar', ctx=Load()), attr='clear', ctx=Load()), args=[Name(id='domain', ctx=Load()), Name(id='path', ctx=Load()), Name(id='name', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), ClassDef(name='CookieConflictError', bases=[Name(id='RuntimeError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='There are two cookies that meet the criteria specified in the cookie jar.\n    Use .get and .set and include domain and path args in order to be more specific.\n    '))], decorator_list=[]), ClassDef(name='RequestsCookieJar', bases=[Attribute(value=Name(id='cookielib', ctx=Load()), attr='CookieJar', ctx=Load()), Name(id='MutableMapping', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="Compatibility class; is a cookielib.CookieJar, but exposes a dict\n    interface.\n\n    This is the CookieJar we create by default for requests and sessions that\n    don't specify one, since some clients may expect response.cookies and\n    session.cookies to support dict operations.\n\n    Requests does not use the dict interface internally; it's just for\n    compatibility with external client code. All requests code should work\n    out of the box with externally provided instances of ``CookieJar``, e.g.\n    ``LWPCookieJar`` and ``FileCookieJar``.\n\n    Unlike a regular CookieJar, this class is pickleable.\n\n    .. warning:: dictionary operations that are normally O(1) may be O(n).\n    ")), FunctionDef(name='get', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name'), arg(arg='default'), arg(arg='domain'), arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='Dict-like get() that also supports optional domain and path args in\n        order to resolve naming collisions from using one cookie jar over\n        multiple domains.\n\n        .. warning:: operation is O(n), not O(1).\n        ')), Try(body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_find_no_duplicates', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='domain', ctx=Load()), Name(id='path', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Return(value=Name(id='default', ctx=Load()))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='set', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Constant(value='Dict-like set() that also supports optional domain and path args in\n        order to resolve naming collisions from using one cookie jar over\n        multiple domains.\n        ')), If(test=Compare(left=Name(id='value', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Name(id='remove_cookie_by_name', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='name', ctx=Load())], keywords=[keyword(arg='domain', value=Call(func=Attribute(value=Name(id='kwargs', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='domain')], keywords=[])), keyword(arg='path', value=Call(func=Attribute(value=Name(id='kwargs', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='path')], keywords=[]))])), Return()], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='Morsel', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='c', ctx=Store())], value=Call(func=Name(id='morsel_to_cookie', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='c', ctx=Store())], value=Call(func=Name(id='create_cookie', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='value', ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_cookie', ctx=Load()), args=[Name(id='c', ctx=Load())], keywords=[])), Return(value=Name(id='c', ctx=Load()))], decorator_list=[]), FunctionDef(name='iterkeys', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Dict-like iterkeys() that returns an iterator of names of cookies\n        from the jar.\n\n        .. seealso:: itervalues() and iteritems().\n        ')), For(target=Name(id='cookie', ctx=Store()), iter=Call(func=Name(id='iter', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), body=[Expr(value=Yield(value=Attribute(value=Name(id='cookie', ctx=Load()), attr='name', ctx=Load())))], orelse=[])], decorator_list=[]), FunctionDef(name='keys', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Dict-like keys() that returns a list of names of cookies from the\n        jar.\n\n        .. seealso:: values() and items().\n        ')), Return(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='iterkeys', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='itervalues', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Dict-like itervalues() that returns an iterator of values of cookies\n        from the jar.\n\n        .. seealso:: iterkeys() and iteritems().\n        ')), For(target=Name(id='cookie', ctx=Store()), iter=Call(func=Name(id='iter', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), body=[Expr(value=Yield(value=Attribute(value=Name(id='cookie', ctx=Load()), attr='value', ctx=Load())))], orelse=[])], decorator_list=[]), FunctionDef(name='values', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Dict-like values() that returns a list of values of cookies from the\n        jar.\n\n        .. seealso:: keys() and items().\n        ')), Return(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='itervalues', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='iteritems', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Dict-like iteritems() that returns an iterator of name-value tuples\n        from the jar.\n\n        .. seealso:: iterkeys() and itervalues().\n        ')), For(target=Name(id='cookie', ctx=Store()), iter=Call(func=Name(id='iter', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), body=[Expr(value=Yield(value=Tuple(elts=[Attribute(value=Name(id='cookie', ctx=Load()), attr='name', ctx=Load()), Attribute(value=Name(id='cookie', ctx=Load()), attr='value', ctx=Load())], ctx=Load())))], orelse=[])], decorator_list=[]), FunctionDef(name='items', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Dict-like items() that returns a list of name-value tuples from the\n        jar. Allows client-code to call ``dict(RequestsCookieJar)`` and get a\n        vanilla python dict of key value pairs.\n\n        .. seealso:: keys() and values().\n        ')), Return(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='iteritems', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='list_domains', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Utility method to list all the domains in the jar.')), Assign(targets=[Name(id='domains', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='cookie', ctx=Store()), iter=Call(func=Name(id='iter', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Attribute(value=Name(id='cookie', ctx=Load()), attr='domain', ctx=Load()), ops=[NotIn()], comparators=[Name(id='domains', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='domains', ctx=Load()), attr='append', ctx=Load()), args=[Attribute(value=Name(id='cookie', ctx=Load()), attr='domain', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='domains', ctx=Load()))], decorator_list=[]), FunctionDef(name='list_paths', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Utility method to list all the paths in the jar.')), Assign(targets=[Name(id='paths', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='cookie', ctx=Store()), iter=Call(func=Name(id='iter', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Attribute(value=Name(id='cookie', ctx=Load()), attr='path', ctx=Load()), ops=[NotIn()], comparators=[Name(id='paths', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='paths', ctx=Load()), attr='append', ctx=Load()), args=[Attribute(value=Name(id='cookie', ctx=Load()), attr='path', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='paths', ctx=Load()))], decorator_list=[]), FunctionDef(name='multiple_domains', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Returns True if there are multiple domains in the jar.\n        Returns False otherwise.\n\n        :rtype: bool\n        ')), Assign(targets=[Name(id='domains', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='cookie', ctx=Store()), iter=Call(func=Name(id='iter', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='cookie', ctx=Load()), attr='domain', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='cookie', ctx=Load()), attr='domain', ctx=Load()), ops=[In()], comparators=[Name(id='domains', ctx=Load())])]), body=[Return(value=Constant(value=True))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='domains', ctx=Load()), attr='append', ctx=Load()), args=[Attribute(value=Name(id='cookie', ctx=Load()), attr='domain', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Constant(value=False))], decorator_list=[]), FunctionDef(name='get_dict', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='domain'), arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='Takes as an argument an optional domain and path and returns a plain\n        old Python dict of name-value pairs of cookies that meet the\n        requirements.\n\n        :rtype: dict\n        ')), Assign(targets=[Name(id='dictionary', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='cookie', ctx=Store()), iter=Call(func=Name(id='iter', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), body=[If(test=BoolOp(op=And(), values=[BoolOp(op=Or(), values=[Compare(left=Name(id='domain', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='cookie', ctx=Load()), attr='domain', ctx=Load()), ops=[Eq()], comparators=[Name(id='domain', ctx=Load())])]), BoolOp(op=Or(), values=[Compare(left=Name(id='path', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='cookie', ctx=Load()), attr='path', ctx=Load()), ops=[Eq()], comparators=[Name(id='path', ctx=Load())])])]), body=[Assign(targets=[Subscript(value=Name(id='dictionary', ctx=Load()), slice=Attribute(value=Name(id='cookie', ctx=Load()), attr='name', ctx=Load()), ctx=Store())], value=Attribute(value=Name(id='cookie', ctx=Load()), attr='value', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Name(id='dictionary', ctx=Load()))], decorator_list=[]), FunctionDef(name='__contains__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__contains__', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='CookieConflictError', ctx=Load()), body=[Return(value=Constant(value=True))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='__getitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Dict-like __getitem__() for compatibility with client code. Throws\n        exception if there are more than one cookie with name. In that case,\n        use the more explicit get() method instead.\n\n        .. warning:: operation is O(n), not O(1).\n        ')), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_find_no_duplicates', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='__setitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Dict-like __setitem__ for compatibility with client code. Throws\n        exception if there is already a cookie of that name in the jar. In that\n        case, use the more explicit set() method instead.\n        ')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='__delitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Deletes a cookie given a name. Wraps ``cookielib.CookieJar``'s\n        ``remove_cookie_by_name()``.\n        ")), Expr(value=Call(func=Name(id='remove_cookie_by_name', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='name', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='set_cookie', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='cookie')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[If(test=BoolOp(op=And(), values=[Call(func=Name(id='hasattr', ctx=Load()), args=[Attribute(value=Name(id='cookie', ctx=Load()), attr='value', ctx=Load()), Constant(value='startswith')], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='cookie', ctx=Load()), attr='value', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='"')], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='cookie', ctx=Load()), attr='value', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='"')], keywords=[])]), body=[Assign(targets=[Attribute(value=Name(id='cookie', ctx=Load()), attr='value', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='cookie', ctx=Load()), attr='value', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='\\"'), Constant(value='')], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='set_cookie', ctx=Load()), args=[Name(id='cookie', ctx=Load()), Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='update', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Updates this jar with cookies from another CookieJar or dict-like')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='other', ctx=Load()), Attribute(value=Name(id='cookielib', ctx=Load()), attr='CookieJar', ctx=Load())], keywords=[]), body=[For(target=Name(id='cookie', ctx=Store()), iter=Name(id='other', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='set_cookie', ctx=Load()), args=[Call(func=Attribute(value=Name(id='copy', ctx=Load()), attr='copy', ctx=Load()), args=[Name(id='cookie', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], orelse=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='update', ctx=Load()), args=[Name(id='other', ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='_find', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name'), arg(arg='domain'), arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='Requests uses this method internally to get cookie values.\n\n        If there are conflicting cookies, _find arbitrarily chooses one.\n        See _find_no_duplicates if you want an exception thrown if there are\n        conflicting cookies.\n\n        :param name: a string containing name of cookie\n        :param domain: (optional) string containing domain of cookie\n        :param path: (optional) string containing path of cookie\n        :return: cookie.value\n        ')), For(target=Name(id='cookie', ctx=Store()), iter=Call(func=Name(id='iter', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Attribute(value=Name(id='cookie', ctx=Load()), attr='name', ctx=Load()), ops=[Eq()], comparators=[Name(id='name', ctx=Load())]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='domain', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='cookie', ctx=Load()), attr='domain', ctx=Load()), ops=[Eq()], comparators=[Name(id='domain', ctx=Load())])]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='path', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='cookie', ctx=Load()), attr='path', ctx=Load()), ops=[Eq()], comparators=[Name(id='path', ctx=Load())])]), body=[Return(value=Attribute(value=Name(id='cookie', ctx=Load()), attr='value', ctx=Load()))], orelse=[])], orelse=[])], orelse=[])], orelse=[]), Raise(exc=Call(func=Name(id='KeyError', ctx=Load()), args=[JoinedStr(values=[Constant(value='name='), FormattedValue(value=Name(id='name', ctx=Load()), conversion=114), Constant(value=', domain='), FormattedValue(value=Name(id='domain', ctx=Load()), conversion=114), Constant(value=', path='), FormattedValue(value=Name(id='path', ctx=Load()), conversion=114)])], keywords=[]))], decorator_list=[]), FunctionDef(name='_find_no_duplicates', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name'), arg(arg='domain'), arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value="Both ``__get_item__`` and ``get`` call this function: it's never\n        used elsewhere in Requests.\n\n        :param name: a string containing name of cookie\n        :param domain: (optional) string containing domain of cookie\n        :param path: (optional) string containing path of cookie\n        :raises KeyError: if cookie is not found\n        :raises CookieConflictError: if there are multiple cookies\n            that match name and optionally domain and path\n        :return: cookie.value\n        ")), Assign(targets=[Name(id='toReturn', ctx=Store())], value=Constant(value=None)), For(target=Name(id='cookie', ctx=Store()), iter=Call(func=Name(id='iter', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Attribute(value=Name(id='cookie', ctx=Load()), attr='name', ctx=Load()), ops=[Eq()], comparators=[Name(id='name', ctx=Load())]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='domain', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='cookie', ctx=Load()), attr='domain', ctx=Load()), ops=[Eq()], comparators=[Name(id='domain', ctx=Load())])]), body=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='path', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='cookie', ctx=Load()), attr='path', ctx=Load()), ops=[Eq()], comparators=[Name(id='path', ctx=Load())])]), body=[If(test=Compare(left=Name(id='toReturn', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='CookieConflictError', ctx=Load()), args=[JoinedStr(values=[Constant(value='There are multiple cookies with name, '), FormattedValue(value=Name(id='name', ctx=Load()), conversion=114)])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='toReturn', ctx=Store())], value=Attribute(value=Name(id='cookie', ctx=Load()), attr='value', ctx=Load()))], orelse=[])], orelse=[])], orelse=[])], orelse=[]), If(test=Name(id='toReturn', ctx=Load()), body=[Return(value=Name(id='toReturn', ctx=Load()))], orelse=[]), Raise(exc=Call(func=Name(id='KeyError', ctx=Load()), args=[JoinedStr(values=[Constant(value='name='), FormattedValue(value=Name(id='name', ctx=Load()), conversion=114), Constant(value=', domain='), FormattedValue(value=Name(id='domain', ctx=Load()), conversion=114), Constant(value=', path='), FormattedValue(value=Name(id='path', ctx=Load()), conversion=114)])], keywords=[]))], decorator_list=[]), FunctionDef(name='__getstate__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Unlike a normal CookieJar, this class is pickleable.')), Assign(targets=[Name(id='state', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__dict__', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='state', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='_cookies_lock')], keywords=[])), Return(value=Name(id='state', ctx=Load()))], decorator_list=[]), FunctionDef(name='__setstate__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='state')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Unlike a normal CookieJar, this class is pickleable.')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__dict__', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='state', ctx=Load())], keywords=[])), If(test=Compare(left=Constant(value='_cookies_lock'), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='__dict__', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_cookies_lock', ctx=Store())], value=Call(func=Attribute(value=Name(id='threading', ctx=Load()), attr='RLock', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='copy', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return a copy of this RequestsCookieJar.')), Assign(targets=[Name(id='new_cj', ctx=Store())], value=Call(func=Name(id='RequestsCookieJar', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='new_cj', ctx=Load()), attr='set_policy', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_policy', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='new_cj', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), Return(value=Name(id='new_cj', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_policy', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the CookiePolicy instance used.')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_policy', ctx=Load()))], decorator_list=[])], decorator_list=[]), FunctionDef(name='_copy_cookie_jar', args=arguments(posonlyargs=[], args=[arg(arg='jar')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='jar', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=None))], orelse=[]), If(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='jar', ctx=Load()), Constant(value='copy')], keywords=[]), body=[Return(value=Call(func=Attribute(value=Name(id='jar', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='new_jar', ctx=Store())], value=Call(func=Attribute(value=Name(id='copy', ctx=Load()), attr='copy', ctx=Load()), args=[Name(id='jar', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='new_jar', ctx=Load()), attr='clear', ctx=Load()), args=[], keywords=[])), For(target=Name(id='cookie', ctx=Store()), iter=Name(id='jar', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='new_jar', ctx=Load()), attr='set_cookie', ctx=Load()), args=[Call(func=Attribute(value=Name(id='copy', ctx=Load()), attr='copy', ctx=Load()), args=[Name(id='cookie', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Return(value=Name(id='new_jar', ctx=Load()))], decorator_list=[]), FunctionDef(name='create_cookie', args=arguments(posonlyargs=[], args=[arg(arg='name'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Constant(value='Make a cookie from underspecified parameters.\n\n    By default, the pair of `name` and `value` will be set for the domain \'\'\n    and sent on every request (this is sometimes called a "supercookie").\n    ')), Assign(targets=[Name(id='result', ctx=Store())], value=Dict(keys=[Constant(value='version'), Constant(value='name'), Constant(value='value'), Constant(value='port'), Constant(value='domain'), Constant(value='path'), Constant(value='secure'), Constant(value='expires'), Constant(value='discard'), Constant(value='comment'), Constant(value='comment_url'), Constant(value='rest'), Constant(value='rfc2109')], values=[Constant(value=0), Name(id='name', ctx=Load()), Name(id='value', ctx=Load()), Constant(value=None), Constant(value=''), Constant(value='/'), Constant(value=False), Constant(value=None), Constant(value=True), Constant(value=None), Constant(value=None), Dict(keys=[Constant(value='HttpOnly')], values=[Constant(value=None)]), Constant(value=False)])), Assign(targets=[Name(id='badargs', ctx=Store())], value=BinOp(left=Call(func=Name(id='set', ctx=Load()), args=[Name(id='kwargs', ctx=Load())], keywords=[]), op=Sub(), right=Call(func=Name(id='set', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[]))), If(test=Name(id='badargs', ctx=Load()), body=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[JoinedStr(values=[Constant(value='create_cookie() got unexpected keyword arguments: '), FormattedValue(value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='badargs', ctx=Load())], keywords=[]), conversion=-1)])], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='kwargs', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='port_specified'), ctx=Store())], value=Call(func=Name(id='bool', ctx=Load()), args=[Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='port'), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='domain_specified'), ctx=Store())], value=Call(func=Name(id='bool', ctx=Load()), args=[Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='domain'), ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='domain_initial_dot'), ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='domain'), ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='.')], keywords=[])), Assign(targets=[Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='path_specified'), ctx=Store())], value=Call(func=Name(id='bool', ctx=Load()), args=[Subscript(value=Name(id='result', ctx=Load()), slice=Constant(value='path'), ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='cookielib', ctx=Load()), attr='Cookie', ctx=Load()), args=[], keywords=[keyword(value=Name(id='result', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='morsel_to_cookie', args=arguments(posonlyargs=[], args=[arg(arg='morsel')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Convert a Morsel object into a Cookie containing the one k/v pair.')), Assign(targets=[Name(id='expires', ctx=Store())], value=Constant(value=None)), If(test=Subscript(value=Name(id='morsel', ctx=Load()), slice=Constant(value='max-age'), ctx=Load()), body=[Try(body=[Assign(targets=[Name(id='expires', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[BinOp(left=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='time', ctx=Load()), args=[], keywords=[]), op=Add(), right=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='morsel', ctx=Load()), slice=Constant(value='max-age'), ctx=Load())], keywords=[]))], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='TypeError', ctx=Load()), args=[JoinedStr(values=[Constant(value='max-age: '), FormattedValue(value=Subscript(value=Name(id='morsel', ctx=Load()), slice=Constant(value='max-age'), ctx=Load()), conversion=-1), Constant(value=' must be integer')])], keywords=[]))])], orelse=[], finalbody=[])], orelse=[If(test=Subscript(value=Name(id='morsel', ctx=Load()), slice=Constant(value='expires'), ctx=Load()), body=[Assign(targets=[Name(id='time_template', ctx=Store())], value=Constant(value='%a, %d-%b-%Y %H:%M:%S GMT')), Assign(targets=[Name(id='expires', ctx=Store())], value=Call(func=Attribute(value=Name(id='calendar', ctx=Load()), attr='timegm', ctx=Load()), args=[Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='strptime', ctx=Load()), args=[Subscript(value=Name(id='morsel', ctx=Load()), slice=Constant(value='expires'), ctx=Load()), Name(id='time_template', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])]), Return(value=Call(func=Name(id='create_cookie', ctx=Load()), args=[], keywords=[keyword(arg='comment', value=Subscript(value=Name(id='morsel', ctx=Load()), slice=Constant(value='comment'), ctx=Load())), keyword(arg='comment_url', value=Call(func=Name(id='bool', ctx=Load()), args=[Subscript(value=Name(id='morsel', ctx=Load()), slice=Constant(value='comment'), ctx=Load())], keywords=[])), keyword(arg='discard', value=Constant(value=False)), keyword(arg='domain', value=Subscript(value=Name(id='morsel', ctx=Load()), slice=Constant(value='domain'), ctx=Load())), keyword(arg='expires', value=Name(id='expires', ctx=Load())), keyword(arg='name', value=Attribute(value=Name(id='morsel', ctx=Load()), attr='key', ctx=Load())), keyword(arg='path', value=Subscript(value=Name(id='morsel', ctx=Load()), slice=Constant(value='path'), ctx=Load())), keyword(arg='port', value=Constant(value=None)), keyword(arg='rest', value=Dict(keys=[Constant(value='HttpOnly')], values=[Subscript(value=Name(id='morsel', ctx=Load()), slice=Constant(value='httponly'), ctx=Load())])), keyword(arg='rfc2109', value=Constant(value=False)), keyword(arg='secure', value=Call(func=Name(id='bool', ctx=Load()), args=[Subscript(value=Name(id='morsel', ctx=Load()), slice=Constant(value='secure'), ctx=Load())], keywords=[])), keyword(arg='value', value=Attribute(value=Name(id='morsel', ctx=Load()), attr='value', ctx=Load())), keyword(arg='version', value=BoolOp(op=Or(), values=[Subscript(value=Name(id='morsel', ctx=Load()), slice=Constant(value='version'), ctx=Load()), Constant(value=0)]))]))], decorator_list=[]), FunctionDef(name='cookiejar_from_dict', args=arguments(posonlyargs=[], args=[arg(arg='cookie_dict'), arg(arg='cookiejar'), arg(arg='overwrite')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=True)]), body=[Expr(value=Constant(value='Returns a CookieJar from a key/value dictionary.\n\n    :param cookie_dict: Dict of key/values to insert into CookieJar.\n    :param cookiejar: (optional) A cookiejar to add the cookies to.\n    :param overwrite: (optional) If False, will not replace cookies\n        already in the jar with new ones.\n    :rtype: CookieJar\n    ')), If(test=Compare(left=Name(id='cookiejar', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='cookiejar', ctx=Store())], value=Call(func=Name(id='RequestsCookieJar', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='cookie_dict', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='names_from_jar', ctx=Store())], value=ListComp(elt=Attribute(value=Name(id='cookie', ctx=Load()), attr='name', ctx=Load()), generators=[comprehension(target=Name(id='cookie', ctx=Store()), iter=Name(id='cookiejar', ctx=Load()), ifs=[], is_async=0)])), For(target=Name(id='name', ctx=Store()), iter=Name(id='cookie_dict', ctx=Load()), body=[If(test=BoolOp(op=Or(), values=[Name(id='overwrite', ctx=Load()), Compare(left=Name(id='name', ctx=Load()), ops=[NotIn()], comparators=[Name(id='names_from_jar', ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Name(id='cookiejar', ctx=Load()), attr='set_cookie', ctx=Load()), args=[Call(func=Name(id='create_cookie', ctx=Load()), args=[Name(id='name', ctx=Load()), Subscript(value=Name(id='cookie_dict', ctx=Load()), slice=Name(id='name', ctx=Load()), ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], orelse=[])], orelse=[]), Return(value=Name(id='cookiejar', ctx=Load()))], decorator_list=[]), FunctionDef(name='merge_cookies', args=arguments(posonlyargs=[], args=[arg(arg='cookiejar'), arg(arg='cookies')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Add cookies to cookiejar and returns a merged CookieJar.\n\n    :param cookiejar: CookieJar object to add the cookies to.\n    :param cookies: Dictionary or CookieJar object to be added.\n    :rtype: CookieJar\n    ')), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='cookiejar', ctx=Load()), Attribute(value=Name(id='cookielib', ctx=Load()), attr='CookieJar', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='You can only merge into CookieJar')], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='cookies', ctx=Load()), Name(id='dict', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='cookiejar', ctx=Store())], value=Call(func=Name(id='cookiejar_from_dict', ctx=Load()), args=[Name(id='cookies', ctx=Load())], keywords=[keyword(arg='cookiejar', value=Name(id='cookiejar', ctx=Load())), keyword(arg='overwrite', value=Constant(value=False))]))], orelse=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='cookies', ctx=Load()), Attribute(value=Name(id='cookielib', ctx=Load()), attr='CookieJar', ctx=Load())], keywords=[]), body=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='cookiejar', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='cookies', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[For(target=Name(id='cookie_in_jar', ctx=Store()), iter=Name(id='cookies', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='cookiejar', ctx=Load()), attr='set_cookie', ctx=Load()), args=[Name(id='cookie_in_jar', ctx=Load())], keywords=[]))], orelse=[])])], orelse=[], finalbody=[])], orelse=[])]), Return(value=Name(id='cookiejar', ctx=Load()))], decorator_list=[])], type_ignores=[])