Module(body=[Import(names=[alias(name='json')]), Import(names=[alias(name='os')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='tempfile')]), ImportFrom(module='contextlib', names=[alias(name='contextmanager')], level=0), ImportFrom(module='os.path', names=[alias(name='abspath')], level=0), ImportFrom(module='os.path', names=[alias(name='join', asname='pjoin')], level=0), ImportFrom(module='subprocess', names=[alias(name='STDOUT'), alias(name='check_call'), alias(name='check_output')], level=0), ImportFrom(module='_in_process', names=[alias(name='_in_proc_script_path')], level=1), FunctionDef(name='write_json', args=arguments(posonlyargs=[], args=[arg(arg='obj'), arg(arg='path')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='path', ctx=Load()), Constant(value='w')], keywords=[keyword(arg='encoding', value=Constant(value='utf-8'))]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[Name(id='obj', ctx=Load()), Name(id='f', ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))])], decorator_list=[]), FunctionDef(name='read_json', args=arguments(posonlyargs=[], args=[arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[keyword(arg='encoding', value=Constant(value='utf-8'))]), optional_vars=Name(id='f', ctx=Store()))], body=[Return(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))])], decorator_list=[]), ClassDef(name='BackendUnavailable', bases=[Name(id='Exception', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Will be raised if the backend cannot be imported in the hook process.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='traceback')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='traceback', ctx=Store())], value=Name(id='traceback', ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='BackendInvalid', bases=[Name(id='Exception', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Will be raised if the backend is invalid.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='backend_name'), arg(arg='backend_path'), arg(arg='message')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Name(id='message', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='backend_name', ctx=Store())], value=Name(id='backend_name', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='backend_path', ctx=Store())], value=Name(id='backend_path', ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='HookMissing', bases=[Name(id='Exception', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="Will be raised on missing hooks (if a fallback can't be used).")), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='hook_name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Name(id='hook_name', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='hook_name', ctx=Store())], value=Name(id='hook_name', ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='UnsupportedOperation', bases=[Name(id='Exception', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="May be raised by build_sdist if the backend indicates that it can't.")), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='traceback')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='traceback', ctx=Store())], value=Name(id='traceback', ctx=Load()))], decorator_list=[])], decorator_list=[]), FunctionDef(name='default_subprocess_runner', args=arguments(posonlyargs=[], args=[arg(arg='cmd'), arg(arg='cwd'), arg(arg='extra_environ')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='The default method of calling the wrapper subprocess.\n\n    This uses :func:`subprocess.check_call` under the hood.\n    ')), Assign(targets=[Name(id='env', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), If(test=Name(id='extra_environ', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='env', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='extra_environ', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Name(id='check_call', ctx=Load()), args=[Name(id='cmd', ctx=Load())], keywords=[keyword(arg='cwd', value=Name(id='cwd', ctx=Load())), keyword(arg='env', value=Name(id='env', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='quiet_subprocess_runner', args=arguments(posonlyargs=[], args=[arg(arg='cmd'), arg(arg='cwd'), arg(arg='extra_environ')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='Call the subprocess while suppressing output.\n\n    This uses :func:`subprocess.check_output` under the hood.\n    ')), Assign(targets=[Name(id='env', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), If(test=Name(id='extra_environ', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='env', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='extra_environ', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Name(id='check_output', ctx=Load()), args=[Name(id='cmd', ctx=Load())], keywords=[keyword(arg='cwd', value=Name(id='cwd', ctx=Load())), keyword(arg='env', value=Name(id='env', ctx=Load())), keyword(arg='stderr', value=Name(id='STDOUT', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='norm_and_check', args=arguments(posonlyargs=[], args=[arg(arg='source_tree'), arg(arg='requested')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Normalise and check a backend path.\n\n    Ensure that the requested backend path is specified as a relative path,\n    and resolves to a location under the given source tree.\n\n    Return an absolute version of the requested path.\n    ')), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isabs', ctx=Load()), args=[Name(id='requested', ctx=Load())], keywords=[]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='paths must be relative')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='abs_source', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Name(id='source_tree', ctx=Load())], keywords=[])), Assign(targets=[Name(id='abs_requested', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normpath', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='abs_source', ctx=Load()), Name(id='requested', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='norm_source', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normcase', ctx=Load()), args=[Name(id='abs_source', ctx=Load())], keywords=[])), Assign(targets=[Name(id='norm_requested', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normcase', ctx=Load()), args=[Name(id='abs_requested', ctx=Load())], keywords=[])), If(test=Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='commonprefix', ctx=Load()), args=[List(elts=[Name(id='norm_source', ctx=Load()), Name(id='norm_requested', ctx=Load())], ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Name(id='norm_source', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='paths must be inside source tree')], keywords=[]))], orelse=[]), Return(value=Name(id='abs_requested', ctx=Load()))], decorator_list=[]), ClassDef(name='BuildBackendHookCaller', bases=[], keywords=[], body=[Expr(value=Constant(value='A wrapper to call the build backend hooks for a source directory.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='source_dir'), arg(arg='build_backend'), arg(arg='backend_path'), arg(arg='runner'), arg(arg='python_executable')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='\n        :param source_dir: The source directory to invoke the build backend for\n        :param build_backend: The build backend spec\n        :param backend_path: Additional path entries for the build backend spec\n        :param runner: The :ref:`subprocess runner <Subprocess Runners>` to use\n        :param python_executable:\n            The Python executable used to invoke the build backend\n        ')), If(test=Compare(left=Name(id='runner', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='runner', ctx=Store())], value=Name(id='default_subprocess_runner', ctx=Load()))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='source_dir', ctx=Store())], value=Call(func=Name(id='abspath', ctx=Load()), args=[Name(id='source_dir', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='build_backend', ctx=Store())], value=Name(id='build_backend', ctx=Load())), If(test=Name(id='backend_path', ctx=Load()), body=[Assign(targets=[Name(id='backend_path', ctx=Store())], value=ListComp(elt=Call(func=Name(id='norm_and_check', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='source_dir', ctx=Load()), Name(id='p', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='p', ctx=Store()), iter=Name(id='backend_path', ctx=Load()), ifs=[], is_async=0)]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='backend_path', ctx=Store())], value=Name(id='backend_path', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_subprocess_runner', ctx=Store())], value=Name(id='runner', ctx=Load())), If(test=UnaryOp(op=Not(), operand=Name(id='python_executable', ctx=Load())), body=[Assign(targets=[Name(id='python_executable', ctx=Store())], value=Attribute(value=Name(id='sys', ctx=Load()), attr='executable', ctx=Load()))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='python_executable', ctx=Store())], value=Name(id='python_executable', ctx=Load()))], decorator_list=[]), FunctionDef(name='subprocess_runner', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='runner')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='A context manager for temporarily overriding the default\n        :ref:`subprocess runner <Subprocess Runners>`.\n\n        .. code-block:: python\n\n            hook_caller = BuildBackendHookCaller(...)\n            with hook_caller.subprocess_runner(quiet_subprocess_runner):\n                ...\n        ')), Assign(targets=[Name(id='prev', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_subprocess_runner', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_subprocess_runner', ctx=Store())], value=Name(id='runner', ctx=Load())), Try(body=[Expr(value=Yield())], handlers=[], orelse=[], finalbody=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_subprocess_runner', ctx=Store())], value=Name(id='prev', ctx=Load()))])], decorator_list=[Name(id='contextmanager', ctx=Load())]), FunctionDef(name='_supported_features', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the list of optional features supported by the backend.')), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_call_hook', ctx=Load()), args=[Constant(value='_supported_features'), Dict(keys=[], values=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='get_requires_for_build_wheel', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='config_settings')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Get additional dependencies required for building a wheel.\n\n        :returns: A list of :pep:`dependency specifiers <508>`.\n        :rtype: list[str]\n\n        .. admonition:: Fallback\n\n            If the build backend does not defined a hook with this name, an\n            empty list will be returned.\n        ')), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_call_hook', ctx=Load()), args=[Constant(value='get_requires_for_build_wheel'), Dict(keys=[Constant(value='config_settings')], values=[Name(id='config_settings', ctx=Load())])], keywords=[]))], decorator_list=[]), FunctionDef(name='prepare_metadata_for_build_wheel', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='metadata_directory'), arg(arg='config_settings'), arg(arg='_allow_fallback')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=True)]), body=[Expr(value=Constant(value='Prepare a ``*.dist-info`` folder with metadata for this project.\n\n        :returns: Name of the newly created subfolder within\n                  ``metadata_directory``, containing the metadata.\n        :rtype: str\n\n        .. admonition:: Fallback\n\n            If the build backend does not define a hook with this name and\n            ``_allow_fallback`` is truthy, the backend will be asked to build a\n            wheel via the ``build_wheel`` hook and the dist-info extracted from\n            that will be returned.\n        ')), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_call_hook', ctx=Load()), args=[Constant(value='prepare_metadata_for_build_wheel'), Dict(keys=[Constant(value='metadata_directory'), Constant(value='config_settings'), Constant(value='_allow_fallback')], values=[Call(func=Name(id='abspath', ctx=Load()), args=[Name(id='metadata_directory', ctx=Load())], keywords=[]), Name(id='config_settings', ctx=Load()), Name(id='_allow_fallback', ctx=Load())])], keywords=[]))], decorator_list=[]), FunctionDef(name='build_wheel', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='wheel_directory'), arg(arg='config_settings'), arg(arg='metadata_directory')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='Build a wheel from this project.\n\n        :returns:\n            The name of the newly created wheel within ``wheel_directory``.\n\n        .. admonition:: Interaction with fallback\n\n            If the ``build_wheel`` hook was called in the fallback for\n            :meth:`prepare_metadata_for_build_wheel`, the build backend would\n            not be invoked. Instead, the previously built wheel will be copied\n            to ``wheel_directory`` and the name of that file will be returned.\n        ')), If(test=Compare(left=Name(id='metadata_directory', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='metadata_directory', ctx=Store())], value=Call(func=Name(id='abspath', ctx=Load()), args=[Name(id='metadata_directory', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_call_hook', ctx=Load()), args=[Constant(value='build_wheel'), Dict(keys=[Constant(value='wheel_directory'), Constant(value='config_settings'), Constant(value='metadata_directory')], values=[Call(func=Name(id='abspath', ctx=Load()), args=[Name(id='wheel_directory', ctx=Load())], keywords=[]), Name(id='config_settings', ctx=Load()), Name(id='metadata_directory', ctx=Load())])], keywords=[]))], decorator_list=[]), FunctionDef(name='get_requires_for_build_editable', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='config_settings')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Get additional dependencies required for building an editable wheel.\n\n        :returns: A list of :pep:`dependency specifiers <508>`.\n        :rtype: list[str]\n\n        .. admonition:: Fallback\n\n            If the build backend does not defined a hook with this name, an\n            empty list will be returned.\n        ')), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_call_hook', ctx=Load()), args=[Constant(value='get_requires_for_build_editable'), Dict(keys=[Constant(value='config_settings')], values=[Name(id='config_settings', ctx=Load())])], keywords=[]))], decorator_list=[]), FunctionDef(name='prepare_metadata_for_build_editable', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='metadata_directory'), arg(arg='config_settings'), arg(arg='_allow_fallback')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=True)]), body=[Expr(value=Constant(value='Prepare a ``*.dist-info`` folder with metadata for this project.\n\n        :returns: Name of the newly created subfolder within\n                  ``metadata_directory``, containing the metadata.\n        :rtype: str\n\n        .. admonition:: Fallback\n\n            If the build backend does not define a hook with this name and\n            ``_allow_fallback`` is truthy, the backend will be asked to build a\n            wheel via the ``build_editable`` hook and the dist-info\n            extracted from that will be returned.\n        ')), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_call_hook', ctx=Load()), args=[Constant(value='prepare_metadata_for_build_editable'), Dict(keys=[Constant(value='metadata_directory'), Constant(value='config_settings'), Constant(value='_allow_fallback')], values=[Call(func=Name(id='abspath', ctx=Load()), args=[Name(id='metadata_directory', ctx=Load())], keywords=[]), Name(id='config_settings', ctx=Load()), Name(id='_allow_fallback', ctx=Load())])], keywords=[]))], decorator_list=[]), FunctionDef(name='build_editable', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='wheel_directory'), arg(arg='config_settings'), arg(arg='metadata_directory')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='Build an editable wheel from this project.\n\n        :returns:\n            The name of the newly created wheel within ``wheel_directory``.\n\n        .. admonition:: Interaction with fallback\n\n            If the ``build_editable`` hook was called in the fallback for\n            :meth:`prepare_metadata_for_build_editable`, the build backend\n            would not be invoked. Instead, the previously built wheel will be\n            copied to ``wheel_directory`` and the name of that file will be\n            returned.\n        ')), If(test=Compare(left=Name(id='metadata_directory', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='metadata_directory', ctx=Store())], value=Call(func=Name(id='abspath', ctx=Load()), args=[Name(id='metadata_directory', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_call_hook', ctx=Load()), args=[Constant(value='build_editable'), Dict(keys=[Constant(value='wheel_directory'), Constant(value='config_settings'), Constant(value='metadata_directory')], values=[Call(func=Name(id='abspath', ctx=Load()), args=[Name(id='wheel_directory', ctx=Load())], keywords=[]), Name(id='config_settings', ctx=Load()), Name(id='metadata_directory', ctx=Load())])], keywords=[]))], decorator_list=[]), FunctionDef(name='get_requires_for_build_sdist', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='config_settings')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Get additional dependencies required for building an sdist.\n\n        :returns: A list of :pep:`dependency specifiers <508>`.\n        :rtype: list[str]\n        ')), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_call_hook', ctx=Load()), args=[Constant(value='get_requires_for_build_sdist'), Dict(keys=[Constant(value='config_settings')], values=[Name(id='config_settings', ctx=Load())])], keywords=[]))], decorator_list=[]), FunctionDef(name='build_sdist', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='sdist_directory'), arg(arg='config_settings')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Build an sdist from this project.\n\n        :returns:\n            The name of the newly created sdist within ``wheel_directory``.\n        ')), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_call_hook', ctx=Load()), args=[Constant(value='build_sdist'), Dict(keys=[Constant(value='sdist_directory'), Constant(value='config_settings')], values=[Call(func=Name(id='abspath', ctx=Load()), args=[Name(id='sdist_directory', ctx=Load())], keywords=[]), Name(id='config_settings', ctx=Load())])], keywords=[]))], decorator_list=[]), FunctionDef(name='_call_hook', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='hook_name'), arg(arg='kwargs')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='extra_environ', ctx=Store())], value=Dict(keys=[Constant(value='PEP517_BUILD_BACKEND')], values=[Attribute(value=Name(id='self', ctx=Load()), attr='build_backend', ctx=Load())])), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='backend_path', ctx=Load()), body=[Assign(targets=[Name(id='backend_path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='pathsep', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='backend_path', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='extra_environ', ctx=Load()), slice=Constant(value='PEP517_BACKEND_PATH'), ctx=Store())], value=Name(id='backend_path', ctx=Load()))], orelse=[]), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='tempfile', ctx=Load()), attr='TemporaryDirectory', ctx=Load()), args=[], keywords=[]), optional_vars=Name(id='td', ctx=Store()))], body=[Assign(targets=[Name(id='hook_input', ctx=Store())], value=Dict(keys=[Constant(value='kwargs')], values=[Name(id='kwargs', ctx=Load())])), Expr(value=Call(func=Name(id='write_json', ctx=Load()), args=[Name(id='hook_input', ctx=Load()), Call(func=Name(id='pjoin', ctx=Load()), args=[Name(id='td', ctx=Load()), Constant(value='input.json')], keywords=[])], keywords=[keyword(arg='indent', value=Constant(value=2))])), With(items=[withitem(context_expr=Call(func=Name(id='_in_proc_script_path', ctx=Load()), args=[], keywords=[]), optional_vars=Name(id='script', ctx=Store()))], body=[Assign(targets=[Name(id='python', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='python_executable', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_subprocess_runner', ctx=Load()), args=[List(elts=[Name(id='python', ctx=Load()), Call(func=Name(id='abspath', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='script', ctx=Load())], keywords=[])], keywords=[]), Name(id='hook_name', ctx=Load()), Name(id='td', ctx=Load())], ctx=Load())], keywords=[keyword(arg='cwd', value=Attribute(value=Name(id='self', ctx=Load()), attr='source_dir', ctx=Load())), keyword(arg='extra_environ', value=Name(id='extra_environ', ctx=Load()))]))]), Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Name(id='read_json', ctx=Load()), args=[Call(func=Name(id='pjoin', ctx=Load()), args=[Name(id='td', ctx=Load()), Constant(value='output.json')], keywords=[])], keywords=[])), If(test=Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='unsupported')], keywords=[]), body=[Raise(exc=Call(func=Name(id='UnsupportedOperation', ctx=Load()), args=[Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='traceback'), Constant(value='')], keywords=[])], keywords=[]))], orelse=[]), If(test=Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='no_backend')], keywords=[]), body=[Raise(exc=Call(func=Name(id='BackendUnavailable', ctx=Load()), args=[Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='traceback'), Constant(value='')], keywords=[])], keywords=[]))], orelse=[]), If(test=Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='backend_invalid')], keywords=[]), body=[Raise(exc=Call(func=Name(id='BackendInvalid', ctx=Load()), args=[], keywords=[keyword(arg='backend_name', value=Attribute(value=Name(id='self', ctx=Load()), attr='build_backend', ctx=Load())), keyword(arg='backend_path', value=Attribute(value=Name(id='self', ctx=Load()), attr='backend_path', ctx=Load())), keyword(arg='message', value=Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='backend_error'), Constant(value='')], keywords=[]))]))], orelse=[]), If(test=Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='hook_missing')], keywords=[]), body=[Raise(exc=Call(func=Name(id='HookMissing', ctx=Load()), args=[BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='missing_hook_name')], keywords=[]), Name(id='hook_name', ctx=Load())])], keywords=[]))], orelse=[]), Return(value=Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='return_val'), ctx=Load()))])], decorator_list=[])], decorator_list=[])], type_ignores=[])