Module(body=[Import(names=[alias(name='logging')]), ImportFrom(module='optparse', names=[alias(name='Values')], level=0), ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='pip._internal.cli.base_command', names=[alias(name='Command')], level=0), ImportFrom(module='pip._internal.cli.status_codes', names=[alias(name='ERROR'), alias(name='SUCCESS')], level=0), ImportFrom(module='pip._internal.operations.check', names=[alias(name='check_package_set'), alias(name='create_package_set_from_installed'), alias(name='warn_legacy_versions_and_specifiers')], level=0), ImportFrom(module='pip._internal.utils.misc', names=[alias(name='write_output')], level=0), Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), ClassDef(name='CheckCommand', bases=[Name(id='Command', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Verify installed packages have compatible dependencies.')), Assign(targets=[Name(id='usage', ctx=Store())], value=Constant(value='\n      %prog [options]')), FunctionDef(name='run', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='options', annotation=Name(id='Values', ctx=Load())), arg(arg='args', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='package_set', ctx=Store()), Name(id='parsing_probs', ctx=Store())], ctx=Store())], value=Call(func=Name(id='create_package_set_from_installed', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Name(id='warn_legacy_versions_and_specifiers', ctx=Load()), args=[Name(id='package_set', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='missing', ctx=Store()), Name(id='conflicting', ctx=Store())], ctx=Store())], value=Call(func=Name(id='check_package_set', ctx=Load()), args=[Name(id='package_set', ctx=Load())], keywords=[])), For(target=Name(id='project_name', ctx=Store()), iter=Name(id='missing', ctx=Load()), body=[Assign(targets=[Name(id='version', ctx=Store())], value=Attribute(value=Subscript(value=Name(id='package_set', ctx=Load()), slice=Name(id='project_name', ctx=Load()), ctx=Load()), attr='version', ctx=Load())), For(target=Name(id='dependency', ctx=Store()), iter=Subscript(value=Name(id='missing', ctx=Load()), slice=Name(id='project_name', ctx=Load()), ctx=Load()), body=[Expr(value=Call(func=Name(id='write_output', ctx=Load()), args=[Constant(value='%s %s requires %s, which is not installed.'), Name(id='project_name', ctx=Load()), Name(id='version', ctx=Load()), Subscript(value=Name(id='dependency', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), For(target=Name(id='project_name', ctx=Store()), iter=Name(id='conflicting', ctx=Load()), body=[Assign(targets=[Name(id='version', ctx=Store())], value=Attribute(value=Subscript(value=Name(id='package_set', ctx=Load()), slice=Name(id='project_name', ctx=Load()), ctx=Load()), attr='version', ctx=Load())), For(target=Tuple(elts=[Name(id='dep_name', ctx=Store()), Name(id='dep_version', ctx=Store()), Name(id='req', ctx=Store())], ctx=Store()), iter=Subscript(value=Name(id='conflicting', ctx=Load()), slice=Name(id='project_name', ctx=Load()), ctx=Load()), body=[Expr(value=Call(func=Name(id='write_output', ctx=Load()), args=[Constant(value='%s %s has requirement %s, but you have %s %s.'), Name(id='project_name', ctx=Load()), Name(id='version', ctx=Load()), Name(id='req', ctx=Load()), Name(id='dep_name', ctx=Load()), Name(id='dep_version', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), If(test=BoolOp(op=Or(), values=[Name(id='missing', ctx=Load()), Name(id='conflicting', ctx=Load()), Name(id='parsing_probs', ctx=Load())]), body=[Return(value=Name(id='ERROR', ctx=Load()))], orelse=[Expr(value=Call(func=Name(id='write_output', ctx=Load()), args=[Constant(value='No broken requirements found.')], keywords=[])), Return(value=Name(id='SUCCESS', ctx=Load()))])], decorator_list=[], returns=Name(id='int', ctx=Load()))], decorator_list=[])], type_ignores=[])