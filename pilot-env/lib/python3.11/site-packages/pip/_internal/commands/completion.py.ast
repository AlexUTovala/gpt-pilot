Module(body=[Import(names=[alias(name='sys')]), Import(names=[alias(name='textwrap')]), ImportFrom(module='optparse', names=[alias(name='Values')], level=0), ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='pip._internal.cli.base_command', names=[alias(name='Command')], level=0), ImportFrom(module='pip._internal.cli.status_codes', names=[alias(name='SUCCESS')], level=0), ImportFrom(module='pip._internal.utils.misc', names=[alias(name='get_prog')], level=0), Assign(targets=[Name(id='BASE_COMPLETION', ctx=Store())], value=Constant(value='\n# pip {shell} completion start{script}# pip {shell} completion end\n')), Assign(targets=[Name(id='COMPLETION_SCRIPTS', ctx=Store())], value=Dict(keys=[Constant(value='bash'), Constant(value='zsh'), Constant(value='fish'), Constant(value='powershell')], values=[Constant(value='\n        _pip_completion()\n        {{\n            COMPREPLY=( $( COMP_WORDS="${{COMP_WORDS[*]}}" \\\n                           COMP_CWORD=$COMP_CWORD \\\n                           PIP_AUTO_COMPLETE=1 $1 2>/dev/null ) )\n        }}\n        complete -o default -F _pip_completion {prog}\n    '), Constant(value='\n        #compdef -P pip[0-9.]#\n        __pip() {{\n          compadd $( COMP_WORDS="$words[*]" \\\n                     COMP_CWORD=$((CURRENT-1)) \\\n                     PIP_AUTO_COMPLETE=1 $words[1] 2>/dev/null )\n        }}\n        if [[ $zsh_eval_context[-1] == loadautofunc ]]; then\n          # autoload from fpath, call function directly\n          __pip "$@"\n        else\n          # eval/source/. command, register function for later\n          compdef __pip -P \'pip[0-9.]#\'\n        fi\n    '), Constant(value='\n        function __fish_complete_pip\n            set -lx COMP_WORDS (commandline -o) ""\n            set -lx COMP_CWORD ( \\\n                math (contains -i -- (commandline -t) $COMP_WORDS)-1 \\\n            )\n            set -lx PIP_AUTO_COMPLETE 1\n            string split \\  -- (eval $COMP_WORDS[1])\n        end\n        complete -fa "(__fish_complete_pip)" -c {prog}\n    '), Constant(value='\n        if ((Test-Path Function:\\TabExpansion) -and -not `\n            (Test-Path Function:\\_pip_completeBackup)) {{\n            Rename-Item Function:\\TabExpansion _pip_completeBackup\n        }}\n        function TabExpansion($line, $lastWord) {{\n            $lastBlock = [regex]::Split($line, \'[|;]\')[-1].TrimStart()\n            if ($lastBlock.StartsWith("{prog} ")) {{\n                $Env:COMP_WORDS=$lastBlock\n                $Env:COMP_CWORD=$lastBlock.Split().Length - 1\n                $Env:PIP_AUTO_COMPLETE=1\n                (& {prog}).Split()\n                Remove-Item Env:COMP_WORDS\n                Remove-Item Env:COMP_CWORD\n                Remove-Item Env:PIP_AUTO_COMPLETE\n            }}\n            elseif (Test-Path Function:\\_pip_completeBackup) {{\n                # Fall back on existing tab expansion\n                _pip_completeBackup $line $lastWord\n            }}\n        }}\n    ')])), ClassDef(name='CompletionCommand', bases=[Name(id='Command', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A helper command to be used for command completion.')), Assign(targets=[Name(id='ignore_require_venv', ctx=Store())], value=Constant(value=True)), FunctionDef(name='add_options', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load()), attr='add_option', ctx=Load()), args=[Constant(value='--bash'), Constant(value='-b')], keywords=[keyword(arg='action', value=Constant(value='store_const')), keyword(arg='const', value=Constant(value='bash')), keyword(arg='dest', value=Constant(value='shell')), keyword(arg='help', value=Constant(value='Emit completion code for bash'))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load()), attr='add_option', ctx=Load()), args=[Constant(value='--zsh'), Constant(value='-z')], keywords=[keyword(arg='action', value=Constant(value='store_const')), keyword(arg='const', value=Constant(value='zsh')), keyword(arg='dest', value=Constant(value='shell')), keyword(arg='help', value=Constant(value='Emit completion code for zsh'))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load()), attr='add_option', ctx=Load()), args=[Constant(value='--fish'), Constant(value='-f')], keywords=[keyword(arg='action', value=Constant(value='store_const')), keyword(arg='const', value=Constant(value='fish')), keyword(arg='dest', value=Constant(value='shell')), keyword(arg='help', value=Constant(value='Emit completion code for fish'))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load()), attr='add_option', ctx=Load()), args=[Constant(value='--powershell'), Constant(value='-p')], keywords=[keyword(arg='action', value=Constant(value='store_const')), keyword(arg='const', value=Constant(value='powershell')), keyword(arg='dest', value=Constant(value='shell')), keyword(arg='help', value=Constant(value='Emit completion code for powershell'))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='parser', ctx=Load()), attr='insert_option_group', ctx=Load()), args=[Constant(value=0), Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='run', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='options', annotation=Name(id='Values', ctx=Load())), arg(arg='args', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Prints the completion code of the given shell')), Assign(targets=[Name(id='shells', ctx=Store())], value=Call(func=Attribute(value=Name(id='COMPLETION_SCRIPTS', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='shell_options', ctx=Store())], value=ListComp(elt=BinOp(left=Constant(value='--'), op=Add(), right=Name(id='shell', ctx=Load())), generators=[comprehension(target=Name(id='shell', ctx=Store()), iter=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='shells', ctx=Load())], keywords=[]), ifs=[], is_async=0)])), If(test=Compare(left=Attribute(value=Name(id='options', ctx=Load()), attr='shell', ctx=Load()), ops=[In()], comparators=[Name(id='shells', ctx=Load())]), body=[Assign(targets=[Name(id='script', ctx=Store())], value=Call(func=Attribute(value=Name(id='textwrap', ctx=Load()), attr='dedent', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='COMPLETION_SCRIPTS', ctx=Load()), attr='get', ctx=Load()), args=[Attribute(value=Name(id='options', ctx=Load()), attr='shell', ctx=Load()), Constant(value='')], keywords=[]), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='prog', value=Call(func=Name(id='get_prog', ctx=Load()), args=[], keywords=[]))])], keywords=[])), Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Call(func=Attribute(value=Name(id='BASE_COMPLETION', ctx=Load()), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='script', value=Name(id='script', ctx=Load())), keyword(arg='shell', value=Attribute(value=Name(id='options', ctx=Load()), attr='shell', ctx=Load()))])], keywords=[])), Return(value=Name(id='SUCCESS', ctx=Load()))], orelse=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='ERROR: You must pass {}\n'), attr='format', ctx=Load()), args=[Call(func=Attribute(value=Constant(value=' or '), attr='join', ctx=Load()), args=[Name(id='shell_options', ctx=Load())], keywords=[])], keywords=[])], keywords=[])), Return(value=Name(id='SUCCESS', ctx=Load()))])], decorator_list=[], returns=Name(id='int', ctx=Load()))], decorator_list=[])], type_ignores=[])