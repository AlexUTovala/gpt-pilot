Module(body=[Import(names=[alias(name='sys')]), ImportFrom(module='optparse', names=[alias(name='Values')], level=0), ImportFrom(module='typing', names=[alias(name='AbstractSet'), alias(name='List')], level=0), ImportFrom(module='pip._internal.cli', names=[alias(name='cmdoptions')], level=0), ImportFrom(module='pip._internal.cli.base_command', names=[alias(name='Command')], level=0), ImportFrom(module='pip._internal.cli.status_codes', names=[alias(name='SUCCESS')], level=0), ImportFrom(module='pip._internal.operations.freeze', names=[alias(name='freeze')], level=0), ImportFrom(module='pip._internal.utils.compat', names=[alias(name='stdlib_pkgs')], level=0), FunctionDef(name='_should_suppress_build_backends', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), ops=[Lt()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=12)], ctx=Load())]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='_dev_pkgs', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='pkgs', ctx=Store())], value=Set(elts=[Constant(value='pip')])), If(test=Call(func=Name(id='_should_suppress_build_backends', ctx=Load()), args=[], keywords=[]), body=[AugAssign(target=Name(id='pkgs', ctx=Store()), op=BitOr(), value=Set(elts=[Constant(value='setuptools'), Constant(value='distribute'), Constant(value='wheel')]))], orelse=[]), Return(value=Name(id='pkgs', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='AbstractSet', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), ClassDef(name='FreezeCommand', bases=[Name(id='Command', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Output installed packages in requirements format.\n\n    packages are listed in a case-insensitive sorted order.\n    ')), Assign(targets=[Name(id='usage', ctx=Store())], value=Constant(value='\n      %prog [options]')), Assign(targets=[Name(id='log_streams', ctx=Store())], value=Tuple(elts=[Constant(value='ext://sys.stderr'), Constant(value='ext://sys.stderr')], ctx=Load())), FunctionDef(name='add_options', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load()), attr='add_option', ctx=Load()), args=[Constant(value='-r'), Constant(value='--requirement')], keywords=[keyword(arg='dest', value=Constant(value='requirements')), keyword(arg='action', value=Constant(value='append')), keyword(arg='default', value=List(elts=[], ctx=Load())), keyword(arg='metavar', value=Constant(value='file')), keyword(arg='help', value=Constant(value='Use the order in the given requirements file and its comments when generating output. This option can be used multiple times.'))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load()), attr='add_option', ctx=Load()), args=[Constant(value='-l'), Constant(value='--local')], keywords=[keyword(arg='dest', value=Constant(value='local')), keyword(arg='action', value=Constant(value='store_true')), keyword(arg='default', value=Constant(value=False)), keyword(arg='help', value=Constant(value='If in a virtualenv that has global access, do not output globally-installed packages.'))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load()), attr='add_option', ctx=Load()), args=[Constant(value='--user')], keywords=[keyword(arg='dest', value=Constant(value='user')), keyword(arg='action', value=Constant(value='store_true')), keyword(arg='default', value=Constant(value=False)), keyword(arg='help', value=Constant(value='Only output packages installed in user-site.'))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load()), attr='add_option', ctx=Load()), args=[Call(func=Attribute(value=Name(id='cmdoptions', ctx=Load()), attr='list_path', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load()), attr='add_option', ctx=Load()), args=[Constant(value='--all')], keywords=[keyword(arg='dest', value=Constant(value='freeze_all')), keyword(arg='action', value=Constant(value='store_true')), keyword(arg='help', value=Call(func=Attribute(value=Constant(value='Do not skip these packages in the output: {}'), attr='format', ctx=Load()), args=[Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Call(func=Name(id='_dev_pkgs', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[]))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load()), attr='add_option', ctx=Load()), args=[Constant(value='--exclude-editable')], keywords=[keyword(arg='dest', value=Constant(value='exclude_editable')), keyword(arg='action', value=Constant(value='store_true')), keyword(arg='help', value=Constant(value='Exclude editable package from output.'))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load()), attr='add_option', ctx=Load()), args=[Call(func=Attribute(value=Name(id='cmdoptions', ctx=Load()), attr='list_exclude', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='parser', ctx=Load()), attr='insert_option_group', ctx=Load()), args=[Constant(value=0), Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='run', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='options', annotation=Name(id='Values', ctx=Load())), arg(arg='args', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='skip', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Name(id='stdlib_pkgs', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='options', ctx=Load()), attr='freeze_all', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='skip', ctx=Load()), attr='update', ctx=Load()), args=[Call(func=Name(id='_dev_pkgs', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='options', ctx=Load()), attr='excludes', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='skip', ctx=Load()), attr='update', ctx=Load()), args=[Attribute(value=Name(id='options', ctx=Load()), attr='excludes', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='cmdoptions', ctx=Load()), attr='check_list_path_option', ctx=Load()), args=[Name(id='options', ctx=Load())], keywords=[])), For(target=Name(id='line', ctx=Store()), iter=Call(func=Name(id='freeze', ctx=Load()), args=[], keywords=[keyword(arg='requirement', value=Attribute(value=Name(id='options', ctx=Load()), attr='requirements', ctx=Load())), keyword(arg='local_only', value=Attribute(value=Name(id='options', ctx=Load()), attr='local', ctx=Load())), keyword(arg='user_only', value=Attribute(value=Name(id='options', ctx=Load()), attr='user', ctx=Load())), keyword(arg='paths', value=Attribute(value=Name(id='options', ctx=Load()), attr='path', ctx=Load())), keyword(arg='isolated', value=Attribute(value=Name(id='options', ctx=Load()), attr='isolated_mode', ctx=Load())), keyword(arg='skip', value=Name(id='skip', ctx=Load())), keyword(arg='exclude_editable', value=Attribute(value=Name(id='options', ctx=Load()), attr='exclude_editable', ctx=Load()))]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load()), attr='write', ctx=Load()), args=[BinOp(left=Name(id='line', ctx=Load()), op=Add(), right=Constant(value='\n'))], keywords=[]))], orelse=[]), Return(value=Name(id='SUCCESS', ctx=Load()))], decorator_list=[], returns=Name(id='int', ctx=Load()))], decorator_list=[])], type_ignores=[])