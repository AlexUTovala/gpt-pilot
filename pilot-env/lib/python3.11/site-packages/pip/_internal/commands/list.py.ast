Module(body=[Import(names=[alias(name='json')]), Import(names=[alias(name='logging')]), ImportFrom(module='optparse', names=[alias(name='Values')], level=0), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING'), alias(name='Generator'), alias(name='List'), alias(name='Optional'), alias(name='Sequence'), alias(name='Tuple'), alias(name='cast')], level=0), ImportFrom(module='pip._vendor.packaging.utils', names=[alias(name='canonicalize_name')], level=0), ImportFrom(module='pip._internal.cli', names=[alias(name='cmdoptions')], level=0), ImportFrom(module='pip._internal.cli.req_command', names=[alias(name='IndexGroupCommand')], level=0), ImportFrom(module='pip._internal.cli.status_codes', names=[alias(name='SUCCESS')], level=0), ImportFrom(module='pip._internal.exceptions', names=[alias(name='CommandError')], level=0), ImportFrom(module='pip._internal.index.collector', names=[alias(name='LinkCollector')], level=0), ImportFrom(module='pip._internal.index.package_finder', names=[alias(name='PackageFinder')], level=0), ImportFrom(module='pip._internal.metadata', names=[alias(name='BaseDistribution'), alias(name='get_environment')], level=0), ImportFrom(module='pip._internal.models.selection_prefs', names=[alias(name='SelectionPreferences')], level=0), ImportFrom(module='pip._internal.network.session', names=[alias(name='PipSession')], level=0), ImportFrom(module='pip._internal.utils.compat', names=[alias(name='stdlib_pkgs')], level=0), ImportFrom(module='pip._internal.utils.misc', names=[alias(name='tabulate'), alias(name='write_output')], level=0), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='pip._internal.metadata.base', names=[alias(name='DistributionVersion')], level=0), ClassDef(name='_DistWithLatestInfo', bases=[Name(id='BaseDistribution', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Give the distribution object a couple of extra fields.\n\n        These will be populated during ``get_outdated()``. This is dirty but\n        makes the rest of the code much cleaner.\n        ')), AnnAssign(target=Name(id='latest_version', ctx=Store()), annotation=Name(id='DistributionVersion', ctx=Load()), simple=1), AnnAssign(target=Name(id='latest_filetype', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1)], decorator_list=[]), Assign(targets=[Name(id='_ProcessedDists', ctx=Store())], value=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='_DistWithLatestInfo', ctx=Load()), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), ClassDef(name='ListCommand', bases=[Name(id='IndexGroupCommand', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    List installed packages, including editables.\n\n    Packages are listed in a case-insensitive sorted order.\n    ')), Assign(targets=[Name(id='ignore_require_venv', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='usage', ctx=Store())], value=Constant(value='\n      %prog [options]')), FunctionDef(name='add_options', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load()), attr='add_option', ctx=Load()), args=[Constant(value='-o'), Constant(value='--outdated')], keywords=[keyword(arg='action', value=Constant(value='store_true')), keyword(arg='default', value=Constant(value=False)), keyword(arg='help', value=Constant(value='List outdated packages'))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load()), attr='add_option', ctx=Load()), args=[Constant(value='-u'), Constant(value='--uptodate')], keywords=[keyword(arg='action', value=Constant(value='store_true')), keyword(arg='default', value=Constant(value=False)), keyword(arg='help', value=Constant(value='List uptodate packages'))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load()), attr='add_option', ctx=Load()), args=[Constant(value='-e'), Constant(value='--editable')], keywords=[keyword(arg='action', value=Constant(value='store_true')), keyword(arg='default', value=Constant(value=False)), keyword(arg='help', value=Constant(value='List editable projects.'))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load()), attr='add_option', ctx=Load()), args=[Constant(value='-l'), Constant(value='--local')], keywords=[keyword(arg='action', value=Constant(value='store_true')), keyword(arg='default', value=Constant(value=False)), keyword(arg='help', value=Constant(value='If in a virtualenv that has global access, do not list globally-installed packages.'))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load()), attr='add_option', ctx=Load()), args=[Constant(value='--user')], keywords=[keyword(arg='dest', value=Constant(value='user')), keyword(arg='action', value=Constant(value='store_true')), keyword(arg='default', value=Constant(value=False)), keyword(arg='help', value=Constant(value='Only output packages installed in user-site.'))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load()), attr='add_option', ctx=Load()), args=[Call(func=Attribute(value=Name(id='cmdoptions', ctx=Load()), attr='list_path', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load()), attr='add_option', ctx=Load()), args=[Constant(value='--pre')], keywords=[keyword(arg='action', value=Constant(value='store_true')), keyword(arg='default', value=Constant(value=False)), keyword(arg='help', value=Constant(value='Include pre-release and development versions. By default, pip only finds stable versions.'))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load()), attr='add_option', ctx=Load()), args=[Constant(value='--format')], keywords=[keyword(arg='action', value=Constant(value='store')), keyword(arg='dest', value=Constant(value='list_format')), keyword(arg='default', value=Constant(value='columns')), keyword(arg='choices', value=Tuple(elts=[Constant(value='columns'), Constant(value='freeze'), Constant(value='json')], ctx=Load())), keyword(arg='help', value=Constant(value="Select the output format among: columns (default), freeze, or json. The 'freeze' format cannot be used with the --outdated option."))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load()), attr='add_option', ctx=Load()), args=[Constant(value='--not-required')], keywords=[keyword(arg='action', value=Constant(value='store_true')), keyword(arg='dest', value=Constant(value='not_required')), keyword(arg='help', value=Constant(value='List packages that are not dependencies of installed packages.'))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load()), attr='add_option', ctx=Load()), args=[Constant(value='--exclude-editable')], keywords=[keyword(arg='action', value=Constant(value='store_false')), keyword(arg='dest', value=Constant(value='include_editable')), keyword(arg='help', value=Constant(value='Exclude editable package from output.'))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load()), attr='add_option', ctx=Load()), args=[Constant(value='--include-editable')], keywords=[keyword(arg='action', value=Constant(value='store_true')), keyword(arg='dest', value=Constant(value='include_editable')), keyword(arg='help', value=Constant(value='Include editable package from output.')), keyword(arg='default', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load()), attr='add_option', ctx=Load()), args=[Call(func=Attribute(value=Name(id='cmdoptions', ctx=Load()), attr='list_exclude', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='index_opts', ctx=Store())], value=Call(func=Attribute(value=Name(id='cmdoptions', ctx=Load()), attr='make_option_group', ctx=Load()), args=[Attribute(value=Name(id='cmdoptions', ctx=Load()), attr='index_group', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='parser', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='parser', ctx=Load()), attr='insert_option_group', ctx=Load()), args=[Constant(value=0), Name(id='index_opts', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='parser', ctx=Load()), attr='insert_option_group', ctx=Load()), args=[Constant(value=0), Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_build_package_finder', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='options', annotation=Name(id='Values', ctx=Load())), arg(arg='session', annotation=Name(id='PipSession', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Create a package finder appropriate to this list command.\n        ')), Assign(targets=[Name(id='link_collector', ctx=Store())], value=Call(func=Attribute(value=Name(id='LinkCollector', ctx=Load()), attr='create', ctx=Load()), args=[Name(id='session', ctx=Load())], keywords=[keyword(arg='options', value=Name(id='options', ctx=Load()))])), Assign(targets=[Name(id='selection_prefs', ctx=Store())], value=Call(func=Name(id='SelectionPreferences', ctx=Load()), args=[], keywords=[keyword(arg='allow_yanked', value=Constant(value=False)), keyword(arg='allow_all_prereleases', value=Attribute(value=Name(id='options', ctx=Load()), attr='pre', ctx=Load()))])), Return(value=Call(func=Attribute(value=Name(id='PackageFinder', ctx=Load()), attr='create', ctx=Load()), args=[], keywords=[keyword(arg='link_collector', value=Name(id='link_collector', ctx=Load())), keyword(arg='selection_prefs', value=Name(id='selection_prefs', ctx=Load()))]))], decorator_list=[], returns=Name(id='PackageFinder', ctx=Load())), FunctionDef(name='run', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='options', annotation=Name(id='Values', ctx=Load())), arg(arg='args', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='options', ctx=Load()), attr='outdated', ctx=Load()), Attribute(value=Name(id='options', ctx=Load()), attr='uptodate', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='CommandError', ctx=Load()), args=[Constant(value='Options --outdated and --uptodate cannot be combined.')], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='options', ctx=Load()), attr='outdated', ctx=Load()), Compare(left=Attribute(value=Name(id='options', ctx=Load()), attr='list_format', ctx=Load()), ops=[Eq()], comparators=[Constant(value='freeze')])]), body=[Raise(exc=Call(func=Name(id='CommandError', ctx=Load()), args=[Constant(value="List format 'freeze' cannot be used with the --outdated option.")], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='cmdoptions', ctx=Load()), attr='check_list_path_option', ctx=Load()), args=[Name(id='options', ctx=Load())], keywords=[])), Assign(targets=[Name(id='skip', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Name(id='stdlib_pkgs', ctx=Load())], keywords=[])), If(test=Attribute(value=Name(id='options', ctx=Load()), attr='excludes', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='skip', ctx=Load()), attr='update', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='canonicalize_name', ctx=Load()), args=[Name(id='n', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='n', ctx=Store()), iter=Attribute(value=Name(id='options', ctx=Load()), attr='excludes', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], orelse=[]), AnnAssign(target=Name(id='packages', ctx=Store()), annotation=Constant(value='_ProcessedDists'), value=ListComp(elt=Call(func=Name(id='cast', ctx=Load()), args=[Constant(value='_DistWithLatestInfo'), Name(id='d', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='d', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Name(id='get_environment', ctx=Load()), args=[Attribute(value=Name(id='options', ctx=Load()), attr='path', ctx=Load())], keywords=[]), attr='iter_installed_distributions', ctx=Load()), args=[], keywords=[keyword(arg='local_only', value=Attribute(value=Name(id='options', ctx=Load()), attr='local', ctx=Load())), keyword(arg='user_only', value=Attribute(value=Name(id='options', ctx=Load()), attr='user', ctx=Load())), keyword(arg='editables_only', value=Attribute(value=Name(id='options', ctx=Load()), attr='editable', ctx=Load())), keyword(arg='include_editables', value=Attribute(value=Name(id='options', ctx=Load()), attr='include_editable', ctx=Load())), keyword(arg='skip', value=Name(id='skip', ctx=Load()))]), ifs=[], is_async=0)]), simple=1), If(test=Attribute(value=Name(id='options', ctx=Load()), attr='not_required', ctx=Load()), body=[Assign(targets=[Name(id='packages', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_not_required', ctx=Load()), args=[Name(id='packages', ctx=Load()), Name(id='options', ctx=Load())], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='options', ctx=Load()), attr='outdated', ctx=Load()), body=[Assign(targets=[Name(id='packages', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_outdated', ctx=Load()), args=[Name(id='packages', ctx=Load()), Name(id='options', ctx=Load())], keywords=[]))], orelse=[If(test=Attribute(value=Name(id='options', ctx=Load()), attr='uptodate', ctx=Load()), body=[Assign(targets=[Name(id='packages', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_uptodate', ctx=Load()), args=[Name(id='packages', ctx=Load()), Name(id='options', ctx=Load())], keywords=[]))], orelse=[])]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='output_package_listing', ctx=Load()), args=[Name(id='packages', ctx=Load()), Name(id='options', ctx=Load())], keywords=[])), Return(value=Name(id='SUCCESS', ctx=Load()))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='get_outdated', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='packages', annotation=Constant(value='_ProcessedDists')), arg(arg='options', annotation=Name(id='Values', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=ListComp(elt=Name(id='dist', ctx=Load()), generators=[comprehension(target=Name(id='dist', ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='iter_packages_latest_infos', ctx=Load()), args=[Name(id='packages', ctx=Load()), Name(id='options', ctx=Load())], keywords=[]), ifs=[Compare(left=Attribute(value=Name(id='dist', ctx=Load()), attr='latest_version', ctx=Load()), ops=[Gt()], comparators=[Attribute(value=Name(id='dist', ctx=Load()), attr='version', ctx=Load())])], is_async=0)]))], decorator_list=[], returns=Constant(value='_ProcessedDists')), FunctionDef(name='get_uptodate', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='packages', annotation=Constant(value='_ProcessedDists')), arg(arg='options', annotation=Name(id='Values', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=ListComp(elt=Name(id='dist', ctx=Load()), generators=[comprehension(target=Name(id='dist', ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='iter_packages_latest_infos', ctx=Load()), args=[Name(id='packages', ctx=Load()), Name(id='options', ctx=Load())], keywords=[]), ifs=[Compare(left=Attribute(value=Name(id='dist', ctx=Load()), attr='latest_version', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='dist', ctx=Load()), attr='version', ctx=Load())])], is_async=0)]))], decorator_list=[], returns=Constant(value='_ProcessedDists')), FunctionDef(name='get_not_required', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='packages', annotation=Constant(value='_ProcessedDists')), arg(arg='options', annotation=Name(id='Values', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='dep_keys', ctx=Store())], value=SetComp(elt=Call(func=Name(id='canonicalize_name', ctx=Load()), args=[Attribute(value=Name(id='dep', ctx=Load()), attr='name', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='dist', ctx=Store()), iter=Name(id='packages', ctx=Load()), ifs=[], is_async=0), comprehension(target=Name(id='dep', ctx=Store()), iter=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='dist', ctx=Load()), attr='iter_dependencies', ctx=Load()), args=[], keywords=[]), Tuple(elts=[], ctx=Load())]), ifs=[], is_async=0)])), Return(value=Call(func=Name(id='list', ctx=Load()), args=[SetComp(elt=Name(id='pkg', ctx=Load()), generators=[comprehension(target=Name(id='pkg', ctx=Store()), iter=Name(id='packages', ctx=Load()), ifs=[Compare(left=Attribute(value=Name(id='pkg', ctx=Load()), attr='canonical_name', ctx=Load()), ops=[NotIn()], comparators=[Name(id='dep_keys', ctx=Load())])], is_async=0)])], keywords=[]))], decorator_list=[], returns=Constant(value='_ProcessedDists')), FunctionDef(name='iter_packages_latest_infos', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='packages', annotation=Constant(value='_ProcessedDists')), arg(arg='options', annotation=Name(id='Values', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_build_session', ctx=Load()), args=[Name(id='options', ctx=Load())], keywords=[]), optional_vars=Name(id='session', ctx=Store()))], body=[Assign(targets=[Name(id='finder', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_build_package_finder', ctx=Load()), args=[Name(id='options', ctx=Load()), Name(id='session', ctx=Load())], keywords=[])), FunctionDef(name='latest_info', args=arguments(posonlyargs=[], args=[arg(arg='dist', annotation=Constant(value='_DistWithLatestInfo'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='all_candidates', ctx=Store())], value=Call(func=Attribute(value=Name(id='finder', ctx=Load()), attr='find_all_candidates', ctx=Load()), args=[Attribute(value=Name(id='dist', ctx=Load()), attr='canonical_name', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='options', ctx=Load()), attr='pre', ctx=Load())), body=[Assign(targets=[Name(id='all_candidates', ctx=Store())], value=ListComp(elt=Name(id='candidate', ctx=Load()), generators=[comprehension(target=Name(id='candidate', ctx=Store()), iter=Name(id='all_candidates', ctx=Load()), ifs=[UnaryOp(op=Not(), operand=Attribute(value=Attribute(value=Name(id='candidate', ctx=Load()), attr='version', ctx=Load()), attr='is_prerelease', ctx=Load()))], is_async=0)]))], orelse=[]), Assign(targets=[Name(id='evaluator', ctx=Store())], value=Call(func=Attribute(value=Name(id='finder', ctx=Load()), attr='make_candidate_evaluator', ctx=Load()), args=[], keywords=[keyword(arg='project_name', value=Attribute(value=Name(id='dist', ctx=Load()), attr='canonical_name', ctx=Load()))])), Assign(targets=[Name(id='best_candidate', ctx=Store())], value=Call(func=Attribute(value=Name(id='evaluator', ctx=Load()), attr='sort_best_candidate', ctx=Load()), args=[Name(id='all_candidates', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='best_candidate', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='remote_version', ctx=Store())], value=Attribute(value=Name(id='best_candidate', ctx=Load()), attr='version', ctx=Load())), If(test=Attribute(value=Attribute(value=Name(id='best_candidate', ctx=Load()), attr='link', ctx=Load()), attr='is_wheel', ctx=Load()), body=[Assign(targets=[Name(id='typ', ctx=Store())], value=Constant(value='wheel'))], orelse=[Assign(targets=[Name(id='typ', ctx=Store())], value=Constant(value='sdist'))]), Assign(targets=[Attribute(value=Name(id='dist', ctx=Load()), attr='latest_version', ctx=Store())], value=Name(id='remote_version', ctx=Load())), Assign(targets=[Attribute(value=Name(id='dist', ctx=Load()), attr='latest_filetype', ctx=Store())], value=Name(id='typ', ctx=Load())), Return(value=Name(id='dist', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='_DistWithLatestInfo'), ctx=Load())), For(target=Name(id='dist', ctx=Store()), iter=Call(func=Name(id='map', ctx=Load()), args=[Name(id='latest_info', ctx=Load()), Name(id='packages', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='dist', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Yield(value=Name(id='dist', ctx=Load())))], orelse=[])], orelse=[])])], decorator_list=[], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Constant(value='_DistWithLatestInfo'), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='output_package_listing', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='packages', annotation=Constant(value='_ProcessedDists')), arg(arg='options', annotation=Name(id='Values', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='packages', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='packages', ctx=Load())], keywords=[keyword(arg='key', value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='dist')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Attribute(value=Name(id='dist', ctx=Load()), attr='canonical_name', ctx=Load())))])), If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='options', ctx=Load()), attr='list_format', ctx=Load()), ops=[Eq()], comparators=[Constant(value='columns')]), Name(id='packages', ctx=Load())]), body=[Assign(targets=[Tuple(elts=[Name(id='data', ctx=Store()), Name(id='header', ctx=Store())], ctx=Store())], value=Call(func=Name(id='format_for_columns', ctx=Load()), args=[Name(id='packages', ctx=Load()), Name(id='options', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='output_package_listing_columns', ctx=Load()), args=[Name(id='data', ctx=Load()), Name(id='header', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Attribute(value=Name(id='options', ctx=Load()), attr='list_format', ctx=Load()), ops=[Eq()], comparators=[Constant(value='freeze')]), body=[For(target=Name(id='dist', ctx=Store()), iter=Name(id='packages', ctx=Load()), body=[If(test=Compare(left=Attribute(value=Name(id='options', ctx=Load()), attr='verbose', ctx=Load()), ops=[GtE()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Name(id='write_output', ctx=Load()), args=[Constant(value='%s==%s (%s)'), Attribute(value=Name(id='dist', ctx=Load()), attr='raw_name', ctx=Load()), Attribute(value=Name(id='dist', ctx=Load()), attr='version', ctx=Load()), Attribute(value=Name(id='dist', ctx=Load()), attr='location', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='write_output', ctx=Load()), args=[Constant(value='%s==%s'), Attribute(value=Name(id='dist', ctx=Load()), attr='raw_name', ctx=Load()), Attribute(value=Name(id='dist', ctx=Load()), attr='version', ctx=Load())], keywords=[]))])], orelse=[])], orelse=[If(test=Compare(left=Attribute(value=Name(id='options', ctx=Load()), attr='list_format', ctx=Load()), ops=[Eq()], comparators=[Constant(value='json')]), body=[Expr(value=Call(func=Name(id='write_output', ctx=Load()), args=[Call(func=Name(id='format_for_json', ctx=Load()), args=[Name(id='packages', ctx=Load()), Name(id='options', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])])])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='output_package_listing_columns', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='data', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='header', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='insert', ctx=Load()), args=[Constant(value=0), Name(id='header', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='pkg_strings', ctx=Store()), Name(id='sizes', ctx=Store())], ctx=Store())], value=Call(func=Name(id='tabulate', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[])), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=0)]), body=[Expr(value=Call(func=Attribute(value=Name(id='pkg_strings', ctx=Load()), attr='insert', ctx=Load()), args=[Constant(value=1), Call(func=Attribute(value=Constant(value=' '), attr='join', ctx=Load()), args=[GeneratorExp(elt=BinOp(left=Constant(value='-'), op=Mult(), right=Name(id='x', ctx=Load())), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='sizes', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], keywords=[]))], orelse=[]), For(target=Name(id='val', ctx=Store()), iter=Name(id='pkg_strings', ctx=Load()), body=[Expr(value=Call(func=Name(id='write_output', ctx=Load()), args=[Name(id='val', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), FunctionDef(name='format_for_columns', args=arguments(posonlyargs=[], args=[arg(arg='pkgs', annotation=Constant(value='_ProcessedDists')), arg(arg='options', annotation=Name(id='Values', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Convert the package data into something usable\n    by output_package_listing_columns.\n    ')), Assign(targets=[Name(id='header', ctx=Store())], value=List(elts=[Constant(value='Package'), Constant(value='Version')], ctx=Load())), Assign(targets=[Name(id='running_outdated', ctx=Store())], value=Attribute(value=Name(id='options', ctx=Load()), attr='outdated', ctx=Load())), If(test=Name(id='running_outdated', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='header', ctx=Load()), attr='extend', ctx=Load()), args=[List(elts=[Constant(value='Latest'), Constant(value='Type')], ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='has_editables', ctx=Store())], value=Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=Attribute(value=Name(id='x', ctx=Load()), attr='editable', ctx=Load()), generators=[comprehension(target=Name(id='x', ctx=Store()), iter=Name(id='pkgs', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), If(test=Name(id='has_editables', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='header', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='Editable project location')], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='options', ctx=Load()), attr='verbose', ctx=Load()), ops=[GtE()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Attribute(value=Name(id='header', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='Location')], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='options', ctx=Load()), attr='verbose', ctx=Load()), ops=[GtE()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Attribute(value=Name(id='header', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='Installer')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='data', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='proj', ctx=Store()), iter=Name(id='pkgs', ctx=Load()), body=[Assign(targets=[Name(id='row', ctx=Store())], value=List(elts=[Attribute(value=Name(id='proj', ctx=Load()), attr='raw_name', ctx=Load()), Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='proj', ctx=Load()), attr='version', ctx=Load())], keywords=[])], ctx=Load())), If(test=Name(id='running_outdated', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='row', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='proj', ctx=Load()), attr='latest_version', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='row', ctx=Load()), attr='append', ctx=Load()), args=[Attribute(value=Name(id='proj', ctx=Load()), attr='latest_filetype', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='has_editables', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='row', ctx=Load()), attr='append', ctx=Load()), args=[BoolOp(op=Or(), values=[Attribute(value=Name(id='proj', ctx=Load()), attr='editable_project_location', ctx=Load()), Constant(value='')])], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='options', ctx=Load()), attr='verbose', ctx=Load()), ops=[GtE()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Attribute(value=Name(id='row', ctx=Load()), attr='append', ctx=Load()), args=[BoolOp(op=Or(), values=[Attribute(value=Name(id='proj', ctx=Load()), attr='location', ctx=Load()), Constant(value='')])], keywords=[]))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='options', ctx=Load()), attr='verbose', ctx=Load()), ops=[GtE()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Attribute(value=Name(id='row', ctx=Load()), attr='append', ctx=Load()), args=[Attribute(value=Name(id='proj', ctx=Load()), attr='installer', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='row', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Tuple(elts=[Name(id='data', ctx=Load()), Name(id='header', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='format_for_json', args=arguments(posonlyargs=[], args=[arg(arg='packages', annotation=Constant(value='_ProcessedDists')), arg(arg='options', annotation=Name(id='Values', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='data', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='dist', ctx=Store()), iter=Name(id='packages', ctx=Load()), body=[Assign(targets=[Name(id='info', ctx=Store())], value=Dict(keys=[Constant(value='name'), Constant(value='version')], values=[Attribute(value=Name(id='dist', ctx=Load()), attr='raw_name', ctx=Load()), Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='dist', ctx=Load()), attr='version', ctx=Load())], keywords=[])])), If(test=Compare(left=Attribute(value=Name(id='options', ctx=Load()), attr='verbose', ctx=Load()), ops=[GtE()], comparators=[Constant(value=1)]), body=[Assign(targets=[Subscript(value=Name(id='info', ctx=Load()), slice=Constant(value='location'), ctx=Store())], value=BoolOp(op=Or(), values=[Attribute(value=Name(id='dist', ctx=Load()), attr='location', ctx=Load()), Constant(value='')])), Assign(targets=[Subscript(value=Name(id='info', ctx=Load()), slice=Constant(value='installer'), ctx=Store())], value=Attribute(value=Name(id='dist', ctx=Load()), attr='installer', ctx=Load()))], orelse=[]), If(test=Attribute(value=Name(id='options', ctx=Load()), attr='outdated', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='info', ctx=Load()), slice=Constant(value='latest_version'), ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='dist', ctx=Load()), attr='latest_version', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='info', ctx=Load()), slice=Constant(value='latest_filetype'), ctx=Store())], value=Attribute(value=Name(id='dist', ctx=Load()), attr='latest_filetype', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='editable_project_location', ctx=Store())], value=Attribute(value=Name(id='dist', ctx=Load()), attr='editable_project_location', ctx=Load())), If(test=Name(id='editable_project_location', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='info', ctx=Load()), slice=Constant(value='editable_project_location'), ctx=Store())], value=Name(id='editable_project_location', ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='info', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dumps', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], type_ignores=[])