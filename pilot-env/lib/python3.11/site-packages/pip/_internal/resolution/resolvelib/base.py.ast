Module(body=[ImportFrom(module='typing', names=[alias(name='FrozenSet'), alias(name='Iterable'), alias(name='Optional'), alias(name='Tuple'), alias(name='Union')], level=0), ImportFrom(module='pip._vendor.packaging.specifiers', names=[alias(name='SpecifierSet')], level=0), ImportFrom(module='pip._vendor.packaging.utils', names=[alias(name='NormalizedName')], level=0), ImportFrom(module='pip._vendor.packaging.version', names=[alias(name='LegacyVersion'), alias(name='Version')], level=0), ImportFrom(module='pip._internal.models.link', names=[alias(name='Link'), alias(name='links_equivalent')], level=0), ImportFrom(module='pip._internal.req.req_install', names=[alias(name='InstallRequirement')], level=0), ImportFrom(module='pip._internal.utils.hashes', names=[alias(name='Hashes')], level=0), Assign(targets=[Name(id='CandidateLookup', ctx=Store())], value=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='Candidate'), ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='InstallRequirement', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='CandidateVersion', ctx=Store())], value=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='LegacyVersion', ctx=Load()), Name(id='Version', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='format_name', args=arguments(posonlyargs=[], args=[arg(arg='project', annotation=Name(id='NormalizedName', ctx=Load())), arg(arg='extras', annotation=Subscript(value=Name(id='FrozenSet', ctx=Load()), slice=Name(id='NormalizedName', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='extras', ctx=Load())), body=[Return(value=Name(id='project', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='extras_expr', ctx=Store())], value=Call(func=Attribute(value=Constant(value=','), attr='join', ctx=Load()), args=[Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='extras', ctx=Load())], keywords=[])], keywords=[])), Return(value=JoinedStr(values=[FormattedValue(value=Name(id='project', ctx=Load()), conversion=-1), Constant(value='['), FormattedValue(value=Name(id='extras_expr', ctx=Load()), conversion=-1), Constant(value=']')]))], decorator_list=[], returns=Name(id='str', ctx=Load())), ClassDef(name='Constraint', bases=[], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='specifier', annotation=Name(id='SpecifierSet', ctx=Load())), arg(arg='hashes', annotation=Name(id='Hashes', ctx=Load())), arg(arg='links', annotation=Subscript(value=Name(id='FrozenSet', ctx=Load()), slice=Name(id='Link', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='specifier', ctx=Store())], value=Name(id='specifier', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='hashes', ctx=Store())], value=Name(id='hashes', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='links', ctx=Store())], value=Name(id='links', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='empty', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='Constraint', ctx=Load()), args=[Call(func=Name(id='SpecifierSet', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='Hashes', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='frozenset', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Constant(value='Constraint')), FunctionDef(name='from_ireq', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='ireq', annotation=Name(id='InstallRequirement', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='links', ctx=Store())], value=IfExp(test=Attribute(value=Name(id='ireq', ctx=Load()), attr='link', ctx=Load()), body=Call(func=Name(id='frozenset', ctx=Load()), args=[List(elts=[Attribute(value=Name(id='ireq', ctx=Load()), attr='link', ctx=Load())], ctx=Load())], keywords=[]), orelse=Call(func=Name(id='frozenset', ctx=Load()), args=[], keywords=[]))), Return(value=Call(func=Name(id='Constraint', ctx=Load()), args=[Attribute(value=Name(id='ireq', ctx=Load()), attr='specifier', ctx=Load()), Call(func=Attribute(value=Name(id='ireq', ctx=Load()), attr='hashes', ctx=Load()), args=[], keywords=[keyword(arg='trust_internet', value=Constant(value=False))]), Name(id='links', ctx=Load())], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Constant(value='Constraint')), FunctionDef(name='__bool__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=Or(), values=[Call(func=Name(id='bool', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='specifier', ctx=Load())], keywords=[]), Call(func=Name(id='bool', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='hashes', ctx=Load())], keywords=[]), Call(func=Name(id='bool', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='links', ctx=Load())], keywords=[])]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='__and__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other', annotation=Name(id='InstallRequirement', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='other', ctx=Load()), Name(id='InstallRequirement', ctx=Load())], keywords=[])), body=[Return(value=Name(id='NotImplemented', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='specifier', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='specifier', ctx=Load()), op=BitAnd(), right=Attribute(value=Name(id='other', ctx=Load()), attr='specifier', ctx=Load()))), Assign(targets=[Name(id='hashes', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='hashes', ctx=Load()), op=BitAnd(), right=Call(func=Attribute(value=Name(id='other', ctx=Load()), attr='hashes', ctx=Load()), args=[], keywords=[keyword(arg='trust_internet', value=Constant(value=False))]))), Assign(targets=[Name(id='links', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='links', ctx=Load())), If(test=Attribute(value=Name(id='other', ctx=Load()), attr='link', ctx=Load()), body=[Assign(targets=[Name(id='links', ctx=Store())], value=Call(func=Attribute(value=Name(id='links', ctx=Load()), attr='union', ctx=Load()), args=[List(elts=[Attribute(value=Name(id='other', ctx=Load()), attr='link', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='Constraint', ctx=Load()), args=[Name(id='specifier', ctx=Load()), Name(id='hashes', ctx=Load()), Name(id='links', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value='Constraint')), FunctionDef(name='is_satisfied_by', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='candidate', annotation=Constant(value='Candidate'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='links', ctx=Load()), UnaryOp(op=Not(), operand=Call(func=Name(id='all', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='_match_link', ctx=Load()), args=[Name(id='link', ctx=Load()), Name(id='candidate', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='link', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='links', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))]), body=[Return(value=Constant(value=False))], orelse=[]), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='specifier', ctx=Load()), attr='contains', ctx=Load()), args=[Attribute(value=Name(id='candidate', ctx=Load()), attr='version', ctx=Load())], keywords=[keyword(arg='prereleases', value=Constant(value=True))]))], decorator_list=[], returns=Name(id='bool', ctx=Load()))], decorator_list=[]), ClassDef(name='Requirement', bases=[], keywords=[], body=[FunctionDef(name='project_name', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='The "project name" of a requirement.\n\n        This is different from ``name`` if this requirement contains extras,\n        in which case ``name`` would contain the ``[...]`` part, while this\n        refers to the name of the project.\n        ')), Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[Constant(value='Subclass should override')], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='NormalizedName', ctx=Load())), FunctionDef(name='name', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='The name identifying this requirement in the resolver.\n\n        This is different from ``project_name`` if this requirement contains\n        extras, where ``project_name`` would not contain the ``[...]`` part.\n        ')), Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[Constant(value='Subclass should override')], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='is_satisfied_by', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='candidate', annotation=Constant(value='Candidate'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=False))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='get_candidate_lookup', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[Constant(value='Subclass should override')], keywords=[]))], decorator_list=[], returns=Name(id='CandidateLookup', ctx=Load())), FunctionDef(name='format_for_error', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[Constant(value='Subclass should override')], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[]), FunctionDef(name='_match_link', args=arguments(posonlyargs=[], args=[arg(arg='link', annotation=Name(id='Link', ctx=Load())), arg(arg='candidate', annotation=Constant(value='Candidate'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='candidate', ctx=Load()), attr='source_link', ctx=Load()), body=[Return(value=Call(func=Name(id='links_equivalent', ctx=Load()), args=[Name(id='link', ctx=Load()), Attribute(value=Name(id='candidate', ctx=Load()), attr='source_link', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Constant(value=False))], decorator_list=[], returns=Name(id='bool', ctx=Load())), ClassDef(name='Candidate', bases=[], keywords=[], body=[FunctionDef(name='project_name', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='The "project name" of the candidate.\n\n        This is different from ``name`` if this candidate contains extras,\n        in which case ``name`` would contain the ``[...]`` part, while this\n        refers to the name of the project.\n        ')), Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[Constant(value='Override in subclass')], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='NormalizedName', ctx=Load())), FunctionDef(name='name', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='The name identifying this candidate in the resolver.\n\n        This is different from ``project_name`` if this candidate contains\n        extras, where ``project_name`` would not contain the ``[...]`` part.\n        ')), Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[Constant(value='Override in subclass')], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='version', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[Constant(value='Override in subclass')], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='CandidateVersion', ctx=Load())), FunctionDef(name='is_installed', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[Constant(value='Override in subclass')], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='is_editable', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[Constant(value='Override in subclass')], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='source_link', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[Constant(value='Override in subclass')], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Link', ctx=Load()), ctx=Load())), FunctionDef(name='iter_dependencies', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='with_requires', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[Constant(value='Override in subclass')], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Requirement', ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='get_install_requirement', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[Constant(value='Override in subclass')], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='InstallRequirement', ctx=Load()), ctx=Load())), FunctionDef(name='format_for_error', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[Constant(value='Subclass should override')], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[])], type_ignores=[])