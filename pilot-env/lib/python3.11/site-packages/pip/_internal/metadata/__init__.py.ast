Module(body=[Import(names=[alias(name='contextlib')]), Import(names=[alias(name='functools')]), Import(names=[alias(name='os')]), Import(names=[alias(name='sys')]), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING'), alias(name='List'), alias(name='Optional'), alias(name='Type'), alias(name='cast')], level=0), ImportFrom(module='pip._internal.utils.misc', names=[alias(name='strtobool')], level=0), ImportFrom(module='base', names=[alias(name='BaseDistribution'), alias(name='BaseEnvironment'), alias(name='FilesystemWheel'), alias(name='MemoryWheel'), alias(name='Wheel')], level=1), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='typing', names=[alias(name='Literal'), alias(name='Protocol')], level=0)], orelse=[Assign(targets=[Name(id='Protocol', ctx=Store())], value=Name(id='object', ctx=Load()))]), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='BaseDistribution'), Constant(value='BaseEnvironment'), Constant(value='FilesystemWheel'), Constant(value='MemoryWheel'), Constant(value='Wheel'), Constant(value='get_default_environment'), Constant(value='get_environment'), Constant(value='get_wheel_distribution'), Constant(value='select_backend')], ctx=Load())), FunctionDef(name='_should_use_importlib_metadata', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Whether to use the ``importlib.metadata`` or ``pkg_resources`` backend.\n\n    By default, pip uses ``importlib.metadata`` on Python 3.11+, and\n    ``pkg_resourcess`` otherwise. This can be overridden by a couple of ways:\n\n    * If environment variable ``_PIP_USE_IMPORTLIB_METADATA`` is set, it\n      dictates whether ``importlib.metadata`` is used, regardless of Python\n      version.\n    * On Python 3.11+, Python distributors can patch ``importlib.metadata``\n      to add a global constant ``_PIP_USE_IMPORTLIB_METADATA = False``. This\n      makes pip use ``pkg_resources`` (unless the user set the aforementioned\n      environment variable to *True*).\n    ')), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='contextlib', ctx=Load()), attr='suppress', ctx=Load()), args=[Name(id='KeyError', ctx=Load()), Name(id='ValueError', ctx=Load())], keywords=[]))], body=[Return(value=Call(func=Name(id='bool', ctx=Load()), args=[Call(func=Name(id='strtobool', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), slice=Constant(value='_PIP_USE_IMPORTLIB_METADATA'), ctx=Load())], keywords=[])], keywords=[]))]), If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), ops=[Lt()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=11)], ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), Import(names=[alias(name='importlib.metadata')]), Return(value=Call(func=Name(id='bool', ctx=Load()), args=[Call(func=Name(id='getattr', ctx=Load()), args=[Attribute(value=Name(id='importlib', ctx=Load()), attr='metadata', ctx=Load()), Constant(value='_PIP_USE_IMPORTLIB_METADATA'), Constant(value=True)], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), ClassDef(name='Backend', bases=[Name(id='Protocol', ctx=Load())], keywords=[], body=[AnnAssign(target=Name(id='NAME', ctx=Store()), annotation=Constant(value='Literal["importlib", "pkg_resources"]'), simple=1), AnnAssign(target=Name(id='Distribution', ctx=Store()), annotation=Subscript(value=Name(id='Type', ctx=Load()), slice=Name(id='BaseDistribution', ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='Environment', ctx=Store()), annotation=Subscript(value=Name(id='Type', ctx=Load()), slice=Name(id='BaseEnvironment', ctx=Load()), ctx=Load()), simple=1)], decorator_list=[]), FunctionDef(name='select_backend', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='_should_use_importlib_metadata', ctx=Load()), args=[], keywords=[]), body=[ImportFrom(names=[alias(name='importlib')], level=1), Return(value=Call(func=Name(id='cast', ctx=Load()), args=[Name(id='Backend', ctx=Load()), Name(id='importlib', ctx=Load())], keywords=[]))], orelse=[]), ImportFrom(names=[alias(name='pkg_resources')], level=1), Return(value=Call(func=Name(id='cast', ctx=Load()), args=[Name(id='Backend', ctx=Load()), Name(id='pkg_resources', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='lru_cache', ctx=Load()), args=[], keywords=[keyword(arg='maxsize', value=Constant(value=None))])], returns=Name(id='Backend', ctx=Load())), FunctionDef(name='get_default_environment', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get the default representation for the current environment.\n\n    This returns an Environment instance from the chosen backend. The default\n    Environment instance should be built from ``sys.path`` and may use caching\n    to share instance state accorss calls.\n    ')), Return(value=Call(func=Attribute(value=Attribute(value=Call(func=Name(id='select_backend', ctx=Load()), args=[], keywords=[]), attr='Environment', ctx=Load()), attr='default', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='BaseEnvironment', ctx=Load())), FunctionDef(name='get_environment', args=arguments(posonlyargs=[], args=[arg(arg='paths', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get a representation of the environment specified by ``paths``.\n\n    This returns an Environment instance from the chosen backend based on the\n    given import paths. The backend must build a fresh instance representing\n    the state of installed distributions when this function is called.\n    ')), Return(value=Call(func=Attribute(value=Attribute(value=Call(func=Name(id='select_backend', ctx=Load()), args=[], keywords=[]), attr='Environment', ctx=Load()), attr='from_paths', ctx=Load()), args=[Name(id='paths', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='BaseEnvironment', ctx=Load())), FunctionDef(name='get_directory_distribution', args=arguments(posonlyargs=[], args=[arg(arg='directory', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get the distribution metadata representation in the specified directory.\n\n    This returns a Distribution instance from the chosen backend based on\n    the given on-disk ``.dist-info`` directory.\n    ')), Return(value=Call(func=Attribute(value=Attribute(value=Call(func=Name(id='select_backend', ctx=Load()), args=[], keywords=[]), attr='Distribution', ctx=Load()), attr='from_directory', ctx=Load()), args=[Name(id='directory', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='BaseDistribution', ctx=Load())), FunctionDef(name='get_wheel_distribution', args=arguments(posonlyargs=[], args=[arg(arg='wheel', annotation=Name(id='Wheel', ctx=Load())), arg(arg='canonical_name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Get the representation of the specified wheel's distribution metadata.\n\n    This returns a Distribution instance from the chosen backend based on\n    the given wheel's ``.dist-info`` directory.\n\n    :param canonical_name: Normalized project name of the given wheel.\n    ")), Return(value=Call(func=Attribute(value=Attribute(value=Call(func=Name(id='select_backend', ctx=Load()), args=[], keywords=[]), attr='Distribution', ctx=Load()), attr='from_wheel', ctx=Load()), args=[Name(id='wheel', ctx=Load()), Name(id='canonical_name', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='BaseDistribution', ctx=Load())), FunctionDef(name='get_metadata_distribution', args=arguments(posonlyargs=[], args=[arg(arg='metadata_contents', annotation=Name(id='bytes', ctx=Load())), arg(arg='filename', annotation=Name(id='str', ctx=Load())), arg(arg='canonical_name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get the dist representation of the specified METADATA file contents.\n\n    This returns a Distribution instance from the chosen backend sourced from the data\n    in `metadata_contents`.\n\n    :param metadata_contents: Contents of a METADATA file within a dist, or one served\n                              via PEP 658.\n    :param filename: Filename for the dist this metadata represents.\n    :param canonical_name: Normalized project name of the given dist.\n    ')), Return(value=Call(func=Attribute(value=Attribute(value=Call(func=Name(id='select_backend', ctx=Load()), args=[], keywords=[]), attr='Distribution', ctx=Load()), attr='from_metadata_file_contents', ctx=Load()), args=[Name(id='metadata_contents', ctx=Load()), Name(id='filename', ctx=Load()), Name(id='canonical_name', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='BaseDistribution', ctx=Load()))], type_ignores=[])