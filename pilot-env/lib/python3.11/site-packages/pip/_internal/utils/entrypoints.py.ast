Module(body=[Import(names=[alias(name='itertools')]), Import(names=[alias(name='os')]), Import(names=[alias(name='shutil')]), Import(names=[alias(name='sys')]), ImportFrom(module='typing', names=[alias(name='List'), alias(name='Optional')], level=0), ImportFrom(module='pip._internal.cli.main', names=[alias(name='main')], level=0), ImportFrom(module='pip._internal.utils.compat', names=[alias(name='WINDOWS')], level=0), Assign(targets=[Name(id='_EXECUTABLE_NAMES', ctx=Store())], value=List(elts=[Constant(value='pip'), JoinedStr(values=[Constant(value='pip'), FormattedValue(value=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), attr='major', ctx=Load()), conversion=-1)]), JoinedStr(values=[Constant(value='pip'), FormattedValue(value=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), attr='major', ctx=Load()), conversion=-1), Constant(value='.'), FormattedValue(value=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), attr='minor', ctx=Load()), conversion=-1)])], ctx=Load())), If(test=Name(id='WINDOWS', ctx=Load()), body=[Assign(targets=[Name(id='_allowed_extensions', ctx=Store())], value=Set(elts=[Constant(value=''), Constant(value='.exe')])), Assign(targets=[Name(id='_EXECUTABLE_NAMES', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Name(id='parts', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='parts', ctx=Store()), iter=Call(func=Attribute(value=Name(id='itertools', ctx=Load()), attr='product', ctx=Load()), args=[Name(id='_EXECUTABLE_NAMES', ctx=Load()), Name(id='_allowed_extensions', ctx=Load())], keywords=[]), ifs=[], is_async=0)]))], orelse=[]), FunctionDef(name='_wrapper', args=arguments(posonlyargs=[], args=[arg(arg='args', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='Central wrapper for all old entrypoints.\n\n    Historically pip has had several entrypoints defined. Because of issues\n    arising from PATH, sys.path, multiple Pythons, their interactions, and most\n    of them having a pip installed, users suffer every time an entrypoint gets\n    moved.\n\n    To alleviate this pain, and provide a mechanism for warning users and\n    directing them to an appropriate place for help, we now define all of\n    our old entrypoints as wrappers for the current one.\n    ')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value="WARNING: pip is being invoked by an old script wrapper. This will fail in a future version of pip.\nPlease see https://github.com/pypa/pip/issues/5599 for advice on fixing the underlying issue.\nTo avoid this problem you can invoke Python with '-m pip' instead of running pip directly.\n")], keywords=[])), Return(value=Call(func=Name(id='main', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='get_best_invocation_for_this_pip', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Try to figure out the best way to invoke pip in the current environment.')), Assign(targets=[Name(id='binary_directory', ctx=Store())], value=IfExp(test=Name(id='WINDOWS', ctx=Load()), body=Constant(value='Scripts'), orelse=Constant(value='bin'))), Assign(targets=[Name(id='binary_prefix', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='prefix', ctx=Load()), Name(id='binary_directory', ctx=Load())], keywords=[])), Assign(targets=[Name(id='path_parts', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normcase', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='PATH'), Constant(value='')], keywords=[])], keywords=[]), attr='split', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='pathsep', ctx=Load())], keywords=[])), Assign(targets=[Name(id='exe_are_in_PATH', ctx=Store())], value=Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normcase', ctx=Load()), args=[Name(id='binary_prefix', ctx=Load())], keywords=[]), ops=[In()], comparators=[Name(id='path_parts', ctx=Load())])), If(test=Name(id='exe_are_in_PATH', ctx=Load()), body=[For(target=Name(id='exe_name', ctx=Store()), iter=Name(id='_EXECUTABLE_NAMES', ctx=Load()), body=[Assign(targets=[Name(id='found_executable', ctx=Store())], value=Call(func=Attribute(value=Name(id='shutil', ctx=Load()), attr='which', ctx=Load()), args=[Name(id='exe_name', ctx=Load())], keywords=[])), Assign(targets=[Name(id='binary_executable', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='binary_prefix', ctx=Load()), Name(id='exe_name', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Name(id='found_executable', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='binary_executable', ctx=Load())], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='samefile', ctx=Load()), args=[Name(id='found_executable', ctx=Load()), Name(id='binary_executable', ctx=Load())], keywords=[])]), body=[Return(value=Name(id='exe_name', ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Return(value=JoinedStr(values=[FormattedValue(value=Call(func=Name(id='get_best_invocation_for_this_python', ctx=Load()), args=[], keywords=[]), conversion=-1), Constant(value=' -m pip')]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='get_best_invocation_for_this_python', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Try to figure out the best way to invoke the current Python.')), Assign(targets=[Name(id='exe', ctx=Store())], value=Attribute(value=Name(id='sys', ctx=Load()), attr='executable', ctx=Load())), Assign(targets=[Name(id='exe_name', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='basename', ctx=Load()), args=[Name(id='exe', ctx=Load())], keywords=[])), Assign(targets=[Name(id='found_executable', ctx=Store())], value=Call(func=Attribute(value=Name(id='shutil', ctx=Load()), attr='which', ctx=Load()), args=[Name(id='exe_name', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Name(id='found_executable', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='samefile', ctx=Load()), args=[Name(id='found_executable', ctx=Load()), Name(id='exe', ctx=Load())], keywords=[])]), body=[Return(value=Name(id='exe_name', ctx=Load()))], orelse=[]), Return(value=Name(id='exe', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load()))], type_ignores=[])