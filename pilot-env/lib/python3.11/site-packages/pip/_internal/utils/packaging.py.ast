Module(body=[Import(names=[alias(name='functools')]), Import(names=[alias(name='logging')]), Import(names=[alias(name='re')]), ImportFrom(module='typing', names=[alias(name='NewType'), alias(name='Optional'), alias(name='Tuple'), alias(name='cast')], level=0), ImportFrom(module='pip._vendor.packaging', names=[alias(name='specifiers'), alias(name='version')], level=0), ImportFrom(module='pip._vendor.packaging.requirements', names=[alias(name='Requirement')], level=0), Assign(targets=[Name(id='NormalizedExtra', ctx=Store())], value=Call(func=Name(id='NewType', ctx=Load()), args=[Constant(value='NormalizedExtra'), Name(id='str', ctx=Load())], keywords=[])), Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), FunctionDef(name='check_requires_python', args=arguments(posonlyargs=[], args=[arg(arg='requires_python', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='version_info', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Check if the given Python version matches a "Requires-Python" specifier.\n\n    :param version_info: A 3-tuple of ints representing a Python\n        major-minor-micro version to check (e.g. `sys.version_info[:3]`).\n\n    :return: `True` if the given Python version satisfies the requirement.\n        Otherwise, return `False`.\n\n    :raises InvalidSpecifier: If `requires_python` has an invalid format.\n    ')), If(test=Compare(left=Name(id='requires_python', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='requires_python_specifier', ctx=Store())], value=Call(func=Attribute(value=Name(id='specifiers', ctx=Load()), attr='SpecifierSet', ctx=Load()), args=[Name(id='requires_python', ctx=Load())], keywords=[])), Assign(targets=[Name(id='python_version', ctx=Store())], value=Call(func=Attribute(value=Name(id='version', ctx=Load()), attr='parse', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='.'), attr='join', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Name(id='str', ctx=Load()), Name(id='version_info', ctx=Load())], keywords=[])], keywords=[])], keywords=[])), Return(value=Compare(left=Name(id='python_version', ctx=Load()), ops=[In()], comparators=[Name(id='requires_python_specifier', ctx=Load())]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='get_requirement', args=arguments(posonlyargs=[], args=[arg(arg='req_string', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Construct a packaging.Requirement object with caching')), Return(value=Call(func=Name(id='Requirement', ctx=Load()), args=[Name(id='req_string', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='lru_cache', ctx=Load()), args=[], keywords=[keyword(arg='maxsize', value=Constant(value=512))])], returns=Name(id='Requirement', ctx=Load())), FunctionDef(name='safe_extra', args=arguments(posonlyargs=[], args=[arg(arg='extra', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Convert an arbitrary string to a standard 'extra' name\n\n    Any runs of non-alphanumeric characters are replaced with a single '_',\n    and the result is always lowercased.\n\n    This function is duplicated from ``pkg_resources``. Note that this is not\n    the same to either ``canonicalize_name`` or ``_egg_link_name``.\n    ")), Return(value=Call(func=Name(id='cast', ctx=Load()), args=[Name(id='NormalizedExtra', ctx=Load()), Call(func=Attribute(value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value='[^A-Za-z0-9.-]+'), Constant(value='_'), Name(id='extra', ctx=Load())], keywords=[]), attr='lower', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='NormalizedExtra', ctx=Load()))], type_ignores=[])