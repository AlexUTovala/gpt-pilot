Module(body=[Expr(value=Constant(value='Utilities related archives.\n')), Import(names=[alias(name='logging')]), Import(names=[alias(name='os')]), Import(names=[alias(name='shutil')]), Import(names=[alias(name='stat')]), Import(names=[alias(name='tarfile')]), Import(names=[alias(name='zipfile')]), ImportFrom(module='typing', names=[alias(name='Iterable'), alias(name='List'), alias(name='Optional')], level=0), ImportFrom(module='zipfile', names=[alias(name='ZipInfo')], level=0), ImportFrom(module='pip._internal.exceptions', names=[alias(name='InstallationError')], level=0), ImportFrom(module='pip._internal.utils.filetypes', names=[alias(name='BZ2_EXTENSIONS'), alias(name='TAR_EXTENSIONS'), alias(name='XZ_EXTENSIONS'), alias(name='ZIP_EXTENSIONS')], level=0), ImportFrom(module='pip._internal.utils.misc', names=[alias(name='ensure_dir')], level=0), Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), Assign(targets=[Name(id='SUPPORTED_EXTENSIONS', ctx=Store())], value=BinOp(left=Name(id='ZIP_EXTENSIONS', ctx=Load()), op=Add(), right=Name(id='TAR_EXTENSIONS', ctx=Load()))), Try(body=[Import(names=[alias(name='bz2')]), AugAssign(target=Name(id='SUPPORTED_EXTENSIONS', ctx=Store()), op=Add(), value=Name(id='BZ2_EXTENSIONS', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='bz2 module is not available')], keywords=[]))])], orelse=[], finalbody=[]), Try(body=[Import(names=[alias(name='lzma')]), AugAssign(target=Name(id='SUPPORTED_EXTENSIONS', ctx=Store()), op=Add(), value=Name(id='XZ_EXTENSIONS', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='lzma module is not available')], keywords=[]))])], orelse=[], finalbody=[]), FunctionDef(name='current_umask', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get the current umask which involves having to set it temporarily.')), Assign(targets=[Name(id='mask', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='umask', ctx=Load()), args=[Constant(value=0)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='umask', ctx=Load()), args=[Name(id='mask', ctx=Load())], keywords=[])), Return(value=Name(id='mask', ctx=Load()))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='split_leading_dir', args=arguments(posonlyargs=[], args=[arg(arg='path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='lstrip', ctx=Load()), args=[Constant(value='/')], keywords=[]), attr='lstrip', ctx=Load()), args=[Constant(value='\\')], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Constant(value='/'), ops=[In()], comparators=[Name(id='path', ctx=Load())]), BoolOp(op=Or(), values=[BoolOp(op=And(), values=[Compare(left=Constant(value='\\'), ops=[In()], comparators=[Name(id='path', ctx=Load())]), Compare(left=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='find', ctx=Load()), args=[Constant(value='/')], keywords=[]), ops=[Lt()], comparators=[Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='find', ctx=Load()), args=[Constant(value='\\')], keywords=[])])]), Compare(left=Constant(value='\\'), ops=[NotIn()], comparators=[Name(id='path', ctx=Load())])])]), body=[Return(value=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='/'), Constant(value=1)], keywords=[]))], orelse=[If(test=Compare(left=Constant(value='\\'), ops=[In()], comparators=[Name(id='path', ctx=Load())]), body=[Return(value=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='\\'), Constant(value=1)], keywords=[]))], orelse=[Return(value=List(elts=[Name(id='path', ctx=Load()), Constant(value='')], ctx=Load()))])])], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='has_leading_dir', args=arguments(posonlyargs=[], args=[arg(arg='paths', annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Returns true if all the paths have the same leading path name\n    (i.e., everything is in one subdirectory in an archive)')), Assign(targets=[Name(id='common_prefix', ctx=Store())], value=Constant(value=None)), For(target=Name(id='path', ctx=Store()), iter=Name(id='paths', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='prefix', ctx=Store()), Name(id='rest', ctx=Store())], ctx=Store())], value=Call(func=Name(id='split_leading_dir', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='prefix', ctx=Load())), body=[Return(value=Constant(value=False))], orelse=[If(test=Compare(left=Name(id='common_prefix', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='common_prefix', ctx=Store())], value=Name(id='prefix', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='prefix', ctx=Load()), ops=[NotEq()], comparators=[Name(id='common_prefix', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[])])])], orelse=[]), Return(value=Constant(value=True))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='is_within_directory', args=arguments(posonlyargs=[], args=[arg(arg='directory', annotation=Name(id='str', ctx=Load())), arg(arg='target', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Return true if the absolute path of target is within the directory\n    ')), Assign(targets=[Name(id='abs_directory', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Name(id='directory', ctx=Load())], keywords=[])), Assign(targets=[Name(id='abs_target', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Name(id='target', ctx=Load())], keywords=[])), Assign(targets=[Name(id='prefix', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='commonprefix', ctx=Load()), args=[List(elts=[Name(id='abs_directory', ctx=Load()), Name(id='abs_target', ctx=Load())], ctx=Load())], keywords=[])), Return(value=Compare(left=Name(id='prefix', ctx=Load()), ops=[Eq()], comparators=[Name(id='abs_directory', ctx=Load())]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='set_extracted_file_to_default_mode_plus_executable', args=arguments(posonlyargs=[], args=[arg(arg='path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Make file present at path have execute for user/group/world\n    (chmod +x) is no-op on windows per python docs\n    ')), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='chmod', ctx=Load()), args=[Name(id='path', ctx=Load()), BinOp(left=BinOp(left=Constant(value=511), op=BitAnd(), right=UnaryOp(op=Invert(), operand=Call(func=Name(id='current_umask', ctx=Load()), args=[], keywords=[]))), op=BitOr(), right=Constant(value=73))], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='zip_item_is_executable', args=arguments(posonlyargs=[], args=[arg(arg='info', annotation=Name(id='ZipInfo', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='mode', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='info', ctx=Load()), attr='external_attr', ctx=Load()), op=RShift(), right=Constant(value=16))), Return(value=Call(func=Name(id='bool', ctx=Load()), args=[BoolOp(op=And(), values=[Name(id='mode', ctx=Load()), Call(func=Attribute(value=Name(id='stat', ctx=Load()), attr='S_ISREG', ctx=Load()), args=[Name(id='mode', ctx=Load())], keywords=[]), BinOp(left=Name(id='mode', ctx=Load()), op=BitAnd(), right=Constant(value=73))])], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='unzip_file', args=arguments(posonlyargs=[], args=[arg(arg='filename', annotation=Name(id='str', ctx=Load())), arg(arg='location', annotation=Name(id='str', ctx=Load())), arg(arg='flatten', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Expr(value=Constant(value='\n    Unzip the file (with path `filename`) to the destination `location`.  All\n    files are written based on system defaults and umask (i.e. permissions are\n    not preserved), except that regular file members with any execute\n    permissions (user, group, or world) have "chmod +x" applied after being\n    written. Note that for windows, any execute changes using os.chmod are\n    no-ops per the python docs.\n    ')), Expr(value=Call(func=Name(id='ensure_dir', ctx=Load()), args=[Name(id='location', ctx=Load())], keywords=[])), Assign(targets=[Name(id='zipfp', ctx=Store())], value=Call(func=Name(id='open', ctx=Load()), args=[Name(id='filename', ctx=Load()), Constant(value='rb')], keywords=[])), Try(body=[Assign(targets=[Name(id='zip', ctx=Store())], value=Call(func=Attribute(value=Name(id='zipfile', ctx=Load()), attr='ZipFile', ctx=Load()), args=[Name(id='zipfp', ctx=Load())], keywords=[keyword(arg='allowZip64', value=Constant(value=True))])), Assign(targets=[Name(id='leading', ctx=Store())], value=BoolOp(op=And(), values=[Call(func=Name(id='has_leading_dir', ctx=Load()), args=[Call(func=Attribute(value=Name(id='zip', ctx=Load()), attr='namelist', ctx=Load()), args=[], keywords=[])], keywords=[]), Name(id='flatten', ctx=Load())])), For(target=Name(id='info', ctx=Store()), iter=Call(func=Attribute(value=Name(id='zip', ctx=Load()), attr='infolist', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Attribute(value=Name(id='info', ctx=Load()), attr='filename', ctx=Load())), Assign(targets=[Name(id='fn', ctx=Store())], value=Name(id='name', ctx=Load())), If(test=Name(id='leading', ctx=Load()), body=[Assign(targets=[Name(id='fn', ctx=Store())], value=Subscript(value=Call(func=Name(id='split_leading_dir', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]), slice=Constant(value=1), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='fn', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='location', ctx=Load()), Name(id='fn', ctx=Load())], keywords=[])), Assign(targets=[Name(id='dir', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Name(id='fn', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='is_within_directory', ctx=Load()), args=[Name(id='location', ctx=Load()), Name(id='fn', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='message', ctx=Store())], value=Constant(value='The zip file ({}) has a file ({}) trying to install outside target directory ({})')), Raise(exc=Call(func=Name(id='InstallationError', ctx=Load()), args=[Call(func=Attribute(value=Name(id='message', ctx=Load()), attr='format', ctx=Load()), args=[Name(id='filename', ctx=Load()), Name(id='fn', ctx=Load()), Name(id='location', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='fn', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='/')], keywords=[]), Call(func=Attribute(value=Name(id='fn', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='\\')], keywords=[])]), body=[Expr(value=Call(func=Name(id='ensure_dir', ctx=Load()), args=[Name(id='fn', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Name(id='ensure_dir', ctx=Load()), args=[Name(id='dir', ctx=Load())], keywords=[])), Assign(targets=[Name(id='fp', ctx=Store())], value=Call(func=Attribute(value=Name(id='zip', ctx=Load()), attr='open', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), Try(body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='fn', ctx=Load()), Constant(value='wb')], keywords=[]), optional_vars=Name(id='destfp', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='shutil', ctx=Load()), attr='copyfileobj', ctx=Load()), args=[Name(id='fp', ctx=Load()), Name(id='destfp', ctx=Load())], keywords=[]))])], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='fp', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), If(test=Call(func=Name(id='zip_item_is_executable', ctx=Load()), args=[Name(id='info', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Name(id='set_extracted_file_to_default_mode_plus_executable', ctx=Load()), args=[Name(id='fn', ctx=Load())], keywords=[]))], orelse=[])])])], orelse=[])], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='zipfp', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='untar_file', args=arguments(posonlyargs=[], args=[arg(arg='filename', annotation=Name(id='str', ctx=Load())), arg(arg='location', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Untar the file (with path `filename`) to the destination `location`.\n    All files are written based on system defaults and umask (i.e. permissions\n    are not preserved), except that regular file members with any execute\n    permissions (user, group, or world) have "chmod +x" applied after being\n    written.  Note that for windows, any execute changes using os.chmod are\n    no-ops per the python docs.\n    ')), Expr(value=Call(func=Name(id='ensure_dir', ctx=Load()), args=[Name(id='location', ctx=Load())], keywords=[])), If(test=BoolOp(op=Or(), values=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='filename', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), attr='endswith', ctx=Load()), args=[Constant(value='.gz')], keywords=[]), Call(func=Attribute(value=Call(func=Attribute(value=Name(id='filename', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), attr='endswith', ctx=Load()), args=[Constant(value='.tgz')], keywords=[])]), body=[Assign(targets=[Name(id='mode', ctx=Store())], value=Constant(value='r:gz'))], orelse=[If(test=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='filename', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), attr='endswith', ctx=Load()), args=[Name(id='BZ2_EXTENSIONS', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='mode', ctx=Store())], value=Constant(value='r:bz2'))], orelse=[If(test=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='filename', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), attr='endswith', ctx=Load()), args=[Name(id='XZ_EXTENSIONS', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='mode', ctx=Store())], value=Constant(value='r:xz'))], orelse=[If(test=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='filename', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), attr='endswith', ctx=Load()), args=[Constant(value='.tar')], keywords=[]), body=[Assign(targets=[Name(id='mode', ctx=Store())], value=Constant(value='r'))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='Cannot determine compression type for file %s'), Name(id='filename', ctx=Load())], keywords=[])), Assign(targets=[Name(id='mode', ctx=Store())], value=Constant(value='r:*'))])])])]), Assign(targets=[Name(id='tar', ctx=Store())], value=Call(func=Attribute(value=Name(id='tarfile', ctx=Load()), attr='open', ctx=Load()), args=[Name(id='filename', ctx=Load()), Name(id='mode', ctx=Load())], keywords=[keyword(arg='encoding', value=Constant(value='utf-8'))])), Try(body=[Assign(targets=[Name(id='leading', ctx=Store())], value=Call(func=Name(id='has_leading_dir', ctx=Load()), args=[ListComp(elt=Attribute(value=Name(id='member', ctx=Load()), attr='name', ctx=Load()), generators=[comprehension(target=Name(id='member', ctx=Store()), iter=Call(func=Attribute(value=Name(id='tar', ctx=Load()), attr='getmembers', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[])), For(target=Name(id='member', ctx=Store()), iter=Call(func=Attribute(value=Name(id='tar', ctx=Load()), attr='getmembers', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='fn', ctx=Store())], value=Attribute(value=Name(id='member', ctx=Load()), attr='name', ctx=Load())), If(test=Name(id='leading', ctx=Load()), body=[Assign(targets=[Name(id='fn', ctx=Store())], value=Subscript(value=Call(func=Name(id='split_leading_dir', ctx=Load()), args=[Name(id='fn', ctx=Load())], keywords=[]), slice=Constant(value=1), ctx=Load()))], orelse=[]), Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='location', ctx=Load()), Name(id='fn', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='is_within_directory', ctx=Load()), args=[Name(id='location', ctx=Load()), Name(id='path', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='message', ctx=Store())], value=Constant(value='The tar file ({}) has a file ({}) trying to install outside target directory ({})')), Raise(exc=Call(func=Name(id='InstallationError', ctx=Load()), args=[Call(func=Attribute(value=Name(id='message', ctx=Load()), attr='format', ctx=Load()), args=[Name(id='filename', ctx=Load()), Name(id='path', ctx=Load()), Name(id='location', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Call(func=Attribute(value=Name(id='member', ctx=Load()), attr='isdir', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Name(id='ensure_dir', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))], orelse=[If(test=Call(func=Attribute(value=Name(id='member', ctx=Load()), attr='issym', ctx=Load()), args=[], keywords=[]), body=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='tar', ctx=Load()), attr='_extract_member', ctx=Load()), args=[Name(id='member', ctx=Load()), Name(id='path', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='exc', body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='In the tar file %s the member %s is invalid: %s'), Name(id='filename', ctx=Load()), Attribute(value=Name(id='member', ctx=Load()), attr='name', ctx=Load()), Name(id='exc', ctx=Load())], keywords=[])), Continue()])], orelse=[], finalbody=[])], orelse=[Try(body=[Assign(targets=[Name(id='fp', ctx=Store())], value=Call(func=Attribute(value=Name(id='tar', ctx=Load()), attr='extractfile', ctx=Load()), args=[Name(id='member', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='KeyError', ctx=Load()), Name(id='AttributeError', ctx=Load())], ctx=Load()), name='exc', body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='In the tar file %s the member %s is invalid: %s'), Name(id='filename', ctx=Load()), Attribute(value=Name(id='member', ctx=Load()), attr='name', ctx=Load()), Name(id='exc', ctx=Load())], keywords=[])), Continue()])], orelse=[], finalbody=[]), Expr(value=Call(func=Name(id='ensure_dir', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])], keywords=[])), Assert(test=Compare(left=Name(id='fp', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='path', ctx=Load()), Constant(value='wb')], keywords=[]), optional_vars=Name(id='destfp', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='shutil', ctx=Load()), attr='copyfileobj', ctx=Load()), args=[Name(id='fp', ctx=Load()), Name(id='destfp', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='fp', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='tar', ctx=Load()), attr='utime', ctx=Load()), args=[Name(id='member', ctx=Load()), Name(id='path', ctx=Load())], keywords=[])), If(test=BinOp(left=Attribute(value=Name(id='member', ctx=Load()), attr='mode', ctx=Load()), op=BitAnd(), right=Constant(value=73)), body=[Expr(value=Call(func=Name(id='set_extracted_file_to_default_mode_plus_executable', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))], orelse=[])])])], orelse=[])], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='tar', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='unpack_file', args=arguments(posonlyargs=[], args=[arg(arg='filename', annotation=Name(id='str', ctx=Load())), arg(arg='location', annotation=Name(id='str', ctx=Load())), arg(arg='content_type', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Name(id='filename', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='realpath', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='content_type', ctx=Load()), ops=[Eq()], comparators=[Constant(value='application/zip')]), Call(func=Attribute(value=Call(func=Attribute(value=Name(id='filename', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), attr='endswith', ctx=Load()), args=[Name(id='ZIP_EXTENSIONS', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='zipfile', ctx=Load()), attr='is_zipfile', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Name(id='unzip_file', ctx=Load()), args=[Name(id='filename', ctx=Load()), Name(id='location', ctx=Load())], keywords=[keyword(arg='flatten', value=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='filename', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='.whl')], keywords=[])))]))], orelse=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='content_type', ctx=Load()), ops=[Eq()], comparators=[Constant(value='application/x-gzip')]), Call(func=Attribute(value=Name(id='tarfile', ctx=Load()), attr='is_tarfile', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[]), Call(func=Attribute(value=Call(func=Attribute(value=Name(id='filename', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), attr='endswith', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='TAR_EXTENSIONS', ctx=Load()), op=Add(), right=Name(id='BZ2_EXTENSIONS', ctx=Load())), op=Add(), right=Name(id='XZ_EXTENSIONS', ctx=Load()))], keywords=[])]), body=[Expr(value=Call(func=Name(id='untar_file', ctx=Load()), args=[Name(id='filename', ctx=Load()), Name(id='location', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='critical', ctx=Load()), args=[Constant(value='Cannot unpack file %s (downloaded from %s, content-type: %s); cannot detect archive format'), Name(id='filename', ctx=Load()), Name(id='location', ctx=Load()), Name(id='content_type', ctx=Load())], keywords=[])), Raise(exc=Call(func=Name(id='InstallationError', ctx=Load()), args=[JoinedStr(values=[Constant(value='Cannot determine archive format of '), FormattedValue(value=Name(id='location', ctx=Load()), conversion=-1)])], keywords=[]))])])], decorator_list=[], returns=Constant(value=None))], type_ignores=[])