Module(body=[Import(names=[alias(name='hashlib')]), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING'), alias(name='BinaryIO'), alias(name='Dict'), alias(name='Iterable'), alias(name='List'), alias(name='Optional')], level=0), ImportFrom(module='pip._internal.exceptions', names=[alias(name='HashMismatch'), alias(name='HashMissing'), alias(name='InstallationError')], level=0), ImportFrom(module='pip._internal.utils.misc', names=[alias(name='read_chunks')], level=0), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='hashlib', names=[alias(name='_Hash')], level=0), ImportFrom(module='typing', names=[alias(name='NoReturn')], level=0)], orelse=[]), Assign(targets=[Name(id='FAVORITE_HASH', ctx=Store())], value=Constant(value='sha256')), Assign(targets=[Name(id='STRONG_HASHES', ctx=Store())], value=List(elts=[Constant(value='sha256'), Constant(value='sha384'), Constant(value='sha512')], ctx=Load())), ClassDef(name='Hashes', bases=[], keywords=[], body=[Expr(value=Constant(value='A wrapper that builds multiple hashes at once and checks them against\n    known-good values\n\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='hashes', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='\n        :param hashes: A dict of algorithm names pointing to lists of allowed\n            hex digests\n        ')), Assign(targets=[Name(id='allowed', ctx=Store())], value=Dict(keys=[], values=[])), If(test=Compare(left=Name(id='hashes', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[For(target=Tuple(elts=[Name(id='alg', ctx=Store()), Name(id='keys', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='hashes', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Subscript(value=Name(id='allowed', ctx=Load()), slice=Name(id='alg', ctx=Load()), ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='keys', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_allowed', ctx=Store())], value=Name(id='allowed', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__and__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other', annotation=Constant(value='Hashes'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='other', ctx=Load()), Name(id='Hashes', ctx=Load())], keywords=[])), body=[Return(value=Name(id='NotImplemented', ctx=Load()))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='other', ctx=Load())), body=[Return(value=Name(id='self', ctx=Load()))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='self', ctx=Load())), body=[Return(value=Name(id='other', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='new', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='alg', ctx=Store()), Name(id='values', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='other', ctx=Load()), attr='_allowed', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Name(id='alg', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_allowed', ctx=Load())]), body=[Continue()], orelse=[]), Assign(targets=[Subscript(value=Name(id='new', ctx=Load()), slice=Name(id='alg', ctx=Load()), ctx=Store())], value=ListComp(elt=Name(id='v', ctx=Load()), generators=[comprehension(target=Name(id='v', ctx=Store()), iter=Name(id='values', ctx=Load()), ifs=[Compare(left=Name(id='v', ctx=Load()), ops=[In()], comparators=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_allowed', ctx=Load()), slice=Name(id='alg', ctx=Load()), ctx=Load())])], is_async=0)]))], orelse=[]), Return(value=Call(func=Name(id='Hashes', ctx=Load()), args=[Name(id='new', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value='Hashes')), FunctionDef(name='digest_count', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='sum', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='len', ctx=Load()), args=[Name(id='digests', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='digests', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_allowed', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='int', ctx=Load())), FunctionDef(name='is_hash_allowed', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='hash_name', annotation=Name(id='str', ctx=Load())), arg(arg='hex_digest', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return whether the given hex digest is allowed.')), Return(value=Compare(left=Name(id='hex_digest', ctx=Load()), ops=[In()], comparators=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_allowed', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='hash_name', ctx=Load()), List(elts=[], ctx=Load())], keywords=[])]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='check_against_chunks', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='chunks', annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='bytes', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check good hashes against ones built from iterable of chunks of\n        data.\n\n        Raise HashMismatch if none match.\n\n        ')), Assign(targets=[Name(id='gots', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='hash_name', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_allowed', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[]), body=[Try(body=[Assign(targets=[Subscript(value=Name(id='gots', ctx=Load()), slice=Name(id='hash_name', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Name(id='hashlib', ctx=Load()), attr='new', ctx=Load()), args=[Name(id='hash_name', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='ValueError', ctx=Load()), Name(id='TypeError', ctx=Load())], ctx=Load()), body=[Raise(exc=Call(func=Name(id='InstallationError', ctx=Load()), args=[JoinedStr(values=[Constant(value='Unknown hash name: '), FormattedValue(value=Name(id='hash_name', ctx=Load()), conversion=-1)])], keywords=[]))])], orelse=[], finalbody=[])], orelse=[]), For(target=Name(id='chunk', ctx=Store()), iter=Name(id='chunks', ctx=Load()), body=[For(target=Name(id='hash', ctx=Store()), iter=Call(func=Attribute(value=Name(id='gots', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='hash', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='chunk', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), For(target=Tuple(elts=[Name(id='hash_name', ctx=Store()), Name(id='got', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='gots', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='got', ctx=Load()), attr='hexdigest', ctx=Load()), args=[], keywords=[]), ops=[In()], comparators=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_allowed', ctx=Load()), slice=Name(id='hash_name', ctx=Load()), ctx=Load())]), body=[Return()], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_raise', ctx=Load()), args=[Name(id='gots', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_raise', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='gots', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Constant(value='_Hash')], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Call(func=Name(id='HashMismatch', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_allowed', ctx=Load()), Name(id='gots', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value='NoReturn')), FunctionDef(name='check_against_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='file', annotation=Name(id='BinaryIO', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check good hashes against a file-like object\n\n        Raise HashMismatch if none match.\n\n        ')), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='check_against_chunks', ctx=Load()), args=[Call(func=Name(id='read_chunks', ctx=Load()), args=[Name(id='file', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='check_against_path', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='path', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='file', ctx=Store()))], body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='check_against_file', ctx=Load()), args=[Name(id='file', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='has_one_of', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='hashes', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return whether any of the given hashes are allowed.')), For(target=Tuple(elts=[Name(id='hash_name', ctx=Store()), Name(id='hex_digest', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='hashes', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='is_hash_allowed', ctx=Load()), args=[Name(id='hash_name', ctx=Load()), Name(id='hex_digest', ctx=Load())], keywords=[]), body=[Return(value=Constant(value=True))], orelse=[])], orelse=[]), Return(value=Constant(value=False))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='__bool__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return whether I know any known-good hashes.')), Return(value=Call(func=Name(id='bool', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_allowed', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='__eq__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other', annotation=Name(id='object', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='other', ctx=Load()), Name(id='Hashes', ctx=Load())], keywords=[])), body=[Return(value=Name(id='NotImplemented', ctx=Load()))], orelse=[]), Return(value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_allowed', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='other', ctx=Load()), attr='_allowed', ctx=Load())]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='__hash__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='hash', ctx=Load()), args=[Call(func=Attribute(value=Constant(value=','), attr='join', ctx=Load()), args=[Call(func=Name(id='sorted', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Constant(value=':'), attr='join', ctx=Load()), args=[Tuple(elts=[Name(id='alg', ctx=Load()), Name(id='digest', ctx=Load())], ctx=Load())], keywords=[]), generators=[comprehension(target=Tuple(elts=[Name(id='alg', ctx=Store()), Name(id='digest_list', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_allowed', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0), comprehension(target=Name(id='digest', ctx=Store()), iter=Name(id='digest_list', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='int', ctx=Load()))], decorator_list=[]), ClassDef(name='MissingHashes', bases=[Name(id='Hashes', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="A workalike for Hashes used when we're missing a hash for a requirement\n\n    It computes the actual hash of the requirement and raises a HashMissing\n    exception showing it to the user.\n\n    ")), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Don't offer the ``hashes`` kwarg.")), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='hashes', value=Dict(keys=[Name(id='FAVORITE_HASH', ctx=Load())], values=[List(elts=[], ctx=Load())]))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_raise', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='gots', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Constant(value='_Hash')], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Call(func=Name(id='HashMissing', ctx=Load()), args=[Call(func=Attribute(value=Subscript(value=Name(id='gots', ctx=Load()), slice=Name(id='FAVORITE_HASH', ctx=Load()), ctx=Load()), attr='hexdigest', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[], returns=Constant(value='NoReturn'))], decorator_list=[])], type_ignores=[])