Module(body=[Import(names=[alias(name='os')]), Import(names=[alias(name='string')]), Import(names=[alias(name='urllib.parse')]), Import(names=[alias(name='urllib.request')]), ImportFrom(module='typing', names=[alias(name='Optional')], level=0), ImportFrom(module='compat', names=[alias(name='WINDOWS')], level=1), FunctionDef(name='get_url_scheme', args=arguments(posonlyargs=[], args=[arg(arg='url', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Constant(value=':'), ops=[NotIn()], comparators=[Name(id='url', ctx=Load())]), body=[Return(value=Constant(value=None))], orelse=[]), Return(value=Call(func=Attribute(value=Subscript(value=Call(func=Attribute(value=Name(id='url', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=':'), Constant(value=1)], keywords=[]), slice=Constant(value=0), ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='path_to_url', args=arguments(posonlyargs=[], args=[arg(arg='path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Convert a path to a file: URL.  The path will be made absolute and have\n    quoted path parts.\n    ')), Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normpath', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='url', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='urllib', ctx=Load()), attr='parse', ctx=Load()), attr='urljoin', ctx=Load()), args=[Constant(value='file:'), Call(func=Attribute(value=Attribute(value=Name(id='urllib', ctx=Load()), attr='request', ctx=Load()), attr='pathname2url', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])], keywords=[])), Return(value=Name(id='url', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='url_to_path', args=arguments(posonlyargs=[], args=[arg(arg='url', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Convert a file: URL to a path.\n    ')), Assert(test=Call(func=Attribute(value=Name(id='url', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='file:')], keywords=[]), msg=JoinedStr(values=[Constant(value='You can only turn file: urls into filenames (not '), FormattedValue(value=Name(id='url', ctx=Load()), conversion=114), Constant(value=')')])), Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='netloc', ctx=Store()), Name(id='path', ctx=Store()), Name(id='_', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='urllib', ctx=Load()), attr='parse', ctx=Load()), attr='urlsplit', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[])), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Name(id='netloc', ctx=Load())), Compare(left=Name(id='netloc', ctx=Load()), ops=[Eq()], comparators=[Constant(value='localhost')])]), body=[Assign(targets=[Name(id='netloc', ctx=Store())], value=Constant(value=''))], orelse=[If(test=Name(id='WINDOWS', ctx=Load()), body=[Assign(targets=[Name(id='netloc', ctx=Store())], value=BinOp(left=Constant(value='\\\\'), op=Add(), right=Name(id='netloc', ctx=Load())))], orelse=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[JoinedStr(values=[Constant(value='non-local file URIs are not supported on this platform: '), FormattedValue(value=Name(id='url', ctx=Load()), conversion=114)])], keywords=[]))])]), Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='urllib', ctx=Load()), attr='request', ctx=Load()), attr='url2pathname', ctx=Load()), args=[BinOp(left=Name(id='netloc', ctx=Load()), op=Add(), right=Name(id='path', ctx=Load()))], keywords=[])), If(test=BoolOp(op=And(), values=[Name(id='WINDOWS', ctx=Load()), UnaryOp(op=Not(), operand=Name(id='netloc', ctx=Load())), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), ops=[GtE()], comparators=[Constant(value=3)]), Compare(left=Subscript(value=Name(id='path', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Constant(value='/')]), Compare(left=Subscript(value=Name(id='path', ctx=Load()), slice=Constant(value=1), ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='string', ctx=Load()), attr='ascii_letters', ctx=Load())]), Compare(left=Subscript(value=Name(id='path', ctx=Load()), slice=Slice(lower=Constant(value=2), upper=Constant(value=4)), ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value=':'), Constant(value=':/')], ctx=Load())])]), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Subscript(value=Name(id='path', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()))], orelse=[]), Return(value=Name(id='path', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load()))], type_ignores=[])