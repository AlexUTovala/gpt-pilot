Module(body=[Import(names=[alias(name='logging')]), Import(names=[alias(name='os')]), Import(names=[alias(name='re')]), Import(names=[alias(name='site')]), Import(names=[alias(name='sys')]), ImportFrom(module='typing', names=[alias(name='List'), alias(name='Optional')], level=0), Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), Assign(targets=[Name(id='_INCLUDE_SYSTEM_SITE_PACKAGES_REGEX', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='include-system-site-packages\\s*=\\s*(?P<value>true|false)')], keywords=[])), FunctionDef(name='_running_under_venv', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Checks if sys.base_prefix and sys.prefix match.\n\n    This handles PEP 405 compliant virtual environments.\n    ')), Return(value=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='prefix', ctx=Load()), ops=[NotEq()], comparators=[Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='sys', ctx=Load()), Constant(value='base_prefix'), Attribute(value=Name(id='sys', ctx=Load()), attr='prefix', ctx=Load())], keywords=[])]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='_running_under_legacy_virtualenv', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Checks if sys.real_prefix is set.\n\n    This handles virtual environments created with pypa's virtualenv.\n    ")), Return(value=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='sys', ctx=Load()), Constant(value='real_prefix')], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='running_under_virtualenv', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="True if we're running inside a virtual environment, False otherwise.")), Return(value=BoolOp(op=Or(), values=[Call(func=Name(id='_running_under_venv', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='_running_under_legacy_virtualenv', ctx=Load()), args=[], keywords=[])]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='_get_pyvenv_cfg_lines', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Reads {sys.prefix}/pyvenv.cfg and returns its contents as list of lines\n\n    Returns None, if it could not read/access the file.\n    ')), Assign(targets=[Name(id='pyvenv_cfg_file', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='prefix', ctx=Load()), Constant(value='pyvenv.cfg')], keywords=[])), Try(body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='pyvenv_cfg_file', ctx=Load())], keywords=[keyword(arg='encoding', value=Constant(value='utf-8'))]), optional_vars=Name(id='f', ctx=Store()))], body=[Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]), attr='splitlines', ctx=Load()), args=[], keywords=[]))])], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), body=[Return(value=Constant(value=None))])], orelse=[], finalbody=[])], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='_no_global_under_venv', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check `{sys.prefix}/pyvenv.cfg` for system site-packages inclusion\n\n    PEP 405 specifies that when system site-packages are not supposed to be\n    visible from a virtual environment, `pyvenv.cfg` must contain the following\n    line:\n\n        include-system-site-packages = false\n\n    Additionally, log a warning if accessing the file fails.\n    ')), Assign(targets=[Name(id='cfg_lines', ctx=Store())], value=Call(func=Name(id='_get_pyvenv_cfg_lines', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='cfg_lines', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value="Could not access 'pyvenv.cfg' despite a virtual environment being active. Assuming global site-packages is not accessible in this environment.")], keywords=[])), Return(value=Constant(value=True))], orelse=[]), For(target=Name(id='line', ctx=Store()), iter=Name(id='cfg_lines', ctx=Load()), body=[Assign(targets=[Name(id='match', ctx=Store())], value=Call(func=Attribute(value=Name(id='_INCLUDE_SYSTEM_SITE_PACKAGES_REGEX', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='match', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value='value')], keywords=[]), ops=[Eq()], comparators=[Constant(value='false')])]), body=[Return(value=Constant(value=True))], orelse=[])], orelse=[]), Return(value=Constant(value=False))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='_no_global_under_legacy_virtualenv', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check if "no-global-site-packages.txt" exists beside site.py\n\n    This mirrors logic in pypa/virtualenv for determining whether system\n    site-packages are visible in the virtual environment.\n    ')), Assign(targets=[Name(id='site_mod_dir', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Attribute(value=Name(id='site', ctx=Load()), attr='__file__', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='no_global_site_packages_file', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='site_mod_dir', ctx=Load()), Constant(value='no-global-site-packages.txt')], keywords=[])), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='no_global_site_packages_file', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='virtualenv_no_global', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Returns a boolean, whether running in venv with no system site-packages.')), If(test=Call(func=Name(id='_running_under_venv', ctx=Load()), args=[], keywords=[]), body=[Return(value=Call(func=Name(id='_no_global_under_venv', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='_running_under_legacy_virtualenv', ctx=Load()), args=[], keywords=[]), body=[Return(value=Call(func=Name(id='_no_global_under_legacy_virtualenv', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Constant(value=False))], decorator_list=[], returns=Name(id='bool', ctx=Load()))], type_ignores=[])