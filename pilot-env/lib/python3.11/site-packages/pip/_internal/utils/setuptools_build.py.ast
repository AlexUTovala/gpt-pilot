Module(body=[Import(names=[alias(name='sys')]), Import(names=[alias(name='textwrap')]), ImportFrom(module='typing', names=[alias(name='List'), alias(name='Optional'), alias(name='Sequence')], level=0), Assign(targets=[Name(id='_SETUPTOOLS_SHIM', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='textwrap', ctx=Load()), attr='dedent', ctx=Load()), args=[Constant(value='\n    exec(compile(\'\'\'\n    # This is <pip-setuptools-caller> -- a caller that pip uses to run setup.py\n    #\n    # - It imports setuptools before invoking setup.py, to enable projects that directly\n    #   import from `distutils.core` to work with newer packaging standards.\n    # - It provides a clear error message when setuptools is not installed.\n    # - It sets `sys.argv[0]` to the underlying `setup.py`, when invoking `setup.py` so\n    #   setuptools doesn\'t think the script is `-c`. This avoids the following warning:\n    #     manifest_maker: standard file \'-c\' not found".\n    # - It generates a shim setup.py, for handling setup.cfg-only projects.\n    import os, sys, tokenize\n\n    try:\n        import setuptools\n    except ImportError as error:\n        print(\n            "ERROR: Can not execute `setup.py` since setuptools is not available in "\n            "the build environment.",\n            file=sys.stderr,\n        )\n        sys.exit(1)\n\n    __file__ = %r\n    sys.argv[0] = __file__\n\n    if os.path.exists(__file__):\n        filename = __file__\n        with tokenize.open(__file__) as f:\n            setup_py_code = f.read()\n    else:\n        filename = "<auto-generated setuptools caller>"\n        setup_py_code = "from setuptools import setup; setup()"\n\n    exec(compile(setup_py_code, filename, "exec"))\n    \'\'\' % ({!r},), "<pip-setuptools-caller>", "exec"))\n    ')], keywords=[]), attr='rstrip', ctx=Load()), args=[], keywords=[])), FunctionDef(name='make_setuptools_shim_args', args=arguments(posonlyargs=[], args=[arg(arg='setup_py_path', annotation=Name(id='str', ctx=Load())), arg(arg='global_options', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='no_user_config', annotation=Name(id='bool', ctx=Load())), arg(arg='unbuffered_output', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=False), Constant(value=False)]), body=[Expr(value=Constant(value='\n    Get setuptools command arguments with shim wrapped setup file invocation.\n\n    :param setup_py_path: The path to setup.py to be wrapped.\n    :param global_options: Additional global options.\n    :param no_user_config: If True, disables personal user configuration.\n    :param unbuffered_output: If True, adds the unbuffered switch to the\n     argument list.\n    ')), Assign(targets=[Name(id='args', ctx=Store())], value=List(elts=[Attribute(value=Name(id='sys', ctx=Load()), attr='executable', ctx=Load())], ctx=Load())), If(test=Name(id='unbuffered_output', ctx=Load()), body=[AugAssign(target=Name(id='args', ctx=Store()), op=Add(), value=List(elts=[Constant(value='-u')], ctx=Load()))], orelse=[]), AugAssign(target=Name(id='args', ctx=Store()), op=Add(), value=List(elts=[Constant(value='-c'), Call(func=Attribute(value=Name(id='_SETUPTOOLS_SHIM', ctx=Load()), attr='format', ctx=Load()), args=[Name(id='setup_py_path', ctx=Load())], keywords=[])], ctx=Load())), If(test=Name(id='global_options', ctx=Load()), body=[AugAssign(target=Name(id='args', ctx=Store()), op=Add(), value=Name(id='global_options', ctx=Load()))], orelse=[]), If(test=Name(id='no_user_config', ctx=Load()), body=[AugAssign(target=Name(id='args', ctx=Store()), op=Add(), value=List(elts=[Constant(value='--no-user-cfg')], ctx=Load()))], orelse=[]), Return(value=Name(id='args', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='make_setuptools_bdist_wheel_args', args=arguments(posonlyargs=[], args=[arg(arg='setup_py_path', annotation=Name(id='str', ctx=Load())), arg(arg='global_options', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='build_options', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='destination_dir', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='args', ctx=Store())], value=Call(func=Name(id='make_setuptools_shim_args', ctx=Load()), args=[Name(id='setup_py_path', ctx=Load())], keywords=[keyword(arg='global_options', value=Name(id='global_options', ctx=Load())), keyword(arg='unbuffered_output', value=Constant(value=True))])), AugAssign(target=Name(id='args', ctx=Store()), op=Add(), value=List(elts=[Constant(value='bdist_wheel'), Constant(value='-d'), Name(id='destination_dir', ctx=Load())], ctx=Load())), AugAssign(target=Name(id='args', ctx=Store()), op=Add(), value=Name(id='build_options', ctx=Load())), Return(value=Name(id='args', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='make_setuptools_clean_args', args=arguments(posonlyargs=[], args=[arg(arg='setup_py_path', annotation=Name(id='str', ctx=Load())), arg(arg='global_options', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='args', ctx=Store())], value=Call(func=Name(id='make_setuptools_shim_args', ctx=Load()), args=[Name(id='setup_py_path', ctx=Load())], keywords=[keyword(arg='global_options', value=Name(id='global_options', ctx=Load())), keyword(arg='unbuffered_output', value=Constant(value=True))])), AugAssign(target=Name(id='args', ctx=Store()), op=Add(), value=List(elts=[Constant(value='clean'), Constant(value='--all')], ctx=Load())), Return(value=Name(id='args', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='make_setuptools_develop_args', args=arguments(posonlyargs=[], args=[arg(arg='setup_py_path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[arg(arg='global_options', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='no_user_config', annotation=Name(id='bool', ctx=Load())), arg(arg='prefix', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='home', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='use_user_site', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[None, None, None, None, None], defaults=[]), body=[Assert(test=UnaryOp(op=Not(), operand=BoolOp(op=And(), values=[Name(id='use_user_site', ctx=Load()), Name(id='prefix', ctx=Load())]))), Assign(targets=[Name(id='args', ctx=Store())], value=Call(func=Name(id='make_setuptools_shim_args', ctx=Load()), args=[Name(id='setup_py_path', ctx=Load())], keywords=[keyword(arg='global_options', value=Name(id='global_options', ctx=Load())), keyword(arg='no_user_config', value=Name(id='no_user_config', ctx=Load()))])), AugAssign(target=Name(id='args', ctx=Store()), op=Add(), value=List(elts=[Constant(value='develop'), Constant(value='--no-deps')], ctx=Load())), If(test=Name(id='prefix', ctx=Load()), body=[AugAssign(target=Name(id='args', ctx=Store()), op=Add(), value=List(elts=[Constant(value='--prefix'), Name(id='prefix', ctx=Load())], ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='home', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[AugAssign(target=Name(id='args', ctx=Store()), op=Add(), value=List(elts=[Constant(value='--install-dir'), Name(id='home', ctx=Load())], ctx=Load()))], orelse=[]), If(test=Name(id='use_user_site', ctx=Load()), body=[AugAssign(target=Name(id='args', ctx=Store()), op=Add(), value=List(elts=[Constant(value='--user'), Constant(value='--prefix=')], ctx=Load()))], orelse=[]), Return(value=Name(id='args', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='make_setuptools_egg_info_args', args=arguments(posonlyargs=[], args=[arg(arg='setup_py_path', annotation=Name(id='str', ctx=Load())), arg(arg='egg_info_dir', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='no_user_config', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='args', ctx=Store())], value=Call(func=Name(id='make_setuptools_shim_args', ctx=Load()), args=[Name(id='setup_py_path', ctx=Load())], keywords=[keyword(arg='no_user_config', value=Name(id='no_user_config', ctx=Load()))])), AugAssign(target=Name(id='args', ctx=Store()), op=Add(), value=List(elts=[Constant(value='egg_info')], ctx=Load())), If(test=Name(id='egg_info_dir', ctx=Load()), body=[AugAssign(target=Name(id='args', ctx=Store()), op=Add(), value=List(elts=[Constant(value='--egg-base'), Name(id='egg_info_dir', ctx=Load())], ctx=Load()))], orelse=[]), Return(value=Name(id='args', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], type_ignores=[])