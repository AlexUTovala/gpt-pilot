Module(body=[Expr(value=Constant(value='Generate and work with PEP 425 Compatibility Tags.\n')), Import(names=[alias(name='re')]), ImportFrom(module='typing', names=[alias(name='List'), alias(name='Optional'), alias(name='Tuple')], level=0), ImportFrom(module='pip._vendor.packaging.tags', names=[alias(name='PythonVersion'), alias(name='Tag'), alias(name='compatible_tags'), alias(name='cpython_tags'), alias(name='generic_tags'), alias(name='interpreter_name'), alias(name='interpreter_version'), alias(name='mac_platforms')], level=0), Assign(targets=[Name(id='_osx_arch_pat', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='(.+)_(\\d+)_(\\d+)_(.+)')], keywords=[])), FunctionDef(name='version_info_to_nodot', args=arguments(posonlyargs=[], args=[arg(arg='version_info', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Name(id='str', ctx=Load()), Subscript(value=Name(id='version_info', ctx=Load()), slice=Slice(upper=Constant(value=2)), ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='_mac_platforms', args=arguments(posonlyargs=[], args=[arg(arg='arch', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='match', ctx=Store())], value=Call(func=Attribute(value=Name(id='_osx_arch_pat', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='arch', ctx=Load())], keywords=[])), If(test=Name(id='match', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='name', ctx=Store()), Name(id='major', ctx=Store()), Name(id='minor', ctx=Store()), Name(id='actual_arch', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='groups', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='mac_version', ctx=Store())], value=Tuple(elts=[Call(func=Name(id='int', ctx=Load()), args=[Name(id='major', ctx=Load())], keywords=[]), Call(func=Name(id='int', ctx=Load()), args=[Name(id='minor', ctx=Load())], keywords=[])], ctx=Load())), Assign(targets=[Name(id='arches', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Constant(value='{}_{}'), attr='format', ctx=Load()), args=[Name(id='name', ctx=Load()), Subscript(value=Name(id='arch', ctx=Load()), slice=Slice(lower=Call(func=Name(id='len', ctx=Load()), args=[Constant(value='macosx_')], keywords=[])), ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='arch', ctx=Store()), iter=Call(func=Name(id='mac_platforms', ctx=Load()), args=[Name(id='mac_version', ctx=Load()), Name(id='actual_arch', ctx=Load())], keywords=[]), ifs=[], is_async=0)]))], orelse=[Assign(targets=[Name(id='arches', ctx=Store())], value=List(elts=[Name(id='arch', ctx=Load())], ctx=Load()))]), Return(value=Name(id='arches', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='_custom_manylinux_platforms', args=arguments(posonlyargs=[], args=[arg(arg='arch', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='arches', ctx=Store())], value=List(elts=[Name(id='arch', ctx=Load())], ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='arch_prefix', ctx=Store()), Name(id='arch_sep', ctx=Store()), Name(id='arch_suffix', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='arch', ctx=Load()), attr='partition', ctx=Load()), args=[Constant(value='_')], keywords=[])), If(test=Compare(left=Name(id='arch_prefix', ctx=Load()), ops=[Eq()], comparators=[Constant(value='manylinux2014')]), body=[If(test=Compare(left=Name(id='arch_suffix', ctx=Load()), ops=[In()], comparators=[Set(elts=[Constant(value='i686'), Constant(value='x86_64')])]), body=[Expr(value=Call(func=Attribute(value=Name(id='arches', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=BinOp(left=Constant(value='manylinux2010'), op=Add(), right=Name(id='arch_sep', ctx=Load())), op=Add(), right=Name(id='arch_suffix', ctx=Load()))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='arches', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=BinOp(left=Constant(value='manylinux1'), op=Add(), right=Name(id='arch_sep', ctx=Load())), op=Add(), right=Name(id='arch_suffix', ctx=Load()))], keywords=[]))], orelse=[])], orelse=[If(test=Compare(left=Name(id='arch_prefix', ctx=Load()), ops=[Eq()], comparators=[Constant(value='manylinux2010')]), body=[Expr(value=Call(func=Attribute(value=Name(id='arches', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=BinOp(left=Constant(value='manylinux1'), op=Add(), right=Name(id='arch_sep', ctx=Load())), op=Add(), right=Name(id='arch_suffix', ctx=Load()))], keywords=[]))], orelse=[])]), Return(value=Name(id='arches', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='_get_custom_platforms', args=arguments(posonlyargs=[], args=[arg(arg='arch', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='arch_prefix', ctx=Store()), Name(id='arch_sep', ctx=Store()), Name(id='arch_suffix', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='arch', ctx=Load()), attr='partition', ctx=Load()), args=[Constant(value='_')], keywords=[])), If(test=Call(func=Attribute(value=Name(id='arch', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='macosx')], keywords=[]), body=[Assign(targets=[Name(id='arches', ctx=Store())], value=Call(func=Name(id='_mac_platforms', ctx=Load()), args=[Name(id='arch', ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Name(id='arch_prefix', ctx=Load()), ops=[In()], comparators=[List(elts=[Constant(value='manylinux2014'), Constant(value='manylinux2010')], ctx=Load())]), body=[Assign(targets=[Name(id='arches', ctx=Store())], value=Call(func=Name(id='_custom_manylinux_platforms', ctx=Load()), args=[Name(id='arch', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='arches', ctx=Store())], value=List(elts=[Name(id='arch', ctx=Load())], ctx=Load()))])]), Return(value=Name(id='arches', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='_expand_allowed_platforms', args=arguments(posonlyargs=[], args=[arg(arg='platforms', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='platforms', ctx=Load())), body=[Return(value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='seen', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='result', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='p', ctx=Store()), iter=Name(id='platforms', ctx=Load()), body=[If(test=Compare(left=Name(id='p', ctx=Load()), ops=[In()], comparators=[Name(id='seen', ctx=Load())]), body=[Continue()], orelse=[]), Assign(targets=[Name(id='additions', ctx=Store())], value=ListComp(elt=Name(id='c', ctx=Load()), generators=[comprehension(target=Name(id='c', ctx=Store()), iter=Call(func=Name(id='_get_custom_platforms', ctx=Load()), args=[Name(id='p', ctx=Load())], keywords=[]), ifs=[Compare(left=Name(id='c', ctx=Load()), ops=[NotIn()], comparators=[Name(id='seen', ctx=Load())])], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='seen', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='additions', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='extend', ctx=Load()), args=[Name(id='additions', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='_get_python_version', args=arguments(posonlyargs=[], args=[arg(arg='version', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='version', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Return(value=Tuple(elts=[Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='version', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]), Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='version', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[])], ctx=Load()))], orelse=[Return(value=Tuple(elts=[Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Name(id='version', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])], ctx=Load()))])], decorator_list=[], returns=Name(id='PythonVersion', ctx=Load())), FunctionDef(name='_get_custom_interpreter', args=arguments(posonlyargs=[], args=[arg(arg='implementation', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='version', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[If(test=Compare(left=Name(id='implementation', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='implementation', ctx=Store())], value=Call(func=Name(id='interpreter_name', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='version', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='version', ctx=Store())], value=Call(func=Name(id='interpreter_version', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=JoinedStr(values=[FormattedValue(value=Name(id='implementation', ctx=Load()), conversion=-1), FormattedValue(value=Name(id='version', ctx=Load()), conversion=-1)]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='get_supported', args=arguments(posonlyargs=[], args=[arg(arg='version', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='platforms', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='impl', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='abis', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='Return a list of supported tags for each version specified in\n    `versions`.\n\n    :param version: a string version, of the form "33" or "32",\n        or None. The version will be assumed to support our ABI.\n    :param platform: specify a list of platforms you want valid\n        tags for, or None. If None, use the local system platform.\n    :param impl: specify the exact implementation you want valid\n        tags for, or None. If None, use the local interpreter impl.\n    :param abis: specify a list of abis you want valid\n        tags for, or None. If None, use the local interpreter abi.\n    ')), AnnAssign(target=Name(id='supported', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Tag', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), AnnAssign(target=Name(id='python_version', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='PythonVersion', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=1), If(test=Compare(left=Name(id='version', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='python_version', ctx=Store())], value=Call(func=Name(id='_get_python_version', ctx=Load()), args=[Name(id='version', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='interpreter', ctx=Store())], value=Call(func=Name(id='_get_custom_interpreter', ctx=Load()), args=[Name(id='impl', ctx=Load()), Name(id='version', ctx=Load())], keywords=[])), Assign(targets=[Name(id='platforms', ctx=Store())], value=Call(func=Name(id='_expand_allowed_platforms', ctx=Load()), args=[Name(id='platforms', ctx=Load())], keywords=[])), Assign(targets=[Name(id='is_cpython', ctx=Store())], value=Compare(left=BoolOp(op=Or(), values=[Name(id='impl', ctx=Load()), Call(func=Name(id='interpreter_name', ctx=Load()), args=[], keywords=[])]), ops=[Eq()], comparators=[Constant(value='cp')])), If(test=Name(id='is_cpython', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='supported', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Name(id='cpython_tags', ctx=Load()), args=[], keywords=[keyword(arg='python_version', value=Name(id='python_version', ctx=Load())), keyword(arg='abis', value=Name(id='abis', ctx=Load())), keyword(arg='platforms', value=Name(id='platforms', ctx=Load()))])], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='supported', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Name(id='generic_tags', ctx=Load()), args=[], keywords=[keyword(arg='interpreter', value=Name(id='interpreter', ctx=Load())), keyword(arg='abis', value=Name(id='abis', ctx=Load())), keyword(arg='platforms', value=Name(id='platforms', ctx=Load()))])], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='supported', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Name(id='compatible_tags', ctx=Load()), args=[], keywords=[keyword(arg='python_version', value=Name(id='python_version', ctx=Load())), keyword(arg='interpreter', value=Name(id='interpreter', ctx=Load())), keyword(arg='platforms', value=Name(id='platforms', ctx=Load()))])], keywords=[])), Return(value=Name(id='supported', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Tag', ctx=Load()), ctx=Load()))], type_ignores=[])