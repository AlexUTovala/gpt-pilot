Module(body=[Expr(value=Constant(value='Support functions for working with wheel files.\n')), Import(names=[alias(name='logging')]), ImportFrom(module='email.message', names=[alias(name='Message')], level=0), ImportFrom(module='email.parser', names=[alias(name='Parser')], level=0), ImportFrom(module='typing', names=[alias(name='Tuple')], level=0), ImportFrom(module='zipfile', names=[alias(name='BadZipFile'), alias(name='ZipFile')], level=0), ImportFrom(module='pip._vendor.packaging.utils', names=[alias(name='canonicalize_name')], level=0), ImportFrom(module='pip._internal.exceptions', names=[alias(name='UnsupportedWheel')], level=0), Assign(targets=[Name(id='VERSION_COMPATIBLE', ctx=Store())], value=Tuple(elts=[Constant(value=1), Constant(value=0)], ctx=Load())), Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), FunctionDef(name='parse_wheel', args=arguments(posonlyargs=[], args=[arg(arg='wheel_zip', annotation=Name(id='ZipFile', ctx=Load())), arg(arg='name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Extract information from the provided wheel, ensuring it meets basic\n    standards.\n\n    Returns the name of the .dist-info directory and the parsed WHEEL metadata.\n    ')), Try(body=[Assign(targets=[Name(id='info_dir', ctx=Store())], value=Call(func=Name(id='wheel_dist_info_dir', ctx=Load()), args=[Name(id='wheel_zip', ctx=Load()), Name(id='name', ctx=Load())], keywords=[])), Assign(targets=[Name(id='metadata', ctx=Store())], value=Call(func=Name(id='wheel_metadata', ctx=Load()), args=[Name(id='wheel_zip', ctx=Load()), Name(id='info_dir', ctx=Load())], keywords=[])), Assign(targets=[Name(id='version', ctx=Store())], value=Call(func=Name(id='wheel_version', ctx=Load()), args=[Name(id='metadata', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='UnsupportedWheel', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='UnsupportedWheel', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='{} has an invalid wheel, {}'), attr='format', ctx=Load()), args=[Name(id='name', ctx=Load()), Call(func=Name(id='str', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))])], orelse=[], finalbody=[]), Expr(value=Call(func=Name(id='check_compatibility', ctx=Load()), args=[Name(id='version', ctx=Load()), Name(id='name', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Name(id='info_dir', ctx=Load()), Name(id='metadata', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Message', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='wheel_dist_info_dir', args=arguments(posonlyargs=[], args=[arg(arg='source', annotation=Name(id='ZipFile', ctx=Load())), arg(arg='name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Returns the name of the contained .dist-info directory.\n\n    Raises AssertionError or UnsupportedWheel if not found, >1 found, or\n    it doesn't match the provided name.\n    ")), Assign(targets=[Name(id='subdirs', ctx=Store())], value=SetComp(elt=Subscript(value=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='/'), Constant(value=1)], keywords=[]), slice=Constant(value=0), ctx=Load()), generators=[comprehension(target=Name(id='p', ctx=Store()), iter=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='namelist', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='info_dirs', ctx=Store())], value=ListComp(elt=Name(id='s', ctx=Load()), generators=[comprehension(target=Name(id='s', ctx=Store()), iter=Name(id='subdirs', ctx=Load()), ifs=[Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='.dist-info')], keywords=[])], is_async=0)])), If(test=UnaryOp(op=Not(), operand=Name(id='info_dirs', ctx=Load())), body=[Raise(exc=Call(func=Name(id='UnsupportedWheel', ctx=Load()), args=[Constant(value='.dist-info directory not found')], keywords=[]))], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='info_dirs', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Raise(exc=Call(func=Name(id='UnsupportedWheel', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='multiple .dist-info directories found: {}'), attr='format', ctx=Load()), args=[Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Name(id='info_dirs', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='info_dir', ctx=Store())], value=Subscript(value=Name(id='info_dirs', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='info_dir_name', ctx=Store())], value=Call(func=Name(id='canonicalize_name', ctx=Load()), args=[Name(id='info_dir', ctx=Load())], keywords=[])), Assign(targets=[Name(id='canonical_name', ctx=Store())], value=Call(func=Name(id='canonicalize_name', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='info_dir_name', ctx=Load()), attr='startswith', ctx=Load()), args=[Name(id='canonical_name', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='UnsupportedWheel', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='.dist-info directory {!r} does not start with {!r}'), attr='format', ctx=Load()), args=[Name(id='info_dir', ctx=Load()), Name(id='canonical_name', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Return(value=Name(id='info_dir', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='read_wheel_metadata_file', args=arguments(posonlyargs=[], args=[arg(arg='source', annotation=Name(id='ZipFile', ctx=Load())), arg(arg='path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Return(value=Call(func=Attribute(value=Name(id='source', ctx=Load()), attr='read', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='BadZipFile', ctx=Load()), Name(id='KeyError', ctx=Load()), Name(id='RuntimeError', ctx=Load())], ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='UnsupportedWheel', ctx=Load()), args=[JoinedStr(values=[Constant(value='could not read '), FormattedValue(value=Name(id='path', ctx=Load()), conversion=114), Constant(value=' file: '), FormattedValue(value=Name(id='e', ctx=Load()), conversion=114)])], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[], returns=Name(id='bytes', ctx=Load())), FunctionDef(name='wheel_metadata', args=arguments(posonlyargs=[], args=[arg(arg='source', annotation=Name(id='ZipFile', ctx=Load())), arg(arg='dist_info_dir', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the WHEEL metadata of an extracted wheel, if possible.\n    Otherwise, raise UnsupportedWheel.\n    ')), Assign(targets=[Name(id='path', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='dist_info_dir', ctx=Load()), conversion=-1), Constant(value='/WHEEL')])), Assign(targets=[Name(id='wheel_contents', ctx=Store())], value=Call(func=Name(id='read_wheel_metadata_file', ctx=Load()), args=[Name(id='source', ctx=Load()), Name(id='path', ctx=Load())], keywords=[])), Try(body=[Assign(targets=[Name(id='wheel_text', ctx=Store())], value=Call(func=Attribute(value=Name(id='wheel_contents', ctx=Load()), attr='decode', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Name(id='UnicodeDecodeError', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='UnsupportedWheel', ctx=Load()), args=[JoinedStr(values=[Constant(value='error decoding '), FormattedValue(value=Name(id='path', ctx=Load()), conversion=114), Constant(value=': '), FormattedValue(value=Name(id='e', ctx=Load()), conversion=114)])], keywords=[]))])], orelse=[], finalbody=[]), Return(value=Call(func=Attribute(value=Call(func=Name(id='Parser', ctx=Load()), args=[], keywords=[]), attr='parsestr', ctx=Load()), args=[Name(id='wheel_text', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='Message', ctx=Load())), FunctionDef(name='wheel_version', args=arguments(posonlyargs=[], args=[arg(arg='wheel_data', annotation=Name(id='Message', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Given WHEEL metadata, return the parsed Wheel-Version.\n    Otherwise, raise UnsupportedWheel.\n    ')), Assign(targets=[Name(id='version_text', ctx=Store())], value=Subscript(value=Name(id='wheel_data', ctx=Load()), slice=Constant(value='Wheel-Version'), ctx=Load())), If(test=Compare(left=Name(id='version_text', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='UnsupportedWheel', ctx=Load()), args=[Constant(value='WHEEL is missing Wheel-Version')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='version', ctx=Store())], value=Call(func=Attribute(value=Name(id='version_text', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[])), Try(body=[Return(value=Call(func=Name(id='tuple', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Name(id='int', ctx=Load()), Call(func=Attribute(value=Name(id='version', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[])], keywords=[])], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='UnsupportedWheel', ctx=Load()), args=[JoinedStr(values=[Constant(value='invalid Wheel-Version: '), FormattedValue(value=Name(id='version', ctx=Load()), conversion=114)])], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load())), FunctionDef(name='check_compatibility', args=arguments(posonlyargs=[], args=[arg(arg='version', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load())), arg(arg='name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Raises errors or warns if called with an incompatible Wheel-Version.\n\n    pip should refuse to install a Wheel-Version that's a major series\n    ahead of what it's compatible with (e.g 2.0 > 1.1); and warn when\n    installing a version only minor version ahead (e.g 1.2 > 1.1).\n\n    version: a 2-tuple representing a Wheel-Version (Major, Minor)\n    name: name of wheel or package to raise exception about\n\n    :raises UnsupportedWheel: when an incompatible Wheel-Version is given\n    ")), If(test=Compare(left=Subscript(value=Name(id='version', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Gt()], comparators=[Subscript(value=Name(id='VERSION_COMPATIBLE', ctx=Load()), slice=Constant(value=0), ctx=Load())]), body=[Raise(exc=Call(func=Name(id='UnsupportedWheel', ctx=Load()), args=[Call(func=Attribute(value=Constant(value="{}'s Wheel-Version ({}) is not compatible with this version of pip"), attr='format', ctx=Load()), args=[Name(id='name', ctx=Load()), Call(func=Attribute(value=Constant(value='.'), attr='join', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Name(id='str', ctx=Load()), Name(id='version', ctx=Load())], keywords=[])], keywords=[])], keywords=[])], keywords=[]))], orelse=[If(test=Compare(left=Name(id='version', ctx=Load()), ops=[Gt()], comparators=[Name(id='VERSION_COMPATIBLE', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='Installing from a newer Wheel-Version (%s)'), Call(func=Attribute(value=Constant(value='.'), attr='join', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Name(id='str', ctx=Load()), Name(id='version', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], orelse=[])])], decorator_list=[], returns=Constant(value=None))], type_ignores=[])