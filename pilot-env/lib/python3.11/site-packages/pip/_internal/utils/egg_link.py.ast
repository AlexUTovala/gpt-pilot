Module(body=[Import(names=[alias(name='os')]), Import(names=[alias(name='re')]), Import(names=[alias(name='sys')]), ImportFrom(module='typing', names=[alias(name='List'), alias(name='Optional')], level=0), ImportFrom(module='pip._internal.locations', names=[alias(name='site_packages'), alias(name='user_site')], level=0), ImportFrom(module='pip._internal.utils.virtualenv', names=[alias(name='running_under_virtualenv'), alias(name='virtualenv_no_global')], level=0), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='egg_link_path_from_sys_path'), Constant(value='egg_link_path_from_location')], ctx=Load())), FunctionDef(name='_egg_link_name', args=arguments(posonlyargs=[], args=[arg(arg='raw_name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    Convert a Name metadata value to a .egg-link name, by applying\n    the same substitution as pkg_resources's safe_name function.\n    Note: we cannot use canonicalize_name because it has a different logic.\n    ")), Return(value=BinOp(left=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value='[^A-Za-z0-9.]+'), Constant(value='-'), Name(id='raw_name', ctx=Load())], keywords=[]), op=Add(), right=Constant(value='.egg-link')))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='egg_link_path_from_sys_path', args=arguments(posonlyargs=[], args=[arg(arg='raw_name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Look for a .egg-link file for project name, by walking sys.path.\n    ')), Assign(targets=[Name(id='egg_link_name', ctx=Store())], value=Call(func=Name(id='_egg_link_name', ctx=Load()), args=[Name(id='raw_name', ctx=Load())], keywords=[])), For(target=Name(id='path_item', ctx=Store()), iter=Attribute(value=Name(id='sys', ctx=Load()), attr='path', ctx=Load()), body=[Assign(targets=[Name(id='egg_link', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='path_item', ctx=Load()), Name(id='egg_link_name', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isfile', ctx=Load()), args=[Name(id='egg_link', ctx=Load())], keywords=[]), body=[Return(value=Name(id='egg_link', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Constant(value=None))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='egg_link_path_from_location', args=arguments(posonlyargs=[], args=[arg(arg='raw_name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    Return the path for the .egg-link file if it exists, otherwise, None.\n\n    There's 3 scenarios:\n    1) not in a virtualenv\n       try to find in site.USER_SITE, then site_packages\n    2) in a no-global virtualenv\n       try to find in site_packages\n    3) in a yes-global virtualenv\n       try to find in site_packages, then site.USER_SITE\n       (don't look in global location)\n\n    For #1 and #3, there could be odd cases, where there's an egg-link in 2\n    locations.\n\n    This method will just return the first one found.\n    ")), AnnAssign(target=Name(id='sites', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), If(test=Call(func=Name(id='running_under_virtualenv', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='sites', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='site_packages', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Call(func=Name(id='virtualenv_no_global', ctx=Load()), args=[], keywords=[])), Name(id='user_site', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='sites', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='user_site', ctx=Load())], keywords=[]))], orelse=[])], orelse=[If(test=Name(id='user_site', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='sites', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='user_site', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='sites', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='site_packages', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='egg_link_name', ctx=Store())], value=Call(func=Name(id='_egg_link_name', ctx=Load()), args=[Name(id='raw_name', ctx=Load())], keywords=[])), For(target=Name(id='site', ctx=Store()), iter=Name(id='sites', ctx=Load()), body=[Assign(targets=[Name(id='egglink', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='site', ctx=Load()), Name(id='egg_link_name', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isfile', ctx=Load()), args=[Name(id='egglink', ctx=Load())], keywords=[]), body=[Return(value=Name(id='egglink', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Constant(value=None))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], type_ignores=[])