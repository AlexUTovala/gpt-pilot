Module(body=[Import(names=[alias(name='errno')]), Import(names=[alias(name='itertools')]), Import(names=[alias(name='logging')]), Import(names=[alias(name='os.path')]), Import(names=[alias(name='tempfile')]), Import(names=[alias(name='traceback')]), ImportFrom(module='contextlib', names=[alias(name='ExitStack'), alias(name='contextmanager')], level=0), ImportFrom(module='pathlib', names=[alias(name='Path')], level=0), ImportFrom(module='typing', names=[alias(name='Any'), alias(name='Callable'), alias(name='Dict'), alias(name='Generator'), alias(name='List'), alias(name='Optional'), alias(name='TypeVar'), alias(name='Union')], level=0), ImportFrom(module='pip._internal.utils.misc', names=[alias(name='enum'), alias(name='rmtree')], level=0), Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), Assign(targets=[Name(id='_T', ctx=Store())], value=Call(func=Name(id='TypeVar', ctx=Load()), args=[Constant(value='_T')], keywords=[keyword(arg='bound', value=Constant(value='TempDirectory'))])), Assign(targets=[Name(id='tempdir_kinds', ctx=Store())], value=Call(func=Name(id='enum', ctx=Load()), args=[], keywords=[keyword(arg='BUILD_ENV', value=Constant(value='build-env')), keyword(arg='EPHEM_WHEEL_CACHE', value=Constant(value='ephem-wheel-cache')), keyword(arg='REQ_BUILD', value=Constant(value='req-build'))])), AnnAssign(target=Name(id='_tempdir_manager', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='ExitStack', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=1), FunctionDef(name='global_tempdir_manager', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Global(names=['_tempdir_manager']), With(items=[withitem(context_expr=Call(func=Name(id='ExitStack', ctx=Load()), args=[], keywords=[]), optional_vars=Name(id='stack', ctx=Store()))], body=[Assign(targets=[Tuple(elts=[Name(id='old_tempdir_manager', ctx=Store()), Name(id='_tempdir_manager', ctx=Store())], ctx=Store())], value=Tuple(elts=[Name(id='_tempdir_manager', ctx=Load()), Name(id='stack', ctx=Load())], ctx=Load())), Try(body=[Expr(value=Yield())], handlers=[], orelse=[], finalbody=[Assign(targets=[Name(id='_tempdir_manager', ctx=Store())], value=Name(id='old_tempdir_manager', ctx=Load()))])])], decorator_list=[Name(id='contextmanager', ctx=Load())], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), ClassDef(name='TempDirectoryTypeRegistry', bases=[], keywords=[], body=[Expr(value=Constant(value='Manages temp directory behavior')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_should_delete', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='bool', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=0)], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='set_delete', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='kind', annotation=Name(id='str', ctx=Load())), arg(arg='value', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Indicate whether a TempDirectory of the given kind should be\n        auto-deleted.\n        ')), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_should_delete', ctx=Load()), slice=Name(id='kind', ctx=Load()), ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='get_delete', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='kind', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get configured auto-delete flag for a given TempDirectory type,\n        default True.\n        ')), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_should_delete', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='kind', ctx=Load()), Constant(value=True)], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load()))], decorator_list=[]), AnnAssign(target=Name(id='_tempdir_registry', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TempDirectoryTypeRegistry', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=1), FunctionDef(name='tempdir_registry', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Provides a scoped global tempdir registry that can be used to dictate\n    whether directories should be deleted.\n    ')), Global(names=['_tempdir_registry']), Assign(targets=[Name(id='old_tempdir_registry', ctx=Store())], value=Name(id='_tempdir_registry', ctx=Load())), Assign(targets=[Name(id='_tempdir_registry', ctx=Store())], value=Call(func=Name(id='TempDirectoryTypeRegistry', ctx=Load()), args=[], keywords=[])), Try(body=[Expr(value=Yield(value=Name(id='_tempdir_registry', ctx=Load())))], handlers=[], orelse=[], finalbody=[Assign(targets=[Name(id='_tempdir_registry', ctx=Store())], value=Name(id='old_tempdir_registry', ctx=Load()))])], decorator_list=[Name(id='contextmanager', ctx=Load())], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Name(id='TempDirectoryTypeRegistry', ctx=Load()), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), ClassDef(name='_Default', bases=[], keywords=[], body=[Pass()], decorator_list=[]), Assign(targets=[Name(id='_default', ctx=Store())], value=Call(func=Name(id='_Default', ctx=Load()), args=[], keywords=[])), ClassDef(name='TempDirectory', bases=[], keywords=[], body=[Expr(value=Constant(value='Helper class that owns and cleans up a temporary directory.\n\n    This class can be used as a context manager or as an OO representation of a\n    temporary directory.\n\n    Attributes:\n        path\n            Location to the created temporary directory\n        delete\n            Whether the directory should be deleted when exiting\n            (when used as a contextmanager)\n\n    Methods:\n        cleanup()\n            Deletes the temporary directory\n\n    When used as a context manager, if the delete attribute is True, on\n    exiting the context the temporary directory is deleted.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='path', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='delete', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='bool', ctx=Load()), Constant(value=None), Name(id='_Default', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='kind', annotation=Name(id='str', ctx=Load())), arg(arg='globally_managed', annotation=Name(id='bool', ctx=Load())), arg(arg='ignore_cleanup_errors', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Name(id='_default', ctx=Load()), Constant(value='temp'), Constant(value=False), Constant(value=True)]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='delete', ctx=Load()), ops=[Is()], comparators=[Name(id='_default', ctx=Load())]), body=[If(test=Compare(left=Name(id='path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='delete', ctx=Store())], value=Constant(value=False))], orelse=[Assign(targets=[Name(id='delete', ctx=Store())], value=Constant(value=None))])], orelse=[]), If(test=Compare(left=Name(id='path', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_create', ctx=Load()), args=[Name(id='kind', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_path', ctx=Store())], value=Name(id='path', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_deleted', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='delete', ctx=Store())], value=Name(id='delete', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='kind', ctx=Store())], value=Name(id='kind', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='ignore_cleanup_errors', ctx=Store())], value=Name(id='ignore_cleanup_errors', ctx=Load())), If(test=Name(id='globally_managed', ctx=Load()), body=[Assert(test=Compare(left=Name(id='_tempdir_manager', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Expr(value=Call(func=Attribute(value=Name(id='_tempdir_manager', ctx=Load()), attr='enter_context', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='path', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='_deleted', ctx=Load())), msg=JoinedStr(values=[Constant(value='Attempted to access deleted path: '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='_path', ctx=Load()), conversion=-1)])), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_path', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[Constant(value='<'), FormattedValue(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), conversion=-1), Constant(value=' '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='path', ctx=Load()), conversion=114), Constant(value='>')]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='__enter__', args=arguments(posonlyargs=[], args=[arg(arg='self', annotation=Name(id='_T', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Name(id='self', ctx=Load()))], decorator_list=[], returns=Name(id='_T', ctx=Load())), FunctionDef(name='__exit__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='exc', annotation=Name(id='Any', ctx=Load())), arg(arg='value', annotation=Name(id='Any', ctx=Load())), arg(arg='tb', annotation=Name(id='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='delete', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='delete', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='delete', ctx=Load()))], orelse=[If(test=Name(id='_tempdir_registry', ctx=Load()), body=[Assign(targets=[Name(id='delete', ctx=Store())], value=Call(func=Attribute(value=Name(id='_tempdir_registry', ctx=Load()), attr='get_delete', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='kind', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='delete', ctx=Store())], value=Constant(value=True))])]), If(test=Name(id='delete', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='cleanup', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_create', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='kind', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Create a temporary directory and store its path in self.path')), Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='realpath', ctx=Load()), args=[Call(func=Attribute(value=Name(id='tempfile', ctx=Load()), attr='mkdtemp', ctx=Load()), args=[], keywords=[keyword(arg='prefix', value=JoinedStr(values=[Constant(value='pip-'), FormattedValue(value=Name(id='kind', ctx=Load()), conversion=-1), Constant(value='-')]))])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Created temporary directory: %s'), Name(id='path', ctx=Load())], keywords=[])), Return(value=Name(id='path', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='cleanup', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Remove the temporary directory created and reset state')), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_deleted', ctx=Store())], value=Constant(value=True)), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_path', ctx=Load())], keywords=[])), body=[Return()], orelse=[]), AnnAssign(target=Name(id='errors', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='BaseException', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), FunctionDef(name='onerror', args=arguments(posonlyargs=[], args=[arg(arg='func', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='path', annotation=Name(id='Path', ctx=Load())), arg(arg='exc_val', annotation=Name(id='BaseException', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Log a warning for a `rmtree` error and continue')), Assign(targets=[Name(id='formatted_exc', ctx=Store())], value=Call(func=Attribute(value=Constant(value='\n'), attr='join', ctx=Load()), args=[Call(func=Attribute(value=Name(id='traceback', ctx=Load()), attr='format_exception_only', ctx=Load()), args=[Call(func=Name(id='type', ctx=Load()), args=[Name(id='exc_val', ctx=Load())], keywords=[]), Name(id='exc_val', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='formatted_exc', ctx=Store())], value=Call(func=Attribute(value=Name(id='formatted_exc', ctx=Load()), attr='rstrip', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='func', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Attribute(value=Name(id='os', ctx=Load()), attr='unlink', ctx=Load()), Attribute(value=Name(id='os', ctx=Load()), attr='remove', ctx=Load()), Attribute(value=Name(id='os', ctx=Load()), attr='rmdir', ctx=Load())], ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value="Failed to remove a temporary file '%s' due to %s.\n"), Name(id='path', ctx=Load()), Name(id='formatted_exc', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='%s failed with %s.'), Attribute(value=Name(id='func', ctx=Load()), attr='__qualname__', ctx=Load()), Name(id='formatted_exc', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='errors', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='exc_val', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='ignore_cleanup_errors', ctx=Load()), body=[Try(body=[Expr(value=Call(func=Name(id='rmtree', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_path', ctx=Load())], keywords=[keyword(arg='ignore_errors', value=Constant(value=False))]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), body=[Expr(value=Call(func=Name(id='rmtree', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_path', ctx=Load())], keywords=[keyword(arg='onexc', value=Name(id='onerror', ctx=Load()))]))])], orelse=[], finalbody=[]), If(test=Name(id='errors', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value="Failed to remove contents in a temporary directory '%s'.\nYou can safely remove it manually."), Attribute(value=Name(id='self', ctx=Load()), attr='_path', ctx=Load())], keywords=[]))], orelse=[])], orelse=[Expr(value=Call(func=Name(id='rmtree', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_path', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='AdjacentTempDirectory', bases=[Name(id='TempDirectory', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Helper class that creates a temporary directory adjacent to a real one.\n\n    Attributes:\n        original\n            The original directory to create a temp directory for.\n        path\n            After calling create() or entering, contains the full\n            path to the temporary directory.\n        delete\n            Whether the directory should be deleted when exiting\n            (when used as a contextmanager)\n\n    ')), Assign(targets=[Name(id='LEADING_CHARS', ctx=Store())], value=Constant(value='-~.=%0123456789')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='original', annotation=Name(id='str', ctx=Load())), arg(arg='delete', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='original', ctx=Store())], value=Call(func=Attribute(value=Name(id='original', ctx=Load()), attr='rstrip', ctx=Load()), args=[Constant(value='/\\')], keywords=[])), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[keyword(arg='delete', value=Name(id='delete', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_generate_names', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Generates a series of temporary names.\n\n        The algorithm replaces the leading characters in the name\n        with ones that are valid filesystem characters, but are not\n        valid package names (for both Python and pip definitions of\n        package).\n        ')), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])], keywords=[]), body=[For(target=Name(id='candidate', ctx=Store()), iter=Call(func=Attribute(value=Name(id='itertools', ctx=Load()), attr='combinations_with_replacement', ctx=Load()), args=[Attribute(value=Name(id='cls', ctx=Load()), attr='LEADING_CHARS', ctx=Load()), BinOp(left=Name(id='i', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), body=[Assign(targets=[Name(id='new_name', ctx=Store())], value=BinOp(left=BinOp(left=Constant(value='~'), op=Add(), right=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Name(id='candidate', ctx=Load())], keywords=[])), op=Add(), right=Subscript(value=Name(id='name', ctx=Load()), slice=Slice(lower=Name(id='i', ctx=Load())), ctx=Load()))), If(test=Compare(left=Name(id='new_name', ctx=Load()), ops=[NotEq()], comparators=[Name(id='name', ctx=Load())]), body=[Expr(value=Yield(value=Name(id='new_name', ctx=Load())))], orelse=[])], orelse=[])], orelse=[]), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='cls', ctx=Load()), attr='LEADING_CHARS', ctx=Load())], keywords=[])], keywords=[]), body=[For(target=Name(id='candidate', ctx=Store()), iter=Call(func=Attribute(value=Name(id='itertools', ctx=Load()), attr='combinations_with_replacement', ctx=Load()), args=[Attribute(value=Name(id='cls', ctx=Load()), attr='LEADING_CHARS', ctx=Load()), Name(id='i', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='new_name', ctx=Store())], value=BinOp(left=BinOp(left=Constant(value='~'), op=Add(), right=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Name(id='candidate', ctx=Load())], keywords=[])), op=Add(), right=Name(id='name', ctx=Load()))), If(test=Compare(left=Name(id='new_name', ctx=Load()), ops=[NotEq()], comparators=[Name(id='name', ctx=Load())]), body=[Expr(value=Yield(value=Name(id='new_name', ctx=Load())))], orelse=[])], orelse=[])], orelse=[])], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='_create', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='kind', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='root', ctx=Store()), Name(id='name', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='split', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='original', ctx=Load())], keywords=[])), For(target=Name(id='candidate', ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_generate_names', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='root', ctx=Load()), Name(id='candidate', ctx=Load())], keywords=[])), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='mkdir', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), name='ex', body=[If(test=Compare(left=Attribute(value=Name(id='ex', ctx=Load()), attr='errno', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='errno', ctx=Load()), attr='EEXIST', ctx=Load())]), body=[Raise()], orelse=[])])], orelse=[Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='realpath', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), Break()], finalbody=[])], orelse=[Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='realpath', ctx=Load()), args=[Call(func=Attribute(value=Name(id='tempfile', ctx=Load()), attr='mkdtemp', ctx=Load()), args=[], keywords=[keyword(arg='prefix', value=JoinedStr(values=[Constant(value='pip-'), FormattedValue(value=Name(id='kind', ctx=Load()), conversion=-1), Constant(value='-')]))])], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Created temporary directory: %s'), Name(id='path', ctx=Load())], keywords=[])), Return(value=Name(id='path', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[])], type_ignores=[])