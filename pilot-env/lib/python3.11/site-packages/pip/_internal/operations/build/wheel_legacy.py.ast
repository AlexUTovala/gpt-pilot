Module(body=[Import(names=[alias(name='logging')]), Import(names=[alias(name='os.path')]), ImportFrom(module='typing', names=[alias(name='List'), alias(name='Optional')], level=0), ImportFrom(module='pip._internal.cli.spinners', names=[alias(name='open_spinner')], level=0), ImportFrom(module='pip._internal.utils.setuptools_build', names=[alias(name='make_setuptools_bdist_wheel_args')], level=0), ImportFrom(module='pip._internal.utils.subprocess', names=[alias(name='call_subprocess'), alias(name='format_command_args')], level=0), Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), FunctionDef(name='format_command_result', args=arguments(posonlyargs=[], args=[arg(arg='command_args', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='command_output', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Format command information for logging.')), Assign(targets=[Name(id='command_desc', ctx=Store())], value=Call(func=Name(id='format_command_args', ctx=Load()), args=[Name(id='command_args', ctx=Load())], keywords=[])), Assign(targets=[Name(id='text', ctx=Store())], value=JoinedStr(values=[Constant(value='Command arguments: '), FormattedValue(value=Name(id='command_desc', ctx=Load()), conversion=-1), Constant(value='\n')])), If(test=UnaryOp(op=Not(), operand=Name(id='command_output', ctx=Load())), body=[AugAssign(target=Name(id='text', ctx=Store()), op=Add(), value=Constant(value='Command output: None'))], orelse=[If(test=Compare(left=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='getEffectiveLevel', ctx=Load()), args=[], keywords=[]), ops=[Gt()], comparators=[Attribute(value=Name(id='logging', ctx=Load()), attr='DEBUG', ctx=Load())]), body=[AugAssign(target=Name(id='text', ctx=Store()), op=Add(), value=Constant(value='Command output: [use --verbose to show]'))], orelse=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='command_output', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='\n')], keywords=[])), body=[AugAssign(target=Name(id='command_output', ctx=Store()), op=Add(), value=Constant(value='\n'))], orelse=[]), AugAssign(target=Name(id='text', ctx=Store()), op=Add(), value=JoinedStr(values=[Constant(value='Command output:\n'), FormattedValue(value=Name(id='command_output', ctx=Load()), conversion=-1)]))])]), Return(value=Name(id='text', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='get_legacy_build_wheel_path', args=arguments(posonlyargs=[], args=[arg(arg='names', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='temp_dir', annotation=Name(id='str', ctx=Load())), arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='command_args', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='command_output', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the path to the wheel in the temporary build directory.')), Assign(targets=[Name(id='names', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='names', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='names', ctx=Load())), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Call(func=Attribute(value=Constant(value='Legacy build of wheel for {!r} created no files.\n'), attr='format', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), AugAssign(target=Name(id='msg', ctx=Store()), op=Add(), value=Call(func=Name(id='format_command_result', ctx=Load()), args=[Name(id='command_args', ctx=Load()), Name(id='command_output', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[])), Return(value=Constant(value=None))], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='names', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Call(func=Attribute(value=Constant(value='Legacy build of wheel for {!r} created more than one file.\nFilenames (choosing first): {}\n'), attr='format', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='names', ctx=Load())], keywords=[])), AugAssign(target=Name(id='msg', ctx=Store()), op=Add(), value=Call(func=Name(id='format_command_result', ctx=Load()), args=[Name(id='command_args', ctx=Load()), Name(id='command_output', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='temp_dir', ctx=Load()), Subscript(value=Name(id='names', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='build_wheel_legacy', args=arguments(posonlyargs=[], args=[arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='setup_py_path', annotation=Name(id='str', ctx=Load())), arg(arg='source_dir', annotation=Name(id='str', ctx=Load())), arg(arg='global_options', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='build_options', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='tempd', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Build one unpacked package using the "legacy" build process.\n\n    Returns path to wheel if successfully built. Otherwise, returns None.\n    ')), Assign(targets=[Name(id='wheel_args', ctx=Store())], value=Call(func=Name(id='make_setuptools_bdist_wheel_args', ctx=Load()), args=[Name(id='setup_py_path', ctx=Load())], keywords=[keyword(arg='global_options', value=Name(id='global_options', ctx=Load())), keyword(arg='build_options', value=Name(id='build_options', ctx=Load())), keyword(arg='destination_dir', value=Name(id='tempd', ctx=Load()))])), Assign(targets=[Name(id='spin_message', ctx=Store())], value=JoinedStr(values=[Constant(value='Building wheel for '), FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1), Constant(value=' (setup.py)')])), With(items=[withitem(context_expr=Call(func=Name(id='open_spinner', ctx=Load()), args=[Name(id='spin_message', ctx=Load())], keywords=[]), optional_vars=Name(id='spinner', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Destination directory: %s'), Name(id='tempd', ctx=Load())], keywords=[])), Try(body=[Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Name(id='call_subprocess', ctx=Load()), args=[Name(id='wheel_args', ctx=Load())], keywords=[keyword(arg='command_desc', value=Constant(value='python setup.py bdist_wheel')), keyword(arg='cwd', value=Name(id='source_dir', ctx=Load())), keyword(arg='spinner', value=Name(id='spinner', ctx=Load()))]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='spinner', ctx=Load()), attr='finish', ctx=Load()), args=[Constant(value='error')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='error', ctx=Load()), args=[Constant(value='Failed building wheel for %s'), Name(id='name', ctx=Load())], keywords=[])), Return(value=Constant(value=None))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='names', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='listdir', ctx=Load()), args=[Name(id='tempd', ctx=Load())], keywords=[])), Assign(targets=[Name(id='wheel_path', ctx=Store())], value=Call(func=Name(id='get_legacy_build_wheel_path', ctx=Load()), args=[], keywords=[keyword(arg='names', value=Name(id='names', ctx=Load())), keyword(arg='temp_dir', value=Name(id='tempd', ctx=Load())), keyword(arg='name', value=Name(id='name', ctx=Load())), keyword(arg='command_args', value=Name(id='wheel_args', ctx=Load())), keyword(arg='command_output', value=Name(id='output', ctx=Load()))])), Return(value=Name(id='wheel_path', ctx=Load()))])], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], type_ignores=[])