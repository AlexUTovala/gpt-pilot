Module(body=[Expr(value=Constant(value='Prepares a distribution for installation\n')), Import(names=[alias(name='mimetypes')]), Import(names=[alias(name='os')]), Import(names=[alias(name='shutil')]), ImportFrom(module='pathlib', names=[alias(name='Path')], level=0), ImportFrom(module='typing', names=[alias(name='Dict'), alias(name='Iterable'), alias(name='List'), alias(name='Optional')], level=0), ImportFrom(module='pip._vendor.packaging.utils', names=[alias(name='canonicalize_name')], level=0), ImportFrom(module='pip._internal.distributions', names=[alias(name='make_distribution_for_install_requirement')], level=0), ImportFrom(module='pip._internal.distributions.installed', names=[alias(name='InstalledDistribution')], level=0), ImportFrom(module='pip._internal.exceptions', names=[alias(name='DirectoryUrlHashUnsupported'), alias(name='HashMismatch'), alias(name='HashUnpinned'), alias(name='InstallationError'), alias(name='MetadataInconsistent'), alias(name='NetworkConnectionError'), alias(name='VcsHashUnsupported')], level=0), ImportFrom(module='pip._internal.index.package_finder', names=[alias(name='PackageFinder')], level=0), ImportFrom(module='pip._internal.metadata', names=[alias(name='BaseDistribution'), alias(name='get_metadata_distribution')], level=0), ImportFrom(module='pip._internal.models.direct_url', names=[alias(name='ArchiveInfo')], level=0), ImportFrom(module='pip._internal.models.link', names=[alias(name='Link')], level=0), ImportFrom(module='pip._internal.models.wheel', names=[alias(name='Wheel')], level=0), ImportFrom(module='pip._internal.network.download', names=[alias(name='BatchDownloader'), alias(name='Downloader')], level=0), ImportFrom(module='pip._internal.network.lazy_wheel', names=[alias(name='HTTPRangeRequestUnsupported'), alias(name='dist_from_wheel_url')], level=0), ImportFrom(module='pip._internal.network.session', names=[alias(name='PipSession')], level=0), ImportFrom(module='pip._internal.operations.build.build_tracker', names=[alias(name='BuildTracker')], level=0), ImportFrom(module='pip._internal.req.req_install', names=[alias(name='InstallRequirement')], level=0), ImportFrom(module='pip._internal.utils._log', names=[alias(name='getLogger')], level=0), ImportFrom(module='pip._internal.utils.direct_url_helpers', names=[alias(name='direct_url_for_editable'), alias(name='direct_url_from_link')], level=0), ImportFrom(module='pip._internal.utils.hashes', names=[alias(name='Hashes'), alias(name='MissingHashes')], level=0), ImportFrom(module='pip._internal.utils.logging', names=[alias(name='indent_log')], level=0), ImportFrom(module='pip._internal.utils.misc', names=[alias(name='display_path'), alias(name='hash_file'), alias(name='hide_url'), alias(name='redact_auth_from_requirement')], level=0), ImportFrom(module='pip._internal.utils.temp_dir', names=[alias(name='TempDirectory')], level=0), ImportFrom(module='pip._internal.utils.unpacking', names=[alias(name='unpack_file')], level=0), ImportFrom(module='pip._internal.vcs', names=[alias(name='vcs')], level=0), Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Name(id='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), FunctionDef(name='_get_prepared_distribution', args=arguments(posonlyargs=[], args=[arg(arg='req', annotation=Name(id='InstallRequirement', ctx=Load())), arg(arg='build_tracker', annotation=Name(id='BuildTracker', ctx=Load())), arg(arg='finder', annotation=Name(id='PackageFinder', ctx=Load())), arg(arg='build_isolation', annotation=Name(id='bool', ctx=Load())), arg(arg='check_build_deps', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Prepare a distribution for installation.')), Assign(targets=[Name(id='abstract_dist', ctx=Store())], value=Call(func=Name(id='make_distribution_for_install_requirement', ctx=Load()), args=[Name(id='req', ctx=Load())], keywords=[])), Assign(targets=[Name(id='tracker_id', ctx=Store())], value=Attribute(value=Name(id='abstract_dist', ctx=Load()), attr='build_tracker_id', ctx=Load())), If(test=Compare(left=Name(id='tracker_id', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='build_tracker', ctx=Load()), attr='track', ctx=Load()), args=[Name(id='req', ctx=Load()), Name(id='tracker_id', ctx=Load())], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='abstract_dist', ctx=Load()), attr='prepare_distribution_metadata', ctx=Load()), args=[Name(id='finder', ctx=Load()), Name(id='build_isolation', ctx=Load()), Name(id='check_build_deps', ctx=Load())], keywords=[]))])], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='abstract_dist', ctx=Load()), attr='get_metadata_distribution', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='BaseDistribution', ctx=Load())), FunctionDef(name='unpack_vcs_link', args=arguments(posonlyargs=[], args=[arg(arg='link', annotation=Name(id='Link', ctx=Load())), arg(arg='location', annotation=Name(id='str', ctx=Load())), arg(arg='verbosity', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='vcs_backend', ctx=Store())], value=Call(func=Attribute(value=Name(id='vcs', ctx=Load()), attr='get_backend_for_scheme', ctx=Load()), args=[Attribute(value=Name(id='link', ctx=Load()), attr='scheme', ctx=Load())], keywords=[])), Assert(test=Compare(left=Name(id='vcs_backend', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Expr(value=Call(func=Attribute(value=Name(id='vcs_backend', ctx=Load()), attr='unpack', ctx=Load()), args=[Name(id='location', ctx=Load())], keywords=[keyword(arg='url', value=Call(func=Name(id='hide_url', ctx=Load()), args=[Attribute(value=Name(id='link', ctx=Load()), attr='url', ctx=Load())], keywords=[])), keyword(arg='verbosity', value=Name(id='verbosity', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), ClassDef(name='File', bases=[], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='path', annotation=Name(id='str', ctx=Load())), arg(arg='content_type', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='path', ctx=Store())], value=Name(id='path', ctx=Load())), If(test=Compare(left=Name(id='content_type', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='content_type', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='mimetypes', ctx=Load()), attr='guess_type', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load()))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='content_type', ctx=Store())], value=Name(id='content_type', ctx=Load()))])], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), FunctionDef(name='get_http_url', args=arguments(posonlyargs=[], args=[arg(arg='link', annotation=Name(id='Link', ctx=Load())), arg(arg='download', annotation=Name(id='Downloader', ctx=Load())), arg(arg='download_dir', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='hashes', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Hashes', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Assign(targets=[Name(id='temp_dir', ctx=Store())], value=Call(func=Name(id='TempDirectory', ctx=Load()), args=[], keywords=[keyword(arg='kind', value=Constant(value='unpack')), keyword(arg='globally_managed', value=Constant(value=True))])), Assign(targets=[Name(id='already_downloaded_path', ctx=Store())], value=Constant(value=None)), If(test=Name(id='download_dir', ctx=Load()), body=[Assign(targets=[Name(id='already_downloaded_path', ctx=Store())], value=Call(func=Name(id='_check_download_dir', ctx=Load()), args=[Name(id='link', ctx=Load()), Name(id='download_dir', ctx=Load()), Name(id='hashes', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='already_downloaded_path', ctx=Load()), body=[Assign(targets=[Name(id='from_path', ctx=Store())], value=Name(id='already_downloaded_path', ctx=Load())), Assign(targets=[Name(id='content_type', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Tuple(elts=[Name(id='from_path', ctx=Store()), Name(id='content_type', ctx=Store())], ctx=Store())], value=Call(func=Name(id='download', ctx=Load()), args=[Name(id='link', ctx=Load()), Attribute(value=Name(id='temp_dir', ctx=Load()), attr='path', ctx=Load())], keywords=[])), If(test=Name(id='hashes', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='hashes', ctx=Load()), attr='check_against_path', ctx=Load()), args=[Name(id='from_path', ctx=Load())], keywords=[]))], orelse=[])]), Return(value=Call(func=Name(id='File', ctx=Load()), args=[Name(id='from_path', ctx=Load()), Name(id='content_type', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='File', ctx=Load())), FunctionDef(name='get_file_url', args=arguments(posonlyargs=[], args=[arg(arg='link', annotation=Name(id='Link', ctx=Load())), arg(arg='download_dir', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='hashes', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Hashes', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='Get file and optionally check its hash.')), Assign(targets=[Name(id='already_downloaded_path', ctx=Store())], value=Constant(value=None)), If(test=Name(id='download_dir', ctx=Load()), body=[Assign(targets=[Name(id='already_downloaded_path', ctx=Store())], value=Call(func=Name(id='_check_download_dir', ctx=Load()), args=[Name(id='link', ctx=Load()), Name(id='download_dir', ctx=Load()), Name(id='hashes', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='already_downloaded_path', ctx=Load()), body=[Assign(targets=[Name(id='from_path', ctx=Store())], value=Name(id='already_downloaded_path', ctx=Load()))], orelse=[Assign(targets=[Name(id='from_path', ctx=Store())], value=Attribute(value=Name(id='link', ctx=Load()), attr='file_path', ctx=Load()))]), If(test=Name(id='hashes', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='hashes', ctx=Load()), attr='check_against_path', ctx=Load()), args=[Name(id='from_path', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='File', ctx=Load()), args=[Name(id='from_path', ctx=Load()), Constant(value=None)], keywords=[]))], decorator_list=[], returns=Name(id='File', ctx=Load())), FunctionDef(name='unpack_url', args=arguments(posonlyargs=[], args=[arg(arg='link', annotation=Name(id='Link', ctx=Load())), arg(arg='location', annotation=Name(id='str', ctx=Load())), arg(arg='download', annotation=Name(id='Downloader', ctx=Load())), arg(arg='verbosity', annotation=Name(id='int', ctx=Load())), arg(arg='download_dir', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='hashes', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Hashes', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='Unpack link into location, downloading if required.\n\n    :param hashes: A Hashes object, one of whose embedded hashes must match,\n        or HashMismatch will be raised. If the Hashes is empty, no matches are\n        required, and unhashable types of requirements (like VCS ones, which\n        would ordinarily raise HashUnsupported) are allowed.\n    ')), If(test=Attribute(value=Name(id='link', ctx=Load()), attr='is_vcs', ctx=Load()), body=[Expr(value=Call(func=Name(id='unpack_vcs_link', ctx=Load()), args=[Name(id='link', ctx=Load()), Name(id='location', ctx=Load())], keywords=[keyword(arg='verbosity', value=Name(id='verbosity', ctx=Load()))])), Return(value=Constant(value=None))], orelse=[]), Assert(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='link', ctx=Load()), attr='is_existing_dir', ctx=Load()), args=[], keywords=[]))), If(test=Attribute(value=Name(id='link', ctx=Load()), attr='is_file', ctx=Load()), body=[Assign(targets=[Name(id='file', ctx=Store())], value=Call(func=Name(id='get_file_url', ctx=Load()), args=[Name(id='link', ctx=Load()), Name(id='download_dir', ctx=Load())], keywords=[keyword(arg='hashes', value=Name(id='hashes', ctx=Load()))]))], orelse=[Assign(targets=[Name(id='file', ctx=Store())], value=Call(func=Name(id='get_http_url', ctx=Load()), args=[Name(id='link', ctx=Load()), Name(id='download', ctx=Load()), Name(id='download_dir', ctx=Load())], keywords=[keyword(arg='hashes', value=Name(id='hashes', ctx=Load()))]))]), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='link', ctx=Load()), attr='is_wheel', ctx=Load())), body=[Expr(value=Call(func=Name(id='unpack_file', ctx=Load()), args=[Attribute(value=Name(id='file', ctx=Load()), attr='path', ctx=Load()), Name(id='location', ctx=Load()), Attribute(value=Name(id='file', ctx=Load()), attr='content_type', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='file', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='File', ctx=Load()), ctx=Load())), FunctionDef(name='_check_download_dir', args=arguments(posonlyargs=[], args=[arg(arg='link', annotation=Name(id='Link', ctx=Load())), arg(arg='download_dir', annotation=Name(id='str', ctx=Load())), arg(arg='hashes', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Hashes', ctx=Load()), ctx=Load())), arg(arg='warn_on_hash_mismatch', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True)]), body=[Expr(value=Constant(value='Check download_dir for previously downloaded file with correct hash\n    If a correct file is found return its path else None\n    ')), Assign(targets=[Name(id='download_path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='download_dir', ctx=Load()), Attribute(value=Name(id='link', ctx=Load()), attr='filename', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='download_path', ctx=Load())], keywords=[])), body=[Return(value=Constant(value=None))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='File was already downloaded %s'), Name(id='download_path', ctx=Load())], keywords=[])), If(test=Name(id='hashes', ctx=Load()), body=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='hashes', ctx=Load()), attr='check_against_path', ctx=Load()), args=[Name(id='download_path', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='HashMismatch', ctx=Load()), body=[If(test=Name(id='warn_on_hash_mismatch', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='Previously-downloaded file %s has bad hash. Re-downloading.'), Name(id='download_path', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='unlink', ctx=Load()), args=[Name(id='download_path', ctx=Load())], keywords=[])), Return(value=Constant(value=None))])], orelse=[], finalbody=[])], orelse=[]), Return(value=Name(id='download_path', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), ClassDef(name='RequirementPreparer', bases=[], keywords=[], body=[Expr(value=Constant(value='Prepares a Requirement')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='build_dir', annotation=Name(id='str', ctx=Load())), arg(arg='download_dir', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='src_dir', annotation=Name(id='str', ctx=Load())), arg(arg='build_isolation', annotation=Name(id='bool', ctx=Load())), arg(arg='check_build_deps', annotation=Name(id='bool', ctx=Load())), arg(arg='build_tracker', annotation=Name(id='BuildTracker', ctx=Load())), arg(arg='session', annotation=Name(id='PipSession', ctx=Load())), arg(arg='progress_bar', annotation=Name(id='str', ctx=Load())), arg(arg='finder', annotation=Name(id='PackageFinder', ctx=Load())), arg(arg='require_hashes', annotation=Name(id='bool', ctx=Load())), arg(arg='use_user_site', annotation=Name(id='bool', ctx=Load())), arg(arg='lazy_wheel', annotation=Name(id='bool', ctx=Load())), arg(arg='verbosity', annotation=Name(id='int', ctx=Load())), arg(arg='legacy_resolver', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='src_dir', ctx=Store())], value=Name(id='src_dir', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='build_dir', ctx=Store())], value=Name(id='build_dir', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='build_tracker', ctx=Store())], value=Name(id='build_tracker', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_session', ctx=Store())], value=Name(id='session', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_download', ctx=Store())], value=Call(func=Name(id='Downloader', ctx=Load()), args=[Name(id='session', ctx=Load()), Name(id='progress_bar', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_batch_download', ctx=Store())], value=Call(func=Name(id='BatchDownloader', ctx=Load()), args=[Name(id='session', ctx=Load()), Name(id='progress_bar', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='finder', ctx=Store())], value=Name(id='finder', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='download_dir', ctx=Store())], value=Name(id='download_dir', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='build_isolation', ctx=Store())], value=Name(id='build_isolation', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='check_build_deps', ctx=Store())], value=Name(id='check_build_deps', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='require_hashes', ctx=Store())], value=Name(id='require_hashes', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='use_user_site', ctx=Store())], value=Name(id='use_user_site', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='use_lazy_wheel', ctx=Store())], value=Name(id='lazy_wheel', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='verbosity', ctx=Store())], value=Name(id='verbosity', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='legacy_resolver', ctx=Store())], value=Name(id='legacy_resolver', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_downloaded', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_previous_requirement_header', ctx=Store())], value=Tuple(elts=[Constant(value=''), Constant(value='')], ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_log_preparing_link', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='req', annotation=Name(id='InstallRequirement', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Provide context for the requirement being prepared.')), If(test=BoolOp(op=And(), values=[Attribute(value=Attribute(value=Name(id='req', ctx=Load()), attr='link', ctx=Load()), attr='is_file', ctx=Load()), UnaryOp(op=Not(), operand=Attribute(value=Name(id='req', ctx=Load()), attr='is_wheel_from_cache', ctx=Load()))]), body=[Assign(targets=[Name(id='message', ctx=Store())], value=Constant(value='Processing %s')), Assign(targets=[Name(id='information', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Call(func=Name(id='display_path', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='req', ctx=Load()), attr='link', ctx=Load()), attr='file_path', ctx=Load())], keywords=[])], keywords=[]))], orelse=[Assign(targets=[Name(id='message', ctx=Store())], value=Constant(value='Collecting %s')), Assign(targets=[Name(id='information', ctx=Store())], value=IfExp(test=Attribute(value=Name(id='req', ctx=Load()), attr='req', ctx=Load()), body=Call(func=Name(id='redact_auth_from_requirement', ctx=Load()), args=[Attribute(value=Name(id='req', ctx=Load()), attr='req', ctx=Load())], keywords=[]), orelse=Call(func=Name(id='str', ctx=Load()), args=[Name(id='req', ctx=Load())], keywords=[])))]), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='req', ctx=Load()), attr='req', ctx=Load()), Attribute(value=Name(id='req', ctx=Load()), attr='comes_from', ctx=Load())]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='req', ctx=Load()), attr='comes_from', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[AnnAssign(target=Name(id='comes_from', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Attribute(value=Name(id='req', ctx=Load()), attr='comes_from', ctx=Load()), simple=1)], orelse=[Assign(targets=[Name(id='comes_from', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='req', ctx=Load()), attr='comes_from', ctx=Load()), attr='from_path', ctx=Load()), args=[], keywords=[]))]), If(test=Name(id='comes_from', ctx=Load()), body=[AugAssign(target=Name(id='information', ctx=Store()), op=Add(), value=JoinedStr(values=[Constant(value=' (from '), FormattedValue(value=Name(id='comes_from', ctx=Load()), conversion=-1), Constant(value=')')]))], orelse=[])], orelse=[]), If(test=Compare(left=Tuple(elts=[Name(id='message', ctx=Load()), Name(id='information', ctx=Load())], ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_previous_requirement_header', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_previous_requirement_header', ctx=Store())], value=Tuple(elts=[Name(id='message', ctx=Load()), Name(id='information', ctx=Load())], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Name(id='message', ctx=Load()), Name(id='information', ctx=Load())], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='req', ctx=Load()), attr='is_wheel_from_cache', ctx=Load()), body=[With(items=[withitem(context_expr=Call(func=Name(id='indent_log', ctx=Load()), args=[], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Using cached %s'), Attribute(value=Attribute(value=Name(id='req', ctx=Load()), attr='link', ctx=Load()), attr='filename', ctx=Load())], keywords=[]))])], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_ensure_link_req_src_dir', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='req', annotation=Name(id='InstallRequirement', ctx=Load())), arg(arg='parallel_builds', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Ensure source_dir of a linked InstallRequirement.')), If(test=Attribute(value=Attribute(value=Name(id='req', ctx=Load()), attr='link', ctx=Load()), attr='is_wheel', ctx=Load()), body=[Return()], orelse=[]), Assert(test=Compare(left=Attribute(value=Name(id='req', ctx=Load()), attr='source_dir', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])), If(test=Call(func=Attribute(value=Attribute(value=Name(id='req', ctx=Load()), attr='link', ctx=Load()), attr='is_existing_dir', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Attribute(value=Name(id='req', ctx=Load()), attr='source_dir', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='req', ctx=Load()), attr='link', ctx=Load()), attr='file_path', ctx=Load())), Return()], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='req', ctx=Load()), attr='ensure_has_source_dir', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='build_dir', ctx=Load())], keywords=[keyword(arg='autodelete', value=Constant(value=True)), keyword(arg='parallel_builds', value=Name(id='parallel_builds', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='req', ctx=Load()), attr='ensure_pristine_source_checkout', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_get_linked_req_hashes', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='req', annotation=Name(id='InstallRequirement', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='require_hashes', ctx=Load())), body=[Return(value=Call(func=Attribute(value=Name(id='req', ctx=Load()), attr='hashes', ctx=Load()), args=[], keywords=[keyword(arg='trust_internet', value=Constant(value=True))]))], orelse=[]), If(test=Attribute(value=Attribute(value=Name(id='req', ctx=Load()), attr='link', ctx=Load()), attr='is_vcs', ctx=Load()), body=[Raise(exc=Call(func=Name(id='VcsHashUnsupported', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Call(func=Attribute(value=Attribute(value=Name(id='req', ctx=Load()), attr='link', ctx=Load()), attr='is_existing_dir', ctx=Load()), args=[], keywords=[]), body=[Raise(exc=Call(func=Name(id='DirectoryUrlHashUnsupported', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Attribute(value=Name(id='req', ctx=Load()), attr='is_direct', ctx=Load())), UnaryOp(op=Not(), operand=Attribute(value=Name(id='req', ctx=Load()), attr='is_pinned', ctx=Load()))]), body=[Raise(exc=Call(func=Name(id='HashUnpinned', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='req', ctx=Load()), attr='hashes', ctx=Load()), args=[], keywords=[keyword(arg='trust_internet', value=Constant(value=False))]), Call(func=Name(id='MissingHashes', ctx=Load()), args=[], keywords=[])]))], decorator_list=[], returns=Name(id='Hashes', ctx=Load())), FunctionDef(name='_fetch_metadata_only', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='req', annotation=Name(id='InstallRequirement', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='legacy_resolver', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Metadata-only fetching is not used in the legacy resolver')], keywords=[])), Return(value=Constant(value=None))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='require_hashes', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Metadata-only fetching is not used as hash checking is required')], keywords=[])), Return(value=Constant(value=None))], orelse=[]), Return(value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_fetch_metadata_using_link_data_attr', ctx=Load()), args=[Name(id='req', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_fetch_metadata_using_lazy_wheel', ctx=Load()), args=[Attribute(value=Name(id='req', ctx=Load()), attr='link', ctx=Load())], keywords=[])]))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='BaseDistribution', ctx=Load()), ctx=Load())), FunctionDef(name='_fetch_metadata_using_link_data_attr', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='req', annotation=Name(id='InstallRequirement', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Fetch metadata from the data-dist-info-metadata attribute, if possible.')), Assign(targets=[Name(id='metadata_link', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='req', ctx=Load()), attr='link', ctx=Load()), attr='metadata_link', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='metadata_link', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=None))], orelse=[]), Assert(test=Compare(left=Attribute(value=Name(id='req', ctx=Load()), attr='req', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='verbose', ctx=Load()), args=[Constant(value='Obtaining dependency information for %s from %s'), Attribute(value=Name(id='req', ctx=Load()), attr='req', ctx=Load()), Name(id='metadata_link', ctx=Load())], keywords=[])), Assign(targets=[Name(id='metadata_file', ctx=Store())], value=Call(func=Name(id='get_http_url', ctx=Load()), args=[Name(id='metadata_link', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_download', ctx=Load())], keywords=[keyword(arg='hashes', value=Call(func=Attribute(value=Name(id='metadata_link', ctx=Load()), attr='as_hashes', ctx=Load()), args=[], keywords=[]))])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Attribute(value=Name(id='metadata_file', ctx=Load()), attr='path', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='metadata_contents', ctx=Store())], value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]))]), Assign(targets=[Name(id='metadata_dist', ctx=Store())], value=Call(func=Name(id='get_metadata_distribution', ctx=Load()), args=[Name(id='metadata_contents', ctx=Load()), Attribute(value=Attribute(value=Name(id='req', ctx=Load()), attr='link', ctx=Load()), attr='filename', ctx=Load()), Attribute(value=Attribute(value=Name(id='req', ctx=Load()), attr='req', ctx=Load()), attr='name', ctx=Load())], keywords=[])), If(test=Compare(left=Call(func=Name(id='canonicalize_name', ctx=Load()), args=[Attribute(value=Name(id='metadata_dist', ctx=Load()), attr='raw_name', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='canonicalize_name', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='req', ctx=Load()), attr='req', ctx=Load()), attr='name', ctx=Load())], keywords=[])]), body=[Raise(exc=Call(func=Name(id='MetadataInconsistent', ctx=Load()), args=[Name(id='req', ctx=Load()), Constant(value='Name'), Attribute(value=Attribute(value=Name(id='req', ctx=Load()), attr='req', ctx=Load()), attr='name', ctx=Load()), Attribute(value=Name(id='metadata_dist', ctx=Load()), attr='raw_name', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='metadata_dist', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='BaseDistribution', ctx=Load()), ctx=Load())), FunctionDef(name='_fetch_metadata_using_lazy_wheel', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='link', annotation=Name(id='Link', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Fetch metadata using lazy wheel, if possible.')), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='use_lazy_wheel', ctx=Load())), body=[Return(value=Constant(value=None))], orelse=[]), If(test=BoolOp(op=Or(), values=[Attribute(value=Name(id='link', ctx=Load()), attr='is_file', ctx=Load()), UnaryOp(op=Not(), operand=Attribute(value=Name(id='link', ctx=Load()), attr='is_wheel', ctx=Load()))]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Lazy wheel is not used as %r does not point to a remote wheel'), Name(id='link', ctx=Load())], keywords=[])), Return(value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='wheel', ctx=Store())], value=Call(func=Name(id='Wheel', ctx=Load()), args=[Attribute(value=Name(id='link', ctx=Load()), attr='filename', ctx=Load())], keywords=[])), Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Name(id='canonicalize_name', ctx=Load()), args=[Attribute(value=Name(id='wheel', ctx=Load()), attr='name', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Obtaining dependency information from %s %s'), Name(id='name', ctx=Load()), Attribute(value=Name(id='wheel', ctx=Load()), attr='version', ctx=Load())], keywords=[])), Assign(targets=[Name(id='url', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Attribute(value=Name(id='link', ctx=Load()), attr='url', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='#'), Constant(value=1)], keywords=[]), slice=Constant(value=0), ctx=Load())), Try(body=[Return(value=Call(func=Name(id='dist_from_wheel_url', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='url', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_session', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='HTTPRangeRequestUnsupported', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='%s does not support range requests'), Name(id='url', ctx=Load())], keywords=[])), Return(value=Constant(value=None))])], orelse=[], finalbody=[])], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='BaseDistribution', ctx=Load()), ctx=Load())), FunctionDef(name='_complete_partial_requirements', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='partially_downloaded_reqs', annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='InstallRequirement', ctx=Load()), ctx=Load())), arg(arg='parallel_builds', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value='Download any requirements which were only fetched by metadata.')), Assign(targets=[Name(id='temp_dir', ctx=Store())], value=Attribute(value=Call(func=Name(id='TempDirectory', ctx=Load()), args=[], keywords=[keyword(arg='kind', value=Constant(value='unpack')), keyword(arg='globally_managed', value=Constant(value=True))]), attr='path', ctx=Load())), AnnAssign(target=Name(id='links_to_fully_download', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='Link', ctx=Load()), Name(id='InstallRequirement', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=1), For(target=Name(id='req', ctx=Store()), iter=Name(id='partially_downloaded_reqs', ctx=Load()), body=[Assert(test=Attribute(value=Name(id='req', ctx=Load()), attr='link', ctx=Load())), Assign(targets=[Subscript(value=Name(id='links_to_fully_download', ctx=Load()), slice=Attribute(value=Name(id='req', ctx=Load()), attr='link', ctx=Load()), ctx=Store())], value=Name(id='req', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='batch_download', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_batch_download', ctx=Load()), args=[Call(func=Attribute(value=Name(id='links_to_fully_download', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[]), Name(id='temp_dir', ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='link', ctx=Store()), Tuple(elts=[Name(id='filepath', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], ctx=Store()), iter=Name(id='batch_download', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Downloading link %s to %s'), Name(id='link', ctx=Load()), Name(id='filepath', ctx=Load())], keywords=[])), Assign(targets=[Name(id='req', ctx=Store())], value=Subscript(value=Name(id='links_to_fully_download', ctx=Load()), slice=Name(id='link', ctx=Load()), ctx=Load())), Assign(targets=[Attribute(value=Name(id='req', ctx=Load()), attr='local_file_path', ctx=Store())], value=Name(id='filepath', ctx=Load())), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_downloaded', ctx=Load()), slice=Attribute(value=Attribute(value=Name(id='req', ctx=Load()), attr='link', ctx=Load()), attr='url', ctx=Load()), ctx=Store())], value=Name(id='filepath', ctx=Load())), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='req', ctx=Load()), attr='is_wheel', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='req', ctx=Load()), attr='needs_unpacked_archive', ctx=Load()), args=[Call(func=Name(id='Path', ctx=Load()), args=[Name(id='filepath', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], orelse=[]), For(target=Name(id='req', ctx=Store()), iter=Name(id='partially_downloaded_reqs', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_prepare_linked_requirement', ctx=Load()), args=[Name(id='req', ctx=Load()), Name(id='parallel_builds', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='prepare_linked_requirement', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='req', annotation=Name(id='InstallRequirement', ctx=Load())), arg(arg='parallel_builds', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value='Prepare a requirement to be obtained from req.link.')), Assert(test=Attribute(value=Name(id='req', ctx=Load()), attr='link', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_log_preparing_link', ctx=Load()), args=[Name(id='req', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='indent_log', ctx=Load()), args=[], keywords=[]))], body=[Assign(targets=[Name(id='file_path', ctx=Store())], value=Constant(value=None)), If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='download_dir', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Attribute(value=Attribute(value=Name(id='req', ctx=Load()), attr='link', ctx=Load()), attr='is_wheel', ctx=Load())]), body=[Assign(targets=[Name(id='hashes', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_linked_req_hashes', ctx=Load()), args=[Name(id='req', ctx=Load())], keywords=[])), Assign(targets=[Name(id='file_path', ctx=Store())], value=Call(func=Name(id='_check_download_dir', ctx=Load()), args=[Attribute(value=Name(id='req', ctx=Load()), attr='link', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='download_dir', ctx=Load()), Name(id='hashes', ctx=Load())], keywords=[keyword(arg='warn_on_hash_mismatch', value=UnaryOp(op=Not(), operand=Attribute(value=Name(id='req', ctx=Load()), attr='is_wheel_from_cache', ctx=Load())))]))], orelse=[]), If(test=Compare(left=Name(id='file_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_downloaded', ctx=Load()), slice=Attribute(value=Attribute(value=Name(id='req', ctx=Load()), attr='link', ctx=Load()), attr='url', ctx=Load()), ctx=Store())], value=Name(id='file_path', ctx=Load()))], orelse=[Assign(targets=[Name(id='metadata_dist', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_fetch_metadata_only', ctx=Load()), args=[Name(id='req', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='metadata_dist', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='req', ctx=Load()), attr='needs_more_preparation', ctx=Store())], value=Constant(value=True)), Return(value=Name(id='metadata_dist', ctx=Load()))], orelse=[])]), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_prepare_linked_requirement', ctx=Load()), args=[Name(id='req', ctx=Load()), Name(id='parallel_builds', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Name(id='BaseDistribution', ctx=Load())), FunctionDef(name='prepare_linked_requirements_more', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='reqs', annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='InstallRequirement', ctx=Load()), ctx=Load())), arg(arg='parallel_builds', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value='Prepare linked requirements more, if needed.')), Assign(targets=[Name(id='reqs', ctx=Store())], value=ListComp(elt=Name(id='req', ctx=Load()), generators=[comprehension(target=Name(id='req', ctx=Store()), iter=Name(id='reqs', ctx=Load()), ifs=[Attribute(value=Name(id='req', ctx=Load()), attr='needs_more_preparation', ctx=Load())], is_async=0)])), For(target=Name(id='req', ctx=Store()), iter=Name(id='reqs', ctx=Load()), body=[If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='download_dir', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Attribute(value=Attribute(value=Name(id='req', ctx=Load()), attr='link', ctx=Load()), attr='is_wheel', ctx=Load())]), body=[Assign(targets=[Name(id='hashes', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_linked_req_hashes', ctx=Load()), args=[Name(id='req', ctx=Load())], keywords=[])), Assign(targets=[Name(id='file_path', ctx=Store())], value=Call(func=Name(id='_check_download_dir', ctx=Load()), args=[Attribute(value=Name(id='req', ctx=Load()), attr='link', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='download_dir', ctx=Load()), Name(id='hashes', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='file_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_downloaded', ctx=Load()), slice=Attribute(value=Attribute(value=Name(id='req', ctx=Load()), attr='link', ctx=Load()), attr='url', ctx=Load()), ctx=Store())], value=Name(id='file_path', ctx=Load())), Assign(targets=[Attribute(value=Name(id='req', ctx=Load()), attr='needs_more_preparation', ctx=Store())], value=Constant(value=False))], orelse=[])], orelse=[])], orelse=[]), AnnAssign(target=Name(id='partially_downloaded_reqs', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='InstallRequirement', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), For(target=Name(id='req', ctx=Store()), iter=Name(id='reqs', ctx=Load()), body=[If(test=Attribute(value=Name(id='req', ctx=Load()), attr='needs_more_preparation', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='partially_downloaded_reqs', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='req', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_prepare_linked_requirement', ctx=Load()), args=[Name(id='req', ctx=Load()), Name(id='parallel_builds', ctx=Load())], keywords=[]))])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_complete_partial_requirements', ctx=Load()), args=[Name(id='partially_downloaded_reqs', ctx=Load())], keywords=[keyword(arg='parallel_builds', value=Name(id='parallel_builds', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_prepare_linked_requirement', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='req', annotation=Name(id='InstallRequirement', ctx=Load())), arg(arg='parallel_builds', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Attribute(value=Name(id='req', ctx=Load()), attr='link', ctx=Load())), Assign(targets=[Name(id='link', ctx=Store())], value=Attribute(value=Name(id='req', ctx=Load()), attr='link', ctx=Load())), Assign(targets=[Name(id='hashes', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_linked_req_hashes', ctx=Load()), args=[Name(id='req', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Name(id='hashes', ctx=Load()), Attribute(value=Name(id='req', ctx=Load()), attr='is_wheel_from_cache', ctx=Load())]), body=[Assert(test=Compare(left=Attribute(value=Name(id='req', ctx=Load()), attr='download_info', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assert(test=Attribute(value=Name(id='link', ctx=Load()), attr='is_wheel', ctx=Load())), Assert(test=Attribute(value=Name(id='link', ctx=Load()), attr='is_file', ctx=Load())), If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='req', ctx=Load()), attr='download_info', ctx=Load()), attr='info', ctx=Load()), Name(id='ArchiveInfo', ctx=Load())], keywords=[]), Attribute(value=Attribute(value=Attribute(value=Name(id='req', ctx=Load()), attr='download_info', ctx=Load()), attr='info', ctx=Load()), attr='hashes', ctx=Load()), Call(func=Attribute(value=Name(id='hashes', ctx=Load()), attr='has_one_of', ctx=Load()), args=[Attribute(value=Attribute(value=Attribute(value=Name(id='req', ctx=Load()), attr='download_info', ctx=Load()), attr='info', ctx=Load()), attr='hashes', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='hashes', ctx=Store())], value=Constant(value=None))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value="The hashes of the source archive found in cache entry don't match, ignoring cached built wheel and re-downloading source.")], keywords=[])), Assign(targets=[Attribute(value=Name(id='req', ctx=Load()), attr='link', ctx=Store())], value=Attribute(value=Name(id='req', ctx=Load()), attr='cached_wheel_source_link', ctx=Load())), Assign(targets=[Name(id='link', ctx=Store())], value=Attribute(value=Name(id='req', ctx=Load()), attr='link', ctx=Load()))])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_ensure_link_req_src_dir', ctx=Load()), args=[Name(id='req', ctx=Load()), Name(id='parallel_builds', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Name(id='link', ctx=Load()), attr='is_existing_dir', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='local_file', ctx=Store())], value=Constant(value=None))], orelse=[If(test=Compare(left=Attribute(value=Name(id='link', ctx=Load()), attr='url', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_downloaded', ctx=Load())]), body=[Try(body=[Assign(targets=[Name(id='local_file', ctx=Store())], value=Call(func=Name(id='unpack_url', ctx=Load()), args=[Name(id='link', ctx=Load()), Attribute(value=Name(id='req', ctx=Load()), attr='source_dir', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_download', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='verbosity', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='download_dir', ctx=Load()), Name(id='hashes', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='NetworkConnectionError', ctx=Load()), name='exc', body=[Raise(exc=Call(func=Name(id='InstallationError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Could not install requirement {} because of HTTP error {} for URL {}'), attr='format', ctx=Load()), args=[Name(id='req', ctx=Load()), Name(id='exc', ctx=Load()), Name(id='link', ctx=Load())], keywords=[])], keywords=[]))])], orelse=[], finalbody=[])], orelse=[Assign(targets=[Name(id='file_path', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_downloaded', ctx=Load()), slice=Attribute(value=Name(id='link', ctx=Load()), attr='url', ctx=Load()), ctx=Load())), If(test=Name(id='hashes', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='hashes', ctx=Load()), attr='check_against_path', ctx=Load()), args=[Name(id='file_path', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='local_file', ctx=Store())], value=Call(func=Name(id='File', ctx=Load()), args=[Name(id='file_path', ctx=Load())], keywords=[keyword(arg='content_type', value=Constant(value=None))]))])]), If(test=Compare(left=Attribute(value=Name(id='req', ctx=Load()), attr='download_info', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assert(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='req', ctx=Load()), attr='editable', ctx=Load()))), Assign(targets=[Attribute(value=Name(id='req', ctx=Load()), attr='download_info', ctx=Store())], value=Call(func=Name(id='direct_url_from_link', ctx=Load()), args=[Name(id='link', ctx=Load()), Attribute(value=Name(id='req', ctx=Load()), attr='source_dir', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='req', ctx=Load()), attr='download_info', ctx=Load()), attr='info', ctx=Load()), Name(id='ArchiveInfo', ctx=Load())], keywords=[]), UnaryOp(op=Not(), operand=Attribute(value=Attribute(value=Attribute(value=Name(id='req', ctx=Load()), attr='download_info', ctx=Load()), attr='info', ctx=Load()), attr='hashes', ctx=Load())), Name(id='local_file', ctx=Load())]), body=[Assign(targets=[Name(id='hash', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Call(func=Name(id='hash_file', ctx=Load()), args=[Attribute(value=Name(id='local_file', ctx=Load()), attr='path', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load()), attr='hexdigest', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Attribute(value=Attribute(value=Name(id='req', ctx=Load()), attr='download_info', ctx=Load()), attr='info', ctx=Load()), attr='hash', ctx=Store())], value=JoinedStr(values=[Constant(value='sha256='), FormattedValue(value=Name(id='hash', ctx=Load()), conversion=-1)]))], orelse=[])], orelse=[]), If(test=Name(id='local_file', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='req', ctx=Load()), attr='local_file_path', ctx=Store())], value=Attribute(value=Name(id='local_file', ctx=Load()), attr='path', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='dist', ctx=Store())], value=Call(func=Name(id='_get_prepared_distribution', ctx=Load()), args=[Name(id='req', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='build_tracker', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='finder', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='build_isolation', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='check_build_deps', ctx=Load())], keywords=[])), Return(value=Name(id='dist', ctx=Load()))], decorator_list=[], returns=Name(id='BaseDistribution', ctx=Load())), FunctionDef(name='save_linked_requirement', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='req', annotation=Name(id='InstallRequirement', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='download_dir', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assert(test=Compare(left=Attribute(value=Name(id='req', ctx=Load()), attr='link', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Name(id='link', ctx=Store())], value=Attribute(value=Name(id='req', ctx=Load()), attr='link', ctx=Load())), If(test=BoolOp(op=Or(), values=[Attribute(value=Name(id='link', ctx=Load()), attr='is_vcs', ctx=Load()), BoolOp(op=And(), values=[Call(func=Attribute(value=Name(id='link', ctx=Load()), attr='is_existing_dir', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='req', ctx=Load()), attr='editable', ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Name(id='req', ctx=Load()), attr='archive', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='download_dir', ctx=Load())], keywords=[])), Return()], orelse=[]), If(test=Call(func=Attribute(value=Name(id='link', ctx=Load()), attr='is_existing_dir', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Not copying link to destination directory since it is a directory: %s'), Name(id='link', ctx=Load())], keywords=[])), Return()], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='req', ctx=Load()), attr='local_file_path', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return()], orelse=[]), Assign(targets=[Name(id='download_location', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='download_dir', ctx=Load()), Attribute(value=Name(id='link', ctx=Load()), attr='filename', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='download_location', ctx=Load())], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id='shutil', ctx=Load()), attr='copy', ctx=Load()), args=[Attribute(value=Name(id='req', ctx=Load()), attr='local_file_path', ctx=Load()), Name(id='download_location', ctx=Load())], keywords=[])), Assign(targets=[Name(id='download_path', ctx=Store())], value=Call(func=Name(id='display_path', ctx=Load()), args=[Name(id='download_location', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Saved %s'), Name(id='download_path', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='prepare_editable_requirement', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='req', annotation=Name(id='InstallRequirement', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Prepare an editable requirement.')), Assert(test=Attribute(value=Name(id='req', ctx=Load()), attr='editable', ctx=Load()), msg=Constant(value='cannot prepare a non-editable req as editable')), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Obtaining %s'), Name(id='req', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='indent_log', ctx=Load()), args=[], keywords=[]))], body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='require_hashes', ctx=Load()), body=[Raise(exc=Call(func=Name(id='InstallationError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='The editable requirement {} cannot be installed when requiring hashes, because there is no single file to hash.'), attr='format', ctx=Load()), args=[Name(id='req', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='req', ctx=Load()), attr='ensure_has_source_dir', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='src_dir', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='req', ctx=Load()), attr='update_editable', ctx=Load()), args=[], keywords=[])), Assert(test=Attribute(value=Name(id='req', ctx=Load()), attr='source_dir', ctx=Load())), Assign(targets=[Attribute(value=Name(id='req', ctx=Load()), attr='download_info', ctx=Store())], value=Call(func=Name(id='direct_url_for_editable', ctx=Load()), args=[Attribute(value=Name(id='req', ctx=Load()), attr='unpacked_source_directory', ctx=Load())], keywords=[])), Assign(targets=[Name(id='dist', ctx=Store())], value=Call(func=Name(id='_get_prepared_distribution', ctx=Load()), args=[Name(id='req', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='build_tracker', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='finder', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='build_isolation', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='check_build_deps', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='req', ctx=Load()), attr='check_if_exists', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='use_user_site', ctx=Load())], keywords=[]))]), Return(value=Name(id='dist', ctx=Load()))], decorator_list=[], returns=Name(id='BaseDistribution', ctx=Load())), FunctionDef(name='prepare_installed_requirement', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='req', annotation=Name(id='InstallRequirement', ctx=Load())), arg(arg='skip_reason', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Prepare an already-installed requirement.')), Assert(test=Attribute(value=Name(id='req', ctx=Load()), attr='satisfied_by', ctx=Load()), msg=Constant(value="req should have been satisfied but isn't")), Assert(test=Compare(left=Name(id='skip_reason', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), msg=Call(func=Attribute(value=Constant(value='did not get skip reason skipped but req.satisfied_by is set to {}'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='req', ctx=Load()), attr='satisfied_by', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Requirement %s: %s (%s)'), Name(id='skip_reason', ctx=Load()), Name(id='req', ctx=Load()), Attribute(value=Attribute(value=Name(id='req', ctx=Load()), attr='satisfied_by', ctx=Load()), attr='version', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='indent_log', ctx=Load()), args=[], keywords=[]))], body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='require_hashes', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Since it is already installed, we are trusting this package without checking its hash. To ensure a completely repeatable environment, install into an empty virtualenv.')], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Call(func=Name(id='InstalledDistribution', ctx=Load()), args=[Name(id='req', ctx=Load())], keywords=[]), attr='get_metadata_distribution', ctx=Load()), args=[], keywords=[]))])], decorator_list=[], returns=Name(id='BaseDistribution', ctx=Load()))], decorator_list=[])], type_ignores=[])