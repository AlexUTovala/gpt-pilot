Module(body=[Expr(value=Constant(value='Support for installing and building the "wheel" binary package format.\n')), Import(names=[alias(name='collections')]), Import(names=[alias(name='compileall')]), Import(names=[alias(name='contextlib')]), Import(names=[alias(name='csv')]), Import(names=[alias(name='importlib')]), Import(names=[alias(name='logging')]), Import(names=[alias(name='os.path')]), Import(names=[alias(name='re')]), Import(names=[alias(name='shutil')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='warnings')]), ImportFrom(module='base64', names=[alias(name='urlsafe_b64encode')], level=0), ImportFrom(module='email.message', names=[alias(name='Message')], level=0), ImportFrom(module='itertools', names=[alias(name='chain'), alias(name='filterfalse'), alias(name='starmap')], level=0), ImportFrom(module='typing', names=[alias(name='IO'), alias(name='TYPE_CHECKING'), alias(name='Any'), alias(name='BinaryIO'), alias(name='Callable'), alias(name='Dict'), alias(name='Generator'), alias(name='Iterable'), alias(name='Iterator'), alias(name='List'), alias(name='NewType'), alias(name='Optional'), alias(name='Sequence'), alias(name='Set'), alias(name='Tuple'), alias(name='Union'), alias(name='cast')], level=0), ImportFrom(module='zipfile', names=[alias(name='ZipFile'), alias(name='ZipInfo')], level=0), ImportFrom(module='pip._vendor.distlib.scripts', names=[alias(name='ScriptMaker')], level=0), ImportFrom(module='pip._vendor.distlib.util', names=[alias(name='get_export_entry')], level=0), ImportFrom(module='pip._vendor.packaging.utils', names=[alias(name='canonicalize_name')], level=0), ImportFrom(module='pip._internal.exceptions', names=[alias(name='InstallationError')], level=0), ImportFrom(module='pip._internal.locations', names=[alias(name='get_major_minor_version')], level=0), ImportFrom(module='pip._internal.metadata', names=[alias(name='BaseDistribution'), alias(name='FilesystemWheel'), alias(name='get_wheel_distribution')], level=0), ImportFrom(module='pip._internal.models.direct_url', names=[alias(name='DIRECT_URL_METADATA_NAME'), alias(name='DirectUrl')], level=0), ImportFrom(module='pip._internal.models.scheme', names=[alias(name='SCHEME_KEYS'), alias(name='Scheme')], level=0), ImportFrom(module='pip._internal.utils.filesystem', names=[alias(name='adjacent_tmp_file'), alias(name='replace')], level=0), ImportFrom(module='pip._internal.utils.misc', names=[alias(name='captured_stdout'), alias(name='ensure_dir'), alias(name='hash_file'), alias(name='partition')], level=0), ImportFrom(module='pip._internal.utils.unpacking', names=[alias(name='current_umask'), alias(name='is_within_directory'), alias(name='set_extracted_file_to_default_mode_plus_executable'), alias(name='zip_item_is_executable')], level=0), ImportFrom(module='pip._internal.utils.wheel', names=[alias(name='parse_wheel')], level=0), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='typing', names=[alias(name='Protocol')], level=0), ClassDef(name='File', bases=[Name(id='Protocol', ctx=Load())], keywords=[], body=[AnnAssign(target=Name(id='src_record_path', ctx=Store()), annotation=Constant(value='RecordPath'), simple=1), AnnAssign(target=Name(id='dest_path', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='changed', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1), FunctionDef(name='save', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None))], decorator_list=[])], orelse=[]), Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), Assign(targets=[Name(id='RecordPath', ctx=Store())], value=Call(func=Name(id='NewType', ctx=Load()), args=[Constant(value='RecordPath'), Name(id='str', ctx=Load())], keywords=[])), Assign(targets=[Name(id='InstalledCSVRow', ctx=Store())], value=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='RecordPath', ctx=Load()), Name(id='str', ctx=Load()), Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='rehash', args=arguments(posonlyargs=[], args=[arg(arg='path', annotation=Name(id='str', ctx=Load())), arg(arg='blocksize', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[BinOp(left=Constant(value=1), op=LShift(), right=Constant(value=20))]), body=[Expr(value=Constant(value='Return (encoded_digest, length) for path using hashlib.sha256()')), Assign(targets=[Tuple(elts=[Name(id='h', ctx=Store()), Name(id='length', ctx=Store())], ctx=Store())], value=Call(func=Name(id='hash_file', ctx=Load()), args=[Name(id='path', ctx=Load()), Name(id='blocksize', ctx=Load())], keywords=[])), Assign(targets=[Name(id='digest', ctx=Store())], value=BinOp(left=Constant(value='sha256='), op=Add(), right=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Name(id='urlsafe_b64encode', ctx=Load()), args=[Call(func=Attribute(value=Name(id='h', ctx=Load()), attr='digest', ctx=Load()), args=[], keywords=[])], keywords=[]), attr='decode', ctx=Load()), args=[Constant(value='latin1')], keywords=[]), attr='rstrip', ctx=Load()), args=[Constant(value='=')], keywords=[]))), Return(value=Tuple(elts=[Name(id='digest', ctx=Load()), Call(func=Name(id='str', ctx=Load()), args=[Name(id='length', ctx=Load())], keywords=[])], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='csv_io_kwargs', args=arguments(posonlyargs=[], args=[arg(arg='mode', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return keyword arguments to properly open a CSV file\n    in the given mode.\n    ')), Return(value=Dict(keys=[Constant(value='mode'), Constant(value='newline'), Constant(value='encoding')], values=[Name(id='mode', ctx=Load()), Constant(value=''), Constant(value='utf-8')]))], decorator_list=[], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='fix_script', args=arguments(posonlyargs=[], args=[arg(arg='path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Replace #!python with #!/path/to/python\n    Return True if file was changed.\n    ')), Assert(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isfile', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='path', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='script', ctx=Store()))], body=[Assign(targets=[Name(id='firstline', ctx=Store())], value=Call(func=Attribute(value=Name(id='script', ctx=Load()), attr='readline', ctx=Load()), args=[], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='firstline', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value=b'#!python')], keywords=[])), body=[Return(value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='exename', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='executable', ctx=Load()), attr='encode', ctx=Load()), args=[Call(func=Attribute(value=Name(id='sys', ctx=Load()), attr='getfilesystemencoding', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='firstline', ctx=Store())], value=BinOp(left=BinOp(left=Constant(value=b'#!'), op=Add(), right=Name(id='exename', ctx=Load())), op=Add(), right=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='linesep', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]))), Assign(targets=[Name(id='rest', ctx=Store())], value=Call(func=Attribute(value=Name(id='script', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]))]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='path', ctx=Load()), Constant(value='wb')], keywords=[]), optional_vars=Name(id='script', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='script', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='firstline', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='script', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='rest', ctx=Load())], keywords=[]))]), Return(value=Constant(value=True))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='wheel_root_is_purelib', args=arguments(posonlyargs=[], args=[arg(arg='metadata', annotation=Name(id='Message', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Compare(left=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='metadata', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='Root-Is-Purelib'), Constant(value='')], keywords=[]), attr='lower', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Constant(value='true')]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='get_entrypoints', args=arguments(posonlyargs=[], args=[arg(arg='dist', annotation=Name(id='BaseDistribution', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='console_scripts', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='gui_scripts', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='entry_point', ctx=Store()), iter=Call(func=Attribute(value=Name(id='dist', ctx=Load()), attr='iter_entry_points', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Attribute(value=Name(id='entry_point', ctx=Load()), attr='group', ctx=Load()), ops=[Eq()], comparators=[Constant(value='console_scripts')]), body=[Assign(targets=[Subscript(value=Name(id='console_scripts', ctx=Load()), slice=Attribute(value=Name(id='entry_point', ctx=Load()), attr='name', ctx=Load()), ctx=Store())], value=Attribute(value=Name(id='entry_point', ctx=Load()), attr='value', ctx=Load()))], orelse=[If(test=Compare(left=Attribute(value=Name(id='entry_point', ctx=Load()), attr='group', ctx=Load()), ops=[Eq()], comparators=[Constant(value='gui_scripts')]), body=[Assign(targets=[Subscript(value=Name(id='gui_scripts', ctx=Load()), slice=Attribute(value=Name(id='entry_point', ctx=Load()), attr='name', ctx=Load()), ctx=Store())], value=Attribute(value=Name(id='entry_point', ctx=Load()), attr='value', ctx=Load()))], orelse=[])])], orelse=[]), Return(value=Tuple(elts=[Name(id='console_scripts', ctx=Load()), Name(id='gui_scripts', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='message_about_scripts_not_on_PATH', args=arguments(posonlyargs=[], args=[arg(arg='scripts', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Determine if any scripts are not on PATH and format a warning.\n    Returns a warning message if one or more scripts are not on PATH,\n    otherwise None.\n    ')), If(test=UnaryOp(op=Not(), operand=Name(id='scripts', ctx=Load())), body=[Return(value=Constant(value=None))], orelse=[]), AnnAssign(target=Name(id='grouped_by_dir', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Set', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Call(func=Attribute(value=Name(id='collections', ctx=Load()), attr='defaultdict', ctx=Load()), args=[Name(id='set', ctx=Load())], keywords=[]), simple=1), For(target=Name(id='destfile', ctx=Store()), iter=Name(id='scripts', ctx=Load()), body=[Assign(targets=[Name(id='parent_dir', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Name(id='destfile', ctx=Load())], keywords=[])), Assign(targets=[Name(id='script_name', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='basename', ctx=Load()), args=[Name(id='destfile', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='grouped_by_dir', ctx=Load()), slice=Name(id='parent_dir', ctx=Load()), ctx=Load()), attr='add', ctx=Load()), args=[Name(id='script_name', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='not_warn_dirs', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normcase', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normpath', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[])], keywords=[]), attr='rstrip', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='sep', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='PATH'), Constant(value='')], keywords=[]), attr='split', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='pathsep', ctx=Load())], keywords=[]), ifs=[], is_async=0)])), Expr(value=Call(func=Attribute(value=Name(id='not_warn_dirs', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normcase', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normpath', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='executable', ctx=Load())], keywords=[])], keywords=[])], keywords=[])], keywords=[])), AnnAssign(target=Name(id='warn_for', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Set', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=DictComp(key=Name(id='parent_dir', ctx=Load()), value=Name(id='scripts', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='parent_dir', ctx=Store()), Name(id='scripts', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='grouped_by_dir', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normcase', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normpath', ctx=Load()), args=[Name(id='parent_dir', ctx=Load())], keywords=[])], keywords=[]), ops=[NotIn()], comparators=[Name(id='not_warn_dirs', ctx=Load())])], is_async=0)]), simple=1), If(test=UnaryOp(op=Not(), operand=Name(id='warn_for', ctx=Load())), body=[Return(value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='msg_lines', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='parent_dir', ctx=Store()), Name(id='dir_scripts', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='warn_for', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[AnnAssign(target=Name(id='sorted_scripts', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='dir_scripts', ctx=Load())], keywords=[]), simple=1), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='sorted_scripts', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='start_text', ctx=Store())], value=Call(func=Attribute(value=Constant(value='script {} is'), attr='format', ctx=Load()), args=[Subscript(value=Name(id='sorted_scripts', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='start_text', ctx=Store())], value=Call(func=Attribute(value=Constant(value='scripts {} are'), attr='format', ctx=Load()), args=[BinOp(left=BinOp(left=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Subscript(value=Name(id='sorted_scripts', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[]), op=Add(), right=Constant(value=' and ')), op=Add(), right=Subscript(value=Name(id='sorted_scripts', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='msg_lines', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Constant(value="The {} installed in '{}' which is not on PATH."), attr='format', ctx=Load()), args=[Name(id='start_text', ctx=Load()), Name(id='parent_dir', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='last_line_fmt', ctx=Store())], value=Constant(value='Consider adding {} to PATH or, if you prefer to suppress this warning, use --no-warn-script-location.')), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='msg_lines', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=[Expr(value=Call(func=Attribute(value=Name(id='msg_lines', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='last_line_fmt', ctx=Load()), attr='format', ctx=Load()), args=[Constant(value='this directory')], keywords=[])], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='msg_lines', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='last_line_fmt', ctx=Load()), attr='format', ctx=Load()), args=[Constant(value='these directories')], keywords=[])], keywords=[]))]), Assign(targets=[Name(id='warn_for_tilde', ctx=Store())], value=Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=Compare(left=Subscript(value=Name(id='i', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Constant(value='~')]), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='PATH'), Constant(value='')], keywords=[]), attr='split', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='pathsep', ctx=Load())], keywords=[]), ifs=[Name(id='i', ctx=Load())], is_async=0)])], keywords=[])), If(test=Name(id='warn_for_tilde', ctx=Load()), body=[Assign(targets=[Name(id='tilde_warning_msg', ctx=Store())], value=Constant(value='NOTE: The current PATH contains path(s) starting with `~`, which may not be expanded by all applications.')), Expr(value=Call(func=Attribute(value=Name(id='msg_lines', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='tilde_warning_msg', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Constant(value='\n'), attr='join', ctx=Load()), args=[Name(id='msg_lines', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='_normalized_outrows', args=arguments(posonlyargs=[], args=[arg(arg='outrows', annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='InstalledCSVRow', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Normalize the given rows of a RECORD file.\n\n    Items in each row are converted into str. Rows are then sorted to make\n    the value more predictable for tests.\n\n    Each row is a 3-tuple (path, hash, size) and corresponds to a record of\n    a RECORD file (see PEP 376 and PEP 427 for details).  For the rows\n    passed to this function, the size can be an integer as an int or string,\n    or the empty string.\n    ')), Return(value=Call(func=Name(id='sorted', ctx=Load()), args=[GeneratorExp(elt=Tuple(elts=[Name(id='record_path', ctx=Load()), Name(id='hash_', ctx=Load()), Call(func=Name(id='str', ctx=Load()), args=[Name(id='size', ctx=Load())], keywords=[])], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='record_path', ctx=Store()), Name(id='hash_', ctx=Store()), Name(id='size', ctx=Store())], ctx=Store()), iter=Name(id='outrows', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='_record_to_fs_path', args=arguments(posonlyargs=[], args=[arg(arg='record_path', annotation=Name(id='RecordPath', ctx=Load())), arg(arg='lib_dir', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='lib_dir', ctx=Load()), Name(id='record_path', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='_fs_to_record_path', args=arguments(posonlyargs=[], args=[arg(arg='path', annotation=Name(id='str', ctx=Load())), arg(arg='lib_dir', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Attribute(value=Subscript(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='splitdrive', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Subscript(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='splitdrive', ctx=Load()), args=[Name(id='lib_dir', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])]), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='relpath', ctx=Load()), args=[Name(id='path', ctx=Load()), Name(id='lib_dir', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='replace', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='sep', ctx=Load()), Constant(value='/')], keywords=[])), Return(value=Call(func=Name(id='cast', ctx=Load()), args=[Constant(value='RecordPath'), Name(id='path', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='RecordPath', ctx=Load())), FunctionDef(name='get_csv_rows_for_installed', args=arguments(posonlyargs=[], args=[arg(arg='old_csv_rows', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='installed', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='RecordPath', ctx=Load()), Name(id='RecordPath', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='changed', annotation=Subscript(value=Name(id='Set', ctx=Load()), slice=Name(id='RecordPath', ctx=Load()), ctx=Load())), arg(arg='generated', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='lib_dir', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    :param installed: A map from archive RECORD path to installation RECORD\n        path.\n    ')), AnnAssign(target=Name(id='installed_rows', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='InstalledCSVRow', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), For(target=Name(id='row', ctx=Store()), iter=Name(id='old_csv_rows', ctx=Load()), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='row', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=3)]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='RECORD line has more than three elements: %s'), Name(id='row', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='old_record_path', ctx=Store())], value=Call(func=Name(id='cast', ctx=Load()), args=[Constant(value='RecordPath'), Subscript(value=Name(id='row', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])), Assign(targets=[Name(id='new_record_path', ctx=Store())], value=Call(func=Attribute(value=Name(id='installed', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='old_record_path', ctx=Load()), Name(id='old_record_path', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='new_record_path', ctx=Load()), ops=[In()], comparators=[Name(id='changed', ctx=Load())]), body=[Assign(targets=[Tuple(elts=[Name(id='digest', ctx=Store()), Name(id='length', ctx=Store())], ctx=Store())], value=Call(func=Name(id='rehash', ctx=Load()), args=[Call(func=Name(id='_record_to_fs_path', ctx=Load()), args=[Name(id='new_record_path', ctx=Load()), Name(id='lib_dir', ctx=Load())], keywords=[])], keywords=[]))], orelse=[Assign(targets=[Name(id='digest', ctx=Store())], value=IfExp(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='row', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), body=Subscript(value=Name(id='row', ctx=Load()), slice=Constant(value=1), ctx=Load()), orelse=Constant(value=''))), Assign(targets=[Name(id='length', ctx=Store())], value=IfExp(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='row', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=2)]), body=Subscript(value=Name(id='row', ctx=Load()), slice=Constant(value=2), ctx=Load()), orelse=Constant(value='')))]), Expr(value=Call(func=Attribute(value=Name(id='installed_rows', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='new_record_path', ctx=Load()), Name(id='digest', ctx=Load()), Name(id='length', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='f', ctx=Store()), iter=Name(id='generated', ctx=Load()), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Name(id='_fs_to_record_path', ctx=Load()), args=[Name(id='f', ctx=Load()), Name(id='lib_dir', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='digest', ctx=Store()), Name(id='length', ctx=Store())], ctx=Store())], value=Call(func=Name(id='rehash', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='installed_rows', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='path', ctx=Load()), Name(id='digest', ctx=Load()), Name(id='length', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), Return(value=BinOp(left=Name(id='installed_rows', ctx=Load()), op=Add(), right=ListComp(elt=Tuple(elts=[Name(id='installed_record_path', ctx=Load()), Constant(value=''), Constant(value='')], ctx=Load()), generators=[comprehension(target=Name(id='installed_record_path', ctx=Store()), iter=Call(func=Attribute(value=Name(id='installed', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='InstalledCSVRow', ctx=Load()), ctx=Load())), FunctionDef(name='get_console_script_specs', args=arguments(posonlyargs=[], args=[arg(arg='console', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Given the mapping from entrypoint name to callable, return the relevant\n    console script specs.\n    ')), Assign(targets=[Name(id='console', ctx=Store())], value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='scripts_to_generate', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='pip_script', ctx=Store())], value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='pip'), Constant(value=None)], keywords=[])), If(test=Name(id='pip_script', ctx=Load()), body=[If(test=Compare(left=Constant(value='ENSUREPIP_OPTIONS'), ops=[NotIn()], comparators=[Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='scripts_to_generate', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Constant(value='pip = '), op=Add(), right=Name(id='pip_script', ctx=Load()))], keywords=[]))], orelse=[]), If(test=Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='ENSUREPIP_OPTIONS'), Constant(value='')], keywords=[]), ops=[NotEq()], comparators=[Constant(value='altinstall')]), body=[Expr(value=Call(func=Attribute(value=Name(id='scripts_to_generate', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='pip{} = {}'), attr='format', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), slice=Constant(value=0), ctx=Load()), Name(id='pip_script', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='scripts_to_generate', ctx=Load()), attr='append', ctx=Load()), args=[JoinedStr(values=[Constant(value='pip'), FormattedValue(value=Call(func=Name(id='get_major_minor_version', ctx=Load()), args=[], keywords=[]), conversion=-1), Constant(value=' = '), FormattedValue(value=Name(id='pip_script', ctx=Load()), conversion=-1)])], keywords=[])), Assign(targets=[Name(id='pip_ep', ctx=Store())], value=ListComp(elt=Name(id='k', ctx=Load()), generators=[comprehension(target=Name(id='k', ctx=Store()), iter=Name(id='console', ctx=Load()), ifs=[Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='match', ctx=Load()), args=[Constant(value='pip(\\d+(\\.\\d+)?)?$'), Name(id='k', ctx=Load())], keywords=[])], is_async=0)])), For(target=Name(id='k', ctx=Store()), iter=Name(id='pip_ep', ctx=Load()), body=[Delete(targets=[Subscript(value=Name(id='console', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Del())])], orelse=[])], orelse=[]), Assign(targets=[Name(id='easy_install_script', ctx=Store())], value=Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='easy_install'), Constant(value=None)], keywords=[])), If(test=Name(id='easy_install_script', ctx=Load()), body=[If(test=Compare(left=Constant(value='ENSUREPIP_OPTIONS'), ops=[NotIn()], comparators=[Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='scripts_to_generate', ctx=Load()), attr='append', ctx=Load()), args=[BinOp(left=Constant(value='easy_install = '), op=Add(), right=Name(id='easy_install_script', ctx=Load()))], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='scripts_to_generate', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='easy_install-{} = {}'), attr='format', ctx=Load()), args=[Call(func=Name(id='get_major_minor_version', ctx=Load()), args=[], keywords=[]), Name(id='easy_install_script', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='easy_install_ep', ctx=Store())], value=ListComp(elt=Name(id='k', ctx=Load()), generators=[comprehension(target=Name(id='k', ctx=Store()), iter=Name(id='console', ctx=Load()), ifs=[Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='match', ctx=Load()), args=[Constant(value='easy_install(-\\d+\\.\\d+)?$'), Name(id='k', ctx=Load())], keywords=[])], is_async=0)])), For(target=Name(id='k', ctx=Store()), iter=Name(id='easy_install_ep', ctx=Load()), body=[Delete(targets=[Subscript(value=Name(id='console', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Del())])], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='scripts_to_generate', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Name(id='starmap', ctx=Load()), args=[Attribute(value=Constant(value='{} = {}'), attr='format', ctx=Load()), Call(func=Attribute(value=Name(id='console', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Return(value=Name(id='scripts_to_generate', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), ClassDef(name='ZipBackedFile', bases=[], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='src_record_path', annotation=Name(id='RecordPath', ctx=Load())), arg(arg='dest_path', annotation=Name(id='str', ctx=Load())), arg(arg='zip_file', annotation=Name(id='ZipFile', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='src_record_path', ctx=Store())], value=Name(id='src_record_path', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='dest_path', ctx=Store())], value=Name(id='dest_path', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_zip_file', ctx=Store())], value=Name(id='zip_file', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='changed', ctx=Store())], value=Constant(value=False))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_getinfo', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_zip_file', ctx=Load()), attr='getinfo', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='src_record_path', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='ZipInfo', ctx=Load())), FunctionDef(name='save', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='parent_dir', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='dest_path', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='ensure_dir', ctx=Load()), args=[Name(id='parent_dir', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='dest_path', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='unlink', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='dest_path', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='zipinfo', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_getinfo', ctx=Load()), args=[], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_zip_file', ctx=Load()), attr='open', ctx=Load()), args=[Name(id='zipinfo', ctx=Load())], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='dest_path', ctx=Load()), Constant(value='wb')], keywords=[]), optional_vars=Name(id='dest', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='shutil', ctx=Load()), attr='copyfileobj', ctx=Load()), args=[Name(id='f', ctx=Load()), Name(id='dest', ctx=Load())], keywords=[]))])]), If(test=Call(func=Name(id='zip_item_is_executable', ctx=Load()), args=[Name(id='zipinfo', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Name(id='set_extracted_file_to_default_mode_plus_executable', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='dest_path', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='ScriptFile', bases=[], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='file', annotation=Constant(value='File'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_file', ctx=Store())], value=Name(id='file', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='src_record_path', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_file', ctx=Load()), attr='src_record_path', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='dest_path', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_file', ctx=Load()), attr='dest_path', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='changed', ctx=Store())], value=Constant(value=False))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='save', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_file', ctx=Load()), attr='save', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='changed', ctx=Store())], value=Call(func=Name(id='fix_script', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='dest_path', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='MissingCallableSuffix', bases=[Name(id='InstallationError', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='entry_point', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Invalid script entry point: {} - A callable suffix is required. Cf https://packaging.python.org/specifications/entry-points/#use-for-scripts for more information.'), attr='format', ctx=Load()), args=[Name(id='entry_point', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), FunctionDef(name='_raise_for_invalid_entrypoint', args=arguments(posonlyargs=[], args=[arg(arg='specification', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='entry', ctx=Store())], value=Call(func=Name(id='get_export_entry', ctx=Load()), args=[Name(id='specification', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='entry', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='entry', ctx=Load()), attr='suffix', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])]), body=[Raise(exc=Call(func=Name(id='MissingCallableSuffix', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), ClassDef(name='PipScriptMaker', bases=[Name(id='ScriptMaker', ctx=Load())], keywords=[], body=[FunctionDef(name='make', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='specification', annotation=Name(id='str', ctx=Load())), arg(arg='options', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Call(func=Name(id='_raise_for_invalid_entrypoint', ctx=Load()), args=[Name(id='specification', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='make', ctx=Load()), args=[Name(id='specification', ctx=Load()), Name(id='options', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], decorator_list=[]), FunctionDef(name='_install_wheel', args=arguments(posonlyargs=[], args=[arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='wheel_zip', annotation=Name(id='ZipFile', ctx=Load())), arg(arg='wheel_path', annotation=Name(id='str', ctx=Load())), arg(arg='scheme', annotation=Name(id='Scheme', ctx=Load())), arg(arg='pycompile', annotation=Name(id='bool', ctx=Load())), arg(arg='warn_script_location', annotation=Name(id='bool', ctx=Load())), arg(arg='direct_url', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='DirectUrl', ctx=Load()), ctx=Load())), arg(arg='requested', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=True), Constant(value=None), Constant(value=False)]), body=[Expr(value=Constant(value='Install a wheel.\n\n    :param name: Name of the project to install\n    :param wheel_zip: open ZipFile for wheel being installed\n    :param scheme: Distutils scheme dictating the install directories\n    :param req_description: String used in place of the requirement, for\n        logging\n    :param pycompile: Whether to byte-compile installed Python files\n    :param warn_script_location: Whether to check that scripts are installed\n        into a directory on PATH\n    :raises UnsupportedWheel:\n        * when the directory holds an unpacked wheel with incompatible\n          Wheel-Version\n        * when the .dist-info dir does not match the wheel\n    ')), Assign(targets=[Tuple(elts=[Name(id='info_dir', ctx=Store()), Name(id='metadata', ctx=Store())], ctx=Store())], value=Call(func=Name(id='parse_wheel', ctx=Load()), args=[Name(id='wheel_zip', ctx=Load()), Name(id='name', ctx=Load())], keywords=[])), If(test=Call(func=Name(id='wheel_root_is_purelib', ctx=Load()), args=[Name(id='metadata', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='lib_dir', ctx=Store())], value=Attribute(value=Name(id='scheme', ctx=Load()), attr='purelib', ctx=Load()))], orelse=[Assign(targets=[Name(id='lib_dir', ctx=Store())], value=Attribute(value=Name(id='scheme', ctx=Load()), attr='platlib', ctx=Load()))]), AnnAssign(target=Name(id='installed', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='RecordPath', ctx=Load()), Name(id='RecordPath', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=1), AnnAssign(target=Name(id='changed', ctx=Store()), annotation=Subscript(value=Name(id='Set', ctx=Load()), slice=Name(id='RecordPath', ctx=Load()), ctx=Load()), value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[]), simple=1), AnnAssign(target=Name(id='generated', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), FunctionDef(name='record_installed', args=arguments(posonlyargs=[], args=[arg(arg='srcfile', annotation=Name(id='RecordPath', ctx=Load())), arg(arg='destfile', annotation=Name(id='str', ctx=Load())), arg(arg='modified', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Constant(value='Map archive RECORD paths to installation RECORD paths.')), Assign(targets=[Name(id='newpath', ctx=Store())], value=Call(func=Name(id='_fs_to_record_path', ctx=Load()), args=[Name(id='destfile', ctx=Load()), Name(id='lib_dir', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='installed', ctx=Load()), slice=Name(id='srcfile', ctx=Load()), ctx=Store())], value=Name(id='newpath', ctx=Load())), If(test=Name(id='modified', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='changed', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='newpath', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='is_dir_path', args=arguments(posonlyargs=[], args=[arg(arg='path', annotation=Name(id='RecordPath', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='/')], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='assert_no_path_traversal', args=arguments(posonlyargs=[], args=[arg(arg='dest_dir_path', annotation=Name(id='str', ctx=Load())), arg(arg='target_path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='is_within_directory', ctx=Load()), args=[Name(id='dest_dir_path', ctx=Load()), Name(id='target_path', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='message', ctx=Store())], value=Constant(value='The wheel {!r} has a file {!r} trying to install outside the target directory {!r}')), Raise(exc=Call(func=Name(id='InstallationError', ctx=Load()), args=[Call(func=Attribute(value=Name(id='message', ctx=Load()), attr='format', ctx=Load()), args=[Name(id='wheel_path', ctx=Load()), Name(id='target_path', ctx=Load()), Name(id='dest_dir_path', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='root_scheme_file_maker', args=arguments(posonlyargs=[], args=[arg(arg='zip_file', annotation=Name(id='ZipFile', ctx=Load())), arg(arg='dest', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='make_root_scheme_file', args=arguments(posonlyargs=[], args=[arg(arg='record_path', annotation=Name(id='RecordPath', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='normed_path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normpath', ctx=Load()), args=[Name(id='record_path', ctx=Load())], keywords=[])), Assign(targets=[Name(id='dest_path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='dest', ctx=Load()), Name(id='normed_path', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='assert_no_path_traversal', ctx=Load()), args=[Name(id='dest', ctx=Load()), Name(id='dest_path', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='ZipBackedFile', ctx=Load()), args=[Name(id='record_path', ctx=Load()), Name(id='dest_path', ctx=Load()), Name(id='zip_file', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value='File')), Return(value=Name(id='make_root_scheme_file', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='RecordPath', ctx=Load())], ctx=Load()), Constant(value='File')], ctx=Load()), ctx=Load())), FunctionDef(name='data_scheme_file_maker', args=arguments(posonlyargs=[], args=[arg(arg='zip_file', annotation=Name(id='ZipFile', ctx=Load())), arg(arg='scheme', annotation=Name(id='Scheme', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='scheme_paths', ctx=Store())], value=DictComp(key=Name(id='key', ctx=Load()), value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='scheme', ctx=Load()), Name(id='key', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='key', ctx=Store()), iter=Name(id='SCHEME_KEYS', ctx=Load()), ifs=[], is_async=0)])), FunctionDef(name='make_data_scheme_file', args=arguments(posonlyargs=[], args=[arg(arg='record_path', annotation=Name(id='RecordPath', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='normed_path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normpath', ctx=Load()), args=[Name(id='record_path', ctx=Load())], keywords=[])), Try(body=[Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='scheme_key', ctx=Store()), Name(id='dest_subpath', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='normed_path', ctx=Load()), attr='split', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='sep', ctx=Load()), Constant(value=2)], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Attribute(value=Constant(value="Unexpected file in {}: {!r}. .data directory contents should be named like: '<scheme key>/<path>'."), attr='format', ctx=Load()), args=[Name(id='wheel_path', ctx=Load()), Name(id='record_path', ctx=Load())], keywords=[])), Raise(exc=Call(func=Name(id='InstallationError', ctx=Load()), args=[Name(id='message', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[]), Try(body=[Assign(targets=[Name(id='scheme_path', ctx=Store())], value=Subscript(value=Name(id='scheme_paths', ctx=Load()), slice=Name(id='scheme_key', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Assign(targets=[Name(id='valid_scheme_keys', ctx=Store())], value=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='scheme_paths', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Attribute(value=Constant(value='Unknown scheme key used in {}: {} (for file {!r}). .data directory contents should be in subdirectories named with a valid scheme key ({})'), attr='format', ctx=Load()), args=[Name(id='wheel_path', ctx=Load()), Name(id='scheme_key', ctx=Load()), Name(id='record_path', ctx=Load()), Name(id='valid_scheme_keys', ctx=Load())], keywords=[])), Raise(exc=Call(func=Name(id='InstallationError', ctx=Load()), args=[Name(id='message', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='dest_path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='scheme_path', ctx=Load()), Name(id='dest_subpath', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='assert_no_path_traversal', ctx=Load()), args=[Name(id='scheme_path', ctx=Load()), Name(id='dest_path', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='ZipBackedFile', ctx=Load()), args=[Name(id='record_path', ctx=Load()), Name(id='dest_path', ctx=Load()), Name(id='zip_file', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value='File')), Return(value=Name(id='make_data_scheme_file', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='RecordPath', ctx=Load())], ctx=Load()), Constant(value='File')], ctx=Load()), ctx=Load())), FunctionDef(name='is_data_scheme_path', args=arguments(posonlyargs=[], args=[arg(arg='path', annotation=Name(id='RecordPath', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Subscript(value=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='/'), Constant(value=1)], keywords=[]), slice=Constant(value=0), ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='.data')], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), Assign(targets=[Name(id='paths', ctx=Store())], value=Call(func=Name(id='cast', ctx=Load()), args=[Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='RecordPath', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='wheel_zip', ctx=Load()), attr='namelist', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='file_paths', ctx=Store())], value=Call(func=Name(id='filterfalse', ctx=Load()), args=[Name(id='is_dir_path', ctx=Load()), Name(id='paths', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='root_scheme_paths', ctx=Store()), Name(id='data_scheme_paths', ctx=Store())], ctx=Store())], value=Call(func=Name(id='partition', ctx=Load()), args=[Name(id='is_data_scheme_path', ctx=Load()), Name(id='file_paths', ctx=Load())], keywords=[])), Assign(targets=[Name(id='make_root_scheme_file', ctx=Store())], value=Call(func=Name(id='root_scheme_file_maker', ctx=Load()), args=[Name(id='wheel_zip', ctx=Load()), Name(id='lib_dir', ctx=Load())], keywords=[])), AnnAssign(target=Name(id='files', ctx=Store()), annotation=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Name(id='File', ctx=Load()), ctx=Load()), value=Call(func=Name(id='map', ctx=Load()), args=[Name(id='make_root_scheme_file', ctx=Load()), Name(id='root_scheme_paths', ctx=Load())], keywords=[]), simple=1), FunctionDef(name='is_script_scheme_path', args=arguments(posonlyargs=[], args=[arg(arg='path', annotation=Name(id='RecordPath', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='parts', ctx=Store())], value=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='/'), Constant(value=2)], keywords=[])), Return(value=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='parts', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=2)]), Call(func=Attribute(value=Subscript(value=Name(id='parts', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='.data')], keywords=[]), Compare(left=Subscript(value=Name(id='parts', ctx=Load()), slice=Constant(value=1), ctx=Load()), ops=[Eq()], comparators=[Constant(value='scripts')])]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='other_scheme_paths', ctx=Store()), Name(id='script_scheme_paths', ctx=Store())], ctx=Store())], value=Call(func=Name(id='partition', ctx=Load()), args=[Name(id='is_script_scheme_path', ctx=Load()), Name(id='data_scheme_paths', ctx=Load())], keywords=[])), Assign(targets=[Name(id='make_data_scheme_file', ctx=Store())], value=Call(func=Name(id='data_scheme_file_maker', ctx=Load()), args=[Name(id='wheel_zip', ctx=Load()), Name(id='scheme', ctx=Load())], keywords=[])), Assign(targets=[Name(id='other_scheme_files', ctx=Store())], value=Call(func=Name(id='map', ctx=Load()), args=[Name(id='make_data_scheme_file', ctx=Load()), Name(id='other_scheme_paths', ctx=Load())], keywords=[])), Assign(targets=[Name(id='files', ctx=Store())], value=Call(func=Name(id='chain', ctx=Load()), args=[Name(id='files', ctx=Load()), Name(id='other_scheme_files', ctx=Load())], keywords=[])), Assign(targets=[Name(id='distribution', ctx=Store())], value=Call(func=Name(id='get_wheel_distribution', ctx=Load()), args=[Call(func=Name(id='FilesystemWheel', ctx=Load()), args=[Name(id='wheel_path', ctx=Load())], keywords=[]), Call(func=Name(id='canonicalize_name', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='console', ctx=Store()), Name(id='gui', ctx=Store())], ctx=Store())], value=Call(func=Name(id='get_entrypoints', ctx=Load()), args=[Name(id='distribution', ctx=Load())], keywords=[])), FunctionDef(name='is_entrypoint_wrapper', args=arguments(posonlyargs=[], args=[arg(arg='file', annotation=Constant(value='File'))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Attribute(value=Name(id='file', ctx=Load()), attr='dest_path', ctx=Load())), Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='basename', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), attr='endswith', ctx=Load()), args=[Constant(value='.exe')], keywords=[]), body=[Assign(targets=[Name(id='matchname', ctx=Store())], value=Subscript(value=Name(id='name', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=4))), ctx=Load()))], orelse=[If(test=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), attr='endswith', ctx=Load()), args=[Constant(value='-script.py')], keywords=[]), body=[Assign(targets=[Name(id='matchname', ctx=Store())], value=Subscript(value=Name(id='name', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=10))), ctx=Load()))], orelse=[If(test=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), attr='endswith', ctx=Load()), args=[Constant(value='.pya')], keywords=[]), body=[Assign(targets=[Name(id='matchname', ctx=Store())], value=Subscript(value=Name(id='name', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=4))), ctx=Load()))], orelse=[Assign(targets=[Name(id='matchname', ctx=Store())], value=Name(id='name', ctx=Load()))])])]), Return(value=BoolOp(op=Or(), values=[Compare(left=Name(id='matchname', ctx=Load()), ops=[In()], comparators=[Name(id='console', ctx=Load())]), Compare(left=Name(id='matchname', ctx=Load()), ops=[In()], comparators=[Name(id='gui', ctx=Load())])]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), AnnAssign(target=Name(id='script_scheme_files', ctx=Store()), annotation=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Name(id='File', ctx=Load()), ctx=Load()), value=Call(func=Name(id='map', ctx=Load()), args=[Name(id='make_data_scheme_file', ctx=Load()), Name(id='script_scheme_paths', ctx=Load())], keywords=[]), simple=1), Assign(targets=[Name(id='script_scheme_files', ctx=Store())], value=Call(func=Name(id='filterfalse', ctx=Load()), args=[Name(id='is_entrypoint_wrapper', ctx=Load()), Name(id='script_scheme_files', ctx=Load())], keywords=[])), Assign(targets=[Name(id='script_scheme_files', ctx=Store())], value=Call(func=Name(id='map', ctx=Load()), args=[Name(id='ScriptFile', ctx=Load()), Name(id='script_scheme_files', ctx=Load())], keywords=[])), Assign(targets=[Name(id='files', ctx=Store())], value=Call(func=Name(id='chain', ctx=Load()), args=[Name(id='files', ctx=Load()), Name(id='script_scheme_files', ctx=Load())], keywords=[])), For(target=Name(id='file', ctx=Store()), iter=Name(id='files', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='file', ctx=Load()), attr='save', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Name(id='record_installed', ctx=Load()), args=[Attribute(value=Name(id='file', ctx=Load()), attr='src_record_path', ctx=Load()), Attribute(value=Name(id='file', ctx=Load()), attr='dest_path', ctx=Load()), Attribute(value=Name(id='file', ctx=Load()), attr='changed', ctx=Load())], keywords=[]))], orelse=[]), FunctionDef(name='pyc_source_file_paths', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='installed_path', ctx=Store()), iter=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Name(id='installed', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='full_installed_path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='lib_dir', ctx=Load()), Name(id='installed_path', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isfile', ctx=Load()), args=[Name(id='full_installed_path', ctx=Load())], keywords=[])), body=[Continue()], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='full_installed_path', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='.py')], keywords=[])), body=[Continue()], orelse=[]), Expr(value=Yield(value=Name(id='full_installed_path', ctx=Load())))], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='pyc_output_path', args=arguments(posonlyargs=[], args=[arg(arg='path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the path the pyc file would have been written to.')), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='importlib', ctx=Load()), attr='util', ctx=Load()), attr='cache_from_source', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), If(test=Name(id='pycompile', ctx=Load()), body=[With(items=[withitem(context_expr=Call(func=Name(id='captured_stdout', ctx=Load()), args=[], keywords=[]), optional_vars=Name(id='stdout', ctx=Store()))], body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='catch_warnings', ctx=Load()), args=[], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='filterwarnings', ctx=Load()), args=[Constant(value='ignore')], keywords=[])), For(target=Name(id='path', ctx=Store()), iter=Call(func=Name(id='pyc_source_file_paths', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='success', ctx=Store())], value=Call(func=Attribute(value=Name(id='compileall', ctx=Load()), attr='compile_file', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[keyword(arg='force', value=Constant(value=True)), keyword(arg='quiet', value=Constant(value=True))])), If(test=Name(id='success', ctx=Load()), body=[Assign(targets=[Name(id='pyc_path', ctx=Store())], value=Call(func=Name(id='pyc_output_path', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), Assert(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='pyc_path', ctx=Load())], keywords=[])), Assign(targets=[Name(id='pyc_record_path', ctx=Store())], value=Call(func=Name(id='cast', ctx=Load()), args=[Constant(value='RecordPath'), Call(func=Attribute(value=Name(id='pyc_path', ctx=Load()), attr='replace', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='sep', ctx=Load()), Constant(value='/')], keywords=[])], keywords=[])), Expr(value=Call(func=Name(id='record_installed', ctx=Load()), args=[Name(id='pyc_record_path', ctx=Load()), Name(id='pyc_path', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])])]), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Call(func=Attribute(value=Name(id='stdout', ctx=Load()), attr='getvalue', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='maker', ctx=Store())], value=Call(func=Name(id='PipScriptMaker', ctx=Load()), args=[Constant(value=None), Attribute(value=Name(id='scheme', ctx=Load()), attr='scripts', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='maker', ctx=Load()), attr='clobber', ctx=Store())], value=Constant(value=True)), Assign(targets=[Attribute(value=Name(id='maker', ctx=Load()), attr='variants', ctx=Store())], value=Set(elts=[Constant(value='')])), Assign(targets=[Attribute(value=Name(id='maker', ctx=Load()), attr='set_mode', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='scripts_to_generate', ctx=Store())], value=Call(func=Name(id='get_console_script_specs', ctx=Load()), args=[Name(id='console', ctx=Load())], keywords=[])), Assign(targets=[Name(id='gui_scripts_to_generate', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='starmap', ctx=Load()), args=[Attribute(value=Constant(value='{} = {}'), attr='format', ctx=Load()), Call(func=Attribute(value=Name(id='gui', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Assign(targets=[Name(id='generated_console_scripts', ctx=Store())], value=Call(func=Attribute(value=Name(id='maker', ctx=Load()), attr='make_multiple', ctx=Load()), args=[Name(id='scripts_to_generate', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='generated', ctx=Load()), attr='extend', ctx=Load()), args=[Name(id='generated_console_scripts', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='generated', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Attribute(value=Name(id='maker', ctx=Load()), attr='make_multiple', ctx=Load()), args=[Name(id='gui_scripts_to_generate', ctx=Load()), Dict(keys=[Constant(value='gui')], values=[Constant(value=True)])], keywords=[])], keywords=[])), If(test=Name(id='warn_script_location', ctx=Load()), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Call(func=Name(id='message_about_scripts_not_on_PATH', ctx=Load()), args=[Name(id='generated_console_scripts', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='msg', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='generated_file_mode', ctx=Store())], value=BinOp(left=Constant(value=438), op=BitAnd(), right=UnaryOp(op=Invert(), operand=Call(func=Name(id='current_umask', ctx=Load()), args=[], keywords=[])))), FunctionDef(name='_generate_file', args=arguments(posonlyargs=[], args=[arg(arg='path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs', annotation=Name(id='Any', ctx=Load())), defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='adjacent_tmp_file', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Yield(value=Name(id='f', ctx=Load())))]), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='chmod', ctx=Load()), args=[Attribute(value=Name(id='f', ctx=Load()), attr='name', ctx=Load()), Name(id='generated_file_mode', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='replace', ctx=Load()), args=[Attribute(value=Name(id='f', ctx=Load()), attr='name', ctx=Load()), Name(id='path', ctx=Load())], keywords=[]))], decorator_list=[Attribute(value=Name(id='contextlib', ctx=Load()), attr='contextmanager', ctx=Load())], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Name(id='BinaryIO', ctx=Load()), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='dest_info_dir', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='lib_dir', ctx=Load()), Name(id='info_dir', ctx=Load())], keywords=[])), Assign(targets=[Name(id='installer_path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='dest_info_dir', ctx=Load()), Constant(value='INSTALLER')], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='_generate_file', ctx=Load()), args=[Name(id='installer_path', ctx=Load())], keywords=[]), optional_vars=Name(id='installer_file', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='installer_file', ctx=Load()), attr='write', ctx=Load()), args=[Constant(value=b'pip\n')], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='generated', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='installer_path', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='direct_url', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='direct_url_path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='dest_info_dir', ctx=Load()), Name(id='DIRECT_URL_METADATA_NAME', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='_generate_file', ctx=Load()), args=[Name(id='direct_url_path', ctx=Load())], keywords=[]), optional_vars=Name(id='direct_url_file', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='direct_url_file', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='direct_url', ctx=Load()), attr='to_json', ctx=Load()), args=[], keywords=[]), attr='encode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[])], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='generated', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='direct_url_path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='requested', ctx=Load()), body=[Assign(targets=[Name(id='requested_path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='dest_info_dir', ctx=Load()), Constant(value='REQUESTED')], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='requested_path', ctx=Load()), Constant(value='wb')], keywords=[]))], body=[Pass()]), Expr(value=Call(func=Attribute(value=Name(id='generated', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='requested_path', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='record_text', ctx=Store())], value=Call(func=Attribute(value=Name(id='distribution', ctx=Load()), attr='read_text', ctx=Load()), args=[Constant(value='RECORD')], keywords=[])), Assign(targets=[Name(id='record_rows', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='csv', ctx=Load()), attr='reader', ctx=Load()), args=[Call(func=Attribute(value=Name(id='record_text', ctx=Load()), attr='splitlines', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[])), Assign(targets=[Name(id='rows', ctx=Store())], value=Call(func=Name(id='get_csv_rows_for_installed', ctx=Load()), args=[Name(id='record_rows', ctx=Load())], keywords=[keyword(arg='installed', value=Name(id='installed', ctx=Load())), keyword(arg='changed', value=Name(id='changed', ctx=Load())), keyword(arg='generated', value=Name(id='generated', ctx=Load())), keyword(arg='lib_dir', value=Name(id='lib_dir', ctx=Load()))])), Assign(targets=[Name(id='record_path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='dest_info_dir', ctx=Load()), Constant(value='RECORD')], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='_generate_file', ctx=Load()), args=[Name(id='record_path', ctx=Load())], keywords=[keyword(value=Call(func=Name(id='csv_io_kwargs', ctx=Load()), args=[Constant(value='w')], keywords=[]))]), optional_vars=Name(id='record_file', ctx=Store()))], body=[Assign(targets=[Name(id='writer', ctx=Store())], value=Call(func=Attribute(value=Name(id='csv', ctx=Load()), attr='writer', ctx=Load()), args=[Call(func=Name(id='cast', ctx=Load()), args=[Constant(value='IO[str]'), Name(id='record_file', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='writer', ctx=Load()), attr='writerows', ctx=Load()), args=[Call(func=Name(id='_normalized_outrows', ctx=Load()), args=[Name(id='rows', ctx=Load())], keywords=[])], keywords=[]))])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='req_error_context', args=arguments(posonlyargs=[], args=[arg(arg='req_description', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Expr(value=Yield())], handlers=[ExceptHandler(type=Name(id='InstallationError', ctx=Load()), name='e', body=[Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Attribute(value=Constant(value='For req: {}. {}'), attr='format', ctx=Load()), args=[Name(id='req_description', ctx=Load()), Subscript(value=Attribute(value=Name(id='e', ctx=Load()), attr='args', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])), Raise(exc=Call(func=Name(id='InstallationError', ctx=Load()), args=[Name(id='message', ctx=Load())], keywords=[]), cause=Name(id='e', ctx=Load()))])], orelse=[], finalbody=[])], decorator_list=[Attribute(value=Name(id='contextlib', ctx=Load()), attr='contextmanager', ctx=Load())], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='install_wheel', args=arguments(posonlyargs=[], args=[arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='wheel_path', annotation=Name(id='str', ctx=Load())), arg(arg='scheme', annotation=Name(id='Scheme', ctx=Load())), arg(arg='req_description', annotation=Name(id='str', ctx=Load())), arg(arg='pycompile', annotation=Name(id='bool', ctx=Load())), arg(arg='warn_script_location', annotation=Name(id='bool', ctx=Load())), arg(arg='direct_url', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='DirectUrl', ctx=Load()), ctx=Load())), arg(arg='requested', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=True), Constant(value=None), Constant(value=False)]), body=[With(items=[withitem(context_expr=Call(func=Name(id='ZipFile', ctx=Load()), args=[Name(id='wheel_path', ctx=Load())], keywords=[keyword(arg='allowZip64', value=Constant(value=True))]), optional_vars=Name(id='z', ctx=Store()))], body=[With(items=[withitem(context_expr=Call(func=Name(id='req_error_context', ctx=Load()), args=[Name(id='req_description', ctx=Load())], keywords=[]))], body=[Expr(value=Call(func=Name(id='_install_wheel', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Name(id='name', ctx=Load())), keyword(arg='wheel_zip', value=Name(id='z', ctx=Load())), keyword(arg='wheel_path', value=Name(id='wheel_path', ctx=Load())), keyword(arg='scheme', value=Name(id='scheme', ctx=Load())), keyword(arg='pycompile', value=Name(id='pycompile', ctx=Load())), keyword(arg='warn_script_location', value=Name(id='warn_script_location', ctx=Load())), keyword(arg='direct_url', value=Name(id='direct_url', ctx=Load())), keyword(arg='requested', value=Name(id='requested', ctx=Load()))]))])])], decorator_list=[], returns=Constant(value=None))], type_ignores=[])