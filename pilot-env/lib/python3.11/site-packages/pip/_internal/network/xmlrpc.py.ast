Module(body=[Expr(value=Constant(value='xmlrpclib.Transport implementation\n')), Import(names=[alias(name='logging')]), Import(names=[alias(name='urllib.parse')]), Import(names=[alias(name='xmlrpc.client')]), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING'), alias(name='Tuple')], level=0), ImportFrom(module='pip._internal.exceptions', names=[alias(name='NetworkConnectionError')], level=0), ImportFrom(module='pip._internal.network.session', names=[alias(name='PipSession')], level=0), ImportFrom(module='pip._internal.network.utils', names=[alias(name='raise_for_status')], level=0), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='xmlrpc.client', names=[alias(name='_HostType'), alias(name='_Marshallable')], level=0)], orelse=[]), Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), ClassDef(name='PipXmlrpcTransport', bases=[Attribute(value=Attribute(value=Name(id='xmlrpc', ctx=Load()), attr='client', ctx=Load()), attr='Transport', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Provide a `xmlrpclib.Transport` implementation via a `PipSession`\n    object.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='index_url', annotation=Name(id='str', ctx=Load())), arg(arg='session', annotation=Name(id='PipSession', ctx=Load())), arg(arg='use_datetime', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Name(id='use_datetime', ctx=Load())], keywords=[])), Assign(targets=[Name(id='index_parts', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='urllib', ctx=Load()), attr='parse', ctx=Load()), attr='urlparse', ctx=Load()), args=[Name(id='index_url', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_scheme', ctx=Store())], value=Attribute(value=Name(id='index_parts', ctx=Load()), attr='scheme', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_session', ctx=Store())], value=Name(id='session', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='request', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='host', annotation=Constant(value='_HostType')), arg(arg='handler', annotation=Name(id='str', ctx=Load())), arg(arg='request_body', annotation=Name(id='bytes', ctx=Load())), arg(arg='verbose', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='host', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), Assign(targets=[Name(id='parts', ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_scheme', ctx=Load()), Name(id='host', ctx=Load()), Name(id='handler', ctx=Load()), Constant(value=None), Constant(value=None), Constant(value=None)], ctx=Load())), Assign(targets=[Name(id='url', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='urllib', ctx=Load()), attr='parse', ctx=Load()), attr='urlunparse', ctx=Load()), args=[Name(id='parts', ctx=Load())], keywords=[])), Try(body=[Assign(targets=[Name(id='headers', ctx=Store())], value=Dict(keys=[Constant(value='Content-Type')], values=[Constant(value='text/xml')])), Assign(targets=[Name(id='response', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_session', ctx=Load()), attr='post', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[keyword(arg='data', value=Name(id='request_body', ctx=Load())), keyword(arg='headers', value=Name(id='headers', ctx=Load())), keyword(arg='stream', value=Constant(value=True))])), Expr(value=Call(func=Name(id='raise_for_status', ctx=Load()), args=[Name(id='response', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='verbose', ctx=Store())], value=Name(id='verbose', ctx=Load())), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='parse_response', ctx=Load()), args=[Attribute(value=Name(id='response', ctx=Load()), attr='raw', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='NetworkConnectionError', ctx=Load()), name='exc', body=[Assert(test=Attribute(value=Name(id='exc', ctx=Load()), attr='response', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='critical', ctx=Load()), args=[Constant(value='HTTP error %s while getting %s'), Attribute(value=Attribute(value=Name(id='exc', ctx=Load()), attr='response', ctx=Load()), attr='status_code', ctx=Load()), Name(id='url', ctx=Load())], keywords=[])), Raise()])], orelse=[], finalbody=[])], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Constant(value='_Marshallable'), Constant(value=Ellipsis)], ctx=Load()), ctx=Load()))], decorator_list=[])], type_ignores=[])