Module(body=[Expr(value=Constant(value='Lazy ZIP over HTTP')), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='HTTPRangeRequestUnsupported'), Constant(value='dist_from_wheel_url')], ctx=Load())), ImportFrom(module='bisect', names=[alias(name='bisect_left'), alias(name='bisect_right')], level=0), ImportFrom(module='contextlib', names=[alias(name='contextmanager')], level=0), ImportFrom(module='tempfile', names=[alias(name='NamedTemporaryFile')], level=0), ImportFrom(module='typing', names=[alias(name='Any'), alias(name='Dict'), alias(name='Generator'), alias(name='List'), alias(name='Optional'), alias(name='Tuple')], level=0), ImportFrom(module='zipfile', names=[alias(name='BadZipFile'), alias(name='ZipFile')], level=0), ImportFrom(module='pip._vendor.packaging.utils', names=[alias(name='canonicalize_name')], level=0), ImportFrom(module='pip._vendor.requests.models', names=[alias(name='CONTENT_CHUNK_SIZE'), alias(name='Response')], level=0), ImportFrom(module='pip._internal.metadata', names=[alias(name='BaseDistribution'), alias(name='MemoryWheel'), alias(name='get_wheel_distribution')], level=0), ImportFrom(module='pip._internal.network.session', names=[alias(name='PipSession')], level=0), ImportFrom(module='pip._internal.network.utils', names=[alias(name='HEADERS'), alias(name='raise_for_status'), alias(name='response_chunks')], level=0), ClassDef(name='HTTPRangeRequestUnsupported', bases=[Name(id='Exception', ctx=Load())], keywords=[], body=[Pass()], decorator_list=[]), FunctionDef(name='dist_from_wheel_url', args=arguments(posonlyargs=[], args=[arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='url', annotation=Name(id='str', ctx=Load())), arg(arg='session', annotation=Name(id='PipSession', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return a distribution object from the given wheel URL.\n\n    This uses HTTP range requests to only fetch the portion of the wheel\n    containing metadata, just enough for the object to be constructed.\n    If such requests are not supported, HTTPRangeRequestUnsupported\n    is raised.\n    ')), With(items=[withitem(context_expr=Call(func=Name(id='LazyZipOverHTTP', ctx=Load()), args=[Name(id='url', ctx=Load()), Name(id='session', ctx=Load())], keywords=[]), optional_vars=Name(id='zf', ctx=Store()))], body=[Assign(targets=[Name(id='wheel', ctx=Store())], value=Call(func=Name(id='MemoryWheel', ctx=Load()), args=[Attribute(value=Name(id='zf', ctx=Load()), attr='name', ctx=Load()), Name(id='zf', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='get_wheel_distribution', ctx=Load()), args=[Name(id='wheel', ctx=Load()), Call(func=Name(id='canonicalize_name', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])], keywords=[]))])], decorator_list=[], returns=Name(id='BaseDistribution', ctx=Load())), ClassDef(name='LazyZipOverHTTP', bases=[], keywords=[], body=[Expr(value=Constant(value="File-like object mapped to a ZIP file over HTTP.\n\n    This uses HTTP range requests to lazily fetch the file's content,\n    which is supposed to be fed to ZipFile.  If such requests are not\n    supported by the server, raise HTTPRangeRequestUnsupported\n    during initialization.\n    ")), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='url', annotation=Name(id='str', ctx=Load())), arg(arg='session', annotation=Name(id='PipSession', ctx=Load())), arg(arg='chunk_size', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='CONTENT_CHUNK_SIZE', ctx=Load())]), body=[Assign(targets=[Name(id='head', ctx=Store())], value=Call(func=Attribute(value=Name(id='session', ctx=Load()), attr='head', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[keyword(arg='headers', value=Name(id='HEADERS', ctx=Load()))])), Expr(value=Call(func=Name(id='raise_for_status', ctx=Load()), args=[Name(id='head', ctx=Load())], keywords=[])), Assert(test=Compare(left=Attribute(value=Name(id='head', ctx=Load()), attr='status_code', ctx=Load()), ops=[Eq()], comparators=[Constant(value=200)])), Assign(targets=[Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_session', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='_url', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='_chunk_size', ctx=Store())], ctx=Store())], value=Tuple(elts=[Name(id='session', ctx=Load()), Name(id='url', ctx=Load()), Name(id='chunk_size', ctx=Load())], ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_length', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='head', ctx=Load()), attr='headers', ctx=Load()), slice=Constant(value='Content-Length'), ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_file', ctx=Store())], value=Call(func=Name(id='NamedTemporaryFile', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='truncate', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_length', ctx=Load())], keywords=[])), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_left', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_right', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=0), If(test=Compare(left=Constant(value='bytes'), ops=[NotIn()], comparators=[Call(func=Attribute(value=Attribute(value=Name(id='head', ctx=Load()), attr='headers', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='Accept-Ranges'), Constant(value='none')], keywords=[])]), body=[Raise(exc=Call(func=Name(id='HTTPRangeRequestUnsupported', ctx=Load()), args=[Constant(value='range request is not supported')], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_check_zip', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='mode', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Opening mode, which is always rb.')), Return(value=Constant(value='rb'))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='name', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Path to the underlying file.')), Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_file', ctx=Load()), attr='name', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='seekable', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return whether random access is supported, which is True.')), Return(value=Constant(value=True))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='close', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Close the file.')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_file', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='closed', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Whether the file is closed.')), Return(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_file', ctx=Load()), attr='closed', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='read', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='size', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[UnaryOp(op=USub(), operand=Constant(value=1))]), body=[Expr(value=Constant(value='Read up to size bytes from the object and return them.\n\n        As a convenience, if size is unspecified or -1,\n        all bytes until EOF are returned.  Fewer than\n        size bytes may be returned if EOF is reached.\n        ')), Assign(targets=[Name(id='download_size', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Name(id='size', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_chunk_size', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='start', ctx=Store()), Name(id='length', ctx=Store())], ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='tell', ctx=Load()), args=[], keywords=[]), Attribute(value=Name(id='self', ctx=Load()), attr='_length', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='stop', ctx=Store())], value=IfExp(test=Compare(left=Name(id='size', ctx=Load()), ops=[Lt()], comparators=[Constant(value=0)]), body=Name(id='length', ctx=Load()), orelse=Call(func=Name(id='min', ctx=Load()), args=[BinOp(left=Name(id='start', ctx=Load()), op=Add(), right=Name(id='download_size', ctx=Load())), Name(id='length', ctx=Load())], keywords=[]))), Assign(targets=[Name(id='start', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Constant(value=0), BinOp(left=Name(id='stop', ctx=Load()), op=Sub(), right=Name(id='download_size', ctx=Load()))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_download', ctx=Load()), args=[Name(id='start', ctx=Load()), BinOp(left=Name(id='stop', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[])), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_file', ctx=Load()), attr='read', ctx=Load()), args=[Name(id='size', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='bytes', ctx=Load())), FunctionDef(name='readable', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return whether the file is readable, which is True.')), Return(value=Constant(value=True))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='seek', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='offset', annotation=Name(id='int', ctx=Load())), arg(arg='whence', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=0)]), body=[Expr(value=Constant(value='Change stream position and return the new absolute position.\n\n        Seek to offset relative position indicated by whence:\n        * 0: Start of stream (the default).  pos should be >= 0;\n        * 1: Current position - pos may be negative;\n        * 2: End of stream - pos usually negative.\n        ')), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_file', ctx=Load()), attr='seek', ctx=Load()), args=[Name(id='offset', ctx=Load()), Name(id='whence', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='tell', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the current position.')), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_file', ctx=Load()), attr='tell', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='truncate', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='size', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value="Resize the stream to the given size in bytes.\n\n        If size is unspecified resize to the current position.\n        The current stream position isn't changed.\n\n        Return the new file size.\n        ")), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_file', ctx=Load()), attr='truncate', ctx=Load()), args=[Name(id='size', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='writable', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return False.')), Return(value=Constant(value=False))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='__enter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_file', ctx=Load()), attr='__enter__', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='self', ctx=Load()))], decorator_list=[], returns=Constant(value='LazyZipOverHTTP')), FunctionDef(name='__exit__', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='exc', annotation=Name(id='Any', ctx=Load())), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_file', ctx=Load()), attr='__exit__', ctx=Load()), args=[Starred(value=Name(id='exc', ctx=Load()), ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_stay', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return a context manager keeping the position.\n\n        At the end of the block, seek back to original position.\n        ')), Assign(targets=[Name(id='pos', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='tell', ctx=Load()), args=[], keywords=[])), Try(body=[Expr(value=Yield())], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='seek', ctx=Load()), args=[Name(id='pos', ctx=Load())], keywords=[]))])], decorator_list=[Name(id='contextmanager', ctx=Load())], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='_check_zip', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check and download until the file is a valid ZIP.')), Assign(targets=[Name(id='end', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_length', ctx=Load()), op=Sub(), right=Constant(value=1))), For(target=Name(id='start', ctx=Store()), iter=Call(func=Name(id='reversed', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Name(id='end', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_chunk_size', ctx=Load())], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_download', ctx=Load()), args=[Name(id='start', ctx=Load()), Name(id='end', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_stay', ctx=Load()), args=[], keywords=[]))], body=[Try(body=[Expr(value=Call(func=Name(id='ZipFile', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='BadZipFile', ctx=Load()), body=[Pass()])], orelse=[Break()], finalbody=[])])], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_stream_response', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='start', annotation=Name(id='int', ctx=Load())), arg(arg='end', annotation=Name(id='int', ctx=Load())), arg(arg='base_headers', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='HEADERS', ctx=Load())]), body=[Expr(value=Constant(value='Return HTTP response to a range request from start to end.')), Assign(targets=[Name(id='headers', ctx=Store())], value=Call(func=Attribute(value=Name(id='base_headers', ctx=Load()), attr='copy', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Name(id='headers', ctx=Load()), slice=Constant(value='Range'), ctx=Store())], value=JoinedStr(values=[Constant(value='bytes='), FormattedValue(value=Name(id='start', ctx=Load()), conversion=-1), Constant(value='-'), FormattedValue(value=Name(id='end', ctx=Load()), conversion=-1)])), Assign(targets=[Subscript(value=Name(id='headers', ctx=Load()), slice=Constant(value='Cache-Control'), ctx=Store())], value=Constant(value='no-cache')), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_session', ctx=Load()), attr='get', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_url', ctx=Load())], keywords=[keyword(arg='headers', value=Name(id='headers', ctx=Load())), keyword(arg='stream', value=Constant(value=True))]))], decorator_list=[], returns=Name(id='Response', ctx=Load())), FunctionDef(name='_merge', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='start', annotation=Name(id='int', ctx=Load())), arg(arg='end', annotation=Name(id='int', ctx=Load())), arg(arg='left', annotation=Name(id='int', ctx=Load())), arg(arg='right', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return a generator of intervals to be fetched.\n\n        Args:\n            start (int): Start of needed interval\n            end (int): End of needed interval\n            left (int): Index of first overlapping downloaded data\n            right (int): Index after last overlapping downloaded data\n        ')), Assign(targets=[Tuple(elts=[Name(id='lslice', ctx=Store()), Name(id='rslice', ctx=Store())], ctx=Store())], value=Tuple(elts=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_left', ctx=Load()), slice=Slice(lower=Name(id='left', ctx=Load()), upper=Name(id='right', ctx=Load())), ctx=Load()), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_right', ctx=Load()), slice=Slice(lower=Name(id='left', ctx=Load()), upper=Name(id='right', ctx=Load())), ctx=Load())], ctx=Load())), Assign(targets=[Name(id='i', ctx=Store()), Name(id='start', ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[BinOp(left=List(elts=[Name(id='start', ctx=Load())], ctx=Load()), op=Add(), right=Subscript(value=Name(id='lslice', ctx=Load()), slice=Slice(upper=Constant(value=1)), ctx=Load()))], keywords=[])), Assign(targets=[Name(id='end', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[BinOp(left=List(elts=[Name(id='end', ctx=Load())], ctx=Load()), op=Add(), right=Subscript(value=Name(id='rslice', ctx=Load()), slice=Slice(lower=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))], keywords=[])), For(target=Tuple(elts=[Name(id='j', ctx=Store()), Name(id='k', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Name(id='lslice', ctx=Load()), Name(id='rslice', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='j', ctx=Load()), ops=[Gt()], comparators=[Name(id='i', ctx=Load())]), body=[Expr(value=Yield(value=Tuple(elts=[Name(id='i', ctx=Load()), BinOp(left=Name(id='j', ctx=Load()), op=Sub(), right=Constant(value=1))], ctx=Load())))], orelse=[]), Assign(targets=[Name(id='i', ctx=Store())], value=BinOp(left=Name(id='k', ctx=Load()), op=Add(), right=Constant(value=1)))], orelse=[]), If(test=Compare(left=Name(id='i', ctx=Load()), ops=[LtE()], comparators=[Name(id='end', ctx=Load())]), body=[Expr(value=Yield(value=Tuple(elts=[Name(id='i', ctx=Load()), Name(id='end', ctx=Load())], ctx=Load())))], orelse=[]), Assign(targets=[Tuple(elts=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_left', ctx=Load()), slice=Slice(lower=Name(id='left', ctx=Load()), upper=Name(id='right', ctx=Load())), ctx=Store()), Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_right', ctx=Load()), slice=Slice(lower=Name(id='left', ctx=Load()), upper=Name(id='right', ctx=Load())), ctx=Store())], ctx=Store())], value=Tuple(elts=[List(elts=[Name(id='start', ctx=Load())], ctx=Load()), List(elts=[Name(id='end', ctx=Load())], ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='_download', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='start', annotation=Name(id='int', ctx=Load())), arg(arg='end', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Download bytes from start to end inclusively.')), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_stay', ctx=Load()), args=[], keywords=[]))], body=[Assign(targets=[Name(id='left', ctx=Store())], value=Call(func=Name(id='bisect_left', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_right', ctx=Load()), Name(id='start', ctx=Load())], keywords=[])), Assign(targets=[Name(id='right', ctx=Store())], value=Call(func=Name(id='bisect_right', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_left', ctx=Load()), Name(id='end', ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='start', ctx=Store()), Name(id='end', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_merge', ctx=Load()), args=[Name(id='start', ctx=Load()), Name(id='end', ctx=Load()), Name(id='left', ctx=Load()), Name(id='right', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='response', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_stream_response', ctx=Load()), args=[Name(id='start', ctx=Load()), Name(id='end', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='response', ctx=Load()), attr='raise_for_status', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='seek', ctx=Load()), args=[Name(id='start', ctx=Load())], keywords=[])), For(target=Name(id='chunk', ctx=Store()), iter=Call(func=Name(id='response_chunks', ctx=Load()), args=[Name(id='response', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_chunk_size', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_file', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='chunk', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])])], decorator_list=[], returns=Constant(value=None))], decorator_list=[])], type_ignores=[])