Module(body=[Expr(value=Constant(value='HTTP cache implementation.\n')), Import(names=[alias(name='os')]), ImportFrom(module='contextlib', names=[alias(name='contextmanager')], level=0), ImportFrom(module='datetime', names=[alias(name='datetime')], level=0), ImportFrom(module='typing', names=[alias(name='BinaryIO'), alias(name='Generator'), alias(name='Optional'), alias(name='Union')], level=0), ImportFrom(module='pip._vendor.cachecontrol.cache', names=[alias(name='SeparateBodyBaseCache')], level=0), ImportFrom(module='pip._vendor.cachecontrol.caches', names=[alias(name='SeparateBodyFileCache')], level=0), ImportFrom(module='pip._vendor.requests.models', names=[alias(name='Response')], level=0), ImportFrom(module='pip._internal.utils.filesystem', names=[alias(name='adjacent_tmp_file'), alias(name='replace')], level=0), ImportFrom(module='pip._internal.utils.misc', names=[alias(name='ensure_dir')], level=0), FunctionDef(name='is_from_cache', args=arguments(posonlyargs=[], args=[arg(arg='response', annotation=Name(id='Response', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='response', ctx=Load()), Constant(value='from_cache'), Constant(value=False)], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='suppressed_cache_errors', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="If we can't access the cache then we can just skip caching and process\n    requests as if caching wasn't enabled.\n    ")), Try(body=[Expr(value=Yield())], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], decorator_list=[Name(id='contextmanager', ctx=Load())], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Constant(value=None), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), ClassDef(name='SafeFileCache', bases=[Name(id='SeparateBodyBaseCache', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    A file based cache which is safe to use even when the target directory may\n    not be accessible or writable.\n\n    There is a race condition when two processes try to write and/or read the\n    same entry at the same time, since each entry consists of two separate\n    files (https://github.com/psf/cachecontrol/issues/324).  We therefore have\n    additional logic that makes sure that both files to be present before\n    returning an entry; this fixes the read side of the race condition.\n\n    For the write side, we assume that the server will only ever return the\n    same data for the same URL, which ought to be the case for files pip is\n    downloading.  PyPI does not have a mechanism to swap out a wheel for\n    another wheel, for example.  If this assumption is not true, the\n    CacheControl issue will need to be fixed.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='directory', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Compare(left=Name(id='directory', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), msg=Constant(value='Cache directory must not be None.')), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='directory', ctx=Store())], value=Name(id='directory', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_get_cache_path', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='hashed', ctx=Store())], value=Call(func=Attribute(value=Name(id='SeparateBodyFileCache', ctx=Load()), attr='encode', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), Assign(targets=[Name(id='parts', ctx=Store())], value=BinOp(left=Call(func=Name(id='list', ctx=Load()), args=[Subscript(value=Name(id='hashed', ctx=Load()), slice=Slice(upper=Constant(value=5)), ctx=Load())], keywords=[]), op=Add(), right=List(elts=[Name(id='hashed', ctx=Load())], ctx=Load()))), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='directory', ctx=Load()), Starred(value=Name(id='parts', ctx=Load()), ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='get', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='metadata_path', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_cache_path', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[])), Assign(targets=[Name(id='body_path', ctx=Store())], value=BinOp(left=Name(id='metadata_path', ctx=Load()), op=Add(), right=Constant(value='.body'))), If(test=UnaryOp(op=Not(), operand=BoolOp(op=And(), values=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='metadata_path', ctx=Load())], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='body_path', ctx=Load())], keywords=[])])), body=[Return(value=Constant(value=None))], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='suppressed_cache_errors', ctx=Load()), args=[], keywords=[]))], body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='metadata_path', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Return(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]))])])], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bytes', ctx=Load()), ctx=Load())), FunctionDef(name='_write', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='path', annotation=Name(id='str', ctx=Load())), arg(arg='data', annotation=Name(id='bytes', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='suppressed_cache_errors', ctx=Load()), args=[], keywords=[]))], body=[Expr(value=Call(func=Name(id='ensure_dir', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='adjacent_tmp_file', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Name(id='replace', ctx=Load()), args=[Attribute(value=Name(id='f', ctx=Load()), attr='name', ctx=Load()), Name(id='path', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='set', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Name(id='str', ctx=Load())), arg(arg='value', annotation=Name(id='bytes', ctx=Load())), arg(arg='expires', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='datetime', ctx=Load()), Constant(value=None)], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_cache_path', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_write', ctx=Load()), args=[Name(id='path', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='delete', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_cache_path', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='suppressed_cache_errors', ctx=Load()), args=[], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))]), With(items=[withitem(context_expr=Call(func=Name(id='suppressed_cache_errors', ctx=Load()), args=[], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='remove', ctx=Load()), args=[BinOp(left=Name(id='path', ctx=Load()), op=Add(), right=Constant(value='.body'))], keywords=[]))])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='get_body', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='metadata_path', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_cache_path', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[])), Assign(targets=[Name(id='body_path', ctx=Store())], value=BinOp(left=Name(id='metadata_path', ctx=Load()), op=Add(), right=Constant(value='.body'))), If(test=UnaryOp(op=Not(), operand=BoolOp(op=And(), values=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='metadata_path', ctx=Load())], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='body_path', ctx=Load())], keywords=[])])), body=[Return(value=Constant(value=None))], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='suppressed_cache_errors', ctx=Load()), args=[], keywords=[]))], body=[Return(value=Call(func=Name(id='open', ctx=Load()), args=[Name(id='body_path', ctx=Load()), Constant(value='rb')], keywords=[]))])], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='BinaryIO', ctx=Load()), ctx=Load())), FunctionDef(name='set_body', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Name(id='str', ctx=Load())), arg(arg='body', annotation=Name(id='bytes', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='path', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_cache_path', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[]), op=Add(), right=Constant(value='.body'))), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_write', ctx=Load()), args=[Name(id='path', ctx=Load()), Name(id='body', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None))], decorator_list=[])], type_ignores=[])