Module(body=[Import(names=[alias(name='sys')]), ImportFrom(module='typing', names=[alias(name='List'), alias(name='Optional'), alias(name='Set'), alias(name='Tuple')], level=0), ImportFrom(module='pip._vendor.packaging.tags', names=[alias(name='Tag')], level=0), ImportFrom(module='pip._internal.utils.compatibility_tags', names=[alias(name='get_supported'), alias(name='version_info_to_nodot')], level=0), ImportFrom(module='pip._internal.utils.misc', names=[alias(name='normalize_version_info')], level=0), ClassDef(name='TargetPython', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    Encapsulates the properties of a Python interpreter one is targeting\n    for a package install, download, etc.\n    ')), Assign(targets=[Name(id='__slots__', ctx=Store())], value=List(elts=[Constant(value='_given_py_version_info'), Constant(value='abis'), Constant(value='implementation'), Constant(value='platforms'), Constant(value='py_version'), Constant(value='py_version_info'), Constant(value='_valid_tags'), Constant(value='_valid_tags_set')], ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='platforms', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='py_version_info', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='abis', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='implementation', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value="\n        :param platforms: A list of strings or None. If None, searches for\n            packages that are supported by the current system. Otherwise, will\n            find packages that can be built on the platforms passed in. These\n            packages will only be downloaded for distribution: they will\n            not be built locally.\n        :param py_version_info: An optional tuple of ints representing the\n            Python version information to use (e.g. `sys.version_info[:3]`).\n            This can have length 1, 2, or 3 when provided.\n        :param abis: A list of strings or None. This is passed to\n            compatibility_tags.py's get_supported() function as is.\n        :param implementation: A string or None. This is passed to\n            compatibility_tags.py's get_supported() function as is.\n        ")), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_given_py_version_info', ctx=Store())], value=Name(id='py_version_info', ctx=Load())), If(test=Compare(left=Name(id='py_version_info', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='py_version_info', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), slice=Slice(upper=Constant(value=3)), ctx=Load()))], orelse=[Assign(targets=[Name(id='py_version_info', ctx=Store())], value=Call(func=Name(id='normalize_version_info', ctx=Load()), args=[Name(id='py_version_info', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='py_version', ctx=Store())], value=Call(func=Attribute(value=Constant(value='.'), attr='join', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Name(id='str', ctx=Load()), Subscript(value=Name(id='py_version_info', ctx=Load()), slice=Slice(upper=Constant(value=2)), ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='abis', ctx=Store())], value=Name(id='abis', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='implementation', ctx=Store())], value=Name(id='implementation', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='platforms', ctx=Store())], value=Name(id='platforms', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='py_version', ctx=Store())], value=Name(id='py_version', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='py_version_info', ctx=Store())], value=Name(id='py_version_info', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_valid_tags', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Tag', ctx=Load()), ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_valid_tags_set', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Set', ctx=Load()), slice=Name(id='Tag', ctx=Load()), ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0)], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='format_given', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Format the given, non-None attributes for display.\n        ')), Assign(targets=[Name(id='display_version', ctx=Store())], value=Constant(value=None)), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_given_py_version_info', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='display_version', ctx=Store())], value=Call(func=Attribute(value=Constant(value='.'), attr='join', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='str', ctx=Load()), args=[Name(id='part', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='part', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_given_py_version_info', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='key_values', ctx=Store())], value=List(elts=[Tuple(elts=[Constant(value='platforms'), Attribute(value=Name(id='self', ctx=Load()), attr='platforms', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='version_info'), Name(id='display_version', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='abis'), Attribute(value=Name(id='self', ctx=Load()), attr='abis', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='implementation'), Attribute(value=Name(id='self', ctx=Load()), attr='implementation', ctx=Load())], ctx=Load())], ctx=Load())), Return(value=Call(func=Attribute(value=Constant(value=' '), attr='join', ctx=Load()), args=[GeneratorExp(elt=JoinedStr(values=[FormattedValue(value=Name(id='key', ctx=Load()), conversion=-1), Constant(value='='), FormattedValue(value=Name(id='value', ctx=Load()), conversion=114)]), generators=[comprehension(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Name(id='key_values', ctx=Load()), ifs=[Compare(left=Name(id='value', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])], is_async=0)])], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='get_sorted_tags', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return the supported PEP 425 tags to check wheel candidates against.\n\n        The tags are returned in order of preference (most preferred first).\n        ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_valid_tags', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='py_version_info', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_given_py_version_info', ctx=Load())), If(test=Compare(left=Name(id='py_version_info', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='version', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='version', ctx=Store())], value=Call(func=Name(id='version_info_to_nodot', ctx=Load()), args=[Name(id='py_version_info', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='tags', ctx=Store())], value=Call(func=Name(id='get_supported', ctx=Load()), args=[], keywords=[keyword(arg='version', value=Name(id='version', ctx=Load())), keyword(arg='platforms', value=Attribute(value=Name(id='self', ctx=Load()), attr='platforms', ctx=Load())), keyword(arg='abis', value=Attribute(value=Name(id='self', ctx=Load()), attr='abis', ctx=Load())), keyword(arg='impl', value=Attribute(value=Name(id='self', ctx=Load()), attr='implementation', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_valid_tags', ctx=Store())], value=Name(id='tags', ctx=Load()))], orelse=[]), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_valid_tags', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Tag', ctx=Load()), ctx=Load())), FunctionDef(name='get_unsorted_tags', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Exactly the same as get_sorted_tags, but returns a set.\n\n        This is important for performance.\n        ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_valid_tags_set', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_valid_tags_set', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_sorted_tags', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[]), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_valid_tags_set', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Set', ctx=Load()), slice=Name(id='Tag', ctx=Load()), ctx=Load()))], decorator_list=[])], type_ignores=[])