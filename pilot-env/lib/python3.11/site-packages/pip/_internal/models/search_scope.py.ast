Module(body=[Import(names=[alias(name='itertools')]), Import(names=[alias(name='logging')]), Import(names=[alias(name='os')]), Import(names=[alias(name='posixpath')]), Import(names=[alias(name='urllib.parse')]), ImportFrom(module='typing', names=[alias(name='List')], level=0), ImportFrom(module='pip._vendor.packaging.utils', names=[alias(name='canonicalize_name')], level=0), ImportFrom(module='pip._internal.models.index', names=[alias(name='PyPI')], level=0), ImportFrom(module='pip._internal.utils.compat', names=[alias(name='has_tls')], level=0), ImportFrom(module='pip._internal.utils.misc', names=[alias(name='normalize_path'), alias(name='redact_auth_from_url')], level=0), Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), ClassDef(name='SearchScope', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    Encapsulates the locations that pip is configured to search.\n    ')), Assign(targets=[Name(id='__slots__', ctx=Store())], value=List(elts=[Constant(value='find_links'), Constant(value='index_urls'), Constant(value='no_index')], ctx=Load())), FunctionDef(name='create', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='find_links', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='index_urls', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='no_index', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Create a SearchScope object after normalizing the `find_links`.\n        ')), AnnAssign(target=Name(id='built_find_links', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), For(target=Name(id='link', ctx=Store()), iter=Name(id='find_links', ctx=Load()), body=[If(test=Call(func=Attribute(value=Name(id='link', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='~')], keywords=[]), body=[Assign(targets=[Name(id='new_link', ctx=Store())], value=Call(func=Name(id='normalize_path', ctx=Load()), args=[Name(id='link', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='new_link', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='link', ctx=Store())], value=Name(id='new_link', ctx=Load()))], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='built_find_links', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='link', ctx=Load())], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='has_tls', ctx=Load()), args=[], keywords=[])), body=[For(target=Name(id='link', ctx=Store()), iter=Call(func=Attribute(value=Name(id='itertools', ctx=Load()), attr='chain', ctx=Load()), args=[Name(id='index_urls', ctx=Load()), Name(id='built_find_links', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='parsed', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='urllib', ctx=Load()), attr='parse', ctx=Load()), attr='urlparse', ctx=Load()), args=[Name(id='link', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='parsed', ctx=Load()), attr='scheme', ctx=Load()), ops=[Eq()], comparators=[Constant(value='https')]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='pip is configured with locations that require TLS/SSL, however the ssl module in Python is not available.')], keywords=[])), Break()], orelse=[])], orelse=[])], orelse=[]), Return(value=Call(func=Name(id='cls', ctx=Load()), args=[], keywords=[keyword(arg='find_links', value=Name(id='built_find_links', ctx=Load())), keyword(arg='index_urls', value=Name(id='index_urls', ctx=Load())), keyword(arg='no_index', value=Name(id='no_index', ctx=Load()))]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Constant(value='SearchScope')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='find_links', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='index_urls', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='no_index', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='find_links', ctx=Store())], value=Name(id='find_links', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='index_urls', ctx=Store())], value=Name(id='index_urls', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='no_index', ctx=Store())], value=Name(id='no_index', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='get_formatted_locations', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='lines', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='redacted_index_urls', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='index_urls', ctx=Load()), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='index_urls', ctx=Load()), ops=[NotEq()], comparators=[List(elts=[Attribute(value=Name(id='PyPI', ctx=Load()), attr='simple_url', ctx=Load())], ctx=Load())])]), body=[For(target=Name(id='url', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='index_urls', ctx=Load()), body=[Assign(targets=[Name(id='redacted_index_url', ctx=Store())], value=Call(func=Name(id='redact_auth_from_url', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[])), Assign(targets=[Name(id='purl', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='urllib', ctx=Load()), attr='parse', ctx=Load()), attr='urlsplit', ctx=Load()), args=[Name(id='redacted_index_url', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Attribute(value=Name(id='purl', ctx=Load()), attr='scheme', ctx=Load())), UnaryOp(op=Not(), operand=Attribute(value=Name(id='purl', ctx=Load()), attr='netloc', ctx=Load()))]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='The index url "%s" seems invalid, please provide a scheme.'), Name(id='redacted_index_url', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='redacted_index_urls', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='redacted_index_url', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Looking in indexes: {}'), attr='format', ctx=Load()), args=[Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Name(id='redacted_index_urls', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='find_links', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Looking in links: {}'), attr='format', ctx=Load()), args=[Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='redact_auth_from_url', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='url', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='find_links', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], keywords=[])], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Constant(value='\n'), attr='join', ctx=Load()), args=[Name(id='lines', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='get_index_urls_locations', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='project_name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Returns the locations found via self.index_urls\n\n        Checks the url_name on the main (first in the list) index and\n        use this url_name to produce all locations\n        ')), FunctionDef(name='mkurl_pypi_url', args=arguments(posonlyargs=[], args=[arg(arg='url', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='loc', ctx=Store())], value=Call(func=Attribute(value=Name(id='posixpath', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='url', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='urllib', ctx=Load()), attr='parse', ctx=Load()), attr='quote', ctx=Load()), args=[Call(func=Name(id='canonicalize_name', ctx=Load()), args=[Name(id='project_name', ctx=Load())], keywords=[])], keywords=[])], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='loc', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='/')], keywords=[])), body=[Assign(targets=[Name(id='loc', ctx=Store())], value=BinOp(left=Name(id='loc', ctx=Load()), op=Add(), right=Constant(value='/')))], orelse=[]), Return(value=Name(id='loc', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), Return(value=ListComp(elt=Call(func=Name(id='mkurl_pypi_url', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='url', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='index_urls', ctx=Load()), ifs=[], is_async=0)]))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], decorator_list=[])], type_ignores=[])