Module(body=[Import(names=[alias(name='configparser')]), Import(names=[alias(name='logging')]), Import(names=[alias(name='os')]), ImportFrom(module='typing', names=[alias(name='List'), alias(name='Optional'), alias(name='Tuple')], level=0), ImportFrom(module='pip._internal.exceptions', names=[alias(name='BadCommand'), alias(name='InstallationError')], level=0), ImportFrom(module='pip._internal.utils.misc', names=[alias(name='HiddenText'), alias(name='display_path')], level=0), ImportFrom(module='pip._internal.utils.subprocess', names=[alias(name='make_command')], level=0), ImportFrom(module='pip._internal.utils.urls', names=[alias(name='path_to_url')], level=0), ImportFrom(module='pip._internal.vcs.versioncontrol', names=[alias(name='RevOptions'), alias(name='VersionControl'), alias(name='find_path_to_project_root_from_repo_root'), alias(name='vcs')], level=0), Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), ClassDef(name='Mercurial', bases=[Name(id='VersionControl', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='name', ctx=Store())], value=Constant(value='hg')), Assign(targets=[Name(id='dirname', ctx=Store())], value=Constant(value='.hg')), Assign(targets=[Name(id='repo_name', ctx=Store())], value=Constant(value='clone')), Assign(targets=[Name(id='schemes', ctx=Store())], value=Tuple(elts=[Constant(value='hg+file'), Constant(value='hg+http'), Constant(value='hg+https'), Constant(value='hg+ssh'), Constant(value='hg+static-http')], ctx=Load())), FunctionDef(name='get_base_rev_args', args=arguments(posonlyargs=[], args=[arg(arg='rev', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=List(elts=[JoinedStr(values=[Constant(value='-r='), FormattedValue(value=Name(id='rev', ctx=Load()), conversion=-1)])], ctx=Load()))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='fetch_new', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dest', annotation=Name(id='str', ctx=Load())), arg(arg='url', annotation=Name(id='HiddenText', ctx=Load())), arg(arg='rev_options', annotation=Name(id='RevOptions', ctx=Load())), arg(arg='verbosity', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='rev_display', ctx=Store())], value=Call(func=Attribute(value=Name(id='rev_options', ctx=Load()), attr='to_display', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Cloning hg %s%s to %s'), Name(id='url', ctx=Load()), Name(id='rev_display', ctx=Load()), Call(func=Name(id='display_path', ctx=Load()), args=[Name(id='dest', ctx=Load())], keywords=[])], keywords=[])), If(test=Compare(left=Name(id='verbosity', ctx=Load()), ops=[LtE()], comparators=[Constant(value=0)]), body=[AnnAssign(target=Name(id='flags', ctx=Store()), annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load()), value=Tuple(elts=[Constant(value='--quiet')], ctx=Load()), simple=1)], orelse=[If(test=Compare(left=Name(id='verbosity', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=[Assign(targets=[Name(id='flags', ctx=Store())], value=Tuple(elts=[], ctx=Load()))], orelse=[If(test=Compare(left=Name(id='verbosity', ctx=Load()), ops=[Eq()], comparators=[Constant(value=2)]), body=[Assign(targets=[Name(id='flags', ctx=Store())], value=Tuple(elts=[Constant(value='--verbose')], ctx=Load()))], orelse=[Assign(targets=[Name(id='flags', ctx=Store())], value=Tuple(elts=[Constant(value='--verbose'), Constant(value='--debug')], ctx=Load()))])])]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='run_command', ctx=Load()), args=[Call(func=Name(id='make_command', ctx=Load()), args=[Constant(value='clone'), Constant(value='--noupdate'), Starred(value=Name(id='flags', ctx=Load()), ctx=Load()), Name(id='url', ctx=Load()), Name(id='dest', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='run_command', ctx=Load()), args=[Call(func=Name(id='make_command', ctx=Load()), args=[Constant(value='update'), Starred(value=Name(id='flags', ctx=Load()), ctx=Load()), Call(func=Attribute(value=Name(id='rev_options', ctx=Load()), attr='to_args', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[keyword(arg='cwd', value=Name(id='dest', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='switch', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dest', annotation=Name(id='str', ctx=Load())), arg(arg='url', annotation=Name(id='HiddenText', ctx=Load())), arg(arg='rev_options', annotation=Name(id='RevOptions', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='repo_config', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='dest', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='dirname', ctx=Load()), Constant(value='hgrc')], keywords=[])), Assign(targets=[Name(id='config', ctx=Store())], value=Call(func=Attribute(value=Name(id='configparser', ctx=Load()), attr='RawConfigParser', ctx=Load()), args=[], keywords=[])), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='read', ctx=Load()), args=[Name(id='repo_config', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='set', ctx=Load()), args=[Constant(value='paths'), Constant(value='default'), Attribute(value=Name(id='url', ctx=Load()), attr='secret', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='repo_config', ctx=Load()), Constant(value='w')], keywords=[]), optional_vars=Name(id='config_file', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='config', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='config_file', ctx=Load())], keywords=[]))])], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='OSError', ctx=Load()), Attribute(value=Name(id='configparser', ctx=Load()), attr='NoSectionError', ctx=Load())], ctx=Load()), name='exc', body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='Could not switch Mercurial repository to %s: %s'), Name(id='url', ctx=Load()), Name(id='exc', ctx=Load())], keywords=[]))])], orelse=[Assign(targets=[Name(id='cmd_args', ctx=Store())], value=Call(func=Name(id='make_command', ctx=Load()), args=[Constant(value='update'), Constant(value='-q'), Call(func=Attribute(value=Name(id='rev_options', ctx=Load()), attr='to_args', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='run_command', ctx=Load()), args=[Name(id='cmd_args', ctx=Load())], keywords=[keyword(arg='cwd', value=Name(id='dest', ctx=Load()))]))], finalbody=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='update', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dest', annotation=Name(id='str', ctx=Load())), arg(arg='url', annotation=Name(id='HiddenText', ctx=Load())), arg(arg='rev_options', annotation=Name(id='RevOptions', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='run_command', ctx=Load()), args=[List(elts=[Constant(value='pull'), Constant(value='-q')], ctx=Load())], keywords=[keyword(arg='cwd', value=Name(id='dest', ctx=Load()))])), Assign(targets=[Name(id='cmd_args', ctx=Store())], value=Call(func=Name(id='make_command', ctx=Load()), args=[Constant(value='update'), Constant(value='-q'), Call(func=Attribute(value=Name(id='rev_options', ctx=Load()), attr='to_args', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='run_command', ctx=Load()), args=[Name(id='cmd_args', ctx=Load())], keywords=[keyword(arg='cwd', value=Name(id='dest', ctx=Load()))]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='get_remote_url', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='location', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='url', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='run_command', ctx=Load()), args=[List(elts=[Constant(value='showconfig'), Constant(value='paths.default')], ctx=Load())], keywords=[keyword(arg='show_stdout', value=Constant(value=False)), keyword(arg='stdout_only', value=Constant(value=True)), keyword(arg='cwd', value=Name(id='location', ctx=Load()))]), attr='strip', ctx=Load()), args=[], keywords=[])), If(test=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='_is_local_repository', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='url', ctx=Store())], value=Call(func=Name(id='path_to_url', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='url', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='get_revision', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='location', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return the repository-local changeset revision number, as an integer.\n        ')), Assign(targets=[Name(id='current_revision', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='run_command', ctx=Load()), args=[List(elts=[Constant(value='parents'), Constant(value='--template={rev}')], ctx=Load())], keywords=[keyword(arg='show_stdout', value=Constant(value=False)), keyword(arg='stdout_only', value=Constant(value=True)), keyword(arg='cwd', value=Name(id='location', ctx=Load()))]), attr='strip', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='current_revision', ctx=Load()))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='get_requirement_revision', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='location', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return the changeset identification hash, as a 40-character\n        hexadecimal string\n        ')), Assign(targets=[Name(id='current_rev_hash', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='run_command', ctx=Load()), args=[List(elts=[Constant(value='parents'), Constant(value='--template={node}')], ctx=Load())], keywords=[keyword(arg='show_stdout', value=Constant(value=False)), keyword(arg='stdout_only', value=Constant(value=True)), keyword(arg='cwd', value=Name(id='location', ctx=Load()))]), attr='strip', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='current_rev_hash', ctx=Load()))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='is_commit_id_equal', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='dest', annotation=Name(id='str', ctx=Load())), arg(arg='name', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Always assume the versions don't match")), Return(value=Constant(value=False))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Name(id='bool', ctx=Load())), FunctionDef(name='get_subdirectory', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='location', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return the path to Python project root, relative to the repo root.\n        Return None if the project root is in the repo root.\n        ')), Assign(targets=[Name(id='repo_root', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='run_command', ctx=Load()), args=[List(elts=[Constant(value='root')], ctx=Load())], keywords=[keyword(arg='show_stdout', value=Constant(value=False)), keyword(arg='stdout_only', value=Constant(value=True)), keyword(arg='cwd', value=Name(id='location', ctx=Load()))]), attr='strip', ctx=Load()), args=[], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isabs', ctx=Load()), args=[Name(id='repo_root', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='repo_root', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='location', ctx=Load()), Name(id='repo_root', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='find_path_to_project_root_from_repo_root', ctx=Load()), args=[Name(id='location', ctx=Load()), Name(id='repo_root', ctx=Load())], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='get_repository_root', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='location', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='loc', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='get_repository_root', ctx=Load()), args=[Name(id='location', ctx=Load())], keywords=[])), If(test=Name(id='loc', ctx=Load()), body=[Return(value=Name(id='loc', ctx=Load()))], orelse=[]), Try(body=[Assign(targets=[Name(id='r', ctx=Store())], value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='run_command', ctx=Load()), args=[List(elts=[Constant(value='root')], ctx=Load())], keywords=[keyword(arg='cwd', value=Name(id='location', ctx=Load())), keyword(arg='show_stdout', value=Constant(value=False)), keyword(arg='stdout_only', value=Constant(value=True)), keyword(arg='on_returncode', value=Constant(value='raise')), keyword(arg='log_failed_cmd', value=Constant(value=False))]))], handlers=[ExceptHandler(type=Name(id='BadCommand', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='could not determine if %s is under hg control because hg is not available'), Name(id='location', ctx=Load())], keywords=[])), Return(value=Constant(value=None))]), ExceptHandler(type=Name(id='InstallationError', ctx=Load()), body=[Return(value=Constant(value=None))])], orelse=[], finalbody=[]), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normpath', ctx=Load()), args=[Call(func=Attribute(value=Name(id='r', ctx=Load()), attr='rstrip', ctx=Load()), args=[Constant(value='\r\n')], keywords=[])], keywords=[]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], decorator_list=[]), Expr(value=Call(func=Attribute(value=Name(id='vcs', ctx=Load()), attr='register', ctx=Load()), args=[Name(id='Mercurial', ctx=Load())], keywords=[]))], type_ignores=[])