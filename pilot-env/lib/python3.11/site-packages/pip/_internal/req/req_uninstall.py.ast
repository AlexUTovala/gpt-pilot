Module(body=[Import(names=[alias(name='functools')]), Import(names=[alias(name='os')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='sysconfig')]), ImportFrom(module='importlib.util', names=[alias(name='cache_from_source')], level=0), ImportFrom(module='typing', names=[alias(name='Any'), alias(name='Callable'), alias(name='Dict'), alias(name='Generator'), alias(name='Iterable'), alias(name='List'), alias(name='Optional'), alias(name='Set'), alias(name='Tuple')], level=0), ImportFrom(module='pip._internal.exceptions', names=[alias(name='UninstallationError')], level=0), ImportFrom(module='pip._internal.locations', names=[alias(name='get_bin_prefix'), alias(name='get_bin_user')], level=0), ImportFrom(module='pip._internal.metadata', names=[alias(name='BaseDistribution')], level=0), ImportFrom(module='pip._internal.utils.compat', names=[alias(name='WINDOWS')], level=0), ImportFrom(module='pip._internal.utils.egg_link', names=[alias(name='egg_link_path_from_location')], level=0), ImportFrom(module='pip._internal.utils.logging', names=[alias(name='getLogger'), alias(name='indent_log')], level=0), ImportFrom(module='pip._internal.utils.misc', names=[alias(name='ask'), alias(name='normalize_path'), alias(name='renames'), alias(name='rmtree')], level=0), ImportFrom(module='pip._internal.utils.temp_dir', names=[alias(name='AdjacentTempDirectory'), alias(name='TempDirectory')], level=0), ImportFrom(module='pip._internal.utils.virtualenv', names=[alias(name='running_under_virtualenv')], level=0), Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Name(id='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), FunctionDef(name='_script_names', args=arguments(posonlyargs=[], args=[arg(arg='bin_dir', annotation=Name(id='str', ctx=Load())), arg(arg='script_name', annotation=Name(id='str', ctx=Load())), arg(arg='is_gui', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Create the fully qualified name of the files created by\n    {console,gui}_scripts for the given ``dist``.\n    Returns the list of file names\n    ')), Assign(targets=[Name(id='exe_name', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='bin_dir', ctx=Load()), Name(id='script_name', ctx=Load())], keywords=[])), Expr(value=Yield(value=Name(id='exe_name', ctx=Load()))), If(test=UnaryOp(op=Not(), operand=Name(id='WINDOWS', ctx=Load())), body=[Return()], orelse=[]), Expr(value=Yield(value=JoinedStr(values=[FormattedValue(value=Name(id='exe_name', ctx=Load()), conversion=-1), Constant(value='.exe')]))), Expr(value=Yield(value=JoinedStr(values=[FormattedValue(value=Name(id='exe_name', ctx=Load()), conversion=-1), Constant(value='.exe.manifest')]))), If(test=Name(id='is_gui', ctx=Load()), body=[Expr(value=Yield(value=JoinedStr(values=[FormattedValue(value=Name(id='exe_name', ctx=Load()), conversion=-1), Constant(value='-script.pyw')])))], orelse=[Expr(value=Yield(value=JoinedStr(values=[FormattedValue(value=Name(id='exe_name', ctx=Load()), conversion=-1), Constant(value='-script.py')])))])], decorator_list=[], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='_unique', args=arguments(posonlyargs=[], args=[arg(arg='fn', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Name(id='Any', ctx=Load()), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='unique', args=arguments(posonlyargs=[], args=[], vararg=arg(arg='args', annotation=Name(id='Any', ctx=Load())), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kw', annotation=Name(id='Any', ctx=Load())), defaults=[]), body=[AnnAssign(target=Name(id='seen', ctx=Store()), annotation=Subscript(value=Name(id='Set', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load()), value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[]), simple=1), For(target=Name(id='item', ctx=Store()), iter=Call(func=Name(id='fn', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kw', ctx=Load()))]), body=[If(test=Compare(left=Name(id='item', ctx=Load()), ops=[NotIn()], comparators=[Name(id='seen', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='seen', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='item', ctx=Load())], keywords=[])), Expr(value=Yield(value=Name(id='item', ctx=Load())))], orelse=[])], orelse=[])], decorator_list=[Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='wraps', ctx=Load()), args=[Name(id='fn', ctx=Load())], keywords=[])], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Name(id='Any', ctx=Load()), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), Return(value=Name(id='unique', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Name(id='Any', ctx=Load()), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='uninstallation_paths', args=arguments(posonlyargs=[], args=[arg(arg='dist', annotation=Name(id='BaseDistribution', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Yield all the uninstallation paths for dist based on RECORD-without-.py[co]\n\n    Yield paths to all the files in RECORD. For each .py file in RECORD, add\n    the .pyc and .pyo in the same directory.\n\n    UninstallPathSet.add() takes care of the __pycache__ .py[co].\n\n    If RECORD is not found, raises UninstallationError,\n    with possible information from the INSTALLER file.\n\n    https://packaging.python.org/specifications/recording-installed-packages/\n    ')), Assign(targets=[Name(id='location', ctx=Store())], value=Attribute(value=Name(id='dist', ctx=Load()), attr='location', ctx=Load())), Assert(test=Compare(left=Name(id='location', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), msg=Constant(value='not installed')), Assign(targets=[Name(id='entries', ctx=Store())], value=Call(func=Attribute(value=Name(id='dist', ctx=Load()), attr='iter_declared_entries', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='entries', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=Call(func=Attribute(value=Constant(value='Cannot uninstall {dist}, RECORD file not found.'), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='dist', value=Name(id='dist', ctx=Load()))])), Assign(targets=[Name(id='installer', ctx=Store())], value=Attribute(value=Name(id='dist', ctx=Load()), attr='installer', ctx=Load())), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Name(id='installer', ctx=Load())), Compare(left=Name(id='installer', ctx=Load()), ops=[Eq()], comparators=[Constant(value='pip')])]), body=[Assign(targets=[Name(id='dep', ctx=Store())], value=Call(func=Attribute(value=Constant(value='{}=={}'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='dist', ctx=Load()), attr='raw_name', ctx=Load()), Attribute(value=Name(id='dist', ctx=Load()), attr='version', ctx=Load())], keywords=[])), AugAssign(target=Name(id='msg', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Constant(value=" You might be able to recover from this via: 'pip install --force-reinstall --no-deps {}'."), attr='format', ctx=Load()), args=[Name(id='dep', ctx=Load())], keywords=[]))], orelse=[AugAssign(target=Name(id='msg', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Constant(value=' Hint: The package was installed by {}.'), attr='format', ctx=Load()), args=[Name(id='installer', ctx=Load())], keywords=[]))]), Raise(exc=Call(func=Name(id='UninstallationError', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='entry', ctx=Store()), iter=Name(id='entries', ctx=Load()), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='location', ctx=Load()), Name(id='entry', ctx=Load())], keywords=[])), Expr(value=Yield(value=Name(id='path', ctx=Load()))), If(test=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='.py')], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='dn', ctx=Store()), Name(id='fn', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='split', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), Assign(targets=[Name(id='base', ctx=Store())], value=Subscript(value=Name(id='fn', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=3))), ctx=Load())), Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='dn', ctx=Load()), BinOp(left=Name(id='base', ctx=Load()), op=Add(), right=Constant(value='.pyc'))], keywords=[])), Expr(value=Yield(value=Name(id='path', ctx=Load()))), Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='dn', ctx=Load()), BinOp(left=Name(id='base', ctx=Load()), op=Add(), right=Constant(value='.pyo'))], keywords=[])), Expr(value=Yield(value=Name(id='path', ctx=Load())))], orelse=[])], orelse=[])], decorator_list=[Name(id='_unique', ctx=Load())], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='compact', args=arguments(posonlyargs=[], args=[arg(arg='paths', annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Compact a path set to contain the minimal number of paths\n    necessary to contain all paths in the set. If /a/path/ and\n    /a/path/to/a/file.txt are both in the set, leave only the\n    shorter path.')), Assign(targets=[Name(id='sep', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='sep', ctx=Load())), AnnAssign(target=Name(id='short_paths', ctx=Store()), annotation=Subscript(value=Name(id='Set', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[]), simple=1), For(target=Name(id='path', ctx=Store()), iter=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='paths', ctx=Load())], keywords=[keyword(arg='key', value=Name(id='len', ctx=Load()))]), body=[Assign(targets=[Name(id='should_skip', ctx=Store())], value=Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=BoolOp(op=And(), values=[Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='startswith', ctx=Load()), args=[Call(func=Attribute(value=Name(id='shortpath', ctx=Load()), attr='rstrip', ctx=Load()), args=[Constant(value='*')], keywords=[])], keywords=[]), Compare(left=Subscript(value=Name(id='path', ctx=Load()), slice=Call(func=Name(id='len', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='shortpath', ctx=Load()), attr='rstrip', ctx=Load()), args=[Constant(value='*')], keywords=[]), attr='rstrip', ctx=Load()), args=[Name(id='sep', ctx=Load())], keywords=[])], keywords=[]), ctx=Load()), ops=[Eq()], comparators=[Name(id='sep', ctx=Load())])]), generators=[comprehension(target=Name(id='shortpath', ctx=Store()), iter=Name(id='short_paths', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='should_skip', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='short_paths', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='short_paths', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Set', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='compress_for_rename', args=arguments(posonlyargs=[], args=[arg(arg='paths', annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Returns a set containing the paths that need to be renamed.\n\n    This set may include directories when the original sequence of paths\n    included every file on disk.\n    ')), Assign(targets=[Name(id='case_map', ctx=Store())], value=DictComp(key=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normcase', ctx=Load()), args=[Name(id='p', ctx=Load())], keywords=[]), value=Name(id='p', ctx=Load()), generators=[comprehension(target=Name(id='p', ctx=Store()), iter=Name(id='paths', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='remaining', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Name(id='case_map', ctx=Load())], keywords=[])), Assign(targets=[Name(id='unchecked', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[SetComp(elt=Subscript(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='split', ctx=Load()), args=[Name(id='p', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load()), generators=[comprehension(target=Name(id='p', ctx=Store()), iter=Call(func=Attribute(value=Name(id='case_map', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[keyword(arg='key', value=Name(id='len', ctx=Load()))])), AnnAssign(target=Name(id='wildcards', ctx=Store()), annotation=Subscript(value=Name(id='Set', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[]), simple=1), FunctionDef(name='norm_join', args=arguments(posonlyargs=[], args=[], vararg=arg(arg='a', annotation=Name(id='str', ctx=Load())), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normcase', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Starred(value=Name(id='a', ctx=Load()), ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), For(target=Name(id='root', ctx=Store()), iter=Name(id='unchecked', ctx=Load()), body=[If(test=Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normcase', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[]), attr='startswith', ctx=Load()), args=[Name(id='w', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='w', ctx=Store()), iter=Name(id='wildcards', ctx=Load()), ifs=[], is_async=0)])], keywords=[]), body=[Continue()], orelse=[]), AnnAssign(target=Name(id='all_files', ctx=Store()), annotation=Subscript(value=Name(id='Set', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[]), simple=1), AnnAssign(target=Name(id='all_subdirs', ctx=Store()), annotation=Subscript(value=Name(id='Set', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[]), simple=1), For(target=Tuple(elts=[Name(id='dirname', ctx=Store()), Name(id='subdirs', ctx=Store()), Name(id='files', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='walk', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='all_subdirs', ctx=Load()), attr='update', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='norm_join', ctx=Load()), args=[Name(id='root', ctx=Load()), Name(id='dirname', ctx=Load()), Name(id='d', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='d', ctx=Store()), iter=Name(id='subdirs', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='all_files', ctx=Load()), attr='update', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='norm_join', ctx=Load()), args=[Name(id='root', ctx=Load()), Name(id='dirname', ctx=Load()), Name(id='f', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='f', ctx=Store()), iter=Name(id='files', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=BinOp(left=Name(id='all_files', ctx=Load()), op=Sub(), right=Name(id='remaining', ctx=Load()))), body=[Expr(value=Call(func=Attribute(value=Name(id='remaining', ctx=Load()), attr='difference_update', ctx=Load()), args=[Name(id='all_files', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='wildcards', ctx=Load()), attr='add', ctx=Load()), args=[BinOp(left=Name(id='root', ctx=Load()), op=Add(), right=Attribute(value=Name(id='os', ctx=Load()), attr='sep', ctx=Load()))], keywords=[]))], orelse=[])], orelse=[]), Return(value=BinOp(left=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Attribute(value=Name(id='case_map', ctx=Load()), attr='__getitem__', ctx=Load()), Name(id='remaining', ctx=Load())], keywords=[])], keywords=[]), op=BitOr(), right=Name(id='wildcards', ctx=Load())))], decorator_list=[], returns=Subscript(value=Name(id='Set', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='compress_for_output_listing', args=arguments(posonlyargs=[], args=[arg(arg='paths', annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Returns a tuple of 2 sets of which paths to display to user\n\n    The first set contains paths that would be deleted. Files of a package\n    are not added and the top-level directory of the package has a '*' added\n    at the end - to signify that all it's contents are removed.\n\n    The second set contains files that would have been skipped in the above\n    folders.\n    ")), Assign(targets=[Name(id='will_remove', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Name(id='paths', ctx=Load())], keywords=[])), Assign(targets=[Name(id='will_skip', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='folders', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='files', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])), For(target=Name(id='path', ctx=Store()), iter=Name(id='will_remove', ctx=Load()), body=[If(test=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='.pyc')], keywords=[]), body=[Continue()], orelse=[]), If(test=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='__init__.py')], keywords=[]), Compare(left=Constant(value='.dist-info'), ops=[In()], comparators=[Name(id='path', ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Name(id='folders', ctx=Load()), attr='add', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='files', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='_normcased_files', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normcase', ctx=Load()), Name(id='files', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='folders', ctx=Store())], value=Call(func=Name(id='compact', ctx=Load()), args=[Name(id='folders', ctx=Load())], keywords=[])), For(target=Name(id='folder', ctx=Store()), iter=Name(id='folders', ctx=Load()), body=[For(target=Tuple(elts=[Name(id='dirpath', ctx=Store()), Name(id='_', ctx=Store()), Name(id='dirfiles', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='walk', ctx=Load()), args=[Name(id='folder', ctx=Load())], keywords=[]), body=[For(target=Name(id='fname', ctx=Store()), iter=Name(id='dirfiles', ctx=Load()), body=[If(test=Call(func=Attribute(value=Name(id='fname', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='.pyc')], keywords=[]), body=[Continue()], orelse=[]), Assign(targets=[Name(id='file_', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='dirpath', ctx=Load()), Name(id='fname', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isfile', ctx=Load()), args=[Name(id='file_', ctx=Load())], keywords=[]), Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normcase', ctx=Load()), args=[Name(id='file_', ctx=Load())], keywords=[]), ops=[NotIn()], comparators=[Name(id='_normcased_files', ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Name(id='will_skip', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='file_', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='will_remove', ctx=Store())], value=BinOp(left=Name(id='files', ctx=Load()), op=BitOr(), right=SetComp(elt=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='folder', ctx=Load()), Constant(value='*')], keywords=[]), generators=[comprehension(target=Name(id='folder', ctx=Store()), iter=Name(id='folders', ctx=Load()), ifs=[], is_async=0)]))), Return(value=Tuple(elts=[Name(id='will_remove', ctx=Load()), Name(id='will_skip', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Set', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), Subscript(value=Name(id='Set', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), ClassDef(name='StashedUninstallPathSet', bases=[], keywords=[], body=[Expr(value=Constant(value='A set of file rename operations to stash files while\n    tentatively uninstalling them.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_save_dirs', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='TempDirectory', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_moves', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=0)], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_get_directory_stash', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Stashes a directory.\n\n        Directories are stashed adjacent to their original location if\n        possible, or else moved/copied into the user's temp dir.")), Try(body=[AnnAssign(target=Name(id='save_dir', ctx=Store()), annotation=Name(id='TempDirectory', ctx=Load()), value=Call(func=Name(id='AdjacentTempDirectory', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), simple=1)], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), body=[Assign(targets=[Name(id='save_dir', ctx=Store())], value=Call(func=Name(id='TempDirectory', ctx=Load()), args=[], keywords=[keyword(arg='kind', value=Constant(value='uninstall'))]))])], orelse=[], finalbody=[]), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_save_dirs', ctx=Load()), slice=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normcase', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), ctx=Store())], value=Name(id='save_dir', ctx=Load())), Return(value=Attribute(value=Name(id='save_dir', ctx=Load()), attr='path', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='_get_file_stash', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Stashes a file.\n\n        If no root has been provided, one will be created for the directory\n        in the user's temp directory.")), Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normcase', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='head', ctx=Store()), Name(id='old_head', ctx=Store())], ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), Constant(value=None)], ctx=Load())), Assign(targets=[Name(id='save_dir', ctx=Store())], value=Constant(value=None)), While(test=Compare(left=Name(id='head', ctx=Load()), ops=[NotEq()], comparators=[Name(id='old_head', ctx=Load())]), body=[Try(body=[Assign(targets=[Name(id='save_dir', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_save_dirs', ctx=Load()), slice=Name(id='head', ctx=Load()), ctx=Load())), Break()], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[]), Assign(targets=[Tuple(elts=[Name(id='head', ctx=Store()), Name(id='old_head', ctx=Store())], ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Name(id='head', ctx=Load())], keywords=[]), Name(id='head', ctx=Load())], ctx=Load()))], orelse=[Assign(targets=[Name(id='head', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), Assign(targets=[Name(id='save_dir', ctx=Store())], value=Call(func=Name(id='TempDirectory', ctx=Load()), args=[], keywords=[keyword(arg='kind', value=Constant(value='uninstall'))])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_save_dirs', ctx=Load()), slice=Name(id='head', ctx=Load()), ctx=Store())], value=Name(id='save_dir', ctx=Load()))]), Assign(targets=[Name(id='relpath', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='relpath', ctx=Load()), args=[Name(id='path', ctx=Load()), Name(id='head', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Name(id='relpath', ctx=Load()), Compare(left=Name(id='relpath', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='curdir', ctx=Load())])]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='save_dir', ctx=Load()), attr='path', ctx=Load()), Name(id='relpath', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Attribute(value=Name(id='save_dir', ctx=Load()), attr='path', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='stash', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Stashes the directory or file and returns its new location.\n        Handle symlinks as files to avoid modifying the symlink targets.\n        ')), Assign(targets=[Name(id='path_is_dir', ctx=Store())], value=BoolOp(op=And(), values=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isdir', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='islink', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))])), If(test=Name(id='path_is_dir', ctx=Load()), body=[Assign(targets=[Name(id='new_path', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_directory_stash', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='new_path', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_file_stash', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_moves', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='path', ctx=Load()), Name(id='new_path', ctx=Load())], ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Name(id='path_is_dir', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isdir', ctx=Load()), args=[Name(id='new_path', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='rmdir', ctx=Load()), args=[Name(id='new_path', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Name(id='renames', ctx=Load()), args=[Name(id='path', ctx=Load()), Name(id='new_path', ctx=Load())], keywords=[])), Return(value=Name(id='new_path', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='commit', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Commits the uninstall by removing stashed files.')), For(target=Name(id='save_dir', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_save_dirs', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='save_dir', ctx=Load()), attr='cleanup', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_moves', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_save_dirs', ctx=Store())], value=Dict(keys=[], values=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='rollback', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Undoes the uninstall by moving stashed files back.')), For(target=Name(id='p', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_moves', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Moving to %s\n from %s'), Starred(value=Name(id='p', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), For(target=Tuple(elts=[Name(id='new_path', ctx=Store()), Name(id='path', ctx=Store())], ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_moves', ctx=Load()), body=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Replacing %s from %s'), Name(id='new_path', ctx=Load()), Name(id='path', ctx=Load())], keywords=[])), If(test=BoolOp(op=Or(), values=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isfile', ctx=Load()), args=[Name(id='new_path', ctx=Load())], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='islink', ctx=Load()), args=[Name(id='new_path', ctx=Load())], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='unlink', ctx=Load()), args=[Name(id='new_path', ctx=Load())], keywords=[]))], orelse=[If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isdir', ctx=Load()), args=[Name(id='new_path', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Name(id='rmtree', ctx=Load()), args=[Name(id='new_path', ctx=Load())], keywords=[]))], orelse=[])]), Expr(value=Call(func=Name(id='renames', ctx=Load()), args=[Name(id='path', ctx=Load()), Name(id='new_path', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), name='ex', body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='error', ctx=Load()), args=[Constant(value='Failed to restore %s'), Name(id='new_path', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Exception: %s'), Name(id='ex', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='commit', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='can_rollback', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='bool', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_moves', ctx=Load())], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='bool', ctx=Load()))], decorator_list=[]), ClassDef(name='UninstallPathSet', bases=[], keywords=[], body=[Expr(value=Constant(value='A set of file paths to be removed in the uninstallation of a\n    requirement.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='dist', annotation=Name(id='BaseDistribution', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_paths', ctx=Store()), annotation=Subscript(value=Name(id='Set', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[]), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_refuse', ctx=Store()), annotation=Subscript(value=Name(id='Set', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[]), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_pth', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='UninstallPthEntries', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_dist', ctx=Store())], value=Name(id='dist', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_moved_paths', ctx=Store())], value=Call(func=Name(id='StashedUninstallPathSet', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_normalize_path_cached', ctx=Store())], value=Call(func=Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='lru_cache', ctx=Load()), args=[], keywords=[]), args=[Name(id='normalize_path', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_permitted', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return True if the given path is one we are permitted to\n        remove/modify, False otherwise.\n\n        ')), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='running_under_virtualenv', ctx=Load()), args=[], keywords=[])), body=[Return(value=Constant(value=True))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='startswith', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_normalize_path_cached', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='prefix', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='add', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='head', ctx=Store()), Name(id='tail', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='split', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_normalize_path_cached', ctx=Load()), args=[Name(id='head', ctx=Load())], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normcase', ctx=Load()), args=[Name(id='tail', ctx=Load())], keywords=[])], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), body=[Return()], orelse=[]), If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_permitted', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_paths', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_refuse', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))]), If(test=Compare(left=Subscript(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='splitext', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), slice=Constant(value=1), ctx=Load()), ops=[Eq()], comparators=[Constant(value='.py')]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='add', ctx=Load()), args=[Call(func=Name(id='cache_from_source', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='add_pth', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='pth_file', annotation=Name(id='str', ctx=Load())), arg(arg='entry', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='pth_file', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_normalize_path_cached', ctx=Load()), args=[Name(id='pth_file', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_permitted', ctx=Load()), args=[Name(id='pth_file', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='pth_file', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_pth', ctx=Load())]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_pth', ctx=Load()), slice=Name(id='pth_file', ctx=Load()), ctx=Store())], value=Call(func=Name(id='UninstallPthEntries', ctx=Load()), args=[Name(id='pth_file', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_pth', ctx=Load()), slice=Name(id='pth_file', ctx=Load()), ctx=Load()), attr='add', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_refuse', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='pth_file', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='remove', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='auto_confirm', annotation=Name(id='bool', ctx=Load())), arg(arg='verbose', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Constant(value=False)]), body=[Expr(value=Constant(value='Remove paths in ``self._paths`` with confirmation (unless\n        ``auto_confirm`` is True).')), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='_paths', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value="Can't uninstall '%s'. No files were found to uninstall."), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_dist', ctx=Load()), attr='raw_name', ctx=Load())], keywords=[])), Return()], orelse=[]), Assign(targets=[Name(id='dist_name_version', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_dist', ctx=Load()), attr='raw_name', ctx=Load()), conversion=-1), Constant(value='-'), FormattedValue(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_dist', ctx=Load()), attr='version', ctx=Load()), conversion=-1)])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Uninstalling %s:'), Name(id='dist_name_version', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='indent_log', ctx=Load()), args=[], keywords=[]))], body=[If(test=BoolOp(op=Or(), values=[Name(id='auto_confirm', ctx=Load()), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_allowed_to_proceed', ctx=Load()), args=[Name(id='verbose', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='moved', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_moved_paths', ctx=Load())), Assign(targets=[Name(id='for_rename', ctx=Store())], value=Call(func=Name(id='compress_for_rename', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_paths', ctx=Load())], keywords=[])), For(target=Name(id='path', ctx=Store()), iter=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='compact', ctx=Load()), args=[Name(id='for_rename', ctx=Load())], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='moved', ctx=Load()), attr='stash', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='verbose', ctx=Load()), args=[Constant(value='Removing file or directory %s'), Name(id='path', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='pth', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_pth', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='pth', ctx=Load()), attr='remove', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Successfully uninstalled %s'), Name(id='dist_name_version', ctx=Load())], keywords=[]))], orelse=[])])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_allowed_to_proceed', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='verbose', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Display which files would be deleted and prompt for confirmation')), FunctionDef(name='_display', args=arguments(posonlyargs=[], args=[arg(arg='msg', annotation=Name(id='str', ctx=Load())), arg(arg='paths', annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='paths', ctx=Load())), body=[Return()], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='indent_log', ctx=Load()), args=[], keywords=[]))], body=[For(target=Name(id='path', ctx=Store()), iter=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Name(id='compact', ctx=Load()), args=[Name(id='paths', ctx=Load())], keywords=[])], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))], orelse=[])])], decorator_list=[], returns=Constant(value=None)), If(test=UnaryOp(op=Not(), operand=Name(id='verbose', ctx=Load())), body=[Assign(targets=[Tuple(elts=[Name(id='will_remove', ctx=Store()), Name(id='will_skip', ctx=Store())], ctx=Store())], value=Call(func=Name(id='compress_for_output_listing', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_paths', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='will_remove', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_paths', ctx=Load())], keywords=[])), Assign(targets=[Name(id='will_skip', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[]))]), Expr(value=Call(func=Name(id='_display', ctx=Load()), args=[Constant(value='Would remove:'), Name(id='will_remove', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='_display', ctx=Load()), args=[Constant(value='Would not remove (might be manually added):'), Name(id='will_skip', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='_display', ctx=Load()), args=[Constant(value='Would not remove (outside of prefix):'), Attribute(value=Name(id='self', ctx=Load()), attr='_refuse', ctx=Load())], keywords=[])), If(test=Name(id='verbose', ctx=Load()), body=[Expr(value=Call(func=Name(id='_display', ctx=Load()), args=[Constant(value='Will actually move:'), Call(func=Name(id='compress_for_rename', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_paths', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Return(value=Compare(left=Call(func=Name(id='ask', ctx=Load()), args=[Constant(value='Proceed (Y/n)? '), Tuple(elts=[Constant(value='y'), Constant(value='n'), Constant(value='')], ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Constant(value='n')]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='rollback', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Rollback the changes previously made by remove().')), If(test=UnaryOp(op=Not(), operand=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_moved_paths', ctx=Load()), attr='can_rollback', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='error', ctx=Load()), args=[Constant(value="Can't roll back %s; was not uninstalled"), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_dist', ctx=Load()), attr='raw_name', ctx=Load())], keywords=[])), Return()], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Rolling back uninstall of %s'), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_dist', ctx=Load()), attr='raw_name', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_moved_paths', ctx=Load()), attr='rollback', ctx=Load()), args=[], keywords=[])), For(target=Name(id='pth', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_pth', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='pth', ctx=Load()), attr='rollback', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='commit', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Remove temporary save dir: rollback will no longer be possible.')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_moved_paths', ctx=Load()), attr='commit', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='from_dist', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='dist', annotation=Name(id='BaseDistribution', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='dist_location', ctx=Store())], value=Attribute(value=Name(id='dist', ctx=Load()), attr='location', ctx=Load())), Assign(targets=[Name(id='info_location', ctx=Store())], value=Attribute(value=Name(id='dist', ctx=Load()), attr='info_location', ctx=Load())), If(test=Compare(left=Name(id='dist_location', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Not uninstalling %s since it is not installed'), Attribute(value=Name(id='dist', ctx=Load()), attr='canonical_name', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='cls', ctx=Load()), args=[Name(id='dist', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='normalized_dist_location', ctx=Store())], value=Call(func=Name(id='normalize_path', ctx=Load()), args=[Name(id='dist_location', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='dist', ctx=Load()), attr='local', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Not uninstalling %s at %s, outside environment %s'), Attribute(value=Name(id='dist', ctx=Load()), attr='canonical_name', ctx=Load()), Name(id='normalized_dist_location', ctx=Load()), Attribute(value=Name(id='sys', ctx=Load()), attr='prefix', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='cls', ctx=Load()), args=[Name(id='dist', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='normalized_dist_location', ctx=Load()), ops=[In()], comparators=[SetComp(elt=Name(id='p', ctx=Load()), generators=[comprehension(target=Name(id='p', ctx=Store()), iter=Set(elts=[Call(func=Attribute(value=Name(id='sysconfig', ctx=Load()), attr='get_path', ctx=Load()), args=[Constant(value='stdlib')], keywords=[]), Call(func=Attribute(value=Name(id='sysconfig', ctx=Load()), attr='get_path', ctx=Load()), args=[Constant(value='platstdlib')], keywords=[])]), ifs=[Name(id='p', ctx=Load())], is_async=0)])]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Not uninstalling %s at %s, as it is in the standard library.'), Attribute(value=Name(id='dist', ctx=Load()), attr='canonical_name', ctx=Load()), Name(id='normalized_dist_location', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='cls', ctx=Load()), args=[Name(id='dist', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='paths_to_remove', ctx=Store())], value=Call(func=Name(id='cls', ctx=Load()), args=[Name(id='dist', ctx=Load())], keywords=[])), Assign(targets=[Name(id='develop_egg_link', ctx=Store())], value=Call(func=Name(id='egg_link_path_from_location', ctx=Load()), args=[Attribute(value=Name(id='dist', ctx=Load()), attr='raw_name', ctx=Load())], keywords=[])), Assign(targets=[Name(id='setuptools_flat_installation', ctx=Store())], value=BoolOp(op=And(), values=[Attribute(value=Name(id='dist', ctx=Load()), attr='installed_with_setuptools_egg_info', ctx=Load()), Compare(left=Name(id='info_location', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='info_location', ctx=Load())], keywords=[]), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='info_location', ctx=Load()), attr='endswith', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='dist', ctx=Load()), attr='setuptools_filename', ctx=Load()), conversion=-1), Constant(value='.egg-info')])], keywords=[]))])), If(test=Name(id='setuptools_flat_installation', ctx=Load()), body=[If(test=Compare(left=Name(id='info_location', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='paths_to_remove', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='info_location', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='installed_files', ctx=Store())], value=Call(func=Attribute(value=Name(id='dist', ctx=Load()), attr='iter_declared_entries', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='installed_files', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[For(target=Name(id='installed_file', ctx=Store()), iter=Name(id='installed_files', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='paths_to_remove', ctx=Load()), attr='add', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='dist_location', ctx=Load()), Name(id='installed_file', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], orelse=[If(test=Call(func=Attribute(value=Name(id='dist', ctx=Load()), attr='is_file', ctx=Load()), args=[Constant(value='top_level.txt')], keywords=[]), body=[Try(body=[Assign(targets=[Name(id='namespace_packages', ctx=Store())], value=Call(func=Attribute(value=Name(id='dist', ctx=Load()), attr='read_text', ctx=Load()), args=[Constant(value='namespace_packages.txt')], keywords=[]))], handlers=[ExceptHandler(type=Name(id='FileNotFoundError', ctx=Load()), body=[Assign(targets=[Name(id='namespaces', ctx=Store())], value=List(elts=[], ctx=Load()))])], orelse=[Assign(targets=[Name(id='namespaces', ctx=Store())], value=Call(func=Attribute(value=Name(id='namespace_packages', ctx=Load()), attr='splitlines', ctx=Load()), args=[], keywords=[keyword(arg='keepends', value=Constant(value=False))]))], finalbody=[]), For(target=Name(id='top_level_pkg', ctx=Store()), iter=ListComp(elt=Name(id='p', ctx=Load()), generators=[comprehension(target=Name(id='p', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='dist', ctx=Load()), attr='read_text', ctx=Load()), args=[Constant(value='top_level.txt')], keywords=[]), attr='splitlines', ctx=Load()), args=[], keywords=[]), ifs=[BoolOp(op=And(), values=[Name(id='p', ctx=Load()), Compare(left=Name(id='p', ctx=Load()), ops=[NotIn()], comparators=[Name(id='namespaces', ctx=Load())])])], is_async=0)]), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='dist_location', ctx=Load()), Name(id='top_level_pkg', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='paths_to_remove', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='paths_to_remove', ctx=Load()), attr='add', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='path', ctx=Load()), conversion=-1), Constant(value='.py')])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='paths_to_remove', ctx=Load()), attr='add', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='path', ctx=Load()), conversion=-1), Constant(value='.pyc')])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='paths_to_remove', ctx=Load()), attr='add', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='path', ctx=Load()), conversion=-1), Constant(value='.pyo')])], keywords=[]))], orelse=[])], orelse=[])])], orelse=[If(test=Attribute(value=Name(id='dist', ctx=Load()), attr='installed_by_distutils', ctx=Load()), body=[Raise(exc=Call(func=Name(id='UninstallationError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Cannot uninstall {!r}. It is a distutils installed project and thus we cannot accurately determine which files belong to it which would lead to only a partial uninstall.'), attr='format', ctx=Load()), args=[Attribute(value=Name(id='dist', ctx=Load()), attr='raw_name', ctx=Load())], keywords=[])], keywords=[]))], orelse=[If(test=Attribute(value=Name(id='dist', ctx=Load()), attr='installed_as_egg', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='paths_to_remove', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='dist_location', ctx=Load())], keywords=[])), Assign(targets=[Name(id='easy_install_egg', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='split', ctx=Load()), args=[Name(id='dist_location', ctx=Load())], keywords=[]), slice=Constant(value=1), ctx=Load())), Assign(targets=[Name(id='easy_install_pth', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Name(id='dist_location', ctx=Load())], keywords=[]), Constant(value='easy-install.pth')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='paths_to_remove', ctx=Load()), attr='add_pth', ctx=Load()), args=[Name(id='easy_install_pth', ctx=Load()), BinOp(left=Constant(value='./'), op=Add(), right=Name(id='easy_install_egg', ctx=Load()))], keywords=[]))], orelse=[If(test=Attribute(value=Name(id='dist', ctx=Load()), attr='installed_with_dist_info', ctx=Load()), body=[For(target=Name(id='path', ctx=Store()), iter=Call(func=Name(id='uninstallation_paths', ctx=Load()), args=[Name(id='dist', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='paths_to_remove', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))], orelse=[])], orelse=[If(test=Name(id='develop_egg_link', ctx=Load()), body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='develop_egg_link', ctx=Load())], keywords=[]), optional_vars=Name(id='fh', ctx=Store()))], body=[Assign(targets=[Name(id='link_pointer', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normcase', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='fh', ctx=Load()), attr='readline', ctx=Load()), args=[], keywords=[]), attr='strip', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='normalized_link_pointer', ctx=Store())], value=Call(func=Attribute(value=Name(id='paths_to_remove', ctx=Load()), attr='_normalize_path_cached', ctx=Load()), args=[Name(id='link_pointer', ctx=Load())], keywords=[]))]), Assert(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='samefile', ctx=Load()), args=[Name(id='normalized_link_pointer', ctx=Load()), Name(id='normalized_dist_location', ctx=Load())], keywords=[]), msg=JoinedStr(values=[Constant(value='Egg-link '), FormattedValue(value=Name(id='develop_egg_link', ctx=Load()), conversion=-1), Constant(value=' (to '), FormattedValue(value=Name(id='link_pointer', ctx=Load()), conversion=-1), Constant(value=') does not match installed location of '), FormattedValue(value=Attribute(value=Name(id='dist', ctx=Load()), attr='raw_name', ctx=Load()), conversion=-1), Constant(value=' (at '), FormattedValue(value=Name(id='dist_location', ctx=Load()), conversion=-1), Constant(value=')')])), Expr(value=Call(func=Attribute(value=Name(id='paths_to_remove', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='develop_egg_link', ctx=Load())], keywords=[])), Assign(targets=[Name(id='easy_install_pth', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Name(id='develop_egg_link', ctx=Load())], keywords=[]), Constant(value='easy-install.pth')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='paths_to_remove', ctx=Load()), attr='add_pth', ctx=Load()), args=[Name(id='easy_install_pth', ctx=Load()), Name(id='dist_location', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Not sure how to uninstall: %s - Check: %s'), Name(id='dist', ctx=Load()), Name(id='dist_location', ctx=Load())], keywords=[]))])])])])]), If(test=Attribute(value=Name(id='dist', ctx=Load()), attr='in_usersite', ctx=Load()), body=[Assign(targets=[Name(id='bin_dir', ctx=Store())], value=Call(func=Name(id='get_bin_user', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Name(id='bin_dir', ctx=Store())], value=Call(func=Name(id='get_bin_prefix', ctx=Load()), args=[], keywords=[]))]), Try(body=[For(target=Name(id='script', ctx=Store()), iter=Call(func=Attribute(value=Name(id='dist', ctx=Load()), attr='iter_distutils_script_names', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='paths_to_remove', ctx=Load()), attr='add', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='bin_dir', ctx=Load()), Name(id='script', ctx=Load())], keywords=[])], keywords=[])), If(test=Name(id='WINDOWS', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='paths_to_remove', ctx=Load()), attr='add', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='bin_dir', ctx=Load()), JoinedStr(values=[FormattedValue(value=Name(id='script', ctx=Load()), conversion=-1), Constant(value='.bat')])], keywords=[])], keywords=[]))], orelse=[])], orelse=[])], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='FileNotFoundError', ctx=Load()), Name(id='NotADirectoryError', ctx=Load())], ctx=Load()), body=[Pass()])], orelse=[], finalbody=[]), FunctionDef(name='iter_scripts_to_remove', args=arguments(posonlyargs=[], args=[arg(arg='dist', annotation=Name(id='BaseDistribution', ctx=Load())), arg(arg='bin_dir', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='entry_point', ctx=Store()), iter=Call(func=Attribute(value=Name(id='dist', ctx=Load()), attr='iter_entry_points', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Attribute(value=Name(id='entry_point', ctx=Load()), attr='group', ctx=Load()), ops=[Eq()], comparators=[Constant(value='console_scripts')]), body=[Expr(value=YieldFrom(value=Call(func=Name(id='_script_names', ctx=Load()), args=[Name(id='bin_dir', ctx=Load()), Attribute(value=Name(id='entry_point', ctx=Load()), attr='name', ctx=Load()), Constant(value=False)], keywords=[])))], orelse=[If(test=Compare(left=Attribute(value=Name(id='entry_point', ctx=Load()), attr='group', ctx=Load()), ops=[Eq()], comparators=[Constant(value='gui_scripts')]), body=[Expr(value=YieldFrom(value=Call(func=Name(id='_script_names', ctx=Load()), args=[Name(id='bin_dir', ctx=Load()), Attribute(value=Name(id='entry_point', ctx=Load()), attr='name', ctx=Load()), Constant(value=True)], keywords=[])))], orelse=[])])], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), For(target=Name(id='s', ctx=Store()), iter=Call(func=Name(id='iter_scripts_to_remove', ctx=Load()), args=[Name(id='dist', ctx=Load()), Name(id='bin_dir', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='paths_to_remove', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='paths_to_remove', ctx=Load()))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Constant(value='UninstallPathSet'))], decorator_list=[]), ClassDef(name='UninstallPthEntries', bases=[], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='pth_file', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='file', ctx=Store())], value=Name(id='pth_file', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='entries', ctx=Store()), annotation=Subscript(value=Name(id='Set', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[]), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_saved_lines', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='bytes', ctx=Load()), ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0)], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='add', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='entry', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='entry', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normcase', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[])), If(test=BoolOp(op=And(), values=[Name(id='WINDOWS', ctx=Load()), UnaryOp(op=Not(), operand=Subscript(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='splitdrive', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load()))]), body=[Assign(targets=[Name(id='entry', ctx=Store())], value=Call(func=Attribute(value=Name(id='entry', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='\\'), Constant(value='/')], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='entries', ctx=Load()), attr='add', ctx=Load()), args=[Name(id='entry', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='remove', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='verbose', ctx=Load()), args=[Constant(value='Removing pth entries from %s:'), Attribute(value=Name(id='self', ctx=Load()), attr='file', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isfile', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='file', ctx=Load())], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='Cannot remove entries from nonexistent file %s'), Attribute(value=Name(id='self', ctx=Load()), attr='file', ctx=Load())], keywords=[])), Return()], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='file', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='fh', ctx=Store()))], body=[Assign(targets=[Name(id='lines', ctx=Store())], value=Call(func=Attribute(value=Name(id='fh', ctx=Load()), attr='readlines', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_saved_lines', ctx=Store())], value=Name(id='lines', ctx=Load()))]), If(test=Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=Compare(left=Constant(value=b'\r\n'), ops=[In()], comparators=[Name(id='line', ctx=Load())]), generators=[comprehension(target=Name(id='line', ctx=Store()), iter=Name(id='lines', ctx=Load()), ifs=[], is_async=0)])], keywords=[]), body=[Assign(targets=[Name(id='endline', ctx=Store())], value=Constant(value='\r\n'))], orelse=[Assign(targets=[Name(id='endline', ctx=Store())], value=Constant(value='\n'))]), If(test=BoolOp(op=And(), values=[Name(id='lines', ctx=Load()), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Subscript(value=Name(id='lines', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), attr='endswith', ctx=Load()), args=[Call(func=Attribute(value=Name(id='endline', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[])], keywords=[]))]), body=[Assign(targets=[Subscript(value=Name(id='lines', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Store())], value=BinOp(left=Subscript(value=Name(id='lines', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), op=Add(), right=Call(func=Attribute(value=Name(id='endline', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[])))], orelse=[]), For(target=Name(id='entry', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='entries', ctx=Load()), body=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='verbose', ctx=Load()), args=[Constant(value='Removing entry: %s'), Name(id='entry', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='lines', ctx=Load()), attr='remove', ctx=Load()), args=[Call(func=Attribute(value=BinOp(left=Name(id='entry', ctx=Load()), op=Add(), right=Name(id='endline', ctx=Load())), attr='encode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[])], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], orelse=[]), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='file', ctx=Load()), Constant(value='wb')], keywords=[]), optional_vars=Name(id='fh', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='fh', ctx=Load()), attr='writelines', ctx=Load()), args=[Name(id='lines', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='rollback', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_saved_lines', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='error', ctx=Load()), args=[Constant(value='Cannot roll back changes to %s, none were made'), Attribute(value=Name(id='self', ctx=Load()), attr='file', ctx=Load())], keywords=[])), Return(value=Constant(value=False))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Rolling %s back to previous state'), Attribute(value=Name(id='self', ctx=Load()), attr='file', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='file', ctx=Load()), Constant(value='wb')], keywords=[]), optional_vars=Name(id='fh', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='fh', ctx=Load()), attr='writelines', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_saved_lines', ctx=Load())], keywords=[]))]), Return(value=Constant(value=True))], decorator_list=[], returns=Name(id='bool', ctx=Load()))], decorator_list=[])], type_ignores=[])