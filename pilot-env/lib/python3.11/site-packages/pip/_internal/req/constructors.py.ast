Module(body=[Expr(value=Constant(value="Backing implementation for InstallRequirement's various constructors\n\nThe idea here is that these formed a major chunk of InstallRequirement's size\nso, moving them and support code dedicated to them outside of that class\nhelps creates for better understandability for the rest of the code.\n\nThese are meant to be used elsewhere within pip to create instances of\nInstallRequirement.\n")), Import(names=[alias(name='copy')]), Import(names=[alias(name='logging')]), Import(names=[alias(name='os')]), Import(names=[alias(name='re')]), ImportFrom(module='typing', names=[alias(name='Collection'), alias(name='Dict'), alias(name='List'), alias(name='Optional'), alias(name='Set'), alias(name='Tuple'), alias(name='Union')], level=0), ImportFrom(module='pip._vendor.packaging.markers', names=[alias(name='Marker')], level=0), ImportFrom(module='pip._vendor.packaging.requirements', names=[alias(name='InvalidRequirement'), alias(name='Requirement')], level=0), ImportFrom(module='pip._vendor.packaging.specifiers', names=[alias(name='Specifier')], level=0), ImportFrom(module='pip._internal.exceptions', names=[alias(name='InstallationError')], level=0), ImportFrom(module='pip._internal.models.index', names=[alias(name='PyPI'), alias(name='TestPyPI')], level=0), ImportFrom(module='pip._internal.models.link', names=[alias(name='Link')], level=0), ImportFrom(module='pip._internal.models.wheel', names=[alias(name='Wheel')], level=0), ImportFrom(module='pip._internal.req.req_file', names=[alias(name='ParsedRequirement')], level=0), ImportFrom(module='pip._internal.req.req_install', names=[alias(name='InstallRequirement')], level=0), ImportFrom(module='pip._internal.utils.filetypes', names=[alias(name='is_archive_file')], level=0), ImportFrom(module='pip._internal.utils.misc', names=[alias(name='is_installable_dir')], level=0), ImportFrom(module='pip._internal.utils.packaging', names=[alias(name='get_requirement')], level=0), ImportFrom(module='pip._internal.utils.urls', names=[alias(name='path_to_url')], level=0), ImportFrom(module='pip._internal.vcs', names=[alias(name='is_url'), alias(name='vcs')], level=0), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='install_req_from_editable'), Constant(value='install_req_from_line'), Constant(value='parse_editable')], ctx=Load())), Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), Assign(targets=[Name(id='operators', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='Specifier', ctx=Load()), attr='_operators', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])), FunctionDef(name='_strip_extras', args=arguments(posonlyargs=[], args=[arg(arg='path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='m', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='match', ctx=Load()), args=[Constant(value='^(.+)(\\[[^\\]]+\\])$'), Name(id='path', ctx=Load())], keywords=[])), Assign(targets=[Name(id='extras', ctx=Store())], value=Constant(value=None)), If(test=Name(id='m', ctx=Load()), body=[Assign(targets=[Name(id='path_no_extras', ctx=Store())], value=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value=1)], keywords=[])), Assign(targets=[Name(id='extras', ctx=Store())], value=Call(func=Attribute(value=Name(id='m', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value=2)], keywords=[]))], orelse=[Assign(targets=[Name(id='path_no_extras', ctx=Store())], value=Name(id='path', ctx=Load()))]), Return(value=Tuple(elts=[Name(id='path_no_extras', ctx=Load()), Name(id='extras', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='convert_extras', args=arguments(posonlyargs=[], args=[arg(arg='extras', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='extras', ctx=Load())), body=[Return(value=Call(func=Name(id='set', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Attribute(value=Call(func=Name(id='get_requirement', ctx=Load()), args=[BinOp(left=Constant(value='placeholder'), op=Add(), right=Call(func=Attribute(value=Name(id='extras', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]))], keywords=[]), attr='extras', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Set', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='_set_requirement_extras', args=arguments(posonlyargs=[], args=[arg(arg='req', annotation=Name(id='Requirement', ctx=Load())), arg(arg='new_extras', annotation=Subscript(value=Name(id='Set', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Returns a new requirement based on the given one, with the supplied extras. If the\n    given requirement already has extras those are replaced (or dropped if no new extras\n    are given).\n    ')), AnnAssign(target=Name(id='match', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Attribute(value=Name(id='re', ctx=Load()), attr='Match', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load()), value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='fullmatch', ctx=Load()), args=[Constant(value='([\\w\\t .-]+)(\\[[^\\]]*\\])?(.*)'), Call(func=Name(id='str', ctx=Load()), args=[Name(id='req', ctx=Load())], keywords=[])], keywords=[keyword(arg='flags', value=Attribute(value=Name(id='re', ctx=Load()), attr='ASCII', ctx=Load()))]), simple=1), Assert(test=Compare(left=Name(id='match', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), msg=JoinedStr(values=[Constant(value='regex match on requirement '), FormattedValue(value=Name(id='req', ctx=Load()), conversion=-1), Constant(value=' failed, this should never happen')])), AnnAssign(target=Name(id='pre', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value=1)], keywords=[]), simple=1), AnnAssign(target=Name(id='post', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Call(func=Attribute(value=Name(id='match', ctx=Load()), attr='group', ctx=Load()), args=[Constant(value=3)], keywords=[]), simple=1), Assert(test=BoolOp(op=And(), values=[Compare(left=Name(id='pre', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='post', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), msg=JoinedStr(values=[Constant(value='regex group selection for requirement '), FormattedValue(value=Name(id='req', ctx=Load()), conversion=-1), Constant(value=' failed, this should never happen')])), AnnAssign(target=Name(id='extras', ctx=Store()), annotation=Name(id='str', ctx=Load()), value=IfExp(test=Name(id='new_extras', ctx=Load()), body=BinOp(left=Constant(value='[%s]'), op=Mod(), right=Call(func=Attribute(value=Constant(value=','), attr='join', ctx=Load()), args=[Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='new_extras', ctx=Load())], keywords=[])], keywords=[])), orelse=Constant(value='')), simple=1), Return(value=Call(func=Name(id='Requirement', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='pre', ctx=Load()), conversion=-1), FormattedValue(value=Name(id='extras', ctx=Load()), conversion=-1), FormattedValue(value=Name(id='post', ctx=Load()), conversion=-1)])], keywords=[]))], decorator_list=[], returns=Name(id='Requirement', ctx=Load())), FunctionDef(name='parse_editable', args=arguments(posonlyargs=[], args=[arg(arg='editable_req', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Parses an editable requirement into:\n        - a requirement name\n        - an URL\n        - extras\n        - editable options\n    Accepted requirements:\n        svn+http://blahblah@rev#egg=Foobar[baz]&subdirectory=version_subdir\n        .[some_extra]\n    ')), Assign(targets=[Name(id='url', ctx=Store())], value=Name(id='editable_req', ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='url_no_extras', ctx=Store()), Name(id='extras', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_strip_extras', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isdir', ctx=Load()), args=[Name(id='url_no_extras', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='url_no_extras', ctx=Store())], value=Call(func=Name(id='path_to_url', ctx=Load()), args=[Name(id='url_no_extras', ctx=Load())], keywords=[]))], orelse=[]), If(test=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='url_no_extras', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), attr='startswith', ctx=Load()), args=[Constant(value='file:')], keywords=[]), body=[Assign(targets=[Name(id='package_name', ctx=Store())], value=Attribute(value=Call(func=Name(id='Link', ctx=Load()), args=[Name(id='url_no_extras', ctx=Load())], keywords=[]), attr='egg_fragment', ctx=Load())), If(test=Name(id='extras', ctx=Load()), body=[Return(value=Tuple(elts=[Name(id='package_name', ctx=Load()), Name(id='url_no_extras', ctx=Load()), Attribute(value=Call(func=Name(id='get_requirement', ctx=Load()), args=[BinOp(left=Constant(value='placeholder'), op=Add(), right=Call(func=Attribute(value=Name(id='extras', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]))], keywords=[]), attr='extras', ctx=Load())], ctx=Load()))], orelse=[Return(value=Tuple(elts=[Name(id='package_name', ctx=Load()), Name(id='url_no_extras', ctx=Load()), Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])], ctx=Load()))])], orelse=[]), For(target=Name(id='version_control', ctx=Store()), iter=Name(id='vcs', ctx=Load()), body=[If(test=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='url', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), attr='startswith', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='version_control', ctx=Load()), conversion=-1), Constant(value=':')])], keywords=[]), body=[Assign(targets=[Name(id='url', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='version_control', ctx=Load()), conversion=-1), Constant(value='+'), FormattedValue(value=Name(id='url', ctx=Load()), conversion=-1)])), Break()], orelse=[])], orelse=[]), Assign(targets=[Name(id='link', ctx=Store())], value=Call(func=Name(id='Link', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='link', ctx=Load()), attr='is_vcs', ctx=Load())), body=[Assign(targets=[Name(id='backends', ctx=Store())], value=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Attribute(value=Name(id='vcs', ctx=Load()), attr='all_schemes', ctx=Load())], keywords=[])), Raise(exc=Call(func=Name(id='InstallationError', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='editable_req', ctx=Load()), conversion=-1), Constant(value=' is not a valid editable requirement. It should either be a path to a local project or a VCS URL (beginning with '), FormattedValue(value=Name(id='backends', ctx=Load()), conversion=-1), Constant(value=').')])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='package_name', ctx=Store())], value=Attribute(value=Name(id='link', ctx=Load()), attr='egg_fragment', ctx=Load())), If(test=UnaryOp(op=Not(), operand=Name(id='package_name', ctx=Load())), body=[Raise(exc=Call(func=Name(id='InstallationError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value="Could not detect requirement name for '{}', please specify one with #egg=your_package_name"), attr='format', ctx=Load()), args=[Name(id='editable_req', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Return(value=Tuple(elts=[Name(id='package_name', ctx=Load()), Name(id='url', ctx=Load()), Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), Name(id='str', ctx=Load()), Subscript(value=Name(id='Set', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='check_first_requirement_in_file', args=arguments(posonlyargs=[], args=[arg(arg='filename', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check if file is parsable as a requirements file.\n\n    This is heavily based on ``pkg_resources.parse_requirements``, but\n    simplified to just check the first meaningful line.\n\n    :raises InvalidRequirement: If the first meaningful line cannot be parsed\n        as an requirement.\n    ')), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[keyword(arg='encoding', value=Constant(value='utf-8')), keyword(arg='errors', value=Constant(value='ignore'))]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='lines', ctx=Store())], value=GeneratorExp(elt=Name(id='line', ctx=Load()), generators=[comprehension(target=Name(id='line', ctx=Store()), iter=GeneratorExp(elt=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]), generators=[comprehension(target=Name(id='line', ctx=Store()), iter=Name(id='f', ctx=Load()), ifs=[], is_async=0)]), ifs=[BoolOp(op=And(), values=[Name(id='line', ctx=Load()), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='#')], keywords=[]))])], is_async=0)])), For(target=Name(id='line', ctx=Store()), iter=Name(id='lines', ctx=Load()), body=[If(test=Compare(left=Constant(value=' #'), ops=[In()], comparators=[Name(id='line', ctx=Load())]), body=[Assign(targets=[Name(id='line', ctx=Store())], value=Subscript(value=Name(id='line', ctx=Load()), slice=Slice(upper=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='find', ctx=Load()), args=[Constant(value=' #')], keywords=[])), ctx=Load()))], orelse=[]), If(test=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='\\')], keywords=[]), body=[Assign(targets=[Name(id='line', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Subscript(value=Name(id='line', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=2))), ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[]), op=Add(), right=Call(func=Name(id='next', ctx=Load()), args=[Name(id='lines', ctx=Load()), Constant(value='')], keywords=[])))], orelse=[]), Expr(value=Call(func=Name(id='Requirement', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[])), Return()], orelse=[])])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='deduce_helpful_msg', args=arguments(posonlyargs=[], args=[arg(arg='req', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Returns helpful msg in case requirements file does not exist,\n    or cannot be parsed.\n\n    :params req: Requirements file path\n    ')), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='req', ctx=Load())], keywords=[])), body=[Return(value=JoinedStr(values=[Constant(value=" File '"), FormattedValue(value=Name(id='req', ctx=Load()), conversion=-1), Constant(value="' does not exist.")]))], orelse=[]), Assign(targets=[Name(id='msg', ctx=Store())], value=Constant(value=' The path does exist. ')), Try(body=[Expr(value=Call(func=Name(id='check_first_requirement_in_file', ctx=Load()), args=[Name(id='req', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='InvalidRequirement', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value="Cannot parse '%s' as requirements file"), Name(id='req', ctx=Load())], keywords=[]))])], orelse=[AugAssign(target=Name(id='msg', ctx=Store()), op=Add(), value=JoinedStr(values=[Constant(value='The argument you provided ('), FormattedValue(value=Name(id='req', ctx=Load()), conversion=-1), Constant(value=") appears to be a requirements file. If that is the case, use the '-r' flag to install the packages specified within it.")]))], finalbody=[]), Return(value=Name(id='msg', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), ClassDef(name='RequirementParts', bases=[], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='requirement', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Requirement', ctx=Load()), ctx=Load())), arg(arg='link', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Link', ctx=Load()), ctx=Load())), arg(arg='markers', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Marker', ctx=Load()), ctx=Load())), arg(arg='extras', annotation=Subscript(value=Name(id='Set', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='requirement', ctx=Store())], value=Name(id='requirement', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='link', ctx=Store())], value=Name(id='link', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='markers', ctx=Store())], value=Name(id='markers', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='extras', ctx=Store())], value=Name(id='extras', ctx=Load()))], decorator_list=[])], decorator_list=[]), FunctionDef(name='parse_req_from_editable', args=arguments(posonlyargs=[], args=[arg(arg='editable_req', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='name', ctx=Store()), Name(id='url', ctx=Store()), Name(id='extras_override', ctx=Store())], ctx=Store())], value=Call(func=Name(id='parse_editable', ctx=Load()), args=[Name(id='editable_req', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='name', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Try(body=[AnnAssign(target=Name(id='req', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Requirement', ctx=Load()), ctx=Load()), value=Call(func=Name(id='Requirement', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]), simple=1)], handlers=[ExceptHandler(type=Name(id='InvalidRequirement', ctx=Load()), body=[Raise(exc=Call(func=Name(id='InstallationError', ctx=Load()), args=[JoinedStr(values=[Constant(value="Invalid requirement: '"), FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1), Constant(value="'")])], keywords=[]))])], orelse=[], finalbody=[])], orelse=[Assign(targets=[Name(id='req', ctx=Store())], value=Constant(value=None))]), Assign(targets=[Name(id='link', ctx=Store())], value=Call(func=Name(id='Link', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='RequirementParts', ctx=Load()), args=[Name(id='req', ctx=Load()), Name(id='link', ctx=Load()), Constant(value=None), Name(id='extras_override', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='RequirementParts', ctx=Load())), FunctionDef(name='install_req_from_editable', args=arguments(posonlyargs=[], args=[arg(arg='editable_req', annotation=Name(id='str', ctx=Load())), arg(arg='comes_from', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='InstallRequirement', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[arg(arg='use_pep517', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load())), arg(arg='isolated', annotation=Name(id='bool', ctx=Load())), arg(arg='global_options', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='hash_options', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='constraint', annotation=Name(id='bool', ctx=Load())), arg(arg='user_supplied', annotation=Name(id='bool', ctx=Load())), arg(arg='permit_editable_wheels', annotation=Name(id='bool', ctx=Load())), arg(arg='config_settings', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kw_defaults=[Constant(value=None), Constant(value=False), Constant(value=None), Constant(value=None), Constant(value=False), Constant(value=False), Constant(value=False), Constant(value=None)], defaults=[Constant(value=None)]), body=[Assign(targets=[Name(id='parts', ctx=Store())], value=Call(func=Name(id='parse_req_from_editable', ctx=Load()), args=[Name(id='editable_req', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='InstallRequirement', ctx=Load()), args=[Attribute(value=Name(id='parts', ctx=Load()), attr='requirement', ctx=Load())], keywords=[keyword(arg='comes_from', value=Name(id='comes_from', ctx=Load())), keyword(arg='user_supplied', value=Name(id='user_supplied', ctx=Load())), keyword(arg='editable', value=Constant(value=True)), keyword(arg='permit_editable_wheels', value=Name(id='permit_editable_wheels', ctx=Load())), keyword(arg='link', value=Attribute(value=Name(id='parts', ctx=Load()), attr='link', ctx=Load())), keyword(arg='constraint', value=Name(id='constraint', ctx=Load())), keyword(arg='use_pep517', value=Name(id='use_pep517', ctx=Load())), keyword(arg='isolated', value=Name(id='isolated', ctx=Load())), keyword(arg='global_options', value=Name(id='global_options', ctx=Load())), keyword(arg='hash_options', value=Name(id='hash_options', ctx=Load())), keyword(arg='config_settings', value=Name(id='config_settings', ctx=Load())), keyword(arg='extras', value=Attribute(value=Name(id='parts', ctx=Load()), attr='extras', ctx=Load()))]))], decorator_list=[], returns=Name(id='InstallRequirement', ctx=Load())), FunctionDef(name='_looks_like_path', args=arguments(posonlyargs=[], args=[arg(arg='name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Checks whether the string "looks like" a path on the filesystem.\n\n    This does not check whether the target actually exists, only judge from the\n    appearance.\n\n    Returns true if any of the following conditions is true:\n    * a path separator is found (either os.path.sep or os.path.altsep);\n    * a dot is found (which represents the current directory).\n    ')), If(test=Compare(left=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='sep', ctx=Load()), ops=[In()], comparators=[Name(id='name', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='altsep', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='altsep', ctx=Load()), ops=[In()], comparators=[Name(id='name', ctx=Load())])]), body=[Return(value=Constant(value=True))], orelse=[]), If(test=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='.')], keywords=[]), body=[Return(value=Constant(value=True))], orelse=[]), Return(value=Constant(value=False))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='_get_url_from_path', args=arguments(posonlyargs=[], args=[arg(arg='path', annotation=Name(id='str', ctx=Load())), arg(arg='name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    First, it checks whether a provided path is an installable directory. If it\n    is, returns the path.\n\n    If false, check if the path is an archive file (such as a .whl).\n    The function checks if the path is a file. If false, if the path has\n    an @, it will treat it as a PEP 440 URL requirement and return the path.\n    ')), If(test=BoolOp(op=And(), values=[Call(func=Name(id='_looks_like_path', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isdir', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])]), body=[If(test=Call(func=Name(id='is_installable_dir', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Name(id='path_to_url', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))], orelse=[]), Raise(exc=Call(func=Name(id='InstallationError', ctx=Load()), args=[JoinedStr(values=[Constant(value='Directory '), FormattedValue(value=Name(id='name', ctx=Load()), conversion=114), Constant(value=" is not installable. Neither 'setup.py' nor 'pyproject.toml' found.")])], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='is_archive_file', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), body=[Return(value=Constant(value=None))], orelse=[]), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isfile', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Name(id='path_to_url', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='urlreq_parts', ctx=Store())], value=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='@'), Constant(value=1)], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='urlreq_parts', ctx=Load())], keywords=[]), ops=[GtE()], comparators=[Constant(value=2)]), UnaryOp(op=Not(), operand=Call(func=Name(id='_looks_like_path', ctx=Load()), args=[Subscript(value=Name(id='urlreq_parts', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]))]), body=[Return(value=Constant(value=None))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='Requirement %r looks like a filename, but the file does not exist'), Name(id='name', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='path_to_url', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='parse_req_from_line', args=arguments(posonlyargs=[], args=[arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='line_source', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='is_url', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='marker_sep', ctx=Store())], value=Constant(value='; '))], orelse=[Assign(targets=[Name(id='marker_sep', ctx=Store())], value=Constant(value=';'))]), If(test=Compare(left=Name(id='marker_sep', ctx=Load()), ops=[In()], comparators=[Name(id='name', ctx=Load())]), body=[Assign(targets=[Tuple(elts=[Name(id='name', ctx=Store()), Name(id='markers_as_string', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='split', ctx=Load()), args=[Name(id='marker_sep', ctx=Load()), Constant(value=1)], keywords=[])), Assign(targets=[Name(id='markers_as_string', ctx=Store())], value=Call(func=Attribute(value=Name(id='markers_as_string', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='markers_as_string', ctx=Load())), body=[Assign(targets=[Name(id='markers', ctx=Store())], value=Constant(value=None))], orelse=[Assign(targets=[Name(id='markers', ctx=Store())], value=Call(func=Name(id='Marker', ctx=Load()), args=[Name(id='markers_as_string', ctx=Load())], keywords=[]))])], orelse=[Assign(targets=[Name(id='markers', ctx=Store())], value=Constant(value=None))]), Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='req_as_string', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normpath', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='link', ctx=Store())], value=Constant(value=None)), Assign(targets=[Name(id='extras_as_string', ctx=Store())], value=Constant(value=None)), If(test=Call(func=Name(id='is_url', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='link', ctx=Store())], value=Call(func=Name(id='Link', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Tuple(elts=[Name(id='p', ctx=Store()), Name(id='extras_as_string', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_strip_extras', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), Assign(targets=[Name(id='url', ctx=Store())], value=Call(func=Name(id='_get_url_from_path', ctx=Load()), args=[Name(id='p', ctx=Load()), Name(id='name', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='url', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='link', ctx=Store())], value=Call(func=Name(id='Link', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[]))], orelse=[])]), If(test=Name(id='link', ctx=Load()), body=[If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='link', ctx=Load()), attr='scheme', ctx=Load()), ops=[Eq()], comparators=[Constant(value='file')]), Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='search', ctx=Load()), args=[Constant(value='\\.\\./'), Attribute(value=Name(id='link', ctx=Load()), attr='url', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='link', ctx=Store())], value=Call(func=Name(id='Link', ctx=Load()), args=[Call(func=Name(id='path_to_url', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normpath', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Attribute(value=Name(id='link', ctx=Load()), attr='path', ctx=Load())], keywords=[])], keywords=[])], keywords=[])], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='link', ctx=Load()), attr='is_wheel', ctx=Load()), body=[Assign(targets=[Name(id='wheel', ctx=Store())], value=Call(func=Name(id='Wheel', ctx=Load()), args=[Attribute(value=Name(id='link', ctx=Load()), attr='filename', ctx=Load())], keywords=[])), Assign(targets=[Name(id='req_as_string', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='wheel', ctx=Load()), attr='name', ctx=Load()), conversion=-1), Constant(value='=='), FormattedValue(value=Attribute(value=Name(id='wheel', ctx=Load()), attr='version', ctx=Load()), conversion=-1)]))], orelse=[Assign(targets=[Name(id='req_as_string', ctx=Store())], value=Attribute(value=Name(id='link', ctx=Load()), attr='egg_fragment', ctx=Load()))])], orelse=[Assign(targets=[Name(id='req_as_string', ctx=Store())], value=Name(id='name', ctx=Load()))]), Assign(targets=[Name(id='extras', ctx=Store())], value=Call(func=Name(id='convert_extras', ctx=Load()), args=[Name(id='extras_as_string', ctx=Load())], keywords=[])), FunctionDef(name='with_source', args=arguments(posonlyargs=[], args=[arg(arg='text', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='line_source', ctx=Load())), body=[Return(value=Name(id='text', ctx=Load()))], orelse=[]), Return(value=JoinedStr(values=[FormattedValue(value=Name(id='text', ctx=Load()), conversion=-1), Constant(value=' (from '), FormattedValue(value=Name(id='line_source', ctx=Load()), conversion=-1), Constant(value=')')]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='_parse_req_string', args=arguments(posonlyargs=[], args=[arg(arg='req_as_string', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Name(id='req', ctx=Store())], value=Call(func=Name(id='get_requirement', ctx=Load()), args=[Name(id='req_as_string', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='InvalidRequirement', ctx=Load()), body=[If(test=Compare(left=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='sep', ctx=Load()), ops=[In()], comparators=[Name(id='req_as_string', ctx=Load())]), body=[Assign(targets=[Name(id='add_msg', ctx=Store())], value=Constant(value='It looks like a path.')), AugAssign(target=Name(id='add_msg', ctx=Store()), op=Add(), value=Call(func=Name(id='deduce_helpful_msg', ctx=Load()), args=[Name(id='req_as_string', ctx=Load())], keywords=[]))], orelse=[If(test=BoolOp(op=And(), values=[Compare(left=Constant(value='='), ops=[In()], comparators=[Name(id='req_as_string', ctx=Load())]), UnaryOp(op=Not(), operand=Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=Compare(left=Name(id='op', ctx=Load()), ops=[In()], comparators=[Name(id='req_as_string', ctx=Load())]), generators=[comprehension(target=Name(id='op', ctx=Store()), iter=Name(id='operators', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))]), body=[Assign(targets=[Name(id='add_msg', ctx=Store())], value=Constant(value='= is not a valid operator. Did you mean == ?'))], orelse=[Assign(targets=[Name(id='add_msg', ctx=Store())], value=Constant(value=''))])]), Assign(targets=[Name(id='msg', ctx=Store())], value=Call(func=Name(id='with_source', ctx=Load()), args=[JoinedStr(values=[Constant(value='Invalid requirement: '), FormattedValue(value=Name(id='req_as_string', ctx=Load()), conversion=114)])], keywords=[])), If(test=Name(id='add_msg', ctx=Load()), body=[AugAssign(target=Name(id='msg', ctx=Store()), op=Add(), value=JoinedStr(values=[Constant(value='\nHint: '), FormattedValue(value=Name(id='add_msg', ctx=Load()), conversion=-1)]))], orelse=[]), Raise(exc=Call(func=Name(id='InstallationError', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))])], orelse=[For(target=Name(id='spec', ctx=Store()), iter=Attribute(value=Name(id='req', ctx=Load()), attr='specifier', ctx=Load()), body=[Assign(targets=[Name(id='spec_str', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='spec', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Name(id='spec_str', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value=']')], keywords=[]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=JoinedStr(values=[Constant(value="Extras after version '"), FormattedValue(value=Name(id='spec_str', ctx=Load()), conversion=-1), Constant(value="'.")])), Raise(exc=Call(func=Name(id='InstallationError', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], finalbody=[]), Return(value=Name(id='req', ctx=Load()))], decorator_list=[], returns=Name(id='Requirement', ctx=Load())), If(test=Compare(left=Name(id='req_as_string', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[AnnAssign(target=Name(id='req', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Requirement', ctx=Load()), ctx=Load()), value=Call(func=Name(id='_parse_req_string', ctx=Load()), args=[Name(id='req_as_string', ctx=Load())], keywords=[]), simple=1)], orelse=[Assign(targets=[Name(id='req', ctx=Store())], value=Constant(value=None))]), Return(value=Call(func=Name(id='RequirementParts', ctx=Load()), args=[Name(id='req', ctx=Load()), Name(id='link', ctx=Load()), Name(id='markers', ctx=Load()), Name(id='extras', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='RequirementParts', ctx=Load())), FunctionDef(name='install_req_from_line', args=arguments(posonlyargs=[], args=[arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='comes_from', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='InstallRequirement', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[arg(arg='use_pep517', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load())), arg(arg='isolated', annotation=Name(id='bool', ctx=Load())), arg(arg='global_options', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='hash_options', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='constraint', annotation=Name(id='bool', ctx=Load())), arg(arg='line_source', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='user_supplied', annotation=Name(id='bool', ctx=Load())), arg(arg='config_settings', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kw_defaults=[Constant(value=None), Constant(value=False), Constant(value=None), Constant(value=None), Constant(value=False), Constant(value=None), Constant(value=False), Constant(value=None)], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value="Creates an InstallRequirement from a name, which might be a\n    requirement, directory containing 'setup.py', filename, or URL.\n\n    :param line_source: An optional string describing where the line is from,\n        for logging purposes in case of an error.\n    ")), Assign(targets=[Name(id='parts', ctx=Store())], value=Call(func=Name(id='parse_req_from_line', ctx=Load()), args=[Name(id='name', ctx=Load()), Name(id='line_source', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='InstallRequirement', ctx=Load()), args=[Attribute(value=Name(id='parts', ctx=Load()), attr='requirement', ctx=Load()), Name(id='comes_from', ctx=Load())], keywords=[keyword(arg='link', value=Attribute(value=Name(id='parts', ctx=Load()), attr='link', ctx=Load())), keyword(arg='markers', value=Attribute(value=Name(id='parts', ctx=Load()), attr='markers', ctx=Load())), keyword(arg='use_pep517', value=Name(id='use_pep517', ctx=Load())), keyword(arg='isolated', value=Name(id='isolated', ctx=Load())), keyword(arg='global_options', value=Name(id='global_options', ctx=Load())), keyword(arg='hash_options', value=Name(id='hash_options', ctx=Load())), keyword(arg='config_settings', value=Name(id='config_settings', ctx=Load())), keyword(arg='constraint', value=Name(id='constraint', ctx=Load())), keyword(arg='extras', value=Attribute(value=Name(id='parts', ctx=Load()), attr='extras', ctx=Load())), keyword(arg='user_supplied', value=Name(id='user_supplied', ctx=Load()))]))], decorator_list=[], returns=Name(id='InstallRequirement', ctx=Load())), FunctionDef(name='install_req_from_req_string', args=arguments(posonlyargs=[], args=[arg(arg='req_string', annotation=Name(id='str', ctx=Load())), arg(arg='comes_from', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='InstallRequirement', ctx=Load()), ctx=Load())), arg(arg='isolated', annotation=Name(id='bool', ctx=Load())), arg(arg='use_pep517', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load())), arg(arg='user_supplied', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=False), Constant(value=None), Constant(value=False)]), body=[Try(body=[Assign(targets=[Name(id='req', ctx=Store())], value=Call(func=Name(id='get_requirement', ctx=Load()), args=[Name(id='req_string', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='InvalidRequirement', ctx=Load()), body=[Raise(exc=Call(func=Name(id='InstallationError', ctx=Load()), args=[JoinedStr(values=[Constant(value="Invalid requirement: '"), FormattedValue(value=Name(id='req_string', ctx=Load()), conversion=-1), Constant(value="'")])], keywords=[]))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='domains_not_allowed', ctx=Store())], value=List(elts=[Attribute(value=Name(id='PyPI', ctx=Load()), attr='file_storage_domain', ctx=Load()), Attribute(value=Name(id='TestPyPI', ctx=Load()), attr='file_storage_domain', ctx=Load())], ctx=Load())), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='req', ctx=Load()), attr='url', ctx=Load()), Name(id='comes_from', ctx=Load()), Attribute(value=Name(id='comes_from', ctx=Load()), attr='link', ctx=Load()), Compare(left=Attribute(value=Attribute(value=Name(id='comes_from', ctx=Load()), attr='link', ctx=Load()), attr='netloc', ctx=Load()), ops=[In()], comparators=[Name(id='domains_not_allowed', ctx=Load())])]), body=[Raise(exc=Call(func=Name(id='InstallationError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Packages installed from PyPI cannot depend on packages which are not also hosted on PyPI.\n{} depends on {} '), attr='format', ctx=Load()), args=[Attribute(value=Name(id='comes_from', ctx=Load()), attr='name', ctx=Load()), Name(id='req', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='InstallRequirement', ctx=Load()), args=[Name(id='req', ctx=Load()), Name(id='comes_from', ctx=Load())], keywords=[keyword(arg='isolated', value=Name(id='isolated', ctx=Load())), keyword(arg='use_pep517', value=Name(id='use_pep517', ctx=Load())), keyword(arg='user_supplied', value=Name(id='user_supplied', ctx=Load()))]))], decorator_list=[], returns=Name(id='InstallRequirement', ctx=Load())), FunctionDef(name='install_req_from_parsed_requirement', args=arguments(posonlyargs=[], args=[arg(arg='parsed_req', annotation=Name(id='ParsedRequirement', ctx=Load())), arg(arg='isolated', annotation=Name(id='bool', ctx=Load())), arg(arg='use_pep517', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load())), arg(arg='user_supplied', annotation=Name(id='bool', ctx=Load())), arg(arg='config_settings', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Constant(value=None), Constant(value=False), Constant(value=None)]), body=[If(test=Attribute(value=Name(id='parsed_req', ctx=Load()), attr='is_editable', ctx=Load()), body=[Assign(targets=[Name(id='req', ctx=Store())], value=Call(func=Name(id='install_req_from_editable', ctx=Load()), args=[Attribute(value=Name(id='parsed_req', ctx=Load()), attr='requirement', ctx=Load())], keywords=[keyword(arg='comes_from', value=Attribute(value=Name(id='parsed_req', ctx=Load()), attr='comes_from', ctx=Load())), keyword(arg='use_pep517', value=Name(id='use_pep517', ctx=Load())), keyword(arg='constraint', value=Attribute(value=Name(id='parsed_req', ctx=Load()), attr='constraint', ctx=Load())), keyword(arg='isolated', value=Name(id='isolated', ctx=Load())), keyword(arg='user_supplied', value=Name(id='user_supplied', ctx=Load())), keyword(arg='config_settings', value=Name(id='config_settings', ctx=Load()))]))], orelse=[Assign(targets=[Name(id='req', ctx=Store())], value=Call(func=Name(id='install_req_from_line', ctx=Load()), args=[Attribute(value=Name(id='parsed_req', ctx=Load()), attr='requirement', ctx=Load())], keywords=[keyword(arg='comes_from', value=Attribute(value=Name(id='parsed_req', ctx=Load()), attr='comes_from', ctx=Load())), keyword(arg='use_pep517', value=Name(id='use_pep517', ctx=Load())), keyword(arg='isolated', value=Name(id='isolated', ctx=Load())), keyword(arg='global_options', value=IfExp(test=Attribute(value=Name(id='parsed_req', ctx=Load()), attr='options', ctx=Load()), body=Call(func=Attribute(value=Attribute(value=Name(id='parsed_req', ctx=Load()), attr='options', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='global_options'), List(elts=[], ctx=Load())], keywords=[]), orelse=List(elts=[], ctx=Load()))), keyword(arg='hash_options', value=IfExp(test=Attribute(value=Name(id='parsed_req', ctx=Load()), attr='options', ctx=Load()), body=Call(func=Attribute(value=Attribute(value=Name(id='parsed_req', ctx=Load()), attr='options', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='hashes'), Dict(keys=[], values=[])], keywords=[]), orelse=Dict(keys=[], values=[]))), keyword(arg='constraint', value=Attribute(value=Name(id='parsed_req', ctx=Load()), attr='constraint', ctx=Load())), keyword(arg='line_source', value=Attribute(value=Name(id='parsed_req', ctx=Load()), attr='line_source', ctx=Load())), keyword(arg='user_supplied', value=Name(id='user_supplied', ctx=Load())), keyword(arg='config_settings', value=Name(id='config_settings', ctx=Load()))]))]), Return(value=Name(id='req', ctx=Load()))], decorator_list=[], returns=Name(id='InstallRequirement', ctx=Load())), FunctionDef(name='install_req_from_link_and_ireq', args=arguments(posonlyargs=[], args=[arg(arg='link', annotation=Name(id='Link', ctx=Load())), arg(arg='ireq', annotation=Name(id='InstallRequirement', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='InstallRequirement', ctx=Load()), args=[], keywords=[keyword(arg='req', value=Attribute(value=Name(id='ireq', ctx=Load()), attr='req', ctx=Load())), keyword(arg='comes_from', value=Attribute(value=Name(id='ireq', ctx=Load()), attr='comes_from', ctx=Load())), keyword(arg='editable', value=Attribute(value=Name(id='ireq', ctx=Load()), attr='editable', ctx=Load())), keyword(arg='link', value=Name(id='link', ctx=Load())), keyword(arg='markers', value=Attribute(value=Name(id='ireq', ctx=Load()), attr='markers', ctx=Load())), keyword(arg='use_pep517', value=Attribute(value=Name(id='ireq', ctx=Load()), attr='use_pep517', ctx=Load())), keyword(arg='isolated', value=Attribute(value=Name(id='ireq', ctx=Load()), attr='isolated', ctx=Load())), keyword(arg='global_options', value=Attribute(value=Name(id='ireq', ctx=Load()), attr='global_options', ctx=Load())), keyword(arg='hash_options', value=Attribute(value=Name(id='ireq', ctx=Load()), attr='hash_options', ctx=Load())), keyword(arg='config_settings', value=Attribute(value=Name(id='ireq', ctx=Load()), attr='config_settings', ctx=Load())), keyword(arg='user_supplied', value=Attribute(value=Name(id='ireq', ctx=Load()), attr='user_supplied', ctx=Load()))]))], decorator_list=[], returns=Name(id='InstallRequirement', ctx=Load())), FunctionDef(name='install_req_drop_extras', args=arguments(posonlyargs=[], args=[arg(arg='ireq', annotation=Name(id='InstallRequirement', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    Creates a new InstallationRequirement using the given template but without\n    any extras. Sets the original requirement as the new one's parent\n    (comes_from).\n    ")), Return(value=Call(func=Name(id='InstallRequirement', ctx=Load()), args=[], keywords=[keyword(arg='req', value=IfExp(test=Compare(left=Attribute(value=Name(id='ireq', ctx=Load()), attr='req', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Call(func=Name(id='_set_requirement_extras', ctx=Load()), args=[Attribute(value=Name(id='ireq', ctx=Load()), attr='req', ctx=Load()), Call(func=Name(id='set', ctx=Load()), args=[], keywords=[])], keywords=[]), orelse=Constant(value=None))), keyword(arg='comes_from', value=Name(id='ireq', ctx=Load())), keyword(arg='editable', value=Attribute(value=Name(id='ireq', ctx=Load()), attr='editable', ctx=Load())), keyword(arg='link', value=Attribute(value=Name(id='ireq', ctx=Load()), attr='link', ctx=Load())), keyword(arg='markers', value=Attribute(value=Name(id='ireq', ctx=Load()), attr='markers', ctx=Load())), keyword(arg='use_pep517', value=Attribute(value=Name(id='ireq', ctx=Load()), attr='use_pep517', ctx=Load())), keyword(arg='isolated', value=Attribute(value=Name(id='ireq', ctx=Load()), attr='isolated', ctx=Load())), keyword(arg='global_options', value=Attribute(value=Name(id='ireq', ctx=Load()), attr='global_options', ctx=Load())), keyword(arg='hash_options', value=Attribute(value=Name(id='ireq', ctx=Load()), attr='hash_options', ctx=Load())), keyword(arg='constraint', value=Attribute(value=Name(id='ireq', ctx=Load()), attr='constraint', ctx=Load())), keyword(arg='extras', value=List(elts=[], ctx=Load())), keyword(arg='config_settings', value=Attribute(value=Name(id='ireq', ctx=Load()), attr='config_settings', ctx=Load())), keyword(arg='user_supplied', value=Attribute(value=Name(id='ireq', ctx=Load()), attr='user_supplied', ctx=Load())), keyword(arg='permit_editable_wheels', value=Attribute(value=Name(id='ireq', ctx=Load()), attr='permit_editable_wheels', ctx=Load()))]))], decorator_list=[], returns=Name(id='InstallRequirement', ctx=Load())), FunctionDef(name='install_req_extend_extras', args=arguments(posonlyargs=[], args=[arg(arg='ireq', annotation=Name(id='InstallRequirement', ctx=Load())), arg(arg='extras', annotation=Subscript(value=Name(id='Collection', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Returns a copy of an installation requirement with some additional extras.\n    Makes a shallow copy of the ireq object.\n    ')), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='copy', ctx=Load()), attr='copy', ctx=Load()), args=[Name(id='ireq', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='extras', ctx=Store())], value=Set(elts=[Starred(value=Attribute(value=Name(id='ireq', ctx=Load()), attr='extras', ctx=Load()), ctx=Load()), Starred(value=Name(id='extras', ctx=Load()), ctx=Load())])), Assign(targets=[Attribute(value=Name(id='result', ctx=Load()), attr='req', ctx=Store())], value=IfExp(test=Compare(left=Attribute(value=Name(id='ireq', ctx=Load()), attr='req', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Call(func=Name(id='_set_requirement_extras', ctx=Load()), args=[Attribute(value=Name(id='ireq', ctx=Load()), attr='req', ctx=Load()), Attribute(value=Name(id='result', ctx=Load()), attr='extras', ctx=Load())], keywords=[]), orelse=Constant(value=None))), Return(value=Name(id='result', ctx=Load()))], decorator_list=[], returns=Name(id='InstallRequirement', ctx=Load()))], type_ignores=[])