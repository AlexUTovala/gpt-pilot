Module(body=[Expr(value=Constant(value='\nRequirements file parsing\n')), Import(names=[alias(name='logging')]), Import(names=[alias(name='optparse')]), Import(names=[alias(name='os')]), Import(names=[alias(name='re')]), Import(names=[alias(name='shlex')]), Import(names=[alias(name='urllib.parse')]), ImportFrom(module='optparse', names=[alias(name='Values')], level=0), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING'), alias(name='Any'), alias(name='Callable'), alias(name='Dict'), alias(name='Generator'), alias(name='Iterable'), alias(name='List'), alias(name='Optional'), alias(name='Tuple')], level=0), ImportFrom(module='pip._internal.cli', names=[alias(name='cmdoptions')], level=0), ImportFrom(module='pip._internal.exceptions', names=[alias(name='InstallationError'), alias(name='RequirementsFileParseError')], level=0), ImportFrom(module='pip._internal.models.search_scope', names=[alias(name='SearchScope')], level=0), ImportFrom(module='pip._internal.network.session', names=[alias(name='PipSession')], level=0), ImportFrom(module='pip._internal.network.utils', names=[alias(name='raise_for_status')], level=0), ImportFrom(module='pip._internal.utils.encoding', names=[alias(name='auto_decode')], level=0), ImportFrom(module='pip._internal.utils.urls', names=[alias(name='get_url_scheme')], level=0), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='typing', names=[alias(name='NoReturn')], level=0), ImportFrom(module='pip._internal.index.package_finder', names=[alias(name='PackageFinder')], level=0)], orelse=[]), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='parse_requirements')], ctx=Load())), Assign(targets=[Name(id='ReqFileLines', ctx=Store())], value=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), Assign(targets=[Name(id='LineParser', ctx=Store())], value=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='str', ctx=Load())], ctx=Load()), Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Values', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), Assign(targets=[Name(id='SCHEME_RE', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='^(http|https|file):'), Attribute(value=Name(id='re', ctx=Load()), attr='I', ctx=Load())], keywords=[])), Assign(targets=[Name(id='COMMENT_RE', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='(^|\\s+)#.*$')], keywords=[])), Assign(targets=[Name(id='ENV_VAR_RE', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='(?P<var>\\$\\{(?P<name>[A-Z0-9_]+)\\})')], keywords=[])), AnnAssign(target=Name(id='SUPPORTED_OPTIONS', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Attribute(value=Name(id='optparse', ctx=Load()), attr='Option', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), value=List(elts=[Attribute(value=Name(id='cmdoptions', ctx=Load()), attr='index_url', ctx=Load()), Attribute(value=Name(id='cmdoptions', ctx=Load()), attr='extra_index_url', ctx=Load()), Attribute(value=Name(id='cmdoptions', ctx=Load()), attr='no_index', ctx=Load()), Attribute(value=Name(id='cmdoptions', ctx=Load()), attr='constraints', ctx=Load()), Attribute(value=Name(id='cmdoptions', ctx=Load()), attr='requirements', ctx=Load()), Attribute(value=Name(id='cmdoptions', ctx=Load()), attr='editable', ctx=Load()), Attribute(value=Name(id='cmdoptions', ctx=Load()), attr='find_links', ctx=Load()), Attribute(value=Name(id='cmdoptions', ctx=Load()), attr='no_binary', ctx=Load()), Attribute(value=Name(id='cmdoptions', ctx=Load()), attr='only_binary', ctx=Load()), Attribute(value=Name(id='cmdoptions', ctx=Load()), attr='prefer_binary', ctx=Load()), Attribute(value=Name(id='cmdoptions', ctx=Load()), attr='require_hashes', ctx=Load()), Attribute(value=Name(id='cmdoptions', ctx=Load()), attr='pre', ctx=Load()), Attribute(value=Name(id='cmdoptions', ctx=Load()), attr='trusted_host', ctx=Load()), Attribute(value=Name(id='cmdoptions', ctx=Load()), attr='use_new_feature', ctx=Load())], ctx=Load()), simple=1), AnnAssign(target=Name(id='SUPPORTED_OPTIONS_REQ', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Attribute(value=Name(id='optparse', ctx=Load()), attr='Option', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), value=List(elts=[Attribute(value=Name(id='cmdoptions', ctx=Load()), attr='global_options', ctx=Load()), Attribute(value=Name(id='cmdoptions', ctx=Load()), attr='hash', ctx=Load()), Attribute(value=Name(id='cmdoptions', ctx=Load()), attr='config_settings', ctx=Load())], ctx=Load()), simple=1), Assign(targets=[Name(id='SUPPORTED_OPTIONS_REQ_DEST', ctx=Store())], value=ListComp(elt=Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Call(func=Name(id='o', ctx=Load()), args=[], keywords=[]), attr='dest', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='o', ctx=Store()), iter=Name(id='SUPPORTED_OPTIONS_REQ', ctx=Load()), ifs=[], is_async=0)])), Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), ClassDef(name='ParsedRequirement', bases=[], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='requirement', annotation=Name(id='str', ctx=Load())), arg(arg='is_editable', annotation=Name(id='bool', ctx=Load())), arg(arg='comes_from', annotation=Name(id='str', ctx=Load())), arg(arg='constraint', annotation=Name(id='bool', ctx=Load())), arg(arg='options', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='line_source', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='requirement', ctx=Store())], value=Name(id='requirement', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='is_editable', ctx=Store())], value=Name(id='is_editable', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='comes_from', ctx=Store())], value=Name(id='comes_from', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='options', ctx=Store())], value=Name(id='options', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='constraint', ctx=Store())], value=Name(id='constraint', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='line_source', ctx=Store())], value=Name(id='line_source', ctx=Load()))], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='ParsedLine', bases=[], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='filename', annotation=Name(id='str', ctx=Load())), arg(arg='lineno', annotation=Name(id='int', ctx=Load())), arg(arg='args', annotation=Name(id='str', ctx=Load())), arg(arg='opts', annotation=Name(id='Values', ctx=Load())), arg(arg='constraint', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='filename', ctx=Store())], value=Name(id='filename', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='lineno', ctx=Store())], value=Name(id='lineno', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='opts', ctx=Store())], value=Name(id='opts', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='constraint', ctx=Store())], value=Name(id='constraint', ctx=Load())), If(test=Name(id='args', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='is_requirement', ctx=Store())], value=Constant(value=True)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='is_editable', ctx=Store())], value=Constant(value=False)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='requirement', ctx=Store())], value=Name(id='args', ctx=Load()))], orelse=[If(test=Attribute(value=Name(id='opts', ctx=Load()), attr='editables', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='is_requirement', ctx=Store())], value=Constant(value=True)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='is_editable', ctx=Store())], value=Constant(value=True)), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='requirement', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='opts', ctx=Load()), attr='editables', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='is_requirement', ctx=Store())], value=Constant(value=False))])])], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), FunctionDef(name='parse_requirements', args=arguments(posonlyargs=[], args=[arg(arg='filename', annotation=Name(id='str', ctx=Load())), arg(arg='session', annotation=Name(id='PipSession', ctx=Load())), arg(arg='finder', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='PackageFinder'), ctx=Load())), arg(arg='options', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Attribute(value=Name(id='optparse', ctx=Load()), attr='Values', ctx=Load()), ctx=Load())), arg(arg='constraint', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=False)]), body=[Expr(value=Constant(value='Parse a requirements file and yield ParsedRequirement instances.\n\n    :param filename:    Path or url of requirements file.\n    :param session:     PipSession instance.\n    :param finder:      Instance of pip.index.PackageFinder.\n    :param options:     cli options.\n    :param constraint:  If true, parsing a constraint file rather than\n        requirements file.\n    ')), Assign(targets=[Name(id='line_parser', ctx=Store())], value=Call(func=Name(id='get_line_parser', ctx=Load()), args=[Name(id='finder', ctx=Load())], keywords=[])), Assign(targets=[Name(id='parser', ctx=Store())], value=Call(func=Name(id='RequirementsFileParser', ctx=Load()), args=[Name(id='session', ctx=Load()), Name(id='line_parser', ctx=Load())], keywords=[])), For(target=Name(id='parsed_line', ctx=Store()), iter=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='parse', ctx=Load()), args=[Name(id='filename', ctx=Load()), Name(id='constraint', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='parsed_req', ctx=Store())], value=Call(func=Name(id='handle_line', ctx=Load()), args=[Name(id='parsed_line', ctx=Load())], keywords=[keyword(arg='options', value=Name(id='options', ctx=Load())), keyword(arg='finder', value=Name(id='finder', ctx=Load())), keyword(arg='session', value=Name(id='session', ctx=Load()))])), If(test=Compare(left=Name(id='parsed_req', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Yield(value=Name(id='parsed_req', ctx=Load())))], orelse=[])], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Name(id='ParsedRequirement', ctx=Load()), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='preprocess', args=arguments(posonlyargs=[], args=[arg(arg='content', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Split, filter, and join lines, and return a line iterator\n\n    :param content: the content of the requirements file\n    ')), AnnAssign(target=Name(id='lines_enum', ctx=Store()), annotation=Name(id='ReqFileLines', ctx=Load()), value=Call(func=Name(id='enumerate', ctx=Load()), args=[Call(func=Attribute(value=Name(id='content', ctx=Load()), attr='splitlines', ctx=Load()), args=[], keywords=[])], keywords=[keyword(arg='start', value=Constant(value=1))]), simple=1), Assign(targets=[Name(id='lines_enum', ctx=Store())], value=Call(func=Name(id='join_lines', ctx=Load()), args=[Name(id='lines_enum', ctx=Load())], keywords=[])), Assign(targets=[Name(id='lines_enum', ctx=Store())], value=Call(func=Name(id='ignore_comments', ctx=Load()), args=[Name(id='lines_enum', ctx=Load())], keywords=[])), Assign(targets=[Name(id='lines_enum', ctx=Store())], value=Call(func=Name(id='expand_env_variables', ctx=Load()), args=[Name(id='lines_enum', ctx=Load())], keywords=[])), Return(value=Name(id='lines_enum', ctx=Load()))], decorator_list=[], returns=Name(id='ReqFileLines', ctx=Load())), FunctionDef(name='handle_requirement_line', args=arguments(posonlyargs=[], args=[arg(arg='line', annotation=Name(id='ParsedLine', ctx=Load())), arg(arg='options', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Attribute(value=Name(id='optparse', ctx=Load()), attr='Values', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Assign(targets=[Name(id='line_comes_from', ctx=Store())], value=Call(func=Attribute(value=Constant(value='{} {} (line {})'), attr='format', ctx=Load()), args=[IfExp(test=Attribute(value=Name(id='line', ctx=Load()), attr='constraint', ctx=Load()), body=Constant(value='-c'), orelse=Constant(value='-r')), Attribute(value=Name(id='line', ctx=Load()), attr='filename', ctx=Load()), Attribute(value=Name(id='line', ctx=Load()), attr='lineno', ctx=Load())], keywords=[])), Assert(test=Attribute(value=Name(id='line', ctx=Load()), attr='is_requirement', ctx=Load())), If(test=Attribute(value=Name(id='line', ctx=Load()), attr='is_editable', ctx=Load()), body=[Return(value=Call(func=Name(id='ParsedRequirement', ctx=Load()), args=[], keywords=[keyword(arg='requirement', value=Attribute(value=Name(id='line', ctx=Load()), attr='requirement', ctx=Load())), keyword(arg='is_editable', value=Attribute(value=Name(id='line', ctx=Load()), attr='is_editable', ctx=Load())), keyword(arg='comes_from', value=Name(id='line_comes_from', ctx=Load())), keyword(arg='constraint', value=Attribute(value=Name(id='line', ctx=Load()), attr='constraint', ctx=Load()))]))], orelse=[Assign(targets=[Name(id='req_options', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='dest', ctx=Store()), iter=Name(id='SUPPORTED_OPTIONS_REQ_DEST', ctx=Load()), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='dest', ctx=Load()), ops=[In()], comparators=[Attribute(value=Attribute(value=Name(id='line', ctx=Load()), attr='opts', ctx=Load()), attr='__dict__', ctx=Load())]), Subscript(value=Attribute(value=Attribute(value=Name(id='line', ctx=Load()), attr='opts', ctx=Load()), attr='__dict__', ctx=Load()), slice=Name(id='dest', ctx=Load()), ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='req_options', ctx=Load()), slice=Name(id='dest', ctx=Load()), ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='line', ctx=Load()), attr='opts', ctx=Load()), attr='__dict__', ctx=Load()), slice=Name(id='dest', ctx=Load()), ctx=Load()))], orelse=[])], orelse=[]), Assign(targets=[Name(id='line_source', ctx=Store())], value=JoinedStr(values=[Constant(value='line '), FormattedValue(value=Attribute(value=Name(id='line', ctx=Load()), attr='lineno', ctx=Load()), conversion=-1), Constant(value=' of '), FormattedValue(value=Attribute(value=Name(id='line', ctx=Load()), attr='filename', ctx=Load()), conversion=-1)])), Return(value=Call(func=Name(id='ParsedRequirement', ctx=Load()), args=[], keywords=[keyword(arg='requirement', value=Attribute(value=Name(id='line', ctx=Load()), attr='requirement', ctx=Load())), keyword(arg='is_editable', value=Attribute(value=Name(id='line', ctx=Load()), attr='is_editable', ctx=Load())), keyword(arg='comes_from', value=Name(id='line_comes_from', ctx=Load())), keyword(arg='constraint', value=Attribute(value=Name(id='line', ctx=Load()), attr='constraint', ctx=Load())), keyword(arg='options', value=Name(id='req_options', ctx=Load())), keyword(arg='line_source', value=Name(id='line_source', ctx=Load()))]))])], decorator_list=[], returns=Name(id='ParsedRequirement', ctx=Load())), FunctionDef(name='handle_option_line', args=arguments(posonlyargs=[], args=[arg(arg='opts', annotation=Name(id='Values', ctx=Load())), arg(arg='filename', annotation=Name(id='str', ctx=Load())), arg(arg='lineno', annotation=Name(id='int', ctx=Load())), arg(arg='finder', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='PackageFinder'), ctx=Load())), arg(arg='options', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Attribute(value=Name(id='optparse', ctx=Load()), attr='Values', ctx=Load()), ctx=Load())), arg(arg='session', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='PipSession', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=[If(test=Attribute(value=Name(id='opts', ctx=Load()), attr='hashes', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='%s line %s has --hash but no requirement, and will be ignored.'), Name(id='filename', ctx=Load()), Name(id='lineno', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='options', ctx=Load()), body=[If(test=Attribute(value=Name(id='opts', ctx=Load()), attr='require_hashes', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='options', ctx=Load()), attr='require_hashes', ctx=Store())], value=Attribute(value=Name(id='opts', ctx=Load()), attr='require_hashes', ctx=Load()))], orelse=[]), If(test=Attribute(value=Name(id='opts', ctx=Load()), attr='features_enabled', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='options', ctx=Load()), attr='features_enabled', ctx=Load()), attr='extend', ctx=Load()), args=[GeneratorExp(elt=Name(id='f', ctx=Load()), generators=[comprehension(target=Name(id='f', ctx=Store()), iter=Attribute(value=Name(id='opts', ctx=Load()), attr='features_enabled', ctx=Load()), ifs=[Compare(left=Name(id='f', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='options', ctx=Load()), attr='features_enabled', ctx=Load())])], is_async=0)])], keywords=[]))], orelse=[])], orelse=[]), If(test=Name(id='finder', ctx=Load()), body=[Assign(targets=[Name(id='find_links', ctx=Store())], value=Attribute(value=Name(id='finder', ctx=Load()), attr='find_links', ctx=Load())), Assign(targets=[Name(id='index_urls', ctx=Store())], value=Attribute(value=Name(id='finder', ctx=Load()), attr='index_urls', ctx=Load())), Assign(targets=[Name(id='no_index', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='finder', ctx=Load()), attr='search_scope', ctx=Load()), attr='no_index', ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='opts', ctx=Load()), attr='no_index', ctx=Load()), ops=[Is()], comparators=[Constant(value=True)]), body=[Assign(targets=[Name(id='no_index', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='index_urls', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[]), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='opts', ctx=Load()), attr='index_url', ctx=Load()), UnaryOp(op=Not(), operand=Name(id='no_index', ctx=Load()))]), body=[Assign(targets=[Name(id='index_urls', ctx=Store())], value=List(elts=[Attribute(value=Name(id='opts', ctx=Load()), attr='index_url', ctx=Load())], ctx=Load()))], orelse=[]), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='opts', ctx=Load()), attr='extra_index_urls', ctx=Load()), UnaryOp(op=Not(), operand=Name(id='no_index', ctx=Load()))]), body=[Expr(value=Call(func=Attribute(value=Name(id='index_urls', ctx=Load()), attr='extend', ctx=Load()), args=[Attribute(value=Name(id='opts', ctx=Load()), attr='extra_index_urls', ctx=Load())], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='opts', ctx=Load()), attr='find_links', ctx=Load()), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='opts', ctx=Load()), attr='find_links', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='req_dir', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='relative_to_reqs_file', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='req_dir', ctx=Load()), Name(id='value', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='relative_to_reqs_file', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Name(id='relative_to_reqs_file', ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='find_links', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='session', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='session', ctx=Load()), attr='update_index_urls', ctx=Load()), args=[Name(id='index_urls', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='search_scope', ctx=Store())], value=Call(func=Name(id='SearchScope', ctx=Load()), args=[], keywords=[keyword(arg='find_links', value=Name(id='find_links', ctx=Load())), keyword(arg='index_urls', value=Name(id='index_urls', ctx=Load())), keyword(arg='no_index', value=Name(id='no_index', ctx=Load()))])), Assign(targets=[Attribute(value=Name(id='finder', ctx=Load()), attr='search_scope', ctx=Store())], value=Name(id='search_scope', ctx=Load())), If(test=Attribute(value=Name(id='opts', ctx=Load()), attr='pre', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='finder', ctx=Load()), attr='set_allow_all_prereleases', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='opts', ctx=Load()), attr='prefer_binary', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='finder', ctx=Load()), attr='set_prefer_binary', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Name(id='session', ctx=Load()), body=[For(target=Name(id='host', ctx=Store()), iter=BoolOp(op=Or(), values=[Attribute(value=Name(id='opts', ctx=Load()), attr='trusted_hosts', ctx=Load()), List(elts=[], ctx=Load())]), body=[Assign(targets=[Name(id='source', ctx=Store())], value=JoinedStr(values=[Constant(value='line '), FormattedValue(value=Name(id='lineno', ctx=Load()), conversion=-1), Constant(value=' of '), FormattedValue(value=Name(id='filename', ctx=Load()), conversion=-1)])), Expr(value=Call(func=Attribute(value=Name(id='session', ctx=Load()), attr='add_trusted_host', ctx=Load()), args=[Name(id='host', ctx=Load())], keywords=[keyword(arg='source', value=Name(id='source', ctx=Load()))]))], orelse=[])], orelse=[])], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='handle_line', args=arguments(posonlyargs=[], args=[arg(arg='line', annotation=Name(id='ParsedLine', ctx=Load())), arg(arg='options', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Attribute(value=Name(id='optparse', ctx=Load()), attr='Values', ctx=Load()), ctx=Load())), arg(arg='finder', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='PackageFinder'), ctx=Load())), arg(arg='session', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='PipSession', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='Handle a single parsed requirements line; This can result in\n    creating/yielding requirements, or updating the finder.\n\n    :param line:        The parsed line to be processed.\n    :param options:     CLI options.\n    :param finder:      The finder - updated by non-requirement lines.\n    :param session:     The session - updated by non-requirement lines.\n\n    Returns a ParsedRequirement object if the line is a requirement line,\n    otherwise returns None.\n\n    For lines that contain requirements, the only options that have an effect\n    are from SUPPORTED_OPTIONS_REQ, and they are scoped to the\n    requirement. Other options from SUPPORTED_OPTIONS may be present, but are\n    ignored.\n\n    For lines that do not contain requirements, the only options that have an\n    effect are from SUPPORTED_OPTIONS. Options from SUPPORTED_OPTIONS_REQ may\n    be present, but are ignored. These lines may contain multiple options\n    (although our docs imply only one is supported), and all our parsed and\n    affect the finder.\n    ')), If(test=Attribute(value=Name(id='line', ctx=Load()), attr='is_requirement', ctx=Load()), body=[Assign(targets=[Name(id='parsed_req', ctx=Store())], value=Call(func=Name(id='handle_requirement_line', ctx=Load()), args=[Name(id='line', ctx=Load()), Name(id='options', ctx=Load())], keywords=[])), Return(value=Name(id='parsed_req', ctx=Load()))], orelse=[Expr(value=Call(func=Name(id='handle_option_line', ctx=Load()), args=[Attribute(value=Name(id='line', ctx=Load()), attr='opts', ctx=Load()), Attribute(value=Name(id='line', ctx=Load()), attr='filename', ctx=Load()), Attribute(value=Name(id='line', ctx=Load()), attr='lineno', ctx=Load()), Name(id='finder', ctx=Load()), Name(id='options', ctx=Load()), Name(id='session', ctx=Load())], keywords=[])), Return(value=Constant(value=None))])], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='ParsedRequirement', ctx=Load()), ctx=Load())), ClassDef(name='RequirementsFileParser', bases=[], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='session', annotation=Name(id='PipSession', ctx=Load())), arg(arg='line_parser', annotation=Name(id='LineParser', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_session', ctx=Store())], value=Name(id='session', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_line_parser', ctx=Store())], value=Name(id='line_parser', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='parse', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='filename', annotation=Name(id='str', ctx=Load())), arg(arg='constraint', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Parse a given file, yielding parsed lines.')), Expr(value=YieldFrom(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_parse_and_recurse', ctx=Load()), args=[Name(id='filename', ctx=Load()), Name(id='constraint', ctx=Load())], keywords=[])))], decorator_list=[], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Name(id='ParsedLine', ctx=Load()), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='_parse_and_recurse', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='filename', annotation=Name(id='str', ctx=Load())), arg(arg='constraint', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='line', ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_parse_file', ctx=Load()), args=[Name(id='filename', ctx=Load()), Name(id='constraint', ctx=Load())], keywords=[]), body=[If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Attribute(value=Name(id='line', ctx=Load()), attr='is_requirement', ctx=Load())), BoolOp(op=Or(), values=[Attribute(value=Attribute(value=Name(id='line', ctx=Load()), attr='opts', ctx=Load()), attr='requirements', ctx=Load()), Attribute(value=Attribute(value=Name(id='line', ctx=Load()), attr='opts', ctx=Load()), attr='constraints', ctx=Load())])]), body=[If(test=Attribute(value=Attribute(value=Name(id='line', ctx=Load()), attr='opts', ctx=Load()), attr='requirements', ctx=Load()), body=[Assign(targets=[Name(id='req_path', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='line', ctx=Load()), attr='opts', ctx=Load()), attr='requirements', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='nested_constraint', ctx=Store())], value=Constant(value=False))], orelse=[Assign(targets=[Name(id='req_path', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='line', ctx=Load()), attr='opts', ctx=Load()), attr='constraints', ctx=Load()), slice=Constant(value=0), ctx=Load())), Assign(targets=[Name(id='nested_constraint', ctx=Store())], value=Constant(value=True))]), If(test=Call(func=Attribute(value=Name(id='SCHEME_RE', ctx=Load()), attr='search', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='req_path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='urllib', ctx=Load()), attr='parse', ctx=Load()), attr='urljoin', ctx=Load()), args=[Name(id='filename', ctx=Load()), Name(id='req_path', ctx=Load())], keywords=[]))], orelse=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='SCHEME_RE', ctx=Load()), attr='search', ctx=Load()), args=[Name(id='req_path', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='req_path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[]), Name(id='req_path', ctx=Load())], keywords=[]))], orelse=[])]), Expr(value=YieldFrom(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_parse_and_recurse', ctx=Load()), args=[Name(id='req_path', ctx=Load()), Name(id='nested_constraint', ctx=Load())], keywords=[])))], orelse=[Expr(value=Yield(value=Name(id='line', ctx=Load())))])], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Name(id='ParsedLine', ctx=Load()), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='_parse_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='filename', annotation=Name(id='str', ctx=Load())), arg(arg='constraint', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='content', ctx=Store())], ctx=Store())], value=Call(func=Name(id='get_file_content', ctx=Load()), args=[Name(id='filename', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_session', ctx=Load())], keywords=[])), Assign(targets=[Name(id='lines_enum', ctx=Store())], value=Call(func=Name(id='preprocess', ctx=Load()), args=[Name(id='content', ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='line_number', ctx=Store()), Name(id='line', ctx=Store())], ctx=Store()), iter=Name(id='lines_enum', ctx=Load()), body=[Try(body=[Assign(targets=[Tuple(elts=[Name(id='args_str', ctx=Store()), Name(id='opts', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_line_parser', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='OptionParsingError', ctx=Load()), name='e', body=[Assign(targets=[Name(id='msg', ctx=Store())], value=JoinedStr(values=[Constant(value='Invalid requirement: '), FormattedValue(value=Name(id='line', ctx=Load()), conversion=-1), Constant(value='\n'), FormattedValue(value=Attribute(value=Name(id='e', ctx=Load()), attr='msg', ctx=Load()), conversion=-1)])), Raise(exc=Call(func=Name(id='RequirementsFileParseError', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[]), Expr(value=Yield(value=Call(func=Name(id='ParsedLine', ctx=Load()), args=[Name(id='filename', ctx=Load()), Name(id='line_number', ctx=Load()), Name(id='args_str', ctx=Load()), Name(id='opts', ctx=Load()), Name(id='constraint', ctx=Load())], keywords=[])))], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Name(id='ParsedLine', ctx=Load()), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load()))], decorator_list=[]), FunctionDef(name='get_line_parser', args=arguments(posonlyargs=[], args=[arg(arg='finder', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='PackageFinder'), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='parse_line', args=arguments(posonlyargs=[], args=[arg(arg='line', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='parser', ctx=Store())], value=Call(func=Name(id='build_parser', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='defaults', ctx=Store())], value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='get_default_values', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='defaults', ctx=Load()), attr='index_url', ctx=Store())], value=Constant(value=None)), If(test=Name(id='finder', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='defaults', ctx=Load()), attr='format_control', ctx=Store())], value=Attribute(value=Name(id='finder', ctx=Load()), attr='format_control', ctx=Load()))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='args_str', ctx=Store()), Name(id='options_str', ctx=Store())], ctx=Store())], value=Call(func=Name(id='break_args_options', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[])), Try(body=[Assign(targets=[Name(id='options', ctx=Store())], value=Call(func=Attribute(value=Name(id='shlex', ctx=Load()), attr='split', ctx=Load()), args=[Name(id='options_str', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='OptionParsingError', ctx=Load()), args=[JoinedStr(values=[Constant(value='Could not split options: '), FormattedValue(value=Name(id='options_str', ctx=Load()), conversion=-1)])], keywords=[]), cause=Name(id='e', ctx=Load()))])], orelse=[], finalbody=[]), Assign(targets=[Tuple(elts=[Name(id='opts', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='parse_args', ctx=Load()), args=[Name(id='options', ctx=Load()), Name(id='defaults', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Name(id='args_str', ctx=Load()), Name(id='opts', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Values', ctx=Load())], ctx=Load()), ctx=Load())), Return(value=Name(id='parse_line', ctx=Load()))], decorator_list=[], returns=Name(id='LineParser', ctx=Load())), FunctionDef(name='break_args_options', args=arguments(posonlyargs=[], args=[arg(arg='line', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Break up the line into an args and options string.  We only want to shlex\n    (and then optparse) the options, not the args.  args can contain markers\n    which are corrupted by shlex.\n    ')), Assign(targets=[Name(id='tokens', ctx=Store())], value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value=' ')], keywords=[])), Assign(targets=[Name(id='args', ctx=Store())], value=List(elts=[], ctx=Load())), Assign(targets=[Name(id='options', ctx=Store())], value=Subscript(value=Name(id='tokens', ctx=Load()), slice=Slice(), ctx=Load())), For(target=Name(id='token', ctx=Store()), iter=Name(id='tokens', ctx=Load()), body=[If(test=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='token', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='-')], keywords=[]), Call(func=Attribute(value=Name(id='token', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='--')], keywords=[])]), body=[Break()], orelse=[Expr(value=Call(func=Attribute(value=Name(id='args', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='token', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='options', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value=0)], keywords=[]))])], orelse=[]), Return(value=Tuple(elts=[Call(func=Attribute(value=Constant(value=' '), attr='join', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[]), Call(func=Attribute(value=Constant(value=' '), attr='join', ctx=Load()), args=[Name(id='options', ctx=Load())], keywords=[])], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), ClassDef(name='OptionParsingError', bases=[Name(id='Exception', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='msg', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='msg', ctx=Store())], value=Name(id='msg', ctx=Load()))], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), FunctionDef(name='build_parser', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Return a parser for parsing requirement lines\n    ')), Assign(targets=[Name(id='parser', ctx=Store())], value=Call(func=Attribute(value=Name(id='optparse', ctx=Load()), attr='OptionParser', ctx=Load()), args=[], keywords=[keyword(arg='add_help_option', value=Constant(value=False))])), Assign(targets=[Name(id='option_factories', ctx=Store())], value=BinOp(left=Name(id='SUPPORTED_OPTIONS', ctx=Load()), op=Add(), right=Name(id='SUPPORTED_OPTIONS_REQ', ctx=Load()))), For(target=Name(id='option_factory', ctx=Store()), iter=Name(id='option_factories', ctx=Load()), body=[Assign(targets=[Name(id='option', ctx=Store())], value=Call(func=Name(id='option_factory', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='add_option', ctx=Load()), args=[Name(id='option', ctx=Load())], keywords=[]))], orelse=[]), FunctionDef(name='parser_exit', args=arguments(posonlyargs=[], args=[arg(arg='self', annotation=Name(id='Any', ctx=Load())), arg(arg='msg', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Call(func=Name(id='OptionParsingError', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value='NoReturn')), Assign(targets=[Attribute(value=Name(id='parser', ctx=Load()), attr='exit', ctx=Store())], value=Name(id='parser_exit', ctx=Load())), Return(value=Name(id='parser', ctx=Load()))], decorator_list=[], returns=Attribute(value=Name(id='optparse', ctx=Load()), attr='OptionParser', ctx=Load())), FunctionDef(name='join_lines', args=arguments(posonlyargs=[], args=[arg(arg='lines_enum', annotation=Name(id='ReqFileLines', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Joins a line ending in '' with the previous line (except when following\n    comments).  The joined line takes on the index of the first line.\n    ")), Assign(targets=[Name(id='primary_line_number', ctx=Store())], value=Constant(value=None)), AnnAssign(target=Name(id='new_line', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), For(target=Tuple(elts=[Name(id='line_number', ctx=Store()), Name(id='line', ctx=Store())], ctx=Store()), iter=Name(id='lines_enum', ctx=Load()), body=[If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='\\')], keywords=[])), Call(func=Attribute(value=Name(id='COMMENT_RE', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[])]), body=[If(test=Call(func=Attribute(value=Name(id='COMMENT_RE', ctx=Load()), attr='match', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='line', ctx=Store())], value=BinOp(left=Constant(value=' '), op=Add(), right=Name(id='line', ctx=Load())))], orelse=[]), If(test=Name(id='new_line', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='new_line', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[])), Assert(test=Compare(left=Name(id='primary_line_number', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Expr(value=Yield(value=Tuple(elts=[Name(id='primary_line_number', ctx=Load()), Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Name(id='new_line', ctx=Load())], keywords=[])], ctx=Load()))), Assign(targets=[Name(id='new_line', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[Expr(value=Yield(value=Tuple(elts=[Name(id='line_number', ctx=Load()), Name(id='line', ctx=Load())], ctx=Load())))])], orelse=[If(test=UnaryOp(op=Not(), operand=Name(id='new_line', ctx=Load())), body=[Assign(targets=[Name(id='primary_line_number', ctx=Store())], value=Name(id='line_number', ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='new_line', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='strip', ctx=Load()), args=[Constant(value='\\')], keywords=[])], keywords=[]))])], orelse=[]), If(test=Name(id='new_line', ctx=Load()), body=[Assert(test=Compare(left=Name(id='primary_line_number', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Expr(value=Yield(value=Tuple(elts=[Name(id='primary_line_number', ctx=Load()), Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Name(id='new_line', ctx=Load())], keywords=[])], ctx=Load())))], orelse=[])], decorator_list=[], returns=Name(id='ReqFileLines', ctx=Load())), FunctionDef(name='ignore_comments', args=arguments(posonlyargs=[], args=[arg(arg='lines_enum', annotation=Name(id='ReqFileLines', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Strips comments and filter empty lines.\n    ')), For(target=Tuple(elts=[Name(id='line_number', ctx=Store()), Name(id='line', ctx=Store())], ctx=Store()), iter=Name(id='lines_enum', ctx=Load()), body=[Assign(targets=[Name(id='line', ctx=Store())], value=Call(func=Attribute(value=Name(id='COMMENT_RE', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value=''), Name(id='line', ctx=Load())], keywords=[])), Assign(targets=[Name(id='line', ctx=Store())], value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='strip', ctx=Load()), args=[], keywords=[])), If(test=Name(id='line', ctx=Load()), body=[Expr(value=Yield(value=Tuple(elts=[Name(id='line_number', ctx=Load()), Name(id='line', ctx=Load())], ctx=Load())))], orelse=[])], orelse=[])], decorator_list=[], returns=Name(id='ReqFileLines', ctx=Load())), FunctionDef(name='expand_env_variables', args=arguments(posonlyargs=[], args=[arg(arg='lines_enum', annotation=Name(id='ReqFileLines', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Replace all environment variables that can be retrieved via `os.getenv`.\n\n    The only allowed format for environment variables defined in the\n    requirement file is `${MY_VARIABLE_1}` to ensure two things:\n\n    1. Strings that contain a `$` aren't accidentally (partially) expanded.\n    2. Ensure consistency across platforms for requirement files.\n\n    These points are the result of a discussion on the `github pull\n    request #3514 <https://github.com/pypa/pip/pull/3514>`_.\n\n    Valid characters in variable names follow the `POSIX standard\n    <http://pubs.opengroup.org/onlinepubs/9699919799/>`_ and are limited\n    to uppercase letter, digits and the `_` (underscore).\n    ")), For(target=Tuple(elts=[Name(id='line_number', ctx=Store()), Name(id='line', ctx=Store())], ctx=Store()), iter=Name(id='lines_enum', ctx=Load()), body=[For(target=Tuple(elts=[Name(id='env_var', ctx=Store()), Name(id='var_name', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='ENV_VAR_RE', ctx=Load()), attr='findall', ctx=Load()), args=[Name(id='line', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getenv', ctx=Load()), args=[Name(id='var_name', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='value', ctx=Load())), body=[Continue()], orelse=[]), Assign(targets=[Name(id='line', ctx=Store())], value=Call(func=Attribute(value=Name(id='line', ctx=Load()), attr='replace', ctx=Load()), args=[Name(id='env_var', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Yield(value=Tuple(elts=[Name(id='line_number', ctx=Load()), Name(id='line', ctx=Load())], ctx=Load())))], orelse=[])], decorator_list=[], returns=Name(id='ReqFileLines', ctx=Load())), FunctionDef(name='get_file_content', args=arguments(posonlyargs=[], args=[arg(arg='url', annotation=Name(id='str', ctx=Load())), arg(arg='session', annotation=Name(id='PipSession', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Gets the content of a file; it may be a filename, file: URL, or\n    http: URL.  Returns (location, content).  Content is unicode.\n    Respects # -*- coding: declarations on the retrieved files.\n\n    :param url:         File path or url.\n    :param session:     PipSession instance.\n    ')), Assign(targets=[Name(id='scheme', ctx=Store())], value=Call(func=Name(id='get_url_scheme', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='scheme', ctx=Load()), ops=[In()], comparators=[List(elts=[Constant(value='http'), Constant(value='https'), Constant(value='file')], ctx=Load())]), body=[Assign(targets=[Name(id='resp', ctx=Store())], value=Call(func=Attribute(value=Name(id='session', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='raise_for_status', ctx=Load()), args=[Name(id='resp', ctx=Load())], keywords=[])), Return(value=Tuple(elts=[Attribute(value=Name(id='resp', ctx=Load()), attr='url', ctx=Load()), Attribute(value=Name(id='resp', ctx=Load()), attr='text', ctx=Load())], ctx=Load()))], orelse=[]), Try(body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='url', ctx=Load()), Constant(value='rb')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='content', ctx=Store())], value=Call(func=Name(id='auto_decode', ctx=Load()), args=[Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[])], keywords=[]))])], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), name='exc', body=[Raise(exc=Call(func=Name(id='InstallationError', ctx=Load()), args=[JoinedStr(values=[Constant(value='Could not open requirements file: '), FormattedValue(value=Name(id='exc', ctx=Load()), conversion=-1)])], keywords=[]))])], orelse=[], finalbody=[]), Return(value=Tuple(elts=[Name(id='url', ctx=Load()), Name(id='content', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()))], type_ignores=[])