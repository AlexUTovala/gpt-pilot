Module(body=[Expr(value=Constant(value='Orchestrator for building wheels from InstallRequirements.\n')), Import(names=[alias(name='logging')]), Import(names=[alias(name='os.path')]), Import(names=[alias(name='re')]), Import(names=[alias(name='shutil')]), ImportFrom(module='typing', names=[alias(name='Iterable'), alias(name='List'), alias(name='Optional'), alias(name='Tuple')], level=0), ImportFrom(module='pip._vendor.packaging.utils', names=[alias(name='canonicalize_name'), alias(name='canonicalize_version')], level=0), ImportFrom(module='pip._vendor.packaging.version', names=[alias(name='InvalidVersion'), alias(name='Version')], level=0), ImportFrom(module='pip._internal.cache', names=[alias(name='WheelCache')], level=0), ImportFrom(module='pip._internal.exceptions', names=[alias(name='InvalidWheelFilename'), alias(name='UnsupportedWheel')], level=0), ImportFrom(module='pip._internal.metadata', names=[alias(name='FilesystemWheel'), alias(name='get_wheel_distribution')], level=0), ImportFrom(module='pip._internal.models.link', names=[alias(name='Link')], level=0), ImportFrom(module='pip._internal.models.wheel', names=[alias(name='Wheel')], level=0), ImportFrom(module='pip._internal.operations.build.wheel', names=[alias(name='build_wheel_pep517')], level=0), ImportFrom(module='pip._internal.operations.build.wheel_editable', names=[alias(name='build_wheel_editable')], level=0), ImportFrom(module='pip._internal.operations.build.wheel_legacy', names=[alias(name='build_wheel_legacy')], level=0), ImportFrom(module='pip._internal.req.req_install', names=[alias(name='InstallRequirement')], level=0), ImportFrom(module='pip._internal.utils.logging', names=[alias(name='indent_log')], level=0), ImportFrom(module='pip._internal.utils.misc', names=[alias(name='ensure_dir'), alias(name='hash_file')], level=0), ImportFrom(module='pip._internal.utils.setuptools_build', names=[alias(name='make_setuptools_clean_args')], level=0), ImportFrom(module='pip._internal.utils.subprocess', names=[alias(name='call_subprocess')], level=0), ImportFrom(module='pip._internal.utils.temp_dir', names=[alias(name='TempDirectory')], level=0), ImportFrom(module='pip._internal.utils.urls', names=[alias(name='path_to_url')], level=0), ImportFrom(module='pip._internal.vcs', names=[alias(name='vcs')], level=0), Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), Assign(targets=[Name(id='_egg_info_re', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='([a-z0-9_.]+)-([a-z0-9_.!+-]+)'), Attribute(value=Name(id='re', ctx=Load()), attr='IGNORECASE', ctx=Load())], keywords=[])), Assign(targets=[Name(id='BuildResult', ctx=Store())], value=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='InstallRequirement', ctx=Load()), ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='InstallRequirement', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='_contains_egg_info', args=arguments(posonlyargs=[], args=[arg(arg='s', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Determine whether the string looks like an egg_info.\n\n    :param s: The string to parse. E.g. foo-2.1\n    ')), Return(value=Call(func=Name(id='bool', ctx=Load()), args=[Call(func=Attribute(value=Name(id='_egg_info_re', ctx=Load()), attr='search', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='_should_build', args=arguments(posonlyargs=[], args=[arg(arg='req', annotation=Name(id='InstallRequirement', ctx=Load())), arg(arg='need_wheel', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return whether an InstallRequirement should be built into a wheel.')), If(test=Attribute(value=Name(id='req', ctx=Load()), attr='constraint', ctx=Load()), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Attribute(value=Name(id='req', ctx=Load()), attr='is_wheel', ctx=Load()), body=[If(test=Name(id='need_wheel', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Skipping %s, due to already being wheel.'), Attribute(value=Name(id='req', ctx=Load()), attr='name', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Constant(value=False))], orelse=[]), If(test=Name(id='need_wheel', ctx=Load()), body=[Return(value=Constant(value=True))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='req', ctx=Load()), attr='source_dir', ctx=Load())), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Attribute(value=Name(id='req', ctx=Load()), attr='editable', ctx=Load()), body=[Return(value=Call(func=Attribute(value=Name(id='req', ctx=Load()), attr='supports_pyproject_editable', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Constant(value=True))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='should_build_for_wheel_command', args=arguments(posonlyargs=[], args=[arg(arg='req', annotation=Name(id='InstallRequirement', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='_should_build', ctx=Load()), args=[Name(id='req', ctx=Load())], keywords=[keyword(arg='need_wheel', value=Constant(value=True))]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='should_build_for_install_command', args=arguments(posonlyargs=[], args=[arg(arg='req', annotation=Name(id='InstallRequirement', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='_should_build', ctx=Load()), args=[Name(id='req', ctx=Load())], keywords=[keyword(arg='need_wheel', value=Constant(value=False))]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='_should_cache', args=arguments(posonlyargs=[], args=[arg(arg='req', annotation=Name(id='InstallRequirement', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Return whether a built InstallRequirement can be stored in the persistent\n    wheel cache, assuming the wheel cache is available, and _should_build()\n    has determined a wheel needs to be built.\n    ')), If(test=BoolOp(op=Or(), values=[Attribute(value=Name(id='req', ctx=Load()), attr='editable', ctx=Load()), UnaryOp(op=Not(), operand=Attribute(value=Name(id='req', ctx=Load()), attr='source_dir', ctx=Load()))]), body=[Return(value=Constant(value=False))], orelse=[]), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='req', ctx=Load()), attr='link', ctx=Load()), Attribute(value=Attribute(value=Name(id='req', ctx=Load()), attr='link', ctx=Load()), attr='is_vcs', ctx=Load())]), body=[Assert(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='req', ctx=Load()), attr='editable', ctx=Load()))), Assert(test=Attribute(value=Name(id='req', ctx=Load()), attr='source_dir', ctx=Load())), Assign(targets=[Name(id='vcs_backend', ctx=Store())], value=Call(func=Attribute(value=Name(id='vcs', ctx=Load()), attr='get_backend_for_scheme', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='req', ctx=Load()), attr='link', ctx=Load()), attr='scheme', ctx=Load())], keywords=[])), Assert(test=Name(id='vcs_backend', ctx=Load())), If(test=Call(func=Attribute(value=Name(id='vcs_backend', ctx=Load()), attr='is_immutable_rev_checkout', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='req', ctx=Load()), attr='link', ctx=Load()), attr='url', ctx=Load()), Attribute(value=Name(id='req', ctx=Load()), attr='source_dir', ctx=Load())], keywords=[]), body=[Return(value=Constant(value=True))], orelse=[]), Return(value=Constant(value=False))], orelse=[]), Assert(test=Attribute(value=Name(id='req', ctx=Load()), attr='link', ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='base', ctx=Store()), Name(id='ext', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='req', ctx=Load()), attr='link', ctx=Load()), attr='splitext', ctx=Load()), args=[], keywords=[])), If(test=Call(func=Name(id='_contains_egg_info', ctx=Load()), args=[Name(id='base', ctx=Load())], keywords=[]), body=[Return(value=Constant(value=True))], orelse=[]), Return(value=Constant(value=False))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load())), FunctionDef(name='_get_cache_dir', args=arguments(posonlyargs=[], args=[arg(arg='req', annotation=Name(id='InstallRequirement', ctx=Load())), arg(arg='wheel_cache', annotation=Name(id='WheelCache', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the persistent or temporary cache directory where the built\n    wheel need to be stored.\n    ')), Assign(targets=[Name(id='cache_available', ctx=Store())], value=Call(func=Name(id='bool', ctx=Load()), args=[Attribute(value=Name(id='wheel_cache', ctx=Load()), attr='cache_dir', ctx=Load())], keywords=[])), Assert(test=Attribute(value=Name(id='req', ctx=Load()), attr='link', ctx=Load())), If(test=BoolOp(op=And(), values=[Name(id='cache_available', ctx=Load()), Call(func=Name(id='_should_cache', ctx=Load()), args=[Name(id='req', ctx=Load())], keywords=[])]), body=[Assign(targets=[Name(id='cache_dir', ctx=Store())], value=Call(func=Attribute(value=Name(id='wheel_cache', ctx=Load()), attr='get_path_for_link', ctx=Load()), args=[Attribute(value=Name(id='req', ctx=Load()), attr='link', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='cache_dir', ctx=Store())], value=Call(func=Attribute(value=Name(id='wheel_cache', ctx=Load()), attr='get_ephem_path_for_link', ctx=Load()), args=[Attribute(value=Name(id='req', ctx=Load()), attr='link', ctx=Load())], keywords=[]))]), Return(value=Name(id='cache_dir', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='_verify_one', args=arguments(posonlyargs=[], args=[arg(arg='req', annotation=Name(id='InstallRequirement', ctx=Load())), arg(arg='wheel_path', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='canonical_name', ctx=Store())], value=Call(func=Name(id='canonicalize_name', ctx=Load()), args=[BoolOp(op=Or(), values=[Attribute(value=Name(id='req', ctx=Load()), attr='name', ctx=Load()), Constant(value='')])], keywords=[])), Assign(targets=[Name(id='w', ctx=Store())], value=Call(func=Name(id='Wheel', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='basename', ctx=Load()), args=[Name(id='wheel_path', ctx=Load())], keywords=[])], keywords=[])), If(test=Compare(left=Call(func=Name(id='canonicalize_name', ctx=Load()), args=[Attribute(value=Name(id='w', ctx=Load()), attr='name', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Name(id='canonical_name', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='InvalidWheelFilename', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Wheel has unexpected file name: expected {!r}, got {!r}'), attr='format', ctx=Load()), args=[Name(id='canonical_name', ctx=Load()), Attribute(value=Name(id='w', ctx=Load()), attr='name', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='dist', ctx=Store())], value=Call(func=Name(id='get_wheel_distribution', ctx=Load()), args=[Call(func=Name(id='FilesystemWheel', ctx=Load()), args=[Name(id='wheel_path', ctx=Load())], keywords=[]), Name(id='canonical_name', ctx=Load())], keywords=[])), Assign(targets=[Name(id='dist_verstr', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='dist', ctx=Load()), attr='version', ctx=Load())], keywords=[])), If(test=Compare(left=Call(func=Name(id='canonicalize_version', ctx=Load()), args=[Name(id='dist_verstr', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='canonicalize_version', ctx=Load()), args=[Attribute(value=Name(id='w', ctx=Load()), attr='version', ctx=Load())], keywords=[])]), body=[Raise(exc=Call(func=Name(id='InvalidWheelFilename', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Wheel has unexpected file name: expected {!r}, got {!r}'), attr='format', ctx=Load()), args=[Name(id='dist_verstr', ctx=Load()), Attribute(value=Name(id='w', ctx=Load()), attr='version', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='metadata_version_value', ctx=Store())], value=Attribute(value=Name(id='dist', ctx=Load()), attr='metadata_version', ctx=Load())), If(test=Compare(left=Name(id='metadata_version_value', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='UnsupportedWheel', ctx=Load()), args=[Constant(value='Missing Metadata-Version')], keywords=[]))], orelse=[]), Try(body=[Assign(targets=[Name(id='metadata_version', ctx=Store())], value=Call(func=Name(id='Version', ctx=Load()), args=[Name(id='metadata_version_value', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='InvalidVersion', ctx=Load()), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=JoinedStr(values=[Constant(value='Invalid Metadata-Version: '), FormattedValue(value=Name(id='metadata_version_value', ctx=Load()), conversion=-1)])), Raise(exc=Call(func=Name(id='UnsupportedWheel', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='metadata_version', ctx=Load()), ops=[GtE()], comparators=[Call(func=Name(id='Version', ctx=Load()), args=[Constant(value='1.2')], keywords=[])]), UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Attribute(value=Name(id='dist', ctx=Load()), attr='version', ctx=Load()), Name(id='Version', ctx=Load())], keywords=[]))]), body=[Raise(exc=Call(func=Name(id='UnsupportedWheel', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Metadata 1.2 mandates PEP 440 version, but {!r} is not'), attr='format', ctx=Load()), args=[Name(id='dist_verstr', ctx=Load())], keywords=[])], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_build_one', args=arguments(posonlyargs=[], args=[arg(arg='req', annotation=Name(id='InstallRequirement', ctx=Load())), arg(arg='output_dir', annotation=Name(id='str', ctx=Load())), arg(arg='verify', annotation=Name(id='bool', ctx=Load())), arg(arg='build_options', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='global_options', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='editable', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Build one wheel.\n\n    :return: The filename of the built wheel, or None if the build failed.\n    ')), Assign(targets=[Name(id='artifact', ctx=Store())], value=IfExp(test=Name(id='editable', ctx=Load()), body=Constant(value='editable'), orelse=Constant(value='wheel'))), Try(body=[Expr(value=Call(func=Name(id='ensure_dir', ctx=Load()), args=[Name(id='output_dir', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), name='e', body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='Building %s for %s failed: %s'), Name(id='artifact', ctx=Load()), Attribute(value=Name(id='req', ctx=Load()), attr='name', ctx=Load()), Name(id='e', ctx=Load())], keywords=[])), Return(value=Constant(value=None))])], orelse=[], finalbody=[]), With(items=[withitem(context_expr=Attribute(value=Name(id='req', ctx=Load()), attr='build_env', ctx=Load()))], body=[Assign(targets=[Name(id='wheel_path', ctx=Store())], value=Call(func=Name(id='_build_one_inside_env', ctx=Load()), args=[Name(id='req', ctx=Load()), Name(id='output_dir', ctx=Load()), Name(id='build_options', ctx=Load()), Name(id='global_options', ctx=Load()), Name(id='editable', ctx=Load())], keywords=[]))]), If(test=BoolOp(op=And(), values=[Name(id='wheel_path', ctx=Load()), Name(id='verify', ctx=Load())]), body=[Try(body=[Expr(value=Call(func=Name(id='_verify_one', ctx=Load()), args=[Name(id='req', ctx=Load()), Name(id='wheel_path', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='InvalidWheelFilename', ctx=Load()), Name(id='UnsupportedWheel', ctx=Load())], ctx=Load()), name='e', body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='Built %s for %s is invalid: %s'), Name(id='artifact', ctx=Load()), Attribute(value=Name(id='req', ctx=Load()), attr='name', ctx=Load()), Name(id='e', ctx=Load())], keywords=[])), Return(value=Constant(value=None))])], orelse=[], finalbody=[])], orelse=[]), Return(value=Name(id='wheel_path', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='_build_one_inside_env', args=arguments(posonlyargs=[], args=[arg(arg='req', annotation=Name(id='InstallRequirement', ctx=Load())), arg(arg='output_dir', annotation=Name(id='str', ctx=Load())), arg(arg='build_options', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='global_options', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='editable', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='TempDirectory', ctx=Load()), args=[], keywords=[keyword(arg='kind', value=Constant(value='wheel'))]), optional_vars=Name(id='temp_dir', ctx=Store()))], body=[Assert(test=Attribute(value=Name(id='req', ctx=Load()), attr='name', ctx=Load())), If(test=Attribute(value=Name(id='req', ctx=Load()), attr='use_pep517', ctx=Load()), body=[Assert(test=Attribute(value=Name(id='req', ctx=Load()), attr='metadata_directory', ctx=Load())), Assert(test=Attribute(value=Name(id='req', ctx=Load()), attr='pep517_backend', ctx=Load())), If(test=Name(id='global_options', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='Ignoring --global-option when building %s using PEP 517'), Attribute(value=Name(id='req', ctx=Load()), attr='name', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='build_options', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='Ignoring --build-option when building %s using PEP 517'), Attribute(value=Name(id='req', ctx=Load()), attr='name', ctx=Load())], keywords=[]))], orelse=[]), If(test=Name(id='editable', ctx=Load()), body=[Assign(targets=[Name(id='wheel_path', ctx=Store())], value=Call(func=Name(id='build_wheel_editable', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Attribute(value=Name(id='req', ctx=Load()), attr='name', ctx=Load())), keyword(arg='backend', value=Attribute(value=Name(id='req', ctx=Load()), attr='pep517_backend', ctx=Load())), keyword(arg='metadata_directory', value=Attribute(value=Name(id='req', ctx=Load()), attr='metadata_directory', ctx=Load())), keyword(arg='tempd', value=Attribute(value=Name(id='temp_dir', ctx=Load()), attr='path', ctx=Load()))]))], orelse=[Assign(targets=[Name(id='wheel_path', ctx=Store())], value=Call(func=Name(id='build_wheel_pep517', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Attribute(value=Name(id='req', ctx=Load()), attr='name', ctx=Load())), keyword(arg='backend', value=Attribute(value=Name(id='req', ctx=Load()), attr='pep517_backend', ctx=Load())), keyword(arg='metadata_directory', value=Attribute(value=Name(id='req', ctx=Load()), attr='metadata_directory', ctx=Load())), keyword(arg='tempd', value=Attribute(value=Name(id='temp_dir', ctx=Load()), attr='path', ctx=Load()))]))])], orelse=[Assign(targets=[Name(id='wheel_path', ctx=Store())], value=Call(func=Name(id='build_wheel_legacy', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Attribute(value=Name(id='req', ctx=Load()), attr='name', ctx=Load())), keyword(arg='setup_py_path', value=Attribute(value=Name(id='req', ctx=Load()), attr='setup_py_path', ctx=Load())), keyword(arg='source_dir', value=Attribute(value=Name(id='req', ctx=Load()), attr='unpacked_source_directory', ctx=Load())), keyword(arg='global_options', value=Name(id='global_options', ctx=Load())), keyword(arg='build_options', value=Name(id='build_options', ctx=Load())), keyword(arg='tempd', value=Attribute(value=Name(id='temp_dir', ctx=Load()), attr='path', ctx=Load()))]))]), If(test=Compare(left=Name(id='wheel_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='wheel_name', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='basename', ctx=Load()), args=[Name(id='wheel_path', ctx=Load())], keywords=[])), Assign(targets=[Name(id='dest_path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='output_dir', ctx=Load()), Name(id='wheel_name', ctx=Load())], keywords=[])), Try(body=[Assign(targets=[Tuple(elts=[Name(id='wheel_hash', ctx=Store()), Name(id='length', ctx=Store())], ctx=Store())], value=Call(func=Name(id='hash_file', ctx=Load()), args=[Name(id='wheel_path', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='shutil', ctx=Load()), attr='move', ctx=Load()), args=[Name(id='wheel_path', ctx=Load()), Name(id='dest_path', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Created wheel for %s: filename=%s size=%d sha256=%s'), Attribute(value=Name(id='req', ctx=Load()), attr='name', ctx=Load()), Name(id='wheel_name', ctx=Load()), Name(id='length', ctx=Load()), Call(func=Attribute(value=Name(id='wheel_hash', ctx=Load()), attr='hexdigest', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Stored in directory: %s'), Name(id='output_dir', ctx=Load())], keywords=[])), Return(value=Name(id='dest_path', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='e', body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='Building wheel for %s failed: %s'), Attribute(value=Name(id='req', ctx=Load()), attr='name', ctx=Load()), Name(id='e', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], orelse=[]), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='req', ctx=Load()), attr='use_pep517', ctx=Load())), body=[Expr(value=Call(func=Name(id='_clean_one_legacy', ctx=Load()), args=[Name(id='req', ctx=Load()), Name(id='global_options', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Constant(value=None))])], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='_clean_one_legacy', args=arguments(posonlyargs=[], args=[arg(arg='req', annotation=Name(id='InstallRequirement', ctx=Load())), arg(arg='global_options', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='clean_args', ctx=Store())], value=Call(func=Name(id='make_setuptools_clean_args', ctx=Load()), args=[Attribute(value=Name(id='req', ctx=Load()), attr='setup_py_path', ctx=Load())], keywords=[keyword(arg='global_options', value=Name(id='global_options', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Running setup.py clean for %s'), Attribute(value=Name(id='req', ctx=Load()), attr='name', ctx=Load())], keywords=[])), Try(body=[Expr(value=Call(func=Name(id='call_subprocess', ctx=Load()), args=[Name(id='clean_args', ctx=Load())], keywords=[keyword(arg='command_desc', value=Constant(value='python setup.py clean')), keyword(arg='cwd', value=Attribute(value=Name(id='req', ctx=Load()), attr='source_dir', ctx=Load()))])), Return(value=Constant(value=True))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='error', ctx=Load()), args=[Constant(value='Failed cleaning build dir for %s'), Attribute(value=Name(id='req', ctx=Load()), attr='name', ctx=Load())], keywords=[])), Return(value=Constant(value=False))])], orelse=[], finalbody=[])], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='build', args=arguments(posonlyargs=[], args=[arg(arg='requirements', annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='InstallRequirement', ctx=Load()), ctx=Load())), arg(arg='wheel_cache', annotation=Name(id='WheelCache', ctx=Load())), arg(arg='verify', annotation=Name(id='bool', ctx=Load())), arg(arg='build_options', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='global_options', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Build wheels.\n\n    :return: The list of InstallRequirement that succeeded to build and\n        the list of InstallRequirement that failed to build.\n    ')), If(test=UnaryOp(op=Not(), operand=Name(id='requirements', ctx=Load())), body=[Return(value=Tuple(elts=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load())], ctx=Load()))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Building wheels for collected packages: %s'), Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[GeneratorExp(elt=Attribute(value=Name(id='req', ctx=Load()), attr='name', ctx=Load()), generators=[comprehension(target=Name(id='req', ctx=Store()), iter=Name(id='requirements', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='indent_log', ctx=Load()), args=[], keywords=[]))], body=[Assign(targets=[Tuple(elts=[Name(id='build_successes', ctx=Store()), Name(id='build_failures', ctx=Store())], ctx=Store())], value=Tuple(elts=[List(elts=[], ctx=Load()), List(elts=[], ctx=Load())], ctx=Load())), For(target=Name(id='req', ctx=Store()), iter=Name(id='requirements', ctx=Load()), body=[Assert(test=Attribute(value=Name(id='req', ctx=Load()), attr='name', ctx=Load())), Assign(targets=[Name(id='cache_dir', ctx=Store())], value=Call(func=Name(id='_get_cache_dir', ctx=Load()), args=[Name(id='req', ctx=Load()), Name(id='wheel_cache', ctx=Load())], keywords=[])), Assign(targets=[Name(id='wheel_file', ctx=Store())], value=Call(func=Name(id='_build_one', ctx=Load()), args=[Name(id='req', ctx=Load()), Name(id='cache_dir', ctx=Load()), Name(id='verify', ctx=Load()), Name(id='build_options', ctx=Load()), Name(id='global_options', ctx=Load()), BoolOp(op=And(), values=[Attribute(value=Name(id='req', ctx=Load()), attr='editable', ctx=Load()), Attribute(value=Name(id='req', ctx=Load()), attr='permit_editable_wheels', ctx=Load())])], keywords=[])), If(test=Name(id='wheel_file', ctx=Load()), body=[If(test=Compare(left=Attribute(value=Name(id='req', ctx=Load()), attr='download_info', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='wheel_cache', ctx=Load()), attr='record_download_origin', ctx=Load()), args=[Name(id='cache_dir', ctx=Load()), Attribute(value=Name(id='req', ctx=Load()), attr='download_info', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='req', ctx=Load()), attr='link', ctx=Store())], value=Call(func=Name(id='Link', ctx=Load()), args=[Call(func=Name(id='path_to_url', ctx=Load()), args=[Name(id='wheel_file', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Attribute(value=Name(id='req', ctx=Load()), attr='local_file_path', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='req', ctx=Load()), attr='link', ctx=Load()), attr='file_path', ctx=Load())), Assert(test=Attribute(value=Attribute(value=Name(id='req', ctx=Load()), attr='link', ctx=Load()), attr='is_wheel', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='build_successes', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='req', ctx=Load())], keywords=[]))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='build_failures', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='req', ctx=Load())], keywords=[]))])], orelse=[])]), If(test=Name(id='build_successes', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Successfully built %s'), Call(func=Attribute(value=Constant(value=' '), attr='join', ctx=Load()), args=[ListComp(elt=Attribute(value=Name(id='req', ctx=Load()), attr='name', ctx=Load()), generators=[comprehension(target=Name(id='req', ctx=Store()), iter=Name(id='build_successes', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], keywords=[]))], orelse=[]), If(test=Name(id='build_failures', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Failed to build %s'), Call(func=Attribute(value=Constant(value=' '), attr='join', ctx=Load()), args=[ListComp(elt=Attribute(value=Name(id='req', ctx=Load()), attr='name', ctx=Load()), generators=[comprehension(target=Name(id='req', ctx=Store()), iter=Name(id='build_failures', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], keywords=[]))], orelse=[]), Return(value=Tuple(elts=[Name(id='build_successes', ctx=Load()), Name(id='build_failures', ctx=Load())], ctx=Load()))], decorator_list=[], returns=Name(id='BuildResult', ctx=Load()))], type_ignores=[])