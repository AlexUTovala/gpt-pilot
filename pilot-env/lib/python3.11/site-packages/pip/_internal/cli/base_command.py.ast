Module(body=[Expr(value=Constant(value='Base Command class, and related routines')), Import(names=[alias(name='functools')]), Import(names=[alias(name='logging')]), Import(names=[alias(name='logging.config')]), Import(names=[alias(name='optparse')]), Import(names=[alias(name='os')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='traceback')]), ImportFrom(module='optparse', names=[alias(name='Values')], level=0), ImportFrom(module='typing', names=[alias(name='Any'), alias(name='Callable'), alias(name='List'), alias(name='Optional'), alias(name='Tuple')], level=0), ImportFrom(module='pip._vendor.rich', names=[alias(name='traceback', asname='rich_traceback')], level=0), ImportFrom(module='pip._internal.cli', names=[alias(name='cmdoptions')], level=0), ImportFrom(module='pip._internal.cli.command_context', names=[alias(name='CommandContextMixIn')], level=0), ImportFrom(module='pip._internal.cli.parser', names=[alias(name='ConfigOptionParser'), alias(name='UpdatingDefaultsHelpFormatter')], level=0), ImportFrom(module='pip._internal.cli.status_codes', names=[alias(name='ERROR'), alias(name='PREVIOUS_BUILD_DIR_ERROR'), alias(name='UNKNOWN_ERROR'), alias(name='VIRTUALENV_NOT_FOUND')], level=0), ImportFrom(module='pip._internal.exceptions', names=[alias(name='BadCommand'), alias(name='CommandError'), alias(name='DiagnosticPipError'), alias(name='InstallationError'), alias(name='NetworkConnectionError'), alias(name='PreviousBuildDirError'), alias(name='UninstallationError')], level=0), ImportFrom(module='pip._internal.utils.filesystem', names=[alias(name='check_path_owner')], level=0), ImportFrom(module='pip._internal.utils.logging', names=[alias(name='BrokenStdoutLoggingError'), alias(name='setup_logging')], level=0), ImportFrom(module='pip._internal.utils.misc', names=[alias(name='get_prog'), alias(name='normalize_path')], level=0), ImportFrom(module='pip._internal.utils.temp_dir', names=[alias(name='TempDirectoryTypeRegistry', asname='TempDirRegistry')], level=0), ImportFrom(module='pip._internal.utils.temp_dir', names=[alias(name='global_tempdir_manager'), alias(name='tempdir_registry')], level=0), ImportFrom(module='pip._internal.utils.virtualenv', names=[alias(name='running_under_virtualenv')], level=0), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='Command')], ctx=Load())), Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), ClassDef(name='Command', bases=[Name(id='CommandContextMixIn', ctx=Load())], keywords=[], body=[AnnAssign(target=Name(id='usage', ctx=Store()), annotation=Name(id='str', ctx=Load()), value=Constant(value=''), simple=1), AnnAssign(target=Name(id='ignore_require_venv', ctx=Store()), annotation=Name(id='bool', ctx=Load()), value=Constant(value=False), simple=1), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load())), arg(arg='summary', annotation=Name(id='str', ctx=Load())), arg(arg='isolated', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Store())], value=Name(id='name', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='summary', ctx=Store())], value=Name(id='summary', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='parser', ctx=Store())], value=Call(func=Name(id='ConfigOptionParser', ctx=Load()), args=[], keywords=[keyword(arg='usage', value=Attribute(value=Name(id='self', ctx=Load()), attr='usage', ctx=Load())), keyword(arg='prog', value=JoinedStr(values=[FormattedValue(value=Call(func=Name(id='get_prog', ctx=Load()), args=[], keywords=[]), conversion=-1), Constant(value=' '), FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1)])), keyword(arg='formatter', value=Call(func=Name(id='UpdatingDefaultsHelpFormatter', ctx=Load()), args=[], keywords=[])), keyword(arg='add_help_option', value=Constant(value=False)), keyword(arg='name', value=Name(id='name', ctx=Load())), keyword(arg='description', value=Attribute(value=Name(id='self', ctx=Load()), attr='__doc__', ctx=Load())), keyword(arg='isolated', value=Name(id='isolated', ctx=Load()))])), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='tempdir_registry', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TempDirRegistry', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0), Assign(targets=[Name(id='optgroup_name', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), attr='capitalize', ctx=Load()), args=[], keywords=[]), conversion=-1), Constant(value=' Options')])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Store())], value=Call(func=Attribute(value=Name(id='optparse', ctx=Load()), attr='OptionGroup', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='parser', ctx=Load()), Name(id='optgroup_name', ctx=Load())], keywords=[])), Assign(targets=[Name(id='gen_opts', ctx=Store())], value=Call(func=Attribute(value=Name(id='cmdoptions', ctx=Load()), attr='make_option_group', ctx=Load()), args=[Attribute(value=Name(id='cmdoptions', ctx=Load()), attr='general_group', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='parser', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='parser', ctx=Load()), attr='add_option_group', ctx=Load()), args=[Name(id='gen_opts', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='add_options', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='add_options', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='handle_pip_version_check', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='options', annotation=Name(id='Values', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        This is a no-op so that commands by default do not do the pip version\n        check.\n        ')), Assert(test=UnaryOp(op=Not(), operand=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='options', ctx=Load()), Constant(value='no_index')], keywords=[])))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='run', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='options', annotation=Name(id='Values', ctx=Load())), arg(arg='args', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Name(id='NotImplementedError', ctx=Load()))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='parse_args', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='args', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='parser', ctx=Load()), attr='parse_args', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='Values', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='main', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='args', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='main_context', ctx=Load()), args=[], keywords=[]))], body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_main', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[]))])], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='shutdown', ctx=Load()), args=[], keywords=[]))])], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='_main', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='args', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='tempdir_registry', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='enter_context', ctx=Load()), args=[Call(func=Name(id='tempdir_registry', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='enter_context', ctx=Load()), args=[Call(func=Name(id='global_tempdir_manager', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='options', ctx=Store()), Name(id='args', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='parse_args', ctx=Load()), args=[Name(id='args', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='verbosity', ctx=Store())], value=BinOp(left=Attribute(value=Name(id='options', ctx=Load()), attr='verbose', ctx=Load()), op=Sub(), right=Attribute(value=Name(id='options', ctx=Load()), attr='quiet', ctx=Load()))), Assign(targets=[Name(id='level_number', ctx=Store())], value=Call(func=Name(id='setup_logging', ctx=Load()), args=[], keywords=[keyword(arg='verbosity', value=Attribute(value=Name(id='self', ctx=Load()), attr='verbosity', ctx=Load())), keyword(arg='no_color', value=Attribute(value=Name(id='options', ctx=Load()), attr='no_color', ctx=Load())), keyword(arg='user_log_file', value=Attribute(value=Name(id='options', ctx=Load()), attr='log', ctx=Load()))])), Assign(targets=[Name(id='always_enabled_features', ctx=Store())], value=BinOp(left=Call(func=Name(id='set', ctx=Load()), args=[Attribute(value=Name(id='options', ctx=Load()), attr='features_enabled', ctx=Load())], keywords=[]), op=BitAnd(), right=Call(func=Name(id='set', ctx=Load()), args=[Attribute(value=Name(id='cmdoptions', ctx=Load()), attr='ALWAYS_ENABLED_FEATURES', ctx=Load())], keywords=[]))), If(test=Name(id='always_enabled_features', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='The following features are always enabled: %s. '), Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='always_enabled_features', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='options', ctx=Load()), attr='python', ctx=Load()), Compare(left=Constant(value='_PIP_RUNNING_IN_SUBPROCESS'), ops=[NotIn()], comparators=[Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='critical', ctx=Load()), args=[Constant(value='The --python option must be placed before the pip subcommand name')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='sys', ctx=Load()), attr='exit', ctx=Load()), args=[Name(id='ERROR', ctx=Load())], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='options', ctx=Load()), attr='no_input', ctx=Load()), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), slice=Constant(value='PIP_NO_INPUT'), ctx=Store())], value=Constant(value='1'))], orelse=[]), If(test=Attribute(value=Name(id='options', ctx=Load()), attr='exists_action', ctx=Load()), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), slice=Constant(value='PIP_EXISTS_ACTION'), ctx=Store())], value=Call(func=Attribute(value=Constant(value=' '), attr='join', ctx=Load()), args=[Attribute(value=Name(id='options', ctx=Load()), attr='exists_action', ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='options', ctx=Load()), attr='require_venv', ctx=Load()), UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='ignore_require_venv', ctx=Load()))]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='running_under_virtualenv', ctx=Load()), args=[], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='critical', ctx=Load()), args=[Constant(value='Could not find an activated virtualenv (required).')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='sys', ctx=Load()), attr='exit', ctx=Load()), args=[Name(id='VIRTUALENV_NOT_FOUND', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), If(test=Attribute(value=Name(id='options', ctx=Load()), attr='cache_dir', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='options', ctx=Load()), attr='cache_dir', ctx=Store())], value=Call(func=Name(id='normalize_path', ctx=Load()), args=[Attribute(value=Name(id='options', ctx=Load()), attr='cache_dir', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='check_path_owner', ctx=Load()), args=[Attribute(value=Name(id='options', ctx=Load()), attr='cache_dir', ctx=Load())], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value="The directory '%s' or its parent directory is not owned or is not writable by the current user. The cache has been disabled. Check the permissions and owner of that directory. If executing pip with sudo, you should use sudo's -H flag."), Attribute(value=Name(id='options', ctx=Load()), attr='cache_dir', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='options', ctx=Load()), attr='cache_dir', ctx=Store())], value=Constant(value=None))], orelse=[])], orelse=[]), FunctionDef(name='intercepts_unhandled_exc', args=arguments(posonlyargs=[], args=[arg(arg='run_func', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='exc_logging_wrapper', args=arguments(posonlyargs=[], args=[], vararg=arg(arg='args', annotation=Name(id='Any', ctx=Load())), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Name(id='status', ctx=Store())], value=Call(func=Name(id='run_func', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[])), Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='status', ctx=Load()), Name(id='int', ctx=Load())], keywords=[])), Return(value=Name(id='status', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='DiagnosticPipError', ctx=Load()), name='exc', body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='error', ctx=Load()), args=[Constant(value='%s'), Name(id='exc', ctx=Load())], keywords=[keyword(arg='extra', value=Dict(keys=[Constant(value='rich')], values=[Constant(value=True)]))])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Exception information:')], keywords=[keyword(arg='exc_info', value=Constant(value=True))])), Return(value=Name(id='ERROR', ctx=Load()))]), ExceptHandler(type=Name(id='PreviousBuildDirError', ctx=Load()), name='exc', body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='critical', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='exc', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Exception information:')], keywords=[keyword(arg='exc_info', value=Constant(value=True))])), Return(value=Name(id='PREVIOUS_BUILD_DIR_ERROR', ctx=Load()))]), ExceptHandler(type=Tuple(elts=[Name(id='InstallationError', ctx=Load()), Name(id='UninstallationError', ctx=Load()), Name(id='BadCommand', ctx=Load()), Name(id='NetworkConnectionError', ctx=Load())], ctx=Load()), name='exc', body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='critical', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='exc', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Exception information:')], keywords=[keyword(arg='exc_info', value=Constant(value=True))])), Return(value=Name(id='ERROR', ctx=Load()))]), ExceptHandler(type=Name(id='CommandError', ctx=Load()), name='exc', body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='critical', ctx=Load()), args=[Constant(value='%s'), Name(id='exc', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Exception information:')], keywords=[keyword(arg='exc_info', value=Constant(value=True))])), Return(value=Name(id='ERROR', ctx=Load()))]), ExceptHandler(type=Name(id='BrokenStdoutLoggingError', ctx=Load()), body=[Expr(value=Call(func=Name(id='print', ctx=Load()), args=[Constant(value='ERROR: Pipe to stdout was broken')], keywords=[keyword(arg='file', value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()))])), If(test=Compare(left=Name(id='level_number', ctx=Load()), ops=[LtE()], comparators=[Attribute(value=Name(id='logging', ctx=Load()), attr='DEBUG', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='traceback', ctx=Load()), attr='print_exc', ctx=Load()), args=[], keywords=[keyword(arg='file', value=Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()))]))], orelse=[]), Return(value=Name(id='ERROR', ctx=Load()))]), ExceptHandler(type=Name(id='KeyboardInterrupt', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='critical', ctx=Load()), args=[Constant(value='Operation cancelled by user')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Exception information:')], keywords=[keyword(arg='exc_info', value=Constant(value=True))])), Return(value=Name(id='ERROR', ctx=Load()))]), ExceptHandler(type=Name(id='BaseException', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='critical', ctx=Load()), args=[Constant(value='Exception:')], keywords=[keyword(arg='exc_info', value=Constant(value=True))])), Return(value=Name(id='UNKNOWN_ERROR', ctx=Load()))])], orelse=[], finalbody=[])], decorator_list=[Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='wraps', ctx=Load()), args=[Name(id='run_func', ctx=Load())], keywords=[])], returns=Name(id='int', ctx=Load())), Return(value=Name(id='exc_logging_wrapper', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Name(id='int', ctx=Load())], ctx=Load()), ctx=Load())), Try(body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='options', ctx=Load()), attr='debug_mode', ctx=Load())), body=[Assign(targets=[Name(id='run', ctx=Store())], value=Call(func=Name(id='intercepts_unhandled_exc', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='run', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='run', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='run', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='rich_traceback', ctx=Load()), attr='install', ctx=Load()), args=[], keywords=[keyword(arg='show_locals', value=Constant(value=True))]))]), Return(value=Call(func=Name(id='run', ctx=Load()), args=[Name(id='options', ctx=Load()), Name(id='args', ctx=Load())], keywords=[]))], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='handle_pip_version_check', ctx=Load()), args=[Name(id='options', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Name(id='int', ctx=Load()))], decorator_list=[])], type_ignores=[])