Module(body=[Expr(value=Constant(value="Contains the Command base classes that depend on PipSession.\n\nThe classes in this module are in a separate module so the commands not\nneeding download / PackageFinder capability don't unnecessarily import the\nPackageFinder machinery and all its vendored dependencies, etc.\n")), Import(names=[alias(name='logging')]), Import(names=[alias(name='os')]), Import(names=[alias(name='sys')]), ImportFrom(module='functools', names=[alias(name='partial')], level=0), ImportFrom(module='optparse', names=[alias(name='Values')], level=0), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING'), alias(name='Any'), alias(name='List'), alias(name='Optional'), alias(name='Tuple')], level=0), ImportFrom(module='pip._internal.cache', names=[alias(name='WheelCache')], level=0), ImportFrom(module='pip._internal.cli', names=[alias(name='cmdoptions')], level=0), ImportFrom(module='pip._internal.cli.base_command', names=[alias(name='Command')], level=0), ImportFrom(module='pip._internal.cli.command_context', names=[alias(name='CommandContextMixIn')], level=0), ImportFrom(module='pip._internal.exceptions', names=[alias(name='CommandError'), alias(name='PreviousBuildDirError')], level=0), ImportFrom(module='pip._internal.index.collector', names=[alias(name='LinkCollector')], level=0), ImportFrom(module='pip._internal.index.package_finder', names=[alias(name='PackageFinder')], level=0), ImportFrom(module='pip._internal.models.selection_prefs', names=[alias(name='SelectionPreferences')], level=0), ImportFrom(module='pip._internal.models.target_python', names=[alias(name='TargetPython')], level=0), ImportFrom(module='pip._internal.network.session', names=[alias(name='PipSession')], level=0), ImportFrom(module='pip._internal.operations.build.build_tracker', names=[alias(name='BuildTracker')], level=0), ImportFrom(module='pip._internal.operations.prepare', names=[alias(name='RequirementPreparer')], level=0), ImportFrom(module='pip._internal.req.constructors', names=[alias(name='install_req_from_editable'), alias(name='install_req_from_line'), alias(name='install_req_from_parsed_requirement'), alias(name='install_req_from_req_string')], level=0), ImportFrom(module='pip._internal.req.req_file', names=[alias(name='parse_requirements')], level=0), ImportFrom(module='pip._internal.req.req_install', names=[alias(name='InstallRequirement')], level=0), ImportFrom(module='pip._internal.resolution.base', names=[alias(name='BaseResolver')], level=0), ImportFrom(module='pip._internal.self_outdated_check', names=[alias(name='pip_self_version_check')], level=0), ImportFrom(module='pip._internal.utils.temp_dir', names=[alias(name='TempDirectory'), alias(name='TempDirectoryTypeRegistry'), alias(name='tempdir_kinds')], level=0), ImportFrom(module='pip._internal.utils.virtualenv', names=[alias(name='running_under_virtualenv')], level=0), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='ssl', names=[alias(name='SSLContext')], level=0)], orelse=[]), Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), FunctionDef(name='_create_truststore_ssl_context', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), ops=[Lt()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=10)], ctx=Load())]), body=[Raise(exc=Call(func=Name(id='CommandError', ctx=Load()), args=[Constant(value='The truststore feature is only available for Python 3.10+')], keywords=[]))], orelse=[]), Try(body=[Import(names=[alias(name='ssl')])], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='Disabling truststore since ssl support is missing')], keywords=[])), Return(value=Constant(value=None))])], orelse=[], finalbody=[]), Try(body=[ImportFrom(module='pip._vendor', names=[alias(name='truststore')], level=0)], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), name='e', body=[Raise(exc=Call(func=Name(id='CommandError', ctx=Load()), args=[JoinedStr(values=[Constant(value='The truststore feature is unavailable: '), FormattedValue(value=Name(id='e', ctx=Load()), conversion=-1)])], keywords=[]))])], orelse=[], finalbody=[]), Return(value=Call(func=Attribute(value=Name(id='truststore', ctx=Load()), attr='SSLContext', ctx=Load()), args=[Attribute(value=Name(id='ssl', ctx=Load()), attr='PROTOCOL_TLS_CLIENT', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Constant(value='SSLContext'), ctx=Load())), ClassDef(name='SessionCommandMixin', bases=[Name(id='CommandContextMixIn', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    A class mixin for command classes needing _build_session().\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_session', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='PipSession', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0)], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_get_index_urls', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='options', annotation=Name(id='Values', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return a list of index urls from user-provided options.')), Assign(targets=[Name(id='index_urls', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='options', ctx=Load()), Constant(value='no_index'), Constant(value=False)], keywords=[])), body=[Assign(targets=[Name(id='url', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='options', ctx=Load()), Constant(value='index_url'), Constant(value=None)], keywords=[])), If(test=Name(id='url', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='index_urls', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Assign(targets=[Name(id='urls', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='options', ctx=Load()), Constant(value='extra_index_urls'), Constant(value=None)], keywords=[])), If(test=Name(id='urls', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='index_urls', ctx=Load()), attr='extend', ctx=Load()), args=[Name(id='urls', ctx=Load())], keywords=[]))], orelse=[]), Return(value=BoolOp(op=Or(), values=[Name(id='index_urls', ctx=Load()), Constant(value=None)]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='get_default_session', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='options', annotation=Name(id='Values', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get a default-managed session.')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_session', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_session', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='enter_context', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_build_session', ctx=Load()), args=[Name(id='options', ctx=Load())], keywords=[])], keywords=[])), Assert(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_session', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]))], orelse=[]), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_session', ctx=Load()))], decorator_list=[], returns=Name(id='PipSession', ctx=Load())), FunctionDef(name='_build_session', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='options', annotation=Name(id='Values', ctx=Load())), arg(arg='retries', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='timeout', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), arg(arg='fallback_to_certifi', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=False)]), body=[Assign(targets=[Name(id='cache_dir', ctx=Store())], value=Attribute(value=Name(id='options', ctx=Load()), attr='cache_dir', ctx=Load())), Assert(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Name(id='cache_dir', ctx=Load())), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isabs', ctx=Load()), args=[Name(id='cache_dir', ctx=Load())], keywords=[])])), If(test=Compare(left=Constant(value='truststore'), ops=[In()], comparators=[Attribute(value=Name(id='options', ctx=Load()), attr='features_enabled', ctx=Load())]), body=[Try(body=[Assign(targets=[Name(id='ssl_context', ctx=Store())], value=Call(func=Name(id='_create_truststore_ssl_context', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Name(id='fallback_to_certifi', ctx=Load())), body=[Raise()], orelse=[]), Assign(targets=[Name(id='ssl_context', ctx=Store())], value=Constant(value=None))])], orelse=[], finalbody=[])], orelse=[Assign(targets=[Name(id='ssl_context', ctx=Store())], value=Constant(value=None))]), Assign(targets=[Name(id='session', ctx=Store())], value=Call(func=Name(id='PipSession', ctx=Load()), args=[], keywords=[keyword(arg='cache', value=IfExp(test=Name(id='cache_dir', ctx=Load()), body=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='cache_dir', ctx=Load()), Constant(value='http-v2')], keywords=[]), orelse=Constant(value=None))), keyword(arg='retries', value=IfExp(test=Compare(left=Name(id='retries', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Name(id='retries', ctx=Load()), orelse=Attribute(value=Name(id='options', ctx=Load()), attr='retries', ctx=Load()))), keyword(arg='trusted_hosts', value=Attribute(value=Name(id='options', ctx=Load()), attr='trusted_hosts', ctx=Load())), keyword(arg='index_urls', value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_index_urls', ctx=Load()), args=[Name(id='options', ctx=Load())], keywords=[])), keyword(arg='ssl_context', value=Name(id='ssl_context', ctx=Load()))])), If(test=Attribute(value=Name(id='options', ctx=Load()), attr='cert', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='session', ctx=Load()), attr='verify', ctx=Store())], value=Attribute(value=Name(id='options', ctx=Load()), attr='cert', ctx=Load()))], orelse=[]), If(test=Attribute(value=Name(id='options', ctx=Load()), attr='client_cert', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='session', ctx=Load()), attr='cert', ctx=Store())], value=Attribute(value=Name(id='options', ctx=Load()), attr='client_cert', ctx=Load()))], orelse=[]), If(test=BoolOp(op=Or(), values=[Attribute(value=Name(id='options', ctx=Load()), attr='timeout', ctx=Load()), Name(id='timeout', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='session', ctx=Load()), attr='timeout', ctx=Store())], value=IfExp(test=Compare(left=Name(id='timeout', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Name(id='timeout', ctx=Load()), orelse=Attribute(value=Name(id='options', ctx=Load()), attr='timeout', ctx=Load())))], orelse=[]), If(test=Attribute(value=Name(id='options', ctx=Load()), attr='proxy', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='session', ctx=Load()), attr='proxies', ctx=Store())], value=Dict(keys=[Constant(value='http'), Constant(value='https')], values=[Attribute(value=Name(id='options', ctx=Load()), attr='proxy', ctx=Load()), Attribute(value=Name(id='options', ctx=Load()), attr='proxy', ctx=Load())]))], orelse=[]), Assign(targets=[Attribute(value=Attribute(value=Name(id='session', ctx=Load()), attr='auth', ctx=Load()), attr='prompting', ctx=Store())], value=UnaryOp(op=Not(), operand=Attribute(value=Name(id='options', ctx=Load()), attr='no_input', ctx=Load()))), Assign(targets=[Attribute(value=Attribute(value=Name(id='session', ctx=Load()), attr='auth', ctx=Load()), attr='keyring_provider', ctx=Store())], value=Attribute(value=Name(id='options', ctx=Load()), attr='keyring_provider', ctx=Load())), Return(value=Name(id='session', ctx=Load()))], decorator_list=[], returns=Name(id='PipSession', ctx=Load()))], decorator_list=[]), ClassDef(name='IndexGroupCommand', bases=[Name(id='Command', ctx=Load()), Name(id='SessionCommandMixin', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Abstract base class for commands with the index_group options.\n\n    This also corresponds to the commands that permit the pip version check.\n    ')), FunctionDef(name='handle_pip_version_check', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='options', annotation=Name(id='Values', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Do the pip version check if not disabled.\n\n        This overrides the default behavior of not doing the check.\n        ')), Assert(test=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='options', ctx=Load()), Constant(value='no_index')], keywords=[])), If(test=BoolOp(op=Or(), values=[Attribute(value=Name(id='options', ctx=Load()), attr='disable_pip_version_check', ctx=Load()), Attribute(value=Name(id='options', ctx=Load()), attr='no_index', ctx=Load())]), body=[Return()], orelse=[]), Assign(targets=[Name(id='session', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_build_session', ctx=Load()), args=[Name(id='options', ctx=Load())], keywords=[keyword(arg='retries', value=Constant(value=0)), keyword(arg='timeout', value=Call(func=Name(id='min', ctx=Load()), args=[Constant(value=5), Attribute(value=Name(id='options', ctx=Load()), attr='timeout', ctx=Load())], keywords=[])), keyword(arg='fallback_to_certifi', value=Constant(value=True))])), With(items=[withitem(context_expr=Name(id='session', ctx=Load()))], body=[Expr(value=Call(func=Name(id='pip_self_version_check', ctx=Load()), args=[Name(id='session', ctx=Load()), Name(id='options', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), Assign(targets=[Name(id='KEEPABLE_TEMPDIR_TYPES', ctx=Store())], value=List(elts=[Attribute(value=Name(id='tempdir_kinds', ctx=Load()), attr='BUILD_ENV', ctx=Load()), Attribute(value=Name(id='tempdir_kinds', ctx=Load()), attr='EPHEM_WHEEL_CACHE', ctx=Load()), Attribute(value=Name(id='tempdir_kinds', ctx=Load()), attr='REQ_BUILD', ctx=Load())], ctx=Load())), FunctionDef(name='warn_if_run_as_root', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Output a warning for sudo users on Unix.\n\n    In a virtual environment, sudo pip still writes to virtualenv.\n    On Windows, users may run pip as Administrator without issues.\n    This warning only applies to Unix root users outside of virtualenv.\n    ')), If(test=Call(func=Name(id='running_under_virtualenv', ctx=Load()), args=[], keywords=[]), body=[Return()], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='os', ctx=Load()), Constant(value='getuid')], keywords=[])), body=[Return()], orelse=[]), If(test=BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), ops=[Eq()], comparators=[Constant(value='win32')]), Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), ops=[Eq()], comparators=[Constant(value='cygwin')])]), body=[Return()], orelse=[]), If(test=Compare(left=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getuid', ctx=Load()), args=[], keywords=[]), ops=[NotEq()], comparators=[Constant(value=0)]), body=[Return()], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value="Running pip as the 'root' user can result in broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv")], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='with_cleanup', args=arguments(posonlyargs=[], args=[arg(arg='func', annotation=Name(id='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Decorator for common logic related to managing temporary\n    directories.\n    ')), FunctionDef(name='configure_tempdir_registry', args=arguments(posonlyargs=[], args=[arg(arg='registry', annotation=Name(id='TempDirectoryTypeRegistry', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='t', ctx=Store()), iter=Name(id='KEEPABLE_TEMPDIR_TYPES', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='registry', ctx=Load()), attr='set_delete', ctx=Load()), args=[Name(id='t', ctx=Load()), Constant(value=False)], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='wrapper', args=arguments(posonlyargs=[], args=[arg(arg='self', annotation=Name(id='RequirementCommand', ctx=Load())), arg(arg='options', annotation=Name(id='Values', ctx=Load())), arg(arg='args', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='tempdir_registry', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), If(test=Attribute(value=Name(id='options', ctx=Load()), attr='no_clean', ctx=Load()), body=[Expr(value=Call(func=Name(id='configure_tempdir_registry', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='tempdir_registry', ctx=Load())], keywords=[]))], orelse=[]), Try(body=[Return(value=Call(func=Name(id='func', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='options', ctx=Load()), Name(id='args', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='PreviousBuildDirError', ctx=Load()), body=[Expr(value=Call(func=Name(id='configure_tempdir_registry', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='tempdir_registry', ctx=Load())], keywords=[])), Raise()])], orelse=[], finalbody=[])], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='int', ctx=Load()), ctx=Load())), Return(value=Name(id='wrapper', ctx=Load()))], decorator_list=[], returns=Name(id='Any', ctx=Load())), ClassDef(name='RequirementCommand', bases=[Name(id='IndexGroupCommand', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args', annotation=Name(id='Any', ctx=Load())), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kw', annotation=Name(id='Any', ctx=Load())), defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kw', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='cmd_opts', ctx=Load()), attr='add_option', ctx=Load()), args=[Call(func=Attribute(value=Name(id='cmdoptions', ctx=Load()), attr='no_clean', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='determine_resolver_variant', args=arguments(posonlyargs=[], args=[arg(arg='options', annotation=Name(id='Values', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Determines which resolver should be used, based on the given options.')), If(test=Compare(left=Constant(value='legacy-resolver'), ops=[In()], comparators=[Attribute(value=Name(id='options', ctx=Load()), attr='deprecated_features_enabled', ctx=Load())]), body=[Return(value=Constant(value='legacy'))], orelse=[]), Return(value=Constant(value='resolvelib'))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='make_requirement_preparer', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='temp_build_dir', annotation=Name(id='TempDirectory', ctx=Load())), arg(arg='options', annotation=Name(id='Values', ctx=Load())), arg(arg='build_tracker', annotation=Name(id='BuildTracker', ctx=Load())), arg(arg='session', annotation=Name(id='PipSession', ctx=Load())), arg(arg='finder', annotation=Name(id='PackageFinder', ctx=Load())), arg(arg='use_user_site', annotation=Name(id='bool', ctx=Load())), arg(arg='download_dir', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='verbosity', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=0)]), body=[Expr(value=Constant(value='\n        Create a RequirementPreparer instance for the given parameters.\n        ')), Assign(targets=[Name(id='temp_build_dir_path', ctx=Store())], value=Attribute(value=Name(id='temp_build_dir', ctx=Load()), attr='path', ctx=Load())), Assert(test=Compare(left=Name(id='temp_build_dir_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Name(id='legacy_resolver', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='resolver_variant', ctx=Store())], value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='determine_resolver_variant', ctx=Load()), args=[Name(id='options', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='resolver_variant', ctx=Load()), ops=[Eq()], comparators=[Constant(value='resolvelib')]), body=[Assign(targets=[Name(id='lazy_wheel', ctx=Store())], value=Compare(left=Constant(value='fast-deps'), ops=[In()], comparators=[Attribute(value=Name(id='options', ctx=Load()), attr='features_enabled', ctx=Load())])), If(test=Name(id='lazy_wheel', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='pip is using lazily downloaded wheels using HTTP range requests to obtain dependency information. This experimental feature is enabled through --use-feature=fast-deps and it is not ready for production.')], keywords=[]))], orelse=[])], orelse=[Assign(targets=[Name(id='legacy_resolver', ctx=Store())], value=Constant(value=True)), Assign(targets=[Name(id='lazy_wheel', ctx=Store())], value=Constant(value=False)), If(test=Compare(left=Constant(value='fast-deps'), ops=[In()], comparators=[Attribute(value=Name(id='options', ctx=Load()), attr='features_enabled', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='fast-deps has no effect when used with the legacy resolver.')], keywords=[]))], orelse=[])]), Return(value=Call(func=Name(id='RequirementPreparer', ctx=Load()), args=[], keywords=[keyword(arg='build_dir', value=Name(id='temp_build_dir_path', ctx=Load())), keyword(arg='src_dir', value=Attribute(value=Name(id='options', ctx=Load()), attr='src_dir', ctx=Load())), keyword(arg='download_dir', value=Name(id='download_dir', ctx=Load())), keyword(arg='build_isolation', value=Attribute(value=Name(id='options', ctx=Load()), attr='build_isolation', ctx=Load())), keyword(arg='check_build_deps', value=Attribute(value=Name(id='options', ctx=Load()), attr='check_build_deps', ctx=Load())), keyword(arg='build_tracker', value=Name(id='build_tracker', ctx=Load())), keyword(arg='session', value=Name(id='session', ctx=Load())), keyword(arg='progress_bar', value=Attribute(value=Name(id='options', ctx=Load()), attr='progress_bar', ctx=Load())), keyword(arg='finder', value=Name(id='finder', ctx=Load())), keyword(arg='require_hashes', value=Attribute(value=Name(id='options', ctx=Load()), attr='require_hashes', ctx=Load())), keyword(arg='use_user_site', value=Name(id='use_user_site', ctx=Load())), keyword(arg='lazy_wheel', value=Name(id='lazy_wheel', ctx=Load())), keyword(arg='verbosity', value=Name(id='verbosity', ctx=Load())), keyword(arg='legacy_resolver', value=Name(id='legacy_resolver', ctx=Load()))]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Name(id='RequirementPreparer', ctx=Load())), FunctionDef(name='make_resolver', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='preparer', annotation=Name(id='RequirementPreparer', ctx=Load())), arg(arg='finder', annotation=Name(id='PackageFinder', ctx=Load())), arg(arg='options', annotation=Name(id='Values', ctx=Load())), arg(arg='wheel_cache', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='WheelCache', ctx=Load()), ctx=Load())), arg(arg='use_user_site', annotation=Name(id='bool', ctx=Load())), arg(arg='ignore_installed', annotation=Name(id='bool', ctx=Load())), arg(arg='ignore_requires_python', annotation=Name(id='bool', ctx=Load())), arg(arg='force_reinstall', annotation=Name(id='bool', ctx=Load())), arg(arg='upgrade_strategy', annotation=Name(id='str', ctx=Load())), arg(arg='use_pep517', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load())), arg(arg='py_version_info', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='int', ctx=Load()), Constant(value=Ellipsis)], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=False), Constant(value=True), Constant(value=False), Constant(value=False), Constant(value='to-satisfy-only'), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='\n        Create a Resolver instance for the given parameters.\n        ')), Assign(targets=[Name(id='make_install_req', ctx=Store())], value=Call(func=Name(id='partial', ctx=Load()), args=[Name(id='install_req_from_req_string', ctx=Load())], keywords=[keyword(arg='isolated', value=Attribute(value=Name(id='options', ctx=Load()), attr='isolated_mode', ctx=Load())), keyword(arg='use_pep517', value=Name(id='use_pep517', ctx=Load()))])), Assign(targets=[Name(id='resolver_variant', ctx=Store())], value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='determine_resolver_variant', ctx=Load()), args=[Name(id='options', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='resolver_variant', ctx=Load()), ops=[Eq()], comparators=[Constant(value='resolvelib')]), body=[Import(names=[alias(name='pip._internal.resolution.resolvelib.resolver')]), Return(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Attribute(value=Attribute(value=Name(id='pip', ctx=Load()), attr='_internal', ctx=Load()), attr='resolution', ctx=Load()), attr='resolvelib', ctx=Load()), attr='resolver', ctx=Load()), attr='Resolver', ctx=Load()), args=[], keywords=[keyword(arg='preparer', value=Name(id='preparer', ctx=Load())), keyword(arg='finder', value=Name(id='finder', ctx=Load())), keyword(arg='wheel_cache', value=Name(id='wheel_cache', ctx=Load())), keyword(arg='make_install_req', value=Name(id='make_install_req', ctx=Load())), keyword(arg='use_user_site', value=Name(id='use_user_site', ctx=Load())), keyword(arg='ignore_dependencies', value=Attribute(value=Name(id='options', ctx=Load()), attr='ignore_dependencies', ctx=Load())), keyword(arg='ignore_installed', value=Name(id='ignore_installed', ctx=Load())), keyword(arg='ignore_requires_python', value=Name(id='ignore_requires_python', ctx=Load())), keyword(arg='force_reinstall', value=Name(id='force_reinstall', ctx=Load())), keyword(arg='upgrade_strategy', value=Name(id='upgrade_strategy', ctx=Load())), keyword(arg='py_version_info', value=Name(id='py_version_info', ctx=Load()))]))], orelse=[]), Import(names=[alias(name='pip._internal.resolution.legacy.resolver')]), Return(value=Call(func=Attribute(value=Attribute(value=Attribute(value=Attribute(value=Attribute(value=Name(id='pip', ctx=Load()), attr='_internal', ctx=Load()), attr='resolution', ctx=Load()), attr='legacy', ctx=Load()), attr='resolver', ctx=Load()), attr='Resolver', ctx=Load()), args=[], keywords=[keyword(arg='preparer', value=Name(id='preparer', ctx=Load())), keyword(arg='finder', value=Name(id='finder', ctx=Load())), keyword(arg='wheel_cache', value=Name(id='wheel_cache', ctx=Load())), keyword(arg='make_install_req', value=Name(id='make_install_req', ctx=Load())), keyword(arg='use_user_site', value=Name(id='use_user_site', ctx=Load())), keyword(arg='ignore_dependencies', value=Attribute(value=Name(id='options', ctx=Load()), attr='ignore_dependencies', ctx=Load())), keyword(arg='ignore_installed', value=Name(id='ignore_installed', ctx=Load())), keyword(arg='ignore_requires_python', value=Name(id='ignore_requires_python', ctx=Load())), keyword(arg='force_reinstall', value=Name(id='force_reinstall', ctx=Load())), keyword(arg='upgrade_strategy', value=Name(id='upgrade_strategy', ctx=Load())), keyword(arg='py_version_info', value=Name(id='py_version_info', ctx=Load()))]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Name(id='BaseResolver', ctx=Load())), FunctionDef(name='get_requirements', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='args', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='options', annotation=Name(id='Values', ctx=Load())), arg(arg='finder', annotation=Name(id='PackageFinder', ctx=Load())), arg(arg='session', annotation=Name(id='PipSession', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Parse command-line arguments into the corresponding requirements.\n        ')), AnnAssign(target=Name(id='requirements', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='InstallRequirement', ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), For(target=Name(id='filename', ctx=Store()), iter=Attribute(value=Name(id='options', ctx=Load()), attr='constraints', ctx=Load()), body=[For(target=Name(id='parsed_req', ctx=Store()), iter=Call(func=Name(id='parse_requirements', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[keyword(arg='constraint', value=Constant(value=True)), keyword(arg='finder', value=Name(id='finder', ctx=Load())), keyword(arg='options', value=Name(id='options', ctx=Load())), keyword(arg='session', value=Name(id='session', ctx=Load()))]), body=[Assign(targets=[Name(id='req_to_add', ctx=Store())], value=Call(func=Name(id='install_req_from_parsed_requirement', ctx=Load()), args=[Name(id='parsed_req', ctx=Load())], keywords=[keyword(arg='isolated', value=Attribute(value=Name(id='options', ctx=Load()), attr='isolated_mode', ctx=Load())), keyword(arg='user_supplied', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='requirements', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='req_to_add', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), For(target=Name(id='req', ctx=Store()), iter=Name(id='args', ctx=Load()), body=[Assign(targets=[Name(id='req_to_add', ctx=Store())], value=Call(func=Name(id='install_req_from_line', ctx=Load()), args=[Name(id='req', ctx=Load())], keywords=[keyword(arg='comes_from', value=Constant(value=None)), keyword(arg='isolated', value=Attribute(value=Name(id='options', ctx=Load()), attr='isolated_mode', ctx=Load())), keyword(arg='use_pep517', value=Attribute(value=Name(id='options', ctx=Load()), attr='use_pep517', ctx=Load())), keyword(arg='user_supplied', value=Constant(value=True)), keyword(arg='config_settings', value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='options', ctx=Load()), Constant(value='config_settings'), Constant(value=None)], keywords=[]))])), Expr(value=Call(func=Attribute(value=Name(id='requirements', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='req_to_add', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='req', ctx=Store()), iter=Attribute(value=Name(id='options', ctx=Load()), attr='editables', ctx=Load()), body=[Assign(targets=[Name(id='req_to_add', ctx=Store())], value=Call(func=Name(id='install_req_from_editable', ctx=Load()), args=[Name(id='req', ctx=Load())], keywords=[keyword(arg='user_supplied', value=Constant(value=True)), keyword(arg='isolated', value=Attribute(value=Name(id='options', ctx=Load()), attr='isolated_mode', ctx=Load())), keyword(arg='use_pep517', value=Attribute(value=Name(id='options', ctx=Load()), attr='use_pep517', ctx=Load())), keyword(arg='config_settings', value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='options', ctx=Load()), Constant(value='config_settings'), Constant(value=None)], keywords=[]))])), Expr(value=Call(func=Attribute(value=Name(id='requirements', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='req_to_add', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='filename', ctx=Store()), iter=Attribute(value=Name(id='options', ctx=Load()), attr='requirements', ctx=Load()), body=[For(target=Name(id='parsed_req', ctx=Store()), iter=Call(func=Name(id='parse_requirements', ctx=Load()), args=[Name(id='filename', ctx=Load())], keywords=[keyword(arg='finder', value=Name(id='finder', ctx=Load())), keyword(arg='options', value=Name(id='options', ctx=Load())), keyword(arg='session', value=Name(id='session', ctx=Load()))]), body=[Assign(targets=[Name(id='req_to_add', ctx=Store())], value=Call(func=Name(id='install_req_from_parsed_requirement', ctx=Load()), args=[Name(id='parsed_req', ctx=Load())], keywords=[keyword(arg='isolated', value=Attribute(value=Name(id='options', ctx=Load()), attr='isolated_mode', ctx=Load())), keyword(arg='use_pep517', value=Attribute(value=Name(id='options', ctx=Load()), attr='use_pep517', ctx=Load())), keyword(arg='user_supplied', value=Constant(value=True)), keyword(arg='config_settings', value=IfExp(test=Attribute(value=Name(id='parsed_req', ctx=Load()), attr='options', ctx=Load()), body=Call(func=Attribute(value=Attribute(value=Name(id='parsed_req', ctx=Load()), attr='options', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='config_settings')], keywords=[]), orelse=Constant(value=None)))])), Expr(value=Call(func=Attribute(value=Name(id='requirements', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='req_to_add', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), If(test=Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=Attribute(value=Name(id='req', ctx=Load()), attr='has_hash_options', ctx=Load()), generators=[comprehension(target=Name(id='req', ctx=Store()), iter=Name(id='requirements', ctx=Load()), ifs=[], is_async=0)])], keywords=[]), body=[Assign(targets=[Attribute(value=Name(id='options', ctx=Load()), attr='require_hashes', ctx=Store())], value=Constant(value=True))], orelse=[]), If(test=UnaryOp(op=Not(), operand=BoolOp(op=Or(), values=[Name(id='args', ctx=Load()), Attribute(value=Name(id='options', ctx=Load()), attr='editables', ctx=Load()), Attribute(value=Name(id='options', ctx=Load()), attr='requirements', ctx=Load())])), body=[Assign(targets=[Name(id='opts', ctx=Store())], value=Dict(keys=[Constant(value='name')], values=[Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load())])), If(test=Attribute(value=Name(id='options', ctx=Load()), attr='find_links', ctx=Load()), body=[Raise(exc=Call(func=Name(id='CommandError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='You must give at least one requirement to {name} (maybe you meant "pip {name} {links}"?)'), attr='format', ctx=Load()), args=[], keywords=[keyword(value=Call(func=Name(id='dict', ctx=Load()), args=[Name(id='opts', ctx=Load())], keywords=[keyword(arg='links', value=Call(func=Attribute(value=Constant(value=' '), attr='join', ctx=Load()), args=[Attribute(value=Name(id='options', ctx=Load()), attr='find_links', ctx=Load())], keywords=[]))]))])], keywords=[]))], orelse=[Raise(exc=Call(func=Name(id='CommandError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='You must give at least one requirement to {name} (see "pip help {name}")'), attr='format', ctx=Load()), args=[], keywords=[keyword(value=Name(id='opts', ctx=Load()))])], keywords=[]))])], orelse=[]), Return(value=Name(id='requirements', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='InstallRequirement', ctx=Load()), ctx=Load())), FunctionDef(name='trace_basic_info', args=arguments(posonlyargs=[], args=[arg(arg='finder', annotation=Name(id='PackageFinder', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Trace basic information about the provided objects.\n        ')), Assign(targets=[Name(id='search_scope', ctx=Store())], value=Attribute(value=Name(id='finder', ctx=Load()), attr='search_scope', ctx=Load())), Assign(targets=[Name(id='locations', ctx=Store())], value=Call(func=Attribute(value=Name(id='search_scope', ctx=Load()), attr='get_formatted_locations', ctx=Load()), args=[], keywords=[])), If(test=Name(id='locations', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Name(id='locations', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Constant(value=None)), FunctionDef(name='_build_package_finder', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='options', annotation=Name(id='Values', ctx=Load())), arg(arg='session', annotation=Name(id='PipSession', ctx=Load())), arg(arg='target_python', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='TargetPython', ctx=Load()), ctx=Load())), arg(arg='ignore_requires_python', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='bool', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='\n        Create a package finder appropriate to this requirement command.\n\n        :param ignore_requires_python: Whether to ignore incompatible\n            "Requires-Python" values in links. Defaults to False.\n        ')), Assign(targets=[Name(id='link_collector', ctx=Store())], value=Call(func=Attribute(value=Name(id='LinkCollector', ctx=Load()), attr='create', ctx=Load()), args=[Name(id='session', ctx=Load())], keywords=[keyword(arg='options', value=Name(id='options', ctx=Load()))])), Assign(targets=[Name(id='selection_prefs', ctx=Store())], value=Call(func=Name(id='SelectionPreferences', ctx=Load()), args=[], keywords=[keyword(arg='allow_yanked', value=Constant(value=True)), keyword(arg='format_control', value=Attribute(value=Name(id='options', ctx=Load()), attr='format_control', ctx=Load())), keyword(arg='allow_all_prereleases', value=Attribute(value=Name(id='options', ctx=Load()), attr='pre', ctx=Load())), keyword(arg='prefer_binary', value=Attribute(value=Name(id='options', ctx=Load()), attr='prefer_binary', ctx=Load())), keyword(arg='ignore_requires_python', value=Name(id='ignore_requires_python', ctx=Load()))])), Return(value=Call(func=Attribute(value=Name(id='PackageFinder', ctx=Load()), attr='create', ctx=Load()), args=[], keywords=[keyword(arg='link_collector', value=Name(id='link_collector', ctx=Load())), keyword(arg='selection_prefs', value=Name(id='selection_prefs', ctx=Load())), keyword(arg='target_python', value=Name(id='target_python', ctx=Load()))]))], decorator_list=[], returns=Name(id='PackageFinder', ctx=Load()))], decorator_list=[])], type_ignores=[])