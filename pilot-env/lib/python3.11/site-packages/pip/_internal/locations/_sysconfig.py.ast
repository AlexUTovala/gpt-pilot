Module(body=[Import(names=[alias(name='logging')]), Import(names=[alias(name='os')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='sysconfig')]), Import(names=[alias(name='typing')]), ImportFrom(module='pip._internal.exceptions', names=[alias(name='InvalidSchemeCombination'), alias(name='UserInstallationInvalid')], level=0), ImportFrom(module='pip._internal.models.scheme', names=[alias(name='SCHEME_KEYS'), alias(name='Scheme')], level=0), ImportFrom(module='pip._internal.utils.virtualenv', names=[alias(name='running_under_virtualenv')], level=0), ImportFrom(module='base', names=[alias(name='change_root'), alias(name='get_major_minor_version'), alias(name='is_osx_framework')], level=1), Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), Assign(targets=[Name(id='_AVAILABLE_SCHEMES', ctx=Store())], value=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Name(id='sysconfig', ctx=Load()), attr='get_scheme_names', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='_PREFERRED_SCHEME_API', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='sysconfig', ctx=Load()), Constant(value='get_preferred_scheme'), Constant(value=None)], keywords=[])), FunctionDef(name='_should_use_osx_framework_prefix', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Check for Apple's ``osx_framework_library`` scheme.\n\n    Python distributed by Apple's Command Line Tools has this special scheme\n    that's used when:\n\n    * This is a framework build.\n    * We are installing into the system prefix.\n\n    This does not account for ``pip install --prefix`` (also means we're not\n    installing to the system prefix), which should use ``posix_prefix``, but\n    logic here means ``_infer_prefix()`` outputs ``osx_framework_library``. But\n    since ``prefix`` is not available for ``sysconfig.get_default_scheme()``,\n    which is the stdlib replacement for ``_infer_prefix()``, presumably Apple\n    wouldn't be able to magically switch between ``osx_framework_library`` and\n    ``posix_prefix``. ``_infer_prefix()`` returning ``osx_framework_library``\n    means its behavior is consistent whether we use the stdlib implementation\n    or our own, and we deal with this special case in ``get_scheme()`` instead.\n    ")), Return(value=BoolOp(op=And(), values=[Compare(left=Constant(value='osx_framework_library'), ops=[In()], comparators=[Name(id='_AVAILABLE_SCHEMES', ctx=Load())]), UnaryOp(op=Not(), operand=Call(func=Name(id='running_under_virtualenv', ctx=Load()), args=[], keywords=[])), Call(func=Name(id='is_osx_framework', ctx=Load()), args=[], keywords=[])]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='_infer_prefix', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Try to find a prefix scheme for the current platform.\n\n    This tries:\n\n    * A special ``osx_framework_library`` for Python distributed by Apple\'s\n      Command Line Tools, when not running in a virtual environment.\n    * Implementation + OS, used by PyPy on Windows (``pypy_nt``).\n    * Implementation without OS, used by PyPy on POSIX (``pypy``).\n    * OS + "prefix", used by CPython on POSIX (``posix_prefix``).\n    * Just the OS name, used by CPython on Windows (``nt``).\n\n    If none of the above works, fall back to ``posix_prefix``.\n    ')), If(test=Name(id='_PREFERRED_SCHEME_API', ctx=Load()), body=[Return(value=Call(func=Name(id='_PREFERRED_SCHEME_API', ctx=Load()), args=[Constant(value='prefix')], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='_should_use_osx_framework_prefix', ctx=Load()), args=[], keywords=[]), body=[Return(value=Constant(value='osx_framework_library'))], orelse=[]), Assign(targets=[Name(id='implementation_suffixed', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='implementation', ctx=Load()), attr='name', ctx=Load()), conversion=-1), Constant(value='_'), FormattedValue(value=Attribute(value=Name(id='os', ctx=Load()), attr='name', ctx=Load()), conversion=-1)])), If(test=Compare(left=Name(id='implementation_suffixed', ctx=Load()), ops=[In()], comparators=[Name(id='_AVAILABLE_SCHEMES', ctx=Load())]), body=[Return(value=Name(id='implementation_suffixed', ctx=Load()))], orelse=[]), If(test=Compare(left=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='implementation', ctx=Load()), attr='name', ctx=Load()), ops=[In()], comparators=[Name(id='_AVAILABLE_SCHEMES', ctx=Load())]), body=[Return(value=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='implementation', ctx=Load()), attr='name', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='suffixed', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='os', ctx=Load()), attr='name', ctx=Load()), conversion=-1), Constant(value='_prefix')])), If(test=Compare(left=Name(id='suffixed', ctx=Load()), ops=[In()], comparators=[Name(id='_AVAILABLE_SCHEMES', ctx=Load())]), body=[Return(value=Name(id='suffixed', ctx=Load()))], orelse=[]), If(test=Compare(left=Attribute(value=Name(id='os', ctx=Load()), attr='name', ctx=Load()), ops=[In()], comparators=[Name(id='_AVAILABLE_SCHEMES', ctx=Load())]), body=[Return(value=Attribute(value=Name(id='os', ctx=Load()), attr='name', ctx=Load()))], orelse=[]), Return(value=Constant(value='posix_prefix'))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='_infer_user', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Try to find a user scheme for the current platform.')), If(test=Name(id='_PREFERRED_SCHEME_API', ctx=Load()), body=[Return(value=Call(func=Name(id='_PREFERRED_SCHEME_API', ctx=Load()), args=[Constant(value='user')], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Call(func=Name(id='is_osx_framework', ctx=Load()), args=[], keywords=[]), UnaryOp(op=Not(), operand=Call(func=Name(id='running_under_virtualenv', ctx=Load()), args=[], keywords=[]))]), body=[Assign(targets=[Name(id='suffixed', ctx=Store())], value=Constant(value='osx_framework_user'))], orelse=[Assign(targets=[Name(id='suffixed', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='os', ctx=Load()), attr='name', ctx=Load()), conversion=-1), Constant(value='_user')]))]), If(test=Compare(left=Name(id='suffixed', ctx=Load()), ops=[In()], comparators=[Name(id='_AVAILABLE_SCHEMES', ctx=Load())]), body=[Return(value=Name(id='suffixed', ctx=Load()))], orelse=[]), If(test=Compare(left=Constant(value='posix_user'), ops=[NotIn()], comparators=[Name(id='_AVAILABLE_SCHEMES', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='UserInstallationInvalid', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Constant(value='posix_user'))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='_infer_home', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Try to find a home for the current platform.')), If(test=Name(id='_PREFERRED_SCHEME_API', ctx=Load()), body=[Return(value=Call(func=Name(id='_PREFERRED_SCHEME_API', ctx=Load()), args=[Constant(value='home')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='suffixed', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='os', ctx=Load()), attr='name', ctx=Load()), conversion=-1), Constant(value='_home')])), If(test=Compare(left=Name(id='suffixed', ctx=Load()), ops=[In()], comparators=[Name(id='_AVAILABLE_SCHEMES', ctx=Load())]), body=[Return(value=Name(id='suffixed', ctx=Load()))], orelse=[]), Return(value=Constant(value='posix_home'))], decorator_list=[], returns=Name(id='str', ctx=Load())), Assign(targets=[Name(id='_HOME_KEYS', ctx=Store())], value=List(elts=[Constant(value='installed_base'), Constant(value='base'), Constant(value='installed_platbase'), Constant(value='platbase'), Constant(value='prefix'), Constant(value='exec_prefix')], ctx=Load())), If(test=Compare(left=Call(func=Attribute(value=Name(id='sysconfig', ctx=Load()), attr='get_config_var', ctx=Load()), args=[Constant(value='userbase')], keywords=[]), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='_HOME_KEYS', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='userbase')], keywords=[]))], orelse=[]), FunctionDef(name='get_scheme', args=arguments(posonlyargs=[], args=[arg(arg='dist_name', annotation=Name(id='str', ctx=Load())), arg(arg='user', annotation=Name(id='bool', ctx=Load())), arg(arg='home', annotation=Subscript(value=Attribute(value=Name(id='typing', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='root', annotation=Subscript(value=Attribute(value=Name(id='typing', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='isolated', annotation=Name(id='bool', ctx=Load())), arg(arg='prefix', annotation=Subscript(value=Attribute(value=Name(id='typing', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Constant(value=None), Constant(value=None), Constant(value=False), Constant(value=None)]), body=[Expr(value=Constant(value='\n    Get the "scheme" corresponding to the input parameters.\n\n    :param dist_name: the name of the package to retrieve the scheme for, used\n        in the headers scheme path\n    :param user: indicates to use the "user" scheme\n    :param home: indicates to use the "home" scheme\n    :param root: root under which other directories are re-based\n    :param isolated: ignored, but kept for distutils compatibility (where\n        this controls whether the user-site pydistutils.cfg is honored)\n    :param prefix: indicates to use the "prefix" scheme and provides the\n        base directory for the same\n    ')), If(test=BoolOp(op=And(), values=[Name(id='user', ctx=Load()), Name(id='prefix', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='InvalidSchemeCombination', ctx=Load()), args=[Constant(value='--user'), Constant(value='--prefix')], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Name(id='home', ctx=Load()), Name(id='prefix', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='InvalidSchemeCombination', ctx=Load()), args=[Constant(value='--home'), Constant(value='--prefix')], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='home', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='scheme_name', ctx=Store())], value=Call(func=Name(id='_infer_home', ctx=Load()), args=[], keywords=[]))], orelse=[If(test=Name(id='user', ctx=Load()), body=[Assign(targets=[Name(id='scheme_name', ctx=Store())], value=Call(func=Name(id='_infer_user', ctx=Load()), args=[], keywords=[]))], orelse=[Assign(targets=[Name(id='scheme_name', ctx=Store())], value=Call(func=Name(id='_infer_prefix', ctx=Load()), args=[], keywords=[]))])]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='prefix', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='scheme_name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='osx_framework_library')])]), body=[Assign(targets=[Name(id='scheme_name', ctx=Store())], value=Constant(value='posix_prefix'))], orelse=[]), If(test=Compare(left=Name(id='home', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='variables', ctx=Store())], value=DictComp(key=Name(id='k', ctx=Load()), value=Name(id='home', ctx=Load()), generators=[comprehension(target=Name(id='k', ctx=Store()), iter=Name(id='_HOME_KEYS', ctx=Load()), ifs=[], is_async=0)]))], orelse=[If(test=Compare(left=Name(id='prefix', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='variables', ctx=Store())], value=DictComp(key=Name(id='k', ctx=Load()), value=Name(id='prefix', ctx=Load()), generators=[comprehension(target=Name(id='k', ctx=Store()), iter=Name(id='_HOME_KEYS', ctx=Load()), ifs=[], is_async=0)]))], orelse=[Assign(targets=[Name(id='variables', ctx=Store())], value=Dict(keys=[], values=[]))])]), Assign(targets=[Name(id='paths', ctx=Store())], value=Call(func=Attribute(value=Name(id='sysconfig', ctx=Load()), attr='get_paths', ctx=Load()), args=[], keywords=[keyword(arg='scheme', value=Name(id='scheme_name', ctx=Load())), keyword(arg='vars', value=Name(id='variables', ctx=Load()))])), If(test=Call(func=Name(id='running_under_virtualenv', ctx=Load()), args=[], keywords=[]), body=[If(test=Name(id='user', ctx=Load()), body=[Assign(targets=[Name(id='base', ctx=Store())], value=Call(func=Attribute(value=Name(id='variables', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='userbase'), Attribute(value=Name(id='sys', ctx=Load()), attr='prefix', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='base', ctx=Store())], value=Call(func=Attribute(value=Name(id='variables', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='base'), Attribute(value=Name(id='sys', ctx=Load()), attr='prefix', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='python_xy', ctx=Store())], value=JoinedStr(values=[Constant(value='python'), FormattedValue(value=Call(func=Name(id='get_major_minor_version', ctx=Load()), args=[], keywords=[]), conversion=-1)])), Assign(targets=[Subscript(value=Name(id='paths', ctx=Load()), slice=Constant(value='include'), ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='base', ctx=Load()), Constant(value='include'), Constant(value='site'), Name(id='python_xy', ctx=Load())], keywords=[]))], orelse=[If(test=UnaryOp(op=Not(), operand=Name(id='dist_name', ctx=Load())), body=[Assign(targets=[Name(id='dist_name', ctx=Store())], value=Constant(value='UNKNOWN'))], orelse=[])]), Assign(targets=[Name(id='scheme', ctx=Store())], value=Call(func=Name(id='Scheme', ctx=Load()), args=[], keywords=[keyword(arg='platlib', value=Subscript(value=Name(id='paths', ctx=Load()), slice=Constant(value='platlib'), ctx=Load())), keyword(arg='purelib', value=Subscript(value=Name(id='paths', ctx=Load()), slice=Constant(value='purelib'), ctx=Load())), keyword(arg='headers', value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Subscript(value=Name(id='paths', ctx=Load()), slice=Constant(value='include'), ctx=Load()), Name(id='dist_name', ctx=Load())], keywords=[])), keyword(arg='scripts', value=Subscript(value=Name(id='paths', ctx=Load()), slice=Constant(value='scripts'), ctx=Load())), keyword(arg='data', value=Subscript(value=Name(id='paths', ctx=Load()), slice=Constant(value='data'), ctx=Load()))])), If(test=Compare(left=Name(id='root', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[For(target=Name(id='key', ctx=Store()), iter=Name(id='SCHEME_KEYS', ctx=Load()), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Name(id='change_root', ctx=Load()), args=[Name(id='root', ctx=Load()), Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='scheme', ctx=Load()), Name(id='key', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='scheme', ctx=Load()), Name(id='key', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='scheme', ctx=Load()))], decorator_list=[], returns=Name(id='Scheme', ctx=Load())), FunctionDef(name='get_bin_prefix', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), slice=Slice(upper=Constant(value=6)), ctx=Load()), ops=[Eq()], comparators=[Constant(value='darwin')]), Compare(left=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='prefix', ctx=Load()), slice=Slice(upper=Constant(value=16)), ctx=Load()), ops=[Eq()], comparators=[Constant(value='/System/Library/')])]), body=[Return(value=Constant(value='/usr/local/bin'))], orelse=[]), Return(value=Subscript(value=Call(func=Attribute(value=Name(id='sysconfig', ctx=Load()), attr='get_paths', ctx=Load()), args=[], keywords=[]), slice=Constant(value='scripts'), ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='get_purelib', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Subscript(value=Call(func=Attribute(value=Name(id='sysconfig', ctx=Load()), attr='get_paths', ctx=Load()), args=[], keywords=[]), slice=Constant(value='purelib'), ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='get_platlib', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Subscript(value=Call(func=Attribute(value=Name(id='sysconfig', ctx=Load()), attr='get_paths', ctx=Load()), args=[], keywords=[]), slice=Constant(value='platlib'), ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load()))], type_ignores=[])