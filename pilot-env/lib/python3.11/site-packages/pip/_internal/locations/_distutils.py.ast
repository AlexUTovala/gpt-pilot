Module(body=[Expr(value=Constant(value='Locations where we look for configs, install stuff, etc')), Try(body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='__import__', ctx=Load()), args=[Constant(value='_distutils_hack')], keywords=[]), attr='remove_shim', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='ImportError', ctx=Load()), Name(id='AttributeError', ctx=Load())], ctx=Load()), body=[Pass()])], orelse=[], finalbody=[]), Import(names=[alias(name='logging')]), Import(names=[alias(name='os')]), Import(names=[alias(name='sys')]), ImportFrom(module='distutils.cmd', names=[alias(name='Command', asname='DistutilsCommand')], level=0), ImportFrom(module='distutils.command.install', names=[alias(name='SCHEME_KEYS')], level=0), ImportFrom(module='distutils.command.install', names=[alias(name='install', asname='distutils_install_command')], level=0), ImportFrom(module='distutils.sysconfig', names=[alias(name='get_python_lib')], level=0), ImportFrom(module='typing', names=[alias(name='Dict'), alias(name='List'), alias(name='Optional'), alias(name='Union'), alias(name='cast')], level=0), ImportFrom(module='pip._internal.models.scheme', names=[alias(name='Scheme')], level=0), ImportFrom(module='pip._internal.utils.compat', names=[alias(name='WINDOWS')], level=0), ImportFrom(module='pip._internal.utils.virtualenv', names=[alias(name='running_under_virtualenv')], level=0), ImportFrom(module='base', names=[alias(name='get_major_minor_version')], level=1), Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), FunctionDef(name='distutils_scheme', args=arguments(posonlyargs=[], args=[arg(arg='dist_name', annotation=Name(id='str', ctx=Load())), arg(arg='user', annotation=Name(id='bool', ctx=Load())), arg(arg='home', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='root', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='isolated', annotation=Name(id='bool', ctx=Load())), arg(arg='prefix', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[arg(arg='ignore_config_files', annotation=Name(id='bool', ctx=Load()))], kw_defaults=[Constant(value=False)], defaults=[Constant(value=False), Constant(value=None), Constant(value=None), Constant(value=False), Constant(value=None)]), body=[Expr(value=Constant(value='\n    Return a distutils install scheme\n    ')), ImportFrom(module='distutils.dist', names=[alias(name='Distribution')], level=0), AnnAssign(target=Name(id='dist_args', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[Constant(value='name')], values=[Name(id='dist_name', ctx=Load())]), simple=1), If(test=Name(id='isolated', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='dist_args', ctx=Load()), slice=Constant(value='script_args'), ctx=Store())], value=List(elts=[Constant(value='--no-user-cfg')], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='d', ctx=Store())], value=Call(func=Name(id='Distribution', ctx=Load()), args=[Name(id='dist_args', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='ignore_config_files', ctx=Load())), body=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='d', ctx=Load()), attr='parse_config_files', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Name(id='UnicodeDecodeError', ctx=Load()), body=[Assign(targets=[Name(id='paths', ctx=Store())], value=Call(func=Attribute(value=Name(id='d', ctx=Load()), attr='find_config_files', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='Ignore distutils configs in %s due to encoding errors.'), Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='basename', ctx=Load()), args=[Name(id='p', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='p', ctx=Store()), iter=Name(id='paths', ctx=Load()), ifs=[], is_async=0)])], keywords=[])], keywords=[]))])], orelse=[], finalbody=[])], orelse=[]), AnnAssign(target=Name(id='obj', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='DistutilsCommand', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=1), Assign(targets=[Name(id='obj', ctx=Store())], value=Call(func=Attribute(value=Name(id='d', ctx=Load()), attr='get_command_obj', ctx=Load()), args=[Constant(value='install')], keywords=[keyword(arg='create', value=Constant(value=True))])), Assert(test=Compare(left=Name(id='obj', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])), Assign(targets=[Name(id='i', ctx=Store())], value=Call(func=Name(id='cast', ctx=Load()), args=[Name(id='distutils_install_command', ctx=Load()), Name(id='obj', ctx=Load())], keywords=[])), Assert(test=UnaryOp(op=Not(), operand=BoolOp(op=And(), values=[Name(id='user', ctx=Load()), Name(id='prefix', ctx=Load())])), msg=JoinedStr(values=[Constant(value='user='), FormattedValue(value=Name(id='user', ctx=Load()), conversion=-1), Constant(value=' prefix='), FormattedValue(value=Name(id='prefix', ctx=Load()), conversion=-1)])), Assert(test=UnaryOp(op=Not(), operand=BoolOp(op=And(), values=[Name(id='home', ctx=Load()), Name(id='prefix', ctx=Load())])), msg=JoinedStr(values=[Constant(value='home='), FormattedValue(value=Name(id='home', ctx=Load()), conversion=-1), Constant(value=' prefix='), FormattedValue(value=Name(id='prefix', ctx=Load()), conversion=-1)])), Assign(targets=[Attribute(value=Name(id='i', ctx=Load()), attr='user', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='user', ctx=Load()), Attribute(value=Name(id='i', ctx=Load()), attr='user', ctx=Load())])), If(test=BoolOp(op=Or(), values=[Name(id='user', ctx=Load()), Name(id='home', ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='i', ctx=Load()), attr='prefix', ctx=Store())], value=Constant(value=''))], orelse=[]), Assign(targets=[Attribute(value=Name(id='i', ctx=Load()), attr='prefix', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='prefix', ctx=Load()), Attribute(value=Name(id='i', ctx=Load()), attr='prefix', ctx=Load())])), Assign(targets=[Attribute(value=Name(id='i', ctx=Load()), attr='home', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='home', ctx=Load()), Attribute(value=Name(id='i', ctx=Load()), attr='home', ctx=Load())])), Assign(targets=[Attribute(value=Name(id='i', ctx=Load()), attr='root', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='root', ctx=Load()), Attribute(value=Name(id='i', ctx=Load()), attr='root', ctx=Load())])), Expr(value=Call(func=Attribute(value=Name(id='i', ctx=Load()), attr='finalize_options', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='scheme', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='key', ctx=Store()), iter=Name(id='SCHEME_KEYS', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='scheme', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='i', ctx=Load()), BinOp(left=Constant(value='install_'), op=Add(), right=Name(id='key', ctx=Load()))], keywords=[]))], orelse=[]), If(test=Compare(left=Constant(value='install_lib'), ops=[In()], comparators=[Call(func=Attribute(value=Name(id='d', ctx=Load()), attr='get_option_dict', ctx=Load()), args=[Constant(value='install')], keywords=[])]), body=[Expr(value=Call(func=Attribute(value=Name(id='scheme', ctx=Load()), attr='update', ctx=Load()), args=[Dict(keys=[Constant(value='purelib'), Constant(value='platlib')], values=[Attribute(value=Name(id='i', ctx=Load()), attr='install_lib', ctx=Load()), Attribute(value=Name(id='i', ctx=Load()), attr='install_lib', ctx=Load())])], keywords=[]))], orelse=[]), If(test=Call(func=Name(id='running_under_virtualenv', ctx=Load()), args=[], keywords=[]), body=[If(test=Name(id='home', ctx=Load()), body=[Assign(targets=[Name(id='prefix', ctx=Store())], value=Name(id='home', ctx=Load()))], orelse=[If(test=Name(id='user', ctx=Load()), body=[Assign(targets=[Name(id='prefix', ctx=Store())], value=Attribute(value=Name(id='i', ctx=Load()), attr='install_userbase', ctx=Load()))], orelse=[Assign(targets=[Name(id='prefix', ctx=Store())], value=Attribute(value=Name(id='i', ctx=Load()), attr='prefix', ctx=Load()))])]), Assign(targets=[Subscript(value=Name(id='scheme', ctx=Load()), slice=Constant(value='headers'), ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='prefix', ctx=Load()), Constant(value='include'), Constant(value='site'), JoinedStr(values=[Constant(value='python'), FormattedValue(value=Call(func=Name(id='get_major_minor_version', ctx=Load()), args=[], keywords=[]), conversion=-1)]), Name(id='dist_name', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='root', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='path_no_drive', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='splitdrive', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Subscript(value=Name(id='scheme', ctx=Load()), slice=Constant(value='headers'), ctx=Load())], keywords=[])], keywords=[]), slice=Constant(value=1), ctx=Load())), Assign(targets=[Subscript(value=Name(id='scheme', ctx=Load()), slice=Constant(value='headers'), ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='root', ctx=Load()), Subscript(value=Name(id='path_no_drive', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='scheme', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='get_scheme', args=arguments(posonlyargs=[], args=[arg(arg='dist_name', annotation=Name(id='str', ctx=Load())), arg(arg='user', annotation=Name(id='bool', ctx=Load())), arg(arg='home', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='root', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='isolated', annotation=Name(id='bool', ctx=Load())), arg(arg='prefix', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Constant(value=None), Constant(value=None), Constant(value=False), Constant(value=None)]), body=[Expr(value=Constant(value='\n    Get the "scheme" corresponding to the input parameters. The distutils\n    documentation provides the context for the available schemes:\n    https://docs.python.org/3/install/index.html#alternate-installation\n\n    :param dist_name: the name of the package to retrieve the scheme for, used\n        in the headers scheme path\n    :param user: indicates to use the "user" scheme\n    :param home: indicates to use the "home" scheme and provides the base\n        directory for the same\n    :param root: root under which other directories are re-based\n    :param isolated: equivalent to --no-user-cfg, i.e. do not consider\n        ~/.pydistutils.cfg (posix) or ~/pydistutils.cfg (non-posix) for\n        scheme paths\n    :param prefix: indicates to use the "prefix" scheme and provides the\n        base directory for the same\n    ')), Assign(targets=[Name(id='scheme', ctx=Store())], value=Call(func=Name(id='distutils_scheme', ctx=Load()), args=[Name(id='dist_name', ctx=Load()), Name(id='user', ctx=Load()), Name(id='home', ctx=Load()), Name(id='root', ctx=Load()), Name(id='isolated', ctx=Load()), Name(id='prefix', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='Scheme', ctx=Load()), args=[], keywords=[keyword(arg='platlib', value=Subscript(value=Name(id='scheme', ctx=Load()), slice=Constant(value='platlib'), ctx=Load())), keyword(arg='purelib', value=Subscript(value=Name(id='scheme', ctx=Load()), slice=Constant(value='purelib'), ctx=Load())), keyword(arg='headers', value=Subscript(value=Name(id='scheme', ctx=Load()), slice=Constant(value='headers'), ctx=Load())), keyword(arg='scripts', value=Subscript(value=Name(id='scheme', ctx=Load()), slice=Constant(value='scripts'), ctx=Load())), keyword(arg='data', value=Subscript(value=Name(id='scheme', ctx=Load()), slice=Constant(value='data'), ctx=Load()))]))], decorator_list=[], returns=Name(id='Scheme', ctx=Load())), FunctionDef(name='get_bin_prefix', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='prefix', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normpath', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='prefix', ctx=Load())], keywords=[])), If(test=Name(id='WINDOWS', ctx=Load()), body=[Assign(targets=[Name(id='bin_py', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='prefix', ctx=Load()), Constant(value='Scripts')], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='bin_py', ctx=Load())], keywords=[])), body=[Assign(targets=[Name(id='bin_py', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='prefix', ctx=Load()), Constant(value='bin')], keywords=[]))], orelse=[]), Return(value=Name(id='bin_py', ctx=Load()))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='platform', ctx=Load()), slice=Slice(upper=Constant(value=6)), ctx=Load()), ops=[Eq()], comparators=[Constant(value='darwin')]), Compare(left=Subscript(value=Name(id='prefix', ctx=Load()), slice=Slice(upper=Constant(value=16)), ctx=Load()), ops=[Eq()], comparators=[Constant(value='/System/Library/')])]), body=[Return(value=Constant(value='/usr/local/bin'))], orelse=[]), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='prefix', ctx=Load()), Constant(value='bin')], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='get_purelib', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='get_python_lib', ctx=Load()), args=[], keywords=[keyword(arg='plat_specific', value=Constant(value=False))]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='get_platlib', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='get_python_lib', ctx=Load()), args=[], keywords=[keyword(arg='plat_specific', value=Constant(value=True))]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], type_ignores=[])