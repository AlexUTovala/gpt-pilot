Module(body=[Import(names=[alias(name='functools')]), Import(names=[alias(name='os')]), Import(names=[alias(name='site')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='sysconfig')]), Import(names=[alias(name='typing')]), ImportFrom(module='pip._internal.exceptions', names=[alias(name='InstallationError')], level=0), ImportFrom(module='pip._internal.utils', names=[alias(name='appdirs')], level=0), ImportFrom(module='pip._internal.utils.virtualenv', names=[alias(name='running_under_virtualenv')], level=0), Assign(targets=[Name(id='USER_CACHE_DIR', ctx=Store())], value=Call(func=Attribute(value=Name(id='appdirs', ctx=Load()), attr='user_cache_dir', ctx=Load()), args=[Constant(value='pip')], keywords=[])), AnnAssign(target=Name(id='site_packages', ctx=Store()), annotation=Name(id='str', ctx=Load()), value=Call(func=Attribute(value=Name(id='sysconfig', ctx=Load()), attr='get_path', ctx=Load()), args=[Constant(value='purelib')], keywords=[]), simple=1), FunctionDef(name='get_major_minor_version', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Return the major-minor version of the current Python as a string, e.g.\n    "3.7" or "3.10".\n    ')), Return(value=Call(func=Attribute(value=Constant(value='{}.{}'), attr='format', ctx=Load()), args=[Starred(value=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='change_root', args=arguments(posonlyargs=[], args=[arg(arg='new_root', annotation=Name(id='str', ctx=Load())), arg(arg='pathname', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Return 'pathname' with 'new_root' prepended.\n\n    If 'pathname' is relative, this is equivalent to os.path.join(new_root, pathname).\n    Otherwise, it requires making 'pathname' relative and then joining the\n    two, which is tricky on DOS/Windows and Mac OS.\n\n    This is borrowed from Python's standard library's distutils module.\n    ")), If(test=Compare(left=Attribute(value=Name(id='os', ctx=Load()), attr='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='posix')]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isabs', ctx=Load()), args=[Name(id='pathname', ctx=Load())], keywords=[])), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='new_root', ctx=Load()), Name(id='pathname', ctx=Load())], keywords=[]))], orelse=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='new_root', ctx=Load()), Subscript(value=Name(id='pathname', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]))])], orelse=[If(test=Compare(left=Attribute(value=Name(id='os', ctx=Load()), attr='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='nt')]), body=[Assign(targets=[Tuple(elts=[Name(id='drive', ctx=Store()), Name(id='path', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='splitdrive', ctx=Load()), args=[Name(id='pathname', ctx=Load())], keywords=[])), If(test=Compare(left=Subscript(value=Name(id='path', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Constant(value='\\')]), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Subscript(value=Name(id='path', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load()))], orelse=[]), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='new_root', ctx=Load()), Name(id='path', ctx=Load())], keywords=[]))], orelse=[Raise(exc=Call(func=Name(id='InstallationError', ctx=Load()), args=[JoinedStr(values=[Constant(value='Unknown platform: '), FormattedValue(value=Attribute(value=Name(id='os', ctx=Load()), attr='name', ctx=Load()), conversion=-1), Constant(value='\nCan not change root path prefix on unknown platform.')])], keywords=[]))])])], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='get_src_prefix', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='running_under_virtualenv', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='src_prefix', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='prefix', ctx=Load()), Constant(value='src')], keywords=[]))], orelse=[Try(body=[Assign(targets=[Name(id='src_prefix', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getcwd', ctx=Load()), args=[], keywords=[]), Constant(value='src')], keywords=[]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='sys', ctx=Load()), attr='exit', ctx=Load()), args=[Constant(value='The folder you are executing pip from can no longer be found.')], keywords=[]))])], orelse=[], finalbody=[])]), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='abspath', ctx=Load()), args=[Name(id='src_prefix', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), Try(body=[AnnAssign(target=Name(id='user_site', ctx=Store()), annotation=Subscript(value=Attribute(value=Name(id='typing', ctx=Load()), attr='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Call(func=Attribute(value=Name(id='site', ctx=Load()), attr='getusersitepackages', ctx=Load()), args=[], keywords=[]), simple=1)], handlers=[ExceptHandler(type=Name(id='AttributeError', ctx=Load()), body=[Assign(targets=[Name(id='user_site', ctx=Store())], value=Attribute(value=Name(id='site', ctx=Load()), attr='USER_SITE', ctx=Load()))])], orelse=[], finalbody=[]), FunctionDef(name='is_osx_framework', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='bool', ctx=Load()), args=[Call(func=Attribute(value=Name(id='sysconfig', ctx=Load()), attr='get_config_var', ctx=Load()), args=[Constant(value='PYTHONFRAMEWORK')], keywords=[])], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='lru_cache', ctx=Load()), args=[], keywords=[keyword(arg='maxsize', value=Constant(value=None))])], returns=Name(id='bool', ctx=Load()))], type_ignores=[])