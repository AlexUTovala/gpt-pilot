Module(body=[Import(names=[alias(name='functools')]), Import(names=[alias(name='logging')]), Import(names=[alias(name='os')]), Import(names=[alias(name='pathlib')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='sysconfig')]), ImportFrom(module='typing', names=[alias(name='Any'), alias(name='Dict'), alias(name='Generator'), alias(name='Optional'), alias(name='Tuple')], level=0), ImportFrom(module='pip._internal.models.scheme', names=[alias(name='SCHEME_KEYS'), alias(name='Scheme')], level=0), ImportFrom(module='pip._internal.utils.compat', names=[alias(name='WINDOWS')], level=0), ImportFrom(module='pip._internal.utils.deprecation', names=[alias(name='deprecated')], level=0), ImportFrom(module='pip._internal.utils.virtualenv', names=[alias(name='running_under_virtualenv')], level=0), ImportFrom(names=[alias(name='_sysconfig')], level=1), ImportFrom(module='base', names=[alias(name='USER_CACHE_DIR'), alias(name='get_major_minor_version'), alias(name='get_src_prefix'), alias(name='is_osx_framework'), alias(name='site_packages'), alias(name='user_site')], level=1), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='USER_CACHE_DIR'), Constant(value='get_bin_prefix'), Constant(value='get_bin_user'), Constant(value='get_major_minor_version'), Constant(value='get_platlib'), Constant(value='get_purelib'), Constant(value='get_scheme'), Constant(value='get_src_prefix'), Constant(value='site_packages'), Constant(value='user_site')], ctx=Load())), Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), AnnAssign(target=Name(id='_PLATLIBDIR', ctx=Store()), annotation=Name(id='str', ctx=Load()), value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='sys', ctx=Load()), Constant(value='platlibdir'), Constant(value='lib')], keywords=[]), simple=1), Assign(targets=[Name(id='_USE_SYSCONFIG_DEFAULT', ctx=Store())], value=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), ops=[GtE()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=10)], ctx=Load())])), FunctionDef(name='_should_use_sysconfig', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='This function determines the value of _USE_SYSCONFIG.\n\n    By default, pip uses sysconfig on Python 3.10+.\n    But Python distributors can override this decision by setting:\n        sysconfig._PIP_USE_SYSCONFIG = True / False\n    Rationale in https://github.com/pypa/pip/issues/10647\n\n    This is a function for testability, but should be constant during any one\n    run.\n    ')), Return(value=Call(func=Name(id='bool', ctx=Load()), args=[Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='sysconfig', ctx=Load()), Constant(value='_PIP_USE_SYSCONFIG'), Name(id='_USE_SYSCONFIG_DEFAULT', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), Assign(targets=[Name(id='_USE_SYSCONFIG', ctx=Store())], value=Call(func=Name(id='_should_use_sysconfig', ctx=Load()), args=[], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='_USE_SYSCONFIG', ctx=Load())), body=[ImportFrom(names=[alias(name='_distutils')], level=1)], orelse=[]), If(test=BoolOp(op=And(), values=[Name(id='_USE_SYSCONFIG_DEFAULT', ctx=Load()), UnaryOp(op=Not(), operand=Name(id='_USE_SYSCONFIG', ctx=Load()))]), body=[Assign(targets=[Name(id='_MISMATCH_LEVEL', ctx=Store())], value=Attribute(value=Name(id='logging', ctx=Load()), attr='WARNING', ctx=Load()))], orelse=[Assign(targets=[Name(id='_MISMATCH_LEVEL', ctx=Store())], value=Attribute(value=Name(id='logging', ctx=Load()), attr='DEBUG', ctx=Load()))]), FunctionDef(name='_looks_like_bpo_44860', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='The resolution to bpo-44860 will change this incorrect platlib.\n\n    See <https://bugs.python.org/issue44860>.\n    ')), ImportFrom(module='distutils.command.install', names=[alias(name='INSTALL_SCHEMES')], level=0), Try(body=[Assign(targets=[Name(id='unix_user_platlib', ctx=Store())], value=Subscript(value=Subscript(value=Name(id='INSTALL_SCHEMES', ctx=Load()), slice=Constant(value='unix_user'), ctx=Load()), slice=Constant(value='platlib'), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Return(value=Constant(value=False))])], orelse=[], finalbody=[]), Return(value=Compare(left=Name(id='unix_user_platlib', ctx=Load()), ops=[Eq()], comparators=[Constant(value='$usersite')]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='_looks_like_red_hat_patched_platlib_purelib', args=arguments(posonlyargs=[], args=[arg(arg='scheme', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='platlib', ctx=Store())], value=Subscript(value=Name(id='scheme', ctx=Load()), slice=Constant(value='platlib'), ctx=Load())), If(test=Compare(left=Constant(value='/$platlibdir/'), ops=[In()], comparators=[Name(id='platlib', ctx=Load())]), body=[Assign(targets=[Name(id='platlib', ctx=Store())], value=Call(func=Attribute(value=Name(id='platlib', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='/$platlibdir/'), JoinedStr(values=[Constant(value='/'), FormattedValue(value=Name(id='_PLATLIBDIR', ctx=Load()), conversion=-1), Constant(value='/')])], keywords=[]))], orelse=[]), If(test=Compare(left=Constant(value='/lib64/'), ops=[NotIn()], comparators=[Name(id='platlib', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='unpatched', ctx=Store())], value=Call(func=Attribute(value=Name(id='platlib', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='/lib64/'), Constant(value='/lib/')], keywords=[])), Return(value=Compare(left=Call(func=Attribute(value=Name(id='unpatched', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='$platbase/'), Constant(value='$base/')], keywords=[]), ops=[Eq()], comparators=[Subscript(value=Name(id='scheme', ctx=Load()), slice=Constant(value='purelib'), ctx=Load())]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='_looks_like_red_hat_lib', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Red Hat patches platlib in unix_prefix and unix_home, but not purelib.\n\n    This is the only way I can see to tell a Red Hat-patched Python.\n    ')), ImportFrom(module='distutils.command.install', names=[alias(name='INSTALL_SCHEMES')], level=0), Return(value=Call(func=Name(id='all', ctx=Load()), args=[GeneratorExp(elt=BoolOp(op=And(), values=[Compare(left=Name(id='k', ctx=Load()), ops=[In()], comparators=[Name(id='INSTALL_SCHEMES', ctx=Load())]), Call(func=Name(id='_looks_like_red_hat_patched_platlib_purelib', ctx=Load()), args=[Subscript(value=Name(id='INSTALL_SCHEMES', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Load())], keywords=[])]), generators=[comprehension(target=Name(id='k', ctx=Store()), iter=Tuple(elts=[Constant(value='unix_prefix'), Constant(value='unix_home')], ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='lru_cache', ctx=Load()), args=[], keywords=[keyword(arg='maxsize', value=Constant(value=None))])], returns=Name(id='bool', ctx=Load())), FunctionDef(name='_looks_like_debian_scheme', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Debian adds two additional schemes.')), ImportFrom(module='distutils.command.install', names=[alias(name='INSTALL_SCHEMES')], level=0), Return(value=BoolOp(op=And(), values=[Compare(left=Constant(value='deb_system'), ops=[In()], comparators=[Name(id='INSTALL_SCHEMES', ctx=Load())]), Compare(left=Constant(value='unix_local'), ops=[In()], comparators=[Name(id='INSTALL_SCHEMES', ctx=Load())])]))], decorator_list=[Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='lru_cache', ctx=Load()), args=[], keywords=[keyword(arg='maxsize', value=Constant(value=None))])], returns=Name(id='bool', ctx=Load())), FunctionDef(name='_looks_like_red_hat_scheme', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Red Hat patches ``sys.prefix`` and ``sys.exec_prefix``.\n\n    Red Hat\'s ``00251-change-user-install-location.patch`` changes the install\n    command\'s ``prefix`` and ``exec_prefix`` to append ``"/local"``. This is\n    (fortunately?) done quite unconditionally, so we create a default command\n    object without any configuration to detect this.\n    ')), ImportFrom(module='distutils.command.install', names=[alias(name='install')], level=0), ImportFrom(module='distutils.dist', names=[alias(name='Distribution')], level=0), AnnAssign(target=Name(id='cmd', ctx=Store()), annotation=Name(id='Any', ctx=Load()), value=Call(func=Name(id='install', ctx=Load()), args=[Call(func=Name(id='Distribution', ctx=Load()), args=[], keywords=[])], keywords=[]), simple=1), Expr(value=Call(func=Attribute(value=Name(id='cmd', ctx=Load()), attr='finalize_options', ctx=Load()), args=[], keywords=[])), Return(value=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='cmd', ctx=Load()), attr='exec_prefix', ctx=Load()), ops=[Eq()], comparators=[JoinedStr(values=[FormattedValue(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normpath', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='exec_prefix', ctx=Load())], keywords=[]), conversion=-1), Constant(value='/local')])]), Compare(left=Attribute(value=Name(id='cmd', ctx=Load()), attr='prefix', ctx=Load()), ops=[Eq()], comparators=[JoinedStr(values=[FormattedValue(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='normpath', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='prefix', ctx=Load())], keywords=[]), conversion=-1), Constant(value='/local')])])]))], decorator_list=[Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='lru_cache', ctx=Load()), args=[], keywords=[keyword(arg='maxsize', value=Constant(value=None))])], returns=Name(id='bool', ctx=Load())), FunctionDef(name='_looks_like_slackware_scheme', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Slackware patches sysconfig but fails to patch distutils and site.\n\n    Slackware changes sysconfig\'s user scheme to use ``"lib64"`` for the lib\n    path, but does not do the same to the site module.\n    ')), If(test=Compare(left=Name(id='user_site', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=False))], orelse=[]), Try(body=[Assign(targets=[Name(id='paths', ctx=Store())], value=Call(func=Attribute(value=Name(id='sysconfig', ctx=Load()), attr='get_paths', ctx=Load()), args=[], keywords=[keyword(arg='scheme', value=Constant(value='posix_user')), keyword(arg='expand', value=Constant(value=False))]))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Return(value=Constant(value=False))])], orelse=[], finalbody=[]), Return(value=BoolOp(op=And(), values=[Compare(left=Constant(value='/lib64/'), ops=[In()], comparators=[Subscript(value=Name(id='paths', ctx=Load()), slice=Constant(value='purelib'), ctx=Load())]), Compare(left=Constant(value='/lib64/'), ops=[NotIn()], comparators=[Name(id='user_site', ctx=Load())])]))], decorator_list=[Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='lru_cache', ctx=Load()), args=[], keywords=[keyword(arg='maxsize', value=Constant(value=None))])], returns=Name(id='bool', ctx=Load())), FunctionDef(name='_looks_like_msys2_mingw_scheme', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='MSYS2 patches distutils and sysconfig to use a UNIX-like scheme.\n\n    However, MSYS2 incorrectly patches sysconfig ``nt`` scheme. The fix is\n    likely going to be included in their 3.10 release, so we ignore the warning.\n    See msys2/MINGW-packages#9319.\n\n    MSYS2 MINGW\'s patch uses lowercase ``"lib"`` instead of the usual uppercase,\n    and is missing the final ``"site-packages"``.\n    ')), Assign(targets=[Name(id='paths', ctx=Store())], value=Call(func=Attribute(value=Name(id='sysconfig', ctx=Load()), attr='get_paths', ctx=Load()), args=[Constant(value='nt')], keywords=[keyword(arg='expand', value=Constant(value=False))])), Return(value=Call(func=Name(id='all', ctx=Load()), args=[GeneratorExp(elt=BoolOp(op=And(), values=[Compare(left=Constant(value='Lib'), ops=[NotIn()], comparators=[Name(id='p', ctx=Load())]), Compare(left=Constant(value='lib'), ops=[In()], comparators=[Name(id='p', ctx=Load())]), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='p', ctx=Load()), attr='endswith', ctx=Load()), args=[Constant(value='site-packages')], keywords=[]))]), generators=[comprehension(target=Name(id='p', ctx=Store()), iter=GeneratorExp(elt=Subscript(value=Name(id='paths', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()), generators=[comprehension(target=Name(id='key', ctx=Store()), iter=Tuple(elts=[Constant(value='platlib'), Constant(value='purelib')], ctx=Load()), ifs=[], is_async=0)]), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='lru_cache', ctx=Load()), args=[], keywords=[keyword(arg='maxsize', value=Constant(value=None))])], returns=Name(id='bool', ctx=Load())), FunctionDef(name='_fix_abiflags', args=arguments(posonlyargs=[], args=[arg(arg='parts', annotation=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ldversion', ctx=Store())], value=Call(func=Attribute(value=Name(id='sysconfig', ctx=Load()), attr='get_config_var', ctx=Load()), args=[Constant(value='LDVERSION')], keywords=[])), Assign(targets=[Name(id='abiflags', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='sys', ctx=Load()), Constant(value='abiflags'), Constant(value=None)], keywords=[])), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Name(id='ldversion', ctx=Load())), UnaryOp(op=Not(), operand=Name(id='abiflags', ctx=Load())), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='ldversion', ctx=Load()), attr='endswith', ctx=Load()), args=[Name(id='abiflags', ctx=Load())], keywords=[]))]), body=[Expr(value=YieldFrom(value=Name(id='parts', ctx=Load()))), Return()], orelse=[]), For(target=Name(id='part', ctx=Store()), iter=Name(id='parts', ctx=Load()), body=[If(test=Call(func=Attribute(value=Name(id='part', ctx=Load()), attr='endswith', ctx=Load()), args=[Name(id='ldversion', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='part', ctx=Store())], value=Subscript(value=Name(id='part', ctx=Load()), slice=Slice(upper=BinOp(left=Constant(value=0), op=Sub(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='abiflags', ctx=Load())], keywords=[]))), ctx=Load()))], orelse=[]), Expr(value=Yield(value=Name(id='part', ctx=Load())))], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Generator', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Constant(value=None), Constant(value=None)], ctx=Load()), ctx=Load())), FunctionDef(name='_warn_mismatched', args=arguments(posonlyargs=[], args=[arg(arg='old', annotation=Attribute(value=Name(id='pathlib', ctx=Load()), attr='Path', ctx=Load())), arg(arg='new', annotation=Attribute(value=Name(id='pathlib', ctx=Load()), attr='Path', ctx=Load()))], kwonlyargs=[arg(arg='key', annotation=Name(id='str', ctx=Load()))], kw_defaults=[None], defaults=[]), body=[Assign(targets=[Name(id='issue_url', ctx=Store())], value=Constant(value='https://github.com/pypa/pip/issues/10151')), Assign(targets=[Name(id='message', ctx=Store())], value=Constant(value='Value for %s does not match. Please report this to <%s>\ndistutils: %s\nsysconfig: %s')), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='log', ctx=Load()), args=[Name(id='_MISMATCH_LEVEL', ctx=Load()), Name(id='message', ctx=Load()), Name(id='key', ctx=Load()), Name(id='issue_url', ctx=Load()), Name(id='old', ctx=Load()), Name(id='new', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='lru_cache', ctx=Load()), args=[], keywords=[keyword(arg='maxsize', value=Constant(value=None))])], returns=Constant(value=None)), FunctionDef(name='_warn_if_mismatch', args=arguments(posonlyargs=[], args=[arg(arg='old', annotation=Attribute(value=Name(id='pathlib', ctx=Load()), attr='Path', ctx=Load())), arg(arg='new', annotation=Attribute(value=Name(id='pathlib', ctx=Load()), attr='Path', ctx=Load()))], kwonlyargs=[arg(arg='key', annotation=Name(id='str', ctx=Load()))], kw_defaults=[None], defaults=[]), body=[If(test=Compare(left=Name(id='old', ctx=Load()), ops=[Eq()], comparators=[Name(id='new', ctx=Load())]), body=[Return(value=Constant(value=False))], orelse=[]), Expr(value=Call(func=Name(id='_warn_mismatched', ctx=Load()), args=[Name(id='old', ctx=Load()), Name(id='new', ctx=Load())], keywords=[keyword(arg='key', value=Name(id='key', ctx=Load()))])), Return(value=Constant(value=True))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='_log_context', args=arguments(posonlyargs=[], args=[], kwonlyargs=[arg(arg='user', annotation=Name(id='bool', ctx=Load())), arg(arg='home', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='root', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='prefix', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kw_defaults=[Constant(value=False), Constant(value=None), Constant(value=None), Constant(value=None)], defaults=[]), body=[Assign(targets=[Name(id='parts', ctx=Store())], value=List(elts=[Constant(value='Additional context:'), Constant(value='user = %r'), Constant(value='home = %r'), Constant(value='root = %r'), Constant(value='prefix = %r')], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='log', ctx=Load()), args=[Name(id='_MISMATCH_LEVEL', ctx=Load()), Call(func=Attribute(value=Constant(value='\n'), attr='join', ctx=Load()), args=[Name(id='parts', ctx=Load())], keywords=[]), Name(id='user', ctx=Load()), Name(id='home', ctx=Load()), Name(id='root', ctx=Load()), Name(id='prefix', ctx=Load())], keywords=[]))], decorator_list=[Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='lru_cache', ctx=Load()), args=[], keywords=[keyword(arg='maxsize', value=Constant(value=None))])], returns=Constant(value=None)), FunctionDef(name='get_scheme', args=arguments(posonlyargs=[], args=[arg(arg='dist_name', annotation=Name(id='str', ctx=Load())), arg(arg='user', annotation=Name(id='bool', ctx=Load())), arg(arg='home', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='root', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='isolated', annotation=Name(id='bool', ctx=Load())), arg(arg='prefix', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Constant(value=None), Constant(value=None), Constant(value=False), Constant(value=None)]), body=[Assign(targets=[Name(id='new', ctx=Store())], value=Call(func=Attribute(value=Name(id='_sysconfig', ctx=Load()), attr='get_scheme', ctx=Load()), args=[Name(id='dist_name', ctx=Load())], keywords=[keyword(arg='user', value=Name(id='user', ctx=Load())), keyword(arg='home', value=Name(id='home', ctx=Load())), keyword(arg='root', value=Name(id='root', ctx=Load())), keyword(arg='isolated', value=Name(id='isolated', ctx=Load())), keyword(arg='prefix', value=Name(id='prefix', ctx=Load()))])), If(test=Name(id='_USE_SYSCONFIG', ctx=Load()), body=[Return(value=Name(id='new', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='old', ctx=Store())], value=Call(func=Attribute(value=Name(id='_distutils', ctx=Load()), attr='get_scheme', ctx=Load()), args=[Name(id='dist_name', ctx=Load())], keywords=[keyword(arg='user', value=Name(id='user', ctx=Load())), keyword(arg='home', value=Name(id='home', ctx=Load())), keyword(arg='root', value=Name(id='root', ctx=Load())), keyword(arg='isolated', value=Name(id='isolated', ctx=Load())), keyword(arg='prefix', value=Name(id='prefix', ctx=Load()))])), Assign(targets=[Name(id='warning_contexts', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='k', ctx=Store()), iter=Name(id='SCHEME_KEYS', ctx=Load()), body=[Assign(targets=[Name(id='old_v', ctx=Store())], value=Call(func=Attribute(value=Name(id='pathlib', ctx=Load()), attr='Path', ctx=Load()), args=[Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='old', ctx=Load()), Name(id='k', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='new_v', ctx=Store())], value=Call(func=Attribute(value=Name(id='pathlib', ctx=Load()), attr='Path', ctx=Load()), args=[Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='new', ctx=Load()), Name(id='k', ctx=Load())], keywords=[])], keywords=[])), If(test=Compare(left=Name(id='old_v', ctx=Load()), ops=[Eq()], comparators=[Name(id='new_v', ctx=Load())]), body=[Continue()], orelse=[]), Assign(targets=[Name(id='skip_pypy_special_case', ctx=Store())], value=BoolOp(op=And(), values=[Compare(left=Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='implementation', ctx=Load()), attr='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='pypy')]), Compare(left=Name(id='home', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='k', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='platlib'), Constant(value='purelib')], ctx=Load())]), Compare(left=Attribute(value=Name(id='old_v', ctx=Load()), attr='parent', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='new_v', ctx=Load()), attr='parent', ctx=Load())]), Call(func=Attribute(value=Attribute(value=Name(id='old_v', ctx=Load()), attr='name', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='python')], keywords=[]), Call(func=Attribute(value=Attribute(value=Name(id='new_v', ctx=Load()), attr='name', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='pypy')], keywords=[])])), If(test=Name(id='skip_pypy_special_case', ctx=Load()), body=[Continue()], orelse=[]), Assign(targets=[Name(id='skip_osx_framework_user_special_case', ctx=Store())], value=BoolOp(op=And(), values=[Name(id='user', ctx=Load()), Call(func=Name(id='is_osx_framework', ctx=Load()), args=[], keywords=[]), Compare(left=Name(id='k', ctx=Load()), ops=[Eq()], comparators=[Constant(value='headers')]), Compare(left=Attribute(value=Attribute(value=Name(id='old_v', ctx=Load()), attr='parent', ctx=Load()), attr='parent', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='new_v', ctx=Load()), attr='parent', ctx=Load())]), Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='old_v', ctx=Load()), attr='parent', ctx=Load()), attr='name', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='python')], keywords=[])])), If(test=Name(id='skip_osx_framework_user_special_case', ctx=Load()), body=[Continue()], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='k', ctx=Load()), ops=[Eq()], comparators=[Constant(value='platlib')]), Call(func=Name(id='_looks_like_red_hat_lib', ctx=Load()), args=[], keywords=[])]), body=[Continue()], orelse=[]), Assign(targets=[Name(id='skip_bpo_44860', ctx=Store())], value=BoolOp(op=And(), values=[Name(id='user', ctx=Load()), Compare(left=Name(id='k', ctx=Load()), ops=[Eq()], comparators=[Constant(value='platlib')]), UnaryOp(op=Not(), operand=Name(id='WINDOWS', ctx=Load())), Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), ops=[GtE()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=9)], ctx=Load())]), Compare(left=Name(id='_PLATLIBDIR', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='lib')]), Call(func=Name(id='_looks_like_bpo_44860', ctx=Load()), args=[], keywords=[])])), If(test=Name(id='skip_bpo_44860', ctx=Load()), body=[Continue()], orelse=[]), Assign(targets=[Name(id='skip_slackware_user_scheme', ctx=Store())], value=BoolOp(op=And(), values=[Name(id='user', ctx=Load()), Compare(left=Name(id='k', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='platlib'), Constant(value='purelib')], ctx=Load())]), UnaryOp(op=Not(), operand=Name(id='WINDOWS', ctx=Load())), Call(func=Name(id='_looks_like_slackware_scheme', ctx=Load()), args=[], keywords=[])])), If(test=Name(id='skip_slackware_user_scheme', ctx=Load()), body=[Continue()], orelse=[]), Assign(targets=[Name(id='skip_linux_system_special_case', ctx=Store())], value=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=BoolOp(op=Or(), values=[Name(id='user', ctx=Load()), Name(id='home', ctx=Load()), Name(id='prefix', ctx=Load()), Call(func=Name(id='running_under_virtualenv', ctx=Load()), args=[], keywords=[])])), Compare(left=Subscript(value=Attribute(value=Name(id='old_v', ctx=Load()), attr='parts', ctx=Load()), slice=Slice(lower=Constant(value=1), upper=Constant(value=3)), ctx=Load()), ops=[Eq()], comparators=[Tuple(elts=[Constant(value='usr'), Constant(value='local')], ctx=Load())]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='new_v', ctx=Load()), attr='parts', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)]), Compare(left=Subscript(value=Attribute(value=Name(id='new_v', ctx=Load()), attr='parts', ctx=Load()), slice=Constant(value=1), ctx=Load()), ops=[Eq()], comparators=[Constant(value='usr')]), BoolOp(op=Or(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='new_v', ctx=Load()), attr='parts', ctx=Load())], keywords=[]), ops=[Lt()], comparators=[Constant(value=3)]), Compare(left=Subscript(value=Attribute(value=Name(id='new_v', ctx=Load()), attr='parts', ctx=Load()), slice=Constant(value=2), ctx=Load()), ops=[NotEq()], comparators=[Constant(value='local')])]), BoolOp(op=Or(), values=[Call(func=Name(id='_looks_like_red_hat_scheme', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='_looks_like_debian_scheme', ctx=Load()), args=[], keywords=[])])])), If(test=Name(id='skip_linux_system_special_case', ctx=Load()), body=[Continue()], orelse=[]), Assign(targets=[Name(id='skip_sysconfig_abiflag_bug', ctx=Store())], value=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), ops=[Lt()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=8)], ctx=Load())]), UnaryOp(op=Not(), operand=Name(id='WINDOWS', ctx=Load())), Compare(left=Name(id='k', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='headers'), Constant(value='platlib'), Constant(value='purelib')], ctx=Load())]), Compare(left=Call(func=Name(id='tuple', ctx=Load()), args=[Call(func=Name(id='_fix_abiflags', ctx=Load()), args=[Attribute(value=Name(id='old_v', ctx=Load()), attr='parts', ctx=Load())], keywords=[])], keywords=[]), ops=[Eq()], comparators=[Attribute(value=Name(id='new_v', ctx=Load()), attr='parts', ctx=Load())])])), If(test=Name(id='skip_sysconfig_abiflag_bug', ctx=Load()), body=[Continue()], orelse=[]), Assign(targets=[Name(id='skip_msys2_mingw_bug', ctx=Store())], value=BoolOp(op=And(), values=[Name(id='WINDOWS', ctx=Load()), Compare(left=Name(id='k', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='platlib'), Constant(value='purelib')], ctx=Load())]), Call(func=Name(id='_looks_like_msys2_mingw_scheme', ctx=Load()), args=[], keywords=[])])), If(test=Name(id='skip_msys2_mingw_bug', ctx=Load()), body=[Continue()], orelse=[]), Assign(targets=[Name(id='skip_cpython_build', ctx=Store())], value=BoolOp(op=And(), values=[Call(func=Attribute(value=Name(id='sysconfig', ctx=Load()), attr='is_python_build', ctx=Load()), args=[], keywords=[keyword(arg='check_home', value=Constant(value=True))]), UnaryOp(op=Not(), operand=Name(id='WINDOWS', ctx=Load())), Compare(left=Name(id='k', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='headers'), Constant(value='include'), Constant(value='platinclude')], ctx=Load())])])), If(test=Name(id='skip_cpython_build', ctx=Load()), body=[Continue()], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='warning_contexts', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='old_v', ctx=Load()), Name(id='new_v', ctx=Load()), JoinedStr(values=[Constant(value='scheme.'), FormattedValue(value=Name(id='k', ctx=Load()), conversion=-1)])], ctx=Load())], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='warning_contexts', ctx=Load())), body=[Return(value=Name(id='old', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='default_old', ctx=Store())], value=Call(func=Attribute(value=Name(id='_distutils', ctx=Load()), attr='distutils_scheme', ctx=Load()), args=[Name(id='dist_name', ctx=Load()), Name(id='user', ctx=Load()), Name(id='home', ctx=Load()), Name(id='root', ctx=Load()), Name(id='isolated', ctx=Load()), Name(id='prefix', ctx=Load())], keywords=[keyword(arg='ignore_config_files', value=Constant(value=True))])), If(test=Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=Compare(left=Subscript(value=Name(id='default_old', ctx=Load()), slice=Name(id='k', ctx=Load()), ctx=Load()), ops=[NotEq()], comparators=[Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='old', ctx=Load()), Name(id='k', ctx=Load())], keywords=[])]), generators=[comprehension(target=Name(id='k', ctx=Store()), iter=Name(id='SCHEME_KEYS', ctx=Load()), ifs=[], is_async=0)])], keywords=[]), body=[Expr(value=Call(func=Name(id='deprecated', ctx=Load()), args=[], keywords=[keyword(arg='reason', value=Constant(value='Configuring installation scheme with distutils config files is deprecated and will no longer work in the near future. If you are using a Homebrew or Linuxbrew Python, please see discussion at https://github.com/Homebrew/homebrew-core/issues/76621')), keyword(arg='replacement', value=Constant(value=None)), keyword(arg='gone_in', value=Constant(value=None))])), Return(value=Name(id='old', ctx=Load()))], orelse=[]), For(target=Tuple(elts=[Name(id='old_v', ctx=Store()), Name(id='new_v', ctx=Store()), Name(id='key', ctx=Store())], ctx=Store()), iter=Name(id='warning_contexts', ctx=Load()), body=[Expr(value=Call(func=Name(id='_warn_mismatched', ctx=Load()), args=[Name(id='old_v', ctx=Load()), Name(id='new_v', ctx=Load())], keywords=[keyword(arg='key', value=Name(id='key', ctx=Load()))]))], orelse=[]), Expr(value=Call(func=Name(id='_log_context', ctx=Load()), args=[], keywords=[keyword(arg='user', value=Name(id='user', ctx=Load())), keyword(arg='home', value=Name(id='home', ctx=Load())), keyword(arg='root', value=Name(id='root', ctx=Load())), keyword(arg='prefix', value=Name(id='prefix', ctx=Load()))])), Return(value=Name(id='old', ctx=Load()))], decorator_list=[], returns=Name(id='Scheme', ctx=Load())), FunctionDef(name='get_bin_prefix', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='new', ctx=Store())], value=Call(func=Attribute(value=Name(id='_sysconfig', ctx=Load()), attr='get_bin_prefix', ctx=Load()), args=[], keywords=[])), If(test=Name(id='_USE_SYSCONFIG', ctx=Load()), body=[Return(value=Name(id='new', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='old', ctx=Store())], value=Call(func=Attribute(value=Name(id='_distutils', ctx=Load()), attr='get_bin_prefix', ctx=Load()), args=[], keywords=[])), If(test=Call(func=Name(id='_warn_if_mismatch', ctx=Load()), args=[Call(func=Attribute(value=Name(id='pathlib', ctx=Load()), attr='Path', ctx=Load()), args=[Name(id='old', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='pathlib', ctx=Load()), attr='Path', ctx=Load()), args=[Name(id='new', ctx=Load())], keywords=[])], keywords=[keyword(arg='key', value=Constant(value='bin_prefix'))]), body=[Expr(value=Call(func=Name(id='_log_context', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Name(id='old', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='get_bin_user', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Call(func=Attribute(value=Name(id='_sysconfig', ctx=Load()), attr='get_scheme', ctx=Load()), args=[Constant(value='')], keywords=[keyword(arg='user', value=Constant(value=True))]), attr='scripts', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='_looks_like_deb_system_dist_packages', args=arguments(posonlyargs=[], args=[arg(arg='value', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Check if the value is Debian's APT-controlled dist-packages.\n\n    Debian's ``distutils.sysconfig.get_python_lib()`` implementation returns the\n    default package path controlled by APT, but does not patch ``sysconfig`` to\n    do the same. This is similar to the bug worked around in ``get_scheme()``,\n    but here the default is ``deb_system`` instead of ``unix_local``. Ultimately\n    we can't do anything about this Debian bug, and this detection allows us to\n    skip the warning when needed.\n    ")), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='_looks_like_debian_scheme', ctx=Load()), args=[], keywords=[])), body=[Return(value=Constant(value=False))], orelse=[]), If(test=Compare(left=Name(id='value', ctx=Load()), ops=[Eq()], comparators=[Constant(value='/usr/lib/python3/dist-packages')]), body=[Return(value=Constant(value=True))], orelse=[]), Return(value=Constant(value=False))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='get_purelib', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the default pure-Python lib location.')), Assign(targets=[Name(id='new', ctx=Store())], value=Call(func=Attribute(value=Name(id='_sysconfig', ctx=Load()), attr='get_purelib', ctx=Load()), args=[], keywords=[])), If(test=Name(id='_USE_SYSCONFIG', ctx=Load()), body=[Return(value=Name(id='new', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='old', ctx=Store())], value=Call(func=Attribute(value=Name(id='_distutils', ctx=Load()), attr='get_purelib', ctx=Load()), args=[], keywords=[])), If(test=Call(func=Name(id='_looks_like_deb_system_dist_packages', ctx=Load()), args=[Name(id='old', ctx=Load())], keywords=[]), body=[Return(value=Name(id='old', ctx=Load()))], orelse=[]), If(test=Call(func=Name(id='_warn_if_mismatch', ctx=Load()), args=[Call(func=Attribute(value=Name(id='pathlib', ctx=Load()), attr='Path', ctx=Load()), args=[Name(id='old', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='pathlib', ctx=Load()), attr='Path', ctx=Load()), args=[Name(id='new', ctx=Load())], keywords=[])], keywords=[keyword(arg='key', value=Constant(value='purelib'))]), body=[Expr(value=Call(func=Name(id='_log_context', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Name(id='old', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='get_platlib', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the default platform-shared lib location.')), Assign(targets=[Name(id='new', ctx=Store())], value=Call(func=Attribute(value=Name(id='_sysconfig', ctx=Load()), attr='get_platlib', ctx=Load()), args=[], keywords=[])), If(test=Name(id='_USE_SYSCONFIG', ctx=Load()), body=[Return(value=Name(id='new', ctx=Load()))], orelse=[]), ImportFrom(names=[alias(name='_distutils')], level=1), Assign(targets=[Name(id='old', ctx=Store())], value=Call(func=Attribute(value=Name(id='_distutils', ctx=Load()), attr='get_platlib', ctx=Load()), args=[], keywords=[])), If(test=Call(func=Name(id='_looks_like_deb_system_dist_packages', ctx=Load()), args=[Name(id='old', ctx=Load())], keywords=[]), body=[Return(value=Name(id='old', ctx=Load()))], orelse=[]), If(test=Call(func=Name(id='_warn_if_mismatch', ctx=Load()), args=[Call(func=Attribute(value=Name(id='pathlib', ctx=Load()), attr='Path', ctx=Load()), args=[Name(id='old', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='pathlib', ctx=Load()), attr='Path', ctx=Load()), args=[Name(id='new', ctx=Load())], keywords=[])], keywords=[keyword(arg='key', value=Constant(value='platlib'))]), body=[Expr(value=Call(func=Name(id='_log_context', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Name(id='old', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load()))], type_ignores=[])