Module(body=[Expr(value=Constant(value="Configuration management setup\n\nSome terminology:\n- name\n  As written in config files.\n- value\n  Value associated with a name\n- key\n  Name combined with it's section (section.name)\n- variant\n  A single word describing where the configuration key-value pair came from\n")), Import(names=[alias(name='configparser')]), Import(names=[alias(name='locale')]), Import(names=[alias(name='os')]), Import(names=[alias(name='sys')]), ImportFrom(module='typing', names=[alias(name='Any'), alias(name='Dict'), alias(name='Iterable'), alias(name='List'), alias(name='NewType'), alias(name='Optional'), alias(name='Tuple')], level=0), ImportFrom(module='pip._internal.exceptions', names=[alias(name='ConfigurationError'), alias(name='ConfigurationFileCouldNotBeLoaded')], level=0), ImportFrom(module='pip._internal.utils', names=[alias(name='appdirs')], level=0), ImportFrom(module='pip._internal.utils.compat', names=[alias(name='WINDOWS')], level=0), ImportFrom(module='pip._internal.utils.logging', names=[alias(name='getLogger')], level=0), ImportFrom(module='pip._internal.utils.misc', names=[alias(name='ensure_dir'), alias(name='enum')], level=0), Assign(targets=[Name(id='RawConfigParser', ctx=Store())], value=Attribute(value=Name(id='configparser', ctx=Load()), attr='RawConfigParser', ctx=Load())), Assign(targets=[Name(id='Kind', ctx=Store())], value=Call(func=Name(id='NewType', ctx=Load()), args=[Constant(value='Kind'), Name(id='str', ctx=Load())], keywords=[])), Assign(targets=[Name(id='CONFIG_BASENAME', ctx=Store())], value=IfExp(test=Name(id='WINDOWS', ctx=Load()), body=Constant(value='pip.ini'), orelse=Constant(value='pip.conf'))), Assign(targets=[Name(id='ENV_NAMES_IGNORED', ctx=Store())], value=Tuple(elts=[Constant(value='version'), Constant(value='help')], ctx=Load())), Assign(targets=[Name(id='kinds', ctx=Store())], value=Call(func=Name(id='enum', ctx=Load()), args=[], keywords=[keyword(arg='USER', value=Constant(value='user')), keyword(arg='GLOBAL', value=Constant(value='global')), keyword(arg='SITE', value=Constant(value='site')), keyword(arg='ENV', value=Constant(value='env')), keyword(arg='ENV_VAR', value=Constant(value='env-var'))])), Assign(targets=[Name(id='OVERRIDE_ORDER', ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='kinds', ctx=Load()), attr='GLOBAL', ctx=Load()), Attribute(value=Name(id='kinds', ctx=Load()), attr='USER', ctx=Load()), Attribute(value=Name(id='kinds', ctx=Load()), attr='SITE', ctx=Load()), Attribute(value=Name(id='kinds', ctx=Load()), attr='ENV', ctx=Load()), Attribute(value=Name(id='kinds', ctx=Load()), attr='ENV_VAR', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='VALID_LOAD_ONLY', ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='kinds', ctx=Load()), attr='USER', ctx=Load()), Attribute(value=Name(id='kinds', ctx=Load()), attr='GLOBAL', ctx=Load()), Attribute(value=Name(id='kinds', ctx=Load()), attr='SITE', ctx=Load())], ctx=Load())), Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Name(id='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), FunctionDef(name='_normalize_name', args=arguments(posonlyargs=[], args=[arg(arg='name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Make a name consistent regardless of source (environment or file)')), Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value='_'), Constant(value='-')], keywords=[])), If(test=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='--')], keywords=[]), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Subscript(value=Name(id='name', ctx=Load()), slice=Slice(lower=Constant(value=2)), ctx=Load()))], orelse=[]), Return(value=Name(id='name', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='_disassemble_key', args=arguments(posonlyargs=[], args=[arg(arg='name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Constant(value='.'), ops=[NotIn()], comparators=[Name(id='name', ctx=Load())]), body=[Assign(targets=[Name(id='error_message', ctx=Store())], value=Call(func=Attribute(value=Constant(value="Key does not contain dot separated section and key. Perhaps you wanted to use 'global.{}' instead?"), attr='format', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), Raise(exc=Call(func=Name(id='ConfigurationError', ctx=Load()), args=[Name(id='error_message', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='.'), Constant(value=1)], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='get_configuration_files', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='global_config_files', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='path', ctx=Load()), Name(id='CONFIG_BASENAME', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='path', ctx=Store()), iter=Call(func=Attribute(value=Name(id='appdirs', ctx=Load()), attr='site_config_dirs', ctx=Load()), args=[Constant(value='pip')], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='site_config_file', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='sys', ctx=Load()), attr='prefix', ctx=Load()), Name(id='CONFIG_BASENAME', ctx=Load())], keywords=[])), Assign(targets=[Name(id='legacy_config_file', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='expanduser', ctx=Load()), args=[Constant(value='~')], keywords=[]), IfExp(test=Name(id='WINDOWS', ctx=Load()), body=Constant(value='pip'), orelse=Constant(value='.pip')), Name(id='CONFIG_BASENAME', ctx=Load())], keywords=[])), Assign(targets=[Name(id='new_config_file', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Call(func=Attribute(value=Name(id='appdirs', ctx=Load()), attr='user_config_dir', ctx=Load()), args=[Constant(value='pip')], keywords=[]), Name(id='CONFIG_BASENAME', ctx=Load())], keywords=[])), Return(value=Dict(keys=[Attribute(value=Name(id='kinds', ctx=Load()), attr='GLOBAL', ctx=Load()), Attribute(value=Name(id='kinds', ctx=Load()), attr='SITE', ctx=Load()), Attribute(value=Name(id='kinds', ctx=Load()), attr='USER', ctx=Load())], values=[Name(id='global_config_files', ctx=Load()), List(elts=[Name(id='site_config_file', ctx=Load())], ctx=Load()), List(elts=[Name(id='legacy_config_file', ctx=Load()), Name(id='new_config_file', ctx=Load())], ctx=Load())]))], decorator_list=[], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='Kind', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), ClassDef(name='Configuration', bases=[], keywords=[], body=[Expr(value=Constant(value='Handles management of configuration.\n\n    Provides an interface to accessing and managing configuration files.\n\n    This class converts provides an API that takes "section.key-name" style\n    keys and stores the value associated with it as "key-name" under the\n    section "section".\n\n    This allows for a clean interface wherein the both the section and the\n    key-name are preserved in an easy to manage form in the configuration files\n    and the data stored is also nice.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='isolated', annotation=Name(id='bool', ctx=Load())), arg(arg='load_only', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Kind', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='load_only', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='load_only', ctx=Load()), ops=[NotIn()], comparators=[Name(id='VALID_LOAD_ONLY', ctx=Load())])]), body=[Raise(exc=Call(func=Name(id='ConfigurationError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Got invalid value for load_only - should be one of {}'), attr='format', ctx=Load()), args=[Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[Call(func=Name(id='map', ctx=Load()), args=[Name(id='repr', ctx=Load()), Name(id='VALID_LOAD_ONLY', ctx=Load())], keywords=[])], keywords=[])], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='isolated', ctx=Store())], value=Name(id='isolated', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='load_only', ctx=Store())], value=Name(id='load_only', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_parsers', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='Kind', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='RawConfigParser', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=DictComp(key=Name(id='variant', ctx=Load()), value=List(elts=[], ctx=Load()), generators=[comprehension(target=Name(id='variant', ctx=Store()), iter=Name(id='OVERRIDE_ORDER', ctx=Load()), ifs=[], is_async=0)]), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='Kind', ctx=Load()), Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=DictComp(key=Name(id='variant', ctx=Load()), value=Dict(keys=[], values=[]), generators=[comprehension(target=Name(id='variant', ctx=Store()), iter=Name(id='OVERRIDE_ORDER', ctx=Load()), ifs=[], is_async=0)]), simple=0), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_modified_parsers', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='RawConfigParser', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()), value=List(elts=[], ctx=Load()), simple=0)], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='load', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Loads configuration from configuration files and environment')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_load_config_files', ctx=Load()), args=[], keywords=[])), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='isolated', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_load_environment_vars', ctx=Load()), args=[], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='get_file_to_edit', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Returns the file with highest priority in configuration')), Assert(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='load_only', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), msg=Constant(value='Need to be specified a file to be editing')), Try(body=[Return(value=Subscript(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_parser_to_modify', ctx=Load()), args=[], keywords=[]), slice=Constant(value=0), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='IndexError', ctx=Load()), body=[Return(value=Constant(value=None))])], orelse=[], finalbody=[])], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='items', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Returns key-value pairs like dict.items() representing the loaded\n        configuration\n        ')), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_dictionary', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='get_value', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get a value from the configuration.')), Assign(targets=[Name(id='orig_key', ctx=Store())], value=Name(id='key', ctx=Load())), Assign(targets=[Name(id='key', ctx=Store())], value=Call(func=Name(id='_normalize_name', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[])), Try(body=[Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_dictionary', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Expr(value=Call(func=Name(id='_disassemble_key', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[])), Raise(exc=Call(func=Name(id='ConfigurationError', ctx=Load()), args=[JoinedStr(values=[Constant(value='No such key - '), FormattedValue(value=Name(id='orig_key', ctx=Load()), conversion=-1)])], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[], returns=Name(id='Any', ctx=Load())), FunctionDef(name='set_value', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Name(id='str', ctx=Load())), arg(arg='value', annotation=Name(id='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Modify a value in the configuration.')), Assign(targets=[Name(id='key', ctx=Store())], value=Call(func=Name(id='_normalize_name', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_ensure_have_load_only', ctx=Load()), args=[], keywords=[])), Assert(test=Attribute(value=Name(id='self', ctx=Load()), attr='load_only', ctx=Load())), Assign(targets=[Tuple(elts=[Name(id='fname', ctx=Store()), Name(id='parser', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_parser_to_modify', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='parser', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Tuple(elts=[Name(id='section', ctx=Store()), Name(id='name', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_disassemble_key', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='has_section', ctx=Load()), args=[Name(id='section', ctx=Load())], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='add_section', ctx=Load()), args=[Name(id='section', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='set', ctx=Load()), args=[Name(id='section', ctx=Load()), Name(id='name', ctx=Load()), Name(id='value', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='load_only', ctx=Load()), ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Name(id='value', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_mark_as_modified', ctx=Load()), args=[Name(id='fname', ctx=Load()), Name(id='parser', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='unset_value', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Unset a value in the configuration.')), Assign(targets=[Name(id='orig_key', ctx=Store())], value=Name(id='key', ctx=Load())), Assign(targets=[Name(id='key', ctx=Store())], value=Call(func=Name(id='_normalize_name', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_ensure_have_load_only', ctx=Load()), args=[], keywords=[])), Assert(test=Attribute(value=Name(id='self', ctx=Load()), attr='load_only', ctx=Load())), If(test=Compare(left=Name(id='key', ctx=Load()), ops=[NotIn()], comparators=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='load_only', ctx=Load()), ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ConfigurationError', ctx=Load()), args=[JoinedStr(values=[Constant(value='No such key - '), FormattedValue(value=Name(id='orig_key', ctx=Load()), conversion=-1)])], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='fname', ctx=Store()), Name(id='parser', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_parser_to_modify', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='parser', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Tuple(elts=[Name(id='section', ctx=Store()), Name(id='name', ctx=Store())], ctx=Store())], value=Call(func=Name(id='_disassemble_key', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=BoolOp(op=And(), values=[Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='has_section', ctx=Load()), args=[Name(id='section', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='remove_option', ctx=Load()), args=[Name(id='section', ctx=Load()), Name(id='name', ctx=Load())], keywords=[])])), body=[Raise(exc=Call(func=Name(id='ConfigurationError', ctx=Load()), args=[Constant(value='Fatal Internal error [id=1]. Please report as a bug.')], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='items', ctx=Load()), args=[Name(id='section', ctx=Load())], keywords=[])), body=[Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='remove_section', ctx=Load()), args=[Name(id='section', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_mark_as_modified', ctx=Load()), args=[Name(id='fname', ctx=Load()), Name(id='parser', ctx=Load())], keywords=[]))], orelse=[]), Delete(targets=[Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='load_only', ctx=Load()), ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Del())])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='save', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Save the current in-memory state.')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_ensure_have_load_only', ctx=Load()), args=[], keywords=[])), For(target=Tuple(elts=[Name(id='fname', ctx=Store()), Name(id='parser', ctx=Store())], ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_modified_parsers', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='info', ctx=Load()), args=[Constant(value='Writing to %s'), Name(id='fname', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='ensure_dir', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Name(id='fname', ctx=Load())], keywords=[])], keywords=[])), Try(body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='fname', ctx=Load()), Constant(value='w')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='write', ctx=Load()), args=[Name(id='f', ctx=Load())], keywords=[]))])], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), name='error', body=[Raise(exc=Call(func=Name(id='ConfigurationError', ctx=Load()), args=[JoinedStr(values=[Constant(value='An error occurred while writing to the configuration file '), FormattedValue(value=Name(id='fname', ctx=Load()), conversion=-1), Constant(value=': '), FormattedValue(value=Name(id='error', ctx=Load()), conversion=-1)])], keywords=[]))])], orelse=[], finalbody=[])], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_ensure_have_load_only', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='load_only', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ConfigurationError', ctx=Load()), args=[Constant(value='Needed a specific file to be modifying.')], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Will be working with %s variant only'), Attribute(value=Name(id='self', ctx=Load()), attr='load_only', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_dictionary', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='A dictionary representing the loaded configuration.')), Assign(targets=[Name(id='retval', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Name(id='variant', ctx=Store()), iter=Name(id='OVERRIDE_ORDER', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='retval', ctx=Load()), attr='update', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Name(id='variant', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='retval', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='_load_config_files', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Loads configuration from configuration files')), Assign(targets=[Name(id='config_files', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='iter_config_files', ctx=Load()), args=[], keywords=[])], keywords=[])), If(test=Compare(left=Subscript(value=Subscript(value=Name(id='config_files', ctx=Load()), slice=Attribute(value=Name(id='kinds', ctx=Load()), attr='ENV', ctx=Load()), ctx=Load()), slice=Slice(lower=Constant(value=0), upper=Constant(value=1)), ctx=Load()), ops=[Eq()], comparators=[List(elts=[Attribute(value=Name(id='os', ctx=Load()), attr='devnull', ctx=Load())], ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value="Skipping loading configuration files due to environment's PIP_CONFIG_FILE being os.devnull")], keywords=[])), Return()], orelse=[]), For(target=Tuple(elts=[Name(id='variant', ctx=Store()), Name(id='files', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='config_files', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[For(target=Name(id='fname', ctx=Store()), iter=Name(id='files', ctx=Load()), body=[If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='load_only', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='variant', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='load_only', ctx=Load())])]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value="Skipping file '%s' (variant: %s)"), Name(id='fname', ctx=Load()), Name(id='variant', ctx=Load())], keywords=[])), Continue()], orelse=[]), Assign(targets=[Name(id='parser', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_load_file', ctx=Load()), args=[Name(id='variant', ctx=Load()), Name(id='fname', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_parsers', ctx=Load()), slice=Name(id='variant', ctx=Load()), ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Name(id='fname', ctx=Load()), Name(id='parser', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_load_file', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='variant', annotation=Name(id='Kind', ctx=Load())), arg(arg='fname', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='verbose', ctx=Load()), args=[Constant(value="For variant '%s', will try loading '%s'"), Name(id='variant', ctx=Load()), Name(id='fname', ctx=Load())], keywords=[])), Assign(targets=[Name(id='parser', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_construct_parser', ctx=Load()), args=[Name(id='fname', ctx=Load())], keywords=[])), For(target=Name(id='section', ctx=Store()), iter=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='sections', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='items', ctx=Store())], value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='items', ctx=Load()), args=[Name(id='section', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Name(id='variant', ctx=Load()), ctx=Load()), attr='update', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_normalized_keys', ctx=Load()), args=[Name(id='section', ctx=Load()), Name(id='items', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Return(value=Name(id='parser', ctx=Load()))], decorator_list=[], returns=Name(id='RawConfigParser', ctx=Load())), FunctionDef(name='_construct_parser', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='fname', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='parser', ctx=Store())], value=Call(func=Attribute(value=Name(id='configparser', ctx=Load()), attr='RawConfigParser', ctx=Load()), args=[], keywords=[])), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='fname', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='locale_encoding', ctx=Store())], value=Call(func=Attribute(value=Name(id='locale', ctx=Load()), attr='getpreferredencoding', ctx=Load()), args=[Constant(value=False)], keywords=[])), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='read', ctx=Load()), args=[Name(id='fname', ctx=Load())], keywords=[keyword(arg='encoding', value=Name(id='locale_encoding', ctx=Load()))]))], handlers=[ExceptHandler(type=Name(id='UnicodeDecodeError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='ConfigurationFileCouldNotBeLoaded', ctx=Load()), args=[], keywords=[keyword(arg='reason', value=JoinedStr(values=[Constant(value='contains invalid '), FormattedValue(value=Name(id='locale_encoding', ctx=Load()), conversion=-1), Constant(value=' characters')])), keyword(arg='fname', value=Name(id='fname', ctx=Load()))]))]), ExceptHandler(type=Attribute(value=Name(id='configparser', ctx=Load()), attr='Error', ctx=Load()), name='error', body=[Raise(exc=Call(func=Name(id='ConfigurationFileCouldNotBeLoaded', ctx=Load()), args=[], keywords=[keyword(arg='error', value=Name(id='error', ctx=Load()))]))])], orelse=[], finalbody=[])], orelse=[]), Return(value=Name(id='parser', ctx=Load()))], decorator_list=[], returns=Name(id='RawConfigParser', ctx=Load())), FunctionDef(name='_load_environment_vars', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Loads configuration from environment variables')), Expr(value=Call(func=Attribute(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Attribute(value=Name(id='kinds', ctx=Load()), attr='ENV_VAR', ctx=Load()), ctx=Load()), attr='update', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_normalized_keys', ctx=Load()), args=[Constant(value=':env:'), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_environ_vars', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_normalized_keys', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='section', annotation=Name(id='str', ctx=Load())), arg(arg='items', annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Normalizes items to construct a dictionary with normalized keys.\n\n        This routine is where the names become keys and are made the same\n        regardless of source - configuration files or environment.\n        ')), Assign(targets=[Name(id='normalized', ctx=Store())], value=Dict(keys=[], values=[])), For(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='val', ctx=Store())], ctx=Store()), iter=Name(id='items', ctx=Load()), body=[Assign(targets=[Name(id='key', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='section', ctx=Load()), op=Add(), right=Constant(value='.')), op=Add(), right=Call(func=Name(id='_normalize_name', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]))), Assign(targets=[Subscript(value=Name(id='normalized', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Name(id='val', ctx=Load()))], orelse=[]), Return(value=Name(id='normalized', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='get_environ_vars', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Returns a generator with all environmental vars with prefix PIP_')), For(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='val', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Call(func=Attribute(value=Name(id='key', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='PIP_')], keywords=[]), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Attribute(value=Subscript(value=Name(id='key', ctx=Load()), slice=Slice(lower=Constant(value=4)), ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='name', ctx=Load()), ops=[NotIn()], comparators=[Name(id='ENV_NAMES_IGNORED', ctx=Load())]), body=[Expr(value=Yield(value=Tuple(elts=[Name(id='name', ctx=Load()), Name(id='val', ctx=Load())], ctx=Load())))], orelse=[])], orelse=[])], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='iter_config_files', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Yields variant and configuration files associated with it.\n\n        This should be treated like items of a dictionary.\n        ')), Assign(targets=[Name(id='config_file', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='PIP_CONFIG_FILE'), Constant(value=None)], keywords=[])), If(test=Compare(left=Name(id='config_file', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Yield(value=Tuple(elts=[Attribute(value=Name(id='kinds', ctx=Load()), attr='ENV', ctx=Load()), List(elts=[Name(id='config_file', ctx=Load())], ctx=Load())], ctx=Load())))], orelse=[Expr(value=Yield(value=Tuple(elts=[Attribute(value=Name(id='kinds', ctx=Load()), attr='ENV', ctx=Load()), List(elts=[], ctx=Load())], ctx=Load())))]), Assign(targets=[Name(id='config_files', ctx=Store())], value=Call(func=Name(id='get_configuration_files', ctx=Load()), args=[], keywords=[])), Expr(value=Yield(value=Tuple(elts=[Attribute(value=Name(id='kinds', ctx=Load()), attr='GLOBAL', ctx=Load()), Subscript(value=Name(id='config_files', ctx=Load()), slice=Attribute(value=Name(id='kinds', ctx=Load()), attr='GLOBAL', ctx=Load()), ctx=Load())], ctx=Load()))), Assign(targets=[Name(id='should_load_user_config', ctx=Store())], value=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='isolated', ctx=Load())), UnaryOp(op=Not(), operand=BoolOp(op=And(), values=[Name(id='config_file', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[Name(id='config_file', ctx=Load())], keywords=[])]))])), If(test=Name(id='should_load_user_config', ctx=Load()), body=[Expr(value=Yield(value=Tuple(elts=[Attribute(value=Name(id='kinds', ctx=Load()), attr='USER', ctx=Load()), Subscript(value=Name(id='config_files', ctx=Load()), slice=Attribute(value=Name(id='kinds', ctx=Load()), attr='USER', ctx=Load()), ctx=Load())], ctx=Load())))], orelse=[]), Expr(value=Yield(value=Tuple(elts=[Attribute(value=Name(id='kinds', ctx=Load()), attr='SITE', ctx=Load()), Subscript(value=Name(id='config_files', ctx=Load()), slice=Attribute(value=Name(id='kinds', ctx=Load()), attr='SITE', ctx=Load()), ctx=Load())], ctx=Load())))], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='Kind', ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='get_values_in_config', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='variant', annotation=Name(id='Kind', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get values present in a config file')), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_config', ctx=Load()), slice=Name(id='variant', ctx=Load()), ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='_get_parser_to_modify', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Attribute(value=Name(id='self', ctx=Load()), attr='load_only', ctx=Load())), Assign(targets=[Name(id='parsers', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_parsers', ctx=Load()), slice=Attribute(value=Name(id='self', ctx=Load()), attr='load_only', ctx=Load()), ctx=Load())), If(test=UnaryOp(op=Not(), operand=Name(id='parsers', ctx=Load())), body=[Raise(exc=Call(func=Name(id='ConfigurationError', ctx=Load()), args=[Constant(value='Fatal Internal error [id=2]. Please report as a bug.')], keywords=[]))], orelse=[]), Return(value=Subscript(value=Name(id='parsers', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='RawConfigParser', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='_mark_as_modified', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='fname', annotation=Name(id='str', ctx=Load())), arg(arg='parser', annotation=Name(id='RawConfigParser', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='file_parser_tuple', ctx=Store())], value=Tuple(elts=[Name(id='fname', ctx=Load()), Name(id='parser', ctx=Load())], ctx=Load())), If(test=Compare(left=Name(id='file_parser_tuple', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_modified_parsers', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_modified_parsers', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='file_parser_tuple', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[FormattedValue(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), conversion=-1), Constant(value='('), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='_dictionary', ctx=Load()), conversion=114), Constant(value=')')]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[])], type_ignores=[])