Module(body=[Expr(value=Constant(value='Cache Management\n')), Import(names=[alias(name='hashlib')]), Import(names=[alias(name='json')]), Import(names=[alias(name='logging')]), Import(names=[alias(name='os')]), ImportFrom(module='pathlib', names=[alias(name='Path')], level=0), ImportFrom(module='typing', names=[alias(name='Any'), alias(name='Dict'), alias(name='List'), alias(name='Optional')], level=0), ImportFrom(module='pip._vendor.packaging.tags', names=[alias(name='Tag'), alias(name='interpreter_name'), alias(name='interpreter_version')], level=0), ImportFrom(module='pip._vendor.packaging.utils', names=[alias(name='canonicalize_name')], level=0), ImportFrom(module='pip._internal.exceptions', names=[alias(name='InvalidWheelFilename')], level=0), ImportFrom(module='pip._internal.models.direct_url', names=[alias(name='DirectUrl')], level=0), ImportFrom(module='pip._internal.models.link', names=[alias(name='Link')], level=0), ImportFrom(module='pip._internal.models.wheel', names=[alias(name='Wheel')], level=0), ImportFrom(module='pip._internal.utils.temp_dir', names=[alias(name='TempDirectory'), alias(name='tempdir_kinds')], level=0), ImportFrom(module='pip._internal.utils.urls', names=[alias(name='path_to_url')], level=0), Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ORIGIN_JSON_NAME', ctx=Store())], value=Constant(value='origin.json')), FunctionDef(name='_hash_dict', args=arguments(posonlyargs=[], args=[arg(arg='d', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return a stable sha224 of a dictionary.')), Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dumps', ctx=Load()), args=[Name(id='d', ctx=Load())], keywords=[keyword(arg='sort_keys', value=Constant(value=True)), keyword(arg='separators', value=Tuple(elts=[Constant(value=','), Constant(value=':')], ctx=Load())), keyword(arg='ensure_ascii', value=Constant(value=True))])), Return(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='hashlib', ctx=Load()), attr='sha224', ctx=Load()), args=[Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[])], keywords=[]), attr='hexdigest', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), ClassDef(name='Cache', bases=[], keywords=[], body=[Expr(value=Constant(value='An abstract class - provides cache directories for data from links\n\n    :param cache_dir: The root of the cache.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='cache_dir', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[], keywords=[])), Assert(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Name(id='cache_dir', ctx=Load())), Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isabs', ctx=Load()), args=[Name(id='cache_dir', ctx=Load())], keywords=[])])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='cache_dir', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='cache_dir', ctx=Load()), Constant(value=None)]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_get_cache_path_parts', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='link', annotation=Name(id='Link', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Get parts of part that must be os.path.joined with cache_dir')), Assign(targets=[Name(id='key_parts', ctx=Store())], value=Dict(keys=[Constant(value='url')], values=[Attribute(value=Name(id='link', ctx=Load()), attr='url_without_fragment', ctx=Load())])), If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='link', ctx=Load()), attr='hash_name', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='link', ctx=Load()), attr='hash', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Subscript(value=Name(id='key_parts', ctx=Load()), slice=Attribute(value=Name(id='link', ctx=Load()), attr='hash_name', ctx=Load()), ctx=Store())], value=Attribute(value=Name(id='link', ctx=Load()), attr='hash', ctx=Load()))], orelse=[]), If(test=Attribute(value=Name(id='link', ctx=Load()), attr='subdirectory_fragment', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='key_parts', ctx=Load()), slice=Constant(value='subdirectory'), ctx=Store())], value=Attribute(value=Name(id='link', ctx=Load()), attr='subdirectory_fragment', ctx=Load()))], orelse=[]), Assign(targets=[Subscript(value=Name(id='key_parts', ctx=Load()), slice=Constant(value='interpreter_name'), ctx=Store())], value=Call(func=Name(id='interpreter_name', ctx=Load()), args=[], keywords=[])), Assign(targets=[Subscript(value=Name(id='key_parts', ctx=Load()), slice=Constant(value='interpreter_version'), ctx=Store())], value=Call(func=Name(id='interpreter_version', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='hashed', ctx=Store())], value=Call(func=Name(id='_hash_dict', ctx=Load()), args=[Name(id='key_parts', ctx=Load())], keywords=[])), Assign(targets=[Name(id='parts', ctx=Store())], value=List(elts=[Subscript(value=Name(id='hashed', ctx=Load()), slice=Slice(upper=Constant(value=2)), ctx=Load()), Subscript(value=Name(id='hashed', ctx=Load()), slice=Slice(lower=Constant(value=2), upper=Constant(value=4)), ctx=Load()), Subscript(value=Name(id='hashed', ctx=Load()), slice=Slice(lower=Constant(value=4), upper=Constant(value=6)), ctx=Load()), Subscript(value=Name(id='hashed', ctx=Load()), slice=Slice(lower=Constant(value=6)), ctx=Load())], ctx=Load())), Return(value=Name(id='parts', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='_get_candidates', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='link', annotation=Name(id='Link', ctx=Load())), arg(arg='canonical_package_name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='can_not_cache', ctx=Store())], value=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='cache_dir', ctx=Load())), UnaryOp(op=Not(), operand=Name(id='canonical_package_name', ctx=Load())), UnaryOp(op=Not(), operand=Name(id='link', ctx=Load()))])), If(test=Name(id='can_not_cache', ctx=Load()), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_path_for_link', ctx=Load()), args=[Name(id='link', ctx=Load())], keywords=[])), If(test=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='isdir', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), body=[Return(value=ListComp(elt=Tuple(elts=[Name(id='candidate', ctx=Load()), Name(id='path', ctx=Load())], ctx=Load()), generators=[comprehension(target=Name(id='candidate', ctx=Store()), iter=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='listdir', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]), ifs=[], is_async=0)]))], orelse=[]), Return(value=List(elts=[], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load())), FunctionDef(name='get_path_for_link', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='link', annotation=Name(id='Link', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return a directory to store cached items in for link.')), Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='get', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='link', annotation=Name(id='Link', ctx=Load())), arg(arg='package_name', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='supported_tags', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Tag', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Returns a link to a cached item if it exists, otherwise returns the\n        passed link.\n        ')), Raise(exc=Call(func=Name(id='NotImplementedError', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Name(id='Link', ctx=Load()))], decorator_list=[]), ClassDef(name='SimpleWheelCache', bases=[Name(id='Cache', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='A cache of wheels for future installs.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='cache_dir', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Name(id='cache_dir', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='get_path_for_link', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='link', annotation=Name(id='Link', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Return a directory to store cached wheels for link\n\n        Because there are M wheels for any one sdist, we provide a directory\n        to cache them in, and then consult that directory when looking up\n        cache hits.\n\n        We only insert things into the cache if they have plausible version\n        numbers, so that we don't contaminate the cache with things that were\n        not unique. E.g. ./package might have dozens of installs done for it\n        and build a version of 0.0...and if we built and cached a wheel, we'd\n        end up using the same wheel even if the source has been edited.\n\n        :param link: The link of the sdist for which this will cache wheels.\n        ")), Assign(targets=[Name(id='parts', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_cache_path_parts', ctx=Load()), args=[Name(id='link', ctx=Load())], keywords=[])), Assert(test=Attribute(value=Name(id='self', ctx=Load()), attr='cache_dir', ctx=Load())), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='cache_dir', ctx=Load()), Constant(value='wheels'), Starred(value=Name(id='parts', ctx=Load()), ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='get', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='link', annotation=Name(id='Link', ctx=Load())), arg(arg='package_name', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='supported_tags', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Tag', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='candidates', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=UnaryOp(op=Not(), operand=Name(id='package_name', ctx=Load())), body=[Return(value=Name(id='link', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='canonical_package_name', ctx=Store())], value=Call(func=Name(id='canonicalize_name', ctx=Load()), args=[Name(id='package_name', ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='wheel_name', ctx=Store()), Name(id='wheel_dir', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_candidates', ctx=Load()), args=[Name(id='link', ctx=Load()), Name(id='canonical_package_name', ctx=Load())], keywords=[]), body=[Try(body=[Assign(targets=[Name(id='wheel', ctx=Store())], value=Call(func=Name(id='Wheel', ctx=Load()), args=[Name(id='wheel_name', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='InvalidWheelFilename', ctx=Load()), body=[Continue()])], orelse=[], finalbody=[]), If(test=Compare(left=Call(func=Name(id='canonicalize_name', ctx=Load()), args=[Attribute(value=Name(id='wheel', ctx=Load()), attr='name', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Name(id='canonical_package_name', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Ignoring cached wheel %s for %s as it does not match the expected distribution name %s.'), Name(id='wheel_name', ctx=Load()), Name(id='link', ctx=Load()), Name(id='package_name', ctx=Load())], keywords=[])), Continue()], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='wheel', ctx=Load()), attr='supported', ctx=Load()), args=[Name(id='supported_tags', ctx=Load())], keywords=[])), body=[Continue()], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='candidates', ctx=Load()), attr='append', ctx=Load()), args=[Tuple(elts=[Call(func=Attribute(value=Name(id='wheel', ctx=Load()), attr='support_index_min', ctx=Load()), args=[Name(id='supported_tags', ctx=Load())], keywords=[]), Name(id='wheel_name', ctx=Load()), Name(id='wheel_dir', ctx=Load())], ctx=Load())], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='candidates', ctx=Load())), body=[Return(value=Name(id='link', ctx=Load()))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='_', ctx=Store()), Name(id='wheel_name', ctx=Store()), Name(id='wheel_dir', ctx=Store())], ctx=Store())], value=Call(func=Name(id='min', ctx=Load()), args=[Name(id='candidates', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='Link', ctx=Load()), args=[Call(func=Name(id='path_to_url', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='wheel_dir', ctx=Load()), Name(id='wheel_name', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='Link', ctx=Load()))], decorator_list=[]), ClassDef(name='EphemWheelCache', bases=[Name(id='SimpleWheelCache', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="A SimpleWheelCache that creates it's own temporary cache directory")), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_temp_dir', ctx=Store())], value=Call(func=Name(id='TempDirectory', ctx=Load()), args=[], keywords=[keyword(arg='kind', value=Attribute(value=Name(id='tempdir_kinds', ctx=Load()), attr='EPHEM_WHEEL_CACHE', ctx=Load())), keyword(arg='globally_managed', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_temp_dir', ctx=Load()), attr='path', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='CacheEntry', bases=[], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='link', annotation=Name(id='Link', ctx=Load())), arg(arg='persistent', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='link', ctx=Store())], value=Name(id='link', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='persistent', ctx=Store())], value=Name(id='persistent', ctx=Load())), AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='origin', ctx=Store()), annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='DirectUrl', ctx=Load()), ctx=Load()), value=Constant(value=None), simple=0), Assign(targets=[Name(id='origin_direct_url_path', ctx=Store())], value=BinOp(left=Attribute(value=Call(func=Name(id='Path', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='link', ctx=Load()), attr='file_path', ctx=Load())], keywords=[]), attr='parent', ctx=Load()), op=Div(), right=Name(id='ORIGIN_JSON_NAME', ctx=Load()))), If(test=Call(func=Attribute(value=Name(id='origin_direct_url_path', ctx=Load()), attr='exists', ctx=Load()), args=[], keywords=[]), body=[Try(body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='origin', ctx=Store())], value=Call(func=Attribute(value=Name(id='DirectUrl', ctx=Load()), attr='from_json', ctx=Load()), args=[Call(func=Attribute(value=Name(id='origin_direct_url_path', ctx=Load()), attr='read_text', ctx=Load()), args=[], keywords=[keyword(arg='encoding', value=Constant(value='utf-8'))])], keywords=[]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='e', body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='Ignoring invalid cache entry origin file %s for %s (%s)'), Name(id='origin_direct_url_path', ctx=Load()), Attribute(value=Name(id='link', ctx=Load()), attr='filename', ctx=Load()), Name(id='e', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], orelse=[])], decorator_list=[])], decorator_list=[]), ClassDef(name='WheelCache', bases=[Name(id='Cache', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Wraps EphemWheelCache and SimpleWheelCache into a single Cache\n\n    This Cache allows for gracefully degradation, using the ephem wheel cache\n    when a certain link is not found in the simple wheel cache first.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='cache_dir', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Name(id='cache_dir', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_wheel_cache', ctx=Store())], value=Call(func=Name(id='SimpleWheelCache', ctx=Load()), args=[Name(id='cache_dir', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_ephem_cache', ctx=Store())], value=Call(func=Name(id='EphemWheelCache', ctx=Load()), args=[], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='get_path_for_link', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='link', annotation=Name(id='Link', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_wheel_cache', ctx=Load()), attr='get_path_for_link', ctx=Load()), args=[Name(id='link', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='get_ephem_path_for_link', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='link', annotation=Name(id='Link', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ephem_cache', ctx=Load()), attr='get_path_for_link', ctx=Load()), args=[Name(id='link', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='get', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='link', annotation=Name(id='Link', ctx=Load())), arg(arg='package_name', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='supported_tags', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Tag', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='cache_entry', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='get_cache_entry', ctx=Load()), args=[Name(id='link', ctx=Load()), Name(id='package_name', ctx=Load()), Name(id='supported_tags', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='cache_entry', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Name(id='link', ctx=Load()))], orelse=[]), Return(value=Attribute(value=Name(id='cache_entry', ctx=Load()), attr='link', ctx=Load()))], decorator_list=[], returns=Name(id='Link', ctx=Load())), FunctionDef(name='get_cache_entry', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='link', annotation=Name(id='Link', ctx=Load())), arg(arg='package_name', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='supported_tags', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='Tag', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Returns a CacheEntry with a link to a cached item if it exists or\n        None. The cache entry indicates if the item was found in the persistent\n        or ephemeral cache.\n        ')), Assign(targets=[Name(id='retval', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_wheel_cache', ctx=Load()), attr='get', ctx=Load()), args=[], keywords=[keyword(arg='link', value=Name(id='link', ctx=Load())), keyword(arg='package_name', value=Name(id='package_name', ctx=Load())), keyword(arg='supported_tags', value=Name(id='supported_tags', ctx=Load()))])), If(test=Compare(left=Name(id='retval', ctx=Load()), ops=[IsNot()], comparators=[Name(id='link', ctx=Load())]), body=[Return(value=Call(func=Name(id='CacheEntry', ctx=Load()), args=[Name(id='retval', ctx=Load())], keywords=[keyword(arg='persistent', value=Constant(value=True))]))], orelse=[]), Assign(targets=[Name(id='retval', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ephem_cache', ctx=Load()), attr='get', ctx=Load()), args=[], keywords=[keyword(arg='link', value=Name(id='link', ctx=Load())), keyword(arg='package_name', value=Name(id='package_name', ctx=Load())), keyword(arg='supported_tags', value=Name(id='supported_tags', ctx=Load()))])), If(test=Compare(left=Name(id='retval', ctx=Load()), ops=[IsNot()], comparators=[Name(id='link', ctx=Load())]), body=[Return(value=Call(func=Name(id='CacheEntry', ctx=Load()), args=[Name(id='retval', ctx=Load())], keywords=[keyword(arg='persistent', value=Constant(value=False))]))], orelse=[]), Return(value=Constant(value=None))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='CacheEntry', ctx=Load()), ctx=Load())), FunctionDef(name='record_download_origin', args=arguments(posonlyargs=[], args=[arg(arg='cache_dir', annotation=Name(id='str', ctx=Load())), arg(arg='download_info', annotation=Name(id='DirectUrl', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='origin_path', ctx=Store())], value=BinOp(left=Call(func=Name(id='Path', ctx=Load()), args=[Name(id='cache_dir', ctx=Load())], keywords=[]), op=Div(), right=Name(id='ORIGIN_JSON_NAME', ctx=Load()))), If(test=Call(func=Attribute(value=Name(id='origin_path', ctx=Load()), attr='exists', ctx=Load()), args=[], keywords=[]), body=[Try(body=[Assign(targets=[Name(id='origin', ctx=Store())], value=Call(func=Attribute(value=Name(id='DirectUrl', ctx=Load()), attr='from_json', ctx=Load()), args=[Call(func=Attribute(value=Name(id='origin_path', ctx=Load()), attr='read_text', ctx=Load()), args=[], keywords=[keyword(arg='encoding', value=Constant(value='utf-8'))])], keywords=[]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='e', body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='Could not read origin file %s in cache entry (%s). Will attempt to overwrite it.'), Name(id='origin_path', ctx=Load()), Name(id='e', ctx=Load())], keywords=[]))])], orelse=[If(test=Compare(left=Attribute(value=Name(id='origin', ctx=Load()), attr='url', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='download_info', ctx=Load()), attr='url', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='Origin URL %s in cache entry %s does not match download URL %s. This is likely a pip bug or a cache corruption issue. Will overwrite it with the new value.'), Attribute(value=Name(id='origin', ctx=Load()), attr='url', ctx=Load()), Name(id='cache_dir', ctx=Load()), Attribute(value=Name(id='download_info', ctx=Load()), attr='url', ctx=Load())], keywords=[]))], orelse=[])], finalbody=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='origin_path', ctx=Load()), attr='write_text', ctx=Load()), args=[Call(func=Attribute(value=Name(id='download_info', ctx=Load()), attr='to_json', ctx=Load()), args=[], keywords=[])], keywords=[keyword(arg='encoding', value=Constant(value='utf-8'))]))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Constant(value=None))], decorator_list=[])], type_ignores=[])