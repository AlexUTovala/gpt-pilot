Module(body=[Import(names=[alias(name='datetime')]), Import(names=[alias(name='functools')]), Import(names=[alias(name='hashlib')]), Import(names=[alias(name='json')]), Import(names=[alias(name='logging')]), Import(names=[alias(name='optparse')]), Import(names=[alias(name='os.path')]), Import(names=[alias(name='sys')]), ImportFrom(module='dataclasses', names=[alias(name='dataclass')], level=0), ImportFrom(module='typing', names=[alias(name='Any'), alias(name='Callable'), alias(name='Dict'), alias(name='Optional')], level=0), ImportFrom(module='pip._vendor.packaging.version', names=[alias(name='parse', asname='parse_version')], level=0), ImportFrom(module='pip._vendor.rich.console', names=[alias(name='Group')], level=0), ImportFrom(module='pip._vendor.rich.markup', names=[alias(name='escape')], level=0), ImportFrom(module='pip._vendor.rich.text', names=[alias(name='Text')], level=0), ImportFrom(module='pip._internal.index.collector', names=[alias(name='LinkCollector')], level=0), ImportFrom(module='pip._internal.index.package_finder', names=[alias(name='PackageFinder')], level=0), ImportFrom(module='pip._internal.metadata', names=[alias(name='get_default_environment')], level=0), ImportFrom(module='pip._internal.metadata.base', names=[alias(name='DistributionVersion')], level=0), ImportFrom(module='pip._internal.models.selection_prefs', names=[alias(name='SelectionPreferences')], level=0), ImportFrom(module='pip._internal.network.session', names=[alias(name='PipSession')], level=0), ImportFrom(module='pip._internal.utils.compat', names=[alias(name='WINDOWS')], level=0), ImportFrom(module='pip._internal.utils.entrypoints', names=[alias(name='get_best_invocation_for_this_pip'), alias(name='get_best_invocation_for_this_python')], level=0), ImportFrom(module='pip._internal.utils.filesystem', names=[alias(name='adjacent_tmp_file'), alias(name='check_path_owner'), alias(name='replace')], level=0), ImportFrom(module='pip._internal.utils.misc', names=[alias(name='ensure_dir')], level=0), Assign(targets=[Name(id='_WEEK', ctx=Store())], value=Call(func=Attribute(value=Name(id='datetime', ctx=Load()), attr='timedelta', ctx=Load()), args=[], keywords=[keyword(arg='days', value=Constant(value=7))])), Assign(targets=[Name(id='logger', ctx=Store())], value=Call(func=Attribute(value=Name(id='logging', ctx=Load()), attr='getLogger', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), FunctionDef(name='_get_statefile_name', args=arguments(posonlyargs=[], args=[arg(arg='key', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='key_bytes', ctx=Store())], value=Call(func=Attribute(value=Name(id='key', ctx=Load()), attr='encode', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='hashlib', ctx=Load()), attr='sha224', ctx=Load()), args=[Name(id='key_bytes', ctx=Load())], keywords=[]), attr='hexdigest', ctx=Load()), args=[], keywords=[])), Return(value=Name(id='name', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='_convert_date', args=arguments(posonlyargs=[], args=[arg(arg='isodate', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Convert an ISO format string to a date.\n\n    Handles the format 2020-01-22T14:24:01Z (trailing Z)\n    which is not supported by older versions of fromisoformat.\n    ')), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='fromisoformat', ctx=Load()), args=[Call(func=Attribute(value=Name(id='isodate', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='Z'), Constant(value='+00:00')], keywords=[])], keywords=[]))], decorator_list=[], returns=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load())), ClassDef(name='SelfCheckState', bases=[], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='cache_dir', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[AnnAssign(target=Attribute(value=Name(id='self', ctx=Load()), attr='_state', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=0), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_statefile_path', ctx=Store())], value=Constant(value=None)), If(test=Name(id='cache_dir', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_statefile_path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Name(id='cache_dir', ctx=Load()), Constant(value='selfcheck'), Call(func=Name(id='_get_statefile_name', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='key', ctx=Load())], keywords=[])], keywords=[])), Try(body=[With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_statefile_path', ctx=Load())], keywords=[keyword(arg='encoding', value=Constant(value='utf-8'))]), optional_vars=Name(id='statefile', ctx=Store()))], body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_state', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='statefile', ctx=Load())], keywords=[]))])], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='OSError', ctx=Load()), Name(id='ValueError', ctx=Load()), Name(id='KeyError', ctx=Load())], ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='key', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='sys', ctx=Load()), attr='prefix', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())], returns=Name(id='str', ctx=Load())), FunctionDef(name='get', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='current_time', annotation=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Check if we have a not-outdated version loaded already.')), If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='_state', ctx=Load())), body=[Return(value=Constant(value=None))], orelse=[]), If(test=Compare(left=Constant(value='last_check'), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_state', ctx=Load())]), body=[Return(value=Constant(value=None))], orelse=[]), If(test=Compare(left=Constant(value='pypi_version'), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_state', ctx=Load())]), body=[Return(value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='last_check', ctx=Store())], value=Call(func=Name(id='_convert_date', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_state', ctx=Load()), slice=Constant(value='last_check'), ctx=Load())], keywords=[])), Assign(targets=[Name(id='time_since_last_check', ctx=Store())], value=BinOp(left=Name(id='current_time', ctx=Load()), op=Sub(), right=Name(id='last_check', ctx=Load()))), If(test=Compare(left=Name(id='time_since_last_check', ctx=Load()), ops=[Gt()], comparators=[Name(id='_WEEK', ctx=Load())]), body=[Return(value=Constant(value=None))], orelse=[]), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_state', ctx=Load()), slice=Constant(value='pypi_version'), ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='set', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='pypi_version', annotation=Name(id='str', ctx=Load())), arg(arg='current_time', annotation=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='self', ctx=Load()), attr='_statefile_path', ctx=Load())), body=[Return()], orelse=[]), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='check_path_owner', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_statefile_path', ctx=Load())], keywords=[])], keywords=[])), body=[Return()], orelse=[]), Expr(value=Call(func=Name(id='ensure_dir', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='dirname', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_statefile_path', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='state', ctx=Store())], value=Dict(keys=[Constant(value='key'), Constant(value='last_check'), Constant(value='pypi_version')], values=[Attribute(value=Name(id='self', ctx=Load()), attr='key', ctx=Load()), Call(func=Attribute(value=Name(id='current_time', ctx=Load()), attr='isoformat', ctx=Load()), args=[], keywords=[]), Name(id='pypi_version', ctx=Load())])), Assign(targets=[Name(id='text', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dumps', ctx=Load()), args=[Name(id='state', ctx=Load())], keywords=[keyword(arg='sort_keys', value=Constant(value=True)), keyword(arg='separators', value=Tuple(elts=[Constant(value=','), Constant(value=':')], ctx=Load()))])), With(items=[withitem(context_expr=Call(func=Name(id='adjacent_tmp_file', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_statefile_path', ctx=Load())], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Attribute(value=Name(id='text', ctx=Load()), attr='encode', ctx=Load()), args=[], keywords=[])], keywords=[]))]), Try(body=[Expr(value=Call(func=Name(id='replace', ctx=Load()), args=[Attribute(value=Name(id='f', ctx=Load()), attr='name', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_statefile_path', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='OSError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], decorator_list=[], returns=Constant(value=None))], decorator_list=[]), ClassDef(name='UpgradePrompt', bases=[], keywords=[], body=[AnnAssign(target=Name(id='old', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='new', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), FunctionDef(name='__rich__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Name(id='WINDOWS', ctx=Load()), body=[Assign(targets=[Name(id='pip_cmd', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Call(func=Name(id='get_best_invocation_for_this_python', ctx=Load()), args=[], keywords=[]), conversion=-1), Constant(value=' -m pip')]))], orelse=[Assign(targets=[Name(id='pip_cmd', ctx=Store())], value=Call(func=Name(id='get_best_invocation_for_this_pip', ctx=Load()), args=[], keywords=[]))]), Assign(targets=[Name(id='notice', ctx=Store())], value=Constant(value='[bold][[reset][blue]notice[reset][bold]][reset]')), Return(value=Call(func=Name(id='Group', ctx=Load()), args=[Call(func=Name(id='Text', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='Text', ctx=Load()), attr='from_markup', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='notice', ctx=Load()), conversion=-1), Constant(value=' A new release of pip is available: [red]'), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='old', ctx=Load()), conversion=-1), Constant(value='[reset] -> [green]'), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='new', ctx=Load()), conversion=-1), Constant(value='[reset]')])], keywords=[]), Call(func=Attribute(value=Name(id='Text', ctx=Load()), attr='from_markup', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Name(id='notice', ctx=Load()), conversion=-1), Constant(value=' To update, run: [green]'), FormattedValue(value=Call(func=Name(id='escape', ctx=Load()), args=[Name(id='pip_cmd', ctx=Load())], keywords=[]), conversion=-1), Constant(value=' install --upgrade pip')])], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='Group', ctx=Load()))], decorator_list=[Name(id='dataclass', ctx=Load())]), FunctionDef(name='was_installed_by_pip', args=arguments(posonlyargs=[], args=[arg(arg='pkg', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Checks whether pkg was installed by pip\n\n    This is used not to display the upgrade message when pip is in fact\n    installed by system package manager, such as dnf on Fedora.\n    ')), Assign(targets=[Name(id='dist', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='get_default_environment', ctx=Load()), args=[], keywords=[]), attr='get_distribution', ctx=Load()), args=[Name(id='pkg', ctx=Load())], keywords=[])), Return(value=BoolOp(op=And(), values=[Compare(left=Name(id='dist', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Constant(value='pip'), ops=[Eq()], comparators=[Attribute(value=Name(id='dist', ctx=Load()), attr='installer', ctx=Load())])]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='_get_current_remote_pip_version', args=arguments(posonlyargs=[], args=[arg(arg='session', annotation=Name(id='PipSession', ctx=Load())), arg(arg='options', annotation=Attribute(value=Name(id='optparse', ctx=Load()), attr='Values', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='link_collector', ctx=Store())], value=Call(func=Attribute(value=Name(id='LinkCollector', ctx=Load()), attr='create', ctx=Load()), args=[Name(id='session', ctx=Load())], keywords=[keyword(arg='options', value=Name(id='options', ctx=Load())), keyword(arg='suppress_no_index', value=Constant(value=True))])), Assign(targets=[Name(id='selection_prefs', ctx=Store())], value=Call(func=Name(id='SelectionPreferences', ctx=Load()), args=[], keywords=[keyword(arg='allow_yanked', value=Constant(value=False)), keyword(arg='allow_all_prereleases', value=Constant(value=False))])), Assign(targets=[Name(id='finder', ctx=Store())], value=Call(func=Attribute(value=Name(id='PackageFinder', ctx=Load()), attr='create', ctx=Load()), args=[], keywords=[keyword(arg='link_collector', value=Name(id='link_collector', ctx=Load())), keyword(arg='selection_prefs', value=Name(id='selection_prefs', ctx=Load()))])), Assign(targets=[Name(id='best_candidate', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Name(id='finder', ctx=Load()), attr='find_best_candidate', ctx=Load()), args=[Constant(value='pip')], keywords=[]), attr='best_candidate', ctx=Load())), If(test=Compare(left=Name(id='best_candidate', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Constant(value=None))], orelse=[]), Return(value=Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='best_candidate', ctx=Load()), attr='version', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='_self_version_check_logic', args=arguments(posonlyargs=[], args=[], kwonlyargs=[arg(arg='state', annotation=Name(id='SelfCheckState', ctx=Load())), arg(arg='current_time', annotation=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load())), arg(arg='local_version', annotation=Name(id='DistributionVersion', ctx=Load())), arg(arg='get_remote_version', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], kw_defaults=[None, None, None, None], defaults=[]), body=[Assign(targets=[Name(id='remote_version_str', ctx=Store())], value=Call(func=Attribute(value=Name(id='state', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='current_time', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='remote_version_str', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='remote_version_str', ctx=Store())], value=Call(func=Name(id='get_remote_version', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='remote_version_str', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='No remote pip version found')], keywords=[])), Return(value=Constant(value=None))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='state', ctx=Load()), attr='set', ctx=Load()), args=[Name(id='remote_version_str', ctx=Load()), Name(id='current_time', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='remote_version', ctx=Store())], value=Call(func=Name(id='parse_version', ctx=Load()), args=[Name(id='remote_version_str', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Remote version of pip: %s'), Name(id='remote_version', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Local version of pip:  %s'), Name(id='local_version', ctx=Load())], keywords=[])), Assign(targets=[Name(id='pip_installed_by_pip', ctx=Store())], value=Call(func=Name(id='was_installed_by_pip', ctx=Load()), args=[Constant(value='pip')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='Was pip installed by pip? %s'), Name(id='pip_installed_by_pip', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='pip_installed_by_pip', ctx=Load())), body=[Return(value=Constant(value=None))], orelse=[]), Assign(targets=[Name(id='local_version_is_older', ctx=Store())], value=BoolOp(op=And(), values=[Compare(left=Name(id='local_version', ctx=Load()), ops=[Lt()], comparators=[Name(id='remote_version', ctx=Load())]), Compare(left=Attribute(value=Name(id='local_version', ctx=Load()), attr='base_version', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='remote_version', ctx=Load()), attr='base_version', ctx=Load())])])), If(test=Name(id='local_version_is_older', ctx=Load()), body=[Return(value=Call(func=Name(id='UpgradePrompt', ctx=Load()), args=[], keywords=[keyword(arg='old', value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='local_version', ctx=Load())], keywords=[])), keyword(arg='new', value=Name(id='remote_version_str', ctx=Load()))]))], orelse=[]), Return(value=Constant(value=None))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='UpgradePrompt', ctx=Load()), ctx=Load())), FunctionDef(name='pip_self_version_check', args=arguments(posonlyargs=[], args=[arg(arg='session', annotation=Name(id='PipSession', ctx=Load())), arg(arg='options', annotation=Attribute(value=Name(id='optparse', ctx=Load()), attr='Values', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="Check for an update for pip.\n\n    Limit the frequency of checks to once per week. State is stored either in\n    the active virtualenv or in the user's USER_CACHE_DIR keyed off the prefix\n    of the pip script path.\n    ")), Assign(targets=[Name(id='installed_dist', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='get_default_environment', ctx=Load()), args=[], keywords=[]), attr='get_distribution', ctx=Load()), args=[Constant(value='pip')], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='installed_dist', ctx=Load())), body=[Return()], orelse=[]), Try(body=[Assign(targets=[Name(id='upgrade_prompt', ctx=Store())], value=Call(func=Name(id='_self_version_check_logic', ctx=Load()), args=[], keywords=[keyword(arg='state', value=Call(func=Name(id='SelfCheckState', ctx=Load()), args=[], keywords=[keyword(arg='cache_dir', value=Attribute(value=Name(id='options', ctx=Load()), attr='cache_dir', ctx=Load()))])), keyword(arg='current_time', value=Call(func=Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='datetime', ctx=Load()), attr='now', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='datetime', ctx=Load()), attr='timezone', ctx=Load()), attr='utc', ctx=Load())], keywords=[])), keyword(arg='local_version', value=Attribute(value=Name(id='installed_dist', ctx=Load()), attr='version', ctx=Load())), keyword(arg='get_remote_version', value=Call(func=Attribute(value=Name(id='functools', ctx=Load()), attr='partial', ctx=Load()), args=[Name(id='_get_current_remote_pip_version', ctx=Load()), Name(id='session', ctx=Load()), Name(id='options', ctx=Load())], keywords=[]))])), If(test=Compare(left=Name(id='upgrade_prompt', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='%s'), Name(id='upgrade_prompt', ctx=Load())], keywords=[keyword(arg='extra', value=Dict(keys=[Constant(value='rich')], values=[Constant(value=True)]))]))], orelse=[])], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='warning', ctx=Load()), args=[Constant(value='There was an error checking the latest version of pip.')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='logger', ctx=Load()), attr='debug', ctx=Load()), args=[Constant(value='See below for error')], keywords=[keyword(arg='exc_info', value=Constant(value=True))]))])], orelse=[], finalbody=[])], decorator_list=[], returns=Constant(value=None))], type_ignores=[])