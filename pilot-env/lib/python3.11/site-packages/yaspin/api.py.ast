Module(body=[Expr(value=Constant(value='\nyaspin.api\n~~~~~~~~~~\n\nThis module implements the Yaspin API.\n')), Import(names=[alias(name='signal')]), ImportFrom(module='core', names=[alias(name='Yaspin')], level=1), ImportFrom(module='signal_handlers', names=[alias(name='default_handler')], level=1), FunctionDef(name='yaspin', args=arguments(posonlyargs=[], args=[], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Constant(value='Display spinner in stdout.\n\n    Can be used as a context manager or as a function decorator.\n\n    Arguments:\n        spinner (base_spinner.Spinner, optional): Spinner object to use.\n        text (str, optional): Text to show along with spinner.\n        color (str, optional): Spinner color.\n        on_color (str, optional): Color highlight for the spinner.\n        attrs (list, optional): Color attributes for the spinner.\n        reversal (bool, optional): Reverse spin direction.\n        side (str, optional): Place spinner to the right or left end\n            of the text string.\n        sigmap (dict, optional): Maps POSIX signals to their respective\n            handlers.\n        timer (bool, optional): Prints a timer showing the elapsed time.\n\n    Returns:\n        core.Yaspin: instance of the Yaspin class.\n\n    Raises:\n        ValueError: If unsupported ``color`` is specified.\n        ValueError: If unsupported ``on_color`` is specified.\n        ValueError: If unsupported color attribute in ``attrs``\n            is specified.\n        ValueError: If trying to register handler for SIGKILL signal.\n        ValueError: If unsupported ``side`` is specified.\n\n    Available text colors:\n        red, green, yellow, blue, magenta, cyan, white.\n\n    Available text highlights:\n        on_red, on_green, on_yellow, on_blue, on_magenta, on_cyan,\n        on_white, on_grey.\n\n    Available attributes:\n        bold, dark, underline, blink, reverse, concealed.\n\n    Example::\n\n        # Use as a context manager\n        with yaspin():\n            some_operations()\n\n        # Context manager with text\n        with yaspin(text="Processing..."):\n            some_operations()\n\n        # Context manager with custom sequence\n        with yaspin(Spinner(\'-\\|/\', 150)):\n            some_operations()\n\n        # As decorator\n        @yaspin(text="Loading...")\n        def foo():\n            time.sleep(5)\n\n        foo()\n\n    ')), Return(value=Call(func=Name(id='Yaspin', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[], returns=Name(id='Yaspin', ctx=Load())), FunctionDef(name='kbi_safe_yaspin', args=arguments(posonlyargs=[], args=[], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Assign(targets=[Subscript(value=Name(id='kwargs', ctx=Load()), slice=Constant(value='sigmap'), ctx=Store())], value=Dict(keys=[Attribute(value=Name(id='signal', ctx=Load()), attr='SIGINT', ctx=Load())], values=[Name(id='default_handler', ctx=Load())])), Return(value=Call(func=Name(id='Yaspin', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[], returns=Name(id='Yaspin', ctx=Load())), If(test=Attribute(value=Name(id='yaspin', ctx=Load()), attr='__doc__', ctx=Load()), body=[Assign(targets=[Name(id='_kbi_safe_doc', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='yaspin', ctx=Load()), attr='__doc__', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='yaspin'), Constant(value='kbi_safe_yaspin')], keywords=[])), Assign(targets=[Attribute(value=Name(id='kbi_safe_yaspin', ctx=Load()), attr='__doc__', ctx=Store())], value=Name(id='_kbi_safe_doc', ctx=Load()))], orelse=[])], type_ignores=[])