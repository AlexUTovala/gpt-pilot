Module(body=[Expr(value=Constant(value='Module containing Windows version of :class:`Terminal`.')), ImportFrom(module='__future__', names=[alias(name='absolute_import')], level=0), Import(names=[alias(name='time')]), Import(names=[alias(name='msvcrt')]), Import(names=[alias(name='contextlib')]), ImportFrom(module='jinxed', names=[alias(name='win32')], level=0), ImportFrom(module='terminal', names=[alias(name='WINSZ')], level=1), ImportFrom(module='terminal', names=[alias(name='Terminal', asname='_Terminal')], level=1), ClassDef(name='Terminal', bases=[Name(id='_Terminal', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='Windows subclass of :class:`Terminal`.')), FunctionDef(name='getch', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Read, decode, and return the next byte from the keyboard stream.\n\n        :rtype: unicode\n        :returns: a single unicode character, or ``u''`` if a multi-byte\n            sequence has not yet been fully received.\n\n        For versions of Windows 10.0.10586 and later, the console is expected\n        to be in ENABLE_VIRTUAL_TERMINAL_INPUT mode and the default method is\n        called.\n\n        For older versions of Windows, msvcrt.getwch() is used. If the received\n        character is ``\\x00`` or ``\\xe0``, the next character is\n        automatically retrieved.\n        ")), If(test=Attribute(value=Name(id='win32', ctx=Load()), attr='VTMODE_SUPPORTED', ctx=Load()), body=[Return(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[Name(id='Terminal', ctx=Load()), Name(id='self', ctx=Load())], keywords=[]), attr='getch', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='rtn', ctx=Store())], value=Call(func=Attribute(value=Name(id='msvcrt', ctx=Load()), attr='getwch', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='rtn', ctx=Load()), ops=[In()], comparators=[Tuple(elts=[Constant(value='\x00'), Constant(value='Ã ')], ctx=Load())]), body=[AugAssign(target=Name(id='rtn', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='msvcrt', ctx=Load()), attr='getwch', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Name(id='rtn', ctx=Load()))], decorator_list=[]), FunctionDef(name='kbhit', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='timeout')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='\n        Return whether a keypress has been detected on the keyboard.\n\n        This method is used by :meth:`inkey` to determine if a byte may\n        be read using :meth:`getch` without blocking.  This is implemented\n        by wrapping msvcrt.kbhit() in a timeout.\n\n        :arg float timeout: When ``timeout`` is 0, this call is\n            non-blocking, otherwise blocking indefinitely until keypress\n            is detected when None (default). When ``timeout`` is a\n            positive number, returns after ``timeout`` seconds have\n            elapsed (float).\n        :rtype: bool\n        :returns: True if a keypress is awaiting to be read on the keyboard\n            attached to this terminal.\n        ')), Assign(targets=[Name(id='end', ctx=Store())], value=BinOp(left=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='time', ctx=Load()), args=[], keywords=[]), op=Add(), right=BoolOp(op=Or(), values=[Name(id='timeout', ctx=Load()), Constant(value=0)]))), While(test=Constant(value=True), body=[If(test=Call(func=Attribute(value=Name(id='msvcrt', ctx=Load()), attr='kbhit', ctx=Load()), args=[], keywords=[]), body=[Return(value=Constant(value=True))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='timeout', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Name(id='end', ctx=Load()), ops=[Lt()], comparators=[Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='time', ctx=Load()), args=[], keywords=[])])]), body=[Break()], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='sleep', ctx=Load()), args=[Constant(value=0.01)], keywords=[]))], orelse=[]), Return(value=Constant(value=False))], decorator_list=[]), FunctionDef(name='_winsize', args=arguments(posonlyargs=[], args=[arg(arg='fd')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return named tuple describing size of the terminal by ``fd``.\n\n        :arg int fd: file descriptor queries for its window size.\n        :rtype: WINSZ\n        :returns: named tuple describing size of the terminal\n\n        WINSZ is a :class:`collections.namedtuple` instance, whose structure\n        directly maps to the return value of the :const:`termios.TIOCGWINSZ`\n        ioctl return value. The return parameters are:\n\n            - ``ws_row``: width of terminal by its number of character cells.\n            - ``ws_col``: height of terminal by its number of character cells.\n            - ``ws_xpixel``: width of terminal by pixels (not accurate).\n            - ``ws_ypixel``: height of terminal by pixels (not accurate).\n        ')), Assign(targets=[Name(id='window', ctx=Store())], value=Call(func=Attribute(value=Name(id='win32', ctx=Load()), attr='get_terminal_size', ctx=Load()), args=[Name(id='fd', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='WINSZ', ctx=Load()), args=[], keywords=[keyword(arg='ws_row', value=Attribute(value=Name(id='window', ctx=Load()), attr='lines', ctx=Load())), keyword(arg='ws_col', value=Attribute(value=Name(id='window', ctx=Load()), attr='columns', ctx=Load())), keyword(arg='ws_xpixel', value=Constant(value=0)), keyword(arg='ws_ypixel', value=Constant(value=0))]))], decorator_list=[Name(id='staticmethod', ctx=Load())]), FunctionDef(name='cbreak', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Allow each keystroke to be read immediately after it is pressed.\n\n        This is a context manager for ``jinxed.w32.setcbreak()``.\n\n        .. note:: You must explicitly print any user input you would like\n            displayed.  If you provide any kind of editing, you must handle\n            backspace and other line-editing control functions in this mode\n            as well!\n\n        **Normally**, characters received from the keyboard cannot be read\n        by Python until the *Return* key is pressed. Also known as *cooked* or\n        *canonical input* mode, it allows the tty driver to provide\n        line-editing before shuttling the input to your program and is the\n        (implicit) default terminal mode set by most unix shells before\n        executing programs.\n        ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_keyboard_fd', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='filehandle', ctx=Store())], value=Call(func=Attribute(value=Name(id='msvcrt', ctx=Load()), attr='get_osfhandle', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_keyboard_fd', ctx=Load())], keywords=[])), Assign(targets=[Name(id='save_mode', ctx=Store())], value=Call(func=Attribute(value=Name(id='win32', ctx=Load()), attr='get_console_mode', ctx=Load()), args=[Name(id='filehandle', ctx=Load())], keywords=[])), Assign(targets=[Name(id='save_line_buffered', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_line_buffered', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='win32', ctx=Load()), attr='setcbreak', ctx=Load()), args=[Name(id='filehandle', ctx=Load())], keywords=[])), Try(body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_line_buffered', ctx=Store())], value=Constant(value=False)), Expr(value=Yield())], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='win32', ctx=Load()), attr='set_console_mode', ctx=Load()), args=[Name(id='filehandle', ctx=Load()), Name(id='save_mode', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_line_buffered', ctx=Store())], value=Name(id='save_line_buffered', ctx=Load()))])], orelse=[Expr(value=Yield())])], decorator_list=[Attribute(value=Name(id='contextlib', ctx=Load()), attr='contextmanager', ctx=Load())]), FunctionDef(name='raw', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        A context manager for ``jinxed.w32.setcbreak()``.\n\n        Although both :meth:`break` and :meth:`raw` modes allow each keystroke\n        to be read immediately after it is pressed, Raw mode disables\n        processing of input and output.\n\n        In cbreak mode, special input characters such as ``^C`` are\n        interpreted by the terminal driver and excluded from the stdin stream.\n        In raw mode these values are receive by the :meth:`inkey` method.\n        ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_keyboard_fd', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='filehandle', ctx=Store())], value=Call(func=Attribute(value=Name(id='msvcrt', ctx=Load()), attr='get_osfhandle', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_keyboard_fd', ctx=Load())], keywords=[])), Assign(targets=[Name(id='save_mode', ctx=Store())], value=Call(func=Attribute(value=Name(id='win32', ctx=Load()), attr='get_console_mode', ctx=Load()), args=[Name(id='filehandle', ctx=Load())], keywords=[])), Assign(targets=[Name(id='save_line_buffered', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_line_buffered', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='win32', ctx=Load()), attr='setraw', ctx=Load()), args=[Name(id='filehandle', ctx=Load())], keywords=[])), Try(body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_line_buffered', ctx=Store())], value=Constant(value=False)), Expr(value=Yield())], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='win32', ctx=Load()), attr='set_console_mode', ctx=Load()), args=[Name(id='filehandle', ctx=Load()), Name(id='save_mode', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_line_buffered', ctx=Store())], value=Name(id='save_line_buffered', ctx=Load()))])], orelse=[Expr(value=Yield())])], decorator_list=[Attribute(value=Name(id='contextlib', ctx=Load()), attr='contextmanager', ctx=Load())])], decorator_list=[])], type_ignores=[])