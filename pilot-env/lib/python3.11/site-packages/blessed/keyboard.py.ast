Module(body=[Expr(value=Constant(value="Sub-module providing 'keyboard awareness'.")), Import(names=[alias(name='re')]), Import(names=[alias(name='time')]), Import(names=[alias(name='platform')]), ImportFrom(module='collections', names=[alias(name='OrderedDict')], level=0), Import(names=[alias(name='six')]), If(test=Compare(left=Call(func=Attribute(value=Name(id='platform', ctx=Load()), attr='system', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Constant(value='Windows')]), body=[Import(names=[alias(name='jinxed', asname='curses')]), ImportFrom(module='jinxed.has_key', names=[alias(name='_capability_names', asname='capability_names')], level=0)], orelse=[Import(names=[alias(name='curses')]), ImportFrom(module='curses.has_key', names=[alias(name='_capability_names', asname='capability_names')], level=0)]), ClassDef(name='Keystroke', bases=[Attribute(value=Name(id='six', ctx=Load()), attr='text_type', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="\n    A unicode-derived class for describing a single keystroke.\n\n    A class instance describes a single keystroke received on input,\n    which may contain multiple characters as a multibyte sequence,\n    which is indicated by properties :attr:`is_sequence` returning\n    ``True``.\n\n    When the string is a known sequence, :attr:`code` matches terminal\n    class attributes for comparison, such as ``term.KEY_LEFT``.\n\n    The string-name of the sequence, such as ``u'KEY_LEFT'`` is accessed\n    by property :attr:`name`, and is used by the :meth:`__repr__` method\n    to display a human-readable form of the Keystroke this class\n    instance represents. It may otherwise by joined, split, or evaluated\n    just as as any other unicode string.\n    ")), FunctionDef(name='__new__', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='ucs'), arg(arg='code'), arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=''), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='Class constructor.')), Assign(targets=[Name(id='new', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='six', ctx=Load()), attr='text_type', ctx=Load()), attr='__new__', ctx=Load()), args=[Name(id='cls', ctx=Load()), Name(id='ucs', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='new', ctx=Load()), attr='_name', ctx=Store())], value=Name(id='name', ctx=Load())), Assign(targets=[Attribute(value=Name(id='new', ctx=Load()), attr='_code', ctx=Store())], value=Name(id='code', ctx=Load())), Return(value=Name(id='new', ctx=Load()))], decorator_list=[]), FunctionDef(name='is_sequence', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Whether the value represents a multibyte sequence (bool).')), Return(value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_code', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Docstring overwritten.')), Return(value=IfExp(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_name', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=Call(func=Attribute(value=Attribute(value=Name(id='six', ctx=Load()), attr='text_type', ctx=Load()), attr='__repr__', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), orelse=Attribute(value=Name(id='self', ctx=Load()), attr='_name', ctx=Load())))], decorator_list=[]), Assign(targets=[Attribute(value=Name(id='__repr__', ctx=Load()), attr='__doc__', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='six', ctx=Load()), attr='text_type', ctx=Load()), attr='__doc__', ctx=Load())), FunctionDef(name='name', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="String-name of key sequence, such as ``u'KEY_LEFT'`` (str).")), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_name', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='code', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Integer keycode value of multibyte sequence (int).')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_code', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())])], decorator_list=[]), FunctionDef(name='get_curses_keycodes', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    Return mapping of curses key-names paired by their keycode integer value.\n\n    :rtype: dict\n    :returns: Dictionary of (name, code) pairs for curses keyboard constant\n        values and their mnemonic name. Such as code ``260``, with the value of\n        its key-name identity, ``u'KEY_LEFT'``.\n    ")), Assign(targets=[Name(id='_keynames', ctx=Store())], value=ListComp(elt=Name(id='attr', ctx=Load()), generators=[comprehension(target=Name(id='attr', ctx=Store()), iter=Call(func=Name(id='dir', ctx=Load()), args=[Name(id='curses', ctx=Load())], keywords=[]), ifs=[Call(func=Attribute(value=Name(id='attr', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='KEY_')], keywords=[])], is_async=0)])), Return(value=DictComp(key=Name(id='keyname', ctx=Load()), value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='curses', ctx=Load()), Name(id='keyname', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='keyname', ctx=Store()), iter=Name(id='_keynames', ctx=Load()), ifs=[], is_async=0)]))], decorator_list=[]), FunctionDef(name='get_keyboard_codes', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Return mapping of keycode integer values paired by their curses key-name.\n\n    :rtype: dict\n    :returns: Dictionary of (code, name) pairs for curses keyboard constant\n        values and their mnemonic name. Such as key ``260``, with the value of\n        its identity, ``u\'KEY_LEFT\'``.\n\n    These keys are derived from the attributes by the same of the curses module,\n    with the following exceptions:\n\n    * ``KEY_DELETE`` in place of ``KEY_DC``\n    * ``KEY_INSERT`` in place of ``KEY_IC``\n    * ``KEY_PGUP`` in place of ``KEY_PPAGE``\n    * ``KEY_PGDOWN`` in place of ``KEY_NPAGE``\n    * ``KEY_ESCAPE`` in place of ``KEY_EXIT``\n    * ``KEY_SUP`` in place of ``KEY_SR``\n    * ``KEY_SDOWN`` in place of ``KEY_SF``\n\n    This function is the inverse of :func:`get_curses_keycodes`.  With the\n    given override "mixins" listed above, the keycode for the delete key will\n    map to our imaginary ``KEY_DELETE`` mnemonic, effectively erasing the\n    phrase ``KEY_DC`` from our code vocabulary for anyone that wishes to use\n    the return value to determine the key-name by keycode.\n    ')), Assign(targets=[Name(id='keycodes', ctx=Store())], value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[Call(func=Name(id='get_curses_keycodes', ctx=Load()), args=[], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='keycodes', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='CURSES_KEYCODE_OVERRIDE_MIXIN', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='keycodes', ctx=Load()), attr='update', ctx=Load()), args=[GeneratorExp(elt=Tuple(elts=[Name(id='name', ctx=Load()), Name(id='value', ctx=Load())], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Name(id='globals', ctx=Load()), args=[], keywords=[]), attr='copy', ctx=Load()), args=[], keywords=[]), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[Call(func=Attribute(value=Name(id='name', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='KEY_')], keywords=[])], is_async=0)])], keywords=[])), Return(value=Call(func=Name(id='dict', ctx=Load()), args=[Call(func=Name(id='zip', ctx=Load()), args=[Call(func=Attribute(value=Name(id='keycodes', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='keycodes', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='_alternative_left_right', args=arguments(posonlyargs=[], args=[arg(arg='term')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    Determine and return mapping of left and right arrow keys sequences.\n\n    :arg blessed.Terminal term: :class:`~.Terminal` instance.\n    :rtype: dict\n    :returns: Dictionary of sequences ``term._cuf1``, and ``term._cub1``,\n        valued as ``KEY_RIGHT``, ``KEY_LEFT`` (when appropriate).\n\n    This function supports :func:`get_terminal_sequences` to discover\n    the preferred input sequence for the left and right application keys.\n\n    It is necessary to check the value of these sequences to ensure we do not\n    use ``u' '`` and ``u'\\b'`` for ``KEY_RIGHT`` and ``KEY_LEFT``,\n    preferring their true application key sequence, instead.\n    ")), Assign(targets=[Name(id='keymap', ctx=Store())], value=Dict(keys=[], values=[])), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='term', ctx=Load()), attr='_cuf1', ctx=Load()), Compare(left=Attribute(value=Name(id='term', ctx=Load()), attr='_cuf1', ctx=Load()), ops=[NotEq()], comparators=[Constant(value=' ', kind='u')])]), body=[Assign(targets=[Subscript(value=Name(id='keymap', ctx=Load()), slice=Attribute(value=Name(id='term', ctx=Load()), attr='_cuf1', ctx=Load()), ctx=Store())], value=Attribute(value=Name(id='curses', ctx=Load()), attr='KEY_RIGHT', ctx=Load()))], orelse=[]), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='term', ctx=Load()), attr='_cub1', ctx=Load()), Compare(left=Attribute(value=Name(id='term', ctx=Load()), attr='_cub1', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='\x08', kind='u')])]), body=[Assign(targets=[Subscript(value=Name(id='keymap', ctx=Load()), slice=Attribute(value=Name(id='term', ctx=Load()), attr='_cub1', ctx=Load()), ctx=Store())], value=Attribute(value=Name(id='curses', ctx=Load()), attr='KEY_LEFT', ctx=Load()))], orelse=[]), Return(value=Name(id='keymap', ctx=Load()))], decorator_list=[]), FunctionDef(name='get_keyboard_sequences', args=arguments(posonlyargs=[], args=[arg(arg='term')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    Return mapping of keyboard sequences paired by keycodes.\n\n    :arg blessed.Terminal term: :class:`~.Terminal` instance.\n    :returns: mapping of keyboard unicode sequences paired by keycodes\n        as integer.  This is used as the argument ``mapper`` to\n        the supporting function :func:`resolve_sequence`.\n    :rtype: OrderedDict\n\n    Initialize and return a keyboard map and sequence lookup table,\n    (sequence, keycode) from :class:`~.Terminal` instance ``term``,\n    where ``sequence`` is a multibyte input sequence of unicode\n    characters, such as ``u'\\x1b[D'``, and ``keycode`` is an integer\n    value, matching curses constant such as term.KEY_LEFT.\n\n    The return value is an OrderedDict instance, with their keys\n    sorted longest-first.\n    ")), Assign(targets=[Name(id='sequence_map', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[IfExp(test=Attribute(value=Name(id='term', ctx=Load()), attr='does_styling', ctx=Load()), body=GeneratorExp(elt=Tuple(elts=[Call(func=Attribute(value=Name(id='seq', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='latin1')], keywords=[]), Name(id='val', ctx=Load())], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='seq', ctx=Store()), Name(id='val', ctx=Store())], ctx=Store()), iter=GeneratorExp(elt=Tuple(elts=[Call(func=Attribute(value=Name(id='curses', ctx=Load()), attr='tigetstr', ctx=Load()), args=[Name(id='cap', ctx=Load())], keywords=[]), Name(id='val', ctx=Load())], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='val', ctx=Store()), Name(id='cap', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='capability_names', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)]), ifs=[Name(id='seq', ctx=Load())], is_async=0)]), orelse=Tuple(elts=[], ctx=Load()))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='sequence_map', ctx=Load()), attr='update', ctx=Load()), args=[Call(func=Name(id='_alternative_left_right', ctx=Load()), args=[Name(id='term', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='sequence_map', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='DEFAULT_SEQUENCE_MIXIN', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='OrderedDict', ctx=Load()), args=[GeneratorExp(elt=Tuple(elts=[Name(id='seq', ctx=Load()), Subscript(value=Name(id='sequence_map', ctx=Load()), slice=Name(id='seq', ctx=Load()), ctx=Load())], ctx=Load()), generators=[comprehension(target=Name(id='seq', ctx=Store()), iter=Call(func=Name(id='sorted', ctx=Load()), args=[Call(func=Attribute(value=Name(id='sequence_map', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[keyword(arg='key', value=Name(id='len', ctx=Load())), keyword(arg='reverse', value=Constant(value=True))]), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[]), FunctionDef(name='get_leading_prefixes', args=arguments(posonlyargs=[], args=[arg(arg='sequences')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    Return a set of proper prefixes for given sequence of strings.\n\n    :arg iterable sequences\n    :rtype: set\n    :return: Set of all string prefixes\n\n    Given an iterable of strings, all textparts leading up to the final\n    string is returned as a unique set.  This function supports the\n    :meth:`~.Terminal.inkey` method by determining whether the given\n    input is a sequence that **may** lead to a final matching pattern.\n\n    >>> prefixes(['abc', 'abdf', 'e', 'jkl'])\n    set([u'a', u'ab', u'abd', u'j', u'jk'])\n    ")), Return(value=SetComp(elt=Subscript(value=Name(id='seq', ctx=Load()), slice=Slice(upper=Name(id='i', ctx=Load())), ctx=Load()), generators=[comprehension(target=Name(id='seq', ctx=Store()), iter=Name(id='sequences', ctx=Load()), ifs=[], is_async=0), comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Call(func=Name(id='len', ctx=Load()), args=[Name(id='seq', ctx=Load())], keywords=[])], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[]), FunctionDef(name='resolve_sequence', args=arguments(posonlyargs=[], args=[arg(arg='text'), arg(arg='mapper'), arg(arg='codes')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    Return a single :class:`Keystroke` instance for given sequence ``text``.\n\n    :arg str text: string of characters received from terminal input stream.\n    :arg OrderedDict mapper: unicode multibyte sequences, such as ``u'\\x1b[D'``\n        paired by their integer value (260)\n    :arg dict codes: a :type:`dict` of integer values (such as 260) paired\n        by their mnemonic name, such as ``'KEY_LEFT'``.\n    :rtype: Keystroke\n    :returns: Keystroke instance for the given sequence\n\n    The given ``text`` may extend beyond a matching sequence, such as\n    ``u\\x1b[Dxxx`` returns a :class:`Keystroke` instance of attribute\n    :attr:`Keystroke.sequence` valued only ``u\\x1b[D``.  It is up to\n    calls to determine that ``xxx`` remains unresolved.\n    ")), For(target=Tuple(elts=[Name(id='sequence', ctx=Store()), Name(id='code', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='mapper', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Call(func=Attribute(value=Name(id='text', ctx=Load()), attr='startswith', ctx=Load()), args=[Name(id='sequence', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Name(id='Keystroke', ctx=Load()), args=[], keywords=[keyword(arg='ucs', value=Name(id='sequence', ctx=Load())), keyword(arg='code', value=Name(id='code', ctx=Load())), keyword(arg='name', value=Subscript(value=Name(id='codes', ctx=Load()), slice=Name(id='code', ctx=Load()), ctx=Load()))]))], orelse=[])], orelse=[]), Return(value=Call(func=Name(id='Keystroke', ctx=Load()), args=[], keywords=[keyword(arg='ucs', value=BoolOp(op=Or(), values=[BoolOp(op=And(), values=[Name(id='text', ctx=Load()), Subscript(value=Name(id='text', ctx=Load()), slice=Constant(value=0), ctx=Load())]), Constant(value='', kind='u')]))]))], decorator_list=[]), FunctionDef(name='_time_left', args=arguments(posonlyargs=[], args=[arg(arg='stime'), arg(arg='timeout')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Return time remaining since ``stime`` before given ``timeout``.\n\n    This function assists determining the value of ``timeout`` for\n    class method :meth:`~.Terminal.kbhit` and similar functions.\n\n    :arg float stime: starting time for measurement\n    :arg float timeout: timeout period, may be set to None to\n       indicate no timeout (where None is always returned).\n    :rtype: float or int\n    :returns: time remaining as float. If no time is remaining,\n       then the integer ``0`` is returned.\n    ')), Return(value=IfExp(test=Name(id='timeout', ctx=Load()), body=Call(func=Name(id='max', ctx=Load()), args=[Constant(value=0), BinOp(left=Name(id='timeout', ctx=Load()), op=Sub(), right=BinOp(left=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='time', ctx=Load()), args=[], keywords=[]), op=Sub(), right=Name(id='stime', ctx=Load())))], keywords=[]), orelse=Name(id='timeout', ctx=Load())))], decorator_list=[]), FunctionDef(name='_read_until', args=arguments(posonlyargs=[], args=[arg(arg='term'), arg(arg='pattern'), arg(arg='timeout')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Convenience read-until-pattern function, supporting :meth:`~.get_location`.\n\n    :arg blessed.Terminal term: :class:`~.Terminal` instance.\n    :arg float timeout: timeout period, may be set to None to indicate no\n        timeout (where 0 is always returned).\n    :arg str pattern: target regular expression pattern to seek.\n    :rtype: tuple\n    :returns: tuple in form of ``(match, str)``, *match*\n        may be :class:`re.MatchObject` if pattern is discovered\n        in input stream before timeout has elapsed, otherwise\n        None. ``str`` is any remaining text received exclusive\n        of the matching pattern).\n\n    The reason a tuple containing non-matching data is returned, is that the\n    consumer should push such data back into the input buffer by\n    :meth:`~.Terminal.ungetch` if any was received.\n\n    For example, when a user is performing rapid input keystrokes while its\n    terminal emulator surreptitiously responds to this in-band sequence, we\n    must ensure any such keyboard data is well-received by the next call to\n    term.inkey() without delay.\n    ')), Assign(targets=[Name(id='stime', ctx=Store())], value=Call(func=Attribute(value=Name(id='time', ctx=Load()), attr='time', ctx=Load()), args=[], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='match', ctx=Store()), Name(id='buf', ctx=Store())], ctx=Store())], value=Tuple(elts=[Constant(value=None), Constant(value='', kind='u')], ctx=Load())), While(test=Constant(value=True), body=[Assign(targets=[Name(id='ucs', ctx=Store())], value=Call(func=Attribute(value=Name(id='term', ctx=Load()), attr='inkey', ctx=Load()), args=[], keywords=[keyword(arg='timeout', value=Call(func=Name(id='_time_left', ctx=Load()), args=[Name(id='stime', ctx=Load()), Name(id='timeout', ctx=Load())], keywords=[]))])), While(test=Name(id='ucs', ctx=Load()), body=[AugAssign(target=Name(id='buf', ctx=Store()), op=Add(), value=Name(id='ucs', ctx=Load())), Assign(targets=[Name(id='ucs', ctx=Store())], value=Call(func=Attribute(value=Name(id='term', ctx=Load()), attr='inkey', ctx=Load()), args=[], keywords=[keyword(arg='timeout', value=Constant(value=0))]))], orelse=[]), Assign(targets=[Name(id='match', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='search', ctx=Load()), args=[], keywords=[keyword(arg='pattern', value=Name(id='pattern', ctx=Load())), keyword(arg='string', value=Name(id='buf', ctx=Load()))])), If(test=Compare(left=Name(id='match', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Break()], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Name(id='timeout', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), UnaryOp(op=Not(), operand=Call(func=Name(id='_time_left', ctx=Load()), args=[Name(id='stime', ctx=Load()), Name(id='timeout', ctx=Load())], keywords=[]))]), body=[Break()], orelse=[])], orelse=[]), Return(value=Tuple(elts=[Name(id='match', ctx=Load()), Name(id='buf', ctx=Load())], ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='_CURSES_KEYCODE_ADDINS', ctx=Store())], value=Tuple(elts=[Constant(value='TAB'), Constant(value='KP_MULTIPLY'), Constant(value='KP_ADD'), Constant(value='KP_SEPARATOR'), Constant(value='KP_SUBTRACT'), Constant(value='KP_DECIMAL'), Constant(value='KP_DIVIDE'), Constant(value='KP_EQUAL'), Constant(value='KP_0'), Constant(value='KP_1'), Constant(value='KP_2'), Constant(value='KP_3'), Constant(value='KP_4'), Constant(value='KP_5'), Constant(value='KP_6'), Constant(value='KP_7'), Constant(value='KP_8'), Constant(value='KP_9')], ctx=Load())), Assign(targets=[Name(id='_LASTVAL', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Name(id='get_curses_keycodes', ctx=Load()), args=[], keywords=[]), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[])), For(target=Name(id='keycode_name', ctx=Store()), iter=Name(id='_CURSES_KEYCODE_ADDINS', ctx=Load()), body=[AugAssign(target=Name(id='_LASTVAL', ctx=Store()), op=Add(), value=Constant(value=1)), Assign(targets=[Subscript(value=Call(func=Name(id='globals', ctx=Load()), args=[], keywords=[]), slice=BinOp(left=Constant(value='KEY_'), op=Add(), right=Name(id='keycode_name', ctx=Load())), ctx=Store())], value=Name(id='_LASTVAL', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='DEFAULT_SEQUENCE_MIXIN', ctx=Store())], value=Tuple(elts=[Tuple(elts=[Call(func=Attribute(value=Name(id='six', ctx=Load()), attr='unichr', ctx=Load()), args=[Constant(value=10)], keywords=[]), Attribute(value=Name(id='curses', ctx=Load()), attr='KEY_ENTER', ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Attribute(value=Name(id='six', ctx=Load()), attr='unichr', ctx=Load()), args=[Constant(value=13)], keywords=[]), Attribute(value=Name(id='curses', ctx=Load()), attr='KEY_ENTER', ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Attribute(value=Name(id='six', ctx=Load()), attr='unichr', ctx=Load()), args=[Constant(value=8)], keywords=[]), Attribute(value=Name(id='curses', ctx=Load()), attr='KEY_BACKSPACE', ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Attribute(value=Name(id='six', ctx=Load()), attr='unichr', ctx=Load()), args=[Constant(value=9)], keywords=[]), Name(id='KEY_TAB', ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Attribute(value=Name(id='six', ctx=Load()), attr='unichr', ctx=Load()), args=[Constant(value=27)], keywords=[]), Attribute(value=Name(id='curses', ctx=Load()), attr='KEY_EXIT', ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Attribute(value=Name(id='six', ctx=Load()), attr='unichr', ctx=Load()), args=[Constant(value=127)], keywords=[]), Attribute(value=Name(id='curses', ctx=Load()), attr='KEY_BACKSPACE', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='\x1b[A', kind='u'), Attribute(value=Name(id='curses', ctx=Load()), attr='KEY_UP', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='\x1b[B', kind='u'), Attribute(value=Name(id='curses', ctx=Load()), attr='KEY_DOWN', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='\x1b[C', kind='u'), Attribute(value=Name(id='curses', ctx=Load()), attr='KEY_RIGHT', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='\x1b[D', kind='u'), Attribute(value=Name(id='curses', ctx=Load()), attr='KEY_LEFT', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='\x1b[1;2A', kind='u'), Attribute(value=Name(id='curses', ctx=Load()), attr='KEY_SR', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='\x1b[1;2B', kind='u'), Attribute(value=Name(id='curses', ctx=Load()), attr='KEY_SF', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='\x1b[1;2C', kind='u'), Attribute(value=Name(id='curses', ctx=Load()), attr='KEY_SRIGHT', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='\x1b[1;2D', kind='u'), Attribute(value=Name(id='curses', ctx=Load()), attr='KEY_SLEFT', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='\x1b[F', kind='u'), Attribute(value=Name(id='curses', ctx=Load()), attr='KEY_END', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='\x1b[H', kind='u'), Attribute(value=Name(id='curses', ctx=Load()), attr='KEY_HOME', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='\x1b[K', kind='u'), Attribute(value=Name(id='curses', ctx=Load()), attr='KEY_END', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='\x1b[U', kind='u'), Attribute(value=Name(id='curses', ctx=Load()), attr='KEY_NPAGE', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='\x1b[V', kind='u'), Attribute(value=Name(id='curses', ctx=Load()), attr='KEY_PPAGE', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='\x1bOM', kind='u'), Attribute(value=Name(id='curses', ctx=Load()), attr='KEY_ENTER', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='\x1bOj', kind='u'), Name(id='KEY_KP_MULTIPLY', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='\x1bOk', kind='u'), Name(id='KEY_KP_ADD', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='\x1bOl', kind='u'), Name(id='KEY_KP_SEPARATOR', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='\x1bOm', kind='u'), Name(id='KEY_KP_SUBTRACT', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='\x1bOn', kind='u'), Name(id='KEY_KP_DECIMAL', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='\x1bOo', kind='u'), Name(id='KEY_KP_DIVIDE', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='\x1bOX', kind='u'), Name(id='KEY_KP_EQUAL', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='\x1bOp', kind='u'), Name(id='KEY_KP_0', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='\x1bOq', kind='u'), Name(id='KEY_KP_1', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='\x1bOr', kind='u'), Name(id='KEY_KP_2', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='\x1bOs', kind='u'), Name(id='KEY_KP_3', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='\x1bOt', kind='u'), Name(id='KEY_KP_4', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='\x1bOu', kind='u'), Name(id='KEY_KP_5', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='\x1bOv', kind='u'), Name(id='KEY_KP_6', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='\x1bOw', kind='u'), Name(id='KEY_KP_7', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='\x1bOx', kind='u'), Name(id='KEY_KP_8', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='\x1bOy', kind='u'), Name(id='KEY_KP_9', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='\x1b[1~', kind='u'), Attribute(value=Name(id='curses', ctx=Load()), attr='KEY_FIND', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='\x1b[2~', kind='u'), Attribute(value=Name(id='curses', ctx=Load()), attr='KEY_IC', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='\x1b[3~', kind='u'), Attribute(value=Name(id='curses', ctx=Load()), attr='KEY_DC', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='\x1b[4~', kind='u'), Attribute(value=Name(id='curses', ctx=Load()), attr='KEY_SELECT', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='\x1b[5~', kind='u'), Attribute(value=Name(id='curses', ctx=Load()), attr='KEY_PPAGE', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='\x1b[6~', kind='u'), Attribute(value=Name(id='curses', ctx=Load()), attr='KEY_NPAGE', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='\x1b[7~', kind='u'), Attribute(value=Name(id='curses', ctx=Load()), attr='KEY_HOME', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='\x1b[8~', kind='u'), Attribute(value=Name(id='curses', ctx=Load()), attr='KEY_END', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='\x1b[OA', kind='u'), Attribute(value=Name(id='curses', ctx=Load()), attr='KEY_UP', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='\x1b[OB', kind='u'), Attribute(value=Name(id='curses', ctx=Load()), attr='KEY_DOWN', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='\x1b[OC', kind='u'), Attribute(value=Name(id='curses', ctx=Load()), attr='KEY_RIGHT', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='\x1b[OD', kind='u'), Attribute(value=Name(id='curses', ctx=Load()), attr='KEY_LEFT', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='\x1b[OF', kind='u'), Attribute(value=Name(id='curses', ctx=Load()), attr='KEY_END', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='\x1b[OH', kind='u'), Attribute(value=Name(id='curses', ctx=Load()), attr='KEY_HOME', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='\x1bOP', kind='u'), Attribute(value=Name(id='curses', ctx=Load()), attr='KEY_F1', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='\x1bOQ', kind='u'), Attribute(value=Name(id='curses', ctx=Load()), attr='KEY_F2', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='\x1bOR', kind='u'), Attribute(value=Name(id='curses', ctx=Load()), attr='KEY_F3', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='\x1bOS', kind='u'), Attribute(value=Name(id='curses', ctx=Load()), attr='KEY_F4', ctx=Load())], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='CURSES_KEYCODE_OVERRIDE_MIXIN', ctx=Store())], value=Tuple(elts=[Tuple(elts=[Constant(value='KEY_DELETE'), Attribute(value=Name(id='curses', ctx=Load()), attr='KEY_DC', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='KEY_INSERT'), Attribute(value=Name(id='curses', ctx=Load()), attr='KEY_IC', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='KEY_PGUP'), Attribute(value=Name(id='curses', ctx=Load()), attr='KEY_PPAGE', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='KEY_PGDOWN'), Attribute(value=Name(id='curses', ctx=Load()), attr='KEY_NPAGE', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='KEY_ESCAPE'), Attribute(value=Name(id='curses', ctx=Load()), attr='KEY_EXIT', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='KEY_SUP'), Attribute(value=Name(id='curses', ctx=Load()), attr='KEY_SR', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='KEY_SDOWN'), Attribute(value=Name(id='curses', ctx=Load()), attr='KEY_SF', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='KEY_UP_LEFT'), Attribute(value=Name(id='curses', ctx=Load()), attr='KEY_A1', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='KEY_UP_RIGHT'), Attribute(value=Name(id='curses', ctx=Load()), attr='KEY_A3', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='KEY_CENTER'), Attribute(value=Name(id='curses', ctx=Load()), attr='KEY_B2', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='KEY_BEGIN'), Attribute(value=Name(id='curses', ctx=Load()), attr='KEY_BEG', ctx=Load())], ctx=Load())], ctx=Load())), Assign(targets=[Name(id='__all__', ctx=Store())], value=Tuple(elts=[Constant(value='Keystroke'), Constant(value='get_keyboard_codes'), Constant(value='get_keyboard_sequences')], ctx=Load()))], type_ignores=[])