Module(body=[Expr(value=Constant(value='\nSub-module providing color functions.\n\nReferences,\n\n- https://en.wikipedia.org/wiki/Color_difference\n- http://www.easyrgb.com/en/math.php\n- Measuring Colour by R.W.G. Hunt and M.R. Pointer\n')), ImportFrom(module='math', names=[alias(name='cos'), alias(name='exp'), alias(name='sin'), alias(name='sqrt'), alias(name='atan2')], level=0), Try(body=[ImportFrom(module='functools', names=[alias(name='lru_cache')], level=0)], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[ImportFrom(module='backports.functools_lru_cache', names=[alias(name='lru_cache')], level=0)])], orelse=[], finalbody=[]), FunctionDef(name='rgb_to_xyz', args=arguments(posonlyargs=[], args=[arg(arg='red'), arg(arg='green'), arg(arg='blue')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Convert standard RGB color to XYZ color.\n\n    :arg int red: RGB value of Red.\n    :arg int green: RGB value of Green.\n    :arg int blue: RGB value of Blue.\n    :returns: Tuple (X, Y, Z) representing XYZ color\n    :rtype: tuple\n\n    D65/2° standard illuminant\n    ')), Assign(targets=[Name(id='rgb', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='val', ctx=Store()), iter=Tuple(elts=[Name(id='red', ctx=Load()), Name(id='green', ctx=Load()), Name(id='blue', ctx=Load())], ctx=Load()), body=[AugAssign(target=Name(id='val', ctx=Store()), op=Div(), value=Constant(value=255.0)), If(test=Compare(left=Name(id='val', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0.04045)]), body=[Assign(targets=[Name(id='val', ctx=Store())], value=Call(func=Name(id='pow', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='val', ctx=Load()), op=Add(), right=Constant(value=0.055)), op=Div(), right=Constant(value=1.055)), Constant(value=2.4)], keywords=[]))], orelse=[AugAssign(target=Name(id='val', ctx=Store()), op=Div(), value=Constant(value=12.92))]), AugAssign(target=Name(id='val', ctx=Store()), op=Mult(), value=Constant(value=100)), Expr(value=Call(func=Attribute(value=Name(id='rgb', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='val', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='red', ctx=Store()), Name(id='green', ctx=Store()), Name(id='blue', ctx=Store())], ctx=Store())], value=Name(id='rgb', ctx=Load())), Assign(targets=[Name(id='x_val', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=Name(id='red', ctx=Load()), op=Mult(), right=Constant(value=0.4124)), op=Add(), right=BinOp(left=Name(id='green', ctx=Load()), op=Mult(), right=Constant(value=0.3576))), op=Add(), right=BinOp(left=Name(id='blue', ctx=Load()), op=Mult(), right=Constant(value=0.1805)))), Assign(targets=[Name(id='y_val', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=Name(id='red', ctx=Load()), op=Mult(), right=Constant(value=0.2126)), op=Add(), right=BinOp(left=Name(id='green', ctx=Load()), op=Mult(), right=Constant(value=0.7152))), op=Add(), right=BinOp(left=Name(id='blue', ctx=Load()), op=Mult(), right=Constant(value=0.0722)))), Assign(targets=[Name(id='z_val', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=Name(id='red', ctx=Load()), op=Mult(), right=Constant(value=0.0193)), op=Add(), right=BinOp(left=Name(id='green', ctx=Load()), op=Mult(), right=Constant(value=0.1192))), op=Add(), right=BinOp(left=Name(id='blue', ctx=Load()), op=Mult(), right=Constant(value=0.9505)))), Return(value=Tuple(elts=[Name(id='x_val', ctx=Load()), Name(id='y_val', ctx=Load()), Name(id='z_val', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='xyz_to_lab', args=arguments(posonlyargs=[], args=[arg(arg='x_val'), arg(arg='y_val'), arg(arg='z_val')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Convert XYZ color to CIE-Lab color.\n\n    :arg float x_val: XYZ value of X.\n    :arg float y_val: XYZ value of Y.\n    :arg float z_val: XYZ value of Z.\n    :returns: Tuple (L, a, b) representing CIE-Lab color\n    :rtype: tuple\n\n    D65/2° standard illuminant\n    ')), Assign(targets=[Name(id='xyz', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Tuple(elts=[Name(id='val', ctx=Store()), Name(id='ref', ctx=Store())], ctx=Store()), iter=Tuple(elts=[Tuple(elts=[Name(id='x_val', ctx=Load()), Constant(value=95.047)], ctx=Load()), Tuple(elts=[Name(id='y_val', ctx=Load()), Constant(value=100.0)], ctx=Load()), Tuple(elts=[Name(id='z_val', ctx=Load()), Constant(value=108.883)], ctx=Load())], ctx=Load()), body=[AugAssign(target=Name(id='val', ctx=Store()), op=Div(), value=Name(id='ref', ctx=Load())), Assign(targets=[Name(id='val', ctx=Store())], value=IfExp(test=Compare(left=Name(id='val', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0.008856)]), body=Call(func=Name(id='pow', ctx=Load()), args=[Name(id='val', ctx=Load()), BinOp(left=Constant(value=1), op=Div(), right=Constant(value=3.0))], keywords=[]), orelse=BinOp(left=BinOp(left=Constant(value=7.787), op=Mult(), right=Name(id='val', ctx=Load())), op=Add(), right=BinOp(left=Constant(value=16), op=Div(), right=Constant(value=116.0))))), Expr(value=Call(func=Attribute(value=Name(id='xyz', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='val', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='x_val', ctx=Store()), Name(id='y_val', ctx=Store()), Name(id='z_val', ctx=Store())], ctx=Store())], value=Name(id='xyz', ctx=Load())), Assign(targets=[Name(id='cie_l', ctx=Store())], value=BinOp(left=BinOp(left=Constant(value=116), op=Mult(), right=Name(id='y_val', ctx=Load())), op=Sub(), right=Constant(value=16))), Assign(targets=[Name(id='cie_a', ctx=Store())], value=BinOp(left=Constant(value=500), op=Mult(), right=BinOp(left=Name(id='x_val', ctx=Load()), op=Sub(), right=Name(id='y_val', ctx=Load())))), Assign(targets=[Name(id='cie_b', ctx=Store())], value=BinOp(left=Constant(value=200), op=Mult(), right=BinOp(left=Name(id='y_val', ctx=Load()), op=Sub(), right=Name(id='z_val', ctx=Load())))), Return(value=Tuple(elts=[Name(id='cie_l', ctx=Load()), Name(id='cie_a', ctx=Load()), Name(id='cie_b', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='rgb_to_lab', args=arguments(posonlyargs=[], args=[arg(arg='red'), arg(arg='green'), arg(arg='blue')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Convert RGB color to CIE-Lab color.\n\n    :arg int red: RGB value of Red.\n    :arg int green: RGB value of Green.\n    :arg int blue: RGB value of Blue.\n    :returns: Tuple (L, a, b) representing CIE-Lab color\n    :rtype: tuple\n\n    D65/2° standard illuminant\n    ')), Return(value=Call(func=Name(id='xyz_to_lab', ctx=Load()), args=[Starred(value=Call(func=Name(id='rgb_to_xyz', ctx=Load()), args=[Name(id='red', ctx=Load()), Name(id='green', ctx=Load()), Name(id='blue', ctx=Load())], keywords=[]), ctx=Load())], keywords=[]))], decorator_list=[Call(func=Name(id='lru_cache', ctx=Load()), args=[], keywords=[keyword(arg='maxsize', value=Constant(value=256))])]), FunctionDef(name='dist_rgb', args=arguments(posonlyargs=[], args=[arg(arg='rgb1'), arg(arg='rgb2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Determine distance between two rgb colors.\n\n    :arg tuple rgb1: RGB color definition\n    :arg tuple rgb2: RGB color definition\n    :returns: Square of the distance between provided colors\n    :rtype: float\n\n    This works by treating RGB colors as coordinates in three dimensional\n    space and finding the closest point within the configured color range\n    using the formula::\n\n        d^2 = (r2 - r1)^2 + (g2 - g1)^2 + (b2 - b1)^2\n\n    For efficiency, the square of the distance is returned\n    which is sufficient for comparisons\n    ')), Return(value=Call(func=Name(id='sum', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='pow', ctx=Load()), args=[BinOp(left=Subscript(value=Name(id='rgb1', ctx=Load()), slice=Name(id='idx', ctx=Load()), ctx=Load()), op=Sub(), right=Subscript(value=Name(id='rgb2', ctx=Load()), slice=Name(id='idx', ctx=Load()), ctx=Load())), Constant(value=2)], keywords=[]), generators=[comprehension(target=Name(id='idx', ctx=Store()), iter=Tuple(elts=[Constant(value=0), Constant(value=1), Constant(value=2)], ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[]), FunctionDef(name='dist_rgb_weighted', args=arguments(posonlyargs=[], args=[arg(arg='rgb1'), arg(arg='rgb2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Determine the weighted distance between two rgb colors.\n\n    :arg tuple rgb1: RGB color definition\n    :arg tuple rgb2: RGB color definition\n    :returns: Square of the distance between provided colors\n    :rtype: float\n\n    Similar to a standard distance formula, the values are weighted\n    to approximate human perception of color differences\n\n    For efficiency, the square of the distance is returned\n    which is sufficient for comparisons\n    ')), Assign(targets=[Name(id='red_mean', ctx=Store())], value=BinOp(left=BinOp(left=Subscript(value=Name(id='rgb1', ctx=Load()), slice=Constant(value=0), ctx=Load()), op=Add(), right=Subscript(value=Name(id='rgb2', ctx=Load()), slice=Constant(value=0), ctx=Load())), op=Div(), right=Constant(value=2.0))), Return(value=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Constant(value=2), op=Add(), right=BinOp(left=Name(id='red_mean', ctx=Load()), op=Div(), right=Constant(value=256))), op=Mult(), right=Call(func=Name(id='pow', ctx=Load()), args=[BinOp(left=Subscript(value=Name(id='rgb1', ctx=Load()), slice=Constant(value=0), ctx=Load()), op=Sub(), right=Subscript(value=Name(id='rgb2', ctx=Load()), slice=Constant(value=0), ctx=Load())), Constant(value=2)], keywords=[])), op=Add(), right=BinOp(left=Constant(value=4), op=Mult(), right=Call(func=Name(id='pow', ctx=Load()), args=[BinOp(left=Subscript(value=Name(id='rgb1', ctx=Load()), slice=Constant(value=1), ctx=Load()), op=Sub(), right=Subscript(value=Name(id='rgb2', ctx=Load()), slice=Constant(value=1), ctx=Load())), Constant(value=2)], keywords=[]))), op=Add(), right=BinOp(left=BinOp(left=Constant(value=2), op=Add(), right=BinOp(left=BinOp(left=Constant(value=255), op=Sub(), right=Name(id='red_mean', ctx=Load())), op=Div(), right=Constant(value=256))), op=Mult(), right=Call(func=Name(id='pow', ctx=Load()), args=[BinOp(left=Subscript(value=Name(id='rgb1', ctx=Load()), slice=Constant(value=2), ctx=Load()), op=Sub(), right=Subscript(value=Name(id='rgb2', ctx=Load()), slice=Constant(value=2), ctx=Load())), Constant(value=2)], keywords=[]))))], decorator_list=[]), FunctionDef(name='dist_cie76', args=arguments(posonlyargs=[], args=[arg(arg='rgb1'), arg(arg='rgb2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Determine distance between two rgb colors using the CIE94 algorithm.\n\n    :arg tuple rgb1: RGB color definition\n    :arg tuple rgb2: RGB color definition\n    :returns: Square of the distance between provided colors\n    :rtype: float\n\n    For efficiency, the square of the distance is returned\n    which is sufficient for comparisons\n    ')), Assign(targets=[Tuple(elts=[Name(id='l_1', ctx=Store()), Name(id='a_1', ctx=Store()), Name(id='b_1', ctx=Store())], ctx=Store())], value=Call(func=Name(id='rgb_to_lab', ctx=Load()), args=[Starred(value=Name(id='rgb1', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='l_2', ctx=Store()), Name(id='a_2', ctx=Store()), Name(id='b_2', ctx=Store())], ctx=Store())], value=Call(func=Name(id='rgb_to_lab', ctx=Load()), args=[Starred(value=Name(id='rgb2', ctx=Load()), ctx=Load())], keywords=[])), Return(value=BinOp(left=BinOp(left=Call(func=Name(id='pow', ctx=Load()), args=[BinOp(left=Name(id='l_1', ctx=Load()), op=Sub(), right=Name(id='l_2', ctx=Load())), Constant(value=2)], keywords=[]), op=Add(), right=Call(func=Name(id='pow', ctx=Load()), args=[BinOp(left=Name(id='a_1', ctx=Load()), op=Sub(), right=Name(id='a_2', ctx=Load())), Constant(value=2)], keywords=[])), op=Add(), right=Call(func=Name(id='pow', ctx=Load()), args=[BinOp(left=Name(id='b_1', ctx=Load()), op=Sub(), right=Name(id='b_2', ctx=Load())), Constant(value=2)], keywords=[])))], decorator_list=[]), FunctionDef(name='dist_cie94', args=arguments(posonlyargs=[], args=[arg(arg='rgb1'), arg(arg='rgb2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Determine distance between two rgb colors using the CIE94 algorithm.\n\n    :arg tuple rgb1: RGB color definition\n    :arg tuple rgb2: RGB color definition\n    :returns: Square of the distance between provided colors\n    :rtype: float\n\n    For efficiency, the square of the distance is returned\n    which is sufficient for comparisons\n    ')), Assign(targets=[Tuple(elts=[Name(id='l_1', ctx=Store()), Name(id='a_1', ctx=Store()), Name(id='b_1', ctx=Store())], ctx=Store())], value=Call(func=Name(id='rgb_to_lab', ctx=Load()), args=[Starred(value=Name(id='rgb1', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='l_2', ctx=Store()), Name(id='a_2', ctx=Store()), Name(id='b_2', ctx=Store())], ctx=Store())], value=Call(func=Name(id='rgb_to_lab', ctx=Load()), args=[Starred(value=Name(id='rgb2', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='s_l', ctx=Store()), Name(id='k_l', ctx=Store()), Name(id='k_c', ctx=Store()), Name(id='k_h', ctx=Store())], value=Constant(value=1)), Assign(targets=[Name(id='k_1', ctx=Store())], value=Constant(value=0.045)), Assign(targets=[Name(id='k_2', ctx=Store())], value=Constant(value=0.015)), Assign(targets=[Name(id='delta_l', ctx=Store())], value=BinOp(left=Name(id='l_1', ctx=Load()), op=Sub(), right=Name(id='l_2', ctx=Load()))), Assign(targets=[Name(id='delta_a', ctx=Store())], value=BinOp(left=Name(id='a_1', ctx=Load()), op=Sub(), right=Name(id='a_2', ctx=Load()))), Assign(targets=[Name(id='delta_b', ctx=Store())], value=BinOp(left=Name(id='b_1', ctx=Load()), op=Sub(), right=Name(id='b_2', ctx=Load()))), Assign(targets=[Name(id='c_1', ctx=Store())], value=Call(func=Name(id='sqrt', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='a_1', ctx=Load()), op=Pow(), right=Constant(value=2)), op=Add(), right=BinOp(left=Name(id='b_1', ctx=Load()), op=Pow(), right=Constant(value=2)))], keywords=[])), Assign(targets=[Name(id='c_2', ctx=Store())], value=Call(func=Name(id='sqrt', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='a_2', ctx=Load()), op=Pow(), right=Constant(value=2)), op=Add(), right=BinOp(left=Name(id='b_2', ctx=Load()), op=Pow(), right=Constant(value=2)))], keywords=[])), Assign(targets=[Name(id='delta_c', ctx=Store())], value=BinOp(left=Name(id='c_1', ctx=Load()), op=Sub(), right=Name(id='c_2', ctx=Load()))), Assign(targets=[Name(id='delta_h', ctx=Store())], value=Call(func=Name(id='sqrt', ctx=Load()), args=[BinOp(left=BinOp(left=BinOp(left=Name(id='delta_a', ctx=Load()), op=Pow(), right=Constant(value=2)), op=Add(), right=BinOp(left=Name(id='delta_b', ctx=Load()), op=Pow(), right=Constant(value=2))), op=Add(), right=BinOp(left=Name(id='delta_c', ctx=Load()), op=Pow(), right=Constant(value=2)))], keywords=[])), Assign(targets=[Name(id='s_c', ctx=Store())], value=BinOp(left=Constant(value=1), op=Add(), right=BinOp(left=Name(id='k_1', ctx=Load()), op=Mult(), right=Name(id='c_1', ctx=Load())))), Assign(targets=[Name(id='s_h', ctx=Store())], value=BinOp(left=Constant(value=1), op=Add(), right=BinOp(left=Name(id='k_2', ctx=Load()), op=Mult(), right=Name(id='c_1', ctx=Load())))), Return(value=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='delta_l', ctx=Load()), op=Div(), right=BinOp(left=Name(id='k_l', ctx=Load()), op=Mult(), right=Name(id='s_l', ctx=Load()))), op=Pow(), right=Constant(value=2)), op=Add(), right=BinOp(left=BinOp(left=Name(id='delta_c', ctx=Load()), op=Div(), right=BinOp(left=Name(id='k_c', ctx=Load()), op=Mult(), right=Name(id='s_c', ctx=Load()))), op=Pow(), right=Constant(value=2))), op=Add(), right=BinOp(left=BinOp(left=Name(id='delta_h', ctx=Load()), op=Div(), right=BinOp(left=Name(id='k_h', ctx=Load()), op=Mult(), right=Name(id='s_h', ctx=Load()))), op=Pow(), right=Constant(value=2))))], decorator_list=[]), FunctionDef(name='dist_cie2000', args=arguments(posonlyargs=[], args=[arg(arg='rgb1'), arg(arg='rgb2')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Determine distance between two rgb colors using the CIE2000 algorithm.\n\n    :arg tuple rgb1: RGB color definition\n    :arg tuple rgb2: RGB color definition\n    :returns: Square of the distance between provided colors\n    :rtype: float\n\n    For efficiency, the square of the distance is returned\n    which is sufficient for comparisons\n    ')), Assign(targets=[Name(id='s_l', ctx=Store()), Name(id='k_l', ctx=Store()), Name(id='k_c', ctx=Store()), Name(id='k_h', ctx=Store())], value=Constant(value=1)), Assign(targets=[Tuple(elts=[Name(id='l_1', ctx=Store()), Name(id='a_1', ctx=Store()), Name(id='b_1', ctx=Store())], ctx=Store())], value=Call(func=Name(id='rgb_to_lab', ctx=Load()), args=[Starred(value=Name(id='rgb1', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='l_2', ctx=Store()), Name(id='a_2', ctx=Store()), Name(id='b_2', ctx=Store())], ctx=Store())], value=Call(func=Name(id='rgb_to_lab', ctx=Load()), args=[Starred(value=Name(id='rgb2', ctx=Load()), ctx=Load())], keywords=[])), Assign(targets=[Name(id='delta_l', ctx=Store())], value=BinOp(left=Name(id='l_2', ctx=Load()), op=Sub(), right=Name(id='l_1', ctx=Load()))), Assign(targets=[Name(id='l_mean', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='l_1', ctx=Load()), op=Add(), right=Name(id='l_2', ctx=Load())), op=Div(), right=Constant(value=2))), Assign(targets=[Name(id='c_1', ctx=Store())], value=Call(func=Name(id='sqrt', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='a_1', ctx=Load()), op=Pow(), right=Constant(value=2)), op=Add(), right=BinOp(left=Name(id='b_1', ctx=Load()), op=Pow(), right=Constant(value=2)))], keywords=[])), Assign(targets=[Name(id='c_2', ctx=Store())], value=Call(func=Name(id='sqrt', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='a_2', ctx=Load()), op=Pow(), right=Constant(value=2)), op=Add(), right=BinOp(left=Name(id='b_2', ctx=Load()), op=Pow(), right=Constant(value=2)))], keywords=[])), Assign(targets=[Name(id='c_mean', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='c_1', ctx=Load()), op=Add(), right=Name(id='c_2', ctx=Load())), op=Div(), right=Constant(value=2))), Assign(targets=[Name(id='delta_c', ctx=Store())], value=BinOp(left=Name(id='c_1', ctx=Load()), op=Sub(), right=Name(id='c_2', ctx=Load()))), Assign(targets=[Name(id='g_x', ctx=Store())], value=Call(func=Name(id='sqrt', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='c_mean', ctx=Load()), op=Pow(), right=Constant(value=7)), op=Div(), right=BinOp(left=BinOp(left=Name(id='c_mean', ctx=Load()), op=Pow(), right=Constant(value=7)), op=Add(), right=BinOp(left=Constant(value=25), op=Pow(), right=Constant(value=7))))], keywords=[])), Assign(targets=[Name(id='h_1', ctx=Store())], value=BinOp(left=Call(func=Name(id='atan2', ctx=Load()), args=[Name(id='b_1', ctx=Load()), BinOp(left=Name(id='a_1', ctx=Load()), op=Add(), right=BinOp(left=BinOp(left=Name(id='a_1', ctx=Load()), op=Div(), right=Constant(value=2)), op=Mult(), right=BinOp(left=Constant(value=1), op=Sub(), right=Name(id='g_x', ctx=Load()))))], keywords=[]), op=Mod(), right=Constant(value=360))), Assign(targets=[Name(id='h_2', ctx=Store())], value=BinOp(left=Call(func=Name(id='atan2', ctx=Load()), args=[Name(id='b_2', ctx=Load()), BinOp(left=Name(id='a_2', ctx=Load()), op=Add(), right=BinOp(left=BinOp(left=Name(id='a_2', ctx=Load()), op=Div(), right=Constant(value=2)), op=Mult(), right=BinOp(left=Constant(value=1), op=Sub(), right=Name(id='g_x', ctx=Load()))))], keywords=[]), op=Mod(), right=Constant(value=360))), If(test=Compare(left=Constant(value=0), ops=[In()], comparators=[Tuple(elts=[Name(id='c_1', ctx=Load()), Name(id='c_2', ctx=Load())], ctx=Load())]), body=[Assign(targets=[Name(id='delta_h_prime', ctx=Store())], value=Constant(value=0)), Assign(targets=[Name(id='h_mean', ctx=Store())], value=BinOp(left=Name(id='h_1', ctx=Load()), op=Add(), right=Name(id='h_2', ctx=Load())))], orelse=[Assign(targets=[Name(id='delta_h_prime', ctx=Store())], value=BinOp(left=Name(id='h_2', ctx=Load()), op=Sub(), right=Name(id='h_1', ctx=Load()))), If(test=Compare(left=Call(func=Name(id='abs', ctx=Load()), args=[Name(id='delta_h_prime', ctx=Load())], keywords=[]), ops=[LtE()], comparators=[Constant(value=180)]), body=[Assign(targets=[Name(id='h_mean', ctx=Store())], value=BinOp(left=BinOp(left=Name(id='h_1', ctx=Load()), op=Add(), right=Name(id='h_2', ctx=Load())), op=Div(), right=Constant(value=2)))], orelse=[If(test=Compare(left=Name(id='h_2', ctx=Load()), ops=[LtE()], comparators=[Name(id='h_1', ctx=Load())]), body=[AugAssign(target=Name(id='delta_h_prime', ctx=Store()), op=Add(), value=Constant(value=360))], orelse=[AugAssign(target=Name(id='delta_h_prime', ctx=Store()), op=Sub(), value=Constant(value=360))]), Assign(targets=[Name(id='h_mean', ctx=Store())], value=IfExp(test=Compare(left=BinOp(left=Name(id='h_1', ctx=Load()), op=Add(), right=Name(id='h_2', ctx=Load())), ops=[Lt()], comparators=[Constant(value=360)]), body=BinOp(left=BinOp(left=BinOp(left=Name(id='h_1', ctx=Load()), op=Add(), right=Name(id='h_2', ctx=Load())), op=Add(), right=Constant(value=360)), op=Div(), right=Constant(value=2)), orelse=BinOp(left=BinOp(left=BinOp(left=Name(id='h_1', ctx=Load()), op=Add(), right=Name(id='h_2', ctx=Load())), op=Sub(), right=Constant(value=360)), op=Div(), right=Constant(value=2))))])]), Assign(targets=[Name(id='delta_h', ctx=Store())], value=BinOp(left=BinOp(left=Constant(value=2), op=Mult(), right=Call(func=Name(id='sqrt', ctx=Load()), args=[BinOp(left=Name(id='c_1', ctx=Load()), op=Mult(), right=Name(id='c_2', ctx=Load()))], keywords=[])), op=Mult(), right=Call(func=Name(id='sin', ctx=Load()), args=[BinOp(left=Name(id='delta_h_prime', ctx=Load()), op=Div(), right=Constant(value=2))], keywords=[]))), Assign(targets=[Name(id='t_x', ctx=Store())], value=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Constant(value=1), op=Sub(), right=BinOp(left=Constant(value=0.17), op=Mult(), right=Call(func=Name(id='cos', ctx=Load()), args=[BinOp(left=Name(id='h_mean', ctx=Load()), op=Sub(), right=Constant(value=30))], keywords=[]))), op=Add(), right=BinOp(left=Constant(value=0.24), op=Mult(), right=Call(func=Name(id='cos', ctx=Load()), args=[BinOp(left=Constant(value=2), op=Mult(), right=Name(id='h_mean', ctx=Load()))], keywords=[]))), op=Add(), right=BinOp(left=Constant(value=0.32), op=Mult(), right=Call(func=Name(id='cos', ctx=Load()), args=[BinOp(left=BinOp(left=Constant(value=3), op=Mult(), right=Name(id='h_mean', ctx=Load())), op=Add(), right=Constant(value=6))], keywords=[]))), op=Sub(), right=BinOp(left=Constant(value=0.2), op=Mult(), right=Call(func=Name(id='cos', ctx=Load()), args=[BinOp(left=BinOp(left=Constant(value=4), op=Mult(), right=Name(id='h_mean', ctx=Load())), op=Sub(), right=Constant(value=63))], keywords=[])))), Assign(targets=[Name(id='s_l', ctx=Store())], value=BinOp(left=Constant(value=1), op=Add(), right=BinOp(left=BinOp(left=Constant(value=0.015), op=Mult(), right=BinOp(left=BinOp(left=Name(id='l_mean', ctx=Load()), op=Sub(), right=Constant(value=50)), op=Pow(), right=Constant(value=2))), op=Div(), right=Call(func=Name(id='sqrt', ctx=Load()), args=[BinOp(left=Constant(value=20), op=Add(), right=BinOp(left=BinOp(left=Name(id='l_mean', ctx=Load()), op=Sub(), right=Constant(value=50)), op=Pow(), right=Constant(value=2)))], keywords=[])))), Assign(targets=[Name(id='s_c', ctx=Store())], value=BinOp(left=Constant(value=1), op=Add(), right=BinOp(left=Constant(value=0.045), op=Mult(), right=Name(id='c_mean', ctx=Load())))), Assign(targets=[Name(id='s_h', ctx=Store())], value=BinOp(left=Constant(value=1), op=Add(), right=BinOp(left=BinOp(left=Constant(value=0.015), op=Mult(), right=Name(id='c_mean', ctx=Load())), op=Mult(), right=Name(id='t_x', ctx=Load())))), Assign(targets=[Name(id='r_t', ctx=Store())], value=BinOp(left=BinOp(left=UnaryOp(op=USub(), operand=Constant(value=2)), op=Mult(), right=Name(id='g_x', ctx=Load())), op=Mult(), right=Call(func=Name(id='sin', ctx=Load()), args=[Call(func=Name(id='abs', ctx=Load()), args=[BinOp(left=Constant(value=60), op=Mult(), right=Call(func=Name(id='exp', ctx=Load()), args=[BinOp(left=UnaryOp(op=USub(), operand=Constant(value=1)), op=Mult(), right=BinOp(left=Call(func=Name(id='abs', ctx=Load()), args=[BinOp(left=BinOp(left=Name(id='delta_h', ctx=Load()), op=Sub(), right=Constant(value=275)), op=Div(), right=Constant(value=25))], keywords=[]), op=Pow(), right=Constant(value=2)))], keywords=[]))], keywords=[])], keywords=[]))), Assign(targets=[Name(id='delta_l', ctx=Store())], value=BinOp(left=Name(id='delta_l', ctx=Load()), op=Div(), right=BinOp(left=Name(id='k_l', ctx=Load()), op=Mult(), right=Name(id='s_l', ctx=Load())))), Assign(targets=[Name(id='delta_c', ctx=Store())], value=BinOp(left=Name(id='delta_c', ctx=Load()), op=Div(), right=BinOp(left=Name(id='k_c', ctx=Load()), op=Mult(), right=Name(id='s_c', ctx=Load())))), Assign(targets=[Name(id='delta_h', ctx=Store())], value=BinOp(left=Name(id='delta_h', ctx=Load()), op=Div(), right=BinOp(left=Name(id='k_h', ctx=Load()), op=Mult(), right=Name(id='s_h', ctx=Load())))), Return(value=BinOp(left=BinOp(left=BinOp(left=BinOp(left=Name(id='delta_l', ctx=Load()), op=Pow(), right=Constant(value=2)), op=Add(), right=BinOp(left=Name(id='delta_c', ctx=Load()), op=Pow(), right=Constant(value=2))), op=Add(), right=BinOp(left=Name(id='delta_h', ctx=Load()), op=Pow(), right=Constant(value=2))), op=Add(), right=BinOp(left=BinOp(left=Name(id='r_t', ctx=Load()), op=Mult(), right=Name(id='delta_c', ctx=Load())), op=Mult(), right=Name(id='delta_h', ctx=Load()))))], decorator_list=[]), Assign(targets=[Name(id='COLOR_DISTANCE_ALGORITHMS', ctx=Store())], value=Dict(keys=[Constant(value='rgb'), Constant(value='rgb-weighted'), Constant(value='cie76'), Constant(value='cie94'), Constant(value='cie2000')], values=[Name(id='dist_rgb', ctx=Load()), Name(id='dist_rgb_weighted', ctx=Load()), Name(id='dist_cie76', ctx=Load()), Name(id='dist_cie94', ctx=Load()), Name(id='dist_cie2000', ctx=Load())]))], type_ignores=[])