Module(body=[ImportFrom(module='pathlib', names=[alias(name='Path')], level=0), Import(names=[alias(name='json')]), Import(names=[alias(name='os')]), Import(names=[alias(name='pytest')]), ImportFrom(module='referencing', names=[alias(name='Registry')], level=0), ImportFrom(module='referencing.exceptions', names=[alias(name='Unresolvable')], level=0), Import(names=[alias(name='referencing.jsonschema')]), ClassDef(name='SuiteNotFound', bases=[Name(id='Exception', ctx=Load())], keywords=[], body=[FunctionDef(name='__str__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value='Cannot find the referencing suite. Set the REFERENCING_SUITE environment variable to the path to the suite, or run the test suite from alongside a full checkout of the git repository.'))], decorator_list=[])], decorator_list=[]), If(test=Compare(left=Constant(value='REFERENCING_SUITE'), ops=[In()], comparators=[Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load())]), body=[Assign(targets=[Name(id='SUITE', ctx=Store())], value=BinOp(left=Call(func=Name(id='Path', ctx=Load()), args=[Subscript(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), slice=Constant(value='REFERENCING_SUITE'), ctx=Load())], keywords=[]), op=Div(), right=Constant(value='tests')))], orelse=[Assign(targets=[Name(id='SUITE', ctx=Store())], value=BinOp(left=Attribute(value=Attribute(value=Attribute(value=Call(func=Name(id='Path', ctx=Load()), args=[Name(id='__file__', ctx=Load())], keywords=[]), attr='parent', ctx=Load()), attr='parent', ctx=Load()), attr='parent', ctx=Load()), op=Div(), right=Constant(value='suite/tests')))]), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='SUITE', ctx=Load()), attr='is_dir', ctx=Load()), args=[], keywords=[])), body=[Raise(exc=Call(func=Name(id='SuiteNotFound', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='DIALECT_IDS', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='loads', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='SUITE', ctx=Load()), attr='joinpath', ctx=Load()), args=[Constant(value='specifications.json')], keywords=[]), attr='read_text', ctx=Load()), args=[], keywords=[])], keywords=[])), FunctionDef(name='test_referencing_suite', args=arguments(posonlyargs=[], args=[arg(arg='test_path'), arg(arg='subtests')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='dialect_id', ctx=Store())], value=Subscript(value=Name(id='DIALECT_IDS', ctx=Load()), slice=Subscript(value=Attribute(value=Call(func=Attribute(value=Name(id='test_path', ctx=Load()), attr='relative_to', ctx=Load()), args=[Name(id='SUITE', ctx=Load())], keywords=[]), attr='parts', ctx=Load()), slice=Constant(value=0), ctx=Load()), ctx=Load())), Assign(targets=[Name(id='specification', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='referencing', ctx=Load()), attr='jsonschema', ctx=Load()), attr='specification_with', ctx=Load()), args=[Name(id='dialect_id', ctx=Load())], keywords=[])), Assign(targets=[Name(id='loaded', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='loads', ctx=Load()), args=[Call(func=Attribute(value=Name(id='test_path', ctx=Load()), attr='read_text', ctx=Load()), args=[], keywords=[])], keywords=[])), Assign(targets=[Name(id='registry', ctx=Store())], value=Subscript(value=Name(id='loaded', ctx=Load()), slice=Constant(value='registry'), ctx=Load())), Assign(targets=[Name(id='registry', ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='Registry', ctx=Load()), args=[], keywords=[]), attr='with_resources', ctx=Load()), args=[GeneratorExp(elt=Tuple(elts=[Name(id='uri', ctx=Load()), Call(func=Attribute(value=Name(id='specification', ctx=Load()), attr='create_resource', ctx=Load()), args=[Name(id='contents', ctx=Load())], keywords=[])], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='uri', ctx=Store()), Name(id='contents', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Subscript(value=Name(id='loaded', ctx=Load()), slice=Constant(value='registry'), ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[])), For(target=Name(id='test', ctx=Store()), iter=Subscript(value=Name(id='loaded', ctx=Load()), slice=Constant(value='tests'), ctx=Load()), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='subtests', ctx=Load()), attr='test', ctx=Load()), args=[], keywords=[keyword(arg='test', value=Name(id='test', ctx=Load()))]))], body=[Assign(targets=[Name(id='resolver', ctx=Store())], value=Call(func=Attribute(value=Name(id='registry', ctx=Load()), attr='resolver', ctx=Load()), args=[], keywords=[keyword(arg='base_uri', value=Call(func=Attribute(value=Name(id='test', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='base_uri'), Constant(value='')], keywords=[]))])), If(test=Call(func=Attribute(value=Name(id='test', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='error')], keywords=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Name(id='Unresolvable', ctx=Load())], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='resolver', ctx=Load()), attr='lookup', ctx=Load()), args=[Subscript(value=Name(id='test', ctx=Load()), slice=Constant(value='ref'), ctx=Load())], keywords=[]))])], orelse=[Assign(targets=[Name(id='resolved', ctx=Store())], value=Call(func=Attribute(value=Name(id='resolver', ctx=Load()), attr='lookup', ctx=Load()), args=[Subscript(value=Name(id='test', ctx=Load()), slice=Constant(value='ref'), ctx=Load())], keywords=[])), Assert(test=Compare(left=Attribute(value=Name(id='resolved', ctx=Load()), attr='contents', ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='test', ctx=Load()), slice=Constant(value='target'), ctx=Load())])), Assign(targets=[Name(id='then', ctx=Store())], value=Call(func=Attribute(value=Name(id='test', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='then')], keywords=[])), While(test=Name(id='then', ctx=Load()), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='subtests', ctx=Load()), attr='test', ctx=Load()), args=[], keywords=[keyword(arg='test', value=Name(id='test', ctx=Load())), keyword(arg='then', value=Name(id='then', ctx=Load()))]))], body=[Assign(targets=[Name(id='resolved', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='resolved', ctx=Load()), attr='resolver', ctx=Load()), attr='lookup', ctx=Load()), args=[Subscript(value=Name(id='then', ctx=Load()), slice=Constant(value='ref'), ctx=Load())], keywords=[])), Assert(test=Compare(left=Attribute(value=Name(id='resolved', ctx=Load()), attr='contents', ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='then', ctx=Load()), slice=Constant(value='target'), ctx=Load())]))]), Assign(targets=[Name(id='then', ctx=Store())], value=Call(func=Attribute(value=Name(id='then', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='then')], keywords=[]))], orelse=[])])])], orelse=[])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='test_path'), ListComp(elt=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='param', ctx=Load()), args=[Name(id='each', ctx=Load())], keywords=[keyword(arg='id', value=JoinedStr(values=[FormattedValue(value=Attribute(value=Attribute(value=Name(id='each', ctx=Load()), attr='parent', ctx=Load()), attr='name', ctx=Load()), conversion=-1), Constant(value='-'), FormattedValue(value=Attribute(value=Name(id='each', ctx=Load()), attr='stem', ctx=Load()), conversion=-1)]))]), generators=[comprehension(target=Name(id='each', ctx=Store()), iter=Call(func=Attribute(value=Name(id='SUITE', ctx=Load()), attr='glob', ctx=Load()), args=[Constant(value='*/**/*.json')], keywords=[]), ifs=[], is_async=0)])], keywords=[])])], type_ignores=[])