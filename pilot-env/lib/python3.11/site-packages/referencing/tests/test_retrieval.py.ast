Module(body=[ImportFrom(module='functools', names=[alias(name='lru_cache')], level=0), Import(names=[alias(name='json')]), Import(names=[alias(name='pytest')]), ImportFrom(module='referencing', names=[alias(name='Registry'), alias(name='Resource'), alias(name='exceptions')], level=0), ImportFrom(module='referencing.jsonschema', names=[alias(name='DRAFT202012')], level=0), ImportFrom(module='referencing.retrieval', names=[alias(name='to_cached_resource')], level=0), ClassDef(name='TestToCachedResource', bases=[], keywords=[], body=[FunctionDef(name='test_it_caches_retrieved_resources', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='contents', ctx=Store())], value=Dict(keys=[Constant(value='$schema')], values=[Constant(value='https://json-schema.org/draft/2020-12/schema')])), Assign(targets=[Name(id='stack', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dumps', ctx=Load()), args=[Name(id='contents', ctx=Load())], keywords=[])], ctx=Load())), FunctionDef(name='retrieve', args=arguments(posonlyargs=[], args=[arg(arg='uri')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='stack', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[]))], decorator_list=[Call(func=Name(id='to_cached_resource', ctx=Load()), args=[], keywords=[])]), Assign(targets=[Name(id='registry', ctx=Store())], value=Call(func=Name(id='Registry', ctx=Load()), args=[], keywords=[keyword(arg='retrieve', value=Name(id='retrieve', ctx=Load()))])), Assign(targets=[Name(id='expected', ctx=Store())], value=Call(func=Attribute(value=Name(id='Resource', ctx=Load()), attr='from_contents', ctx=Load()), args=[Name(id='contents', ctx=Load())], keywords=[])), Assign(targets=[Name(id='got', ctx=Store())], value=Call(func=Attribute(value=Name(id='registry', ctx=Load()), attr='get_or_retrieve', ctx=Load()), args=[Constant(value='urn:example:schema')], keywords=[])), Assert(test=Compare(left=Attribute(value=Name(id='got', ctx=Load()), attr='value', ctx=Load()), ops=[Eq()], comparators=[Name(id='expected', ctx=Load())])), Assign(targets=[Name(id='again', ctx=Store())], value=Call(func=Attribute(value=Name(id='registry', ctx=Load()), attr='get_or_retrieve', ctx=Load()), args=[Constant(value='urn:example:schema')], keywords=[])), Assert(test=Compare(left=Attribute(value=Name(id='again', ctx=Load()), attr='value', ctx=Load()), ops=[Is()], comparators=[Attribute(value=Name(id='got', ctx=Load()), attr='value', ctx=Load())]))], decorator_list=[]), FunctionDef(name='test_custom_loader', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='contents', ctx=Store())], value=Dict(keys=[Constant(value='$schema')], values=[Constant(value='https://json-schema.org/draft/2020-12/schema')])), Assign(targets=[Name(id='stack', ctx=Store())], value=List(elts=[Subscript(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dumps', ctx=Load()), args=[Name(id='contents', ctx=Load())], keywords=[]), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], ctx=Load())), FunctionDef(name='retrieve', args=arguments(posonlyargs=[], args=[arg(arg='uri')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='stack', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[]))], decorator_list=[Call(func=Name(id='to_cached_resource', ctx=Load()), args=[], keywords=[keyword(arg='loads', value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='s')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='loads', ctx=Load()), args=[Subscript(value=Name(id='s', ctx=Load()), slice=Slice(step=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load())], keywords=[])))])]), Assign(targets=[Name(id='registry', ctx=Store())], value=Call(func=Name(id='Registry', ctx=Load()), args=[], keywords=[keyword(arg='retrieve', value=Name(id='retrieve', ctx=Load()))])), Assign(targets=[Name(id='expected', ctx=Store())], value=Call(func=Attribute(value=Name(id='Resource', ctx=Load()), attr='from_contents', ctx=Load()), args=[Name(id='contents', ctx=Load())], keywords=[])), Assign(targets=[Name(id='got', ctx=Store())], value=Call(func=Attribute(value=Name(id='registry', ctx=Load()), attr='get_or_retrieve', ctx=Load()), args=[Constant(value='urn:example:schema')], keywords=[])), Assert(test=Compare(left=Attribute(value=Name(id='got', ctx=Load()), attr='value', ctx=Load()), ops=[Eq()], comparators=[Name(id='expected', ctx=Load())])), Assign(targets=[Name(id='again', ctx=Store())], value=Call(func=Attribute(value=Name(id='registry', ctx=Load()), attr='get_or_retrieve', ctx=Load()), args=[Constant(value='urn:example:schema')], keywords=[])), Assert(test=Compare(left=Attribute(value=Name(id='again', ctx=Load()), attr='value', ctx=Load()), ops=[Is()], comparators=[Attribute(value=Name(id='got', ctx=Load()), attr='value', ctx=Load())]))], decorator_list=[]), FunctionDef(name='test_custom_from_contents', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='contents', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='stack', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dumps', ctx=Load()), args=[Name(id='contents', ctx=Load())], keywords=[])], ctx=Load())), FunctionDef(name='retrieve', args=arguments(posonlyargs=[], args=[arg(arg='uri')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='stack', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[]))], decorator_list=[Call(func=Name(id='to_cached_resource', ctx=Load()), args=[], keywords=[keyword(arg='from_contents', value=Attribute(value=Name(id='DRAFT202012', ctx=Load()), attr='create_resource', ctx=Load()))])]), Assign(targets=[Name(id='registry', ctx=Store())], value=Call(func=Name(id='Registry', ctx=Load()), args=[], keywords=[keyword(arg='retrieve', value=Name(id='retrieve', ctx=Load()))])), Assign(targets=[Name(id='expected', ctx=Store())], value=Call(func=Attribute(value=Name(id='DRAFT202012', ctx=Load()), attr='create_resource', ctx=Load()), args=[Name(id='contents', ctx=Load())], keywords=[])), Assign(targets=[Name(id='got', ctx=Store())], value=Call(func=Attribute(value=Name(id='registry', ctx=Load()), attr='get_or_retrieve', ctx=Load()), args=[Constant(value='urn:example:schema')], keywords=[])), Assert(test=Compare(left=Attribute(value=Name(id='got', ctx=Load()), attr='value', ctx=Load()), ops=[Eq()], comparators=[Name(id='expected', ctx=Load())])), Assign(targets=[Name(id='again', ctx=Store())], value=Call(func=Attribute(value=Name(id='registry', ctx=Load()), attr='get_or_retrieve', ctx=Load()), args=[Constant(value='urn:example:schema')], keywords=[])), Assert(test=Compare(left=Attribute(value=Name(id='again', ctx=Load()), attr='value', ctx=Load()), ops=[Is()], comparators=[Attribute(value=Name(id='got', ctx=Load()), attr='value', ctx=Load())]))], decorator_list=[]), FunctionDef(name='test_custom_cache', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='$schema')], values=[Constant(value='https://json-schema.org/draft/2020-12/schema')])), Assign(targets=[Name(id='mapping', ctx=Store())], value=Dict(keys=[Constant(value='urn:example:1'), Constant(value='urn:example:2'), Constant(value='urn:example:3')], values=[Call(func=Name(id='dict', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[keyword(arg='foo', value=Constant(value=1))]), Call(func=Name(id='dict', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[keyword(arg='foo', value=Constant(value=2))]), Call(func=Name(id='dict', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[keyword(arg='foo', value=Constant(value=3))])])), Assign(targets=[Name(id='resources', ctx=Store())], value=DictComp(key=Name(id='uri', ctx=Load()), value=Call(func=Attribute(value=Name(id='Resource', ctx=Load()), attr='from_contents', ctx=Load()), args=[Name(id='contents', ctx=Load())], keywords=[]), generators=[comprehension(target=Tuple(elts=[Name(id='uri', ctx=Store()), Name(id='contents', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='mapping', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])), FunctionDef(name='retrieve', args=arguments(posonlyargs=[], args=[arg(arg='uri')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dumps', ctx=Load()), args=[Call(func=Attribute(value=Name(id='mapping', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='uri', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[Call(func=Name(id='to_cached_resource', ctx=Load()), args=[], keywords=[keyword(arg='cache', value=Call(func=Name(id='lru_cache', ctx=Load()), args=[], keywords=[keyword(arg='maxsize', value=Constant(value=2))]))])]), Assign(targets=[Name(id='registry', ctx=Store())], value=Call(func=Name(id='Registry', ctx=Load()), args=[], keywords=[keyword(arg='retrieve', value=Name(id='retrieve', ctx=Load()))])), Assign(targets=[Name(id='got', ctx=Store())], value=Call(func=Attribute(value=Name(id='registry', ctx=Load()), attr='get_or_retrieve', ctx=Load()), args=[Constant(value='urn:example:1')], keywords=[])), Assert(test=Compare(left=Attribute(value=Name(id='got', ctx=Load()), attr='value', ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='resources', ctx=Load()), slice=Constant(value='urn:example:1'), ctx=Load())])), Assert(test=Compare(left=Attribute(value=Call(func=Attribute(value=Name(id='registry', ctx=Load()), attr='get_or_retrieve', ctx=Load()), args=[Constant(value='urn:example:1')], keywords=[]), attr='value', ctx=Load()), ops=[Is()], comparators=[Attribute(value=Name(id='got', ctx=Load()), attr='value', ctx=Load())])), Assert(test=Compare(left=Attribute(value=Call(func=Attribute(value=Name(id='registry', ctx=Load()), attr='get_or_retrieve', ctx=Load()), args=[Constant(value='urn:example:1')], keywords=[]), attr='value', ctx=Load()), ops=[Is()], comparators=[Attribute(value=Name(id='got', ctx=Load()), attr='value', ctx=Load())])), Assign(targets=[Name(id='got', ctx=Store())], value=Call(func=Attribute(value=Name(id='registry', ctx=Load()), attr='get_or_retrieve', ctx=Load()), args=[Constant(value='urn:example:2')], keywords=[])), Assert(test=Compare(left=Attribute(value=Name(id='got', ctx=Load()), attr='value', ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='resources', ctx=Load()), slice=Constant(value='urn:example:2'), ctx=Load())])), Assert(test=Compare(left=Attribute(value=Call(func=Attribute(value=Name(id='registry', ctx=Load()), attr='get_or_retrieve', ctx=Load()), args=[Constant(value='urn:example:2')], keywords=[]), attr='value', ctx=Load()), ops=[Is()], comparators=[Attribute(value=Name(id='got', ctx=Load()), attr='value', ctx=Load())])), Assert(test=Compare(left=Attribute(value=Call(func=Attribute(value=Name(id='registry', ctx=Load()), attr='get_or_retrieve', ctx=Load()), args=[Constant(value='urn:example:2')], keywords=[]), attr='value', ctx=Load()), ops=[Is()], comparators=[Attribute(value=Name(id='got', ctx=Load()), attr='value', ctx=Load())])), Assign(targets=[Name(id='got', ctx=Store())], value=Call(func=Attribute(value=Name(id='registry', ctx=Load()), attr='get_or_retrieve', ctx=Load()), args=[Constant(value='urn:example:3')], keywords=[])), Assert(test=Compare(left=Attribute(value=Name(id='got', ctx=Load()), attr='value', ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='resources', ctx=Load()), slice=Constant(value='urn:example:3'), ctx=Load())])), Assert(test=Compare(left=Attribute(value=Call(func=Attribute(value=Name(id='registry', ctx=Load()), attr='get_or_retrieve', ctx=Load()), args=[Constant(value='urn:example:3')], keywords=[]), attr='value', ctx=Load()), ops=[Is()], comparators=[Attribute(value=Name(id='got', ctx=Load()), attr='value', ctx=Load())])), Assert(test=Compare(left=Attribute(value=Call(func=Attribute(value=Name(id='registry', ctx=Load()), attr='get_or_retrieve', ctx=Load()), args=[Constant(value='urn:example:3')], keywords=[]), attr='value', ctx=Load()), ops=[Is()], comparators=[Attribute(value=Name(id='got', ctx=Load()), attr='value', ctx=Load())])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='pytest', ctx=Load()), attr='raises', ctx=Load()), args=[Attribute(value=Name(id='exceptions', ctx=Load()), attr='Unretrievable', ctx=Load())], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='registry', ctx=Load()), attr='get_or_retrieve', ctx=Load()), args=[Constant(value='urn:example:1')], keywords=[]))])], decorator_list=[])], decorator_list=[])], type_ignores=[])