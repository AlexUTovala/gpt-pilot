Module(body=[Expr(value=Constant(value='\nErrors, oh no!\n')), ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING'), alias(name='Any')], level=0), Import(names=[alias(name='attrs')]), ImportFrom(module='referencing._attrs', names=[alias(name='frozen')], level=0), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[ImportFrom(module='referencing', names=[alias(name='Resource')], level=0), ImportFrom(module='referencing.typing', names=[alias(name='URI')], level=0)], orelse=[]), ClassDef(name='NoSuchResource', bases=[Name(id='KeyError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    The given URI is not present in a registry.\n\n    Unlike most exceptions, this class *is* intended to be publicly\n    instantiable and *is* part of the public API of the package.\n    ')), AnnAssign(target=Name(id='ref', ctx=Store()), annotation=Name(id='URI', ctx=Load()), simple=1), FunctionDef(name='__eq__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other', annotation=Name(id='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), ops=[IsNot()], comparators=[Attribute(value=Name(id='other', ctx=Load()), attr='__class__', ctx=Load())]), body=[Return(value=Name(id='NotImplemented', ctx=Load()))], orelse=[]), Return(value=Compare(left=Call(func=Attribute(value=Name(id='attrs', ctx=Load()), attr='astuple', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='attrs', ctx=Load()), attr='astuple', ctx=Load()), args=[Name(id='other', ctx=Load())], keywords=[])]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='__hash__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='hash', ctx=Load()), args=[Call(func=Attribute(value=Name(id='attrs', ctx=Load()), attr='astuple', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='int', ctx=Load()))], decorator_list=[Name(id='frozen', ctx=Load())]), ClassDef(name='NoInternalID', bases=[Name(id='Exception', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="\n    A resource has no internal ID, but one is needed.\n\n    E.g. in modern JSON Schema drafts, this is the :kw:`$id` keyword.\n\n    One might be needed if a resource was to-be added to a registry but no\n    other URI is available, and the resource doesn't declare its canonical URI.\n    ")), AnnAssign(target=Name(id='resource', ctx=Store()), annotation=Subscript(value=Name(id='Resource', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load()), simple=1), FunctionDef(name='__eq__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other', annotation=Name(id='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), ops=[IsNot()], comparators=[Attribute(value=Name(id='other', ctx=Load()), attr='__class__', ctx=Load())]), body=[Return(value=Name(id='NotImplemented', ctx=Load()))], orelse=[]), Return(value=Compare(left=Call(func=Attribute(value=Name(id='attrs', ctx=Load()), attr='astuple', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='attrs', ctx=Load()), attr='astuple', ctx=Load()), args=[Name(id='other', ctx=Load())], keywords=[])]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='__hash__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='hash', ctx=Load()), args=[Call(func=Attribute(value=Name(id='attrs', ctx=Load()), attr='astuple', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='int', ctx=Load()))], decorator_list=[Name(id='frozen', ctx=Load())]), ClassDef(name='Unretrievable', bases=[Name(id='KeyError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    The given URI is not present in a registry, and retrieving it failed.\n    ')), AnnAssign(target=Name(id='ref', ctx=Store()), annotation=Name(id='URI', ctx=Load()), simple=1), FunctionDef(name='__eq__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other', annotation=Name(id='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), ops=[IsNot()], comparators=[Attribute(value=Name(id='other', ctx=Load()), attr='__class__', ctx=Load())]), body=[Return(value=Name(id='NotImplemented', ctx=Load()))], orelse=[]), Return(value=Compare(left=Call(func=Attribute(value=Name(id='attrs', ctx=Load()), attr='astuple', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='attrs', ctx=Load()), attr='astuple', ctx=Load()), args=[Name(id='other', ctx=Load())], keywords=[])]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='__hash__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='hash', ctx=Load()), args=[Call(func=Attribute(value=Name(id='attrs', ctx=Load()), attr='astuple', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='int', ctx=Load()))], decorator_list=[Name(id='frozen', ctx=Load())]), ClassDef(name='CannotDetermineSpecification', bases=[Name(id='Exception', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Attempting to detect the appropriate `Specification` failed.\n\n    This happens if no discernible information is found in the contents of the\n    new resource which would help identify it.\n    ')), AnnAssign(target=Name(id='contents', ctx=Store()), annotation=Name(id='Any', ctx=Load()), simple=1), FunctionDef(name='__eq__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other', annotation=Name(id='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), ops=[IsNot()], comparators=[Attribute(value=Name(id='other', ctx=Load()), attr='__class__', ctx=Load())]), body=[Return(value=Name(id='NotImplemented', ctx=Load()))], orelse=[]), Return(value=Compare(left=Call(func=Attribute(value=Name(id='attrs', ctx=Load()), attr='astuple', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='attrs', ctx=Load()), attr='astuple', ctx=Load()), args=[Name(id='other', ctx=Load())], keywords=[])]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='__hash__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='hash', ctx=Load()), args=[Call(func=Attribute(value=Name(id='attrs', ctx=Load()), attr='astuple', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='int', ctx=Load()))], decorator_list=[Name(id='frozen', ctx=Load())]), ClassDef(name='Unresolvable', bases=[Name(id='Exception', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    A reference was unresolvable.\n    ')), AnnAssign(target=Name(id='ref', ctx=Store()), annotation=Name(id='URI', ctx=Load()), simple=1), FunctionDef(name='__eq__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other', annotation=Name(id='Any', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), ops=[IsNot()], comparators=[Attribute(value=Name(id='other', ctx=Load()), attr='__class__', ctx=Load())]), body=[Return(value=Name(id='NotImplemented', ctx=Load()))], orelse=[]), Return(value=Compare(left=Call(func=Attribute(value=Name(id='attrs', ctx=Load()), attr='astuple', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='attrs', ctx=Load()), attr='astuple', ctx=Load()), args=[Name(id='other', ctx=Load())], keywords=[])]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='__hash__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='hash', ctx=Load()), args=[Call(func=Attribute(value=Name(id='attrs', ctx=Load()), attr='astuple', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[], returns=Name(id='int', ctx=Load()))], decorator_list=[Attribute(value=Name(id='attrs', ctx=Load()), attr='frozen', ctx=Load())]), ClassDef(name='PointerToNowhere', bases=[Name(id='Unresolvable', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    A JSON Pointer leads to a part of a document that does not exist.\n    ')), AnnAssign(target=Name(id='resource', ctx=Store()), annotation=Subscript(value=Name(id='Resource', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load()), simple=1), FunctionDef(name='__str__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='msg', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='ref', ctx=Load()), conversion=114), Constant(value=' does not exist within '), FormattedValue(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='resource', ctx=Load()), attr='contents', ctx=Load()), conversion=114)])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='ref', ctx=Load()), ops=[Eq()], comparators=[Constant(value='/')]), body=[AugAssign(target=Name(id='msg', ctx=Store()), op=Add(), value=Constant(value=". The pointer '/' is a valid JSON Pointer but it points to an empty string property ''. If you intended to point to the entire resource, you should use '#'."))], orelse=[]), Return(value=Name(id='msg', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[Name(id='frozen', ctx=Load())]), ClassDef(name='NoSuchAnchor', bases=[Name(id='Unresolvable', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    An anchor does not exist within a particular resource.\n    ')), AnnAssign(target=Name(id='resource', ctx=Store()), annotation=Subscript(value=Name(id='Resource', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='anchor', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), FunctionDef(name='__str__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='anchor', ctx=Load()), conversion=114), Constant(value=' does not exist within '), FormattedValue(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='resource', ctx=Load()), attr='contents', ctx=Load()), conversion=114)]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[Name(id='frozen', ctx=Load())]), ClassDef(name='InvalidAnchor', bases=[Name(id='Unresolvable', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    An anchor which could never exist in a resource was dereferenced.\n\n    It is somehow syntactically invalid.\n    ')), AnnAssign(target=Name(id='resource', ctx=Store()), annotation=Subscript(value=Name(id='Resource', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='anchor', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), FunctionDef(name='__str__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[Constant(value="'#"), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='anchor', ctx=Load()), conversion=-1), Constant(value="' is not a valid anchor, neither as a plain name anchor nor as a JSON Pointer. You may have intended to use '#/"), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='anchor', ctx=Load()), conversion=-1), Constant(value="', as the slash is required *before each segment* of a JSON pointer.")]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], decorator_list=[Name(id='frozen', ctx=Load())])], type_ignores=[])