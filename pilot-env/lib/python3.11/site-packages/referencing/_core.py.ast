Module(body=[ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), ImportFrom(module='collections.abc', names=[alias(name='Iterable'), alias(name='Iterator'), alias(name='Sequence')], level=0), ImportFrom(module='enum', names=[alias(name='Enum')], level=0), ImportFrom(module='typing', names=[alias(name='Any'), alias(name='Callable'), alias(name='ClassVar'), alias(name='Generic'), alias(name='Protocol'), alias(name='TypeVar')], level=0), ImportFrom(module='urllib.parse', names=[alias(name='unquote'), alias(name='urldefrag'), alias(name='urljoin')], level=0), ImportFrom(module='attrs', names=[alias(name='evolve'), alias(name='field')], level=0), ImportFrom(module='rpds', names=[alias(name='HashTrieMap'), alias(name='HashTrieSet'), alias(name='List')], level=0), ImportFrom(module='referencing', names=[alias(name='exceptions')], level=0), ImportFrom(module='referencing._attrs', names=[alias(name='frozen')], level=0), ImportFrom(module='referencing.typing', names=[alias(name='URI'), alias(name='Anchor', asname='AnchorType'), alias(name='D'), alias(name='Mapping'), alias(name='Retrieve')], level=0), AnnAssign(target=Name(id='EMPTY_UNCRAWLED', ctx=Store()), annotation=Subscript(value=Name(id='HashTrieSet', ctx=Load()), slice=Name(id='URI', ctx=Load()), ctx=Load()), value=Call(func=Name(id='HashTrieSet', ctx=Load()), args=[], keywords=[]), simple=1), AnnAssign(target=Name(id='EMPTY_PREVIOUS_RESOLVERS', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='URI', ctx=Load()), ctx=Load()), value=Call(func=Name(id='List', ctx=Load()), args=[], keywords=[]), simple=1), ClassDef(name='_Unset', bases=[Name(id='Enum', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    What sillyness...\n    ')), Assign(targets=[Name(id='SENTINEL', ctx=Store())], value=Constant(value=1))], decorator_list=[]), Assign(targets=[Name(id='_UNSET', ctx=Store())], value=Attribute(value=Name(id='_Unset', ctx=Load()), attr='SENTINEL', ctx=Load())), ClassDef(name='_MaybeInSubresource', bases=[Subscript(value=Name(id='Protocol', ctx=Load()), slice=Name(id='D', ctx=Load()), ctx=Load())], keywords=[], body=[FunctionDef(name='__call__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='segments', annotation=Subscript(value=Name(id='Sequence', ctx=Load()), slice=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Name(id='str', ctx=Load())), ctx=Load())), arg(arg='resolver', annotation=Subscript(value=Name(id='Resolver', ctx=Load()), slice=Name(id='D', ctx=Load()), ctx=Load())), arg(arg='subresource', annotation=Subscript(value=Name(id='Resource', ctx=Load()), slice=Name(id='D', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value=Ellipsis))], decorator_list=[], returns=Subscript(value=Name(id='Resolver', ctx=Load()), slice=Name(id='D', ctx=Load()), ctx=Load()))], decorator_list=[]), FunctionDef(name='_detect_or_error', args=arguments(posonlyargs=[], args=[arg(arg='contents', annotation=Name(id='D', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='contents', ctx=Load()), Name(id='Mapping', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='CannotDetermineSpecification', ctx=Load()), args=[Name(id='contents', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='jsonschema_dialect_id', ctx=Store())], value=Call(func=Attribute(value=Name(id='contents', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='$schema')], keywords=[])), If(test=Compare(left=Name(id='jsonschema_dialect_id', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='CannotDetermineSpecification', ctx=Load()), args=[Name(id='contents', ctx=Load())], keywords=[]))], orelse=[]), ImportFrom(module='referencing.jsonschema', names=[alias(name='specification_with')], level=0), Return(value=Call(func=Name(id='specification_with', ctx=Load()), args=[Name(id='jsonschema_dialect_id', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Specification', ctx=Load()), slice=Name(id='D', ctx=Load()), ctx=Load())), FunctionDef(name='_detect_or_default', args=arguments(posonlyargs=[], args=[arg(arg='default', annotation=Subscript(value=Name(id='Specification', ctx=Load()), slice=Name(id='D', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='_detect', args=arguments(posonlyargs=[], args=[arg(arg='contents', annotation=Name(id='D', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='contents', ctx=Load()), Name(id='Mapping', ctx=Load())], keywords=[])), body=[Return(value=Name(id='default', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='jsonschema_dialect_id', ctx=Store())], value=Call(func=Attribute(value=Name(id='contents', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='$schema')], keywords=[])), If(test=Compare(left=Name(id='jsonschema_dialect_id', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Name(id='default', ctx=Load()))], orelse=[]), ImportFrom(module='referencing.jsonschema', names=[alias(name='specification_with')], level=0), Return(value=Call(func=Name(id='specification_with', ctx=Load()), args=[Name(id='jsonschema_dialect_id', ctx=Load())], keywords=[keyword(arg='default', value=Name(id='default', ctx=Load()))]))], decorator_list=[], returns=Subscript(value=Name(id='Specification', ctx=Load()), slice=Name(id='D', ctx=Load()), ctx=Load())), Return(value=Name(id='_detect', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='D', ctx=Load())], ctx=Load()), Subscript(value=Name(id='Specification', ctx=Load()), slice=Name(id='D', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), ClassDef(name='_SpecificationDetector', bases=[], keywords=[], body=[FunctionDef(name='__get__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='instance', annotation=BinOp(left=Subscript(value=Name(id='Specification', ctx=Load()), slice=Name(id='D', ctx=Load()), ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='cls', annotation=Subscript(value=Name(id='type', ctx=Load()), slice=Subscript(value=Name(id='Specification', ctx=Load()), slice=Name(id='D', ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='instance', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Name(id='_detect_or_error', ctx=Load()))], orelse=[Return(value=Call(func=Name(id='_detect_or_default', ctx=Load()), args=[Name(id='instance', ctx=Load())], keywords=[]))])], decorator_list=[], returns=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='D', ctx=Load())], ctx=Load()), Subscript(value=Name(id='Specification', ctx=Load()), slice=Name(id='D', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], decorator_list=[]), ClassDef(name='Specification', bases=[Subscript(value=Name(id='Generic', ctx=Load()), slice=Name(id='D', ctx=Load()), ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    A specification which defines referencing behavior.\n\n    The various methods of a `Specification` allow for varying referencing\n    behavior across JSON Schema specification versions, etc.\n    ')), AnnAssign(target=Name(id='name', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='id_of', ctx=Store()), annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='D', ctx=Load())], ctx=Load()), BinOp(left=Name(id='URI', ctx=Load()), op=BitOr(), right=Constant(value=None))], ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='subresources_of', ctx=Store()), annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='D', ctx=Load())], ctx=Load()), Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='D', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='maybe_in_subresource', ctx=Store()), annotation=Subscript(value=Name(id='_MaybeInSubresource', ctx=Load()), slice=Name(id='D', ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='_anchors_in', ctx=Store()), annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Subscript(value=Name(id='Specification', ctx=Load()), slice=Name(id='D', ctx=Load()), ctx=Load()), Name(id='D', ctx=Load())], ctx=Load()), Subscript(value=Name(id='Iterable', ctx=Load()), slice=Subscript(value=Name(id='AnchorType', ctx=Load()), slice=Name(id='D', ctx=Load()), ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Call(func=Name(id='field', ctx=Load()), args=[], keywords=[keyword(arg='alias', value=Constant(value='anchors_in'))]), simple=1), AnnAssign(target=Name(id='OPAQUE', ctx=Store()), annotation=Subscript(value=Name(id='ClassVar', ctx=Load()), slice=Subscript(value=Name(id='Specification', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load()), ctx=Load()), simple=1), Assign(targets=[Name(id='detect', ctx=Store())], value=Call(func=Name(id='_SpecificationDetector', ctx=Load()), args=[], keywords=[])), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[Constant(value='<Specification name='), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), conversion=114), Constant(value='>')]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='anchors_in', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='contents', annotation=Name(id='D', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Retrieve the anchors contained in the given document.\n        ')), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_anchors_in', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='contents', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='create_resource', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='contents', annotation=Name(id='D', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Create a resource which is interpreted using this specification.\n        ')), Return(value=Call(func=Name(id='Resource', ctx=Load()), args=[], keywords=[keyword(arg='contents', value=Name(id='contents', ctx=Load())), keyword(arg='specification', value=Name(id='self', ctx=Load()))]))], decorator_list=[], returns=Subscript(value=Name(id='Resource', ctx=Load()), slice=Name(id='D', ctx=Load()), ctx=Load()))], decorator_list=[Name(id='frozen', ctx=Load())]), Assign(targets=[Attribute(value=Name(id='Specification', ctx=Load()), attr='OPAQUE', ctx=Store())], value=Call(func=Name(id='Specification', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='opaque')), keyword(arg='id_of', value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='contents')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Constant(value=None))), keyword(arg='subresources_of', value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='contents')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=List(elts=[], ctx=Load()))), keyword(arg='anchors_in', value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='specification'), arg(arg='contents')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=List(elts=[], ctx=Load()))), keyword(arg='maybe_in_subresource', value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='segments'), arg(arg='resolver'), arg(arg='subresource')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Name(id='resolver', ctx=Load())))])), ClassDef(name='Resource', bases=[Subscript(value=Name(id='Generic', ctx=Load()), slice=Name(id='D', ctx=Load()), ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    A document (deserialized JSON) with a concrete interpretation under a spec.\n\n    In other words, a Python object, along with an instance of `Specification`\n    which describes how the document interacts with referencing -- both\n    internally (how it refers to other `Resource`\\ s) and externally (how it\n    should be identified such that it is referenceable by other documents).\n    ')), AnnAssign(target=Name(id='contents', ctx=Store()), annotation=Name(id='D', ctx=Load()), simple=1), AnnAssign(target=Name(id='_specification', ctx=Store()), annotation=Subscript(value=Name(id='Specification', ctx=Load()), slice=Name(id='D', ctx=Load()), ctx=Load()), value=Call(func=Name(id='field', ctx=Load()), args=[], keywords=[keyword(arg='alias', value=Constant(value='specification'))]), simple=1), FunctionDef(name='from_contents', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='contents', annotation=Name(id='D', ctx=Load())), arg(arg='default_specification', annotation=BinOp(left=Subscript(value=Name(id='type', ctx=Load()), slice=Subscript(value=Name(id='Specification', ctx=Load()), slice=Name(id='D', ctx=Load()), ctx=Load()), ctx=Load()), op=BitOr(), right=Subscript(value=Name(id='Specification', ctx=Load()), slice=Name(id='D', ctx=Load()), ctx=Load())))], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='Specification', ctx=Load())]), body=[Expr(value=Constant(value="\n        Create a resource guessing which specification applies to the contents.\n\n        Raises:\n\n            `CannotDetermineSpecification`\n\n                if the given contents don't have any discernible\n                information which could be used to guess which\n                specification they identify as\n        ")), Assign(targets=[Name(id='specification', ctx=Store())], value=Call(func=Attribute(value=Name(id='default_specification', ctx=Load()), attr='detect', ctx=Load()), args=[Name(id='contents', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='specification', ctx=Load()), attr='create_resource', ctx=Load()), args=[], keywords=[keyword(arg='contents', value=Name(id='contents', ctx=Load()))]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Subscript(value=Name(id='Resource', ctx=Load()), slice=Name(id='D', ctx=Load()), ctx=Load())), FunctionDef(name='opaque', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='contents', annotation=Name(id='D', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Create an opaque `Resource` -- i.e. one with opaque specification.\n\n        See `Specification.OPAQUE` for details.\n        ')), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='Specification', ctx=Load()), attr='OPAQUE', ctx=Load()), attr='create_resource', ctx=Load()), args=[], keywords=[keyword(arg='contents', value=Name(id='contents', ctx=Load()))]))], decorator_list=[Name(id='classmethod', ctx=Load())], returns=Subscript(value=Name(id='Resource', ctx=Load()), slice=Name(id='D', ctx=Load()), ctx=Load())), FunctionDef(name='id', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Retrieve this resource's (specification-specific) identifier.\n        ")), Assign(targets=[Name(id='id', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_specification', ctx=Load()), attr='id_of', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='contents', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='id', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return()], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='id', ctx=Load()), attr='rstrip', ctx=Load()), args=[Constant(value='#')], keywords=[]))], decorator_list=[], returns=BinOp(left=Name(id='URI', ctx=Load()), op=BitOr(), right=Constant(value=None))), FunctionDef(name='subresources', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Retrieve this resource's subresources.\n        ")), Return(value=GeneratorExp(elt=Call(func=Attribute(value=Name(id='Resource', ctx=Load()), attr='from_contents', ctx=Load()), args=[Name(id='each', ctx=Load())], keywords=[keyword(arg='default_specification', value=Attribute(value=Name(id='self', ctx=Load()), attr='_specification', ctx=Load()))]), generators=[comprehension(target=Name(id='each', ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_specification', ctx=Load()), attr='subresources_of', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='contents', ctx=Load())], keywords=[]), ifs=[], is_async=0)]))], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Subscript(value=Name(id='Resource', ctx=Load()), slice=Name(id='D', ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='anchors', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Retrieve this resource's (specification-specific) identifier.\n        ")), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_specification', ctx=Load()), attr='anchors_in', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='contents', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Subscript(value=Name(id='AnchorType', ctx=Load()), slice=Name(id='D', ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='pointer', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='pointer', annotation=Name(id='str', ctx=Load())), arg(arg='resolver', annotation=Subscript(value=Name(id='Resolver', ctx=Load()), slice=Name(id='D', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Resolve the given JSON pointer.\n\n        Raises:\n\n            `exceptions.PointerToNowhere`\n\n                if the pointer points to a location not present in the document\n        ')), Assign(targets=[Name(id='contents', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='contents', ctx=Load())), AnnAssign(target=Name(id='segments', ctx=Store()), annotation=Subscript(value=Name(id='list', ctx=Load()), slice=BinOp(left=Name(id='int', ctx=Load()), op=BitOr(), right=Name(id='str', ctx=Load())), ctx=Load()), value=List(elts=[], ctx=Load()), simple=1), For(target=Name(id='segment', ctx=Store()), iter=Call(func=Attribute(value=Call(func=Name(id='unquote', ctx=Load()), args=[Subscript(value=Name(id='pointer', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], keywords=[]), attr='split', ctx=Load()), args=[Constant(value='/')], keywords=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='contents', ctx=Load()), Name(id='Sequence', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='segment', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Name(id='segment', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='segment', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='segment', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='~1'), Constant(value='/')], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value='~0'), Constant(value='~')], keywords=[]))]), Try(body=[Assign(targets=[Name(id='contents', ctx=Store())], value=Subscript(value=Name(id='contents', ctx=Load()), slice=Name(id='segment', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='LookupError', ctx=Load()), body=[Raise(exc=Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='PointerToNowhere', ctx=Load()), args=[], keywords=[keyword(arg='ref', value=Name(id='pointer', ctx=Load())), keyword(arg='resource', value=Name(id='self', ctx=Load()))]))])], orelse=[], finalbody=[]), Expr(value=Call(func=Attribute(value=Name(id='segments', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='segment', ctx=Load())], keywords=[])), Assign(targets=[Name(id='last', ctx=Store())], value=Name(id='resolver', ctx=Load())), Assign(targets=[Name(id='resolver', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_specification', ctx=Load()), attr='maybe_in_subresource', ctx=Load()), args=[], keywords=[keyword(arg='segments', value=Name(id='segments', ctx=Load())), keyword(arg='resolver', value=Name(id='resolver', ctx=Load())), keyword(arg='subresource', value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_specification', ctx=Load()), attr='create_resource', ctx=Load()), args=[Name(id='contents', ctx=Load())], keywords=[]))])), If(test=Compare(left=Name(id='resolver', ctx=Load()), ops=[IsNot()], comparators=[Name(id='last', ctx=Load())]), body=[Assign(targets=[Name(id='segments', ctx=Store())], value=List(elts=[], ctx=Load()))], orelse=[])], orelse=[]), Return(value=Call(func=Name(id='Resolved', ctx=Load()), args=[], keywords=[keyword(arg='contents', value=Name(id='contents', ctx=Load())), keyword(arg='resolver', value=Name(id='resolver', ctx=Load()))]))], decorator_list=[], returns=Subscript(value=Name(id='Resolved', ctx=Load()), slice=Name(id='D', ctx=Load()), ctx=Load()))], decorator_list=[Name(id='frozen', ctx=Load())]), FunctionDef(name='_fail_to_retrieve', args=arguments(posonlyargs=[], args=[arg(arg='uri', annotation=Name(id='URI', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='NoSuchResource', ctx=Load()), args=[], keywords=[keyword(arg='ref', value=Name(id='uri', ctx=Load()))]))], decorator_list=[]), ClassDef(name='Registry', bases=[Subscript(value=Name(id='Mapping', ctx=Load()), slice=Tuple(elts=[Name(id='URI', ctx=Load()), Subscript(value=Name(id='Resource', ctx=Load()), slice=Name(id='D', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    A registry of `Resource`\\ s, each identified by their canonical URIs.\n\n    Registries store a collection of in-memory resources, and optionally\n    enable additional resources which may be stored elsewhere (e.g. in a\n    database, a separate set of files, over the network, etc.).\n\n    They also lazily walk their known resources, looking for subresources\n    within them. In other words, subresources contained within any added\n    resources will be retrievable via their own IDs (though this discovery of\n    subresources will be delayed until necessary).\n\n    Registries are immutable, and their methods return new instances of the\n    registry with the additional resources added to them.\n\n    The ``retrieve`` argument can be used to configure retrieval of resources\n    dynamically, either over the network, from a database, or the like.\n    Pass it a callable which will be called if any URI not present in the\n    registry is accessed. It must either return a `Resource` or else raise a\n    `NoSuchResource` exception indicating that the resource does not exist\n    even according to the retrieval logic.\n    ')), AnnAssign(target=Name(id='_resources', ctx=Store()), annotation=Subscript(value=Name(id='HashTrieMap', ctx=Load()), slice=Tuple(elts=[Name(id='URI', ctx=Load()), Subscript(value=Name(id='Resource', ctx=Load()), slice=Name(id='D', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Call(func=Name(id='field', ctx=Load()), args=[], keywords=[keyword(arg='default', value=Call(func=Name(id='HashTrieMap', ctx=Load()), args=[], keywords=[])), keyword(arg='converter', value=Attribute(value=Name(id='HashTrieMap', ctx=Load()), attr='convert', ctx=Load())), keyword(arg='alias', value=Constant(value='resources'))]), simple=1), AnnAssign(target=Name(id='_anchors', ctx=Store()), annotation=Subscript(value=Name(id='HashTrieMap', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='URI', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), Subscript(value=Name(id='AnchorType', ctx=Load()), slice=Name(id='D', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Call(func=Name(id='HashTrieMap', ctx=Load()), args=[], keywords=[]), simple=1), AnnAssign(target=Name(id='_uncrawled', ctx=Store()), annotation=Subscript(value=Name(id='HashTrieSet', ctx=Load()), slice=Name(id='URI', ctx=Load()), ctx=Load()), value=Name(id='EMPTY_UNCRAWLED', ctx=Load()), simple=1), AnnAssign(target=Name(id='_retrieve', ctx=Store()), annotation=Subscript(value=Name(id='Retrieve', ctx=Load()), slice=Name(id='D', ctx=Load()), ctx=Load()), value=Call(func=Name(id='field', ctx=Load()), args=[], keywords=[keyword(arg='default', value=Name(id='_fail_to_retrieve', ctx=Load())), keyword(arg='alias', value=Constant(value='retrieve'))]), simple=1), FunctionDef(name='__getitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='uri', annotation=Name(id='URI', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return the (already crawled) `Resource` identified by the given URI.\n        ')), Try(body=[Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_resources', ctx=Load()), slice=Call(func=Attribute(value=Name(id='uri', ctx=Load()), attr='rstrip', ctx=Load()), args=[Constant(value='#')], keywords=[]), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Raise(exc=Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='NoSuchResource', ctx=Load()), args=[], keywords=[keyword(arg='ref', value=Name(id='uri', ctx=Load()))]))])], orelse=[], finalbody=[])], decorator_list=[], returns=Subscript(value=Name(id='Resource', ctx=Load()), slice=Name(id='D', ctx=Load()), ctx=Load())), FunctionDef(name='__iter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Iterate over all crawled URIs in the registry.\n        ')), Return(value=Call(func=Name(id='iter', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_resources', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Iterator', ctx=Load()), slice=Name(id='URI', ctx=Load()), ctx=Load())), FunctionDef(name='__len__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Count the total number of fully crawled resources in this registry.\n        ')), Return(value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_resources', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='__rmatmul__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='new', annotation=BinOp(left=Subscript(value=Name(id='Resource', ctx=Load()), slice=Name(id='D', ctx=Load()), ctx=Load()), op=BitOr(), right=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Subscript(value=Name(id='Resource', ctx=Load()), slice=Name(id='D', ctx=Load()), ctx=Load()), ctx=Load())))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Create a new registry with resource(s) added using their internal IDs.\n\n        Resources must have a internal IDs (e.g. the :kw:`$id` keyword in\n        modern JSON Schema versions), otherwise an error will be raised.\n\n        Both a single resource as well as an iterable of resources works, i.e.:\n\n            * ``resource @ registry`` or\n\n            * ``[iterable, of, multiple, resources] @ registry``\n\n        which -- again, assuming the resources have internal IDs -- is\n        equivalent to calling `Registry.with_resources` as such:\n\n        .. code:: python\n\n            registry.with_resources(\n                (resource.id(), resource) for resource in new_resources\n            )\n\n        Raises:\n\n            `NoInternalID`\n\n                if the resource(s) in fact do not have IDs\n        ')), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='new', ctx=Load()), Name(id='Resource', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='new', ctx=Store())], value=Tuple(elts=[Name(id='new', ctx=Load())], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='resources', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_resources', ctx=Load())), Assign(targets=[Name(id='uncrawled', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_uncrawled', ctx=Load())), For(target=Name(id='resource', ctx=Store()), iter=Name(id='new', ctx=Load()), body=[Assign(targets=[Name(id='id', ctx=Store())], value=Call(func=Attribute(value=Name(id='resource', ctx=Load()), attr='id', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='id', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='NoInternalID', ctx=Load()), args=[], keywords=[keyword(arg='resource', value=Name(id='resource', ctx=Load()))]))], orelse=[]), Assign(targets=[Name(id='uncrawled', ctx=Store())], value=Call(func=Attribute(value=Name(id='uncrawled', ctx=Load()), attr='insert', ctx=Load()), args=[Name(id='id', ctx=Load())], keywords=[])), Assign(targets=[Name(id='resources', ctx=Store())], value=Call(func=Attribute(value=Name(id='resources', ctx=Load()), attr='insert', ctx=Load()), args=[Name(id='id', ctx=Load()), Name(id='resource', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='evolve', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[keyword(arg='resources', value=Name(id='resources', ctx=Load())), keyword(arg='uncrawled', value=Name(id='uncrawled', ctx=Load()))]))], decorator_list=[], returns=Subscript(value=Name(id='Registry', ctx=Load()), slice=Name(id='D', ctx=Load()), ctx=Load())), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='size', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), Assign(targets=[Name(id='pluralized', ctx=Store())], value=IfExp(test=Compare(left=Name(id='size', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=Constant(value='resource'), orelse=Constant(value='resources'))), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='_uncrawled', ctx=Load()), body=[Assign(targets=[Name(id='uncrawled', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_uncrawled', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='uncrawled', ctx=Load()), ops=[Eq()], comparators=[Name(id='size', ctx=Load())]), body=[Assign(targets=[Name(id='summary', ctx=Store())], value=JoinedStr(values=[Constant(value='uncrawled '), FormattedValue(value=Name(id='pluralized', ctx=Load()), conversion=-1)]))], orelse=[Assign(targets=[Name(id='summary', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='pluralized', ctx=Load()), conversion=-1), Constant(value=', '), FormattedValue(value=Name(id='uncrawled', ctx=Load()), conversion=-1), Constant(value=' uncrawled')]))])], orelse=[Assign(targets=[Name(id='summary', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='pluralized', ctx=Load()), conversion=-1)]))]), Return(value=JoinedStr(values=[Constant(value='<Registry ('), FormattedValue(value=Name(id='size', ctx=Load()), conversion=-1), Constant(value=' '), FormattedValue(value=Name(id='summary', ctx=Load()), conversion=-1), Constant(value=')>')]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='get_or_retrieve', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='uri', annotation=Name(id='URI', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Get a resource from the registry, crawling or retrieving if necessary.\n\n        May involve crawling to find the given URI if it is not already known,\n        so the returned object is a `Retrieved` object which contains both the\n        resource value as well as the registry which ultimately contained it.\n        ')), Assign(targets=[Name(id='resource', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_resources', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='uri', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='resource', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=Call(func=Name(id='Retrieved', ctx=Load()), args=[], keywords=[keyword(arg='registry', value=Name(id='self', ctx=Load())), keyword(arg='value', value=Name(id='resource', ctx=Load()))]))], orelse=[]), Assign(targets=[Name(id='registry', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='crawl', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='resource', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='registry', ctx=Load()), attr='_resources', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='uri', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='resource', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=Call(func=Name(id='Retrieved', ctx=Load()), args=[], keywords=[keyword(arg='registry', value=Name(id='registry', ctx=Load())), keyword(arg='value', value=Name(id='resource', ctx=Load()))]))], orelse=[]), Try(body=[Assign(targets=[Name(id='resource', ctx=Store())], value=Call(func=Attribute(value=Name(id='registry', ctx=Load()), attr='_retrieve', ctx=Load()), args=[Name(id='uri', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Tuple(elts=[Attribute(value=Name(id='exceptions', ctx=Load()), attr='CannotDetermineSpecification', ctx=Load()), Attribute(value=Name(id='exceptions', ctx=Load()), attr='NoSuchResource', ctx=Load())], ctx=Load()), body=[Raise()]), ExceptHandler(type=Name(id='Exception', ctx=Load()), body=[Raise(exc=Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='Unretrievable', ctx=Load()), args=[], keywords=[keyword(arg='ref', value=Name(id='uri', ctx=Load()))]))])], orelse=[Assign(targets=[Name(id='registry', ctx=Store())], value=Call(func=Attribute(value=Name(id='registry', ctx=Load()), attr='with_resource', ctx=Load()), args=[Name(id='uri', ctx=Load()), Name(id='resource', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='Retrieved', ctx=Load()), args=[], keywords=[keyword(arg='registry', value=Name(id='registry', ctx=Load())), keyword(arg='value', value=Name(id='resource', ctx=Load()))]))], finalbody=[])], decorator_list=[], returns=Subscript(value=Name(id='Retrieved', ctx=Load()), slice=Tuple(elts=[Name(id='D', ctx=Load()), Subscript(value=Name(id='Resource', ctx=Load()), slice=Name(id='D', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='remove', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='uri', annotation=Name(id='URI', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return a registry with the resource identified by a given URI removed.\n        ')), If(test=Compare(left=Name(id='uri', ctx=Load()), ops=[NotIn()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_resources', ctx=Load())]), body=[Raise(exc=Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='NoSuchResource', ctx=Load()), args=[], keywords=[keyword(arg='ref', value=Name(id='uri', ctx=Load()))]))], orelse=[]), Return(value=Call(func=Name(id='evolve', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[keyword(arg='resources', value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_resources', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='uri', ctx=Load())], keywords=[])), keyword(arg='uncrawled', value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_uncrawled', ctx=Load()), attr='discard', ctx=Load()), args=[Name(id='uri', ctx=Load())], keywords=[])), keyword(arg='anchors', value=Call(func=Name(id='HashTrieMap', ctx=Load()), args=[GeneratorExp(elt=Tuple(elts=[Name(id='k', ctx=Load()), Name(id='v', ctx=Load())], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_anchors', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[Compare(left=Subscript(value=Name(id='k', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[NotEq()], comparators=[Name(id='uri', ctx=Load())])], is_async=0)])], keywords=[]))]))], decorator_list=[]), FunctionDef(name='anchor', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='uri', annotation=Name(id='URI', ctx=Load())), arg(arg='name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Retrieve a given anchor from a resource which must already be crawled.\n        ')), Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_anchors', ctx=Load()), attr='get', ctx=Load()), args=[Tuple(elts=[Name(id='uri', ctx=Load()), Name(id='name', ctx=Load())], ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='value', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=Call(func=Name(id='Retrieved', ctx=Load()), args=[], keywords=[keyword(arg='value', value=Name(id='value', ctx=Load())), keyword(arg='registry', value=Name(id='self', ctx=Load()))]))], orelse=[]), Assign(targets=[Name(id='registry', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='crawl', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='registry', ctx=Load()), attr='_anchors', ctx=Load()), attr='get', ctx=Load()), args=[Tuple(elts=[Name(id='uri', ctx=Load()), Name(id='name', ctx=Load())], ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='value', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=Call(func=Name(id='Retrieved', ctx=Load()), args=[], keywords=[keyword(arg='value', value=Name(id='value', ctx=Load())), keyword(arg='registry', value=Name(id='registry', ctx=Load()))]))], orelse=[]), Assign(targets=[Name(id='resource', ctx=Store())], value=Subscript(value=Name(id='self', ctx=Load()), slice=Name(id='uri', ctx=Load()), ctx=Load())), Assign(targets=[Name(id='canonical_uri', ctx=Store())], value=Call(func=Attribute(value=Name(id='resource', ctx=Load()), attr='id', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='canonical_uri', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='registry', ctx=Load()), attr='_anchors', ctx=Load()), attr='get', ctx=Load()), args=[Tuple(elts=[Name(id='canonical_uri', ctx=Load()), Name(id='name', ctx=Load())], ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='value', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=Call(func=Name(id='Retrieved', ctx=Load()), args=[], keywords=[keyword(arg='value', value=Name(id='value', ctx=Load())), keyword(arg='registry', value=Name(id='registry', ctx=Load()))]))], orelse=[])], orelse=[]), If(test=Compare(left=Constant(value='/'), ops=[In()], comparators=[Name(id='name', ctx=Load())]), body=[Raise(exc=Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='InvalidAnchor', ctx=Load()), args=[], keywords=[keyword(arg='ref', value=Name(id='uri', ctx=Load())), keyword(arg='resource', value=Name(id='resource', ctx=Load())), keyword(arg='anchor', value=Name(id='name', ctx=Load()))]))], orelse=[]), Raise(exc=Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='NoSuchAnchor', ctx=Load()), args=[], keywords=[keyword(arg='ref', value=Name(id='uri', ctx=Load())), keyword(arg='resource', value=Name(id='resource', ctx=Load())), keyword(arg='anchor', value=Name(id='name', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='contents', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='uri', annotation=Name(id='URI', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Retrieve the (already crawled) contents identified by the given URI.\n        ')), Return(value=Attribute(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_resources', ctx=Load()), slice=Call(func=Attribute(value=Name(id='uri', ctx=Load()), attr='rstrip', ctx=Load()), args=[Constant(value='#')], keywords=[]), ctx=Load()), attr='contents', ctx=Load()))], decorator_list=[], returns=Name(id='D', ctx=Load())), FunctionDef(name='crawl', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Crawl all added resources, discovering subresources.\n        ')), Assign(targets=[Name(id='resources', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_resources', ctx=Load())), Assign(targets=[Name(id='anchors', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_anchors', ctx=Load())), Assign(targets=[Name(id='uncrawled', ctx=Store())], value=ListComp(elt=Tuple(elts=[Name(id='uri', ctx=Load()), Subscript(value=Name(id='resources', ctx=Load()), slice=Name(id='uri', ctx=Load()), ctx=Load())], ctx=Load()), generators=[comprehension(target=Name(id='uri', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_uncrawled', ctx=Load()), ifs=[], is_async=0)])), While(test=Name(id='uncrawled', ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='uri', ctx=Store()), Name(id='resource', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='uncrawled', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='id', ctx=Store())], value=Call(func=Attribute(value=Name(id='resource', ctx=Load()), attr='id', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='id', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='uri', ctx=Store())], value=Call(func=Name(id='urljoin', ctx=Load()), args=[Name(id='uri', ctx=Load()), Name(id='id', ctx=Load())], keywords=[])), Assign(targets=[Name(id='resources', ctx=Store())], value=Call(func=Attribute(value=Name(id='resources', ctx=Load()), attr='insert', ctx=Load()), args=[Name(id='uri', ctx=Load()), Name(id='resource', ctx=Load())], keywords=[]))], orelse=[]), For(target=Name(id='each', ctx=Store()), iter=Call(func=Attribute(value=Name(id='resource', ctx=Load()), attr='anchors', ctx=Load()), args=[], keywords=[]), body=[Assign(targets=[Name(id='anchors', ctx=Store())], value=Call(func=Attribute(value=Name(id='anchors', ctx=Load()), attr='insert', ctx=Load()), args=[Tuple(elts=[Name(id='uri', ctx=Load()), Attribute(value=Name(id='each', ctx=Load()), attr='name', ctx=Load())], ctx=Load()), Name(id='each', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='uncrawled', ctx=Load()), attr='extend', ctx=Load()), args=[GeneratorExp(elt=Tuple(elts=[Name(id='uri', ctx=Load()), Name(id='each', ctx=Load())], ctx=Load()), generators=[comprehension(target=Name(id='each', ctx=Store()), iter=Call(func=Attribute(value=Name(id='resource', ctx=Load()), attr='subresources', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='evolve', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[keyword(arg='resources', value=Name(id='resources', ctx=Load())), keyword(arg='anchors', value=Name(id='anchors', ctx=Load())), keyword(arg='uncrawled', value=Name(id='EMPTY_UNCRAWLED', ctx=Load()))]))], decorator_list=[], returns=Subscript(value=Name(id='Registry', ctx=Load()), slice=Name(id='D', ctx=Load()), ctx=Load())), FunctionDef(name='with_resource', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='uri', annotation=Name(id='URI', ctx=Load())), arg(arg='resource', annotation=Subscript(value=Name(id='Resource', ctx=Load()), slice=Name(id='D', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Add the given `Resource` to the registry, without crawling it.\n        ')), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='with_resources', ctx=Load()), args=[List(elts=[Tuple(elts=[Name(id='uri', ctx=Load()), Name(id='resource', ctx=Load())], ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='with_resources', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='pairs', annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='URI', ctx=Load()), Subscript(value=Name(id='Resource', ctx=Load()), slice=Name(id='D', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Add the given `Resource`\\ s to the registry, without crawling them.\n        ')), Assign(targets=[Name(id='resources', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_resources', ctx=Load())), Assign(targets=[Name(id='uncrawled', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_uncrawled', ctx=Load())), For(target=Tuple(elts=[Name(id='uri', ctx=Store()), Name(id='resource', ctx=Store())], ctx=Store()), iter=Name(id='pairs', ctx=Load()), body=[Assign(targets=[Name(id='uri', ctx=Store())], value=Call(func=Attribute(value=Name(id='uri', ctx=Load()), attr='rstrip', ctx=Load()), args=[Constant(value='#')], keywords=[])), Assign(targets=[Name(id='uncrawled', ctx=Store())], value=Call(func=Attribute(value=Name(id='uncrawled', ctx=Load()), attr='insert', ctx=Load()), args=[Name(id='uri', ctx=Load())], keywords=[])), Assign(targets=[Name(id='resources', ctx=Store())], value=Call(func=Attribute(value=Name(id='resources', ctx=Load()), attr='insert', ctx=Load()), args=[Name(id='uri', ctx=Load()), Name(id='resource', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='evolve', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[keyword(arg='resources', value=Name(id='resources', ctx=Load())), keyword(arg='uncrawled', value=Name(id='uncrawled', ctx=Load()))]))], decorator_list=[], returns=Subscript(value=Name(id='Registry', ctx=Load()), slice=Name(id='D', ctx=Load()), ctx=Load())), FunctionDef(name='with_contents', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='pairs', annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='URI', ctx=Load()), Name(id='D', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs', annotation=Name(id='Any', ctx=Load())), defaults=[]), body=[Expr(value=Constant(value='\n        Add the given contents to the registry, autodetecting when necessary.\n        ')), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='with_resources', ctx=Load()), args=[GeneratorExp(elt=Tuple(elts=[Name(id='uri', ctx=Load()), Call(func=Attribute(value=Name(id='Resource', ctx=Load()), attr='from_contents', ctx=Load()), args=[Name(id='each', ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))])], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='uri', ctx=Store()), Name(id='each', ctx=Store())], ctx=Store()), iter=Name(id='pairs', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='Registry', ctx=Load()), slice=Name(id='D', ctx=Load()), ctx=Load())), FunctionDef(name='combine', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='registries', annotation=Subscript(value=Name(id='Registry', ctx=Load()), slice=Name(id='D', ctx=Load()), ctx=Load())), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Combine together one or more other registries, producing a unified one.\n        ')), If(test=Compare(left=Name(id='registries', ctx=Load()), ops=[Eq()], comparators=[Tuple(elts=[Name(id='self', ctx=Load())], ctx=Load())]), body=[Return(value=Name(id='self', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='resources', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_resources', ctx=Load())), Assign(targets=[Name(id='anchors', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_anchors', ctx=Load())), Assign(targets=[Name(id='uncrawled', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_uncrawled', ctx=Load())), Assign(targets=[Name(id='retrieve', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_retrieve', ctx=Load())), For(target=Name(id='registry', ctx=Store()), iter=Name(id='registries', ctx=Load()), body=[Assign(targets=[Name(id='resources', ctx=Store())], value=Call(func=Attribute(value=Name(id='resources', ctx=Load()), attr='update', ctx=Load()), args=[Attribute(value=Name(id='registry', ctx=Load()), attr='_resources', ctx=Load())], keywords=[])), Assign(targets=[Name(id='anchors', ctx=Store())], value=Call(func=Attribute(value=Name(id='anchors', ctx=Load()), attr='update', ctx=Load()), args=[Attribute(value=Name(id='registry', ctx=Load()), attr='_anchors', ctx=Load())], keywords=[])), Assign(targets=[Name(id='uncrawled', ctx=Store())], value=Call(func=Attribute(value=Name(id='uncrawled', ctx=Load()), attr='update', ctx=Load()), args=[Attribute(value=Name(id='registry', ctx=Load()), attr='_uncrawled', ctx=Load())], keywords=[])), If(test=Compare(left=Attribute(value=Name(id='registry', ctx=Load()), attr='_retrieve', ctx=Load()), ops=[IsNot()], comparators=[Name(id='_fail_to_retrieve', ctx=Load())]), body=[If(test=Compare(left=Attribute(value=Name(id='registry', ctx=Load()), attr='_retrieve', ctx=Load()), ops=[IsNot(), IsNot()], comparators=[Name(id='retrieve', ctx=Load()), Name(id='_fail_to_retrieve', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Cannot combine registries with conflicting retrieval functions.')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='retrieve', ctx=Store())], value=Attribute(value=Name(id='registry', ctx=Load()), attr='_retrieve', ctx=Load()))], orelse=[])], orelse=[]), Return(value=Call(func=Name(id='evolve', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[keyword(arg='anchors', value=Name(id='anchors', ctx=Load())), keyword(arg='resources', value=Name(id='resources', ctx=Load())), keyword(arg='uncrawled', value=Name(id='uncrawled', ctx=Load())), keyword(arg='retrieve', value=Name(id='retrieve', ctx=Load()))]))], decorator_list=[], returns=Subscript(value=Name(id='Registry', ctx=Load()), slice=Name(id='D', ctx=Load()), ctx=Load())), FunctionDef(name='resolver', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='base_uri', annotation=Name(id='URI', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value='')]), body=[Expr(value=Constant(value='\n        Return a `Resolver` which resolves references against this registry.\n        ')), Return(value=Call(func=Name(id='Resolver', ctx=Load()), args=[], keywords=[keyword(arg='base_uri', value=Name(id='base_uri', ctx=Load())), keyword(arg='registry', value=Name(id='self', ctx=Load()))]))], decorator_list=[], returns=Subscript(value=Name(id='Resolver', ctx=Load()), slice=Name(id='D', ctx=Load()), ctx=Load())), FunctionDef(name='resolver_with_root', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='resource', annotation=Subscript(value=Name(id='Resource', ctx=Load()), slice=Name(id='D', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return a `Resolver` with a specific root resource.\n        ')), Assign(targets=[Name(id='uri', ctx=Store())], value=BoolOp(op=Or(), values=[Call(func=Attribute(value=Name(id='resource', ctx=Load()), attr='id', ctx=Load()), args=[], keywords=[]), Constant(value='')])), Return(value=Call(func=Name(id='Resolver', ctx=Load()), args=[], keywords=[keyword(arg='base_uri', value=Name(id='uri', ctx=Load())), keyword(arg='registry', value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='with_resource', ctx=Load()), args=[Name(id='uri', ctx=Load()), Name(id='resource', ctx=Load())], keywords=[]))]))], decorator_list=[], returns=Subscript(value=Name(id='Resolver', ctx=Load()), slice=Name(id='D', ctx=Load()), ctx=Load()))], decorator_list=[Name(id='frozen', ctx=Load())]), Assign(targets=[Name(id='AnchorOrResource', ctx=Store())], value=Call(func=Name(id='TypeVar', ctx=Load()), args=[Constant(value='AnchorOrResource'), Subscript(value=Name(id='AnchorType', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load()), Subscript(value=Name(id='Resource', ctx=Load()), slice=Name(id='Any', ctx=Load()), ctx=Load())], keywords=[])), ClassDef(name='Retrieved', bases=[Subscript(value=Name(id='Generic', ctx=Load()), slice=Tuple(elts=[Name(id='D', ctx=Load()), Name(id='AnchorOrResource', ctx=Load())], ctx=Load()), ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    A value retrieved from a `Registry`.\n    ')), AnnAssign(target=Name(id='value', ctx=Store()), annotation=Name(id='AnchorOrResource', ctx=Load()), simple=1), AnnAssign(target=Name(id='registry', ctx=Store()), annotation=Subscript(value=Name(id='Registry', ctx=Load()), slice=Name(id='D', ctx=Load()), ctx=Load()), simple=1)], decorator_list=[Name(id='frozen', ctx=Load())]), ClassDef(name='Resolved', bases=[Subscript(value=Name(id='Generic', ctx=Load()), slice=Name(id='D', ctx=Load()), ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    A reference resolved to its contents by a `Resolver`.\n    ')), AnnAssign(target=Name(id='contents', ctx=Store()), annotation=Name(id='D', ctx=Load()), simple=1), AnnAssign(target=Name(id='resolver', ctx=Store()), annotation=Subscript(value=Name(id='Resolver', ctx=Load()), slice=Name(id='D', ctx=Load()), ctx=Load()), simple=1)], decorator_list=[Name(id='frozen', ctx=Load())]), ClassDef(name='Resolver', bases=[Subscript(value=Name(id='Generic', ctx=Load()), slice=Name(id='D', ctx=Load()), ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    A reference resolver.\n\n    Resolvers help resolve references (including relative ones) by\n    pairing a fixed base URI with a `Registry`.\n\n    This object, under normal circumstances, is expected to be used by\n    *implementers of libraries* built on top of `referencing` (e.g. JSON Schema\n    implementations or other libraries resolving JSON references),\n    not directly by end-users populating registries or while writing\n    schemas or other resources.\n\n    References are resolved against the base URI, and the combined URI\n    is then looked up within the registry.\n\n    The process of resolving a reference may itself involve calculating\n    a *new* base URI for future reference resolution (e.g. if an\n    intermediate resource sets a new base URI), or may involve encountering\n    additional subresources and adding them to a new registry.\n    ')), AnnAssign(target=Name(id='_base_uri', ctx=Store()), annotation=Name(id='URI', ctx=Load()), value=Call(func=Name(id='field', ctx=Load()), args=[], keywords=[keyword(arg='alias', value=Constant(value='base_uri'))]), simple=1), AnnAssign(target=Name(id='_registry', ctx=Store()), annotation=Subscript(value=Name(id='Registry', ctx=Load()), slice=Name(id='D', ctx=Load()), ctx=Load()), value=Call(func=Name(id='field', ctx=Load()), args=[], keywords=[keyword(arg='alias', value=Constant(value='registry'))]), simple=1), AnnAssign(target=Name(id='_previous', ctx=Store()), annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='URI', ctx=Load()), ctx=Load()), value=Call(func=Name(id='field', ctx=Load()), args=[], keywords=[keyword(arg='default', value=Call(func=Name(id='List', ctx=Load()), args=[], keywords=[])), keyword(arg='repr', value=Constant(value=False)), keyword(arg='alias', value=Constant(value='previous'))]), simple=1), FunctionDef(name='lookup', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ref', annotation=Name(id='URI', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Resolve the given reference to the resource it points to.\n\n        Raises:\n\n            `exceptions.Unresolvable`\n\n                or a subclass thereof (see below) if the reference isn't\n                resolvable\n\n            `exceptions.NoSuchAnchor`\n\n                if the reference is to a URI where a resource exists but\n                contains a plain name fragment which does not exist within\n                the resource\n\n            `exceptions.PointerToNowhere`\n\n                if the reference is to a URI where a resource exists but\n                contains a JSON pointer to a location within the resource\n                that does not exist\n        ")), If(test=Call(func=Attribute(value=Name(id='ref', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='#')], keywords=[]), body=[Assign(targets=[Tuple(elts=[Name(id='uri', ctx=Store()), Name(id='fragment', ctx=Store())], ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='_base_uri', ctx=Load()), Subscript(value=Name(id='ref', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())], ctx=Load()))], orelse=[Assign(targets=[Tuple(elts=[Name(id='uri', ctx=Store()), Name(id='fragment', ctx=Store())], ctx=Store())], value=Call(func=Name(id='urldefrag', ctx=Load()), args=[Call(func=Name(id='urljoin', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_base_uri', ctx=Load()), Name(id='ref', ctx=Load())], keywords=[])], keywords=[]))]), Try(body=[Assign(targets=[Name(id='retrieved', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_registry', ctx=Load()), attr='get_or_retrieve', ctx=Load()), args=[Name(id='uri', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='exceptions', ctx=Load()), attr='NoSuchResource', ctx=Load()), body=[Raise(exc=Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='Unresolvable', ctx=Load()), args=[], keywords=[keyword(arg='ref', value=Name(id='ref', ctx=Load()))]), cause=Constant(value=None))]), ExceptHandler(type=Attribute(value=Name(id='exceptions', ctx=Load()), attr='Unretrievable', ctx=Load()), body=[Raise(exc=Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='Unresolvable', ctx=Load()), args=[], keywords=[keyword(arg='ref', value=Name(id='ref', ctx=Load()))]))])], orelse=[], finalbody=[]), If(test=Call(func=Attribute(value=Name(id='fragment', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='/')], keywords=[]), body=[Assign(targets=[Name(id='resolver', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_evolve', ctx=Load()), args=[], keywords=[keyword(arg='registry', value=Attribute(value=Name(id='retrieved', ctx=Load()), attr='registry', ctx=Load())), keyword(arg='base_uri', value=Name(id='uri', ctx=Load()))])), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='retrieved', ctx=Load()), attr='value', ctx=Load()), attr='pointer', ctx=Load()), args=[], keywords=[keyword(arg='pointer', value=Name(id='fragment', ctx=Load())), keyword(arg='resolver', value=Name(id='resolver', ctx=Load()))]))], orelse=[]), If(test=Name(id='fragment', ctx=Load()), body=[Assign(targets=[Name(id='retrieved', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='retrieved', ctx=Load()), attr='registry', ctx=Load()), attr='anchor', ctx=Load()), args=[Name(id='uri', ctx=Load()), Name(id='fragment', ctx=Load())], keywords=[])), Assign(targets=[Name(id='resolver', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_evolve', ctx=Load()), args=[], keywords=[keyword(arg='registry', value=Attribute(value=Name(id='retrieved', ctx=Load()), attr='registry', ctx=Load())), keyword(arg='base_uri', value=Name(id='uri', ctx=Load()))])), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='retrieved', ctx=Load()), attr='value', ctx=Load()), attr='resolve', ctx=Load()), args=[], keywords=[keyword(arg='resolver', value=Name(id='resolver', ctx=Load()))]))], orelse=[]), Assign(targets=[Name(id='resolver', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_evolve', ctx=Load()), args=[], keywords=[keyword(arg='registry', value=Attribute(value=Name(id='retrieved', ctx=Load()), attr='registry', ctx=Load())), keyword(arg='base_uri', value=Name(id='uri', ctx=Load()))])), Return(value=Call(func=Name(id='Resolved', ctx=Load()), args=[], keywords=[keyword(arg='contents', value=Attribute(value=Attribute(value=Name(id='retrieved', ctx=Load()), attr='value', ctx=Load()), attr='contents', ctx=Load())), keyword(arg='resolver', value=Name(id='resolver', ctx=Load()))]))], decorator_list=[], returns=Subscript(value=Name(id='Resolved', ctx=Load()), slice=Name(id='D', ctx=Load()), ctx=Load())), FunctionDef(name='in_subresource', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='subresource', annotation=Subscript(value=Name(id='Resource', ctx=Load()), slice=Name(id='D', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Create a resolver for a subresource (which may have a new base URI).\n        ')), Assign(targets=[Name(id='id', ctx=Store())], value=Call(func=Attribute(value=Name(id='subresource', ctx=Load()), attr='id', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Name(id='id', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Name(id='self', ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='evolve', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[keyword(arg='base_uri', value=Call(func=Name(id='urljoin', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_base_uri', ctx=Load()), Name(id='id', ctx=Load())], keywords=[]))]))], decorator_list=[], returns=Subscript(value=Name(id='Resolver', ctx=Load()), slice=Name(id='D', ctx=Load()), ctx=Load())), FunctionDef(name='dynamic_scope', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        In specs with such a notion, return the URIs in the dynamic scope.\n        ')), For(target=Name(id='uri', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='_previous', ctx=Load()), body=[Expr(value=Yield(value=Tuple(elts=[Name(id='uri', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='_registry', ctx=Load())], ctx=Load())))], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='URI', ctx=Load()), Subscript(value=Name(id='Registry', ctx=Load()), slice=Name(id='D', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='_evolve', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='base_uri', annotation=Name(id='URI', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs', annotation=Name(id='Any', ctx=Load())), defaults=[]), body=[Expr(value=Constant(value='\n        Evolve, appending to the dynamic scope.\n        ')), Assign(targets=[Name(id='previous', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_previous', ctx=Load())), If(test=BoolOp(op=And(), values=[Attribute(value=Name(id='self', ctx=Load()), attr='_base_uri', ctx=Load()), BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Name(id='previous', ctx=Load())), Compare(left=Name(id='base_uri', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_base_uri', ctx=Load())])])]), body=[Assign(targets=[Name(id='previous', ctx=Store())], value=Call(func=Attribute(value=Name(id='previous', ctx=Load()), attr='push_front', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_base_uri', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='evolve', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[keyword(arg='base_uri', value=Name(id='base_uri', ctx=Load())), keyword(arg='previous', value=Name(id='previous', ctx=Load())), keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[])], decorator_list=[Name(id='frozen', ctx=Load())]), ClassDef(name='Anchor', bases=[Subscript(value=Name(id='Generic', ctx=Load()), slice=Name(id='D', ctx=Load()), ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    A simple anchor in a `Resource`.\n    ')), AnnAssign(target=Name(id='name', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='resource', ctx=Store()), annotation=Subscript(value=Name(id='Resource', ctx=Load()), slice=Name(id='D', ctx=Load()), ctx=Load()), simple=1), FunctionDef(name='resolve', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='resolver', annotation=Subscript(value=Name(id='Resolver', ctx=Load()), slice=Name(id='D', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return the resource for this anchor.\n        ')), Return(value=Call(func=Name(id='Resolved', ctx=Load()), args=[], keywords=[keyword(arg='contents', value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='resource', ctx=Load()), attr='contents', ctx=Load())), keyword(arg='resolver', value=Name(id='resolver', ctx=Load()))]))], decorator_list=[])], decorator_list=[Name(id='frozen', ctx=Load())])], type_ignores=[])