Module(body=[ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), ImportFrom(module='typing', names=[alias(name='NoReturn'), alias(name='TypeVar')], level=0), ImportFrom(module='attrs', names=[alias(name='define', asname='_define'), alias(name='frozen', asname='_frozen')], level=0), Assign(targets=[Name(id='_T', ctx=Store())], value=Call(func=Name(id='TypeVar', ctx=Load()), args=[Constant(value='_T')], keywords=[])), FunctionDef(name='define', args=arguments(posonlyargs=[], args=[arg(arg='cls', annotation=Subscript(value=Name(id='type', ctx=Load()), slice=Name(id='_T', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='cls', ctx=Load()), attr='__init_subclass__', ctx=Store())], value=Name(id='_do_not_subclass', ctx=Load())), Return(value=Call(func=Name(id='_define', ctx=Load()), args=[Name(id='cls', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='type', ctx=Load()), slice=Name(id='_T', ctx=Load()), ctx=Load())), FunctionDef(name='frozen', args=arguments(posonlyargs=[], args=[arg(arg='cls', annotation=Subscript(value=Name(id='type', ctx=Load()), slice=Name(id='_T', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='cls', ctx=Load()), attr='__init_subclass__', ctx=Store())], value=Name(id='_do_not_subclass', ctx=Load())), Return(value=Call(func=Name(id='_frozen', ctx=Load()), args=[Name(id='cls', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='type', ctx=Load()), slice=Name(id='_T', ctx=Load()), ctx=Load())), ClassDef(name='UnsupportedSubclassing', bases=[Name(id='Exception', ctx=Load())], keywords=[], body=[Pass()], decorator_list=[]), FunctionDef(name='_do_not_subclass', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Call(func=Name(id='UnsupportedSubclassing', ctx=Load()), args=[Constant(value="Subclassing is not part of referencing's public API. If no other suitable API exists for what you're trying to do, feel free to file an issue asking for one.")], keywords=[]))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Name(id='NoReturn', ctx=Load()))], type_ignores=[])