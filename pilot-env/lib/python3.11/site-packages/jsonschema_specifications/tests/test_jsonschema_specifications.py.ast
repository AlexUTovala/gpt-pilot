Module(body=[ImportFrom(module='collections.abc', names=[alias(name='Mapping')], level=0), ImportFrom(module='pathlib', names=[alias(name='Path')], level=0), Import(names=[alias(name='pytest')]), ImportFrom(module='jsonschema_specifications', names=[alias(name='REGISTRY')], level=0), FunctionDef(name='test_it_contains_metaschemas', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='schema', ctx=Store())], value=Call(func=Attribute(value=Name(id='REGISTRY', ctx=Load()), attr='contents', ctx=Load()), args=[Constant(value='http://json-schema.org/draft-07/schema#')], keywords=[])), Assert(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='schema', ctx=Load()), Name(id='Mapping', ctx=Load())], keywords=[])), Assert(test=Compare(left=Subscript(value=Name(id='schema', ctx=Load()), slice=Constant(value='$id'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='http://json-schema.org/draft-07/schema#')])), Assert(test=Compare(left=Subscript(value=Name(id='schema', ctx=Load()), slice=Constant(value='title'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='Core schema meta-schema')]))], decorator_list=[]), FunctionDef(name='test_it_is_crawled', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assert(test=Compare(left=Call(func=Attribute(value=Name(id='REGISTRY', ctx=Load()), attr='crawl', ctx=Load()), args=[], keywords=[]), ops=[Eq()], comparators=[Name(id='REGISTRY', ctx=Load())]))], decorator_list=[]), FunctionDef(name='test_it_copes_with_dotfiles', args=arguments(posonlyargs=[], args=[arg(arg='ignored_relative_path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Ignore files like .DS_Store if someone has actually caused one to exist.\n\n    We test here through the private interface as of course the global has\n    already loaded our schemas.\n    ')), Import(names=[alias(name='jsonschema_specifications')]), Assign(targets=[Name(id='package', ctx=Store())], value=Attribute(value=Call(func=Name(id='Path', ctx=Load()), args=[Attribute(value=Name(id='jsonschema_specifications', ctx=Load()), attr='__file__', ctx=Load())], keywords=[]), attr='parent', ctx=Load())), Assign(targets=[Name(id='ignored', ctx=Store())], value=BinOp(left=Name(id='package', ctx=Load()), op=Div(), right=Name(id='ignored_relative_path', ctx=Load()))), Expr(value=Call(func=Attribute(value=Name(id='ignored', ctx=Load()), attr='touch', ctx=Load()), args=[], keywords=[])), Try(body=[Expr(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='jsonschema_specifications', ctx=Load()), attr='_schemas', ctx=Load()), args=[], keywords=[])], keywords=[]))], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='ignored', ctx=Load()), attr='unlink', ctx=Load()), args=[], keywords=[]))])], decorator_list=[Call(func=Attribute(value=Attribute(value=Name(id='pytest', ctx=Load()), attr='mark', ctx=Load()), attr='parametrize', ctx=Load()), args=[Constant(value='ignored_relative_path'), List(elts=[Constant(value='schemas/.DS_Store'), Constant(value='schemas/draft7/.DS_Store')], ctx=Load())], keywords=[])])], type_ignores=[])