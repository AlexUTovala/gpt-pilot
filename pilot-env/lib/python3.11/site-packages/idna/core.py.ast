Module(body=[ImportFrom(names=[alias(name='idnadata')], level=1), Import(names=[alias(name='bisect')]), Import(names=[alias(name='unicodedata')]), Import(names=[alias(name='re')]), ImportFrom(module='typing', names=[alias(name='Union'), alias(name='Optional')], level=0), ImportFrom(module='intranges', names=[alias(name='intranges_contain')], level=1), Assign(targets=[Name(id='_virama_combining_class', ctx=Store())], value=Constant(value=9)), Assign(targets=[Name(id='_alabel_prefix', ctx=Store())], value=Constant(value=b'xn--')), Assign(targets=[Name(id='_unicode_dots_re', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='[.。．｡]')], keywords=[])), ClassDef(name='IDNAError', bases=[Name(id='UnicodeError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value=' Base exception for all IDNA-encoding related problems ')), Pass()], decorator_list=[]), ClassDef(name='IDNABidiError', bases=[Name(id='IDNAError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value=' Exception when bidirectional requirements are not satisfied ')), Pass()], decorator_list=[]), ClassDef(name='InvalidCodepoint', bases=[Name(id='IDNAError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value=' Exception when a disallowed or unallocated codepoint is used ')), Pass()], decorator_list=[]), ClassDef(name='InvalidCodepointContext', bases=[Name(id='IDNAError', ctx=Load())], keywords=[], body=[Expr(value=Constant(value=' Exception when the codepoint is not valid in the context it is used ')), Pass()], decorator_list=[]), FunctionDef(name='_combining_class', args=arguments(posonlyargs=[], args=[arg(arg='cp', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='v', ctx=Store())], value=Call(func=Attribute(value=Name(id='unicodedata', ctx=Load()), attr='combining', ctx=Load()), args=[Call(func=Name(id='chr', ctx=Load()), args=[Name(id='cp', ctx=Load())], keywords=[])], keywords=[])), If(test=Compare(left=Name(id='v', ctx=Load()), ops=[Eq()], comparators=[Constant(value=0)]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='unicodedata', ctx=Load()), attr='name', ctx=Load()), args=[Call(func=Name(id='chr', ctx=Load()), args=[Name(id='cp', ctx=Load())], keywords=[])], keywords=[])), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Unknown character in unicodedata')], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='v', ctx=Load()))], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='_is_script', args=arguments(posonlyargs=[], args=[arg(arg='cp', annotation=Name(id='str', ctx=Load())), arg(arg='script', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='intranges_contain', ctx=Load()), args=[Call(func=Name(id='ord', ctx=Load()), args=[Name(id='cp', ctx=Load())], keywords=[]), Subscript(value=Attribute(value=Name(id='idnadata', ctx=Load()), attr='scripts', ctx=Load()), slice=Name(id='script', ctx=Load()), ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='_punycode', args=arguments(posonlyargs=[], args=[arg(arg='s', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='punycode')], keywords=[]))], decorator_list=[], returns=Name(id='bytes', ctx=Load())), FunctionDef(name='_unot', args=arguments(posonlyargs=[], args=[arg(arg='s', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value='U+{:04X}'), attr='format', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='valid_label_length', args=arguments(posonlyargs=[], args=[arg(arg='label', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='bytes', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='label', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=63)]), body=[Return(value=Constant(value=False))], orelse=[]), Return(value=Constant(value=True))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='valid_string_length', args=arguments(posonlyargs=[], args=[arg(arg='label', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='bytes', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='trailing_dot', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='label', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[IfExp(test=Name(id='trailing_dot', ctx=Load()), body=Constant(value=254), orelse=Constant(value=253))]), body=[Return(value=Constant(value=False))], orelse=[]), Return(value=Constant(value=True))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='check_bidi', args=arguments(posonlyargs=[], args=[arg(arg='label', annotation=Name(id='str', ctx=Load())), arg(arg='check_ltr', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Assign(targets=[Name(id='bidi_label', ctx=Store())], value=Constant(value=False)), For(target=Tuple(elts=[Name(id='idx', ctx=Store()), Name(id='cp', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='label', ctx=Load()), Constant(value=1)], keywords=[]), body=[Assign(targets=[Name(id='direction', ctx=Store())], value=Call(func=Attribute(value=Name(id='unicodedata', ctx=Load()), attr='bidirectional', ctx=Load()), args=[Name(id='cp', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='direction', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Raise(exc=Call(func=Name(id='IDNABidiError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Unknown directionality in label {} at position {}'), attr='format', ctx=Load()), args=[Call(func=Name(id='repr', ctx=Load()), args=[Name(id='label', ctx=Load())], keywords=[]), Name(id='idx', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='direction', ctx=Load()), ops=[In()], comparators=[List(elts=[Constant(value='R'), Constant(value='AL'), Constant(value='AN')], ctx=Load())]), body=[Assign(targets=[Name(id='bidi_label', ctx=Store())], value=Constant(value=True))], orelse=[])], orelse=[]), If(test=BoolOp(op=And(), values=[UnaryOp(op=Not(), operand=Name(id='bidi_label', ctx=Load())), UnaryOp(op=Not(), operand=Name(id='check_ltr', ctx=Load()))]), body=[Return(value=Constant(value=True))], orelse=[]), Assign(targets=[Name(id='direction', ctx=Store())], value=Call(func=Attribute(value=Name(id='unicodedata', ctx=Load()), attr='bidirectional', ctx=Load()), args=[Subscript(value=Name(id='label', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='direction', ctx=Load()), ops=[In()], comparators=[List(elts=[Constant(value='R'), Constant(value='AL')], ctx=Load())]), body=[Assign(targets=[Name(id='rtl', ctx=Store())], value=Constant(value=True))], orelse=[If(test=Compare(left=Name(id='direction', ctx=Load()), ops=[Eq()], comparators=[Constant(value='L')]), body=[Assign(targets=[Name(id='rtl', ctx=Store())], value=Constant(value=False))], orelse=[Raise(exc=Call(func=Name(id='IDNABidiError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='First codepoint in label {} must be directionality L, R or AL'), attr='format', ctx=Load()), args=[Call(func=Name(id='repr', ctx=Load()), args=[Name(id='label', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))])]), Assign(targets=[Name(id='valid_ending', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='number_type', ctx=Store())], value=Constant(value=None)), For(target=Tuple(elts=[Name(id='idx', ctx=Store()), Name(id='cp', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='label', ctx=Load()), Constant(value=1)], keywords=[]), body=[Assign(targets=[Name(id='direction', ctx=Store())], value=Call(func=Attribute(value=Name(id='unicodedata', ctx=Load()), attr='bidirectional', ctx=Load()), args=[Name(id='cp', ctx=Load())], keywords=[])), If(test=Name(id='rtl', ctx=Load()), body=[If(test=UnaryOp(op=Not(), operand=Compare(left=Name(id='direction', ctx=Load()), ops=[In()], comparators=[List(elts=[Constant(value='R'), Constant(value='AL'), Constant(value='AN'), Constant(value='EN'), Constant(value='ES'), Constant(value='CS'), Constant(value='ET'), Constant(value='ON'), Constant(value='BN'), Constant(value='NSM')], ctx=Load())])), body=[Raise(exc=Call(func=Name(id='IDNABidiError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Invalid direction for codepoint at position {} in a right-to-left label'), attr='format', ctx=Load()), args=[Name(id='idx', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='direction', ctx=Load()), ops=[In()], comparators=[List(elts=[Constant(value='R'), Constant(value='AL'), Constant(value='EN'), Constant(value='AN')], ctx=Load())]), body=[Assign(targets=[Name(id='valid_ending', ctx=Store())], value=Constant(value=True))], orelse=[If(test=Compare(left=Name(id='direction', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='NSM')]), body=[Assign(targets=[Name(id='valid_ending', ctx=Store())], value=Constant(value=False))], orelse=[])]), If(test=Compare(left=Name(id='direction', ctx=Load()), ops=[In()], comparators=[List(elts=[Constant(value='AN'), Constant(value='EN')], ctx=Load())]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='number_type', ctx=Load())), body=[Assign(targets=[Name(id='number_type', ctx=Store())], value=Name(id='direction', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='number_type', ctx=Load()), ops=[NotEq()], comparators=[Name(id='direction', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='IDNABidiError', ctx=Load()), args=[Constant(value='Can not mix numeral types in a right-to-left label')], keywords=[]))], orelse=[])])], orelse=[])], orelse=[If(test=UnaryOp(op=Not(), operand=Compare(left=Name(id='direction', ctx=Load()), ops=[In()], comparators=[List(elts=[Constant(value='L'), Constant(value='EN'), Constant(value='ES'), Constant(value='CS'), Constant(value='ET'), Constant(value='ON'), Constant(value='BN'), Constant(value='NSM')], ctx=Load())])), body=[Raise(exc=Call(func=Name(id='IDNABidiError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Invalid direction for codepoint at position {} in a left-to-right label'), attr='format', ctx=Load()), args=[Name(id='idx', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='direction', ctx=Load()), ops=[In()], comparators=[List(elts=[Constant(value='L'), Constant(value='EN')], ctx=Load())]), body=[Assign(targets=[Name(id='valid_ending', ctx=Store())], value=Constant(value=True))], orelse=[If(test=Compare(left=Name(id='direction', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='NSM')]), body=[Assign(targets=[Name(id='valid_ending', ctx=Store())], value=Constant(value=False))], orelse=[])])])], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='valid_ending', ctx=Load())), body=[Raise(exc=Call(func=Name(id='IDNABidiError', ctx=Load()), args=[Constant(value='Label ends with illegal codepoint directionality')], keywords=[]))], orelse=[]), Return(value=Constant(value=True))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='check_initial_combiner', args=arguments(posonlyargs=[], args=[arg(arg='label', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Subscript(value=Call(func=Attribute(value=Name(id='unicodedata', ctx=Load()), attr='category', ctx=Load()), args=[Subscript(value=Name(id='label', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Constant(value='M')]), body=[Raise(exc=Call(func=Name(id='IDNAError', ctx=Load()), args=[Constant(value='Label begins with an illegal combining character')], keywords=[]))], orelse=[]), Return(value=Constant(value=True))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='check_hyphen_ok', args=arguments(posonlyargs=[], args=[arg(arg='label', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Subscript(value=Name(id='label', ctx=Load()), slice=Slice(lower=Constant(value=2), upper=Constant(value=4)), ctx=Load()), ops=[Eq()], comparators=[Constant(value='--')]), body=[Raise(exc=Call(func=Name(id='IDNAError', ctx=Load()), args=[Constant(value='Label has disallowed hyphens in 3rd and 4th position')], keywords=[]))], orelse=[]), If(test=BoolOp(op=Or(), values=[Compare(left=Subscript(value=Name(id='label', ctx=Load()), slice=Constant(value=0), ctx=Load()), ops=[Eq()], comparators=[Constant(value='-')]), Compare(left=Subscript(value=Name(id='label', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), ops=[Eq()], comparators=[Constant(value='-')])]), body=[Raise(exc=Call(func=Name(id='IDNAError', ctx=Load()), args=[Constant(value='Label must not start or end with a hyphen')], keywords=[]))], orelse=[]), Return(value=Constant(value=True))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='check_nfc', args=arguments(posonlyargs=[], args=[arg(arg='label', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Call(func=Attribute(value=Name(id='unicodedata', ctx=Load()), attr='normalize', ctx=Load()), args=[Constant(value='NFC'), Name(id='label', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Name(id='label', ctx=Load())]), body=[Raise(exc=Call(func=Name(id='IDNAError', ctx=Load()), args=[Constant(value='Label must be in Normalization Form C')], keywords=[]))], orelse=[])], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='valid_contextj', args=arguments(posonlyargs=[], args=[arg(arg='label', annotation=Name(id='str', ctx=Load())), arg(arg='pos', annotation=Name(id='int', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='cp_value', ctx=Store())], value=Call(func=Name(id='ord', ctx=Load()), args=[Subscript(value=Name(id='label', ctx=Load()), slice=Name(id='pos', ctx=Load()), ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='cp_value', ctx=Load()), ops=[Eq()], comparators=[Constant(value=8204)]), body=[If(test=Compare(left=Name(id='pos', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[If(test=Compare(left=Call(func=Name(id='_combining_class', ctx=Load()), args=[Call(func=Name(id='ord', ctx=Load()), args=[Subscript(value=Name(id='label', ctx=Load()), slice=BinOp(left=Name(id='pos', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())], keywords=[])], keywords=[]), ops=[Eq()], comparators=[Name(id='_virama_combining_class', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[])], orelse=[]), Assign(targets=[Name(id='ok', ctx=Store())], value=Constant(value=False)), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[BinOp(left=Name(id='pos', ctx=Load()), op=Sub(), right=Constant(value=1)), UnaryOp(op=USub(), operand=Constant(value=1)), UnaryOp(op=USub(), operand=Constant(value=1))], keywords=[]), body=[Assign(targets=[Name(id='joining_type', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='idnadata', ctx=Load()), attr='joining_types', ctx=Load()), attr='get', ctx=Load()), args=[Call(func=Name(id='ord', ctx=Load()), args=[Subscript(value=Name(id='label', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())], keywords=[])], keywords=[])), If(test=Compare(left=Name(id='joining_type', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='ord', ctx=Load()), args=[Constant(value='T')], keywords=[])]), body=[Continue()], orelse=[]), If(test=Compare(left=Name(id='joining_type', ctx=Load()), ops=[In()], comparators=[List(elts=[Call(func=Name(id='ord', ctx=Load()), args=[Constant(value='L')], keywords=[]), Call(func=Name(id='ord', ctx=Load()), args=[Constant(value='D')], keywords=[])], ctx=Load())]), body=[Assign(targets=[Name(id='ok', ctx=Store())], value=Constant(value=True)), Break()], orelse=[])], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='ok', ctx=Load())), body=[Return(value=Constant(value=False))], orelse=[]), Assign(targets=[Name(id='ok', ctx=Store())], value=Constant(value=False)), For(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[BinOp(left=Name(id='pos', ctx=Load()), op=Add(), right=Constant(value=1)), Call(func=Name(id='len', ctx=Load()), args=[Name(id='label', ctx=Load())], keywords=[])], keywords=[]), body=[Assign(targets=[Name(id='joining_type', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='idnadata', ctx=Load()), attr='joining_types', ctx=Load()), attr='get', ctx=Load()), args=[Call(func=Name(id='ord', ctx=Load()), args=[Subscript(value=Name(id='label', ctx=Load()), slice=Name(id='i', ctx=Load()), ctx=Load())], keywords=[])], keywords=[])), If(test=Compare(left=Name(id='joining_type', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='ord', ctx=Load()), args=[Constant(value='T')], keywords=[])]), body=[Continue()], orelse=[]), If(test=Compare(left=Name(id='joining_type', ctx=Load()), ops=[In()], comparators=[List(elts=[Call(func=Name(id='ord', ctx=Load()), args=[Constant(value='R')], keywords=[]), Call(func=Name(id='ord', ctx=Load()), args=[Constant(value='D')], keywords=[])], ctx=Load())]), body=[Assign(targets=[Name(id='ok', ctx=Store())], value=Constant(value=True)), Break()], orelse=[])], orelse=[]), Return(value=Name(id='ok', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='cp_value', ctx=Load()), ops=[Eq()], comparators=[Constant(value=8205)]), body=[If(test=Compare(left=Name(id='pos', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[If(test=Compare(left=Call(func=Name(id='_combining_class', ctx=Load()), args=[Call(func=Name(id='ord', ctx=Load()), args=[Subscript(value=Name(id='label', ctx=Load()), slice=BinOp(left=Name(id='pos', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())], keywords=[])], keywords=[]), ops=[Eq()], comparators=[Name(id='_virama_combining_class', ctx=Load())]), body=[Return(value=Constant(value=True))], orelse=[])], orelse=[]), Return(value=Constant(value=False))], orelse=[Return(value=Constant(value=False))])], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='valid_contexto', args=arguments(posonlyargs=[], args=[arg(arg='label', annotation=Name(id='str', ctx=Load())), arg(arg='pos', annotation=Name(id='int', ctx=Load())), arg(arg='exception', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False)]), body=[Assign(targets=[Name(id='cp_value', ctx=Store())], value=Call(func=Name(id='ord', ctx=Load()), args=[Subscript(value=Name(id='label', ctx=Load()), slice=Name(id='pos', ctx=Load()), ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='cp_value', ctx=Load()), ops=[Eq()], comparators=[Constant(value=183)]), body=[If(test=Compare(left=Constant(value=0), ops=[Lt(), Lt()], comparators=[Name(id='pos', ctx=Load()), BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='label', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='ord', ctx=Load()), args=[Subscript(value=Name(id='label', ctx=Load()), slice=BinOp(left=Name(id='pos', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=108)]), Compare(left=Call(func=Name(id='ord', ctx=Load()), args=[Subscript(value=Name(id='label', ctx=Load()), slice=BinOp(left=Name(id='pos', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=108)])]), body=[Return(value=Constant(value=True))], orelse=[])], orelse=[]), Return(value=Constant(value=False))], orelse=[If(test=Compare(left=Name(id='cp_value', ctx=Load()), ops=[Eq()], comparators=[Constant(value=885)]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='pos', ctx=Load()), ops=[Lt()], comparators=[BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='label', ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))]), Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='label', ctx=Load())], keywords=[]), ops=[Gt()], comparators=[Constant(value=1)])]), body=[Return(value=Call(func=Name(id='_is_script', ctx=Load()), args=[Subscript(value=Name(id='label', ctx=Load()), slice=BinOp(left=Name(id='pos', ctx=Load()), op=Add(), right=Constant(value=1)), ctx=Load()), Constant(value='Greek')], keywords=[]))], orelse=[]), Return(value=Constant(value=False))], orelse=[If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='cp_value', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1523)]), Compare(left=Name(id='cp_value', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1524)])]), body=[If(test=Compare(left=Name(id='pos', ctx=Load()), ops=[Gt()], comparators=[Constant(value=0)]), body=[Return(value=Call(func=Name(id='_is_script', ctx=Load()), args=[Subscript(value=Name(id='label', ctx=Load()), slice=BinOp(left=Name(id='pos', ctx=Load()), op=Sub(), right=Constant(value=1)), ctx=Load()), Constant(value='Hebrew')], keywords=[]))], orelse=[]), Return(value=Constant(value=False))], orelse=[If(test=Compare(left=Name(id='cp_value', ctx=Load()), ops=[Eq()], comparators=[Constant(value=12539)]), body=[For(target=Name(id='cp', ctx=Store()), iter=Name(id='label', ctx=Load()), body=[If(test=Compare(left=Name(id='cp', ctx=Load()), ops=[Eq()], comparators=[Constant(value='・')]), body=[Continue()], orelse=[]), If(test=BoolOp(op=Or(), values=[Call(func=Name(id='_is_script', ctx=Load()), args=[Name(id='cp', ctx=Load()), Constant(value='Hiragana')], keywords=[]), Call(func=Name(id='_is_script', ctx=Load()), args=[Name(id='cp', ctx=Load()), Constant(value='Katakana')], keywords=[]), Call(func=Name(id='_is_script', ctx=Load()), args=[Name(id='cp', ctx=Load()), Constant(value='Han')], keywords=[])]), body=[Return(value=Constant(value=True))], orelse=[])], orelse=[]), Return(value=Constant(value=False))], orelse=[If(test=Compare(left=Constant(value=1632), ops=[LtE(), LtE()], comparators=[Name(id='cp_value', ctx=Load()), Constant(value=1641)]), body=[For(target=Name(id='cp', ctx=Store()), iter=Name(id='label', ctx=Load()), body=[If(test=Compare(left=Constant(value=1776), ops=[LtE(), LtE()], comparators=[Call(func=Name(id='ord', ctx=Load()), args=[Name(id='cp', ctx=Load())], keywords=[]), Constant(value=1785)]), body=[Return(value=Constant(value=False))], orelse=[])], orelse=[]), Return(value=Constant(value=True))], orelse=[If(test=Compare(left=Constant(value=1776), ops=[LtE(), LtE()], comparators=[Name(id='cp_value', ctx=Load()), Constant(value=1785)]), body=[For(target=Name(id='cp', ctx=Store()), iter=Name(id='label', ctx=Load()), body=[If(test=Compare(left=Constant(value=1632), ops=[LtE(), LtE()], comparators=[Call(func=Name(id='ord', ctx=Load()), args=[Name(id='cp', ctx=Load())], keywords=[]), Constant(value=1641)]), body=[Return(value=Constant(value=False))], orelse=[])], orelse=[]), Return(value=Constant(value=True))], orelse=[])])])])])]), Return(value=Constant(value=False))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='check_label', args=arguments(posonlyargs=[], args=[arg(arg='label', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='bytes', ctx=Load()), Name(id='bytearray', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='label', ctx=Load()), Tuple(elts=[Name(id='bytes', ctx=Load()), Name(id='bytearray', ctx=Load())], ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='label', ctx=Store())], value=Call(func=Attribute(value=Name(id='label', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[]))], orelse=[]), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='label', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=0)]), body=[Raise(exc=Call(func=Name(id='IDNAError', ctx=Load()), args=[Constant(value='Empty Label')], keywords=[]))], orelse=[]), Expr(value=Call(func=Name(id='check_nfc', ctx=Load()), args=[Name(id='label', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='check_hyphen_ok', ctx=Load()), args=[Name(id='label', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='check_initial_combiner', ctx=Load()), args=[Name(id='label', ctx=Load())], keywords=[])), For(target=Tuple(elts=[Name(id='pos', ctx=Store()), Name(id='cp', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='label', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='cp_value', ctx=Store())], value=Call(func=Name(id='ord', ctx=Load()), args=[Name(id='cp', ctx=Load())], keywords=[])), If(test=Call(func=Name(id='intranges_contain', ctx=Load()), args=[Name(id='cp_value', ctx=Load()), Subscript(value=Attribute(value=Name(id='idnadata', ctx=Load()), attr='codepoint_classes', ctx=Load()), slice=Constant(value='PVALID'), ctx=Load())], keywords=[]), body=[Continue()], orelse=[If(test=Call(func=Name(id='intranges_contain', ctx=Load()), args=[Name(id='cp_value', ctx=Load()), Subscript(value=Attribute(value=Name(id='idnadata', ctx=Load()), attr='codepoint_classes', ctx=Load()), slice=Constant(value='CONTEXTJ'), ctx=Load())], keywords=[]), body=[Try(body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='valid_contextj', ctx=Load()), args=[Name(id='label', ctx=Load()), Name(id='pos', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='InvalidCodepointContext', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Joiner {} not allowed at position {} in {}'), attr='format', ctx=Load()), args=[Call(func=Name(id='_unot', ctx=Load()), args=[Name(id='cp_value', ctx=Load())], keywords=[]), BinOp(left=Name(id='pos', ctx=Load()), op=Add(), right=Constant(value=1)), Call(func=Name(id='repr', ctx=Load()), args=[Name(id='label', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], orelse=[])], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='IDNAError', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Unknown codepoint adjacent to joiner {} at position {} in {}'), attr='format', ctx=Load()), args=[Call(func=Name(id='_unot', ctx=Load()), args=[Name(id='cp_value', ctx=Load())], keywords=[]), BinOp(left=Name(id='pos', ctx=Load()), op=Add(), right=Constant(value=1)), Call(func=Name(id='repr', ctx=Load()), args=[Name(id='label', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))])], orelse=[], finalbody=[])], orelse=[If(test=Call(func=Name(id='intranges_contain', ctx=Load()), args=[Name(id='cp_value', ctx=Load()), Subscript(value=Attribute(value=Name(id='idnadata', ctx=Load()), attr='codepoint_classes', ctx=Load()), slice=Constant(value='CONTEXTO'), ctx=Load())], keywords=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='valid_contexto', ctx=Load()), args=[Name(id='label', ctx=Load()), Name(id='pos', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='InvalidCodepointContext', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Codepoint {} not allowed at position {} in {}'), attr='format', ctx=Load()), args=[Call(func=Name(id='_unot', ctx=Load()), args=[Name(id='cp_value', ctx=Load())], keywords=[]), BinOp(left=Name(id='pos', ctx=Load()), op=Add(), right=Constant(value=1)), Call(func=Name(id='repr', ctx=Load()), args=[Name(id='label', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], orelse=[])], orelse=[Raise(exc=Call(func=Name(id='InvalidCodepoint', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Codepoint {} at position {} of {} not allowed'), attr='format', ctx=Load()), args=[Call(func=Name(id='_unot', ctx=Load()), args=[Name(id='cp_value', ctx=Load())], keywords=[]), BinOp(left=Name(id='pos', ctx=Load()), op=Add(), right=Constant(value=1)), Call(func=Name(id='repr', ctx=Load()), args=[Name(id='label', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))])])])], orelse=[]), Expr(value=Call(func=Name(id='check_bidi', ctx=Load()), args=[Name(id='label', ctx=Load())], keywords=[]))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='alabel', args=arguments(posonlyargs=[], args=[arg(arg='label', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Name(id='label_bytes', ctx=Store())], value=Call(func=Attribute(value=Name(id='label', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[])), Expr(value=Call(func=Name(id='ulabel', ctx=Load()), args=[Name(id='label_bytes', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='valid_label_length', ctx=Load()), args=[Name(id='label_bytes', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='IDNAError', ctx=Load()), args=[Constant(value='Label too long')], keywords=[]))], orelse=[]), Return(value=Name(id='label_bytes', ctx=Load()))], handlers=[ExceptHandler(type=Name(id='UnicodeEncodeError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[]), If(test=UnaryOp(op=Not(), operand=Name(id='label', ctx=Load())), body=[Raise(exc=Call(func=Name(id='IDNAError', ctx=Load()), args=[Constant(value='No Input')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='label', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='label', ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='check_label', ctx=Load()), args=[Name(id='label', ctx=Load())], keywords=[])), Assign(targets=[Name(id='label_bytes', ctx=Store())], value=Call(func=Name(id='_punycode', ctx=Load()), args=[Name(id='label', ctx=Load())], keywords=[])), Assign(targets=[Name(id='label_bytes', ctx=Store())], value=BinOp(left=Name(id='_alabel_prefix', ctx=Load()), op=Add(), right=Name(id='label_bytes', ctx=Load()))), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='valid_label_length', ctx=Load()), args=[Name(id='label_bytes', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='IDNAError', ctx=Load()), args=[Constant(value='Label too long')], keywords=[]))], orelse=[]), Return(value=Name(id='label_bytes', ctx=Load()))], decorator_list=[], returns=Name(id='bytes', ctx=Load())), FunctionDef(name='ulabel', args=arguments(posonlyargs=[], args=[arg(arg='label', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='bytes', ctx=Load()), Name(id='bytearray', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='label', ctx=Load()), Tuple(elts=[Name(id='bytes', ctx=Load()), Name(id='bytearray', ctx=Load())], ctx=Load())], keywords=[])), body=[Try(body=[Assign(targets=[Name(id='label_bytes', ctx=Store())], value=Call(func=Attribute(value=Name(id='label', ctx=Load()), attr='encode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]))], handlers=[ExceptHandler(type=Name(id='UnicodeEncodeError', ctx=Load()), body=[Expr(value=Call(func=Name(id='check_label', ctx=Load()), args=[Name(id='label', ctx=Load())], keywords=[])), Return(value=Name(id='label', ctx=Load()))])], orelse=[], finalbody=[])], orelse=[Assign(targets=[Name(id='label_bytes', ctx=Store())], value=Name(id='label', ctx=Load()))]), Assign(targets=[Name(id='label_bytes', ctx=Store())], value=Call(func=Attribute(value=Name(id='label_bytes', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[])), If(test=Call(func=Attribute(value=Name(id='label_bytes', ctx=Load()), attr='startswith', ctx=Load()), args=[Name(id='_alabel_prefix', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='label_bytes', ctx=Store())], value=Subscript(value=Name(id='label_bytes', ctx=Load()), slice=Slice(lower=Call(func=Name(id='len', ctx=Load()), args=[Name(id='_alabel_prefix', ctx=Load())], keywords=[])), ctx=Load())), If(test=UnaryOp(op=Not(), operand=Name(id='label_bytes', ctx=Load())), body=[Raise(exc=Call(func=Name(id='IDNAError', ctx=Load()), args=[Constant(value='Malformed A-label, no Punycode eligible content found')], keywords=[]))], orelse=[]), If(test=Compare(left=Subscript(value=Call(func=Attribute(value=Name(id='label_bytes', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), ops=[Eq()], comparators=[Constant(value='-')]), body=[Raise(exc=Call(func=Name(id='IDNAError', ctx=Load()), args=[Constant(value='A-label must not end with a hyphen')], keywords=[]))], orelse=[])], orelse=[Expr(value=Call(func=Name(id='check_label', ctx=Load()), args=[Name(id='label_bytes', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='label_bytes', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]))]), Try(body=[Assign(targets=[Name(id='label', ctx=Store())], value=Call(func=Attribute(value=Name(id='label_bytes', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='punycode')], keywords=[]))], handlers=[ExceptHandler(type=Name(id='UnicodeError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='IDNAError', ctx=Load()), args=[Constant(value='Invalid A-label')], keywords=[]))])], orelse=[], finalbody=[]), Expr(value=Call(func=Name(id='check_label', ctx=Load()), args=[Name(id='label', ctx=Load())], keywords=[])), Return(value=Name(id='label', ctx=Load()))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='uts46_remap', args=arguments(posonlyargs=[], args=[arg(arg='domain', annotation=Name(id='str', ctx=Load())), arg(arg='std3_rules', annotation=Name(id='bool', ctx=Load())), arg(arg='transitional', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=False)]), body=[Expr(value=Constant(value='Re-map the characters in the string according to UTS46 processing.')), ImportFrom(module='uts46data', names=[alias(name='uts46data')], level=1), Assign(targets=[Name(id='output', ctx=Store())], value=Constant(value='')), For(target=Tuple(elts=[Name(id='pos', ctx=Store()), Name(id='char', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='domain', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='code_point', ctx=Store())], value=Call(func=Name(id='ord', ctx=Load()), args=[Name(id='char', ctx=Load())], keywords=[])), Try(body=[Assign(targets=[Name(id='uts46row', ctx=Store())], value=Subscript(value=Name(id='uts46data', ctx=Load()), slice=IfExp(test=Compare(left=Name(id='code_point', ctx=Load()), ops=[Lt()], comparators=[Constant(value=256)]), body=Name(id='code_point', ctx=Load()), orelse=BinOp(left=Call(func=Attribute(value=Name(id='bisect', ctx=Load()), attr='bisect_left', ctx=Load()), args=[Name(id='uts46data', ctx=Load()), Tuple(elts=[Name(id='code_point', ctx=Load()), Constant(value='Z')], ctx=Load())], keywords=[]), op=Sub(), right=Constant(value=1))), ctx=Load())), Assign(targets=[Name(id='status', ctx=Store())], value=Subscript(value=Name(id='uts46row', ctx=Load()), slice=Constant(value=1), ctx=Load())), Assign(targets=[Name(id='replacement', ctx=Store())], value=Constant(value=None)), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='uts46row', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=3)]), body=[Assign(targets=[Name(id='replacement', ctx=Store())], value=Subscript(value=Name(id='uts46row', ctx=Load()), slice=Constant(value=2), ctx=Load()))], orelse=[]), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='status', ctx=Load()), ops=[Eq()], comparators=[Constant(value='V')]), BoolOp(op=And(), values=[Compare(left=Name(id='status', ctx=Load()), ops=[Eq()], comparators=[Constant(value='D')]), UnaryOp(op=Not(), operand=Name(id='transitional', ctx=Load()))]), BoolOp(op=And(), values=[Compare(left=Name(id='status', ctx=Load()), ops=[Eq()], comparators=[Constant(value='3')]), UnaryOp(op=Not(), operand=Name(id='std3_rules', ctx=Load())), Compare(left=Name(id='replacement', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])])]), body=[AugAssign(target=Name(id='output', ctx=Store()), op=Add(), value=Name(id='char', ctx=Load()))], orelse=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='replacement', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), BoolOp(op=Or(), values=[Compare(left=Name(id='status', ctx=Load()), ops=[Eq()], comparators=[Constant(value='M')]), BoolOp(op=And(), values=[Compare(left=Name(id='status', ctx=Load()), ops=[Eq()], comparators=[Constant(value='3')]), UnaryOp(op=Not(), operand=Name(id='std3_rules', ctx=Load()))]), BoolOp(op=And(), values=[Compare(left=Name(id='status', ctx=Load()), ops=[Eq()], comparators=[Constant(value='D')]), Name(id='transitional', ctx=Load())])])]), body=[AugAssign(target=Name(id='output', ctx=Store()), op=Add(), value=Name(id='replacement', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='status', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='I')]), body=[Raise(exc=Call(func=Name(id='IndexError', ctx=Load()), args=[], keywords=[]))], orelse=[])])])], handlers=[ExceptHandler(type=Name(id='IndexError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='InvalidCodepoint', ctx=Load()), args=[Call(func=Attribute(value=Constant(value='Codepoint {} not allowed at position {} in {}'), attr='format', ctx=Load()), args=[Call(func=Name(id='_unot', ctx=Load()), args=[Name(id='code_point', ctx=Load())], keywords=[]), BinOp(left=Name(id='pos', ctx=Load()), op=Add(), right=Constant(value=1)), Call(func=Name(id='repr', ctx=Load()), args=[Name(id='domain', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))])], orelse=[], finalbody=[])], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='unicodedata', ctx=Load()), attr='normalize', ctx=Load()), args=[Constant(value='NFC'), Name(id='output', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load())), FunctionDef(name='encode', args=arguments(posonlyargs=[], args=[arg(arg='s', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='bytes', ctx=Load()), Name(id='bytearray', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='strict', annotation=Name(id='bool', ctx=Load())), arg(arg='uts46', annotation=Name(id='bool', ctx=Load())), arg(arg='std3_rules', annotation=Name(id='bool', ctx=Load())), arg(arg='transitional', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Constant(value=False), Constant(value=False), Constant(value=False)]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='s', ctx=Load()), Tuple(elts=[Name(id='bytes', ctx=Load()), Name(id='bytearray', ctx=Load())], ctx=Load())], keywords=[]), body=[Try(body=[Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]))], handlers=[ExceptHandler(type=Name(id='UnicodeDecodeError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='IDNAError', ctx=Load()), args=[Constant(value='should pass a unicode string to the function rather than a byte string.')], keywords=[]))])], orelse=[], finalbody=[])], orelse=[]), If(test=Name(id='uts46', ctx=Load()), body=[Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Name(id='uts46_remap', ctx=Load()), args=[Name(id='s', ctx=Load()), Name(id='std3_rules', ctx=Load()), Name(id='transitional', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='trailing_dot', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='result', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=Name(id='strict', ctx=Load()), body=[Assign(targets=[Name(id='labels', ctx=Store())], value=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[]))], orelse=[Assign(targets=[Name(id='labels', ctx=Store())], value=Call(func=Attribute(value=Name(id='_unicode_dots_re', ctx=Load()), attr='split', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]))]), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Name(id='labels', ctx=Load())), Compare(left=Name(id='labels', ctx=Load()), ops=[Eq()], comparators=[List(elts=[Constant(value='')], ctx=Load())])]), body=[Raise(exc=Call(func=Name(id='IDNAError', ctx=Load()), args=[Constant(value='Empty domain')], keywords=[]))], orelse=[]), If(test=Compare(left=Subscript(value=Name(id='labels', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Delete(targets=[Subscript(value=Name(id='labels', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Del())]), Assign(targets=[Name(id='trailing_dot', ctx=Store())], value=Constant(value=True))], orelse=[]), For(target=Name(id='label', ctx=Store()), iter=Name(id='labels', ctx=Load()), body=[Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Name(id='alabel', ctx=Load()), args=[Name(id='label', ctx=Load())], keywords=[])), If(test=Name(id='s', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]))], orelse=[Raise(exc=Call(func=Name(id='IDNAError', ctx=Load()), args=[Constant(value='Empty label')], keywords=[]))])], orelse=[]), If(test=Name(id='trailing_dot', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value=b'')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Attribute(value=Constant(value=b'.'), attr='join', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='valid_string_length', ctx=Load()), args=[Name(id='s', ctx=Load()), Name(id='trailing_dot', ctx=Load())], keywords=[])), body=[Raise(exc=Call(func=Name(id='IDNAError', ctx=Load()), args=[Constant(value='Domain too long')], keywords=[]))], orelse=[]), Return(value=Name(id='s', ctx=Load()))], decorator_list=[], returns=Name(id='bytes', ctx=Load())), FunctionDef(name='decode', args=arguments(posonlyargs=[], args=[arg(arg='s', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='bytes', ctx=Load()), Name(id='bytearray', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='strict', annotation=Name(id='bool', ctx=Load())), arg(arg='uts46', annotation=Name(id='bool', ctx=Load())), arg(arg='std3_rules', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=False), Constant(value=False), Constant(value=False)]), body=[Try(body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='s', ctx=Load()), Tuple(elts=[Name(id='bytes', ctx=Load()), Name(id='bytearray', ctx=Load())], ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='ascii')], keywords=[]))], orelse=[])], handlers=[ExceptHandler(type=Name(id='UnicodeDecodeError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='IDNAError', ctx=Load()), args=[Constant(value='Invalid ASCII in A-label')], keywords=[]))])], orelse=[], finalbody=[]), If(test=Name(id='uts46', ctx=Load()), body=[Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Name(id='uts46_remap', ctx=Load()), args=[Name(id='s', ctx=Load()), Name(id='std3_rules', ctx=Load()), Constant(value=False)], keywords=[]))], orelse=[]), Assign(targets=[Name(id='trailing_dot', ctx=Store())], value=Constant(value=False)), Assign(targets=[Name(id='result', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=UnaryOp(op=Not(), operand=Name(id='strict', ctx=Load())), body=[Assign(targets=[Name(id='labels', ctx=Store())], value=Call(func=Attribute(value=Name(id='_unicode_dots_re', ctx=Load()), attr='split', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]))], orelse=[Assign(targets=[Name(id='labels', ctx=Store())], value=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='split', ctx=Load()), args=[Constant(value='.')], keywords=[]))]), If(test=BoolOp(op=Or(), values=[UnaryOp(op=Not(), operand=Name(id='labels', ctx=Load())), Compare(left=Name(id='labels', ctx=Load()), ops=[Eq()], comparators=[List(elts=[Constant(value='')], ctx=Load())])]), body=[Raise(exc=Call(func=Name(id='IDNAError', ctx=Load()), args=[Constant(value='Empty domain')], keywords=[]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Subscript(value=Name(id='labels', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load())), body=[Delete(targets=[Subscript(value=Name(id='labels', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Del())]), Assign(targets=[Name(id='trailing_dot', ctx=Store())], value=Constant(value=True))], orelse=[]), For(target=Name(id='label', ctx=Store()), iter=Name(id='labels', ctx=Load()), body=[Assign(targets=[Name(id='s', ctx=Store())], value=Call(func=Name(id='ulabel', ctx=Load()), args=[Name(id='label', ctx=Load())], keywords=[])), If(test=Name(id='s', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='s', ctx=Load())], keywords=[]))], orelse=[Raise(exc=Call(func=Name(id='IDNAError', ctx=Load()), args=[Constant(value='Empty label')], keywords=[]))])], orelse=[]), If(test=Name(id='trailing_dot', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load()), args=[Constant(value='')], keywords=[]))], orelse=[]), Return(value=Call(func=Attribute(value=Constant(value='.'), attr='join', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='str', ctx=Load()))], type_ignores=[])