Module(body=[Expr(value=Constant(value='\nValidation errors, and some surrounding helpers.\n')), ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), ImportFrom(module='collections', names=[alias(name='defaultdict'), alias(name='deque')], level=0), ImportFrom(module='pprint', names=[alias(name='pformat')], level=0), ImportFrom(module='textwrap', names=[alias(name='dedent'), alias(name='indent')], level=0), ImportFrom(module='typing', names=[alias(name='ClassVar')], level=0), Import(names=[alias(name='heapq')]), Import(names=[alias(name='itertools')]), Import(names=[alias(name='warnings')]), ImportFrom(module='attrs', names=[alias(name='define')], level=0), ImportFrom(module='referencing.exceptions', names=[alias(name='Unresolvable', asname='_Unresolvable')], level=0), ImportFrom(module='jsonschema', names=[alias(name='_utils')], level=0), AnnAssign(target=Name(id='WEAK_MATCHES', ctx=Store()), annotation=Subscript(value=Name(id='frozenset', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Call(func=Name(id='frozenset', ctx=Load()), args=[List(elts=[Constant(value='anyOf'), Constant(value='oneOf')], ctx=Load())], keywords=[]), simple=1), AnnAssign(target=Name(id='STRONG_MATCHES', ctx=Store()), annotation=Subscript(value=Name(id='frozenset', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), value=Call(func=Name(id='frozenset', ctx=Load()), args=[], keywords=[]), simple=1), Assign(targets=[Name(id='_unset', ctx=Store())], value=Call(func=Attribute(value=Name(id='_utils', ctx=Load()), attr='Unset', ctx=Load()), args=[], keywords=[])), FunctionDef(name='__getattr__', args=arguments(posonlyargs=[], args=[arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='RefResolutionError')]), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Attribute(value=Name(id='_RefResolutionError', ctx=Load()), attr='_DEPRECATION_MESSAGE', ctx=Load()), Name(id='DeprecationWarning', ctx=Load())], keywords=[keyword(arg='stacklevel', value=Constant(value=2))])), Return(value=Name(id='_RefResolutionError', ctx=Load()))], orelse=[]), Raise(exc=Call(func=Name(id='AttributeError', ctx=Load()), args=[JoinedStr(values=[Constant(value='module '), FormattedValue(value=Name(id='__name__', ctx=Load()), conversion=-1), Constant(value=' has no attribute '), FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1)])], keywords=[]))], decorator_list=[]), ClassDef(name='_Error', bases=[Name(id='Exception', ctx=Load())], keywords=[], body=[AnnAssign(target=Name(id='_word_for_schema_in_error_message', ctx=Store()), annotation=Subscript(value=Name(id='ClassVar', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='_word_for_instance_in_error_message', ctx=Store()), annotation=Subscript(value=Name(id='ClassVar', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), simple=1), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='message', annotation=Name(id='str', ctx=Load())), arg(arg='validator'), arg(arg='path'), arg(arg='cause'), arg(arg='context'), arg(arg='validator_value'), arg(arg='instance'), arg(arg='schema'), arg(arg='schema_path'), arg(arg='parent'), arg(arg='type_checker')], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='_unset', ctx=Load()), Tuple(elts=[], ctx=Load()), Constant(value=None), Tuple(elts=[], ctx=Load()), Name(id='_unset', ctx=Load()), Name(id='_unset', ctx=Load()), Name(id='_unset', ctx=Load()), Tuple(elts=[], ctx=Load()), Constant(value=None), Name(id='_unset', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Name(id='message', ctx=Load()), Name(id='validator', ctx=Load()), Name(id='path', ctx=Load()), Name(id='cause', ctx=Load()), Name(id='context', ctx=Load()), Name(id='validator_value', ctx=Load()), Name(id='instance', ctx=Load()), Name(id='schema', ctx=Load()), Name(id='schema_path', ctx=Load()), Name(id='parent', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='message', ctx=Store())], value=Name(id='message', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='path', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='relative_path', ctx=Store())], value=Call(func=Name(id='deque', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='schema_path', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='relative_schema_path', ctx=Store())], value=Call(func=Name(id='deque', ctx=Load()), args=[Name(id='schema_path', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='context', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Name(id='context', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='cause', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='__cause__', ctx=Store())], value=Name(id='cause', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='validator', ctx=Store())], value=Name(id='validator', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='validator_value', ctx=Store())], value=Name(id='validator_value', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='instance', ctx=Store())], value=Name(id='instance', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='schema', ctx=Store())], value=Name(id='schema', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='parent', ctx=Store())], value=Name(id='parent', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_type_checker', ctx=Store())], value=Name(id='type_checker', ctx=Load())), For(target=Name(id='error', ctx=Store()), iter=Name(id='context', ctx=Load()), body=[Assign(targets=[Attribute(value=Name(id='error', ctx=Load()), attr='parent', ctx=Store())], value=Name(id='self', ctx=Load()))], orelse=[])], decorator_list=[]), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[Constant(value='<'), FormattedValue(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), conversion=-1), Constant(value=': '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='message', ctx=Load()), conversion=114), Constant(value='>')]))], decorator_list=[]), FunctionDef(name='__str__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='essential_for_verbose', ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='validator', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='validator_value', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='instance', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='schema', ctx=Load())], ctx=Load())), If(test=Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=Compare(left=Name(id='m', ctx=Load()), ops=[Is()], comparators=[Name(id='_unset', ctx=Load())]), generators=[comprehension(target=Name(id='m', ctx=Store()), iter=Name(id='essential_for_verbose', ctx=Load()), ifs=[], is_async=0)])], keywords=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='message', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='schema_path', ctx=Store())], value=Call(func=Attribute(value=Name(id='_utils', ctx=Load()), attr='format_as_index', ctx=Load()), args=[], keywords=[keyword(arg='container', value=Attribute(value=Name(id='self', ctx=Load()), attr='_word_for_schema_in_error_message', ctx=Load())), keyword(arg='indices', value=Subscript(value=Call(func=Name(id='list', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='relative_schema_path', ctx=Load())], keywords=[]), slice=Slice(upper=UnaryOp(op=USub(), operand=Constant(value=1))), ctx=Load()))])), Assign(targets=[Name(id='instance_path', ctx=Store())], value=Call(func=Attribute(value=Name(id='_utils', ctx=Load()), attr='format_as_index', ctx=Load()), args=[], keywords=[keyword(arg='container', value=Attribute(value=Name(id='self', ctx=Load()), attr='_word_for_instance_in_error_message', ctx=Load())), keyword(arg='indices', value=Attribute(value=Name(id='self', ctx=Load()), attr='relative_path', ctx=Load()))])), Assign(targets=[Name(id='prefix', ctx=Store())], value=BinOp(left=Constant(value=16), op=Mult(), right=Constant(value=' '))), Return(value=Call(func=Name(id='dedent', ctx=Load()), args=[Call(func=Attribute(value=JoinedStr(values=[Constant(value='            '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='message', ctx=Load()), conversion=-1), Constant(value='\n\n            Failed validating '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='validator', ctx=Load()), conversion=114), Constant(value=' in '), FormattedValue(value=Name(id='schema_path', ctx=Load()), conversion=-1), Constant(value=':\n                '), FormattedValue(value=Call(func=Attribute(value=Call(func=Name(id='indent', ctx=Load()), args=[Call(func=Name(id='pformat', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='schema', ctx=Load())], keywords=[keyword(arg='width', value=Constant(value=72))]), Name(id='prefix', ctx=Load())], keywords=[]), attr='lstrip', ctx=Load()), args=[], keywords=[]), conversion=-1), Constant(value='\n\n            On '), FormattedValue(value=Name(id='instance_path', ctx=Load()), conversion=-1), Constant(value=':\n                '), FormattedValue(value=Call(func=Attribute(value=Call(func=Name(id='indent', ctx=Load()), args=[Call(func=Name(id='pformat', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='instance', ctx=Load())], keywords=[keyword(arg='width', value=Constant(value=72))]), Name(id='prefix', ctx=Load())], keywords=[]), attr='lstrip', ctx=Load()), args=[], keywords=[]), conversion=-1), Constant(value='\n            ')]), attr='rstrip', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='create_from', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='cls', ctx=Load()), args=[], keywords=[keyword(value=Call(func=Attribute(value=Name(id='other', ctx=Load()), attr='_contents', ctx=Load()), args=[], keywords=[]))]))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='absolute_path', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='parent', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='parent', ctx=Load())), If(test=Compare(left=Name(id='parent', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='relative_path', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Name(id='deque', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='relative_path', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='extendleft', ctx=Load()), args=[Call(func=Name(id='reversed', ctx=Load()), args=[Attribute(value=Name(id='parent', ctx=Load()), attr='absolute_path', ctx=Load())], keywords=[])], keywords=[])), Return(value=Name(id='path', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='absolute_schema_path', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='parent', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='parent', ctx=Load())), If(test=Compare(left=Name(id='parent', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='relative_schema_path', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='path', ctx=Store())], value=Call(func=Name(id='deque', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='relative_schema_path', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='extendleft', ctx=Load()), args=[Call(func=Name(id='reversed', ctx=Load()), args=[Attribute(value=Name(id='parent', ctx=Load()), attr='absolute_schema_path', ctx=Load())], keywords=[])], keywords=[])), Return(value=Name(id='path', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='json_path', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='path', ctx=Store())], value=Constant(value='$')), For(target=Name(id='elem', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='absolute_path', ctx=Load()), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='elem', ctx=Load()), Name(id='int', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='path', ctx=Store()), op=Add(), value=BinOp(left=BinOp(left=Constant(value='['), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Name(id='elem', ctx=Load())], keywords=[])), op=Add(), right=Constant(value=']')))], orelse=[AugAssign(target=Name(id='path', ctx=Store()), op=Add(), value=BinOp(left=Constant(value='.'), op=Add(), right=Name(id='elem', ctx=Load())))])], orelse=[]), Return(value=Name(id='path', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='_set', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='type_checker')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[Constant(value=None)]), body=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='type_checker', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_type_checker', ctx=Load()), ops=[Is()], comparators=[Name(id='_unset', ctx=Load())])]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_type_checker', ctx=Store())], value=Name(id='type_checker', ctx=Load()))], orelse=[]), For(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='kwargs', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='k', ctx=Load())], keywords=[]), ops=[Is()], comparators=[Name(id='_unset', ctx=Load())]), body=[Expr(value=Call(func=Name(id='setattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='k', ctx=Load()), Name(id='v', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='_contents', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='attrs', ctx=Store())], value=Tuple(elts=[Constant(value='message'), Constant(value='cause'), Constant(value='context'), Constant(value='validator'), Constant(value='validator_value'), Constant(value='path'), Constant(value='schema_path'), Constant(value='instance'), Constant(value='schema'), Constant(value='parent')], ctx=Load())), Return(value=Call(func=Name(id='dict', ctx=Load()), args=[GeneratorExp(elt=Tuple(elts=[Name(id='attr', ctx=Load()), Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='attr', ctx=Load())], keywords=[])], ctx=Load()), generators=[comprehension(target=Name(id='attr', ctx=Store()), iter=Name(id='attrs', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[]), FunctionDef(name='_matches_type', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Name(id='expected', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='schema', ctx=Load()), slice=Constant(value='type'), ctx=Load()))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='KeyError', ctx=Load()), Name(id='TypeError', ctx=Load())], ctx=Load()), body=[Return(value=Constant(value=False))])], orelse=[], finalbody=[]), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='expected', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_type_checker', ctx=Load()), attr='is_type', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='instance', ctx=Load()), Name(id='expected', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='any', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_type_checker', ctx=Load()), attr='is_type', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='instance', ctx=Load()), Name(id='expected_type', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='expected_type', ctx=Store()), iter=Name(id='expected', ctx=Load()), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='ValidationError', bases=[Name(id='_Error', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    An instance was invalid under a provided schema.\n    ')), Assign(targets=[Name(id='_word_for_schema_in_error_message', ctx=Store())], value=Constant(value='schema')), Assign(targets=[Name(id='_word_for_instance_in_error_message', ctx=Store())], value=Constant(value='instance'))], decorator_list=[]), ClassDef(name='SchemaError', bases=[Name(id='_Error', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    A schema was invalid under its corresponding metaschema.\n    ')), Assign(targets=[Name(id='_word_for_schema_in_error_message', ctx=Store())], value=Constant(value='metaschema')), Assign(targets=[Name(id='_word_for_instance_in_error_message', ctx=Store())], value=Constant(value='schema'))], decorator_list=[]), ClassDef(name='_RefResolutionError', bases=[Name(id='Exception', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    A ref could not be resolved.\n    ')), Assign(targets=[Name(id='_DEPRECATION_MESSAGE', ctx=Store())], value=Constant(value='jsonschema.exceptions.RefResolutionError is deprecated as of version 4.18.0. If you wish to catch potential reference resolution errors, directly catch referencing.exceptions.Unresolvable.')), AnnAssign(target=Name(id='_cause', ctx=Store()), annotation=Name(id='Exception', ctx=Load()), simple=1), FunctionDef(name='__eq__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), ops=[IsNot()], comparators=[Attribute(value=Name(id='other', ctx=Load()), attr='__class__', ctx=Load())]), body=[Return(value=Name(id='NotImplemented', ctx=Load()))], orelse=[]), Return(value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_cause', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='other', ctx=Load()), attr='_cause', ctx=Load())]))], decorator_list=[]), FunctionDef(name='__str__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_cause', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[Call(func=Name(id='define', ctx=Load()), args=[], keywords=[keyword(arg='slots', value=Constant(value=False))])]), ClassDef(name='_WrappedReferencingError', bases=[Name(id='_RefResolutionError', ctx=Load()), Name(id='_Unresolvable', ctx=Load())], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='cause', annotation=Name(id='_Unresolvable', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='object', ctx=Load()), attr='__setattr__', ctx=Load()), args=[Name(id='self', ctx=Load()), Constant(value='_wrapped'), Name(id='cause', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='__eq__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='other', ctx=Load()), attr='__class__', ctx=Load()), ops=[Is()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load())]), body=[Return(value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_wrapped', ctx=Load()), ops=[Eq()], comparators=[Attribute(value=Name(id='other', ctx=Load()), attr='_wrapped', ctx=Load())]))], orelse=[If(test=Compare(left=Attribute(value=Name(id='other', ctx=Load()), attr='__class__', ctx=Load()), ops=[Is()], comparators=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_wrapped', ctx=Load()), attr='__class__', ctx=Load())]), body=[Return(value=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_wrapped', ctx=Load()), ops=[Eq()], comparators=[Name(id='other', ctx=Load())]))], orelse=[])]), Return(value=Name(id='NotImplemented', ctx=Load()))], decorator_list=[]), FunctionDef(name='__getattr__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='attr')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='getattr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_wrapped', ctx=Load()), Name(id='attr', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='__hash__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='hash', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_wrapped', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[Constant(value='<WrappedReferencingError '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='_wrapped', ctx=Load()), conversion=114), Constant(value='>')]))], decorator_list=[]), FunctionDef(name='__str__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[FormattedValue(value=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_wrapped', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), conversion=-1), Constant(value=': '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='_wrapped', ctx=Load()), conversion=-1)]))], decorator_list=[])], decorator_list=[]), ClassDef(name='UndefinedTypeCheck', bases=[Name(id='Exception', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    A type checker was asked to check a type it did not have registered.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='type')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='type', ctx=Store())], value=Name(id='type', ctx=Load()))], decorator_list=[]), FunctionDef(name='__str__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[Constant(value='Type '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='type', ctx=Load()), conversion=114), Constant(value=' is unknown to this type checker')]))], decorator_list=[])], decorator_list=[]), ClassDef(name='UnknownType', bases=[Name(id='Exception', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    A validator was asked to validate an instance against an unknown type.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='type'), arg(arg='instance'), arg(arg='schema')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='type', ctx=Store())], value=Name(id='type', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='instance', ctx=Store())], value=Name(id='instance', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='schema', ctx=Store())], value=Name(id='schema', ctx=Load()))], decorator_list=[]), FunctionDef(name='__str__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='prefix', ctx=Store())], value=BinOp(left=Constant(value=16), op=Mult(), right=Constant(value=' '))), Return(value=Call(func=Name(id='dedent', ctx=Load()), args=[Call(func=Attribute(value=JoinedStr(values=[Constant(value='            Unknown type '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='type', ctx=Load()), conversion=114), Constant(value=' for validator with schema:\n                '), FormattedValue(value=Call(func=Attribute(value=Call(func=Name(id='indent', ctx=Load()), args=[Call(func=Name(id='pformat', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='schema', ctx=Load())], keywords=[keyword(arg='width', value=Constant(value=72))]), Name(id='prefix', ctx=Load())], keywords=[]), attr='lstrip', ctx=Load()), args=[], keywords=[]), conversion=-1), Constant(value='\n\n            While checking instance:\n                '), FormattedValue(value=Call(func=Attribute(value=Call(func=Name(id='indent', ctx=Load()), args=[Call(func=Name(id='pformat', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='instance', ctx=Load())], keywords=[keyword(arg='width', value=Constant(value=72))]), Name(id='prefix', ctx=Load())], keywords=[]), attr='lstrip', ctx=Load()), args=[], keywords=[]), conversion=-1), Constant(value='\n            ')]), attr='rstrip', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='FormatError', bases=[Name(id='Exception', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Validating a format failed.\n    ')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='message'), arg(arg='cause')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='super', ctx=Load()), args=[], keywords=[]), attr='__init__', ctx=Load()), args=[Name(id='message', ctx=Load()), Name(id='cause', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='message', ctx=Store())], value=Name(id='message', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='cause', ctx=Store()), Attribute(value=Name(id='self', ctx=Load()), attr='__cause__', ctx=Store())], value=Name(id='cause', ctx=Load()))], decorator_list=[]), FunctionDef(name='__str__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='message', ctx=Load()))], decorator_list=[])], decorator_list=[]), ClassDef(name='ErrorTree', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    ErrorTrees make it easier to check which validations failed.\n    ')), Assign(targets=[Name(id='_instance', ctx=Store())], value=Name(id='_unset', ctx=Load())), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='errors')], kwonlyargs=[], kw_defaults=[], defaults=[Tuple(elts=[], ctx=Load())]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='errors', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_contents', ctx=Store())], value=Call(func=Name(id='defaultdict', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load())], keywords=[])), For(target=Name(id='error', ctx=Store()), iter=Name(id='errors', ctx=Load()), body=[Assign(targets=[Name(id='container', ctx=Store())], value=Name(id='self', ctx=Load())), For(target=Name(id='element', ctx=Store()), iter=Attribute(value=Name(id='error', ctx=Load()), attr='path', ctx=Load()), body=[Assign(targets=[Name(id='container', ctx=Store())], value=Subscript(value=Name(id='container', ctx=Load()), slice=Name(id='element', ctx=Load()), ctx=Load()))], orelse=[]), Assign(targets=[Subscript(value=Attribute(value=Name(id='container', ctx=Load()), attr='errors', ctx=Load()), slice=Attribute(value=Name(id='error', ctx=Load()), attr='validator', ctx=Load()), ctx=Store())], value=Name(id='error', ctx=Load())), Assign(targets=[Attribute(value=Name(id='container', ctx=Load()), attr='_instance', ctx=Store())], value=Attribute(value=Name(id='error', ctx=Load()), attr='instance', ctx=Load()))], orelse=[])], decorator_list=[]), FunctionDef(name='__contains__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='index')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Check whether ``instance[index]`` has any errors.\n        ')), Return(value=Compare(left=Name(id='index', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='_contents', ctx=Load())]))], decorator_list=[]), FunctionDef(name='__getitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='index')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Retrieve the child tree one level down at the given ``index``.\n\n        If the index is not in the instance that this tree corresponds\n        to and is not known by this tree, whatever error would be raised\n        by ``instance.__getitem__`` will be propagated (usually this is\n        some subclass of `LookupError`.\n        ')), If(test=BoolOp(op=And(), values=[Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_instance', ctx=Load()), ops=[IsNot()], comparators=[Name(id='_unset', ctx=Load())]), Compare(left=Name(id='index', ctx=Load()), ops=[NotIn()], comparators=[Name(id='self', ctx=Load())])]), body=[Expr(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_instance', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()))], orelse=[]), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_contents', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Load()))], decorator_list=[]), FunctionDef(name='__setitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='index'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Add an error to the tree at the given ``index``.\n        ')), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_contents', ctx=Load()), slice=Name(id='index', ctx=Load()), ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[]), FunctionDef(name='__iter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Iterate (non-recursively) over the indices in the instance with errors.\n        ')), Return(value=Call(func=Name(id='iter', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_contents', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='__len__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Return the `total_errors`.\n        ')), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='total_errors', ctx=Load()))], decorator_list=[]), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='total', ctx=Store())], value=Call(func=Name(id='len', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), Assign(targets=[Name(id='errors', ctx=Store())], value=IfExp(test=Compare(left=Name(id='total', ctx=Load()), ops=[Eq()], comparators=[Constant(value=1)]), body=Constant(value='error'), orelse=Constant(value='errors'))), Return(value=JoinedStr(values=[Constant(value='<'), FormattedValue(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), conversion=-1), Constant(value=' ('), FormattedValue(value=Name(id='total', ctx=Load()), conversion=-1), Constant(value=' total '), FormattedValue(value=Name(id='errors', ctx=Load()), conversion=-1), Constant(value=')>')]))], decorator_list=[]), FunctionDef(name='total_errors', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        The total number of errors in the entire tree, including children.\n        ')), Assign(targets=[Name(id='child_errors', ctx=Store())], value=Call(func=Name(id='sum', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='len', ctx=Load()), args=[Name(id='tree', ctx=Load())], keywords=[]), generators=[comprehension(target=Tuple(elts=[Name(id='_', ctx=Store()), Name(id='tree', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_contents', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[])), Return(value=BinOp(left=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='errors', ctx=Load())], keywords=[]), op=Add(), right=Name(id='child_errors', ctx=Load())))], decorator_list=[Name(id='property', ctx=Load())])], decorator_list=[]), FunctionDef(name='by_relevance', args=arguments(posonlyargs=[], args=[arg(arg='weak'), arg(arg='strong')], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='WEAK_MATCHES', ctx=Load()), Name(id='STRONG_MATCHES', ctx=Load())]), body=[Expr(value=Constant(value='\n    Create a key function that can be used to sort errors by relevance.\n\n    Arguments:\n        weak (set):\n            a collection of validation keywords to consider to be\n            "weak".  If there are two errors at the same level of the\n            instance and one is in the set of weak validation keywords,\n            the other error will take priority. By default, :kw:`anyOf`\n            and :kw:`oneOf` are considered weak keywords and will be\n            superseded by other same-level validation errors.\n\n        strong (set):\n            a collection of validation keywords to consider to be\n            "strong"\n    ')), FunctionDef(name='relevance', args=arguments(posonlyargs=[], args=[arg(arg='error')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='validator', ctx=Store())], value=Attribute(value=Name(id='error', ctx=Load()), attr='validator', ctx=Load())), Return(value=Tuple(elts=[UnaryOp(op=USub(), operand=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='error', ctx=Load()), attr='path', ctx=Load())], keywords=[])), Compare(left=Name(id='validator', ctx=Load()), ops=[NotIn()], comparators=[Name(id='weak', ctx=Load())]), Compare(left=Name(id='validator', ctx=Load()), ops=[In()], comparators=[Name(id='strong', ctx=Load())]), UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='error', ctx=Load()), attr='_matches_type', ctx=Load()), args=[], keywords=[]))], ctx=Load()))], decorator_list=[]), Return(value=Name(id='relevance', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='relevance', ctx=Store())], value=Call(func=Name(id='by_relevance', ctx=Load()), args=[], keywords=[])), Expr(value=Constant(value='\nA key function (e.g. to use with `sorted`) which sorts errors by relevance.\n\nExample:\n\n.. code:: python\n\n    sorted(validator.iter_errors(12), key=jsonschema.exceptions.relevance)\n')), FunctionDef(name='best_match', args=arguments(posonlyargs=[], args=[arg(arg='errors'), arg(arg='key')], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='relevance', ctx=Load())]), body=[Expr(value=Constant(value='\n    Try to find an error that appears to be the best match among given errors.\n\n    In general, errors that are higher up in the instance (i.e. for which\n    `ValidationError.path` is shorter) are considered better matches,\n    since they indicate "more" is wrong with the instance.\n\n    If the resulting match is either :kw:`oneOf` or :kw:`anyOf`, the\n    *opposite* assumption is made -- i.e. the deepest error is picked,\n    since these keywords only need to match once, and any other errors\n    may not be relevant.\n\n    Arguments:\n        errors (collections.abc.Iterable):\n\n            the errors to select from. Do not provide a mixture of\n            errors from different validation attempts (i.e. from\n            different instances or schemas), since it won\'t produce\n            sensical output.\n\n        key (collections.abc.Callable):\n\n            the key to use when sorting errors. See `relevance` and\n            transitively `by_relevance` for more details (the default is\n            to sort with the defaults of that function). Changing the\n            default is only useful if you want to change the function\n            that rates errors but still want the error context descent\n            done by this function.\n\n    Returns:\n        the best matching error, or ``None`` if the iterable was empty\n\n    .. note::\n\n        This function is a heuristic. Its return value may change for a given\n        set of inputs from version to version if better heuristics are added.\n    ')), Assign(targets=[Name(id='errors', ctx=Store())], value=Call(func=Name(id='iter', ctx=Load()), args=[Name(id='errors', ctx=Load())], keywords=[])), Assign(targets=[Name(id='best', ctx=Store())], value=Call(func=Name(id='next', ctx=Load()), args=[Name(id='errors', ctx=Load()), Constant(value=None)], keywords=[])), If(test=Compare(left=Name(id='best', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Return()], orelse=[]), Assign(targets=[Name(id='best', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[Call(func=Attribute(value=Name(id='itertools', ctx=Load()), attr='chain', ctx=Load()), args=[List(elts=[Name(id='best', ctx=Load())], ctx=Load()), Name(id='errors', ctx=Load())], keywords=[])], keywords=[keyword(arg='key', value=Name(id='key', ctx=Load()))])), While(test=Attribute(value=Name(id='best', ctx=Load()), attr='context', ctx=Load()), body=[Assign(targets=[Name(id='smallest', ctx=Store())], value=Call(func=Attribute(value=Name(id='heapq', ctx=Load()), attr='nsmallest', ctx=Load()), args=[Constant(value=2), Attribute(value=Name(id='best', ctx=Load()), attr='context', ctx=Load())], keywords=[keyword(arg='key', value=Name(id='key', ctx=Load()))])), If(test=BoolOp(op=And(), values=[Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='smallest', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=2)]), Compare(left=Call(func=Name(id='key', ctx=Load()), args=[Subscript(value=Name(id='smallest', ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='key', ctx=Load()), args=[Subscript(value=Name(id='smallest', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[])])]), body=[Return(value=Name(id='best', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='best', ctx=Store())], value=Subscript(value=Name(id='smallest', ctx=Load()), slice=Constant(value=0), ctx=Load()))], orelse=[]), Return(value=Name(id='best', ctx=Load()))], decorator_list=[])], type_ignores=[])