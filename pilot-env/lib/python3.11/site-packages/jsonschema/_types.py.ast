Module(body=[ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), ImportFrom(module='typing', names=[alias(name='Any'), alias(name='Callable'), alias(name='Mapping')], level=0), Import(names=[alias(name='numbers')]), ImportFrom(module='attrs', names=[alias(name='evolve'), alias(name='field'), alias(name='frozen')], level=0), ImportFrom(module='rpds', names=[alias(name='HashTrieMap')], level=0), ImportFrom(module='jsonschema.exceptions', names=[alias(name='UndefinedTypeCheck')], level=0), FunctionDef(name='_typed_map_converter', args=arguments(posonlyargs=[], args=[arg(arg='init_val', annotation=Subscript(value=Name(id='Mapping', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='TypeChecker', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), Name(id='bool', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='HashTrieMap', ctx=Load()), attr='convert', ctx=Load()), args=[Name(id='init_val', ctx=Load())], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='HashTrieMap', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='TypeChecker', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), Name(id='bool', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='is_array', args=arguments(posonlyargs=[], args=[arg(arg='checker'), arg(arg='instance')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='instance', ctx=Load()), Name(id='list', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='is_bool', args=arguments(posonlyargs=[], args=[arg(arg='checker'), arg(arg='instance')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='instance', ctx=Load()), Name(id='bool', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='is_integer', args=arguments(posonlyargs=[], args=[arg(arg='checker'), arg(arg='instance')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='instance', ctx=Load()), Name(id='bool', ctx=Load())], keywords=[]), body=[Return(value=Constant(value=False))], orelse=[]), Return(value=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='instance', ctx=Load()), Name(id='int', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='is_null', args=arguments(posonlyargs=[], args=[arg(arg='checker'), arg(arg='instance')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Compare(left=Name(id='instance', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]))], decorator_list=[]), FunctionDef(name='is_number', args=arguments(posonlyargs=[], args=[arg(arg='checker'), arg(arg='instance')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='instance', ctx=Load()), Name(id='bool', ctx=Load())], keywords=[]), body=[Return(value=Constant(value=False))], orelse=[]), Return(value=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='instance', ctx=Load()), Attribute(value=Name(id='numbers', ctx=Load()), attr='Number', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='is_object', args=arguments(posonlyargs=[], args=[arg(arg='checker'), arg(arg='instance')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='instance', ctx=Load()), Name(id='dict', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='is_string', args=arguments(posonlyargs=[], args=[arg(arg='checker'), arg(arg='instance')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='instance', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='is_any', args=arguments(posonlyargs=[], args=[arg(arg='checker'), arg(arg='instance')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=True))], decorator_list=[]), ClassDef(name='TypeChecker', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    A :kw:`type` property checker.\n\n    A `TypeChecker` performs type checking for a `Validator`, converting\n    between the defined JSON Schema types and some associated Python types or\n    objects.\n\n    Modifying the behavior just mentioned by redefining which Python objects\n    are considered to be of which JSON Schema types can be done using\n    `TypeChecker.redefine` or `TypeChecker.redefine_many`, and types can be\n    removed via `TypeChecker.remove`. Each of these return a new `TypeChecker`.\n\n    Arguments:\n\n        type_checkers:\n\n            The initial mapping of types to their checking functions.\n    ')), AnnAssign(target=Name(id='_type_checkers', ctx=Store()), annotation=Subscript(value=Name(id='HashTrieMap', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[Name(id='TypeChecker', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), Name(id='bool', ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), value=Call(func=Name(id='field', ctx=Load()), args=[], keywords=[keyword(arg='default', value=Call(func=Name(id='HashTrieMap', ctx=Load()), args=[], keywords=[])), keyword(arg='converter', value=Name(id='_typed_map_converter', ctx=Load()))]), simple=1), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='types', ctx=Store())], value=Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='repr', ctx=Load()), args=[Name(id='k', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='k', ctx=Store()), iter=Call(func=Name(id='sorted', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_type_checkers', ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[])), Return(value=JoinedStr(values=[Constant(value='<'), FormattedValue(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), conversion=-1), Constant(value=' types={'), FormattedValue(value=Name(id='types', ctx=Load()), conversion=-1), Constant(value='}>')]))], decorator_list=[]), FunctionDef(name='is_type', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='instance'), arg(arg='type', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Check if the instance is of the appropriate type.\n\n        Arguments:\n\n            instance:\n\n                The instance to check\n\n            type:\n\n                The name of the type that is expected.\n\n        Raises:\n\n            `jsonschema.exceptions.UndefinedTypeCheck`:\n\n                if ``type`` is unknown to this object.\n        ')), Try(body=[Assign(targets=[Name(id='fn', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_type_checkers', ctx=Load()), slice=Name(id='type', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='UndefinedTypeCheck', ctx=Load()), args=[Name(id='type', ctx=Load())], keywords=[]), cause=Constant(value=None))])], orelse=[], finalbody=[]), Return(value=Call(func=Name(id='fn', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='instance', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='redefine', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='type', annotation=Name(id='str', ctx=Load())), arg(arg='fn')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Produce a new checker with the given type redefined.\n\n        Arguments:\n\n            type:\n\n                The name of the type to check.\n\n            fn (collections.abc.Callable):\n\n                A callable taking exactly two parameters - the type\n                checker calling the function and the instance to check.\n                The function should return true if instance is of this\n                type and false otherwise.\n        ')), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='redefine_many', ctx=Load()), args=[Dict(keys=[Name(id='type', ctx=Load())], values=[Name(id='fn', ctx=Load())])], keywords=[]))], decorator_list=[], returns=Name(id='TypeChecker', ctx=Load())), FunctionDef(name='redefine_many', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='definitions')], kwonlyargs=[], kw_defaults=[], defaults=[Tuple(elts=[], ctx=Load())]), body=[Expr(value=Constant(value='\n        Produce a new checker with the given types redefined.\n\n        Arguments:\n\n            definitions (dict):\n\n                A dictionary mapping types to their checking functions.\n        ')), Assign(targets=[Name(id='type_checkers', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_type_checkers', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='definitions', ctx=Load())], keywords=[])), Return(value=Call(func=Name(id='evolve', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[keyword(arg='type_checkers', value=Name(id='type_checkers', ctx=Load()))]))], decorator_list=[], returns=Name(id='TypeChecker', ctx=Load())), FunctionDef(name='remove', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='types'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Produce a new checker with the given types forgotten.\n\n        Arguments:\n\n            types:\n\n                the names of the types to remove.\n\n        Raises:\n\n            `jsonschema.exceptions.UndefinedTypeCheck`:\n\n                if any given type is unknown to this object\n        ')), Assign(targets=[Name(id='type_checkers', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_type_checkers', ctx=Load())), For(target=Name(id='each', ctx=Store()), iter=Name(id='types', ctx=Load()), body=[Try(body=[Assign(targets=[Name(id='type_checkers', ctx=Store())], value=Call(func=Attribute(value=Name(id='type_checkers', ctx=Load()), attr='remove', ctx=Load()), args=[Name(id='each', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Raise(exc=Call(func=Name(id='UndefinedTypeCheck', ctx=Load()), args=[Name(id='each', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], orelse=[]), Return(value=Call(func=Name(id='evolve', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[keyword(arg='type_checkers', value=Name(id='type_checkers', ctx=Load()))]))], decorator_list=[], returns=Name(id='TypeChecker', ctx=Load()))], decorator_list=[Call(func=Name(id='frozen', ctx=Load()), args=[], keywords=[keyword(arg='repr', value=Constant(value=False))])]), Assign(targets=[Name(id='draft3_type_checker', ctx=Store())], value=Call(func=Name(id='TypeChecker', ctx=Load()), args=[Dict(keys=[Constant(value='any'), Constant(value='array'), Constant(value='boolean'), Constant(value='integer'), Constant(value='object'), Constant(value='null'), Constant(value='number'), Constant(value='string')], values=[Name(id='is_any', ctx=Load()), Name(id='is_array', ctx=Load()), Name(id='is_bool', ctx=Load()), Name(id='is_integer', ctx=Load()), Name(id='is_object', ctx=Load()), Name(id='is_null', ctx=Load()), Name(id='is_number', ctx=Load()), Name(id='is_string', ctx=Load())])], keywords=[])), Assign(targets=[Name(id='draft4_type_checker', ctx=Store())], value=Call(func=Attribute(value=Name(id='draft3_type_checker', ctx=Load()), attr='remove', ctx=Load()), args=[Constant(value='any')], keywords=[])), Assign(targets=[Name(id='draft6_type_checker', ctx=Store())], value=Call(func=Attribute(value=Name(id='draft4_type_checker', ctx=Load()), attr='redefine', ctx=Load()), args=[Constant(value='integer'), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='checker'), arg(arg='instance')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=BoolOp(op=Or(), values=[Call(func=Name(id='is_integer', ctx=Load()), args=[Name(id='checker', ctx=Load()), Name(id='instance', ctx=Load())], keywords=[]), BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='instance', ctx=Load()), Name(id='float', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='instance', ctx=Load()), attr='is_integer', ctx=Load()), args=[], keywords=[])])]))], keywords=[])), Assign(targets=[Name(id='draft7_type_checker', ctx=Store())], value=Name(id='draft6_type_checker', ctx=Load())), Assign(targets=[Name(id='draft201909_type_checker', ctx=Store())], value=Name(id='draft7_type_checker', ctx=Load())), Assign(targets=[Name(id='draft202012_type_checker', ctx=Store())], value=Name(id='draft201909_type_checker', ctx=Load()))], type_ignores=[])