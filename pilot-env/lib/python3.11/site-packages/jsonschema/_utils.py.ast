Module(body=[ImportFrom(module='collections.abc', names=[alias(name='Mapping'), alias(name='MutableMapping'), alias(name='Sequence')], level=0), ImportFrom(module='urllib.parse', names=[alias(name='urlsplit')], level=0), Import(names=[alias(name='itertools')]), Import(names=[alias(name='re')]), ClassDef(name='URIDict', bases=[Name(id='MutableMapping', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    Dictionary which uses normalized URIs as keys.\n    ')), FunctionDef(name='normalize', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='uri')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Call(func=Name(id='urlsplit', ctx=Load()), args=[Name(id='uri', ctx=Load())], keywords=[]), attr='geturl', ctx=Load()), args=[], keywords=[]))], decorator_list=[]), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='store', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='store', ctx=Load()), attr='update', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='__getitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='uri')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='store', ctx=Load()), slice=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='normalize', ctx=Load()), args=[Name(id='uri', ctx=Load())], keywords=[]), ctx=Load()))], decorator_list=[]), FunctionDef(name='__setitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='uri'), arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='store', ctx=Load()), slice=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='normalize', ctx=Load()), args=[Name(id='uri', ctx=Load())], keywords=[]), ctx=Store())], value=Name(id='value', ctx=Load()))], decorator_list=[]), FunctionDef(name='__delitem__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='uri')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Delete(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='store', ctx=Load()), slice=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='normalize', ctx=Load()), args=[Name(id='uri', ctx=Load())], keywords=[]), ctx=Del())])], decorator_list=[]), FunctionDef(name='__iter__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='iter', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='store', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='__len__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='store', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='repr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='store', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='Unset', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    An as-of-yet unset attribute or unprovided default parameter.\n    ')), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value='<unset>'))], decorator_list=[])], decorator_list=[]), FunctionDef(name='format_as_index', args=arguments(posonlyargs=[], args=[arg(arg='container'), arg(arg='indices')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Construct a single string containing indexing operations for the indices.\n\n    For example for a container ``bar``, [1, 2, "foo"] -> bar[1][2]["foo"]\n\n    Arguments:\n\n        container (str):\n\n            A word to use for the thing being indexed\n\n        indices (sequence):\n\n            The indices to format.\n    ')), If(test=UnaryOp(op=Not(), operand=Name(id='indices', ctx=Load())), body=[Return(value=Name(id='container', ctx=Load()))], orelse=[]), Return(value=JoinedStr(values=[FormattedValue(value=Name(id='container', ctx=Load()), conversion=-1), Constant(value='['), FormattedValue(value=Call(func=Attribute(value=Constant(value=']['), attr='join', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='repr', ctx=Load()), args=[Name(id='index', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='index', ctx=Store()), iter=Name(id='indices', ctx=Load()), ifs=[], is_async=0)])], keywords=[]), conversion=-1), Constant(value=']')]))], decorator_list=[]), FunctionDef(name='find_additional_properties', args=arguments(posonlyargs=[], args=[arg(arg='instance'), arg(arg='schema')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Return the set of additional properties for the given ``instance``.\n\n    Weeds out properties that should have been validated by ``properties`` and\n    / or ``patternProperties``.\n\n    Assumes ``instance`` is dict-like already.\n    ')), Assign(targets=[Name(id='properties', ctx=Store())], value=Call(func=Attribute(value=Name(id='schema', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='properties'), Dict(keys=[], values=[])], keywords=[])), Assign(targets=[Name(id='patterns', ctx=Store())], value=Call(func=Attribute(value=Constant(value='|'), attr='join', ctx=Load()), args=[Call(func=Attribute(value=Name(id='schema', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='patternProperties'), Dict(keys=[], values=[])], keywords=[])], keywords=[])), For(target=Name(id='property', ctx=Store()), iter=Name(id='instance', ctx=Load()), body=[If(test=Compare(left=Name(id='property', ctx=Load()), ops=[NotIn()], comparators=[Name(id='properties', ctx=Load())]), body=[If(test=BoolOp(op=And(), values=[Name(id='patterns', ctx=Load()), Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='search', ctx=Load()), args=[Name(id='patterns', ctx=Load()), Name(id='property', ctx=Load())], keywords=[])]), body=[Continue()], orelse=[]), Expr(value=Yield(value=Name(id='property', ctx=Load())))], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='extras_msg', args=arguments(posonlyargs=[], args=[arg(arg='extras')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Create an error message for extra items or properties.\n    ')), Assign(targets=[Name(id='verb', ctx=Store())], value=IfExp(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='extras', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Constant(value=1)]), body=Constant(value='was'), orelse=Constant(value='were'))), Return(value=Tuple(elts=[Call(func=Attribute(value=Constant(value=', '), attr='join', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='repr', ctx=Load()), args=[Name(id='extra', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='extra', ctx=Store()), iter=Name(id='extras', ctx=Load()), ifs=[], is_async=0)])], keywords=[]), Name(id='verb', ctx=Load())], ctx=Load()))], decorator_list=[]), FunctionDef(name='ensure_list', args=arguments(posonlyargs=[], args=[arg(arg='thing')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    Wrap ``thing`` in a list if it's a single str.\n\n    Otherwise, return it unchanged.\n    ")), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='thing', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), body=[Return(value=List(elts=[Name(id='thing', ctx=Load())], ctx=Load()))], orelse=[]), Return(value=Name(id='thing', ctx=Load()))], decorator_list=[]), FunctionDef(name='_mapping_equal', args=arguments(posonlyargs=[], args=[arg(arg='one'), arg(arg='two')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Check if two mappings are equal using the semantics of `equal`.\n    ')), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='one', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='two', ctx=Load())], keywords=[])]), body=[Return(value=Constant(value=False))], orelse=[]), Return(value=Call(func=Name(id='all', ctx=Load()), args=[GeneratorExp(elt=BoolOp(op=And(), values=[Compare(left=Name(id='key', ctx=Load()), ops=[In()], comparators=[Name(id='two', ctx=Load())]), Call(func=Name(id='equal', ctx=Load()), args=[Name(id='value', ctx=Load()), Subscript(value=Name(id='two', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load())], keywords=[])]), generators=[comprehension(target=Tuple(elts=[Name(id='key', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='one', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[]), FunctionDef(name='_sequence_equal', args=arguments(posonlyargs=[], args=[arg(arg='one'), arg(arg='two')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Check if two sequences are equal using the semantics of `equal`.\n    ')), If(test=Compare(left=Call(func=Name(id='len', ctx=Load()), args=[Name(id='one', ctx=Load())], keywords=[]), ops=[NotEq()], comparators=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='two', ctx=Load())], keywords=[])]), body=[Return(value=Constant(value=False))], orelse=[]), Return(value=Call(func=Name(id='all', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='equal', ctx=Load()), args=[Name(id='i', ctx=Load()), Name(id='j', ctx=Load())], keywords=[]), generators=[comprehension(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='j', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Name(id='one', ctx=Load()), Name(id='two', ctx=Load())], keywords=[]), ifs=[], is_async=0)])], keywords=[]))], decorator_list=[]), FunctionDef(name='equal', args=arguments(posonlyargs=[], args=[arg(arg='one'), arg(arg='two')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Check if two things are equal evading some Python type hierarchy semantics.\n\n    Specifically in JSON Schema, evade `bool` inheriting from `int`,\n    recursing into sequences to do the same.\n    ')), If(test=BoolOp(op=Or(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='one', ctx=Load()), Name(id='str', ctx=Load())], keywords=[]), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='two', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])]), body=[Return(value=Compare(left=Name(id='one', ctx=Load()), ops=[Eq()], comparators=[Name(id='two', ctx=Load())]))], orelse=[]), If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='one', ctx=Load()), Name(id='Sequence', ctx=Load())], keywords=[]), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='two', ctx=Load()), Name(id='Sequence', ctx=Load())], keywords=[])]), body=[Return(value=Call(func=Name(id='_sequence_equal', ctx=Load()), args=[Name(id='one', ctx=Load()), Name(id='two', ctx=Load())], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='one', ctx=Load()), Name(id='Mapping', ctx=Load())], keywords=[]), Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='two', ctx=Load()), Name(id='Mapping', ctx=Load())], keywords=[])]), body=[Return(value=Call(func=Name(id='_mapping_equal', ctx=Load()), args=[Name(id='one', ctx=Load()), Name(id='two', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Compare(left=Call(func=Name(id='unbool', ctx=Load()), args=[Name(id='one', ctx=Load())], keywords=[]), ops=[Eq()], comparators=[Call(func=Name(id='unbool', ctx=Load()), args=[Name(id='two', ctx=Load())], keywords=[])]))], decorator_list=[]), FunctionDef(name='unbool', args=arguments(posonlyargs=[], args=[arg(arg='element'), arg(arg='true'), arg(arg='false')], kwonlyargs=[], kw_defaults=[], defaults=[Call(func=Name(id='object', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='object', ctx=Load()), args=[], keywords=[])]), body=[Expr(value=Constant(value='\n    A hack to make True and 1 and False and 0 unique for ``uniq``.\n    ')), If(test=Compare(left=Name(id='element', ctx=Load()), ops=[Is()], comparators=[Constant(value=True)]), body=[Return(value=Name(id='true', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='element', ctx=Load()), ops=[Is()], comparators=[Constant(value=False)]), body=[Return(value=Name(id='false', ctx=Load()))], orelse=[])]), Return(value=Name(id='element', ctx=Load()))], decorator_list=[]), FunctionDef(name='uniq', args=arguments(posonlyargs=[], args=[arg(arg='container')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    Check if all of a container's elements are unique.\n\n    Tries to rely on the container being recursively sortable, or otherwise\n    falls back on (slow) brute force.\n    ")), Try(body=[Assign(targets=[Name(id='sort', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[GeneratorExp(elt=Call(func=Name(id='unbool', ctx=Load()), args=[Name(id='i', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Name(id='container', ctx=Load()), ifs=[], is_async=0)])], keywords=[])), Assign(targets=[Name(id='sliced', ctx=Store())], value=Call(func=Attribute(value=Name(id='itertools', ctx=Load()), attr='islice', ctx=Load()), args=[Name(id='sort', ctx=Load()), Constant(value=1), Constant(value=None)], keywords=[])), For(target=Tuple(elts=[Name(id='i', ctx=Store()), Name(id='j', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Name(id='sort', ctx=Load()), Name(id='sliced', ctx=Load())], keywords=[]), body=[If(test=Call(func=Name(id='equal', ctx=Load()), args=[Name(id='i', ctx=Load()), Name(id='j', ctx=Load())], keywords=[]), body=[Return(value=Constant(value=False))], orelse=[])], orelse=[])], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='NotImplementedError', ctx=Load()), Name(id='TypeError', ctx=Load())], ctx=Load()), body=[Assign(targets=[Name(id='seen', ctx=Store())], value=List(elts=[], ctx=Load())), For(target=Name(id='e', ctx=Store()), iter=Name(id='container', ctx=Load()), body=[Assign(targets=[Name(id='e', ctx=Store())], value=Call(func=Name(id='unbool', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[])), For(target=Name(id='i', ctx=Store()), iter=Name(id='seen', ctx=Load()), body=[If(test=Call(func=Name(id='equal', ctx=Load()), args=[Name(id='i', ctx=Load()), Name(id='e', ctx=Load())], keywords=[]), body=[Return(value=Constant(value=False))], orelse=[])], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='seen', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]))], orelse=[])])], orelse=[], finalbody=[]), Return(value=Constant(value=True))], decorator_list=[]), FunctionDef(name='find_evaluated_item_indexes_by_schema', args=arguments(posonlyargs=[], args=[arg(arg='validator'), arg(arg='instance'), arg(arg='schema')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Get all indexes of items that get evaluated under the current schema\n\n    Covers all keywords related to unevaluatedItems: items, prefixItems, if,\n    then, else, contains, unevaluatedItems, allOf, oneOf, anyOf\n    ')), If(test=Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='is_type', ctx=Load()), args=[Name(id='schema', ctx=Load()), Constant(value='boolean')], keywords=[]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='evaluated_indexes', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=Compare(left=Constant(value='items'), ops=[In()], comparators=[Name(id='schema', ctx=Load())]), body=[Return(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Call(func=Name(id='len', ctx=Load()), args=[Name(id='instance', ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], orelse=[]), If(test=Compare(left=Constant(value='$ref'), ops=[In()], comparators=[Name(id='schema', ctx=Load())]), body=[Assign(targets=[Name(id='resolved', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='validator', ctx=Load()), attr='_resolver', ctx=Load()), attr='lookup', ctx=Load()), args=[Subscript(value=Name(id='schema', ctx=Load()), slice=Constant(value='$ref'), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='evaluated_indexes', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Name(id='find_evaluated_item_indexes_by_schema', ctx=Load()), args=[Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='evolve', ctx=Load()), args=[], keywords=[keyword(arg='schema', value=Attribute(value=Name(id='resolved', ctx=Load()), attr='contents', ctx=Load())), keyword(arg='_resolver', value=Attribute(value=Name(id='resolved', ctx=Load()), attr='resolver', ctx=Load()))]), Name(id='instance', ctx=Load()), Attribute(value=Name(id='resolved', ctx=Load()), attr='contents', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), If(test=Compare(left=Constant(value='prefixItems'), ops=[In()], comparators=[Name(id='schema', ctx=Load())]), body=[AugAssign(target=Name(id='evaluated_indexes', ctx=Store()), op=Add(), value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Constant(value=0), Call(func=Name(id='len', ctx=Load()), args=[Subscript(value=Name(id='schema', ctx=Load()), slice=Constant(value='prefixItems'), ctx=Load())], keywords=[])], keywords=[])], keywords=[]))], orelse=[]), If(test=Compare(left=Constant(value='if'), ops=[In()], comparators=[Name(id='schema', ctx=Load())]), body=[If(test=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='evolve', ctx=Load()), args=[], keywords=[keyword(arg='schema', value=Subscript(value=Name(id='schema', ctx=Load()), slice=Constant(value='if'), ctx=Load()))]), attr='is_valid', ctx=Load()), args=[Name(id='instance', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='evaluated_indexes', ctx=Store()), op=Add(), value=Call(func=Name(id='find_evaluated_item_indexes_by_schema', ctx=Load()), args=[Name(id='validator', ctx=Load()), Name(id='instance', ctx=Load()), Subscript(value=Name(id='schema', ctx=Load()), slice=Constant(value='if'), ctx=Load())], keywords=[])), If(test=Compare(left=Constant(value='then'), ops=[In()], comparators=[Name(id='schema', ctx=Load())]), body=[AugAssign(target=Name(id='evaluated_indexes', ctx=Store()), op=Add(), value=Call(func=Name(id='find_evaluated_item_indexes_by_schema', ctx=Load()), args=[Name(id='validator', ctx=Load()), Name(id='instance', ctx=Load()), Subscript(value=Name(id='schema', ctx=Load()), slice=Constant(value='then'), ctx=Load())], keywords=[]))], orelse=[])], orelse=[If(test=Compare(left=Constant(value='else'), ops=[In()], comparators=[Name(id='schema', ctx=Load())]), body=[AugAssign(target=Name(id='evaluated_indexes', ctx=Store()), op=Add(), value=Call(func=Name(id='find_evaluated_item_indexes_by_schema', ctx=Load()), args=[Name(id='validator', ctx=Load()), Name(id='instance', ctx=Load()), Subscript(value=Name(id='schema', ctx=Load()), slice=Constant(value='else'), ctx=Load())], keywords=[]))], orelse=[])])], orelse=[]), For(target=Name(id='keyword', ctx=Store()), iter=List(elts=[Constant(value='contains'), Constant(value='unevaluatedItems')], ctx=Load()), body=[If(test=Compare(left=Name(id='keyword', ctx=Load()), ops=[In()], comparators=[Name(id='schema', ctx=Load())]), body=[For(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='enumerate', ctx=Load()), args=[Name(id='instance', ctx=Load())], keywords=[]), body=[If(test=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='evolve', ctx=Load()), args=[], keywords=[keyword(arg='schema', value=Subscript(value=Name(id='schema', ctx=Load()), slice=Name(id='keyword', ctx=Load()), ctx=Load()))]), attr='is_valid', ctx=Load()), args=[Name(id='v', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='evaluated_indexes', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='k', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[])], orelse=[]), For(target=Name(id='keyword', ctx=Store()), iter=List(elts=[Constant(value='allOf'), Constant(value='oneOf'), Constant(value='anyOf')], ctx=Load()), body=[If(test=Compare(left=Name(id='keyword', ctx=Load()), ops=[In()], comparators=[Name(id='schema', ctx=Load())]), body=[For(target=Name(id='subschema', ctx=Store()), iter=Subscript(value=Name(id='schema', ctx=Load()), slice=Name(id='keyword', ctx=Load()), ctx=Load()), body=[Assign(targets=[Name(id='errs', ctx=Store())], value=Call(func=Name(id='next', ctx=Load()), args=[Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='descend', ctx=Load()), args=[Name(id='instance', ctx=Load()), Name(id='subschema', ctx=Load())], keywords=[]), Constant(value=None)], keywords=[])), If(test=Compare(left=Name(id='errs', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[AugAssign(target=Name(id='evaluated_indexes', ctx=Store()), op=Add(), value=Call(func=Name(id='find_evaluated_item_indexes_by_schema', ctx=Load()), args=[Name(id='validator', ctx=Load()), Name(id='instance', ctx=Load()), Name(id='subschema', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[])], orelse=[]), Return(value=Name(id='evaluated_indexes', ctx=Load()))], decorator_list=[]), FunctionDef(name='find_evaluated_property_keys_by_schema', args=arguments(posonlyargs=[], args=[arg(arg='validator'), arg(arg='instance'), arg(arg='schema')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Get all keys of items that get evaluated under the current schema\n\n    Covers all keywords related to unevaluatedProperties: properties,\n    additionalProperties, unevaluatedProperties, patternProperties,\n    dependentSchemas, allOf, oneOf, anyOf, if, then, else\n    ')), If(test=Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='is_type', ctx=Load()), args=[Name(id='schema', ctx=Load()), Constant(value='boolean')], keywords=[]), body=[Return(value=List(elts=[], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='evaluated_keys', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=Compare(left=Constant(value='$ref'), ops=[In()], comparators=[Name(id='schema', ctx=Load())]), body=[Assign(targets=[Name(id='resolved', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='validator', ctx=Load()), attr='_resolver', ctx=Load()), attr='lookup', ctx=Load()), args=[Subscript(value=Name(id='schema', ctx=Load()), slice=Constant(value='$ref'), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='evaluated_keys', ctx=Load()), attr='extend', ctx=Load()), args=[Call(func=Name(id='find_evaluated_property_keys_by_schema', ctx=Load()), args=[Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='evolve', ctx=Load()), args=[], keywords=[keyword(arg='schema', value=Attribute(value=Name(id='resolved', ctx=Load()), attr='contents', ctx=Load())), keyword(arg='_resolver', value=Attribute(value=Name(id='resolved', ctx=Load()), attr='resolver', ctx=Load()))]), Name(id='instance', ctx=Load()), Attribute(value=Name(id='resolved', ctx=Load()), attr='contents', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), For(target=Name(id='keyword', ctx=Store()), iter=List(elts=[Constant(value='properties'), Constant(value='additionalProperties'), Constant(value='unevaluatedProperties')], ctx=Load()), body=[If(test=Compare(left=Name(id='keyword', ctx=Load()), ops=[In()], comparators=[Name(id='schema', ctx=Load())]), body=[Assign(targets=[Name(id='schema_value', ctx=Store())], value=Subscript(value=Name(id='schema', ctx=Load()), slice=Name(id='keyword', ctx=Load()), ctx=Load())), If(test=BoolOp(op=And(), values=[Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='is_type', ctx=Load()), args=[Name(id='schema_value', ctx=Load()), Constant(value='boolean')], keywords=[]), Name(id='schema_value', ctx=Load())]), body=[AugAssign(target=Name(id='evaluated_keys', ctx=Store()), op=Add(), value=Call(func=Attribute(value=Name(id='instance', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[]))], orelse=[If(test=Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='is_type', ctx=Load()), args=[Name(id='schema_value', ctx=Load()), Constant(value='object')], keywords=[]), body=[For(target=Name(id='property', ctx=Store()), iter=Name(id='schema_value', ctx=Load()), body=[If(test=Compare(left=Name(id='property', ctx=Load()), ops=[In()], comparators=[Name(id='instance', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='evaluated_keys', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='property', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[])])], orelse=[])], orelse=[]), If(test=Compare(left=Constant(value='patternProperties'), ops=[In()], comparators=[Name(id='schema', ctx=Load())]), body=[For(target=Name(id='property', ctx=Store()), iter=Name(id='instance', ctx=Load()), body=[For(target=Name(id='pattern', ctx=Store()), iter=Subscript(value=Name(id='schema', ctx=Load()), slice=Constant(value='patternProperties'), ctx=Load()), body=[If(test=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='search', ctx=Load()), args=[Name(id='pattern', ctx=Load()), Name(id='property', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='evaluated_keys', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='property', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[])], orelse=[]), If(test=Compare(left=Constant(value='dependentSchemas'), ops=[In()], comparators=[Name(id='schema', ctx=Load())]), body=[For(target=Tuple(elts=[Name(id='property', ctx=Store()), Name(id='subschema', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Subscript(value=Name(id='schema', ctx=Load()), slice=Constant(value='dependentSchemas'), ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[If(test=Compare(left=Name(id='property', ctx=Load()), ops=[NotIn()], comparators=[Name(id='instance', ctx=Load())]), body=[Continue()], orelse=[]), AugAssign(target=Name(id='evaluated_keys', ctx=Store()), op=Add(), value=Call(func=Name(id='find_evaluated_property_keys_by_schema', ctx=Load()), args=[Name(id='validator', ctx=Load()), Name(id='instance', ctx=Load()), Name(id='subschema', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), For(target=Name(id='keyword', ctx=Store()), iter=List(elts=[Constant(value='allOf'), Constant(value='oneOf'), Constant(value='anyOf')], ctx=Load()), body=[If(test=Compare(left=Name(id='keyword', ctx=Load()), ops=[In()], comparators=[Name(id='schema', ctx=Load())]), body=[For(target=Name(id='subschema', ctx=Store()), iter=Subscript(value=Name(id='schema', ctx=Load()), slice=Name(id='keyword', ctx=Load()), ctx=Load()), body=[Assign(targets=[Name(id='errs', ctx=Store())], value=Call(func=Name(id='next', ctx=Load()), args=[Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='descend', ctx=Load()), args=[Name(id='instance', ctx=Load()), Name(id='subschema', ctx=Load())], keywords=[]), Constant(value=None)], keywords=[])), If(test=Compare(left=Name(id='errs', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[AugAssign(target=Name(id='evaluated_keys', ctx=Store()), op=Add(), value=Call(func=Name(id='find_evaluated_property_keys_by_schema', ctx=Load()), args=[Name(id='validator', ctx=Load()), Name(id='instance', ctx=Load()), Name(id='subschema', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], orelse=[])], orelse=[]), If(test=Compare(left=Constant(value='if'), ops=[In()], comparators=[Name(id='schema', ctx=Load())]), body=[If(test=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='evolve', ctx=Load()), args=[], keywords=[keyword(arg='schema', value=Subscript(value=Name(id='schema', ctx=Load()), slice=Constant(value='if'), ctx=Load()))]), attr='is_valid', ctx=Load()), args=[Name(id='instance', ctx=Load())], keywords=[]), body=[AugAssign(target=Name(id='evaluated_keys', ctx=Store()), op=Add(), value=Call(func=Name(id='find_evaluated_property_keys_by_schema', ctx=Load()), args=[Name(id='validator', ctx=Load()), Name(id='instance', ctx=Load()), Subscript(value=Name(id='schema', ctx=Load()), slice=Constant(value='if'), ctx=Load())], keywords=[])), If(test=Compare(left=Constant(value='then'), ops=[In()], comparators=[Name(id='schema', ctx=Load())]), body=[AugAssign(target=Name(id='evaluated_keys', ctx=Store()), op=Add(), value=Call(func=Name(id='find_evaluated_property_keys_by_schema', ctx=Load()), args=[Name(id='validator', ctx=Load()), Name(id='instance', ctx=Load()), Subscript(value=Name(id='schema', ctx=Load()), slice=Constant(value='then'), ctx=Load())], keywords=[]))], orelse=[])], orelse=[If(test=Compare(left=Constant(value='else'), ops=[In()], comparators=[Name(id='schema', ctx=Load())]), body=[AugAssign(target=Name(id='evaluated_keys', ctx=Store()), op=Add(), value=Call(func=Name(id='find_evaluated_property_keys_by_schema', ctx=Load()), args=[Name(id='validator', ctx=Load()), Name(id='instance', ctx=Load()), Subscript(value=Name(id='schema', ctx=Load()), slice=Constant(value='else'), ctx=Load())], keywords=[]))], orelse=[])])], orelse=[]), Return(value=Name(id='evaluated_keys', ctx=Load()))], decorator_list=[])], type_ignores=[])