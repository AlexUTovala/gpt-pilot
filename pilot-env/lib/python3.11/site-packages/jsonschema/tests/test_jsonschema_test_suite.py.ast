Module(body=[Expr(value=Constant(value="\nTest runner for the JSON Schema official test suite\n\nTests comprehensive correctness of each draft's validator.\n\nSee https://github.com/json-schema-org/JSON-Schema-Test-Suite for details.\n")), Import(names=[alias(name='sys')]), ImportFrom(module='jsonschema.tests._suite', names=[alias(name='Suite')], level=0), Import(names=[alias(name='jsonschema')]), Assign(targets=[Name(id='SUITE', ctx=Store())], value=Call(func=Name(id='Suite', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='DRAFT3', ctx=Store())], value=Call(func=Attribute(value=Name(id='SUITE', ctx=Load()), attr='version', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='draft3'))])), Assign(targets=[Name(id='DRAFT4', ctx=Store())], value=Call(func=Attribute(value=Name(id='SUITE', ctx=Load()), attr='version', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='draft4'))])), Assign(targets=[Name(id='DRAFT6', ctx=Store())], value=Call(func=Attribute(value=Name(id='SUITE', ctx=Load()), attr='version', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='draft6'))])), Assign(targets=[Name(id='DRAFT7', ctx=Store())], value=Call(func=Attribute(value=Name(id='SUITE', ctx=Load()), attr='version', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='draft7'))])), Assign(targets=[Name(id='DRAFT201909', ctx=Store())], value=Call(func=Attribute(value=Name(id='SUITE', ctx=Load()), attr='version', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='draft2019-09'))])), Assign(targets=[Name(id='DRAFT202012', ctx=Store())], value=Call(func=Attribute(value=Name(id='SUITE', ctx=Load()), attr='version', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='draft2020-12'))])), FunctionDef(name='skip', args=arguments(posonlyargs=[], args=[arg(arg='message')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[FunctionDef(name='skipper', args=arguments(posonlyargs=[], args=[arg(arg='test')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='all', ctx=Load()), args=[GeneratorExp(elt=Compare(left=Name(id='value', ctx=Load()), ops=[Eq()], comparators=[Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='test', ctx=Load()), Name(id='attr', ctx=Load())], keywords=[])]), generators=[comprehension(target=Tuple(elts=[Name(id='attr', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='kwargs', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[]), body=[Return(value=Name(id='message', ctx=Load()))], orelse=[])], decorator_list=[]), Return(value=Name(id='skipper', ctx=Load()))], decorator_list=[]), FunctionDef(name='missing_format', args=arguments(posonlyargs=[], args=[arg(arg='Validator')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='missing_format', args=arguments(posonlyargs=[], args=[arg(arg='test')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='schema', ctx=Store())], value=Attribute(value=Name(id='test', ctx=Load()), attr='schema', ctx=Load())), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='schema', ctx=Load()), ops=[Is()], comparators=[Constant(value=True)]), Compare(left=Name(id='schema', ctx=Load()), ops=[Is()], comparators=[Constant(value=False)]), Compare(left=Constant(value='format'), ops=[NotIn()], comparators=[Name(id='schema', ctx=Load())]), Compare(left=Subscript(value=Name(id='schema', ctx=Load()), slice=Constant(value='format'), ctx=Load()), ops=[In()], comparators=[Attribute(value=Attribute(value=Name(id='Validator', ctx=Load()), attr='FORMAT_CHECKER', ctx=Load()), attr='checkers', ctx=Load())]), Attribute(value=Name(id='test', ctx=Load()), attr='valid', ctx=Load())]), body=[Return()], orelse=[]), Return(value=JoinedStr(values=[Constant(value='Format checker '), FormattedValue(value=Subscript(value=Name(id='schema', ctx=Load()), slice=Constant(value='format'), ctx=Load()), conversion=114), Constant(value=' not found.')]))], decorator_list=[]), Return(value=Name(id='missing_format', ctx=Load()))], decorator_list=[]), FunctionDef(name='complex_email_validation', args=arguments(posonlyargs=[], args=[arg(arg='test')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='test', ctx=Load()), attr='subject', ctx=Load()), ops=[NotEq()], comparators=[Constant(value='email')]), body=[Return()], orelse=[]), Assign(targets=[Name(id='message', ctx=Store())], value=Constant(value='Complex email validation is (intentionally) unsupported.')), Return(value=BoolOp(op=Or(), values=[Call(func=Call(func=Name(id='skip', ctx=Load()), args=[], keywords=[keyword(arg='message', value=Name(id='message', ctx=Load())), keyword(arg='description', value=Constant(value='an invalid domain'))]), args=[Name(id='test', ctx=Load())], keywords=[]), Call(func=Call(func=Name(id='skip', ctx=Load()), args=[], keywords=[keyword(arg='message', value=Name(id='message', ctx=Load())), keyword(arg='description', value=Constant(value='an invalid IPv4-address-literal'))]), args=[Name(id='test', ctx=Load())], keywords=[]), Call(func=Call(func=Name(id='skip', ctx=Load()), args=[], keywords=[keyword(arg='message', value=Name(id='message', ctx=Load())), keyword(arg='description', value=Constant(value='dot after local part is not valid'))]), args=[Name(id='test', ctx=Load())], keywords=[]), Call(func=Call(func=Name(id='skip', ctx=Load()), args=[], keywords=[keyword(arg='message', value=Name(id='message', ctx=Load())), keyword(arg='description', value=Constant(value='dot before local part is not valid'))]), args=[Name(id='test', ctx=Load())], keywords=[]), Call(func=Call(func=Name(id='skip', ctx=Load()), args=[], keywords=[keyword(arg='message', value=Name(id='message', ctx=Load())), keyword(arg='description', value=Constant(value='two subsequent dots inside local part are not valid'))]), args=[Name(id='test', ctx=Load())], keywords=[])]))], decorator_list=[]), If(test=Compare(left=Attribute(value=Name(id='sys', ctx=Load()), attr='version_info', ctx=Load()), ops=[Lt()], comparators=[Tuple(elts=[Constant(value=3), Constant(value=9)], ctx=Load())]), body=[Assign(targets=[Name(id='message', ctx=Store())], value=Constant(value='Rejecting leading zeros is 3.9+')), Assign(targets=[Name(id='allowed_leading_zeros', ctx=Store())], value=Call(func=Name(id='skip', ctx=Load()), args=[], keywords=[keyword(arg='message', value=Name(id='message', ctx=Load())), keyword(arg='subject', value=Constant(value='ipv4')), keyword(arg='description', value=Constant(value='invalid leading zeroes, as they are treated as octals'))]))], orelse=[FunctionDef(name='allowed_leading_zeros', args=arguments(posonlyargs=[], args=[arg(arg='test')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return()], decorator_list=[])]), FunctionDef(name='leap_second', args=arguments(posonlyargs=[], args=[arg(arg='test')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='message', ctx=Store())], value=Constant(value='Leap seconds are unsupported.')), Return(value=BoolOp(op=Or(), values=[Call(func=Call(func=Name(id='skip', ctx=Load()), args=[], keywords=[keyword(arg='message', value=Name(id='message', ctx=Load())), keyword(arg='subject', value=Constant(value='time')), keyword(arg='description', value=Constant(value='a valid time string with leap second'))]), args=[Name(id='test', ctx=Load())], keywords=[]), Call(func=Call(func=Name(id='skip', ctx=Load()), args=[], keywords=[keyword(arg='message', value=Name(id='message', ctx=Load())), keyword(arg='subject', value=Constant(value='time')), keyword(arg='description', value=Constant(value='a valid time string with leap second, Zulu'))]), args=[Name(id='test', ctx=Load())], keywords=[]), Call(func=Call(func=Name(id='skip', ctx=Load()), args=[], keywords=[keyword(arg='message', value=Name(id='message', ctx=Load())), keyword(arg='subject', value=Constant(value='time')), keyword(arg='description', value=Constant(value='a valid time string with leap second with offset'))]), args=[Name(id='test', ctx=Load())], keywords=[]), Call(func=Call(func=Name(id='skip', ctx=Load()), args=[], keywords=[keyword(arg='message', value=Name(id='message', ctx=Load())), keyword(arg='subject', value=Constant(value='time')), keyword(arg='description', value=Constant(value='valid leap second, positive time-offset'))]), args=[Name(id='test', ctx=Load())], keywords=[]), Call(func=Call(func=Name(id='skip', ctx=Load()), args=[], keywords=[keyword(arg='message', value=Name(id='message', ctx=Load())), keyword(arg='subject', value=Constant(value='time')), keyword(arg='description', value=Constant(value='valid leap second, negative time-offset'))]), args=[Name(id='test', ctx=Load())], keywords=[]), Call(func=Call(func=Name(id='skip', ctx=Load()), args=[], keywords=[keyword(arg='message', value=Name(id='message', ctx=Load())), keyword(arg='subject', value=Constant(value='time')), keyword(arg='description', value=Constant(value='valid leap second, large positive time-offset'))]), args=[Name(id='test', ctx=Load())], keywords=[]), Call(func=Call(func=Name(id='skip', ctx=Load()), args=[], keywords=[keyword(arg='message', value=Name(id='message', ctx=Load())), keyword(arg='subject', value=Constant(value='time')), keyword(arg='description', value=Constant(value='valid leap second, large negative time-offset'))]), args=[Name(id='test', ctx=Load())], keywords=[]), Call(func=Call(func=Name(id='skip', ctx=Load()), args=[], keywords=[keyword(arg='message', value=Name(id='message', ctx=Load())), keyword(arg='subject', value=Constant(value='time')), keyword(arg='description', value=Constant(value='valid leap second, zero time-offset'))]), args=[Name(id='test', ctx=Load())], keywords=[]), Call(func=Call(func=Name(id='skip', ctx=Load()), args=[], keywords=[keyword(arg='message', value=Name(id='message', ctx=Load())), keyword(arg='subject', value=Constant(value='date-time')), keyword(arg='description', value=Constant(value='a valid date-time with a leap second, UTC'))]), args=[Name(id='test', ctx=Load())], keywords=[]), Call(func=Call(func=Name(id='skip', ctx=Load()), args=[], keywords=[keyword(arg='message', value=Name(id='message', ctx=Load())), keyword(arg='subject', value=Constant(value='date-time')), keyword(arg='description', value=Constant(value='a valid date-time with a leap second, with minus offset'))]), args=[Name(id='test', ctx=Load())], keywords=[])]))], decorator_list=[]), Assign(targets=[Name(id='TestDraft3', ctx=Store())], value=Call(func=Attribute(value=Name(id='DRAFT3', ctx=Load()), attr='to_unittest_testcase', ctx=Load()), args=[Call(func=Attribute(value=Name(id='DRAFT3', ctx=Load()), attr='cases', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='DRAFT3', ctx=Load()), attr='format_cases', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='DRAFT3', ctx=Load()), attr='optional_cases_of', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='bignum'))]), Call(func=Attribute(value=Name(id='DRAFT3', ctx=Load()), attr='optional_cases_of', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='non-bmp-regex'))]), Call(func=Attribute(value=Name(id='DRAFT3', ctx=Load()), attr='optional_cases_of', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='zeroTerminatedFloats'))])], keywords=[keyword(arg='Validator', value=Attribute(value=Name(id='jsonschema', ctx=Load()), attr='Draft3Validator', ctx=Load())), keyword(arg='format_checker', value=Attribute(value=Attribute(value=Name(id='jsonschema', ctx=Load()), attr='Draft3Validator', ctx=Load()), attr='FORMAT_CHECKER', ctx=Load())), keyword(arg='skip', value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='test')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=BoolOp(op=Or(), values=[Call(func=Call(func=Name(id='missing_format', ctx=Load()), args=[Attribute(value=Name(id='jsonschema', ctx=Load()), attr='Draft3Validator', ctx=Load())], keywords=[]), args=[Name(id='test', ctx=Load())], keywords=[]), Call(func=Name(id='complex_email_validation', ctx=Load()), args=[Name(id='test', ctx=Load())], keywords=[])])))])), Assign(targets=[Name(id='TestDraft4', ctx=Store())], value=Call(func=Attribute(value=Name(id='DRAFT4', ctx=Load()), attr='to_unittest_testcase', ctx=Load()), args=[Call(func=Attribute(value=Name(id='DRAFT4', ctx=Load()), attr='cases', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='DRAFT4', ctx=Load()), attr='format_cases', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='DRAFT4', ctx=Load()), attr='optional_cases_of', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='bignum'))]), Call(func=Attribute(value=Name(id='DRAFT4', ctx=Load()), attr='optional_cases_of', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='float-overflow'))]), Call(func=Attribute(value=Name(id='DRAFT4', ctx=Load()), attr='optional_cases_of', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='non-bmp-regex'))]), Call(func=Attribute(value=Name(id='DRAFT4', ctx=Load()), attr='optional_cases_of', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='zeroTerminatedFloats'))])], keywords=[keyword(arg='Validator', value=Attribute(value=Name(id='jsonschema', ctx=Load()), attr='Draft4Validator', ctx=Load())), keyword(arg='format_checker', value=Attribute(value=Attribute(value=Name(id='jsonschema', ctx=Load()), attr='Draft4Validator', ctx=Load()), attr='FORMAT_CHECKER', ctx=Load())), keyword(arg='skip', value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='test')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=BoolOp(op=Or(), values=[Call(func=Name(id='allowed_leading_zeros', ctx=Load()), args=[Name(id='test', ctx=Load())], keywords=[]), Call(func=Name(id='leap_second', ctx=Load()), args=[Name(id='test', ctx=Load())], keywords=[]), Call(func=Call(func=Name(id='missing_format', ctx=Load()), args=[Attribute(value=Name(id='jsonschema', ctx=Load()), attr='Draft4Validator', ctx=Load())], keywords=[]), args=[Name(id='test', ctx=Load())], keywords=[]), Call(func=Name(id='complex_email_validation', ctx=Load()), args=[Name(id='test', ctx=Load())], keywords=[])])))])), Assign(targets=[Name(id='TestDraft6', ctx=Store())], value=Call(func=Attribute(value=Name(id='DRAFT6', ctx=Load()), attr='to_unittest_testcase', ctx=Load()), args=[Call(func=Attribute(value=Name(id='DRAFT6', ctx=Load()), attr='cases', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='DRAFT6', ctx=Load()), attr='format_cases', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='DRAFT6', ctx=Load()), attr='optional_cases_of', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='bignum'))]), Call(func=Attribute(value=Name(id='DRAFT6', ctx=Load()), attr='optional_cases_of', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='float-overflow'))]), Call(func=Attribute(value=Name(id='DRAFT6', ctx=Load()), attr='optional_cases_of', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='non-bmp-regex'))])], keywords=[keyword(arg='Validator', value=Attribute(value=Name(id='jsonschema', ctx=Load()), attr='Draft6Validator', ctx=Load())), keyword(arg='format_checker', value=Attribute(value=Attribute(value=Name(id='jsonschema', ctx=Load()), attr='Draft6Validator', ctx=Load()), attr='FORMAT_CHECKER', ctx=Load())), keyword(arg='skip', value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='test')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=BoolOp(op=Or(), values=[Call(func=Name(id='allowed_leading_zeros', ctx=Load()), args=[Name(id='test', ctx=Load())], keywords=[]), Call(func=Name(id='leap_second', ctx=Load()), args=[Name(id='test', ctx=Load())], keywords=[]), Call(func=Call(func=Name(id='missing_format', ctx=Load()), args=[Attribute(value=Name(id='jsonschema', ctx=Load()), attr='Draft6Validator', ctx=Load())], keywords=[]), args=[Name(id='test', ctx=Load())], keywords=[]), Call(func=Name(id='complex_email_validation', ctx=Load()), args=[Name(id='test', ctx=Load())], keywords=[])])))])), Assign(targets=[Name(id='TestDraft7', ctx=Store())], value=Call(func=Attribute(value=Name(id='DRAFT7', ctx=Load()), attr='to_unittest_testcase', ctx=Load()), args=[Call(func=Attribute(value=Name(id='DRAFT7', ctx=Load()), attr='cases', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='DRAFT7', ctx=Load()), attr='format_cases', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='DRAFT7', ctx=Load()), attr='optional_cases_of', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='bignum'))]), Call(func=Attribute(value=Name(id='DRAFT7', ctx=Load()), attr='optional_cases_of', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='cross-draft'))]), Call(func=Attribute(value=Name(id='DRAFT7', ctx=Load()), attr='optional_cases_of', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='float-overflow'))]), Call(func=Attribute(value=Name(id='DRAFT7', ctx=Load()), attr='optional_cases_of', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='non-bmp-regex'))])], keywords=[keyword(arg='Validator', value=Attribute(value=Name(id='jsonschema', ctx=Load()), attr='Draft7Validator', ctx=Load())), keyword(arg='format_checker', value=Attribute(value=Attribute(value=Name(id='jsonschema', ctx=Load()), attr='Draft7Validator', ctx=Load()), attr='FORMAT_CHECKER', ctx=Load())), keyword(arg='skip', value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='test')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=BoolOp(op=Or(), values=[Call(func=Name(id='allowed_leading_zeros', ctx=Load()), args=[Name(id='test', ctx=Load())], keywords=[]), Call(func=Name(id='leap_second', ctx=Load()), args=[Name(id='test', ctx=Load())], keywords=[]), Call(func=Call(func=Name(id='missing_format', ctx=Load()), args=[Attribute(value=Name(id='jsonschema', ctx=Load()), attr='Draft7Validator', ctx=Load())], keywords=[]), args=[Name(id='test', ctx=Load())], keywords=[]), Call(func=Name(id='complex_email_validation', ctx=Load()), args=[Name(id='test', ctx=Load())], keywords=[])])))])), Assign(targets=[Name(id='TestDraft201909', ctx=Store())], value=Call(func=Attribute(value=Name(id='DRAFT201909', ctx=Load()), attr='to_unittest_testcase', ctx=Load()), args=[Call(func=Attribute(value=Name(id='DRAFT201909', ctx=Load()), attr='cases', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='DRAFT201909', ctx=Load()), attr='optional_cases_of', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='bignum'))]), Call(func=Attribute(value=Name(id='DRAFT201909', ctx=Load()), attr='optional_cases_of', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='cross-draft'))]), Call(func=Attribute(value=Name(id='DRAFT201909', ctx=Load()), attr='optional_cases_of', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='float-overflow'))]), Call(func=Attribute(value=Name(id='DRAFT201909', ctx=Load()), attr='optional_cases_of', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='non-bmp-regex'))]), Call(func=Attribute(value=Name(id='DRAFT201909', ctx=Load()), attr='optional_cases_of', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='refOfUnknownKeyword'))])], keywords=[keyword(arg='Validator', value=Attribute(value=Name(id='jsonschema', ctx=Load()), attr='Draft201909Validator', ctx=Load())), keyword(arg='skip', value=Call(func=Name(id='skip', ctx=Load()), args=[], keywords=[keyword(arg='message', value=Constant(value='Vocabulary support is still in-progress.')), keyword(arg='subject', value=Constant(value='vocabulary')), keyword(arg='description', value=Constant(value='no validation: invalid number, but it still validates'))]))])), Assign(targets=[Name(id='TestDraft201909Format', ctx=Store())], value=Call(func=Attribute(value=Name(id='DRAFT201909', ctx=Load()), attr='to_unittest_testcase', ctx=Load()), args=[Call(func=Attribute(value=Name(id='DRAFT201909', ctx=Load()), attr='format_cases', ctx=Load()), args=[], keywords=[])], keywords=[keyword(arg='name', value=Constant(value='TestDraft201909Format')), keyword(arg='Validator', value=Attribute(value=Name(id='jsonschema', ctx=Load()), attr='Draft201909Validator', ctx=Load())), keyword(arg='format_checker', value=Attribute(value=Attribute(value=Name(id='jsonschema', ctx=Load()), attr='Draft201909Validator', ctx=Load()), attr='FORMAT_CHECKER', ctx=Load())), keyword(arg='skip', value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='test')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=BoolOp(op=Or(), values=[Call(func=Name(id='complex_email_validation', ctx=Load()), args=[Name(id='test', ctx=Load())], keywords=[]), Call(func=Name(id='allowed_leading_zeros', ctx=Load()), args=[Name(id='test', ctx=Load())], keywords=[]), Call(func=Name(id='leap_second', ctx=Load()), args=[Name(id='test', ctx=Load())], keywords=[]), Call(func=Call(func=Name(id='missing_format', ctx=Load()), args=[Attribute(value=Name(id='jsonschema', ctx=Load()), attr='Draft201909Validator', ctx=Load())], keywords=[]), args=[Name(id='test', ctx=Load())], keywords=[]), Call(func=Name(id='complex_email_validation', ctx=Load()), args=[Name(id='test', ctx=Load())], keywords=[])])))])), Assign(targets=[Name(id='TestDraft202012', ctx=Store())], value=Call(func=Attribute(value=Name(id='DRAFT202012', ctx=Load()), attr='to_unittest_testcase', ctx=Load()), args=[Call(func=Attribute(value=Name(id='DRAFT202012', ctx=Load()), attr='cases', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='DRAFT202012', ctx=Load()), attr='optional_cases_of', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='bignum'))]), Call(func=Attribute(value=Name(id='DRAFT202012', ctx=Load()), attr='optional_cases_of', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='cross-draft'))]), Call(func=Attribute(value=Name(id='DRAFT202012', ctx=Load()), attr='optional_cases_of', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='float-overflow'))]), Call(func=Attribute(value=Name(id='DRAFT202012', ctx=Load()), attr='optional_cases_of', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='non-bmp-regex'))]), Call(func=Attribute(value=Name(id='DRAFT202012', ctx=Load()), attr='optional_cases_of', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Constant(value='refOfUnknownKeyword'))])], keywords=[keyword(arg='Validator', value=Attribute(value=Name(id='jsonschema', ctx=Load()), attr='Draft202012Validator', ctx=Load())), keyword(arg='skip', value=Call(func=Name(id='skip', ctx=Load()), args=[], keywords=[keyword(arg='message', value=Constant(value='Vocabulary support is still in-progress.')), keyword(arg='subject', value=Constant(value='vocabulary')), keyword(arg='description', value=Constant(value='no validation: invalid number, but it still validates'))]))])), Assign(targets=[Name(id='TestDraft202012Format', ctx=Store())], value=Call(func=Attribute(value=Name(id='DRAFT202012', ctx=Load()), attr='to_unittest_testcase', ctx=Load()), args=[Call(func=Attribute(value=Name(id='DRAFT202012', ctx=Load()), attr='format_cases', ctx=Load()), args=[], keywords=[])], keywords=[keyword(arg='name', value=Constant(value='TestDraft202012Format')), keyword(arg='Validator', value=Attribute(value=Name(id='jsonschema', ctx=Load()), attr='Draft202012Validator', ctx=Load())), keyword(arg='format_checker', value=Attribute(value=Attribute(value=Name(id='jsonschema', ctx=Load()), attr='Draft202012Validator', ctx=Load()), attr='FORMAT_CHECKER', ctx=Load())), keyword(arg='skip', value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='test')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=BoolOp(op=Or(), values=[Call(func=Name(id='complex_email_validation', ctx=Load()), args=[Name(id='test', ctx=Load())], keywords=[]), Call(func=Name(id='allowed_leading_zeros', ctx=Load()), args=[Name(id='test', ctx=Load())], keywords=[]), Call(func=Name(id='leap_second', ctx=Load()), args=[Name(id='test', ctx=Load())], keywords=[]), Call(func=Call(func=Name(id='missing_format', ctx=Load()), args=[Attribute(value=Name(id='jsonschema', ctx=Load()), attr='Draft202012Validator', ctx=Load())], keywords=[]), args=[Name(id='test', ctx=Load())], keywords=[]), Call(func=Name(id='complex_email_validation', ctx=Load()), args=[Name(id='test', ctx=Load())], keywords=[])])))]))], type_ignores=[])