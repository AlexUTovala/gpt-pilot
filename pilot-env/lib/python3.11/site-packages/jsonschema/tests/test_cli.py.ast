Module(body=[ImportFrom(module='contextlib', names=[alias(name='redirect_stderr'), alias(name='redirect_stdout')], level=0), ImportFrom(module='importlib', names=[alias(name='metadata')], level=0), ImportFrom(module='io', names=[alias(name='StringIO')], level=0), ImportFrom(module='json', names=[alias(name='JSONDecodeError')], level=0), ImportFrom(module='pathlib', names=[alias(name='Path')], level=0), ImportFrom(module='textwrap', names=[alias(name='dedent')], level=0), ImportFrom(module='unittest', names=[alias(name='TestCase')], level=0), Import(names=[alias(name='json')]), Import(names=[alias(name='os')]), Import(names=[alias(name='subprocess')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='tempfile')]), Import(names=[alias(name='warnings')]), ImportFrom(module='jsonschema', names=[alias(name='Draft4Validator'), alias(name='Draft202012Validator')], level=0), ImportFrom(module='jsonschema.exceptions', names=[alias(name='SchemaError'), alias(name='ValidationError'), alias(name='_RefResolutionError')], level=0), ImportFrom(module='jsonschema.validators', names=[alias(name='_LATEST_VERSION'), alias(name='validate')], level=0), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='catch_warnings', ctx=Load()), args=[], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='simplefilter', ctx=Load()), args=[Constant(value='ignore')], keywords=[])), ImportFrom(module='jsonschema', names=[alias(name='cli')], level=0)]), FunctionDef(name='fake_validator', args=arguments(posonlyargs=[], args=[], vararg=arg(arg='errors'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='errors', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='reversed', ctx=Load()), args=[Name(id='errors', ctx=Load())], keywords=[])], keywords=[])), ClassDef(name='FakeValidator', bases=[], keywords=[], body=[FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Pass()], decorator_list=[]), FunctionDef(name='iter_errors', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='instance')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Name(id='errors', ctx=Load()), body=[Return(value=Call(func=Attribute(value=Name(id='errors', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=List(elts=[], ctx=Load()))], decorator_list=[]), FunctionDef(name='check_schema', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='schema')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Pass()], decorator_list=[Name(id='classmethod', ctx=Load())])], decorator_list=[]), Return(value=Name(id='FakeValidator', ctx=Load()))], decorator_list=[]), FunctionDef(name='fake_open', args=arguments(posonlyargs=[], args=[arg(arg='all_contents')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='open', args=arguments(posonlyargs=[], args=[arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='contents', ctx=Store())], value=Call(func=Attribute(value=Name(id='all_contents', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='contents', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='FileNotFoundError', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='StringIO', ctx=Load()), args=[Name(id='contents', ctx=Load())], keywords=[]))], decorator_list=[]), Return(value=Name(id='open', ctx=Load()))], decorator_list=[]), FunctionDef(name='_message_for', args=arguments(posonlyargs=[], args=[arg(arg='non_json')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='loads', ctx=Load()), args=[Name(id='non_json', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='JSONDecodeError', ctx=Load()), name='error', body=[Return(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[]))])], orelse=[Raise(exc=Call(func=Name(id='RuntimeError', ctx=Load()), args=[Constant(value='Tried and failed to capture a JSON dump error.')], keywords=[]))], finalbody=[])], decorator_list=[]), ClassDef(name='TestCLI', bases=[Name(id='TestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='run_cli', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='argv'), arg(arg='files'), arg(arg='stdin'), arg(arg='exit_code')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='override'), defaults=[Constant(value=None), Call(func=Name(id='StringIO', ctx=Load()), args=[], keywords=[]), Constant(value=0)]), body=[Assign(targets=[Name(id='arguments', ctx=Store())], value=Call(func=Attribute(value=Name(id='cli', ctx=Load()), attr='parse_args', ctx=Load()), args=[Name(id='argv', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='arguments', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='override', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertFalse', ctx=Load()), args=[Call(func=Name(id='hasattr', ctx=Load()), args=[Name(id='cli', ctx=Load()), Constant(value='open')], keywords=[])], keywords=[])), Assign(targets=[Attribute(value=Name(id='cli', ctx=Load()), attr='open', ctx=Store())], value=Call(func=Name(id='fake_open', ctx=Load()), args=[BoolOp(op=Or(), values=[Name(id='files', ctx=Load()), Dict(keys=[], values=[])])], keywords=[])), Try(body=[Assign(targets=[Tuple(elts=[Name(id='stdout', ctx=Store()), Name(id='stderr', ctx=Store())], ctx=Store())], value=Tuple(elts=[Call(func=Name(id='StringIO', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='StringIO', ctx=Load()), args=[], keywords=[])], ctx=Load())), Assign(targets=[Name(id='actual_exit_code', ctx=Store())], value=Call(func=Attribute(value=Name(id='cli', ctx=Load()), attr='run', ctx=Load()), args=[Name(id='arguments', ctx=Load())], keywords=[keyword(arg='stdin', value=Name(id='stdin', ctx=Load())), keyword(arg='stdout', value=Name(id='stdout', ctx=Load())), keyword(arg='stderr', value=Name(id='stderr', ctx=Load()))]))], handlers=[], orelse=[], finalbody=[Delete(targets=[Attribute(value=Name(id='cli', ctx=Load()), attr='open', ctx=Del())])]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='actual_exit_code', ctx=Load()), Name(id='exit_code', ctx=Load())], keywords=[keyword(arg='msg', value=Call(func=Name(id='dedent', ctx=Load()), args=[JoinedStr(values=[Constant(value='\n                    Expected an exit code of '), FormattedValue(value=Name(id='exit_code', ctx=Load()), conversion=-1), Constant(value=' != '), FormattedValue(value=Name(id='actual_exit_code', ctx=Load()), conversion=-1), Constant(value='.\n\n                    stdout: '), FormattedValue(value=Call(func=Attribute(value=Name(id='stdout', ctx=Load()), attr='getvalue', ctx=Load()), args=[], keywords=[]), conversion=-1), Constant(value='\n\n                    stderr: '), FormattedValue(value=Call(func=Attribute(value=Name(id='stderr', ctx=Load()), attr='getvalue', ctx=Load()), args=[], keywords=[]), conversion=-1), Constant(value='\n                ')])], keywords=[]))])), Return(value=Tuple(elts=[Call(func=Attribute(value=Name(id='stdout', ctx=Load()), attr='getvalue', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='stderr', ctx=Load()), attr='getvalue', ctx=Load()), args=[], keywords=[])], ctx=Load()))], decorator_list=[]), FunctionDef(name='assertOutputs', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='stdout'), arg(arg='stderr')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[Constant(value=''), Constant(value='')]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='run_cli', ctx=Load()), args=[], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]), Tuple(elts=[Call(func=Name(id='dedent', ctx=Load()), args=[Name(id='stdout', ctx=Load())], keywords=[]), Call(func=Name(id='dedent', ctx=Load()), args=[Name(id='stderr', ctx=Load())], keywords=[])], ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_invalid_instance', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='error', ctx=Store())], value=Call(func=Name(id='ValidationError', ctx=Load()), args=[Constant(value='I am an error!')], keywords=[keyword(arg='instance', value=Constant(value=12))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertOutputs', ctx=Load()), args=[], keywords=[keyword(arg='files', value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='some_schema', value=Constant(value='{"does not": "matter since it is stubbed"}')), keyword(arg='some_instance', value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dumps', ctx=Load()), args=[Attribute(value=Name(id='error', ctx=Load()), attr='instance', ctx=Load())], keywords=[]))])), keyword(arg='validator', value=Call(func=Name(id='fake_validator', ctx=Load()), args=[List(elts=[Name(id='error', ctx=Load())], ctx=Load())], keywords=[])), keyword(arg='argv', value=List(elts=[Constant(value='-i'), Constant(value='some_instance'), Constant(value='some_schema')], ctx=Load())), keyword(arg='exit_code', value=Constant(value=1)), keyword(arg='stderr', value=Constant(value='12: I am an error!\n'))]))], decorator_list=[]), FunctionDef(name='test_invalid_instance_pretty_output', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='error', ctx=Store())], value=Call(func=Name(id='ValidationError', ctx=Load()), args=[Constant(value='I am an error!')], keywords=[keyword(arg='instance', value=Constant(value=12))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertOutputs', ctx=Load()), args=[], keywords=[keyword(arg='files', value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='some_schema', value=Constant(value='{"does not": "matter since it is stubbed"}')), keyword(arg='some_instance', value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dumps', ctx=Load()), args=[Attribute(value=Name(id='error', ctx=Load()), attr='instance', ctx=Load())], keywords=[]))])), keyword(arg='validator', value=Call(func=Name(id='fake_validator', ctx=Load()), args=[List(elts=[Name(id='error', ctx=Load())], ctx=Load())], keywords=[])), keyword(arg='argv', value=List(elts=[Constant(value='-i'), Constant(value='some_instance'), Constant(value='--output'), Constant(value='pretty'), Constant(value='some_schema')], ctx=Load())), keyword(arg='exit_code', value=Constant(value=1)), keyword(arg='stderr', value=Constant(value='                ===[ValidationError]===(some_instance)===\n\n                I am an error!\n                -----------------------------\n            '))]))], decorator_list=[]), FunctionDef(name='test_invalid_instance_explicit_plain_output', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='error', ctx=Store())], value=Call(func=Name(id='ValidationError', ctx=Load()), args=[Constant(value='I am an error!')], keywords=[keyword(arg='instance', value=Constant(value=12))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertOutputs', ctx=Load()), args=[], keywords=[keyword(arg='files', value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='some_schema', value=Constant(value='{"does not": "matter since it is stubbed"}')), keyword(arg='some_instance', value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dumps', ctx=Load()), args=[Attribute(value=Name(id='error', ctx=Load()), attr='instance', ctx=Load())], keywords=[]))])), keyword(arg='validator', value=Call(func=Name(id='fake_validator', ctx=Load()), args=[List(elts=[Name(id='error', ctx=Load())], ctx=Load())], keywords=[])), keyword(arg='argv', value=List(elts=[Constant(value='--output'), Constant(value='plain'), Constant(value='-i'), Constant(value='some_instance'), Constant(value='some_schema')], ctx=Load())), keyword(arg='exit_code', value=Constant(value=1)), keyword(arg='stderr', value=Constant(value='12: I am an error!\n'))]))], decorator_list=[]), FunctionDef(name='test_invalid_instance_multiple_errors', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='instance', ctx=Store())], value=Constant(value=12)), Assign(targets=[Name(id='first', ctx=Store())], value=Call(func=Name(id='ValidationError', ctx=Load()), args=[Constant(value='First error')], keywords=[keyword(arg='instance', value=Name(id='instance', ctx=Load()))])), Assign(targets=[Name(id='second', ctx=Store())], value=Call(func=Name(id='ValidationError', ctx=Load()), args=[Constant(value='Second error')], keywords=[keyword(arg='instance', value=Name(id='instance', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertOutputs', ctx=Load()), args=[], keywords=[keyword(arg='files', value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='some_schema', value=Constant(value='{"does not": "matter since it is stubbed"}')), keyword(arg='some_instance', value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dumps', ctx=Load()), args=[Name(id='instance', ctx=Load())], keywords=[]))])), keyword(arg='validator', value=Call(func=Name(id='fake_validator', ctx=Load()), args=[List(elts=[Name(id='first', ctx=Load()), Name(id='second', ctx=Load())], ctx=Load())], keywords=[])), keyword(arg='argv', value=List(elts=[Constant(value='-i'), Constant(value='some_instance'), Constant(value='some_schema')], ctx=Load())), keyword(arg='exit_code', value=Constant(value=1)), keyword(arg='stderr', value=Constant(value='                12: First error\n                12: Second error\n            '))]))], decorator_list=[]), FunctionDef(name='test_invalid_instance_multiple_errors_pretty_output', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='instance', ctx=Store())], value=Constant(value=12)), Assign(targets=[Name(id='first', ctx=Store())], value=Call(func=Name(id='ValidationError', ctx=Load()), args=[Constant(value='First error')], keywords=[keyword(arg='instance', value=Name(id='instance', ctx=Load()))])), Assign(targets=[Name(id='second', ctx=Store())], value=Call(func=Name(id='ValidationError', ctx=Load()), args=[Constant(value='Second error')], keywords=[keyword(arg='instance', value=Name(id='instance', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertOutputs', ctx=Load()), args=[], keywords=[keyword(arg='files', value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='some_schema', value=Constant(value='{"does not": "matter since it is stubbed"}')), keyword(arg='some_instance', value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dumps', ctx=Load()), args=[Name(id='instance', ctx=Load())], keywords=[]))])), keyword(arg='validator', value=Call(func=Name(id='fake_validator', ctx=Load()), args=[List(elts=[Name(id='first', ctx=Load()), Name(id='second', ctx=Load())], ctx=Load())], keywords=[])), keyword(arg='argv', value=List(elts=[Constant(value='-i'), Constant(value='some_instance'), Constant(value='--output'), Constant(value='pretty'), Constant(value='some_schema')], ctx=Load())), keyword(arg='exit_code', value=Constant(value=1)), keyword(arg='stderr', value=Constant(value='                ===[ValidationError]===(some_instance)===\n\n                First error\n                -----------------------------\n                ===[ValidationError]===(some_instance)===\n\n                Second error\n                -----------------------------\n            '))]))], decorator_list=[]), FunctionDef(name='test_multiple_invalid_instances', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='first_instance', ctx=Store())], value=Constant(value=12)), Assign(targets=[Name(id='first_errors', ctx=Store())], value=List(elts=[Call(func=Name(id='ValidationError', ctx=Load()), args=[Constant(value='An error')], keywords=[keyword(arg='instance', value=Name(id='first_instance', ctx=Load()))]), Call(func=Name(id='ValidationError', ctx=Load()), args=[Constant(value='Another error')], keywords=[keyword(arg='instance', value=Name(id='first_instance', ctx=Load()))])], ctx=Load())), Assign(targets=[Name(id='second_instance', ctx=Store())], value=Constant(value='foo')), Assign(targets=[Name(id='second_errors', ctx=Store())], value=List(elts=[Call(func=Name(id='ValidationError', ctx=Load()), args=[Constant(value='BOOM')], keywords=[keyword(arg='instance', value=Name(id='second_instance', ctx=Load()))])], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertOutputs', ctx=Load()), args=[], keywords=[keyword(arg='files', value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='some_schema', value=Constant(value='{"does not": "matter since it is stubbed"}')), keyword(arg='some_first_instance', value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dumps', ctx=Load()), args=[Name(id='first_instance', ctx=Load())], keywords=[])), keyword(arg='some_second_instance', value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dumps', ctx=Load()), args=[Name(id='second_instance', ctx=Load())], keywords=[]))])), keyword(arg='validator', value=Call(func=Name(id='fake_validator', ctx=Load()), args=[Name(id='first_errors', ctx=Load()), Name(id='second_errors', ctx=Load())], keywords=[])), keyword(arg='argv', value=List(elts=[Constant(value='-i'), Constant(value='some_first_instance'), Constant(value='-i'), Constant(value='some_second_instance'), Constant(value='some_schema')], ctx=Load())), keyword(arg='exit_code', value=Constant(value=1)), keyword(arg='stderr', value=Constant(value='                12: An error\n                12: Another error\n                foo: BOOM\n            '))]))], decorator_list=[]), FunctionDef(name='test_multiple_invalid_instances_pretty_output', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='first_instance', ctx=Store())], value=Constant(value=12)), Assign(targets=[Name(id='first_errors', ctx=Store())], value=List(elts=[Call(func=Name(id='ValidationError', ctx=Load()), args=[Constant(value='An error')], keywords=[keyword(arg='instance', value=Name(id='first_instance', ctx=Load()))]), Call(func=Name(id='ValidationError', ctx=Load()), args=[Constant(value='Another error')], keywords=[keyword(arg='instance', value=Name(id='first_instance', ctx=Load()))])], ctx=Load())), Assign(targets=[Name(id='second_instance', ctx=Store())], value=Constant(value='foo')), Assign(targets=[Name(id='second_errors', ctx=Store())], value=List(elts=[Call(func=Name(id='ValidationError', ctx=Load()), args=[Constant(value='BOOM')], keywords=[keyword(arg='instance', value=Name(id='second_instance', ctx=Load()))])], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertOutputs', ctx=Load()), args=[], keywords=[keyword(arg='files', value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='some_schema', value=Constant(value='{"does not": "matter since it is stubbed"}')), keyword(arg='some_first_instance', value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dumps', ctx=Load()), args=[Name(id='first_instance', ctx=Load())], keywords=[])), keyword(arg='some_second_instance', value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dumps', ctx=Load()), args=[Name(id='second_instance', ctx=Load())], keywords=[]))])), keyword(arg='validator', value=Call(func=Name(id='fake_validator', ctx=Load()), args=[Name(id='first_errors', ctx=Load()), Name(id='second_errors', ctx=Load())], keywords=[])), keyword(arg='argv', value=List(elts=[Constant(value='--output'), Constant(value='pretty'), Constant(value='-i'), Constant(value='some_first_instance'), Constant(value='-i'), Constant(value='some_second_instance'), Constant(value='some_schema')], ctx=Load())), keyword(arg='exit_code', value=Constant(value=1)), keyword(arg='stderr', value=Constant(value='                ===[ValidationError]===(some_first_instance)===\n\n                An error\n                -----------------------------\n                ===[ValidationError]===(some_first_instance)===\n\n                Another error\n                -----------------------------\n                ===[ValidationError]===(some_second_instance)===\n\n                BOOM\n                -----------------------------\n            '))]))], decorator_list=[]), FunctionDef(name='test_custom_error_format', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='first_instance', ctx=Store())], value=Constant(value=12)), Assign(targets=[Name(id='first_errors', ctx=Store())], value=List(elts=[Call(func=Name(id='ValidationError', ctx=Load()), args=[Constant(value='An error')], keywords=[keyword(arg='instance', value=Name(id='first_instance', ctx=Load()))]), Call(func=Name(id='ValidationError', ctx=Load()), args=[Constant(value='Another error')], keywords=[keyword(arg='instance', value=Name(id='first_instance', ctx=Load()))])], ctx=Load())), Assign(targets=[Name(id='second_instance', ctx=Store())], value=Constant(value='foo')), Assign(targets=[Name(id='second_errors', ctx=Store())], value=List(elts=[Call(func=Name(id='ValidationError', ctx=Load()), args=[Constant(value='BOOM')], keywords=[keyword(arg='instance', value=Name(id='second_instance', ctx=Load()))])], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertOutputs', ctx=Load()), args=[], keywords=[keyword(arg='files', value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='some_schema', value=Constant(value='{"does not": "matter since it is stubbed"}')), keyword(arg='some_first_instance', value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dumps', ctx=Load()), args=[Name(id='first_instance', ctx=Load())], keywords=[])), keyword(arg='some_second_instance', value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dumps', ctx=Load()), args=[Name(id='second_instance', ctx=Load())], keywords=[]))])), keyword(arg='validator', value=Call(func=Name(id='fake_validator', ctx=Load()), args=[Name(id='first_errors', ctx=Load()), Name(id='second_errors', ctx=Load())], keywords=[])), keyword(arg='argv', value=List(elts=[Constant(value='--error-format'), Constant(value=':{error.message}._-_.{error.instance}:'), Constant(value='-i'), Constant(value='some_first_instance'), Constant(value='-i'), Constant(value='some_second_instance'), Constant(value='some_schema')], ctx=Load())), keyword(arg='exit_code', value=Constant(value=1)), keyword(arg='stderr', value=Constant(value=':An error._-_.12::Another error._-_.12::BOOM._-_.foo:'))]))], decorator_list=[]), FunctionDef(name='test_invalid_schema', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertOutputs', ctx=Load()), args=[], keywords=[keyword(arg='files', value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='some_schema', value=Constant(value='{"type": 12}'))])), keyword(arg='argv', value=List(elts=[Constant(value='some_schema')], ctx=Load())), keyword(arg='exit_code', value=Constant(value=1)), keyword(arg='stderr', value=Constant(value='                12: 12 is not valid under any of the given schemas\n            '))]))], decorator_list=[]), FunctionDef(name='test_invalid_schema_pretty_output', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='type')], values=[Constant(value=12)])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='SchemaError', ctx=Load())], keywords=[]), optional_vars=Name(id='e', ctx=Store()))], body=[Expr(value=Call(func=Name(id='validate', ctx=Load()), args=[], keywords=[keyword(arg='schema', value=Name(id='schema', ctx=Load())), keyword(arg='instance', value=Constant(value=''))]))]), Assign(targets=[Name(id='error', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='e', ctx=Load()), attr='exception', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertOutputs', ctx=Load()), args=[], keywords=[keyword(arg='files', value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='some_schema', value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dumps', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[]))])), keyword(arg='argv', value=List(elts=[Constant(value='--output'), Constant(value='pretty'), Constant(value='some_schema')], ctx=Load())), keyword(arg='exit_code', value=Constant(value=1)), keyword(arg='stderr', value=BinOp(left=BinOp(left=Constant(value='===[SchemaError]===(some_schema)===\n\n'), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), op=Add(), right=Constant(value='\n-----------------------------\n')))]))], decorator_list=[]), FunctionDef(name='test_invalid_schema_multiple_errors', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertOutputs', ctx=Load()), args=[], keywords=[keyword(arg='files', value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='some_schema', value=Constant(value='{"type": 12, "items": 57}'))])), keyword(arg='argv', value=List(elts=[Constant(value='some_schema')], ctx=Load())), keyword(arg='exit_code', value=Constant(value=1)), keyword(arg='stderr', value=Constant(value="                57: 57 is not of type 'object', 'boolean'\n            "))]))], decorator_list=[]), FunctionDef(name='test_invalid_schema_multiple_errors_pretty_output', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='type'), Constant(value='items')], values=[Constant(value=12), Constant(value=57)])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='SchemaError', ctx=Load())], keywords=[]), optional_vars=Name(id='e', ctx=Store()))], body=[Expr(value=Call(func=Name(id='validate', ctx=Load()), args=[], keywords=[keyword(arg='schema', value=Name(id='schema', ctx=Load())), keyword(arg='instance', value=Constant(value=''))]))]), Assign(targets=[Name(id='error', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='e', ctx=Load()), attr='exception', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertOutputs', ctx=Load()), args=[], keywords=[keyword(arg='files', value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='some_schema', value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dumps', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[]))])), keyword(arg='argv', value=List(elts=[Constant(value='--output'), Constant(value='pretty'), Constant(value='some_schema')], ctx=Load())), keyword(arg='exit_code', value=Constant(value=1)), keyword(arg='stderr', value=BinOp(left=BinOp(left=Constant(value='===[SchemaError]===(some_schema)===\n\n'), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), op=Add(), right=Constant(value='\n-----------------------------\n')))]))], decorator_list=[]), FunctionDef(name='test_invalid_schema_with_invalid_instance', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        "Validating" an instance that\'s invalid under an invalid schema\n        just shows the schema error.\n        ')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertOutputs', ctx=Load()), args=[], keywords=[keyword(arg='files', value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='some_schema', value=Constant(value='{"type": 12, "minimum": 30}')), keyword(arg='some_instance', value=Constant(value='13'))])), keyword(arg='argv', value=List(elts=[Constant(value='-i'), Constant(value='some_instance'), Constant(value='some_schema')], ctx=Load())), keyword(arg='exit_code', value=Constant(value=1)), keyword(arg='stderr', value=Constant(value='                12: 12 is not valid under any of the given schemas\n            '))]))], decorator_list=[]), FunctionDef(name='test_invalid_schema_with_invalid_instance_pretty_output', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='instance', ctx=Store()), Name(id='schema', ctx=Store())], ctx=Store())], value=Tuple(elts=[Constant(value=13), Dict(keys=[Constant(value='type'), Constant(value='minimum')], values=[Constant(value=12), Constant(value=30)])], ctx=Load())), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='SchemaError', ctx=Load())], keywords=[]), optional_vars=Name(id='e', ctx=Store()))], body=[Expr(value=Call(func=Name(id='validate', ctx=Load()), args=[], keywords=[keyword(arg='schema', value=Name(id='schema', ctx=Load())), keyword(arg='instance', value=Name(id='instance', ctx=Load()))]))]), Assign(targets=[Name(id='error', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='e', ctx=Load()), attr='exception', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertOutputs', ctx=Load()), args=[], keywords=[keyword(arg='files', value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='some_schema', value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dumps', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[])), keyword(arg='some_instance', value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dumps', ctx=Load()), args=[Name(id='instance', ctx=Load())], keywords=[]))])), keyword(arg='argv', value=List(elts=[Constant(value='--output'), Constant(value='pretty'), Constant(value='-i'), Constant(value='some_instance'), Constant(value='some_schema')], ctx=Load())), keyword(arg='exit_code', value=Constant(value=1)), keyword(arg='stderr', value=BinOp(left=BinOp(left=Constant(value='===[SchemaError]===(some_schema)===\n\n'), op=Add(), right=Call(func=Name(id='str', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])), op=Add(), right=Constant(value='\n-----------------------------\n')))]))], decorator_list=[]), FunctionDef(name='test_invalid_instance_continues_with_the_rest', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertOutputs', ctx=Load()), args=[], keywords=[keyword(arg='files', value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='some_schema', value=Constant(value='{"minimum": 30}')), keyword(arg='first_instance', value=Constant(value='not valid JSON!')), keyword(arg='second_instance', value=Constant(value='12'))])), keyword(arg='argv', value=List(elts=[Constant(value='-i'), Constant(value='first_instance'), Constant(value='-i'), Constant(value='second_instance'), Constant(value='some_schema')], ctx=Load())), keyword(arg='exit_code', value=Constant(value=1)), keyword(arg='stderr', value=Call(func=Attribute(value=Constant(value="                Failed to parse 'first_instance': {}\n                12: 12 is less than the minimum of 30\n            "), attr='format', ctx=Load()), args=[Call(func=Name(id='_message_for', ctx=Load()), args=[Constant(value='not valid JSON!')], keywords=[])], keywords=[]))]))], decorator_list=[]), FunctionDef(name='test_custom_error_format_applies_to_schema_errors', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='instance', ctx=Store()), Name(id='schema', ctx=Store())], ctx=Store())], value=Tuple(elts=[Constant(value=13), Dict(keys=[Constant(value='type'), Constant(value='minimum')], values=[Constant(value=12), Constant(value=30)])], ctx=Load())), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='SchemaError', ctx=Load())], keywords=[]))], body=[Expr(value=Call(func=Name(id='validate', ctx=Load()), args=[], keywords=[keyword(arg='schema', value=Name(id='schema', ctx=Load())), keyword(arg='instance', value=Name(id='instance', ctx=Load()))]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertOutputs', ctx=Load()), args=[], keywords=[keyword(arg='files', value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='some_schema', value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dumps', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[]))])), keyword(arg='argv', value=List(elts=[Constant(value='--error-format'), Constant(value=':{error.message}._-_.{error.instance}:'), Constant(value='some_schema')], ctx=Load())), keyword(arg='exit_code', value=Constant(value=1)), keyword(arg='stderr', value=Constant(value=':12 is not valid under any of the given schemas._-_.12:'))]))], decorator_list=[]), FunctionDef(name='test_instance_is_invalid_JSON', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='instance', ctx=Store())], value=Constant(value='not valid JSON!')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertOutputs', ctx=Load()), args=[], keywords=[keyword(arg='files', value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='some_schema', value=Constant(value='{}')), keyword(arg='some_instance', value=Name(id='instance', ctx=Load()))])), keyword(arg='argv', value=List(elts=[Constant(value='-i'), Constant(value='some_instance'), Constant(value='some_schema')], ctx=Load())), keyword(arg='exit_code', value=Constant(value=1)), keyword(arg='stderr', value=JoinedStr(values=[Constant(value="                Failed to parse 'some_instance': "), FormattedValue(value=Call(func=Name(id='_message_for', ctx=Load()), args=[Name(id='instance', ctx=Load())], keywords=[]), conversion=-1), Constant(value='\n            ')]))]))], decorator_list=[]), FunctionDef(name='test_instance_is_invalid_JSON_pretty_output', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='stdout', ctx=Store()), Name(id='stderr', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='run_cli', ctx=Load()), args=[], keywords=[keyword(arg='files', value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='some_schema', value=Constant(value='{}')), keyword(arg='some_instance', value=Constant(value='not valid JSON!'))])), keyword(arg='argv', value=List(elts=[Constant(value='--output'), Constant(value='pretty'), Constant(value='-i'), Constant(value='some_instance'), Constant(value='some_schema')], ctx=Load())), keyword(arg='exit_code', value=Constant(value=1))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertFalse', ctx=Load()), args=[Name(id='stdout', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Constant(value='(some_instance)===\n\nTraceback (most recent call last):\n'), Name(id='stderr', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertNotIn', ctx=Load()), args=[Constant(value='some_schema'), Name(id='stderr', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_instance_is_invalid_JSON_on_stdin', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='instance', ctx=Store())], value=Constant(value='not valid JSON!')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertOutputs', ctx=Load()), args=[], keywords=[keyword(arg='files', value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='some_schema', value=Constant(value='{}'))])), keyword(arg='stdin', value=Call(func=Name(id='StringIO', ctx=Load()), args=[Name(id='instance', ctx=Load())], keywords=[])), keyword(arg='argv', value=List(elts=[Constant(value='some_schema')], ctx=Load())), keyword(arg='exit_code', value=Constant(value=1)), keyword(arg='stderr', value=JoinedStr(values=[Constant(value='                Failed to parse <stdin>: '), FormattedValue(value=Call(func=Name(id='_message_for', ctx=Load()), args=[Name(id='instance', ctx=Load())], keywords=[]), conversion=-1), Constant(value='\n            ')]))]))], decorator_list=[]), FunctionDef(name='test_instance_is_invalid_JSON_on_stdin_pretty_output', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='stdout', ctx=Store()), Name(id='stderr', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='run_cli', ctx=Load()), args=[], keywords=[keyword(arg='files', value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='some_schema', value=Constant(value='{}'))])), keyword(arg='stdin', value=Call(func=Name(id='StringIO', ctx=Load()), args=[Constant(value='not valid JSON!')], keywords=[])), keyword(arg='argv', value=List(elts=[Constant(value='--output'), Constant(value='pretty'), Constant(value='some_schema')], ctx=Load())), keyword(arg='exit_code', value=Constant(value=1))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertFalse', ctx=Load()), args=[Name(id='stdout', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Constant(value='(<stdin>)===\n\nTraceback (most recent call last):\n'), Name(id='stderr', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertNotIn', ctx=Load()), args=[Constant(value='some_schema'), Name(id='stderr', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_schema_is_invalid_JSON', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='schema', ctx=Store())], value=Constant(value='not valid JSON!')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertOutputs', ctx=Load()), args=[], keywords=[keyword(arg='files', value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='some_schema', value=Name(id='schema', ctx=Load()))])), keyword(arg='argv', value=List(elts=[Constant(value='some_schema')], ctx=Load())), keyword(arg='exit_code', value=Constant(value=1)), keyword(arg='stderr', value=JoinedStr(values=[Constant(value="                Failed to parse 'some_schema': "), FormattedValue(value=Call(func=Name(id='_message_for', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[]), conversion=-1), Constant(value='\n            ')]))]))], decorator_list=[]), FunctionDef(name='test_schema_is_invalid_JSON_pretty_output', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='stdout', ctx=Store()), Name(id='stderr', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='run_cli', ctx=Load()), args=[], keywords=[keyword(arg='files', value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='some_schema', value=Constant(value='not valid JSON!'))])), keyword(arg='argv', value=List(elts=[Constant(value='--output'), Constant(value='pretty'), Constant(value='some_schema')], ctx=Load())), keyword(arg='exit_code', value=Constant(value=1))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertFalse', ctx=Load()), args=[Name(id='stdout', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Constant(value='(some_schema)===\n\nTraceback (most recent call last):\n'), Name(id='stderr', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_schema_and_instance_are_both_invalid_JSON', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Only the schema error is reported, as we abort immediately.\n        ')), Assign(targets=[Tuple(elts=[Name(id='schema', ctx=Store()), Name(id='instance', ctx=Store())], ctx=Store())], value=Tuple(elts=[Constant(value='not valid JSON!'), Constant(value='also not valid JSON!')], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertOutputs', ctx=Load()), args=[], keywords=[keyword(arg='files', value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='some_schema', value=Name(id='schema', ctx=Load())), keyword(arg='some_instance', value=Name(id='instance', ctx=Load()))])), keyword(arg='argv', value=List(elts=[Constant(value='some_schema')], ctx=Load())), keyword(arg='exit_code', value=Constant(value=1)), keyword(arg='stderr', value=JoinedStr(values=[Constant(value="                Failed to parse 'some_schema': "), FormattedValue(value=Call(func=Name(id='_message_for', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[]), conversion=-1), Constant(value='\n            ')]))]))], decorator_list=[]), FunctionDef(name='test_schema_and_instance_are_both_invalid_JSON_pretty_output', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Only the schema error is reported, as we abort immediately.\n        ')), Assign(targets=[Tuple(elts=[Name(id='stdout', ctx=Store()), Name(id='stderr', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='run_cli', ctx=Load()), args=[], keywords=[keyword(arg='files', value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='some_schema', value=Constant(value='not valid JSON!')), keyword(arg='some_instance', value=Constant(value='also not valid JSON!'))])), keyword(arg='argv', value=List(elts=[Constant(value='--output'), Constant(value='pretty'), Constant(value='-i'), Constant(value='some_instance'), Constant(value='some_schema')], ctx=Load())), keyword(arg='exit_code', value=Constant(value=1))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertFalse', ctx=Load()), args=[Name(id='stdout', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Constant(value='(some_schema)===\n\nTraceback (most recent call last):\n'), Name(id='stderr', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertNotIn', ctx=Load()), args=[Constant(value='some_instance'), Name(id='stderr', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_instance_does_not_exist', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertOutputs', ctx=Load()), args=[], keywords=[keyword(arg='files', value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='some_schema', value=Constant(value='{}'))])), keyword(arg='argv', value=List(elts=[Constant(value='-i'), Constant(value='nonexisting_instance'), Constant(value='some_schema')], ctx=Load())), keyword(arg='exit_code', value=Constant(value=1)), keyword(arg='stderr', value=Constant(value="                'nonexisting_instance' does not exist.\n            "))]))], decorator_list=[]), FunctionDef(name='test_instance_does_not_exist_pretty_output', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertOutputs', ctx=Load()), args=[], keywords=[keyword(arg='files', value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='some_schema', value=Constant(value='{}'))])), keyword(arg='argv', value=List(elts=[Constant(value='--output'), Constant(value='pretty'), Constant(value='-i'), Constant(value='nonexisting_instance'), Constant(value='some_schema')], ctx=Load())), keyword(arg='exit_code', value=Constant(value=1)), keyword(arg='stderr', value=Constant(value="                ===[FileNotFoundError]===(nonexisting_instance)===\n\n                'nonexisting_instance' does not exist.\n                -----------------------------\n            "))]))], decorator_list=[]), FunctionDef(name='test_schema_does_not_exist', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertOutputs', ctx=Load()), args=[], keywords=[keyword(arg='argv', value=List(elts=[Constant(value='nonexisting_schema')], ctx=Load())), keyword(arg='exit_code', value=Constant(value=1)), keyword(arg='stderr', value=Constant(value="'nonexisting_schema' does not exist.\n"))]))], decorator_list=[]), FunctionDef(name='test_schema_does_not_exist_pretty_output', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertOutputs', ctx=Load()), args=[], keywords=[keyword(arg='argv', value=List(elts=[Constant(value='--output'), Constant(value='pretty'), Constant(value='nonexisting_schema')], ctx=Load())), keyword(arg='exit_code', value=Constant(value=1)), keyword(arg='stderr', value=Constant(value="                ===[FileNotFoundError]===(nonexisting_schema)===\n\n                'nonexisting_schema' does not exist.\n                -----------------------------\n            "))]))], decorator_list=[]), FunctionDef(name='test_neither_instance_nor_schema_exist', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertOutputs', ctx=Load()), args=[], keywords=[keyword(arg='argv', value=List(elts=[Constant(value='-i'), Constant(value='nonexisting_instance'), Constant(value='nonexisting_schema')], ctx=Load())), keyword(arg='exit_code', value=Constant(value=1)), keyword(arg='stderr', value=Constant(value="'nonexisting_schema' does not exist.\n"))]))], decorator_list=[]), FunctionDef(name='test_neither_instance_nor_schema_exist_pretty_output', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertOutputs', ctx=Load()), args=[], keywords=[keyword(arg='argv', value=List(elts=[Constant(value='--output'), Constant(value='pretty'), Constant(value='-i'), Constant(value='nonexisting_instance'), Constant(value='nonexisting_schema')], ctx=Load())), keyword(arg='exit_code', value=Constant(value=1)), keyword(arg='stderr', value=Constant(value="                ===[FileNotFoundError]===(nonexisting_schema)===\n\n                'nonexisting_schema' does not exist.\n                -----------------------------\n            "))]))], decorator_list=[]), FunctionDef(name='test_successful_validation', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertOutputs', ctx=Load()), args=[], keywords=[keyword(arg='files', value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='some_schema', value=Constant(value='{}')), keyword(arg='some_instance', value=Constant(value='{}'))])), keyword(arg='argv', value=List(elts=[Constant(value='-i'), Constant(value='some_instance'), Constant(value='some_schema')], ctx=Load())), keyword(arg='stdout', value=Constant(value='')), keyword(arg='stderr', value=Constant(value=''))]))], decorator_list=[]), FunctionDef(name='test_successful_validation_pretty_output', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertOutputs', ctx=Load()), args=[], keywords=[keyword(arg='files', value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='some_schema', value=Constant(value='{}')), keyword(arg='some_instance', value=Constant(value='{}'))])), keyword(arg='argv', value=List(elts=[Constant(value='--output'), Constant(value='pretty'), Constant(value='-i'), Constant(value='some_instance'), Constant(value='some_schema')], ctx=Load())), keyword(arg='stdout', value=Constant(value='===[SUCCESS]===(some_instance)===\n')), keyword(arg='stderr', value=Constant(value=''))]))], decorator_list=[]), FunctionDef(name='test_successful_validation_of_stdin', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertOutputs', ctx=Load()), args=[], keywords=[keyword(arg='files', value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='some_schema', value=Constant(value='{}'))])), keyword(arg='stdin', value=Call(func=Name(id='StringIO', ctx=Load()), args=[Constant(value='{}')], keywords=[])), keyword(arg='argv', value=List(elts=[Constant(value='some_schema')], ctx=Load())), keyword(arg='stdout', value=Constant(value='')), keyword(arg='stderr', value=Constant(value=''))]))], decorator_list=[]), FunctionDef(name='test_successful_validation_of_stdin_pretty_output', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertOutputs', ctx=Load()), args=[], keywords=[keyword(arg='files', value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='some_schema', value=Constant(value='{}'))])), keyword(arg='stdin', value=Call(func=Name(id='StringIO', ctx=Load()), args=[Constant(value='{}')], keywords=[])), keyword(arg='argv', value=List(elts=[Constant(value='--output'), Constant(value='pretty'), Constant(value='some_schema')], ctx=Load())), keyword(arg='stdout', value=Constant(value='===[SUCCESS]===(<stdin>)===\n')), keyword(arg='stderr', value=Constant(value=''))]))], decorator_list=[]), FunctionDef(name='test_successful_validation_of_just_the_schema', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertOutputs', ctx=Load()), args=[], keywords=[keyword(arg='files', value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='some_schema', value=Constant(value='{}')), keyword(arg='some_instance', value=Constant(value='{}'))])), keyword(arg='argv', value=List(elts=[Constant(value='-i'), Constant(value='some_instance'), Constant(value='some_schema')], ctx=Load())), keyword(arg='stdout', value=Constant(value='')), keyword(arg='stderr', value=Constant(value=''))]))], decorator_list=[]), FunctionDef(name='test_successful_validation_of_just_the_schema_pretty_output', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertOutputs', ctx=Load()), args=[], keywords=[keyword(arg='files', value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='some_schema', value=Constant(value='{}')), keyword(arg='some_instance', value=Constant(value='{}'))])), keyword(arg='argv', value=List(elts=[Constant(value='--output'), Constant(value='pretty'), Constant(value='-i'), Constant(value='some_instance'), Constant(value='some_schema')], ctx=Load())), keyword(arg='stdout', value=Constant(value='===[SUCCESS]===(some_instance)===\n')), keyword(arg='stderr', value=Constant(value=''))]))], decorator_list=[]), FunctionDef(name='test_successful_validation_via_explicit_base_uri', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ref_schema_file', ctx=Store())], value=Call(func=Attribute(value=Name(id='tempfile', ctx=Load()), attr='NamedTemporaryFile', ctx=Load()), args=[], keywords=[keyword(arg='delete', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='ref_schema_file', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='addCleanup', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='remove', ctx=Load()), Attribute(value=Name(id='ref_schema_file', ctx=Load()), attr='name', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ref_path', ctx=Store())], value=Call(func=Name(id='Path', ctx=Load()), args=[Attribute(value=Name(id='ref_schema_file', ctx=Load()), attr='name', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='ref_path', ctx=Load()), attr='write_text', ctx=Load()), args=[Constant(value='{"definitions": {"num": {"type": "integer"}}}')], keywords=[])), Assign(targets=[Name(id='schema', ctx=Store())], value=JoinedStr(values=[Constant(value='{"$ref": "'), FormattedValue(value=Attribute(value=Name(id='ref_path', ctx=Load()), attr='name', ctx=Load()), conversion=-1), Constant(value='#/definitions/num"}')])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertOutputs', ctx=Load()), args=[], keywords=[keyword(arg='files', value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='some_schema', value=Name(id='schema', ctx=Load())), keyword(arg='some_instance', value=Constant(value='1'))])), keyword(arg='argv', value=List(elts=[Constant(value='-i'), Constant(value='some_instance'), Constant(value='--base-uri'), BinOp(left=Call(func=Attribute(value=Attribute(value=Name(id='ref_path', ctx=Load()), attr='parent', ctx=Load()), attr='as_uri', ctx=Load()), args=[], keywords=[]), op=Add(), right=Constant(value='/')), Constant(value='some_schema')], ctx=Load())), keyword(arg='stdout', value=Constant(value='')), keyword(arg='stderr', value=Constant(value=''))]))], decorator_list=[]), FunctionDef(name='test_unsuccessful_validation_via_explicit_base_uri', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ref_schema_file', ctx=Store())], value=Call(func=Attribute(value=Name(id='tempfile', ctx=Load()), attr='NamedTemporaryFile', ctx=Load()), args=[], keywords=[keyword(arg='delete', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='ref_schema_file', ctx=Load()), attr='close', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='addCleanup', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='remove', ctx=Load()), Attribute(value=Name(id='ref_schema_file', ctx=Load()), attr='name', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ref_path', ctx=Store())], value=Call(func=Name(id='Path', ctx=Load()), args=[Attribute(value=Name(id='ref_schema_file', ctx=Load()), attr='name', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='ref_path', ctx=Load()), attr='write_text', ctx=Load()), args=[Constant(value='{"definitions": {"num": {"type": "integer"}}}')], keywords=[])), Assign(targets=[Name(id='schema', ctx=Store())], value=JoinedStr(values=[Constant(value='{"$ref": "'), FormattedValue(value=Attribute(value=Name(id='ref_path', ctx=Load()), attr='name', ctx=Load()), conversion=-1), Constant(value='#/definitions/num"}')])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertOutputs', ctx=Load()), args=[], keywords=[keyword(arg='files', value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='some_schema', value=Name(id='schema', ctx=Load())), keyword(arg='some_instance', value=Constant(value='"1"'))])), keyword(arg='argv', value=List(elts=[Constant(value='-i'), Constant(value='some_instance'), Constant(value='--base-uri'), BinOp(left=Call(func=Attribute(value=Attribute(value=Name(id='ref_path', ctx=Load()), attr='parent', ctx=Load()), attr='as_uri', ctx=Load()), args=[], keywords=[]), op=Add(), right=Constant(value='/')), Constant(value='some_schema')], ctx=Load())), keyword(arg='exit_code', value=Constant(value=1)), keyword(arg='stdout', value=Constant(value='')), keyword(arg='stderr', value=Constant(value="1: '1' is not of type 'integer'\n"))]))], decorator_list=[]), FunctionDef(name='test_nonexistent_file_with_explicit_base_uri', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='schema', ctx=Store())], value=Constant(value='{"$ref": "someNonexistentFile.json#definitions/num"}')), Assign(targets=[Name(id='instance', ctx=Store())], value=Constant(value='1')), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='_RefResolutionError', ctx=Load())], keywords=[]), optional_vars=Name(id='e', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertOutputs', ctx=Load()), args=[], keywords=[keyword(arg='files', value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='some_schema', value=Name(id='schema', ctx=Load())), keyword(arg='some_instance', value=Name(id='instance', ctx=Load()))])), keyword(arg='argv', value=List(elts=[Constant(value='-i'), Constant(value='some_instance'), Constant(value='--base-uri'), Call(func=Attribute(value=Call(func=Attribute(value=Name(id='Path', ctx=Load()), attr='cwd', ctx=Load()), args=[], keywords=[]), attr='as_uri', ctx=Load()), args=[], keywords=[]), Constant(value='some_schema')], ctx=Load()))]))]), Assign(targets=[Name(id='error', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='e', ctx=Load()), attr='exception', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[JoinedStr(values=[FormattedValue(value=Attribute(value=Name(id='os', ctx=Load()), attr='sep', ctx=Load()), conversion=-1), Constant(value="someNonexistentFile.json'")]), Name(id='error', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_invalid_explicit_base_uri', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='schema', ctx=Store())], value=Constant(value='{"$ref": "foo.json#definitions/num"}')), Assign(targets=[Name(id='instance', ctx=Store())], value=Constant(value='1')), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='_RefResolutionError', ctx=Load())], keywords=[]), optional_vars=Name(id='e', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertOutputs', ctx=Load()), args=[], keywords=[keyword(arg='files', value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='some_schema', value=Name(id='schema', ctx=Load())), keyword(arg='some_instance', value=Name(id='instance', ctx=Load()))])), keyword(arg='argv', value=List(elts=[Constant(value='-i'), Constant(value='some_instance'), Constant(value='--base-uri'), Constant(value='not@UR1'), Constant(value='some_schema')], ctx=Load()))]))]), Assign(targets=[Name(id='error', ctx=Store())], value=Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='e', ctx=Load()), attr='exception', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='error', ctx=Load()), Constant(value="unknown url type: 'foo.json'")], keywords=[]))], decorator_list=[]), FunctionDef(name='test_it_validates_using_the_latest_validator_when_unspecified', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIs', ctx=Load()), args=[Name(id='Draft202012Validator', ctx=Load()), Name(id='_LATEST_VERSION', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertOutputs', ctx=Load()), args=[], keywords=[keyword(arg='files', value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='some_schema', value=Constant(value='{"const": "check"}')), keyword(arg='some_instance', value=Constant(value='"a"'))])), keyword(arg='argv', value=List(elts=[Constant(value='-i'), Constant(value='some_instance'), Constant(value='some_schema')], ctx=Load())), keyword(arg='exit_code', value=Constant(value=1)), keyword(arg='stdout', value=Constant(value='')), keyword(arg='stderr', value=Constant(value="a: 'check' was expected\n"))]))], decorator_list=[]), FunctionDef(name='test_it_validates_using_draft7_when_specified', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Specifically, `const` validation applies for Draft 7.\n        ')), Assign(targets=[Name(id='schema', ctx=Store())], value=Constant(value='\n            {\n                "$schema": "http://json-schema.org/draft-07/schema#",\n                "const": "check"\n            }\n        ')), Assign(targets=[Name(id='instance', ctx=Store())], value=Constant(value='"foo"')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertOutputs', ctx=Load()), args=[], keywords=[keyword(arg='files', value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='some_schema', value=Name(id='schema', ctx=Load())), keyword(arg='some_instance', value=Name(id='instance', ctx=Load()))])), keyword(arg='argv', value=List(elts=[Constant(value='-i'), Constant(value='some_instance'), Constant(value='some_schema')], ctx=Load())), keyword(arg='exit_code', value=Constant(value=1)), keyword(arg='stdout', value=Constant(value='')), keyword(arg='stderr', value=Constant(value="foo: 'check' was expected\n"))]))], decorator_list=[]), FunctionDef(name='test_it_validates_using_draft4_when_specified', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Specifically, `const` validation *does not* apply for Draft 4.\n        ')), Assign(targets=[Name(id='schema', ctx=Store())], value=Constant(value='\n            {\n                "$schema": "http://json-schema.org/draft-04/schema#",\n                "const": "check"\n            }\n            ')), Assign(targets=[Name(id='instance', ctx=Store())], value=Constant(value='"foo"')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertOutputs', ctx=Load()), args=[], keywords=[keyword(arg='files', value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='some_schema', value=Name(id='schema', ctx=Load())), keyword(arg='some_instance', value=Name(id='instance', ctx=Load()))])), keyword(arg='argv', value=List(elts=[Constant(value='-i'), Constant(value='some_instance'), Constant(value='some_schema')], ctx=Load())), keyword(arg='stdout', value=Constant(value='')), keyword(arg='stderr', value=Constant(value=''))]))], decorator_list=[])], decorator_list=[]), ClassDef(name='TestParser', bases=[Name(id='TestCase', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='FakeValidator', ctx=Store())], value=Call(func=Name(id='fake_validator', ctx=Load()), args=[], keywords=[])), FunctionDef(name='test_find_validator_by_fully_qualified_object_name', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='arguments', ctx=Store())], value=Call(func=Attribute(value=Name(id='cli', ctx=Load()), attr='parse_args', ctx=Load()), args=[List(elts=[Constant(value='--validator'), Constant(value='jsonschema.tests.test_cli.TestParser.FakeValidator'), Constant(value='--instance'), Constant(value='mem://some/instance'), Constant(value='mem://some/schema')], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIs', ctx=Load()), args=[Subscript(value=Name(id='arguments', ctx=Load()), slice=Constant(value='validator'), ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='FakeValidator', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_find_validator_in_jsonschema', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='arguments', ctx=Store())], value=Call(func=Attribute(value=Name(id='cli', ctx=Load()), attr='parse_args', ctx=Load()), args=[List(elts=[Constant(value='--validator'), Constant(value='Draft4Validator'), Constant(value='--instance'), Constant(value='mem://some/instance'), Constant(value='mem://some/schema')], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIs', ctx=Load()), args=[Subscript(value=Name(id='arguments', ctx=Load()), slice=Constant(value='validator'), ctx=Load()), Name(id='Draft4Validator', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='cli_output_for', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='argv'), kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='stdout', ctx=Store()), Name(id='stderr', ctx=Store())], ctx=Store())], value=Tuple(elts=[Call(func=Name(id='StringIO', ctx=Load()), args=[], keywords=[]), Call(func=Name(id='StringIO', ctx=Load()), args=[], keywords=[])], ctx=Load())), With(items=[withitem(context_expr=Call(func=Name(id='redirect_stdout', ctx=Load()), args=[Name(id='stdout', ctx=Load())], keywords=[])), withitem(context_expr=Call(func=Name(id='redirect_stderr', ctx=Load()), args=[Name(id='stderr', ctx=Load())], keywords=[]))], body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='SystemExit', ctx=Load())], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='cli', ctx=Load()), attr='parse_args', ctx=Load()), args=[Name(id='argv', ctx=Load())], keywords=[]))])]), Return(value=Tuple(elts=[Call(func=Attribute(value=Name(id='stdout', ctx=Load()), attr='getvalue', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='stderr', ctx=Load()), attr='getvalue', ctx=Load()), args=[], keywords=[])], ctx=Load()))], decorator_list=[]), FunctionDef(name='test_unknown_output', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='stdout', ctx=Store()), Name(id='stderr', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='cli_output_for', ctx=Load()), args=[Constant(value='--output'), Constant(value='foo'), Constant(value='mem://some/schema')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Constant(value="invalid choice: 'foo'"), Name(id='stderr', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertFalse', ctx=Load()), args=[Name(id='stdout', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_useless_error_format', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='stdout', ctx=Store()), Name(id='stderr', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='cli_output_for', ctx=Load()), args=[Constant(value='--output'), Constant(value='pretty'), Constant(value='--error-format'), Constant(value='foo'), Constant(value='mem://some/schema')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Constant(value='--error-format can only be used with --output plain'), Name(id='stderr', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertFalse', ctx=Load()), args=[Name(id='stdout', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='TestCLIIntegration', bases=[Name(id='TestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='test_license', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Attribute(value=Name(id='subprocess', ctx=Load()), attr='check_output', ctx=Load()), args=[List(elts=[Attribute(value=Name(id='sys', ctx=Load()), attr='executable', ctx=Load()), Constant(value='-m'), Constant(value='pip'), Constant(value='show'), Constant(value='jsonschema')], ctx=Load())], keywords=[keyword(arg='stderr', value=Attribute(value=Name(id='subprocess', ctx=Load()), attr='STDOUT', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Constant(value=b'License: MIT'), Name(id='output', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_version', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='version', ctx=Store())], value=Call(func=Attribute(value=Name(id='subprocess', ctx=Load()), attr='check_output', ctx=Load()), args=[List(elts=[Attribute(value=Name(id='sys', ctx=Load()), attr='executable', ctx=Load()), Constant(value='-W'), Constant(value='ignore'), Constant(value='-m'), Constant(value='jsonschema'), Constant(value='--version')], ctx=Load())], keywords=[keyword(arg='stderr', value=Attribute(value=Name(id='subprocess', ctx=Load()), attr='STDOUT', ctx=Load()))])), Assign(targets=[Name(id='version', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='version', ctx=Load()), attr='decode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[]), attr='strip', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='version', ctx=Load()), Call(func=Attribute(value=Name(id='metadata', ctx=Load()), attr='version', ctx=Load()), args=[Constant(value='jsonschema')], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_no_arguments_shows_usage_notes', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='output', ctx=Store())], value=Call(func=Attribute(value=Name(id='subprocess', ctx=Load()), attr='check_output', ctx=Load()), args=[List(elts=[Attribute(value=Name(id='sys', ctx=Load()), attr='executable', ctx=Load()), Constant(value='-m'), Constant(value='jsonschema')], ctx=Load())], keywords=[keyword(arg='stderr', value=Attribute(value=Name(id='subprocess', ctx=Load()), attr='STDOUT', ctx=Load()))])), Assign(targets=[Name(id='output_for_help', ctx=Store())], value=Call(func=Attribute(value=Name(id='subprocess', ctx=Load()), attr='check_output', ctx=Load()), args=[List(elts=[Attribute(value=Name(id='sys', ctx=Load()), attr='executable', ctx=Load()), Constant(value='-m'), Constant(value='jsonschema'), Constant(value='--help')], ctx=Load())], keywords=[keyword(arg='stderr', value=Attribute(value=Name(id='subprocess', ctx=Load()), attr='STDOUT', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='output', ctx=Load()), Name(id='output_for_help', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[])], type_ignores=[])