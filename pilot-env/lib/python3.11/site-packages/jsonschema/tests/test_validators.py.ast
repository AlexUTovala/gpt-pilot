Module(body=[ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), ImportFrom(module='collections', names=[alias(name='deque'), alias(name='namedtuple')], level=0), ImportFrom(module='contextlib', names=[alias(name='contextmanager')], level=0), ImportFrom(module='decimal', names=[alias(name='Decimal')], level=0), ImportFrom(module='io', names=[alias(name='BytesIO')], level=0), ImportFrom(module='typing', names=[alias(name='Any')], level=0), ImportFrom(module='unittest', names=[alias(name='TestCase'), alias(name='mock')], level=0), ImportFrom(module='urllib.request', names=[alias(name='pathname2url')], level=0), Import(names=[alias(name='json')]), Import(names=[alias(name='os')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='tempfile')]), Import(names=[alias(name='warnings')]), ImportFrom(module='attrs', names=[alias(name='define'), alias(name='field')], level=0), ImportFrom(module='referencing.jsonschema', names=[alias(name='DRAFT202012')], level=0), Import(names=[alias(name='referencing.exceptions')]), ImportFrom(module='jsonschema', names=[alias(name='FormatChecker'), alias(name='TypeChecker'), alias(name='exceptions'), alias(name='protocols'), alias(name='validators')], level=0), FunctionDef(name='fail', args=arguments(posonlyargs=[], args=[arg(arg='validator'), arg(arg='errors'), arg(arg='instance'), arg(arg='schema')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='each', ctx=Store()), iter=Name(id='errors', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='each', ctx=Load()), attr='setdefault', ctx=Load()), args=[Constant(value='message'), Constant(value='You told me to fail!')], keywords=[])), Expr(value=Yield(value=Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='ValidationError', ctx=Load()), args=[], keywords=[keyword(value=Name(id='each', ctx=Load()))])))], orelse=[])], decorator_list=[]), ClassDef(name='TestCreateAndExtend', bases=[Name(id='TestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='setUp', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='addCleanup', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), Attribute(value=Name(id='validators', ctx=Load()), attr='_META_SCHEMAS', ctx=Load()), Call(func=Name(id='dict', ctx=Load()), args=[Attribute(value=Name(id='validators', ctx=Load()), attr='_META_SCHEMAS', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='addCleanup', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), Attribute(value=Name(id='validators', ctx=Load()), attr='_VALIDATORS', ctx=Load()), Call(func=Name(id='dict', ctx=Load()), args=[Attribute(value=Name(id='validators', ctx=Load()), attr='_VALIDATORS', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='meta_schema', ctx=Store())], value=Dict(keys=[Constant(value='$id')], values=[Constant(value='some://meta/schema')])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='validators', ctx=Store())], value=Dict(keys=[Constant(value='fail')], values=[Name(id='fail', ctx=Load())])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='type_checker', ctx=Store())], value=Call(func=Name(id='TypeChecker', ctx=Load()), args=[], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='Validator', ctx=Store())], value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='create', ctx=Load()), args=[], keywords=[keyword(arg='meta_schema', value=Attribute(value=Name(id='self', ctx=Load()), attr='meta_schema', ctx=Load())), keyword(arg='validators', value=Attribute(value=Name(id='self', ctx=Load()), attr='validators', ctx=Load())), keyword(arg='type_checker', value=Attribute(value=Name(id='self', ctx=Load()), attr='type_checker', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='test_attrs', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Tuple(elts=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='Validator', ctx=Load()), attr='VALIDATORS', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='Validator', ctx=Load()), attr='META_SCHEMA', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='Validator', ctx=Load()), attr='TYPE_CHECKER', ctx=Load())], ctx=Load()), Tuple(elts=[Attribute(value=Name(id='self', ctx=Load()), attr='validators', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='meta_schema', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='type_checker', ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_init', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='fail')], values=[List(elts=[], ctx=Load())])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='Validator', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[]), attr='schema', ctx=Load()), Name(id='schema', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_iter_errors_successful', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='fail')], values=[List(elts=[], ctx=Load())])), Assign(targets=[Name(id='validator', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='Validator', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[])), Assign(targets=[Name(id='errors', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='iter_errors', ctx=Load()), args=[Constant(value='hello')], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='errors', ctx=Load()), List(elts=[], ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_iter_errors_one_error', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='fail')], values=[List(elts=[Dict(keys=[Constant(value='message')], values=[Constant(value='Whoops!')])], ctx=Load())])), Assign(targets=[Name(id='validator', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='Validator', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[])), Assign(targets=[Name(id='expected_error', ctx=Store())], value=Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='ValidationError', ctx=Load()), args=[Constant(value='Whoops!')], keywords=[keyword(arg='instance', value=Constant(value='goodbye')), keyword(arg='schema', value=Name(id='schema', ctx=Load())), keyword(arg='validator', value=Constant(value='fail')), keyword(arg='validator_value', value=List(elts=[Dict(keys=[Constant(value='message')], values=[Constant(value='Whoops!')])], ctx=Load())), keyword(arg='schema_path', value=Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value='fail')], ctx=Load())], keywords=[]))])), Assign(targets=[Name(id='errors', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='iter_errors', ctx=Load()), args=[Constant(value='goodbye')], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='errors', ctx=Load())], keywords=[]), Constant(value=1)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Subscript(value=Name(id='errors', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='_contents', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='expected_error', ctx=Load()), attr='_contents', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_iter_errors_multiple_errors', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='fail')], values=[List(elts=[Dict(keys=[Constant(value='message')], values=[Constant(value='First')]), Dict(keys=[Constant(value='message'), Constant(value='validator')], values=[Constant(value='Second!'), Constant(value='asdf')]), Dict(keys=[Constant(value='message')], values=[Constant(value='Third')])], ctx=Load())])), Assign(targets=[Name(id='validator', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='Validator', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[])), Assign(targets=[Name(id='errors', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='iter_errors', ctx=Load()), args=[Constant(value='goodbye')], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='errors', ctx=Load())], keywords=[]), Constant(value=3)], keywords=[]))], decorator_list=[]), FunctionDef(name='test_if_a_version_is_provided_it_is_registered', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='Validator', ctx=Store())], value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='create', ctx=Load()), args=[], keywords=[keyword(arg='meta_schema', value=Dict(keys=[Constant(value='$id')], values=[Constant(value='something')])), keyword(arg='version', value=Constant(value='my version'))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='addCleanup', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='validators', ctx=Load()), attr='_META_SCHEMAS', ctx=Load()), attr='pop', ctx=Load()), Constant(value='something')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='addCleanup', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='validators', ctx=Load()), attr='_VALIDATORS', ctx=Load()), attr='pop', ctx=Load()), Constant(value='my version')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='Validator', ctx=Load()), attr='__name__', ctx=Load()), Constant(value='MyVersionValidator')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='Validator', ctx=Load()), attr='__qualname__', ctx=Load()), Constant(value='MyVersionValidator')], keywords=[]))], decorator_list=[]), FunctionDef(name='test_repr', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='Validator', ctx=Store())], value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='create', ctx=Load()), args=[], keywords=[keyword(arg='meta_schema', value=Dict(keys=[Constant(value='$id')], values=[Constant(value='something')])), keyword(arg='version', value=Constant(value='my version'))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='addCleanup', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='validators', ctx=Load()), attr='_META_SCHEMAS', ctx=Load()), attr='pop', ctx=Load()), Constant(value='something')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='addCleanup', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='validators', ctx=Load()), attr='_VALIDATORS', ctx=Load()), attr='pop', ctx=Load()), Constant(value='my version')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='repr', ctx=Load()), args=[Call(func=Name(id='Validator', ctx=Load()), args=[Dict(keys=[], values=[])], keywords=[])], keywords=[]), Constant(value='MyVersionValidator(schema={}, format_checker=None)')], keywords=[]))], decorator_list=[]), FunctionDef(name='test_long_repr', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='Validator', ctx=Store())], value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='create', ctx=Load()), args=[], keywords=[keyword(arg='meta_schema', value=Dict(keys=[Constant(value='$id')], values=[Constant(value='something')])), keyword(arg='version', value=Constant(value='my version'))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='addCleanup', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='validators', ctx=Load()), attr='_META_SCHEMAS', ctx=Load()), attr='pop', ctx=Load()), Constant(value='something')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='addCleanup', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='validators', ctx=Load()), attr='_VALIDATORS', ctx=Load()), attr='pop', ctx=Load()), Constant(value='my version')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='repr', ctx=Load()), args=[Call(func=Name(id='Validator', ctx=Load()), args=[Dict(keys=[Constant(value='a')], values=[Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1000)], keywords=[])], keywords=[])])], keywords=[])], keywords=[]), Constant(value="MyVersionValidator(schema={'a': [0, 1, 2, 3, 4, 5, ...]}, format_checker=None)")], keywords=[]))], decorator_list=[]), FunctionDef(name='test_repr_no_version', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='Validator', ctx=Store())], value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='create', ctx=Load()), args=[], keywords=[keyword(arg='meta_schema', value=Dict(keys=[], values=[]))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='repr', ctx=Load()), args=[Call(func=Name(id='Validator', ctx=Load()), args=[Dict(keys=[], values=[])], keywords=[])], keywords=[]), Constant(value='Validator(schema={}, format_checker=None)')], keywords=[]))], decorator_list=[]), FunctionDef(name='test_dashes_are_stripped_from_validator_names', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='Validator', ctx=Store())], value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='create', ctx=Load()), args=[], keywords=[keyword(arg='meta_schema', value=Dict(keys=[Constant(value='$id')], values=[Constant(value='something')])), keyword(arg='version', value=Constant(value='foo-bar'))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='addCleanup', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='validators', ctx=Load()), attr='_META_SCHEMAS', ctx=Load()), attr='pop', ctx=Load()), Constant(value='something')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='addCleanup', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='validators', ctx=Load()), attr='_VALIDATORS', ctx=Load()), attr='pop', ctx=Load()), Constant(value='foo-bar')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='Validator', ctx=Load()), attr='__qualname__', ctx=Load()), Constant(value='FooBarValidator')], keywords=[]))], decorator_list=[]), FunctionDef(name='test_if_a_version_is_not_provided_it_is_not_registered', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='original', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[Attribute(value=Name(id='validators', ctx=Load()), attr='_META_SCHEMAS', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='create', ctx=Load()), args=[], keywords=[keyword(arg='meta_schema', value=Dict(keys=[Constant(value='id')], values=[Constant(value='id')]))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='validators', ctx=Load()), attr='_META_SCHEMAS', ctx=Load()), Name(id='original', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_validates_registers_meta_schema_id', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='meta_schema_key', ctx=Store())], value=Constant(value='meta schema id')), Assign(targets=[Name(id='my_meta_schema', ctx=Store())], value=Dict(keys=[Constant(value='id')], values=[Name(id='meta_schema_key', ctx=Load())])), Expr(value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='create', ctx=Load()), args=[], keywords=[keyword(arg='meta_schema', value=Name(id='my_meta_schema', ctx=Load())), keyword(arg='version', value=Constant(value='my version')), keyword(arg='id_of', value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='s')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='id'), Constant(value='')], keywords=[])))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='addCleanup', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='validators', ctx=Load()), attr='_META_SCHEMAS', ctx=Load()), attr='pop', ctx=Load()), Name(id='meta_schema_key', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='addCleanup', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='validators', ctx=Load()), attr='_VALIDATORS', ctx=Load()), attr='pop', ctx=Load()), Constant(value='my version')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Name(id='meta_schema_key', ctx=Load()), Attribute(value=Name(id='validators', ctx=Load()), attr='_META_SCHEMAS', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_validates_registers_meta_schema_draft6_id', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='meta_schema_key', ctx=Store())], value=Constant(value='meta schema $id')), Assign(targets=[Name(id='my_meta_schema', ctx=Store())], value=Dict(keys=[Constant(value='$id')], values=[Name(id='meta_schema_key', ctx=Load())])), Expr(value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='create', ctx=Load()), args=[], keywords=[keyword(arg='meta_schema', value=Name(id='my_meta_schema', ctx=Load())), keyword(arg='version', value=Constant(value='my version'))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='addCleanup', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='validators', ctx=Load()), attr='_META_SCHEMAS', ctx=Load()), attr='pop', ctx=Load()), Name(id='meta_schema_key', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='addCleanup', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='validators', ctx=Load()), attr='_VALIDATORS', ctx=Load()), attr='pop', ctx=Load()), Constant(value='my version')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Name(id='meta_schema_key', ctx=Load()), Attribute(value=Name(id='validators', ctx=Load()), attr='_META_SCHEMAS', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_create_default_types', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='Validator', ctx=Store())], value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='create', ctx=Load()), args=[], keywords=[keyword(arg='meta_schema', value=Dict(keys=[], values=[])), keyword(arg='validators', value=Tuple(elts=[], ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertTrue', ctx=Load()), args=[Call(func=Name(id='all', ctx=Load()), args=[GeneratorExp(elt=Call(func=Attribute(value=Call(func=Name(id='Validator', ctx=Load()), args=[Dict(keys=[], values=[])], keywords=[]), attr='is_type', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=Name(id='instance', ctx=Load())), keyword(arg='type', value=Name(id='type', ctx=Load()))]), generators=[comprehension(target=Tuple(elts=[Name(id='type', ctx=Store()), Name(id='instance', ctx=Store())], ctx=Store()), iter=List(elts=[Tuple(elts=[Constant(value='array'), List(elts=[], ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='boolean'), Constant(value=True)], ctx=Load()), Tuple(elts=[Constant(value='integer'), Constant(value=12)], ctx=Load()), Tuple(elts=[Constant(value='null'), Constant(value=None)], ctx=Load()), Tuple(elts=[Constant(value='number'), Constant(value=12.0)], ctx=Load()), Tuple(elts=[Constant(value='object'), Dict(keys=[], values=[])], ctx=Load()), Tuple(elts=[Constant(value='string'), Constant(value='foo')], ctx=Load())], ctx=Load()), ifs=[], is_async=0)])], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_check_schema_with_different_metaschema', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        One can create a validator class whose metaschema uses a different\n        dialect than itself.\n        ')), Assign(targets=[Name(id='NoEmptySchemasValidator', ctx=Store())], value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='create', ctx=Load()), args=[], keywords=[keyword(arg='meta_schema', value=Dict(keys=[Constant(value='$schema'), Constant(value='not')], values=[Subscript(value=Attribute(value=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft202012Validator', ctx=Load()), attr='META_SCHEMA', ctx=Load()), slice=Constant(value='$id'), ctx=Load()), Dict(keys=[Constant(value='const')], values=[Dict(keys=[], values=[])])]))])), Expr(value=Call(func=Attribute(value=Name(id='NoEmptySchemasValidator', ctx=Load()), attr='check_schema', ctx=Load()), args=[Dict(keys=[Constant(value='foo')], values=[Constant(value='bar')])], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Attribute(value=Name(id='exceptions', ctx=Load()), attr='SchemaError', ctx=Load())], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='NoEmptySchemasValidator', ctx=Load()), attr='check_schema', ctx=Load()), args=[Dict(keys=[], values=[])], keywords=[]))]), Expr(value=Call(func=Attribute(value=Call(func=Name(id='NoEmptySchemasValidator', ctx=Load()), args=[Dict(keys=[Constant(value='foo')], values=[Constant(value='bar')])], keywords=[]), attr='validate', ctx=Load()), args=[Constant(value='foo')], keywords=[]))], decorator_list=[]), FunctionDef(name='test_check_schema_with_different_metaschema_defaults_to_self', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        A validator whose metaschema doesn\'t declare $schema defaults to its\n        own validation behavior, not the latest "normal" specification.\n        ')), Assign(targets=[Name(id='NoEmptySchemasValidator', ctx=Store())], value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='create', ctx=Load()), args=[], keywords=[keyword(arg='meta_schema', value=Dict(keys=[Constant(value='fail')], values=[List(elts=[Dict(keys=[Constant(value='message')], values=[Constant(value='Meta schema whoops!')])], ctx=Load())])), keyword(arg='validators', value=Dict(keys=[Constant(value='fail')], values=[Name(id='fail', ctx=Load())]))])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Attribute(value=Name(id='exceptions', ctx=Load()), attr='SchemaError', ctx=Load())], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='NoEmptySchemasValidator', ctx=Load()), attr='check_schema', ctx=Load()), args=[Dict(keys=[], values=[])], keywords=[]))])], decorator_list=[]), FunctionDef(name='test_extend', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='original', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='Validator', ctx=Load()), attr='VALIDATORS', ctx=Load())], keywords=[])), Assign(targets=[Name(id='new', ctx=Store())], value=Call(func=Name(id='object', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='Extended', ctx=Store())], value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='extend', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='Validator', ctx=Load())], keywords=[keyword(arg='validators', value=Dict(keys=[Constant(value='new')], values=[Name(id='new', ctx=Load())]))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Tuple(elts=[Attribute(value=Name(id='Extended', ctx=Load()), attr='VALIDATORS', ctx=Load()), Attribute(value=Name(id='Extended', ctx=Load()), attr='META_SCHEMA', ctx=Load()), Attribute(value=Name(id='Extended', ctx=Load()), attr='TYPE_CHECKER', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='Validator', ctx=Load()), attr='VALIDATORS', ctx=Load())], ctx=Load()), Tuple(elts=[Call(func=Name(id='dict', ctx=Load()), args=[Name(id='original', ctx=Load())], keywords=[keyword(arg='new', value=Name(id='new', ctx=Load()))]), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='Validator', ctx=Load()), attr='META_SCHEMA', ctx=Load()), Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='Validator', ctx=Load()), attr='TYPE_CHECKER', ctx=Load()), Name(id='original', ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_extend_idof', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Extending a validator preserves its notion of schema IDs.\n        ')), FunctionDef(name='id_of', args=arguments(posonlyargs=[], args=[arg(arg='schema')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='schema', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='__test__'), Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='Validator', ctx=Load()), attr='ID_OF', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), Assign(targets=[Name(id='correct_id', ctx=Store())], value=Constant(value='the://correct/id/')), Assign(targets=[Name(id='meta_schema', ctx=Store())], value=Dict(keys=[Constant(value='$id'), Constant(value='__test__')], values=[Constant(value='the://wrong/id/'), Name(id='correct_id', ctx=Load())])), Assign(targets=[Name(id='Original', ctx=Store())], value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='create', ctx=Load()), args=[], keywords=[keyword(arg='meta_schema', value=Name(id='meta_schema', ctx=Load())), keyword(arg='validators', value=Attribute(value=Name(id='self', ctx=Load()), attr='validators', ctx=Load())), keyword(arg='type_checker', value=Attribute(value=Name(id='self', ctx=Load()), attr='type_checker', ctx=Load())), keyword(arg='id_of', value=Name(id='id_of', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Name(id='Original', ctx=Load()), attr='ID_OF', ctx=Load()), args=[Attribute(value=Name(id='Original', ctx=Load()), attr='META_SCHEMA', ctx=Load())], keywords=[]), Name(id='correct_id', ctx=Load())], keywords=[])), Assign(targets=[Name(id='Derived', ctx=Store())], value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='extend', ctx=Load()), args=[Name(id='Original', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Name(id='Derived', ctx=Load()), attr='ID_OF', ctx=Load()), args=[Attribute(value=Name(id='Derived', ctx=Load()), attr='META_SCHEMA', ctx=Load())], keywords=[]), Name(id='correct_id', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_extend_applicable_validators', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Extending a validator preserves its notion of applicable validators.\n        ')), Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='$defs'), Constant(value='$ref'), Constant(value='maximum')], values=[Dict(keys=[Constant(value='test')], values=[Dict(keys=[Constant(value='type')], values=[Constant(value='number')])]), Constant(value='#/$defs/test'), Constant(value=1)])), Assign(targets=[Name(id='draft4', ctx=Store())], value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft4Validator', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertTrue', ctx=Load()), args=[Call(func=Attribute(value=Name(id='draft4', ctx=Load()), attr='is_valid', ctx=Load()), args=[Constant(value=37)], keywords=[])], keywords=[])), Assign(targets=[Name(id='Derived', ctx=Store())], value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='extend', ctx=Load()), args=[Attribute(value=Name(id='validators', ctx=Load()), attr='Draft4Validator', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertTrue', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Name(id='Derived', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[]), attr='is_valid', ctx=Load()), args=[Constant(value=37)], keywords=[])], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='TestValidationErrorMessages', bases=[Name(id='TestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='message_for', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='instance'), arg(arg='schema')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Assign(targets=[Name(id='cls', ctx=Store())], value=Call(func=Attribute(value=Name(id='kwargs', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='cls'), Attribute(value=Name(id='validators', ctx=Load()), attr='_LATEST_VERSION', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='check_schema', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[])), Assign(targets=[Name(id='validator', ctx=Store())], value=Call(func=Name(id='cls', ctx=Load()), args=[Name(id='schema', ctx=Load()), Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))])), Assign(targets=[Name(id='errors', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='iter_errors', ctx=Load()), args=[Name(id='instance', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertTrue', ctx=Load()), args=[Name(id='errors', ctx=Load())], keywords=[keyword(arg='msg', value=JoinedStr(values=[Constant(value='No errors were raised for '), FormattedValue(value=Name(id='instance', ctx=Load()), conversion=114)]))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='errors', ctx=Load())], keywords=[]), Constant(value=1)], keywords=[keyword(arg='msg', value=JoinedStr(values=[Constant(value='Expected exactly one error, found '), FormattedValue(value=Name(id='errors', ctx=Load()), conversion=114)]))])), Return(value=Attribute(value=Subscript(value=Name(id='errors', ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='message', ctx=Load()))], decorator_list=[]), FunctionDef(name='test_single_type_failure', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='message_for', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=Constant(value=1)), keyword(arg='schema', value=Dict(keys=[Constant(value='type')], values=[Constant(value='string')]))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='message', ctx=Load()), Constant(value="1 is not of type 'string'")], keywords=[]))], decorator_list=[]), FunctionDef(name='test_single_type_list_failure', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='message_for', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=Constant(value=1)), keyword(arg='schema', value=Dict(keys=[Constant(value='type')], values=[List(elts=[Constant(value='string')], ctx=Load())]))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='message', ctx=Load()), Constant(value="1 is not of type 'string'")], keywords=[]))], decorator_list=[]), FunctionDef(name='test_multiple_type_failure', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='types', ctx=Store())], value=Tuple(elts=[Constant(value='string'), Constant(value='object')], ctx=Load())), Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='message_for', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=Constant(value=1)), keyword(arg='schema', value=Dict(keys=[Constant(value='type')], values=[Call(func=Name(id='list', ctx=Load()), args=[Name(id='types', ctx=Load())], keywords=[])]))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='message', ctx=Load()), Constant(value="1 is not of type 'string', 'object'")], keywords=[]))], decorator_list=[]), FunctionDef(name='test_object_with_named_type_failure', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='type')], values=[List(elts=[Dict(keys=[Constant(value='name'), Constant(value='minimum')], values=[Constant(value='Foo'), Constant(value=3)])], ctx=Load())])), Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='message_for', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=Constant(value=1)), keyword(arg='schema', value=Name(id='schema', ctx=Load())), keyword(arg='cls', value=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft3Validator', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='message', ctx=Load()), Constant(value="1 is not of type 'Foo'")], keywords=[]))], decorator_list=[]), FunctionDef(name='test_minimum', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='message_for', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=Constant(value=1)), keyword(arg='schema', value=Dict(keys=[Constant(value='minimum')], values=[Constant(value=2)]))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='message', ctx=Load()), Constant(value='1 is less than the minimum of 2')], keywords=[]))], decorator_list=[]), FunctionDef(name='test_maximum', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='message_for', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=Constant(value=1)), keyword(arg='schema', value=Dict(keys=[Constant(value='maximum')], values=[Constant(value=0)]))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='message', ctx=Load()), Constant(value='1 is greater than the maximum of 0')], keywords=[]))], decorator_list=[]), FunctionDef(name='test_dependencies_single_element', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='depend', ctx=Store()), Name(id='on', ctx=Store())], ctx=Store())], value=Tuple(elts=[Constant(value='bar'), Constant(value='foo')], ctx=Load())), Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='dependencies')], values=[Dict(keys=[Name(id='depend', ctx=Load())], values=[Name(id='on', ctx=Load())])])), Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='message_for', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=Dict(keys=[Constant(value='bar')], values=[Constant(value=2)])), keyword(arg='schema', value=Name(id='schema', ctx=Load())), keyword(arg='cls', value=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft3Validator', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='message', ctx=Load()), Constant(value="'foo' is a dependency of 'bar'")], keywords=[]))], decorator_list=[]), FunctionDef(name='test_object_without_title_type_failure_draft3', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='type', ctx=Store())], value=Dict(keys=[Constant(value='type')], values=[List(elts=[Dict(keys=[Constant(value='minimum')], values=[Constant(value=3)])], ctx=Load())])), Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='message_for', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=Constant(value=1)), keyword(arg='schema', value=Dict(keys=[Constant(value='type')], values=[List(elts=[Name(id='type', ctx=Load())], ctx=Load())])), keyword(arg='cls', value=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft3Validator', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='message', ctx=Load()), Constant(value="1 is not of type {'type': [{'minimum': 3}]}")], keywords=[]))], decorator_list=[]), FunctionDef(name='test_dependencies_list_draft3', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='depend', ctx=Store()), Name(id='on', ctx=Store())], ctx=Store())], value=Tuple(elts=[Constant(value='bar'), Constant(value='foo')], ctx=Load())), Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='dependencies')], values=[Dict(keys=[Name(id='depend', ctx=Load())], values=[List(elts=[Name(id='on', ctx=Load())], ctx=Load())])])), Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='message_for', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=Dict(keys=[Constant(value='bar')], values=[Constant(value=2)])), keyword(arg='schema', value=Name(id='schema', ctx=Load())), keyword(arg='cls', value=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft3Validator', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='message', ctx=Load()), Constant(value="'foo' is a dependency of 'bar'")], keywords=[]))], decorator_list=[]), FunctionDef(name='test_dependencies_list_draft7', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='depend', ctx=Store()), Name(id='on', ctx=Store())], ctx=Store())], value=Tuple(elts=[Constant(value='bar'), Constant(value='foo')], ctx=Load())), Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='dependencies')], values=[Dict(keys=[Name(id='depend', ctx=Load())], values=[List(elts=[Name(id='on', ctx=Load())], ctx=Load())])])), Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='message_for', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=Dict(keys=[Constant(value='bar')], values=[Constant(value=2)])), keyword(arg='schema', value=Name(id='schema', ctx=Load())), keyword(arg='cls', value=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft7Validator', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='message', ctx=Load()), Constant(value="'foo' is a dependency of 'bar'")], keywords=[]))], decorator_list=[]), FunctionDef(name='test_additionalItems_single_failure', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='message_for', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=List(elts=[Constant(value=2)], ctx=Load())), keyword(arg='schema', value=Dict(keys=[Constant(value='items'), Constant(value='additionalItems')], values=[List(elts=[], ctx=Load()), Constant(value=False)])), keyword(arg='cls', value=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft3Validator', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Constant(value='(2 was unexpected)'), Name(id='message', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_additionalItems_multiple_failures', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='message_for', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=List(elts=[Constant(value=1), Constant(value=2), Constant(value=3)], ctx=Load())), keyword(arg='schema', value=Dict(keys=[Constant(value='items'), Constant(value='additionalItems')], values=[List(elts=[], ctx=Load()), Constant(value=False)])), keyword(arg='cls', value=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft3Validator', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Constant(value='(1, 2, 3 were unexpected)'), Name(id='message', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_additionalProperties_single_failure', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='additional', ctx=Store())], value=Constant(value='foo')), Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='additionalProperties')], values=[Constant(value=False)])), Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='message_for', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=Dict(keys=[Name(id='additional', ctx=Load())], values=[Constant(value=2)])), keyword(arg='schema', value=Name(id='schema', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Constant(value="('foo' was unexpected)"), Name(id='message', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_additionalProperties_multiple_failures', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='additionalProperties')], values=[Constant(value=False)])), Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='message_for', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=Call(func=Attribute(value=Name(id='dict', ctx=Load()), attr='fromkeys', ctx=Load()), args=[List(elts=[Constant(value='foo'), Constant(value='bar')], ctx=Load())], keywords=[])), keyword(arg='schema', value=Name(id='schema', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Call(func=Name(id='repr', ctx=Load()), args=[Constant(value='foo')], keywords=[]), Name(id='message', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Call(func=Name(id='repr', ctx=Load()), args=[Constant(value='bar')], keywords=[]), Name(id='message', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Constant(value='were unexpected)'), Name(id='message', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_const', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='const')], values=[Constant(value=12)])), Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='message_for', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=Dict(keys=[Constant(value='foo')], values=[Constant(value='bar')])), keyword(arg='schema', value=Name(id='schema', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Constant(value='12 was expected'), Name(id='message', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_contains_draft_6', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='contains')], values=[Dict(keys=[Constant(value='const')], values=[Constant(value=12)])])), Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='message_for', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=List(elts=[Constant(value=2), Dict(keys=[], values=[]), List(elts=[], ctx=Load())], ctx=Load())), keyword(arg='schema', value=Name(id='schema', ctx=Load())), keyword(arg='cls', value=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft6Validator', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='message', ctx=Load()), Constant(value='None of [2, {}, []] are valid under the given schema')], keywords=[]))], decorator_list=[]), FunctionDef(name='test_invalid_format_default_message', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='checker', ctx=Store())], value=Call(func=Name(id='FormatChecker', ctx=Load()), args=[], keywords=[keyword(arg='formats', value=Tuple(elts=[], ctx=Load()))])), Expr(value=Call(func=Call(func=Attribute(value=Name(id='checker', ctx=Load()), attr='checks', ctx=Load()), args=[Constant(value='thing')], keywords=[]), args=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Constant(value=False))], keywords=[])), Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='format')], values=[Constant(value='thing')])), Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='message_for', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=Constant(value='bla')), keyword(arg='schema', value=Name(id='schema', ctx=Load())), keyword(arg='format_checker', value=Name(id='checker', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Call(func=Name(id='repr', ctx=Load()), args=[Constant(value='bla')], keywords=[]), Name(id='message', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Call(func=Name(id='repr', ctx=Load()), args=[Constant(value='thing')], keywords=[]), Name(id='message', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Constant(value='is not a'), Name(id='message', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_additionalProperties_false_patternProperties', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='type'), Constant(value='additionalProperties'), Constant(value='patternProperties')], values=[Constant(value='object'), Constant(value=False), Dict(keys=[Constant(value='^abc$'), Constant(value='^def$')], values=[Dict(keys=[Constant(value='type')], values=[Constant(value='string')]), Dict(keys=[Constant(value='type')], values=[Constant(value='string')])])])), Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='message_for', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=Dict(keys=[Constant(value='zebra')], values=[Constant(value=123)])), keyword(arg='schema', value=Name(id='schema', ctx=Load())), keyword(arg='cls', value=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft4Validator', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='message', ctx=Load()), Call(func=Attribute(value=Constant(value='{} does not match any of the regexes: {}, {}'), attr='format', ctx=Load()), args=[Call(func=Name(id='repr', ctx=Load()), args=[Constant(value='zebra')], keywords=[]), Call(func=Name(id='repr', ctx=Load()), args=[Constant(value='^abc$')], keywords=[]), Call(func=Name(id='repr', ctx=Load()), args=[Constant(value='^def$')], keywords=[])], keywords=[])], keywords=[])), Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='message_for', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=Dict(keys=[Constant(value='zebra'), Constant(value='fish')], values=[Constant(value=123), Constant(value=456)])), keyword(arg='schema', value=Name(id='schema', ctx=Load())), keyword(arg='cls', value=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft4Validator', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='message', ctx=Load()), Call(func=Attribute(value=Constant(value='{}, {} do not match any of the regexes: {}, {}'), attr='format', ctx=Load()), args=[Call(func=Name(id='repr', ctx=Load()), args=[Constant(value='fish')], keywords=[]), Call(func=Name(id='repr', ctx=Load()), args=[Constant(value='zebra')], keywords=[]), Call(func=Name(id='repr', ctx=Load()), args=[Constant(value='^abc$')], keywords=[]), Call(func=Name(id='repr', ctx=Load()), args=[Constant(value='^def$')], keywords=[])], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_False_schema', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='message_for', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=Constant(value='something')), keyword(arg='schema', value=Constant(value=False))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='message', ctx=Load()), Constant(value="False schema does not allow 'something'")], keywords=[]))], decorator_list=[]), FunctionDef(name='test_multipleOf', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='message_for', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=Constant(value=3)), keyword(arg='schema', value=Dict(keys=[Constant(value='multipleOf')], values=[Constant(value=2)]))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='message', ctx=Load()), Constant(value='3 is not a multiple of 2')], keywords=[]))], decorator_list=[]), FunctionDef(name='test_minItems', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='message_for', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=List(elts=[], ctx=Load())), keyword(arg='schema', value=Dict(keys=[Constant(value='minItems')], values=[Constant(value=2)]))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='message', ctx=Load()), Constant(value='[] is too short')], keywords=[]))], decorator_list=[]), FunctionDef(name='test_maxItems', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='message_for', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=List(elts=[Constant(value=1), Constant(value=2), Constant(value=3)], ctx=Load())), keyword(arg='schema', value=Dict(keys=[Constant(value='maxItems')], values=[Constant(value=2)]))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='message', ctx=Load()), Constant(value='[1, 2, 3] is too long')], keywords=[]))], decorator_list=[]), FunctionDef(name='test_prefixItems_with_items', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='message_for', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=List(elts=[Constant(value=1), Constant(value=2), Constant(value='foo')], ctx=Load())), keyword(arg='schema', value=Dict(keys=[Constant(value='items'), Constant(value='prefixItems')], values=[Constant(value=False), List(elts=[Dict(keys=[], values=[]), Dict(keys=[], values=[])], ctx=Load())]))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='message', ctx=Load()), Constant(value="Expected at most 2 items but found 1 extra: 'foo'")], keywords=[]))], decorator_list=[]), FunctionDef(name='test_prefixItems_with_multiple_extra_items', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='message_for', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=List(elts=[Constant(value=1), Constant(value=2), Constant(value='foo'), Constant(value=5)], ctx=Load())), keyword(arg='schema', value=Dict(keys=[Constant(value='items'), Constant(value='prefixItems')], values=[Constant(value=False), List(elts=[Dict(keys=[], values=[]), Dict(keys=[], values=[])], ctx=Load())]))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='message', ctx=Load()), Constant(value="Expected at most 2 items but found 2 extra: ['foo', 5]")], keywords=[]))], decorator_list=[]), FunctionDef(name='test_minLength', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='message_for', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=Constant(value='')), keyword(arg='schema', value=Dict(keys=[Constant(value='minLength')], values=[Constant(value=2)]))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='message', ctx=Load()), Constant(value="'' is too short")], keywords=[]))], decorator_list=[]), FunctionDef(name='test_maxLength', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='message_for', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=Constant(value='abc')), keyword(arg='schema', value=Dict(keys=[Constant(value='maxLength')], values=[Constant(value=2)]))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='message', ctx=Load()), Constant(value="'abc' is too long")], keywords=[]))], decorator_list=[]), FunctionDef(name='test_pattern', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='message_for', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=Constant(value='bbb')), keyword(arg='schema', value=Dict(keys=[Constant(value='pattern')], values=[Constant(value='^a*$')]))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='message', ctx=Load()), Constant(value="'bbb' does not match '^a*$'")], keywords=[]))], decorator_list=[]), FunctionDef(name='test_does_not_contain', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='message_for', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=List(elts=[], ctx=Load())), keyword(arg='schema', value=Dict(keys=[Constant(value='contains')], values=[Dict(keys=[Constant(value='type')], values=[Constant(value='string')])]))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='message', ctx=Load()), Constant(value='[] does not contain items matching the given schema')], keywords=[]))], decorator_list=[]), FunctionDef(name='test_contains_too_few', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='message_for', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=List(elts=[Constant(value='foo'), Constant(value=1)], ctx=Load())), keyword(arg='schema', value=Dict(keys=[Constant(value='contains'), Constant(value='minContains')], values=[Dict(keys=[Constant(value='type')], values=[Constant(value='string')]), Constant(value=2)]))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='message', ctx=Load()), Constant(value='Too few items match the given schema (expected at least 2 but only 1 matched)')], keywords=[]))], decorator_list=[]), FunctionDef(name='test_contains_too_few_both_constrained', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='message_for', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=List(elts=[Constant(value='foo'), Constant(value=1)], ctx=Load())), keyword(arg='schema', value=Dict(keys=[Constant(value='contains'), Constant(value='minContains'), Constant(value='maxContains')], values=[Dict(keys=[Constant(value='type')], values=[Constant(value='string')]), Constant(value=2), Constant(value=4)]))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='message', ctx=Load()), Constant(value='Too few items match the given schema (expected at least 2 but only 1 matched)')], keywords=[]))], decorator_list=[]), FunctionDef(name='test_contains_too_many', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='message_for', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=List(elts=[Constant(value='foo'), Constant(value='bar'), Constant(value='baz')], ctx=Load())), keyword(arg='schema', value=Dict(keys=[Constant(value='contains'), Constant(value='maxContains')], values=[Dict(keys=[Constant(value='type')], values=[Constant(value='string')]), Constant(value=2)]))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='message', ctx=Load()), Constant(value='Too many items match the given schema (expected at most 2)')], keywords=[]))], decorator_list=[]), FunctionDef(name='test_contains_too_many_both_constrained', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='message_for', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=BinOp(left=List(elts=[Constant(value='foo')], ctx=Load()), op=Mult(), right=Constant(value=5))), keyword(arg='schema', value=Dict(keys=[Constant(value='contains'), Constant(value='minContains'), Constant(value='maxContains')], values=[Dict(keys=[Constant(value='type')], values=[Constant(value='string')]), Constant(value=2), Constant(value=4)]))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='message', ctx=Load()), Constant(value='Too many items match the given schema (expected at most 4)')], keywords=[]))], decorator_list=[]), FunctionDef(name='test_exclusiveMinimum', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='message_for', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=Constant(value=3)), keyword(arg='schema', value=Dict(keys=[Constant(value='exclusiveMinimum')], values=[Constant(value=5)]))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='message', ctx=Load()), Constant(value='3 is less than or equal to the minimum of 5')], keywords=[]))], decorator_list=[]), FunctionDef(name='test_exclusiveMaximum', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='message_for', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=Constant(value=3)), keyword(arg='schema', value=Dict(keys=[Constant(value='exclusiveMaximum')], values=[Constant(value=2)]))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='message', ctx=Load()), Constant(value='3 is greater than or equal to the maximum of 2')], keywords=[]))], decorator_list=[]), FunctionDef(name='test_required', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='message_for', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=Dict(keys=[], values=[])), keyword(arg='schema', value=Dict(keys=[Constant(value='required')], values=[List(elts=[Constant(value='foo')], ctx=Load())]))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='message', ctx=Load()), Constant(value="'foo' is a required property")], keywords=[]))], decorator_list=[]), FunctionDef(name='test_dependentRequired', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='message_for', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=Dict(keys=[Constant(value='foo')], values=[Dict(keys=[], values=[])])), keyword(arg='schema', value=Dict(keys=[Constant(value='dependentRequired')], values=[Dict(keys=[Constant(value='foo')], values=[List(elts=[Constant(value='bar')], ctx=Load())])]))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='message', ctx=Load()), Constant(value="'bar' is a dependency of 'foo'")], keywords=[]))], decorator_list=[]), FunctionDef(name='test_minProperties', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='message_for', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=Dict(keys=[], values=[])), keyword(arg='schema', value=Dict(keys=[Constant(value='minProperties')], values=[Constant(value=2)]))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='message', ctx=Load()), Constant(value='{} does not have enough properties')], keywords=[]))], decorator_list=[]), FunctionDef(name='test_maxProperties', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='message_for', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=Dict(keys=[Constant(value='a'), Constant(value='b'), Constant(value='c')], values=[Dict(keys=[], values=[]), Dict(keys=[], values=[]), Dict(keys=[], values=[])])), keyword(arg='schema', value=Dict(keys=[Constant(value='maxProperties')], values=[Constant(value=2)]))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='message', ctx=Load()), Constant(value="{'a': {}, 'b': {}, 'c': {}} has too many properties")], keywords=[]))], decorator_list=[]), FunctionDef(name='test_oneOf_matches_none', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='message_for', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=Dict(keys=[], values=[])), keyword(arg='schema', value=Dict(keys=[Constant(value='oneOf')], values=[List(elts=[Constant(value=False)], ctx=Load())]))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='message', ctx=Load()), Constant(value='{} is not valid under any of the given schemas')], keywords=[]))], decorator_list=[]), FunctionDef(name='test_oneOf_matches_too_many', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='message_for', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=Dict(keys=[], values=[])), keyword(arg='schema', value=Dict(keys=[Constant(value='oneOf')], values=[List(elts=[Constant(value=True), Constant(value=True)], ctx=Load())]))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='message', ctx=Load()), Constant(value='{} is valid under each of True, True')], keywords=[]))], decorator_list=[]), FunctionDef(name='test_unevaluated_items', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='type'), Constant(value='unevaluatedItems')], values=[Constant(value='array'), Constant(value=False)])), Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='message_for', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=List(elts=[Constant(value='foo'), Constant(value='bar')], ctx=Load())), keyword(arg='schema', value=Name(id='schema', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Name(id='message', ctx=Load()), Constant(value="Unevaluated items are not allowed ('foo', 'bar' were unexpected)")], keywords=[]))], decorator_list=[]), FunctionDef(name='test_unevaluated_items_on_invalid_type', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='type'), Constant(value='unevaluatedItems')], values=[Constant(value='array'), Constant(value=False)])), Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='message_for', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=Constant(value='foo')), keyword(arg='schema', value=Name(id='schema', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='message', ctx=Load()), Constant(value="'foo' is not of type 'array'")], keywords=[]))], decorator_list=[]), FunctionDef(name='test_unevaluated_properties_invalid_against_subschema', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='properties'), Constant(value='unevaluatedProperties')], values=[Dict(keys=[Constant(value='foo')], values=[Dict(keys=[Constant(value='type')], values=[Constant(value='string')])]), Dict(keys=[Constant(value='const')], values=[Constant(value=12)])])), Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='message_for', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=Dict(keys=[Constant(value='foo'), Constant(value='bar'), Constant(value='baz')], values=[Constant(value='foo'), Constant(value='bar'), Constant(value=12)])), keyword(arg='schema', value=Name(id='schema', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='message', ctx=Load()), Constant(value="Unevaluated properties are not valid under the given schema ('bar' was unevaluated and invalid)")], keywords=[]))], decorator_list=[]), FunctionDef(name='test_unevaluated_properties_disallowed', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='type'), Constant(value='unevaluatedProperties')], values=[Constant(value='object'), Constant(value=False)])), Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='message_for', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=Dict(keys=[Constant(value='foo'), Constant(value='bar')], values=[Constant(value='foo'), Constant(value='bar')])), keyword(arg='schema', value=Name(id='schema', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='message', ctx=Load()), Constant(value="Unevaluated properties are not allowed ('bar', 'foo' were unexpected)")], keywords=[]))], decorator_list=[]), FunctionDef(name='test_unevaluated_properties_on_invalid_type', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='type'), Constant(value='unevaluatedProperties')], values=[Constant(value='object'), Constant(value=False)])), Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='message_for', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=Constant(value='foo')), keyword(arg='schema', value=Name(id='schema', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='message', ctx=Load()), Constant(value="'foo' is not of type 'object'")], keywords=[]))], decorator_list=[]), FunctionDef(name='test_single_item', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='prefixItems'), Constant(value='items')], values=[List(elts=[Dict(keys=[], values=[])], ctx=Load()), Constant(value=False)])), Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='message_for', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=List(elts=[Constant(value='foo'), Constant(value='bar'), Constant(value='baz')], ctx=Load())), keyword(arg='schema', value=Name(id='schema', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='message', ctx=Load()), Constant(value="Expected at most 1 item but found 2 extra: ['bar', 'baz']")], keywords=[]))], decorator_list=[]), FunctionDef(name='test_heterogeneous_additionalItems_with_Items', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='items'), Constant(value='additionalItems')], values=[List(elts=[Dict(keys=[], values=[])], ctx=Load()), Constant(value=False)])), Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='message_for', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=List(elts=[Constant(value='foo'), Constant(value='bar'), Constant(value=37)], ctx=Load())), keyword(arg='schema', value=Name(id='schema', ctx=Load())), keyword(arg='cls', value=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft7Validator', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='message', ctx=Load()), Constant(value="Additional items are not allowed ('bar', 37 were unexpected)")], keywords=[]))], decorator_list=[]), FunctionDef(name='test_heterogeneous_items_prefixItems', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='prefixItems'), Constant(value='items')], values=[List(elts=[Dict(keys=[], values=[])], ctx=Load()), Constant(value=False)])), Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='message_for', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=List(elts=[Constant(value='foo'), Constant(value='bar'), Constant(value=37)], ctx=Load())), keyword(arg='schema', value=Name(id='schema', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='message', ctx=Load()), Constant(value="Expected at most 1 item but found 2 extra: ['bar', 37]")], keywords=[]))], decorator_list=[]), FunctionDef(name='test_heterogeneous_unevaluatedItems_prefixItems', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='prefixItems'), Constant(value='unevaluatedItems')], values=[List(elts=[Dict(keys=[], values=[])], ctx=Load()), Constant(value=False)])), Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='message_for', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=List(elts=[Constant(value='foo'), Constant(value='bar'), Constant(value=37)], ctx=Load())), keyword(arg='schema', value=Name(id='schema', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='message', ctx=Load()), Constant(value="Unevaluated items are not allowed ('bar', 37 were unexpected)")], keywords=[]))], decorator_list=[]), FunctionDef(name='test_heterogeneous_properties_additionalProperties', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Not valid deserialized JSON, but this should not blow up.\n        ')), Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='properties'), Constant(value='additionalProperties')], values=[Dict(keys=[Constant(value='foo')], values=[Dict(keys=[], values=[])]), Constant(value=False)])), Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='message_for', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=Dict(keys=[Constant(value='foo'), Constant(value='a'), Constant(value=37)], values=[Dict(keys=[], values=[]), Constant(value='baz'), Constant(value=12)])), keyword(arg='schema', value=Name(id='schema', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='message', ctx=Load()), Constant(value="Additional properties are not allowed (37, 'a' were unexpected)")], keywords=[]))], decorator_list=[]), FunctionDef(name='test_heterogeneous_properties_unevaluatedProperties', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Not valid deserialized JSON, but this should not blow up.\n        ')), Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='properties'), Constant(value='unevaluatedProperties')], values=[Dict(keys=[Constant(value='foo')], values=[Dict(keys=[], values=[])]), Constant(value=False)])), Assign(targets=[Name(id='message', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='message_for', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=Dict(keys=[Constant(value='foo'), Constant(value='a'), Constant(value=37)], values=[Dict(keys=[], values=[]), Constant(value='baz'), Constant(value=12)])), keyword(arg='schema', value=Name(id='schema', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='message', ctx=Load()), Constant(value="Unevaluated properties are not allowed (37, 'a' were unexpected)")], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='TestValidationErrorDetails', bases=[Name(id='TestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='test_anyOf', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='instance', ctx=Store())], value=Constant(value=5)), Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='anyOf')], values=[List(elts=[Dict(keys=[Constant(value='minimum')], values=[Constant(value=20)]), Dict(keys=[Constant(value='type')], values=[Constant(value='string')])], ctx=Load())])), Assign(targets=[Name(id='validator', ctx=Store())], value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft4Validator', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[])), Assign(targets=[Name(id='errors', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='iter_errors', ctx=Load()), args=[Name(id='instance', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='errors', ctx=Load())], keywords=[]), Constant(value=1)], keywords=[])), Assign(targets=[Name(id='e', ctx=Store())], value=Subscript(value=Name(id='errors', ctx=Load()), slice=Constant(value=0), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e', ctx=Load()), attr='validator', ctx=Load()), Constant(value='anyOf')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e', ctx=Load()), attr='validator_value', ctx=Load()), Subscript(value=Name(id='schema', ctx=Load()), slice=Constant(value='anyOf'), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e', ctx=Load()), attr='instance', ctx=Load()), Name(id='instance', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e', ctx=Load()), attr='schema', ctx=Load()), Name(id='schema', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsNone', ctx=Load()), args=[Attribute(value=Name(id='e', ctx=Load()), attr='parent', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e', ctx=Load()), attr='path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e', ctx=Load()), attr='relative_path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e', ctx=Load()), attr='absolute_path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e', ctx=Load()), attr='json_path', ctx=Load()), Constant(value='$')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e', ctx=Load()), attr='schema_path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value='anyOf')], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e', ctx=Load()), attr='relative_schema_path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value='anyOf')], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e', ctx=Load()), attr='absolute_schema_path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value='anyOf')], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='e', ctx=Load()), attr='context', ctx=Load())], keywords=[]), Constant(value=2)], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='e1', ctx=Store()), Name(id='e2', ctx=Store())], ctx=Store())], value=Call(func=Name(id='sorted_errors', ctx=Load()), args=[Attribute(value=Name(id='e', ctx=Load()), attr='context', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e1', ctx=Load()), attr='validator', ctx=Load()), Constant(value='minimum')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e1', ctx=Load()), attr='validator_value', ctx=Load()), Subscript(value=Subscript(value=Subscript(value=Name(id='schema', ctx=Load()), slice=Constant(value='anyOf'), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='minimum'), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e1', ctx=Load()), attr='instance', ctx=Load()), Name(id='instance', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e1', ctx=Load()), attr='schema', ctx=Load()), Subscript(value=Subscript(value=Name(id='schema', ctx=Load()), slice=Constant(value='anyOf'), ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIs', ctx=Load()), args=[Attribute(value=Name(id='e1', ctx=Load()), attr='parent', ctx=Load()), Name(id='e', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e1', ctx=Load()), attr='path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e1', ctx=Load()), attr='absolute_path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e1', ctx=Load()), attr='relative_path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e1', ctx=Load()), attr='json_path', ctx=Load()), Constant(value='$')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e1', ctx=Load()), attr='schema_path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value=0), Constant(value='minimum')], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e1', ctx=Load()), attr='relative_schema_path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value=0), Constant(value='minimum')], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e1', ctx=Load()), attr='absolute_schema_path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value='anyOf'), Constant(value=0), Constant(value='minimum')], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertFalse', ctx=Load()), args=[Attribute(value=Name(id='e1', ctx=Load()), attr='context', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e2', ctx=Load()), attr='validator', ctx=Load()), Constant(value='type')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e2', ctx=Load()), attr='validator_value', ctx=Load()), Subscript(value=Subscript(value=Subscript(value=Name(id='schema', ctx=Load()), slice=Constant(value='anyOf'), ctx=Load()), slice=Constant(value=1), ctx=Load()), slice=Constant(value='type'), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e2', ctx=Load()), attr='instance', ctx=Load()), Name(id='instance', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e2', ctx=Load()), attr='schema', ctx=Load()), Subscript(value=Subscript(value=Name(id='schema', ctx=Load()), slice=Constant(value='anyOf'), ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIs', ctx=Load()), args=[Attribute(value=Name(id='e2', ctx=Load()), attr='parent', ctx=Load()), Name(id='e', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e2', ctx=Load()), attr='path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e2', ctx=Load()), attr='relative_path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e2', ctx=Load()), attr='absolute_path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e2', ctx=Load()), attr='json_path', ctx=Load()), Constant(value='$')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e2', ctx=Load()), attr='schema_path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value=1), Constant(value='type')], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e2', ctx=Load()), attr='relative_schema_path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value=1), Constant(value='type')], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e2', ctx=Load()), attr='absolute_schema_path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value='anyOf'), Constant(value=1), Constant(value='type')], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='e2', ctx=Load()), attr='context', ctx=Load())], keywords=[]), Constant(value=0)], keywords=[]))], decorator_list=[]), FunctionDef(name='test_type', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='instance', ctx=Store())], value=Dict(keys=[Constant(value='foo')], values=[Constant(value=1)])), Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='type')], values=[List(elts=[Dict(keys=[Constant(value='type')], values=[Constant(value='integer')]), Dict(keys=[Constant(value='type'), Constant(value='properties')], values=[Constant(value='object'), Dict(keys=[Constant(value='foo')], values=[Dict(keys=[Constant(value='enum')], values=[List(elts=[Constant(value=2)], ctx=Load())])])])], ctx=Load())])), Assign(targets=[Name(id='validator', ctx=Store())], value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft3Validator', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[])), Assign(targets=[Name(id='errors', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='iter_errors', ctx=Load()), args=[Name(id='instance', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Name(id='errors', ctx=Load())], keywords=[]), Constant(value=1)], keywords=[])), Assign(targets=[Name(id='e', ctx=Store())], value=Subscript(value=Name(id='errors', ctx=Load()), slice=Constant(value=0), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e', ctx=Load()), attr='validator', ctx=Load()), Constant(value='type')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e', ctx=Load()), attr='validator_value', ctx=Load()), Subscript(value=Name(id='schema', ctx=Load()), slice=Constant(value='type'), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e', ctx=Load()), attr='instance', ctx=Load()), Name(id='instance', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e', ctx=Load()), attr='schema', ctx=Load()), Name(id='schema', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsNone', ctx=Load()), args=[Attribute(value=Name(id='e', ctx=Load()), attr='parent', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e', ctx=Load()), attr='path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e', ctx=Load()), attr='relative_path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e', ctx=Load()), attr='absolute_path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e', ctx=Load()), attr='json_path', ctx=Load()), Constant(value='$')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e', ctx=Load()), attr='schema_path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value='type')], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e', ctx=Load()), attr='relative_schema_path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value='type')], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e', ctx=Load()), attr='absolute_schema_path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value='type')], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='e', ctx=Load()), attr='context', ctx=Load())], keywords=[]), Constant(value=2)], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='e1', ctx=Store()), Name(id='e2', ctx=Store())], ctx=Store())], value=Call(func=Name(id='sorted_errors', ctx=Load()), args=[Attribute(value=Name(id='e', ctx=Load()), attr='context', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e1', ctx=Load()), attr='validator', ctx=Load()), Constant(value='type')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e1', ctx=Load()), attr='validator_value', ctx=Load()), Subscript(value=Subscript(value=Subscript(value=Name(id='schema', ctx=Load()), slice=Constant(value='type'), ctx=Load()), slice=Constant(value=0), ctx=Load()), slice=Constant(value='type'), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e1', ctx=Load()), attr='instance', ctx=Load()), Name(id='instance', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e1', ctx=Load()), attr='schema', ctx=Load()), Subscript(value=Subscript(value=Name(id='schema', ctx=Load()), slice=Constant(value='type'), ctx=Load()), slice=Constant(value=0), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIs', ctx=Load()), args=[Attribute(value=Name(id='e1', ctx=Load()), attr='parent', ctx=Load()), Name(id='e', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e1', ctx=Load()), attr='path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e1', ctx=Load()), attr='relative_path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e1', ctx=Load()), attr='absolute_path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e1', ctx=Load()), attr='json_path', ctx=Load()), Constant(value='$')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e1', ctx=Load()), attr='schema_path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value=0), Constant(value='type')], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e1', ctx=Load()), attr='relative_schema_path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value=0), Constant(value='type')], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e1', ctx=Load()), attr='absolute_schema_path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value='type'), Constant(value=0), Constant(value='type')], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertFalse', ctx=Load()), args=[Attribute(value=Name(id='e1', ctx=Load()), attr='context', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e2', ctx=Load()), attr='validator', ctx=Load()), Constant(value='enum')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e2', ctx=Load()), attr='validator_value', ctx=Load()), List(elts=[Constant(value=2)], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e2', ctx=Load()), attr='instance', ctx=Load()), Constant(value=1)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e2', ctx=Load()), attr='schema', ctx=Load()), Dict(keys=[Constant(value='enum')], values=[List(elts=[Constant(value=2)], ctx=Load())])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIs', ctx=Load()), args=[Attribute(value=Name(id='e2', ctx=Load()), attr='parent', ctx=Load()), Name(id='e', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e2', ctx=Load()), attr='path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value='foo')], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e2', ctx=Load()), attr='relative_path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value='foo')], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e2', ctx=Load()), attr='absolute_path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value='foo')], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e2', ctx=Load()), attr='json_path', ctx=Load()), Constant(value='$.foo')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e2', ctx=Load()), attr='schema_path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value=1), Constant(value='properties'), Constant(value='foo'), Constant(value='enum')], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e2', ctx=Load()), attr='relative_schema_path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value=1), Constant(value='properties'), Constant(value='foo'), Constant(value='enum')], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e2', ctx=Load()), attr='absolute_schema_path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value='type'), Constant(value=1), Constant(value='properties'), Constant(value='foo'), Constant(value='enum')], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertFalse', ctx=Load()), args=[Attribute(value=Name(id='e2', ctx=Load()), attr='context', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_single_nesting', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='instance', ctx=Store())], value=Dict(keys=[Constant(value='foo'), Constant(value='bar'), Constant(value='baz'), Constant(value='quux')], values=[Constant(value=2), List(elts=[Constant(value=1)], ctx=Load()), Constant(value=15), Constant(value='spam')])), Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='properties')], values=[Dict(keys=[Constant(value='foo'), Constant(value='bar'), Constant(value='baz')], values=[Dict(keys=[Constant(value='type')], values=[Constant(value='string')]), Dict(keys=[Constant(value='minItems')], values=[Constant(value=2)]), Dict(keys=[Constant(value='maximum'), Constant(value='enum')], values=[Constant(value=10), List(elts=[Constant(value=2), Constant(value=4), Constant(value=6), Constant(value=8)], ctx=Load())])])])), Assign(targets=[Name(id='validator', ctx=Store())], value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft3Validator', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[])), Assign(targets=[Name(id='errors', ctx=Store())], value=Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='iter_errors', ctx=Load()), args=[Name(id='instance', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='e1', ctx=Store()), Name(id='e2', ctx=Store()), Name(id='e3', ctx=Store()), Name(id='e4', ctx=Store())], ctx=Store())], value=Call(func=Name(id='sorted_errors', ctx=Load()), args=[Name(id='errors', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e1', ctx=Load()), attr='path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value='bar')], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e2', ctx=Load()), attr='path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value='baz')], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e3', ctx=Load()), attr='path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value='baz')], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e4', ctx=Load()), attr='path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value='foo')], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e1', ctx=Load()), attr='relative_path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value='bar')], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e2', ctx=Load()), attr='relative_path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value='baz')], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e3', ctx=Load()), attr='relative_path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value='baz')], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e4', ctx=Load()), attr='relative_path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value='foo')], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e1', ctx=Load()), attr='absolute_path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value='bar')], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e2', ctx=Load()), attr='absolute_path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value='baz')], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e3', ctx=Load()), attr='absolute_path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value='baz')], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e4', ctx=Load()), attr='absolute_path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value='foo')], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e1', ctx=Load()), attr='json_path', ctx=Load()), Constant(value='$.bar')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e2', ctx=Load()), attr='json_path', ctx=Load()), Constant(value='$.baz')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e3', ctx=Load()), attr='json_path', ctx=Load()), Constant(value='$.baz')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e4', ctx=Load()), attr='json_path', ctx=Load()), Constant(value='$.foo')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e1', ctx=Load()), attr='validator', ctx=Load()), Constant(value='minItems')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e2', ctx=Load()), attr='validator', ctx=Load()), Constant(value='enum')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e3', ctx=Load()), attr='validator', ctx=Load()), Constant(value='maximum')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e4', ctx=Load()), attr='validator', ctx=Load()), Constant(value='type')], keywords=[]))], decorator_list=[]), FunctionDef(name='test_multiple_nesting', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='instance', ctx=Store())], value=List(elts=[Constant(value=1), Dict(keys=[Constant(value='foo'), Constant(value='bar')], values=[Constant(value=2), Dict(keys=[Constant(value='baz')], values=[List(elts=[Constant(value=1)], ctx=Load())])]), Constant(value='quux')], ctx=Load())), Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='type'), Constant(value='items')], values=[Constant(value='string'), Dict(keys=[Constant(value='type'), Constant(value='properties')], values=[List(elts=[Constant(value='string'), Constant(value='object')], ctx=Load()), Dict(keys=[Constant(value='foo'), Constant(value='bar')], values=[Dict(keys=[Constant(value='enum')], values=[List(elts=[Constant(value=1), Constant(value=3)], ctx=Load())]), Dict(keys=[Constant(value='type'), Constant(value='properties')], values=[Constant(value='array'), Dict(keys=[Constant(value='bar'), Constant(value='baz')], values=[Dict(keys=[Constant(value='required')], values=[Constant(value=True)]), Dict(keys=[Constant(value='minItems')], values=[Constant(value=2)])])])])])])), Assign(targets=[Name(id='validator', ctx=Store())], value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft3Validator', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[])), Assign(targets=[Name(id='errors', ctx=Store())], value=Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='iter_errors', ctx=Load()), args=[Name(id='instance', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='e1', ctx=Store()), Name(id='e2', ctx=Store()), Name(id='e3', ctx=Store()), Name(id='e4', ctx=Store()), Name(id='e5', ctx=Store()), Name(id='e6', ctx=Store())], ctx=Store())], value=Call(func=Name(id='sorted_errors', ctx=Load()), args=[Name(id='errors', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e1', ctx=Load()), attr='path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e2', ctx=Load()), attr='path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value=0)], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e3', ctx=Load()), attr='path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value=1), Constant(value='bar')], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e4', ctx=Load()), attr='path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value=1), Constant(value='bar'), Constant(value='bar')], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e5', ctx=Load()), attr='path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value=1), Constant(value='bar'), Constant(value='baz')], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e6', ctx=Load()), attr='path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value=1), Constant(value='foo')], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e1', ctx=Load()), attr='json_path', ctx=Load()), Constant(value='$')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e2', ctx=Load()), attr='json_path', ctx=Load()), Constant(value='$[0]')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e3', ctx=Load()), attr='json_path', ctx=Load()), Constant(value='$[1].bar')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e4', ctx=Load()), attr='json_path', ctx=Load()), Constant(value='$[1].bar.bar')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e5', ctx=Load()), attr='json_path', ctx=Load()), Constant(value='$[1].bar.baz')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e6', ctx=Load()), attr='json_path', ctx=Load()), Constant(value='$[1].foo')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e1', ctx=Load()), attr='schema_path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value='type')], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e2', ctx=Load()), attr='schema_path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value='items'), Constant(value='type')], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Attribute(value=Name(id='e3', ctx=Load()), attr='schema_path', ctx=Load())], keywords=[]), List(elts=[Constant(value='items'), Constant(value='properties'), Constant(value='bar'), Constant(value='type')], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Attribute(value=Name(id='e4', ctx=Load()), attr='schema_path', ctx=Load())], keywords=[]), List(elts=[Constant(value='items'), Constant(value='properties'), Constant(value='bar'), Constant(value='properties'), Constant(value='bar'), Constant(value='required')], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Attribute(value=Name(id='e5', ctx=Load()), attr='schema_path', ctx=Load())], keywords=[]), List(elts=[Constant(value='items'), Constant(value='properties'), Constant(value='bar'), Constant(value='properties'), Constant(value='baz'), Constant(value='minItems')], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='list', ctx=Load()), args=[Attribute(value=Name(id='e6', ctx=Load()), attr='schema_path', ctx=Load())], keywords=[]), List(elts=[Constant(value='items'), Constant(value='properties'), Constant(value='foo'), Constant(value='enum')], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e1', ctx=Load()), attr='validator', ctx=Load()), Constant(value='type')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e2', ctx=Load()), attr='validator', ctx=Load()), Constant(value='type')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e3', ctx=Load()), attr='validator', ctx=Load()), Constant(value='type')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e4', ctx=Load()), attr='validator', ctx=Load()), Constant(value='required')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e5', ctx=Load()), attr='validator', ctx=Load()), Constant(value='minItems')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e6', ctx=Load()), attr='validator', ctx=Load()), Constant(value='enum')], keywords=[]))], decorator_list=[]), FunctionDef(name='test_recursive', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='definitions'), Constant(value='type'), Constant(value='required'), Constant(value='properties')], values=[Dict(keys=[Constant(value='node')], values=[Dict(keys=[Constant(value='anyOf')], values=[List(elts=[Dict(keys=[Constant(value='type'), Constant(value='required'), Constant(value='properties')], values=[Constant(value='object'), List(elts=[Constant(value='name'), Constant(value='children')], ctx=Load()), Dict(keys=[Constant(value='name'), Constant(value='children')], values=[Dict(keys=[Constant(value='type')], values=[Constant(value='string')]), Dict(keys=[Constant(value='type'), Constant(value='patternProperties')], values=[Constant(value='object'), Dict(keys=[Constant(value='^.*$')], values=[Dict(keys=[Constant(value='$ref')], values=[Constant(value='#/definitions/node')])])])])])], ctx=Load())])]), Constant(value='object'), List(elts=[Constant(value='root')], ctx=Load()), Dict(keys=[Constant(value='root')], values=[Dict(keys=[Constant(value='$ref')], values=[Constant(value='#/definitions/node')])])])), Assign(targets=[Name(id='instance', ctx=Store())], value=Dict(keys=[Constant(value='root')], values=[Dict(keys=[Constant(value='name'), Constant(value='children')], values=[Constant(value='root'), Dict(keys=[Constant(value='a')], values=[Dict(keys=[Constant(value='name'), Constant(value='children')], values=[Constant(value='a'), Dict(keys=[Constant(value='ab')], values=[Dict(keys=[Constant(value='name')], values=[Constant(value='ab')])])])])])])), Assign(targets=[Name(id='validator', ctx=Store())], value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft4Validator', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='e', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='iter_errors', ctx=Load()), args=[Name(id='instance', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e', ctx=Load()), attr='absolute_path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value='root')], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e', ctx=Load()), attr='absolute_schema_path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value='properties'), Constant(value='root'), Constant(value='anyOf')], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e', ctx=Load()), attr='json_path', ctx=Load()), Constant(value='$.root')], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='e1', ctx=Store())], ctx=Store())], value=Attribute(value=Name(id='e', ctx=Load()), attr='context', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e1', ctx=Load()), attr='absolute_path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value='root'), Constant(value='children'), Constant(value='a')], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e1', ctx=Load()), attr='absolute_schema_path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value='properties'), Constant(value='root'), Constant(value='anyOf'), Constant(value=0), Constant(value='properties'), Constant(value='children'), Constant(value='patternProperties'), Constant(value='^.*$'), Constant(value='anyOf')], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e1', ctx=Load()), attr='json_path', ctx=Load()), Constant(value='$.root.children.a')], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='e2', ctx=Store())], ctx=Store())], value=Attribute(value=Name(id='e1', ctx=Load()), attr='context', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e2', ctx=Load()), attr='absolute_path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value='root'), Constant(value='children'), Constant(value='a'), Constant(value='children'), Constant(value='ab')], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e2', ctx=Load()), attr='absolute_schema_path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value='properties'), Constant(value='root'), Constant(value='anyOf'), Constant(value=0), Constant(value='properties'), Constant(value='children'), Constant(value='patternProperties'), Constant(value='^.*$'), Constant(value='anyOf'), Constant(value=0), Constant(value='properties'), Constant(value='children'), Constant(value='patternProperties'), Constant(value='^.*$'), Constant(value='anyOf')], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e2', ctx=Load()), attr='json_path', ctx=Load()), Constant(value='$.root.children.a.children.ab')], keywords=[]))], decorator_list=[]), FunctionDef(name='test_additionalProperties', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='instance', ctx=Store())], value=Dict(keys=[Constant(value='bar'), Constant(value='foo')], values=[Constant(value='bar'), Constant(value=2)])), Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='additionalProperties')], values=[Dict(keys=[Constant(value='type'), Constant(value='minimum')], values=[Constant(value='integer'), Constant(value=5)])])), Assign(targets=[Name(id='validator', ctx=Store())], value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft3Validator', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[])), Assign(targets=[Name(id='errors', ctx=Store())], value=Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='iter_errors', ctx=Load()), args=[Name(id='instance', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='e1', ctx=Store()), Name(id='e2', ctx=Store())], ctx=Store())], value=Call(func=Name(id='sorted_errors', ctx=Load()), args=[Name(id='errors', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e1', ctx=Load()), attr='path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value='bar')], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e2', ctx=Load()), attr='path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value='foo')], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e1', ctx=Load()), attr='json_path', ctx=Load()), Constant(value='$.bar')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e2', ctx=Load()), attr='json_path', ctx=Load()), Constant(value='$.foo')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e1', ctx=Load()), attr='validator', ctx=Load()), Constant(value='type')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e2', ctx=Load()), attr='validator', ctx=Load()), Constant(value='minimum')], keywords=[]))], decorator_list=[]), FunctionDef(name='test_patternProperties', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='instance', ctx=Store())], value=Dict(keys=[Constant(value='bar'), Constant(value='foo')], values=[Constant(value=1), Constant(value=2)])), Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='patternProperties')], values=[Dict(keys=[Constant(value='bar'), Constant(value='foo')], values=[Dict(keys=[Constant(value='type')], values=[Constant(value='string')]), Dict(keys=[Constant(value='minimum')], values=[Constant(value=5)])])])), Assign(targets=[Name(id='validator', ctx=Store())], value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft3Validator', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[])), Assign(targets=[Name(id='errors', ctx=Store())], value=Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='iter_errors', ctx=Load()), args=[Name(id='instance', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='e1', ctx=Store()), Name(id='e2', ctx=Store())], ctx=Store())], value=Call(func=Name(id='sorted_errors', ctx=Load()), args=[Name(id='errors', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e1', ctx=Load()), attr='path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value='bar')], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e2', ctx=Load()), attr='path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value='foo')], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e1', ctx=Load()), attr='json_path', ctx=Load()), Constant(value='$.bar')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e2', ctx=Load()), attr='json_path', ctx=Load()), Constant(value='$.foo')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e1', ctx=Load()), attr='validator', ctx=Load()), Constant(value='type')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e2', ctx=Load()), attr='validator', ctx=Load()), Constant(value='minimum')], keywords=[]))], decorator_list=[]), FunctionDef(name='test_additionalItems', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='instance', ctx=Store())], value=List(elts=[Constant(value='foo'), Constant(value=1)], ctx=Load())), Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='items'), Constant(value='additionalItems')], values=[List(elts=[], ctx=Load()), Dict(keys=[Constant(value='type'), Constant(value='minimum')], values=[Constant(value='integer'), Constant(value=5)])])), Assign(targets=[Name(id='validator', ctx=Store())], value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft3Validator', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[])), Assign(targets=[Name(id='errors', ctx=Store())], value=Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='iter_errors', ctx=Load()), args=[Name(id='instance', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='e1', ctx=Store()), Name(id='e2', ctx=Store())], ctx=Store())], value=Call(func=Name(id='sorted_errors', ctx=Load()), args=[Name(id='errors', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e1', ctx=Load()), attr='path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value=0)], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e2', ctx=Load()), attr='path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value=1)], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e1', ctx=Load()), attr='json_path', ctx=Load()), Constant(value='$[0]')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e2', ctx=Load()), attr='json_path', ctx=Load()), Constant(value='$[1]')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e1', ctx=Load()), attr='validator', ctx=Load()), Constant(value='type')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e2', ctx=Load()), attr='validator', ctx=Load()), Constant(value='minimum')], keywords=[]))], decorator_list=[]), FunctionDef(name='test_additionalItems_with_items', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='instance', ctx=Store())], value=List(elts=[Constant(value='foo'), Constant(value='bar'), Constant(value=1)], ctx=Load())), Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='items'), Constant(value='additionalItems')], values=[List(elts=[Dict(keys=[], values=[])], ctx=Load()), Dict(keys=[Constant(value='type'), Constant(value='minimum')], values=[Constant(value='integer'), Constant(value=5)])])), Assign(targets=[Name(id='validator', ctx=Store())], value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft3Validator', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[])), Assign(targets=[Name(id='errors', ctx=Store())], value=Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='iter_errors', ctx=Load()), args=[Name(id='instance', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='e1', ctx=Store()), Name(id='e2', ctx=Store())], ctx=Store())], value=Call(func=Name(id='sorted_errors', ctx=Load()), args=[Name(id='errors', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e1', ctx=Load()), attr='path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value=1)], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e2', ctx=Load()), attr='path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value=2)], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e1', ctx=Load()), attr='json_path', ctx=Load()), Constant(value='$[1]')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e2', ctx=Load()), attr='json_path', ctx=Load()), Constant(value='$[2]')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e1', ctx=Load()), attr='validator', ctx=Load()), Constant(value='type')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='e2', ctx=Load()), attr='validator', ctx=Load()), Constant(value='minimum')], keywords=[]))], decorator_list=[]), FunctionDef(name='test_propertyNames', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='instance', ctx=Store())], value=Dict(keys=[Constant(value='foo')], values=[Constant(value=12)])), Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='propertyNames')], values=[Dict(keys=[Constant(value='not')], values=[Dict(keys=[Constant(value='const')], values=[Constant(value='foo')])])])), Assign(targets=[Name(id='validator', ctx=Store())], value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft7Validator', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='error', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='iter_errors', ctx=Load()), args=[Name(id='instance', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='error', ctx=Load()), attr='validator', ctx=Load()), Constant(value='not')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='error', ctx=Load()), attr='message', ctx=Load()), Constant(value="'foo' should not be valid under {'const': 'foo'}")], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='error', ctx=Load()), attr='path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='error', ctx=Load()), attr='json_path', ctx=Load()), Constant(value='$')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='error', ctx=Load()), attr='schema_path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value='propertyNames'), Constant(value='not')], ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_if_then', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='if'), Constant(value='then')], values=[Dict(keys=[Constant(value='const')], values=[Constant(value=12)]), Dict(keys=[Constant(value='const')], values=[Constant(value=13)])])), Assign(targets=[Name(id='validator', ctx=Store())], value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft7Validator', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='error', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='iter_errors', ctx=Load()), args=[Constant(value=12)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='error', ctx=Load()), attr='validator', ctx=Load()), Constant(value='const')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='error', ctx=Load()), attr='message', ctx=Load()), Constant(value='13 was expected')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='error', ctx=Load()), attr='path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='error', ctx=Load()), attr='json_path', ctx=Load()), Constant(value='$')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='error', ctx=Load()), attr='schema_path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value='then'), Constant(value='const')], ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_if_else', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='if'), Constant(value='else')], values=[Dict(keys=[Constant(value='const')], values=[Constant(value=12)]), Dict(keys=[Constant(value='const')], values=[Constant(value=13)])])), Assign(targets=[Name(id='validator', ctx=Store())], value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft7Validator', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='error', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='iter_errors', ctx=Load()), args=[Constant(value=15)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='error', ctx=Load()), attr='validator', ctx=Load()), Constant(value='const')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='error', ctx=Load()), attr='message', ctx=Load()), Constant(value='13 was expected')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='error', ctx=Load()), attr='path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[], ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='error', ctx=Load()), attr='json_path', ctx=Load()), Constant(value='$')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='error', ctx=Load()), attr='schema_path', ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value='else'), Constant(value='const')], ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_boolean_schema_False', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='validator', ctx=Store())], value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft7Validator', ctx=Load()), args=[Constant(value=False)], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='error', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='iter_errors', ctx=Load()), args=[Constant(value=12)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Tuple(elts=[Attribute(value=Name(id='error', ctx=Load()), attr='message', ctx=Load()), Attribute(value=Name(id='error', ctx=Load()), attr='validator', ctx=Load()), Attribute(value=Name(id='error', ctx=Load()), attr='validator_value', ctx=Load()), Attribute(value=Name(id='error', ctx=Load()), attr='instance', ctx=Load()), Attribute(value=Name(id='error', ctx=Load()), attr='schema', ctx=Load()), Attribute(value=Name(id='error', ctx=Load()), attr='schema_path', ctx=Load()), Attribute(value=Name(id='error', ctx=Load()), attr='json_path', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='False schema does not allow 12'), Constant(value=None), Constant(value=None), Constant(value=12), Constant(value=False), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[], ctx=Load())], keywords=[]), Constant(value='$')], ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_ref', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='ref', ctx=Store()), Name(id='schema', ctx=Store())], ctx=Store())], value=Tuple(elts=[Constant(value='someRef'), Dict(keys=[Constant(value='additionalProperties')], values=[Dict(keys=[Constant(value='type')], values=[Constant(value='integer')])])], ctx=Load())), Assign(targets=[Name(id='validator', ctx=Store())], value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft7Validator', ctx=Load()), args=[Dict(keys=[Constant(value='$ref')], values=[Name(id='ref', ctx=Load())])], keywords=[keyword(arg='resolver', value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='_RefResolver', ctx=Load()), args=[Constant(value=''), Dict(keys=[], values=[])], keywords=[keyword(arg='store', value=Dict(keys=[Name(id='ref', ctx=Load())], values=[Name(id='schema', ctx=Load())]))]))])), Assign(targets=[Tuple(elts=[Name(id='error', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='iter_errors', ctx=Load()), args=[Dict(keys=[Constant(value='foo')], values=[Constant(value='notAnInteger')])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Tuple(elts=[Attribute(value=Name(id='error', ctx=Load()), attr='message', ctx=Load()), Attribute(value=Name(id='error', ctx=Load()), attr='validator', ctx=Load()), Attribute(value=Name(id='error', ctx=Load()), attr='validator_value', ctx=Load()), Attribute(value=Name(id='error', ctx=Load()), attr='instance', ctx=Load()), Attribute(value=Name(id='error', ctx=Load()), attr='absolute_path', ctx=Load()), Attribute(value=Name(id='error', ctx=Load()), attr='schema', ctx=Load()), Attribute(value=Name(id='error', ctx=Load()), attr='schema_path', ctx=Load()), Attribute(value=Name(id='error', ctx=Load()), attr='json_path', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value="'notAnInteger' is not of type 'integer'"), Constant(value='type'), Constant(value='integer'), Constant(value='notAnInteger'), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value='foo')], ctx=Load())], keywords=[]), Dict(keys=[Constant(value='type')], values=[Constant(value='integer')]), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value='additionalProperties'), Constant(value='type')], ctx=Load())], keywords=[]), Constant(value='$.foo')], ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_prefixItems', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='prefixItems')], values=[List(elts=[Dict(keys=[Constant(value='type')], values=[Constant(value='string')]), Dict(keys=[], values=[]), Dict(keys=[], values=[]), Dict(keys=[Constant(value='maximum')], values=[Constant(value=3)])], ctx=Load())])), Assign(targets=[Name(id='validator', ctx=Store())], value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft202012Validator', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='type_error', ctx=Store()), Name(id='min_error', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='iter_errors', ctx=Load()), args=[List(elts=[Constant(value=1), Constant(value=2), Constant(value='foo'), Constant(value=5)], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Tuple(elts=[Attribute(value=Name(id='type_error', ctx=Load()), attr='message', ctx=Load()), Attribute(value=Name(id='type_error', ctx=Load()), attr='validator', ctx=Load()), Attribute(value=Name(id='type_error', ctx=Load()), attr='validator_value', ctx=Load()), Attribute(value=Name(id='type_error', ctx=Load()), attr='instance', ctx=Load()), Attribute(value=Name(id='type_error', ctx=Load()), attr='absolute_path', ctx=Load()), Attribute(value=Name(id='type_error', ctx=Load()), attr='schema', ctx=Load()), Attribute(value=Name(id='type_error', ctx=Load()), attr='schema_path', ctx=Load()), Attribute(value=Name(id='type_error', ctx=Load()), attr='json_path', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value="1 is not of type 'string'"), Constant(value='type'), Constant(value='string'), Constant(value=1), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value=0)], ctx=Load())], keywords=[]), Dict(keys=[Constant(value='type')], values=[Constant(value='string')]), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value='prefixItems'), Constant(value=0), Constant(value='type')], ctx=Load())], keywords=[]), Constant(value='$[0]')], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Tuple(elts=[Attribute(value=Name(id='min_error', ctx=Load()), attr='message', ctx=Load()), Attribute(value=Name(id='min_error', ctx=Load()), attr='validator', ctx=Load()), Attribute(value=Name(id='min_error', ctx=Load()), attr='validator_value', ctx=Load()), Attribute(value=Name(id='min_error', ctx=Load()), attr='instance', ctx=Load()), Attribute(value=Name(id='min_error', ctx=Load()), attr='absolute_path', ctx=Load()), Attribute(value=Name(id='min_error', ctx=Load()), attr='schema', ctx=Load()), Attribute(value=Name(id='min_error', ctx=Load()), attr='schema_path', ctx=Load()), Attribute(value=Name(id='min_error', ctx=Load()), attr='json_path', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='5 is greater than the maximum of 3'), Constant(value='maximum'), Constant(value=3), Constant(value=5), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value=3)], ctx=Load())], keywords=[]), Dict(keys=[Constant(value='maximum')], values=[Constant(value=3)]), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value='prefixItems'), Constant(value=3), Constant(value='maximum')], ctx=Load())], keywords=[]), Constant(value='$[3]')], ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_prefixItems_with_items', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='items'), Constant(value='prefixItems')], values=[Dict(keys=[Constant(value='type')], values=[Constant(value='string')]), List(elts=[Dict(keys=[], values=[])], ctx=Load())])), Assign(targets=[Name(id='validator', ctx=Store())], value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft202012Validator', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='e1', ctx=Store()), Name(id='e2', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='iter_errors', ctx=Load()), args=[List(elts=[Constant(value='foo'), Constant(value=2), Constant(value='bar'), Constant(value=4), Constant(value='baz')], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Tuple(elts=[Attribute(value=Name(id='e1', ctx=Load()), attr='message', ctx=Load()), Attribute(value=Name(id='e1', ctx=Load()), attr='validator', ctx=Load()), Attribute(value=Name(id='e1', ctx=Load()), attr='validator_value', ctx=Load()), Attribute(value=Name(id='e1', ctx=Load()), attr='instance', ctx=Load()), Attribute(value=Name(id='e1', ctx=Load()), attr='absolute_path', ctx=Load()), Attribute(value=Name(id='e1', ctx=Load()), attr='schema', ctx=Load()), Attribute(value=Name(id='e1', ctx=Load()), attr='schema_path', ctx=Load()), Attribute(value=Name(id='e1', ctx=Load()), attr='json_path', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value="2 is not of type 'string'"), Constant(value='type'), Constant(value='string'), Constant(value=2), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value=1)], ctx=Load())], keywords=[]), Dict(keys=[Constant(value='type')], values=[Constant(value='string')]), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value='items'), Constant(value='type')], ctx=Load())], keywords=[]), Constant(value='$[1]')], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Tuple(elts=[Attribute(value=Name(id='e2', ctx=Load()), attr='message', ctx=Load()), Attribute(value=Name(id='e2', ctx=Load()), attr='validator', ctx=Load()), Attribute(value=Name(id='e2', ctx=Load()), attr='validator_value', ctx=Load()), Attribute(value=Name(id='e2', ctx=Load()), attr='instance', ctx=Load()), Attribute(value=Name(id='e2', ctx=Load()), attr='absolute_path', ctx=Load()), Attribute(value=Name(id='e2', ctx=Load()), attr='schema', ctx=Load()), Attribute(value=Name(id='e2', ctx=Load()), attr='schema_path', ctx=Load()), Attribute(value=Name(id='e2', ctx=Load()), attr='json_path', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value="4 is not of type 'string'"), Constant(value='type'), Constant(value='string'), Constant(value=4), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value=3)], ctx=Load())], keywords=[]), Dict(keys=[Constant(value='type')], values=[Constant(value='string')]), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value='items'), Constant(value='type')], ctx=Load())], keywords=[]), Constant(value='$[3]')], ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_contains_too_many', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        `contains` + `maxContains` produces only one error, even if there are\n        many more incorrectly matching elements.\n        ')), Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='contains'), Constant(value='maxContains')], values=[Dict(keys=[Constant(value='type')], values=[Constant(value='string')]), Constant(value=2)])), Assign(targets=[Name(id='validator', ctx=Store())], value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft202012Validator', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='error', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='iter_errors', ctx=Load()), args=[List(elts=[Constant(value='foo'), Constant(value=2), Constant(value='bar'), Constant(value=4), Constant(value='baz'), Constant(value='quux')], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Tuple(elts=[Attribute(value=Name(id='error', ctx=Load()), attr='message', ctx=Load()), Attribute(value=Name(id='error', ctx=Load()), attr='validator', ctx=Load()), Attribute(value=Name(id='error', ctx=Load()), attr='validator_value', ctx=Load()), Attribute(value=Name(id='error', ctx=Load()), attr='instance', ctx=Load()), Attribute(value=Name(id='error', ctx=Load()), attr='absolute_path', ctx=Load()), Attribute(value=Name(id='error', ctx=Load()), attr='schema', ctx=Load()), Attribute(value=Name(id='error', ctx=Load()), attr='schema_path', ctx=Load()), Attribute(value=Name(id='error', ctx=Load()), attr='json_path', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='Too many items match the given schema (expected at most 2)'), Constant(value='maxContains'), Constant(value=2), List(elts=[Constant(value='foo'), Constant(value=2), Constant(value='bar'), Constant(value=4), Constant(value='baz'), Constant(value='quux')], ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[], ctx=Load())], keywords=[]), Dict(keys=[Constant(value='contains'), Constant(value='maxContains')], values=[Dict(keys=[Constant(value='type')], values=[Constant(value='string')]), Constant(value=2)]), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value='contains')], ctx=Load())], keywords=[]), Constant(value='$')], ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_contains_too_few', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='contains'), Constant(value='minContains')], values=[Dict(keys=[Constant(value='type')], values=[Constant(value='string')]), Constant(value=2)])), Assign(targets=[Name(id='validator', ctx=Store())], value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft202012Validator', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='error', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='iter_errors', ctx=Load()), args=[List(elts=[Constant(value='foo'), Constant(value=2), Constant(value=4)], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Tuple(elts=[Attribute(value=Name(id='error', ctx=Load()), attr='message', ctx=Load()), Attribute(value=Name(id='error', ctx=Load()), attr='validator', ctx=Load()), Attribute(value=Name(id='error', ctx=Load()), attr='validator_value', ctx=Load()), Attribute(value=Name(id='error', ctx=Load()), attr='instance', ctx=Load()), Attribute(value=Name(id='error', ctx=Load()), attr='absolute_path', ctx=Load()), Attribute(value=Name(id='error', ctx=Load()), attr='schema', ctx=Load()), Attribute(value=Name(id='error', ctx=Load()), attr='schema_path', ctx=Load()), Attribute(value=Name(id='error', ctx=Load()), attr='json_path', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='Too few items match the given schema (expected at least 2 but only 1 matched)'), Constant(value='minContains'), Constant(value=2), List(elts=[Constant(value='foo'), Constant(value=2), Constant(value=4)], ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[], ctx=Load())], keywords=[]), Dict(keys=[Constant(value='contains'), Constant(value='minContains')], values=[Dict(keys=[Constant(value='type')], values=[Constant(value='string')]), Constant(value=2)]), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value='contains')], ctx=Load())], keywords=[]), Constant(value='$')], ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_contains_none', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='contains'), Constant(value='minContains')], values=[Dict(keys=[Constant(value='type')], values=[Constant(value='string')]), Constant(value=2)])), Assign(targets=[Name(id='validator', ctx=Store())], value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft202012Validator', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='error', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='iter_errors', ctx=Load()), args=[List(elts=[Constant(value=2), Constant(value=4)], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Tuple(elts=[Attribute(value=Name(id='error', ctx=Load()), attr='message', ctx=Load()), Attribute(value=Name(id='error', ctx=Load()), attr='validator', ctx=Load()), Attribute(value=Name(id='error', ctx=Load()), attr='validator_value', ctx=Load()), Attribute(value=Name(id='error', ctx=Load()), attr='instance', ctx=Load()), Attribute(value=Name(id='error', ctx=Load()), attr='absolute_path', ctx=Load()), Attribute(value=Name(id='error', ctx=Load()), attr='schema', ctx=Load()), Attribute(value=Name(id='error', ctx=Load()), attr='schema_path', ctx=Load()), Attribute(value=Name(id='error', ctx=Load()), attr='json_path', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='[2, 4] does not contain items matching the given schema'), Constant(value='contains'), Dict(keys=[Constant(value='type')], values=[Constant(value='string')]), List(elts=[Constant(value=2), Constant(value=4)], ctx=Load()), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[], ctx=Load())], keywords=[]), Dict(keys=[Constant(value='contains'), Constant(value='minContains')], values=[Dict(keys=[Constant(value='type')], values=[Constant(value='string')]), Constant(value=2)]), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value='contains')], ctx=Load())], keywords=[]), Constant(value='$')], ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_ref_sibling', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='$defs'), Constant(value='properties')], values=[Dict(keys=[Constant(value='foo')], values=[Dict(keys=[Constant(value='required')], values=[List(elts=[Constant(value='bar')], ctx=Load())])]), Dict(keys=[Constant(value='aprop')], values=[Dict(keys=[Constant(value='$ref'), Constant(value='required')], values=[Constant(value='#/$defs/foo'), List(elts=[Constant(value='baz')], ctx=Load())])])])), Assign(targets=[Name(id='validator', ctx=Store())], value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft202012Validator', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='e1', ctx=Store()), Name(id='e2', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='iter_errors', ctx=Load()), args=[Dict(keys=[Constant(value='aprop')], values=[Dict(keys=[], values=[])])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Tuple(elts=[Attribute(value=Name(id='e1', ctx=Load()), attr='message', ctx=Load()), Attribute(value=Name(id='e1', ctx=Load()), attr='validator', ctx=Load()), Attribute(value=Name(id='e1', ctx=Load()), attr='validator_value', ctx=Load()), Attribute(value=Name(id='e1', ctx=Load()), attr='instance', ctx=Load()), Attribute(value=Name(id='e1', ctx=Load()), attr='absolute_path', ctx=Load()), Attribute(value=Name(id='e1', ctx=Load()), attr='schema', ctx=Load()), Attribute(value=Name(id='e1', ctx=Load()), attr='schema_path', ctx=Load()), Attribute(value=Name(id='e1', ctx=Load()), attr='relative_schema_path', ctx=Load()), Attribute(value=Name(id='e1', ctx=Load()), attr='json_path', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value="'bar' is a required property"), Constant(value='required'), List(elts=[Constant(value='bar')], ctx=Load()), Dict(keys=[], values=[]), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value='aprop')], ctx=Load())], keywords=[]), Dict(keys=[Constant(value='required')], values=[List(elts=[Constant(value='bar')], ctx=Load())]), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value='properties'), Constant(value='aprop'), Constant(value='required')], ctx=Load())], keywords=[]), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value='properties'), Constant(value='aprop'), Constant(value='required')], ctx=Load())], keywords=[]), Constant(value='$.aprop')], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Tuple(elts=[Attribute(value=Name(id='e2', ctx=Load()), attr='message', ctx=Load()), Attribute(value=Name(id='e2', ctx=Load()), attr='validator', ctx=Load()), Attribute(value=Name(id='e2', ctx=Load()), attr='validator_value', ctx=Load()), Attribute(value=Name(id='e2', ctx=Load()), attr='instance', ctx=Load()), Attribute(value=Name(id='e2', ctx=Load()), attr='absolute_path', ctx=Load()), Attribute(value=Name(id='e2', ctx=Load()), attr='schema', ctx=Load()), Attribute(value=Name(id='e2', ctx=Load()), attr='schema_path', ctx=Load()), Attribute(value=Name(id='e2', ctx=Load()), attr='relative_schema_path', ctx=Load()), Attribute(value=Name(id='e2', ctx=Load()), attr='json_path', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value="'baz' is a required property"), Constant(value='required'), List(elts=[Constant(value='baz')], ctx=Load()), Dict(keys=[], values=[]), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value='aprop')], ctx=Load())], keywords=[]), Dict(keys=[Constant(value='$ref'), Constant(value='required')], values=[Constant(value='#/$defs/foo'), List(elts=[Constant(value='baz')], ctx=Load())]), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value='properties'), Constant(value='aprop'), Constant(value='required')], ctx=Load())], keywords=[]), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value='properties'), Constant(value='aprop'), Constant(value='required')], ctx=Load())], keywords=[]), Constant(value='$.aprop')], ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='MetaSchemaTestsMixin', bases=[], keywords=[], body=[FunctionDef(name='test_invalid_properties', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Attribute(value=Name(id='exceptions', ctx=Load()), attr='SchemaError', ctx=Load())], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='Validator', ctx=Load()), attr='check_schema', ctx=Load()), args=[Dict(keys=[Constant(value='properties')], values=[Constant(value=12)])], keywords=[]))])], decorator_list=[]), FunctionDef(name='test_minItems_invalid_string', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Attribute(value=Name(id='exceptions', ctx=Load()), attr='SchemaError', ctx=Load())], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='Validator', ctx=Load()), attr='check_schema', ctx=Load()), args=[Dict(keys=[Constant(value='minItems')], values=[Constant(value='1')])], keywords=[]))])], decorator_list=[]), FunctionDef(name='test_enum_allows_empty_arrays', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Technically, all the spec says is they SHOULD have elements, not MUST.\n\n        (As of Draft 6. Previous drafts do say MUST).\n\n        See #529.\n        ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='Validator', ctx=Load()), ops=[In()], comparators=[Set(elts=[Attribute(value=Name(id='validators', ctx=Load()), attr='Draft3Validator', ctx=Load()), Attribute(value=Name(id='validators', ctx=Load()), attr='Draft4Validator', ctx=Load())])]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Attribute(value=Name(id='exceptions', ctx=Load()), attr='SchemaError', ctx=Load())], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='Validator', ctx=Load()), attr='check_schema', ctx=Load()), args=[Dict(keys=[Constant(value='enum')], values=[List(elts=[], ctx=Load())])], keywords=[]))])], orelse=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='Validator', ctx=Load()), attr='check_schema', ctx=Load()), args=[Dict(keys=[Constant(value='enum')], values=[List(elts=[], ctx=Load())])], keywords=[]))])], decorator_list=[]), FunctionDef(name='test_enum_allows_non_unique_items', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Technically, all the spec says is they SHOULD be unique, not MUST.\n\n        (As of Draft 6. Previous drafts do say MUST).\n\n        See #529.\n        ')), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='Validator', ctx=Load()), ops=[In()], comparators=[Set(elts=[Attribute(value=Name(id='validators', ctx=Load()), attr='Draft3Validator', ctx=Load()), Attribute(value=Name(id='validators', ctx=Load()), attr='Draft4Validator', ctx=Load())])]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Attribute(value=Name(id='exceptions', ctx=Load()), attr='SchemaError', ctx=Load())], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='Validator', ctx=Load()), attr='check_schema', ctx=Load()), args=[Dict(keys=[Constant(value='enum')], values=[List(elts=[Constant(value=12), Constant(value=12)], ctx=Load())])], keywords=[]))])], orelse=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='Validator', ctx=Load()), attr='check_schema', ctx=Load()), args=[Dict(keys=[Constant(value='enum')], values=[List(elts=[Constant(value=12), Constant(value=12)], ctx=Load())])], keywords=[]))])], decorator_list=[]), FunctionDef(name='test_schema_with_invalid_regex', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Attribute(value=Name(id='exceptions', ctx=Load()), attr='SchemaError', ctx=Load())], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='Validator', ctx=Load()), attr='check_schema', ctx=Load()), args=[Dict(keys=[Constant(value='pattern')], values=[Constant(value='*notaregex')])], keywords=[]))])], decorator_list=[]), FunctionDef(name='test_schema_with_invalid_regex_with_disabled_format_validation', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='Validator', ctx=Load()), attr='check_schema', ctx=Load()), args=[Dict(keys=[Constant(value='pattern')], values=[Constant(value='*notaregex')])], keywords=[keyword(arg='format_checker', value=Constant(value=None))]))], decorator_list=[])], decorator_list=[]), ClassDef(name='ValidatorTestMixin', bases=[Name(id='MetaSchemaTestsMixin', ctx=Load())], keywords=[], body=[FunctionDef(name='test_it_implements_the_validator_protocol', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='Validator', ctx=Load()), args=[Dict(keys=[], values=[])], keywords=[]), Attribute(value=Name(id='protocols', ctx=Load()), attr='Validator', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_valid_instances_are_valid', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='schema', ctx=Store()), Name(id='instance', ctx=Store())], ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='valid', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertTrue', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='Validator', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[]), attr='is_valid', ctx=Load()), args=[Name(id='instance', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_invalid_instances_are_not_valid', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='schema', ctx=Store()), Name(id='instance', ctx=Store())], ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='invalid', ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertFalse', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='Validator', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[]), attr='is_valid', ctx=Load()), args=[Name(id='instance', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_non_existent_properties_are_ignored', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='Validator', ctx=Load()), args=[Dict(keys=[Call(func=Name(id='object', ctx=Load()), args=[], keywords=[])], values=[Call(func=Name(id='object', ctx=Load()), args=[], keywords=[])])], keywords=[]), attr='validate', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=Call(func=Name(id='object', ctx=Load()), args=[], keywords=[]))]))], decorator_list=[]), FunctionDef(name='test_evolve', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='schema', ctx=Store()), Name(id='format_checker', ctx=Store())], ctx=Store())], value=Tuple(elts=[Dict(keys=[Constant(value='type')], values=[Constant(value='integer')]), Call(func=Name(id='FormatChecker', ctx=Load()), args=[], keywords=[])], ctx=Load())), Assign(targets=[Name(id='original', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='Validator', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[keyword(arg='format_checker', value=Name(id='format_checker', ctx=Load()))])), Assign(targets=[Name(id='new', ctx=Store())], value=Call(func=Attribute(value=Name(id='original', ctx=Load()), attr='evolve', ctx=Load()), args=[], keywords=[keyword(arg='schema', value=Dict(keys=[Constant(value='type')], values=[Constant(value='string')])), keyword(arg='format_checker', value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='Validator', ctx=Load()), attr='FORMAT_CHECKER', ctx=Load()))])), Assign(targets=[Name(id='expected', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='Validator', ctx=Load()), args=[Dict(keys=[Constant(value='type')], values=[Constant(value='string')])], keywords=[keyword(arg='format_checker', value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='Validator', ctx=Load()), attr='FORMAT_CHECKER', ctx=Load())), keyword(arg='_resolver', value=Attribute(value=Name(id='new', ctx=Load()), attr='_resolver', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='new', ctx=Load()), Name(id='expected', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertNotEqual', ctx=Load()), args=[Name(id='new', ctx=Load()), Name(id='original', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_evolve_with_subclass', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Subclassing validators isn't supported public API, but some users have\n        done it, because we don't actually error entirely when it's done :/\n\n        We need to deprecate doing so first to help as many of these users\n        ensure they can move to supported APIs, but this test ensures that in\n        the interim, we haven't broken those users.\n        ")), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertWarns', ctx=Load()), args=[Name(id='DeprecationWarning', ctx=Load())], keywords=[]))], body=[ClassDef(name='OhNo', bases=[Attribute(value=Name(id='self', ctx=Load()), attr='Validator', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='foo', ctx=Store())], value=Call(func=Name(id='field', ctx=Load()), args=[], keywords=[keyword(arg='factory', value=Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=List(elts=[Constant(value=1), Constant(value=2), Constant(value=3)], ctx=Load())))])), Assign(targets=[Name(id='_bar', ctx=Store())], value=Call(func=Name(id='field', ctx=Load()), args=[], keywords=[keyword(arg='default', value=Constant(value=37))]))], decorator_list=[Name(id='define', ctx=Load())])]), Assign(targets=[Name(id='validator', ctx=Store())], value=Call(func=Name(id='OhNo', ctx=Load()), args=[Dict(keys=[], values=[])], keywords=[keyword(arg='bar', value=Constant(value=12))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='validator', ctx=Load()), attr='foo', ctx=Load()), List(elts=[Constant(value=1), Constant(value=2), Constant(value=3)], ctx=Load())], keywords=[])), Assign(targets=[Name(id='new', ctx=Store())], value=Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='evolve', ctx=Load()), args=[], keywords=[keyword(arg='schema', value=Dict(keys=[Constant(value='type')], values=[Constant(value='integer')]))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='new', ctx=Load()), attr='foo', ctx=Load()), List(elts=[Constant(value=1), Constant(value=2), Constant(value=3)], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='new', ctx=Load()), attr='_bar', ctx=Load()), Constant(value=12)], keywords=[]))], decorator_list=[]), FunctionDef(name='test_is_type_is_true_for_valid_type', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertTrue', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='Validator', ctx=Load()), args=[Dict(keys=[], values=[])], keywords=[]), attr='is_type', ctx=Load()), args=[Constant(value='foo'), Constant(value='string')], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_is_type_is_false_for_invalid_type', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertFalse', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='Validator', ctx=Load()), args=[Dict(keys=[], values=[])], keywords=[]), attr='is_type', ctx=Load()), args=[Constant(value='foo'), Constant(value='array')], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_is_type_evades_bool_inheriting_from_int', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertFalse', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='Validator', ctx=Load()), args=[Dict(keys=[], values=[])], keywords=[]), attr='is_type', ctx=Load()), args=[Constant(value=True), Constant(value='integer')], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertFalse', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='Validator', ctx=Load()), args=[Dict(keys=[], values=[])], keywords=[]), attr='is_type', ctx=Load()), args=[Constant(value=True), Constant(value='number')], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_it_can_validate_with_decimals', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='items')], values=[Dict(keys=[Constant(value='type')], values=[Constant(value='number')])])), Assign(targets=[Name(id='Validator', ctx=Store())], value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='extend', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='Validator', ctx=Load())], keywords=[keyword(arg='type_checker', value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='Validator', ctx=Load()), attr='TYPE_CHECKER', ctx=Load()), attr='redefine', ctx=Load()), args=[Constant(value='number'), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='checker'), arg(arg='thing')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='thing', ctx=Load()), Tuple(elts=[Name(id='int', ctx=Load()), Name(id='float', ctx=Load()), Name(id='Decimal', ctx=Load())], ctx=Load())], keywords=[]), UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='thing', ctx=Load()), Name(id='bool', ctx=Load())], keywords=[]))]))], keywords=[]))])), Assign(targets=[Name(id='validator', ctx=Store())], value=Call(func=Name(id='Validator', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='validate', ctx=Load()), args=[List(elts=[Constant(value=1), Constant(value=1.1), BinOp(left=Call(func=Name(id='Decimal', ctx=Load()), args=[Constant(value=1)], keywords=[]), op=Div(), right=Call(func=Name(id='Decimal', ctx=Load()), args=[Constant(value=8)], keywords=[]))], ctx=Load())], keywords=[])), Assign(targets=[Name(id='invalid', ctx=Store())], value=List(elts=[Constant(value='foo'), Dict(keys=[], values=[]), List(elts=[], ctx=Load()), Constant(value=True), Constant(value=None)], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[ListComp(elt=Attribute(value=Name(id='error', ctx=Load()), attr='instance', ctx=Load()), generators=[comprehension(target=Name(id='error', ctx=Store()), iter=Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='iter_errors', ctx=Load()), args=[Name(id='invalid', ctx=Load())], keywords=[]), ifs=[], is_async=0)]), Name(id='invalid', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_it_returns_true_for_formats_it_does_not_know_about', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='validator', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='Validator', ctx=Load()), args=[Dict(keys=[Constant(value='format')], values=[Constant(value='carrot')])], keywords=[keyword(arg='format_checker', value=Call(func=Name(id='FormatChecker', ctx=Load()), args=[], keywords=[]))])), Expr(value=Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='validate', ctx=Load()), args=[Constant(value='bugs')], keywords=[]))], decorator_list=[]), FunctionDef(name='test_it_does_not_validate_formats_by_default', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='validator', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='Validator', ctx=Load()), args=[Dict(keys=[], values=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsNone', ctx=Load()), args=[Attribute(value=Name(id='validator', ctx=Load()), attr='format_checker', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_it_validates_formats_if_a_checker_is_provided', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='checker', ctx=Store())], value=Call(func=Name(id='FormatChecker', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='bad', ctx=Store())], value=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='Bad!')], keywords=[])), FunctionDef(name='check', args=arguments(posonlyargs=[], args=[arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='value', ctx=Load()), ops=[Eq()], comparators=[Constant(value='good')]), body=[Return(value=Constant(value=True))], orelse=[If(test=Compare(left=Name(id='value', ctx=Load()), ops=[Eq()], comparators=[Constant(value='bad')]), body=[Raise(exc=Name(id='bad', ctx=Load()))], orelse=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[JoinedStr(values=[Constant(value='What is '), FormattedValue(value=Name(id='value', ctx=Load()), conversion=-1), Constant(value="? [Baby Don't Hurt Me]")])], keywords=[]))])])], decorator_list=[Call(func=Attribute(value=Name(id='checker', ctx=Load()), attr='checks', ctx=Load()), args=[Constant(value='foo')], keywords=[keyword(arg='raises', value=Name(id='ValueError', ctx=Load()))])]), Assign(targets=[Name(id='validator', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='Validator', ctx=Load()), args=[Dict(keys=[Constant(value='format')], values=[Constant(value='foo')])], keywords=[keyword(arg='format_checker', value=Name(id='checker', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='validate', ctx=Load()), args=[Constant(value='good')], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Attribute(value=Name(id='exceptions', ctx=Load()), attr='ValidationError', ctx=Load())], keywords=[]), optional_vars=Name(id='cm', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='validate', ctx=Load()), args=[Constant(value='bad')], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIs', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='cm', ctx=Load()), attr='exception', ctx=Load()), attr='cause', ctx=Load()), Name(id='bad', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_non_string_custom_type', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='non_string_type', ctx=Store())], value=Call(func=Name(id='object', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='type')], values=[List(elts=[Name(id='non_string_type', ctx=Load())], ctx=Load())])), Assign(targets=[Name(id='Crazy', ctx=Store())], value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='extend', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='Validator', ctx=Load())], keywords=[keyword(arg='type_checker', value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='Validator', ctx=Load()), attr='TYPE_CHECKER', ctx=Load()), attr='redefine', ctx=Load()), args=[Name(id='non_string_type', ctx=Load()), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='checker'), arg(arg='thing')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='thing', ctx=Load()), Name(id='int', ctx=Load())], keywords=[]))], keywords=[]))])), Expr(value=Call(func=Attribute(value=Call(func=Name(id='Crazy', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[]), attr='validate', ctx=Load()), args=[Constant(value=15)], keywords=[]))], decorator_list=[]), FunctionDef(name='test_it_properly_formats_tuples_in_errors', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        A tuple instance properly formats validation errors for uniqueItems.\n\n        See #224\n        ')), Assign(targets=[Name(id='TupleValidator', ctx=Store())], value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='extend', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='Validator', ctx=Load())], keywords=[keyword(arg='type_checker', value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='Validator', ctx=Load()), attr='TYPE_CHECKER', ctx=Load()), attr='redefine', ctx=Load()), args=[Constant(value='array'), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='checker'), arg(arg='thing')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='thing', ctx=Load()), Name(id='tuple', ctx=Load())], keywords=[]))], keywords=[]))])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Attribute(value=Name(id='exceptions', ctx=Load()), attr='ValidationError', ctx=Load())], keywords=[]), optional_vars=Name(id='e', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='TupleValidator', ctx=Load()), args=[Dict(keys=[Constant(value='uniqueItems')], values=[Constant(value=True)])], keywords=[]), attr='validate', ctx=Load()), args=[Tuple(elts=[Constant(value=1), Constant(value=1)], ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Constant(value='(1, 1) has non-unique elements'), Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='e', ctx=Load()), attr='exception', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_check_redefined_sequence', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Allow array to validate against another defined sequence type\n        ')), Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='type'), Constant(value='uniqueItems')], values=[Constant(value='array'), Constant(value=True)])), Assign(targets=[Name(id='MyMapping', ctx=Store())], value=Call(func=Name(id='namedtuple', ctx=Load()), args=[Constant(value='MyMapping'), Constant(value='a, b')], keywords=[])), Assign(targets=[Name(id='Validator', ctx=Store())], value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='extend', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='Validator', ctx=Load())], keywords=[keyword(arg='type_checker', value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='Validator', ctx=Load()), attr='TYPE_CHECKER', ctx=Load()), attr='redefine_many', ctx=Load()), args=[Dict(keys=[Constant(value='array'), Constant(value='object')], values=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='checker'), arg(arg='thing')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='thing', ctx=Load()), Tuple(elts=[Name(id='list', ctx=Load()), Name(id='deque', ctx=Load())], ctx=Load())], keywords=[])), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='checker'), arg(arg='thing')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='thing', ctx=Load()), Tuple(elts=[Name(id='dict', ctx=Load()), Name(id='MyMapping', ctx=Load())], ctx=Load())], keywords=[]))])], keywords=[]))])), Assign(targets=[Name(id='validator', ctx=Store())], value=Call(func=Name(id='Validator', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[])), Assign(targets=[Name(id='valid_instances', ctx=Store())], value=List(elts=[Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value='a'), Constant(value=None), Constant(value='1'), Constant(value=''), Constant(value=True)], ctx=Load())], keywords=[]), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[List(elts=[Constant(value=False)], ctx=Load()), List(elts=[Constant(value=0)], ctx=Load())], ctx=Load())], keywords=[]), List(elts=[Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value=False)], ctx=Load())], keywords=[]), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value=0)], ctx=Load())], keywords=[])], ctx=Load()), List(elts=[List(elts=[Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value=False)], ctx=Load())], keywords=[])], ctx=Load()), List(elts=[Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value=0)], ctx=Load())], keywords=[])], ctx=Load())], ctx=Load()), List(elts=[List(elts=[List(elts=[List(elts=[List(elts=[Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value=False)], ctx=Load())], keywords=[])], ctx=Load())], ctx=Load())], ctx=Load())], ctx=Load()), List(elts=[List(elts=[List(elts=[List(elts=[Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value=0)], ctx=Load())], keywords=[])], ctx=Load())], ctx=Load())], ctx=Load())], ctx=Load())], ctx=Load()), List(elts=[Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value=False)], ctx=Load())], keywords=[])], ctx=Load())], keywords=[]), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value=0)], ctx=Load())], keywords=[])], ctx=Load())], keywords=[])], ctx=Load()), List(elts=[Call(func=Name(id='MyMapping', ctx=Load()), args=[Constant(value='a'), Constant(value=0)], keywords=[]), Call(func=Name(id='MyMapping', ctx=Load()), args=[Constant(value='a'), Constant(value=False)], keywords=[])], ctx=Load()), List(elts=[Call(func=Name(id='MyMapping', ctx=Load()), args=[Constant(value='a'), List(elts=[Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value=0)], ctx=Load())], keywords=[])], ctx=Load())], keywords=[]), Call(func=Name(id='MyMapping', ctx=Load()), args=[Constant(value='a'), List(elts=[Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value=False)], ctx=Load())], keywords=[])], ctx=Load())], keywords=[])], ctx=Load()), List(elts=[Call(func=Name(id='MyMapping', ctx=Load()), args=[Constant(value='a'), List(elts=[Call(func=Name(id='MyMapping', ctx=Load()), args=[Constant(value='a'), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value=0)], ctx=Load())], keywords=[])], keywords=[])], ctx=Load())], keywords=[]), Call(func=Name(id='MyMapping', ctx=Load()), args=[Constant(value='a'), List(elts=[Call(func=Name(id='MyMapping', ctx=Load()), args=[Constant(value='a'), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value=False)], ctx=Load())], keywords=[])], keywords=[])], ctx=Load())], keywords=[])], ctx=Load()), List(elts=[Call(func=Name(id='deque', ctx=Load()), args=[Call(func=Name(id='deque', ctx=Load()), args=[Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value=False)], ctx=Load())], keywords=[])], keywords=[])], keywords=[]), Call(func=Name(id='deque', ctx=Load()), args=[Call(func=Name(id='deque', ctx=Load()), args=[Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value=0)], ctx=Load())], keywords=[])], keywords=[])], keywords=[])], ctx=Load())], ctx=Load())), For(target=Name(id='instance', ctx=Store()), iter=Name(id='valid_instances', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='validate', ctx=Load()), args=[Name(id='instance', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='invalid_instances', ctx=Store())], value=List(elts=[Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value='a'), Constant(value='b'), Constant(value='a')], ctx=Load())], keywords=[]), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[List(elts=[Constant(value=False)], ctx=Load()), List(elts=[Constant(value=False)], ctx=Load())], ctx=Load())], keywords=[]), List(elts=[Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value=False)], ctx=Load())], keywords=[]), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value=False)], ctx=Load())], keywords=[])], ctx=Load()), List(elts=[List(elts=[Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value=False)], ctx=Load())], keywords=[])], ctx=Load()), List(elts=[Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value=False)], ctx=Load())], keywords=[])], ctx=Load())], ctx=Load()), List(elts=[List(elts=[List(elts=[List(elts=[List(elts=[Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value=False)], ctx=Load())], keywords=[])], ctx=Load())], ctx=Load())], ctx=Load())], ctx=Load()), List(elts=[List(elts=[List(elts=[List(elts=[Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value=False)], ctx=Load())], keywords=[])], ctx=Load())], ctx=Load())], ctx=Load())], ctx=Load())], ctx=Load()), List(elts=[Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value=False)], ctx=Load())], keywords=[])], ctx=Load())], keywords=[]), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value=False)], ctx=Load())], keywords=[])], ctx=Load())], keywords=[])], ctx=Load()), List(elts=[Call(func=Name(id='MyMapping', ctx=Load()), args=[Constant(value='a'), Constant(value=False)], keywords=[]), Call(func=Name(id='MyMapping', ctx=Load()), args=[Constant(value='a'), Constant(value=False)], keywords=[])], ctx=Load()), List(elts=[Call(func=Name(id='MyMapping', ctx=Load()), args=[Constant(value='a'), List(elts=[Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value=False)], ctx=Load())], keywords=[])], ctx=Load())], keywords=[]), Call(func=Name(id='MyMapping', ctx=Load()), args=[Constant(value='a'), List(elts=[Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value=False)], ctx=Load())], keywords=[])], ctx=Load())], keywords=[])], ctx=Load()), List(elts=[Call(func=Name(id='MyMapping', ctx=Load()), args=[Constant(value='a'), List(elts=[Call(func=Name(id='MyMapping', ctx=Load()), args=[Constant(value='a'), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value=False)], ctx=Load())], keywords=[])], keywords=[])], ctx=Load())], keywords=[]), Call(func=Name(id='MyMapping', ctx=Load()), args=[Constant(value='a'), List(elts=[Call(func=Name(id='MyMapping', ctx=Load()), args=[Constant(value='a'), Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value=False)], ctx=Load())], keywords=[])], keywords=[])], ctx=Load())], keywords=[])], ctx=Load()), List(elts=[Call(func=Name(id='deque', ctx=Load()), args=[Call(func=Name(id='deque', ctx=Load()), args=[Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value=False)], ctx=Load())], keywords=[])], keywords=[])], keywords=[]), Call(func=Name(id='deque', ctx=Load()), args=[Call(func=Name(id='deque', ctx=Load()), args=[Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Constant(value=False)], ctx=Load())], keywords=[])], keywords=[])], keywords=[])], ctx=Load())], ctx=Load())), For(target=Name(id='instance', ctx=Store()), iter=Name(id='invalid_instances', ctx=Load()), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Attribute(value=Name(id='exceptions', ctx=Load()), attr='ValidationError', ctx=Load())], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='validate', ctx=Load()), args=[Name(id='instance', ctx=Load())], keywords=[]))])], orelse=[])], decorator_list=[]), FunctionDef(name='test_it_creates_a_ref_resolver_if_not_provided', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertWarns', ctx=Load()), args=[Name(id='DeprecationWarning', ctx=Load())], keywords=[]))], body=[Assign(targets=[Name(id='resolver', ctx=Store())], value=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='Validator', ctx=Load()), args=[Dict(keys=[], values=[])], keywords=[]), attr='resolver', ctx=Load()))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Name(id='resolver', ctx=Load()), Attribute(value=Name(id='validators', ctx=Load()), attr='_RefResolver', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_it_upconverts_from_deprecated_RefResolvers', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='ref', ctx=Store()), Name(id='schema', ctx=Store())], ctx=Store())], value=Tuple(elts=[Constant(value='someCoolRef'), Dict(keys=[Constant(value='type')], values=[Constant(value='integer')])], ctx=Load())), Assign(targets=[Name(id='resolver', ctx=Store())], value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='_RefResolver', ctx=Load()), args=[Constant(value=''), Dict(keys=[], values=[])], keywords=[keyword(arg='store', value=Dict(keys=[Name(id='ref', ctx=Load())], values=[Name(id='schema', ctx=Load())]))])), Assign(targets=[Name(id='validator', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='Validator', ctx=Load()), args=[Dict(keys=[Constant(value='$ref')], values=[Name(id='ref', ctx=Load())])], keywords=[keyword(arg='resolver', value=Name(id='resolver', ctx=Load()))])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Attribute(value=Name(id='exceptions', ctx=Load()), attr='ValidationError', ctx=Load())], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='validate', ctx=Load()), args=[Constant(value=None)], keywords=[]))])], decorator_list=[]), FunctionDef(name='test_it_upconverts_from_yet_older_deprecated_legacy_RefResolvers', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Legacy RefResolvers support only the context manager form of\n        resolution.\n        ')), ClassDef(name='LegacyRefResolver', bases=[], keywords=[], body=[FunctionDef(name='resolving', args=arguments(posonlyargs=[], args=[arg(arg='this'), arg(arg='ref')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='ref', ctx=Load()), Constant(value='the ref')], keywords=[])), Expr(value=Yield(value=Dict(keys=[Constant(value='type')], values=[Constant(value='integer')])))], decorator_list=[Name(id='contextmanager', ctx=Load())])], decorator_list=[]), Assign(targets=[Name(id='resolver', ctx=Store())], value=Call(func=Name(id='LegacyRefResolver', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='$ref')], values=[Constant(value='the ref')])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Attribute(value=Name(id='exceptions', ctx=Load()), attr='ValidationError', ctx=Load())], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='Validator', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[keyword(arg='resolver', value=Name(id='resolver', ctx=Load()))]), attr='validate', ctx=Load()), args=[Constant(value=None)], keywords=[]))])], decorator_list=[])], decorator_list=[]), ClassDef(name='AntiDraft6LeakMixin', bases=[], keywords=[], body=[Expr(value=Constant(value="\n    Make sure functionality from draft 6 doesn't leak backwards in time.\n    ")), FunctionDef(name='test_True_is_not_a_schema', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Attribute(value=Name(id='exceptions', ctx=Load()), attr='SchemaError', ctx=Load())], keywords=[]), optional_vars=Name(id='e', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='Validator', ctx=Load()), attr='check_schema', ctx=Load()), args=[Constant(value=True)], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Constant(value='True is not of type'), Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='e', ctx=Load()), attr='exception', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_False_is_not_a_schema', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Attribute(value=Name(id='exceptions', ctx=Load()), attr='SchemaError', ctx=Load())], keywords=[]), optional_vars=Name(id='e', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='Validator', ctx=Load()), attr='check_schema', ctx=Load()), args=[Constant(value=False)], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Constant(value='False is not of type'), Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='e', ctx=Load()), attr='exception', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_True_is_not_a_schema_even_if_you_forget_to_check', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='Exception', ctx=Load())], keywords=[]), optional_vars=Name(id='e', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='Validator', ctx=Load()), args=[Constant(value=True)], keywords=[]), attr='validate', ctx=Load()), args=[Constant(value=12)], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertNotIsInstance', ctx=Load()), args=[Attribute(value=Name(id='e', ctx=Load()), attr='exception', ctx=Load()), Attribute(value=Name(id='exceptions', ctx=Load()), attr='ValidationError', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_False_is_not_a_schema_even_if_you_forget_to_check', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='Exception', ctx=Load())], keywords=[]), optional_vars=Name(id='e', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='Validator', ctx=Load()), args=[Constant(value=False)], keywords=[]), attr='validate', ctx=Load()), args=[Constant(value=12)], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertNotIsInstance', ctx=Load()), args=[Attribute(value=Name(id='e', ctx=Load()), attr='exception', ctx=Load()), Attribute(value=Name(id='exceptions', ctx=Load()), attr='ValidationError', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='TestDraft3Validator', bases=[Name(id='AntiDraft6LeakMixin', ctx=Load()), Name(id='ValidatorTestMixin', ctx=Load()), Name(id='TestCase', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='Validator', ctx=Store())], value=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft3Validator', ctx=Load())), AnnAssign(target=Name(id='valid', ctx=Store()), annotation=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='dict', ctx=Load()), Name(id='dict', ctx=Load())], ctx=Load()), ctx=Load()), value=Tuple(elts=[Dict(keys=[], values=[]), Dict(keys=[], values=[])], ctx=Load()), simple=1), Assign(targets=[Name(id='invalid', ctx=Store())], value=Tuple(elts=[Dict(keys=[Constant(value='type')], values=[Constant(value='integer')]), Constant(value='foo')], ctx=Load())), FunctionDef(name='test_any_type_is_valid_for_type_any', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='validator', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='Validator', ctx=Load()), args=[Dict(keys=[Constant(value='type')], values=[Constant(value='any')])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='validate', ctx=Load()), args=[Call(func=Name(id='object', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_any_type_is_redefinable', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Sigh, because why not.\n        ')), Assign(targets=[Name(id='Crazy', ctx=Store())], value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='extend', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='Validator', ctx=Load())], keywords=[keyword(arg='type_checker', value=Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='Validator', ctx=Load()), attr='TYPE_CHECKER', ctx=Load()), attr='redefine', ctx=Load()), args=[Constant(value='any'), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='checker'), arg(arg='thing')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='thing', ctx=Load()), Name(id='int', ctx=Load())], keywords=[]))], keywords=[]))])), Assign(targets=[Name(id='validator', ctx=Store())], value=Call(func=Name(id='Crazy', ctx=Load()), args=[Dict(keys=[Constant(value='type')], values=[Constant(value='any')])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='validate', ctx=Load()), args=[Constant(value=12)], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Attribute(value=Name(id='exceptions', ctx=Load()), attr='ValidationError', ctx=Load())], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='validate', ctx=Load()), args=[Constant(value='foo')], keywords=[]))])], decorator_list=[]), FunctionDef(name='test_is_type_is_true_for_any_type', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertTrue', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='Validator', ctx=Load()), args=[Dict(keys=[Constant(value='type')], values=[Constant(value='any')])], keywords=[]), attr='is_valid', ctx=Load()), args=[Call(func=Name(id='object', ctx=Load()), args=[], keywords=[])], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_is_type_does_not_evade_bool_if_it_is_being_tested', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertTrue', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='Validator', ctx=Load()), args=[Dict(keys=[], values=[])], keywords=[]), attr='is_type', ctx=Load()), args=[Constant(value=True), Constant(value='boolean')], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertTrue', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='Validator', ctx=Load()), args=[Dict(keys=[Constant(value='type')], values=[Constant(value='any')])], keywords=[]), attr='is_valid', ctx=Load()), args=[Constant(value=True)], keywords=[])], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='TestDraft4Validator', bases=[Name(id='AntiDraft6LeakMixin', ctx=Load()), Name(id='ValidatorTestMixin', ctx=Load()), Name(id='TestCase', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='Validator', ctx=Store())], value=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft4Validator', ctx=Load())), AnnAssign(target=Name(id='valid', ctx=Store()), annotation=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='dict', ctx=Load()), Name(id='dict', ctx=Load())], ctx=Load()), ctx=Load()), value=Tuple(elts=[Dict(keys=[], values=[]), Dict(keys=[], values=[])], ctx=Load()), simple=1), Assign(targets=[Name(id='invalid', ctx=Store())], value=Tuple(elts=[Dict(keys=[Constant(value='type')], values=[Constant(value='integer')]), Constant(value='foo')], ctx=Load()))], decorator_list=[]), ClassDef(name='TestDraft6Validator', bases=[Name(id='ValidatorTestMixin', ctx=Load()), Name(id='TestCase', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='Validator', ctx=Store())], value=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft6Validator', ctx=Load())), AnnAssign(target=Name(id='valid', ctx=Store()), annotation=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='dict', ctx=Load()), Name(id='dict', ctx=Load())], ctx=Load()), ctx=Load()), value=Tuple(elts=[Dict(keys=[], values=[]), Dict(keys=[], values=[])], ctx=Load()), simple=1), Assign(targets=[Name(id='invalid', ctx=Store())], value=Tuple(elts=[Dict(keys=[Constant(value='type')], values=[Constant(value='integer')]), Constant(value='foo')], ctx=Load()))], decorator_list=[]), ClassDef(name='TestDraft7Validator', bases=[Name(id='ValidatorTestMixin', ctx=Load()), Name(id='TestCase', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='Validator', ctx=Store())], value=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft7Validator', ctx=Load())), AnnAssign(target=Name(id='valid', ctx=Store()), annotation=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='dict', ctx=Load()), Name(id='dict', ctx=Load())], ctx=Load()), ctx=Load()), value=Tuple(elts=[Dict(keys=[], values=[]), Dict(keys=[], values=[])], ctx=Load()), simple=1), Assign(targets=[Name(id='invalid', ctx=Store())], value=Tuple(elts=[Dict(keys=[Constant(value='type')], values=[Constant(value='integer')]), Constant(value='foo')], ctx=Load()))], decorator_list=[]), ClassDef(name='TestDraft201909Validator', bases=[Name(id='ValidatorTestMixin', ctx=Load()), Name(id='TestCase', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='Validator', ctx=Store())], value=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft201909Validator', ctx=Load())), AnnAssign(target=Name(id='valid', ctx=Store()), annotation=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='dict', ctx=Load()), Name(id='dict', ctx=Load())], ctx=Load()), ctx=Load()), value=Tuple(elts=[Dict(keys=[], values=[]), Dict(keys=[], values=[])], ctx=Load()), simple=1), Assign(targets=[Name(id='invalid', ctx=Store())], value=Tuple(elts=[Dict(keys=[Constant(value='type')], values=[Constant(value='integer')]), Constant(value='foo')], ctx=Load()))], decorator_list=[]), ClassDef(name='TestDraft202012Validator', bases=[Name(id='ValidatorTestMixin', ctx=Load()), Name(id='TestCase', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='Validator', ctx=Store())], value=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft202012Validator', ctx=Load())), AnnAssign(target=Name(id='valid', ctx=Store()), annotation=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='dict', ctx=Load()), Name(id='dict', ctx=Load())], ctx=Load()), ctx=Load()), value=Tuple(elts=[Dict(keys=[], values=[]), Dict(keys=[], values=[])], ctx=Load()), simple=1), Assign(targets=[Name(id='invalid', ctx=Store())], value=Tuple(elts=[Dict(keys=[Constant(value='type')], values=[Constant(value='integer')]), Constant(value='foo')], ctx=Load()))], decorator_list=[]), ClassDef(name='TestLatestValidator', bases=[Name(id='TestCase', ctx=Load())], keywords=[], body=[Expr(value=Constant(value='\n    These really apply to multiple versions but are easiest to test on one.\n    ')), FunctionDef(name='test_ref_resolvers_may_have_boolean_schemas_stored', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ref', ctx=Store())], value=Constant(value='someCoolRef')), Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='$ref')], values=[Name(id='ref', ctx=Load())])), Assign(targets=[Name(id='resolver', ctx=Store())], value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='_RefResolver', ctx=Load()), args=[Constant(value=''), Dict(keys=[], values=[])], keywords=[keyword(arg='store', value=Dict(keys=[Name(id='ref', ctx=Load())], values=[Constant(value=False)]))])), Assign(targets=[Name(id='validator', ctx=Store())], value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='_LATEST_VERSION', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[keyword(arg='resolver', value=Name(id='resolver', ctx=Load()))])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Attribute(value=Name(id='exceptions', ctx=Load()), attr='ValidationError', ctx=Load())], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='validate', ctx=Load()), args=[Constant(value=None)], keywords=[]))])], decorator_list=[])], decorator_list=[]), ClassDef(name='TestValidatorFor', bases=[Name(id='TestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='test_draft_3', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='$schema')], values=[Constant(value='http://json-schema.org/draft-03/schema')])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIs', ctx=Load()), args=[Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='validator_for', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[]), Attribute(value=Name(id='validators', ctx=Load()), attr='Draft3Validator', ctx=Load())], keywords=[])), Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='$schema')], values=[Constant(value='http://json-schema.org/draft-03/schema#')])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIs', ctx=Load()), args=[Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='validator_for', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[]), Attribute(value=Name(id='validators', ctx=Load()), attr='Draft3Validator', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_draft_4', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='$schema')], values=[Constant(value='http://json-schema.org/draft-04/schema')])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIs', ctx=Load()), args=[Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='validator_for', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[]), Attribute(value=Name(id='validators', ctx=Load()), attr='Draft4Validator', ctx=Load())], keywords=[])), Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='$schema')], values=[Constant(value='http://json-schema.org/draft-04/schema#')])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIs', ctx=Load()), args=[Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='validator_for', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[]), Attribute(value=Name(id='validators', ctx=Load()), attr='Draft4Validator', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_draft_6', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='$schema')], values=[Constant(value='http://json-schema.org/draft-06/schema')])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIs', ctx=Load()), args=[Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='validator_for', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[]), Attribute(value=Name(id='validators', ctx=Load()), attr='Draft6Validator', ctx=Load())], keywords=[])), Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='$schema')], values=[Constant(value='http://json-schema.org/draft-06/schema#')])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIs', ctx=Load()), args=[Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='validator_for', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[]), Attribute(value=Name(id='validators', ctx=Load()), attr='Draft6Validator', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_draft_7', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='$schema')], values=[Constant(value='http://json-schema.org/draft-07/schema')])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIs', ctx=Load()), args=[Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='validator_for', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[]), Attribute(value=Name(id='validators', ctx=Load()), attr='Draft7Validator', ctx=Load())], keywords=[])), Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='$schema')], values=[Constant(value='http://json-schema.org/draft-07/schema#')])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIs', ctx=Load()), args=[Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='validator_for', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[]), Attribute(value=Name(id='validators', ctx=Load()), attr='Draft7Validator', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_draft_201909', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='$schema')], values=[Constant(value='https://json-schema.org/draft/2019-09/schema')])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIs', ctx=Load()), args=[Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='validator_for', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[]), Attribute(value=Name(id='validators', ctx=Load()), attr='Draft201909Validator', ctx=Load())], keywords=[])), Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='$schema')], values=[Constant(value='https://json-schema.org/draft/2019-09/schema#')])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIs', ctx=Load()), args=[Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='validator_for', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[]), Attribute(value=Name(id='validators', ctx=Load()), attr='Draft201909Validator', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_draft_202012', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='$schema')], values=[Constant(value='https://json-schema.org/draft/2020-12/schema')])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIs', ctx=Load()), args=[Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='validator_for', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[]), Attribute(value=Name(id='validators', ctx=Load()), attr='Draft202012Validator', ctx=Load())], keywords=[])), Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='$schema')], values=[Constant(value='https://json-schema.org/draft/2020-12/schema#')])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIs', ctx=Load()), args=[Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='validator_for', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[]), Attribute(value=Name(id='validators', ctx=Load()), attr='Draft202012Validator', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_True', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIs', ctx=Load()), args=[Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='validator_for', ctx=Load()), args=[Constant(value=True)], keywords=[]), Attribute(value=Name(id='validators', ctx=Load()), attr='_LATEST_VERSION', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_False', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIs', ctx=Load()), args=[Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='validator_for', ctx=Load()), args=[Constant(value=False)], keywords=[]), Attribute(value=Name(id='validators', ctx=Load()), attr='_LATEST_VERSION', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_custom_validator', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='Validator', ctx=Store())], value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='create', ctx=Load()), args=[], keywords=[keyword(arg='meta_schema', value=Dict(keys=[Constant(value='id')], values=[Constant(value='meta schema id')])), keyword(arg='version', value=Constant(value='12')), keyword(arg='id_of', value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='s')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='s', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='id'), Constant(value='')], keywords=[])))])), Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='$schema')], values=[Constant(value='meta schema id')])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIs', ctx=Load()), args=[Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='validator_for', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[]), Name(id='Validator', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_custom_validator_draft6', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='Validator', ctx=Store())], value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='create', ctx=Load()), args=[], keywords=[keyword(arg='meta_schema', value=Dict(keys=[Constant(value='$id')], values=[Constant(value='meta schema $id')])), keyword(arg='version', value=Constant(value='13'))])), Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='$schema')], values=[Constant(value='meta schema $id')])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIs', ctx=Load()), args=[Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='validator_for', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[]), Name(id='Validator', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_validator_for_jsonschema_default', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIs', ctx=Load()), args=[Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='validator_for', ctx=Load()), args=[Dict(keys=[], values=[])], keywords=[]), Attribute(value=Name(id='validators', ctx=Load()), attr='_LATEST_VERSION', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_validator_for_custom_default', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIs', ctx=Load()), args=[Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='validator_for', ctx=Load()), args=[Dict(keys=[], values=[])], keywords=[keyword(arg='default', value=Constant(value=None))]), Constant(value=None)], keywords=[]))], decorator_list=[]), FunctionDef(name='test_warns_if_meta_schema_specified_was_not_found', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertWarns', ctx=Load()), args=[Name(id='DeprecationWarning', ctx=Load())], keywords=[]), optional_vars=Name(id='cm', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='validator_for', ctx=Load()), args=[], keywords=[keyword(arg='schema', value=Dict(keys=[Constant(value='$schema')], values=[Constant(value='unknownSchema')]))]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='cm', ctx=Load()), attr='filename', ctx=Load()), Name(id='__file__', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='cm', ctx=Load()), attr='warning', ctx=Load())], keywords=[]), Constant(value='The metaschema specified by $schema was not found. Using the latest draft to validate, but this will raise an error in the future.')], keywords=[]))], decorator_list=[]), FunctionDef(name='test_does_not_warn_if_meta_schema_is_unspecified', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='catch_warnings', ctx=Load()), args=[], keywords=[keyword(arg='record', value=Constant(value=True))]), optional_vars=Name(id='w', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='simplefilter', ctx=Load()), args=[Constant(value='always')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='validator_for', ctx=Load()), args=[], keywords=[keyword(arg='schema', value=Dict(keys=[], values=[])), keyword(arg='default', value=Dict(keys=[], values=[]))]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertFalse', ctx=Load()), args=[Name(id='w', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_validator_for_custom_default_with_schema', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='schema', ctx=Store()), Name(id='default', ctx=Store())], ctx=Store())], value=Tuple(elts=[Dict(keys=[Constant(value='$schema')], values=[Constant(value='mailto:foo@example.com')]), Call(func=Name(id='object', ctx=Load()), args=[], keywords=[])], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIs', ctx=Load()), args=[Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='validator_for', ctx=Load()), args=[Name(id='schema', ctx=Load()), Name(id='default', ctx=Load())], keywords=[]), Name(id='default', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='TestValidate', bases=[Name(id='TestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='assertUses', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='schema'), arg(arg='Validator')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=List(elts=[], ctx=Load())), With(items=[withitem(context_expr=Call(func=Attribute(value=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), attr='object', ctx=Load()), args=[Name(id='Validator', ctx=Load()), Constant(value='check_schema'), Attribute(value=Name(id='result', ctx=Load()), attr='append', ctx=Load())], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='validate', ctx=Load()), args=[Dict(keys=[], values=[]), Name(id='schema', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='result', ctx=Load()), List(elts=[Name(id='schema', ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_draft3_validator_is_chosen', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertUses', ctx=Load()), args=[], keywords=[keyword(arg='schema', value=Dict(keys=[Constant(value='$schema')], values=[Constant(value='http://json-schema.org/draft-03/schema#')])), keyword(arg='Validator', value=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft3Validator', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertUses', ctx=Load()), args=[], keywords=[keyword(arg='schema', value=Dict(keys=[Constant(value='$schema')], values=[Constant(value='http://json-schema.org/draft-03/schema')])), keyword(arg='Validator', value=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft3Validator', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='test_draft4_validator_is_chosen', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertUses', ctx=Load()), args=[], keywords=[keyword(arg='schema', value=Dict(keys=[Constant(value='$schema')], values=[Constant(value='http://json-schema.org/draft-04/schema#')])), keyword(arg='Validator', value=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft4Validator', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertUses', ctx=Load()), args=[], keywords=[keyword(arg='schema', value=Dict(keys=[Constant(value='$schema')], values=[Constant(value='http://json-schema.org/draft-04/schema')])), keyword(arg='Validator', value=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft4Validator', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='test_draft6_validator_is_chosen', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertUses', ctx=Load()), args=[], keywords=[keyword(arg='schema', value=Dict(keys=[Constant(value='$schema')], values=[Constant(value='http://json-schema.org/draft-06/schema#')])), keyword(arg='Validator', value=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft6Validator', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertUses', ctx=Load()), args=[], keywords=[keyword(arg='schema', value=Dict(keys=[Constant(value='$schema')], values=[Constant(value='http://json-schema.org/draft-06/schema')])), keyword(arg='Validator', value=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft6Validator', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='test_draft7_validator_is_chosen', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertUses', ctx=Load()), args=[], keywords=[keyword(arg='schema', value=Dict(keys=[Constant(value='$schema')], values=[Constant(value='http://json-schema.org/draft-07/schema#')])), keyword(arg='Validator', value=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft7Validator', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertUses', ctx=Load()), args=[], keywords=[keyword(arg='schema', value=Dict(keys=[Constant(value='$schema')], values=[Constant(value='http://json-schema.org/draft-07/schema')])), keyword(arg='Validator', value=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft7Validator', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='test_draft202012_validator_is_chosen', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertUses', ctx=Load()), args=[], keywords=[keyword(arg='schema', value=Dict(keys=[Constant(value='$schema')], values=[Constant(value='https://json-schema.org/draft/2020-12/schema#')])), keyword(arg='Validator', value=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft202012Validator', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertUses', ctx=Load()), args=[], keywords=[keyword(arg='schema', value=Dict(keys=[Constant(value='$schema')], values=[Constant(value='https://json-schema.org/draft/2020-12/schema')])), keyword(arg='Validator', value=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft202012Validator', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='test_draft202012_validator_is_the_default', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertUses', ctx=Load()), args=[], keywords=[keyword(arg='schema', value=Dict(keys=[], values=[])), keyword(arg='Validator', value=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft202012Validator', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='test_validation_error_message', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Attribute(value=Name(id='exceptions', ctx=Load()), attr='ValidationError', ctx=Load())], keywords=[]), optional_vars=Name(id='e', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='validate', ctx=Load()), args=[Constant(value=12), Dict(keys=[Constant(value='type')], values=[Constant(value='string')])], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRegex', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='e', ctx=Load()), attr='exception', ctx=Load())], keywords=[]), Constant(value="(?s)Failed validating '.*' in schema.*On instance")], keywords=[]))], decorator_list=[]), FunctionDef(name='test_schema_error_message', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Attribute(value=Name(id='exceptions', ctx=Load()), attr='SchemaError', ctx=Load())], keywords=[]), optional_vars=Name(id='e', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='validate', ctx=Load()), args=[Constant(value=12), Dict(keys=[Constant(value='type')], values=[Constant(value=12)])], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRegex', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='e', ctx=Load()), attr='exception', ctx=Load())], keywords=[]), Constant(value="(?s)Failed validating '.*' in metaschema.*On schema")], keywords=[]))], decorator_list=[]), FunctionDef(name='test_it_uses_best_match', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='oneOf')], values=[List(elts=[Dict(keys=[Constant(value='type'), Constant(value='minimum')], values=[Constant(value='number'), Constant(value=20)]), Dict(keys=[Constant(value='type')], values=[Constant(value='array')])], ctx=Load())])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Attribute(value=Name(id='exceptions', ctx=Load()), attr='ValidationError', ctx=Load())], keywords=[]), optional_vars=Name(id='e', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='validate', ctx=Load()), args=[Constant(value=12), Name(id='schema', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Constant(value='12 is less than the minimum of 20'), Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='e', ctx=Load()), attr='exception', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='TestThreading', bases=[Name(id='TestCase', ctx=Load())], keywords=[], body=[Expr(value=Constant(value="\n    Threading-related functionality tests.\n\n    jsonschema doesn't promise thread safety, and its validation behavior\n    across multiple threads may change at any time, but that means it isn't\n    safe to share *validators* across threads, not that anytime one has\n    multiple threads that jsonschema won't work (it certainly is intended to).\n\n    These tests ensure that this minimal level of functionality continues to\n    work.\n    ")), FunctionDef(name='test_validation_across_a_second_thread', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='failed', ctx=Store())], value=List(elts=[], ctx=Load())), FunctionDef(name='validate', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Expr(value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='validate', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=Constant(value=37)), keyword(arg='schema', value=Constant(value=True))]))], handlers=[ExceptHandler(body=[Expr(value=Call(func=Attribute(value=Name(id='failed', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='sys', ctx=Load()), attr='exc_info', ctx=Load()), args=[], keywords=[])], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[]), Expr(value=Call(func=Name(id='validate', ctx=Load()), args=[], keywords=[])), ImportFrom(module='threading', names=[alias(name='Thread')], level=0), Assign(targets=[Name(id='thread', ctx=Store())], value=Call(func=Name(id='Thread', ctx=Load()), args=[], keywords=[keyword(arg='target', value=Name(id='validate', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='thread', ctx=Load()), attr='start', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='thread', ctx=Load()), attr='join', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Tuple(elts=[Call(func=Attribute(value=Name(id='thread', ctx=Load()), attr='is_alive', ctx=Load()), args=[], keywords=[]), Name(id='failed', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value=False), List(elts=[], ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='TestReferencing', bases=[Name(id='TestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='test_registry_with_retrieve', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='retrieve', args=arguments(posonlyargs=[], args=[arg(arg='uri')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='DRAFT202012', ctx=Load()), attr='create_resource', ctx=Load()), args=[Dict(keys=[Constant(value='type')], values=[Constant(value='integer')])], keywords=[]))], decorator_list=[]), Assign(targets=[Name(id='registry', ctx=Store())], value=Call(func=Attribute(value=Name(id='referencing', ctx=Load()), attr='Registry', ctx=Load()), args=[], keywords=[keyword(arg='retrieve', value=Name(id='retrieve', ctx=Load()))])), Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='$ref')], values=[Constant(value='https://example.com/')])), Assign(targets=[Name(id='validator', ctx=Store())], value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft202012Validator', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[keyword(arg='registry', value=Name(id='registry', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Tuple(elts=[Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='is_valid', ctx=Load()), args=[Constant(value=12)], keywords=[]), Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='is_valid', ctx=Load()), args=[Constant(value='foo')], keywords=[])], ctx=Load()), Tuple(elts=[Constant(value=True), Constant(value=False)], ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_custom_registries_do_not_autoretrieve_remote_resources', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='registry', ctx=Store())], value=Call(func=Attribute(value=Name(id='referencing', ctx=Load()), attr='Registry', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='$ref')], values=[Constant(value='https://example.com/')])), Assign(targets=[Name(id='validator', ctx=Store())], value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft202012Validator', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[keyword(arg='registry', value=Name(id='registry', ctx=Load()))])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='catch_warnings', ctx=Load()), args=[], keywords=[keyword(arg='record', value=Constant(value=True))]), optional_vars=Name(id='w', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='simplefilter', ctx=Load()), args=[Constant(value='always')], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='referencing', ctx=Load()), attr='exceptions', ctx=Load()), attr='Unresolvable', ctx=Load())], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='validate', ctx=Load()), args=[Constant(value=12)], keywords=[]))])]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertFalse', ctx=Load()), args=[Name(id='w', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='TestRefResolver', bases=[Name(id='TestCase', ctx=Load())], keywords=[], body=[Assign(targets=[Name(id='base_uri', ctx=Store())], value=Constant(value='')), Assign(targets=[Name(id='stored_uri', ctx=Store())], value=Constant(value='foo://stored')), Assign(targets=[Name(id='stored_schema', ctx=Store())], value=Dict(keys=[Constant(value='stored')], values=[Constant(value='schema')])), FunctionDef(name='setUp', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='referrer', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='store', ctx=Store())], value=Dict(keys=[Attribute(value=Name(id='self', ctx=Load()), attr='stored_uri', ctx=Load())], values=[Attribute(value=Name(id='self', ctx=Load()), attr='stored_schema', ctx=Load())])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='resolver', ctx=Store())], value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='_RefResolver', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='base_uri', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='referrer', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='store', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_it_does_not_retrieve_schema_urls_from_the_network', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ref', ctx=Store())], value=Subscript(value=Attribute(value=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft3Validator', ctx=Load()), attr='META_SCHEMA', ctx=Load()), slice=Constant(value='id'), ctx=Load())), With(items=[withitem(context_expr=Call(func=Attribute(value=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), attr='object', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='resolver', ctx=Load()), Constant(value='resolve_remote')], keywords=[]), optional_vars=Name(id='patched', ctx=Store()))], body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='resolver', ctx=Load()), attr='resolving', ctx=Load()), args=[Name(id='ref', ctx=Load())], keywords=[]), optional_vars=Name(id='resolved', ctx=Store()))], body=[Pass()])]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='resolved', ctx=Load()), Attribute(value=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft3Validator', ctx=Load()), attr='META_SCHEMA', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertFalse', ctx=Load()), args=[Attribute(value=Name(id='patched', ctx=Load()), attr='called', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_it_resolves_local_refs', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ref', ctx=Store())], value=Constant(value='#/properties/foo')), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='referrer', ctx=Load()), slice=Constant(value='properties'), ctx=Store())], value=Dict(keys=[Constant(value='foo')], values=[Call(func=Name(id='object', ctx=Load()), args=[], keywords=[])])), With(items=[withitem(context_expr=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='resolver', ctx=Load()), attr='resolving', ctx=Load()), args=[Name(id='ref', ctx=Load())], keywords=[]), optional_vars=Name(id='resolved', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='resolved', ctx=Load()), Subscript(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='referrer', ctx=Load()), slice=Constant(value='properties'), ctx=Load()), slice=Constant(value='foo'), ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='test_it_resolves_local_refs_with_id', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='id'), Constant(value='a')], values=[Constant(value='http://bar/schema#'), Dict(keys=[Constant(value='foo')], values=[Constant(value='bar')])])), Assign(targets=[Name(id='resolver', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='validators', ctx=Load()), attr='_RefResolver', ctx=Load()), attr='from_schema', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[keyword(arg='id_of', value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='schema')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='schema', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='id'), Constant(value='')], keywords=[])))])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='resolver', ctx=Load()), attr='resolving', ctx=Load()), args=[Constant(value='#/a')], keywords=[]), optional_vars=Name(id='resolved', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='resolved', ctx=Load()), Subscript(value=Name(id='schema', ctx=Load()), slice=Constant(value='a'), ctx=Load())], keywords=[]))]), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='resolver', ctx=Load()), attr='resolving', ctx=Load()), args=[Constant(value='http://bar/schema#/a')], keywords=[]), optional_vars=Name(id='resolved', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='resolved', ctx=Load()), Subscript(value=Name(id='schema', ctx=Load()), slice=Constant(value='a'), ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='test_it_retrieves_stored_refs', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='resolver', ctx=Load()), attr='resolving', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='stored_uri', ctx=Load())], keywords=[]), optional_vars=Name(id='resolved', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIs', ctx=Load()), args=[Name(id='resolved', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='stored_schema', ctx=Load())], keywords=[]))]), Assign(targets=[Subscript(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='resolver', ctx=Load()), attr='store', ctx=Load()), slice=Constant(value='cached_ref'), ctx=Store())], value=Dict(keys=[Constant(value='foo')], values=[Constant(value=12)])), With(items=[withitem(context_expr=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='resolver', ctx=Load()), attr='resolving', ctx=Load()), args=[Constant(value='cached_ref#/foo')], keywords=[]), optional_vars=Name(id='resolved', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='resolved', ctx=Load()), Constant(value=12)], keywords=[]))])], decorator_list=[]), FunctionDef(name='test_it_retrieves_unstored_refs_via_requests', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ref', ctx=Store())], value=Constant(value='http://bar#baz')), Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='baz')], values=[Constant(value=12)])), If(test=Compare(left=Constant(value='requests'), ops=[In()], comparators=[Attribute(value=Name(id='sys', ctx=Load()), attr='modules', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='addCleanup', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='modules', ctx=Load()), attr='__setitem__', ctx=Load()), Constant(value='requests'), Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='modules', ctx=Load()), slice=Constant(value='requests'), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='modules', ctx=Load()), slice=Constant(value='requests'), ctx=Store())], value=Call(func=Name(id='ReallyFakeRequests', ctx=Load()), args=[Dict(keys=[Constant(value='http://bar')], values=[Name(id='schema', ctx=Load())])], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='resolver', ctx=Load()), attr='resolving', ctx=Load()), args=[Name(id='ref', ctx=Load())], keywords=[]), optional_vars=Name(id='resolved', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='resolved', ctx=Load()), Constant(value=12)], keywords=[]))])], decorator_list=[]), FunctionDef(name='test_it_retrieves_unstored_refs_via_urlopen', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='ref', ctx=Store())], value=Constant(value='http://bar#baz')), Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='baz')], values=[Constant(value=12)])), If(test=Compare(left=Constant(value='requests'), ops=[In()], comparators=[Attribute(value=Name(id='sys', ctx=Load()), attr='modules', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='addCleanup', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='modules', ctx=Load()), attr='__setitem__', ctx=Load()), Constant(value='requests'), Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='modules', ctx=Load()), slice=Constant(value='requests'), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='modules', ctx=Load()), slice=Constant(value='requests'), ctx=Store())], value=Constant(value=None)), FunctionDef(name='fake_urlopen', args=arguments(posonlyargs=[], args=[arg(arg='url')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='url', ctx=Load()), Constant(value='http://bar')], keywords=[])), Expr(value=Yield(value=Call(func=Name(id='BytesIO', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dumps', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[]), attr='encode', ctx=Load()), args=[Constant(value='utf8')], keywords=[])], keywords=[])))], decorator_list=[Name(id='contextmanager', ctx=Load())]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='addCleanup', ctx=Load()), args=[Name(id='setattr', ctx=Load()), Name(id='validators', ctx=Load()), Constant(value='urlopen'), Attribute(value=Name(id='validators', ctx=Load()), attr='urlopen', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='validators', ctx=Load()), attr='urlopen', ctx=Store())], value=Name(id='fake_urlopen', ctx=Load())), With(items=[withitem(context_expr=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='resolver', ctx=Load()), attr='resolving', ctx=Load()), args=[Name(id='ref', ctx=Load())], keywords=[]), optional_vars=Name(id='resolved', ctx=Store()))], body=[Pass()]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='resolved', ctx=Load()), Constant(value=12)], keywords=[]))], decorator_list=[]), FunctionDef(name='test_it_retrieves_local_refs_via_urlopen', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='tempfile', ctx=Load()), attr='NamedTemporaryFile', ctx=Load()), args=[], keywords=[keyword(arg='delete', value=Constant(value=False)), keyword(arg='mode', value=Constant(value='wt'))]), optional_vars=Name(id='tempf', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='addCleanup', ctx=Load()), args=[Attribute(value=Name(id='os', ctx=Load()), attr='remove', ctx=Load()), Attribute(value=Name(id='tempf', ctx=Load()), attr='name', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dump', ctx=Load()), args=[Dict(keys=[Constant(value='foo')], values=[Constant(value='bar')]), Name(id='tempf', ctx=Load())], keywords=[]))]), Assign(targets=[Name(id='ref', ctx=Store())], value=JoinedStr(values=[Constant(value='file://'), FormattedValue(value=Call(func=Name(id='pathname2url', ctx=Load()), args=[Attribute(value=Name(id='tempf', ctx=Load()), attr='name', ctx=Load())], keywords=[]), conversion=-1), Constant(value='#foo')])), With(items=[withitem(context_expr=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='resolver', ctx=Load()), attr='resolving', ctx=Load()), args=[Name(id='ref', ctx=Load())], keywords=[]), optional_vars=Name(id='resolved', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='resolved', ctx=Load()), Constant(value='bar')], keywords=[]))])], decorator_list=[]), FunctionDef(name='test_it_can_construct_a_base_uri_from_a_schema', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='id')], values=[Constant(value='foo')])), Assign(targets=[Name(id='resolver', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='validators', ctx=Load()), attr='_RefResolver', ctx=Load()), attr='from_schema', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[keyword(arg='id_of', value=Lambda(args=arguments(posonlyargs=[], args=[arg(arg='schema')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='schema', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='id'), Constant(value='')], keywords=[])))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='resolver', ctx=Load()), attr='base_uri', ctx=Load()), Constant(value='foo')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='resolver', ctx=Load()), attr='resolution_scope', ctx=Load()), Constant(value='foo')], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='resolver', ctx=Load()), attr='resolving', ctx=Load()), args=[Constant(value='')], keywords=[]), optional_vars=Name(id='resolved', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='resolved', ctx=Load()), Name(id='schema', ctx=Load())], keywords=[]))]), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='resolver', ctx=Load()), attr='resolving', ctx=Load()), args=[Constant(value='#')], keywords=[]), optional_vars=Name(id='resolved', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='resolved', ctx=Load()), Name(id='schema', ctx=Load())], keywords=[]))]), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='resolver', ctx=Load()), attr='resolving', ctx=Load()), args=[Constant(value='foo')], keywords=[]), optional_vars=Name(id='resolved', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='resolved', ctx=Load()), Name(id='schema', ctx=Load())], keywords=[]))]), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='resolver', ctx=Load()), attr='resolving', ctx=Load()), args=[Constant(value='foo#')], keywords=[]), optional_vars=Name(id='resolved', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='resolved', ctx=Load()), Name(id='schema', ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='test_it_can_construct_a_base_uri_from_a_schema_without_id', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[], values=[])), Assign(targets=[Name(id='resolver', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='validators', ctx=Load()), attr='_RefResolver', ctx=Load()), attr='from_schema', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='resolver', ctx=Load()), attr='base_uri', ctx=Load()), Constant(value='')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='resolver', ctx=Load()), attr='resolution_scope', ctx=Load()), Constant(value='')], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='resolver', ctx=Load()), attr='resolving', ctx=Load()), args=[Constant(value='')], keywords=[]), optional_vars=Name(id='resolved', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='resolved', ctx=Load()), Name(id='schema', ctx=Load())], keywords=[]))]), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='resolver', ctx=Load()), attr='resolving', ctx=Load()), args=[Constant(value='#')], keywords=[]), optional_vars=Name(id='resolved', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='resolved', ctx=Load()), Name(id='schema', ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='test_custom_uri_scheme_handlers', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='handler', args=arguments(posonlyargs=[], args=[arg(arg='url')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='url', ctx=Load()), Name(id='ref', ctx=Load())], keywords=[])), Return(value=Name(id='schema', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='foo')], values=[Constant(value='bar')])), Assign(targets=[Name(id='ref', ctx=Store())], value=Constant(value='foo://bar')), Assign(targets=[Name(id='resolver', ctx=Store())], value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='_RefResolver', ctx=Load()), args=[Constant(value=''), Dict(keys=[], values=[])], keywords=[keyword(arg='handlers', value=Dict(keys=[Constant(value='foo')], values=[Name(id='handler', ctx=Load())]))])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='resolver', ctx=Load()), attr='resolving', ctx=Load()), args=[Name(id='ref', ctx=Load())], keywords=[]), optional_vars=Name(id='resolved', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='resolved', ctx=Load()), Name(id='schema', ctx=Load())], keywords=[]))])], decorator_list=[]), FunctionDef(name='test_cache_remote_on', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='response', ctx=Store())], value=List(elts=[Call(func=Name(id='object', ctx=Load()), args=[], keywords=[])], ctx=Load())), FunctionDef(name='handler', args=arguments(posonlyargs=[], args=[arg(arg='url')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Return(value=Call(func=Attribute(value=Name(id='response', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Name(id='IndexError', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Constant(value='Response must not have been cached!')], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[]), Assign(targets=[Name(id='ref', ctx=Store())], value=Constant(value='foo://bar')), Assign(targets=[Name(id='resolver', ctx=Store())], value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='_RefResolver', ctx=Load()), args=[Constant(value=''), Dict(keys=[], values=[])], keywords=[keyword(arg='cache_remote', value=Constant(value=True)), keyword(arg='handlers', value=Dict(keys=[Constant(value='foo')], values=[Name(id='handler', ctx=Load())]))])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='resolver', ctx=Load()), attr='resolving', ctx=Load()), args=[Name(id='ref', ctx=Load())], keywords=[]))], body=[Pass()]), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='resolver', ctx=Load()), attr='resolving', ctx=Load()), args=[Name(id='ref', ctx=Load())], keywords=[]))], body=[Pass()])], decorator_list=[]), FunctionDef(name='test_cache_remote_off', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='response', ctx=Store())], value=List(elts=[Call(func=Name(id='object', ctx=Load()), args=[], keywords=[])], ctx=Load())), FunctionDef(name='handler', args=arguments(posonlyargs=[], args=[arg(arg='url')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Return(value=Call(func=Attribute(value=Name(id='response', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Name(id='IndexError', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Constant(value='Handler called twice!')], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[]), Assign(targets=[Name(id='ref', ctx=Store())], value=Constant(value='foo://bar')), Assign(targets=[Name(id='resolver', ctx=Store())], value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='_RefResolver', ctx=Load()), args=[Constant(value=''), Dict(keys=[], values=[])], keywords=[keyword(arg='cache_remote', value=Constant(value=False)), keyword(arg='handlers', value=Dict(keys=[Constant(value='foo')], values=[Name(id='handler', ctx=Load())]))])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='resolver', ctx=Load()), attr='resolving', ctx=Load()), args=[Name(id='ref', ctx=Load())], keywords=[]))], body=[Pass()])], decorator_list=[]), FunctionDef(name='test_if_you_give_it_junk_you_get_a_resolution_error', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='error', ctx=Store())], value=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value="Oh no! What's this?")], keywords=[])), FunctionDef(name='handler', args=arguments(posonlyargs=[], args=[arg(arg='url')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Name(id='error', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='ref', ctx=Store())], value=Constant(value='foo://bar')), Assign(targets=[Name(id='resolver', ctx=Store())], value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='_RefResolver', ctx=Load()), args=[Constant(value=''), Dict(keys=[], values=[])], keywords=[keyword(arg='handlers', value=Dict(keys=[Constant(value='foo')], values=[Name(id='handler', ctx=Load())]))])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Attribute(value=Name(id='exceptions', ctx=Load()), attr='_RefResolutionError', ctx=Load())], keywords=[]), optional_vars=Name(id='err', ctx=Store()))], body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='resolver', ctx=Load()), attr='resolving', ctx=Load()), args=[Name(id='ref', ctx=Load())], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Constant(value="Shouldn't get this far!")], keywords=[]))])]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='err', ctx=Load()), attr='exception', ctx=Load()), Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='_RefResolutionError', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_helpful_error_message_on_failed_pop_scope', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='resolver', ctx=Store())], value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='_RefResolver', ctx=Load()), args=[Constant(value=''), Dict(keys=[], values=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='resolver', ctx=Load()), attr='pop_scope', ctx=Load()), args=[], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Attribute(value=Name(id='exceptions', ctx=Load()), attr='_RefResolutionError', ctx=Load())], keywords=[]), optional_vars=Name(id='exc', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='resolver', ctx=Load()), attr='pop_scope', ctx=Load()), args=[], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Constant(value='Failed to pop the scope'), Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='exc', ctx=Load()), attr='exception', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_pointer_within_schema_with_different_id', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        See #1085.\n        ')), Assign(targets=[Name(id='schema', ctx=Store())], value=Attribute(value=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft7Validator', ctx=Load()), attr='META_SCHEMA', ctx=Load())), Assign(targets=[Name(id='one', ctx=Store())], value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='_RefResolver', ctx=Load()), args=[Constant(value=''), Name(id='schema', ctx=Load())], keywords=[])), Assign(targets=[Name(id='validator', ctx=Store())], value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft7Validator', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[keyword(arg='resolver', value=Name(id='one', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertFalse', ctx=Load()), args=[Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='is_valid', ctx=Load()), args=[Dict(keys=[Constant(value='maxLength')], values=[Constant(value='foo')])], keywords=[])], keywords=[])), Assign(targets=[Name(id='another', ctx=Store())], value=Dict(keys=[Constant(value='allOf')], values=[List(elts=[Dict(keys=[Constant(value='$ref')], values=[Subscript(value=Attribute(value=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft7Validator', ctx=Load()), attr='META_SCHEMA', ctx=Load()), slice=Constant(value='$id'), ctx=Load())])], ctx=Load())])), Assign(targets=[Name(id='two', ctx=Store())], value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='_RefResolver', ctx=Load()), args=[Constant(value=''), Name(id='another', ctx=Load())], keywords=[])), Assign(targets=[Name(id='validator', ctx=Store())], value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft7Validator', ctx=Load()), args=[Name(id='another', ctx=Load())], keywords=[keyword(arg='resolver', value=Name(id='two', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertFalse', ctx=Load()), args=[Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='is_valid', ctx=Load()), args=[Dict(keys=[Constant(value='maxLength')], values=[Constant(value='foo')])], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_newly_created_validator_with_ref_resolver', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        See https://github.com/python-jsonschema/jsonschema/issues/1061#issuecomment-1624266555.\n        ')), FunctionDef(name='handle', args=arguments(posonlyargs=[], args=[arg(arg='uri')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='uri', ctx=Load()), Constant(value='http://example.com/foo')], keywords=[])), Return(value=Dict(keys=[Constant(value='type')], values=[Constant(value='integer')]))], decorator_list=[]), Assign(targets=[Name(id='resolver', ctx=Store())], value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='_RefResolver', ctx=Load()), args=[Constant(value=''), Dict(keys=[], values=[])], keywords=[keyword(arg='handlers', value=Dict(keys=[Constant(value='http')], values=[Name(id='handle', ctx=Load())]))])), Assign(targets=[Name(id='Validator', ctx=Store())], value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='create', ctx=Load()), args=[], keywords=[keyword(arg='meta_schema', value=Dict(keys=[], values=[])), keyword(arg='validators', value=Attribute(value=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft4Validator', ctx=Load()), attr='VALIDATORS', ctx=Load()))])), Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='$id'), Constant(value='$ref')], values=[Constant(value='http://example.com/bar'), Constant(value='foo')])), Assign(targets=[Name(id='validator', ctx=Store())], value=Call(func=Name(id='Validator', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[keyword(arg='resolver', value=Name(id='resolver', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Tuple(elts=[Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='is_valid', ctx=Load()), args=[Dict(keys=[], values=[])], keywords=[]), Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='is_valid', ctx=Load()), args=[Constant(value=37)], keywords=[])], ctx=Load()), Tuple(elts=[Constant(value=False), Constant(value=True)], ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_refresolver_with_pointer_in_schema_with_no_id', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        See https://github.com/python-jsonschema/jsonschema/issues/1124#issuecomment-1632574249.\n        ')), Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='properties'), Constant(value='definitions')], values=[Dict(keys=[Constant(value='x')], values=[Dict(keys=[Constant(value='$ref')], values=[Constant(value='#/definitions/x')])]), Dict(keys=[Constant(value='x')], values=[Dict(keys=[Constant(value='type')], values=[Constant(value='integer')])])])), Assign(targets=[Name(id='validator', ctx=Store())], value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft202012Validator', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[keyword(arg='resolver', value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='_RefResolver', ctx=Load()), args=[Constant(value=''), Name(id='schema', ctx=Load())], keywords=[]))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Tuple(elts=[Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='is_valid', ctx=Load()), args=[Dict(keys=[Constant(value='x')], values=[Constant(value='y')])], keywords=[]), Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='is_valid', ctx=Load()), args=[Dict(keys=[Constant(value='x')], values=[Constant(value=37)])], keywords=[])], ctx=Load()), Tuple(elts=[Constant(value=False), Constant(value=True)], ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), FunctionDef(name='sorted_errors', args=arguments(posonlyargs=[], args=[arg(arg='errors')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='key', args=arguments(posonlyargs=[], args=[arg(arg='error')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Tuple(elts=[ListComp(elt=Call(func=Name(id='str', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='e', ctx=Store()), iter=Attribute(value=Name(id='error', ctx=Load()), attr='path', ctx=Load()), ifs=[], is_async=0)]), ListComp(elt=Call(func=Name(id='str', ctx=Load()), args=[Name(id='e', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='e', ctx=Store()), iter=Attribute(value=Name(id='error', ctx=Load()), attr='schema_path', ctx=Load()), ifs=[], is_async=0)])], ctx=Load()))], decorator_list=[]), Return(value=Call(func=Name(id='sorted', ctx=Load()), args=[Name(id='errors', ctx=Load())], keywords=[keyword(arg='key', value=Name(id='key', ctx=Load()))]))], decorator_list=[]), ClassDef(name='ReallyFakeRequests', bases=[], keywords=[], body=[AnnAssign(target=Name(id='_responses', ctx=Store()), annotation=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), simple=1), FunctionDef(name='get', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='url')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='response', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_responses', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='url', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[BinOp(left=Constant(value='Unknown URL: '), op=Add(), right=Call(func=Name(id='repr', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[]))], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='_ReallyFakeJSONResponse', ctx=Load()), args=[Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dumps', ctx=Load()), args=[Name(id='response', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[])], decorator_list=[Name(id='define', ctx=Load())]), ClassDef(name='_ReallyFakeJSONResponse', bases=[], keywords=[], body=[AnnAssign(target=Name(id='_response', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), FunctionDef(name='json', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='loads', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_response', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[Name(id='define', ctx=Load())])], type_ignores=[])