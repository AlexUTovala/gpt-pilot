Module(body=[Expr(value=Constant(value='\nPython representations of the JSON Schema Test Suite tests.\n')), ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), ImportFrom(module='collections.abc', names=[alias(name='Iterable'), alias(name='Mapping')], level=0), ImportFrom(module='contextlib', names=[alias(name='suppress')], level=0), ImportFrom(module='functools', names=[alias(name='partial')], level=0), ImportFrom(module='pathlib', names=[alias(name='Path')], level=0), ImportFrom(module='typing', names=[alias(name='TYPE_CHECKING'), alias(name='Any')], level=0), Import(names=[alias(name='json')]), Import(names=[alias(name='os')]), Import(names=[alias(name='re')]), Import(names=[alias(name='subprocess')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='unittest')]), ImportFrom(module='attrs', names=[alias(name='field'), alias(name='frozen')], level=0), ImportFrom(module='referencing', names=[alias(name='Registry')], level=0), Import(names=[alias(name='referencing.jsonschema')]), If(test=Name(id='TYPE_CHECKING', ctx=Load()), body=[Import(names=[alias(name='pyperf')])], orelse=[]), ImportFrom(module='jsonschema.validators', names=[alias(name='_VALIDATORS')], level=0), Import(names=[alias(name='jsonschema')]), Assign(targets=[Name(id='_DELIMITERS', ctx=Store())], value=Call(func=Attribute(value=Name(id='re', ctx=Load()), attr='compile', ctx=Load()), args=[Constant(value='[\\W\\- ]+')], keywords=[])), FunctionDef(name='_find_suite', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='root', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='JSON_SCHEMA_TEST_SUITE')], keywords=[])), If(test=Compare(left=Name(id='root', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=Call(func=Name(id='Path', ctx=Load()), args=[Name(id='root', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='root', ctx=Store())], value=BinOp(left=Attribute(value=Attribute(value=Call(func=Name(id='Path', ctx=Load()), args=[Attribute(value=Name(id='jsonschema', ctx=Load()), attr='__file__', ctx=Load())], keywords=[]), attr='parent', ctx=Load()), attr='parent', ctx=Load()), op=Div(), right=Constant(value='json'))), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Name(id='root', ctx=Load()), attr='is_dir', ctx=Load()), args=[], keywords=[])), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value="Can't find the JSON-Schema-Test-Suite directory. Set the 'JSON_SCHEMA_TEST_SUITE' environment variable or run the tests from alongside a checkout of the suite.")], keywords=[]))], orelse=[]), Return(value=Name(id='root', ctx=Load()))], decorator_list=[]), ClassDef(name='Suite', bases=[], keywords=[], body=[AnnAssign(target=Name(id='_root', ctx=Store()), annotation=Name(id='Path', ctx=Load()), value=Call(func=Name(id='field', ctx=Load()), args=[], keywords=[keyword(arg='factory', value=Name(id='_find_suite', ctx=Load()))]), simple=1), AnnAssign(target=Name(id='_remotes', ctx=Store()), annotation=Attribute(value=Attribute(value=Name(id='referencing', ctx=Load()), attr='jsonschema', ctx=Load()), attr='SchemaRegistry', ctx=Load()), value=Call(func=Name(id='field', ctx=Load()), args=[], keywords=[keyword(arg='init', value=Constant(value=False))]), simple=1), FunctionDef(name='__attrs_post_init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='jsonschema_suite', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_root', ctx=Load()), attr='joinpath', ctx=Load()), args=[Constant(value='bin'), Constant(value='jsonschema_suite')], keywords=[])), Assign(targets=[Name(id='argv', ctx=Store())], value=List(elts=[Attribute(value=Name(id='sys', ctx=Load()), attr='executable', ctx=Load()), Call(func=Name(id='str', ctx=Load()), args=[Name(id='jsonschema_suite', ctx=Load())], keywords=[]), Constant(value='remotes')], ctx=Load())), Assign(targets=[Name(id='remotes', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='subprocess', ctx=Load()), attr='check_output', ctx=Load()), args=[Name(id='argv', ctx=Load())], keywords=[]), attr='decode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[])), Assign(targets=[Name(id='resources', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='loads', ctx=Load()), args=[Name(id='remotes', ctx=Load())], keywords=[])), Assign(targets=[Name(id='li', ctx=Store())], value=Constant(value='http://localhost:1234/locationIndependentIdentifierPre2019.json')), Assign(targets=[Name(id='li4', ctx=Store())], value=Constant(value='http://localhost:1234/locationIndependentIdentifierDraft4.json')), Assign(targets=[Name(id='registry', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Name(id='Registry', ctx=Load()), args=[], keywords=[]), attr='with_resources', ctx=Load()), args=[List(elts=[Tuple(elts=[Name(id='li', ctx=Load()), Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='referencing', ctx=Load()), attr='jsonschema', ctx=Load()), attr='DRAFT7', ctx=Load()), attr='create_resource', ctx=Load()), args=[], keywords=[keyword(arg='contents', value=Call(func=Attribute(value=Name(id='resources', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='li', ctx=Load())], keywords=[]))])], ctx=Load()), Tuple(elts=[Name(id='li4', ctx=Load()), Call(func=Attribute(value=Attribute(value=Attribute(value=Name(id='referencing', ctx=Load()), attr='jsonschema', ctx=Load()), attr='DRAFT4', ctx=Load()), attr='create_resource', ctx=Load()), args=[], keywords=[keyword(arg='contents', value=Call(func=Attribute(value=Name(id='resources', ctx=Load()), attr='pop', ctx=Load()), args=[Name(id='li4', ctx=Load())], keywords=[]))])], ctx=Load())], ctx=Load())], keywords=[]), attr='with_contents', ctx=Load()), args=[Call(func=Attribute(value=Name(id='resources', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[])], keywords=[keyword(arg='default_specification', value=Attribute(value=Attribute(value=Name(id='referencing', ctx=Load()), attr='jsonschema', ctx=Load()), attr='DRAFT202012', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='object', ctx=Load()), attr='__setattr__', ctx=Load()), args=[Name(id='self', ctx=Load()), Constant(value='_remotes'), Name(id='registry', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='benchmark', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='runner', annotation=Attribute(value=Name(id='pyperf', ctx=Load()), attr='Runner', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Tuple(elts=[Name(id='name', ctx=Store()), Name(id='Validator', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='_VALIDATORS', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='version', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Name(id='name', ctx=Load()))]), attr='benchmark', ctx=Load()), args=[], keywords=[keyword(arg='runner', value=Name(id='runner', ctx=Load())), keyword(arg='Validator', value=Name(id='Validator', ctx=Load()))]))], orelse=[])], decorator_list=[]), FunctionDef(name='version', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Name(id='Version', ctx=Load()), args=[], keywords=[keyword(arg='name', value=Name(id='name', ctx=Load())), keyword(arg='path', value=BinOp(left=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_root', ctx=Load()), op=Div(), right=Constant(value='tests')), op=Div(), right=Name(id='name', ctx=Load()))), keyword(arg='remotes', value=Attribute(value=Name(id='self', ctx=Load()), attr='_remotes', ctx=Load()))]))], decorator_list=[], returns=Name(id='Version', ctx=Load()))], decorator_list=[Name(id='frozen', ctx=Load())]), ClassDef(name='Version', bases=[], keywords=[], body=[AnnAssign(target=Name(id='_path', ctx=Store()), annotation=Name(id='Path', ctx=Load()), simple=1), AnnAssign(target=Name(id='_remotes', ctx=Store()), annotation=Attribute(value=Attribute(value=Name(id='referencing', ctx=Load()), attr='jsonschema', ctx=Load()), attr='SchemaRegistry', ctx=Load()), simple=1), AnnAssign(target=Name(id='name', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), FunctionDef(name='benchmark', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[For(target=Name(id='case', ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='cases', ctx=Load()), args=[], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='case', ctx=Load()), attr='benchmark', ctx=Load()), args=[], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], orelse=[])], decorator_list=[]), FunctionDef(name='cases', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_cases_in', ctx=Load()), args=[], keywords=[keyword(arg='paths', value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_path', ctx=Load()), attr='glob', ctx=Load()), args=[Constant(value='*.json')], keywords=[]))]))], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='_Case', ctx=Load()), ctx=Load())), FunctionDef(name='format_cases', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_cases_in', ctx=Load()), args=[], keywords=[keyword(arg='paths', value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_path', ctx=Load()), attr='glob', ctx=Load()), args=[Constant(value='optional/format/*.json')], keywords=[]))]))], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='_Case', ctx=Load()), ctx=Load())), FunctionDef(name='optional_cases_of', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='name', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_cases_in', ctx=Load()), args=[], keywords=[keyword(arg='paths', value=List(elts=[BinOp(left=BinOp(left=Attribute(value=Name(id='self', ctx=Load()), attr='_path', ctx=Load()), op=Div(), right=Constant(value='optional')), op=Div(), right=JoinedStr(values=[FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1), Constant(value='.json')]))], ctx=Load()))]))], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='_Case', ctx=Load()), ctx=Load())), FunctionDef(name='to_unittest_testcase', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='groups'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Assign(targets=[Name(id='name', ctx=Store())], value=Call(func=Attribute(value=Name(id='kwargs', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='name'), BinOp(left=Constant(value='Test'), op=Add(), right=Call(func=Attribute(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='name', ctx=Load()), attr='title', ctx=Load()), args=[], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value='-'), Constant(value='')], keywords=[]))], keywords=[])), Assign(targets=[Name(id='methods', ctx=Store())], value=DictComp(key=Attribute(value=Name(id='method', ctx=Load()), attr='__name__', ctx=Load()), value=Name(id='method', ctx=Load()), generators=[comprehension(target=Name(id='method', ctx=Store()), iter=GeneratorExp(elt=Call(func=Attribute(value=Name(id='test', ctx=Load()), attr='to_unittest_method', ctx=Load()), args=[], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]), generators=[comprehension(target=Name(id='group', ctx=Store()), iter=Name(id='groups', ctx=Load()), ifs=[], is_async=0), comprehension(target=Name(id='case', ctx=Store()), iter=Name(id='group', ctx=Load()), ifs=[], is_async=0), comprehension(target=Name(id='test', ctx=Store()), iter=Attribute(value=Name(id='case', ctx=Load()), attr='tests', ctx=Load()), ifs=[], is_async=0)]), ifs=[], is_async=0)])), Assign(targets=[Name(id='cls', ctx=Store())], value=Call(func=Name(id='type', ctx=Load()), args=[Name(id='name', ctx=Load()), Tuple(elts=[Attribute(value=Name(id='unittest', ctx=Load()), attr='TestCase', ctx=Load())], ctx=Load()), Name(id='methods', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='suppress', ctx=Load()), args=[Name(id='Exception', ctx=Load())], keywords=[]))], body=[Assign(targets=[Attribute(value=Name(id='cls', ctx=Load()), attr='__module__', ctx=Store())], value=Call(func=Name(id='_someone_save_us_the_module_of_the_caller', ctx=Load()), args=[], keywords=[]))]), Return(value=Name(id='cls', ctx=Load()))], decorator_list=[]), FunctionDef(name='_cases_in', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='paths', annotation=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='Path', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='path', ctx=Store()), iter=Name(id='paths', ctx=Load()), body=[For(target=Name(id='case', ctx=Store()), iter=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='loads', ctx=Load()), args=[Call(func=Attribute(value=Name(id='path', ctx=Load()), attr='read_text', ctx=Load()), args=[], keywords=[keyword(arg='encoding', value=Constant(value='utf-8'))])], keywords=[]), body=[Expr(value=Yield(value=Call(func=Attribute(value=Name(id='_Case', ctx=Load()), attr='from_dict', ctx=Load()), args=[Name(id='case', ctx=Load())], keywords=[keyword(arg='version', value=Name(id='self', ctx=Load())), keyword(arg='subject', value=Attribute(value=Name(id='path', ctx=Load()), attr='stem', ctx=Load())), keyword(arg='remotes', value=Attribute(value=Name(id='self', ctx=Load()), attr='_remotes', ctx=Load()))])))], orelse=[])], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='_Case', ctx=Load()), ctx=Load()))], decorator_list=[Name(id='frozen', ctx=Load())]), ClassDef(name='_Case', bases=[], keywords=[], body=[AnnAssign(target=Name(id='version', ctx=Store()), annotation=Name(id='Version', ctx=Load()), simple=1), AnnAssign(target=Name(id='subject', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='description', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='schema', ctx=Store()), annotation=BinOp(left=Subscript(value=Name(id='Mapping', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), op=BitOr(), right=Name(id='bool', ctx=Load())), simple=1), AnnAssign(target=Name(id='tests', ctx=Store()), annotation=Subscript(value=Name(id='list', ctx=Load()), slice=Name(id='_Test', ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='comment', ctx=Store()), annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None)), value=Constant(value=None), simple=1), FunctionDef(name='from_dict', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='data'), arg(arg='remotes')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='kwargs', ctx=Load())], keywords=[])), Assign(targets=[Name(id='tests', ctx=Store())], value=ListComp(elt=Call(func=Name(id='_Test', ctx=Load()), args=[], keywords=[keyword(arg='version', value=Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='version'), ctx=Load())), keyword(arg='subject', value=Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='subject'), ctx=Load())), keyword(arg='case_description', value=Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='description'), ctx=Load())), keyword(arg='schema', value=Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='schema'), ctx=Load())), keyword(arg='remotes', value=Name(id='remotes', ctx=Load())), keyword(value=Name(id='test', ctx=Load()))]), generators=[comprehension(target=Name(id='test', ctx=Store()), iter=Call(func=Attribute(value=Name(id='data', ctx=Load()), attr='pop', ctx=Load()), args=[Constant(value='tests')], keywords=[]), ifs=[], is_async=0)])), Return(value=Call(func=Name(id='cls', ctx=Load()), args=[], keywords=[keyword(arg='tests', value=Name(id='tests', ctx=Load())), keyword(value=Name(id='data', ctx=Load()))]))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='benchmark', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='runner', annotation=Attribute(value=Name(id='pyperf', ctx=Load()), attr='Runner', ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[For(target=Name(id='test', ctx=Store()), iter=Attribute(value=Name(id='self', ctx=Load()), attr='tests', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='runner', ctx=Load()), attr='bench_func', ctx=Load()), args=[Attribute(value=Name(id='test', ctx=Load()), attr='fully_qualified_name', ctx=Load()), Call(func=Name(id='partial', ctx=Load()), args=[Attribute(value=Name(id='test', ctx=Load()), attr='validate_ignoring_errors', ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))])], keywords=[]))], orelse=[])], decorator_list=[])], decorator_list=[Name(id='frozen', ctx=Load())]), ClassDef(name='_Test', bases=[], keywords=[], body=[AnnAssign(target=Name(id='version', ctx=Store()), annotation=Name(id='Version', ctx=Load()), simple=1), AnnAssign(target=Name(id='subject', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='case_description', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='description', ctx=Store()), annotation=Name(id='str', ctx=Load()), simple=1), AnnAssign(target=Name(id='data', ctx=Store()), annotation=Name(id='Any', ctx=Load()), simple=1), AnnAssign(target=Name(id='schema', ctx=Store()), annotation=BinOp(left=Subscript(value=Name(id='Mapping', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), op=BitOr(), right=Name(id='bool', ctx=Load())), simple=1), AnnAssign(target=Name(id='valid', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1), AnnAssign(target=Name(id='_remotes', ctx=Store()), annotation=Attribute(value=Attribute(value=Name(id='referencing', ctx=Load()), attr='jsonschema', ctx=Load()), attr='SchemaRegistry', ctx=Load()), simple=1), AnnAssign(target=Name(id='comment', ctx=Store()), annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None)), value=Constant(value=None), simple=1), FunctionDef(name='__repr__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=JoinedStr(values=[Constant(value='<Test '), FormattedValue(value=Attribute(value=Name(id='self', ctx=Load()), attr='fully_qualified_name', ctx=Load()), conversion=-1), Constant(value='>')]))], decorator_list=[]), FunctionDef(name='fully_qualified_name', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value=' > '), attr='join', ctx=Load()), args=[List(elts=[Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='version', ctx=Load()), attr='name', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='subject', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='case_description', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='description', ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='to_unittest_method', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='skip')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[Lambda(args=arguments(posonlyargs=[], args=[arg(arg='test')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Constant(value=None))]), body=[If(test=Attribute(value=Name(id='self', ctx=Load()), attr='valid', ctx=Load()), body=[FunctionDef(name='fn', args=arguments(posonlyargs=[], args=[arg(arg='this')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='validate', ctx=Load()), args=[], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[])], orelse=[FunctionDef(name='fn', args=arguments(posonlyargs=[], args=[arg(arg='this')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='this', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Attribute(value=Name(id='jsonschema', ctx=Load()), attr='ValidationError', ctx=Load())], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='validate', ctx=Load()), args=[], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]))])], decorator_list=[])]), Assign(targets=[Attribute(value=Name(id='fn', ctx=Load()), attr='__name__', ctx=Store())], value=Call(func=Attribute(value=Constant(value='_'), attr='join', ctx=Load()), args=[List(elts=[Constant(value='test'), Call(func=Attribute(value=Name(id='_DELIMITERS', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value='_'), Attribute(value=Name(id='self', ctx=Load()), attr='subject', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='_DELIMITERS', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value='_'), Attribute(value=Name(id='self', ctx=Load()), attr='case_description', ctx=Load())], keywords=[]), Call(func=Attribute(value=Name(id='_DELIMITERS', ctx=Load()), attr='sub', ctx=Load()), args=[Constant(value='_'), Attribute(value=Name(id='self', ctx=Load()), attr='description', ctx=Load())], keywords=[])], ctx=Load())], keywords=[])), Assign(targets=[Name(id='reason', ctx=Store())], value=Call(func=Name(id='skip', ctx=Load()), args=[Name(id='self', ctx=Load())], keywords=[])), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='reason', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='JSON_SCHEMA_DEBUG'), Constant(value='0')], keywords=[]), ops=[NotEq()], comparators=[Constant(value='0')])]), body=[Return(value=Name(id='fn', ctx=Load()))], orelse=[If(test=Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='JSON_SCHEMA_EXPECTED_FAILURES'), Constant(value='0')], keywords=[]), ops=[NotEq()], comparators=[Constant(value='0')]), body=[Return(value=Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='expectedFailure', ctx=Load()), args=[Name(id='fn', ctx=Load())], keywords=[]))], orelse=[Return(value=Call(func=Call(func=Attribute(value=Name(id='unittest', ctx=Load()), attr='skip', ctx=Load()), args=[Name(id='reason', ctx=Load())], keywords=[]), args=[Name(id='fn', ctx=Load())], keywords=[]))])])], decorator_list=[]), FunctionDef(name='validate', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='Validator')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='Validator', ctx=Load()), attr='check_schema', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='schema', ctx=Load())], keywords=[])), Assign(targets=[Name(id='validator', ctx=Store())], value=Call(func=Name(id='Validator', ctx=Load()), args=[], keywords=[keyword(arg='schema', value=Attribute(value=Name(id='self', ctx=Load()), attr='schema', ctx=Load())), keyword(arg='registry', value=Attribute(value=Name(id='self', ctx=Load()), attr='_remotes', ctx=Load())), keyword(value=Name(id='kwargs', ctx=Load()))])), If(test=Compare(left=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='environ', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='JSON_SCHEMA_DEBUG'), Constant(value='0')], keywords=[]), ops=[NotEq()], comparators=[Constant(value='0')]), body=[Expr(value=Call(func=Name(id='breakpoint', ctx=Load()), args=[], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='validate', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=Attribute(value=Name(id='self', ctx=Load()), attr='data', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='validate_ignoring_errors', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='Validator')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Name(id='suppress', ctx=Load()), args=[Attribute(value=Name(id='jsonschema', ctx=Load()), attr='ValidationError', ctx=Load())], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='validate', ctx=Load()), args=[], keywords=[keyword(arg='Validator', value=Name(id='Validator', ctx=Load()))]))])], decorator_list=[])], decorator_list=[Call(func=Name(id='frozen', ctx=Load()), args=[], keywords=[keyword(arg='repr', value=Constant(value=False))])]), FunctionDef(name='_someone_save_us_the_module_of_the_caller', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    The FQON of the module 2nd stack frames up from here.\n\n    This is intended to allow us to dynamically return test case classes that\n    are indistinguishable from being defined in the module that wants them.\n\n    Otherwise, trial will mis-print the FQON, and copy pasting it won't re-run\n    the class that really is running.\n\n    Save us all, this is all so so so so so terrible.\n    ")), Return(value=Subscript(value=Attribute(value=Call(func=Attribute(value=Name(id='sys', ctx=Load()), attr='_getframe', ctx=Load()), args=[Constant(value=2)], keywords=[]), attr='f_globals', ctx=Load()), slice=Constant(value='__name__'), ctx=Load()))], decorator_list=[])], type_ignores=[])