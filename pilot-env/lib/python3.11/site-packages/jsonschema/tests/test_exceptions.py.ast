Module(body=[ImportFrom(module='unittest', names=[alias(name='TestCase')], level=0), Import(names=[alias(name='textwrap')]), ImportFrom(module='jsonschema', names=[alias(name='exceptions')], level=0), ImportFrom(module='jsonschema.validators', names=[alias(name='_LATEST_VERSION')], level=0), ClassDef(name='TestBestMatch', bases=[Name(id='TestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='best_match_of', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='instance'), arg(arg='schema')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='errors', ctx=Store())], value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Name(id='_LATEST_VERSION', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[]), attr='iter_errors', ctx=Load()), args=[Name(id='instance', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='best', ctx=Store())], value=Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='best_match', ctx=Load()), args=[Call(func=Name(id='iter', ctx=Load()), args=[Name(id='errors', ctx=Load())], keywords=[])], keywords=[])), Assign(targets=[Name(id='reversed_best', ctx=Store())], value=Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='best_match', ctx=Load()), args=[Call(func=Name(id='reversed', ctx=Load()), args=[Name(id='errors', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Name(id='best', ctx=Load()), attr='_contents', ctx=Load()), args=[], keywords=[]), Call(func=Attribute(value=Name(id='reversed_best', ctx=Load()), attr='_contents', ctx=Load()), args=[], keywords=[]), JoinedStr(values=[Constant(value='No consistent best match!\nGot: '), FormattedValue(value=Name(id='best', ctx=Load()), conversion=-1), Constant(value='\n\nThen: '), FormattedValue(value=Name(id='reversed_best', ctx=Load()), conversion=-1)])], keywords=[])), Return(value=Name(id='best', ctx=Load()))], decorator_list=[]), FunctionDef(name='test_shallower_errors_are_better_matches', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='properties')], values=[Dict(keys=[Constant(value='foo')], values=[Dict(keys=[Constant(value='minProperties'), Constant(value='properties')], values=[Constant(value=2), Dict(keys=[Constant(value='bar')], values=[Dict(keys=[Constant(value='type')], values=[Constant(value='object')])])])])])), Assign(targets=[Name(id='best', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='best_match_of', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=Dict(keys=[Constant(value='foo')], values=[Dict(keys=[Constant(value='bar')], values=[List(elts=[], ctx=Load())])])), keyword(arg='schema', value=Name(id='schema', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='best', ctx=Load()), attr='validator', ctx=Load()), Constant(value='minProperties')], keywords=[]))], decorator_list=[]), FunctionDef(name='test_oneOf_and_anyOf_are_weak_matches', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        A property you *must* match is probably better than one you have to\n        match a part of.\n        ')), Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='minProperties'), Constant(value='anyOf'), Constant(value='oneOf')], values=[Constant(value=2), List(elts=[Dict(keys=[Constant(value='type')], values=[Constant(value='string')]), Dict(keys=[Constant(value='type')], values=[Constant(value='number')])], ctx=Load()), List(elts=[Dict(keys=[Constant(value='type')], values=[Constant(value='string')]), Dict(keys=[Constant(value='type')], values=[Constant(value='number')])], ctx=Load())])), Assign(targets=[Name(id='best', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='best_match_of', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=Dict(keys=[], values=[])), keyword(arg='schema', value=Name(id='schema', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='best', ctx=Load()), attr='validator', ctx=Load()), Constant(value='minProperties')], keywords=[]))], decorator_list=[]), FunctionDef(name='test_if_the_most_relevant_error_is_anyOf_it_is_traversed', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        If the most relevant error is an anyOf, then we traverse its context\n        and select the otherwise *least* relevant error, since in this case\n        that means the most specific, deep, error inside the instance.\n\n        I.e. since only one of the schemas must match, we look for the most\n        relevant one.\n        ')), Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='properties')], values=[Dict(keys=[Constant(value='foo')], values=[Dict(keys=[Constant(value='anyOf')], values=[List(elts=[Dict(keys=[Constant(value='type')], values=[Constant(value='string')]), Dict(keys=[Constant(value='properties')], values=[Dict(keys=[Constant(value='bar')], values=[Dict(keys=[Constant(value='type')], values=[Constant(value='array')])])])], ctx=Load())])])])), Assign(targets=[Name(id='best', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='best_match_of', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=Dict(keys=[Constant(value='foo')], values=[Dict(keys=[Constant(value='bar')], values=[Constant(value=12)])])), keyword(arg='schema', value=Name(id='schema', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='best', ctx=Load()), attr='validator_value', ctx=Load()), Constant(value='array')], keywords=[]))], decorator_list=[]), FunctionDef(name='test_no_anyOf_traversal_for_equally_relevant_errors', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        We don\'t traverse into an anyOf (as above) if all of its context errors\n        seem to be equally "wrong" against the instance.\n        ')), Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='anyOf')], values=[List(elts=[Dict(keys=[Constant(value='type')], values=[Constant(value='string')]), Dict(keys=[Constant(value='type')], values=[Constant(value='integer')]), Dict(keys=[Constant(value='type')], values=[Constant(value='object')])], ctx=Load())])), Assign(targets=[Name(id='best', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='best_match_of', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=List(elts=[], ctx=Load())), keyword(arg='schema', value=Name(id='schema', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='best', ctx=Load()), attr='validator', ctx=Load()), Constant(value='anyOf')], keywords=[]))], decorator_list=[]), FunctionDef(name='test_anyOf_traversal_for_single_equally_relevant_error', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        We *do* traverse anyOf with a single nested error, even though it is\n        vacuously equally relevant to itself.\n        ')), Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='anyOf')], values=[List(elts=[Dict(keys=[Constant(value='type')], values=[Constant(value='string')])], ctx=Load())])), Assign(targets=[Name(id='best', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='best_match_of', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=List(elts=[], ctx=Load())), keyword(arg='schema', value=Name(id='schema', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='best', ctx=Load()), attr='validator', ctx=Load()), Constant(value='type')], keywords=[]))], decorator_list=[]), FunctionDef(name='test_if_the_most_relevant_error_is_oneOf_it_is_traversed', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        If the most relevant error is an oneOf, then we traverse its context\n        and select the otherwise *least* relevant error, since in this case\n        that means the most specific, deep, error inside the instance.\n\n        I.e. since only one of the schemas must match, we look for the most\n        relevant one.\n        ')), Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='properties')], values=[Dict(keys=[Constant(value='foo')], values=[Dict(keys=[Constant(value='oneOf')], values=[List(elts=[Dict(keys=[Constant(value='type')], values=[Constant(value='string')]), Dict(keys=[Constant(value='properties')], values=[Dict(keys=[Constant(value='bar')], values=[Dict(keys=[Constant(value='type')], values=[Constant(value='array')])])])], ctx=Load())])])])), Assign(targets=[Name(id='best', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='best_match_of', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=Dict(keys=[Constant(value='foo')], values=[Dict(keys=[Constant(value='bar')], values=[Constant(value=12)])])), keyword(arg='schema', value=Name(id='schema', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='best', ctx=Load()), attr='validator_value', ctx=Load()), Constant(value='array')], keywords=[]))], decorator_list=[]), FunctionDef(name='test_no_oneOf_traversal_for_equally_relevant_errors', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        We don\'t traverse into an oneOf (as above) if all of its context errors\n        seem to be equally "wrong" against the instance.\n        ')), Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='oneOf')], values=[List(elts=[Dict(keys=[Constant(value='type')], values=[Constant(value='string')]), Dict(keys=[Constant(value='type')], values=[Constant(value='integer')]), Dict(keys=[Constant(value='type')], values=[Constant(value='object')])], ctx=Load())])), Assign(targets=[Name(id='best', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='best_match_of', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=List(elts=[], ctx=Load())), keyword(arg='schema', value=Name(id='schema', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='best', ctx=Load()), attr='validator', ctx=Load()), Constant(value='oneOf')], keywords=[]))], decorator_list=[]), FunctionDef(name='test_oneOf_traversal_for_single_equally_relevant_error', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        We *do* traverse oneOf with a single nested error, even though it is\n        vacuously equally relevant to itself.\n        ')), Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='oneOf')], values=[List(elts=[Dict(keys=[Constant(value='type')], values=[Constant(value='string')])], ctx=Load())])), Assign(targets=[Name(id='best', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='best_match_of', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=List(elts=[], ctx=Load())), keyword(arg='schema', value=Name(id='schema', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='best', ctx=Load()), attr='validator', ctx=Load()), Constant(value='type')], keywords=[]))], decorator_list=[]), FunctionDef(name='test_if_the_most_relevant_error_is_allOf_it_is_traversed', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Now, if the error is allOf, we traverse but select the *most* relevant\n        error from the context, because all schemas here must match anyways.\n        ')), Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='properties')], values=[Dict(keys=[Constant(value='foo')], values=[Dict(keys=[Constant(value='allOf')], values=[List(elts=[Dict(keys=[Constant(value='type')], values=[Constant(value='string')]), Dict(keys=[Constant(value='properties')], values=[Dict(keys=[Constant(value='bar')], values=[Dict(keys=[Constant(value='type')], values=[Constant(value='array')])])])], ctx=Load())])])])), Assign(targets=[Name(id='best', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='best_match_of', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=Dict(keys=[Constant(value='foo')], values=[Dict(keys=[Constant(value='bar')], values=[Constant(value=12)])])), keyword(arg='schema', value=Name(id='schema', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='best', ctx=Load()), attr='validator_value', ctx=Load()), Constant(value='string')], keywords=[]))], decorator_list=[]), FunctionDef(name='test_nested_context_for_oneOf', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        We traverse into nested contexts (a oneOf containing an error in a\n        nested oneOf here).\n        ')), Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='properties')], values=[Dict(keys=[Constant(value='foo')], values=[Dict(keys=[Constant(value='oneOf')], values=[List(elts=[Dict(keys=[Constant(value='type')], values=[Constant(value='string')]), Dict(keys=[Constant(value='oneOf')], values=[List(elts=[Dict(keys=[Constant(value='type')], values=[Constant(value='string')]), Dict(keys=[Constant(value='properties')], values=[Dict(keys=[Constant(value='bar')], values=[Dict(keys=[Constant(value='type')], values=[Constant(value='array')])])])], ctx=Load())])], ctx=Load())])])])), Assign(targets=[Name(id='best', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='best_match_of', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=Dict(keys=[Constant(value='foo')], values=[Dict(keys=[Constant(value='bar')], values=[Constant(value=12)])])), keyword(arg='schema', value=Name(id='schema', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='best', ctx=Load()), attr='validator_value', ctx=Load()), Constant(value='array')], keywords=[]))], decorator_list=[]), FunctionDef(name='test_it_prioritizes_matching_types', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='properties')], values=[Dict(keys=[Constant(value='foo')], values=[Dict(keys=[Constant(value='anyOf')], values=[List(elts=[Dict(keys=[Constant(value='type'), Constant(value='minItems')], values=[Constant(value='array'), Constant(value=2)]), Dict(keys=[Constant(value='type'), Constant(value='minLength')], values=[Constant(value='string'), Constant(value=10)])], ctx=Load())])])])), Assign(targets=[Name(id='best', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='best_match_of', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=Dict(keys=[Constant(value='foo')], values=[Constant(value='bar')])), keyword(arg='schema', value=Name(id='schema', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='best', ctx=Load()), attr='validator', ctx=Load()), Constant(value='minLength')], keywords=[])), Assign(targets=[Name(id='reordered', ctx=Store())], value=Dict(keys=[Constant(value='properties')], values=[Dict(keys=[Constant(value='foo')], values=[Dict(keys=[Constant(value='anyOf')], values=[List(elts=[Dict(keys=[Constant(value='type'), Constant(value='minLength')], values=[Constant(value='string'), Constant(value=10)]), Dict(keys=[Constant(value='type'), Constant(value='minItems')], values=[Constant(value='array'), Constant(value=2)])], ctx=Load())])])])), Assign(targets=[Name(id='best', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='best_match_of', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=Dict(keys=[Constant(value='foo')], values=[Constant(value='bar')])), keyword(arg='schema', value=Name(id='reordered', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='best', ctx=Load()), attr='validator', ctx=Load()), Constant(value='minLength')], keywords=[]))], decorator_list=[]), FunctionDef(name='test_it_prioritizes_matching_union_types', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='properties')], values=[Dict(keys=[Constant(value='foo')], values=[Dict(keys=[Constant(value='anyOf')], values=[List(elts=[Dict(keys=[Constant(value='type'), Constant(value='minItems')], values=[List(elts=[Constant(value='array'), Constant(value='object')], ctx=Load()), Constant(value=2)]), Dict(keys=[Constant(value='type'), Constant(value='minLength')], values=[List(elts=[Constant(value='integer'), Constant(value='string')], ctx=Load()), Constant(value=10)])], ctx=Load())])])])), Assign(targets=[Name(id='best', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='best_match_of', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=Dict(keys=[Constant(value='foo')], values=[Constant(value='bar')])), keyword(arg='schema', value=Name(id='schema', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='best', ctx=Load()), attr='validator', ctx=Load()), Constant(value='minLength')], keywords=[])), Assign(targets=[Name(id='reordered', ctx=Store())], value=Dict(keys=[Constant(value='properties')], values=[Dict(keys=[Constant(value='foo')], values=[Dict(keys=[Constant(value='anyOf')], values=[List(elts=[Dict(keys=[Constant(value='type'), Constant(value='minLength')], values=[Constant(value='string'), Constant(value=10)]), Dict(keys=[Constant(value='type'), Constant(value='minItems')], values=[Constant(value='array'), Constant(value=2)])], ctx=Load())])])])), Assign(targets=[Name(id='best', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='best_match_of', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=Dict(keys=[Constant(value='foo')], values=[Constant(value='bar')])), keyword(arg='schema', value=Name(id='reordered', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='best', ctx=Load()), attr='validator', ctx=Load()), Constant(value='minLength')], keywords=[]))], decorator_list=[]), FunctionDef(name='test_boolean_schemas', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='properties')], values=[Dict(keys=[Constant(value='foo')], values=[Constant(value=False)])])), Assign(targets=[Name(id='best', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='best_match_of', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=Dict(keys=[Constant(value='foo')], values=[Constant(value='bar')])), keyword(arg='schema', value=Name(id='schema', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsNone', ctx=Load()), args=[Attribute(value=Name(id='best', ctx=Load()), attr='validator', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_one_error', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='validator', ctx=Store())], value=Call(func=Name(id='_LATEST_VERSION', ctx=Load()), args=[Dict(keys=[Constant(value='minProperties')], values=[Constant(value=2)])], keywords=[])), Assign(targets=[Tuple(elts=[Name(id='error', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='iter_errors', ctx=Load()), args=[Dict(keys=[], values=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='best_match', ctx=Load()), args=[Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='iter_errors', ctx=Load()), args=[Dict(keys=[], values=[])], keywords=[])], keywords=[]), attr='validator', ctx=Load()), Constant(value='minProperties')], keywords=[]))], decorator_list=[]), FunctionDef(name='test_no_errors', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='validator', ctx=Store())], value=Call(func=Name(id='_LATEST_VERSION', ctx=Load()), args=[Dict(keys=[], values=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsNone', ctx=Load()), args=[Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='best_match', ctx=Load()), args=[Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='iter_errors', ctx=Load()), args=[Dict(keys=[], values=[])], keywords=[])], keywords=[])], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='TestByRelevance', bases=[Name(id='TestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='test_short_paths_are_better_matches', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='shallow', ctx=Store())], value=Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='ValidationError', ctx=Load()), args=[Constant(value='Oh no!')], keywords=[keyword(arg='path', value=List(elts=[Constant(value='baz')], ctx=Load()))])), Assign(targets=[Name(id='deep', ctx=Store())], value=Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='ValidationError', ctx=Load()), args=[Constant(value='Oh yes!')], keywords=[keyword(arg='path', value=List(elts=[Constant(value='foo'), Constant(value='bar')], ctx=Load()))])), Assign(targets=[Name(id='match', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[List(elts=[Name(id='shallow', ctx=Load()), Name(id='deep', ctx=Load())], ctx=Load())], keywords=[keyword(arg='key', value=Attribute(value=Name(id='exceptions', ctx=Load()), attr='relevance', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIs', ctx=Load()), args=[Name(id='match', ctx=Load()), Name(id='shallow', ctx=Load())], keywords=[])), Assign(targets=[Name(id='match', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[List(elts=[Name(id='deep', ctx=Load()), Name(id='shallow', ctx=Load())], ctx=Load())], keywords=[keyword(arg='key', value=Attribute(value=Name(id='exceptions', ctx=Load()), attr='relevance', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIs', ctx=Load()), args=[Name(id='match', ctx=Load()), Name(id='shallow', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_global_errors_are_even_better_matches', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='shallow', ctx=Store())], value=Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='ValidationError', ctx=Load()), args=[Constant(value='Oh no!')], keywords=[keyword(arg='path', value=List(elts=[], ctx=Load()))])), Assign(targets=[Name(id='deep', ctx=Store())], value=Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='ValidationError', ctx=Load()), args=[Constant(value='Oh yes!')], keywords=[keyword(arg='path', value=List(elts=[Constant(value='foo')], ctx=Load()))])), Assign(targets=[Name(id='errors', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[List(elts=[Name(id='shallow', ctx=Load()), Name(id='deep', ctx=Load())], ctx=Load())], keywords=[keyword(arg='key', value=Attribute(value=Name(id='exceptions', ctx=Load()), attr='relevance', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='list', ctx=Load()), args=[Attribute(value=Name(id='error', ctx=Load()), attr='path', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='error', ctx=Store()), iter=Name(id='errors', ctx=Load()), ifs=[], is_async=0)]), List(elts=[List(elts=[Constant(value='foo')], ctx=Load()), List(elts=[], ctx=Load())], ctx=Load())], keywords=[])), Assign(targets=[Name(id='errors', ctx=Store())], value=Call(func=Name(id='sorted', ctx=Load()), args=[List(elts=[Name(id='deep', ctx=Load()), Name(id='shallow', ctx=Load())], ctx=Load())], keywords=[keyword(arg='key', value=Attribute(value=Name(id='exceptions', ctx=Load()), attr='relevance', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[ListComp(elt=Call(func=Name(id='list', ctx=Load()), args=[Attribute(value=Name(id='error', ctx=Load()), attr='path', ctx=Load())], keywords=[]), generators=[comprehension(target=Name(id='error', ctx=Store()), iter=Name(id='errors', ctx=Load()), ifs=[], is_async=0)]), List(elts=[List(elts=[Constant(value='foo')], ctx=Load()), List(elts=[], ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_weak_keywords_are_lower_priority', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='weak', ctx=Store())], value=Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='ValidationError', ctx=Load()), args=[Constant(value='Oh no!')], keywords=[keyword(arg='path', value=List(elts=[], ctx=Load())), keyword(arg='validator', value=Constant(value='a'))])), Assign(targets=[Name(id='normal', ctx=Store())], value=Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='ValidationError', ctx=Load()), args=[Constant(value='Oh yes!')], keywords=[keyword(arg='path', value=List(elts=[], ctx=Load())), keyword(arg='validator', value=Constant(value='b'))])), Assign(targets=[Name(id='best_match', ctx=Store())], value=Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='by_relevance', ctx=Load()), args=[], keywords=[keyword(arg='weak', value=Constant(value='a'))])), Assign(targets=[Name(id='match', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[List(elts=[Name(id='weak', ctx=Load()), Name(id='normal', ctx=Load())], ctx=Load())], keywords=[keyword(arg='key', value=Name(id='best_match', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIs', ctx=Load()), args=[Name(id='match', ctx=Load()), Name(id='normal', ctx=Load())], keywords=[])), Assign(targets=[Name(id='match', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[List(elts=[Name(id='normal', ctx=Load()), Name(id='weak', ctx=Load())], ctx=Load())], keywords=[keyword(arg='key', value=Name(id='best_match', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIs', ctx=Load()), args=[Name(id='match', ctx=Load()), Name(id='normal', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_strong_keywords_are_higher_priority', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='weak', ctx=Store())], value=Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='ValidationError', ctx=Load()), args=[Constant(value='Oh no!')], keywords=[keyword(arg='path', value=List(elts=[], ctx=Load())), keyword(arg='validator', value=Constant(value='a'))])), Assign(targets=[Name(id='normal', ctx=Store())], value=Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='ValidationError', ctx=Load()), args=[Constant(value='Oh yes!')], keywords=[keyword(arg='path', value=List(elts=[], ctx=Load())), keyword(arg='validator', value=Constant(value='b'))])), Assign(targets=[Name(id='strong', ctx=Store())], value=Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='ValidationError', ctx=Load()), args=[Constant(value='Oh fine!')], keywords=[keyword(arg='path', value=List(elts=[], ctx=Load())), keyword(arg='validator', value=Constant(value='c'))])), Assign(targets=[Name(id='best_match', ctx=Store())], value=Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='by_relevance', ctx=Load()), args=[], keywords=[keyword(arg='weak', value=Constant(value='a')), keyword(arg='strong', value=Constant(value='c'))])), Assign(targets=[Name(id='match', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[List(elts=[Name(id='weak', ctx=Load()), Name(id='normal', ctx=Load()), Name(id='strong', ctx=Load())], ctx=Load())], keywords=[keyword(arg='key', value=Name(id='best_match', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIs', ctx=Load()), args=[Name(id='match', ctx=Load()), Name(id='strong', ctx=Load())], keywords=[])), Assign(targets=[Name(id='match', ctx=Store())], value=Call(func=Name(id='max', ctx=Load()), args=[List(elts=[Name(id='strong', ctx=Load()), Name(id='normal', ctx=Load()), Name(id='weak', ctx=Load())], ctx=Load())], keywords=[keyword(arg='key', value=Name(id='best_match', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIs', ctx=Load()), args=[Name(id='match', ctx=Load()), Name(id='strong', ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='TestErrorTree', bases=[Name(id='TestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='test_it_knows_how_many_total_errors_it_contains', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='errors', ctx=Store())], value=ListComp(elt=Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='ValidationError', ctx=Load()), args=[Constant(value='Something')], keywords=[keyword(arg='validator', value=Name(id='i', ctx=Load()))]), generators=[comprehension(target=Name(id='i', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=8)], keywords=[]), ifs=[], is_async=0)])), Assign(targets=[Name(id='tree', ctx=Store())], value=Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='ErrorTree', ctx=Load()), args=[Name(id='errors', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='tree', ctx=Load()), attr='total_errors', ctx=Load()), Constant(value=8)], keywords=[]))], decorator_list=[]), FunctionDef(name='test_it_contains_an_item_if_the_item_had_an_error', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='errors', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='ValidationError', ctx=Load()), args=[Constant(value='a message')], keywords=[keyword(arg='path', value=List(elts=[Constant(value='bar')], ctx=Load()))])], ctx=Load())), Assign(targets=[Name(id='tree', ctx=Store())], value=Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='ErrorTree', ctx=Load()), args=[Name(id='errors', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Constant(value='bar'), Name(id='tree', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_it_does_not_contain_an_item_if_the_item_had_no_error', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='errors', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='ValidationError', ctx=Load()), args=[Constant(value='a message')], keywords=[keyword(arg='path', value=List(elts=[Constant(value='bar')], ctx=Load()))])], ctx=Load())), Assign(targets=[Name(id='tree', ctx=Store())], value=Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='ErrorTree', ctx=Load()), args=[Name(id='errors', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertNotIn', ctx=Load()), args=[Constant(value='foo'), Name(id='tree', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_keywords_that_failed_appear_in_errors_dict', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='error', ctx=Store())], value=Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='ValidationError', ctx=Load()), args=[Constant(value='a message')], keywords=[keyword(arg='validator', value=Constant(value='foo'))])), Assign(targets=[Name(id='tree', ctx=Store())], value=Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='ErrorTree', ctx=Load()), args=[List(elts=[Name(id='error', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='tree', ctx=Load()), attr='errors', ctx=Load()), Dict(keys=[Constant(value='foo')], values=[Name(id='error', ctx=Load())])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_it_creates_a_child_tree_for_each_nested_path', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='errors', ctx=Store())], value=List(elts=[Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='ValidationError', ctx=Load()), args=[Constant(value='a bar message')], keywords=[keyword(arg='path', value=List(elts=[Constant(value='bar')], ctx=Load()))]), Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='ValidationError', ctx=Load()), args=[Constant(value='a bar -> 0 message')], keywords=[keyword(arg='path', value=List(elts=[Constant(value='bar'), Constant(value=0)], ctx=Load()))])], ctx=Load())), Assign(targets=[Name(id='tree', ctx=Store())], value=Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='ErrorTree', ctx=Load()), args=[Name(id='errors', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Constant(value=0), Subscript(value=Name(id='tree', ctx=Load()), slice=Constant(value='bar'), ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertNotIn', ctx=Load()), args=[Constant(value=1), Subscript(value=Name(id='tree', ctx=Load()), slice=Constant(value='bar'), ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_children_have_their_errors_dicts_built', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='e1', ctx=Store()), Name(id='e2', ctx=Store())], ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='ValidationError', ctx=Load()), args=[Constant(value='1')], keywords=[keyword(arg='validator', value=Constant(value='foo')), keyword(arg='path', value=List(elts=[Constant(value='bar'), Constant(value=0)], ctx=Load()))]), Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='ValidationError', ctx=Load()), args=[Constant(value='2')], keywords=[keyword(arg='validator', value=Constant(value='quux')), keyword(arg='path', value=List(elts=[Constant(value='bar'), Constant(value=0)], ctx=Load()))])], ctx=Load())), Assign(targets=[Name(id='tree', ctx=Store())], value=Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='ErrorTree', ctx=Load()), args=[List(elts=[Name(id='e1', ctx=Load()), Name(id='e2', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Subscript(value=Subscript(value=Name(id='tree', ctx=Load()), slice=Constant(value='bar'), ctx=Load()), slice=Constant(value=0), ctx=Load()), attr='errors', ctx=Load()), Dict(keys=[Constant(value='foo'), Constant(value='quux')], values=[Name(id='e1', ctx=Load()), Name(id='e2', ctx=Load())])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_multiple_errors_with_instance', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='e1', ctx=Store()), Name(id='e2', ctx=Store())], ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='ValidationError', ctx=Load()), args=[Constant(value='1')], keywords=[keyword(arg='validator', value=Constant(value='foo')), keyword(arg='path', value=List(elts=[Constant(value='bar'), Constant(value='bar2')], ctx=Load())), keyword(arg='instance', value=Constant(value='i1'))]), Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='ValidationError', ctx=Load()), args=[Constant(value='2')], keywords=[keyword(arg='validator', value=Constant(value='quux')), keyword(arg='path', value=List(elts=[Constant(value='foobar'), Constant(value=2)], ctx=Load())), keyword(arg='instance', value=Constant(value='i2'))])], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='ErrorTree', ctx=Load()), args=[List(elts=[Name(id='e1', ctx=Load()), Name(id='e2', ctx=Load())], ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_it_does_not_contain_subtrees_that_are_not_in_the_instance', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='error', ctx=Store())], value=Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='ValidationError', ctx=Load()), args=[Constant(value='123')], keywords=[keyword(arg='validator', value=Constant(value='foo')), keyword(arg='instance', value=List(elts=[], ctx=Load()))])), Assign(targets=[Name(id='tree', ctx=Store())], value=Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='ErrorTree', ctx=Load()), args=[List(elts=[Name(id='error', ctx=Load())], ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='IndexError', ctx=Load())], keywords=[]))], body=[Expr(value=Subscript(value=Name(id='tree', ctx=Load()), slice=Constant(value=0), ctx=Load()))])], decorator_list=[]), FunctionDef(name='test_if_its_in_the_tree_anyhow_it_does_not_raise_an_error', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        If a keyword refers to a path that isn't in the instance, the\n        tree still properly returns a subtree for that path.\n        ")), Assign(targets=[Name(id='error', ctx=Store())], value=Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='ValidationError', ctx=Load()), args=[Constant(value='a message')], keywords=[keyword(arg='validator', value=Constant(value='foo')), keyword(arg='instance', value=Dict(keys=[], values=[])), keyword(arg='path', value=List(elts=[Constant(value='foo')], ctx=Load()))])), Assign(targets=[Name(id='tree', ctx=Store())], value=Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='ErrorTree', ctx=Load()), args=[List(elts=[Name(id='error', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Subscript(value=Name(id='tree', ctx=Load()), slice=Constant(value='foo'), ctx=Load()), Attribute(value=Name(id='exceptions', ctx=Load()), attr='ErrorTree', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_repr_single', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='error', ctx=Store())], value=Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='ValidationError', ctx=Load()), args=[Constant(value='1')], keywords=[keyword(arg='validator', value=Constant(value='foo')), keyword(arg='path', value=List(elts=[Constant(value='bar'), Constant(value='bar2')], ctx=Load())), keyword(arg='instance', value=Constant(value='i1'))])), Assign(targets=[Name(id='tree', ctx=Store())], value=Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='ErrorTree', ctx=Load()), args=[List(elts=[Name(id='error', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='repr', ctx=Load()), args=[Name(id='tree', ctx=Load())], keywords=[]), Constant(value='<ErrorTree (1 total error)>')], keywords=[]))], decorator_list=[]), FunctionDef(name='test_repr_multiple', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='e1', ctx=Store()), Name(id='e2', ctx=Store())], ctx=Store())], value=Tuple(elts=[Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='ValidationError', ctx=Load()), args=[Constant(value='1')], keywords=[keyword(arg='validator', value=Constant(value='foo')), keyword(arg='path', value=List(elts=[Constant(value='bar'), Constant(value='bar2')], ctx=Load())), keyword(arg='instance', value=Constant(value='i1'))]), Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='ValidationError', ctx=Load()), args=[Constant(value='2')], keywords=[keyword(arg='validator', value=Constant(value='quux')), keyword(arg='path', value=List(elts=[Constant(value='foobar'), Constant(value=2)], ctx=Load())), keyword(arg='instance', value=Constant(value='i2'))])], ctx=Load())), Assign(targets=[Name(id='tree', ctx=Store())], value=Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='ErrorTree', ctx=Load()), args=[List(elts=[Name(id='e1', ctx=Load()), Name(id='e2', ctx=Load())], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='repr', ctx=Load()), args=[Name(id='tree', ctx=Load())], keywords=[]), Constant(value='<ErrorTree (2 total errors)>')], keywords=[]))], decorator_list=[]), FunctionDef(name='test_repr_empty', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='tree', ctx=Store())], value=Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='ErrorTree', ctx=Load()), args=[List(elts=[], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='repr', ctx=Load()), args=[Name(id='tree', ctx=Load())], keywords=[]), Constant(value='<ErrorTree (0 total errors)>')], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='TestErrorInitReprStr', bases=[Name(id='TestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='make_error', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Assign(targets=[Name(id='defaults', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[], keywords=[keyword(arg='message', value=Constant(value='hello')), keyword(arg='validator', value=Constant(value='type')), keyword(arg='validator_value', value=Constant(value='string')), keyword(arg='instance', value=Constant(value=5)), keyword(arg='schema', value=Dict(keys=[Constant(value='type')], values=[Constant(value='string')]))])), Expr(value=Call(func=Attribute(value=Name(id='defaults', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='kwargs', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='ValidationError', ctx=Load()), args=[], keywords=[keyword(value=Name(id='defaults', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='assertShows', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='expected')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Assign(targets=[Name(id='expected', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='textwrap', ctx=Load()), attr='dedent', ctx=Load()), args=[Name(id='expected', ctx=Load())], keywords=[]), attr='rstrip', ctx=Load()), args=[Constant(value='\n')], keywords=[])), Assign(targets=[Name(id='error', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='make_error', ctx=Load()), args=[], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))])), Assign(targets=[Tuple(elts=[Name(id='message_line', ctx=Store()), Name(id='_', ctx=Store()), Name(id='rest', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='str', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[]), attr='partition', ctx=Load()), args=[Constant(value='\n')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='message_line', ctx=Load()), Attribute(value=Name(id='error', ctx=Load()), attr='message', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='rest', ctx=Load()), Name(id='expected', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_it_calls_super_and_sets_args', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='error', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='make_error', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertGreater', ctx=Load()), args=[Call(func=Name(id='len', ctx=Load()), args=[Attribute(value=Name(id='error', ctx=Load()), attr='args', ctx=Load())], keywords=[]), Constant(value=1)], keywords=[]))], decorator_list=[]), FunctionDef(name='test_repr', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='repr', ctx=Load()), args=[Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='ValidationError', ctx=Load()), args=[], keywords=[keyword(arg='message', value=Constant(value='Hello!'))])], keywords=[]), Constant(value="<ValidationError: 'Hello!'>")], keywords=[]))], decorator_list=[]), FunctionDef(name='test_unset_error', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='error', ctx=Store())], value=Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='ValidationError', ctx=Load()), args=[Constant(value='message')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[]), Constant(value='message')], keywords=[])), Assign(targets=[Name(id='kwargs', ctx=Store())], value=Dict(keys=[Constant(value='validator'), Constant(value='validator_value'), Constant(value='instance'), Constant(value='schema')], values=[Constant(value='type'), Constant(value='string'), Constant(value=5), Dict(keys=[Constant(value='type')], values=[Constant(value='string')])])), For(target=Name(id='attr', ctx=Store()), iter=Name(id='kwargs', ctx=Load()), body=[Assign(targets=[Name(id='k', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[Name(id='kwargs', ctx=Load())], keywords=[])), Delete(targets=[Subscript(value=Name(id='k', ctx=Load()), slice=Name(id='attr', ctx=Load()), ctx=Del())]), Assign(targets=[Name(id='error', ctx=Store())], value=Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='ValidationError', ctx=Load()), args=[Constant(value='message')], keywords=[keyword(value=Name(id='k', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[]), Constant(value='message')], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='test_empty_paths', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertShows', ctx=Load()), args=[Constant(value="\n            Failed validating 'type' in schema:\n                {'type': 'string'}\n\n            On instance:\n                5\n            ")], keywords=[keyword(arg='path', value=List(elts=[], ctx=Load())), keyword(arg='schema_path', value=List(elts=[], ctx=Load()))]))], decorator_list=[]), FunctionDef(name='test_one_item_paths', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertShows', ctx=Load()), args=[Constant(value="\n            Failed validating 'type' in schema:\n                {'type': 'string'}\n\n            On instance[0]:\n                5\n            ")], keywords=[keyword(arg='path', value=List(elts=[Constant(value=0)], ctx=Load())), keyword(arg='schema_path', value=List(elts=[Constant(value='items')], ctx=Load()))]))], decorator_list=[]), FunctionDef(name='test_multiple_item_paths', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertShows', ctx=Load()), args=[Constant(value="\n            Failed validating 'type' in schema['items'][0]:\n                {'type': 'string'}\n\n            On instance[0]['a']:\n                5\n            ")], keywords=[keyword(arg='path', value=List(elts=[Constant(value=0), Constant(value='a')], ctx=Load())), keyword(arg='schema_path', value=List(elts=[Constant(value='items'), Constant(value=0), Constant(value=1)], ctx=Load()))]))], decorator_list=[]), FunctionDef(name='test_uses_pprint', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertShows', ctx=Load()), args=[Constant(value="\n            Failed validating 'maxLength' in schema:\n                {0: 0,\n                 1: 1,\n                 2: 2,\n                 3: 3,\n                 4: 4,\n                 5: 5,\n                 6: 6,\n                 7: 7,\n                 8: 8,\n                 9: 9,\n                 10: 10,\n                 11: 11,\n                 12: 12,\n                 13: 13,\n                 14: 14,\n                 15: 15,\n                 16: 16,\n                 17: 17,\n                 18: 18,\n                 19: 19}\n\n            On instance:\n                [0,\n                 1,\n                 2,\n                 3,\n                 4,\n                 5,\n                 6,\n                 7,\n                 8,\n                 9,\n                 10,\n                 11,\n                 12,\n                 13,\n                 14,\n                 15,\n                 16,\n                 17,\n                 18,\n                 19,\n                 20,\n                 21,\n                 22,\n                 23,\n                 24]\n            ")], keywords=[keyword(arg='instance', value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Constant(value=25)], keywords=[])], keywords=[])), keyword(arg='schema', value=Call(func=Name(id='dict', ctx=Load()), args=[Call(func=Name(id='zip', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[Constant(value=20)], keywords=[]), Call(func=Name(id='range', ctx=Load()), args=[Constant(value=20)], keywords=[])], keywords=[])], keywords=[])), keyword(arg='validator', value=Constant(value='maxLength'))]))], decorator_list=[]), FunctionDef(name='test_str_works_with_instances_having_overriden_eq_operator', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Check for #164 which rendered exceptions unusable when a\n        `ValidationError` involved instances with an `__eq__` method\n        that returned truthy values.\n        ')), ClassDef(name='DontEQMeBro', bases=[], keywords=[], body=[FunctionDef(name='__eq__', args=arguments(posonlyargs=[], args=[arg(arg='this'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Constant(value="Don't!")], keywords=[]))], decorator_list=[]), FunctionDef(name='__ne__', args=arguments(posonlyargs=[], args=[arg(arg='this'), arg(arg='other')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='fail', ctx=Load()), args=[Constant(value="Don't!")], keywords=[]))], decorator_list=[])], decorator_list=[]), Assign(targets=[Name(id='instance', ctx=Store())], value=Call(func=Name(id='DontEQMeBro', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='error', ctx=Store())], value=Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='ValidationError', ctx=Load()), args=[Constant(value='a message')], keywords=[keyword(arg='validator', value=Constant(value='foo')), keyword(arg='instance', value=Name(id='instance', ctx=Load())), keyword(arg='validator_value', value=Constant(value='some')), keyword(arg='schema', value=Constant(value='schema'))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Call(func=Name(id='repr', ctx=Load()), args=[Name(id='instance', ctx=Load())], keywords=[]), Call(func=Name(id='str', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='TestHashable', bases=[Name(id='TestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='test_hashable', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Name(id='set', ctx=Load()), args=[List(elts=[Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='ValidationError', ctx=Load()), args=[Constant(value='')], keywords=[])], ctx=Load())], keywords=[])), Expr(value=Call(func=Name(id='set', ctx=Load()), args=[List(elts=[Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='SchemaError', ctx=Load()), args=[Constant(value='')], keywords=[])], ctx=Load())], keywords=[]))], decorator_list=[])], decorator_list=[])], type_ignores=[])