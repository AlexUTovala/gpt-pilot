Module(body=[ImportFrom(module='contextlib', names=[alias(name='contextmanager')], level=0), ImportFrom(module='io', names=[alias(name='BytesIO')], level=0), ImportFrom(module='unittest', names=[alias(name='TestCase'), alias(name='mock')], level=0), Import(names=[alias(name='importlib.metadata')]), Import(names=[alias(name='json')]), Import(names=[alias(name='subprocess')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='urllib.request')]), Import(names=[alias(name='referencing.exceptions')]), ImportFrom(module='jsonschema', names=[alias(name='FormatChecker'), alias(name='exceptions'), alias(name='protocols'), alias(name='validators')], level=0), ClassDef(name='TestDeprecations', bases=[Name(id='TestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='test_version', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        As of v4.0.0, __version__ is deprecated in favor of importlib.metadata.\n        ')), Assign(targets=[Name(id='message', ctx=Store())], value=Constant(value='Accessing jsonschema.__version__ is deprecated')), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertWarnsRegex', ctx=Load()), args=[Name(id='DeprecationWarning', ctx=Load()), Name(id='message', ctx=Load())], keywords=[]), optional_vars=Name(id='w', ctx=Store()))], body=[ImportFrom(module='jsonschema', names=[alias(name='__version__')], level=0)]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='__version__', ctx=Load()), Call(func=Attribute(value=Attribute(value=Name(id='importlib', ctx=Load()), attr='metadata', ctx=Load()), attr='version', ctx=Load()), args=[Constant(value='jsonschema')], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='w', ctx=Load()), attr='filename', ctx=Load()), Name(id='__file__', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_validators_ErrorTree', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        As of v4.0.0, importing ErrorTree from jsonschema.validators is\n        deprecated in favor of doing so from jsonschema.exceptions.\n        ')), Assign(targets=[Name(id='message', ctx=Store())], value=Constant(value='Importing ErrorTree from jsonschema.validators is ')), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertWarnsRegex', ctx=Load()), args=[Name(id='DeprecationWarning', ctx=Load()), Name(id='message', ctx=Load())], keywords=[]), optional_vars=Name(id='w', ctx=Store()))], body=[ImportFrom(module='jsonschema.validators', names=[alias(name='ErrorTree')], level=0)]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='ErrorTree', ctx=Load()), Attribute(value=Name(id='exceptions', ctx=Load()), attr='ErrorTree', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='w', ctx=Load()), attr='filename', ctx=Load()), Name(id='__file__', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_import_ErrorTree', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        As of v4.18.0, importing ErrorTree from the package root is\n        deprecated in favor of doing so from jsonschema.exceptions.\n        ')), Assign(targets=[Name(id='message', ctx=Store())], value=Constant(value='Importing ErrorTree directly from the jsonschema package ')), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertWarnsRegex', ctx=Load()), args=[Name(id='DeprecationWarning', ctx=Load()), Name(id='message', ctx=Load())], keywords=[]), optional_vars=Name(id='w', ctx=Store()))], body=[ImportFrom(module='jsonschema', names=[alias(name='ErrorTree')], level=0)]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='ErrorTree', ctx=Load()), Attribute(value=Name(id='exceptions', ctx=Load()), attr='ErrorTree', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='w', ctx=Load()), attr='filename', ctx=Load()), Name(id='__file__', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_import_FormatError', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        As of v4.18.0, importing FormatError from the package root is\n        deprecated in favor of doing so from jsonschema.exceptions.\n        ')), Assign(targets=[Name(id='message', ctx=Store())], value=Constant(value='Importing FormatError directly from the jsonschema package ')), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertWarnsRegex', ctx=Load()), args=[Name(id='DeprecationWarning', ctx=Load()), Name(id='message', ctx=Load())], keywords=[]), optional_vars=Name(id='w', ctx=Store()))], body=[ImportFrom(module='jsonschema', names=[alias(name='FormatError')], level=0)]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='FormatError', ctx=Load()), Attribute(value=Name(id='exceptions', ctx=Load()), attr='FormatError', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='w', ctx=Load()), attr='filename', ctx=Load()), Name(id='__file__', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_import_Validator', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        As of v4.19.0, importing Validator from the package root is\n        deprecated in favor of doing so from jsonschema.protocols.\n        ')), Assign(targets=[Name(id='message', ctx=Store())], value=Constant(value='Importing Validator directly from the jsonschema package ')), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertWarnsRegex', ctx=Load()), args=[Name(id='DeprecationWarning', ctx=Load()), Name(id='message', ctx=Load())], keywords=[]), optional_vars=Name(id='w', ctx=Store()))], body=[ImportFrom(module='jsonschema', names=[alias(name='Validator')], level=0)]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='Validator', ctx=Load()), Attribute(value=Name(id='protocols', ctx=Load()), attr='Validator', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='w', ctx=Load()), attr='filename', ctx=Load()), Name(id='__file__', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_validators_validators', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        As of v4.0.0, accessing jsonschema.validators.validators is\n        deprecated.\n        ')), Assign(targets=[Name(id='message', ctx=Store())], value=Constant(value='Accessing jsonschema.validators.validators is deprecated')), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertWarnsRegex', ctx=Load()), args=[Name(id='DeprecationWarning', ctx=Load()), Name(id='message', ctx=Load())], keywords=[]), optional_vars=Name(id='w', ctx=Store()))], body=[Assign(targets=[Name(id='value', ctx=Store())], value=Attribute(value=Name(id='validators', ctx=Load()), attr='validators', ctx=Load()))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='value', ctx=Load()), Attribute(value=Name(id='validators', ctx=Load()), attr='_VALIDATORS', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='w', ctx=Load()), attr='filename', ctx=Load()), Name(id='__file__', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_validators_meta_schemas', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        As of v4.0.0, accessing jsonschema.validators.meta_schemas is\n        deprecated.\n        ')), Assign(targets=[Name(id='message', ctx=Store())], value=Constant(value='Accessing jsonschema.validators.meta_schemas is deprecated')), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertWarnsRegex', ctx=Load()), args=[Name(id='DeprecationWarning', ctx=Load()), Name(id='message', ctx=Load())], keywords=[]), optional_vars=Name(id='w', ctx=Store()))], body=[Assign(targets=[Name(id='value', ctx=Store())], value=Attribute(value=Name(id='validators', ctx=Load()), attr='meta_schemas', ctx=Load()))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='value', ctx=Load()), Attribute(value=Name(id='validators', ctx=Load()), attr='_META_SCHEMAS', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='w', ctx=Load()), attr='filename', ctx=Load()), Name(id='__file__', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_RefResolver_in_scope', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        As of v4.0.0, RefResolver.in_scope is deprecated.\n        ')), Assign(targets=[Name(id='resolver', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='validators', ctx=Load()), attr='_RefResolver', ctx=Load()), attr='from_schema', ctx=Load()), args=[Dict(keys=[], values=[])], keywords=[])), Assign(targets=[Name(id='message', ctx=Store())], value=Constant(value='jsonschema.RefResolver.in_scope is deprecated ')), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertWarnsRegex', ctx=Load()), args=[Name(id='DeprecationWarning', ctx=Load()), Name(id='message', ctx=Load())], keywords=[]), optional_vars=Name(id='w', ctx=Store()))], body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='resolver', ctx=Load()), attr='in_scope', ctx=Load()), args=[Constant(value='foo')], keywords=[]))], body=[Pass()])]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='w', ctx=Load()), attr='filename', ctx=Load()), Name(id='__file__', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_Validator_is_valid_two_arguments', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        As of v4.0.0, calling is_valid with two arguments (to provide a\n        different schema) is deprecated.\n        ')), Assign(targets=[Name(id='validator', ctx=Store())], value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft7Validator', ctx=Load()), args=[Dict(keys=[], values=[])], keywords=[])), Assign(targets=[Name(id='message', ctx=Store())], value=Constant(value='Passing a schema to Validator.is_valid is deprecated ')), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertWarnsRegex', ctx=Load()), args=[Name(id='DeprecationWarning', ctx=Load()), Name(id='message', ctx=Load())], keywords=[]), optional_vars=Name(id='w', ctx=Store()))], body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='is_valid', ctx=Load()), args=[Constant(value='foo'), Dict(keys=[Constant(value='type')], values=[Constant(value='number')])], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertFalse', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='w', ctx=Load()), attr='filename', ctx=Load()), Name(id='__file__', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_Validator_iter_errors_two_arguments', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        As of v4.0.0, calling iter_errors with two arguments (to provide a\n        different schema) is deprecated.\n        ')), Assign(targets=[Name(id='validator', ctx=Store())], value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft7Validator', ctx=Load()), args=[Dict(keys=[], values=[])], keywords=[])), Assign(targets=[Name(id='message', ctx=Store())], value=Constant(value='Passing a schema to Validator.iter_errors is deprecated ')), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertWarnsRegex', ctx=Load()), args=[Name(id='DeprecationWarning', ctx=Load()), Name(id='message', ctx=Load())], keywords=[]), optional_vars=Name(id='w', ctx=Store()))], body=[Assign(targets=[Tuple(elts=[Name(id='error', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='iter_errors', ctx=Load()), args=[Constant(value='foo'), Dict(keys=[Constant(value='type')], values=[Constant(value='number')])], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='error', ctx=Load()), attr='validator', ctx=Load()), Constant(value='type')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='w', ctx=Load()), attr='filename', ctx=Load()), Name(id='__file__', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_Validator_resolver', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        As of v4.18.0, accessing Validator.resolver is deprecated.\n        ')), Assign(targets=[Name(id='validator', ctx=Store())], value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft7Validator', ctx=Load()), args=[Dict(keys=[], values=[])], keywords=[])), Assign(targets=[Name(id='message', ctx=Store())], value=Constant(value='Accessing Draft7Validator.resolver is ')), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertWarnsRegex', ctx=Load()), args=[Name(id='DeprecationWarning', ctx=Load()), Name(id='message', ctx=Load())], keywords=[]), optional_vars=Name(id='w', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Attribute(value=Name(id='validator', ctx=Load()), attr='resolver', ctx=Load()), Attribute(value=Name(id='validators', ctx=Load()), attr='_RefResolver', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='w', ctx=Load()), attr='filename', ctx=Load()), Name(id='__file__', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_RefResolver', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        As of v4.18.0, RefResolver is fully deprecated.\n        ')), Assign(targets=[Name(id='message', ctx=Store())], value=Constant(value='jsonschema.RefResolver is deprecated')), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertWarnsRegex', ctx=Load()), args=[Name(id='DeprecationWarning', ctx=Load()), Name(id='message', ctx=Load())], keywords=[]), optional_vars=Name(id='w', ctx=Store()))], body=[ImportFrom(module='jsonschema', names=[alias(name='RefResolver')], level=0)]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='w', ctx=Load()), attr='filename', ctx=Load()), Name(id='__file__', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertWarnsRegex', ctx=Load()), args=[Name(id='DeprecationWarning', ctx=Load()), Name(id='message', ctx=Load())], keywords=[]), optional_vars=Name(id='w', ctx=Store()))], body=[ImportFrom(module='jsonschema.validators', names=[alias(name='RefResolver')], level=0)]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='w', ctx=Load()), attr='filename', ctx=Load()), Name(id='__file__', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_RefResolutionError', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        As of v4.18.0, RefResolutionError is deprecated in favor of directly\n        catching errors from the referencing library.\n        ')), Assign(targets=[Name(id='message', ctx=Store())], value=Constant(value='jsonschema.exceptions.RefResolutionError is deprecated')), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertWarnsRegex', ctx=Load()), args=[Name(id='DeprecationWarning', ctx=Load()), Name(id='message', ctx=Load())], keywords=[]), optional_vars=Name(id='w', ctx=Store()))], body=[ImportFrom(module='jsonschema', names=[alias(name='RefResolutionError')], level=0)]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='RefResolutionError', ctx=Load()), Attribute(value=Name(id='exceptions', ctx=Load()), attr='_RefResolutionError', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='w', ctx=Load()), attr='filename', ctx=Load()), Name(id='__file__', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertWarnsRegex', ctx=Load()), args=[Name(id='DeprecationWarning', ctx=Load()), Name(id='message', ctx=Load())], keywords=[]), optional_vars=Name(id='w', ctx=Store()))], body=[ImportFrom(module='jsonschema.exceptions', names=[alias(name='RefResolutionError')], level=0)]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='RefResolutionError', ctx=Load()), Attribute(value=Name(id='exceptions', ctx=Load()), attr='_RefResolutionError', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='w', ctx=Load()), attr='filename', ctx=Load()), Name(id='__file__', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_catching_Unresolvable_directly', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        This behavior is the intended behavior (i.e. it\'s not deprecated), but\n        given we do "tricksy" things in the iterim to wrap exceptions in a\n        multiple inheritance subclass, we need to be extra sure it works and\n        stays working.\n        ')), Assign(targets=[Name(id='validator', ctx=Store())], value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft202012Validator', ctx=Load()), args=[Dict(keys=[Constant(value='$ref')], values=[Constant(value='urn:nothing')])], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='referencing', ctx=Load()), attr='exceptions', ctx=Load()), attr='Unresolvable', ctx=Load())], keywords=[]), optional_vars=Name(id='e', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='validate', ctx=Load()), args=[Constant(value=12)], keywords=[]))]), Assign(targets=[Name(id='expected', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='referencing', ctx=Load()), attr='exceptions', ctx=Load()), attr='Unresolvable', ctx=Load()), args=[], keywords=[keyword(arg='ref', value=Constant(value='urn:nothing'))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Tuple(elts=[Attribute(value=Name(id='e', ctx=Load()), attr='exception', ctx=Load()), Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='e', ctx=Load()), attr='exception', ctx=Load())], keywords=[])], ctx=Load()), Tuple(elts=[Name(id='expected', ctx=Load()), Constant(value='Unresolvable: urn:nothing')], ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_catching_Unresolvable_via_RefResolutionError', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Until RefResolutionError is removed, it is still possible to catch\n        exceptions from reference resolution using it, even though they may\n        have been raised by referencing.\n        ')), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertWarns', ctx=Load()), args=[Name(id='DeprecationWarning', ctx=Load())], keywords=[]))], body=[ImportFrom(module='jsonschema', names=[alias(name='RefResolutionError')], level=0)]), Assign(targets=[Name(id='validator', ctx=Store())], value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft202012Validator', ctx=Load()), args=[Dict(keys=[Constant(value='$ref')], values=[Constant(value='urn:nothing')])], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='referencing', ctx=Load()), attr='exceptions', ctx=Load()), attr='Unresolvable', ctx=Load())], keywords=[]), optional_vars=Name(id='u', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='validate', ctx=Load()), args=[Constant(value=12)], keywords=[]))]), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='RefResolutionError', ctx=Load())], keywords=[]), optional_vars=Name(id='e', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='validate', ctx=Load()), args=[Constant(value=12)], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Tuple(elts=[Attribute(value=Name(id='e', ctx=Load()), attr='exception', ctx=Load()), Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='e', ctx=Load()), attr='exception', ctx=Load())], keywords=[])], ctx=Load()), Tuple(elts=[Attribute(value=Name(id='u', ctx=Load()), attr='exception', ctx=Load()), Constant(value='Unresolvable: urn:nothing')], ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_WrappedReferencingError_hashability', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Ensure the wrapped referencing errors are hashable when possible.\n        ')), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertWarns', ctx=Load()), args=[Name(id='DeprecationWarning', ctx=Load())], keywords=[]))], body=[ImportFrom(module='jsonschema', names=[alias(name='RefResolutionError')], level=0)]), Assign(targets=[Name(id='validator', ctx=Store())], value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft202012Validator', ctx=Load()), args=[Dict(keys=[Constant(value='$ref')], values=[Constant(value='urn:nothing')])], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='referencing', ctx=Load()), attr='exceptions', ctx=Load()), attr='Unresolvable', ctx=Load())], keywords=[]), optional_vars=Name(id='u', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='validate', ctx=Load()), args=[Constant(value=12)], keywords=[]))]), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='RefResolutionError', ctx=Load())], keywords=[]), optional_vars=Name(id='e', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='validate', ctx=Load()), args=[Constant(value=12)], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Attribute(value=Name(id='e', ctx=Load()), attr='exception', ctx=Load()), Set(elts=[Attribute(value=Name(id='u', ctx=Load()), attr='exception', ctx=Load())])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Attribute(value=Name(id='u', ctx=Load()), attr='exception', ctx=Load()), Set(elts=[Attribute(value=Name(id='e', ctx=Load()), attr='exception', ctx=Load())])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_Validator_subclassing', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        As of v4.12.0, subclassing a validator class produces an explicit\n        deprecation warning.\n\n        This was never intended to be public API (and some comments over the\n        years in issues said so, but obviously that's not a great way to make\n        sure it's followed).\n\n        A future version will explicitly raise an error.\n        ")), Assign(targets=[Name(id='message', ctx=Store())], value=Constant(value='Subclassing validator classes is ')), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertWarnsRegex', ctx=Load()), args=[Name(id='DeprecationWarning', ctx=Load()), Name(id='message', ctx=Load())], keywords=[]), optional_vars=Name(id='w', ctx=Store()))], body=[ClassDef(name='Subclass', bases=[Attribute(value=Name(id='validators', ctx=Load()), attr='Draft202012Validator', ctx=Load())], keywords=[], body=[Pass()], decorator_list=[])]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='w', ctx=Load()), attr='filename', ctx=Load()), Name(id='__file__', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertWarnsRegex', ctx=Load()), args=[Name(id='DeprecationWarning', ctx=Load()), Name(id='message', ctx=Load())], keywords=[]), optional_vars=Name(id='w', ctx=Store()))], body=[ClassDef(name='AnotherSubclass', bases=[Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='create', ctx=Load()), args=[], keywords=[keyword(arg='meta_schema', value=Dict(keys=[], values=[]))])], keywords=[], body=[Pass()], decorator_list=[])])], decorator_list=[]), FunctionDef(name='test_FormatChecker_cls_checks', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        As of v4.14.0, FormatChecker.cls_checks is deprecated without\n        replacement.\n        ')), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='addCleanup', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='FormatChecker', ctx=Load()), attr='checkers', ctx=Load()), attr='pop', ctx=Load()), Constant(value='boom'), Constant(value=None)], keywords=[])), Assign(targets=[Name(id='message', ctx=Store())], value=Constant(value='FormatChecker.cls_checks ')), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertWarnsRegex', ctx=Load()), args=[Name(id='DeprecationWarning', ctx=Load()), Name(id='message', ctx=Load())], keywords=[]), optional_vars=Name(id='w', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='FormatChecker', ctx=Load()), attr='cls_checks', ctx=Load()), args=[Constant(value='boom')], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='w', ctx=Load()), attr='filename', ctx=Load()), Name(id='__file__', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_draftN_format_checker', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        As of v4.16.0, accessing jsonschema.draftn_format_checker is deprecated\n        in favor of Validator.FORMAT_CHECKER.\n        ')), Assign(targets=[Name(id='message', ctx=Store())], value=Constant(value='Accessing jsonschema.draft202012_format_checker is ')), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertWarnsRegex', ctx=Load()), args=[Name(id='DeprecationWarning', ctx=Load()), Name(id='message', ctx=Load())], keywords=[]), optional_vars=Name(id='w', ctx=Store()))], body=[ImportFrom(module='jsonschema', names=[alias(name='draft202012_format_checker')], level=0)]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIs', ctx=Load()), args=[Name(id='draft202012_format_checker', ctx=Load()), Attribute(value=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft202012Validator', ctx=Load()), attr='FORMAT_CHECKER', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='w', ctx=Load()), attr='filename', ctx=Load()), Name(id='__file__', ctx=Load())], keywords=[])), Assign(targets=[Name(id='message', ctx=Store())], value=Constant(value='Accessing jsonschema.draft201909_format_checker is ')), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertWarnsRegex', ctx=Load()), args=[Name(id='DeprecationWarning', ctx=Load()), Name(id='message', ctx=Load())], keywords=[]), optional_vars=Name(id='w', ctx=Store()))], body=[ImportFrom(module='jsonschema', names=[alias(name='draft201909_format_checker')], level=0)]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIs', ctx=Load()), args=[Name(id='draft201909_format_checker', ctx=Load()), Attribute(value=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft201909Validator', ctx=Load()), attr='FORMAT_CHECKER', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='w', ctx=Load()), attr='filename', ctx=Load()), Name(id='__file__', ctx=Load())], keywords=[])), Assign(targets=[Name(id='message', ctx=Store())], value=Constant(value='Accessing jsonschema.draft7_format_checker is ')), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertWarnsRegex', ctx=Load()), args=[Name(id='DeprecationWarning', ctx=Load()), Name(id='message', ctx=Load())], keywords=[]), optional_vars=Name(id='w', ctx=Store()))], body=[ImportFrom(module='jsonschema', names=[alias(name='draft7_format_checker')], level=0)]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIs', ctx=Load()), args=[Name(id='draft7_format_checker', ctx=Load()), Attribute(value=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft7Validator', ctx=Load()), attr='FORMAT_CHECKER', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='w', ctx=Load()), attr='filename', ctx=Load()), Name(id='__file__', ctx=Load())], keywords=[])), Assign(targets=[Name(id='message', ctx=Store())], value=Constant(value='Accessing jsonschema.draft6_format_checker is ')), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertWarnsRegex', ctx=Load()), args=[Name(id='DeprecationWarning', ctx=Load()), Name(id='message', ctx=Load())], keywords=[]), optional_vars=Name(id='w', ctx=Store()))], body=[ImportFrom(module='jsonschema', names=[alias(name='draft6_format_checker')], level=0)]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIs', ctx=Load()), args=[Name(id='draft6_format_checker', ctx=Load()), Attribute(value=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft6Validator', ctx=Load()), attr='FORMAT_CHECKER', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='w', ctx=Load()), attr='filename', ctx=Load()), Name(id='__file__', ctx=Load())], keywords=[])), Assign(targets=[Name(id='message', ctx=Store())], value=Constant(value='Accessing jsonschema.draft4_format_checker is ')), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertWarnsRegex', ctx=Load()), args=[Name(id='DeprecationWarning', ctx=Load()), Name(id='message', ctx=Load())], keywords=[]), optional_vars=Name(id='w', ctx=Store()))], body=[ImportFrom(module='jsonschema', names=[alias(name='draft4_format_checker')], level=0)]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIs', ctx=Load()), args=[Name(id='draft4_format_checker', ctx=Load()), Attribute(value=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft4Validator', ctx=Load()), attr='FORMAT_CHECKER', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='w', ctx=Load()), attr='filename', ctx=Load()), Name(id='__file__', ctx=Load())], keywords=[])), Assign(targets=[Name(id='message', ctx=Store())], value=Constant(value='Accessing jsonschema.draft3_format_checker is ')), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertWarnsRegex', ctx=Load()), args=[Name(id='DeprecationWarning', ctx=Load()), Name(id='message', ctx=Load())], keywords=[]), optional_vars=Name(id='w', ctx=Store()))], body=[ImportFrom(module='jsonschema', names=[alias(name='draft3_format_checker')], level=0)]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIs', ctx=Load()), args=[Name(id='draft3_format_checker', ctx=Load()), Attribute(value=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft3Validator', ctx=Load()), attr='FORMAT_CHECKER', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='w', ctx=Load()), attr='filename', ctx=Load()), Name(id='__file__', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='ImportError', ctx=Load())], keywords=[]))], body=[ImportFrom(module='jsonschema', names=[alias(name='draft1234_format_checker')], level=0)])], decorator_list=[]), FunctionDef(name='test_import_cli', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        As of v4.17.0, importing jsonschema.cli is deprecated.\n        ')), Assign(targets=[Name(id='message', ctx=Store())], value=Constant(value='The jsonschema CLI is deprecated and will be removed ')), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertWarnsRegex', ctx=Load()), args=[Name(id='DeprecationWarning', ctx=Load()), Name(id='message', ctx=Load())], keywords=[]), optional_vars=Name(id='w', ctx=Store()))], body=[Import(names=[alias(name='jsonschema.cli')]), Expr(value=Call(func=Attribute(value=Name(id='importlib', ctx=Load()), attr='reload', ctx=Load()), args=[Attribute(value=Name(id='jsonschema', ctx=Load()), attr='cli', ctx=Load())], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='w', ctx=Load()), attr='filename', ctx=Load()), Attribute(value=Name(id='importlib', ctx=Load()), attr='__file__', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_cli', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        As of v4.17.0, the jsonschema CLI is deprecated.\n        ')), Assign(targets=[Name(id='process', ctx=Store())], value=Call(func=Attribute(value=Name(id='subprocess', ctx=Load()), attr='run', ctx=Load()), args=[List(elts=[Attribute(value=Name(id='sys', ctx=Load()), attr='executable', ctx=Load()), Constant(value='-m'), Constant(value='jsonschema')], ctx=Load())], keywords=[keyword(arg='capture_output', value=Constant(value=True))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Constant(value=b'The jsonschema CLI is deprecated '), Attribute(value=Name(id='process', ctx=Load()), attr='stderr', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_automatic_remote_retrieval', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Automatic retrieval of remote references is deprecated as of v4.18.0.\n        ')), Assign(targets=[Name(id='ref', ctx=Store())], value=Constant(value='http://bar#/$defs/baz')), Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='$defs')], values=[Dict(keys=[Constant(value='baz')], values=[Dict(keys=[Constant(value='type')], values=[Constant(value='integer')])])])), If(test=Compare(left=Constant(value='requests'), ops=[In()], comparators=[Attribute(value=Name(id='sys', ctx=Load()), attr='modules', ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='addCleanup', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='sys', ctx=Load()), attr='modules', ctx=Load()), attr='__setitem__', ctx=Load()), Constant(value='requests'), Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='modules', ctx=Load()), slice=Constant(value='requests'), ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='modules', ctx=Load()), slice=Constant(value='requests'), ctx=Store())], value=Constant(value=None)), FunctionDef(name='fake_urlopen', args=arguments(posonlyargs=[], args=[arg(arg='request')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIsInstance', ctx=Load()), args=[Name(id='request', ctx=Load()), Attribute(value=Attribute(value=Name(id='urllib', ctx=Load()), attr='request', ctx=Load()), attr='Request', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Attribute(value=Name(id='request', ctx=Load()), attr='full_url', ctx=Load()), Constant(value='http://bar')], keywords=[])), Assign(targets=[Tuple(elts=[Tuple(elts=[Name(id='header', ctx=Store()), Name(id='value', ctx=Store())], ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='request', ctx=Load()), attr='header_items', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Name(id='header', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]), Constant(value='user-agent')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='value', ctx=Load()), Constant(value='python-jsonschema (deprecated $ref resolution)')], keywords=[])), Expr(value=Yield(value=Call(func=Name(id='BytesIO', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dumps', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[]), attr='encode', ctx=Load()), args=[Constant(value='utf8')], keywords=[])], keywords=[])))], decorator_list=[Name(id='contextmanager', ctx=Load())]), Assign(targets=[Name(id='validator', ctx=Store())], value=Call(func=Attribute(value=Name(id='validators', ctx=Load()), attr='Draft202012Validator', ctx=Load()), args=[Dict(keys=[Constant(value='$ref')], values=[Name(id='ref', ctx=Load())])], keywords=[])), Assign(targets=[Name(id='message', ctx=Store())], value=Constant(value='Automatically retrieving remote references ')), Assign(targets=[Name(id='patch', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='mock', ctx=Load()), attr='patch', ctx=Load()), attr='object', ctx=Load()), args=[Attribute(value=Name(id='urllib', ctx=Load()), attr='request', ctx=Load()), Constant(value='urlopen')], keywords=[keyword(arg='new', value=Name(id='fake_urlopen', ctx=Load()))])), With(items=[withitem(context_expr=Name(id='patch', ctx=Load())), withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertWarnsRegex', ctx=Load()), args=[Name(id='DeprecationWarning', ctx=Load()), Name(id='message', ctx=Load())], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Tuple(elts=[Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='is_valid', ctx=Load()), args=[Dict(keys=[], values=[])], keywords=[]), Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='is_valid', ctx=Load()), args=[Constant(value=37)], keywords=[])], ctx=Load()), Tuple(elts=[Constant(value=False), Constant(value=True)], ctx=Load())], keywords=[]))])], decorator_list=[])], decorator_list=[])], type_ignores=[])