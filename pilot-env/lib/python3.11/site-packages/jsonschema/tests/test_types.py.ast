Module(body=[Expr(value=Constant(value='\nTests for the `TypeChecker`-based type interface.\n\nThe actual correctness of the type checking is handled in\n`test_jsonschema_test_suite`; these tests check that TypeChecker\nfunctions correctly at a more granular level.\n')), ImportFrom(module='collections', names=[alias(name='namedtuple')], level=0), ImportFrom(module='unittest', names=[alias(name='TestCase')], level=0), ImportFrom(module='jsonschema', names=[alias(name='ValidationError'), alias(name='_keywords')], level=0), ImportFrom(module='jsonschema._types', names=[alias(name='TypeChecker')], level=0), ImportFrom(module='jsonschema.exceptions', names=[alias(name='UndefinedTypeCheck'), alias(name='UnknownType')], level=0), ImportFrom(module='jsonschema.validators', names=[alias(name='Draft202012Validator'), alias(name='extend')], level=0), FunctionDef(name='equals_2', args=arguments(posonlyargs=[], args=[arg(arg='checker'), arg(arg='instance')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Compare(left=Name(id='instance', ctx=Load()), ops=[Eq()], comparators=[Constant(value=2)]))], decorator_list=[]), FunctionDef(name='is_namedtuple', args=arguments(posonlyargs=[], args=[arg(arg='instance')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='instance', ctx=Load()), Name(id='tuple', ctx=Load())], keywords=[]), Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='instance', ctx=Load()), Constant(value='_fields'), Constant(value=None)], keywords=[])]))], decorator_list=[]), FunctionDef(name='is_object_or_named_tuple', args=arguments(posonlyargs=[], args=[arg(arg='checker'), arg(arg='instance')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Attribute(value=Attribute(value=Name(id='Draft202012Validator', ctx=Load()), attr='TYPE_CHECKER', ctx=Load()), attr='is_type', ctx=Load()), args=[Name(id='instance', ctx=Load()), Constant(value='object')], keywords=[]), body=[Return(value=Constant(value=True))], orelse=[]), Return(value=Call(func=Name(id='is_namedtuple', ctx=Load()), args=[Name(id='instance', ctx=Load())], keywords=[]))], decorator_list=[]), ClassDef(name='TestTypeChecker', bases=[Name(id='TestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='test_is_type', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='checker', ctx=Store())], value=Call(func=Name(id='TypeChecker', ctx=Load()), args=[Dict(keys=[Constant(value='two')], values=[Name(id='equals_2', ctx=Load())])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Tuple(elts=[Call(func=Attribute(value=Name(id='checker', ctx=Load()), attr='is_type', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=Constant(value=2)), keyword(arg='type', value=Constant(value='two'))]), Call(func=Attribute(value=Name(id='checker', ctx=Load()), attr='is_type', ctx=Load()), args=[], keywords=[keyword(arg='instance', value=Constant(value='bar')), keyword(arg='type', value=Constant(value='two'))])], ctx=Load()), Tuple(elts=[Constant(value=True), Constant(value=False)], ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_is_unknown_type', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='UndefinedTypeCheck', ctx=Load())], keywords=[]), optional_vars=Name(id='e', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='TypeChecker', ctx=Load()), args=[], keywords=[]), attr='is_type', ctx=Load()), args=[Constant(value=4), Constant(value='foobar')], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Constant(value="'foobar' is unknown to this type checker"), Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='e', ctx=Load()), attr='exception', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertTrue', ctx=Load()), args=[Attribute(value=Attribute(value=Name(id='e', ctx=Load()), attr='exception', ctx=Load()), attr='__suppress_context__', ctx=Load())], keywords=[keyword(arg='msg', value=Constant(value='Expected the internal KeyError to be hidden.'))]))], decorator_list=[]), FunctionDef(name='test_checks_can_be_added_at_init', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='checker', ctx=Store())], value=Call(func=Name(id='TypeChecker', ctx=Load()), args=[Dict(keys=[Constant(value='two')], values=[Name(id='equals_2', ctx=Load())])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Name(id='checker', ctx=Load()), Call(func=Attribute(value=Call(func=Name(id='TypeChecker', ctx=Load()), args=[], keywords=[]), attr='redefine', ctx=Load()), args=[Constant(value='two'), Name(id='equals_2', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_redefine_existing_type', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Name(id='TypeChecker', ctx=Load()), args=[], keywords=[]), attr='redefine', ctx=Load()), args=[Constant(value='two'), Call(func=Name(id='object', ctx=Load()), args=[], keywords=[])], keywords=[]), attr='redefine', ctx=Load()), args=[Constant(value='two'), Name(id='equals_2', ctx=Load())], keywords=[]), Call(func=Attribute(value=Call(func=Name(id='TypeChecker', ctx=Load()), args=[], keywords=[]), attr='redefine', ctx=Load()), args=[Constant(value='two'), Name(id='equals_2', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_remove', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Name(id='TypeChecker', ctx=Load()), args=[Dict(keys=[Constant(value='two')], values=[Name(id='equals_2', ctx=Load())])], keywords=[]), attr='remove', ctx=Load()), args=[Constant(value='two')], keywords=[]), Call(func=Name(id='TypeChecker', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_remove_unknown_type', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='UndefinedTypeCheck', ctx=Load())], keywords=[]), optional_vars=Name(id='context', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='TypeChecker', ctx=Load()), args=[], keywords=[]), attr='remove', ctx=Load()), args=[Constant(value='foobar')], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Constant(value='foobar'), Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='context', ctx=Load()), attr='exception', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_redefine_many', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Name(id='TypeChecker', ctx=Load()), args=[], keywords=[]), attr='redefine_many', ctx=Load()), args=[Dict(keys=[Constant(value='foo'), Constant(value='bar')], values=[Name(id='int', ctx=Load()), Name(id='str', ctx=Load())])], keywords=[]), Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Name(id='TypeChecker', ctx=Load()), args=[], keywords=[]), attr='redefine', ctx=Load()), args=[Constant(value='foo'), Name(id='int', ctx=Load())], keywords=[]), attr='redefine', ctx=Load()), args=[Constant(value='bar'), Name(id='str', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_remove_multiple', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Name(id='TypeChecker', ctx=Load()), args=[Dict(keys=[Constant(value='foo'), Constant(value='bar')], values=[Name(id='int', ctx=Load()), Name(id='str', ctx=Load())])], keywords=[]), attr='remove', ctx=Load()), args=[Constant(value='foo'), Constant(value='bar')], keywords=[]), Call(func=Name(id='TypeChecker', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_type_check_can_raise_key_error', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Make sure no one writes:\n\n            try:\n                self._type_checkers[type](...)\n            except KeyError:\n\n        ignoring the fact that the function itself can raise that.\n        ')), Assign(targets=[Name(id='error', ctx=Store())], value=Call(func=Name(id='KeyError', ctx=Load()), args=[Constant(value='Stuff')], keywords=[])), FunctionDef(name='raises_keyerror', args=arguments(posonlyargs=[], args=[arg(arg='checker'), arg(arg='instance')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Raise(exc=Name(id='error', ctx=Load()))], decorator_list=[]), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='KeyError', ctx=Load())], keywords=[]), optional_vars=Name(id='context', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='TypeChecker', ctx=Load()), args=[Dict(keys=[Constant(value='foo')], values=[Name(id='raises_keyerror', ctx=Load())])], keywords=[]), attr='is_type', ctx=Load()), args=[Constant(value=4), Constant(value='foo')], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIs', ctx=Load()), args=[Attribute(value=Name(id='context', ctx=Load()), attr='exception', ctx=Load()), Name(id='error', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='test_repr', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='checker', ctx=Store())], value=Call(func=Name(id='TypeChecker', ctx=Load()), args=[Dict(keys=[Constant(value='foo'), Constant(value='bar')], values=[Name(id='is_namedtuple', ctx=Load()), Name(id='is_namedtuple', ctx=Load())])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertEqual', ctx=Load()), args=[Call(func=Name(id='repr', ctx=Load()), args=[Name(id='checker', ctx=Load())], keywords=[]), Constant(value="<TypeChecker types={'bar', 'foo'}>")], keywords=[]))], decorator_list=[])], decorator_list=[]), ClassDef(name='TestCustomTypes', bases=[Name(id='TestCase', ctx=Load())], keywords=[], body=[FunctionDef(name='test_simple_type_can_be_extended', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='int_or_str_int', args=arguments(posonlyargs=[], args=[arg(arg='checker'), arg(arg='instance')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='instance', ctx=Load()), Tuple(elts=[Name(id='int', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load())], keywords=[])), body=[Return(value=Constant(value=False))], orelse=[]), Try(body=[Expr(value=Call(func=Name(id='int', ctx=Load()), args=[Name(id='instance', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Return(value=Constant(value=False))])], orelse=[], finalbody=[]), Return(value=Constant(value=True))], decorator_list=[]), Assign(targets=[Name(id='CustomValidator', ctx=Store())], value=Call(func=Name(id='extend', ctx=Load()), args=[Name(id='Draft202012Validator', ctx=Load())], keywords=[keyword(arg='type_checker', value=Call(func=Attribute(value=Attribute(value=Name(id='Draft202012Validator', ctx=Load()), attr='TYPE_CHECKER', ctx=Load()), attr='redefine', ctx=Load()), args=[Constant(value='integer'), Name(id='int_or_str_int', ctx=Load())], keywords=[]))])), Assign(targets=[Name(id='validator', ctx=Store())], value=Call(func=Name(id='CustomValidator', ctx=Load()), args=[Dict(keys=[Constant(value='type')], values=[Constant(value='integer')])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='validate', ctx=Load()), args=[Constant(value=4)], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='validate', ctx=Load()), args=[Constant(value='4')], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='ValidationError', ctx=Load())], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='validate', ctx=Load()), args=[Constant(value=4.4)], keywords=[]))]), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='ValidationError', ctx=Load())], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='validate', ctx=Load()), args=[Constant(value='foo')], keywords=[]))])], decorator_list=[]), FunctionDef(name='test_object_can_be_extended', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='type')], values=[Constant(value='object')])), Assign(targets=[Name(id='Point', ctx=Store())], value=Call(func=Name(id='namedtuple', ctx=Load()), args=[Constant(value='Point'), List(elts=[Constant(value='x'), Constant(value='y')], ctx=Load())], keywords=[])), Assign(targets=[Name(id='type_checker', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='Draft202012Validator', ctx=Load()), attr='TYPE_CHECKER', ctx=Load()), attr='redefine', ctx=Load()), args=[Constant(value='object'), Name(id='is_object_or_named_tuple', ctx=Load())], keywords=[])), Assign(targets=[Name(id='CustomValidator', ctx=Store())], value=Call(func=Name(id='extend', ctx=Load()), args=[Name(id='Draft202012Validator', ctx=Load())], keywords=[keyword(arg='type_checker', value=Name(id='type_checker', ctx=Load()))])), Assign(targets=[Name(id='validator', ctx=Store())], value=Call(func=Name(id='CustomValidator', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='validate', ctx=Load()), args=[Call(func=Name(id='Point', ctx=Load()), args=[], keywords=[keyword(arg='x', value=Constant(value=4)), keyword(arg='y', value=Constant(value=5))])], keywords=[]))], decorator_list=[]), FunctionDef(name='test_object_extensions_require_custom_validators', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='type'), Constant(value='required')], values=[Constant(value='object'), List(elts=[Constant(value='x')], ctx=Load())])), Assign(targets=[Name(id='type_checker', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='Draft202012Validator', ctx=Load()), attr='TYPE_CHECKER', ctx=Load()), attr='redefine', ctx=Load()), args=[Constant(value='object'), Name(id='is_object_or_named_tuple', ctx=Load())], keywords=[])), Assign(targets=[Name(id='CustomValidator', ctx=Store())], value=Call(func=Name(id='extend', ctx=Load()), args=[Name(id='Draft202012Validator', ctx=Load())], keywords=[keyword(arg='type_checker', value=Name(id='type_checker', ctx=Load()))])), Assign(targets=[Name(id='validator', ctx=Store())], value=Call(func=Name(id='CustomValidator', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[])), Assign(targets=[Name(id='Point', ctx=Store())], value=Call(func=Name(id='namedtuple', ctx=Load()), args=[Constant(value='Point'), List(elts=[Constant(value='x'), Constant(value='y')], ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='ValidationError', ctx=Load())], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='validate', ctx=Load()), args=[Call(func=Name(id='Point', ctx=Load()), args=[], keywords=[keyword(arg='x', value=Constant(value=4)), keyword(arg='y', value=Constant(value=5))])], keywords=[]))])], decorator_list=[]), FunctionDef(name='test_object_extensions_can_handle_custom_validators', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='type'), Constant(value='required'), Constant(value='properties')], values=[Constant(value='object'), List(elts=[Constant(value='x')], ctx=Load()), Dict(keys=[Constant(value='x')], values=[Dict(keys=[Constant(value='type')], values=[Constant(value='integer')])])])), Assign(targets=[Name(id='type_checker', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='Draft202012Validator', ctx=Load()), attr='TYPE_CHECKER', ctx=Load()), attr='redefine', ctx=Load()), args=[Constant(value='object'), Name(id='is_object_or_named_tuple', ctx=Load())], keywords=[])), FunctionDef(name='coerce_named_tuple', args=arguments(posonlyargs=[], args=[arg(arg='fn')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='coerced', args=arguments(posonlyargs=[], args=[arg(arg='validator'), arg(arg='value'), arg(arg='instance'), arg(arg='schema')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Call(func=Name(id='is_namedtuple', ctx=Load()), args=[Name(id='instance', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='instance', ctx=Store())], value=Call(func=Attribute(value=Name(id='instance', ctx=Load()), attr='_asdict', ctx=Load()), args=[], keywords=[]))], orelse=[]), Return(value=Call(func=Name(id='fn', ctx=Load()), args=[Name(id='validator', ctx=Load()), Name(id='value', ctx=Load()), Name(id='instance', ctx=Load()), Name(id='schema', ctx=Load())], keywords=[]))], decorator_list=[]), Return(value=Name(id='coerced', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='required', ctx=Store())], value=Call(func=Name(id='coerce_named_tuple', ctx=Load()), args=[Attribute(value=Name(id='_keywords', ctx=Load()), attr='required', ctx=Load())], keywords=[])), Assign(targets=[Name(id='properties', ctx=Store())], value=Call(func=Name(id='coerce_named_tuple', ctx=Load()), args=[Attribute(value=Name(id='_keywords', ctx=Load()), attr='properties', ctx=Load())], keywords=[])), Assign(targets=[Name(id='CustomValidator', ctx=Store())], value=Call(func=Name(id='extend', ctx=Load()), args=[Name(id='Draft202012Validator', ctx=Load())], keywords=[keyword(arg='type_checker', value=Name(id='type_checker', ctx=Load())), keyword(arg='validators', value=Dict(keys=[Constant(value='required'), Constant(value='properties')], values=[Name(id='required', ctx=Load()), Name(id='properties', ctx=Load())]))])), Assign(targets=[Name(id='validator', ctx=Store())], value=Call(func=Name(id='CustomValidator', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[])), Assign(targets=[Name(id='Point', ctx=Store())], value=Call(func=Name(id='namedtuple', ctx=Load()), args=[Constant(value='Point'), List(elts=[Constant(value='x'), Constant(value='y')], ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='validate', ctx=Load()), args=[Call(func=Name(id='Point', ctx=Load()), args=[], keywords=[keyword(arg='x', value=Constant(value=4)), keyword(arg='y', value=Constant(value=5))])], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='ValidationError', ctx=Load())], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='validate', ctx=Load()), args=[Call(func=Name(id='Point', ctx=Load()), args=[], keywords=[keyword(arg='x', value=Constant(value='not an integer')), keyword(arg='y', value=Constant(value=5))])], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='validate', ctx=Load()), args=[Dict(keys=[Constant(value='x'), Constant(value='y')], values=[Constant(value=4), Constant(value=5)])], keywords=[])), With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='ValidationError', ctx=Load())], keywords=[]))], body=[Expr(value=Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='validate', ctx=Load()), args=[Dict(keys=[Constant(value='x'), Constant(value='y')], values=[Constant(value='not an integer'), Constant(value=5)])], keywords=[]))])], decorator_list=[]), FunctionDef(name='test_unknown_type', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertRaises', ctx=Load()), args=[Name(id='UnknownType', ctx=Load())], keywords=[]), optional_vars=Name(id='e', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Call(func=Name(id='Draft202012Validator', ctx=Load()), args=[Dict(keys=[], values=[])], keywords=[]), attr='is_type', ctx=Load()), args=[Constant(value=12), Constant(value='some unknown type')], keywords=[]))]), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='assertIn', ctx=Load()), args=[Constant(value="'some unknown type'"), Call(func=Name(id='str', ctx=Load()), args=[Attribute(value=Name(id='e', ctx=Load()), attr='exception', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[])], decorator_list=[])], type_ignores=[])