Module(body=[Expr(value=Constant(value='\nThe ``jsonschema`` command line.\n')), ImportFrom(module='importlib', names=[alias(name='metadata')], level=0), ImportFrom(module='json', names=[alias(name='JSONDecodeError')], level=0), ImportFrom(module='textwrap', names=[alias(name='dedent')], level=0), Import(names=[alias(name='argparse')]), Import(names=[alias(name='json')]), Import(names=[alias(name='sys')]), Import(names=[alias(name='traceback')]), Import(names=[alias(name='warnings')]), Try(body=[ImportFrom(module='pkgutil', names=[alias(name='resolve_name')], level=0)], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[ImportFrom(module='pkgutil_resolve_name', names=[alias(name='resolve_name')], level=0)])], orelse=[], finalbody=[]), ImportFrom(module='attrs', names=[alias(name='define'), alias(name='field')], level=0), ImportFrom(module='jsonschema.exceptions', names=[alias(name='SchemaError')], level=0), ImportFrom(module='jsonschema.validators', names=[alias(name='_RefResolver'), alias(name='validator_for')], level=0), Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value='The jsonschema CLI is deprecated and will be removed in a future version. Please use check-jsonschema instead, which can be installed from https://pypi.org/project/check-jsonschema/'), Name(id='DeprecationWarning', ctx=Load())], keywords=[keyword(arg='stacklevel', value=Constant(value=2))])), ClassDef(name='_CannotLoadFile', bases=[Name(id='Exception', ctx=Load())], keywords=[], body=[Pass()], decorator_list=[]), ClassDef(name='_Outputter', bases=[], keywords=[], body=[Assign(targets=[Name(id='_formatter', ctx=Store())], value=Call(func=Name(id='field', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='_stdout', ctx=Store())], value=Call(func=Name(id='field', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='_stderr', ctx=Store())], value=Call(func=Name(id='field', ctx=Load()), args=[], keywords=[])), FunctionDef(name='from_arguments', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='arguments'), arg(arg='stdout'), arg(arg='stderr')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Subscript(value=Name(id='arguments', ctx=Load()), slice=Constant(value='output'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='plain')]), body=[Assign(targets=[Name(id='formatter', ctx=Store())], value=Call(func=Name(id='_PlainFormatter', ctx=Load()), args=[Subscript(value=Name(id='arguments', ctx=Load()), slice=Constant(value='error_format'), ctx=Load())], keywords=[]))], orelse=[If(test=Compare(left=Subscript(value=Name(id='arguments', ctx=Load()), slice=Constant(value='output'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='pretty')]), body=[Assign(targets=[Name(id='formatter', ctx=Store())], value=Call(func=Name(id='_PrettyFormatter', ctx=Load()), args=[], keywords=[]))], orelse=[])]), Return(value=Call(func=Name(id='cls', ctx=Load()), args=[], keywords=[keyword(arg='formatter', value=Name(id='formatter', ctx=Load())), keyword(arg='stdout', value=Name(id='stdout', ctx=Load())), keyword(arg='stderr', value=Name(id='stderr', ctx=Load()))]))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='load', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Assign(targets=[Name(id='file', ctx=Store())], value=Call(func=Name(id='open', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='FileNotFoundError', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='filenotfound_error', ctx=Load()), args=[], keywords=[keyword(arg='path', value=Name(id='path', ctx=Load())), keyword(arg='exc_info', value=Call(func=Attribute(value=Name(id='sys', ctx=Load()), attr='exc_info', ctx=Load()), args=[], keywords=[]))])), Raise(exc=Call(func=Name(id='_CannotLoadFile', ctx=Load()), args=[], keywords=[]))])], orelse=[], finalbody=[]), With(items=[withitem(context_expr=Name(id='file', ctx=Load()))], body=[Try(body=[Return(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='file', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='JSONDecodeError', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='parsing_error', ctx=Load()), args=[], keywords=[keyword(arg='path', value=Name(id='path', ctx=Load())), keyword(arg='exc_info', value=Call(func=Attribute(value=Name(id='sys', ctx=Load()), attr='exc_info', ctx=Load()), args=[], keywords=[]))])), Raise(exc=Call(func=Name(id='_CannotLoadFile', ctx=Load()), args=[], keywords=[]))])], orelse=[], finalbody=[])])], decorator_list=[]), FunctionDef(name='filenotfound_error', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_stderr', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_formatter', ctx=Load()), attr='filenotfound_error', ctx=Load()), args=[], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))])], keywords=[]))], decorator_list=[]), FunctionDef(name='parsing_error', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_stderr', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_formatter', ctx=Load()), attr='parsing_error', ctx=Load()), args=[], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))])], keywords=[]))], decorator_list=[]), FunctionDef(name='validation_error', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_stderr', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_formatter', ctx=Load()), attr='validation_error', ctx=Load()), args=[], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))])], keywords=[]))], decorator_list=[]), FunctionDef(name='validation_success', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_stdout', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_formatter', ctx=Load()), attr='validation_success', ctx=Load()), args=[], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))])], keywords=[]))], decorator_list=[])], decorator_list=[Name(id='define', ctx=Load())]), ClassDef(name='_PrettyFormatter', bases=[], keywords=[], body=[Assign(targets=[Name(id='_ERROR_MSG', ctx=Store())], value=Call(func=Name(id='dedent', ctx=Load()), args=[Constant(value='        ===[{type}]===({path})===\n\n        {body}\n        -----------------------------\n        ')], keywords=[])), Assign(targets=[Name(id='_SUCCESS_MSG', ctx=Store())], value=Constant(value='===[SUCCESS]===({path})===\n')), FunctionDef(name='filenotfound_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='path'), arg(arg='exc_info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ERROR_MSG', ctx=Load()), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='path', value=Name(id='path', ctx=Load())), keyword(arg='type', value=Constant(value='FileNotFoundError')), keyword(arg='body', value=Call(func=Attribute(value=Constant(value='{!r} does not exist.'), attr='format', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))]))], decorator_list=[]), FunctionDef(name='parsing_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='path'), arg(arg='exc_info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Tuple(elts=[Name(id='exc_type', ctx=Store()), Name(id='exc_value', ctx=Store()), Name(id='exc_traceback', ctx=Store())], ctx=Store())], value=Name(id='exc_info', ctx=Load())), Assign(targets=[Name(id='exc_lines', ctx=Store())], value=Call(func=Attribute(value=Constant(value=''), attr='join', ctx=Load()), args=[Call(func=Attribute(value=Name(id='traceback', ctx=Load()), attr='format_exception', ctx=Load()), args=[Name(id='exc_type', ctx=Load()), Name(id='exc_value', ctx=Load()), Name(id='exc_traceback', ctx=Load())], keywords=[])], keywords=[])), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ERROR_MSG', ctx=Load()), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='path', value=Name(id='path', ctx=Load())), keyword(arg='type', value=Attribute(value=Name(id='exc_type', ctx=Load()), attr='__name__', ctx=Load())), keyword(arg='body', value=Name(id='exc_lines', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='validation_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='instance_path'), arg(arg='error')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ERROR_MSG', ctx=Load()), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='path', value=Name(id='instance_path', ctx=Load())), keyword(arg='type', value=Attribute(value=Attribute(value=Name(id='error', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load())), keyword(arg='body', value=Name(id='error', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='validation_success', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='instance_path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_SUCCESS_MSG', ctx=Load()), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='path', value=Name(id='instance_path', ctx=Load()))]))], decorator_list=[])], decorator_list=[Name(id='define', ctx=Load())]), ClassDef(name='_PlainFormatter', bases=[], keywords=[], body=[Assign(targets=[Name(id='_error_format', ctx=Store())], value=Call(func=Name(id='field', ctx=Load()), args=[], keywords=[])), FunctionDef(name='filenotfound_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='path'), arg(arg='exc_info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value='{!r} does not exist.\n'), attr='format', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='parsing_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='path'), arg(arg='exc_info')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Constant(value='Failed to parse {}: {}\n'), attr='format', ctx=Load()), args=[IfExp(test=Compare(left=Name(id='path', ctx=Load()), ops=[Eq()], comparators=[Constant(value='<stdin>')]), body=Constant(value='<stdin>'), orelse=Call(func=Name(id='repr', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[])), Subscript(value=Name(id='exc_info', ctx=Load()), slice=Constant(value=1), ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='validation_error', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='instance_path'), arg(arg='error')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_error_format', ctx=Load()), attr='format', ctx=Load()), args=[], keywords=[keyword(arg='file_name', value=Name(id='instance_path', ctx=Load())), keyword(arg='error', value=Name(id='error', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='validation_success', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='instance_path')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Constant(value=''))], decorator_list=[])], decorator_list=[Name(id='define', ctx=Load())]), FunctionDef(name='_resolve_name_with_default', args=arguments(posonlyargs=[], args=[arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Constant(value='.'), ops=[NotIn()], comparators=[Name(id='name', ctx=Load())]), body=[Assign(targets=[Name(id='name', ctx=Store())], value=BinOp(left=Constant(value='jsonschema.'), op=Add(), right=Name(id='name', ctx=Load())))], orelse=[]), Return(value=Call(func=Name(id='resolve_name', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[]))], decorator_list=[]), Assign(targets=[Name(id='parser', ctx=Store())], value=Call(func=Attribute(value=Name(id='argparse', ctx=Load()), attr='ArgumentParser', ctx=Load()), args=[], keywords=[keyword(arg='description', value=Constant(value='JSON Schema Validation CLI'))])), Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='add_argument', ctx=Load()), args=[Constant(value='-i'), Constant(value='--instance')], keywords=[keyword(arg='action', value=Constant(value='append')), keyword(arg='dest', value=Constant(value='instances')), keyword(arg='help', value=Constant(value='\n        a path to a JSON instance (i.e. filename.json) to validate (may\n        be specified multiple times). If no instances are provided via this\n        option, one will be expected on standard input.\n    '))])), Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='add_argument', ctx=Load()), args=[Constant(value='-F'), Constant(value='--error-format')], keywords=[keyword(arg='help', value=Constant(value="\n        the format to use for each validation error message, specified\n        in a form suitable for str.format. This string will be passed\n        one formatted object named 'error' for each ValidationError.\n        Only provide this option when using --output=plain, which is the\n        default. If this argument is unprovided and --output=plain is\n        used, a simple default representation will be used.\n    "))])), Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='add_argument', ctx=Load()), args=[Constant(value='-o'), Constant(value='--output')], keywords=[keyword(arg='choices', value=List(elts=[Constant(value='plain'), Constant(value='pretty')], ctx=Load())), keyword(arg='default', value=Constant(value='plain')), keyword(arg='help', value=Constant(value="\n        an output format to use. 'plain' (default) will produce minimal\n        text with one line for each error, while 'pretty' will produce\n        more detailed human-readable output on multiple lines.\n    "))])), Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='add_argument', ctx=Load()), args=[Constant(value='-V'), Constant(value='--validator')], keywords=[keyword(arg='type', value=Name(id='_resolve_name_with_default', ctx=Load())), keyword(arg='help', value=Constant(value='\n        the fully qualified object name of a validator to use, or, for\n        validators that are registered with jsonschema, simply the name\n        of the class.\n    '))])), Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='add_argument', ctx=Load()), args=[Constant(value='--base-uri')], keywords=[keyword(arg='help', value=Constant(value='\n        a base URI to assign to the provided schema, even if it does not\n        declare one (via e.g. $id). This option can be used if you wish to\n        resolve relative references to a particular URI (or local path)\n    '))])), Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='add_argument', ctx=Load()), args=[Constant(value='--version')], keywords=[keyword(arg='action', value=Constant(value='version')), keyword(arg='version', value=Call(func=Attribute(value=Name(id='metadata', ctx=Load()), attr='version', ctx=Load()), args=[Constant(value='jsonschema')], keywords=[]))])), Expr(value=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='add_argument', ctx=Load()), args=[Constant(value='schema')], keywords=[keyword(arg='help', value=Constant(value='the path to a JSON Schema to validate with (i.e. schema.json)'))])), FunctionDef(name='parse_args', args=arguments(posonlyargs=[], args=[arg(arg='args')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='arguments', ctx=Store())], value=Call(func=Name(id='vars', ctx=Load()), args=[Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='parse_args', ctx=Load()), args=[], keywords=[keyword(arg='args', value=BoolOp(op=Or(), values=[Name(id='args', ctx=Load()), List(elts=[Constant(value='--help')], ctx=Load())]))])], keywords=[])), If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Name(id='arguments', ctx=Load()), slice=Constant(value='output'), ctx=Load()), ops=[NotEq()], comparators=[Constant(value='plain')]), Subscript(value=Name(id='arguments', ctx=Load()), slice=Constant(value='error_format'), ctx=Load())]), body=[Raise(exc=Call(func=Attribute(value=Name(id='parser', ctx=Load()), attr='error', ctx=Load()), args=[Constant(value='--error-format can only be used with --output plain')], keywords=[]))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Name(id='arguments', ctx=Load()), slice=Constant(value='output'), ctx=Load()), ops=[Eq()], comparators=[Constant(value='plain')]), Compare(left=Subscript(value=Name(id='arguments', ctx=Load()), slice=Constant(value='error_format'), ctx=Load()), ops=[Is()], comparators=[Constant(value=None)])]), body=[Assign(targets=[Subscript(value=Name(id='arguments', ctx=Load()), slice=Constant(value='error_format'), ctx=Store())], value=Constant(value='{error.instance}: {error.message}\n'))], orelse=[]), Return(value=Name(id='arguments', ctx=Load()))], decorator_list=[]), FunctionDef(name='_validate_instance', args=arguments(posonlyargs=[], args=[arg(arg='instance_path'), arg(arg='instance'), arg(arg='validator'), arg(arg='outputter')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='invalid', ctx=Store())], value=Constant(value=False)), For(target=Name(id='error', ctx=Store()), iter=Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='iter_errors', ctx=Load()), args=[Name(id='instance', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='invalid', ctx=Store())], value=Constant(value=True)), Expr(value=Call(func=Attribute(value=Name(id='outputter', ctx=Load()), attr='validation_error', ctx=Load()), args=[], keywords=[keyword(arg='instance_path', value=Name(id='instance_path', ctx=Load())), keyword(arg='error', value=Name(id='error', ctx=Load()))]))], orelse=[]), If(test=UnaryOp(op=Not(), operand=Name(id='invalid', ctx=Load())), body=[Expr(value=Call(func=Attribute(value=Name(id='outputter', ctx=Load()), attr='validation_success', ctx=Load()), args=[], keywords=[keyword(arg='instance_path', value=Name(id='instance_path', ctx=Load()))]))], orelse=[]), Return(value=Name(id='invalid', ctx=Load()))], decorator_list=[]), FunctionDef(name='main', args=arguments(posonlyargs=[], args=[arg(arg='args')], kwonlyargs=[], kw_defaults=[], defaults=[Subscript(value=Attribute(value=Name(id='sys', ctx=Load()), attr='argv', ctx=Load()), slice=Slice(lower=Constant(value=1)), ctx=Load())]), body=[Expr(value=Call(func=Attribute(value=Name(id='sys', ctx=Load()), attr='exit', ctx=Load()), args=[Call(func=Name(id='run', ctx=Load()), args=[], keywords=[keyword(arg='arguments', value=Call(func=Name(id='parse_args', ctx=Load()), args=[], keywords=[keyword(arg='args', value=Name(id='args', ctx=Load()))]))])], keywords=[]))], decorator_list=[]), FunctionDef(name='run', args=arguments(posonlyargs=[], args=[arg(arg='arguments'), arg(arg='stdout'), arg(arg='stderr'), arg(arg='stdin')], kwonlyargs=[], kw_defaults=[], defaults=[Attribute(value=Name(id='sys', ctx=Load()), attr='stdout', ctx=Load()), Attribute(value=Name(id='sys', ctx=Load()), attr='stderr', ctx=Load()), Attribute(value=Name(id='sys', ctx=Load()), attr='stdin', ctx=Load())]), body=[Assign(targets=[Name(id='outputter', ctx=Store())], value=Call(func=Attribute(value=Name(id='_Outputter', ctx=Load()), attr='from_arguments', ctx=Load()), args=[], keywords=[keyword(arg='arguments', value=Name(id='arguments', ctx=Load())), keyword(arg='stdout', value=Name(id='stdout', ctx=Load())), keyword(arg='stderr', value=Name(id='stderr', ctx=Load()))])), Try(body=[Assign(targets=[Name(id='schema', ctx=Store())], value=Call(func=Attribute(value=Name(id='outputter', ctx=Load()), attr='load', ctx=Load()), args=[Subscript(value=Name(id='arguments', ctx=Load()), slice=Constant(value='schema'), ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='_CannotLoadFile', ctx=Load()), body=[Return(value=Constant(value=1))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='Validator', ctx=Store())], value=Subscript(value=Name(id='arguments', ctx=Load()), slice=Constant(value='validator'), ctx=Load())), If(test=Compare(left=Name(id='Validator', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='Validator', ctx=Store())], value=Call(func=Name(id='validator_for', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[]))], orelse=[]), Try(body=[Expr(value=Call(func=Attribute(value=Name(id='Validator', ctx=Load()), attr='check_schema', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='SchemaError', ctx=Load()), name='error', body=[Expr(value=Call(func=Attribute(value=Name(id='outputter', ctx=Load()), attr='validation_error', ctx=Load()), args=[], keywords=[keyword(arg='instance_path', value=Subscript(value=Name(id='arguments', ctx=Load()), slice=Constant(value='schema'), ctx=Load())), keyword(arg='error', value=Name(id='error', ctx=Load()))])), Return(value=Constant(value=1))])], orelse=[], finalbody=[]), If(test=Subscript(value=Name(id='arguments', ctx=Load()), slice=Constant(value='instances'), ctx=Load()), body=[Assign(targets=[Tuple(elts=[Name(id='load', ctx=Store()), Name(id='instances', ctx=Store())], ctx=Store())], value=Tuple(elts=[Attribute(value=Name(id='outputter', ctx=Load()), attr='load', ctx=Load()), Subscript(value=Name(id='arguments', ctx=Load()), slice=Constant(value='instances'), ctx=Load())], ctx=Load()))], orelse=[FunctionDef(name='load', args=arguments(posonlyargs=[], args=[arg(arg='_')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Return(value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='stdin', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='JSONDecodeError', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='outputter', ctx=Load()), attr='parsing_error', ctx=Load()), args=[], keywords=[keyword(arg='path', value=Constant(value='<stdin>')), keyword(arg='exc_info', value=Call(func=Attribute(value=Name(id='sys', ctx=Load()), attr='exc_info', ctx=Load()), args=[], keywords=[]))])), Raise(exc=Call(func=Name(id='_CannotLoadFile', ctx=Load()), args=[], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[]), Assign(targets=[Name(id='instances', ctx=Store())], value=List(elts=[Constant(value='<stdin>')], ctx=Load()))]), Assign(targets=[Name(id='resolver', ctx=Store())], value=IfExp(test=Compare(left=Subscript(value=Name(id='arguments', ctx=Load()), slice=Constant(value='base_uri'), ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=Call(func=Name(id='_RefResolver', ctx=Load()), args=[], keywords=[keyword(arg='base_uri', value=Subscript(value=Name(id='arguments', ctx=Load()), slice=Constant(value='base_uri'), ctx=Load())), keyword(arg='referrer', value=Name(id='schema', ctx=Load()))]), orelse=Constant(value=None))), Assign(targets=[Name(id='validator', ctx=Store())], value=Call(func=Name(id='Validator', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[keyword(arg='resolver', value=Name(id='resolver', ctx=Load()))])), Assign(targets=[Name(id='exit_code', ctx=Store())], value=Constant(value=0)), For(target=Name(id='each', ctx=Store()), iter=Name(id='instances', ctx=Load()), body=[Try(body=[Assign(targets=[Name(id='instance', ctx=Store())], value=Call(func=Name(id='load', ctx=Load()), args=[Name(id='each', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='_CannotLoadFile', ctx=Load()), body=[Assign(targets=[Name(id='exit_code', ctx=Store())], value=Constant(value=1))])], orelse=[AugAssign(target=Name(id='exit_code', ctx=Store()), op=BitOr(), value=Call(func=Name(id='_validate_instance', ctx=Load()), args=[], keywords=[keyword(arg='instance_path', value=Name(id='each', ctx=Load())), keyword(arg='instance', value=Name(id='instance', ctx=Load())), keyword(arg='validator', value=Name(id='validator', ctx=Load())), keyword(arg='outputter', value=Name(id='outputter', ctx=Load()))]))], finalbody=[])], orelse=[]), Return(value=Name(id='exit_code', ctx=Load()))], decorator_list=[])], type_ignores=[])