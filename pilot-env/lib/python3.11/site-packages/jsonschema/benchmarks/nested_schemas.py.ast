Module(body=[Expr(value=Constant(value="\nValidating highly nested schemas shouldn't cause exponential time blowups.\n\nSee https://github.com/python-jsonschema/jsonschema/issues/1097.\n")), ImportFrom(module='itertools', names=[alias(name='cycle')], level=0), ImportFrom(module='jsonschema.validators', names=[alias(name='validator_for')], level=0), Assign(targets=[Name(id='metaschemaish', ctx=Store())], value=Dict(keys=[Constant(value='$id'), Constant(value='$schema'), Constant(value='$vocabulary'), Constant(value='$dynamicAnchor'), Constant(value='$ref'), Constant(value='unevaluatedProperties')], values=[Constant(value='https://example.com/draft/2020-12/schema/strict'), Constant(value='https://json-schema.org/draft/2020-12/schema'), Dict(keys=[Constant(value='https://json-schema.org/draft/2020-12/vocab/core'), Constant(value='https://json-schema.org/draft/2020-12/vocab/applicator'), Constant(value='https://json-schema.org/draft/2020-12/vocab/unevaluated'), Constant(value='https://json-schema.org/draft/2020-12/vocab/validation'), Constant(value='https://json-schema.org/draft/2020-12/vocab/meta-data'), Constant(value='https://json-schema.org/draft/2020-12/vocab/format-annotation'), Constant(value='https://json-schema.org/draft/2020-12/vocab/content')], values=[Constant(value=True), Constant(value=True), Constant(value=True), Constant(value=True), Constant(value=True), Constant(value=True), Constant(value=True)]), Constant(value='meta'), Constant(value='https://json-schema.org/draft/2020-12/schema'), Constant(value=False)])), FunctionDef(name='nested_schema', args=arguments(posonlyargs=[], args=[arg(arg='levels')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n    Produce a schema which validates deeply nested objects and arrays.\n    ')), Assign(targets=[Name(id='names', ctx=Store())], value=Call(func=Name(id='cycle', ctx=Load()), args=[List(elts=[Constant(value='foo'), Constant(value='bar'), Constant(value='baz'), Constant(value='quux'), Constant(value='spam'), Constant(value='eggs')], ctx=Load())], keywords=[])), Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='type'), Constant(value='properties')], values=[Constant(value='object'), Dict(keys=[Constant(value='ham')], values=[Dict(keys=[Constant(value='type')], values=[Constant(value='string')])])])), For(target=Tuple(elts=[Name(id='_', ctx=Store()), Name(id='name', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='zip', ctx=Load()), args=[Call(func=Name(id='range', ctx=Load()), args=[BinOp(left=Name(id='levels', ctx=Load()), op=Sub(), right=Constant(value=1))], keywords=[]), Name(id='names', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='type'), Constant(value='properties')], values=[Constant(value='object'), Dict(keys=[Name(id='name', ctx=Load())], values=[Name(id='schema', ctx=Load())])]))], orelse=[]), Return(value=Name(id='schema', ctx=Load()))], decorator_list=[]), Assign(targets=[Name(id='validator', ctx=Store())], value=Call(func=Call(func=Name(id='validator_for', ctx=Load()), args=[Name(id='metaschemaish', ctx=Load())], keywords=[]), args=[Name(id='metaschemaish', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__')]), body=[ImportFrom(module='pyperf', names=[alias(name='Runner')], level=0), Assign(targets=[Name(id='runner', ctx=Store())], value=Call(func=Name(id='Runner', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='not_nested', ctx=Store())], value=Call(func=Name(id='nested_schema', ctx=Load()), args=[], keywords=[keyword(arg='levels', value=Constant(value=1))])), Expr(value=Call(func=Attribute(value=Name(id='runner', ctx=Load()), attr='bench_func', ctx=Load()), args=[Constant(value='not nested'), Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='is_valid', ctx=Load()), args=[Name(id='not_nested', ctx=Load())], keywords=[]))], keywords=[])), For(target=Name(id='levels', ctx=Store()), iter=Call(func=Name(id='range', ctx=Load()), args=[Constant(value=1), Constant(value=11), Constant(value=3)], keywords=[]), body=[Assign(targets=[Name(id='schema', ctx=Store())], value=Call(func=Name(id='nested_schema', ctx=Load()), args=[], keywords=[keyword(arg='levels', value=Name(id='levels', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Name(id='runner', ctx=Load()), attr='bench_func', ctx=Load()), args=[JoinedStr(values=[Constant(value='nested * '), FormattedValue(value=Name(id='levels', ctx=Load()), conversion=-1)]), Lambda(args=arguments(posonlyargs=[], args=[arg(arg='schema')], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='schema', ctx=Load())]), body=Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='is_valid', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[]))], keywords=[]))], orelse=[])], orelse=[])], type_ignores=[])