Module(body=[Expr(value=Constant(value='\nA benchmark which tries to compare the possible slow subparts of validation.\n')), ImportFrom(module='referencing', names=[alias(name='Registry')], level=0), ImportFrom(module='referencing.jsonschema', names=[alias(name='DRAFT202012')], level=0), ImportFrom(module='rpds', names=[alias(name='HashTrieMap'), alias(name='HashTrieSet')], level=0), ImportFrom(module='jsonschema', names=[alias(name='Draft202012Validator')], level=0), Assign(targets=[Name(id='schema', ctx=Store())], value=Dict(keys=[Constant(value='type'), Constant(value='minLength'), Constant(value='maxLength'), Constant(value='items')], values=[Constant(value='array'), Constant(value=1), Constant(value=1), Dict(keys=[Constant(value='type')], values=[Constant(value='integer')])])), Assign(targets=[Name(id='hmap', ctx=Store())], value=Call(func=Name(id='HashTrieMap', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='hset', ctx=Store())], value=Call(func=Name(id='HashTrieSet', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='registry', ctx=Store())], value=Call(func=Name(id='Registry', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='v', ctx=Store())], value=Call(func=Name(id='Draft202012Validator', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[])), FunctionDef(name='registry_data_structures', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Tuple(elts=[Call(func=Attribute(value=Name(id='hmap', ctx=Load()), attr='insert', ctx=Load()), args=[Constant(value='foo'), Constant(value='bar')], keywords=[]), Call(func=Attribute(value=Name(id='hset', ctx=Load()), attr='insert', ctx=Load()), args=[Constant(value='foo')], keywords=[])], ctx=Load()))], decorator_list=[]), FunctionDef(name='registry_add', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='resource', ctx=Store())], value=Call(func=Attribute(value=Name(id='DRAFT202012', ctx=Load()), attr='create_resource', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[])), Return(value=Call(func=Attribute(value=Name(id='registry', ctx=Load()), attr='with_resource', ctx=Load()), args=[], keywords=[keyword(arg='uri', value=Constant(value='urn:example')), keyword(arg='resource', value=Name(id='resource', ctx=Load()))]))], decorator_list=[]), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__')]), body=[ImportFrom(module='pyperf', names=[alias(name='Runner')], level=0), Assign(targets=[Name(id='runner', ctx=Store())], value=Call(func=Name(id='Runner', ctx=Load()), args=[], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='runner', ctx=Load()), attr='bench_func', ctx=Load()), args=[Constant(value='HashMap/HashSet insertion'), Name(id='registry_data_structures', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='runner', ctx=Load()), attr='bench_func', ctx=Load()), args=[Constant(value='Registry insertion'), Name(id='registry_add', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='runner', ctx=Load()), attr='bench_func', ctx=Load()), args=[Constant(value='Success'), Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='v', ctx=Load()), attr='is_valid', ctx=Load()), args=[List(elts=[Constant(value=1)], ctx=Load())], keywords=[]))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='runner', ctx=Load()), attr='bench_func', ctx=Load()), args=[Constant(value='Failure'), Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='v', ctx=Load()), attr='is_valid', ctx=Load()), args=[List(elts=[Constant(value='foo')], ctx=Load())], keywords=[]))], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='runner', ctx=Load()), attr='bench_func', ctx=Load()), args=[Constant(value='Metaschema validation'), Lambda(args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=Call(func=Attribute(value=Name(id='v', ctx=Load()), attr='check_schema', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[]))], keywords=[]))], orelse=[])], type_ignores=[])