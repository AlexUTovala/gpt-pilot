Module(body=[Expr(value=Constant(value='\nCreation and extension of validators, with implementations for existing drafts.\n')), ImportFrom(module='__future__', names=[alias(name='annotations')], level=0), ImportFrom(module='collections', names=[alias(name='deque')], level=0), ImportFrom(module='collections.abc', names=[alias(name='Iterable'), alias(name='Mapping'), alias(name='Sequence')], level=0), ImportFrom(module='functools', names=[alias(name='lru_cache')], level=0), ImportFrom(module='operator', names=[alias(name='methodcaller')], level=0), ImportFrom(module='urllib.parse', names=[alias(name='unquote'), alias(name='urldefrag'), alias(name='urljoin'), alias(name='urlsplit')], level=0), ImportFrom(module='urllib.request', names=[alias(name='urlopen')], level=0), ImportFrom(module='warnings', names=[alias(name='warn')], level=0), Import(names=[alias(name='contextlib')]), Import(names=[alias(name='json')]), Import(names=[alias(name='reprlib')]), Import(names=[alias(name='warnings')]), ImportFrom(module='attrs', names=[alias(name='define'), alias(name='field'), alias(name='fields')], level=0), ImportFrom(module='jsonschema_specifications', names=[alias(name='REGISTRY', asname='SPECIFICATIONS')], level=0), ImportFrom(module='rpds', names=[alias(name='HashTrieMap')], level=0), Import(names=[alias(name='referencing.exceptions')]), Import(names=[alias(name='referencing.jsonschema')]), ImportFrom(module='jsonschema', names=[alias(name='_format'), alias(name='_keywords'), alias(name='_legacy_keywords'), alias(name='_types'), alias(name='_typing'), alias(name='_utils'), alias(name='exceptions')], level=0), ImportFrom(module='jsonschema.protocols', names=[alias(name='Validator')], level=0), Assign(targets=[Name(id='_UNSET', ctx=Store())], value=Call(func=Attribute(value=Name(id='_utils', ctx=Load()), attr='Unset', ctx=Load()), args=[], keywords=[])), AnnAssign(target=Name(id='_VALIDATORS', ctx=Store()), annotation=Subscript(value=Name(id='dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Validator', ctx=Load())], ctx=Load()), ctx=Load()), value=Dict(keys=[], values=[]), simple=1), Assign(targets=[Name(id='_META_SCHEMAS', ctx=Store())], value=Call(func=Attribute(value=Name(id='_utils', ctx=Load()), attr='URIDict', ctx=Load()), args=[], keywords=[])), FunctionDef(name='__getattr__', args=arguments(posonlyargs=[], args=[arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='ErrorTree')]), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value='Importing ErrorTree from jsonschema.validators is deprecated. Instead import it from jsonschema.exceptions.'), Name(id='DeprecationWarning', ctx=Load())], keywords=[keyword(arg='stacklevel', value=Constant(value=2))])), ImportFrom(module='jsonschema.exceptions', names=[alias(name='ErrorTree')], level=0), Return(value=Name(id='ErrorTree', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='validators')]), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value='Accessing jsonschema.validators.validators is deprecated. Use jsonschema.validators.validator_for with a given schema.'), Name(id='DeprecationWarning', ctx=Load())], keywords=[keyword(arg='stacklevel', value=Constant(value=2))])), Return(value=Name(id='_VALIDATORS', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='meta_schemas')]), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value='Accessing jsonschema.validators.meta_schemas is deprecated. Use jsonschema.validators.validator_for with a given schema.'), Name(id='DeprecationWarning', ctx=Load())], keywords=[keyword(arg='stacklevel', value=Constant(value=2))])), Return(value=Name(id='_META_SCHEMAS', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='RefResolver')]), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Attribute(value=Name(id='_RefResolver', ctx=Load()), attr='_DEPRECATION_MESSAGE', ctx=Load()), Name(id='DeprecationWarning', ctx=Load())], keywords=[keyword(arg='stacklevel', value=Constant(value=2))])), Return(value=Name(id='_RefResolver', ctx=Load()))], orelse=[])])])]), Raise(exc=Call(func=Name(id='AttributeError', ctx=Load()), args=[JoinedStr(values=[Constant(value='module '), FormattedValue(value=Name(id='__name__', ctx=Load()), conversion=-1), Constant(value=' has no attribute '), FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1)])], keywords=[]))], decorator_list=[]), FunctionDef(name='validates', args=arguments(posonlyargs=[], args=[arg(arg='version')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n    Register the decorated validator for a ``version`` of the specification.\n\n    Registered validators and their meta schemas will be considered when\n    parsing :kw:`$schema` keywords' URIs.\n\n    Arguments:\n\n        version (str):\n\n            An identifier to use as the version's name\n\n    Returns:\n\n        collections.abc.Callable:\n\n            a class decorator to decorate the validator with the version\n    ")), FunctionDef(name='_validates', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Subscript(value=Name(id='_VALIDATORS', ctx=Load()), slice=Name(id='version', ctx=Load()), ctx=Store())], value=Name(id='cls', ctx=Load())), Assign(targets=[Name(id='meta_schema_id', ctx=Store())], value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='ID_OF', ctx=Load()), args=[Attribute(value=Name(id='cls', ctx=Load()), attr='META_SCHEMA', ctx=Load())], keywords=[])), Assign(targets=[Subscript(value=Name(id='_META_SCHEMAS', ctx=Load()), slice=Name(id='meta_schema_id', ctx=Load()), ctx=Store())], value=Name(id='cls', ctx=Load())), Return(value=Name(id='cls', ctx=Load()))], decorator_list=[]), Return(value=Name(id='_validates', ctx=Load()))], decorator_list=[]), FunctionDef(name='_warn_for_remote_retrieve', args=arguments(posonlyargs=[], args=[arg(arg='uri', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[ImportFrom(module='urllib.request', names=[alias(name='Request'), alias(name='urlopen')], level=0), Assign(targets=[Name(id='headers', ctx=Store())], value=Dict(keys=[Constant(value='User-Agent')], values=[Constant(value='python-jsonschema (deprecated $ref resolution)')])), Assign(targets=[Name(id='request', ctx=Store())], value=Call(func=Name(id='Request', ctx=Load()), args=[Name(id='uri', ctx=Load())], keywords=[keyword(arg='headers', value=Name(id='headers', ctx=Load()))])), With(items=[withitem(context_expr=Call(func=Name(id='urlopen', ctx=Load()), args=[Name(id='request', ctx=Load())], keywords=[]), optional_vars=Name(id='response', ctx=Store()))], body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value='Automatically retrieving remote references can be a security vulnerability and is discouraged by the JSON Schema specifications. Relying on this behavior is deprecated and will shortly become an error. If you are sure you want to remotely retrieve your reference and that it is safe to do so, you can find instructions for doing so via referencing.Registry in the referencing documentation (https://referencing.readthedocs.org).'), Name(id='DeprecationWarning', ctx=Load())], keywords=[keyword(arg='stacklevel', value=Constant(value=9))])), Return(value=Call(func=Attribute(value=Attribute(value=Name(id='referencing', ctx=Load()), attr='Resource', ctx=Load()), attr='from_contents', ctx=Load()), args=[Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='load', ctx=Load()), args=[Name(id='response', ctx=Load())], keywords=[])], keywords=[keyword(arg='default_specification', value=Attribute(value=Attribute(value=Name(id='referencing', ctx=Load()), attr='jsonschema', ctx=Load()), attr='DRAFT202012', ctx=Load()))]))])], decorator_list=[]), Assign(targets=[Name(id='_REMOTE_WARNING_REGISTRY', ctx=Store())], value=Call(func=Attribute(value=Name(id='SPECIFICATIONS', ctx=Load()), attr='combine', ctx=Load()), args=[Call(func=Attribute(value=Name(id='referencing', ctx=Load()), attr='Registry', ctx=Load()), args=[], keywords=[keyword(arg='retrieve', value=Name(id='_warn_for_remote_retrieve', ctx=Load()))])], keywords=[])), FunctionDef(name='create', args=arguments(posonlyargs=[], args=[arg(arg='meta_schema', annotation=Attribute(value=Attribute(value=Name(id='referencing', ctx=Load()), attr='jsonschema', ctx=Load()), attr='ObjectSchema', ctx=Load())), arg(arg='validators', annotation=BinOp(left=Subscript(value=Name(id='Mapping', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Attribute(value=Name(id='_typing', ctx=Load()), attr='SchemaKeywordValidator', ctx=Load())], ctx=Load()), ctx=Load()), op=BitOr(), right=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Subscript(value=Name(id='tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Attribute(value=Name(id='_typing', ctx=Load()), attr='SchemaKeywordValidator', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))), arg(arg='version', annotation=BinOp(left=Name(id='str', ctx=Load()), op=BitOr(), right=Constant(value=None))), arg(arg='type_checker', annotation=Attribute(value=Name(id='_types', ctx=Load()), attr='TypeChecker', ctx=Load())), arg(arg='format_checker', annotation=Attribute(value=Name(id='_format', ctx=Load()), attr='FormatChecker', ctx=Load())), arg(arg='id_of', annotation=Attribute(value=Name(id='_typing', ctx=Load()), attr='id_of', ctx=Load())), arg(arg='applicable_validators', annotation=Attribute(value=Name(id='_typing', ctx=Load()), attr='ApplicableValidators', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Tuple(elts=[], ctx=Load()), Constant(value=None), Attribute(value=Name(id='_types', ctx=Load()), attr='draft202012_type_checker', ctx=Load()), Attribute(value=Name(id='_format', ctx=Load()), attr='draft202012_format_checker', ctx=Load()), Attribute(value=Attribute(value=Attribute(value=Name(id='referencing', ctx=Load()), attr='jsonschema', ctx=Load()), attr='DRAFT202012', ctx=Load()), attr='id_of', ctx=Load()), Call(func=Name(id='methodcaller', ctx=Load()), args=[Constant(value='items')], keywords=[])]), body=[Expr(value=Constant(value="\n    Create a new validator class.\n\n    Arguments:\n\n        meta_schema:\n\n            the meta schema for the new validator class\n\n        validators:\n\n            a mapping from names to callables, where each callable will\n            validate the schema property with the given name.\n\n            Each callable should take 4 arguments:\n\n                1. a validator instance,\n                2. the value of the property being validated within the\n                   instance\n                3. the instance\n                4. the schema\n\n        version:\n\n            an identifier for the version that this validator class will\n            validate. If provided, the returned validator class will\n            have its ``__name__`` set to include the version, and also\n            will have `jsonschema.validators.validates` automatically\n            called for the given version.\n\n        type_checker:\n\n            a type checker, used when applying the :kw:`type` keyword.\n\n            If unprovided, a `jsonschema.TypeChecker` will be created\n            with a set of default types typical of JSON Schema drafts.\n\n        format_checker:\n\n            a format checker, used when applying the :kw:`format` keyword.\n\n            If unprovided, a `jsonschema.FormatChecker` will be created\n            with a set of default formats typical of JSON Schema drafts.\n\n        id_of:\n\n            A function that given a schema, returns its ID.\n\n        applicable_validators:\n\n            A function that, given a schema, returns the list of\n            applicable schema keywords and associated values\n            which will be used to validate the instance.\n            This is mostly used to support pre-draft 7 versions of JSON Schema\n            which specified behavior around ignoring keywords if they were\n            siblings of a ``$ref`` keyword. If you're not attempting to\n            implement similar behavior, you can typically ignore this argument\n            and leave it at its default.\n\n    Returns:\n\n        a new `jsonschema.protocols.Validator` class\n    ")), Assign(targets=[Name(id='format_checker_arg', ctx=Store())], value=Name(id='format_checker', ctx=Load())), Assign(targets=[Name(id='specification', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='referencing', ctx=Load()), attr='jsonschema', ctx=Load()), attr='specification_with', ctx=Load()), args=[], keywords=[keyword(arg='dialect_id', value=BoolOp(op=Or(), values=[Call(func=Name(id='id_of', ctx=Load()), args=[Name(id='meta_schema', ctx=Load())], keywords=[]), Constant(value='urn:unknown-dialect')])), keyword(arg='default', value=Attribute(value=Attribute(value=Name(id='referencing', ctx=Load()), attr='Specification', ctx=Load()), attr='OPAQUE', ctx=Load()))])), ClassDef(name='Validator', bases=[], keywords=[], body=[Assign(targets=[Name(id='VALIDATORS', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[Name(id='validators', ctx=Load())], keywords=[])), Assign(targets=[Name(id='META_SCHEMA', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[Name(id='meta_schema', ctx=Load())], keywords=[])), Assign(targets=[Name(id='TYPE_CHECKER', ctx=Store())], value=Name(id='type_checker', ctx=Load())), Assign(targets=[Name(id='FORMAT_CHECKER', ctx=Store())], value=Name(id='format_checker_arg', ctx=Load())), Assign(targets=[Name(id='ID_OF', ctx=Store())], value=Call(func=Name(id='staticmethod', ctx=Load()), args=[Name(id='id_of', ctx=Load())], keywords=[])), Assign(targets=[Name(id='_APPLICABLE_VALIDATORS', ctx=Store())], value=Name(id='applicable_validators', ctx=Load())), AnnAssign(target=Name(id='schema', ctx=Store()), annotation=Attribute(value=Attribute(value=Name(id='referencing', ctx=Load()), attr='jsonschema', ctx=Load()), attr='Schema', ctx=Load()), value=Call(func=Name(id='field', ctx=Load()), args=[], keywords=[keyword(arg='repr', value=Attribute(value=Name(id='reprlib', ctx=Load()), attr='repr', ctx=Load()))]), simple=1), Assign(targets=[Name(id='_ref_resolver', ctx=Store())], value=Call(func=Name(id='field', ctx=Load()), args=[], keywords=[keyword(arg='default', value=Constant(value=None)), keyword(arg='repr', value=Constant(value=False)), keyword(arg='alias', value=Constant(value='resolver'))])), AnnAssign(target=Name(id='format_checker', ctx=Store()), annotation=BinOp(left=Attribute(value=Name(id='_format', ctx=Load()), attr='FormatChecker', ctx=Load()), op=BitOr(), right=Constant(value=None)), value=Call(func=Name(id='field', ctx=Load()), args=[], keywords=[keyword(arg='default', value=Constant(value=None))]), simple=1), AnnAssign(target=Name(id='_registry', ctx=Store()), annotation=Attribute(value=Attribute(value=Name(id='referencing', ctx=Load()), attr='jsonschema', ctx=Load()), attr='SchemaRegistry', ctx=Load()), value=Call(func=Name(id='field', ctx=Load()), args=[], keywords=[keyword(arg='default', value=Name(id='_REMOTE_WARNING_REGISTRY', ctx=Load())), keyword(arg='kw_only', value=Constant(value=True)), keyword(arg='repr', value=Constant(value=False))]), simple=1), Assign(targets=[Name(id='_resolver', ctx=Store())], value=Call(func=Name(id='field', ctx=Load()), args=[], keywords=[keyword(arg='alias', value=Constant(value='_resolver')), keyword(arg='default', value=Constant(value=None)), keyword(arg='kw_only', value=Constant(value=True)), keyword(arg='repr', value=Constant(value=False))])), FunctionDef(name='__init_subclass__', args=arguments(posonlyargs=[], args=[arg(arg='cls')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value="Subclassing validator classes is not intended to be part of their public API. A future version will make doing so an error, as the behavior of subclasses isn't guaranteed to stay the same between releases of jsonschema. Instead, prefer composition of validators, wrapping them in an object owned entirely by the downstream library."), Name(id='DeprecationWarning', ctx=Load())], keywords=[keyword(arg='stacklevel', value=Constant(value=2))])), FunctionDef(name='evolve', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='changes'), defaults=[]), body=[Assign(targets=[Name(id='cls', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load())), Assign(targets=[Name(id='schema', ctx=Store())], value=Call(func=Attribute(value=Name(id='changes', ctx=Load()), attr='setdefault', ctx=Load()), args=[Constant(value='schema'), Attribute(value=Name(id='self', ctx=Load()), attr='schema', ctx=Load())], keywords=[])), Assign(targets=[Name(id='NewValidator', ctx=Store())], value=Call(func=Name(id='validator_for', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[keyword(arg='default', value=Name(id='cls', ctx=Load()))])), For(target=Name(id='field', ctx=Store()), iter=Call(func=Name(id='fields', ctx=Load()), args=[Name(id='cls', ctx=Load())], keywords=[]), body=[If(test=UnaryOp(op=Not(), operand=Attribute(value=Name(id='field', ctx=Load()), attr='init', ctx=Load())), body=[Continue()], orelse=[]), Assign(targets=[Name(id='attr_name', ctx=Store())], value=Attribute(value=Name(id='field', ctx=Load()), attr='name', ctx=Load())), Assign(targets=[Name(id='init_name', ctx=Store())], value=Attribute(value=Name(id='field', ctx=Load()), attr='alias', ctx=Load())), If(test=Compare(left=Name(id='init_name', ctx=Load()), ops=[NotIn()], comparators=[Name(id='changes', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='changes', ctx=Load()), slice=Name(id='init_name', ctx=Load()), ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='attr_name', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Call(func=Name(id='NewValidator', ctx=Load()), args=[], keywords=[keyword(value=Name(id='changes', ctx=Load()))]))], decorator_list=[]), Assign(targets=[Attribute(value=Name(id='cls', ctx=Load()), attr='evolve', ctx=Store())], value=Name(id='evolve', ctx=Load()))], decorator_list=[]), FunctionDef(name='__attrs_post_init__', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_resolver', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='registry', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_registry', ctx=Load())), If(test=Compare(left=Name(id='registry', ctx=Load()), ops=[IsNot()], comparators=[Name(id='_REMOTE_WARNING_REGISTRY', ctx=Load())]), body=[Assign(targets=[Name(id='registry', ctx=Store())], value=Call(func=Attribute(value=Name(id='SPECIFICATIONS', ctx=Load()), attr='combine', ctx=Load()), args=[Name(id='registry', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='resource', ctx=Store())], value=Call(func=Attribute(value=Name(id='specification', ctx=Load()), attr='create_resource', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='schema', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_resolver', ctx=Store())], value=Call(func=Attribute(value=Name(id='registry', ctx=Load()), attr='resolver_with_root', ctx=Load()), args=[Name(id='resource', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Name(id='push_scope', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_ref_resolver', ctx=Load()), Constant(value='push_scope'), Constant(value=None)], keywords=[])), If(test=Compare(left=Name(id='push_scope', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='id', ctx=Store())], value=Call(func=Name(id='id_of', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='schema', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='id', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Name(id='push_scope', ctx=Load()), args=[Name(id='id', ctx=Load())], keywords=[]))], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='check_schema', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='schema'), arg(arg='format_checker')], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='_UNSET', ctx=Load())]), body=[Assign(targets=[Name(id='Validator', ctx=Store())], value=Call(func=Name(id='validator_for', ctx=Load()), args=[Attribute(value=Name(id='cls', ctx=Load()), attr='META_SCHEMA', ctx=Load())], keywords=[keyword(arg='default', value=Name(id='cls', ctx=Load()))])), If(test=Compare(left=Name(id='format_checker', ctx=Load()), ops=[Is()], comparators=[Name(id='_UNSET', ctx=Load())]), body=[Assign(targets=[Name(id='format_checker', ctx=Store())], value=Attribute(value=Name(id='Validator', ctx=Load()), attr='FORMAT_CHECKER', ctx=Load()))], orelse=[]), Assign(targets=[Name(id='validator', ctx=Store())], value=Call(func=Name(id='Validator', ctx=Load()), args=[], keywords=[keyword(arg='schema', value=Attribute(value=Name(id='cls', ctx=Load()), attr='META_SCHEMA', ctx=Load())), keyword(arg='format_checker', value=Name(id='format_checker', ctx=Load()))])), For(target=Name(id='error', ctx=Store()), iter=Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='iter_errors', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[]), body=[Raise(exc=Call(func=Attribute(value=Attribute(value=Name(id='exceptions', ctx=Load()), attr='SchemaError', ctx=Load()), attr='create_from', ctx=Load()), args=[Name(id='error', ctx=Load())], keywords=[]))], orelse=[])], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='resolver', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[JoinedStr(values=[Constant(value='Accessing '), FormattedValue(value=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()), attr='__name__', ctx=Load()), conversion=-1), Constant(value='.resolver is deprecated as of v4.18.0, in favor of the https://github.com/python-jsonschema/referencing library, which provides more compliant referencing behavior as well as more flexible APIs for customization.')]), Name(id='DeprecationWarning', ctx=Load())], keywords=[keyword(arg='stacklevel', value=Constant(value=2))])), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_ref_resolver', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_ref_resolver', ctx=Store())], value=Call(func=Attribute(value=Name(id='_RefResolver', ctx=Load()), attr='from_schema', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='schema', ctx=Load())], keywords=[keyword(arg='id_of', value=Name(id='id_of', ctx=Load()))]))], orelse=[]), Return(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ref_resolver', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='evolve', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='changes'), defaults=[]), body=[Assign(targets=[Name(id='schema', ctx=Store())], value=Call(func=Attribute(value=Name(id='changes', ctx=Load()), attr='setdefault', ctx=Load()), args=[Constant(value='schema'), Attribute(value=Name(id='self', ctx=Load()), attr='schema', ctx=Load())], keywords=[])), Assign(targets=[Name(id='NewValidator', ctx=Store())], value=Call(func=Name(id='validator_for', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[keyword(arg='default', value=Attribute(value=Name(id='self', ctx=Load()), attr='__class__', ctx=Load()))])), For(target=Tuple(elts=[Name(id='attr_name', ctx=Store()), Name(id='init_name', ctx=Store())], ctx=Store()), iter=Name(id='evolve_fields', ctx=Load()), body=[If(test=Compare(left=Name(id='init_name', ctx=Load()), ops=[NotIn()], comparators=[Name(id='changes', ctx=Load())]), body=[Assign(targets=[Subscript(value=Name(id='changes', ctx=Load()), slice=Name(id='init_name', ctx=Load()), ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='attr_name', ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Call(func=Name(id='NewValidator', ctx=Load()), args=[], keywords=[keyword(value=Name(id='changes', ctx=Load()))]))], decorator_list=[]), FunctionDef(name='iter_errors', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='instance'), arg(arg='_schema')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='_schema', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value='Passing a schema to Validator.iter_errors is deprecated and will be removed in a future release. Call validator.evolve(schema=new_schema).iter_errors(...) instead.'), Name(id='DeprecationWarning', ctx=Load())], keywords=[keyword(arg='stacklevel', value=Constant(value=2))]))], orelse=[Assign(targets=[Name(id='_schema', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='schema', ctx=Load()))]), If(test=Compare(left=Name(id='_schema', ctx=Load()), ops=[Is()], comparators=[Constant(value=True)]), body=[Return()], orelse=[If(test=Compare(left=Name(id='_schema', ctx=Load()), ops=[Is()], comparators=[Constant(value=False)]), body=[Expr(value=Yield(value=Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='ValidationError', ctx=Load()), args=[JoinedStr(values=[Constant(value='False schema does not allow '), FormattedValue(value=Name(id='instance', ctx=Load()), conversion=114)])], keywords=[keyword(arg='validator', value=Constant(value=None)), keyword(arg='validator_value', value=Constant(value=None)), keyword(arg='instance', value=Name(id='instance', ctx=Load())), keyword(arg='schema', value=Name(id='_schema', ctx=Load()))]))), Return()], orelse=[])]), For(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='applicable_validators', ctx=Load()), args=[Name(id='_schema', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='validator', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='VALIDATORS', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='k', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='validator', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Continue()], orelse=[]), Assign(targets=[Name(id='errors', ctx=Store())], value=BoolOp(op=Or(), values=[Call(func=Name(id='validator', ctx=Load()), args=[Name(id='self', ctx=Load()), Name(id='v', ctx=Load()), Name(id='instance', ctx=Load()), Name(id='_schema', ctx=Load())], keywords=[]), Tuple(elts=[], ctx=Load())])), For(target=Name(id='error', ctx=Store()), iter=Name(id='errors', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='error', ctx=Load()), attr='_set', ctx=Load()), args=[], keywords=[keyword(arg='validator', value=Name(id='k', ctx=Load())), keyword(arg='validator_value', value=Name(id='v', ctx=Load())), keyword(arg='instance', value=Name(id='instance', ctx=Load())), keyword(arg='schema', value=Name(id='_schema', ctx=Load())), keyword(arg='type_checker', value=Attribute(value=Name(id='self', ctx=Load()), attr='TYPE_CHECKER', ctx=Load()))])), If(test=Compare(left=Name(id='k', ctx=Load()), ops=[NotIn()], comparators=[Set(elts=[Constant(value='if'), Constant(value='$ref')])]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='error', ctx=Load()), attr='schema_path', ctx=Load()), attr='appendleft', ctx=Load()), args=[Name(id='k', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Yield(value=Name(id='error', ctx=Load())))], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='descend', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='instance'), arg(arg='schema'), arg(arg='path'), arg(arg='schema_path'), arg(arg='resolver')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None), Constant(value=None), Constant(value=None)]), body=[If(test=Compare(left=Name(id='schema', ctx=Load()), ops=[Is()], comparators=[Constant(value=True)]), body=[Return()], orelse=[If(test=Compare(left=Name(id='schema', ctx=Load()), ops=[Is()], comparators=[Constant(value=False)]), body=[Expr(value=Yield(value=Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='ValidationError', ctx=Load()), args=[JoinedStr(values=[Constant(value='False schema does not allow '), FormattedValue(value=Name(id='instance', ctx=Load()), conversion=114)])], keywords=[keyword(arg='validator', value=Constant(value=None)), keyword(arg='validator_value', value=Constant(value=None)), keyword(arg='instance', value=Name(id='instance', ctx=Load())), keyword(arg='schema', value=Name(id='schema', ctx=Load()))]))), Return()], orelse=[])]), If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_ref_resolver', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='evolved', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evolve', ctx=Load()), args=[], keywords=[keyword(arg='schema', value=Name(id='schema', ctx=Load()))]))], orelse=[If(test=Compare(left=Name(id='resolver', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='resolver', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_resolver', ctx=Load()), attr='in_subresource', ctx=Load()), args=[Call(func=Attribute(value=Name(id='specification', ctx=Load()), attr='create_resource', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[])], keywords=[]))], orelse=[]), Assign(targets=[Name(id='evolved', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evolve', ctx=Load()), args=[], keywords=[keyword(arg='schema', value=Name(id='schema', ctx=Load())), keyword(arg='_resolver', value=Name(id='resolver', ctx=Load()))]))]), For(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='applicable_validators', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[]), body=[Assign(targets=[Name(id='validator', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='evolved', ctx=Load()), attr='VALIDATORS', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='k', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='validator', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Continue()], orelse=[]), Assign(targets=[Name(id='errors', ctx=Store())], value=BoolOp(op=Or(), values=[Call(func=Name(id='validator', ctx=Load()), args=[Name(id='evolved', ctx=Load()), Name(id='v', ctx=Load()), Name(id='instance', ctx=Load()), Name(id='schema', ctx=Load())], keywords=[]), Tuple(elts=[], ctx=Load())])), For(target=Name(id='error', ctx=Store()), iter=Name(id='errors', ctx=Load()), body=[Expr(value=Call(func=Attribute(value=Name(id='error', ctx=Load()), attr='_set', ctx=Load()), args=[], keywords=[keyword(arg='validator', value=Name(id='k', ctx=Load())), keyword(arg='validator_value', value=Name(id='v', ctx=Load())), keyword(arg='instance', value=Name(id='instance', ctx=Load())), keyword(arg='schema', value=Name(id='schema', ctx=Load())), keyword(arg='type_checker', value=Attribute(value=Name(id='evolved', ctx=Load()), attr='TYPE_CHECKER', ctx=Load()))])), If(test=Compare(left=Name(id='k', ctx=Load()), ops=[NotIn()], comparators=[Set(elts=[Constant(value='if'), Constant(value='$ref')])]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='error', ctx=Load()), attr='schema_path', ctx=Load()), attr='appendleft', ctx=Load()), args=[Name(id='k', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='error', ctx=Load()), attr='path', ctx=Load()), attr='appendleft', ctx=Load()), args=[Name(id='path', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='schema_path', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='error', ctx=Load()), attr='schema_path', ctx=Load()), attr='appendleft', ctx=Load()), args=[Name(id='schema_path', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Yield(value=Name(id='error', ctx=Load())))], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='validate', args=arguments(posonlyargs=[], args=[arg(arg='self')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[]), body=[For(target=Name(id='error', ctx=Store()), iter=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='iter_errors', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))]), body=[Raise(exc=Name(id='error', ctx=Load()))], orelse=[])], decorator_list=[]), FunctionDef(name='is_type', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='instance'), arg(arg='type')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Try(body=[Return(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='TYPE_CHECKER', ctx=Load()), attr='is_type', ctx=Load()), args=[Name(id='instance', ctx=Load()), Name(id='type', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Name(id='exceptions', ctx=Load()), attr='UndefinedTypeCheck', ctx=Load()), body=[Raise(exc=Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='UnknownType', ctx=Load()), args=[Name(id='type', ctx=Load()), Name(id='instance', ctx=Load()), Attribute(value=Name(id='self', ctx=Load()), attr='schema', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='_validate_reference', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ref'), arg(arg='instance')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Attribute(value=Name(id='self', ctx=Load()), attr='_ref_resolver', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Try(body=[Assign(targets=[Name(id='resolved', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_resolver', ctx=Load()), attr='lookup', ctx=Load()), args=[Name(id='ref', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Attribute(value=Attribute(value=Name(id='referencing', ctx=Load()), attr='exceptions', ctx=Load()), attr='Unresolvable', ctx=Load()), name='err', body=[Raise(exc=Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='_WrappedReferencingError', ctx=Load()), args=[Name(id='err', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[]), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='descend', ctx=Load()), args=[Name(id='instance', ctx=Load()), Attribute(value=Name(id='resolved', ctx=Load()), attr='contents', ctx=Load())], keywords=[keyword(arg='resolver', value=Attribute(value=Name(id='resolved', ctx=Load()), attr='resolver', ctx=Load()))]))], orelse=[Assign(targets=[Name(id='resolve', ctx=Store())], value=Call(func=Name(id='getattr', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='_ref_resolver', ctx=Load()), Constant(value='resolve'), Constant(value=None)], keywords=[])), If(test=Compare(left=Name(id='resolve', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[With(items=[withitem(context_expr=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ref_resolver', ctx=Load()), attr='resolving', ctx=Load()), args=[Name(id='ref', ctx=Load())], keywords=[]), optional_vars=Name(id='resolved', ctx=Store()))], body=[Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='descend', ctx=Load()), args=[Name(id='instance', ctx=Load()), Name(id='resolved', ctx=Load())], keywords=[]))])], orelse=[Assign(targets=[Tuple(elts=[Name(id='scope', ctx=Store()), Name(id='resolved', ctx=Store())], ctx=Store())], value=Call(func=Name(id='resolve', ctx=Load()), args=[Name(id='ref', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ref_resolver', ctx=Load()), attr='push_scope', ctx=Load()), args=[Name(id='scope', ctx=Load())], keywords=[])), Try(body=[Return(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='descend', ctx=Load()), args=[Name(id='instance', ctx=Load()), Name(id='resolved', ctx=Load())], keywords=[])], keywords=[]))], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_ref_resolver', ctx=Load()), attr='pop_scope', ctx=Load()), args=[], keywords=[]))])])])], decorator_list=[]), FunctionDef(name='is_valid', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='instance'), arg(arg='_schema')], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=None)]), body=[If(test=Compare(left=Name(id='_schema', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value='Passing a schema to Validator.is_valid is deprecated and will be removed in a future release. Call validator.evolve(schema=new_schema).is_valid(...) instead.'), Name(id='DeprecationWarning', ctx=Load())], keywords=[keyword(arg='stacklevel', value=Constant(value=2))])), Assign(targets=[Name(id='self', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='evolve', ctx=Load()), args=[], keywords=[keyword(arg='schema', value=Name(id='_schema', ctx=Load()))]))], orelse=[]), Assign(targets=[Name(id='error', ctx=Store())], value=Call(func=Name(id='next', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='iter_errors', ctx=Load()), args=[Name(id='instance', ctx=Load())], keywords=[]), Constant(value=None)], keywords=[])), Return(value=Compare(left=Name(id='error', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]))], decorator_list=[])], decorator_list=[Name(id='define', ctx=Load())]), Assign(targets=[Name(id='evolve_fields', ctx=Store())], value=ListComp(elt=Tuple(elts=[Attribute(value=Name(id='field', ctx=Load()), attr='name', ctx=Load()), Attribute(value=Name(id='field', ctx=Load()), attr='alias', ctx=Load())], ctx=Load()), generators=[comprehension(target=Name(id='field', ctx=Store()), iter=Call(func=Name(id='fields', ctx=Load()), args=[Name(id='Validator', ctx=Load())], keywords=[]), ifs=[Attribute(value=Name(id='field', ctx=Load()), attr='init', ctx=Load())], is_async=0)])), If(test=Compare(left=Name(id='version', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='safe', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='version', ctx=Load()), attr='title', ctx=Load()), args=[], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value=' '), Constant(value='')], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value='-'), Constant(value='')], keywords=[])), Assign(targets=[Attribute(value=Name(id='Validator', ctx=Load()), attr='__name__', ctx=Store()), Attribute(value=Name(id='Validator', ctx=Load()), attr='__qualname__', ctx=Store())], value=JoinedStr(values=[FormattedValue(value=Name(id='safe', ctx=Load()), conversion=-1), Constant(value='Validator')])), Assign(targets=[Name(id='Validator', ctx=Store())], value=Call(func=Call(func=Name(id='validates', ctx=Load()), args=[Name(id='version', ctx=Load())], keywords=[]), args=[Name(id='Validator', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='Validator', ctx=Load()))], decorator_list=[]), FunctionDef(name='extend', args=arguments(posonlyargs=[], args=[arg(arg='validator'), arg(arg='validators'), arg(arg='version'), arg(arg='type_checker'), arg(arg='format_checker')], kwonlyargs=[], kw_defaults=[], defaults=[Tuple(elts=[], ctx=Load()), Constant(value=None), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='\n    Create a new validator class by extending an existing one.\n\n    Arguments:\n\n        validator (jsonschema.protocols.Validator):\n\n            an existing validator class\n\n        validators (collections.abc.Mapping):\n\n            a mapping of new validator callables to extend with, whose\n            structure is as in `create`.\n\n            .. note::\n\n                Any validator callables with the same name as an\n                existing one will (silently) replace the old validator\n                callable entirely, effectively overriding any validation\n                done in the "parent" validator class.\n\n                If you wish to instead extend the behavior of a parent\'s\n                validator callable, delegate and call it directly in\n                the new validator function by retrieving it using\n                ``OldValidator.VALIDATORS["validation_keyword_name"]``.\n\n        version (str):\n\n            a version for the new validator class\n\n        type_checker (jsonschema.TypeChecker):\n\n            a type checker, used when applying the :kw:`type` keyword.\n\n            If unprovided, the type checker of the extended\n            `jsonschema.protocols.Validator` will be carried along.\n\n        format_checker (jsonschema.FormatChecker):\n\n            a format checker, used when applying the :kw:`format` keyword.\n\n            If unprovided, the format checker of the extended\n            `jsonschema.protocols.Validator` will be carried along.\n\n    Returns:\n\n        a new `jsonschema.protocols.Validator` class extending the one\n        provided\n\n    .. note:: Meta Schemas\n\n        The new validator class will have its parent\'s meta schema.\n\n        If you wish to change or extend the meta schema in the new\n        validator class, modify ``META_SCHEMA`` directly on the returned\n        class. Note that no implicit copying is done, so a copy should\n        likely be made before modifying it, in order to not affect the\n        old validator.\n    ')), Assign(targets=[Name(id='all_validators', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[Attribute(value=Name(id='validator', ctx=Load()), attr='VALIDATORS', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='all_validators', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='validators', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='type_checker', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='type_checker', ctx=Store())], value=Attribute(value=Name(id='validator', ctx=Load()), attr='TYPE_CHECKER', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='format_checker', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='format_checker', ctx=Store())], value=Attribute(value=Name(id='validator', ctx=Load()), attr='FORMAT_CHECKER', ctx=Load()))], orelse=[]), Return(value=Call(func=Name(id='create', ctx=Load()), args=[], keywords=[keyword(arg='meta_schema', value=Attribute(value=Name(id='validator', ctx=Load()), attr='META_SCHEMA', ctx=Load())), keyword(arg='validators', value=Name(id='all_validators', ctx=Load())), keyword(arg='version', value=Name(id='version', ctx=Load())), keyword(arg='type_checker', value=Name(id='type_checker', ctx=Load())), keyword(arg='format_checker', value=Name(id='format_checker', ctx=Load())), keyword(arg='id_of', value=Attribute(value=Name(id='validator', ctx=Load()), attr='ID_OF', ctx=Load())), keyword(arg='applicable_validators', value=Attribute(value=Name(id='validator', ctx=Load()), attr='_APPLICABLE_VALIDATORS', ctx=Load()))]))], decorator_list=[]), Assign(targets=[Name(id='Draft3Validator', ctx=Store())], value=Call(func=Name(id='create', ctx=Load()), args=[], keywords=[keyword(arg='meta_schema', value=Call(func=Attribute(value=Name(id='SPECIFICATIONS', ctx=Load()), attr='contents', ctx=Load()), args=[Constant(value='http://json-schema.org/draft-03/schema#')], keywords=[])), keyword(arg='validators', value=Dict(keys=[Constant(value='$ref'), Constant(value='additionalItems'), Constant(value='additionalProperties'), Constant(value='dependencies'), Constant(value='disallow'), Constant(value='divisibleBy'), Constant(value='enum'), Constant(value='extends'), Constant(value='format'), Constant(value='items'), Constant(value='maxItems'), Constant(value='maxLength'), Constant(value='maximum'), Constant(value='minItems'), Constant(value='minLength'), Constant(value='minimum'), Constant(value='pattern'), Constant(value='patternProperties'), Constant(value='properties'), Constant(value='type'), Constant(value='uniqueItems')], values=[Attribute(value=Name(id='_keywords', ctx=Load()), attr='ref', ctx=Load()), Attribute(value=Name(id='_legacy_keywords', ctx=Load()), attr='additionalItems', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='additionalProperties', ctx=Load()), Attribute(value=Name(id='_legacy_keywords', ctx=Load()), attr='dependencies_draft3', ctx=Load()), Attribute(value=Name(id='_legacy_keywords', ctx=Load()), attr='disallow_draft3', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='multipleOf', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='enum', ctx=Load()), Attribute(value=Name(id='_legacy_keywords', ctx=Load()), attr='extends_draft3', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='format', ctx=Load()), Attribute(value=Name(id='_legacy_keywords', ctx=Load()), attr='items_draft3_draft4', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='maxItems', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='maxLength', ctx=Load()), Attribute(value=Name(id='_legacy_keywords', ctx=Load()), attr='maximum_draft3_draft4', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='minItems', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='minLength', ctx=Load()), Attribute(value=Name(id='_legacy_keywords', ctx=Load()), attr='minimum_draft3_draft4', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='pattern', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='patternProperties', ctx=Load()), Attribute(value=Name(id='_legacy_keywords', ctx=Load()), attr='properties_draft3', ctx=Load()), Attribute(value=Name(id='_legacy_keywords', ctx=Load()), attr='type_draft3', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='uniqueItems', ctx=Load())])), keyword(arg='type_checker', value=Attribute(value=Name(id='_types', ctx=Load()), attr='draft3_type_checker', ctx=Load())), keyword(arg='format_checker', value=Attribute(value=Name(id='_format', ctx=Load()), attr='draft3_format_checker', ctx=Load())), keyword(arg='version', value=Constant(value='draft3')), keyword(arg='id_of', value=Attribute(value=Attribute(value=Attribute(value=Name(id='referencing', ctx=Load()), attr='jsonschema', ctx=Load()), attr='DRAFT3', ctx=Load()), attr='id_of', ctx=Load())), keyword(arg='applicable_validators', value=Attribute(value=Name(id='_legacy_keywords', ctx=Load()), attr='ignore_ref_siblings', ctx=Load()))])), Assign(targets=[Name(id='Draft4Validator', ctx=Store())], value=Call(func=Name(id='create', ctx=Load()), args=[], keywords=[keyword(arg='meta_schema', value=Call(func=Attribute(value=Name(id='SPECIFICATIONS', ctx=Load()), attr='contents', ctx=Load()), args=[Constant(value='http://json-schema.org/draft-04/schema#')], keywords=[])), keyword(arg='validators', value=Dict(keys=[Constant(value='$ref'), Constant(value='additionalItems'), Constant(value='additionalProperties'), Constant(value='allOf'), Constant(value='anyOf'), Constant(value='dependencies'), Constant(value='enum'), Constant(value='format'), Constant(value='items'), Constant(value='maxItems'), Constant(value='maxLength'), Constant(value='maxProperties'), Constant(value='maximum'), Constant(value='minItems'), Constant(value='minLength'), Constant(value='minProperties'), Constant(value='minimum'), Constant(value='multipleOf'), Constant(value='not'), Constant(value='oneOf'), Constant(value='pattern'), Constant(value='patternProperties'), Constant(value='properties'), Constant(value='required'), Constant(value='type'), Constant(value='uniqueItems')], values=[Attribute(value=Name(id='_keywords', ctx=Load()), attr='ref', ctx=Load()), Attribute(value=Name(id='_legacy_keywords', ctx=Load()), attr='additionalItems', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='additionalProperties', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='allOf', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='anyOf', ctx=Load()), Attribute(value=Name(id='_legacy_keywords', ctx=Load()), attr='dependencies_draft4_draft6_draft7', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='enum', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='format', ctx=Load()), Attribute(value=Name(id='_legacy_keywords', ctx=Load()), attr='items_draft3_draft4', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='maxItems', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='maxLength', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='maxProperties', ctx=Load()), Attribute(value=Name(id='_legacy_keywords', ctx=Load()), attr='maximum_draft3_draft4', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='minItems', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='minLength', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='minProperties', ctx=Load()), Attribute(value=Name(id='_legacy_keywords', ctx=Load()), attr='minimum_draft3_draft4', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='multipleOf', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='not_', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='oneOf', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='pattern', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='patternProperties', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='properties', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='required', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='type', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='uniqueItems', ctx=Load())])), keyword(arg='type_checker', value=Attribute(value=Name(id='_types', ctx=Load()), attr='draft4_type_checker', ctx=Load())), keyword(arg='format_checker', value=Attribute(value=Name(id='_format', ctx=Load()), attr='draft4_format_checker', ctx=Load())), keyword(arg='version', value=Constant(value='draft4')), keyword(arg='id_of', value=Attribute(value=Attribute(value=Attribute(value=Name(id='referencing', ctx=Load()), attr='jsonschema', ctx=Load()), attr='DRAFT4', ctx=Load()), attr='id_of', ctx=Load())), keyword(arg='applicable_validators', value=Attribute(value=Name(id='_legacy_keywords', ctx=Load()), attr='ignore_ref_siblings', ctx=Load()))])), Assign(targets=[Name(id='Draft6Validator', ctx=Store())], value=Call(func=Name(id='create', ctx=Load()), args=[], keywords=[keyword(arg='meta_schema', value=Call(func=Attribute(value=Name(id='SPECIFICATIONS', ctx=Load()), attr='contents', ctx=Load()), args=[Constant(value='http://json-schema.org/draft-06/schema#')], keywords=[])), keyword(arg='validators', value=Dict(keys=[Constant(value='$ref'), Constant(value='additionalItems'), Constant(value='additionalProperties'), Constant(value='allOf'), Constant(value='anyOf'), Constant(value='const'), Constant(value='contains'), Constant(value='dependencies'), Constant(value='enum'), Constant(value='exclusiveMaximum'), Constant(value='exclusiveMinimum'), Constant(value='format'), Constant(value='items'), Constant(value='maxItems'), Constant(value='maxLength'), Constant(value='maxProperties'), Constant(value='maximum'), Constant(value='minItems'), Constant(value='minLength'), Constant(value='minProperties'), Constant(value='minimum'), Constant(value='multipleOf'), Constant(value='not'), Constant(value='oneOf'), Constant(value='pattern'), Constant(value='patternProperties'), Constant(value='properties'), Constant(value='propertyNames'), Constant(value='required'), Constant(value='type'), Constant(value='uniqueItems')], values=[Attribute(value=Name(id='_keywords', ctx=Load()), attr='ref', ctx=Load()), Attribute(value=Name(id='_legacy_keywords', ctx=Load()), attr='additionalItems', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='additionalProperties', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='allOf', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='anyOf', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='const', ctx=Load()), Attribute(value=Name(id='_legacy_keywords', ctx=Load()), attr='contains_draft6_draft7', ctx=Load()), Attribute(value=Name(id='_legacy_keywords', ctx=Load()), attr='dependencies_draft4_draft6_draft7', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='enum', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='exclusiveMaximum', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='exclusiveMinimum', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='format', ctx=Load()), Attribute(value=Name(id='_legacy_keywords', ctx=Load()), attr='items_draft6_draft7_draft201909', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='maxItems', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='maxLength', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='maxProperties', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='maximum', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='minItems', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='minLength', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='minProperties', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='minimum', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='multipleOf', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='not_', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='oneOf', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='pattern', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='patternProperties', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='properties', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='propertyNames', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='required', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='type', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='uniqueItems', ctx=Load())])), keyword(arg='type_checker', value=Attribute(value=Name(id='_types', ctx=Load()), attr='draft6_type_checker', ctx=Load())), keyword(arg='format_checker', value=Attribute(value=Name(id='_format', ctx=Load()), attr='draft6_format_checker', ctx=Load())), keyword(arg='version', value=Constant(value='draft6')), keyword(arg='id_of', value=Attribute(value=Attribute(value=Attribute(value=Name(id='referencing', ctx=Load()), attr='jsonschema', ctx=Load()), attr='DRAFT6', ctx=Load()), attr='id_of', ctx=Load())), keyword(arg='applicable_validators', value=Attribute(value=Name(id='_legacy_keywords', ctx=Load()), attr='ignore_ref_siblings', ctx=Load()))])), Assign(targets=[Name(id='Draft7Validator', ctx=Store())], value=Call(func=Name(id='create', ctx=Load()), args=[], keywords=[keyword(arg='meta_schema', value=Call(func=Attribute(value=Name(id='SPECIFICATIONS', ctx=Load()), attr='contents', ctx=Load()), args=[Constant(value='http://json-schema.org/draft-07/schema#')], keywords=[])), keyword(arg='validators', value=Dict(keys=[Constant(value='$ref'), Constant(value='additionalItems'), Constant(value='additionalProperties'), Constant(value='allOf'), Constant(value='anyOf'), Constant(value='const'), Constant(value='contains'), Constant(value='dependencies'), Constant(value='enum'), Constant(value='exclusiveMaximum'), Constant(value='exclusiveMinimum'), Constant(value='format'), Constant(value='if'), Constant(value='items'), Constant(value='maxItems'), Constant(value='maxLength'), Constant(value='maxProperties'), Constant(value='maximum'), Constant(value='minItems'), Constant(value='minLength'), Constant(value='minProperties'), Constant(value='minimum'), Constant(value='multipleOf'), Constant(value='not'), Constant(value='oneOf'), Constant(value='pattern'), Constant(value='patternProperties'), Constant(value='properties'), Constant(value='propertyNames'), Constant(value='required'), Constant(value='type'), Constant(value='uniqueItems')], values=[Attribute(value=Name(id='_keywords', ctx=Load()), attr='ref', ctx=Load()), Attribute(value=Name(id='_legacy_keywords', ctx=Load()), attr='additionalItems', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='additionalProperties', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='allOf', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='anyOf', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='const', ctx=Load()), Attribute(value=Name(id='_legacy_keywords', ctx=Load()), attr='contains_draft6_draft7', ctx=Load()), Attribute(value=Name(id='_legacy_keywords', ctx=Load()), attr='dependencies_draft4_draft6_draft7', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='enum', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='exclusiveMaximum', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='exclusiveMinimum', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='format', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='if_', ctx=Load()), Attribute(value=Name(id='_legacy_keywords', ctx=Load()), attr='items_draft6_draft7_draft201909', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='maxItems', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='maxLength', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='maxProperties', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='maximum', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='minItems', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='minLength', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='minProperties', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='minimum', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='multipleOf', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='not_', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='oneOf', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='pattern', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='patternProperties', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='properties', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='propertyNames', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='required', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='type', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='uniqueItems', ctx=Load())])), keyword(arg='type_checker', value=Attribute(value=Name(id='_types', ctx=Load()), attr='draft7_type_checker', ctx=Load())), keyword(arg='format_checker', value=Attribute(value=Name(id='_format', ctx=Load()), attr='draft7_format_checker', ctx=Load())), keyword(arg='version', value=Constant(value='draft7')), keyword(arg='id_of', value=Attribute(value=Attribute(value=Attribute(value=Name(id='referencing', ctx=Load()), attr='jsonschema', ctx=Load()), attr='DRAFT7', ctx=Load()), attr='id_of', ctx=Load())), keyword(arg='applicable_validators', value=Attribute(value=Name(id='_legacy_keywords', ctx=Load()), attr='ignore_ref_siblings', ctx=Load()))])), Assign(targets=[Name(id='Draft201909Validator', ctx=Store())], value=Call(func=Name(id='create', ctx=Load()), args=[], keywords=[keyword(arg='meta_schema', value=Call(func=Attribute(value=Name(id='SPECIFICATIONS', ctx=Load()), attr='contents', ctx=Load()), args=[Constant(value='https://json-schema.org/draft/2019-09/schema')], keywords=[])), keyword(arg='validators', value=Dict(keys=[Constant(value='$recursiveRef'), Constant(value='$ref'), Constant(value='additionalItems'), Constant(value='additionalProperties'), Constant(value='allOf'), Constant(value='anyOf'), Constant(value='const'), Constant(value='contains'), Constant(value='dependentRequired'), Constant(value='dependentSchemas'), Constant(value='enum'), Constant(value='exclusiveMaximum'), Constant(value='exclusiveMinimum'), Constant(value='format'), Constant(value='if'), Constant(value='items'), Constant(value='maxItems'), Constant(value='maxLength'), Constant(value='maxProperties'), Constant(value='maximum'), Constant(value='minItems'), Constant(value='minLength'), Constant(value='minProperties'), Constant(value='minimum'), Constant(value='multipleOf'), Constant(value='not'), Constant(value='oneOf'), Constant(value='pattern'), Constant(value='patternProperties'), Constant(value='properties'), Constant(value='propertyNames'), Constant(value='required'), Constant(value='type'), Constant(value='unevaluatedItems'), Constant(value='unevaluatedProperties'), Constant(value='uniqueItems')], values=[Attribute(value=Name(id='_legacy_keywords', ctx=Load()), attr='recursiveRef', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='ref', ctx=Load()), Attribute(value=Name(id='_legacy_keywords', ctx=Load()), attr='additionalItems', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='additionalProperties', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='allOf', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='anyOf', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='const', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='contains', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='dependentRequired', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='dependentSchemas', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='enum', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='exclusiveMaximum', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='exclusiveMinimum', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='format', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='if_', ctx=Load()), Attribute(value=Name(id='_legacy_keywords', ctx=Load()), attr='items_draft6_draft7_draft201909', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='maxItems', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='maxLength', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='maxProperties', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='maximum', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='minItems', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='minLength', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='minProperties', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='minimum', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='multipleOf', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='not_', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='oneOf', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='pattern', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='patternProperties', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='properties', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='propertyNames', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='required', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='type', ctx=Load()), Attribute(value=Name(id='_legacy_keywords', ctx=Load()), attr='unevaluatedItems_draft2019', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='unevaluatedProperties', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='uniqueItems', ctx=Load())])), keyword(arg='type_checker', value=Attribute(value=Name(id='_types', ctx=Load()), attr='draft201909_type_checker', ctx=Load())), keyword(arg='format_checker', value=Attribute(value=Name(id='_format', ctx=Load()), attr='draft201909_format_checker', ctx=Load())), keyword(arg='version', value=Constant(value='draft2019-09'))])), Assign(targets=[Name(id='Draft202012Validator', ctx=Store())], value=Call(func=Name(id='create', ctx=Load()), args=[], keywords=[keyword(arg='meta_schema', value=Call(func=Attribute(value=Name(id='SPECIFICATIONS', ctx=Load()), attr='contents', ctx=Load()), args=[Constant(value='https://json-schema.org/draft/2020-12/schema')], keywords=[])), keyword(arg='validators', value=Dict(keys=[Constant(value='$dynamicRef'), Constant(value='$ref'), Constant(value='additionalProperties'), Constant(value='allOf'), Constant(value='anyOf'), Constant(value='const'), Constant(value='contains'), Constant(value='dependentRequired'), Constant(value='dependentSchemas'), Constant(value='enum'), Constant(value='exclusiveMaximum'), Constant(value='exclusiveMinimum'), Constant(value='format'), Constant(value='if'), Constant(value='items'), Constant(value='maxItems'), Constant(value='maxLength'), Constant(value='maxProperties'), Constant(value='maximum'), Constant(value='minItems'), Constant(value='minLength'), Constant(value='minProperties'), Constant(value='minimum'), Constant(value='multipleOf'), Constant(value='not'), Constant(value='oneOf'), Constant(value='pattern'), Constant(value='patternProperties'), Constant(value='prefixItems'), Constant(value='properties'), Constant(value='propertyNames'), Constant(value='required'), Constant(value='type'), Constant(value='unevaluatedItems'), Constant(value='unevaluatedProperties'), Constant(value='uniqueItems')], values=[Attribute(value=Name(id='_keywords', ctx=Load()), attr='dynamicRef', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='ref', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='additionalProperties', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='allOf', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='anyOf', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='const', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='contains', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='dependentRequired', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='dependentSchemas', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='enum', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='exclusiveMaximum', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='exclusiveMinimum', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='format', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='if_', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='items', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='maxItems', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='maxLength', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='maxProperties', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='maximum', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='minItems', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='minLength', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='minProperties', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='minimum', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='multipleOf', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='not_', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='oneOf', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='pattern', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='patternProperties', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='prefixItems', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='properties', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='propertyNames', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='required', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='type', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='unevaluatedItems', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='unevaluatedProperties', ctx=Load()), Attribute(value=Name(id='_keywords', ctx=Load()), attr='uniqueItems', ctx=Load())])), keyword(arg='type_checker', value=Attribute(value=Name(id='_types', ctx=Load()), attr='draft202012_type_checker', ctx=Load())), keyword(arg='format_checker', value=Attribute(value=Name(id='_format', ctx=Load()), attr='draft202012_format_checker', ctx=Load())), keyword(arg='version', value=Constant(value='draft2020-12'))])), Assign(targets=[Name(id='_LATEST_VERSION', ctx=Store())], value=Name(id='Draft202012Validator', ctx=Load())), ClassDef(name='_RefResolver', bases=[], keywords=[], body=[Expr(value=Constant(value='\n    Resolve JSON References.\n\n    Arguments:\n\n        base_uri (str):\n\n            The URI of the referring document\n\n        referrer:\n\n            The actual referring document\n\n        store (dict):\n\n            A mapping from URIs to documents to cache\n\n        cache_remote (bool):\n\n            Whether remote refs should be cached after first resolution\n\n        handlers (dict):\n\n            A mapping from URI schemes to functions that should be used\n            to retrieve them\n\n        urljoin_cache (:func:`functools.lru_cache`):\n\n            A cache that will be used for caching the results of joining\n            the resolution scope to subscopes.\n\n        remote_cache (:func:`functools.lru_cache`):\n\n            A cache that will be used for caching the results of\n            resolved remote URLs.\n\n    Attributes:\n\n        cache_remote (bool):\n\n            Whether remote refs should be cached after first resolution\n\n    .. deprecated:: v4.18.0\n\n        ``RefResolver`` has been deprecated in favor of `referencing`.\n    ')), Assign(targets=[Name(id='_DEPRECATION_MESSAGE', ctx=Store())], value=Constant(value='jsonschema.RefResolver is deprecated as of v4.18.0, in favor of the https://github.com/python-jsonschema/referencing library, which provides more compliant referencing behavior as well as more flexible APIs for customization. A future release will remove RefResolver. Please file a feature request (on referencing) if you are missing an API for the kind of customization you need.')), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='base_uri'), arg(arg='referrer'), arg(arg='store'), arg(arg='cache_remote'), arg(arg='handlers'), arg(arg='urljoin_cache'), arg(arg='remote_cache')], kwonlyargs=[], kw_defaults=[], defaults=[Call(func=Name(id='HashTrieMap', ctx=Load()), args=[], keywords=[]), Constant(value=True), Tuple(elts=[], ctx=Load()), Constant(value=None), Constant(value=None)]), body=[If(test=Compare(left=Name(id='urljoin_cache', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='urljoin_cache', ctx=Store())], value=Call(func=Call(func=Name(id='lru_cache', ctx=Load()), args=[Constant(value=1024)], keywords=[]), args=[Name(id='urljoin', ctx=Load())], keywords=[]))], orelse=[]), If(test=Compare(left=Name(id='remote_cache', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='remote_cache', ctx=Store())], value=Call(func=Call(func=Name(id='lru_cache', ctx=Load()), args=[Constant(value=1024)], keywords=[]), args=[Attribute(value=Name(id='self', ctx=Load()), attr='resolve_from_url', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='referrer', ctx=Store())], value=Name(id='referrer', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='cache_remote', ctx=Store())], value=Name(id='cache_remote', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='handlers', ctx=Store())], value=Call(func=Name(id='dict', ctx=Load()), args=[Name(id='handlers', ctx=Load())], keywords=[])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_scopes_stack', ctx=Store())], value=List(elts=[Name(id='base_uri', ctx=Load())], ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='store', ctx=Store())], value=Call(func=Attribute(value=Name(id='_utils', ctx=Load()), attr='URIDict', ctx=Load()), args=[GeneratorExp(elt=Tuple(elts=[Name(id='uri', ctx=Load()), Attribute(value=Name(id='each', ctx=Load()), attr='contents', ctx=Load())], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='uri', ctx=Store()), Name(id='each', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='SPECIFICATIONS', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='store', ctx=Load()), attr='update', ctx=Load()), args=[GeneratorExp(elt=Tuple(elts=[Name(id='id', ctx=Load()), Attribute(value=Name(id='each', ctx=Load()), attr='META_SCHEMA', ctx=Load())], ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='id', ctx=Store()), Name(id='each', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='_META_SCHEMAS', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[], is_async=0)])], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='store', ctx=Load()), attr='update', ctx=Load()), args=[Name(id='store', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='store', ctx=Load()), attr='update', ctx=Load()), args=[GeneratorExp(elt=Tuple(elts=[Subscript(value=Name(id='schema', ctx=Load()), slice=Constant(value='$id'), ctx=Load()), Name(id='schema', ctx=Load())], ctx=Load()), generators=[comprehension(target=Name(id='schema', ctx=Store()), iter=Call(func=Attribute(value=Name(id='store', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[]), ifs=[BoolOp(op=And(), values=[Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='schema', ctx=Load()), Name(id='Mapping', ctx=Load())], keywords=[]), Compare(left=Constant(value='$id'), ops=[In()], comparators=[Name(id='schema', ctx=Load())])])], is_async=0)])], keywords=[])), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='store', ctx=Load()), slice=Name(id='base_uri', ctx=Load()), ctx=Store())], value=Name(id='referrer', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_urljoin_cache', ctx=Store())], value=Name(id='urljoin_cache', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='_remote_cache', ctx=Store())], value=Name(id='remote_cache', ctx=Load()))], decorator_list=[]), FunctionDef(name='from_schema', args=arguments(posonlyargs=[], args=[arg(arg='cls'), arg(arg='schema'), arg(arg='id_of')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[Attribute(value=Attribute(value=Attribute(value=Name(id='referencing', ctx=Load()), attr='jsonschema', ctx=Load()), attr='DRAFT202012', ctx=Load()), attr='id_of', ctx=Load())]), body=[Expr(value=Constant(value='\n        Construct a resolver from a JSON schema object.\n\n        Arguments:\n\n            schema:\n\n                the referring schema\n\n        Returns:\n\n            `_RefResolver`\n        ')), Return(value=Call(func=Name(id='cls', ctx=Load()), args=[Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(arg='base_uri', value=BoolOp(op=Or(), values=[Call(func=Name(id='id_of', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[]), Constant(value='')])), keyword(arg='referrer', value=Name(id='schema', ctx=Load())), keyword(value=Name(id='kwargs', ctx=Load()))]))], decorator_list=[Name(id='classmethod', ctx=Load())]), FunctionDef(name='push_scope', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='scope')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Enter a given sub-scope.\n\n        Treats further dereferences as being performed underneath the\n        given scope.\n        ')), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_scopes_stack', ctx=Load()), attr='append', ctx=Load()), args=[Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_urljoin_cache', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='resolution_scope', ctx=Load()), Name(id='scope', ctx=Load())], keywords=[])], keywords=[]))], decorator_list=[]), FunctionDef(name='pop_scope', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Exit the most recent entered scope.\n\n        Treats further dereferences as being performed underneath the\n        original scope.\n\n        Don't call this method more times than `push_scope` has been\n        called.\n        ")), Try(body=[Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='_scopes_stack', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[]))], handlers=[ExceptHandler(type=Name(id='IndexError', ctx=Load()), body=[Raise(exc=Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='_RefResolutionError', ctx=Load()), args=[Constant(value='Failed to pop the scope from an empty stack. `pop_scope()` should only be called once for every `push_scope()`')], keywords=[]))])], orelse=[], finalbody=[])], decorator_list=[]), FunctionDef(name='resolution_scope', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Retrieve the current resolution scope.\n        ')), Return(value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='_scopes_stack', ctx=Load()), slice=UnaryOp(op=USub(), operand=Constant(value=1)), ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='base_uri', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Retrieve the current base URI, not including any fragment.\n        ')), Assign(targets=[Tuple(elts=[Name(id='uri', ctx=Store()), Name(id='_', ctx=Store())], ctx=Store())], value=Call(func=Name(id='urldefrag', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='resolution_scope', ctx=Load())], keywords=[])), Return(value=Name(id='uri', ctx=Load()))], decorator_list=[Name(id='property', ctx=Load())]), FunctionDef(name='in_scope', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='scope')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Temporarily enter the given scope for the duration of the context.\n\n        .. deprecated:: v4.0.0\n        ')), Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value='jsonschema.RefResolver.in_scope is deprecated and will be removed in a future release.'), Name(id='DeprecationWarning', ctx=Load())], keywords=[keyword(arg='stacklevel', value=Constant(value=3))])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='push_scope', ctx=Load()), args=[Name(id='scope', ctx=Load())], keywords=[])), Try(body=[Expr(value=Yield())], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='pop_scope', ctx=Load()), args=[], keywords=[]))])], decorator_list=[Attribute(value=Name(id='contextlib', ctx=Load()), attr='contextmanager', ctx=Load())]), FunctionDef(name='resolving', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ref')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Resolve the given ``ref`` and enter its resolution scope.\n\n        Exits the scope on exit of this context manager.\n\n        Arguments:\n\n            ref (str):\n\n                The reference to resolve\n        ')), Assign(targets=[Tuple(elts=[Name(id='url', ctx=Store()), Name(id='resolved', ctx=Store())], ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='resolve', ctx=Load()), args=[Name(id='ref', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='push_scope', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[])), Try(body=[Expr(value=Yield(value=Name(id='resolved', ctx=Load())))], handlers=[], orelse=[], finalbody=[Expr(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='pop_scope', ctx=Load()), args=[], keywords=[]))])], decorator_list=[Attribute(value=Name(id='contextlib', ctx=Load()), attr='contextmanager', ctx=Load())]), FunctionDef(name='_find_in_referrer', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='key')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Subscript(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_subschemas_cache', ctx=Load()), args=[], keywords=[]), slice=Name(id='key', ctx=Load()), ctx=Load()))], decorator_list=[]), FunctionDef(name='_get_subschemas_cache', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='cache', ctx=Store())], value=DictComp(key=Name(id='key', ctx=Load()), value=List(elts=[], ctx=Load()), generators=[comprehension(target=Name(id='key', ctx=Store()), iter=Name(id='_SUBSCHEMAS_KEYWORDS', ctx=Load()), ifs=[], is_async=0)])), For(target=Tuple(elts=[Name(id='keyword', ctx=Store()), Name(id='subschema', ctx=Store())], ctx=Store()), iter=Call(func=Name(id='_search_schema', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='referrer', ctx=Load()), Name(id='_match_subschema_keywords', ctx=Load())], keywords=[]), body=[Expr(value=Call(func=Attribute(value=Subscript(value=Name(id='cache', ctx=Load()), slice=Name(id='keyword', ctx=Load()), ctx=Load()), attr='append', ctx=Load()), args=[Name(id='subschema', ctx=Load())], keywords=[]))], orelse=[]), Return(value=Name(id='cache', ctx=Load()))], decorator_list=[Name(id='lru_cache', ctx=Load())]), FunctionDef(name='_find_in_subschemas', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='url')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='subschemas', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_get_subschemas_cache', ctx=Load()), args=[], keywords=[]), slice=Constant(value='$id'), ctx=Load())), If(test=UnaryOp(op=Not(), operand=Name(id='subschemas', ctx=Load())), body=[Return(value=Constant(value=None))], orelse=[]), Assign(targets=[Tuple(elts=[Name(id='uri', ctx=Store()), Name(id='fragment', ctx=Store())], ctx=Store())], value=Call(func=Name(id='urldefrag', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[])), For(target=Name(id='subschema', ctx=Store()), iter=Name(id='subschemas', ctx=Load()), body=[Assign(targets=[Name(id='id', ctx=Store())], value=Subscript(value=Name(id='subschema', ctx=Load()), slice=Constant(value='$id'), ctx=Load())), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='id', ctx=Load()), Name(id='str', ctx=Load())], keywords=[])), body=[Continue()], orelse=[]), Assign(targets=[Name(id='target_uri', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_urljoin_cache', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='resolution_scope', ctx=Load()), Name(id='id', ctx=Load())], keywords=[])), If(test=Compare(left=Call(func=Attribute(value=Name(id='target_uri', ctx=Load()), attr='rstrip', ctx=Load()), args=[Constant(value='/')], keywords=[]), ops=[Eq()], comparators=[Call(func=Attribute(value=Name(id='uri', ctx=Load()), attr='rstrip', ctx=Load()), args=[Constant(value='/')], keywords=[])]), body=[If(test=Name(id='fragment', ctx=Load()), body=[Assign(targets=[Name(id='subschema', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='resolve_fragment', ctx=Load()), args=[Name(id='subschema', ctx=Load()), Name(id='fragment', ctx=Load())], keywords=[]))], orelse=[]), Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='store', ctx=Load()), slice=Name(id='url', ctx=Load()), ctx=Store())], value=Name(id='subschema', ctx=Load())), Return(value=Tuple(elts=[Name(id='url', ctx=Load()), Name(id='subschema', ctx=Load())], ctx=Load()))], orelse=[])], orelse=[]), Return(value=Constant(value=None))], decorator_list=[Name(id='lru_cache', ctx=Load())]), FunctionDef(name='resolve', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='ref')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Resolve the given reference.\n        ')), Assign(targets=[Name(id='url', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_urljoin_cache', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='resolution_scope', ctx=Load()), Name(id='ref', ctx=Load())], keywords=[]), attr='rstrip', ctx=Load()), args=[Constant(value='/')], keywords=[])), Assign(targets=[Name(id='match', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_find_in_subschemas', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='match', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Return(value=Name(id='match', ctx=Load()))], orelse=[]), Return(value=Tuple(elts=[Name(id='url', ctx=Load()), Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_remote_cache', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[])], ctx=Load()))], decorator_list=[]), FunctionDef(name='resolve_from_url', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='url')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Resolve the given URL.\n        ')), Assign(targets=[Tuple(elts=[Name(id='url', ctx=Store()), Name(id='fragment', ctx=Store())], ctx=Store())], value=Call(func=Name(id='urldefrag', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='url', ctx=Load())), body=[Assign(targets=[Name(id='url', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='base_uri', ctx=Load()))], orelse=[]), Try(body=[Assign(targets=[Name(id='document', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='store', ctx=Load()), slice=Name(id='url', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Name(id='KeyError', ctx=Load()), body=[Try(body=[Assign(targets=[Name(id='document', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='resolve_remote', ctx=Load()), args=[Name(id='url', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='Exception', ctx=Load()), name='exc', body=[Raise(exc=Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='_RefResolutionError', ctx=Load()), args=[Name(id='exc', ctx=Load())], keywords=[]))])], orelse=[], finalbody=[])])], orelse=[], finalbody=[]), Return(value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='resolve_fragment', ctx=Load()), args=[Name(id='document', ctx=Load()), Name(id='fragment', ctx=Load())], keywords=[]))], decorator_list=[]), FunctionDef(name='resolve_fragment', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='document'), arg(arg='fragment')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='\n        Resolve a ``fragment`` within the referenced ``document``.\n\n        Arguments:\n\n            document:\n\n                The referent document\n\n            fragment (str):\n\n                a URI fragment to resolve within it\n        ')), Assign(targets=[Name(id='fragment', ctx=Store())], value=Call(func=Attribute(value=Name(id='fragment', ctx=Load()), attr='lstrip', ctx=Load()), args=[Constant(value='/')], keywords=[])), If(test=UnaryOp(op=Not(), operand=Name(id='fragment', ctx=Load())), body=[Return(value=Name(id='document', ctx=Load()))], orelse=[]), If(test=Compare(left=Name(id='document', ctx=Load()), ops=[Is()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='referrer', ctx=Load())]), body=[Assign(targets=[Name(id='find', ctx=Store())], value=Attribute(value=Name(id='self', ctx=Load()), attr='_find_in_referrer', ctx=Load()))], orelse=[FunctionDef(name='find', args=arguments(posonlyargs=[], args=[arg(arg='key')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=YieldFrom(value=Call(func=Name(id='_search_schema', ctx=Load()), args=[Name(id='document', ctx=Load()), Call(func=Name(id='_match_keyword', ctx=Load()), args=[Name(id='key', ctx=Load())], keywords=[])], keywords=[])))], decorator_list=[])]), For(target=Name(id='keyword', ctx=Store()), iter=List(elts=[Constant(value='$anchor'), Constant(value='$dynamicAnchor')], ctx=Load()), body=[For(target=Name(id='subschema', ctx=Store()), iter=Call(func=Name(id='find', ctx=Load()), args=[Name(id='keyword', ctx=Load())], keywords=[]), body=[If(test=Compare(left=Name(id='fragment', ctx=Load()), ops=[Eq()], comparators=[Subscript(value=Name(id='subschema', ctx=Load()), slice=Name(id='keyword', ctx=Load()), ctx=Load())]), body=[Return(value=Name(id='subschema', ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), For(target=Name(id='keyword', ctx=Store()), iter=List(elts=[Constant(value='id'), Constant(value='$id')], ctx=Load()), body=[For(target=Name(id='subschema', ctx=Store()), iter=Call(func=Name(id='find', ctx=Load()), args=[Name(id='keyword', ctx=Load())], keywords=[]), body=[If(test=Compare(left=BinOp(left=Constant(value='#'), op=Add(), right=Name(id='fragment', ctx=Load())), ops=[Eq()], comparators=[Subscript(value=Name(id='subschema', ctx=Load()), slice=Name(id='keyword', ctx=Load()), ctx=Load())]), body=[Return(value=Name(id='subschema', ctx=Load()))], orelse=[])], orelse=[])], orelse=[]), Assign(targets=[Name(id='parts', ctx=Store())], value=IfExp(test=Name(id='fragment', ctx=Load()), body=Call(func=Attribute(value=Call(func=Name(id='unquote', ctx=Load()), args=[Name(id='fragment', ctx=Load())], keywords=[]), attr='split', ctx=Load()), args=[Constant(value='/')], keywords=[]), orelse=List(elts=[], ctx=Load()))), For(target=Name(id='part', ctx=Store()), iter=Name(id='parts', ctx=Load()), body=[Assign(targets=[Name(id='part', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='part', ctx=Load()), attr='replace', ctx=Load()), args=[Constant(value='~1'), Constant(value='/')], keywords=[]), attr='replace', ctx=Load()), args=[Constant(value='~0'), Constant(value='~')], keywords=[])), If(test=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='document', ctx=Load()), Name(id='Sequence', ctx=Load())], keywords=[]), body=[Try(body=[Assign(targets=[Name(id='part', ctx=Store())], value=Call(func=Name(id='int', ctx=Load()), args=[Name(id='part', ctx=Load())], keywords=[]))], handlers=[ExceptHandler(type=Name(id='ValueError', ctx=Load()), body=[Pass()])], orelse=[], finalbody=[])], orelse=[]), Try(body=[Assign(targets=[Name(id='document', ctx=Store())], value=Subscript(value=Name(id='document', ctx=Load()), slice=Name(id='part', ctx=Load()), ctx=Load()))], handlers=[ExceptHandler(type=Tuple(elts=[Name(id='TypeError', ctx=Load()), Name(id='LookupError', ctx=Load())], ctx=Load()), body=[Raise(exc=Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='_RefResolutionError', ctx=Load()), args=[JoinedStr(values=[Constant(value='Unresolvable JSON pointer: '), FormattedValue(value=Name(id='fragment', ctx=Load()), conversion=114)])], keywords=[]))])], orelse=[], finalbody=[])], orelse=[]), Return(value=Name(id='document', ctx=Load()))], decorator_list=[]), FunctionDef(name='resolve_remote', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='uri')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value="\n        Resolve a remote ``uri``.\n\n        If called directly, does not check the store first, but after\n        retrieving the document at the specified URI it will be saved in\n        the store if :attr:`cache_remote` is True.\n\n        .. note::\n\n            If the requests_ library is present, ``jsonschema`` will use it to\n            request the remote ``uri``, so that the correct encoding is\n            detected and used.\n\n            If it isn't, or if the scheme of the ``uri`` is not ``http`` or\n            ``https``, UTF-8 is assumed.\n\n        Arguments:\n\n            uri (str):\n\n                The URI to resolve\n\n        Returns:\n\n            The retrieved document\n\n        .. _requests: https://pypi.org/project/requests/\n        ")), Try(body=[Import(names=[alias(name='requests')])], handlers=[ExceptHandler(type=Name(id='ImportError', ctx=Load()), body=[Assign(targets=[Name(id='requests', ctx=Store())], value=Constant(value=None))])], orelse=[], finalbody=[]), Assign(targets=[Name(id='scheme', ctx=Store())], value=Attribute(value=Call(func=Name(id='urlsplit', ctx=Load()), args=[Name(id='uri', ctx=Load())], keywords=[]), attr='scheme', ctx=Load())), If(test=Compare(left=Name(id='scheme', ctx=Load()), ops=[In()], comparators=[Attribute(value=Name(id='self', ctx=Load()), attr='handlers', ctx=Load())]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='handlers', ctx=Load()), slice=Name(id='scheme', ctx=Load()), ctx=Load()), args=[Name(id='uri', ctx=Load())], keywords=[]))], orelse=[If(test=BoolOp(op=And(), values=[Compare(left=Name(id='scheme', ctx=Load()), ops=[In()], comparators=[List(elts=[Constant(value='http'), Constant(value='https')], ctx=Load())]), Name(id='requests', ctx=Load())]), body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Call(func=Attribute(value=Name(id='requests', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='uri', ctx=Load())], keywords=[]), attr='json', ctx=Load()), args=[], keywords=[]))], orelse=[With(items=[withitem(context_expr=Call(func=Name(id='urlopen', ctx=Load()), args=[Name(id='uri', ctx=Load())], keywords=[]), optional_vars=Name(id='url', ctx=Store()))], body=[Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='loads', ctx=Load()), args=[Call(func=Attribute(value=Call(func=Attribute(value=Name(id='url', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]), attr='decode', ctx=Load()), args=[Constant(value='utf-8')], keywords=[])], keywords=[]))])])]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='cache_remote', ctx=Load()), body=[Assign(targets=[Subscript(value=Attribute(value=Name(id='self', ctx=Load()), attr='store', ctx=Load()), slice=Name(id='uri', ctx=Load()), ctx=Store())], value=Name(id='result', ctx=Load()))], orelse=[]), Return(value=Name(id='result', ctx=Load()))], decorator_list=[])], decorator_list=[]), Assign(targets=[Name(id='_SUBSCHEMAS_KEYWORDS', ctx=Store())], value=Tuple(elts=[Constant(value='$id'), Constant(value='id'), Constant(value='$anchor'), Constant(value='$dynamicAnchor')], ctx=Load())), FunctionDef(name='_match_keyword', args=arguments(posonlyargs=[], args=[arg(arg='keyword')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[FunctionDef(name='matcher', args=arguments(posonlyargs=[], args=[arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='keyword', ctx=Load()), ops=[In()], comparators=[Name(id='value', ctx=Load())]), body=[Expr(value=Yield(value=Name(id='value', ctx=Load())))], orelse=[])], decorator_list=[]), Return(value=Name(id='matcher', ctx=Load()))], decorator_list=[]), FunctionDef(name='_match_subschema_keywords', args=arguments(posonlyargs=[], args=[arg(arg='value')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[For(target=Name(id='keyword', ctx=Store()), iter=Name(id='_SUBSCHEMAS_KEYWORDS', ctx=Load()), body=[If(test=Compare(left=Name(id='keyword', ctx=Load()), ops=[In()], comparators=[Name(id='value', ctx=Load())]), body=[Expr(value=Yield(value=Tuple(elts=[Name(id='keyword', ctx=Load()), Name(id='value', ctx=Load())], ctx=Load())))], orelse=[])], orelse=[])], decorator_list=[]), FunctionDef(name='_search_schema', args=arguments(posonlyargs=[], args=[arg(arg='schema'), arg(arg='matcher')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Breadth-first search routine.')), Assign(targets=[Name(id='values', ctx=Store())], value=Call(func=Name(id='deque', ctx=Load()), args=[List(elts=[Name(id='schema', ctx=Load())], ctx=Load())], keywords=[])), While(test=Name(id='values', ctx=Load()), body=[Assign(targets=[Name(id='value', ctx=Store())], value=Call(func=Attribute(value=Name(id='values', ctx=Load()), attr='pop', ctx=Load()), args=[], keywords=[])), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='isinstance', ctx=Load()), args=[Name(id='value', ctx=Load()), Name(id='dict', ctx=Load())], keywords=[])), body=[Continue()], orelse=[]), Expr(value=YieldFrom(value=Call(func=Name(id='matcher', ctx=Load()), args=[Name(id='value', ctx=Load())], keywords=[]))), Expr(value=Call(func=Attribute(value=Name(id='values', ctx=Load()), attr='extendleft', ctx=Load()), args=[Call(func=Attribute(value=Name(id='value', ctx=Load()), attr='values', ctx=Load()), args=[], keywords=[])], keywords=[]))], orelse=[])], decorator_list=[]), FunctionDef(name='validate', args=arguments(posonlyargs=[], args=[arg(arg='instance'), arg(arg='schema'), arg(arg='cls')], vararg=arg(arg='args'), kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs'), defaults=[Constant(value=None)]), body=[Expr(value=Constant(value='\n    Validate an instance under the given schema.\n\n        >>> validate([2, 3, 4], {"maxItems": 2})\n        Traceback (most recent call last):\n            ...\n        ValidationError: [2, 3, 4] is too long\n\n    :func:`~jsonschema.validators.validate` will first verify that the\n    provided schema is itself valid, since not doing so can lead to less\n    obvious error messages and fail in less obvious or consistent ways.\n\n    If you know you have a valid schema already, especially\n    if you intend to validate multiple instances with\n    the same schema, you likely would prefer using the\n    `jsonschema.protocols.Validator.validate` method directly on a\n    specific validator (e.g. ``Draft202012Validator.validate``).\n\n\n    Arguments:\n\n        instance:\n\n            The instance to validate\n\n        schema:\n\n            The schema to validate with\n\n        cls (jsonschema.protocols.Validator):\n\n            The class that will be used to validate the instance.\n\n    If the ``cls`` argument is not provided, two things will happen\n    in accordance with the specification. First, if the schema has a\n    :kw:`$schema` keyword containing a known meta-schema [#]_ then the\n    proper validator will be used. The specification recommends that\n    all schemas contain :kw:`$schema` properties for this reason. If no\n    :kw:`$schema` property is found, the default validator class is the\n    latest released draft.\n\n    Any other provided positional and keyword arguments will be passed\n    on when instantiating the ``cls``.\n\n    Raises:\n\n        `jsonschema.exceptions.ValidationError`:\n\n            if the instance is invalid\n\n        `jsonschema.exceptions.SchemaError`:\n\n            if the schema itself is invalid\n\n    .. rubric:: Footnotes\n    .. [#] known by a validator registered with\n        `jsonschema.validators.validates`\n    ')), If(test=Compare(left=Name(id='cls', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[Assign(targets=[Name(id='cls', ctx=Store())], value=Call(func=Name(id='validator_for', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[]))], orelse=[]), Expr(value=Call(func=Attribute(value=Name(id='cls', ctx=Load()), attr='check_schema', ctx=Load()), args=[Name(id='schema', ctx=Load())], keywords=[])), Assign(targets=[Name(id='validator', ctx=Store())], value=Call(func=Name(id='cls', ctx=Load()), args=[Name(id='schema', ctx=Load()), Starred(value=Name(id='args', ctx=Load()), ctx=Load())], keywords=[keyword(value=Name(id='kwargs', ctx=Load()))])), Assign(targets=[Name(id='error', ctx=Store())], value=Call(func=Attribute(value=Name(id='exceptions', ctx=Load()), attr='best_match', ctx=Load()), args=[Call(func=Attribute(value=Name(id='validator', ctx=Load()), attr='iter_errors', ctx=Load()), args=[Name(id='instance', ctx=Load())], keywords=[])], keywords=[])), If(test=Compare(left=Name(id='error', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Raise(exc=Name(id='error', ctx=Load()))], orelse=[])], decorator_list=[]), FunctionDef(name='validator_for', args=arguments(posonlyargs=[], args=[arg(arg='schema'), arg(arg='default')], kwonlyargs=[], kw_defaults=[], defaults=[Name(id='_UNSET', ctx=Load())]), body=[Expr(value=Constant(value='\n    Retrieve the validator class appropriate for validating the given schema.\n\n    Uses the :kw:`$schema` keyword that should be present in the given\n    schema to look up the appropriate validator class.\n\n    Arguments:\n\n        schema (collections.abc.Mapping or bool):\n\n            the schema to look at\n\n        default:\n\n            the default to return if the appropriate validator class\n            cannot be determined.\n\n            If unprovided, the default is to return the latest supported\n            draft.\n\n    Examples:\n\n        The :kw:`$schema` JSON Schema keyword will control which validator\n        class is returned:\n\n        >>> schema = {\n        ...     "$schema": "https://json-schema.org/draft/2020-12/schema",\n        ...     "type": "integer",\n        ... }\n        >>> jsonschema.validators.validator_for(schema)\n        <class \'jsonschema.validators.Draft202012Validator\'>\n\n\n        Here, a draft 7 schema instead will return the draft 7 validator:\n\n        >>> schema = {\n        ...     "$schema": "http://json-schema.org/draft-07/schema#",\n        ...     "type": "integer",\n        ... }\n        >>> jsonschema.validators.validator_for(schema)\n        <class \'jsonschema.validators.Draft7Validator\'>\n\n\n        Schemas with no ``$schema`` keyword will fallback to the default\n        argument:\n\n        >>> schema = {"type": "integer"}\n        >>> jsonschema.validators.validator_for(\n        ...     schema, default=Draft7Validator,\n        ... )\n        <class \'jsonschema.validators.Draft7Validator\'>\n\n        or if none is provided, to the latest version supported.\n        Always including the keyword when authoring schemas is highly\n        recommended.\n\n    ')), Assign(targets=[Name(id='DefaultValidator', ctx=Store())], value=IfExp(test=Compare(left=Name(id='default', ctx=Load()), ops=[Is()], comparators=[Name(id='_UNSET', ctx=Load())]), body=Name(id='_LATEST_VERSION', ctx=Load()), orelse=Name(id='default', ctx=Load()))), If(test=BoolOp(op=Or(), values=[Compare(left=Name(id='schema', ctx=Load()), ops=[Is()], comparators=[Constant(value=True)]), Compare(left=Name(id='schema', ctx=Load()), ops=[Is()], comparators=[Constant(value=False)]), Compare(left=Constant(value='$schema'), ops=[NotIn()], comparators=[Name(id='schema', ctx=Load())])]), body=[Return(value=Name(id='DefaultValidator', ctx=Load()))], orelse=[]), If(test=BoolOp(op=And(), values=[Compare(left=Subscript(value=Name(id='schema', ctx=Load()), slice=Constant(value='$schema'), ctx=Load()), ops=[NotIn()], comparators=[Name(id='_META_SCHEMAS', ctx=Load())]), Compare(left=Name(id='default', ctx=Load()), ops=[Is()], comparators=[Name(id='_UNSET', ctx=Load())])]), body=[Expr(value=Call(func=Name(id='warn', ctx=Load()), args=[Constant(value='The metaschema specified by $schema was not found. Using the latest draft to validate, but this will raise an error in the future.'), Name(id='DeprecationWarning', ctx=Load())], keywords=[keyword(arg='stacklevel', value=Constant(value=2))]))], orelse=[]), Return(value=Call(func=Attribute(value=Name(id='_META_SCHEMAS', ctx=Load()), attr='get', ctx=Load()), args=[Subscript(value=Name(id='schema', ctx=Load()), slice=Constant(value='$schema'), ctx=Load()), Name(id='DefaultValidator', ctx=Load())], keywords=[]))], decorator_list=[])], type_ignores=[])