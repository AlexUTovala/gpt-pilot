Module(body=[Expr(value=Constant(value='\nAn implementation of JSON Schema for Python.\n\nThe main functionality is provided by the validator classes for each of the\nsupported JSON Schema versions.\n\nMost commonly, `jsonschema.validators.validate` is the quickest way to simply\nvalidate a given instance under a schema, and will create a validator\nfor you.\n')), Import(names=[alias(name='warnings')]), ImportFrom(module='jsonschema._format', names=[alias(name='FormatChecker')], level=0), ImportFrom(module='jsonschema._types', names=[alias(name='TypeChecker')], level=0), ImportFrom(module='jsonschema.exceptions', names=[alias(name='SchemaError'), alias(name='ValidationError')], level=0), ImportFrom(module='jsonschema.validators', names=[alias(name='Draft3Validator'), alias(name='Draft4Validator'), alias(name='Draft6Validator'), alias(name='Draft7Validator'), alias(name='Draft201909Validator'), alias(name='Draft202012Validator'), alias(name='validate')], level=0), FunctionDef(name='__getattr__', args=arguments(posonlyargs=[], args=[arg(arg='name')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Compare(left=Name(id='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__version__')]), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value="Accessing jsonschema.__version__ is deprecated and will be removed in a future release. Use importlib.metadata directly to query for jsonschema's version."), Name(id='DeprecationWarning', ctx=Load())], keywords=[keyword(arg='stacklevel', value=Constant(value=2))])), ImportFrom(module='importlib', names=[alias(name='metadata')], level=0), Return(value=Call(func=Attribute(value=Name(id='metadata', ctx=Load()), attr='version', ctx=Load()), args=[Constant(value='jsonschema')], keywords=[]))], orelse=[If(test=Compare(left=Name(id='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='RefResolver')]), body=[ImportFrom(module='jsonschema.validators', names=[alias(name='_RefResolver')], level=0), Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Attribute(value=Name(id='_RefResolver', ctx=Load()), attr='_DEPRECATION_MESSAGE', ctx=Load()), Name(id='DeprecationWarning', ctx=Load())], keywords=[keyword(arg='stacklevel', value=Constant(value=2))])), Return(value=Name(id='_RefResolver', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='ErrorTree')]), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value='Importing ErrorTree directly from the jsonschema package is deprecated and will become an ImportError. Import it from jsonschema.exceptions instead.'), Name(id='DeprecationWarning', ctx=Load())], keywords=[keyword(arg='stacklevel', value=Constant(value=2))])), ImportFrom(module='jsonschema.exceptions', names=[alias(name='ErrorTree')], level=0), Return(value=Name(id='ErrorTree', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='FormatError')]), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value='Importing FormatError directly from the jsonschema package is deprecated and will become an ImportError. Import it from jsonschema.exceptions instead.'), Name(id='DeprecationWarning', ctx=Load())], keywords=[keyword(arg='stacklevel', value=Constant(value=2))])), ImportFrom(module='jsonschema.exceptions', names=[alias(name='FormatError')], level=0), Return(value=Name(id='FormatError', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='Validator')]), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Constant(value='Importing Validator directly from the jsonschema package is deprecated and will become an ImportError. Import it from jsonschema.protocols instead.'), Name(id='DeprecationWarning', ctx=Load())], keywords=[keyword(arg='stacklevel', value=Constant(value=2))])), ImportFrom(module='jsonschema.protocols', names=[alias(name='Validator')], level=0), Return(value=Name(id='Validator', ctx=Load()))], orelse=[If(test=Compare(left=Name(id='name', ctx=Load()), ops=[Eq()], comparators=[Constant(value='RefResolutionError')]), body=[ImportFrom(module='jsonschema.exceptions', names=[alias(name='_RefResolutionError')], level=0), Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[Attribute(value=Name(id='_RefResolutionError', ctx=Load()), attr='_DEPRECATION_MESSAGE', ctx=Load()), Name(id='DeprecationWarning', ctx=Load())], keywords=[keyword(arg='stacklevel', value=Constant(value=2))])), Return(value=Name(id='_RefResolutionError', ctx=Load()))], orelse=[])])])])])]), Assign(targets=[Name(id='format_checkers', ctx=Store())], value=Dict(keys=[Constant(value='draft3_format_checker'), Constant(value='draft4_format_checker'), Constant(value='draft6_format_checker'), Constant(value='draft7_format_checker'), Constant(value='draft201909_format_checker'), Constant(value='draft202012_format_checker')], values=[Name(id='Draft3Validator', ctx=Load()), Name(id='Draft4Validator', ctx=Load()), Name(id='Draft6Validator', ctx=Load()), Name(id='Draft7Validator', ctx=Load()), Name(id='Draft201909Validator', ctx=Load()), Name(id='Draft202012Validator', ctx=Load())])), Assign(targets=[Name(id='ValidatorForFormat', ctx=Store())], value=Call(func=Attribute(value=Name(id='format_checkers', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='name', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='ValidatorForFormat', ctx=Load()), ops=[IsNot()], comparators=[Constant(value=None)]), body=[Expr(value=Call(func=Attribute(value=Name(id='warnings', ctx=Load()), attr='warn', ctx=Load()), args=[JoinedStr(values=[Constant(value='Accessing jsonschema.'), FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1), Constant(value=' is deprecated and will be removed in a future release. Instead, use the FORMAT_CHECKER attribute on the corresponding Validator.')]), Name(id='DeprecationWarning', ctx=Load())], keywords=[keyword(arg='stacklevel', value=Constant(value=2))])), Return(value=Attribute(value=Name(id='ValidatorForFormat', ctx=Load()), attr='FORMAT_CHECKER', ctx=Load()))], orelse=[]), Raise(exc=Call(func=Name(id='AttributeError', ctx=Load()), args=[JoinedStr(values=[Constant(value='module '), FormattedValue(value=Name(id='__name__', ctx=Load()), conversion=-1), Constant(value=' has no attribute '), FormattedValue(value=Name(id='name', ctx=Load()), conversion=-1)])], keywords=[]))], decorator_list=[]), Assign(targets=[Name(id='__all__', ctx=Store())], value=List(elts=[Constant(value='Draft201909Validator'), Constant(value='Draft202012Validator'), Constant(value='Draft3Validator'), Constant(value='Draft4Validator'), Constant(value='Draft6Validator'), Constant(value='Draft7Validator'), Constant(value='FormatChecker'), Constant(value='SchemaError'), Constant(value='TypeChecker'), Constant(value='ValidationError'), Constant(value='validate')], ctx=Load()))], type_ignores=[])