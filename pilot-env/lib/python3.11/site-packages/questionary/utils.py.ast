Module(body=[Import(names=[alias(name='inspect')]), ImportFrom(module='typing', names=[alias(name='Any'), alias(name='Callable'), alias(name='Dict'), alias(name='List'), alias(name='Set')], level=0), Assign(targets=[Name(id='ACTIVATED_ASYNC_MODE', ctx=Store())], value=Constant(value=False)), FunctionDef(name='is_prompt_toolkit_3', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[ImportFrom(module='prompt_toolkit', names=[alias(name='__version__', asname='ptk_version')], level=0), Return(value=Call(func=Attribute(value=Name(id='ptk_version', ctx=Load()), attr='startswith', ctx=Load()), args=[Constant(value='3.')], keywords=[]))], decorator_list=[], returns=Name(id='bool', ctx=Load())), FunctionDef(name='default_values_of', args=arguments(posonlyargs=[], args=[arg(arg='func', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return all parameter names of ``func`` with a default value.')), Assign(targets=[Name(id='signature', ctx=Store())], value=Call(func=Attribute(value=Name(id='inspect', ctx=Load()), attr='signature', ctx=Load()), args=[Name(id='func', ctx=Load())], keywords=[])), Return(value=ListComp(elt=Name(id='k', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Attribute(value=Name(id='signature', ctx=Load()), attr='parameters', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[BoolOp(op=Or(), values=[Compare(left=Attribute(value=Name(id='v', ctx=Load()), attr='default', ctx=Load()), ops=[IsNot()], comparators=[Attribute(value=Attribute(value=Name(id='inspect', ctx=Load()), attr='Parameter', ctx=Load()), attr='empty', ctx=Load())]), Compare(left=Attribute(value=Name(id='v', ctx=Load()), attr='kind', ctx=Load()), ops=[NotEq()], comparators=[Attribute(value=Attribute(value=Name(id='inspect', ctx=Load()), attr='Parameter', ctx=Load()), attr='POSITIONAL_OR_KEYWORD', ctx=Load())])])], is_async=0)]))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='arguments_of', args=arguments(posonlyargs=[], args=[arg(arg='func', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return the parameter names of the function ``func``.')), Return(value=Call(func=Name(id='list', ctx=Load()), args=[Call(func=Attribute(value=Attribute(value=Call(func=Attribute(value=Name(id='inspect', ctx=Load()), attr='signature', ctx=Load()), args=[Name(id='func', ctx=Load())], keywords=[]), attr='parameters', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[]))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='used_kwargs', args=arguments(posonlyargs=[], args=[arg(arg='kwargs', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='func', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Returns only the kwargs which can be used by a function.\n\n    Args:\n        kwargs: All available kwargs.\n        func: The function which should be called.\n\n    Returns:\n        Subset of kwargs which are accepted by ``func``.\n    ')), Assign(targets=[Name(id='possible_arguments', ctx=Store())], value=Call(func=Name(id='arguments_of', ctx=Load()), args=[Name(id='func', ctx=Load())], keywords=[])), Return(value=DictComp(key=Name(id='k', ctx=Load()), value=Name(id='v', ctx=Load()), generators=[comprehension(target=Tuple(elts=[Name(id='k', ctx=Store()), Name(id='v', ctx=Store())], ctx=Store()), iter=Call(func=Attribute(value=Name(id='kwargs', ctx=Load()), attr='items', ctx=Load()), args=[], keywords=[]), ifs=[Compare(left=Name(id='k', ctx=Load()), ops=[In()], comparators=[Name(id='possible_arguments', ctx=Load())])], is_async=0)]))], decorator_list=[], returns=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load())), FunctionDef(name='required_arguments', args=arguments(posonlyargs=[], args=[arg(arg='func', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return all arguments of a function that do not have a default value.')), Assign(targets=[Name(id='defaults', ctx=Store())], value=Call(func=Name(id='default_values_of', ctx=Load()), args=[Name(id='func', ctx=Load())], keywords=[])), Assign(targets=[Name(id='args', ctx=Store())], value=Call(func=Name(id='arguments_of', ctx=Load()), args=[Name(id='func', ctx=Load())], keywords=[])), If(test=Name(id='defaults', ctx=Load()), body=[Assign(targets=[Name(id='args', ctx=Store())], value=Subscript(value=Name(id='args', ctx=Load()), slice=Slice(upper=UnaryOp(op=USub(), operand=Call(func=Name(id='len', ctx=Load()), args=[Name(id='defaults', ctx=Load())], keywords=[]))), ctx=Load()))], orelse=[]), Return(value=Name(id='args', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='missing_arguments', args=arguments(posonlyargs=[], args=[arg(arg='func', annotation=Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[Constant(value=Ellipsis), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='argdict', annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Return all arguments that are missing to call func.')), Return(value=BinOp(left=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Name(id='required_arguments', ctx=Load()), args=[Name(id='func', ctx=Load())], keywords=[])], keywords=[]), op=Sub(), right=Call(func=Name(id='set', ctx=Load()), args=[Call(func=Attribute(value=Name(id='argdict', ctx=Load()), attr='keys', ctx=Load()), args=[], keywords=[])], keywords=[])))], decorator_list=[], returns=Subscript(value=Name(id='Set', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), AsyncFunctionDef(name='activate_prompt_toolkit_async_mode', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Configure prompt toolkit to use the asyncio event loop.\n\n    Needs to be async, so we use the right event loop in py 3.5')), Global(names=['ACTIVATED_ASYNC_MODE']), If(test=UnaryOp(op=Not(), operand=Call(func=Name(id='is_prompt_toolkit_3', ctx=Load()), args=[], keywords=[])), body=[ImportFrom(module='prompt_toolkit.eventloop', names=[alias(name='use_asyncio_event_loop')], level=0), Expr(value=Call(func=Name(id='use_asyncio_event_loop', ctx=Load()), args=[], keywords=[]))], orelse=[]), Assign(targets=[Name(id='ACTIVATED_ASYNC_MODE', ctx=Store())], value=Constant(value=True))], decorator_list=[], returns=Constant(value=None))], type_ignores=[])