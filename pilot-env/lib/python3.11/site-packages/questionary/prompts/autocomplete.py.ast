Module(body=[ImportFrom(module='typing', names=[alias(name='Any'), alias(name='Callable'), alias(name='Dict'), alias(name='List'), alias(name='Optional'), alias(name='Tuple'), alias(name='Union'), alias(name='Iterable')], level=0), ImportFrom(module='prompt_toolkit.completion', names=[alias(name='CompleteEvent'), alias(name='Completer'), alias(name='Completion')], level=0), ImportFrom(module='prompt_toolkit.document', names=[alias(name='Document')], level=0), ImportFrom(module='prompt_toolkit.formatted_text', names=[alias(name='HTML')], level=0), ImportFrom(module='prompt_toolkit.shortcuts.prompt', names=[alias(name='PromptSession'), alias(name='CompleteStyle')], level=0), ImportFrom(module='prompt_toolkit.styles', names=[alias(name='Style'), alias(name='merge_styles')], level=0), ImportFrom(module='prompt_toolkit.lexers', names=[alias(name='SimpleLexer')], level=0), ImportFrom(module='questionary.constants', names=[alias(name='DEFAULT_QUESTION_PREFIX'), alias(name='DEFAULT_STYLE')], level=0), ImportFrom(module='questionary.prompts.common', names=[alias(name='build_validator')], level=0), ImportFrom(module='questionary.question', names=[alias(name='Question')], level=0), ClassDef(name='WordCompleter', bases=[Name(id='Completer', ctx=Load())], keywords=[], body=[AnnAssign(target=Name(id='choices_source', ctx=Store()), annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='ignore_case', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1), AnnAssign(target=Name(id='meta_information', ctx=Store()), annotation=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), simple=1), AnnAssign(target=Name(id='match_middle', ctx=Store()), annotation=Name(id='bool', ctx=Load()), simple=1), FunctionDef(name='__init__', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='choices', annotation=Subscript(value=Name(id='Union', ctx=Load()), slice=Tuple(elts=[Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load()), Subscript(value=Name(id='Callable', ctx=Load()), slice=Tuple(elts=[List(elts=[], ctx=Load()), Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())], ctx=Load()), ctx=Load())), arg(arg='ignore_case', annotation=Name(id='bool', ctx=Load())), arg(arg='meta_information', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='match_middle', annotation=Name(id='bool', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[Constant(value=True), Constant(value=None), Constant(value=True)]), body=[Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='choices_source', ctx=Store())], value=Name(id='choices', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='ignore_case', ctx=Store())], value=Name(id='ignore_case', ctx=Load())), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='meta_information', ctx=Store())], value=BoolOp(op=Or(), values=[Name(id='meta_information', ctx=Load()), Dict(keys=[], values=[])])), Assign(targets=[Attribute(value=Name(id='self', ctx=Load()), attr='match_middle', ctx=Store())], value=Name(id='match_middle', ctx=Load()))], decorator_list=[], returns=Constant(value=None)), FunctionDef(name='_choices', args=arguments(posonlyargs=[], args=[arg(arg='self')], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=IfExp(test=Call(func=Name(id='callable', ctx=Load()), args=[Attribute(value=Name(id='self', ctx=Load()), attr='choices_source', ctx=Load())], keywords=[]), body=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='choices_source', ctx=Load()), args=[], keywords=[]), orelse=Attribute(value=Name(id='self', ctx=Load()), attr='choices_source', ctx=Load())))], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), FunctionDef(name='_choice_matches', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='word_before_cursor', annotation=Name(id='str', ctx=Load())), arg(arg='choice', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Expr(value=Constant(value='Match index if found, -1 if not. ')), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='ignore_case', ctx=Load()), body=[Assign(targets=[Name(id='choice', ctx=Store())], value=Call(func=Attribute(value=Name(id='choice', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]))], orelse=[]), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='match_middle', ctx=Load()), body=[Return(value=Call(func=Attribute(value=Name(id='choice', ctx=Load()), attr='find', ctx=Load()), args=[Name(id='word_before_cursor', ctx=Load())], keywords=[]))], orelse=[If(test=Call(func=Attribute(value=Name(id='choice', ctx=Load()), attr='startswith', ctx=Load()), args=[Name(id='word_before_cursor', ctx=Load())], keywords=[]), body=[Return(value=Constant(value=0))], orelse=[Return(value=UnaryOp(op=USub(), operand=Constant(value=1)))])])], decorator_list=[], returns=Name(id='int', ctx=Load())), FunctionDef(name='_display_for_choice', args=arguments(posonlyargs=[], args=[arg(arg='choice', annotation=Name(id='str', ctx=Load())), arg(arg='index', annotation=Name(id='int', ctx=Load())), arg(arg='word_before_cursor', annotation=Name(id='str', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=Call(func=Attribute(value=Call(func=Name(id='HTML', ctx=Load()), args=[Constant(value='{}<b><u>{}</u></b>{}')], keywords=[]), attr='format', ctx=Load()), args=[Subscript(value=Name(id='choice', ctx=Load()), slice=Slice(upper=Name(id='index', ctx=Load())), ctx=Load()), Subscript(value=Name(id='choice', ctx=Load()), slice=Slice(lower=Name(id='index', ctx=Load()), upper=BinOp(left=Name(id='index', ctx=Load()), op=Add(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='word_before_cursor', ctx=Load())], keywords=[]))), ctx=Load()), Subscript(value=Name(id='choice', ctx=Load()), slice=Slice(lower=BinOp(left=Name(id='index', ctx=Load()), op=Add(), right=Call(func=Name(id='len', ctx=Load()), args=[Name(id='word_before_cursor', ctx=Load())], keywords=[])), upper=Call(func=Name(id='len', ctx=Load()), args=[Name(id='choice', ctx=Load())], keywords=[])), ctx=Load())], keywords=[]))], decorator_list=[Name(id='staticmethod', ctx=Load())], returns=Name(id='HTML', ctx=Load())), FunctionDef(name='get_completions', args=arguments(posonlyargs=[], args=[arg(arg='self'), arg(arg='document', annotation=Name(id='Document', ctx=Load())), arg(arg='complete_event', annotation=Name(id='CompleteEvent', ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='choices', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_choices', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='word_before_cursor', ctx=Store())], value=Attribute(value=Name(id='document', ctx=Load()), attr='text_before_cursor', ctx=Load())), If(test=Attribute(value=Name(id='self', ctx=Load()), attr='ignore_case', ctx=Load()), body=[Assign(targets=[Name(id='word_before_cursor', ctx=Store())], value=Call(func=Attribute(value=Name(id='word_before_cursor', ctx=Load()), attr='lower', ctx=Load()), args=[], keywords=[]))], orelse=[]), For(target=Name(id='choice', ctx=Store()), iter=Name(id='choices', ctx=Load()), body=[Assign(targets=[Name(id='index', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_choice_matches', ctx=Load()), args=[Name(id='word_before_cursor', ctx=Load()), Name(id='choice', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='index', ctx=Load()), ops=[Eq()], comparators=[UnaryOp(op=USub(), operand=Constant(value=1))]), body=[Continue()], orelse=[]), Assign(targets=[Name(id='display_meta', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='self', ctx=Load()), attr='meta_information', ctx=Load()), attr='get', ctx=Load()), args=[Name(id='choice', ctx=Load()), Constant(value='')], keywords=[])), Assign(targets=[Name(id='display', ctx=Store())], value=Call(func=Attribute(value=Name(id='self', ctx=Load()), attr='_display_for_choice', ctx=Load()), args=[Name(id='choice', ctx=Load()), Name(id='index', ctx=Load()), Name(id='word_before_cursor', ctx=Load())], keywords=[])), Expr(value=Yield(value=Call(func=Name(id='Completion', ctx=Load()), args=[Name(id='choice', ctx=Load())], keywords=[keyword(arg='start_position', value=UnaryOp(op=USub(), operand=Call(func=Name(id='len', ctx=Load()), args=[Name(id='choice', ctx=Load())], keywords=[]))), keyword(arg='display', value=Attribute(value=Name(id='display', ctx=Load()), attr='formatted_text', ctx=Load())), keyword(arg='display_meta', value=Name(id='display_meta', ctx=Load())), keyword(arg='style', value=Constant(value='class:answer')), keyword(arg='selected_style', value=Constant(value='class:selected'))])))], orelse=[])], decorator_list=[], returns=Subscript(value=Name(id='Iterable', ctx=Load()), slice=Name(id='Completion', ctx=Load()), ctx=Load()))], decorator_list=[]), FunctionDef(name='autocomplete', args=arguments(posonlyargs=[], args=[arg(arg='message', annotation=Name(id='str', ctx=Load())), arg(arg='choices', annotation=Subscript(value=Name(id='List', ctx=Load()), slice=Name(id='str', ctx=Load()), ctx=Load())), arg(arg='default', annotation=Name(id='str', ctx=Load())), arg(arg='qmark', annotation=Name(id='str', ctx=Load())), arg(arg='completer', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Completer', ctx=Load()), ctx=Load())), arg(arg='meta_information', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), arg(arg='ignore_case', annotation=Name(id='bool', ctx=Load())), arg(arg='match_middle', annotation=Name(id='bool', ctx=Load())), arg(arg='complete_style', annotation=Name(id='CompleteStyle', ctx=Load())), arg(arg='validate', annotation=Name(id='Any', ctx=Load())), arg(arg='style', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Name(id='Style', ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], kwarg=arg(arg='kwargs', annotation=Name(id='Any', ctx=Load())), defaults=[Constant(value=''), Name(id='DEFAULT_QUESTION_PREFIX', ctx=Load()), Constant(value=None), Constant(value=None), Constant(value=True), Constant(value=True), Attribute(value=Name(id='CompleteStyle', ctx=Load()), attr='COLUMN', ctx=Load()), Constant(value=None), Constant(value=None)]), body=[Expr(value=Constant(value='Prompt the user to enter a message with autocomplete help.\n\n    Example:\n        >>> import questionary\n        >>> questionary.autocomplete(\n        ...    \'Choose ant specie\',\n        ...    choices=[\n        ...         \'Camponotus pennsylvanicus\',\n        ...         \'Linepithema humile\',\n        ...         \'Eciton burchellii\',\n        ...         "Atta colombica",\n        ...         \'Polyergus lucidus\',\n        ...         \'Polyergus rufescens\',\n        ...    ]).ask()\n        ? Choose ant specie Atta colombica\n        \'Atta colombica\'\n\n    .. image:: ../images/autocomplete.gif\n\n    This is just a really basic example, the prompt can be customised using the\n    parameters.\n\n\n    Args:\n        message: Question text\n\n        choices: Items shown in the selection, this contains items as strings\n\n        default: Default return value (single value).\n\n        qmark: Question prefix displayed in front of the question.\n               By default this is a ``?``\n\n        completer: A prompt_toolkit :class:`prompt_toolkit.completion.Completion`\n                   implementation. If not set, a questionary completer implementation\n                   will be used.\n\n        meta_information: A dictionary with information/anything about choices.\n\n        ignore_case: If true autocomplete would ignore case.\n\n        match_middle: If true autocomplete would search in every string position\n                      not only in string begin.\n\n        complete_style: How autocomplete menu would be shown, it could be ``COLUMN``\n                        ``MULTI_COLUMN`` or ``READLINE_LIKE`` from\n                        :class:`prompt_toolkit.shortcuts.CompleteStyle`.\n\n        validate: Require the entered value to pass a validation. The\n                  value can not be submitted until the validator accepts\n                  it (e.g. to check minimum password length).\n\n                  This can either be a function accepting the input and\n                  returning a boolean, or an class reference to a\n                  subclass of the prompt toolkit Validator class.\n\n        style: A custom color and style for the question parts. You can\n               configure colors as well as font types for different elements.\n\n    Returns:\n        :class:`Question`: Question instance, ready to be prompted (using ``.ask()``).\n    ')), Assign(targets=[Name(id='merged_style', ctx=Store())], value=Call(func=Name(id='merge_styles', ctx=Load()), args=[List(elts=[Name(id='DEFAULT_STYLE', ctx=Load()), Name(id='style', ctx=Load())], ctx=Load())], keywords=[])), FunctionDef(name='get_prompt_tokens', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Return(value=List(elts=[Tuple(elts=[Constant(value='class:qmark'), Name(id='qmark', ctx=Load())], ctx=Load()), Tuple(elts=[Constant(value='class:question'), Call(func=Attribute(value=Constant(value=' {} '), attr='format', ctx=Load()), args=[Name(id='message', ctx=Load())], keywords=[])], ctx=Load())], ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='List', ctx=Load()), slice=Subscript(value=Name(id='Tuple', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='str', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), FunctionDef(name='get_meta_style', args=arguments(posonlyargs=[], args=[arg(arg='meta', annotation=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load()))], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[If(test=Name(id='meta', ctx=Load()), body=[For(target=Name(id='key', ctx=Store()), iter=Name(id='meta', ctx=Load()), body=[Assign(targets=[Subscript(value=Name(id='meta', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Store())], value=Call(func=Attribute(value=Call(func=Name(id='HTML', ctx=Load()), args=[Constant(value='<text>{}</text>')], keywords=[]), attr='format', ctx=Load()), args=[Subscript(value=Name(id='meta', ctx=Load()), slice=Name(id='key', ctx=Load()), ctx=Load())], keywords=[]))], orelse=[])], orelse=[]), Return(value=Name(id='meta', ctx=Load()))], decorator_list=[], returns=Subscript(value=Name(id='Optional', ctx=Load()), slice=Subscript(value=Name(id='Dict', ctx=Load()), slice=Tuple(elts=[Name(id='str', ctx=Load()), Name(id='Any', ctx=Load())], ctx=Load()), ctx=Load()), ctx=Load())), Assign(targets=[Name(id='validator', ctx=Store())], value=Call(func=Name(id='build_validator', ctx=Load()), args=[Name(id='validate', ctx=Load())], keywords=[])), If(test=Compare(left=Name(id='completer', ctx=Load()), ops=[Is()], comparators=[Constant(value=None)]), body=[If(test=UnaryOp(op=Not(), operand=Name(id='choices', ctx=Load())), body=[Raise(exc=Call(func=Name(id='ValueError', ctx=Load()), args=[Constant(value='No choices is given, you should use Text question.')], keywords=[]))], orelse=[]), Assign(targets=[Name(id='completer', ctx=Store())], value=Call(func=Name(id='WordCompleter', ctx=Load()), args=[Name(id='choices', ctx=Load())], keywords=[keyword(arg='ignore_case', value=Name(id='ignore_case', ctx=Load())), keyword(arg='meta_information', value=Call(func=Name(id='get_meta_style', ctx=Load()), args=[Name(id='meta_information', ctx=Load())], keywords=[])), keyword(arg='match_middle', value=Name(id='match_middle', ctx=Load()))]))], orelse=[]), Assign(targets=[Name(id='p', ctx=Store())], value=Call(func=Name(id='PromptSession', ctx=Load()), args=[Name(id='get_prompt_tokens', ctx=Load())], keywords=[keyword(arg='lexer', value=Call(func=Name(id='SimpleLexer', ctx=Load()), args=[Constant(value='class:answer')], keywords=[])), keyword(arg='style', value=Name(id='merged_style', ctx=Load())), keyword(arg='completer', value=Name(id='completer', ctx=Load())), keyword(arg='validator', value=Name(id='validator', ctx=Load())), keyword(arg='complete_style', value=Name(id='complete_style', ctx=Load())), keyword(value=Name(id='kwargs', ctx=Load()))])), Expr(value=Call(func=Attribute(value=Attribute(value=Name(id='p', ctx=Load()), attr='default_buffer', ctx=Load()), attr='reset', ctx=Load()), args=[Call(func=Name(id='Document', ctx=Load()), args=[Name(id='default', ctx=Load())], keywords=[])], keywords=[])), Return(value=Call(func=Name(id='Question', ctx=Load()), args=[Attribute(value=Name(id='p', ctx=Load()), attr='app', ctx=Load())], keywords=[]))], decorator_list=[], returns=Name(id='Question', ctx=Load()))], type_ignores=[])